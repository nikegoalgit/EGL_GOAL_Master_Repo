package fh0c;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFH-00000;
import corpcom3.XPXCT01;
import corpcom3.XPXDM01;
import corpcom3.XPXDS01;
import corpcom3.XPXDV01;
import corpcom3.XPXLC01;
import corpcom3.XPXQA01;
import corpcom3.XPXWH01;
import corpcom3.XPXX001;
import corpcom4.XSFHS-EXIT;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXX-MAP-FMAT-FL;
import corpcom7.XXX-RQT-DATA-FL;
import corpx1.XCTABRV;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XDMTBL;
import corpx1.XDSABRV;
import corpx1.XDSCD;
import corpx1.XDSTBL;
import corpx1.XDVABRV;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XLCABRV;
import corpx1.XLCCD;
import corpx1.XLCTBL;
import corpx1.XQATBL;
import corpx1.XWHTBL;
import corpx2.XQAABRV;
import corpx2.XQACD;
import corpx2.XWHABRV;
import corpx2.XWHCD;
import corpy2.YSMXOT;
import corpz3.ZZZSDT;
import fh.common.*;
import pg.common.PG2REC;
import sp.common.SP1ABRV;
import sp.common.SP1ID;
import sp.common.SP1REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=FH0C ****
// This application allows a user to inquire on and maintain a
// row in DFHIST.VFHSTY01.
// 
// The client enters all key information when the map is first
// displayed.  Once the keys are verified, the original
// cancellation, maintenance out, and authorized futures
// quantities are presented to the client.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// Once the change quantity has been entered and validated then
// update DFHIST.VFHSTY01, DFHIST.VFHCAT01, AND DFHIST.VFHLIN01
// and insert a row into DFHIST.VFHADJ01.  Once done the screen
// is redisplayed to the client indicating that the update was
// successful.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      02/08/94  kgraha  Cloned from FH0B.
// ff175    12/12/96  dsmith  changed the date range fill char
//                            to '0'.
// *********************
Program FH0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FH00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FH0CW00 FH0CW00; // record
  FH0CW01 FH0CW01; // record
  FH2REC FH2REC; // record
  FH3REC FH3REC; // record
  FH4REC FH4REC; // record
  FH8REC FH8REC; // record
  FHWREC FHWREC; // record
  PG2REC PG2REC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XDMTBL; // table
  use XDSTBL; // table
  use XDVTBL; // table
  use XLCTBL; // table
  use XQATBL; // table
  use XWHTBL; // table
  use FH0CM.FH0CM001, // form
  		FH0CM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFH-00000: XPFH-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FH0CM001 initial; /* M001 input/output*/
    set FH0CW00 empty; /* Working storage*/
    set FH0CW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
     /* ------------------------------------------------------------*/
     /* Enter default map values.*/
     /* ------------------------------------------------------------*/
    ;
    FH0CW01.XDVCD = "01";
    FH0CW01.XCTCD = "USA ";
    FH0CW01.XLCCD = "10";
    FH0CW01.XQACD = "01";
    FH0CW01.SP1ID = "*";
    FH0CW01.YSMXOT = "FT";
    ;
    FH0CW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    FH0CW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    FH0CW00.FH0CW-PF15-FLG = "N"; /* pf5 flag*/
    FH0CW00.FH0CW-PF16-FLG = "N"; /* pf6 flag*/
    FH0CW00.FH0CW-ENTER-FLG = "N"; /* enter flag*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FH0C-00000; /* Converse the main process*/
    ;
    ;
    FH0C-00000: FH0C-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FH0C-00000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FH0C

// Main process to display a map
Function FH0C-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area, display the map, and reset*/
   /* fields attributes to normal intensity.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Display requested pop up windows.  Verify the entered*/
   /* data.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FH0C-10000(); /* Obtain the data to display*/
  ;
  FH0C-20000(); /* Format and display the map*/
  ;
  FH0C-30000(); /* Check attention identifier*/
  ;
  FH0C-40000(); /* Verify the entered data*/
  ;
  FH0C-50000(); /* Process valid input request*/
  ;
  ;
end // end FH0C-00000

// Obtain the data to display
Function FH0C-10000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CW00.XXX-RQT-DATA-FL != "Y" /* Data was requested*/
   || converseVar.validationMsgNum != 0
  )                                 
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/
  ;
  FH0C-11000(); /* save map fields*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the original production cancel, maintenance out, and*/
   /* authorized futures quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FH0CS-IO4130-S();
  ;
   /* ------------------------------------------------------------*/
   /* Save fetched fields in display storage-- original customer*/
   /* cancel, maintenence out, and authorize futures quantities.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0)
    FH0CW01.FH2SLCXL = FH2REC.FH2SLCXL;
    FH0CW01.FH2MO = FH2REC.FH2MO;
    if (FH0CW-NEED-MO < 199311)
      FH0CW01.FH0CM-AUTH-FUT = FH2REC.FH-FRZ-PRAL-QTY;
    else
      FH0CW01.FH0CM-AUTH-FUT = FH2REC.FH-FRZ-SLSCNCL-QTY;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no errors occured, obtain the last revised date from*/
   /* DFHIST.VFHADJ01.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0)
    ;
    FH0CS-IO4750-S1();
    FH0CS-IO4750-N1();
    FH0CS-IO4750-C1();
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0)
    FH0CW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
  end
  ;
  ;
end // end FH0C-10000

// Move map data to WS
Function FH0C-11000()
   /* ------------------------------------------------------------*/
   /* Set format map switch to yes.*/
   /* Move the map key fields in display storage*/
   /* ------------------------------------------------------------*/
  ;
  XXX-MAP-FMAT-FL = "Y";
  ;
  ;
  set FH0CW01 empty; /* Clear the record*/
  ;
   /* ------------------------------------------------------------*/
   /* Move the map data to working storage*/
   /* Forecast need month*/
   /* Divison code and abbreviation*/
   /* Summary order type code and abbreviation*/
   /* Country code and abbreviation*/
   /* Life cycle code and abbreviation*/
   /* Quality code and abbreviation*/
   /* Life cycle code and abbreviation*/
   /* Style number, color code, dim code, style name, and color abrv*/
   /* ------------------------------------------------------------*/
  ;
  FH0CW01.FH0CM-NEED-YYMM = FH0CM001.FH0CM-NEED-YYMM;
  FH0CW01.XDVCD = FH0CM001.XDVCD;
  FH0CW01.XDVABRV = FH0CM001.XDVABRV;
  FH0CW01.YSMXOT = FH0CM001.YSMXOT;
  FH0CW01.FH0CM-SUM-XOT-DESC = FH0CM001.FH0CM-SUM-XOT-DESC;
  FH0CW01.XCTCD = FH0CM001.XCTCD;
  FH0CW01.XCTABRV = FH0CM001.XCTABRV;
  FH0CW01.XLCCD = FH0CM001.XLCCD;
  FH0CW01.XLCABRV = FH0CM001.XLCABRV;
  FH0CW01.XQACD = FH0CM001.XQACD;
  FH0CW01.XQAABRV = FH0CM001.XQAABRV;
  FH0CW01.SY1STNBR = FH0CM001.SY1STNBR;
  FH0CW01.SY2CLRID = FH0CM001.SY2CLRID;
  FH0CW01.XDMCD = FH0CM001.XDMCD;
  FH0CW01.SY1SSTNM = FH0CM001.SY1SSTNM;
  FH0CW01.SY2CLRAB = FH0CM001.SY2CLRAB;
  ;
   /* ------------------------------------------------------------*/
   /* Warehouse code and abbreviation*/
   /* Direct ship code and abbreviation*/
   /* Sales program id and abbreviation*/
   /* Production national account flag and abbreviation*/
   /* ------------------------------------------------------------*/
  ;
  FH0CW01.XWHCD = FH0CM001.XWHCD;
  FH0CW01.XWHABRV = FH0CM001.XWHABRV;
  FH0CW01.XDSCD = FH0CM001.XDSCD;
  FH0CW01.XDSABRV = FH0CM001.XDSABRV;
  FH0CW01.SP1ID = FH0CM001.SP1ID;
  FH0CW01.SP1ABRV = FH0CM001.SP1ABRV;
  FH0CW01.FH1PNAC = FH0CM001.FH1PNAC;
  ;
  ;
end // end FH0C-11000

// Format and converse the map
Function FH0C-20000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    FHWREC.XXX-MSG-NBR = converseVar.validationMsgNum;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CW00.XXX-MAP-FMAT-FL == "Y")
    FH0C-21000();
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FH0CM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FH0CM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FH0CM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message is to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FHWREC.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")  /* or message text*/
    ;
    if (FHWREC.XXX-MSG-NBR != 0) /* Message to display*/
      ;
      if (FHWREC.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FHWREC.XXX-MSG-NBR);
      end /* Message number*/
    else
      FH0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FH0CM001.XXX-MSG-LOC-ID = FHWREC.XXX-MSG-LOC-ID;
                                   /* Message location*/
    ;
    set FH0CM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FH0CM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FHWREC.XXX-MSG-LOC-ID = " "; /* Message location*/
  FHWREC.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FH0CM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FH0CM001.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FH0CM001.FH0CM-NEED-YYMM initialAttributes; /* Need month*/
  set FH0CM001.XDVCD initialAttributes; /* Division code*/
  set FH0CM001.YSMXOT initialAttributes; /* Sum order type*/
  set FH0CM001.XCTCD initialAttributes; /* Country code*/
  set FH0CM001.XLCCD initialAttributes; /* Life cycle code*/
  set FH0CM001.XQACD initialAttributes; /* Quality code*/
  set FH0CM001.SY1STNBR initialAttributes; /* Style number*/
  set FH0CM001.SY2CLRID initialAttributes; /* Color identification*/
  set FH0CM001.XDMCD initialAttributes; /* Dimension code*/
  set FH0CM001.XWHCD initialAttributes; /* Warehouse code*/
  set FH0CM001.XDSCD initialAttributes; /* Direct ship code*/
  set FH0CM001.SP1ID initialAttributes; /* Sales program ID*/
  set FH0CM001.FH1PNAC initialAttributes; /* National account*/
  set FH0CM001.FH2SLCXL initialAttributes; /* Original cancel*/
  set FH0CM001.FH2MO initialAttributes; /* Original maint out*/
  set FH0CM001.FH0CM-AUTH-FUT initialAttributes; /* Original auth fut*/
  set FH0CM001.FH8ADQTY initialAttributes; /* Change quantity*/
  set FH0CM001.FH0CM-ADJ-COMNT-1 initialAttributes; /* Comments #1*/
  set FH0CM001.FH0CM-ADJ-COMNT-2 initialAttributes; /* Comments #2*/
  ;
  ;
end // end FH0C-20000

// Format the data in the map
Function FH0C-21000()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* Set format map switch to no.*/
   /* ------------------------------------------------------------*/
  ;
  set FH0CM001 empty;
  ;
  FH0CW00.XXX-MAP-FMAT-FL = "N";
  ;
   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* Forecast need month*/
   /* Divison code and abbreviation*/
   /* Summary order type code and abbreviation*/
   /* Country code and abbreviation*/
   /* Life cycle code and abbreviation*/
   /* Quality code and abbreviation*/
   /* Life cycle code and abbreviation*/
   /* Style number, color code, dim code, style name, and color abrv*/
   /* ------------------------------------------------------------*/
  ;
  FH0CM001.FH0CM-NEED-YYMM = FH0CW01.FH0CM-NEED-YYMM;
  FH0CM001.XDVCD = FH0CW01.XDVCD;
  FH0CM001.XDVABRV = FH0CW01.XDVABRV;
  FH0CM001.YSMXOT = FH0CW01.YSMXOT;
  FH0CM001.FH0CM-SUM-XOT-DESC = FH0CW01.FH0CM-SUM-XOT-DESC;
  FH0CM001.XCTCD = FH0CW01.XCTCD;
  FH0CM001.XCTABRV = FH0CW01.XCTABRV;
  FH0CM001.XLCCD = FH0CW01.XLCCD;
  FH0CM001.XLCABRV = FH0CW01.XLCABRV;
  FH0CM001.XQACD = FH0CW01.XQACD;
  FH0CM001.XQAABRV = FH0CW01.XQAABRV;
  FH0CM001.SY1STNBR = FH0CW01.SY1STNBR;
  FH0CM001.SY2CLRID = FH0CW01.SY2CLRID;
  FH0CM001.XDMCD = FH0CW01.XDMCD;
  FH0CM001.SY1SSTNM = FH0CW01.SY1SSTNM;
  FH0CM001.SY2CLRAB = FH0CW01.SY2CLRAB;
  ;
   /* ------------------------------------------------------------*/
   /* Warehouse code and abbreviation*/
   /* Direct ship code and abbreviation*/
   /* sales program id and abbreviation*/
   /* Production national account flag and abbreviation*/
   /* ------------------------------------------------------------*/
  ;
  FH0CM001.XWHCD = FH0CW01.XWHCD;
  FH0CM001.XWHABRV = FH0CW01.XWHABRV;
  FH0CM001.XDSCD = FH0CW01.XDSCD;
  FH0CM001.XDSABRV = FH0CW01.XDSABRV;
  FH0CM001.SP1ID = FH0CW01.SP1ID;
  FH0CM001.SP1ABRV = FH0CW01.SP1ABRV;
  FH0CM001.FH1PNAC = FH0CW01.FH1PNAC;
  ;
   /* ------------------------------------------------------------*/
   /* Original sales cancel, maintenance out, and authorized*/
   /* futures quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FH0CM001.FH2SLCXL = FH0CW01.FH2SLCXL;
  FH0CM001.FH2MO = FH0CW01.FH2MO;
  FH0CM001.FH0CM-AUTH-FUT = FH0CW01.FH0CM-AUTH-FUT;
  ;
   /* ------------------------------------------------------------*/
   /* Change quantity*/
   /* Revised sales cancel, maintenence out, and authorized*/
   /* futures quantities.*/
   /* Comment fields.*/
   /* Last revised date from dfhist.vfhadj01.*/
   /* ------------------------------------------------------------*/
  ;
  FH0CM001.FH8ADQTY = FH0CW01.FH8ADQTY;
  FH0CM001.FH0CM-REV-SLSCXL = FH0CW01.FH0CM-REV-SLSCXL;
  FH0CM001.FH0CM-REV-MNTNOUT = FH0CW01.FH0CM-REV-MNTNOUT;
  FH0CM001.FH0CM-REV-AUTHFUT = FH0CW01.FH0CM-REV-AUTHFUT;
  FH0CM001.FH0CM-ADJ-COMNT-1 = FH0CW01.FH0CM-ADJ-COMNT-1;
  FH0CM001.FH0CM-ADJ-COMNT-2 = FH0CW01.FH0CM-ADJ-COMNT-2;
  FH0CM001.ZZZSDT = FH0CW01.ZZZSDT;
  ;
  ;
end // end FH0C-21000

// Check attention identifier
Function FH0C-30000()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested*/
   /* If PF15 or pf16 was pressed previously then*/
   /* display warning message*/
   /* reset pf15, pf16, and enter flags*/
   /* Otherwise*/
   /* transfer to the application*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FHWREC.XXX-MSG-LOC-ID = "30000"; /* Message location*/
      ;
      if (FH0CW-PF15-FLG == "Y" /* pf15 pressed previous*/
       || FH0CW-PF16-FLG == "Y") /* pf16 pressed previous*/
        converseLib.validationFailed(36); /* chg will be lost upon exiting*/
        FH0CW00.FH0CW-PF15-FLG = "N";
        FH0CW00.FH0CW-PF16-FLG = "N";
        FH0CW00.FH0CW-ENTER-FLG = "N";
      else
        COMMAREA.CAITEM = " "; /* clear appl item field*/
        XSFHS-EXIT(); /* Exit to another application*/
        set FH0CM001.CATOAP cursor, bold;
      end
      ;
    else
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If CANCEL, HELP, EXIT, OR MAIN MENU was requested*/
   /* If pf15 or pf16 was pressed previously then*/
   /* display warning message*/
   /* reset pf15 and pf16 flags*/
   /* Otherwise*/
   /* clear the map fields and exit*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1, help*/
   || converseVar.eventKey is pa2 /* PA2, cancel*/
   || converseVar.eventKey is pf3 /* PF3, exit*/
   || converseVar.eventKey is pf5) /* pf5, main menu*/
    ;
    if (FH0CW-PF15-FLG == "Y" /* pf15 pressed previous*/
     || FH0CW-PF16-FLG == "Y") /* pf16 pressed previous*/
      ;
      converseLib.validationFailed(36); /* chg will be lost upon exiting*/
      FHWREC.XXX-MSG-LOC-ID = "30000"; /* Message location*/
      FH0CW00.FH0CW-PF15-FLG = "N";
      FH0CW00.FH0CW-PF16-FLG = "N";
      FH0CW00.FH0CW-ENTER-FLG = "N";
      exit stack;
      ;
    else
      FH0C-32000();
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.*/
   /* if pf15 or pf16 was pressed*/
   /* if enter was previously pressed*/
   /* set pf15 or pf16 flags and display press pf13 message*/
   /* else pf15 or pf16 was pressed instead of enter*/
   /* set enter flage and display press pf15 or pf16 message*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15 /* pf15 was pressed*/
   || converseVar.eventKey is pf16) /* pf16 was pressed*/
    ;
    if (FH0CW00.FH0CW-ENTER-FLG == "Y") /* enter pressed previously*/
      FHWREC.XXX-MSG-NBR = 13; /* press pf13 to save*/
      if (converseVar.eventKey is pf15) /* pf15 was pressed*/
        FH0CW00.FH0CW-PF15-FLG = "Y";
        FH0CW00.FH0CW-PF16-FLG = "N";
      else
        FH0CW00.FH0CW-PF16-FLG = "Y";
        FH0CW00.FH0CW-PF15-FLG = "N";
      end
    else
      FH0CW00.FH0CW-ENTER-FLG = "Y";
      FHWREC.XXX-MSG-NBR = 29; /* press pf15 or pf16*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is enter) /* enter pressed*/
    FH0CW00.FH0CW-ENTER-FLG = "Y";
    FH0CW00.FH0CW-PF15-FLG = "N";
    FH0CW00.FH0CW-PF16-FLG = "N";
    FHWREC.XXX-MSG-NBR = 29; /* press pf15 or pf16*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Display an error message to the client if the PF key struck*/
   /* was not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not pf13 /* pf13 was not pressed*/
   && converseVar.eventKey not pf15 /* pf15 was not pressed*/
   && converseVar.eventKey not pf16 /* pf16 was not pressed*/
   && converseVar.eventKey not pa2  /* pa2 was not pressed*/
   && converseVar.eventKey not pf3  /* pf3 was not pressed*/
   && converseVar.eventKey not pf5  /* pf5 was not pressed*/
   && converseVar.eventKey not enter) /* enter was not pressed*/
    ;
    FHWREC.XXX-MSG-LOC-ID = "30000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    FH0CW00.FH0CW-ENTER-FLG = "N";
    FH0CW00.FH0CW-PF15-FLG = "N";
    FH0CW00.FH0CW-PF16-FLG = "N";
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FH0C-30000

// proc for pf3, pf4, or pa2
Function FH0C-32000()
   /* ------------------------------------------------------------*/
   /* If pf1, help, was pressed*/
   /* or pf3, exit, was pressed*/
   /* or pf5, main menu was pressed*/
   /* If pf1, help, was pressed*/
   /* exit to the help menu*/
   /* If pf3, exit, was pressed*/
   /* exit to the footwear history menu, fh0m*/
   /* If pf5, main menu was pressed*/
   /* exit to the main menu*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf5)
    ;
    if (converseVar.eventKey is pf1)
      COMMAREA.CAITEM = "FH0MM001"; /* appl find code*/
    end
    ;
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "FH0M"; /* System Menu*/
    end
    ;
    XSFHS-EXIT(); /* Exit to another application*/
    FHWREC.XXX-MSG-LOC-ID = "32000";
    COMMAREA.CAITEM = " ";
    ;
    exit stack;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If pa2, cancel, was pressed*/
   /* clear the map fields, set the defaults, and exit*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2)
    ;
    FH0CW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    FH0CW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    set FH0CW01 empty;
    FH0CW01.XDVCD = "01";
    FH0CW01.XCTCD = "USA ";
    FH0CW01.XLCCD = "10";
    FH0CW01.XQACD = "01";
    FH0CW01.SP1ID = "*";
    FH0CW00.FH0CW-ENTER-FLG = "N";
    FH0CW00.FH0CW-PF15-FLG = "N";
    FH0CW00.FH0CW-PF16-FLG = "N";
    ;
    set FH0CM001.FH0CM-NEED-YYMM cursor;
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end FH0C-32000

// Verify data that was entered
Function FH0C-40000()
   /* ------------------------------------------------------------*/
   /* If any lists were requested, display the pop up window.*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CM001.XDVCD == "?" /* division code*/
   || FH0CM001.XCTCD == "?" /* country code*/
   || FH0CM001.XLCCD == "?" /* life cycle code*/
   || FH0CM001.XQACD == "?" /* quality code*/
   || FH0CM001.XDMCD == "?" /* dimension code*/
   || FH0CM001.XWHCD == "?" /* warehouse code*/
   || FH0CM001.XDSCD == "?") /* direct ship code*/
    ;
    FH0C-41000(); /* Display corporate table lists*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ")
    ;
    FHWREC.XXX-MSG-LOC-ID = "40000";
    converseLib.validationFailed(7);
    set FH0CM001.CAITEM cursor, bold;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine if any of the required fields were changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CM001.FH0CM-NEED-YYMM == 0
   && FH0CM001.YSMXOT == " "
   && FH0CM001.SY1STNBR == " "
   && FH0CM001.SY2CLRID == " "
   && FH0CM001.XDMCD == " "
   && FH0CM001.XWHCD == " "
   && FH0CM001.XDSCD == " "
   && FH0CM001.FH1PNAC == " ")
    ;
    FH0C-42000(); /* Check for required key fields*/
    ;
  else
    if (FH0CM001.FH0CM-NEED-YYMM != FH0CW01.FH0CM-NEED-YYMM
     || FH0CM001.XDVCD != FH0CW01.XDVCD
     || FH0CM001.YSMXOT != FH0CW01.YSMXOT
     || FH0CM001.XLCCD != FH0CW01.XLCCD
     || FH0CM001.XQACD != FH0CW01.XQACD
     || FH0CM001.XCTCD != FH0CW01.XCTCD
     || FH0CM001.SY1STNBR != FH0CW01.SY1STNBR
     || FH0CM001.SY2CLRID != FH0CW01.SY2CLRID
     || FH0CM001.XDMCD != FH0CW01.XDMCD
     || FH0CM001.XWHCD != FH0CW01.XWHCD
     || FH0CM001.XDSCD != FH0CW01.XDSCD
     || FH0CM001.SP1ID != FH0CW01.SP1ID
     || FH0CM001.FH1PNAC != FH0CW01.FH1PNAC)
      ;
      FH0C-42000(); /* Check for required key fields*/
      FH0CW00.XXX-RQT-DATA-FL = "Y";
      ;
      if (FH0CW00.FH0CW-PF15-FLG == "Y" /* pf15 pressed*/
       || FH0CW00.FH0CW-PF16-FLG == "Y") /* pf16 pressed*/
        ;
        converseLib.validationFailed(27); /* can't modify keys*/
        FHWREC.XXX-MSG-LOC-ID = "40000";
        FH0CW00.FH0CW-PF15-FLG = "N";
        FH0CW00.FH0CW-PF16-FLG = "N";
        FH0CW00.FH0CW-ENTER-FLG = "N";
        FH0C-43000(); /* determine which key was changed*/
        ;
      end
      ;
    else
      ;
     /* ------------------------------------------------------------*/
     /* keys are the same, verify adjustment quantity and comments*/
     /* ------------------------------------------------------------*/
      ;
      if (FH0CM001.FH0CM-ADJ-COMNT-1 != FH0CW01.FH0CM-ADJ-COMNT-1
       || FH0CM001.FH0CM-ADJ-COMNT-2 != FH0CW01.FH0CM-ADJ-COMNT-2
       || FH0CM001.FH8ADQTY != FH0CW01.FH8ADQTY)
        ;
        if (converseVar.eventKey is pf13) /* pf13 was pressed*/
          ;
          converseLib.validationFailed(27); /* can't modify keys*/
          FHWREC.XXX-MSG-LOC-ID = "40000";
          FH0CW00.FH0CW-PF15-FLG = "N";
          FH0CW00.FH0CW-PF16-FLG = "N";
          FH0CW00.FH0CW-ENTER-FLG = "N";
          ;
          if (FH0CM001.FH0CM-ADJ-COMNT-1 != FH0CW01.FH0CM-ADJ-COMNT-1
           || FH0CM001.FH0CM-ADJ-COMNT-2 != FH0CW01.FH0CM-ADJ-COMNT-2)
            set FH0CM001.FH0CM-ADJ-COMNT-1 cursor, bold;
            set FH0CM001.FH0CM-ADJ-COMNT-2 bold;
          end
          if (FH0CM001.FH8ADQTY != FH0CW01.FH8ADQTY)
            set FH0CM001.FH8ADQTY cursor, bold;
          end
          ;
        else
          FH0C-44000();
          ;
        end
        ;
     /* ------------------------------------------------------------*/
     /* keys and adjustment quantity and comments are the same,*/
     /* a change may have occurred with pf15 or pf16 request.*/
     /* ------------------------------------------------------------*/
        ;
      else
        ;
        FH0C-44000();
        ;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any error was found*/
   /* Reset the enter flag*/
   /* Exit to display the map*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    ;
    FH0CW00.FH0CW-ENTER-FLG = "N";
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end FH0C-40000

// Process any pop up windows
Function FH0C-41000()
   /* ---------------------------------------------------------------*/
   /* determine whether ENTER was pressed to request the lists.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter)
    ;
    FHWREC.XXX-MSG-LOC-ID = "41000";
    converseLib.validationFailed(4); /* PA/PF key may not be used*/
    ;
    exit stack;
    ;
  end
  ;
   /* ---------------------------------------------------------------*/
   /* If requested display dimension pop up window*/
   /* ---------------------------------------------------------------*/
  ;
  if (FH0CM001.XDMCD == "?")
    ;
    XPXX001();
    XX0XW02.XX0XWHDR = "DIMENSION CODES";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPXDM01();
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      FH0CM001.XDMCD = FH0CW01.XDMCD;
    else
      FH0CM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX];
    end
    ;
    set FH0CM001.XDMCD cursor;
    ;
  end
  ;
   /* ---------------------------------------------------------------*/
   /* If requested display life cycle pop up window*/
   /* ---------------------------------------------------------------*/
  ;
  if (FH0CM001.XLCCD == "?")
    ;
    XPXX001();
    XX0XW02.XX0XWHDR = "LIFE CYCLE CODES";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPXLC01();
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      FH0CM001.XLCCD = FH0CW01.XLCCD;
    else
      FH0CM001.XLCCD = XLCTBL.XLCCD[XX0XWPIX];
    end
    ;
    set FH0CM001.XLCCD cursor;
    ;
  end
  ;
   /* ---------------------------------------------------------------*/
   /* If requested display warehouse pop up window*/
   /* ---------------------------------------------------------------*/
  ;
  if (FH0CM001.XWHCD == "?")
    ;
    XPXX001();
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPXWH01();
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      FH0CM001.XWHCD = FH0CW01.XWHCD;
    else
      FH0CM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX];
    end
    ;
    set FH0CM001.XWHCD cursor;
    ;
  end
  ;
   /* ---------------------------------------------------------------*/
   /* If requested display division pop up window*/
   /* ---------------------------------------------------------------*/
  ;
  if (FH0CM001.XDVCD == "?")
    ;
    XPXX001();
    XX0XW02.XX0XWHDR = "DIVISION CODES";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPXDV01();
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      FH0CM001.XDVCD = FH0CW01.XDVCD;
    else
      FH0CM001.XDVCD = XDVTBL.XDVCD[XX0XWPIX];
    end
    ;
    set FH0CM001.XDVCD cursor;
    ;
  end
  ;
   /* ---------------------------------------------------------------*/
   /* If requested display country pop up window*/
   /* ---------------------------------------------------------------*/
  ;
  if (FH0CM001.XCTCD == "?")
    ;
    XPXX001();
    XX0XW02.XX0XWHDR = "COUNTRY CODES";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPXCT01();
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      FH0CM001.XCTCD = FH0CW01.XCTCD;
    else
      FH0CM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
    end
    ;
    set FH0CM001.XCTCD cursor;
    ;
  end
  ;
   /* ---------------------------------------------------------------*/
   /* If requested display direct ship pop up window*/
   /* ---------------------------------------------------------------*/
  ;
  if (FH0CM001.XDSCD == "?")
    ;
    XPXX001();
    XX0XW02.XX0XWHDR = "DIRECT SHIP CODES";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPXDS01();
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      FH0CM001.XDSCD = FH0CW01.XDSCD;
    else
      FH0CM001.XDSCD = XDSTBL.XDSCD[XX0XWPIX];
    end
    ;
    set FH0CM001.XDSCD cursor;
    ;
  end
  ;
   /* ---------------------------------------------------------------*/
   /* If requested display quality pop up window*/
   /* ---------------------------------------------------------------*/
  ;
  if (FH0CM001.XQACD == "?")
    ;
    XPXX001();
    XX0XW02.XX0XWHDR = "QUALITY CODES";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPXQA01();
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      FH0CM001.XQACD = FH0CW01.XQACD;
    else
      FH0CM001.XQACD = XQATBL.XQACD[XX0XWPIX];
    end
    ;
    set FH0CM001.XQACD cursor;
    ;
  end
  ;
   /* ---------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and that*/
   /* ENTER must be pressed to process any changes.*/
   /* ---------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
  
  ;
  FHWREC.XXX-MSG-LOC-ID = "41000";
  converseLib.validationFailed(23);
  ;
  exit stack;
  ;
  ;
end // end FH0C-41000

// Verify key data
Function FH0C-42000()
   /* ------------------------------------------------------------------*/
   /* Verify quality code*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.XQACD > " "           
   && FH0CM001.XQACD in XQATBL.XQACD /* code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    ;
    FH0CM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
    ;
  else
    FH0CM001.XQAABRV = " ";
    set FH0CM001.XQACD cursor, bold;
    converseLib.validationFailed(8);
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify summary order type group code.*/
   /* Only "FT", futures or "PR", prop are valid codes.*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.YSMXOT == "FT")
    FH0CM001.FH0CM-SUM-XOT-DESC = "FUTURES";
  else
    if (FH0CM001.YSMXOT == "PR")
      FH0CM001.FH0CM-SUM-XOT-DESC = "PROP   ";
    else
      FH0CM001.FH0CM-SUM-XOT-DESC = " ";
      set FH0CM001.YSMXOT cursor, bold;
      converseLib.validationFailed(21);
    end
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify production national account flag equal "Y"es or "N"o.*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.FH1PNAC == "Y"
   || FH0CM001.FH1PNAC == "N")
    ;
     /* next sentence*/
    ;
  else
    set FH0CM001.FH1PNAC cursor, bold;
    converseLib.validationFailed(24);
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify direct ship code*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.XDSCD >= " "          
   && FH0CM001.XDSCD in XDSTBL.XDSCD /* code in table*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FH0CM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
  else
    ;
    FH0CM001.XDSABRV = " ";
    set FH0CM001.XDSCD cursor, bold;
    converseLib.validationFailed(30);
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify country code*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.XCTCD > " "           
   && FH0CM001.XCTCD in XCTTBL.XCTCD /* code in table*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    ;
    FH0CM001.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
    ;
  else
    FH0CM001.XCTABRV = " ";
    set FH0CM001.XCTCD cursor, bold;
    converseLib.validationFailed(15);
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify division code.*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.XDVCD > " "           
   && FH0CM001.XDVCD in XDVTBL.XDVCD /* code in table*/
   && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    ;
    FH0CM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
    ;
  else
    FH0CM001.XDVABRV = " ";
    set FH0CM001.XDVCD cursor, bold;
    converseLib.validationFailed(22);
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify sales program id*/
   /* An "*" indicates all (any) sales program id*/
   /* A " " indicates no sales program id*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.SP1ID != "*"
   && FH0CM001.SP1ID != " ")
    FH0CS-IO0070-S(); /* fetch sales prgm abrv*/
  else
    FH0CM001.SP1ABRV = " ";
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify warehouse code*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.XWHCD == " ")
    ;
     /* next sentence*/
    ;
  else
    if (FH0CM001.XWHCD in XWHTBL.XWHCD /* code in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FH0CM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      set FH0CM001.XWHCD cursor, bold;
      FH0CM001.XWHABRV = " ";
      converseLib.validationFailed(26);
    end
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify relationship between warehouse and direct ship codes*/
   /* If a direct ship code = 1 then no warehouses code s/b entered*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.XWHCD == " ")
    if (FH0CM001.XDSCD == "1")
      ;
       /* next sentence*/
      ;
    else
      set FH0CM001.XWHCD cursor, bold;
      set FH0CM001.XDSCD bold;
      FH0CM001.XWHABRV = " ";
      FH0CM001.XDVABRV = " ";
      converseLib.validationFailed(18); /* invalid combo*/
    end
  else
    if (FH0CM001.XDSCD == "1")
      set FH0CM001.XWHCD cursor, bold;
      set FH0CM001.XDSCD bold;
      FH0CM001.XWHABRV = " ";
      FH0CM001.XDVABRV = " ";
      converseLib.validationFailed(18); /* invalid combo*/
    end
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify life cycle code*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.XLCCD > " "           
   && FH0CM001.XLCCD in XLCTBL.XLCCD /* code in table*/
   && XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    ;
    FH0CM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
    ;
  else
    FH0CM001.XLCABRV = " ";
    set FH0CM001.XLCCD cursor, bold;
    converseLib.validationFailed(31);
  end
  ;
   /* ------------------------------------------------------------------*/
   /* Verify style/color/dim codes*/
   /* ------------------------------------------------------------------*/
  ;
  if (FH0CM001.SY1STNBR > " "
   && FH0CM001.SY2CLRID > " "
   && FH0CM001.XDMCD > " ")
    ;
    FH0CS-IO3120-S();
    ;
  else
    set FH0CM001.SY1STNBR cursor, bold;
    set FH0CM001.SY2CLRID bold;
    set FH0CM001.XDMCD bold;
    converseLib.validationFailed(14);
    FH0CM001.SY1SSTNM = " ";
    FH0CM001.SY2CLRAB = " ";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify need month*/
   /* Verify month is between January and December*/
   /* ------------------------------------------------------------*/
  ;
  FH0CW01.FH0CM-NEED-YYMM = FH0CM001.FH0CM-NEED-YYMM;
  if (FH0CW01.FH0CW-NEED-MM >= 01
   && FH0CW01.FH0CW-NEED-MM <= 12)
    ;
     /* next sentence*/
    ;
  else
    set FH0CM001.FH0CM-NEED-YYMM cursor, bold;
    converseLib.validationFailed(12);
  end
  ;
   /* ------------------------------------------------------------*/
   /* If an error occurred*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    FHWREC.XXX-MSG-LOC-ID = "42000";
  end
  ;
  ;
end // end FH0C-42000

// Check for required key fields
Function FH0C-43000()
   /* ------------------------------------------------------------*/
   /* Determine which fields changed and highlight those fields*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CM001.XQACD != FH0CW01.XQACD)
    set FH0CM001.XQACD cursor, bold;
  end
  ;
  if (FH0CM001.YSMXOT != FH0CW01.YSMXOT)
    set FH0CM001.YSMXOT cursor, bold;
  end
  ;
  if (FH0CM001.FH1PNAC != FH0CW01.FH1PNAC)
    set FH0CM001.FH1PNAC cursor, bold;
  end
  ;
  if (FH0CM001.XDSCD != FH0CW01.XDSCD)
    set FH0CM001.XDSCD cursor, bold;
  end
  ;
  if (FH0CM001.XCTCD != FH0CW01.XCTCD)
    set FH0CM001.XCTCD cursor, bold;
  end
  ;
  if (FH0CM001.XDVCD != FH0CW01.XDVCD)
    set FH0CM001.XDVCD cursor, bold;
  end
  ;
  if (FH0CM001.SP1ID != FH0CW01.SP1ID)
    set FH0CM001.SP1ID cursor, bold;
  end
  ;
  if (FH0CM001.XWHCD != FH0CW01.XWHCD)
    set FH0CM001.XWHCD cursor, bold;
  end
  ;
  if (FH0CM001.XLCCD != FH0CW01.XLCCD)
    set FH0CM001.XLCCD cursor, bold;
  end
  ;
  if (FH0CM001.SY1STNBR != FH0CW01.SY1STNBR
   || FH0CM001.SY2CLRID != FH0CW01.SY2CLRID
   || FH0CM001.XDMCD != FH0CW01.XDMCD)
    set FH0CM001.SY1STNBR cursor, bold;
    set FH0CM001.SY2CLRID bold;
    set FH0CM001.XDMCD bold;
  end
  ;
  if (FH0CM001.FH0CM-NEED-YYMM != FH0CW01.FH0CM-NEED-YYMM)
    set FH0CM001.FH0CM-NEED-YYMM cursor, bold;
  end
  ;
  ;
end // end FH0C-43000

// Verify chg qty and comments
Function FH0C-44000()
   /* ------------------------------------------------------------*/
   /* Set format the map flag.*/
   /* Verify comments are present.*/
   /* Verify change quantity.*/
   /* ------------------------------------------------------------*/
  ;
  FH0CW00.XXX-MAP-FMAT-FL = "Y";
  ;
   /* ------------------------------------------------------------*/
   /* Verify comments are present*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CM001.FH0CM-ADJ-COMNT-1 != " "
   || FH0CM001.FH0CM-ADJ-COMNT-2 != " ")
    ;
    FH0CW01.FH0CM-ADJ-COMNT-1 = FH0CM001.FH0CM-ADJ-COMNT-1;
    FH0CW01.FH0CM-ADJ-COMNT-2 = FH0CM001.FH0CM-ADJ-COMNT-2;
    ;
  else
    set FH0CM001.FH0CM-ADJ-COMNT-1 cursor, bold;
    set FH0CM001.FH0CM-ADJ-COMNT-2 bold;
    converseLib.validationFailed(28); /* comments must be entered*/
    FHWREC.XXX-MSG-LOC-ID = "44000";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify a change quantity was entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CM001.FH8ADQTY == 0)
    set FH0CM001.FH8ADQTY cursor, bold;
    converseLib.validationFailed(33); /* please enter data*/
    FHWREC.XXX-MSG-LOC-ID = "44000";
  else
    FH0CW01.FH8ADQTY = FH0CM001.FH8ADQTY;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify change quantity.*/
   /* Calculate new sales cancellation, maintenance out, and*/
   /* authorized futures quantities*/
   /* Determine if the entered changed quantity is valid*/
   /* If change quantity < 0           --negative change*/
   /* determine if the changed quantity entered is valid, by*/
   /* checking sales cancellation and authorized futures to see*/
   /* if the revised quantities are positive*/
   /* else if change quantity > 0      --positive change*/
   /* determine if the changed quantity entered is valid, by*/
   /* checking maintenance out to see if the revised quantity is*/
   /* positive*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0)
    FH0CW01.FH0CM-REV-SLSCXL = 0; /* init revised qty fields*/
    FH0CW01.FH0CM-REV-MNTNOUT = 0; /* init revised qty fields*/
    FH0CW01.FH0CM-REV-AUTHFUT = 0; /* init revised qty fields*/
    ;
    FH0CW01.FH0CM-REV-SLSCXL = FH0CM001.FH2SLCXL + FH0CM001.FH8ADQTY;
    FH0CW01.FH0CM-REV-MNTNOUT = FH0CM001.FH2MO - FH0CM001.FH8ADQTY;
    ;
    if (FH0CW00.FH0CW-PF15-FLG == "Y"
     && FH0CM001.YSMXOT == "FT")
      FH0CW01.FH0CM-REV-AUTHFUT = FH0CM001.FH0CM-AUTH-FUT +       FH0CM001.FH8ADQTY;
    else
      FH0CW01.FH0CM-REV-AUTHFUT = FH0CM001.FH0CM-AUTH-FUT;
    end
    ;
    if (FH0CM001.FH8ADQTY < 0) /* negative change*/
      FH0C-44100();
    else
      if (FH0CM001.FH8ADQTY > 0) /* positive change*/
        FH0C-44200();
      end
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    FH0CW00.FH0CW-PF15-FLG = "N";
    FH0CW00.FH0CW-PF16-FLG = "N";
  end
  ;
  ;
end // end FH0C-44000

// Valid a negative adjust qty
Function FH0C-44100()
   /* ------------------------------------------------------------*/
   /* Determine if the entered changed quantity is valid*/
   /* If PF15 was pressed and if this is a "FT" futures record*/
   /* determine if the changed quantity entered is valid, by*/
   /* checking customer cancellation and authorized futures to see*/
   /* if the revised quantities are negative.  These quantities*/
   /* should always be positive.*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CW00.FH0CW-PF15-FLG == "Y" /* adj auth futr*/
   && FH0CM001.YSMXOT == "FT")      /* futr order type*/
    ;
    if (FH0CW01.FH0CM-REV-AUTHFUT < 0) /* revised auth futr is negative*/
      converseLib.validationFailed(16);
      FHWREC.XXX-MSG-LOC-ID = "44100";
      set FH0CM001.FH8ADQTY cursor, bold;
      set FH0CM001.FH0CM-AUTH-FUT bold;
      FH0CW01.FH8ADQTY = 0;
      FH0CW00.XXX-MAP-FMAT-FL = "N";
    end
    ;
    if (FH0CW01.FH0CM-REV-SLSCXL < 0) /* revised cust cxl is negative*/
      converseLib.validationFailed(25);
      FHWREC.XXX-MSG-LOC-ID = "44100";
      set FH0CM001.FH8ADQTY cursor, bold;
      set FH0CM001.FH2SLCXL bold;
      FH0CW01.FH8ADQTY = 0;
      FH0CW00.XXX-MAP-FMAT-FL = "N";
    end
    ;
  else /* PF16 was pressed or this is a "PR"*/
                                   /* record and either PF5 or*/
   /* PF16 was pressed*/
    ;
    if (FH0CW01.FH0CM-REV-SLSCXL < 0) /* revised cust cxl is negative*/
      converseLib.validationFailed(25);
      FHWREC.XXX-MSG-LOC-ID = "44100";
      set FH0CM001.FH8ADQTY cursor, bold;
      set FH0CM001.FH2SLCXL bold;
      FH0CW01.FH8ADQTY = 0;
      FH0CW00.XXX-MAP-FMAT-FL = "N";
    end
  end
  ;
  ;
end // end FH0C-44100

// Valid a positive adjust qty
Function FH0C-44200()
   /* ------------------------------------------------------------*/
   /* Determine if the entered changed quantity is valid.*/
   /* If PF15 was pressed and if this is a "FT" futures record*/
   /* determine if the changed quantity entered is valid, by*/
   /* adding the requested change quantity to authorized futures*/
   /* and checking maintenance out to see if the revised quantity*/
   /* is negative.  This quantity should always be positive.*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CW00.FH0CW-PF15-FLG == "Y" /* adj auth futr*/
   && FH0CM001.YSMXOT == "FT")      /* futr order type*/
    ;
      /* next sentence*/
    ;
  else
    ;
    if (FH0CW01.FH0CM-REV-MNTNOUT < 0) /* revised mntn out is negative*/
      converseLib.validationFailed(17);
      FHWREC.XXX-MSG-LOC-ID = "44200";
      set FH0CM001.FH8ADQTY cursor, bold;
      set FH0CM001.FH2MO bold;
      FH0CW01.FH8ADQTY = 0;
      FH0CW00.XXX-MAP-FMAT-FL = "N";
    end
  end
  ;
  ;
end // end FH0C-44200

// Process valid input request
Function FH0C-50000()
   /* ------------------------------------------------------------*/
   /* Perform all inserts and updates for this change, if PF15 or*/
   /* PF16 was pressed previously and PF13 was recently pressed,*/
   /* otherwise do not update the tables.*/
   /* ------------------------------------------------------------*/
  ;
  if (FH0CW00.FH0CW-PF15-FLG == "Y"
   || FH0CW00.FH0CW-PF16-FLG == "Y")
    ;
    if (converseVar.eventKey is pf13) /* pf13 was pressed*/
      ;
      FH0C-52000(); /* update process*/
      ;
    else /* pf13 was not pressed*/
      ;
      converseLib.validationFailed(13); /* press pf13*/
      FHWREC.XXX-MSG-LOC-ID = "50000";
    end
    ;
  end
  ;
  ;
end // end FH0C-50000

// Process valid update/insert
Function FH0C-52000()
   /* ------------------------------------------------------------*/
   /* Update the changed data in DFHIST.VFHSTY01, DFHSIT.VFHCAT01,*/
   /* and DFHIST.VFHLIN01, and insert a row into DFHIST.VFHADJ01.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* NOTE: the insert to dfhist.vfhadj01 MUST be done before the*/
   /* update to dfhist.vfhsty01.  We want to capture the original*/
   /* quantities in dfhist.vfhsty01 before the actual update*/
   /* takes places.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Obtain date and time*/
  ;
  FH0CS-IO4750-A(); /* Add row to vfhadj01*/
  ;
  FH0CS-IO4130-U(); /* Update row in vfhsty01*/
  ;
  FH0CS-IO4120-S(); /* Select appr row in vfhcat01*/
  FH0CS-IO4120-U(); /* Update row in vfhcat01*/
  ;
  FH0CS-IO4110-S(); /* Select appr row in vfhlin01*/
  FH0CS-IO4110-U(); /* Update row in vfhlin01*/
  ;
  if (converseVar.validationMsgNum == 20) /* row update since displayed*/
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    FH0CW00.FH0CW-PF15-FLG = "N";
    FH0CW00.FH0CW-PF16-FLG = "N";
    FH0CW00.FH0CW-ENTER-FLG = "N";
    FH0CW00.XXX-RQT-DATA-FL = "Y";
    ;
    exit stack;
    ;
  end
   /* ------------------------------------------------------------*/
   /* Commit all changes and refresh the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "52000";
  converseLib.validationFailed(1); /* Table update was completed*/
  FH0CW00.XXX-RQT-DATA-FL = "Y";
  ;
  FH0C-52100(); /* adj revised and original flds*/
  ;
  ;
end // end FH0C-52000

// Reset qty fields
Function FH0C-52100()
   /* --------------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* Move revised data fields to original data fields.*/
   /* Initial revised data fields.*/
   /* --------------------------------------------------------------------*/
  ;
  set FH0CM001.FH0CM-NEED-YYMM cursor;
  ;
  set FH0CW01 empty;
  ;
  FH0CW01.XDVCD = "01";
  FH0CW01.XCTCD = "USA ";
  FH0CW01.XLCCD = "10";
  FH0CW01.XQACD = "01";
  FH0CW01.SP1ID = "*";
  FH0CW01.YSMXOT = "FT";
  ;
  FH0CW00.FH0CW-PF15-FLG = "N";
  FH0CW00.FH0CW-PF16-FLG = "N";
  FH0CW00.FH0CW-ENTER-FLG = "N";
  ;
  FH0CW00.XXX-MAP-FMAT-FL = "Y";
  ;
  ;
end // end FH0C-52100

// Obtain sls prgm id abrv
Function FH0CS-IO0070-S()
   /* ------------------------------------------------------------*/
   /* Clear the record and move the data to the record*/
   /* ------------------------------------------------------------*/
  ;
  set SP1REC empty; /* Clear record*/
  ;
  SP1REC.SP1ID = FH0CM001.SP1ID;
  ;
  try
    call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
        ;
        FH0CM001.SP1ABRV = SP1REC.SP1ABRV; /* Sls pgm abrv*/
        ;
      else
        ;
        set FH0CM001.SP1ID cursor, bold; /* Highlight*/
        FH0CM001.SP1ABRV = " "; /* Sls pgm abrv*/
        converseLib.validationFailed(19);
        FH0CM001.XXX-MSG-LOC-ID = "IO0070-S";
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO0070-S"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DSPGM   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPGM001"; /* Table view name*/
  TA1REC.TA1TBLKE = SP1REC.SP1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FH0CS-IO0070-S

// Obtain sty name, clr abrv
Function FH0CS-IO3120-S()
   /* ------------------------------------------------------------*/
   /* Clear the record and move data to the record*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* Clear the record*/
  ;
  PG2REC.XGPCD = "02"; /* gpc code*/
  PG2REC.SY1STNBR = FH0CM001.SY1STNBR;
  PG2REC.SY2CLRID = FH0CM001.SY2CLRID;
  PG2REC.XDMCD = FH0CM001.XDMCD;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FH0CM001.SY1SSTNM = PG2REC.SY1SSTNM; /* Short style name*/
      FH0CM001.SY2CLRAB = PG2REC.SY2CLRAB; /* Color abreviation*/
      return;
      ;
    else
      ;
      set FH0CM001.SY1STNBR cursor, bold;
      set FH0CM001.SY2CLRID bold;
      set FH0CM001.XDMCD bold;
      FH0CM001.SY1SSTNM = " "; /* Clear style abrv*/
      FH0CM001.SY2CLRAB = " "; /* Clear color abrv*/
      FHWREC.XXX-MSG-LOC-ID = "IO3120-S"; /* Module identification*/
      converseLib.validationFailed(14); /* Combo invalid message*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO3120-S"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FH0CS-IO3120-S

// Select a row in VFHLIN01
Function FH0CS-IO4110-S()
   /* -----------------------------------------------------------*/
   /* Clear the record and move data to the record*/
   /* -----------------------------------------------------------*/
  ;
  set FH4REC empty; /* clear record*/
  ;
  FH4REC.XPRCD = PG2REC.XPRCD; /* Prod type code*/
  FH4REC.XPLCD = PG2REC.XPLCD; /* Line code*/
  FH4REC.FH1FNDMO = FH0CW01.FH0CW-NEED-MO;
  FH4REC.XDVCD = FH0CW01.XDVCD; /* Division code*/
  FH4REC.YSMXOT = FH0CW01.YSMXOT; /* Sum order type code*/
  FH4REC.XCTCD = FH0CW01.XCTCD; /* Country code*/
  FH4REC.XLCCD = FH0CW01.XLCCD; /* Life cycle code*/
  FH4REC.XQACD = FH0CW01.XQACD; /* Quality code*/
  FH4REC.XDSCD = FH0CW01.XDSCD; /* Direct ship code*/
  FH4REC.FH1PNAC = FH0CW01.FH1PNAC; /* National account*/
  ;
   /* ------------------------------------------------------------*/
   /* Select a table row in VFHLIN01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4110" ("S ", SQLCA, FH4REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4110-S"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHLIN01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH4REC.FH4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
  ;
end // end FH0CS-IO4110-S

// Update a row in VFHLIN01
Function FH0CS-IO4110-U()
   /* -----------------------------------------------------------*/
   /* Move data to the record*/
   /* -----------------------------------------------------------*/
  ;
  FH4REC.FH3CNCL = FH4REC.FH3CNCL + FH0CW01.FH8ADQTY; /* Accum*/
  ;
  if (FH0CW00.FH0CW-PF15-FLG == "Y" /* adj auth futr*/
   && FH0CM001.YSMXOT == "FT")     
    ;
    if (FH0CW01.FH0CW-NEED-MO < 199311) /* Need month < 199311*/
   /* Accum*/
      FH4REC.FH-FRZ-PRAL-QTY = FH4REC.FH-FRZ-PRAL-QTY       + FH0CW01.FH8ADQTY;
    else
   /* Accum*/
      FH4REC.FH-FRZ-CNCL-QTY = FH4REC.FH-FRZ-CNCL-QTY       + FH0CW01.FH8ADQTY;
    end
  end
  ;
  FH4REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Update*/
  ;
   /* ------------------------------------------------------------*/
   /* Update a table row in VFHLIN01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4110" ("U ", SQLCA, FH4REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(20);
        FHWREC.XXX-MSG-LOC-ID = "IO4110-U"; /* Module identification*/
      end
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4110-U"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHLIN01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH4REC.FH4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
  ;
end // end FH0CS-IO4110-U

// Select a row in VFHCAT01
Function FH0CS-IO4120-S()
   /* -----------------------------------------------------------*/
   /* Format the data from working storage to the record*/
   /* -----------------------------------------------------------*/
  ;
  set FH3REC empty; /* clear record*/
  ;
  FH3REC.XPRCD = PG2REC.XPRCD; /* Prod type code*/
  FH3REC.XPCCD = PG2REC.XPCCD; /* Category code*/
  FH3REC.FH1FNDMO = FH0CW01.FH0CW-NEED-MO; /* Need month*/
  FH3REC.XDVCD = FH0CW01.XDVCD; /* Division code*/
  FH3REC.YSMXOT = FH0CW01.YSMXOT; /* Sum order type code*/
  FH3REC.XCTCD = FH0CW01.XCTCD; /* Country code*/
  FH3REC.XLCCD = FH0CW01.XLCCD; /* Life cycle code*/
  FH3REC.XQACD = FH0CW01.XQACD; /* Quality code*/
  FH3REC.XDSCD = FH0CW01.XDSCD; /* Direct ship code*/
  FH3REC.FH1PNAC = FH0CW01.FH1PNAC; /* National account*/
  ;
   /* ------------------------------------------------------------*/
   /* Select a table row in VFHCAT01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4120" ("S ", SQLCA, FH3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4120-S"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH3REC.FH3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
  ;
  ;
end // end FH0CS-IO4120-S

// Update a row in VFHCAT01
Function FH0CS-IO4120-U()
   /* -----------------------------------------------------------*/
   /* Format the data from working storage to the record*/
   /* -----------------------------------------------------------*/
  ;
  FH3REC.FH3CNCL = FH3REC.FH3CNCL + FH0CW01.FH8ADQTY; /* Accum*/
  ;
  if (FH0CW00.FH0CW-PF15-FLG == "Y"
   && FH0CM001.YSMXOT == "FT")
    ;
    if (FH0CW01.FH0CW-NEED-MO < 199311) /* Need month < 199311*/
      FH3REC.FH-FRZ-PRAL-QTY = FH3REC.FH-FRZ-PRAL-QTY       + FH0CW01.FH8ADQTY;
    else /* Need month >= 199311*/
      FH3REC.FH-FRZ-CNCL-QTY = FH3REC.FH-FRZ-CNCL-QTY       + FH0CW01.FH8ADQTY;
    end
  end
  ;
  FH3REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Update*/
  ;
   /* ------------------------------------------------------------*/
   /* Update a table row in VFHCAT01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4120" ("U ", SQLCA, FH3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FHWREC.XXX-MSG-LOC-ID = "IO4120-U"; /* Module identification*/
        converseLib.validationFailed(20);
      end
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4120-U"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH3REC.FH3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
  ;
end // end FH0CS-IO4120-U

// Select a row in VFHSTY01
Function FH0CS-IO4130-S()
   /* ------------------------------------------------------------*/
   /* Clear record.*/
   /* Move display storage fields into record key fields.*/
   /* Fetch requested record from dfhist.vfhsty01.*/
   /* ------------------------------------------------------------*/
  ;
  set FH2REC empty; /* clear record*/
  ;
  FH2REC.FH1FNDMO = FH0CW01.FH0CW-NEED-MO; /* Need month*/
  FH2REC.XDVCD = FH0CM001.XDVCD; /* Division code*/
  FH2REC.YSMXOT = FH0CM001.YSMXOT; /* Sum order type code*/
  FH2REC.XCTCD = FH0CM001.XCTCD; /* Country code*/
  FH2REC.XLCCD = FH0CM001.XLCCD; /* Life cycle code*/
  FH2REC.XQACD = FH0CM001.XQACD; /* Quality code*/
  FH2REC.SY1STNBR = FH0CM001.SY1STNBR; /* Style number*/
  FH2REC.SY2CLRID = FH0CM001.SY2CLRID; /* Color identifier*/
  FH2REC.XDMCD = FH0CM001.XDMCD; /* Dimension code*/
  FH2REC.XWHCD = FH0CM001.XWHCD; /* Warehouse code*/
  FH2REC.XDSCD = FH0CM001.XDSCD; /* Direct ship code*/
  FH2REC.SP1ID = FH0CM001.SP1ID; /* Sales program ID*/
  FH2REC.FH1PNAC = FH0CM001.FH1PNAC; /* National account*/
  ;
  try
    call "IO4130" ("S ", SQLCA, FH2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      set FH0CM001.FH8ADQTY cursor;
      FH0CM001.SP1ID = FH2REC.SP1ID; /* sales program id*/
      FH0CW01.SP1ID = FH2REC.SP1ID; /* sales program id*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      converseLib.validationFailed(2); /* row not found message*/
      FHWREC.XXX-MSG-LOC-ID = "IO4130-S";
      FH0CW00.FH0CW-ENTER-FLG = "N";
      set FH0CM001.FH0CM-NEED-YYMM cursor;
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -811) /* duplicate rows found*/
      ;
      set FH0CM001.SP1ID cursor, bold; /* Highlight sales prog id*/
      converseLib.validationFailed(32); /* duplicate rows message*/
      FHWREC.XXX-MSG-LOC-ID = "IO4130-S";
      FH0CW00.XXX-RQT-DATA-FL = "Y";
      FH0CW00.FH0CW-ENTER-FLG = "N";
      ;
    end
    ;
    return;
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4130-S"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH2REC.FH2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FH0CS-IO4130-S

// Update a row in VFHSTY01
Function FH0CS-IO4130-U()
   /* -----------------------------------------------------------*/
   /* Format the data from working storage to the record*/
   /* -----------------------------------------------------------*/
  ;
  FH2REC.FH1FNDMO = FH0CW01.FH0CW-NEED-MO; /* Need month*/
  FH2REC.XDVCD = FH0CM001.XDVCD; /* Division code*/
  FH2REC.YSMXOT = FH0CM001.YSMXOT; /* Sum order type code*/
  FH2REC.XCTCD = FH0CM001.XCTCD; /* Country code*/
  FH2REC.XLCCD = FH0CM001.XLCCD; /* Life cycle code*/
  FH2REC.XQACD = FH0CM001.XQACD; /* Quality code*/
  FH2REC.SY1STNBR = FH0CM001.SY1STNBR; /* Style number*/
  FH2REC.SY2CLRID = FH0CM001.SY2CLRID; /* Color identifier*/
  FH2REC.XDMCD = FH0CM001.XDMCD; /* Dimension code*/
  FH2REC.XWHCD = FH0CM001.XWHCD; /* Warehouse code*/
  FH2REC.XDSCD = FH0CM001.XDSCD; /* Direct ship code*/
  ;
  if (FH0CM001.SP1ID == "*") /* Sales program id*/
    FH2REC.SP1ID = " ";
  else
    FH2REC.SP1ID = FH0CM001.SP1ID;
  end
  FH2REC.FH1PNAC = FH0CM001.FH1PNAC; /* National account*/
  ;
  FH2REC.FH2SLCXL = FH0CM001.FH0CM-REV-SLSCXL; /* sales cncl*/
  FH2REC.FH2MO = FH0CM001.FH0CM-REV-MNTNOUT; /* Maint out*/
  ;
  if (FH0CW00.FH0CW-PF15-FLG == "Y"
   && FH0CM001.YSMXOT == "FT")
    ;
    if (FH0CW01.FH0CW-NEED-MO < 199311) /* Need month < 199311*/
      FH2REC.FH-FRZ-PRAL-QTY = FH0CM001.FH0CM-REV-AUTHFUT;
    else
      FH2REC.FH-FRZ-SLSCNCL-QTY = FH0CM001.FH0CM-REV-AUTHFUT;
    end
    ;
  end
  ;
  FH2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Update*/
  ;
   /* ------------------------------------------------------------*/
   /* Update a single row to VFHSTY01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4130" ("U ", SQLCA, FH2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(20);
        FHWREC.XXX-MSG-LOC-ID = "IO4130-U"; /* Module identification*/
      end
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4130-U"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH2REC.FH2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
  ;
end // end FH0CS-IO4130-U

// Insert a row in VFHADJ01
Function FH0CS-IO4750-A()
   /* ------------------------------------------------------------*/
   /* Clear the record and move the data to the record*/
   /* ------------------------------------------------------------*/
  ;
  set FH8REC empty; /* Clear record*/
  ;
  if (FH0CW00.FH0CW-PF15-FLG == "Y")
    FH8REC.FH8ATYCD = "10";
  else
    FH8REC.FH8ATYCD = "03";
  end
  ;
  FH8REC.FH8ANMO = FH0CW01.FH0CW-NEED-MO;
  FH8REC.XDVCD = FH0CM001.XDVCD; /* Division code*/
  FH8REC.YSMXOT = FH0CM001.YSMXOT; /* Sum order type code*/
  FH8REC.XCTCD = FH0CM001.XCTCD; /* Country code*/
  FH8REC.XLCCD = FH0CM001.XLCCD; /* Life cycle code*/
  FH8REC.XQACD = FH0CM001.XQACD; /* Quality code*/
  FH8REC.SY1STNBR = FH0CM001.SY1STNBR; /* Style number*/
  FH8REC.SY2CLRID = FH0CM001.SY2CLRID; /* Color identifier*/
  FH8REC.XDMCD = FH0CM001.XDMCD; /* Dimension code*/
  FH8REC.XWHCD = FH0CM001.XWHCD; /* Warehouse code*/
  FH8REC.XDSCD = FH0CM001.XDSCD; /* Direct ship code*/
  ;
  if (FH0CM001.SP1ID != "*")
    FH8REC.SP1ID = FH0CM001.SP1ID; /* Sales program ID*/
  end
  ;
  FH8REC.FH1PNAC = FH0CM001.FH1PNAC; /* National account*/
  FH8REC.FH-HIST-ADJ-COMNT = FH0CW01.FH-HIST-ADJ-COMNT;
                                  /* Comments*/
  FH8REC.FH2SHP = FH2REC.FH2SHP; /* orig ship qty*/
  FH8REC.FH2MI = FH2REC.FH2MI; /* orig mntn in qty*/
  FH8REC.FH2MO = FH2REC.FH2MO; /* orig mntn out qty*/
  FH8REC.FH2CUCXL = FH2REC.FH2CUCXL; /* orig cust cxl qty*/
  FH8REC.FH2CRCXL = FH2REC.FH2CRCXL; /* orig cr cxl qty*/
  FH8REC.FH2PRCXL = FH2REC.FH2PRCXL; /* orig prdctn cxl qty*/
  FH8REC.FH2SLCXL = FH2REC.FH2SLCXL; /* orig sls cxl qty*/
  FH8REC.FH-FRZ-PRAL-QTY = FH2REC.FH-FRZ-PRAL-QTY;
  FH8REC.FH-FRZ-ALOC-QTY = FH2REC.FH-FRZ-ALOC-QTY;
  FH8REC.FH-FRZ-SHP-QTY = FH2REC.FH-FRZ-SHP-QTY;
  FH8REC.FH-FRZ-CUSTCNCLQTY = FH2REC.FH-FRZ-CUSTCNCLQTY;
  FH8REC.FH-FRZ-CR-CNCL-QTY = FH2REC.FH-FRZ-CR-CNCL-QTY;
  FH8REC.FH-FRZ-PRDCTN-CNCL = FH2REC.FH-FRZ-PRDCTN-CNCL;
  FH8REC.FH-FRZ-SLSCNCL-QTY = FH2REC.FH-FRZ-SLSCNCL-QTY;
  FH8REC.FH8ADQTY = FH0CM001.FH8ADQTY; /* Chg qty*/
  ;
  FH8REC.XXXUSER = COMMAREA.CAUSERID; /* User id*/
  FH8REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FH8REC.ZZHHMMSS = XX0XW01.XX0XWTIM; /* Set up time*/
  ;
  try
    call "IO4750" ("A ", SQLCA, FH8REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
        FH0CM001.ZZZSDT = FH8REC.ZZZSDT; /* Last update*/
      end
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(20);
        FHWREC.XXX-MSG-LOC-ID = "IO4750-A"; /* Module identification*/
      end
      ;
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4750-A"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERTED TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHADJ01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH8REC.FH8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
  ;
end // end FH0CS-IO4750-A

// Close cursor for VFHADJ01
Function FH0CS-IO4750-C1()
   /* ------------------------------------------------------------*/
   /* Close the selected cursor.  This call passes key information*/
   /* into the subroutine, this is valid as long as the declare,*/
   /* fetch, and close calls are all formatted the same.*/
   /* 'C10310' = C1 for type of request*/
   /* = 0310 are the variable adjustment type codes valid*/
   /* for this program-- 03 = adjust sales cncl qty*/
   /* 10 = adjust sales cncl and auth futr qty*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4750" ("C10310", SQLCA, FH8REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4750C1"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE THE SELECTED SET  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHADJ01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH8REC.FH8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FH0CS-IO4750-C1

// Obtain last revised date
Function FH0CS-IO4750-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from dfhist.vfhadj01.  This call passes*/
   /* key information into the subroutine, this is valid as long*/
   /* as the declare, fetch, and close calls are all formatted*/
   /* the same.*/
   /* 'N10310' = N1 for type of request*/
   /* = 0310 are the variable adjustment type codes valid*/
   /* for this program-- 03 = adjust sales cncl qty*/
   /* 10 = adjust sales cncl and auth futr qty*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4750" ("N10310", SQLCA, FH8REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      FH0CW01.FH-HIST-ADJ-COMNT = FH8REC.FH-HIST-ADJ-COMNT;
      FH0CW01.ZZZSDT = FH8REC.ZZZSDT;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4750N1"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN SET   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHADJ01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH8REC.FH8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FH0CS-IO4750-N1

// Open cursor for VFHADJ01
Function FH0CS-IO4750-S1()
   /* ------------------------------------------------------------*/
   /* Clear record.*/
   /* Move display storage fields into record key fields.*/
   /* Declare and open cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set FH8REC empty;
  ;
  FH8REC.FH8ANMO = FH0CW01.FH0CW-NEED-MO; /* Need month*/
  FH8REC.XDVCD = FH0CM001.XDVCD; /* Division code*/
  FH8REC.YSMXOT = FH0CM001.YSMXOT; /* Order type group code*/
  FH8REC.XCTCD = FH0CM001.XCTCD; /* Country code*/
  FH8REC.XLCCD = FH0CM001.XLCCD; /* Life cycle code*/
  FH8REC.XQACD = FH0CM001.XQACD; /* Quality code*/
  FH8REC.SY1STNBR = FH0CM001.SY1STNBR; /* Style number*/
  FH8REC.SY2CLRID = FH0CM001.SY2CLRID; /* Color identification*/
  FH8REC.XDMCD = FH0CM001.XDMCD; /* Dimension code*/
  FH8REC.XWHCD = FH0CM001.XWHCD; /* Warehouse code*/
  FH8REC.XDSCD = FH0CM001.XDSCD; /* Direct ship code*/
  FH8REC.SP1ID = FH0CM001.SP1ID; /* Sales program ID*/
  FH8REC.FH1PNAC = FH0CM001.FH1PNAC; /* National account*/
  ;
   /* ------------------------------------------------------------*/
   /* This call passes key information into the subroutine, this*/
   /* is valid as long as the declare, fetch, and close calls are*/
   /* all formatted the same.*/
   /* 'S10310' = S1 for type of request*/
   /* = 0310 are the variable adjustment type codes valid*/
   /* for this program-- 03 = adjust sales cncl qty*/
   /* 10 = adjust sales cncl and auth futr qty*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4750" ("S10310", SQLCA, FH8REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FHWREC.XXX-MSG-LOC-ID = "IO4750S1"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN SELECTED SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FHWREC.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFHADJ01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH8REC.FH8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FH0CS-IO4750-S1

//*** RECORD=FH0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FH0CW00 type basicRecord
  10 FH0CW-PF15-FLG FH0CW-PF15-FLG ; 
  10 FH0CW-PF16-FLG FH0CW-PF16-FLG ; 
  10 FH0CW-ENTER-FLG FH0CW-ENTER-FLG ; 
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
end // end FH0CW00

//*** RECORD=FH0CW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FH0CW01 type basicRecord
  10 FH0CW-NEED-MO FH0CW-NEED-MO ; 
    15 FH0CW-FILLER FH0CW-FILLER ; 
    15 FH0CM-NEED-YYMM FH0CM-NEED-YYMM ; 
      20 FH0CW-NEED-CC FH0CW-NEED-CC ; 
      20 FH0CW-NEED-YY FH0CW-NEED-YY ; 
      20 FH0CW-NEED-MM FH0CW-NEED-MM ; 
  10 XDVCD XDVCD ; 
  10 XDVABRV XDVABRV ; 
  10 YSMXOT YSMXOT ; 
  10 FH0CM-SUM-XOT-DESC FH0CM-SUM-XOT-DESC ; 
  10 XCTCD XCTCD ; 
  10 XCTABRV XCTABRV ; 
  10 XLCCD XLCCD ; 
  10 XLCABRV XLCABRV ; 
  10 XQACD XQACD ; 
  10 XQAABRV XQAABRV ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 XDSCD XDSCD ; 
  10 XDSABRV XDSABRV ; 
  10 SP1ID SP1ID ; 
  10 SP1ABRV SP1ABRV ; 
  10 FH1PNAC FH1PNAC ; 
  10 FH2SLCXL FH2SLCXL ; 
  10 FH2MO FH2MO ; 
  10 FH0CM-AUTH-FUT FH0CM-AUTH-FUT ; 
  10 FH8ADQTY FH8ADQTY ; 
  10 FH-HIST-ADJ-COMNT FH-HIST-ADJ-COMNT ; 
    15 FH0CM-ADJ-COMNT-1 FH0CM-ADJ-COMNT-1 ; 
    15 FH0CM-ADJ-COMNT-2 FH0CM-ADJ-COMNT-2 ; 
  10 FH0CM-REV-SLSCXL FH0CM-REV-SLSCXL ; 
  10 FH0CM-REV-MNTNOUT FH0CM-REV-MNTNOUT ; 
  10 FH0CM-REV-AUTHFUT FH0CM-REV-AUTHFUT ; 
  10 ZZZSDT ZZZSDT ; 
end // end FH0CW01

// fh-hist-adj-cmnt line 1
DataItem FH0CM-ADJ-COMNT-1 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fh-hist-adj-comnt line 2
DataItem FH0CM-ADJ-COMNT-2 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fh-frz-custcnclqty
DataItem FH0CM-AUTH-FUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fh-fcst-need-ccyymm
DataItem FH0CM-NEED-YYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// revised auth fut qty
DataItem FH0CM-REV-AUTHFUT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// revised mntn out qty
DataItem FH0CM-REV-MNTNOUT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// revised cust cncl qty
DataItem FH0CM-REV-SLSCXL num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// summ xot desc
DataItem FH0CM-SUM-XOT-DESC char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// enter pressed switch
DataItem FH0CW-ENTER-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// leading zeros
DataItem FH0CW-FILLER num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fh-fcst-need-cc
DataItem FH0CW-NEED-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fh-fcst-need-mm
DataItem FH0CW-NEED-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// fh-fcst-need-mo
DataItem FH0CW-NEED-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// fh-fcst-need-yy
DataItem FH0CW-NEED-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PF15 pressed switch
DataItem FH0CW-PF15-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF16 pressed switch
DataItem FH0CW-PF16-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

