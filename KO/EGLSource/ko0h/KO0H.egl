package ko0h;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpcom7.ZZHHMMSS;
import corpx1.XGPTBL;
import corpx1.XNXTBL;
import corpx1.XOTTBL;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import iv.common.IV0REC;
import iv.common.IVCID;
import ko.common.KOAREC;
import ko.common.KOHADFRP;
import ko.common.KOHADJID;
import ko.common.KOHADTRP;
import ko.common.KOHGROUP;
import ko.common.KOHREC;
import ko.common.KOYREC;
import ko.common.KOZREC;
import ku.common.KUCREC;
import ku.common.KUJREC;
import ku.common.KUMREC;
import ku.common.KUNREC;
import sm.common.SM1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VRAGCY02;
//*** PROGRAM=KO0H ****
// this is the commissions main menu program
// 
// 
// 
// date created:        july 25, 1986
// 
// maintenance:
// 
// init   date      reason
// ----- ------     ----------------------------------------
// glw  110587      changed positions with first name and
//                  last name on map.  if store-id or dept-id
//                  is zero, do not get abrvs.
// dsm  071288      put stmt month/year on screen for adds
// jbw  122088      added noncsp option to calls
// jbw  122088      added xssegtr logic
// jab  120489      require description with adj. code 97.
// jab  021291      changed cust dept to 4 bytes.
// jab  061091      removed major account group checks.
// jab  071091      get dept desc from kujrec instead of
//                  xnxtbl.
// ayi  040992      rename sm5stat to xxxstat.
// ayi  060492      REGEN FOR DATABASE CHANGES.
// ayi  100992      database changes.  Get rep's name from
//                  vragcy02 instead of sm5rec.
// jab  020793      OK to enter 0 commission $$$.
// -------------------------------------------------------
// 
// 
// *********************
Program KO0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0REC IV0REC; // record
  KO0HW01 KO0HW01; // record
  KOAREC KOAREC; // record
  KOHREC KOHREC; // record
  KOYREC KOYREC; // record
  KOZREC KOZREC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VRAGCY02 VRAGCY02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use KO0HM.KO0HM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0H001: KO0H001();
    goto KO0H005;
    KO0H005: KO0H005();
    ;
    ;
        /* go to the top of application no matter what.*/
    ;
    ;
    goto KO0H005;
    ;
    ;
  end // end main
end // end KO0H

// initialize application
Function KO0H001()
  ;
  ;
  XSENTRY(); /* ; check security*/
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  KO0HS1A(); /* ; initialize map*/
  ;
   /* *************************************************************/
end // end KO0H001

// converse the comm adjustment
Function KO0H005()
  ;
  ;
  KO0HM001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
   /* ***********************************************************/
  ;
  converse KO0HM001 ;
   /* ***********************************************************/
  ;
  ;
  set KO0HM001.CATOAP normal; /* re-set option attributes*/
  ;
  KO0HS2A(); /* validate attention key*/
  ;
  if (converseVar.validationMsgNum != +0 /* map errors exist*/
   || VAGen_EZEMSG != " ")              
    KO0HW01.KO0HWP17 = " ";
  else
    if (KO0HW01.KO0HWP17 == "DELETE"
     && converseVar.eventKey is enter)
      KO0HS3A(); /* delete comm adjust row*/
      KO0HW01.KO0HWP17 = " ";
      KO0HW01.KO0HWMDF = "N";
    else
      KO0HW01.KO0HWP17 = " ";
      KO0HS4A(); /* process screen entries*/
    end
  end
  ;
  ;
   /* ***********************************************************/
end // end KO0H005

// initialize map
Function KO0HS1A()
  ;
  ;
     /* Check fastpath and see if a commission adjustment*/
     /* number was passed from calling program.*/
  ;
     /* If so get commission adjustment and move data to screens.*/
  ;
  if (COMMAREA.CAITEM > " ")
    KO0HW01.KO0HWCID = COMMAREA.CAITEM;
    KO0HM001.KOHADJID = KO0HW01.KO0HWNID;
    KO0HS1B(); /* get commission adjustment row*/
  else
    set KO0HM001 initial; /* re-set map attributes*/
    KO0HS1P(); /* unprotect all fields for an add*/
    KO0HS1Q(); /* get new comm adjustment id*/
    set KO0HM001.KO0HWPMM cursor;
    set KO0HM001.KO0HMP12 skip, invisible;
    set KO0HM001.KO0HMP14 skip, invisible;
    set KO0HM001.KO0HMP16 skip, invisible;
    set KO0HM001.KO0HMP17 skip, invisible;
  end
  ;
  ;
end // end KO0HS1A

// get commission adj row
Function KO0HS1B()
  ;
  ;
  set KOHREC empty;
  set SQLCA empty;
  KOHREC.KOHADJID = KO0HM001.KOHADJID;
  ;
  call "IO0620" ("S ", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0HW01.KO0HWSW = "CHANGE";
    KO0HW01.KOHADJID = KOHREC.KOHADJID;
    KO0HS1C(); /* move KOHREC to screen*/
    KO0HS1D(); /* move desc/abrev to screen*/
    KO0HS1O(); /* see if able to update*/
    set KO0HM001.KO0HMP14 skip, invisible;
    KO0HW01.IVCID = KOHREC.IVCID;
    KO0HW01.KOHADFRP = KOHREC.KOHADFRP;
    KO0HW01.KOHADTRP = KOHREC.KOHADTRP;
    KO0HW01.KO0HWIOF = "Y";
    KO0HW01.KO0HWFRO = "Y";
    KO0HW01.KO0HWTRO = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KO0HM001 initial; /* re-set map attributes*/
      KO0HM001.KOHADJID = KOHREC.KOHADJID;
      KO0HW01.KO0HWSW = " ";
      converseLib.validationFailed(45); /* invalid adjustment id*/
      KO0HW01.KOHADJID = 0;
      KO0HW01.IVCID = 0;
      KO0HW01.KOHADFRP = 0;
      KO0HW01.KOHADTRP = 0;
      KO0HW01.KO0HWIOF = "N";
      KO0HW01.KO0HWTRO = "N";
      KO0HW01.KO0HWFRO = "N";
      set KO0HM001.KO0HMP12 skip, invisible;
      set KO0HM001.KO0HMP14 skip, invisible;
      set KO0HM001.KO0HMP16 skip, invisible;
      set KO0HM001.KO0HMP17 skip, invisible;
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VCOADJ01";
      TA1REC.TA1TBLKE = KOHREC.KOHKEY;
      TA1REC.TA1LOCAT[1] = "KO0HS1B";
      TA1REC.TA1LOCAT[2] = "IO0620";
      XSKO001(); /* call abort routine*/
    end
  end
  ;
  ;
  ;
end // end KO0HS1B

// move data from kohrec to scrn
Function KO0HS1C()
  ;
  ;
  set KO0HM001 initial;
  ;
  KO0HM001.KOHADJID = KOHREC.KOHADJID;
  KO0HW01.KO0HWDTE = KOHREC.KOHADJMO;
  KO0HM001.KO0HWPMM = KO0HW01.KO0HWMM;
  KO0HM001.KO0HWPYY = KO0HW01.KO0HWYY;
  KO0HM001.KOYADJCD = KOHREC.KOYADJCD;
  KO0HM001.KOHPADID = KOHREC.KOHPADID;
  KO0HM001.KUCCOID = KOHREC.KUCCOID;
  KO0HM001.KUMSTRID = KOHREC.KUMSTRID;
  KO0HM001.XNXCD = KOHREC.XNXCD;
  KO0HM001.IVCID = KOHREC.IVCID;
  KO0HM001.XGPCD = KOHREC.XGPCD;
  ;
  if (KOHREC.KOHADTCO == 0 /* ; to comm amount = 0*/
   && KOHREC.KOHADFCO == 0) /* ; from comm amount = 0*/
    KO0HM001.KOHADJSL = KOHREC.KOHADJSL;
  else
    if (KOHREC.KOHADJSL < 0)
      KO0HM001.KOHADJSL = KOHREC.KOHADJSL * -1;
    else
      KO0HM001.KOHADJSL = KOHREC.KOHADJSL;
    end
  end
  ;
  KO0HM001.XOTCD = KOHREC.XOTCD;
  KO0HM001.KOHADFAG = KOHREC.KOHADFAG;
  KO0HM001.KOHADFRP = KOHREC.KOHADFRP;
  KO0HM001.KOHADFCO = KOHREC.KOHADFCO;
  KO0HM001.KOHADTAG = KOHREC.KOHADTAG;
  KO0HM001.KOHADTRP = KOHREC.KOHADTRP;
  KO0HM001.KOHADTCO = KOHREC.KOHADTCO;
  KO0HM001.KOHADJD1 = KOHREC.KOHADJD1;
  KO0HM001.KOHADJD2 = KOHREC.KOHADJD2;
  KO0HM001.KOHADJD3 = KOHREC.KOHADJD3;
  ;
  KO0HW01.KOHGROUP = KOHREC.KOHGROUP;
  ;
  ;
end // end KO0HS1C

// retrieve desc/abrev fields
Function KO0HS1D()
  ;
  ;
  KO0HS1E(); /* get to sales rep/agency id*/
  KO0HS1F(); /* get to sales agency id*/
  KO0HS1G(); /* get from sales rep/agency id*/
  KO0HS1H(); /* get from sales agency id*/
  KO0HS1I(); /* get order type abrev*/
  KO0HS1J(); /* get gpc abrev*/
  KO0HS1K(); /* get customer dept*/
  KO0HS1L(); /* get customer store*/
  KO0HS1M(); /* get customer company*/
  KO0HS1N(); /* get adjustment code*/
  ;
  ;
end // end KO0HS1D

// retrieve to sales rep/agy id
Function KO0HS1E()
  ;
  ;
  set VRAGCY02 empty;
  VRAGCY02.SM1AGYID = KO0HM001.KOHADTAG;
  VRAGCY02.SM4REPID = KO0HM001.KOHADTRP;
  ;
  call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KO0HM001.XXXFSTNM[2] = VRAGCY02.XXXFSTNM;
      KO0HM001.XXXLSTNM[2] = VRAGCY02.XXXLSTNM;
      KO0HM001.XXXMDINT[2] = VRAGCY02.XXXMDINT;
      KO0HW01.XXXSTAT[2] = VRAGCY02.XXXSTAT;
      call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KO0HM001.XXXFSTNM[2] = " ";
        KO0HM001.XXXLSTNM[2] = " ";
        KO0HM001.XXXMDINT[2] = " ";
        KO0HW01.XXXSTAT[2] = " ";
        call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
        SQLCA.VAGen_SQLCODE = 100;
      else
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VRAGCY02";
        TA1REC.TA1LOCAT[1] = "KO0HS1E";
        TA1REC.TA1LOCAT[2] = "IO0400";
        XSKO001(); /* abort*/
      end
    end
    ;
  else
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY02";
    TA1REC.TA1LOCAT[1] = "KO0HS1O";
    TA1REC.TA1LOCAT[2] = "IO0400";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0HS1E

// retrieve to sales agency id
Function KO0HS1F()
  ;
  ;
  set SM1REC empty;
  SM1REC.SM1AGYID = KO0HM001.KOHADTAG;
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0HM001.SM1AGYNM[2] = SM1REC.SM1AGYNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0HM001.SM1AGYNM[2] = " ";
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      TA1REC.TA1LOCAT[1] = "KO0HS1F";
      TA1REC.TA1LOCAT[2] = "IO0050";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0HS1F

// retrieve from sales rep/agy id
Function KO0HS1G()
  ;
  ;
  set VRAGCY02 empty;
  VRAGCY02.SM1AGYID = KO0HM001.KOHADFAG;
  VRAGCY02.SM4REPID = KO0HM001.KOHADFRP;
  ;
  call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KO0HM001.XXXFSTNM[1] = VRAGCY02.XXXFSTNM;
      KO0HM001.XXXLSTNM[1] = VRAGCY02.XXXLSTNM;
      KO0HM001.XXXMDINT[1] = VRAGCY02.XXXMDINT;
      KO0HW01.XXXSTAT[1] = VRAGCY02.XXXSTAT;
      call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KO0HM001.XXXFSTNM[1] = " ";
        KO0HM001.XXXLSTNM[1] = " ";
        KO0HM001.XXXMDINT[1] = " ";
        KO0HW01.XXXSTAT[1] = " ";
        call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
        SQLCA.VAGen_SQLCODE = 100;
      else
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VRAGCY02";
        TA1REC.TA1LOCAT[1] = "KO0HS1G";
        TA1REC.TA1LOCAT[2] = "IO0400";
        XSKO001(); /* abort*/
      end
    end
    ;
  else
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY02";
    TA1REC.TA1LOCAT[1] = "KO0HS1F";
    TA1REC.TA1LOCAT[2] = "IO0400";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0HS1G

// retrieve from sales agency id
Function KO0HS1H()
  ;
  ;
  set SM1REC empty;
  SM1REC.SM1AGYID = KO0HM001.KOHADFAG;
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0HM001.SM1AGYNM[1] = SM1REC.SM1AGYNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0HM001.SM1AGYNM[1] = " ";
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      TA1REC.TA1LOCAT[1] = "KO0HS1H";
      TA1REC.TA1LOCAT[2] = "IO0050";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0HS1H

// retrieve order type abrev
Function KO0HS1I()
  ;
  ;
  if (KO0HM001.XOTCD in XOTTBL.XOTCD)
    KO0HM001.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KO0HM001.XOTABRV = " ";
  end
  ;
  ;
end // end KO0HS1I

// retrieve gpc abrev
Function KO0HS1J()
  ;
  ;
  if (KO0HM001.XGPCD in XGPTBL.XGPCD)
    KO0HM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    KO0HM001.XGPABRV = " ";
  end
  ;
  ;
end // end KO0HS1J

// retrieve cust dept
Function KO0HS1K()
  ;
  ;
  if (KO0HW01.KO0HXNX == KO0HM001.XNXCD) /* department has not changed*/
    if (KO0HW01.KO0HWDOF == "Y") /* ; dept. overide flag = 'y'*/
      KO0HM001.XNXABRV = "UNKNOWN";
      return;
    else
      if (converseVar.eventKey is pf14) /* ; attention key = pf14*/
        KO0HW01.KO0HWDOF = "Y"; /* set dept. overide flag*/
        return;
      end
    end
  end
  ;
  KO0HW01.KO0HXNX = KO0HM001.XNXCD;
  KO0HW01.KO0HWDOF = "N";
  ;
  ;
  set KUJREC empty;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "KO0H    "; /* program name*/
  TA1REC.TA1MAP = "KO0HM001"; /* map name*/
  TA1REC.TA1DBASE = "DCUST   "; /* database name*/
  TA1REC.TA1TBLVU = "VDEPT001"; /* table view*/
  TA1REC.TA1LOCAT[3] = "KO0HS1K";
  TA1REC.TA1LOCAT[4] = "IO0290";
  ;
  KUJREC.KUCCOID = KO0HM001.KUCCOID;
  KUJREC.XNXCD = KO0HM001.XNXCD;
  TA1REC.TA1TBLKE = KUJREC.KUJGRP; /* table key*/
  ;
  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KUJREC.KUJSLFNM > " ")
      KO0HM001.XNXABRV = KUJREC.KUJSLFNM;
    else
      KO0HM001.XNXABRV = "NO DESCRIPTION";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0HM001.XNXABRV = "UNKNOWN";
      converseLib.validationFailed(54); /* ; invalid dept*/
      set KO0HM001.XNXCD cursor, bold;
      KO0HM001.KO0HMP14 = "14:ACCEPT DEPT CD";
      KO0HW01.KO0HWOAF = "Y"; /* set override allowed flag*/
      set KO0HM001.KO0HMP14 initialAttributes;
    else
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0HS1K

// retrieve customer store
Function KO0HS1L()
  ;
  ;
  set KUMREC empty;
  if (KO0HM001.KUMSTRID == 0) /* don't get abrv if stor-id is zero*/
    /* next sentence*/
  else
    KUMREC.KUCCOID = KO0HM001.KUCCOID;
    KUMREC.KUMSTRID = KO0HM001.KUMSTRID;
    ;
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KO0HM001.KUMSTSNM = KUMREC.KUMSTSNM;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KO0HM001.KUMSTSNM = " ";
      else
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VSTORE01";
        TA1REC.TA1LOCAT[1] = "KO0HS1L";
        TA1REC.TA1LOCAT[2] = "IO0340";
        XSKO001(); /* abort*/
      end
    end
  end
  ;
  ;
end // end KO0HS1L

// retrieve customer company
Function KO0HS1M()
  ;
  ;
  set KUCREC empty;
  KUCREC.KUCCOID = KO0HM001.KUCCOID;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0HM001.KUCCONM = KUCREC.KUCCONM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0HM001.KUCCONM = " ";
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1LOCAT[1] = "KO0HS1M";
      TA1REC.TA1LOCAT[2] = "IO0240";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0HS1M

// retrieve adjustment code desc
Function KO0HS1N()
  ;
  ;
  set KOYREC empty;
  KOYREC.KOYADJCD = KO0HM001.KOYADJCD;
  ;
  call "IO1030" ("S ", SQLCA, KOYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0HM001.KOYADJDS = KOYREC.KOYADJDS;
    KO0HW01.KO0HWSW2 = "VALID ADJUSTMENT CODE";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0HM001.KOYADJDS = " ";
      KO0HW01.KO0HWSW2 = "INVALID ADJUSTMENT CODE";
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VADJCD01";
      TA1REC.TA1TBLKE = KOYREC.KOYADJCD;
      TA1REC.TA1LOCAT[1] = "KO0HS1N";
      TA1REC.TA1LOCAT[2] = "IO1030";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0HS1N

// retrieve control file date
Function KO0HS1O()
  ;
  ;
  set KOZREC empty;
  call "IO0640" ("S ", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOZREC.KOZCSTMO == KOHREC.KOZCSTMO)
      KO0HS1P(); /* unprotect fields that can be updated*/
      KO0HM001.KO0HWFOR = "  FOR";
      KO0HW01.KO0HWDTE = KOZREC.KOZCSTMO;
    else
      set KO0HM001.KO0HMP12 skip, invisible;
      set KO0HM001.KO0HMP17 skip, invisible;
      KO0HM001.KO0HWFOR = "PRIOR";
      KO0HW01.KO0HWDTE = KOHREC.KOZCSTMO;
    end
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOCTL01";
    TA1REC.TA1LOCAT[1] = "KO0HS1O";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001(); /* abort*/
  end
  ;
  KO0HM001.KO0HWCMM = KO0HW01.KO0HWMM;
  KO0HM001.KO0HWCYY = KO0HW01.KO0HWYY;
  ;
  ;
end // end KO0HS1O

// set map attributes for update
Function KO0HS1P()
  ;
  ;
  set KO0HM001.KO0HWPMM normal;
  set KO0HM001.KO0HWPYY normal;
  set KO0HM001.KOYADJCD normal;
  set KO0HM001.KOHPADID normal;
  set KO0HM001.KUCCOID normal;
  set KO0HM001.KUMSTRID normal;
  set KO0HM001.XNXCD normal;
  set KO0HM001.IVCID normal;
  set KO0HM001.XGPCD normal;
  set KO0HM001.KOHADJSL normal;
  set KO0HM001.XOTCD normal;
  set KO0HM001.KOHADFAG normal;
  set KO0HM001.KOHADFRP normal;
  set KO0HM001.KOHADFCO normal;
  set KO0HM001.KOHADTAG normal;
  set KO0HM001.KOHADTRP normal;
  set KO0HM001.KOHADTCO normal;
  set KO0HM001.KOHADJD1 normal;
  set KO0HM001.KOHADJD2 normal;
  set KO0HM001.KOHADJD3 normal;
  ;
   /* SET KO0HM001.KOHADJNM NORMAL;*/
   /* SET KO0HM001.KOHADJDT NORMAL;*/
  ;
  ;
end // end KO0HS1P

// get new commission adj id
Function KO0HS1Q()
  ;
  ;
  set KOZREC empty;
  set SQLCA empty;
  call "IO0640" ("S ", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KOZREC.KOZNCAID = KOZREC.KOZNCAID + 1;
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOCTL01";
    TA1REC.TA1LOCAT[1] = "KO0HS1Q";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001(); /* abort*/
  end
  ;
  KO0HW01.KOHADJID = KOZREC.KOZNCAID;
  KO0HW01.KO0HWDTE = KOZREC.KOZCSTMO;
  KO0HW01.KO0HWSW = "ADD";
  ;
  KO0HM001.KO0HWFOR = " FOR";
  KO0HM001.KO0HWCMM = KO0HW01.KO0HWMM;
  KO0HM001.KO0HWCYY = KO0HW01.KO0HWYY;
  KO0HM001.KOHADJID = KO0HW01.KOHADJID;
  ;
  KO0HW01.IVCID = 0;
  KO0HW01.KOHADFRP = 0;
  KO0HW01.KOHADTRP = 0;
  KO0HW01.KO0HWIOF = "N";
  KO0HW01.KO0HWFRO = "N";
  KO0HW01.KO0HWTRO = "N";
  ;
  ;
end // end KO0HS1Q

// complete copy adjustment
Function KO0HS1R()
  ;
  ;
  if (KO0HM001.KO0HWCMM == KO0HM001.KO0HWPMM
   && KO0HM001.KO0HWCYY == KO0HM001.KO0HWPYY)
    KO0HM001.KOHPADID = " ";
  end
  ;
  set KO0HM001.KO0HMP14 skip, invisible;
  set KO0HM001.KO0HMP16 skip, invisible;
  set KO0HM001.KO0HMP17 skip, invisible;
  ;
  KO0HW01.KO0HWMDF = "Y";
  converseLib.validationFailed(154);
  ;
  ;
end // end KO0HS1R

// validate attention key
Function KO0HS2A()
  ;
  ;
  COMMAREA.CAITEM = " ";
  COMMAREA.CATOAP = " ";
  ;
  if (converseVar.eventKey is pf1) /* ; transfer to help*/
    XSPF1();
    VAGen_EZEMSG = COMMAREA.CAMSG;
  else
    if (converseVar.eventKey is pf3 /* ; transfer to main menu*/
     || converseVar.eventKey is pa2)
      COMMAREA.CATOAP = "KO0A";
      XSEXIT();
      VAGen_EZEMSG = COMMAREA.CAMSG;
    else
      if (converseVar.eventKey is pf4)
        XSPF4(); /* ; transfer to main menu*/
        VAGen_EZEMSG = COMMAREA.CAMSG;
      else
        if (KO0HM001.CATOAP != " ") /* ; fast path used*/
          if (converseVar.eventKey is enter) /* ; attention key = enter*/
            COMMAREA.CATOAP = KO0HM001.CATOAP;
            COMMAREA.CAITEM = KO0HM001.CAITEM;
            XSEXIT();
            VAGen_EZEMSG = COMMAREA.CAMSG;
          else
            set KO0HM001.CATOAP cursor, bold;
            converseLib.validationFailed(1);
          end
        else
          if (converseVar.eventKey is enter /* ; all other valid pf keys*/
           || converseVar.eventKey is pf12)
            return;
          else
            if (converseVar.eventKey is pf14
             && KO0HW01.KO0HWOAF == "Y")
              return;
            else
              if (converseVar.eventKey is pf16
               && KO0HW01.KO0HWSW == "CHANGE")
                return;
              else
                if (converseVar.eventKey is pf17
                 && KO0HM001.KO0HWFOR == "  FOR")
                  return;
                else
                  converseLib.validationFailed(2); /* ; invalid pf key*/
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KO0HS2A

// cust dept (xnxtbl) edit
Function KO0HS2R()
  ;
  ;
  ;
           /* validate customer dept (xnxtbl)*/
  ;
  ;
  ;
  if (KO0HM001.XNXCD == 0)
      /* next sentence*/
  else
    set KO0HM001.XNXCD normal;
    ;
    if (KO0HM001.XNXCD in XNXTBL.XNXCD)
      KO0HM001.XNXABRV = XNXTBL.XNXABRV[sysVar.arrayIndex];
    else
      KO0HM001.XGPABRV = " ";
      converseLib.validationFailed(54);
          /* invalid customer department*/
      set KO0HM001.XNXCD cursor, bold;
    end
    ;
  end
  ;
  ;
end // end KO0HS2R

// delete comm adjust row
Function KO0HS3A()
  ;
  ;
  set KOHREC empty;
  KOHREC.KOHADJID = KO0HM001.KOHADJID;
  ;
  call "IO0620" ("D ", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0HS5C(); /* ; get time and date stamp*/
    KO0HS3B(); /* ; write delete audit rec*/
    set KO0HM001 initial; /* ; re-initialize map*/
    set KO0HM001.KO0HWPMM cursor; /* ; position cursor*/
    KO0HS1P(); /* ; unprotect fields for an add*/
    KO0HS1Q(); /* ; get new comm adj id*/
    KO0HM001.KOHADJID = KOZREC.KOZNCAID;
    KO0HW01.KOHADJID = KOZREC.KOZNCAID;
    converseLib.validationFailed(119); /* ; delete was successful*/
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOADJ01";
    TA1REC.TA1TBLKE = KOHREC.KOHKEY;
    TA1REC.TA1LOCAT[1] = "KO0HS3A";
    TA1REC.TA1LOCAT[2] = "IO0620";
    XSKO001(); /* ; call abort routine*/
  end
  ;
  ;
end // end KO0HS3A

// write delete audit rec
Function KO0HS3B()
  ;
  ;
  KO0HS6A(); /* ; move KOHREC to audit rec*/
  ;
  KOAREC.KOAACTTY = "4";
  ;
  KO0HS6B(); /* ; write audit rec*/
  ;
  ;
end // end KO0HS3B

// process screen entries
Function KO0HS4A()
  ;
  ;
  if (KO0HM001.KOHADJID == 0
   && KO0HW01.KOHADJID == 0)
    KO0HW01.KO0HWMDF = "N"; /* ; re-set modified data flag*/
    return;
  else
    if (KO0HM001.KOHADJID != KO0HW01.KOHADJID)
      KO0HS1B(); /* ; retrieve new comm adj id*/
      KO0HW01.KO0HWMDF = "N"; /* ; re-set modified data flag*/
    else
      if (converseVar.eventKey is pf16)
        KO0HS1P();
        KO0HS1Q();
        KO0HS1R();
      else
        if (KO0HM001.KO0HWFOR == "PRIOR")
          set KO0HM001 initial;
          set KO0HM001.KO0HWPMM cursor;
          KO0HS1P();
          KO0HS1Q();
          KO0HW01.KO0HWMDF = "N"; /* re-set modified data flag*/
        else
          KO0HS4B(); /* ; edit screen changes*/
          KO0HS5B(); /* ; update data bases*/
        end
      end
    end
  end
  ;
  ;
end // end KO0HS4A

// edit screen data
Function KO0HS4B()
  ;
  ;
  if (KO0HM001.KO0HWFOR == "PRIOR")
    return;
  end
  ;
  if (converseVar.eventKey is pf17
   && KO0HW01.KO0HWSW == "CHANGE")
    converseLib.validationFailed(118);
    KO0HW01.KO0HWP17 = "DELETE";
    return;
  end
  ;
  if (KO0HW01.KO0HWSW == "ADD ") /* user is in add mode*/
    KO0HW01.KO0HWMDF = "Y"; /* set modified data flag*/
  else
    if (KO0HM001 is modified) /* screen changes were made*/
      KO0HW01.KO0HWMDF = "Y"; /* set modified data flag*/
    end
  end
  ;
  if (KO0HW01.KO0HWMDF == "Y")
    set KO0HM001.KOYADJCD normal;
    set KO0HM001.KOHADTCO normal;
    set KO0HM001.KOHADTRP normal;
    set KO0HM001.KOHADTAG normal;
    set KO0HM001.KOHADFCO normal;
    set KO0HM001.KOHADFRP normal;
    set KO0HM001.KOHADFAG normal;
    set KO0HM001.XOTCD normal;
    set KO0HM001.KOHADJSL normal;
    set KO0HM001.XGPCD normal;
    set KO0HM001.IVCID normal;
    set KO0HM001.XNXCD normal;
    set KO0HM001.KUMSTRID normal;
    set KO0HM001.KUCCOID normal;
    set KO0HM001.KOHPADID normal;
    set KO0HM001.KO0HWPMM normal;
    set KO0HM001.KO0HWPYY normal;
    ;
    KO0HS4C(); /* edit adj code*/
    ;
    KO0HS4D(); /* edit to comm adjust amount*/
    KO0HS4E(); /* edit to rep id*/
    ;
    if (KO0HM001.KOHADTAG == " ") /* to sales agency not entered*/
      KO0HS4F(); /* edit blank to agency id*/
    else
      KO0HS4G(); /* edit non-blank to agency id*/
    end
    ;
    KO0HS4H(); /* edit from comm adjust amount*/
    KO0HS4I(); /* edit from rep id*/
    ;
    if (KO0HM001.KOHADFAG == " ") /* from sales agency not entered*/
      KO0HS4J(); /* edit blank from agency id*/
    else
      KO0HS4K(); /* edit non-blank from agency id*/
    end
    ;
    KO0HS4W(); /* compare to/from agency/reps*/
    KO0HS4L(); /* edit order type*/
    KO0HS4M(); /* edit adjust sales amount*/
    KO0HS4N(); /* edit gpc code*/
    ;
    if (KO0HM001.KUCCOID != 0  /* company id was entered*/
     || KO0HM001.KUMSTRID != 0 /* store id was entered*/
     || KO0HM001.XNXCD != 0)   /* dept id was entered*/
      KO0HS4O(); /* edit dept id*/
      KO0HS4P(); /* edit store id*/
      KO0HS4Q(); /* edit customer id*/
    else
      if (KOYREC.KOYADJCU == "Y") /* cust required flag = 'y'*/
        converseLib.validationFailed(38); /* customer is required*/
        set KO0HM001.KUCCOID cursor, bold;
        set KO0HM001.KUMSTRID normal;
        set KO0HM001.XNXCD normal;
      else
        set KO0HM001.KUCCOID normal;
        set KO0HM001.KUMSTRID normal;
        set KO0HM001.XNXCD normal;
      end
    end
    ;
    KO0HS4R(); /* edit prev adjust id*/
    KO0HS4S(); /* edit for adjust month*/
    ;
    if (converseVar.validationMsgNum == 0) /* no error messages*/
      KO0HM001.KO0HMP14 = " ";
      KO0HW01.KO0HWOAF = "N";
      KO0HS4T(); /* edit invoice id*/
      if (converseVar.validationMsgNum == 0) /* no error messages*/
        KO0HS4U(); /* edit from rep status*/
        if (converseVar.validationMsgNum == 0) /* no error messages*/
          KO0HS4V(); /* edit to rep status*/
        end
      end
    end
    ;
  end
  ;
  ;
end // end KO0HS4B

// edit adj code
Function KO0HS4C()
  ;
  ;
  KO0HS1N(); /* ; get adj code desc*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful retrieval*/
    if (KOYREC.KOYADJTP == "B"
     || KOYREC.KOYADJTP == "C")
      KO0HW01.KO0HWSW2 = "VALID ADJUSTMENT CODE";
      if (KO0HM001.KOYADJCD == "97" /* if adjust code 97*/
       && KO0HM001.KOHADJD1 <= " "  /* and no description*/
       && KO0HM001.KOHADJD2 <= " "  
       && KO0HM001.KOHADJD3 <= " ")
        set KO0HM001.KOYADJCD bold;
        set KO0HM001.KOHADJD1 cursor, bold;
        converseLib.validationFailed(205); /* code requires description*/
      end
    else
      KO0HW01.KO0HWSW2 = "INVALID ADJ CODE COMBO";
      set KO0HM001.KOYADJCD cursor, bold;
      converseLib.validationFailed(37);
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0HW01.KO0HWSW2 = "INVALID ADJUSTMENT CODE";
      set KO0HM001.KOYADJCD cursor, bold;
      converseLib.validationFailed(37);
    end
  end
  ;
  ;
end // end KO0HS4C

// edit to comm adjust amount
Function KO0HS4D()
  ;
  ;
  if (KO0HM001.KOHADTCO == 0) /* ; to comm amount = 0*/
    if (KO0HM001.KOHADTAG == " ") /* ; to agency not entered*/
      if (KOYREC.KOYADJCR == "B" /* ; comm required flag = 'b'*/
       || KOYREC.KOYADJCR == "T") /* ; comm required flag = 't'*/
        converseLib.validationFailed(50); /* ; to comm amount is required*/
        set KO0HM001.KOHADTCO cursor, bold;
      end
    end
  else
    if (KOYREC.KOYADJCR == "F" /* ; comm required flag = 'f'*/
     || KOYREC.KOYADJCR == "N") /* ; comm required flag = 'n'*/
      converseLib.validationFailed(144); /* ; to comm amount must be 0*/
      set KO0HM001.KOHADTCO cursor, bold;
    else
      if (KO0HM001.KOHADTCO < 0 /* ; to comm amount < 0*/
       && KO0HM001.KOHADFCO < 0) /* ; from comm amount < 0*/
        set KO0HM001.KOHADTCO cursor, bold;
        converseLib.validationFailed(150);
      else
        if (KO0HM001.KOHADTCO > 0 /* ; to comm amount > 0*/
         && KO0HM001.KOHADFCO > 0) /* from comm amount > 0*/
          set KO0HM001.KOHADTCO cursor, bold;
          converseLib.validationFailed(151);
        end
      end
    end
  end
  ;
  ;
end // end KO0HS4D

// edit to sales rep id
Function KO0HS4E()
  ;
  ;
  if (KO0HM001.KOHADTRP == 0) /* ; to rep/agency id = 0*/
    KO0HM001.XXXLSTNM[2] = " ";
    KO0HM001.XXXFSTNM[2] = " ";
    KO0HM001.XXXMDINT[2] = " ";
    KO0HW01.XXXSTAT[2] = " ";
  else
    if (KOYREC.KOYADJRA == 0 /* ; agcy required flag = 0*/
     && KO0HW01.KO0HWSW2 == "VALID ADJUSTMENT CODE")
      set KO0HM001.KOHADTRP cursor, bold;
      converseLib.validationFailed(146);
    else
      ;
      KO0HS1E(); /* ; retrieve sales rep/agency id*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* ; sales rep/agency not found*/
        set KO0HM001.KOHADTRP cursor, bold;
        converseLib.validationFailed(51);
      end
    end
  end
  ;
  ;
end // end KO0HS4E

// edit zero to agency id
Function KO0HS4F()
  ;
  ;
  KO0HM001.SM1AGYNM[2] = " "; /* ; move spaces to agency name*/
  ;
  if (KOYREC.KOYADJRA == 2) /* ; agency required flag = 2*/
    converseLib.validationFailed(123); /* ; agency id is required*/
    set KO0HM001.KOHADTAG cursor, bold;
  else
    if (KOYREC.KOYADJRA == 1) /* ; agency required flag = 1*/
      if (KO0HM001.KOHADTCO > 0 /* ; user entered comm amt*/
       || KO0HM001.KOHADTRP > 0) /* ; user entered rep/agency id*/
        converseLib.validationFailed(38); /* ; agency id is required*/
        set KO0HM001.KOHADTAG cursor, bold;
      else
        if (KO0HM001.KOHADFAG == " " /* no from agency entered*/
         && KO0HM001.KOHADFRP == 0   /* no from rep entered*/
         && KO0HM001.KOHADFCO == 0)  /* no from comm amt*/
          converseLib.validationFailed(38);
          set KO0HM001.KOHADTAG cursor, bold;
        end
      end
    end
  end
  ;
  ;
end // end KO0HS4F

// edit non-zero to agency id
Function KO0HS4G()
  ;
  ;
  if (KOYREC.KOYADJRA == 0
   /* ; adjust agency required flag = 0*/
   && KO0HW01.KO0HWSW2 == "VALID ADJUSTMENT CODE")
    set KO0HM001.KOHADTAG cursor, bold;
    converseLib.validationFailed(121); /* ; agency id must be 0*/
    return;
  end
  ;
  KO0HS1F(); /* ; retrieve sales agency id*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* ; sales agency id rec found*/
   && SM1REC.SM1PAYCD == "NP"  /* ; agency is a no pay agency*/
   && KO0HM001.KOHADTRP == 0)  /* ; user did not enter a rep id*/
    converseLib.validationFailed(105); /* ; user must enter an agency id*/
    set KO0HM001.KOHADTRP cursor, bold;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; sales agency id not found*/
      converseLib.validationFailed(52); /* ; invalid sales agency id*/
      set KO0HM001.KOHADTAG cursor, bold;
    end
  end
  ;
  ;
end // end KO0HS4G

// edit from comm adjust amount
Function KO0HS4H()
  ;
  ;
  if (KO0HM001.KOHADFCO == 0) /* ; from comm amount = 0*/
    if (KO0HM001.KOHADFAG == " ") /* ; no from agency entered*/
      if (KOYREC.KOYADJCR == "B" /* ; comm required flag = 'b'*/
       || KOYREC.KOYADJCR == "F") /* ; comm required flag = 'f'*/
        converseLib.validationFailed(50); /* ; from comm amount is required*/
        set KO0HM001.KOHADFCO cursor, bold;
      end
    end
  else
    if (KOYREC.KOYADJCR == "T" /* ; comm required flag = 't'*/
     || KOYREC.KOYADJCR == "N") /* ; comm required flag = 'n'*/
      converseLib.validationFailed(144); /* ; from comm amount must be 0*/
      set KO0HM001.KOHADFCO cursor, bold;
    else
      if (KO0HM001.KOHADFCO < 0 /* ; from comm amount < 0*/
       && KO0HM001.KOHADTCO < 0) /* ; to comm amount < 0*/
        set KO0HM001.KOHADFCO cursor, bold;
        converseLib.validationFailed(150);
      else
        if (KO0HM001.KOHADFCO > 0 /* ; from comm amount > 0*/
         && KO0HM001.KOHADTCO > 0) /* to comm amount > 0*/
          set KO0HM001.KOHADFCO cursor, bold;
          converseLib.validationFailed(151);
        end
      end
    end
  end
  ;
  ;
end // end KO0HS4H

// edit from sales rep id
Function KO0HS4I()
  ;
  ;
  if (KO0HM001.KOHADFRP == 0) /* ; to rep/agency id = 0*/
    KO0HM001.XXXLSTNM[1] = " ";
    KO0HM001.XXXFSTNM[1] = " ";
    KO0HM001.XXXMDINT[1] = " ";
    KO0HW01.XXXSTAT[1] = " ";
    ;
  else
    if (KOYREC.KOYADJRA == 0 /* ; adj agency required flag = 0*/
     && KO0HW01.KO0HWSW2 == "VALID ADJUSTMENT CODE")
      set KO0HM001.KOHADFRP cursor, bold;
      converseLib.validationFailed(146); /* ; cannot enter rep id*/
    else
      ;
      KO0HS1G(); /* ; retrieve sales rep/agency id*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* ; sales rep/agency not found*/
        converseLib.validationFailed(51); /* ; invalid sales rep/agency id*/
        set KO0HM001.KOHADFRP cursor, bold;
      end
    end
  end
  ;
  ;
end // end KO0HS4I

// edit zero from agency id
Function KO0HS4J()
  ;
  ;
  KO0HM001.SM1AGYNM[1] = " "; /* ; move spaces to agency name*/
  ;
  if (KOYREC.KOYADJRA == 2) /* ; agency required flag = 2*/
    converseLib.validationFailed(38); /* ; agency id is required*/
    set KO0HM001.KOHADFAG cursor, bold;
  else
    if (KOYREC.KOYADJRA == 1) /* ; agency required flag = 1*/
      if (KO0HM001.KOHADTAG == " " /* ; to agency not entered*/
       && KO0HM001.KOHADTRP == 0   /* ; to rep not entered*/
       && KO0HM001.KOHADTCO == 0) 
                                   /* ; to comm amt not entered*/
        converseLib.validationFailed(38);
        set KO0HM001.KOHADFAG cursor, bold;
      else
        return;
      end
    else
      if (KOYREC.KOYADJRA == 0) /* ; agency required flag = 0*/
        if (KO0HW01.KO0HWSW2 == "VALID ADJUSTMENT CODE")
          return;
        else
          if (KO0HM001.KOHADFCO != 0 /* ; user entered comm amt*/
           || KO0HM001.KOHADFRP != 0) /* user entered rep/agency id*/
            converseLib.validationFailed(38); /* ; agency id is required*/
            set KO0HM001.KOHADFAG cursor, bold;
          end
        end
      end
    end
  end
  ;
  ;
end // end KO0HS4J

// edit non-zero from agency id
Function KO0HS4K()
  ;
  ;
  if (KO0HW01.KO0HWSW2 == "VALID ADJUSTMENT CODE")
    if (KOYREC.KOYADJRA == 0) /* ; agency required flag = 0*/
      converseLib.validationFailed(121); /* ; agency id must be 0*/
      set KO0HM001.KOHADFAG cursor, bold;
      return;
    end
  end
  ;
  KO0HS1H(); /* ; retrieve sales agency id*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* ; sales agency id rec found*/
   && SM1REC.SM1PAYCD == "NP"  /* ; agency is a no pay agency*/
   && KO0HM001.KOHADFRP == 0)  /* ; user did not enter a rep id*/
    converseLib.validationFailed(105); /* ; user must enter rep id*/
    set KO0HM001.KOHADFRP cursor, bold;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; sales agency id not found*/
      converseLib.validationFailed(52); /* ; invalid sales agency id*/
      set KO0HM001.KOHADFAG cursor, bold;
    end
  end
  ;
  ;
end // end KO0HS4K

// edit order type
Function KO0HS4L()
  ;
  ;
  if (KO0HM001.XOTCD == " ") /* no order type entered*/
    return;
  else
    KO0HS1I(); /* retr order type desc*/
    if (sysVar.arrayIndex == 0) /* table match not found*/
      converseLib.validationFailed(65); /* invalid order type*/
      set KO0HM001.XOTCD cursor, bold;
    else
      if (XOTTBL.XGPCD[sysVar.arrayIndex] != KO0HM001.XGPCD)
        converseLib.validationFailed(153);
        set KO0HM001.XOTCD cursor, bold;
        set KO0HM001.XGPCD bold;
      end
    end
  end
  ;
  ;
end // end KO0HS4L

// edit adjust sales amount
Function KO0HS4M()
  ;
  ;
  if (KO0HM001.KOHADJSL == 0 /* ;  adjust sales amt = 0*/
   && KOYREC.KOYADJFL == "Y")
                                   /* ; adjust amt required flag = 'y'*/
    converseLib.validationFailed(61); /* ; adjust amt must be entered*/
    set KO0HM001.KOHADJSL cursor, bold;
  else
    if (KO0HM001.KOHADJSL < 0) /* ; adjust sales amt < 0*/
      if (KO0HM001.KOHADTCO != 0 /* ; to comm amount < or > 0*/
       || KO0HM001.KOHADFCO != 0) /* from comm amount < or > 0*/
        set KO0HM001.KOHADJSL cursor, bold;
        converseLib.validationFailed(149);
      end
    end
  end
  ;
  ;
end // end KO0HS4M

// edit gpc code
Function KO0HS4N()
  ;
  ;
  KO0HS1J(); /* ; get xgpcd for screen*/
  ;
  if (sysVar.arrayIndex == 0) /* ; table match not found*/
    converseLib.validationFailed(93); /* ; invalid gpc code*/
    set KO0HM001.XGPCD cursor, bold;
  else
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* gpc is inactive*/
      converseLib.validationFailed(92); /* ; inactive gpc code*/
      set KO0HM001.XGPCD cursor, bold;
    else
      if (XGPTBL.COCMFL[sysVar.arrayIndex] == "N") /* non-commission gpc*/
        set KO0HM001.XGPCD cursor, bold;
        converseLib.validationFailed(93); /* ; invalid gpc code*/
      end
    end
  end
  ;
  if (KO0HM001.KUCCOID == 0  /* ; company id not entered*/
   && KO0HM001.KUMSTRID == 0 /* ; store id not entered*/
   && KO0HM001.XNXCD == 0)   /* ; dept id not entered*/
    return;
  end
  ;
  KUNREC.KUCCOID = KO0HM001.KUCCOID;
  KUNREC.KUMSTRID = KO0HM001.KUMSTRID;
  KUNREC.XNXCD = KO0HM001.XNXCD;
  KUNREC.XGPCD = "**";
  ;
  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* not a good return code*/
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1REC.TA1LOCAT[1] = "KO0HS4N";
    TA1REC.TA1LOCAT[2] = "IO0280";
    XSKO001(); /* abort*/
    ;
  else
    ;
    call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* cust/store/dept gpc does not exist*/
        converseLib.validationFailed(57);
        set KO0HM001.XGPCD cursor, bold;
      else
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VSTORE01";
        TA1REC.TA1LOCAT[1] = "KO0HS4N";
        TA1REC.TA1LOCAT[2] = "IO0280";
        XSKO001(); /* abort*/
      end
    end
    ;
    call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
    ;
  end
  ;
  ;
end // end KO0HS4N

// edit dept id
Function KO0HS4O()
  ;
  ;
  KO0HS2R(); /* ; check department table*/
  ;
  if (sysVar.arrayIndex == 0) /* ; table match not found*/
    KO0HM001.XNXABRV = " ";
    converseLib.validationFailed(54); /* ; invalid dept*/
    set KO0HM001.XNXCD cursor, bold;
    KO0HM001.KO0HMP14 = " ";
    set KO0HM001.KO0HMP14 skip, invisible;
  else
    KO0HS1K(); /* get department description*/
  end
  ;
  ;
end // end KO0HS4O

// edit store id
Function KO0HS4P()
  ;
  ;
  if (KO0HM001.KUMSTRID == 0)
    KO0HM001.KUMSTSNM = " ";
  else
    KO0HS1L(); /* ; company store io*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(55); /* ; invalid store id*/
      set KO0HM001.KUMSTRID cursor, bold;
    end
  end
  ;
  ;
end // end KO0HS4P

// edit company id
Function KO0HS4Q()
  ;
  ;
  KO0HS1M(); /* ; company id io*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; valid company id*/
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; company id not found*/
      set KO0HM001.KUCCOID cursor, bold;
      converseLib.validationFailed(56); /* ; invalid company id*/
    end
  end
  ;
  ;
end // end KO0HS4Q

// edit prev adjust id
Function KO0HS4R()
  ;
  ;
  if (KO0HM001.KOHPADID != 0)
    if (KO0HM001.KOHPADID >= KO0HM001.KOHADJID)
      converseLib.validationFailed(62); /* ; prev adjust id cannot*/
      set KO0HM001.KOHPADID cursor, bold; /* be > than adjust id*/
    else
      set KOHREC empty;
      KOHREC.KOHADJID = KO0HM001.KOHPADID;
      ;
      call "IO0620" ("S ", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes};
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
          /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(49); /* ; prev adj id does not exist*/
          set KO0HM001.KOHPADID cursor, bold;
        else
          TA1REC.TA1DBASE = "DCOMM";
          TA1REC.TA1TBLVU = "VCOADJ01";
          TA1REC.TA1TBLKE = KOHREC.KOHKEY;
          TA1REC.TA1LOCAT[1] = "KO0HS4S";
          TA1REC.TA1LOCAT[2] = "IO0620";
          XSKO001(); /* ; abort*/
        end
      end
    end
  end
  ;
  ;
end // end KO0HS4R

// edit for adjust month
Function KO0HS4S()
  ;
  ;
  KO0HW01.KO0HWNMM = KO0HM001.KO0HWPMM;
  KO0HW01.KO0HWNYY = KO0HM001.KO0HWPYY;
  KO0HW01.KO0HWNDD = 1;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGE = KO0HW01.KO0HWNDT;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0HW01.KO0HWDTH = TA2REC.TA2GRGGN;
    if (KO0HW01.KO0HWDYM <= KOZREC.KOZCSTMO)
       /* next sentence*/
    else
      set KO0HM001.KO0HWPMM cursor, bold;
      set KO0HM001.KO0HWPYY bold; /* ; adjustment for month of must*/
      converseLib.validationFailed(59); /* ; be < or = to comm stmt month*/
    end
  else
    set KO0HM001.KO0HWPMM cursor, bold;
    set KO0HM001.KO0HWPYY bold;
    converseLib.validationFailed(58); /* ; must be valid month/year*/
  end
  ;
  ;
end // end KO0HS4S

// edit invoice id
Function KO0HS4T()
  ;
  ;
  if (KO0HW01.IVCID == KO0HM001.IVCID) /* invoice id not been changed*/
    if (KO0HW01.KO0HWIOF == "Y") /* ; invoice overide flag = 'y'*/
      return;
    else
      if (converseVar.eventKey is pf14) /* ; attention key = pf14*/
        KO0HW01.KO0HWIOF = "Y"; /* set invoice overide flag*/
        return;
      end
    end
  end
  ;
  KO0HW01.IVCID = KO0HM001.IVCID;
  KO0HW01.KO0HWIOF = "N";
  ;
  if (KO0HM001.IVCID != 0) /* ; user entered ivoice id*/
    set IV0REC empty;
    IV0REC.IV0IVCID = KO0HM001.IVCID;
    KO0HW01.KO0HWIVC = KO0HM001.IVCID;
    IV0REC.IV0PARTN = KO0HW01.KO0HWPRT;
    ;
    call "IO1110" ("S ", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KO0HM001.KO0HMP14 = "14:ACCEPT INVOICE";
        KO0HW01.KO0HWOAF = "Y"; /* set override allowed flag*/
        converseLib.validationFailed(117); /* ; invalid invoice number*/
        set KO0HM001.IVCID cursor, bold;
        set KO0HM001.KO0HMP14 initialAttributes;
      else
        TA1REC.TA1DBASE = "DINVC";
        TA1REC.TA1TBLVU = "VIVHDX01";
        TA1REC.TA1TBLKE = IV0REC.IV0KEY;
        TA1REC.TA1LOCAT[1] = "KO0HS4O";
        TA1REC.TA1LOCAT[2] = "IO1110";
        XSKO001(); /* ; call abort routine*/
      end
    end
  end
  ;
  ;
end // end KO0HS4T

// edit from rep status
Function KO0HS4U()
  ;
  ;
  if (KO0HW01.KOHADFRP == KO0HM001.KOHADFRP) /* from rep has not been changed*/
    if (KO0HW01.KO0HWFRO == "Y") /* ; from rep overide flag = 'y'*/
      return;
    else
      if (converseVar.eventKey is pf14) /* ; attention key = pf14*/
        KO0HW01.KO0HWFRO = "Y"; /* set to rep overide flag*/
        return;
      end
    end
  end
  ;
  KO0HW01.KOHADFRP = KO0HM001.KOHADFRP;
  KO0HW01.KO0HWFRO = "N";
  ;
  if (KO0HW01.XXXSTAT[1] == "I") /* ; from rep status = inactive*/
    KO0HM001.KO0HMP14 = "14:ACCEPT REP";
    KO0HW01.KO0HWOAF = "Y"; /* ; set override allowed flag*/
    converseLib.validationFailed(160); /* ; inactive rep*/
    set KO0HM001.KOHADFRP cursor, bold;
    set KO0HM001.KO0HMP14 initialAttributes;
  end
  ;
  ;
end // end KO0HS4U

// edit to rep status
Function KO0HS4V()
  ;
  ;
  if (KO0HW01.KOHADTRP == KO0HM001.KOHADTRP) /* to rep has not been changed*/
    if (KO0HW01.KO0HWTRO == "Y") /* ; to rep overide flag = 'y'*/
      return;
    else
      if (converseVar.eventKey is pf14) /* ; attention key = pf14*/
        KO0HW01.KO0HWTRO = "Y"; /* set to rep overide flag*/
        return;
      end
    end
  end
  ;
  KO0HW01.KOHADTRP = KO0HM001.KOHADTRP;
  KO0HW01.KO0HWTRO = "N";
  ;
  if (KO0HW01.XXXSTAT[2] == "I") /* ; from rep status = inactive*/
    KO0HM001.KO0HMP14 = "14:ACCEPT REP";
    KO0HW01.KO0HWOAF = "Y"; /* ; set override allowed flag*/
    converseLib.validationFailed(160); /* ; inactive rep*/
    set KO0HM001.KOHADTRP cursor, bold;
    set KO0HM001.KO0HMP14 initialAttributes;
  end
  ;
  ;
end // end KO0HS4V

// edit from/to agency/reps
Function KO0HS4W()
  ;
  ;
  if (KO0HW01.KO0HWSW2 == "VALID ADJUSTMENT CODE"
   && KOYREC.KOYTRTYP == "T" /* ; transfer type = transfer*/
   && KO0HM001.KOHADFAG == KO0HM001.KOHADTAG
   && KO0HM001.KOHADFRP == KO0HM001.KOHADTRP)
    set KO0HM001.KOHADFAG cursor, bold;
    set KO0HM001.KOHADFRP bold;
    set KO0HM001.KOHADTAG bold;
    set KO0HM001.KOHADTRP bold;
    converseLib.validationFailed(167);
  end
  ;
  ;
end // end KO0HS4W

// update data base
Function KO0HS5B()
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* ; map errors exist*/
    return; /* ; exit process*/
  else
    if (converseVar.eventKey is pf12) /* ; user requested edit only*/
      converseLib.validationFailed(76); /* ; edit option is complete*/
      return; /* ; exit process*/
    else
      if (KO0HM001.KO0HWFOR == "PRIOR")
        set KO0HM001 initial;
        set KO0HM001.KO0HWPMM cursor;
        KO0HS1P();
        KO0HS1Q();
        KO0HM001.KOHADJID = KOZREC.KOZNCAID;
        KO0HW01.KOHADJID = KOZREC.KOZNCAID;
        return;
      else
        if (KO0HW01.KO0HWMDF == "N") /* ; no map changes were made*/
          set KO0HM001 initial;
          set KO0HM001.KO0HWPMM cursor;
          KO0HS1P();
          KO0HS1Q();
          converseLib.validationFailed(63);
          return;
        end
      end
    end
  end
  ;
  KO0HS5C(); /* ; get time and date stamp*/
  ;
  if (KO0HW01.KO0HWSW == "CHANGE") /* ; in change mode*/
    KOHREC.KOHGROUP = KO0HW01.KOHGROUP;
    KO0HS5D(); /* ; write before change audit rec*/
    KO0HS5E(); /* ; move screen to KOHREC*/
    KO0HS5F(); /* ; update KOHREC*/
    KO0HS5G(); /* ; write after change audit rec*/
  else
    KO0HS5E(); /* ; move screen to kohrec*/
    KO0HS5H(); /* ; add kohrec*/
  end
  ;
  ;
end // end KO0HS5B

// get time and date stamp
Function KO0HS5C()
  ;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  KO0HW01.ZZZSDT = TA2REC.TA2GRGGN;
  KO0HW01.ZZZCHGDT = TA2REC.TA2GRGGN;
  KO0HW01.ZZZCHGTM = TA2REC.TA2TIMHM;
  KO0HW01.ZZHHMMSS = TA2REC.TA2TIMEN;
  ;
  ;
end // end KO0HS5C

// write before change audit rec
Function KO0HS5D()
  ;
  ;
  KO0HS6A(); /* ; move KOHREC to audit rec*/
  ;
  KOAREC.KOAACTTY = "2";
  ;
  KO0HS6B(); /* ; write audit rec*/
  ;
  ;
end // end KO0HS5D

// move screen to KOHREC
Function KO0HS5E()
  ;
  ;
  KOHREC.KOHADJID = KO0HM001.KOHADJID;
  ;
  KO0HW01.KO0HWNMM = KO0HM001.KO0HWCMM;
  KO0HW01.KO0HWNYY = KO0HM001.KO0HWCYY;
  KO0HW01.KO0HWNDD = 1;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGE = KO0HW01.KO0HWNDT;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  KO0HW01.KO0HWDTH = TA2REC.TA2GRGGN;
  KOHREC.KOZCSTMO = KO0HW01.KO0HWDYM;
  ;
  KOHREC.KUCCOID = KO0HM001.KUCCOID;
  KOHREC.KUMSTRID = KO0HM001.KUMSTRID;
  KOHREC.XNXCD = KO0HM001.XNXCD;
  KOHREC.XGPCD = KO0HM001.XGPCD;
  KOHREC.IVCID = KO0HM001.IVCID;
  ;
  if (KO0HM001.KOHADFCO < 0) /* ; from comm amount < 0*/
    KOHREC.KOHADJSL = KO0HM001.KOHADJSL;
  else
    if (KO0HM001.KOHADFCO == 0 /* ; from comm amount = 0*/
     && KO0HM001.KOHADTCO < 0) /* ; to comm amount < 0*/
      KOHREC.KOHADJSL = KO0HM001.KOHADJSL * -1;
    else
      if (KO0HM001.KOHADFCO == 0 /* ; from comm amount = 0*/
       && KO0HM001.KOHADTCO == 0) /* ; to comm amount = 0*/
        KOHREC.KOHADJSL = KO0HM001.KOHADJSL;
      else
        if (KO0HM001.KOHADFCO == 0 /* ; from comm amount = 0*/
         && KO0HM001.KOHADTCO > 0) /* to comm amount > 0*/
          KOHREC.KOHADJSL = KO0HM001.KOHADJSL;
        else /* ; from comm amount > 0*/
          KOHREC.KOHADJSL = KO0HM001.KOHADJSL * -1;
        end
      end
    end
  end
  ;
  KOHREC.XOTCD = KO0HM001.XOTCD;
  KOHREC.KOHADFCO = KO0HM001.KOHADFCO;
  KOHREC.KOHADTCO = KO0HM001.KOHADTCO;
  KOHREC.KOYADJCD = KO0HM001.KOYADJCD;
  KOHREC.KOHADJD1 = KO0HM001.KOHADJD1;
  KOHREC.KOHADJD2 = KO0HM001.KOHADJD2;
  KOHREC.KOHADJD3 = KO0HM001.KOHADJD3;
  ;
  KO0HW01.KO0HWNMM = KO0HM001.KO0HWPMM;
  KO0HW01.KO0HWNYY = KO0HM001.KO0HWPYY;
  KO0HW01.KO0HWNDD = 1;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGE = KO0HW01.KO0HWNDT;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  KO0HW01.KO0HWDTH = TA2REC.TA2GRGGN;
  KOHREC.KOHADJMO = KO0HW01.KO0HWDYM;
  ;
  KOHREC.KOHADFAG = KO0HM001.KOHADFAG;
  KOHREC.KOHADFRP = KO0HM001.KOHADFRP;
  KOHREC.KOHADTAG = KO0HM001.KOHADTAG;
  KOHREC.KOHADTRP = KO0HM001.KOHADTRP;
  KOHREC.KOHPADID = KO0HM001.KOHPADID;
  KOHREC.XXXUSRID = COMMAREA.CAUSERID;
  ;
  ;
end // end KO0HS5E

// write KOHREC
Function KO0HS5F()
  ;
  ;
  KOHREC.ZZZCHGDT = KO0HW01.ZZZCHGDT;
  KOHREC.ZZZCHGTM = KO0HW01.ZZZCHGTM;
  ;
  call "IO0620" ("U ", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes}; /* update kohrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful update*/
    set KO0HM001 initial; /* ; re-initialize map*/
    set KO0HM001.KO0HWPMM cursor;
    KO0HS1P(); /* ; unprotect fields for add*/
    KO0HS1Q(); /* ; get next comm adj id*/
    KO0HM001.KOHADJID = KOZREC.KOZNCAID;
    KO0HW01.KOHADJID = KOZREC.KOZNCAID;
    converseLib.validationFailed(44); /* ; update was successful*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; record was not found*/
      KO0HS1B(); /* ; retrieve comm adj row*/
      converseLib.validationFailed(60); /* ; data has been modified*/
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VCOADJ01";
      TA1REC.TA1TBLKE = KOHREC.KOHKEY;
      TA1REC.TA1LOCAT[1] = "KO0HS5F";
      TA1REC.TA1LOCAT[2] = "IO0620";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0HS5F

// write after change audit rec
Function KO0HS5G()
  ;
  ;
  KO0HS6A(); /* ; move KOHREC to audit rec*/
  ;
  KOAREC.KOAACTTY = "3";
  ;
  KO0HS6B(); /* ; write audit rec*/
  ;
  ;
end // end KO0HS5G

// add KOHREC
Function KO0HS5H()
  ;
  ;
  KO0HS5I(); /* check adj id*/
  ;
  if (KO0HM001.KOHADJID != KOZREC.KOZNCAID)
    KO0HM001.KOHADJID = KOZREC.KOZNCAID;
    KO0HW01.KOHADJID = KOZREC.KOZNCAID;
    converseLib.validationFailed(104);
  else
    ;
    KO0HS5J(); /* ; update next adj id*/
    ;
    if (KO0HM001.KOHADJID == KOZREC.KOZNCAID)
      KO0HS5K(); /* ; add adj record*/
    else
      KOZREC.KOZNCAID = KOZREC.KOZNCAID + 1;
      KO0HM001.KOHADJID = KOZREC.KOZNCAID;
      KO0HW01.KOHADJID = KOZREC.KOZNCAID;
      converseLib.validationFailed(104);
    end
    ;
  end
  ;
  ;
end // end KO0HS5H

// check adj id to next adj id
Function KO0HS5I()
  ;
  ;
  set KOZREC empty;
  set SQLCA empty;
  ;
  call "IO0640" ("S ", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KOZREC.KOZNCAID = KOZREC.KOZNCAID + 1;
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOCTL01";
    TA1REC.TA1LOCAT[1] = "KO0HS5I";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0HS5I

// update KOZREC next adj id
Function KO0HS5J()
  ;
  ;
  set SQLCA empty;
  set KOZREC empty;
  ;
  call "IO0640" ("U2", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful update*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOCTL01";
    TA1REC.TA1LOCAT[1] = "KO0HS5J";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001(); /* abort*/
  end
  ;
  KOZREC.KOZNCAID = KOZREC.KOZNCAID + 1;
  ;
  ;
end // end KO0HS5J

// add KOHREC
Function KO0HS5K()
  ;
  ;
  KOHREC.ZZZSDT = KO0HW01.ZZZSDT;
  KOHREC.ZZZCHGDT = KO0HW01.ZZZCHGDT;
  KOHREC.ZZZCHGTM = KO0HW01.ZZZCHGTM;
  ;
  call "IO0620" ("A ", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0HS5L(); /* ; write add audit report*/
    KO0HS1P(); /* ; unprotect fields for add*/
    KO0HS1Q(); /* ; get next comm adj id*/
    set KO0HM001 empty;
    set KO0HM001.KO0HWPMM cursor;
    KO0HM001.KO0HWFOR = " FOR";
    KO0HM001.KO0HWCMM = KO0HW01.KO0HWMM;
    KO0HM001.KO0HWCYY = KO0HW01.KO0HWYY;
    KO0HM001.KOHADJID = KO0HW01.KOHADJID;
    converseLib.validationFailed(43); /* ; add was successful*/
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOADJ01";
    TA1REC.TA1TBLKE = KOHREC.KOHKEY;
    TA1REC.TA1LOCAT[1] = "KO0HS5K";
    TA1REC.TA1LOCAT[2] = "IO0620";
    XSKO001(); /* ; call abort routine*/
  end
  ;
  ;
end // end KO0HS5K

// write add audit record
Function KO0HS5L()
  ;
  ;
  KO0HS6A(); /* ; move KOHREC to audit rec*/
  ;
  KOAREC.KOAACTTY = "1";
  ;
  KO0HS6B(); /* ; write audit rec*/
  ;
  ;
end // end KO0HS5L

// move KOHREC to audit rec
Function KO0HS6A()
  ;
  ;
  set KOAREC empty;
  ;
  KOAREC.KOHADJID = KOHREC.KOHADJID;
  KOAREC.KOZCSTMO = KOHREC.KOZCSTMO;
  KOAREC.KUCCOID = KOHREC.KUCCOID;
  KOAREC.KUMSTRID = KOHREC.KUMSTRID;
  KOAREC.XNXCD = KOHREC.XNXCD;
  KOAREC.XGPCD = KOHREC.XGPCD;
  KOAREC.IVCID = KOHREC.IVCID;
  KOAREC.KOHADJSL = KOHREC.KOHADJSL;
  KOAREC.KOHADFCO = KOHREC.KOHADFCO;
  KOAREC.KOHADTCO = KOHREC.KOHADTCO;
  KOAREC.KOYADJCD = KOHREC.KOYADJCD;
  KOAREC.KOHADJD1 = KOHREC.KOHADJD1;
  KOAREC.KOHADJD2 = KOHREC.KOHADJD2;
  KOAREC.KOHADJD3 = KOHREC.KOHADJD3;
  KOAREC.KOHADJMO = KOHREC.KOHADJMO;
  KOAREC.KOHADFAG = KOHREC.KOHADFAG;
  KOAREC.KOHADFRP = KOHREC.KOHADFRP;
  KOAREC.KOHADTAG = KOHREC.KOHADTAG;
  KOAREC.KOHADTRP = KOHREC.KOHADTRP;
  KOAREC.KOHPADID = KOHREC.KOHPADID;
  KOAREC.KOHADJNM = KOHREC.KOHADJNM;
  KOAREC.KOHADJDT = KOHREC.KOHADJDT;
  KOAREC.XXXUSRID = COMMAREA.CAUSERID;
  KOAREC.KOACRSDT = KOHREC.ZZZSDT;
  ;
  ;
end // end KO0HS6A

// write audit rec
Function KO0HS6B()
  ;
  ;
  KOAREC.KOATBLCD = 35;
  KOAREC.XXXTBLNM = "VCOADJ01";
  KOAREC.ZZZSDT = KO0HW01.ZZZSDT;
  KOAREC.ZZHHMMSS = KO0HW01.ZZHHMMSS;
  ;
  call "IO0630" ("A ", SQLCA, KOAREC) {isNoRefresh = yes, isExternal = yes}; /* add audit rec*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* ; add was not successful*/
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOAUD01";
    TA1REC.TA1TBLKE = KOAREC.KOAKEY;
    TA1REC.TA1LOCAT[1] = "KO0HS22";
    TA1REC.TA1LOCAT[2] = "IO0630";
    XSKO001(); /* ; call abort routine*/
  end
  ;
  ;
end // end KO0HS6B

//*** RECORD=KO0HW01 ****
// *******************  ko0hw01 record ************************
// this is the working storage record for ko0h application
// 
// 
// ************************************************************
// MAINTENANCE:
// 
// REV.
// NUMBER  WHO      WHEN      WHY
// ------  ------   -------   ---------------------------------
//  00     bnaber   09-24-86  created record.
//  00     aivers   04-09-92  rename sm5stat to xxxstat.
// 
// 
// ************************************************************
// ***********************
Record KO0HW01 type basicRecord
  5 KO0HWGRP KO0HWGRP ; 
    10 KO0HWSW KO0HWSW ; 
    10 KO0HWSW2 KO0HWSW2 ; 
    10 KO0HWMDF KO0HWMDF ; 
    10 KO0HWDTE KO0HWDTE ; 
      15 * char(5) ; 
      15 KO0HWYY KO0HWYY ; 
      15 KO0HWMM KO0HWMM ; 
    10 KO0HWCID KO0HWCID ; 
      15 KO0HWNID KO0HWNID ; 
      15 * char(14) ; 
    10 KO0HWDT KO0HWDT ; 
      15 KO0HWHMM KO0HWHMM ; 
      15 KO0HWSL1 KO0HWSL1 ; 
      15 KO0HWHDD KO0HWHDD ; 
      15 * char(1) ; 
      15 KO0HWHYY KO0HWHYY ; 
    10 KO0HWNDT KO0HWNDT ; 
      15 KO0HWNYY KO0HWNYY ; 
      15 KO0HWNMM KO0HWNMM ; 
      15 KO0HWNDD KO0HWNDD ; 
    10 KO0HWDTH KO0HWDTH ; 
      15 KO0HWDYM KO0HWDYM ; 
      15 * char(2) ; 
    10 KOHGROUP KOHGROUP ; 
    10 KOHADJID KOHADJID ; 
    10 ZZHHMMSS ZZHHMMSS ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 KO0HWP17 KO0HWP17 ; 
    10 KO0HWIVC KO0HWIVC ; 
      15 * num(7) ; 
      15 KO0HWPRT KO0HWPRT ; 
    10 IVCID IVCID ; 
    10 KOHADFRP KOHADFRP ; 
    10 KOHADTRP KOHADTRP ; 
    10 KO0HWOAF KO0HWOAF ; 
    10 KO0HWIOF KO0HWIOF ; 
    10 KO0HWFRO KO0HWFRO ; 
    10 KO0HWTRO KO0HWTRO ; 
    10 XXXSTAT XXXSTAT [2] ; 
    10 KO0HWDOF KO0HWDOF ; 
    10 KO0HXNX KO0HXNX ; 
end // end KO0HW01

// character comm adj id
DataItem KO0HWCID char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// department override flag
DataItem KO0HWDOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date hold area
DataItem KO0HWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split month and year
DataItem KO0HWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date hold for year and month
DataItem KO0HWDTH num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date hold yyyymm
DataItem KO0HWDYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from rep overide flag
DataItem KO0HWFRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comm. next misc. adj. id
DataItem KO0HWGRP char(398)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day of mm-dd-yy
DataItem KO0HWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month of mm-dd-yy
DataItem KO0HWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year of mm-dd-yy
DataItem KO0HWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice overide flag
DataItem KO0HWIOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// find part number of invoice
DataItem KO0HWIVC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem KO0HWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comm. prev. stmt month
DataItem KO0HWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day of yymmdd
DataItem KO0HWNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date hold area
DataItem KO0HWNDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric comm adj id
DataItem KO0HWNID num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month of yymmdd
DataItem KO0HWNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year of yymmdd
DataItem KO0HWNYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// override allowed flag
DataItem KO0HWOAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete commission adj id
DataItem KO0HWP17 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// find part number of invoice
DataItem KO0HWPRT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KO0HWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add and change switch
DataItem KO0HWSW char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invalid adj code switch
DataItem KO0HWSW2 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to rep overide flag
DataItem KO0HWTRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split apart year
DataItem KO0HWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// department code (temp)
DataItem KO0HXNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

