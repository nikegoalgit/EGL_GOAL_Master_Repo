package ko0f;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XSMTBL;
import corpx2.XSMTYPCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZSDT;
import ko.common.KOAREC;
import ko.common.KOFCOMCD;
import ko.common.KOFCSPCT;
import ko.common.KOFREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA2TIMEN;
import ta.common.TA2TIMHM;
import ta.common.TA2TIMSS;
//*** PROGRAM=KO0F ****
//  ********* special commission schedule *****************
// 
//  this application will allow the user to add and change
//  special commission schedules.
// 
//  there are four types of schedules.
//  each schedule can contain a maximum of 26 unique specialty
//  codes, each with an assigned percentage.
// 
// 
//  date written: sept.1986
// 
//  modifications:
// 
//  init     date         change
//  -----  ---------  -----------------------------------------
// jwood   12-16-88   added noncsp option on calls
// jwood   12-16-88   added xssegtr logic
// dluck   09-21-93   add numeric checks for conversion to
//                    cspv4.  s10, s11, s15, s16, s18, s19, s20
// 
// *********************
Program KO0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO0FWREC KO0FWREC; // record
  KOAREC KOAREC; // record
  KOFREC KOFREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSMTBL {deleteAfterUse = yes}; // table
  use KO0FM.KO0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0F000: KO0F000();

    goto KO0F010; /* process control*/



    KO0F010: KO0F010();

    if (KO0FM001.XSMTYPCD == KO0FWREC.XSMTYPCD
     /* spec sched type not changed*/
     && KO0FM001.XSMTYPCD != " ")
      if (converseVar.eventKey is enter /* 'enter' or*/
       || converseVar.eventKey is pf12) /* pf12, start update*/
        goto KO0F030;
      else
        goto KO0F020;
      end
    else
      goto KO0F020;
    end



    KO0F020: KO0F020();


    goto KO0F010;



    KO0F030: KO0F030();
    goto KO0F010;
  end // end main
end // end KO0F

// initialization
Function KO0F000()


  XSENTRY(); /* check security*/


  XSSEGTR(); /* set segmented transaction id*/

  converseLib.clearScreen();
  set KO0FM001 initial; /* initialize map*/

  set SQLCA empty; /* initialize records*/
  set KO0FM001 empty;
  set KO0FWREC empty;
  set KOFREC empty;
  set KOAREC empty;
  set TA1REC empty;
  set TA2REC empty;
  set ERRSQLCA empty;

  KO0FWFST = "YES"; /* first time sw*/

  if (COMMAREA.CAITEM != " ")
    KO0FM001.XSMTYPCD = COMMAREA.CAITEM;
  end


end // end KO0F000

// flow control
Function KO0F010()


  if (KO0FWFST == "YES") /* test for first time in*/
      /* next sentence*/
  else
    KO0FS01(); /* validate attention keys*/
  end



end // end KO0F010

// special schedule display
Function KO0F020()


  set KO0FM001.XSMTYPCD normal;


  if (KO0FWFST == "YES")
                                   /* skip this logic if first time thru*/
     /* next sentence*/

  else
    KO0FWREC.KO0FWTY = KO0FM001.XSMTYPCD;
    if (KO0FWREC.KO0FWTY in XSMTBL.XSMCD)
      KO0FWABR = XSMTBL.XSMABRV[sysVar.arrayIndex];
    end

    if (sysVar.arrayIndex > 0)
      set KO0FWREC empty;
      KO0FWREC.XSMTYPCD = KO0FM001.XSMTYPCD;
      set KO0FM001 empty;
      KO0FM001.XSMTYPCD = KO0FWREC.XSMTYPCD;
      KO0FS02();
    else
      set KO0FM001.XSMTYPCD cursor, bold;
      converseLib.validationFailed(8);
    end
  end



  KO0FWFST = "NO "; /* turn off first time flag*/

  KO0FM001.KO0FDATE = VGVar.currentShortGregorianDate;

  KO0FWREC.KO0FWSUB = 26;
  if (KO0FM001.XSMTYPCD == " ")
    while (KO0FWREC.KO0FWSUB > 0)
      KO0FS08(); /* protect fields*/
    end
  else
    while (KO0FWREC.KO0FWSUB > 0)
      KO0FS09(); /* unprotect*/
    end
  end

  KO0FM001.KO0FPRO = "KO0F020";

  converse KO0FM001 ;
end // end KO0F020

// special schedule editing.
Function KO0F030()


  set KO0FM001.XSMTYPCD cursor, normal;
  KO0FM001.KO0FMSG = " ";
  set KO0FM001.CATOAP normal;
  set KO0FM001.CAITEM normal;

  KO0FWREC.KO0FWSUB = 26;

  while (KO0FWREC.KO0FWSUB > 0)
    KO0FS09(); /* reset attributes*/
  end


  KO0FWREC.KO0FWSW = "YES"; /* set no errors switch*/
  KO0FWREC.KO0FWSUB = 26; /* reset index*/

  while (KO0FWREC.KO0FWSUB > 0)
    KO0FS10(); /* validate inputs*/
  end


  if (converseVar.eventKey is pf12
   && KO0FWREC.KO0FWSW == "YES")
    converseLib.validationFailed(76);
  end


  if (converseVar.eventKey is enter
   && KO0FWREC.KO0FWSW == "YES")
    KO0FS12(); /* call date routine for time*/

    KO0FWREC.KO0FWSUB = 1; /* reset index*/
    while (KO0FWREC.KO0FWSUB <= 26)
      KO0FS15(); /* perform updates*/
    end

    KO0FWREC.KO0FMSG = KO0FM001.KO0FMSG;
    converseLib.clearScreen();
    set KO0FM001 initial;
    KO0FM001.KO0FMSG = KO0FWREC.KO0FMSG;
    set KO0FWREC empty;

    KO0FWREC.KO0FWSUB = 26;
    if (KO0FM001.XSMTYPCD == " ")
      while (KO0FWREC.KO0FWSUB > 0)
        KO0FS08();
      end
    end

    call "IO0710" ("CS", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes}; /* close db*/

  end

  KO0FM001.KO0FPRO = "KO0F030";
  KO0FM001.KO0FDATE = VGVar.currentShortGregorianDate;


  converse KO0FM001 ;
end // end KO0F030

// validate attention keys
Function KO0FS01()


  if (KO0FM001.CATOAP != " ") /* check for fast path*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KO0FM001.CATOAP;
      COMMAREA.CAITEM = KO0FM001.CAITEM;
      XSEXIT();
      set KO0FM001.CATOAP cursor, bold;
      KO0FM001.KO0FMSG = COMMAREA.CAMSG;
      exit stack;
    else
      set KO0FM001.CATOAP cursor, bold;
      converseLib.validationFailed(1);
      exit stack;
    end
  end

  if (converseVar.eventKey is pf1) /* transfer to help facitily*/
    XSPF1();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf3 /* cancel application*/
   || converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KO0A";
    XSEXIT();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf4) /* transfer to main menu*/
    XSPF4();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is enter /* valid attention key*/
   || converseVar.eventKey is pf12)
    return;
  else
    converseLib.validationFailed(2);
    exit stack;
  end


end // end KO0FS01

// retr. special commission
Function KO0FS02()


  KOFREC.KOFKEY = KO0FM001.XSMTYPCD;

  call "IO0710" ("SS", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    KO0FWREC.KO0FWSUB = 1;
    KO0FWREC.KO0FWSW = "YES";

    while (SQLCA.VAGen_SQLCODE == 0
     && KO0FWREC.KO0FWSW == "YES"
     && KO0FWREC.KO0FWSUB <= 26)

      KO0FS03();
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      /* NEXT SENTENCE;*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KO0F";
      TA1REC.TA1LOCAT = "KO0FS02";
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA);
    end
  end

  call "IO0710" ("CS", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};



end // end KO0FS02

// move special comm to screen
Function KO0FS03()


  call "IO0710" ("SN", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    KO0FM001.KOFCOMCD[KO0FWSUB] = KOFREC.KOFCOMCD;

    KO0FWREC.KO0FWPTA = KOFREC.KOFCSPCT * 1000;
    KO0FWREC.KO0FWPBI = KO0FWREC.KO0FWPAI;
    KO0FWREC.KO0FWPBD = KO0FWREC.KO0FWPAD;
    KO0FWPBP = ".";
    KO0FWREC.KO0FWPTC = KO0FWREC.KO0FWPTB;
    KO0FWREC.KO0FWPTD = " ";
    if (KO0FWREC.KO0FWPCI[1] == "0")
      KO0FWREC.KO0FWSB1 = 2;
    else
      KO0FWREC.KO0FWSB1 = 1;
    end
    while (KO0FWREC.KO0FWSB1 <= 6)
      KO0FWREC.KO0FWPDI[KO0FWSB1] = KO0FWREC.KO0FWPCI[KO0FWSB1];
      KO0FWREC.KO0FWSB1 = KO0FWREC.KO0FWSB1 + 1;
    end
    KO0FM001.KO0FMPCT[KO0FWSUB] = KO0FWREC.KO0FWPTD;

    KO0FM001.XXXSTAT[KO0FWSUB] = KOFREC.XXXSTAT;
    KO0FM001.ZZZSDT[KO0FWSUB] = KOFREC.ZZZSDT;
    KO0FM001.ZZZCHGDT[KO0FWSUB] = KOFREC.ZZZCHGDT;

    KO0FWREC.KOFCOMCD[KO0FWSUB] = KOFREC.KOFCOMCD;
    KO0FWREC.KOFCSPCT[KO0FWSUB] = KOFREC.KOFCSPCT;
    KO0FWREC.XXXSTAT[KO0FWSUB] = KOFREC.XXXSTAT;
    KO0FWREC.ZZZSDT[KO0FWSUB] = KOFREC.ZZZSDT;
    KO0FWREC.ZZZCHGDT[KO0FWSUB] = KOFREC.ZZZCHGDT;
    KO0FWREC.ZZZCHGCT[KO0FWSUB] = KOFREC.ZZZCHGCT;

  end


  KO0FWREC.KO0FWSUB = KO0FWREC.KO0FWSUB + 1; /* set up the index*/

  if (KO0FWREC.KO0FWSUB == 26)
    KO0FWREC.KO0FWSW = "NO";
  end



end // end KO0FS03

// protect from input.........
Function KO0FS08()


  set KO0FM001.KOFCOMCD[KO0FWSUB] protect;
  set KO0FM001.KO0FMPCT[KO0FWSUB] protect;
  set KO0FM001.XXXSTAT[KO0FWSUB] protect;
  set KO0FM001.ZZZSDT[KO0FWSUB] protect;
  set KO0FM001.ZZZCHGDT[KO0FWSUB] protect;

  KO0FWREC.KO0FWSUB = KO0FWREC.KO0FWSUB - 1;



end // end KO0FS08

// reset attributes...........
Function KO0FS09()


  set KO0FM001.ZZZSDT[KO0FWSUB] protect;
  set KO0FM001.ZZZCHGDT[KO0FWSUB] protect;


  if (KO0FM001.XXXSTAT[KO0FWSUB] == "A")
    set KO0FM001.KOFCOMCD[KO0FWSUB] protect;
    set KO0FM001.KO0FMPCT[KO0FWSUB] protect;
  else
    set KO0FM001.KOFCOMCD[KO0FWSUB] cursor, normal;
    set KO0FM001.KO0FMPCT[KO0FWSUB] normal;
  end


  if (KO0FM001.XXXSTAT[KO0FWSUB] == "I")
    set KO0FM001.XXXSTAT[KO0FWSUB] normal;
  else
    set KO0FM001.XXXSTAT[KO0FWSUB] protect;
  end


  KO0FWREC.KO0FWSUB = KO0FWREC.KO0FWSUB - 1;



end // end KO0FS09

// validate inputs
Function KO0FS10()


  if (KO0FM001.KOFCOMCD[KO0FWSUB] == " "
   && KO0FM001.KO0FMPCT[KO0FWSUB] == " "
   && KO0FM001.XXXSTAT[KO0FWSUB] == " ")
    KO0FWREC.KO0FWSUB = KO0FWREC.KO0FWSUB - 1;
    return;
  end


  KO0FWREC.KO0FWPTC = "00.000";

  KO0FWREC.KO0FWSB1 = 1;

  if (KO0FM001.KO0FMPCT[KO0FWSUB] > " ")
    KO0FWREC.KO0FWPTD = KO0FM001.KO0FMPCT[KO0FWSUB];
  else
    KO0FWREC.KO0FWPTD = "00.000";
  end

  while (KO0FWREC.KO0FWSB1 <= 6
   && KO0FWREC.KO0FWPDI[KO0FWSB1] != ".")
    KO0FWREC.KO0FWSB1 = KO0FWREC.KO0FWSB1 + 1;
  end

  KO0FWREC.KO0FWSB2 = KO0FWREC.KO0FWSB1 - 1;
  KO0FWREC.KO0FWSB3 = 2;
  while (KO0FWREC.KO0FWSB2 > +0
   && KO0FWREC.KO0FWSB3 > +0)
    KO0FWREC.KO0FWPCI[KO0FWSB3] = KO0FWREC.KO0FWPDI[KO0FWSB2];
    KO0FWREC.KO0FWSB2 = KO0FWREC.KO0FWSB2 - 1;
    KO0FWREC.KO0FWSB3 = KO0FWREC.KO0FWSB3 - 1;
  end

  KO0FWREC.KO0FWSB2 = 4;
  KO0FWREC.KO0FWSB3 = KO0FWREC.KO0FWSB1 + 1;
  while (KO0FWREC.KO0FWSB2 <= +6
   && KO0FWREC.KO0FWSB3 <= +6)
    KO0FWREC.KO0FWPCI[KO0FWSB2] = KO0FWREC.KO0FWPDI[KO0FWSB3];
    KO0FWREC.KO0FWSB2 = KO0FWREC.KO0FWSB2 + 1;
    KO0FWREC.KO0FWSB3 = KO0FWREC.KO0FWSB3 + 1;
  end

  KO0FWREC.KO0FWPTD = " ";
  if (KO0FWREC.KO0FWPCI[1] == "0")
    KO0FWREC.KO0FWSB1 = 2;
  else
    KO0FWREC.KO0FWSB1 = 1;
  end
  while (KO0FWREC.KO0FWSB1 <= 6)
    KO0FWREC.KO0FWPDI[KO0FWSB1] = KO0FWREC.KO0FWPCI[KO0FWSB1];
    KO0FWREC.KO0FWSB1 = KO0FWREC.KO0FWSB1 + 1;
  end
  KO0FM001.KO0FMPCT[KO0FWSUB] = KO0FWREC.KO0FWPTD;


  KO0FWREC.KO0FWPTB = KO0FWREC.KO0FWPTC;
  KO0FWREC.KO0FWPAI = KO0FWREC.KO0FWPBI;
  KO0FWREC.KO0FWPAD = KO0FWREC.KO0FWPBD;
  KO0FWREC.KO0FWPCT = KO0FWPTA / 1000;

  if (KO0FWREC.KOFCOMCD[KO0FWSUB] != KO0FM001.KOFCOMCD[KO0FWSUB]
   || KO0FWREC.KOFCSPCT[KO0FWSUB] != KO0FWREC.KO0FWPCT
   || KO0FWREC.XXXSTAT[KO0FWSUB] != KO0FM001.XXXSTAT[KO0FWSUB])

    KO0FS11(); /* flag any errors*/
  end

  KO0FWREC.KO0FWSUB = KO0FWREC.KO0FWSUB - 1;



end // end KO0FS10

// flag errors
Function KO0FS11()

   /* ***********************************************************/
    /* edits: 1.status defaults to inactive 'i'*/
             /* and must be : a,d,i or blank.*/
           /* 2.new commission codes must be alpha & unique*/
             /* with a percent gt 0 and unique.*/

   /* ***********************************************************/

  if (KO0FM001.KOFCOMCD == " "
   && KO0FM001.XXXSTAT[KO0FWSUB] == " "
   && KO0FM001.KO0FMPCT[KO0FWSUB] == " ")
    exit stack;
  end



  if (KO0FM001.XXXSTAT[KO0FWSUB] == " ")
    KO0FM001.XXXSTAT[KO0FWSUB] = "I";
  end



  if (KO0FM001.XXXSTAT[KO0FWSUB] == "I"
   || KO0FM001.XXXSTAT[KO0FWSUB] == "A")
     /* next sentence*/
  else
    converseLib.validationFailed(14);
    KO0FWREC.KO0FWSW = "NO ";
    set KO0FM001.XXXSTAT[KO0FWSUB] cursor, bold;
  end



  KO0FWREC.KO0FWPTC = KO0FM001.KO0FMPCT[KO0FWSUB];
  KO0FWREC.KO0FWSB1 = 1;
  while (KO0FWREC.KO0FWSB1 <= 6)
    if (KO0FWREC.KO0FWPCI[KO0FWSB1] != " "
     && KO0FWREC.KO0FWPCI[KO0FWSB1] != ".")
      if (KO0FWREC.KO0FWPCI[KO0FWSB1] >= "0"
       && KO0FWREC.KO0FWPCI[KO0FWSB1] <= "9")
         /* next sentence*/
      else
        converseLib.validationFailed(120);
        KO0FWREC.KO0FWSW = "NO";
        set KO0FM001.KO0FMPCT[KO0FWSUB] cursor, bold;
      end
    end
    KO0FWREC.KO0FWSB1 = KO0FWREC.KO0FWSB1 + 1;
  end

  if (KO0FM001.KOFCOMCD[KO0FWSUB] == " ")
    converseLib.validationFailed(13);
    KO0FWREC.KO0FWSW = "NO ";
    set KO0FM001.KOFCOMCD[KO0FWSUB] cursor, bold;
  else
    if (KO0FM001.KOFCOMCD[KO0FWSUB] >= "A"
     && KO0FM001.KOFCOMCD[KO0FWSUB] <= "Z")
       /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(10);
      KO0FWREC.KO0FWSW = "NO ";
      set KO0FM001.KOFCOMCD[KO0FWSUB] cursor, bold;
    end
  end



  if (KO0FM001.KO0FMPCT[KO0FWSUB] > " ")
    KO0FWREC.KO0FWPTB = KO0FM001.KO0FMPCT[KO0FWSUB];
  else
    KO0FWREC.KO0FWPTB = "00.000";
  end

  KO0FWREC.KO0FWPAI = KO0FWREC.KO0FWPBI;
  KO0FWREC.KO0FWPAD = KO0FWREC.KO0FWPBD;

  KO0FWREC.KO0FWPCT = KO0FWREC.KO0FWPTA / 1000;

  if (KO0FWREC.KO0FWPCT >= +0)
     /* next sentence*/
  else
    converseLib.validationFailed(11);
    KO0FWREC.KO0FWSW = "NO ";
    set KO0FM001.KOFCOMCD[KO0FWSUB] cursor, bold;
  end


   /* **********************************************************/
        /* verify com code & % are unique to screen......*/
   /* **********************************************************/

  if (KO0FWREC.KO0FWSW == "YES")
    KO0FWREC.KO0FWNUM = 26;
    while (KO0FWREC.KO0FWNUM > 0)
      KO0FS21();
    end
  end


   /* **********************************************************/
        /* verify new comm code does not exist in db*/
   /* **********************************************************/

  if (KO0FWREC.KO0FWSW == "YES")
    KO0FWREC.KO0FWNUM = 26;
    while (KO0FWREC.KO0FWNUM > 0)
      KO0FS22();
    end
  end




end // end KO0FS11

// call date routine
Function KO0FS12()


  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0222
   && TA2REC.TA2RTNCD != 0)
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KO0FS37";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC) {isExternal = yes};
      exit stack;
    end
  end

  KO0FWREC.KO0FSDT = TA2REC.TA2GRGGN;
  KO0FWREC.KO0FCHGD = TA2REC.TA2GRGGN;
  KO0FWREC.KO0FCHGT = TA2REC.TA2TIMHM;

  KO0FWREC.TA2TIMEN = TA2REC.TA2TIMEN;


end // end KO0FS12

// perform updates
Function KO0FS15()




  if (KO0FWREC.KOFCOMCD[KO0FWSUB] == " "
   && KO0FM001.KOFCOMCD[KO0FWSUB] > " ")
    KO0FS16(); /* db new add*/
    KO0FS19(); /* audit rec for add*/

  else
    if (KO0FWREC.KOFCOMCD[KO0FWSUB] != KO0FM001.KOFCOMCD[KO0FWSUB]
     && KO0FWREC.KOFCOMCD[KO0FWSUB] > " "
     && KO0FM001.KOFCOMCD[KO0FWSUB] != " ")
      KO0FS17(); /* db delete old*/
      KO0FS16(); /* db new add*/
      KO0FS20(); /* audit rec for change*/
    else
      if (KO0FWREC.KOFCOMCD[KO0FWSUB] != " " 
       && KO0FM001.KOFCOMCD[KO0FWSUB] == " " /* blank to delete*/
       && KO0FM001.XXXSTAT[KO0FWSUB] == " ")
        KO0FS17(); /* db delete*/
        KO0FS20(); /* audit rec for change*/
      else
        if (KO0FM001.KO0FMPCT[KO0FWSUB] > " ")
          KO0FWREC.KO0FWPTB = KO0FM001.KO0FMPCT[KO0FWSUB];
        else
          KO0FWREC.KO0FWPTB = "00.000";
        end
        KO0FWREC.KO0FWPAI = KO0FWREC.KO0FWPBI;
        KO0FWREC.KO0FWPAD = KO0FWREC.KO0FWPBD;
        KO0FWREC.KO0FWPCT = KO0FWREC.KO0FWPTA / 1000;
        if (KO0FWREC.KOFCSPCT[KO0FWSUB] != KO0FWREC.KO0FWPCT
         || KO0FWREC.XXXSTAT[KO0FWSUB] != KO0FM001.XXXSTAT[KO0FWSUB])
          KO0FS18(); /* db change*/
          KO0FS20(); /* audit rec for change*/
        end
      end
    end
  end



  KO0FWREC.KO0FWSUB = KO0FWREC.KO0FWSUB + 1;



end // end KO0FS15

// add new database rec
Function KO0FS16()


     /* **************  read to verify new add *******/

  set KOFREC empty;
  set SQLCA empty;

  KOFREC.XSMTYPCD = KO0FM001.XSMTYPCD;
  KOFREC.KOFCOMCD = KO0FM001.KOFCOMCD[KO0FWSUB];

  if (KO0FM001.KO0FMPCT[KO0FWSUB] > " ")
    KO0FWREC.KO0FWPTB = KO0FM001.KO0FMPCT[KO0FWSUB];
  else
    KO0FWREC.KO0FWPTB = "00.000";
  end

  KO0FWREC.KO0FWPAI = KO0FWREC.KO0FWPBI;
  KO0FWREC.KO0FWPAD = KO0FWREC.KO0FWPBD;

  KO0FWREC.KO0FWPCT = KO0FWREC.KO0FWPTA / 1000;
  KOFREC.KOFCSPCT = KO0FWREC.KO0FWPCT;

  call "IO0710" ("S ", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KO0F";
    TA1REC.TA1LOCAT[1] = "A ";
    TA1REC.TA1LOCAT[2] = "KO0FS16";
    TA1REC.TA1LOCAT[3] = "IO0710";
    TA1REC.TA1MAP = "KO0FM001";
    TA1REC.TA1DBASE = "DCOMM.";
    TA1REC.TA1TBLVU = "VSMSCH01"; /* table view*/
    TA1REC.TA1TBLKE = KO0FM001.XSMTYPCD; /* table key*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end
     /* **************  add  new record  *************/

  set KOFREC empty;
  set SQLCA empty;

  KOFREC.XSMTYPCD = KO0FM001.XSMTYPCD;
  KOFREC.KOFCOMCD = KO0FM001.KOFCOMCD[KO0FWSUB];

  if (KO0FM001.KO0FMPCT[KO0FWSUB] > " ")
    KO0FWREC.KO0FWPTB = KO0FM001.KO0FMPCT[KO0FWSUB];
  else
    KO0FWREC.KO0FWPTB = "00.000";
  end

  KO0FWREC.KO0FWPAI = KO0FWREC.KO0FWPBI;
  KO0FWREC.KO0FWPAD = KO0FWREC.KO0FWPBD;

  KO0FWREC.KO0FWPCT = KO0FWREC.KO0FWPTA / 1000;
  KOFREC.KOFCSPCT = KO0FWREC.KO0FWPCT;

  KOFREC.XXXSTAT = KO0FM001.XXXSTAT[KO0FWSUB];
  KOFREC.ZZZSDT = KO0FWREC.KO0FSDT;
  KOFREC.ZZZCHGDT = KO0FWREC.KO0FCHGD;
  KOFREC.ZZZCHGTM = KO0FWREC.KO0FCHGT;

  KOFREC.XXXUSRID = COMMAREA.CAUSERID;

  call "IO0710" ("A ", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KO0F";
    TA1REC.TA1LOCAT[1] = "A ";
    TA1REC.TA1LOCAT[2] = "KO0FS16";
    TA1REC.TA1LOCAT[3] = "IO0710";
    TA1REC.TA1MAP = "KO0FM001";
    TA1REC.TA1DBASE = "DCOMM.";
    TA1REC.TA1TBLVU = "VSMSCH01"; /* table view*/
    TA1REC.TA1TBLKE = KO0FM001.XSMTYPCD; /* table key*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end



end // end KO0FS16

// delete  database rec
Function KO0FS17()


  set SQLCA empty;


  KOFREC.XSMTYPCD = KO0FWREC.XSMTYPCD;
  KOFREC.KOFCOMCD = KO0FWREC.KOFCOMCD[KO0FWSUB];
  KOFREC.KOFCSPCT = KO0FWREC.KOFCSPCT[KO0FWSUB];
  KOFREC.XXXSTAT = KO0FWREC.XXXSTAT[KO0FWSUB];

  KOFREC.ZZZCHGDT = KO0FWREC.KO0FCHGD;
  KOFREC.ZZZCHGTM = KO0FWREC.KO0FCHGT;


  call "IO0710" ("D ", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KO0F";
    TA1REC.TA1LOCAT[1] = "D ";
    TA1REC.TA1LOCAT[2] = "KO0FS18";
    TA1REC.TA1LOCAT[3] = "IO0710";
    TA1REC.TA1MAP = "KO0FM001";
    TA1REC.TA1DBASE = "DCOMM.";
    TA1REC.TA1TBLVU = "VSMSCH01"; /* table view*/
    TA1REC.TA1TBLKE = KO0FM001.XSMTYPCD; /* table key*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end



end // end KO0FS17

// change  database rec
Function KO0FS18()


  set SQLCA empty;


  KOFREC.XSMTYPCD = KO0FM001.XSMTYPCD;
  KOFREC.KOFCOMCD = KO0FM001.KOFCOMCD[KO0FWSUB];

  if (KO0FM001.KO0FMPCT[KO0FWSUB] > " ")
    KO0FWREC.KO0FWPTB = KO0FM001.KO0FMPCT[KO0FWSUB];
  else
    KO0FWREC.KO0FWPTB = "00.000";
  end

  KO0FWREC.KO0FWPAI = KO0FWREC.KO0FWPBI;
  KO0FWREC.KO0FWPAD = KO0FWREC.KO0FWPBD;

  KO0FWREC.KO0FWPCT = KO0FWREC.KO0FWPTA / 1000;
  KOFREC.KOFCSPCT = KO0FWREC.KO0FWPCT;

  KOFREC.XXXSTAT = KO0FM001.XXXSTAT[KO0FWSUB];

  KOFREC.ZZZCHGDT = KO0FWREC.KO0FCHGD;
  KOFREC.ZZZCHGTM = KO0FWREC.KO0FCHGT;
  KOFREC.ZZZCHGCT = KO0FWREC.ZZZCHGCT[KO0FWSUB];

  KOFREC.XXXUSRID = COMMAREA.CAUSERID;

  call "IO0710" ("U ", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KO0F";
    TA1REC.TA1LOCAT[1] = "U ";
    TA1REC.TA1LOCAT[2] = "KO0FS18";
    TA1REC.TA1LOCAT[3] = "IO0710";
    TA1REC.TA1MAP = "KO0FM001";
    TA1REC.TA1DBASE = "DCOMM.";
    TA1REC.TA1TBLVU = "VSMSCH01"; /* table view*/
    TA1REC.TA1TBLKE = KO0FM001.XSMTYPCD; /* table key*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end



end // end KO0FS18

// write audit record for db add
Function KO0FS19()


  set KOAREC empty;
  set SQLCA empty;

  KOAREC.KOATBLCD = 15;
  KOAREC.KOAACTTY = "1";
  KOAREC.XXXTBLNM = "VSMSCH01";
  KOAREC.ZZZSDT = KO0FWREC.KO0FSDT;
  KOAREC.ZZHHMMSS = KO0FWREC.TA2TIMEN;
  KOAREC.KOACRSDT = KO0FWREC.KO0FSDT;



  KOAREC.XSMTYPCD = KO0FM001.XSMTYPCD;
  KOAREC.KOFCOMCD = KO0FM001.KOFCOMCD[KO0FWSUB];

  if (KO0FM001.KO0FMPCT[KO0FWSUB] > " ")
    KO0FWREC.KO0FWPTB = KO0FM001.KO0FMPCT[KO0FWSUB];
  else
    KO0FWREC.KO0FWPTB = "00.000";
  end

  KO0FWREC.KO0FWPAI = KO0FWREC.KO0FWPBI;
  KO0FWREC.KO0FWPAD = KO0FWREC.KO0FWPBD;

  KO0FWREC.KO0FWPCT = KO0FWREC.KO0FWPTA / 1000;
  KOAREC.KOFCSPCT = KO0FWREC.KO0FWPCT;

  KOAREC.XXXSTAT = KO0FM001.XXXSTAT[KO0FWSUB];
  KOAREC.XXXUSRID = COMMAREA.CAUSERID;

  call "IO0630" ("A ", SQLCA, KOAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    converseLib.validationFailed(43);
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KO0F    ";
    TA1REC.TA1LOCAT[1] = "A        ";
    TA1REC.TA1LOCAT[1] = "KO0FS19  ";
    TA1REC.TA1LOCAT[1] = "IO0630   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "KO0FM001";
    TA1REC.TA1DBASE = "DCOMM.";
    TA1REC.TA1TBLVU = "VCOAUD01";
    TA1REC.TA1TBLKE = KOAREC.KOAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end



end // end KO0FS19

// audit record (changed db rec)
Function KO0FS20()


  set KOAREC empty;
  set SQLCA empty;



  KOAREC.KOATBLCD = 15;
  KOAREC.KOAACTTY = "2";
  KOAREC.XXXTBLNM = "VSMSCH01";
  KOAREC.ZZZSDT = KO0FWREC.KO0FSDT;
  KOAREC.ZZHHMMSS = KO0FWREC.TA2TIMEN;

  KOAREC.XSMTYPCD = KO0FM001.XSMTYPCD;
  KOAREC.KOFCOMCD = KO0FWREC.KOFCOMCD[KO0FWSUB];
  KOAREC.KOFCSPCT = KO0FWREC.KOFCSPCT[KO0FWSUB];
  KOAREC.XXXSTAT = KO0FWREC.XXXSTAT[KO0FWSUB];
  KOAREC.XXXUSRID = COMMAREA.CAUSERID;
  KOAREC.KOACRSDT = KO0FWREC.ZZZSDT[KO0FWSUB];


  call "IO0630" ("A ", SQLCA, KOAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
     /* good return*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KO0F    ";
    TA1REC.TA1LOCAT[1] = "A        ";
    TA1REC.TA1LOCAT[2] = "KO0FS20  ";
    TA1REC.TA1LOCAT[3] = "IO0630   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "KO0FM001";
    TA1REC.TA1DBASE = "DCOMM.";
    TA1REC.TA1TBLVU = "VCOAUD01";
    TA1REC.TA1TBLKE = KOAREC.KOAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end

  set SQLCA empty;

  KOAREC.KOATBLCD = 15;
  KOAREC.KOAACTTY = "3";
  KOAREC.XXXTBLNM = "VSMSCH01";
  KOAREC.ZZZSDT = KO0FWREC.KO0FSDT;
  KOAREC.ZZHHMMSS = KO0FWREC.TA2TIMEN;

  if (KO0FM001.KOFCOMCD[KO0FWSUB] == " ")
    KOAREC.XSMTYPCD = " ";
  else
    KOAREC.XSMTYPCD = KO0FM001.XSMTYPCD;
  end

  KOAREC.KOFCOMCD = KO0FM001.KOFCOMCD[KO0FWSUB];

  if (KO0FM001.KO0FMPCT[KO0FWSUB] > " ")
    KO0FWREC.KO0FWPTB = KO0FM001.KO0FMPCT[KO0FWSUB];
  else
    KO0FWREC.KO0FWPTB = "00.000";
  end

  KO0FWREC.KO0FWPAI = KO0FWREC.KO0FWPBI;
  KO0FWREC.KO0FWPAD = KO0FWREC.KO0FWPBD;

  KO0FWREC.KO0FWPCT = KO0FWREC.KO0FWPTA / 1000;
  KOAREC.KOFCSPCT = KO0FWREC.KO0FWPCT;

  KOAREC.XXXSTAT = KO0FM001.XXXSTAT[KO0FWSUB];
  KOAREC.XXXUSRID = COMMAREA.CAUSERID;
  KOAREC.KOACRSDT = KO0FWREC.ZZZSDT[KO0FWSUB];

  call "IO0630" ("A ", SQLCA, KOAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    converseLib.validationFailed(44);
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KO0F    ";
    TA1REC.TA1LOCAT[1] = "A        ";
    TA1REC.TA1LOCAT[2] = "KO0FS20  ";
    TA1REC.TA1LOCAT[3] = "IO0630   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "KO0FM001";
    TA1REC.TA1DBASE = "DCOMM.";
    TA1REC.TA1TBLVU = "VCOAUD01";
    TA1REC.TA1TBLKE = KOAREC.KOAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    KO0FM001.KO0FMSG = COMMAREA.CAMSG;
    exit stack;
  end



end // end KO0FS20

// verify comcode & % are unique
Function KO0FS21()


  if (KO0FWREC.KO0FWNUM != KO0FWREC.KO0FWSUB)
    if (KO0FM001.KOFCOMCD[KO0FWNUM] == " "
     && KO0FM001.KO0FMPCT[KO0FWNUM] == " ")
      KO0FWREC.KO0FWNUM = KO0FWREC.KO0FWNUM - 1;
      return;
    end
  end

  if (KO0FWREC.KO0FWNUM != KO0FWREC.KO0FWSUB)
    if (KO0FM001.KOFCOMCD[KO0FWSUB] == KO0FM001.KOFCOMCD[KO0FWNUM])
      converseLib.validationFailed(9);
      KO0FWREC.KO0FWSW = "NO ";
      set KO0FM001.KOFCOMCD[KO0FWSUB] cursor, bold;
    end
  end


  if (KO0FWREC.KO0FWNUM != KO0FWREC.KO0FWSUB)
    if (KO0FM001.KO0FMPCT[KO0FWSUB] == KO0FM001.KO0FMPCT[KO0FWNUM])
      converseLib.validationFailed(12);
      KO0FWREC.KO0FWSW = "NO ";
      set KO0FM001.KO0FMPCT[KO0FWSUB] cursor, bold;
    end
  end

  KO0FWREC.KO0FWNUM = KO0FWREC.KO0FWNUM - 1;



end // end KO0FS21

// verify comcode unique to db
Function KO0FS22()


  if (KO0FWREC.KO0FWNUM != KO0FWREC.KO0FWSUB)
    if (KO0FM001.KOFCOMCD[KO0FWSUB] == KO0FWREC.KOFCOMCD[KO0FWNUM])
      converseLib.validationFailed(83);
      KO0FWREC.KO0FWSW = "NO ";
      KO0FM001.KOFCOMCD[KO0FWSUB] = KO0FWREC.KOFCOMCD[KO0FWSUB];
      KO0FM001.KOFCOMCD[KO0FWNUM] = KO0FWREC.KOFCOMCD[KO0FWNUM];
      set KO0FM001.KOFCOMCD[KO0FWSUB] cursor, bold;
      set KO0FM001.KOFCOMCD[KO0FWNUM] cursor, bold;
    end
  end


  KO0FWREC.KO0FWNUM = KO0FWREC.KO0FWNUM - 1;



end // end KO0FS22

//*** RECORD=KO0FWREC ****
// this area is used by ko0f to verify changes to the screens
// ************************
Record KO0FWREC type basicRecord
  10 XSMTYPCD XSMTYPCD ; 
  10 KO0FWPCT KO0FWPCT ; 
  10 KO0FWPTA KO0FWPTA ; 
    15 KO0FWPTF KO0FWPTF ; 
    15 KO0FWPAI KO0FWPAI ; 
    15 KO0FWPAD KO0FWPAD ; 
  10 KO0FWPTB KO0FWPTB ; 
    15 KO0FWPBI KO0FWPBI ; 
    15 KO0FWPBP KO0FWPBP ; 
    15 KO0FWPBD KO0FWPBD ; 
  10 KO0FWPTC KO0FWPTC ; 
    15 KO0FWPCI KO0FWPCI [6] ; 
  10 KO0FWPTD KO0FWPTD ; 
    15 KO0FWPDI KO0FWPDI [6] ; 
  10 KO0FWLLV KO0FWLLV [26] ; 
    15 KOFCOMCD KOFCOMCD ; 
    15 KOFCSPCT KOFCSPCT ; 
    15 XXXSTAT XXXSTAT ; 
    15 ZZZSDT ZZZSDT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGCT ZZZCHGCT ; 
  10 KO0FWNUM KO0FWNUM ; 
  10 KO0FWSW KO0FWSW ; 
  10 KO0FWSUB KO0FWSUB ; 
  10 KO0FWSB1 KO0FWSB1 ; 
  10 KO0FWSB2 KO0FWSB2 ; 
  10 KO0FWSB3 KO0FWSB3 ; 
  10 KO0FWER1 KO0FWER1 ; 
  10 KO0FWFST KO0FWFST ; 
  10 KO0FWABR KO0FWABR ; 
  10 KO0FSDT KO0FSDT ; 
  10 KO0FCHGD KO0FCHGD ; 
  10 TA2TIMEN TA2TIMEN ; 
    15 TA2TIMHM TA2TIMHM ; 
    15 TA2TIMSS TA2TIMSS ; 
  10 KO0FCHGT KO0FCHGT ; 
  10 KO0FMSG KO0FMSG ; 
  10 KO0FWTY KO0FWTY ; 
end // end KO0FWREC

// hold chg date
DataItem KO0FCHGD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold chg time
DataItem KO0FCHGT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold message for screen
DataItem KO0FMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold std date
DataItem KO0FSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// spec comm abrev.
DataItem KO0FWABR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line error flag
DataItem KO0FWER1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem KO0FWFST char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table row group
DataItem KO0FWLLV char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change counter
DataItem KO0FWNUM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. comm spec % a - decimal
DataItem KO0FWPAD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. comm spec % a - integer
DataItem KO0FWPAI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. comm spec % b - decimal
DataItem KO0FWPBD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. comm spec % b - integer
DataItem KO0FWPBI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. comm spec % b - dec pt
DataItem KO0FWPBP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. comm spec % c - item
DataItem KO0FWPCI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commission special percent
DataItem KO0FWPCT num(7,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. comm spec % d - item
DataItem KO0FWPDI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. comm special percent - a
DataItem KO0FWPTA num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. comm special percent - b
DataItem KO0FWPTB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. comm special percent - c
DataItem KO0FWPTC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. comm special percent - d
DataItem KO0FWPTD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. comm spec % a - filler
DataItem KO0FWPTF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript 1
DataItem KO0FWSB1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript 2
DataItem KO0FWSB2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript 3
DataItem KO0FWSB3 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript
DataItem KO0FWSUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yes/no switch
DataItem KO0FWSW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format type for search
DataItem KO0FWTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

