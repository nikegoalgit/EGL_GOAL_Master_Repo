package ko0x;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCLTBL;
import corpx1.XDMCD;
import corpx1.XDMTBL;
import corpx1.XGPABRV;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XLCABRV;
import corpx1.XLCCD;
import corpx1.XLCCD1;
import corpx1.XLCCD2;
import corpx1.XLCCD3;
import corpx1.XLCCD4;
import corpx1.XLCTBL;
import corpx1.XPRTBL;
import corpx1.XQATBL;
import corpx1.XRCTBL;
import corpx2.XPRABRV;
import corpx2.XQAABRV;
import corpx2.XQACD;
import corpx2.XSMTYPCD;
import corpx2.XXXUSRID;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ko.common.KOAREC;
import ko.common.KOFCOMCD;
import ko.common.KOFREC;
import ko.common.KOXREC;
import sy.common.SY1REC;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import sy.common.SY2CEDT1;
import sy.common.SY2CEDT2;
import sy.common.SY2CEDT3;
import sy.common.SY2CEDT4;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA2TIMEN;
import ta.common.TA2TIMHM;
import ta.common.TA2TIMSS;
//*** PROGRAM=KO0X ****
// this is the commissions special product program.
// 
// 
// 
// date created:        july 25, 1986
// 
// maintenance:
// 
// init   date      reason
// -------------------------------------------------------
// jwood 12-21-88  added noncsp option to calls
// jwood 12-21-88  added xssegtr logic
// AIVERS 10-9-92  REGEN FOR DATABASE CHANGES.
// RPATTE 02-25-94 DB2 TBLCHG. DELETE XRCCD.
// 
// *********************
Program KO0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO0XW01 KO0XW01; // record
  KO0XW02 KO0XW02; // record
  KO0XW03 KO0XW03; // record
  KO0XW04 KO0XW04; // record
  KO0XW05 KO0XW05; // record
  KOAREC KOAREC; // record
  KOFREC KOFREC; // record
  KOXREC KOXREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XLCTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XRCTBL {deleteAfterUse = yes}; // table
  use XCLTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use KO0XM.KO0XM001,  // forms
      KO0XM.KO0XM002, 
      KO0XM.KO0XM003
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0X001: KO0X001();
    ;
    goto KO0X005;
    ;
    ;
    ;
    KO0X005: KO0X005();
    ;
    ;
     /* ********************************************/
    ;
    if (KO0XW04.KO0XWEFL == "Y"
     || converseVar.validationMsgNum > 0)
      goto KO0X005;
    else
      goto KO0X010;
    end
    ;
    ;
    ;
    KO0X010: KO0X010();
    ;
    ;
         /* **********************************************/
         /* *                                           **/
         /* *                                           **/
         /* **********************************************/
    goto KO0X015;
    KO0X015: KO0X015();
    ;
    ;
         /* **********************************************/
         /* *                                           **/
         /* *                                           **/
         /* **********************************************/
    ;
    ;
    if (KO0XW04.KO0XWKFL == "Y")
      goto KO0X010;
    else
      if (KO0XW04.KO0XWEFL == "Y")
        goto KO0X015;
      else
        if (converseVar.eventKey is pf7
         || converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf15)
          goto KO0X015;
        else
          if (converseVar.eventKey is enter)
            if (KO0XW04.KO0XWFFL == "D") /* go to add koxrec*/
              KO0XW04.KO0XWFST = "N";
              goto KO0X020;
            else
              if (KO0XW04.KO0XWFFL == "H") /* retrieve history*/
                goto KO0X030;
              else
                converseLib.validationFailed(63);
                goto KO0X005;
              end
            end
          else
            goto KO0X015;
          end
        end
      end
    end
    ;
    ;
    ;
    KO0X020: KO0X020();
    ;
    ;
         /* **********************************************/
         /* *                                           **/
         /* *                                           **/
         /* **********************************************/
    ;
    if (KO0XW04.KO0XWEFL == "Y")
      goto KO0X025;
    else
      if (KO0XW04.KO0XWFIN == "Y")
        goto KO0X005;
      end
    end
    KO0X025: KO0X025();
    ;
    ;
    ;
         /* **********************************************/
         /* *                                           **/
         /* *                                           **/
         /* **********************************************/
    ;
    ;
    if (KO0XW04.KO0XWEFL == "Y")
      goto KO0X025;
    else
      if (converseVar.eventKey is pf13
       || converseVar.eventKey is enter)
        goto KO0X020;
      else
        if (converseVar.eventKey is pf12)
          converseLib.validationFailed(76);
          goto KO0X025;
        else
          goto KO0X025;
        end
      end
    end
    ;
    ;
    ;
    KO0X030: KO0X030();
    ;
    ;
    ;
    if (KO0XW04.KO0XWFIN == "Y")
      ;
      set SQLCA empty;
      set ERRSQLCA empty;
      set KOAREC empty;
      set KOXREC empty;
      set KO0XW01 empty;
      set KO0XW02 empty;
      set KO0XW03 empty;
      set KO0XW04 empty;
      set KO0XW05 empty;
      set SY1REC empty;
      set SY2REC empty;
      set KO0XM001 initial;
      set KO0XM002 initial;
      /* MOVE 80 TO EZEMNO;*/
      ;
      goto KO0X005;
    else
      if (KO0XW04.KO0XWEFL == "Y")
        goto KO0X015;
      else
        goto KO0X035;
      end
    end
    ;
    ;
    ;
    KO0X035: KO0X035();
    ;
    ;
    if (KO0XW04.KO0XWKFL == "Y")
      goto KO0X010;
    else
      if (KO0XW04.KO0XWEFL == "Y")
        goto KO0X035; /* redisplay ko0xm002 due to error*/
      else
        if (converseVar.eventKey is pf16)
          goto KO0X010; /* display ko0xm001 map*/
        else
          if (converseVar.eventKey is pf12)
            converseLib.validationFailed(76);
            goto KO0X035;
          else
            if (converseVar.eventKey is enter)
              goto KO0X040;
            else
              goto KO0X035;
            end
          end
        end
      end
    end
    KO0X040: KO0X040();
    ;
    ;
    ;
    if (KO0XW04.KO0XWEFL == "Y")
      goto KO0X035;
    else
      goto KO0X030;
    end
    ;
    ;
    ;
  end // end main
end // end KO0X

// set rec. & maps empty
Function KO0X001()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  ;
  XSENTRY();
  ;
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set KOAREC empty;
  set KOXREC empty;
  set KO0XW01 empty;
  set KO0XW02 empty;
  set KO0XW03 empty;
  set KO0XW04 empty;
  set KO0XW05 empty;
  set SY1REC empty;
  set SY2REC empty;
  set KO0XM001 initial;
  set KO0XM002 initial;
  ;
  ;
  if (COMMAREA.CAITEM > " ")
    KO0XW04.KO0XWKEY = COMMAREA.CAITEM;
    KO0XM001.XGPCD = KO0XW04.XGPCD;
    KO0XM001.SY1STNBR = KO0XW04.SY1STNBR;
    KO0XM001.XLCCD = KO0XW04.XLCCD;
    KO0XM001.XQACD = KO0XW04.XQACD;
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
  else
    /* next sentence*/
  end
  ;
  ;
  ;
  ;
end // end KO0X001

// display ko0xm001 screen
Function KO0X005()
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  ;
  KO0XM001.XXXCURDT = VGVar.currentShortGregorianDate;
  KO0XM001.XXXPRCNM = "KO0X005";
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    /* next sentence*/
  else
    KO0XSAA(); /* set all the map detail lines to autoskip dark*/
    set KO0XM001.XGPCD cursor;
  end
  ;
  ;
   /* ***********************************************************/
  converse KO0XM001 ;
   /* ***********************************************************/
  ;
  ;
  KO0XSAB(); /* check pf keys*/
  ;
  ;
  KO0XSAC(); /* set screen fields to normal*/
  ;
  ;
  ;
end // end KO0X005

// retrieve data from db2
Function KO0X010()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  KO0XSAD(); /* validate key ko0xm001 fields*/
  if (KO0XW04.KO0XWEFL == "Y")
    exit stack;
  else
    /* next setence*/
  end
  ;
  ;
  ;
  KO0XSBA(); /* validate style # and retrieve style name*/
  ;
  ;
  KO0XSBB(); /* retrieve all colors that match style and l.c. code*/
  ;
  ;
  KO0XSBC(); /* retrieve current comm. prod. rates.*/
  ;
  ;
  KO0XW01.XGPCD = KO0XM001.XGPCD;
  KO0XW01.XGPABRV = KO0XM001.XGPABRV;
  KO0XW01.SY1STNBR = KO0XM001.SY1STNBR;
  KO0XW01.SY1STYNM = KO0XM001.SY1STYNM;
  KO0XW01.XLCCD = KO0XM001.XLCCD;
  KO0XW01.XLCABRV = KO0XM001.XLCABRV;
  KO0XW01.XQACD = KO0XM001.XQACD;
  KO0XW01.XQAABRV = KO0XM001.XQAABRV;
  ;
  ;
  if (KO0XW04.KO0XWEFL == "N")
    KO0XW04.KO0XWDTC = KO0XW04.KO0XWTOT - 1; /* tot. # of colors displayed*/
    KO0XW04.KO0XWDSP = " ";
    KO0XW04.KO0XWDCD = " COLORS SELECTED ";
    KO0XM001.XXXMSG = KO0XW04.KO0XWDCL;
    converseLib.validationFailed(87);
  else
    /* next sentence*/
  end
  ;
  ;
  KO0XW04.KO0XWCDX = 2;
  KO0XW04.KO0XWMDX = 2;
  KO0XW04.KO0XWTOP = 2;
  ;
  ;
  KO0XSBD();
                                   /* move working storage data to ko0xm001*/
  ;
  ;
  ;
end // end KO0X010

// display retrieved data
Function KO0X015()
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  KO0XM001.XXXCURDT = VGVar.currentShortGregorianDate;
  KO0XM001.XXXPRCNM = "KO0X015";
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    /* next sentence*/
  else
    set KO0XM001.KO0XMSEL[1] cursor;
  end
  ;
  ;
  ;
   /* ***********************************************************/
  converse KO0XM001 ;
   /* ***********************************************************/
  ;
  ;
  KO0XSCB(); /* check pf keys*/
  ;
  KO0XSCC(); /* set screen fields to normal*/
  ;
  ;
  if (converseVar.eventKey is pf15)
    KO0XSCD(); /* process pf15 duplicate.*/
    exit stack;
  else
    /* next sentence*/
  end
  ;
  ;
  if (converseVar.eventKey is pf7)
    KO0XSCJ(); /* process pf7*/
    exit stack;
  else
    /* next sentence*/
  end
  ;
  if (converseVar.eventKey is pf8)
    KO0XSCK(); /* process pf8*/
    exit stack;
  else
    /* next sentence*/
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    KO0XSCL(); /* process enter*/
    exit stack;
  else
    /* next sentence*/
  end
  ;
  ;
  ;
  ;
end // end KO0X015

// do dt. compare for pf15 add
Function KO0X020()
  ;
  ;
       /* **********************************************/
       /* * compare the ending date with the life     **/
       /* * cycle effective dates. start comparing    **/
       /* * the codes from 1 to 4 life cycle codes.   **/
       /* *                                           **/
       /* *                                           **/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  ;
  if (KO0XW04.KO0XWFST == "N") /* first time thru for checking dates*/
    KO0XW04.KO0XWCDX = 2;
  else
    /* next sentence*/
  end
  ;
  KO0XSDG(); /* get add date and time stamp*/
  ;
  ;
  while (KO0XW04.KO0XWCDX <= KO0XW04.KO0XWTOT)
    KO0XW04.KO0XWFST = "Y";
    if (KO0XW01.KO0XWSFL[KO0XWCDX] == "N") /* line status n = new row*/
      KO0XW04.KO0XWMDX = 1;
      ;
      KO0XSDL(); /* verify date range and that life cycle codes match.*/
      ;
      /* KO0XSDA                     ; compare the ending date*/
      ;
      if (KO0XW04.KO0XWEFL == "Y") /* if date error display ko0xm002*/
        KO0XSDE();
        exit stack; /* go to display ko0xm003 and come back thru*/
      else
        KO0XSDF(); /* ADD KO0XREC*/
      end
    else
      /* next sentence*/
    end
    ;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
    ;
  end
  ;
  KO0XSDJ(); /* clear out all records and maps.*/
  KO0XW04.KO0XWFIN = "Y";
  ;
end // end KO0X020

// display add errors.
Function KO0X025()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  KO0XM003.XXXCURDT = VGVar.currentShortGregorianDate;
  KO0XM003.XXXPRCNM = "KO0X025";
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    /* next sentence*/
  else
    set KO0XM003.KO0XMEDT cursor;
  end
  ;
  ;
  ;
   /* ***********************************************************/
  converse KO0XM003 ;
   /* ***********************************************************/
  ;
  ;
  ;
  KO0XSEB(); /* check pf keys*/
  ;
  ;
  KO0XW04.KO0XWEFL = "N";
  ;
  set KO0XM003.XSMTYPCD normal;
  set KO0XM003.KOFCOMCD normal;
  set KO0XM003.KO0XMEDT normal;
  set KO0XM003.KO0XMXDT normal;
  set KO0XM003.XLCCD1 normal;
  set KO0XM003.XLCCD1 skip;
  set KO0XM003.XLCCD2 normal;
  set KO0XM003.XLCCD2 skip;
  set KO0XM003.XLCCD3 normal;
  set KO0XM003.XLCCD3 skip;
  set KO0XM003.XLCCD4 normal;
  set KO0XM003.XLCCD4 skip;
  set KO0XM003.SY2CEDT1 normal;
  set KO0XM003.SY2CEDT1 skip;
  set KO0XM003.SY2CEDT2 normal;
  set KO0XM003.SY2CEDT2 skip;
  set KO0XM003.SY2CEDT3 normal;
  set KO0XM003.SY2CEDT3 skip;
  set KO0XM003.SY2CEDT4 normal;
  set KO0XM003.SY2CEDT4 skip;
  ;
  ;
  KO0XSED(); /* validate detail line*/
  ;
  KO0XSEE(); /* move ko0xw05  to ko0xw01*/
  ;
  ;
end // end KO0X025

// retrieve comm. prod. history
Function KO0X030()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  KO0XW04.KO0XWFIN = "Y";
  ;
   /* IF 'S' IN KO0XW01.KO0XMSEL(ko0xwcdx)*/
    /* ;next sentence*/
   /* ELSE ;*/
    /* ; MOVE 63 TO EZEMNO             ; no changes were made*/
    /* EZEFLO;*/
   /* END ;*/
  ;
  ;
  KO0XSFA(); /* retrieve all prod. comm. fields with 's' from ko0xw01*/
  ;
  ;
  KO0XSFF(); /* move ko0xw02 to ko0xm002*/
  ;
  ;
end // end KO0X030

// display comm. prod. history
Function KO0X035()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  ;
  KO0XM002.XXXCURDT = VGVar.currentShortGregorianDate;
  KO0XM002.XXXPRCNM = "KO0X035";
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    /* next sentence*/
  else
    set KO0XM002.XSMTYPCD[1] cursor;
  end
  ;
   /* ***********************************************************/
  converse KO0XM002 ;
   /* ***********************************************************/
  ;
  KO0XSGB(); /* check pf keys*/
  ;
  KO0XSGL(); /* check if header key has chg.*/
  ;
  KO0XSGC(); /* set screen to normal*/
  ;
  KO0XSGD(); /* validate screen fields*/
  ;
  KO0XSGE(); /* check that dates don't overlap*/
  ;
  ;
  ;
end // end KO0X035

// update comm. prod. rows
Function KO0X040()
  ;
  ;
       /* ************************************************/
       /* * if ko0xw03.ko0xwsfl = a this will be an add **/
       /* * if ko0xw03.ko0xwsfl = c this will be a chg. **/
       /* *                                             **/
       /* ************************************************/
  ;
  if ("C" in KO0XW03.KO0XWSFL)
    /* next sentence*/
  else
    if ("A" in KO0XW03.KO0XWSFL)
      /* next sentence*/
    else
      set KO0XM002 empty;
      converseLib.validationFailed(63);
      exit stack;
    end
  end
  ;
  ;
  KO0XSDG(); /* get todays date & time*/
  ;
  KO0XW04.KO0XWMDX = 1;
  ;
  while (KO0XW04.KO0XWMDX <= 10
   && KO0XW04.KO0XWEFL == "N")
    KO0XSHA(); /* update or add koxrec*/
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
  end
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
  set KO0XM002 empty;
  ;
end // end KO0X040

// set map dark,autoskip
Function KO0XSAA()
  ;
       /* **********************************************/
       /* * set ko0xm001 to dark,autoskip             **/
       /* **********************************************/
  ;
  set KO0XM001.XGPCD cursor;
  KO0XW04.KO0XWMDX = 1;
  ;
  while (KO0XW04.KO0XWMDX < 11)
    set KO0XM001.KO0XMSEL[KO0XWMDX] skip, invisible;
    set KO0XM001.KOFCOMCD[KO0XWMDX] skip, invisible;
    set KO0XM001.XSMTYPCD[KO0XWMDX] skip, invisible;
    set KO0XM001.KO0XMEDT[KO0XWMDX] skip, invisible;
    set KO0XM001.KO0XMXDT[KO0XWMDX] skip, invisible;
    set KO0XM001.KO0XMHFL[KO0XWMDX] skip, invisible;
    set KO0XM001.SY2CLRID[KO0XWMDX] skip, invisible;
    set KO0XM001.SY2CLRAB[KO0XWMDX] skip, invisible;
    set KO0XM001.XDMCD[KO0XWMDX] skip, invisible;
    set KO0XM001.XPRABRV[KO0XWMDX] skip, invisible;
    set KO0XM001.ZZZSDT[KO0XWMDX] skip, invisible;
    set KO0XM001.ZZZCHGDT[KO0XWMDX] skip, invisible;
    ;
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    ;
  end
  ;
  ;
  ;
end // end KO0XSAA

// check pf keys
Function KO0XSAB()
  ;
  ;
  ;
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    KO0XM001.XXXMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf4)
      XSPF4();
      KO0XM001.XXXMSG = COMMAREA.CAMSG;
      return;
    else
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pa2)
        COMMAREA.CATOAP = "KO0A";
        XSEXIT();
        KO0XM001.XXXMSG = COMMAREA.CAMSG;
        return;
      else
        if (KO0XM001.CATOAP != " ")
          if (converseVar.eventKey is enter)
            COMMAREA.CATOAP = KO0XM001.CATOAP;
            COMMAREA.CAITEM = KO0XM001.CAITEM;
            XSEXIT();
            KO0XM001.XXXMSG = COMMAREA.CAMSG;
            exit stack;
          else
            set KO0XM001.CATOAP cursor, bold;
            converseLib.validationFailed(1);
            exit stack;
          end
        else
          if (converseVar.eventKey is pf12
           || converseVar.eventKey is enter)
            return;
          else
            converseLib.validationFailed(2);
          end
        end
      end
    end
  end
end // end KO0XSAB

// set map fields to normal
Function KO0XSAC()
  ;
  ;
  ;
  set KO0XM001.XGPCD normal;
  set KO0XM001.SY1STNBR normal;
  set KO0XM001.XLCCD normal;
  set KO0XM001.XQACD normal;
  set KO0XM001.KO0XMLCD normal;
  ;
  KO0XM001.XXXMSG = " ";
  KO0XW04.KO0XWFFL = " ";
  KO0XW04.KO0XWEFL = "N";
  KO0XW04.KO0XWKFL = "N";
  KO0XW04.KO0XWMDX = 1;
  ;
  ;
  ;
  while (KO0XW04.KO0XWMDX < 11)
    set KO0XM001.KO0XMSEL[KO0XWMDX] normal;
    set KO0XM001.KOFCOMCD[KO0XWMDX] normal;
    set KO0XM001.XSMTYPCD[KO0XWMDX] normal;
    set KO0XM001.KO0XMEDT[KO0XWMDX] normal;
    set KO0XM001.KO0XMXDT[KO0XWMDX] normal;
    set KO0XM001.KO0XMHFL[KO0XWMDX] normal;
    set KO0XM001.SY2CLRID[KO0XWMDX] normal;
    set KO0XM001.SY2CLRAB[KO0XWMDX] normal;
    set KO0XM001.XDMCD[KO0XWMDX] normal;
    set KO0XM001.XPRABRV[KO0XWMDX] normal;
    set KO0XM001.ZZZSDT[KO0XWMDX] normal;
    set KO0XM001.ZZZCHGDT[KO0XWMDX] normal;
    ;
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    ;
  end
  ;
  ;
  ;
end // end KO0XSAC

// validate screen fields
Function KO0XSAD()
  ;
  ;
  if (KO0XM001.KO0XMLCD > " ") /* map product select life cycle date*/
    KO0XSAE(); /* validate entered life cycle date*/
  else
    KO0XSAI(); /* RETRIEVE TODAYS DATE AS DEFAULT*/
  end
  ;
  ;
  if (KO0XM001.XQACD == " ")
    converseLib.validationFailed(38); /* this is a requried field*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM001.XQACD cursor, bold;
  else
    KO0XSAF(); /* validate quality code*/
  end
  ;
  ;
  if (KO0XM001.XLCCD == " ")
    converseLib.validationFailed(38); /* this is a required field*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM001.XLCCD cursor, bold;
  else
    KO0XSAG(); /* validate life cycle code*/
  end
  ;
  ;
  if (KO0XM001.SY1STNBR == " ")
    converseLib.validationFailed(38); /* this is a required field*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM001.SY1STNBR cursor, bold;
  else
    ;
  end
  ;
  ;
  if (KO0XM001.XGPCD == " ")
    converseLib.validationFailed(38); /* this is a required field*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM001.XGPCD cursor, bold;
  else
    KO0XSAH(); /* validate gpc code*/
  end
  ;
  ;
  ;
end // end KO0XSAD

// validate l.c. entered date
Function KO0XSAE()
  ;
  ;
  ;
  set TA2REC empty;
  KO0XW04.KO0XWHDT = " ";
  KO0XW04.KO0XWLCC = 0;
  TA2REC.TA2DTOPT = "GREGGREG";
  KO0XW04.KO0XWHDT = KO0XM001.KO0XMLCD;
  ;
  if (KO0XW04.KO0XWHYY != " ")
    TA2REC.TA2GRTYP = "B";
    TA2REC.TA2GRGB = KO0XM001.KO0XMLCD;
  else
    if (KO0XW04.KO0XWSL1 != "-")
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2GRGA = KO0XM001.KO0XMLCD;
    else
      TA2REC.TA2GRTYP = "B";
      TA2REC.TA2GRGB = KO0XM001.KO0XMLCD;
    end
  end
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0XM001.KO0XMLCD = TA2REC.TA2GRGB;
    KO0XW01.KO0XMLCD = TA2REC.TA2GRGB;
    KO0XW04.KO0XWLCC = TA2REC.TA2GRGGN; /* date format of ccyymmdd*/
  else
    set KO0XM001.KO0XMLCD cursor, bold;
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(46); /* date must be valid and in mmddyy or mm-dd-yy format*/
  end
  ;
  ;
end // end KO0XSAE

// validate quality code
Function KO0XSAF()
  ;
  ;
  if (KO0XM001.XQACD in XQATBL.XQACD)
    KO0XM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
    KO0XW01.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(89); /* invalid quality code*/
    KO0XM001.XQAABRV = " ";
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM001.XQACD cursor, bold;
  end
  ;
  ;
end // end KO0XSAF

// validate l.c. code
Function KO0XSAG()
  ;
  ;
  if (KO0XM001.XLCCD in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     && XLCTBL.COCMFL[sysVar.arrayIndex] == "Y")
      KO0XM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(90); /* inactive life cycle code*/
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM001.XLCCD cursor, bold;
    end
  else
    converseLib.validationFailed(91); /* life cycle code does not exist*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM001.XLCCD cursor, bold;
  end
  ;
  ;
  ;
end // end KO0XSAG

// validate gpc code
Function KO0XSAH()
  ;
  ;
  if (KO0XM001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     && XGPTBL.COCMFL[sysVar.arrayIndex] == "Y")
      KO0XM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(92); /* inactive gpc code*/
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM001.XGPCD cursor, bold;
    end
  else
    converseLib.validationFailed(93); /* invalid gpc code does not exist*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM001.XGPCD cursor, bold;
  end
  ;
  ;
  ;
end // end KO0XSAH

// ret. todays date as a default
Function KO0XSAI()
  ;
  ;
       /* ***************************************/
       /* * this routine will retrieve todays  **/
       /* * date and time. this will be used to**/
       /* * validate current life cycle code   **/
       /* * and their dates against.           **/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  set TA2REC empty;
  set TA1REC empty;
  KO0XW04.KO0XWLCC = 0;
  TA2REC.TA2DTOPT = "GETDATE";
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0XM001.KO0XMLCD = TA2REC.TA2GRGB;
    KO0XW01.KO0XMLCD = TA2REC.TA2GRGB;
    KO0XW04.KO0XWLCC = TA2REC.TA2GRGGN;
  else
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "TA0040  ";
    TA1REC.TA1TBLKE = TA2REC.TA2DTOPT;
    TA1REC.TA1LOCAT[1] = "KO0XSAI";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0XSAI

// val. & ret. style # & name
Function KO0XSBA()
  ;
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set SY1REC empty;
  ;
  SY1REC.XGPCD = KO0XM001.XGPCD;
  SY1REC.SY1STNBR = KO0XM001.SY1STNBR;
  ;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0XM001.SY1STYNM = SY1REC.SY1STYNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0XM001.SY1STYNM = " ";
      converseLib.validationFailed(88); /* style number not found*/
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM001.SY1STNBR cursor, bold;
      exit stack; /* no records found, redisplay screen*/
    else
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      TA1REC.TA1LOCAT[1] = "KO0XSBA";
      TA1REC.TA1LOCAT[2] = "IO0120";
      XSKO001();
    end
  end
end // end KO0XSBA

// ret. all colors for style #
Function KO0XSBB()
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set SY2REC empty;
  ;
  SY2REC.XGPCD = KO0XM001.XGPCD;
  SY2REC.SY1STNBR = KO0XM001.SY1STNBR;
  ;
  call "IO0130" ("SS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0XW04.KO0XWCDX = 2;
    KO0XW04.KO0XWTOT = 1;
    while (SQLCA.VAGen_SQLCODE == 0
     && converseVar.validationMsgNum == 0)
      KO0XSBE(); /* select colors*/
    end
    KO0XSBF(); /* close select set*/
    ;
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1TBLKE = SY2REC.SY2KEY;
    TA1REC.TA1LOCAT[1] = "KO0XSBB";
    TA1REC.TA1LOCAT[2] = "IO0130";
    XSKO001();
  end
end // end KO0XSBB

// ret. all prod. comm. colors
Function KO0XSBC()
  ;
  ;
  ;
  set KOXREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  KOXREC.XGPCD = KO0XM001.XGPCD;
  KOXREC.SY1STNBR = KO0XM001.SY1STNBR;
  KOXREC.XLCCD = KO0XM001.XLCCD;
  ;
  call "IO0970" ("SS", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0)
      KO0XSBH(); /* retrieve all current comm. prod.*/
                                   /* rates*/
    end
    KO0XSBJ(); /* ; close selected set*/
  else
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VOTSCH01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0BSBD";
    TA1REC.TA1LOCAT[2] = "IO0690";
    XSKO001(); /* abort*/
  end
  ;
  ;
  ;
end // end KO0XSBC

// move ko0xw01 to ko0xm001
Function KO0XSBD()
  ;
  ;
  if (KO0XW04.KO0XWCDX == 2)
    set KO0XM001.KO0XMHFL[1] skip, invisible;
    set KO0XM001.SY2CLRID[1] skip;
    set KO0XM001.SY2CLRAB[1] skip;
    set KO0XM001.XDMCD[1] skip;
    set KO0XM001.XPRABRV[1] skip;
    set KO0XM001.ZZZSDT[1] skip;
    set KO0XM001.ZZZCHGDT[1] skip;
  end
  ;
  while (KO0XW04.KO0XWMDX <= 10)
    ;
    if (KO0XW01.SY2CLRID[KO0XWCDX] > " "
     || KO0XW04.KO0XWCDX == 1)
      KO0XM001.KO0XMSEL[KO0XWMDX] = KO0XW01.KO0XMSEL[KO0XWCDX];
      KO0XM001.KOFCOMCD[KO0XWMDX] = KO0XW01.KOFCOMCD[KO0XWCDX];
      KO0XM001.XSMTYPCD[KO0XWMDX] = KO0XW01.XSMTYPCD[KO0XWCDX];
      KO0XM001.KO0XMEDT[KO0XWMDX] = KO0XW01.KO0XMEDT[KO0XWCDX];
      KO0XM001.KO0XMXDT[KO0XWMDX] = KO0XW01.KO0XMXDT[KO0XWCDX];
      KO0XM001.KO0XMHFL[KO0XWMDX] = KO0XW01.KO0XMHFL[KO0XWCDX];
      KO0XM001.SY2CLRID[KO0XWMDX] = KO0XW01.SY2CLRID[KO0XWCDX];
      KO0XM001.SY2CLRAB[KO0XWMDX] = KO0XW01.SY2CLRAB[KO0XWCDX];
      KO0XM001.XDMCD[KO0XWMDX] = KO0XW01.XDMCD[KO0XWCDX];
      KO0XM001.XPRABRV[KO0XWMDX] = KO0XW01.XPRABRV[KO0XWCDX];
      KO0XM001.ZZZSDT[KO0XWMDX] = KO0XW01.ZZZSDT[KO0XWCDX];
      KO0XM001.ZZZCHGDT[KO0XWMDX] = KO0XW01.ZZZCHGDT[KO0XWCDX];
      ;
      if (KO0XW01.KO0XWSFL[KO0XWCDX] == "N")
        set KO0XM001.KO0XMSEL[KO0XWMDX] skip, invisible;
        set KO0XM001.KO0XMHFL[KO0XWMDX] skip;
        set KO0XM001.SY2CLRID[KO0XWMDX] skip;
        set KO0XM001.SY2CLRAB[KO0XWMDX] skip;
        set KO0XM001.XDMCD[KO0XWMDX] skip;
        set KO0XM001.XPRABRV[KO0XWMDX] skip;
        set KO0XM001.ZZZSDT[KO0XWMDX] skip;
        set KO0XM001.ZZZCHGDT[KO0XWMDX] skip;
      else
        set KO0XM001.KO0XMSEL[KO0XWMDX] normal;
        set KO0XM001.KOFCOMCD[KO0XWMDX] skip;
        set KO0XM001.XSMTYPCD[KO0XWMDX] skip;
        set KO0XM001.KO0XMEDT[KO0XWMDX] skip;
        set KO0XM001.KO0XMXDT[KO0XWMDX] skip;
        set KO0XM001.KO0XMHFL[KO0XWMDX] skip;
        set KO0XM001.SY2CLRID[KO0XWMDX] skip;
        set KO0XM001.SY2CLRAB[KO0XWMDX] skip;
        set KO0XM001.XDMCD[KO0XWMDX] skip;
        set KO0XM001.XPRABRV[KO0XWMDX] skip;
        set KO0XM001.ZZZSDT[KO0XWMDX] skip;
        set KO0XM001.ZZZCHGDT[KO0XWMDX] skip;
      end
      if (KO0XW04.KO0XWCDX == 1)
        set KO0XM001.KO0XMSEL[KO0XWMDX] normal;
        set KO0XM001.KO0XMHFL[KO0XWMDX] skip;
        set KO0XM001.SY2CLRID[KO0XWMDX] skip;
        set KO0XM001.SY2CLRAB[KO0XWMDX] skip;
        set KO0XM001.XDMCD[KO0XWMDX] skip;
        set KO0XM001.XPRABRV[KO0XWMDX] skip;
        set KO0XM001.ZZZSDT[KO0XWMDX] skip;
        set KO0XM001.ZZZCHGDT[KO0XWMDX] skip;
      else
        /* next sentence*/
      end
      KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
      KO0XW04.KO0XWTOP = KO0XW04.KO0XWTOP + 1;
      KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
      ;
    else
      set KO0XM001.KO0XMSEL[KO0XWMDX] skip, invisible;
      set KO0XM001.KOFCOMCD[KO0XWMDX] skip, invisible;
      set KO0XM001.XSMTYPCD[KO0XWMDX] skip, invisible;
      set KO0XM001.KO0XMEDT[KO0XWMDX] skip, invisible;
      set KO0XM001.KO0XMXDT[KO0XWMDX] skip, invisible;
      set KO0XM001.KO0XMHFL[KO0XWMDX] skip, invisible;
      set KO0XM001.SY2CLRID[KO0XWMDX] skip, invisible;
      set KO0XM001.SY2CLRAB[KO0XWMDX] skip, invisible;
      set KO0XM001.XDMCD[KO0XWMDX] skip, invisible;
      set KO0XM001.XPRABRV[KO0XWMDX] skip, invisible;
      set KO0XM001.ZZZSDT[KO0XWMDX] skip, invisible;
      set KO0XM001.ZZZCHGDT[KO0XWMDX] skip, invisible;
      KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    end
    ;
  end
  ;
  KO0XM001.KOFCOMCD[1] = " ";
  KO0XM001.XSMTYPCD[1] = " ";
  KO0XM001.KO0XMEDT[1] = " ";
  KO0XM001.KO0XMXDT[1] = " ";
  KO0XM001.KO0XMHFL[1] = +0;
  set KO0XM001.KO0XMHFL[1] skip, invisible;
  ;
  ;
end // end KO0XSBD

// select the next color
Function KO0XSBE()
  ;
  ;
       /* ***************************************/
       /* * select the next color record       **/
       /* ***************************************/
  ;
  ;
  ;
  call "IO0130" ("SN", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0XSBG(); /* move color record to ko0xw01*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return; /* return no more records to select*/
    else
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1REC.TA1TBLKE = SY2REC.SY2KEY;
      TA1REC.TA1LOCAT[1] = "KO0XSBE";
      TA1REC.TA1LOCAT[2] = "IO0130";
      XSKO001();
    end
  end
  ;
  ;
  ;
end // end KO0XSBE

// close color select set
Function KO0XSBF()
  ;
  ;
  call "IO0130" ("CS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentenece*/
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1TBLKE = SY2REC.SY2KEY;
    TA1REC.TA1LOCAT[1] = "KO0XSBF";
    TA1REC.TA1LOCAT[2] = "IO0130";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0XSBF

// move sy2rec to ko0xw01
Function KO0XSBG()
  ;
  ;
      /* ************************************************/
      /* *  check that the life cycle code from        **/
      /* * ko0xm001 match the life cyle code from      **/
      /* * style/color and if life cycle codes match   **/
      /* * then check the the date is effective.       **/
      /* * if code and date are all valid then move    **/
      /* * sy2rec to ko0xw01 working storage area.     **/
      /* *                                             **/
      /* *                                             **/
      /* ************************************************/
  ;
  ;
  if (KO0XM001.XLCCD == SY2REC.XLCCD1
   && KO0XW04.KO0XWLCC >= SY2REC.SY2CEDT1)
    /* next sentence*/
  else
    if (KO0XM001.XLCCD == SY2REC.XLCCD2
     && KO0XW04.KO0XWLCC >= SY2REC.SY2CEDT2
     && KO0XW04.KO0XWLCC <= SY2REC.SY2CEDT1)
      /* next sentence*/
    else
      if (KO0XM001.XLCCD == SY2REC.XLCCD3
       && KO0XW04.KO0XWLCC >= SY2REC.SY2CEDT3
       && KO0XW04.KO0XWLCC <= SY2REC.SY2CEDT2)
        /* next sentence*/
      else
        if (KO0XM001.XLCCD == SY2REC.XLCCD4
         && KO0XW04.KO0XWLCC >= SY2REC.SY2CEDT4
         && KO0XW04.KO0XWLCC <= SY2REC.SY2CEDT3)
          /* next sentence*/
        else
          return;
        end
      end
    end
  end
  ;
       /* ***************************************/
       /* * move valid sy2rec to ko0xw01       **/
       /* * record.                            **/
       /* ***************************************/
  ;
  ;
  KO0XW01.KO0XMHFL[KO0XWCDX] = 0;
  ;
  KO0XW01.SY2CLRID[KO0XWCDX] = SY2REC.SY2CLRID;
  KO0XW01.SY2CLRAB[KO0XWCDX] = SY2REC.SY2CLRAB;
  KO0XW01.XDMCD[KO0XWCDX] = SY2REC.XDMCD;
  KO0XW01.KO0XWSFL[KO0XWCDX] = "N"; /* n = new record*/
  ;
  KO0XW01.XLCCD1[KO0XWCDX] = SY2REC.XLCCD1;
  KO0XW01.SY2CEDT1[KO0XWCDX] = SY2REC.SY2CEDT1;
  KO0XW01.XLCCD2[KO0XWCDX] = SY2REC.XLCCD2;
  KO0XW01.SY2CEDT2[KO0XWCDX] = SY2REC.SY2CEDT2;
  KO0XW01.XLCCD3[KO0XWCDX] = SY2REC.XLCCD3;
  KO0XW01.SY2CEDT3[KO0XWCDX] = SY2REC.SY2CEDT3;
  KO0XW01.XLCCD4[KO0XWCDX] = SY2REC.XLCCD4;
  KO0XW01.SY2CEDT4[KO0XWCDX] = SY2REC.SY2CEDT4;
  ;
  ;
  if (SY2REC.XPRCD in XPRTBL.XPRCD)
    KO0XW01.XPRABRV[KO0XWCDX] = XPRTBL.XPRABRV[sysVar.arrayIndex];
  else
    KO0XW01.XPRABRV[KO0XWCDX] = " ";
  end
  ;
  KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
  KO0XW04.KO0XWTOT = KO0XW04.KO0XWTOT + 1;
  ;
  if (KO0XW04.KO0XWCDX >= 200)
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(99);
    exit stack;
  else
    /* next sentence*/
  end
  ;
  ;
  ;
end // end KO0XSBG

// ret. all curr. comm prod rates
Function KO0XSBH()
  ;
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  call "IO0970" ("SN", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOXREC.SY2CLRID == KO0XW04.SY2CLRID)
      KO0XW01.KO0XMHFL[KO0XWCDX] = KO0XW01.KO0XMHFL[KO0XWCDX] + 1;
    else
      KO0XW04.KO0XWCDX = 0;
      KO0XSBI(); /* move koxrec to ko0xw01*/
      KO0XW04.SY2CLRID = KOXREC.SY2CLRID;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VSYRAT01";
      TA1REC.TA1TBLKE = KOXREC.KOXKEY;
      TA1REC.TA1LOCAT[1] = "KO0XSBH";
      TA1REC.TA1LOCAT[2] = "IO0970";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0XSBH

// move koxrec to ko0xw01
Function KO0XSBI()
  ;
  ;
       /* ***************************************/
       /* * if life cyle code from ko0xm001    **/
       /* * match then move koxrec to ko0xw01  **/
       /* * working storage record. otherwise  **/
       /* * read next record.                  **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KOXREC.SY2CLRID in KO0XW01.SY2CLRID)
    KO0XW01.KOFCOMCD[sysVar.arrayIndex] = KOXREC.KOFCOMCD;
    KO0XW01.XSMTYPCD[sysVar.arrayIndex] = KOXREC.XSMTYPCD;
    ;
    KO0XW01.KO0XWEDT[sysVar.arrayIndex] = KOXREC.KOXSCMED; /* ccyymmdd format*/
    KO0XW04.KO0XWTDT = KOXREC.KOXSCMED;
    KO0XSBK(); /* convert date*/
    KO0XW01.KO0XMEDT[sysVar.arrayIndex] = KO0XW04.KO0XWDDT; /* mm-dd-yy format*/
    ;
    KO0XW01.KO0XWXDT[sysVar.arrayIndex] = KOXREC.KOXSCMXD; /* ccyymmdd format*/
    KO0XW04.KO0XWTDT = KOXREC.KOXSCMXD;
    KO0XSBK(); /* convert date*/
    KO0XW01.KO0XMXDT[sysVar.arrayIndex] = KO0XW04.KO0XWDDT; /* mm-dd-yy format*/
    ;
    KO0XW01.XDMCD[sysVar.arrayIndex] = KOXREC.XDMCD;
    KO0XW01.ZZZSDT[sysVar.arrayIndex] = KOXREC.ZZZSDT;
    KO0XW01.ZZZCHGDT[sysVar.arrayIndex] = KOXREC.ZZZCHGDT;
    KO0XW01.XXXUSRID[sysVar.arrayIndex] = KOXREC.XXXUSRID;
    KO0XW01.KO0XWSFL[sysVar.arrayIndex] = "O"; /* o stands for history vs new record*/
    KO0XW04.KO0XWCDX = sysVar.arrayIndex;
  else
    KO0XW04.KO0XWTOT = KO0XW04.KO0XWTOT + 1;
    ;
    if (KO0XW04.KO0XWTOT >= 200)
      KO0XW04.KO0XWEFL = "Y";
      converseLib.validationFailed(99);
      exit stack;
    else
      /* next setence*/
    end
    ;
    ;
    KO0XW01.KOFCOMCD[KO0XWTOT] = KOXREC.KOFCOMCD;
    KO0XW01.XSMTYPCD[KO0XWTOT] = KOXREC.XSMTYPCD;
    ;
    KO0XW01.KO0XWEDT[KO0XWTOT] = KOXREC.KOXSCMED; /* ccyymmdd format*/
    KO0XW04.KO0XWTDT = KOXREC.KOXSCMED;
    KO0XSBK(); /* convert date*/
    KO0XW01.KO0XMEDT[KO0XWTOT] = KO0XW04.KO0XWDDT; /* mm-dd-yy format*/
    ;
    KO0XW01.KO0XWXDT[KO0XWTOT] = KOXREC.KOXSCMXD; /* ccyymmdd format*/
    KO0XW04.KO0XWTDT = KOXREC.KOXSCMXD;
    KO0XSBK(); /* convert date*/
    KO0XW01.KO0XMXDT[KO0XWTOT] = KO0XW04.KO0XWDDT; /* mm-dd-yy format*/
    ;
    KO0XW01.XDMCD[KO0XWTOT] = KOXREC.XDMCD;
    KO0XW01.ZZZSDT[KO0XWTOT] = KOXREC.ZZZSDT;
    KO0XW01.ZZZCHGDT[KO0XWTOT] = KOXREC.ZZZCHGDT;
    KO0XW01.XXXUSRID[KO0XWTOT] = KOXREC.XXXUSRID;
    KO0XW01.KO0XWSFL[KO0XWTOT] = "O";
                                   /* o stands for history vs new record*/
    KO0XW01.SY2CLRID[KO0XWTOT] = KOXREC.SY2CLRID;
    KO0XW04.KO0XWCDX = KO0XWTOT;
    KO0XSBL(); /* retrieve one color*/
  end
  ;
  KO0XW01.KO0XMHFL[KO0XWCDX] = 1;
  ;
  ;
  ;
  ;
  ;
end // end KO0XSBI

// close comm. prod rate
Function KO0XSBJ()
  ;
  ;
  call "IO0970" ("CS", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentenece*/
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYRATE01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0XSBJ";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0XSBJ

// convert ccyymmdd to mmddyy
Function KO0XSBK()
  ;
       /* ***************************************/
       /* * manually convert from ccyymmdd to  **/
       /* * mm-dd-yy formats.                  **/
       /* ***************************************/
  ;
  KO0XW04.KO0XWDMM = KO0XW04.KO0XWTMM;
  KO0XW04.KO0XWDH1 = "-";
  KO0XW04.KO0XWDDD = KO0XW04.KO0XWTDD;
  KO0XW04.KO0XWDH2 = "-";
  KO0XW04.KO0XWDYY = KO0XW04.KO0XWTYY;
  ;
  ;
  ;
end // end KO0XSBK

// retreive a single color
Function KO0XSBL()
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set SY2REC empty;
  ;
  SY2REC.XGPCD = KO0XM001.XGPCD;
  SY2REC.SY1STNBR = KO0XM001.SY1STNBR;
  SY2REC.SY2CLRID = KOXREC.SY2CLRID;
  SY2REC.XDMCD = KOXREC.XDMCD;
  ;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    KO0XW01.SY2CLRAB[KO0XWCDX] = SY2REC.SY2CLRAB;
    KO0XW01.XDMCD[KO0XWCDX] = SY2REC.XDMCD;
    ;
    KO0XW01.XLCCD1[KO0XWCDX] = SY2REC.XLCCD1;
    KO0XW01.SY2CEDT1[KO0XWCDX] = SY2REC.SY2CEDT1;
    KO0XW01.XLCCD2[KO0XWCDX] = SY2REC.XLCCD2;
    KO0XW01.SY2CEDT2[KO0XWCDX] = SY2REC.SY2CEDT2;
    KO0XW01.XLCCD3[KO0XWCDX] = SY2REC.XLCCD3;
    KO0XW01.SY2CEDT3[KO0XWCDX] = SY2REC.SY2CEDT3;
    KO0XW01.XLCCD4[KO0XWCDX] = SY2REC.XLCCD4;
    KO0XW01.SY2CEDT4[KO0XWCDX] = SY2REC.SY2CEDT4;
    ;
    ;
    if (SY2REC.XPRCD in XPRTBL.XPRCD)
      KO0XW01.XPRABRV[KO0XWCDX] = XPRTBL.XPRABRV[sysVar.arrayIndex];
    else
      KO0XW01.XPRABRV[KO0XWCDX] = " ";
    end
    ;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0XW01.SY2CLRAB[KO0XWCDX] = "NOT FOUND";
      ;
    else
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1REC.TA1TBLKE = SY2REC.SY2KEY;
      TA1REC.TA1LOCAT[1] = "KO0XSBB";
      TA1REC.TA1LOCAT[2] = "IO0130";
      XSKO001();
    end
  end
end // end KO0XSBL

// check map key data has not chg
Function KO0XSCA()
  ;
  ;
       /* **********************************************/
       /* * check that the map key header fields have **/
       /* * not changed.                              **/
       /* **********************************************/
  ;
  if (KO0XM001.XGPCD == KO0XW01.XGPCD
   && KO0XM001.SY1STNBR == KO0XW01.SY1STNBR
   && KO0XM001.XLCCD == KO0XW01.XLCCD
   && KO0XM001.XQACD == KO0XW01.XQACD
   && KO0XM001.KO0XMLCD == KO0XW01.KO0XMLCD)
    return;
  else
    set SQLCA empty;
    set ERRSQLCA empty;
    set KOAREC empty;
    set KOXREC empty;
    set KO0XW01 empty;
    set KO0XW02 empty;
    set KO0XW03 empty;
    set KO0XW04 empty;
    set SY1REC empty;
    set SY2REC empty;
    set KO0XM002 initial;
    ;
    KO0XW04.XGPCD = KO0XM001.XGPCD;
    KO0XW04.SY1STNBR = KO0XM001.SY1STNBR;
    KO0XW04.XLCCD = KO0XM001.XLCCD;
    KO0XW04.XQACD = KO0XM001.XQACD;
    KO0XW04.KO0XMLCD = KO0XM001.KO0XMLCD;
    ;
    set KO0XM001 initial;
    ;
    KO0XM001.XGPCD = KO0XW04.XGPCD;
    KO0XM001.SY1STNBR = KO0XW04.SY1STNBR;
    KO0XM001.XLCCD = KO0XW04.XLCCD;
    KO0XM001.XQACD = KO0XW04.XQACD;
    KO0XM001.KO0XMLCD = KO0XW04.KO0XMLCD;
    ;
    KO0XW01.XGPCD = KO0XW04.XGPCD;
    KO0XW01.SY1STNBR = KO0XW04.SY1STNBR;
    KO0XW01.XLCCD = KO0XW04.XLCCD;
    KO0XW01.XQACD = KO0XW04.XQACD;
    KO0XW01.KO0XMLCD = KO0XW04.KO0XMLCD;
    KO0XW04.KO0XWKFL = "Y"; /* header key fields*/
    KO0XW04.KO0XWEFL = "N"; /* set error field no*/
    exit stack;
  end
  ;
  ;
end // end KO0XSCA

// check pf keys
Function KO0XSCB()
  ;
  ;
  if (KO0XM001.CATOAP != " ")
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KO0XM001.CATOAP;
      COMMAREA.CAITEM = KO0XM001.CAITEM;
      XSEXIT();
      KO0XM001.XXXMSG = COMMAREA.CAMSG;
      KO0XW04.KO0XWEFL = "Y";
      exit stack;
    else
      set KO0XM001.CATOAP cursor, bold;
      KO0XW04.KO0XWEFL = "Y";
      converseLib.validationFailed(1);
      exit stack;
    end
  end
  ;
  if (converseVar.eventKey is enter)
    KO0XSCA();
    if (KO0XM001.KOFCOMCD[1] == " "
     && KO0XM001.XSMTYPCD[1] == " "
     && KO0XM001.KO0XMEDT[1] == " "
     && KO0XM001.KO0XMXDT[1] == " ")
      return;
    else
      converseLib.validationFailed(2);
      KO0XW04.KO0XWEFL = "Y";
      exit stack;
    end
  end
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    KO0XM001.XXXMSG = COMMAREA.CAMSG;
    KO0XW04.KO0XWEFL = "Y";
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KO0A";
    XSEXIT();
    KO0XM001.XXXMSG = COMMAREA.CAMSG;
    KO0XW04.KO0XWEFL = "Y";
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf4)
    XSPF4();
    KO0XM001.XXXMSG = COMMAREA.CAMSG;
    KO0XW04.KO0XWEFL = "Y";
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf12)
    if (KO0XM001.KOFCOMCD[1] == " "
     && KO0XM001.XSMTYPCD[1] == " "
     && KO0XM001.KO0XMEDT[1] == " "
     && KO0XM001.KO0XMXDT[1] == " ")
      return;
    else
      converseLib.validationFailed(2);
      KO0XW04.KO0XWEFL = "Y";
      exit stack;
    end
  end
  ;
  if (converseVar.eventKey is pf15)
    if (KO0XM001.KOFCOMCD[1] == " "
     && KO0XM001.XSMTYPCD[1] == " "
     && KO0XM001.KO0XMEDT[1] == " "
     && KO0XM001.KO0XMXDT[1] == " ")
      converseLib.validationFailed(2);
      KO0XW04.KO0XWEFL = "Y";
      exit stack;
    else
      if ("O" in KO0XW01.KO0XWSFL)
        converseLib.validationFailed(2);
        KO0XW04.KO0XWEFL = "Y";
        exit stack;
      else
        return;
      end
    end
  end
  ;
  converseLib.validationFailed(2);
  KO0XW04.KO0XWEFL = "Y";
  exit stack;
  ;
  ;
end // end KO0XSCB

// set screen fields normal
Function KO0XSCC()
  ;
  ;
  KO0XW04.KO0XWKFL = "N";
  KO0XW04.KO0XWEFL = "N";
  KO0XW04.KO0XWMDX = 1;
  ;
  while (KO0XW04.KO0XWMDX < 11)
    set KO0XM001.KO0XMSEL[KO0XWMDX] normal;
    set KO0XM001.KOFCOMCD[KO0XWMDX] normal;
    set KO0XM001.XSMTYPCD[KO0XWMDX] normal;
    set KO0XM001.KO0XMEDT[KO0XWMDX] normal;
    set KO0XM001.KO0XMXDT[KO0XWMDX] normal;
    set KO0XM001.KO0XMHFL[KO0XWMDX] initialAttributes;
    set KO0XM001.SY2CLRID[KO0XWMDX] initialAttributes;
    set KO0XM001.SY2CLRAB[KO0XWMDX] initialAttributes;
    set KO0XM001.XDMCD[KO0XWMDX] initialAttributes;
    set KO0XM001.XPRABRV[KO0XWMDX] initialAttributes;
    set KO0XM001.ZZZSDT[KO0XWMDX] initialAttributes;
    set KO0XM001.ZZZCHGDT[KO0XWMDX] initialAttributes;
    ;
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    ;
  end
  ;
  ;
  ;
end // end KO0XSCC

// process pf15 duplicate
Function KO0XSCD()
  ;
       /* ***************************************/
       /* * the pf15 key will duplicate the    **/
       /* * field values from the first line   **/
       /* * into the remaining blank lines.    **/
       /* * it will also do some field         **/
       /* * validation                         **/
       /* ***************************************/
  ;
  ;
  if (KO0XM001.KOFCOMCD[1] > " "
   || KO0XM001.XSMTYPCD[1] > " "
   || KO0XM001.KO0XMEDT[1] > " "
   || KO0XM001.KO0XMXDT[1] > " ")
    /* next sentence*/
  else
    converseLib.validationFailed(2);
    return;
  end
  ;
  KO0XW04.KO0XWFFL = "D"; /* set function flag to 'd' for*/
                                   /* duplicate*/
  KO0XW04.KO0XWMDX = 1;
  KO0XW04.KO0XWCDX = 1;
  ;
  KO0XSCE(); /* validate xrccd (reason code)*/
  ;
  KO0XSCF(); /* validate comm. ending date*/
  ;
  KO0XSCG(); /* validate beg. date*/
  ;
  KO0XSCH(); /* validate specility code and type*/
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    exit stack;
  else
    /* next sentence*/
  end
  ;
  KO0XSCI();
                                   /* move duplicate data to ko0xw01 record*/
  ;
  ;
  KO0XW04.KO0XWCDX = 1;
  KO0XW04.KO0XWMDX = 1;
  KO0XW04.KO0XWTOP = 1;
  KO0XSBD(); /* move ko0xw01 to ko0xm001*/
  ;
end // end KO0XSCD

// validate xrccd (reason code)
Function KO0XSCE()
  ;
   /* ** XRCCD IS BEING DELETED BY THE DB2 TBLCHG OF 3/94. RPATTE *****/
   /* IF KO0XM001.XRCCD(KO0XWMDX) EQ ' ';*/
   /* MOVE 38 TO EZEMNO;*/
   /* MOVE 'Y' TO KO0XW04.KO0XWEFL;*/
   /* SET KO0XM001.XRCCD(KO0XWMDX) CURSOR,MODIFIED,BRIGHT;*/
   /* MOVE KO0XM001.XRCCD(KO0XWMDX) TO KO0XW01.XRCCD(KO0XWCDX);*/
   /* ELSE;*/
   /* IF KO0XM001.XRCCD(KO0XWMDX) EQ 'NR';*/
   /* IF KO0XM001.XRCCD(KO0XWMDX) IN XRCTBL.XRCCD;*/
   /* MOVE KO0XM001.XRCCD(KO0XWMDX) TO KO0XW01.XRCCD(KO0XWCDX);*/
   /* ELSE;*/
   /* MOVE 20 TO EZEMNO;*/
   /* MOVE 'Y' TO KO0XW04.KO0XWEFL;*/
   /* SET KO0XM001.XRCCD(KO0XWMDX) CURSOR,MODIFIED,BRIGHT;*/
   /* END;*/
   /* ELSE;*/
   /* MOVE KO0XM001.XRCCD(KO0XWMDX) TO KO0XW01.XRCCD(KO0XWCDX);*/
   /* MOVE 72 TO EZEMNO;*/
   /* MOVE 'Y' TO KO0XW04.KO0XWEFL;*/
   /* SET KO0XM001.XRCCD(KO0XWMDX) CURSOR,MODIFIED,BRIGHT;*/
   /* END;*/
   /* END;*/
end // end KO0XSCE

// validate comm. ending date
Function KO0XSCF()
  ;
  ;
  ;
  if (KO0XM001.KO0XMXDT[KO0XWMDX] == " ")
    converseLib.validationFailed(38);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM001.KO0XMXDT[KO0XWMDX] cursor, modified, bold;
    KO0XW01.KO0XMXDT[KO0XWCDX] = KO0XM001.KO0XMXDT[KO0XWMDX];
    return;
  else
    /* next sentence*/
  end
  ;
  ;
  set TA2REC empty;
  KO0XW04.KO0XWHDT = " ";
  TA2REC.TA2DTOPT = "GREGGREG";
  KO0XW04.KO0XWHDT = KO0XM001.KO0XMXDT[KO0XWMDX];
  ;
  if (KO0XW04.KO0XWHYY != " ")
    TA2REC.TA2GRTYP = "B";
    TA2REC.TA2GRGB = KO0XM001.KO0XMXDT[KO0XWMDX];
  else
    if (KO0XW04.KO0XWSL1 != "-")
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2GRGA = KO0XM001.KO0XMXDT[KO0XWMDX];
    else
      TA2REC.TA2GRTYP = "B";
      TA2REC.TA2GRGB = KO0XM001.KO0XMXDT[KO0XWMDX];
    end
  end
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0XM001.KO0XMXDT[KO0XWMDX] = TA2REC.TA2GRGB;
    KO0XW01.KO0XMXDT[KO0XWCDX] = TA2REC.TA2GRGB;
    KO0XW01.KO0XWXDT[KO0XWCDX] = TA2REC.TA2GRGGN;
    /* date format of ccyymmdd*/
  else
    set KO0XM001.KO0XMXDT[KO0XWMDX] cursor, modified, bold;
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(46); /* date must be valid and in mmddyy or mm-dd-yy format*/
  end
  ;
  ;
end // end KO0XSCF

// validate comm. beg. date
Function KO0XSCG()
  ;
  ;
  ;
  if (KO0XM001.KO0XMEDT[KO0XWMDX] == " ")
    converseLib.validationFailed(38);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM001.KO0XMEDT[KO0XWMDX] cursor, modified, bold;
    KO0XW01.KO0XMEDT[KO0XWCDX] = KO0XM001.KO0XMEDT[KO0XWMDX];
    return;
  else
    /* next sentence*/
  end
  ;
  ;
  set TA2REC empty;
  KO0XW04.KO0XWHDT = " ";
  TA2REC.TA2DTOPT = "GREGGREG";
  KO0XW04.KO0XWHDT = KO0XM001.KO0XMEDT[KO0XWMDX];
  ;
  if (KO0XW04.KO0XWHYY != " ")
    TA2REC.TA2GRTYP = "B";
    TA2REC.TA2GRGB = KO0XM001.KO0XMEDT[KO0XWMDX];
  else
    if (KO0XW04.KO0XWSL1 != "-")
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2GRGA = KO0XM001.KO0XMEDT[KO0XWMDX];
    else
      TA2REC.TA2GRTYP = "B";
      TA2REC.TA2GRGB = KO0XM001.KO0XMEDT[KO0XWMDX];
    end
  end
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0XM001.KO0XMEDT[KO0XWMDX] = TA2REC.TA2GRGB;
    KO0XW01.KO0XMEDT[KO0XWCDX] = TA2REC.TA2GRGB;
    KO0XW01.KO0XWEDT[KO0XWCDX] = TA2REC.TA2GRGGN;
    /* in date format of ccyymmdd*/
  else
    set KO0XM001.KO0XMEDT[KO0XWMDX] cursor, modified, bold;
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(46); /* date must be valid and in mmddyy or mm-dd-yy format*/
  end
  ;
  ;
  if (KO0XW01.KO0XWEDT[KO0XWCDX] < KO0XW01.KO0XWXDT[KO0XWCDX])
    /* next sentence*/
  else
    converseLib.validationFailed(94); /* end  date is not > beginning date*/
    set KO0XM001.KO0XMEDT[KO0XWMDX] cursor, modified, bold;
    KO0XW04.KO0XWEFL = "Y";
  end
  ;
  ;
end // end KO0XSCG

// validate specl. type and code
Function KO0XSCH()
  ;
  ;
  ;
  if (KO0XM001.XSMTYPCD[KO0XWMDX] == "M"
   || KO0XM001.XSMTYPCD[KO0XWMDX] == "S"
   || KO0XM001.XSMTYPCD[KO0XWMDX] == "C")
    /* next sentence*/
  else
    KO0XW04.KO0XWEFL = "Y";
    KO0XW01.KOFCOMCD[KO0XWCDX] = KO0XM001.KOFCOMCD[KO0XWMDX];
    KO0XW01.XSMTYPCD[KO0XWCDX] = KO0XM001.XSMTYPCD[KO0XWMDX];
    set KO0XM001.XSMTYPCD[KO0XWMDX] cursor, modified, bold;
    converseLib.validationFailed(95);
    return;
  end
  ;
  ;
  if (KO0XM001.XLCCD == "10")
    if (KO0XM001.XSMTYPCD[KO0XWMDX] == "M"
     || KO0XM001.XSMTYPCD[KO0XWMDX] == "S")
      /* next sentence*/
    else
      KO0XW04.KO0XWEFL = "Y";
      KO0XW01.KOFCOMCD[KO0XWCDX] = KO0XM001.KOFCOMCD[KO0XWMDX];
      KO0XW01.XSMTYPCD[KO0XWCDX] = KO0XM001.XSMTYPCD[KO0XWMDX];
      set KO0XM001.XSMTYPCD[KO0XWMDX] cursor, modified, bold;
      converseLib.validationFailed(115); /* specility type and life cycle do not match*/
      return;
    end
  else
    if (KO0XM001.XLCCD == "20")
      if (KO0XM001.XSMTYPCD[KO0XWMDX] == "C")
        /* next sentence*/
      else
        KO0XW04.KO0XWEFL = "Y";
        KO0XW01.KOFCOMCD[KO0XWCDX] = KO0XM001.KOFCOMCD[KO0XWMDX];
        KO0XW01.XSMTYPCD[KO0XWCDX] = KO0XM001.XSMTYPCD[KO0XWMDX];
        set KO0XM001.XSMTYPCD[KO0XWMDX] cursor, modified, bold;
        converseLib.validationFailed(115); /* specility type and life cycle do not match*/
        return;
      end
    end
  end
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set KOFREC empty;
  ;
  KOFREC.KOFCOMCD = KO0XM001.KOFCOMCD[KO0XWMDX];
  KOFREC.XSMTYPCD = KO0XM001.XSMTYPCD[KO0XWMDX];
  ;
  call "IO0710" ("S ", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOFREC.XXXSTAT == "A")
      KO0XW01.KOFCOMCD[KO0XWCDX] = KOFREC.KOFCOMCD;
      KO0XW01.XSMTYPCD[KO0XWCDX] = KOFREC.XSMTYPCD;
    else
      converseLib.validationFailed(111); /* special comm. code and type are not active*/
      KO0XW04.KO0XWEFL = "Y";
      KO0XW01.KOFCOMCD[KO0XWCDX] = KO0XM001.KOFCOMCD[KO0XWMDX];
      KO0XW01.XSMTYPCD[KO0XWCDX] = KO0XM001.XSMTYPCD[KO0XWMDX];
      set KO0XM001.KOFCOMCD[KO0XWMDX] cursor, modified, bold;
      set KO0XM001.XSMTYPCD[KO0XWMDX] cursor, modified, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(95); /* special comm. code and type are not found*/
      KO0XW04.KO0XWEFL = "Y";
      KO0XW01.KOFCOMCD[KO0XWCDX] = KO0XM001.KOFCOMCD[KO0XWMDX];
      KO0XW01.XSMTYPCD[KO0XWCDX] = KO0XM001.XSMTYPCD[KO0XWMDX];
      set KO0XM001.KOFCOMCD[KO0XWMDX] cursor, modified, bold;
      set KO0XM001.XSMTYPCD[KO0XWMDX] cursor, modified, bold;
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      TA1REC.TA1LOCAT[1] = "KO0XSCH";
      TA1REC.TA1LOCAT[2] = "IO0710";
      XSKO001();
    end
  end
end // end KO0XSCH

// move dup. fields to ko0xw01
Function KO0XSCI()
  ;
  ;
       /* *****************************************/
       /* * ko0xwmdx is used to dup. the correct **/
       /* * number of to ko0xw01. note: this is  **/
       /* * an exception to ko0xwmdx as an index.**/
       /* *                                      **/
       /* *                                      **/
       /* *****************************************/
  ;
  KO0XW04.KO0XWCDX = 1;
  ;
  KO0XW04.KO0XWMDP = KO0XW04.KO0XWTOT + 1;
  ;
  while (KO0XW04.KO0XWCDX <= KO0XW04.KO0XWMDP)
    ;
    if (KO0XW01.KO0XWSFL[KO0XWCDX] == "N")
      KO0XW01.KOFCOMCD[KO0XWCDX] = KO0XM001.KOFCOMCD[1];
      KO0XW01.XSMTYPCD[KO0XWCDX] = KO0XM001.XSMTYPCD[1];
      KO0XW01.KO0XMEDT[KO0XWCDX] = KO0XM001.KO0XMEDT[1];
      KO0XW01.KO0XMXDT[KO0XWCDX] = KO0XM001.KO0XMXDT[1];
      KO0XW01.KO0XWEDT[KO0XWCDX] = KO0XW01.KO0XWEDT[1];
      KO0XW01.KO0XWXDT[KO0XWCDX] = KO0XW01.KO0XWXDT[1];
    else
      /* next sentence*/
    end
    ;
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
    ;
  end
  ;
  ;
end // end KO0XSCI

// process pf7
Function KO0XSCJ()
  ;
   /* ************************************************************/
   /* compare working storage area with map area and if different*/
   /* then validate fields on ko0xm001 and if there are no errors*/
   /* process pf7 else display highlighted errors.*/
   /* ************************************************************/
  ;
  if (KO0XW04.KO0XWCDX <= 11)
    converseLib.validationFailed(70);
    KO0XW04.KO0XWMDX = 1;
    KO0XW04.KO0XWCDX = 1;
    KO0XW04.KO0XWTOP = 1;
    KO0XSBD(); /* move ko0xw01 to ko0xm001*/
    exit stack;
  else
    /* next sentence*/
  end
  ;
   /* ****/
  ;
  KO0XSCN(); /* validate screen fields*/
  ;
  KO0XSCO(); /* clear screen field*/
  ;
  if (KO0XW04.KO0XWTOP < 11)
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX - KO0XW04.KO0XWTOP;
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX - 9;
  else
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX - 20;
  end
  ;
  if (KO0XW04.KO0XWCDX < 11)
    KO0XW04.KO0XWCDX = 1;
  else
    /* next sentence*/
  end
  ;
  KO0XW04.KO0XWMDX = 1;
  KO0XW04.KO0XWTOP = 1;
  ;
  KO0XSBD(); /* move ko0xw01 to ko0xm001*/
  ;
  ;
end // end KO0XSCJ

// process pf8
Function KO0XSCK()
  ;
  ;
   /* *************************************************************/
   /* compare working storage area with map area and if different*/
   /* then validate fields on ko0xm001 and if there are no errors*/
   /* process pf8 else display highlighted errors.*/
   /* *************************************************************/
  ;
  if (KO0XW04.KO0XWCDX > KO0XW04.KO0XWTOT)
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX - KO0XW04.KO0XWTOP;
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
    KO0XW04.KO0XWMDX = 1;
    KO0XW04.KO0XWTOP = 1;
    KO0XSBD(); /* display screen*/
    converseLib.validationFailed(68);
    exit stack;
  else
    /* next sentence*/
  end
  ;
   /* ****/
  ;
  KO0XSCN(); /* validate screen fields*/
  ;
  KO0XSCO(); /* clear screen field*/
  ;
  ;
  KO0XW04.KO0XWMDX = 1;
  KO0XW04.KO0XWTOP = 1;
  ;
  ;
  KO0XSBD();
  ;
  ;
end // end KO0XSCK

// process enter or pf12
Function KO0XSCL()
  ;
  ;
   /* **********************************************************/
   /* compare working storage area with map area and if different*/
   /* then validate fields on ko0xm001 and if there are no errors*/
   /* process enter else display highlighted errors.*/
   /* **********************************************************/
  ;
  ;
  KO0XSCN(); /* validate screen fields*/
  ;
  KO0XSCP(); /* check if ko0xmsel = a, then move s to all ko0xmsel*/
  ;
  KO0XSCO(); /* clear screen field*/
  ;
  KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX - KO0XW04.KO0XWTOP;
  if (KO0XW04.KO0XWCDX <= 0)
    KO0XW04.KO0XWCDX = 1;
  else
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
  end
  ;
  KO0XW04.KO0XWMDX = 1;
  KO0XW04.KO0XWTOP = 1;
  KO0XSBD();
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    return;
  else
    if (converseVar.eventKey is pf12)
      converseLib.validationFailed(76);
      return;
    else
      /* next sentence*/
    end
  end
  ;
  ;
  if ("N" in KO0XW01.KO0XWSFL
   && KO0XW04.KO0XWFFL == "D")
    return;
  else
    if ("S" in KO0XW01.KO0XMSEL)
      return;
    else
      KO0XSDJ();
      converseLib.validationFailed(63);
    end
  end
  ;
  ;
end // end KO0XSCL

// validate screen
Function KO0XSCN()
  ;
  ;
  ;
  KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX - KO0XW04.KO0XWTOP;
  KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
  ;
  KO0XW04.KO0XWMDX = 1;
  KO0XW04.KO0XWTOP = 1;
  ;
  while (KO0XW04.KO0XWMDX <= 10)
    ;
    if (KO0XM001.KO0XMSEL[KO0XWMDX] == " "
     && KO0XM001.KOFCOMCD[KO0XWMDX] == " "
     && KO0XM001.XSMTYPCD[KO0XWMDX] == " "
     && KO0XM001.KO0XMEDT[KO0XWMDX] == " "
     && KO0XM001.KO0XMXDT[KO0XWMDX] == " ")
      KO0XW01.KO0XMSEL[KO0XWCDX] = " ";
      KO0XW01.KOFCOMCD[KO0XWCDX] = " ";
      KO0XW01.XSMTYPCD[KO0XWCDX] = " ";
      KO0XW01.KO0XMEDT[KO0XWCDX] = " ";
      KO0XW01.KO0XMXDT[KO0XWCDX] = " ";
    else
      ;
      if (KO0XM001.KO0XMSEL[KO0XWMDX] == "S"
       || KO0XM001.KO0XMSEL[1] == "A")
        KO0XW01.KO0XMSEL[KO0XWCDX] = KO0XM001.KO0XMSEL[KO0XWMDX];
        KO0XW04.KO0XWFFL = "H";
      else
        ;
        if (KO0XM001.XSMTYPCD[KO0XWMDX] is modified
         || KO0XM001.KOFCOMCD[KO0XWMDX] is modified
         || KO0XM001.KO0XMEDT[KO0XWMDX] is modified
         || KO0XM001.KO0XMXDT[KO0XWMDX] is modified)
          KO0XW04.KO0XWFFL = "D";
          KO0XSCE(); /* validate xrccd*/
          ;
          KO0XSCF(); /* validate comm. ending date*/
          ;
          KO0XSCG(); /* validate beg. date*/
          ;
          KO0XSCH(); /* validate specility code and type*/
          ;
          /* KO0XSCQ         ; check beg. dt with life cycle eff date*/
          ;
        end
      end
    end
    ;
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
    KO0XW04.KO0XWTOP = KO0XW04.KO0XWTOP + 1;
    ;
  end
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    KO0XW04.KO0XWFFL = " ";
  else
    return;
  end
  ;
  ;
  ;
end // end KO0XSCN

// clear screen fields
Function KO0XSCO()
  ;
  ;
  ;
  set KO0XM001 empty;
  ;
  ;
  KO0XM001.XGPCD = KO0XW01.XGPCD;
  KO0XM001.XGPABRV = KO0XW01.XGPABRV;
  KO0XM001.SY1STNBR = KO0XW01.SY1STNBR;
  KO0XM001.SY1STYNM = KO0XW01.SY1STYNM;
  KO0XM001.XLCCD = KO0XW01.XLCCD;
  KO0XM001.XLCABRV = KO0XW01.XLCABRV;
  KO0XM001.XQACD = KO0XW01.XQACD;
  KO0XM001.XQAABRV = KO0XW01.XQAABRV;
  KO0XM001.KO0XMLCD = KO0XW01.KO0XMLCD;
  ;
  ;
end // end KO0XSCO

// set all fields to 's' select
Function KO0XSCP()
  ;
  ;
       /* ***************************************/
       /* * if the user want to see all the    **/
       /* * all the colors then set all the    **/
       /* * select fields to s.                **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XM001.KO0XMSEL[1] == "A"
   && KO0XW04.KO0XWFFL == "H")
    KO0XM001.KO0XMSEL[1] = "V";
    KO0XW01.KO0XMSEL[1] = "V";
    KO0XW04.KO0XWCDX = 2;
    while (KO0XW04.KO0XWCDX <= KO0XW04.KO0XWTOT)
      KO0XW01.KO0XMSEL[KO0XWCDX] = "S";
      KO0XW04.KO0XWCDX = KO0XWCDX + 1;
    end
  else
    /* next sentence*/
  end
  ;
  ;
  ;
end // end KO0XSCP

// move ko0xm001 info to ko0xw05
Function KO0XSDE()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0XW05.XGPCD = KO0XW01.XGPCD;
  KO0XW05.SY1STNBR = KO0XW01.SY1STNBR;
  KO0XW05.SY1STYNM = KO0XW01.SY1STYNM;
  KO0XW05.KO0XMLC = KO0XW01.XLCCD;
  KO0XW05.KO0XMXAB = KO0XW01.XLCABRV;
  KO0XW05.XQACD = KO0XW01.XQACD;
  KO0XW05.XQAABRV = KO0XW01.XQAABRV;
  KO0XW05.KO0XMLCD = KO0XW01.KO0XMLCD;
  ;
  KO0XW05.XLCCD1 = KO0XW01.XLCCD1[KO0XWCDX];
  KO0XW05.SY2CEDT1 = KO0XW01.SY2CEDT1[KO0XWCDX];
  KO0XW05.XLCCD2 = KO0XW01.XLCCD2[KO0XWCDX];
  KO0XW05.SY2CEDT2 = KO0XW01.SY2CEDT2[KO0XWCDX];
  KO0XW05.XLCCD3 = KO0XW01.XLCCD3[KO0XWCDX];
  KO0XW05.SY2CEDT3 = KO0XW01.SY2CEDT3[KO0XWCDX];
  KO0XW05.XLCCD4 = KO0XW01.XLCCD4[KO0XWCDX];
  KO0XW05.SY2CEDT4 = KO0XW01.SY2CEDT4[KO0XWCDX];
  ;
  KO0XW05.XSMTYPCD = KO0XW01.XSMTYPCD[KO0XWCDX];
  KO0XW05.KOFCOMCD = KO0XW01.KOFCOMCD[KO0XWCDX];
  KO0XW05.KO0XMEDT = KO0XW01.KO0XMEDT[KO0XWCDX];
  KO0XW05.KO0XMXDT = KO0XW01.KO0XMXDT[KO0XWCDX];
  KO0XW05.SY2CLRID = KO0XW01.SY2CLRID[KO0XWCDX];
  KO0XW05.SY2CLRAB = KO0XW01.SY2CLRAB[KO0XWCDX];
  KO0XW05.XDMCD = KO0XW01.XDMCD[KO0XWCDX];
  KO0XW05.XPRABRV = KO0XW01.XPRABRV[KO0XWCDX];
  KO0XW05.ZZZSDT = KO0XW01.ZZZSDT[KO0XWCDX];
  KO0XW05.ZZZCHGDT = KO0XW01.ZZZCHGDT[KO0XWCDX];
  KO0XW05.KO0XWEDT = KO0XW01.KO0XWEDT[KO0XWCDX];
  KO0XW05.KO0XWXDT = KO0XW01.KO0XWXDT[KO0XWCDX];
  ;
  ;
  ;
  KO0XSEP(); /* move ko0xw05 to ko0xm003*/
  ;
  ;
  ;
end // end KO0XSDE

// add koxrec
Function KO0XSDF()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  KOXREC.XGPCD = KO0XW01.XGPCD;
  KOXREC.SY1STNBR = KO0XW01.SY1STNBR;
  KOXREC.SY2CLRID = KO0XW01.SY2CLRID[KO0XWCDX];
  KOXREC.XDMCD = KO0XW01.XDMCD[KO0XWCDX];
  KOXREC.XQACD = KO0XW01.XQACD;
  KOXREC.XLCCD = KO0XW01.XLCCD;
  KOXREC.KOXSCMED = KO0XW01.KO0XWEDT[KO0XWCDX];
  KOXREC.KOXSCMXD = KO0XW01.KO0XWXDT[KO0XWCDX];
  KOXREC.XSMTYPCD = KO0XW01.XSMTYPCD[KO0XWCDX];
  KOXREC.KOFCOMCD = KO0XW01.KOFCOMCD[KO0XWCDX];
  ;
  KOXREC.XXXUSRID = COMMAREA.CAUSERID;
  KOXREC.ZZZSDT = KO0XW04.ZZZCHGDT;
  KOXREC.ZZZCHGDT = KO0XW04.ZZZCHGDT;
  KOXREC.ZZZCHGTM = KO0XW04.TA2TIMHM;
  KOXREC.ZZZCHGCT = 0;
  ;
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  call "IO0970" ("A ", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KOAREC.KOATBLCD = 45;
    KOAREC.KOAACTTY = "1";
    KOAREC.XXXTBLNM = "VSYRAT01";
    KO0XSDH(); /* set up audit record*/
    KO0XSDI(); /* write audit record*/
    converseLib.validationFailed(80);
    ;
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYRAT01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0XSDF";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
  ;
end // end KO0XSDF

// get date & time stamp
Function KO0XSDG()
  ;
  ;
       /* ***************************************/
       /* * this routine will retrieve todays  **/
       /* * date and time. these will be used  **/
       /* * to update zzzchgdt & zzzchgtm      **/
       /* * fields. there will be one date     **/
       /* * and time for all db2 rows that are **/
       /* * updated.                           **/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  KO0XW04.ZZZSDT = 0;
  KO0XW04.ZZZCHGDT = 0;
  KO0XW04.ZZZCHGTM = 0;
  KO0XW04.ZZZCHGCT = 0;
  KO0XW04.TA2TIMEN = 0;
  ;
  set TA2REC empty;
  set TA1REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0XW04.ZZZSDT = TA2REC.TA2GRGGN;
    KO0XW04.ZZZCHGDT = TA2REC.TA2GRGGN;
    KO0XW04.ZZZCHGTM = TA2REC.TA2GRGGN;
    KO0XW04.TA2TIMEN = TA2REC.TA2TIMEN;
  else
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "TA0040  ";
    TA1REC.TA1TBLKE = "TA0040";
    TA1REC.TA1LOCAT[1] = "KO0XSDG";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0XSDG

// setup add audit record.
Function KO0XSDH()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KOAREC.ZZZSDT = KO0XW04.ZZZCHGDT;
  KOAREC.ZZHHMMSS = KO0XW04.TA2TIMEN;
  ;
  KOAREC.XGPCD = KOXREC.XGPCD;
  KOAREC.SY1STNBR = KOXREC.SY1STNBR;
  KOAREC.SY2CLRID = KOXREC.SY2CLRID;
  KOAREC.XDMCD = KOXREC.XDMCD;
  KOAREC.XQACD = KOXREC.XQACD;
  KOAREC.XLCCD = KOXREC.XLCCD;
  KOAREC.KOXSCMED = KOXREC.KOXSCMED;
  KOAREC.KOXSCMXD = KOXREC.KOXSCMXD;
  KOAREC.XSMTYPCD = KOXREC.XSMTYPCD;
  KOAREC.KOFCOMCD = KOXREC.KOFCOMCD;
  KOAREC.XXXUSRID = KOXREC.XXXUSRID;
  KOAREC.KOACRSDT = KOXREC.ZZZSDT;
  ;
  ;
  ;
end // end KO0XSDH

// write audit record
Function KO0XSDI()
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  call "IO0630" ("A ", SQLCA, KOAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOAUD01";
    TA1REC.TA1TBLKE = KOAREC.KOAKEY;
    TA1REC.TA1LOCAT[1] = "KO0XSDI";
    TA1REC.TA1LOCAT[2] = "IO0630";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0XSDI

// clear out records & maps
Function KO0XSDJ()
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set KOAREC empty;
  set KOXREC empty;
  set KO0XW01 empty;
  set KO0XW02 empty;
  set KO0XW03 empty;
  set KO0XW04 empty;
  set SY1REC empty;
  set SY2REC empty;
  set KO0XM001 initial;
  set KO0XM002 initial;
  ;
  ;
end // end KO0XSDJ

// cross check xsmtypcd with l.c.
Function KO0XSDL()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  if (KO0XW01.XSMTYPCD[KO0XWCDX] == "C")
    KO0XW04.KO0XWHLC = "20"; /* temp hold for closeout life cycle cd.*/
  else
    if (KO0XW01.XSMTYPCD[KO0XWCDX] == "M"
     || KO0XW01.XSMTYPCD[KO0XWCDX] == "S")
      KO0XW04.KO0XWHLC = "10";
                                   /* temp hold for inline   life cycle cd.*/
    else
      /* next sentence*/
    end
  end
  ;
  if (KO0XW01.KO0XWEDT[KO0XWCDX] < KO0XW01.SY2CEDT4[KO0XWCDX])
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(96); /* beg date must be > l.c. eff. date*/
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT4 skip, bold;
  else
    if (KO0XW01.KO0XWEDT[KO0XWCDX] < KO0XW01.SY2CEDT3[KO0XWCDX])
      KO0XSDM(); /* check that ending date is < sy2cedt3*/
      /* check that ending date is lt lc eff. date and*/
       /* lc code is a match*/
    else
      if (KO0XW01.KO0XWEDT[KO0XWCDX] < KO0XW01.SY2CEDT2[KO0XWCDX])
        KO0XSDN(); /* check that ending date is < sy2cedt2*/
      else
        if (KO0XW01.KO0XWEDT[KO0XWCDX] < KO0XW01.SY2CEDT1[KO0XWCDX])
          KO0XSDO(); /* check that ending date is < sy2cedt1*/
        else
          if (KO0XW01.KO0XWEDT[KO0XWCDX] >= KO0XW01.SY2CEDT1[KO0XWCDX])
            KO0XSDP(); /* check that ending date is > sy2cedt1*/
            /* check that ending date is gt beg. date and lc. code ok*/
          else
            /* next sentence*/
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end KO0XSDL

// compare beg. dt with l.c. date
Function KO0XSDM()
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  if (KO0XW01.SY2CEDT4[KO0XWCDX] > 0)
    /* next sentence*/
  else
    KO0XSDE();
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT4 skip, bold;
    return;
  end
  ;
  if (KO0XW01.KO0XWEDT[KO0XWCDX] >= KO0XW01.SY2CEDT4[KO0XWCDX])
    /* next sentence*/
  else
    KO0XSDE();
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT4 skip, bold;
    return;
  end
  ;
  if (KO0XW01.KO0XWXDT[KO0XWCDX] < KO0XW01.SY2CEDT3[KO0XWCDX])
    if (KO0XM001.XLCCD == KO0XW01.XLCCD4[KO0XWCDX])
      /* next sentence*/
    else
      KO0XSDE();
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.XSMTYPCD cursor, bold;
      set KO0XM003.XLCCD4 cursor, bold;
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XSDE();
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMXDT cursor, bold;
    set KO0XM003.SY2CEDT3 skip, bold;
  end
  ;
end // end KO0XSDM

// compare beg. dt with l.c. date
Function KO0XSDN()
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  if (KO0XW01.SY2CEDT3[KO0XWCDX] > 0)
    /* next sentence*/
  else
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT3 skip, bold;
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    return;
  end
  ;
  if (KO0XW01.KO0XWEDT[KO0XWCDX] >= KO0XW01.SY2CEDT3[KO0XWCDX])
    /* next sentence*/
  else
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT3 skip, bold;
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    return;
  end
  ;
  ;
  if (KO0XW01.KO0XWXDT[KO0XWCDX] < KO0XW01.SY2CEDT2[KO0XWCDX])
    if (KO0XM001.XLCCD == KO0XW01.XLCCD3[KO0XWCDX])
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.XSMTYPCD cursor, bold;
      set KO0XM003.XLCCD3 skip, bold;
      KO0XSDE();
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMXDT cursor, bold;
    set KO0XM003.SY2CEDT2 skip, bold;
  end
  ;
end // end KO0XSDN

// compare beg. dt with l.c. date
Function KO0XSDO()
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  if (KO0XW01.SY2CEDT2[KO0XWCDX] >= 0)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT2 skip, bold;
    KO0XSDE();
  end
  ;
  if (KO0XW01.KO0XWEDT[KO0XWCDX] >= KO0XW01.SY2CEDT2[KO0XWCDX])
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT2 skip, bold;
    KO0XSDE();
  end
  ;
  if (KO0XW01.KO0XWXDT[KO0XWCDX] < KO0XW01.SY2CEDT1[KO0XWCDX])
    if (KO0XM001.XLCCD == KO0XW01.XLCCD2[KO0XWCDX])
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.XSMTYPCD cursor, bold;
      set KO0XM003.XLCCD2 skip, bold;
      KO0XSDE();
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XSDE();
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMXDT cursor, bold;
    set KO0XM003.SY2CEDT1 skip, bold;
  end
  ;
  ;
end // end KO0XSDO

// compare beg. dt with l.c. date
Function KO0XSDP()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW01.KO0XWXDT[KO0XWCDX] >= KO0XW01.SY2CEDT1[KO0XWCDX])
    if (KO0XM001.XLCCD == KO0XW01.XLCCD1[KO0XWCDX])
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.XSMTYPCD cursor, bold;
      set KO0XM003.XLCCD1 skip, bold;
      KO0XSDE();
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XSDE();
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMXDT cursor, bold;
    set KO0XM003.SY2CEDT1 skip, bold;
  end
  ;
  ;
end // end KO0XSDP

// check pf keys
Function KO0XSEB()
  ;
  ;
  ;
  if (converseVar.eventKey is pf13) /* do not add this record*/
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
    exit stack;
  else
    /* next sentence*/
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    KO0XM003.XXXMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf4)
      XSPF4();
      KO0XM003.XXXMSG = COMMAREA.CAMSG;
      return;
    else
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pa2)
        COMMAREA.CATOAP = "KO0A";
        XSEXIT();
        KO0XM003.XXXMSG = COMMAREA.CAMSG;
        return;
      else
        if (KO0XM003.CATOAP != " ")
          if (converseVar.eventKey is enter)
            COMMAREA.CATOAP = KO0XM003.CATOAP;
            COMMAREA.CAITEM = KO0XM003.CAITEM;
            XSEXIT();
            KO0XM003.XXXMSG = COMMAREA.CAMSG;
            exit stack;
          else
            set KO0XM003.CATOAP cursor, bold;
            converseLib.validationFailed(1);
            exit stack;
          end
        else
          if (converseVar.eventKey is pf12
           || converseVar.eventKey is enter)
            return;
          else
            converseLib.validationFailed(2);
          end
        end
      end
    end
  end
end // end KO0XSEB

// validate screen fields
Function KO0XSED()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0XSEG(); /* validate comm. ending date*/
  ;
  KO0XSEH(); /* validate beg. date*/
  ;
  KO0XSEI(); /* validate specility type/code*/
  ;
   /* KO0XSEQ               ; validate closeout date with life cy*/
  ;
  KO0XSEK(); /* check ending dates*/
  ;
  KO0XSEP(); /* move ko0xw05 to ko0xm003*/
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    exit stack;
  else
    return;
  end
  ;
  ;
end // end KO0XSED

// move ko0xw05 to ko0xw01
Function KO0XSEE()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0XW01.XGPCD = KO0XW05.XGPCD;
  KO0XW01.SY1STNBR = KO0XW05.SY1STNBR;
  KO0XW01.SY1STYNM = KO0XW05.SY1STYNM;
  KO0XW01.XLCCD = KO0XW05.KO0XMLC;
  KO0XW01.XLCABRV = KO0XW05.KO0XMXAB;
  KO0XW01.XQACD = KO0XW05.XQACD;
  KO0XW01.XQAABRV = KO0XW05.XQAABRV;
  KO0XW01.KO0XMLCD = KO0XW05.KO0XMLCD;
  ;
  ;
  KO0XW01.XSMTYPCD[KO0XWCDX] = KO0XW05.XSMTYPCD;
  KO0XW01.KOFCOMCD[KO0XWCDX] = KO0XW05.KOFCOMCD;
  KO0XW01.KO0XMEDT[KO0XWCDX] = KO0XW05.KO0XMEDT;
  KO0XW01.KO0XMXDT[KO0XWCDX] = KO0XW05.KO0XMXDT;
  KO0XW01.SY2CLRID[KO0XWCDX] = KO0XW05.SY2CLRID;
  KO0XW01.SY2CLRAB[KO0XWCDX] = KO0XW05.SY2CLRAB;
  KO0XW01.XDMCD[KO0XWCDX] = KO0XW05.XDMCD;
  KO0XW01.XPRABRV[KO0XWCDX] = KO0XW05.XPRABRV;
  KO0XW01.ZZZSDT[KO0XWCDX] = KO0XW05.ZZZSDT;
  KO0XW01.ZZZCHGDT[KO0XWCDX] = KO0XW05.ZZZCHGDT;
  KO0XW01.KO0XWEDT[KO0XWCDX] = KO0XW05.KO0XWEDT;
  KO0XW01.KO0XWXDT[KO0XWCDX] = KO0XW05.KO0XWXDT;
  ;
  ;
end // end KO0XSEE

// validate ko0xm003 ending dt
Function KO0XSEG()
  ;
  ;
  ;
  set TA2REC empty;
  KO0XW04.KO0XWHDT = " ";
  TA2REC.TA2DTOPT = "GREGGREG";
  KO0XW04.KO0XWHDT = KO0XM003.KO0XMXDT;
  ;
  if (KO0XW04.KO0XWHYY != " ")
    TA2REC.TA2GRTYP = "B";
    TA2REC.TA2GRGB = KO0XM003.KO0XMXDT;
  else
    if (KO0XW04.KO0XWSL1 != "-")
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2GRGA = KO0XM003.KO0XMXDT;
    else
      TA2REC.TA2GRTYP = "B";
      TA2REC.TA2GRGB = KO0XM003.KO0XMXDT;
    end
  end
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0XM003.KO0XMXDT = TA2REC.TA2GRGB;
    KO0XW05.KO0XMXDT = TA2REC.TA2GRGB;
    KO0XW05.KO0XWXDT = TA2REC.TA2GRGGN;
    /* date format of ccyymmdd*/
  else
    set KO0XM003.KO0XMXDT cursor, bold;
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(46); /* date must be valid and in mmddyy or mm-dd-yy format*/
  end
  ;
  ;
end // end KO0XSEG

// validate ko0xm003 beg. dt
Function KO0XSEH()
  ;
  ;
  ;
  ;
  set TA2REC empty;
  KO0XW04.KO0XWHDT = " ";
  TA2REC.TA2DTOPT = "GREGGREG";
  KO0XW04.KO0XWHDT = KO0XM003.KO0XMEDT;
  ;
  if (KO0XW04.KO0XWHYY != " ")
    TA2REC.TA2GRTYP = "B";
    TA2REC.TA2GRGB = KO0XM003.KO0XMEDT;
  else
    if (KO0XW04.KO0XWSL1 != "-")
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2GRGA = KO0XM003.KO0XMEDT;
    else
      TA2REC.TA2GRTYP = "B";
      TA2REC.TA2GRGB = KO0XM003.KO0XMEDT;
    end
  end
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0XM003.KO0XMEDT = TA2REC.TA2GRGB;
    KO0XW05.KO0XMEDT = TA2REC.TA2GRGB;
    KO0XW05.KO0XWEDT = TA2REC.TA2GRGGN;
    /* in date format of ccyymmdd*/
  else
    set KO0XM003.KO0XMEDT cursor, bold;
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(46); /* date must be valid and in mmddyy or mm-dd-yy format*/
  end
  ;
  ;
  if (KO0XW05.KO0XWEDT < KO0XW05.KO0XWXDT)
    /* next sentence*/
  else
    converseLib.validationFailed(94); /* beg date is not > ENDING DATE*/
    set KO0XM003.KO0XMXDT cursor, bold;
    KO0XW04.KO0XWEFL = "Y";
  end
  ;
  ;
end // end KO0XSEH

// validate specility code
Function KO0XSEI()
  ;
  ;
  ;
  if (KO0XM003.XSMTYPCD == "M"
   || KO0XM003.XSMTYPCD == "S"
   || KO0XM003.XSMTYPCD == "C")
    /* next sentence*/
  else
    KO0XW04.KO0XWEFL = "Y";
    KO0XW05.KOFCOMCD = KO0XM003.KOFCOMCD;
    KO0XW05.XSMTYPCD = KO0XM003.XSMTYPCD;
    set KO0XM003.XSMTYPCD cursor, bold;
    converseLib.validationFailed(113); /* invalid specility type, valid types are.*/
    return;
  end
  ;
  if (KO0XM003.KO0XMLC == "10")
    if (KO0XM003.XSMTYPCD == "M"
     || KO0XM003.XSMTYPCD == "S")
      /* next sentence*/
    else
      KO0XW04.KO0XWEFL = "Y";
      KO0XW05.KOFCOMCD = KO0XM003.KOFCOMCD;
      KO0XW01.XSMTYPCD = KO0XM003.XSMTYPCD;
      set KO0XM003.XSMTYPCD cursor, bold;
      converseLib.validationFailed(115); /* specility type and life cycle do not match*/
      return;
    end
  else
    if (KO0XM003.KO0XMLC == "20")
      if (KO0XM003.XSMTYPCD == "C")
        /* next sentence*/
      else
        KO0XW04.KO0XWEFL = "Y";
        KO0XW05.KOFCOMCD = KO0XM003.KOFCOMCD;
        KO0XW05.XSMTYPCD = KO0XM003.XSMTYPCD;
        set KO0XM003.XSMTYPCD cursor, bold;
        converseLib.validationFailed(115); /* specility type and life cycle do not match*/
        return;
      end
    end
  end
  ;
  ;
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set KOFREC empty;
  ;
  KOFREC.KOFCOMCD = KO0XM003.KOFCOMCD;
  KOFREC.XSMTYPCD = KO0XM003.XSMTYPCD;
  ;
  call "IO0710" ("S ", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOFREC.XXXSTAT == "A")
      KO0XW05.KOFCOMCD = KOFREC.KOFCOMCD;
      KO0XW05.XSMTYPCD = KOFREC.XSMTYPCD;
    else
      converseLib.validationFailed(111); /* inactive specility code*/
      KO0XW05.KOFCOMCD = KO0XM003.KOFCOMCD;
      KO0XW05.XSMTYPCD = KO0XM003.XSMTYPCD;
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.KOFCOMCD cursor, bold;
      set KO0XM003.XSMTYPCD cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(95); /* special comm. code and type are not found*/
      KO0XW05.KOFCOMCD = KO0XM003.KOFCOMCD;
      KO0XW05.XSMTYPCD = KO0XM003.XSMTYPCD;
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.KOFCOMCD cursor, bold;
      set KO0XM003.XSMTYPCD cursor, bold;
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      TA1REC.TA1LOCAT[1] = "KO0XSEI";
      TA1REC.TA1LOCAT[2] = "IO0710";
      XSKO001();
    end
  end
  ;
  ;
  ;
end // end KO0XSEI

// retrieve life cycle abrv.
Function KO0XSEJ()
  ;
  ;
  ;
  if (KO0XW02.XLCCD1 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM002.XLCABRV[1] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM002.XLCABRV[1] = " ";
    end
  else
    KO0XM002.XLCABRV[1] = " ";
  end
  ;
  ;
  if (KO0XW02.XLCCD2 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM002.XLCABRV[2] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM002.XLCABRV[2] = " ";
    end
  else
    KO0XM002.XLCABRV[2] = " ";
  end
  ;
  ;
  if (KO0XW02.XLCCD3 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM002.XLCABRV[3] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM002.XLCABRV[3] = " ";
    end
  else
    KO0XM002.XLCABRV[3] = " ";
  end
  ;
  ;
  if (KO0XW02.XLCCD4 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM002.XLCABRV[4] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM002.XLCABRV[4] = " ";
    end
  else
    KO0XM002.XLCABRV[4] = " ";
  end
  ;
end // end KO0XSEJ

// validate ending dates
Function KO0XSEK()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW05.KO0XWEDT < KO0XW05.SY2CEDT4)
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(96); /* beg date must be > l.c. eff. date*/
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT4 skip, bold;
  else
    if (KO0XW05.KO0XWEDT < KO0XW05.SY2CEDT3)
      KO0XSEL(); /* check that ending date is < sy2cedt3*/
    else
      if (KO0XW05.KO0XWEDT < KO0XW05.SY2CEDT2)
        KO0XSEM(); /* check that ending date < sy2cedt2*/
      else
        if (KO0XW05.KO0XWEDT < KO0XW05.SY2CEDT1)
          KO0XSEN(); /* check that ending date < sy2cedt1*/
        else
          if (KO0XW05.KO0XWEDT >= KO0XW05.SY2CEDT1)
            KO0XSEO(); /* check that ending date is > sy2cedt1*/
          else
            /* next sentence*/
          end
        end
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end KO0XSEK

// compare l.c. eff dt to beg dt
Function KO0XSEL()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW05.SY2CEDT4 > 0)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT4 skip, bold;
    return;
  end
  ;
  if (KO0XW05.KO0XWEDT >= KO0XW05.SY2CEDT4)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT4 skip, bold;
    return;
  end
  ;
  if (KO0XW05.KO0XWXDT < KO0XW05.SY2CEDT3)
    if (KO0XM003.KO0XMLC == KO0XW05.XLCCD4)
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.XSMTYPCD cursor, bold;
      set KO0XM003.XLCCD4 skip, bold;
    end
  else
    converseLib.validationFailed(97); /* the ending date must be <  next eff. date.*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMXDT cursor, bold;
    set KO0XM003.SY2CEDT3 skip, bold;
  end
  ;
  ;
end // end KO0XSEL

// compare l.c. dt to sy2cedt1
Function KO0XSEM()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  if (KO0XW05.SY2CEDT3 > 0)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT3 skip, bold;
    return;
  end
  ;
  if (KO0XW05.KO0XWEDT >= KO0XW05.SY2CEDT3)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT3 skip, bold;
    return;
  end
  ;
  if (KO0XW05.KO0XWXDT < KO0XW05.SY2CEDT2)
    if (KO0XM003.KO0XMLC == KO0XW05.XLCCD3)
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.XSMTYPCD cursor, bold;
      set KO0XM003.XLCCD3 skip, bold;
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMXDT cursor, bold;
    set KO0XM003.SY2CEDT2 skip, bold;
  end
  ;
  ;
  ;
end // end KO0XSEM

// compare l.c. dt to sy2cedt2
Function KO0XSEN()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  if (KO0XW05.SY2CEDT2 > 0)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT2 skip, bold;
    return;
  end
  ;
  ;
  if (KO0XW05.KO0XWEDT >= KO0XW05.SY2CEDT2)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT2 skip, bold;
    return;
  end
  ;
  if (KO0XW05.KO0XWXDT < KO0XW05.SY2CEDT1)
    if (KO0XM003.KO0XMLC == KO0XW05.XLCCD2)
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.XSMTYPCD cursor, bold;
      set KO0XM003.XLCCD2 skip, bold;
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMXDT cursor, bold;
    set KO0XM003.SY2CEDT1 skip, bold;
  end
  ;
  ;
end // end KO0XSEN

// compare l.c. dt to sy2cedt3
Function KO0XSEO()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW05.KO0XWXDT >= KO0XW05.SY2CEDT1)
    if (KO0XM003.KO0XMLC == KO0XW05.XLCCD1)
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM003.XSMTYPCD cursor, bold;
      set KO0XM003.XLCCD1 skip, bold;
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM003.KO0XMXDT cursor, bold;
    set KO0XM003.SY2CEDT1 skip, bold;
  end
  ;
  ;
end // end KO0XSEO

// move ko0xw05 to ko0xm003
Function KO0XSEP()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0XM003.XGPCD = KO0XW05.XGPCD;
  KO0XM003.SY1STNBR = KO0XW05.SY1STNBR;
  KO0XM003.SY1STYNM = KO0XW05.SY1STYNM;
  KO0XM003.KO0XMLC = KO0XW05.KO0XMLC;
  KO0XM003.KO0XMXAB = KO0XW05.KO0XMXAB;
  KO0XM003.XQACD = KO0XW05.XQACD;
  KO0XM003.XQAABRV = KO0XW05.XQAABRV;
  KO0XM003.KO0XMLCD = KO0XW05.KO0XMLCD;
  ;
  KO0XM003.XLCCD1 = KO0XW05.XLCCD1;
  KO0XM003.SY2CEDT1 = KO0XW05.SY2CEDT1;
  KO0XM003.XLCCD2 = KO0XW05.XLCCD2;
  KO0XM003.SY2CEDT2 = KO0XW05.SY2CEDT2;
  KO0XM003.XLCCD3 = KO0XW05.XLCCD3;
  KO0XM003.SY2CEDT3 = KO0XW05.SY2CEDT3;
  KO0XM003.XLCCD4 = KO0XW05.XLCCD4;
  KO0XM003.SY2CEDT4 = KO0XW05.SY2CEDT4;
  ;
  KO0XM003.XSMTYPCD = KO0XW05.XSMTYPCD;
  KO0XM003.KOFCOMCD = KO0XW05.KOFCOMCD;
  KO0XM003.KO0XMEDT = KO0XW05.KO0XMEDT;
  KO0XM003.KO0XMXDT = KO0XW05.KO0XMXDT;
  KO0XM003.SY2CLRID = KO0XW05.SY2CLRID;
  KO0XM003.SY2CLRAB = KO0XW05.SY2CLRAB;
  KO0XM003.XDMCD = KO0XW05.XDMCD;
  KO0XM003.XPRABRV = KO0XW05.XPRABRV;
  KO0XM003.ZZZSDT = KO0XW05.ZZZSDT;
  KO0XM003.ZZZCHGDT = KO0XW05.ZZZCHGDT;
  ;
  ;
  if (KO0XW05.XLCCD1 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM003.XLCABRV[1] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM003.XLCABRV[1] = " ";
    end
  else
    KO0XM003.XLCABRV[1] = " ";
  end
  ;
  ;
  if (KO0XW05.XLCCD2 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM003.XLCABRV[2] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM003.XLCABRV[2] = " ";
    end
  else
    KO0XM003.XLCABRV[2] = " ";
  end
  ;
  ;
  if (KO0XW05.XLCCD3 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM003.XLCABRV[3] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM003.XLCABRV[3] = " ";
    end
  else
    KO0XM003.XLCABRV[3] = " ";
  end
  ;
  ;
  if (KO0XW05.XLCCD4 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM003.XLCABRV[4] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM003.XLCABRV[4] = " ";
    end
  else
    KO0XM003.XLCABRV[4] = " ";
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end KO0XSEP

// ret. all selected prod. comm.
Function KO0XSFA()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0XW04.KO0XWCDX = 1;
  ;
  ;
  while (KO0XW04.KO0XWCDX <= KO0XW04.KO0XWTOT
   && KO0XW04.KO0XWFIN == "Y")
    KO0XSFB(); /* if ko0xmsel = 's' retreive selected records*/
  end
  ;
end // end KO0XSFA

// check for selected records
Function KO0XSFB()
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW01.KO0XMSEL[KO0XWCDX] == "S")
    set KO0XW02 empty;
    set KO0XW03 empty;
    KO0XSFC(); /* get koxrec*/
    KO0XW01.KO0XMSEL[KO0XWCDX] = "V";
    KO0XW04.KO0XWFIN = "N";
  else
    /* next sentence*/
    KO0XW04.KO0XWCDX = KO0XW04.KO0XWCDX + 1;
  end
  ;
  ;
end // end KO0XSFB

// set up ss to koxrec.
Function KO0XSFC()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set KOXREC empty;
  ;
  ;
  KOXREC.XGPCD = KO0XW01.XGPCD;
  KOXREC.SY1STNBR = KO0XW01.SY1STNBR;
  KOXREC.SY2CLRID = KO0XW01.SY2CLRID[KO0XWCDX];
  KOXREC.XDMCD = KO0XW01.XDMCD;
  KOXREC.XQACD = KO0XW01.XQACD;
  KOXREC.XLCCD = KO0XW01.XLCCD;
  ;
  ;
  call "IO0970" ("SS", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0XW04.KO0XWMDX = 2;
    while (SQLCA.VAGen_SQLCODE == 0)
      KO0XSFI(); /* move ko0xw01 data to ko0xw02*/
      KO0XSFD(); /* retreive all koxrec.*/
    end
    KO0XSFG(); /* close selected set.*/
    ;
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VSYRAT01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0XSFC";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0XSFC

// ret. all koxrec('sn')
Function KO0XSFD()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  ;
  call "IO0970" ("SN", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0XSFE(); /* move koxrec to ko0xw02*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VSYRAT01";
      TA1REC.TA1TBLKE = KOXREC.KOXKEY;
      TA1REC.TA1LOCAT[1] = "KO0XSFD";
      TA1REC.TA1LOCAT[2] = "IO0970";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0XSFD

// move koxrec to ko0xw02
Function KO0XSFE()
  ;
  ;
       /* ***************************************/
       /* * move koxrec to ko0xw02 record.     **/
       /* *                                    **/
       /* ***************************************/
  ;
  KO0XW02.SY2CLRID[KO0XWMDX] = KO0XW01.SY2CLRID[KO0XWCDX];
  KO0XW02.SY2CLRAB[KO0XWMDX] = KO0XW01.SY2CLRAB[KO0XWCDX];
  KO0XW02.XPRABRV[KO0XWMDX] = KO0XW01.XPRABRV[KO0XWCDX];
  KO0XW02.XDMCD[KO0XWMDX] = KO0XW01.XDMCD[KO0XWCDX];
  ;
  ;
  KO0XW02.KOFCOMCD[KO0XWMDX] = KOXREC.KOFCOMCD;
  KO0XW02.XSMTYPCD[KO0XWMDX] = KOXREC.XSMTYPCD;
  ;
  KO0XW02.KO0XWEDT[KO0XWMDX] = KOXREC.KOXSCMED; /* ccyymmdd format*/
  KO0XW04.KO0XWTDT = KOXREC.KOXSCMED;
  KO0XSBK(); /* convert date*/
  KO0XW02.KO0XMEDT[KO0XWMDX] = KO0XW04.KO0XWDDT; /* mm-dd-yy format*/
  ;
  KO0XW02.KO0XWXDT[KO0XWMDX] = KOXREC.KOXSCMXD; /* ccyymmdd format*/
  KO0XW04.KO0XWTDT = KOXREC.KOXSCMXD;
  KO0XSBK(); /* convert date*/
  KO0XW02.KO0XMXDT[KO0XWMDX] = KO0XW04.KO0XWDDT; /* mm-dd-yy format*/
  ;
  KO0XW02.XLCCD[KO0XWMDX] = KOXREC.XLCCD;
  KO0XW02.ZZZSDT[KO0XWMDX] = KOXREC.ZZZSDT;
  KO0XW02.ZZZCHGDT[KO0XWMDX] = KOXREC.ZZZCHGDT;
  KO0XW02.ZZZCHGCT[KO0XWMDX] = KOXREC.ZZZCHGCT;
  KO0XW02.XXXUSRID[KO0XWMDX] = KOXREC.XXXUSRID;
  ;
  KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
  ;
  if (KO0XW04.KO0XWMDX > 10)
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(100);
    exit stack;
  else
    /* next sentence*/
  end
  ;
  ;
  ;
  ;
end // end KO0XSFE

// move ko0xw02 to ko0xm002
Function KO0XSFF()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0XM002.XGPCD = KO0XW02.XGPCD;
  KO0XM002.XGPABRV = KO0XW02.XGPABRV;
  KO0XM002.SY1STNBR = KO0XW02.SY1STNBR;
  KO0XM002.SY1STYNM = KO0XW02.SY1STYNM;
  KO0XM002.KO0XMLC = KO0XW02.KO0XMLC;
  KO0XM002.KO0XMXAB = KO0XW02.KO0XMXAB;
  KO0XM002.XQACD = KO0XW02.XQACD;
  KO0XM002.XQAABRV = KO0XW02.XQAABRV;
  KO0XM002.KO0XMLCD = KO0XW02.KO0XMLCD;
  ;
  KO0XM002.XLCCD1 = KO0XW02.XLCCD1;
  KO0XM002.SY2CEDT1 = KO0XW02.SY2CEDT1;
  KO0XM002.XLCCD2 = KO0XW02.XLCCD2;
  KO0XM002.SY2CEDT2 = KO0XW02.SY2CEDT2;
  KO0XM002.XLCCD3 = KO0XW02.XLCCD3;
  KO0XM002.SY2CEDT3 = KO0XW02.SY2CEDT3;
  KO0XM002.XLCCD4 = KO0XW02.XLCCD4;
  KO0XM002.SY2CEDT4 = KO0XW02.SY2CEDT4;
  KO0XSFJ(); /* retrieve life cycle abrv.*/
  ;
  ;
  KO0XSFH();
                                   /* move detail lines ko0xw02 to ko0xm002*/
  ;
  KO0XW03.KO0XWG03 = KO0XW02.KO0XWG02;
  ;
  ;
end // end KO0XSFF

// close 'cn' koxrec
Function KO0XSFG()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  ;
  call "IO0970" ("CS", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentenece*/
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VSYRAT01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0XSFG";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
  ;
end // end KO0XSFG

// move detail ko0xw02 to ko0m002
Function KO0XSFH()
  ;
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  KO0XW04.KO0XWMDX = 2;
  ;
  while (KO0XW04.KO0XWMDX <= 10)
    ;
    if (KO0XW02.XSMTYPCD[KO0XWMDX] > " ")
      KO0XM002.XSMTYPCD[KO0XWMDX] = KO0XW02.XSMTYPCD[KO0XWMDX];
      KO0XM002.KOFCOMCD[KO0XWMDX] = KO0XW02.KOFCOMCD[KO0XWMDX];
      KO0XM002.KO0XMEDT[KO0XWMDX] = KO0XW02.KO0XMEDT[KO0XWMDX];
      KO0XM002.KO0XMXDT[KO0XWMDX] = KO0XW02.KO0XMXDT[KO0XWMDX];
      KO0XM002.SY2CLRID[KO0XWMDX] = KO0XW02.SY2CLRID[KO0XWMDX];
      KO0XM002.SY2CLRAB[KO0XWMDX] = KO0XW02.SY2CLRAB[KO0XWMDX];
      KO0XM002.XDMCD[KO0XWMDX] = KO0XW02.XDMCD[KO0XWMDX];
      KO0XM002.XLCCD[KO0XWMDX] = KO0XW02.XLCCD[KO0XWMDX];
      KO0XM002.XPRABRV[KO0XWMDX] = KO0XW02.XPRABRV[KO0XWMDX];
      KO0XM002.ZZZSDT[KO0XWMDX] = KO0XW02.ZZZSDT[KO0XWMDX];
      KO0XM002.ZZZCHGDT[KO0XWMDX] = KO0XW02.ZZZCHGDT[KO0XWMDX];
      set KO0XM002.SY2CLRID[KO0XWMDX] skip;
      set KO0XM002.SY2CLRAB[KO0XWMDX] skip;
      set KO0XM002.XDMCD[KO0XWMDX] skip;
      set KO0XM002.XLCCD[KO0XWMDX] skip;
      set KO0XM002.XPRABRV[KO0XWMDX] skip;
      set KO0XM002.ZZZSDT[KO0XWMDX] skip;
      set KO0XM002.ZZZCHGDT[KO0XWMDX] skip;
    else
      KO0XM002.XSMTYPCD[KO0XWMDX] = " ";
      KO0XM002.KOFCOMCD[KO0XWMDX] = " ";
      KO0XM002.KO0XMEDT[KO0XWMDX] = " ";
      KO0XM002.KO0XMXDT[KO0XWMDX] = " ";
      KO0XM002.SY2CLRID[KO0XWMDX] = " ";
      KO0XM002.SY2CLRAB[KO0XWMDX] = " ";
      KO0XM002.XDMCD[KO0XWMDX] = " ";
      KO0XM002.XLCCD[KO0XWMDX] = " ";
      KO0XM002.XPRABRV[KO0XWMDX] = " ";
      KO0XM002.ZZZSDT[KO0XWMDX] = 0;
      KO0XM002.ZZZCHGDT[KO0XWMDX] = 0;
      set KO0XM002.XSMTYPCD[KO0XWMDX] skip, invisible;
      set KO0XM002.KOFCOMCD[KO0XWMDX] skip, invisible;
      set KO0XM002.KO0XMEDT[KO0XWMDX] skip, invisible;
      set KO0XM002.KO0XMXDT[KO0XWMDX] skip, invisible;
      set KO0XM002.SY2CLRID[KO0XWMDX] skip, invisible;
      set KO0XM002.SY2CLRAB[KO0XWMDX] skip, invisible;
      set KO0XM002.XDMCD[KO0XWMDX] skip, invisible;
      set KO0XM002.XLCCD[KO0XWMDX] skip, invisible;
      set KO0XM002.XPRABRV[KO0XWMDX] skip, invisible;
      set KO0XM002.ZZZSDT[KO0XWMDX] skip, invisible;
      set KO0XM002.ZZZCHGDT[KO0XWMDX] skip, invisible;
    end
    ;
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    ;
  end
  ;
  ;
end // end KO0XSFH

// move header ko0xw01 to ko0xw02
Function KO0XSFI()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0XW02.XGPCD = KO0XW01.XGPCD;
  KO0XW02.XGPABRV = KO0XW01.XGPABRV;
  KO0XW02.SY1STNBR = KO0XW01.SY1STNBR;
  KO0XW02.SY1STYNM = KO0XW01.SY1STYNM;
  KO0XW02.KO0XMLC = KO0XW01.XLCCD;
  KO0XW02.KO0XMXAB = KO0XW01.XLCABRV;
  KO0XW02.XQACD = KO0XW01.XQACD;
  KO0XW02.XQAABRV = KO0XW01.XQAABRV;
  KO0XW02.KO0XMLCD = KO0XW01.KO0XMLCD;
  ;
  KO0XW02.XLCCD1 = KO0XW01.XLCCD1[KO0XWCDX];
  KO0XW02.SY2CEDT1 = KO0XW01.SY2CEDT1[KO0XWCDX];
  KO0XW02.XLCCD2 = KO0XW01.XLCCD2[KO0XWCDX];
  KO0XW02.SY2CEDT2 = KO0XW01.SY2CEDT2[KO0XWCDX];
  KO0XW02.XLCCD3 = KO0XW01.XLCCD3[KO0XWCDX];
  KO0XW02.SY2CEDT3 = KO0XW01.SY2CEDT3[KO0XWCDX];
  KO0XW02.XLCCD4 = KO0XW01.XLCCD4[KO0XWCDX];
  KO0XW02.SY2CEDT4 = KO0XW01.SY2CEDT4[KO0XWCDX];
  ;
  ;
  ;
end // end KO0XSFI

// retrieve life cycle abrv.
Function KO0XSFJ()
  ;
  ;
  ;
  ;
  if (KO0XW02.XLCCD1 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM002.XLCABRV[1] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM002.XLCABRV[1] = " ";
    end
  else
    KO0XM002.XLCABRV[1] = " ";
  end
  ;
  ;
  if (KO0XW02.XLCCD2 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM002.XLCABRV[2] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM002.XLCABRV[2] = " ";
    end
  else
    KO0XM002.XLCABRV[2] = " ";
  end
  ;
  ;
  if (KO0XW02.XLCCD3 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM002.XLCABRV[3] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM002.XLCABRV[3] = " ";
    end
  else
    KO0XM002.XLCABRV[3] = " ";
  end
  ;
  ;
  if (KO0XW02.XLCCD4 in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KO0XM002.XLCABRV[4] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KO0XM002.XLCABRV[4] = " ";
    end
  else
    KO0XM002.XLCABRV[4] = " ";
  end
  ;
  ;
  ;
end // end KO0XSFJ

// validate xrccd
Function KO0XSG1()
  ;
  ;
   /* XRCCD IS BEING DELETED BY DB2 TBLCHG OF 3/94. RPATTE *****/
   /* IF KO0XM002.XRCCD(KO0XWMDX) EQ ' ';*/
   /* MOVE 38 TO EZEMNO;*/
   /* MOVE 'Y' TO KO0XW04.KO0XWEFL;*/
   /* SET KO0XM002.XRCCD(KO0XWMDX) CURSOR,BRIGHT;*/
   /* MOVE KO0XM002.XRCCD(KO0XWMDX) TO KO0XW03.XRCCD(KO0XWMDX);*/
   /* EZERTN;*/
   /* ELSE;*/
   /* IF KO0XM002.XRCCD(KO0XWMDX) NE KO0XW03.XRCCD(KO0XWMDX);*/
   /* IF KO0XM002.XRCCD(KO0XWMDX) NE 'NR';*/
   /* IF KO0XM002.XRCCD(KO0XWMDX) IN XRCTBL.XRCCD;*/
   /* MOVE KO0XM002.XRCCD(KO0XWMDX) TO KO0XW03.XRCCD(KO0XWMD*/
   /* ELSE;*/
   /* MOVE 20 TO EZEMNO;*/
   /* MOVE 'Y' TO KO0XW04.KO0XWEFL;*/
   /* SET KO0XM002.XRCCD(KO0XWMDX) CURSOR,BRIGHT;*/
   /* MOVE KO0XM002.XRCCD(KO0XWMDX) TO KO0XW03.XRCCD(KO0XWMDX);*/
   /* EZERTN;*/
   /* END;*/
   /* ELSE;*/
   /* MOVE 79 TO EZEMNO;*/
   /* MOVE 'Y' TO KO0XW04.KO0XWEFL;*/
   /* SET KO0XM002.XRCCD(KO0XWMDX) CURSOR,BRIGHT;*/
   /* MOVE KO0XM002.XRCCD(KO0XWMDX) TO KO0XW03.XRCCD(KO0XWMDX);*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/
   /* END;*/
   /*  */
  ;
   /* IF KO0XW04.KO0XWMDX EQ 1;*/
   /* IF KO0XM002.XRCCD(1) EQ 'CH';*/
   /* MOVE KO0XM002.XRCCD(KO0XWMDX) TO KO0XW03.XRCCD(KO0XWMDX);*/
   /* EZERTN;*/
   /* ELSE;*/
   /* MOVE 79 TO EZEMNO;*/
   /* MOVE 'Y' TO KO0XW04.KO0XWEFL;*/
   /* SET KO0XM002.XRCCD(KO0XWMDX) CURSOR,BRIGHT;*/
   /* MOVE KO0XM002.XRCCD(KO0XWMDX) TO KO0XW03.XRCCD(KO0XWMDX);*/
   /* EZERTN;*/
   /* END;*/
   /* ELSE;*/
   /* IF KO0XM002.XRCCD(KO0XWMDX) EQ 'EA'*/
   /* OR KO0XM002.XRCCD(KO0XWMDX) EQ 'EB';*/
   /* MOVE KO0XM002.XRCCD(KO0XWMDX) TO KO0XW03.XRCCD(KO0XWMDX);*/
   /* *   EZERTN;*/
   /* * ELSE;*/
   /* MOVE 79 TO EZEMNO;*/
   /* MOVE 'Y' TO KO0XW04.KO0XWEFL;*/
   /* SET KO0XM002.XRCCD(KO0XWMDX) CURSOR,BRIGHT;*/
   /* MOVE KO0XM002.XRCCD(KO0XWMDX) TO KO0XW03.XRCCD(KO0XWMDX);*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/
  ;
  ;
  ;
  ;
end // end KO0XSG1

// validate comm. ending date
Function KO0XSG2()
  ;
  ;
  ;
  ;
  set TA2REC empty;
  KO0XW04.KO0XWHDT = " ";
  TA2REC.TA2DTOPT = "GREGGREG";
  KO0XW04.KO0XWHDT = KO0XM002.KO0XMXDT[KO0XWMDX];
  ;
  if (KO0XW04.KO0XWHYY != " ")
    TA2REC.TA2GRTYP = "B";
    TA2REC.TA2GRGB = KO0XM002.KO0XMXDT[KO0XWMDX];
  else
    if (KO0XW04.KO0XWSL1 != "-")
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2GRGA = KO0XM002.KO0XMXDT[KO0XWMDX];
    else
      TA2REC.TA2GRTYP = "B";
      TA2REC.TA2GRGB = KO0XM002.KO0XMXDT[KO0XWMDX];
    end
  end
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0XM002.KO0XMXDT[KO0XWMDX] = TA2REC.TA2GRGB;
    KO0XW03.KO0XMXDT[KO0XWMDX] = TA2REC.TA2GRGB;
    KO0XW03.KO0XWXDT[KO0XWMDX] = TA2REC.TA2GRGGN;
    /* date format of ccyymmdd*/
  else
    set KO0XM002.KO0XMXDT[KO0XWMDX] cursor, bold;
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(46); /* date must be valid and in mmddyy or mm-dd-yy format*/
  end
  ;
  ;
end // end KO0XSG2

// validate beg. date
Function KO0XSG3()
  ;
  ;
  ;
  ;
  set TA2REC empty;
  KO0XW04.KO0XWHDT = " ";
  TA2REC.TA2DTOPT = "GREGGREG";
  KO0XW04.KO0XWHDT = KO0XM002.KO0XMEDT[KO0XWMDX];
  ;
  if (KO0XW04.KO0XWHYY != " ")
    TA2REC.TA2GRTYP = "B";
    TA2REC.TA2GRGB = KO0XM002.KO0XMEDT[KO0XWMDX];
  else
    if (KO0XW04.KO0XWSL1 != "-")
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2GRGA = KO0XM002.KO0XMEDT[KO0XWMDX];
    else
      TA2REC.TA2GRTYP = "B";
      TA2REC.TA2GRGB = KO0XM002.KO0XMEDT[KO0XWMDX];
    end
  end
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0XM002.KO0XMEDT[KO0XWMDX] = TA2REC.TA2GRGB;
    KO0XW03.KO0XMEDT[KO0XWMDX] = TA2REC.TA2GRGB;
    KO0XW03.KO0XWEDT[KO0XWMDX] = TA2REC.TA2GRGGN;
    /* in date format of ccyymmdd*/
  else
    set KO0XM002.KO0XMEDT[KO0XWMDX] cursor, bold;
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(46); /* date must be valid and in mmddyy or mm-dd-yy format*/
  end
  ;
  ;
  if (KO0XW03.KO0XWEDT[KO0XWMDX] < KO0XW03.KO0XWXDT[KO0XWMDX])
    /* next sentence*/
  else
    converseLib.validationFailed(94); /* beg date is not > ENDING DATE*/
    set KO0XM002.KO0XMXDT[KO0XWMDX] cursor, bold;
    KO0XW04.KO0XWEFL = "Y";
  end
  ;
  ;
end // end KO0XSG3

// val. specility code and type
Function KO0XSG4()
  ;
  ;
  if (KO0XM002.XSMTYPCD[KO0XWMDX] == "M"
   || KO0XM002.XSMTYPCD[KO0XWMDX] == "S"
   || KO0XM002.XSMTYPCD[KO0XWMDX] == "C")
    /* next sentence*/
  else
    KO0XW04.KO0XWEFL = "Y";
    KO0XW03.KOFCOMCD[KO0XWMDX] = KO0XM002.KOFCOMCD[KO0XWMDX];
    KO0XW03.XSMTYPCD[KO0XWMDX] = KO0XM002.XSMTYPCD[KO0XWMDX];
    set KO0XM002.XSMTYPCD[KO0XWMDX] cursor, bold;
    converseLib.validationFailed(113); /* invalid specility type, valid types are.*/
    return;
  end
  ;
  if (KO0XM002.KO0XMLC == "10")
    if (KO0XM002.XSMTYPCD[KO0XWMDX] == "M"
     || KO0XM002.XSMTYPCD[KO0XWMDX] == "S")
      /* next sentence*/
    else
      KO0XW04.KO0XWEFL = "Y";
      KO0XW03.KOFCOMCD[KO0XWMDX] = KO0XM002.KOFCOMCD[KO0XWMDX];
      KO0XW03.XSMTYPCD[KO0XWMDX] = KO0XM002.XSMTYPCD[KO0XWMDX];
      set KO0XM002.XSMTYPCD[KO0XWMDX] cursor, bold;
      converseLib.validationFailed(115); /* specility type and life cycle do not match*/
      return;
    end
  else
    if (KO0XM002.KO0XMLC == "20")
      if (KO0XM002.XSMTYPCD[KO0XWMDX] == "C")
        /* next sentence*/
      else
        KO0XW04.KO0XWEFL = "Y";
        KO0XW03.KOFCOMCD[KO0XWMDX] = KO0XM002.KOFCOMCD[KO0XWMDX];
        KO0XW03.XSMTYPCD[KO0XWMDX] = KO0XM002.XSMTYPCD[KO0XWMDX];
        set KO0XM002.XSMTYPCD[KO0XWMDX] cursor, bold;
        converseLib.validationFailed(115); /* specility type and life cycle do not match*/
        return;
      end
    end
  end
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set KOFREC empty;
  ;
  KOFREC.KOFCOMCD = KO0XM002.KOFCOMCD[KO0XWMDX];
  KOFREC.XSMTYPCD = KO0XM002.XSMTYPCD[KO0XWMDX];
  ;
  call "IO0710" ("S ", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOFREC.XXXSTAT == "A")
      KO0XW03.KOFCOMCD[KO0XWMDX] = KOFREC.KOFCOMCD;
      KO0XW03.XSMTYPCD[KO0XWMDX] = KOFREC.XSMTYPCD;
    else
      KO0XW04.KO0XWEFL = "Y";
      converseLib.validationFailed(111); /* inactive  specility type/code*/
      KO0XW03.KOFCOMCD[KO0XWMDX] = KO0XM002.KOFCOMCD[KO0XWMDX];
      KO0XW03.XSMTYPCD[KO0XWMDX] = KO0XM002.XSMTYPCD[KO0XWMDX];
      set KO0XM002.KOFCOMCD[KO0XWMDX] cursor, bold;
      set KO0XM002.XSMTYPCD[KO0XWMDX] cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0XW03.KOFCOMCD[KO0XWMDX] = KO0XM002.KOFCOMCD[KO0XWMDX];
      KO0XW03.XSMTYPCD[KO0XWMDX] = KO0XM002.XSMTYPCD[KO0XWMDX];
      converseLib.validationFailed(95); /* special comm. code and type are not found*/
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM002.KOFCOMCD[KO0XWMDX] cursor, bold;
      set KO0XM002.XSMTYPCD[KO0XWMDX] cursor, bold;
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      TA1REC.TA1LOCAT[1] = "KO0XSG4";
      TA1REC.TA1LOCAT[2] = "IO0710";
      XSKO001();
    end
  end
end // end KO0XSG4

// check pf keys
Function KO0XSGB()
  ;
  ;
  if (converseVar.eventKey is pf16)
    set SQLCA empty;
    set ERRSQLCA empty;
    set KOAREC empty;
    set KOXREC empty;
    set KO0XW01 empty;
    set KO0XW02 empty;
    set KO0XW03 empty;
    set KO0XW04 empty;
    set KO0XW05 empty;
    set SY1REC empty;
    set SY2REC empty;
    set KO0XM001 initial;
    ;
    KO0XW04.XGPCD = KO0XM002.XGPCD;
    KO0XW04.SY1STNBR = KO0XM002.SY1STNBR;
    KO0XW04.XLCCD = KO0XM002.KO0XMLC;
    KO0XW04.XQACD = KO0XM002.XQACD;
    KO0XW04.KO0XMLCD = KO0XM002.KO0XMLCD;
    set KO0XM002 initial;
    KO0XM001.XGPCD = KO0XW04.XGPCD;
    KO0XM001.SY1STNBR = KO0XW04.SY1STNBR;
    KO0XM001.XLCCD = KO0XW04.XLCCD;
    KO0XM001.XQACD = KO0XW04.XQACD;
    KO0XM001.KO0XMLCD = KO0XW04.KO0XMLCD;
    KO0XW04.KO0XWEFL = "N";
    exit stack;
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    KO0XM002.XXXMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf4)
      XSPF4();
      KO0XM002.XXXMSG = COMMAREA.CAMSG;
      return;
    else
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pa2)
        COMMAREA.CATOAP = "KO0A";
        XSEXIT();
        KO0XM002.XXXMSG = COMMAREA.CAMSG;
        return;
      else
        if (KO0XM002.CATOAP != " ")
          if (converseVar.eventKey is enter)
            COMMAREA.CATOAP = KO0XM002.CATOAP;
            COMMAREA.CAITEM = KO0XM002.CAITEM;
            XSEXIT();
            KO0XM002.XXXMSG = COMMAREA.CAMSG;
            exit stack;
          else
            set KO0XM002.CATOAP cursor, bold;
            converseLib.validationFailed(1);
            exit stack;
          end
        else
          if (converseVar.eventKey is pf12
           || converseVar.eventKey is enter)
            return;
          else
            converseLib.validationFailed(2);
          end
        end
      end
    end
  end
end // end KO0XSGB

// set ko0xm002 fields normal
Function KO0XSGC()
  ;
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  ;
  set KO0XM002.XGPCD normal;
  set KO0XM002.SY1STNBR normal;
  set KO0XM002.SY1STYNM initialAttributes;
  set KO0XM002.KO0XMLC normal;
  set KO0XM002.KO0XMXAB normal;
  set KO0XM002.XQACD normal;
  set KO0XM002.XQAABRV normal;
  set KO0XM002.KO0XMLCD normal;
  ;
  set KO0XM002.XLCCD1 initialAttributes;
  set KO0XM002.XLCCD1 initialAttributes;
  set KO0XM002.SY2CEDT1 initialAttributes;
  set KO0XM002.XLCCD2 initialAttributes;
  set KO0XM002.SY2CEDT2 initialAttributes;
  set KO0XM002.XLCCD3 initialAttributes;
  set KO0XM002.SY2CEDT3 initialAttributes;
  set KO0XM002.XLCCD4 initialAttributes;
  set KO0XM002.SY2CEDT4 initialAttributes;
  ;
  ;
  KO0XM002.XXXMSG = " ";
  KO0XW04.KO0XWKFL = "N";
  KO0XW04.KO0XWEFL = "N";
  KO0XW04.KO0XWMDX = 1;
  ;
  while (KO0XW04.KO0XWMDX < 11)
    set KO0XM002.KOFCOMCD[KO0XWMDX] normal;
    set KO0XM002.XSMTYPCD[KO0XWMDX] normal;
    set KO0XM002.KO0XMEDT[KO0XWMDX] normal;
    set KO0XM002.KO0XMXDT[KO0XWMDX] normal;
    set KO0XM002.SY2CLRID[KO0XWMDX] initialAttributes;
    set KO0XM002.SY2CLRAB[KO0XWMDX] initialAttributes;
    set KO0XM002.XDMCD[KO0XWMDX] initialAttributes;
    set KO0XM002.XPRABRV[KO0XWMDX] initialAttributes;
    set KO0XM002.ZZZSDT[KO0XWMDX] initialAttributes;
    set KO0XM002.ZZZCHGDT[KO0XWMDX] initialAttributes;
    ;
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    ;
  end
  ;
  ;
  ;
  ;
end // end KO0XSGC

// validate ko0xm002 screen data
Function KO0XSGD()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0XW04.KO0XWMDX = 1;
  ;
  while (KO0XW04.KO0XWMDX <= 10)
    ;
    if (KO0XM002.KOFCOMCD[KO0XWMDX] == KO0XW02.KOFCOMCD[KO0XWMDX]
     && KO0XM002.XSMTYPCD[KO0XWMDX] == KO0XW02.XSMTYPCD[KO0XWMDX]
     && KO0XM002.KO0XMEDT[KO0XWMDX] == KO0XW02.KO0XMEDT[KO0XWMDX]
     && KO0XM002.KO0XMXDT[KO0XWMDX] == KO0XW02.KO0XMXDT[KO0XWMDX])
      KO0XW03.KOFCOMCD[KO0XWMDX] = KO0XM002.KOFCOMCD[KO0XWMDX];
      KO0XW03.XSMTYPCD[KO0XWMDX] = KO0XM002.XSMTYPCD[KO0XWMDX];
      KO0XW03.KO0XMEDT[KO0XWMDX] = KO0XM002.KO0XMEDT[KO0XWMDX];
      KO0XW03.KO0XMXDT[KO0XWMDX] = KO0XM002.KO0XMXDT[KO0XWMDX];
    else
      ;
      if (KO0XW04.KO0XWMDX == 1
       && KO0XM002.KOFCOMCD[KO0XWMDX] != " "
       && KO0XM002.XSMTYPCD[KO0XWMDX] != " "
       && KO0XM002.KO0XMEDT[KO0XWMDX] != " "
       && KO0XM002.KO0XMXDT[KO0XWMDX] != " ")
        KO0XW04.KO0XWFFL = "A"; /* this will be an add function.*/
        KO0XW03.KO0XWSFL[KO0XWMDX] = "A"; /* status of add.*/
        ;
        KO0XSG1(); /* validate xrccd*/
        ;
        KO0XSG2(); /* validate comm. ending date*/
        ;
        KO0XSG3(); /* validate beg. date*/
        ;
        KO0XSG4(); /* validate specility code and type*/
        ;
             /* KO0XSGS; validate closeout code with l.c. eff. dates*/
        ;
        KO0XSGM(); /* validate against life cycle code and dates*/
        ;
      else
        ;
        KO0XSG1(); /* validate xrccd*/
        ;
        KO0XSG2(); /* validate comm. ending date*/
        ;
        KO0XSG3(); /* validate beg. date*/
        ;
        KO0XSG4(); /* validate specility code and type*/
        ;
             /* KO0XSGS  ; validate closeout code with l.c. eff. dates*/
        ;
        ;
        KO0XSGM(); /* validate against life cycle code and dates*/
        ;
        KO0XW03.KO0XWSFL[KO0XWMDX] = "C"; /* status of change*/
        ;
      end
    end
    ;
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    ;
  end
  ;
  KO0XSGJ(); /* move ko0xm002 to ko0xw03*/
  ;
end // end KO0XSGD

// check for changes & check date
Function KO0XSGE()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    return;
  else
    /* next sentence*/
  end
  ;
  ;
  KO0XW04.KO0XWEFL = "N";
  ;
  KO0XW04.KO0XW3DX = 1;
  ;
  while (KO0XW04.KO0XW3DX <= 10
   && KO0XW04.KO0XWEFL == "N")
    if (KO0XW03.KO0XWSFL[KO0XW3DX] == "C"
     || KO0XW03.KO0XWSFL[KO0XW3DX] == "A")
      KO0XSGF(); /* check if dates over lap*/
    else
      /* next sentence*/
    end
    KO0XW04.KO0XW3DX = KO0XW04.KO0XW3DX + 1;
  end
  ;
  ;
  ;
  ;
end // end KO0XSGE

// check if dates are unique
Function KO0XSGF()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  KO0XW04.KO0XWMDX = 2;
  ;
  while (KO0XW04.KO0XWMDX <= 10
   && KO0XW04.KO0XWEFL == "N")
    ;
    if (KO0XW04.KO0XWMDX == KO0XW04.KO0XW3DX)
      /* next sentence*/
    else
      KO0XSGG(); /* compare beg &ending dates*/
    end
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    ;
  end
  ;
  ;
  ;
end // end KO0XSGF

// compare beg. & end. dates
Function KO0XSGG()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  ;
  if (KO0XW03.KO0XWEDT[KO0XW3DX] < KO0XW03.KO0XWEDT[KO0XWMDX]
   && KO0XW03.KO0XWXDT[KO0XW3DX] < KO0XW03.KO0XWEDT[KO0XWMDX])
    /* next sentence*/
  else
    if (KO0XW03.KO0XWEDT[KO0XW3DX] > KO0XW03.KO0XWXDT[KO0XWMDX]
     && KO0XW03.KO0XWXDT[KO0XW3DX] > KO0XW03.KO0XWXDT[KO0XWMDX])
      /* next sentence*/
    else
      KO0XW04.KO0XWDN1 = " INVALID DATE RANGE IN ERROR ";
      KO0XW04.KO0XWDN2 = "BEG.  ";
      KO0XW04.KO0XWDS1 = "  ";
      KO0XW04.KO0XWDN3 = "END.  ";
      KO0XW04.KO0XMEDT = KO0XW03.KO0XMEDT[KO0XWMDX];
      KO0XW04.KO0XMXDT = KO0XW03.KO0XMXDT[KO0XWMDX];
      KO0XM002.XXXMSG = KO0XW04.KO0XWDER;
      set KO0XM002.KO0XMEDT[KO0XW3DX] cursor, bold;
      set KO0XM002.KO0XMXDT[KO0XW3DX] bold;
      KO0XW04.KO0XWEFL = "Y";
      return;
    end
  end
  ;
  ;
  ;
end // end KO0XSGG

// move ko0xw03 to ko0xm002
Function KO0XSGJ()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0XM002.XGPCD = KO0XW03.XGPCD;
  KO0XM002.SY1STNBR = KO0XW03.SY1STNBR;
  KO0XM002.SY1STYNM = KO0XW03.SY1STYNM;
  KO0XM002.KO0XMLC = KO0XW03.KO0XMLC;
  KO0XM002.KO0XMXAB = KO0XW03.KO0XMXAB;
  KO0XM002.XQACD = KO0XW03.XQACD;
  KO0XM002.XQAABRV = KO0XW03.XQAABRV;
  KO0XM002.KO0XMLCD = KO0XW03.KO0XMLCD;
  ;
  KO0XM002.XLCCD1 = KO0XW03.XLCCD1;
  KO0XM002.SY2CEDT1 = KO0XW03.SY2CEDT1;
  KO0XM002.XLCCD2 = KO0XW03.XLCCD2;
  KO0XM002.SY2CEDT2 = KO0XW03.SY2CEDT2;
  KO0XM002.XLCCD3 = KO0XW03.XLCCD3;
  KO0XM002.SY2CEDT3 = KO0XW03.SY2CEDT3;
  KO0XM002.XLCCD4 = KO0XW03.XLCCD4;
  KO0XM002.SY2CEDT4 = KO0XW03.SY2CEDT4;
  KO0XSEJ(); /* retrieve life cycle abrv.*/
  ;
  ;
  KO0XSGK();
                                   /* move detail lines ko0xw03 to ko0xm002*/
  ;
  ;
  ;
end // end KO0XSGJ

// move det. ko0xw03 to ko0xm002
Function KO0XSGK()
  ;
  ;
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  KO0XW04.KO0XWMDX = 1;
  ;
  while (KO0XW04.KO0XWMDX <= 10)
    ;
    if (KO0XW03.XSMTYPCD[KO0XWMDX] > " "
     || KO0XW04.KO0XWMDX == 1)
      KO0XM002.XSMTYPCD[KO0XWMDX] = KO0XW03.XSMTYPCD[KO0XWMDX];
      KO0XM002.KOFCOMCD[KO0XWMDX] = KO0XW03.KOFCOMCD[KO0XWMDX];
      KO0XM002.KO0XMEDT[KO0XWMDX] = KO0XW03.KO0XMEDT[KO0XWMDX];
      KO0XM002.KO0XMXDT[KO0XWMDX] = KO0XW03.KO0XMXDT[KO0XWMDX];
      KO0XM002.SY2CLRID[KO0XWMDX] = KO0XW03.SY2CLRID[KO0XWMDX];
      KO0XM002.SY2CLRAB[KO0XWMDX] = KO0XW03.SY2CLRAB[KO0XWMDX];
      KO0XM002.XDMCD[KO0XWMDX] = KO0XW03.XDMCD[KO0XWMDX];
      KO0XM002.XLCCD[KO0XWMDX] = KO0XW03.XLCCD[KO0XWMDX];
      KO0XM002.XPRABRV[KO0XWMDX] = KO0XW03.XPRABRV[KO0XWMDX];
      KO0XM002.ZZZSDT[KO0XWMDX] = KO0XW03.ZZZSDT[KO0XWMDX];
      KO0XM002.ZZZCHGDT[KO0XWMDX] = KO0XW03.ZZZCHGDT[KO0XWMDX];
      set KO0XM002.SY2CLRID[KO0XWMDX] skip;
      set KO0XM002.SY2CLRAB[KO0XWMDX] skip;
      set KO0XM002.XDMCD[KO0XWMDX] skip;
      set KO0XM002.XLCCD[KO0XWMDX] skip;
      set KO0XM002.XPRABRV[KO0XWMDX] skip;
      set KO0XM002.ZZZSDT[KO0XWMDX] skip;
      set KO0XM002.ZZZCHGDT[KO0XWMDX] skip;
    else
      KO0XM002.XSMTYPCD[KO0XWMDX] = " ";
      KO0XM002.KOFCOMCD[KO0XWMDX] = " ";
      KO0XM002.KO0XMEDT[KO0XWMDX] = " ";
      KO0XM002.KO0XMXDT[KO0XWMDX] = " ";
      KO0XM002.SY2CLRID[KO0XWMDX] = " ";
      KO0XM002.SY2CLRAB[KO0XWMDX] = " ";
      KO0XM002.XDMCD[KO0XWMDX] = " ";
      KO0XM002.XLCCD[KO0XWMDX] = " ";
      KO0XM002.XPRABRV[KO0XWMDX] = " ";
      KO0XM002.ZZZSDT[KO0XWMDX] = 0;
      KO0XM002.ZZZCHGDT[KO0XWMDX] = 0;
      set KO0XM002.XSMTYPCD[KO0XWMDX] skip, invisible;
      set KO0XM002.KOFCOMCD[KO0XWMDX] skip, invisible;
      set KO0XM002.KO0XMEDT[KO0XWMDX] skip, invisible;
      set KO0XM002.KO0XMXDT[KO0XWMDX] skip, invisible;
      set KO0XM002.SY2CLRID[KO0XWMDX] skip, invisible;
      set KO0XM002.SY2CLRAB[KO0XWMDX] skip, invisible;
      set KO0XM002.XDMCD[KO0XWMDX] skip, invisible;
      set KO0XM002.XLCCD[KO0XWMDX] skip, invisible;
      set KO0XM002.XPRABRV[KO0XWMDX] skip, invisible;
      set KO0XM002.ZZZSDT[KO0XWMDX] skip, invisible;
      set KO0XM002.ZZZCHGDT[KO0XWMDX] skip, invisible;
    end
    ;
    KO0XW04.KO0XWMDX = KO0XW04.KO0XWMDX + 1;
    ;
  end
  ;
  ;
end // end KO0XSGK

// check if header key chg.
Function KO0XSGL()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  if (KO0XM002.XGPCD == KO0XW02.XGPCD
   && KO0XM002.SY1STNBR == KO0XW02.SY1STNBR
   && KO0XM002.KO0XMLC == KO0XW02.KO0XMLC
   && KO0XM002.XQACD == KO0XW02.XQACD
   && KO0XM002.KO0XMLCD == KO0XW02.KO0XMLCD)
    /* next sentence*/
  else
    set SQLCA empty;
    set ERRSQLCA empty;
    set KOAREC empty;
    set KOXREC empty;
    set KO0XW01 empty;
    set KO0XW02 empty;
    set KO0XW03 empty;
    set KO0XW04 empty;
    set KO0XW05 empty;
    set SY1REC empty;
    set SY2REC empty;
    set KO0XM001 initial;
    ;
    KO0XW04.XGPCD = KO0XM002.XGPCD;
    KO0XW04.SY1STNBR = KO0XM002.SY1STNBR;
    KO0XW04.XLCCD = KO0XM002.XLCCD;
    KO0XW04.XQACD = KO0XM002.XQACD;
    KO0XW04.KO0XMLCD = KO0XM002.KO0XMLCD;
    set KO0XM002 initial;
    KO0XM001.XGPCD = KO0XW04.XGPCD;
    KO0XM001.SY1STNBR = KO0XW04.SY1STNBR;
    KO0XM001.XLCCD = KO0XW04.XLCCD;
    KO0XM001.XQACD = KO0XW04.XQACD;
    KO0XM001.KO0XMLCD = KO0XW04.KO0XMLCD;
    KO0XW04.KO0XWKFL = "Y";
    KO0XW04.KO0XWEFL = "N";
    exit stack;
  end
  ;
  ;
  ;
  ;
end // end KO0XSGL

// validate life cycle dates
Function KO0XSGM()
  ;
       /* ***************************************/
       /* * compare each color ending date     **/
       /* * with the eff. date for all life    **/
       /* * cycle dates.                       **/
       /* *                                    **/
       /* ***************************************/
  ;
  if (KO0XW04.KO0XWEFL == "Y")
    return;
  else
    /* next sentence*/
  end
  ;
  if (KO0XW04.KO0XWMDX == 1
   && KO0XW03.KO0XWSFL[KO0XWMDX] == "A")
    KO0XM002.XLCCD[KO0XWMDX] = KO0XM002.KO0XMLC;
  else
    /* next sentence*/
  end
  ;
  ;
  if (KO0XW03.KO0XWEDT[KO0XWMDX] < KO0XW03.SY2CEDT4)
    KO0XW04.KO0XWEFL = "Y";
    converseLib.validationFailed(96); /* beg date must be > l.c. eff. date*/
    set KO0XM003.KO0XMEDT cursor, bold;
    set KO0XM003.SY2CEDT4 skip, bold;
     /* the l.c. beg. date is outside the oldest lc date.*/
  else
    if (KO0XW03.KO0XWEDT[KO0XWMDX] < KO0XW03.SY2CEDT3)
      KO0XSGR(); /* check that ending date is < sy2cedt3*/
      /* check that ending date is lt lc eff. date and*/
       /* lc code is a match*/
    else
      if (KO0XW03.KO0XWEDT[KO0XWMDX] < KO0XW03.SY2CEDT2)
        KO0XSGN();
                                   /* check that ending date is < sy2cedt 2*/
      else
        if (KO0XW03.KO0XWEDT[KO0XWMDX] < KO0XW03.SY2CEDT1)
          KO0XSGO(); /* check that ending date is < sy2cedt1*/
        else
          if (KO0XW03.KO0XWEDT[KO0XWMDX] >= KO0XW03.SY2CEDT1)
            KO0XSGP(); /* check that ending date is > sy2cedt1*/
          else
            /* next sentence*/
          end
        end
      end
    end
  end
  ;
  ;
  ;
  ;
end // end KO0XSGM

// compare end dt to sy2cedt2
Function KO0XSGN()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  if (KO0XW03.SY2CEDT3 > 0)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMEDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT3 skip, bold;
    return;
  end
  ;
  if (KO0XW03.KO0XWEDT[KO0XWMDX] >= KO0XW03.SY2CEDT3)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMEDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT3 skip, bold;
    return;
  end
  ;
  if (KO0XW03.KO0XWXDT[KO0XWMDX] < KO0XW03.SY2CEDT2)
    if (KO0XM002.XLCCD[KO0XWMDX] == KO0XW03.XLCCD3)
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM002.XLCCD[KO0XWMDX] cursor, bold;
      set KO0XM002.XLCCD3 skip, bold;
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMXDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT2 skip, bold;
  end
  ;
  ;
end // end KO0XSGN

// compare end dt to sy2cedt3
Function KO0XSGO()
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  if (KO0XW03.SY2CEDT2 > 0)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMEDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT2 skip, bold;
    return;
  end
  ;
  if (KO0XW03.KO0XWEDT[KO0XWMDX] >= KO0XW03.SY2CEDT2)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMEDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT2 skip, bold;
    return;
  end
  ;
  if (KO0XW03.KO0XWXDT[KO0XWMDX] < KO0XW03.SY2CEDT1)
    if (KO0XM002.XLCCD[KO0XWMDX] == KO0XW03.XLCCD2)
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM002.XLCCD[KO0XWMDX] cursor, bold;
      set KO0XM002.XLCCD2 skip, bold;
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMXDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT1 skip, bold;
  end
  ;
  ;
end // end KO0XSGO

// compare end dt to sy2cedt4
Function KO0XSGP()
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW03.KO0XWXDT[KO0XWMDX] >= KO0XW03.SY2CEDT1)
    if (KO0XM002.XLCCD[KO0XWMDX] == KO0XW03.XLCCD1)
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM002.XLCCD[KO0XWMDX] cursor, bold;
      set KO0XM002.XLCCD1 skip, bold;
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMXDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT1 skip, bold;
  end
  ;
  ;
  ;
end // end KO0XSGP

// compare eff. dt with beg. dt.
Function KO0XSGR()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  if (KO0XW03.SY2CEDT4 > 0)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMEDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT4 skip, bold;
    return;
  end
  ;
  if (KO0XW03.KO0XWEDT[KO0XWMDX] >= KO0XW03.SY2CEDT4)
    /* next sentence*/
  else
    converseLib.validationFailed(96);
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMEDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT4 skip, bold;
    return;
  end
  ;
  if (KO0XW03.KO0XWXDT[KO0XWMDX] < KO0XW03.SY2CEDT3)
    if (KO0XM002.XLCCD[KO0XWMDX] == KO0XW03.XLCCD4)
      /* next sentence*/
    else
      converseLib.validationFailed(112);
      KO0XW04.KO0XWEFL = "Y";
      set KO0XM002.XLCCD[KO0XWMDX] cursor, bold;
      set KO0XM002.XLCCD4 skip, bold;
    end
  else
    converseLib.validationFailed(97); /* the ending date is > the next eff. date.*/
    KO0XW04.KO0XWEFL = "Y";
    set KO0XM002.KO0XMXDT[KO0XWMDX] cursor, bold;
    set KO0XM002.SY2CEDT3 skip, bold;
  end
  ;
end // end KO0XSGR

// add or chg. koxrec
Function KO0XSHA()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW03.KO0XWSFL[KO0XWMDX] == "A")
    KO0XSHB(); /* add a new koxrec*/
  else
    if (KO0XW03.KO0XWSFL[KO0XWMDX] == "C")
      if (KO0XW02.KO0XWEDT[KO0XWMDX] != KO0XW03.KO0XWEDT[KO0XWMDX])
        KO0XSHD(); /* delete & readd*/
      else
        KO0XSHE(); /* change*/
      end
    end
  end
  ;
  ;
  ;
end // end KO0XSHA

// add koxrec
Function KO0XSHB()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW03.KO0XWEDT[KO0XWMDX] == KO0XW02.KO0XWEDT[KO0XWMDX]
   && KO0XW03.KO0XWXDT[KO0XWMDX] == KO0XW02.KO0XWXDT[KO0XWMDX]
   && KO0XW03.XSMTYPCD[KO0XWMDX] == KO0XW02.XSMTYPCD[KO0XWMDX]
   && KO0XW03.KOFCOMCD[KO0XWMDX] == KO0XW02.KOFCOMCD[KO0XWMDX])
    return;
  else
    /* next sentence*/
  end
  ;
  KOXREC.XGPCD = KO0XW03.XGPCD;
  KOXREC.SY1STNBR = KO0XW03.SY1STNBR;
  KOXREC.SY2CLRID = KO0XW03.SY2CLRID[2];
  KOXREC.XDMCD = KO0XW03.XDMCD[2];
  KOXREC.XQACD = KO0XW03.XQACD;
  KOXREC.XLCCD = KO0XW03.KO0XMLC;
  KOXREC.KOXSCMED = KO0XW03.KO0XWEDT[KO0XWMDX];
  KOXREC.KOXSCMXD = KO0XW03.KO0XWXDT[KO0XWMDX];
  KOXREC.XSMTYPCD = KO0XW03.XSMTYPCD[KO0XWMDX];
  KOXREC.KOFCOMCD = KO0XW03.KOFCOMCD[KO0XWMDX];
  ;
  KOXREC.XXXUSRID = COMMAREA.CAUSERID;
  KOXREC.ZZZSDT = KO0XW04.ZZZSDT;
  KOXREC.ZZZCHGDT = KO0XW04.ZZZCHGDT;
  KOXREC.ZZZCHGTM = KO0XW04.ZZZCHGTM;
  KOXREC.ZZZCHGCT = KO0XW04.ZZZCHGCT;
  ;
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  call "IO0970" ("A ", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(80);
    KOAREC.KOATBLCD = 45;
    KOAREC.KOAACTTY = "1";
    KOAREC.XXXTBLNM = "VSYRAT01";
    KO0XSDH(); /* set up audit record*/
    KO0XSDI(); /* write audit record*/
    /* next sentenece*/
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYRAT01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0XSHB";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
  ;
end // end KO0XSHB

// setup audit rec. for chg
Function KO0XSHC()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KOAREC.XGPCD = KO0XW02.XGPCD;
  KOAREC.SY1STNBR = KO0XW02.SY1STNBR;
  KOAREC.SY2CLRID = KO0XW02.SY2CLRID[KO0XWMDX];
  KOAREC.XDMCD = KO0XW02.XDMCD[KO0XWMDX];
  KOAREC.XQACD = KO0XW02.XQACD;
  KOAREC.XLCCD = KO0XW02.XLCCD[KO0XWMDX];
  KOAREC.KOXSCMED = KO0XW02.KO0XWEDT[KO0XWMDX];
  KOAREC.KOXSCMXD = KO0XW02.KO0XWXDT[KO0XWMDX];
  KOAREC.XSMTYPCD = KO0XW02.XSMTYPCD[KO0XWMDX];
  KOAREC.KOFCOMCD = KO0XW02.KOFCOMCD[KO0XWMDX];
  KOAREC.KOACRSDT = KO0XW02.ZZZSDT[KO0XWMDX];
  KOAREC.XXXUSRID = KO0XW02.XXXUSRID[KO0XWMDX];
  ;
  KOAREC.ZZZSDT = KO0XW04.ZZZCHGDT;
  KOAREC.ZZHHMMSS = KO0XW04.TA2TIMHM;
  ;
end // end KO0XSHC

// delete & readd koxrec
Function KO0XSHD()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  KOAREC.KOATBLCD = 45;
  KOAREC.KOAACTTY = "2";
  KOAREC.XXXTBLNM = "VSYRAT01";
  ;
  ;
  KO0XSHC(); /* set up change  audit record*/
  ;
  KO0XSDI(); /* write audit record*/
  ;
  KO0XSHF(); /* delete ko0xw02 record from koxrec*/
  ;
  KO0XW04.ZZZSDT = KO0XW02.ZZZSDT[KO0XWMDX];
  KO0XW04.ZZZCHGCT = KO0XW02.ZZZCHGCT[KO0XWMDX] + 1;
  ;
  KO0XSHB(); /* setup/add ko0xw03 to koxrec*/
  ;
  ;
end // end KO0XSHD

// change koxrec
Function KO0XSHE()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0XW03.KO0XWEDT[KO0XWMDX] == KO0XW02.KO0XWEDT[KO0XWMDX]
   && KO0XW03.KO0XWXDT[KO0XWMDX] == KO0XW02.KO0XWXDT[KO0XWMDX]
   && KO0XW03.XSMTYPCD[KO0XWMDX] == KO0XW02.XSMTYPCD[KO0XWMDX]
   && KO0XW03.KOFCOMCD[KO0XWMDX] == KO0XW02.KOFCOMCD[KO0XWMDX])
    return;
  else
    /* next sentence*/
  end
  ;
  ;
  KOAREC.KOATBLCD = 45;
  KOAREC.KOAACTTY = "2";
  KOAREC.XXXTBLNM = "VSYRAT01";
  ;
  ;
  KO0XSHC(); /* set up change  audit record*/
  ;
  KO0XSDI(); /* write audit record*/
  ;
  KO0XW04.ZZZSDT = KO0XW02.ZZZSDT[KO0XWMDX];
  KO0XW04.ZZZCHGCT = KO0XW02.ZZZCHGCT[KO0XWMDX];
  ;
  KO0XSHG(); /* setup & chg ko0xw03 to koxrec*/
  ;
  ;
end // end KO0XSHE

// delete current koxrec
Function KO0XSHF()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  KOXREC.XGPCD = KO0XW02.XGPCD;
  KOXREC.SY1STNBR = KO0XW02.SY1STNBR;
  KOXREC.SY2CLRID = KO0XW02.SY2CLRID[KO0XWMDX];
  KOXREC.XDMCD = KO0XW02.XDMCD[KO0XWMDX];
  KOXREC.XQACD = KO0XW02.XQACD;
  KOXREC.KOXSCMED = KO0XW02.KO0XWEDT[KO0XWMDX];
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  call "IO0970" ("D ", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentenece*/
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYRAT01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0XSHF";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
  ;
end // end KO0XSHF

// setup and change koxrec
Function KO0XSHG()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  KOXREC.XGPCD = KO0XW03.XGPCD;
  KOXREC.SY1STNBR = KO0XW03.SY1STNBR;
  KOXREC.SY2CLRID = KO0XW03.SY2CLRID[KO0XWMDX];
  KOXREC.XDMCD = KO0XW03.XDMCD[KO0XWMDX];
  KOXREC.XQACD = KO0XW03.XQACD;
  KOXREC.XLCCD = KO0XW03.XLCCD[KO0XWMDX];
  KOXREC.KOXSCMED = KO0XW03.KO0XWEDT[KO0XWMDX];
  KOXREC.KOXSCMXD = KO0XW03.KO0XWXDT[KO0XWMDX];
  KOXREC.XSMTYPCD = KO0XW03.XSMTYPCD[KO0XWMDX];
  KOXREC.KOFCOMCD = KO0XW03.KOFCOMCD[KO0XWMDX];
  KOXREC.ZZZCHGCT = KO0XW03.ZZZCHGCT[KO0XWMDX];
  KOXREC.XXXUSRID = COMMAREA.CAUSERID;
  ;
  KOXREC.ZZZSDT = KO0XW04.ZZZSDT;
  KOXREC.ZZZCHGDT = KO0XW04.ZZZCHGDT;
  KOXREC.ZZZCHGTM = KO0XW04.ZZZCHGTM;
  ;
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  call "IO0970" ("U ", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(80);
    KOAREC.KOATBLCD = 45;
    KOAREC.KOAACTTY = "3";
    KOAREC.XXXTBLNM = "VSYRAT01";
    KO0XSDH(); /* set up audit record*/
    KO0XSDI(); /* write audit record*/
    /* next sentenece*/
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYRAT01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0XSHG";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
  ;
  ;
end // end KO0XSHG

//*** RECORD=KO0XW01 ****
// ************************************************************
// *** DATE     USERID REASON                               ***
// *** 02-25-94 RPATTE DB2 TBLCHGS. DELETE XRCCD.           ***
// ************************************************************
// ***********************
Record KO0XW01 type basicRecord
  10 KO0XWGRP KO0XWGRP ; 
    15 KO0XWHDR KO0XWHDR ; 
      20 XGPCD XGPCD ; 
      20 XGPABRV XGPABRV ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY1STYNM SY1STYNM ; 
      20 XLCCD XLCCD ; 
      20 XLCABRV XLCABRV ; 
      20 XQACD XQACD ; 
      20 XQAABRV XQAABRV ; 
      20 KO0XMLCD KO0XMLCD ; 
    15 KO0XWDET KO0XWDET [200] ; 
      20 KO0XMSEL KO0XMSEL ; 
      20 KOFCOMCD KOFCOMCD ; 
      20 XSMTYPCD XSMTYPCD ; 
      20 KO0XMEDT KO0XMEDT ; 
      20 KO0XMXDT KO0XMXDT ; 
      20 KO0XMHFL KO0XMHFL ; 
      20 SY2CLRID SY2CLRID ; 
      20 SY2CLRAB SY2CLRAB ; 
      20 XDMCD XDMCD ; 
      20 XPRABRV XPRABRV ; 
      20 ZZZSDT ZZZSDT ; 
      20 ZZZCHGDT ZZZCHGDT ; 
      20 KO0XWSFL KO0XWSFL ; 
      20 KO0XWEDT KO0XWEDT ; 
      20 KO0XWXDT KO0XWXDT ; 
      20 XXXUSRID XXXUSRID ; 
      20 XLCCD1 XLCCD1 ; 
      20 SY2CEDT1 SY2CEDT1 ; 
      20 XLCCD2 XLCCD2 ; 
      20 SY2CEDT2 SY2CEDT2 ; 
      20 XLCCD3 XLCCD3 ; 
      20 SY2CEDT3 SY2CEDT3 ; 
      20 XLCCD4 XLCCD4 ; 
      20 SY2CEDT4 SY2CEDT4 ; 
end // end KO0XW01

//*** RECORD=KO0XW02 ****
// ************************************************************
// ***  DATE    USERID REASON                               ***
// *** -------- ------ -------------------------------------***
// *** 02-25-94 RPATTE DB2 TBLCHGS.  DELETE XRCCD.          ***
// ************************************************************
// ***********************
Record KO0XW02 type basicRecord
  10 KO0XWG02 KO0XWG02 ; 
    15 KO0XWH02 KO0XWH02 ; 
      20 XGPCD XGPCD ; 
      20 XGPABRV XGPABRV ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY1STYNM SY1STYNM ; 
      20 KO0XMLC KO0XMLC ; 
      20 KO0XMXAB KO0XMXAB ; 
      20 XQACD XQACD ; 
      20 XQAABRV XQAABRV ; 
      20 KO0XMLCD KO0XMLCD ; 
      20 XLCCD1 XLCCD1 ; 
      20 SY2CEDT1 SY2CEDT1 ; 
      20 XLCCD2 XLCCD2 ; 
      20 SY2CEDT2 SY2CEDT2 ; 
      20 XLCCD3 XLCCD3 ; 
      20 SY2CEDT3 SY2CEDT3 ; 
      20 XLCCD4 XLCCD4 ; 
      20 SY2CEDT4 SY2CEDT4 ; 
    15 KO0XWD02 KO0XWD02 [10] ; 
      20 KOFCOMCD KOFCOMCD ; 
      20 XSMTYPCD XSMTYPCD ; 
      20 KO0XMEDT KO0XMEDT ; 
      20 KO0XMXDT KO0XMXDT ; 
      20 SY2CLRID SY2CLRID ; 
      20 SY2CLRAB SY2CLRAB ; 
      20 XDMCD XDMCD ; 
      20 XLCCD XLCCD ; 
      20 XPRABRV XPRABRV ; 
      20 ZZZSDT ZZZSDT ; 
      20 ZZZCHGDT ZZZCHGDT ; 
      20 ZZZCHGCT ZZZCHGCT ; 
      20 KO0XWSFL KO0XWSFL ; 
      20 KO0XWEDT KO0XWEDT ; 
      20 KO0XWXDT KO0XWXDT ; 
      20 XXXUSRID XXXUSRID ; 
end // end KO0XW02

//*** RECORD=KO0XW03 ****
// ************************************************************
// ***   DATE   USERID REASON                               ***
// *** -------- ------ -----------------------------------  ***
// *** 02-24-94 RPATTE DB2 TBLCHGS.  DELETE XRCCD.          ***
// ************************************************************
// ***********************
Record KO0XW03 type basicRecord
  10 KO0XWG03 KO0XWG03 ; 
    15 KO0XWH03 KO0XWH03 ; 
      20 XGPCD XGPCD ; 
      20 XGPABRV XGPABRV ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY1STYNM SY1STYNM ; 
      20 KO0XMLC KO0XMLC ; 
      20 KO0XMXAB KO0XMXAB ; 
      20 XQACD XQACD ; 
      20 XQAABRV XQAABRV ; 
      20 KO0XMLCD KO0XMLCD ; 
      20 XLCCD1 XLCCD1 ; 
      20 SY2CEDT1 SY2CEDT1 ; 
      20 XLCCD2 XLCCD2 ; 
      20 SY2CEDT2 SY2CEDT2 ; 
      20 XLCCD3 XLCCD3 ; 
      20 SY2CEDT3 SY2CEDT3 ; 
      20 XLCCD4 XLCCD4 ; 
      20 SY2CEDT4 SY2CEDT4 ; 
    15 KO0XWD03 KO0XWD03 [10] ; 
      20 KOFCOMCD KOFCOMCD ; 
      20 XSMTYPCD XSMTYPCD ; 
      20 KO0XMEDT KO0XMEDT ; 
      20 KO0XMXDT KO0XMXDT ; 
      20 SY2CLRID SY2CLRID ; 
      20 SY2CLRAB SY2CLRAB ; 
      20 XDMCD XDMCD ; 
      20 XLCCD XLCCD ; 
      20 XPRABRV XPRABRV ; 
      20 ZZZSDT ZZZSDT ; 
      20 ZZZCHGDT ZZZCHGDT ; 
      20 ZZZCHGCT ZZZCHGCT ; 
      20 KO0XWSFL KO0XWSFL ; 
      20 KO0XWEDT KO0XWEDT ; 
      20 KO0XWXDT KO0XWXDT ; 
      20 XXXUSRID XXXUSRID ; 
end // end KO0XW03

//*** RECORD=KO0XW04 ****
// ************************************************************
// ************************************************************
// maintenance history
// 
// when       who        why
// --------   --------   --------------------------------------
// 10-30-86   jricha     created application
// ************************************************************
// ***********************
Record KO0XW04 type basicRecord
  10 KO0XWKEY KO0XWKEY ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 XLCCD XLCCD ; 
    15 XQACD XQACD ; 
    15 KO0XMLCD KO0XMLCD ; 
  10 KO0XWTOT KO0XWTOT ; 
  10 KO0XWCDX KO0XWCDX ; 
  10 KO0XW3DX KO0XW3DX ; 
  10 KO0XWMDX KO0XWMDX ; 
  10 KO0XWMDP KO0XWMDP ; 
  10 KO0XWHLC KO0XWHLC ; 
  10 KO0XWTOP KO0XWTOP ; 
  10 KO0XWHDT KO0XWHDT ; 
    15 KO0XWHMM KO0XWHMM ; 
    15 KO0XWSL1 KO0XWSL1 ; 
    15 KO0XWHDD KO0XWHDD ; 
    15 KO0XWSL2 KO0XWSL2 ; 
    15 KO0XWHYY KO0XWHYY ; 
  10 SY2CLRID SY2CLRID ; 
  10 KO0XWKFL KO0XWKFL ; 
  10 KO0XWEFL KO0XWEFL ; 
  10 KO0XWFFL KO0XWFFL ; 
  10 KO0XWLCC KO0XWLCC ; 
  10 KO0XMHFL KO0XMHFL ; 
  10 KO0XWFST KO0XWFST ; 
  10 KO0XWFIN KO0XWFIN ; 
  10 KO0XWTDT KO0XWTDT ; 
    15 KO0XWTCC KO0XWTCC ; 
    15 KO0XWTYY KO0XWTYY ; 
    15 KO0XWTMM KO0XWTMM ; 
    15 KO0XWTDD KO0XWTDD ; 
  10 KO0XWDDT KO0XWDDT ; 
    15 KO0XWDMM KO0XWDMM ; 
    15 KO0XWDH1 KO0XWDH1 ; 
    15 KO0XWDDD KO0XWDDD ; 
    15 KO0XWDH2 KO0XWDH2 ; 
    15 KO0XWDYY KO0XWDYY ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 ZZZCHGCT ZZZCHGCT ; 
  10 TA2TIMEN TA2TIMEN ; 
    15 TA2TIMHM TA2TIMHM ; 
    15 TA2TIMSS TA2TIMSS ; 
  10 KO0XWDER KO0XWDER ; 
    15 KO0XWDN1 KO0XWDN1 ; 
    15 KO0XWDN2 KO0XWDN2 ; 
    15 KO0XMEDT KO0XMEDT ; 
    15 KO0XWDS1 KO0XWDS1 ; 
    15 KO0XWDN3 KO0XWDN3 ; 
    15 KO0XMXDT KO0XMXDT ; 
  10 KO0XWDCL KO0XWDCL ; 
    15 KO0XWDSP KO0XWDSP ; 
    15 KO0XWDTC KO0XWDTC ; 
    15 KO0XWDCD KO0XWDCD ; 
end // end KO0XW04

//*** RECORD=KO0XW05 ****
// ************************************************************
// ***   DATE   USERID   REASON                             ***
// *** -------- ------ ------------------------------------ ***
// *** 02-25-94 RPATTE DB2 TBLCHGS.  DELETE XRCCD.          ***
// ************************************************************
// ***********************
Record KO0XW05 type basicRecord
  10 KO0XWG05 KO0XWG05 ; 
    15 KO0XWH05 KO0XWH05 ; 
      20 XGPCD XGPCD ; 
      20 XGPABRV XGPABRV ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY1STYNM SY1STYNM ; 
      20 KO0XMLC KO0XMLC ; 
      20 KO0XMXAB KO0XMXAB ; 
      20 XQACD XQACD ; 
      20 XQAABRV XQAABRV ; 
      20 KO0XMLCD KO0XMLCD ; 
      20 XLCCD1 XLCCD1 ; 
      20 SY2CEDT1 SY2CEDT1 ; 
      20 XLCCD2 XLCCD2 ; 
      20 SY2CEDT2 SY2CEDT2 ; 
      20 XLCCD3 XLCCD3 ; 
      20 SY2CEDT3 SY2CEDT3 ; 
      20 XLCCD4 XLCCD4 ; 
      20 SY2CEDT4 SY2CEDT4 ; 
    15 KO0XWD05 KO0XWD05 ; 
      20 KOFCOMCD KOFCOMCD ; 
      20 XSMTYPCD XSMTYPCD ; 
      20 KO0XMEDT KO0XMEDT ; 
      20 KO0XMXDT KO0XMXDT ; 
      20 SY2CLRID SY2CLRID ; 
      20 SY2CLRAB SY2CLRAB ; 
      20 XDMCD XDMCD ; 
      20 XLCCD XLCCD ; 
      20 XPRABRV XPRABRV ; 
      20 ZZZSDT ZZZSDT ; 
      20 ZZZCHGDT ZZZCHGDT ; 
      20 KO0XWSFL KO0XWSFL ; 
      20 KO0XWEDT KO0XWEDT ; 
      20 KO0XWXDT KO0XWXDT ; 
end // end KO0XW05

// ko0xm001 eff. date
DataItem KO0XMEDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ko0xm001 history flag
DataItem KO0XMHFL num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map life cycle code
DataItem KO0XMLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map life cycle date check
DataItem KO0XMLCD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ko0xm001 select field
DataItem KO0XMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map life cycle date
DataItem KO0XMXAB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ko0xm001 end date
DataItem KO0XMXDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for ko0xw03 area
DataItem KO0XW3DX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for ko0xw01 area
DataItem KO0XWCDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail lines
DataItem KO0XWD02 char(73)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail lines
DataItem KO0XWD03 char(73)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ko0xw05 detail line
DataItem KO0XWD05 char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display color message
DataItem KO0XWDCD char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display color message
DataItem KO0XWDCL char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display day
DataItem KO0XWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display date
DataItem KO0XWDDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date error message
DataItem KO0XWDER char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail lines
DataItem KO0XWDET char(95)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display  '-'
DataItem KO0XWDH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display '-'
DataItem KO0XWDH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display month
DataItem KO0XWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date error name1
DataItem KO0XWDN1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date error name2
DataItem KO0XWDN2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date error name3
DataItem KO0XWDN3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date error space1 field
DataItem KO0XWDS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display 3 space field{
DataItem KO0XWDSP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display total colors sel.
DataItem KO0XWDTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display year
DataItem KO0XWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ko0xm001 eff. dt in ccyymmdd
DataItem KO0XWEDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag trigger
DataItem KO0XWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function trigger flag
DataItem KO0XWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// finished adding all dates
DataItem KO0XWFIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru date check
DataItem KO0XWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for ko0xw01
DataItem KO0XWG02 char(822)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for ko0xw01
DataItem KO0XWG03 char(822)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for ko0xw01
DataItem KO0XWG05 char(155)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for ko0xw01
DataItem KO0XWGRP char(19068)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header info. for ko0xm001
DataItem KO0XWH02 char(92)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header info. for ko0xm001
DataItem KO0XWH03 char(92)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header info. for ko0xm001
DataItem KO0XWH05 char(92)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold day
DataItem KO0XWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header info. for ko0xm001
DataItem KO0XWHDR char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold date
DataItem KO0XWHDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// l.c. closeout hold area
DataItem KO0XWHLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold month
DataItem KO0XWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold year
DataItem KO0XWHYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data key for fast path
DataItem KO0XWKEY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag to trig. key header chg
DataItem KO0XWKFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// l.c. header dt. ccyymmdd
DataItem KO0XWLCC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for ko0xm001 duplicate
DataItem KO0XWMDP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for ko0xm001 line #
DataItem KO0XWMDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old/new status of color line
DataItem KO0XWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// check for '-'
DataItem KO0XWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// check for '-'
DataItem KO0XWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ko0xrec cc
DataItem KO0XWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ko0xrec dd
DataItem KO0XWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp hold for koxrec dates
DataItem KO0XWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ko0xrec mm
DataItem KO0XWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// # of lines displayed on map
DataItem KO0XWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total number of records ret.
DataItem KO0XWTOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ko0xrec yy
DataItem KO0XWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ko0xm001 end. dt in ccyymmdd
DataItem KO0XWXDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

