package ko0k;

import corpcom1.CAITEM;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx2.XXXUSRID;
import ko.common.KOHADJSL;
import ko.common.KOHREC;
import ko.common.KOTREC;
import ko.common.KOYADJAB;
import ko.common.KOYADJCD;
import ko.common.KOYREC;
import ko.common.KOZREC;
import sm.common.SM1AGYID;
import sm.common.SM1REC;
import ta.common.TA1REC;
import vv.common.VRAGCY02;
//*** PROGRAM=KO0K ****
// ************************************************************
//                  commission system
// lkjseflkjslkdjf
// OVERVIEW:
// 
//        list the amount of adjustments by adjustment code
// for all of nike or by agency or by rep/agency within gpc.
// 
// 
// 
// ------------------------------------------------------------
// MAINTENANCE HISTORY:
// 
// REV
// NUM.  WHEN      WHO        WHY
// ----  --------  ---------  ---------------------------------
// 00    02-10-87  bnaber     created application
// 01    04-23-87  bnaber     changed for weird adjustment
//                            code 53
// --    12-20-88  jwood      added noncsp option to calls
// --    12-20-88  jwood      added xssegtr logic
// --    04-09-92  aivers     rename sm5stat to xxxstat
// --    10-09-92  aivers     database changes.  Get rep's name
//                            from vragcy02 instead of sm5rec.
// y2k   01-30-98  oricha     y2k modifications:  zero fill
//                            commission year ko0kwcyy on map;
//                            fix century load in ko0ks1b.
// 
// ************************************************************
// *********************
Program KO0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO0KW01 KO0KW01; // record
  KO0KW02 KO0KW02; // record
  KOHREC KOHREC; // record
  KOTREC KOTREC; // record
  KOYREC KOYREC; // record
  KOZREC KOZREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VRAGCY02 VRAGCY02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use KO0KM.KO0KM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0K001: KO0K001();

         /* ***************************************/
         /* *                                    **/
         /* *   flow stage of ko0k001            **/
         /* *                                    **/
         /* ***************************************/

    goto KO0K005;

    KO0K005: KO0K005();

         /* ***************************************/
         /* *                                    **/
         /* *                                    **/
         /* ***************************************/

    goto KO0K005;
  end // end main
end // end KO0K

// security check,first time thru
Function KO0K001()

  XSENTRY();


  XSSEGTR(); /* set segmented transaction id*/


       /* ***************************************/
       /* *                                    **/
       /* *  check fast path entry             **/
       /* *                                    **/
       /* ***************************************/


  KO0KS1A(); /* check fastpath entry*/



end // end KO0K001

// display comm adj summary
Function KO0K005()

       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  converse KO0KM001 ;

       /* ***************************************/
       /* *                                    **/
       /* * after stage of adjustment summary  **/
       /* *                                    **/
       /* ***************************************/

  KO0KS2A();

end // end KO0K005

Function KO0KS1A()


     /* check caitem and see if fast path data was passed*/


  set SQLCA empty;
  set ERRSQLCA empty;
  set KO0KW01 empty;
  set KO0KW02 empty;
  set KOHREC empty;
  set KOTREC empty;
  set KOYREC empty;
  set KOZREC empty;
  set SM1REC empty;
  set VRAGCY02 empty;
  set TA1REC empty;
  set KO0KM001 initial;

  XXXCURDT = VGVar.currentShortGregorianDate;
  KO0KS1G(); /* get comm statement month*/


  if (COMMAREA.CAITEM > " ")
    KO0KW01.CAITEM = COMMAREA.CAITEM;
    KO0KM001.SM1AGYID = KO0KW01.SM1AGYID;
    KO0KM001.SM4REPID = KO0KW01.KO0KWREP;
    KO0KM001.KO0KWCOM = KO0KW01.KO0KWCOM;
    KO0KM001.XGPCD = KO0KW01.XGPCD;
    KO0KS1B(); /* validate fastpath entry*/
    if (converseVar.validationMsgNum == 0)
      KO0KW01.KO0KWSUB = 1;
      KO0KS1P(); /* display screen*/
    end
  end


end // end KO0KS1A

Function KO0KS1B()



     /* validate key data at top of screen*/


  KO0KW01.XXXUSRID = KO0KM001.XXXUSRID;

  KO0KS1C(); /* get gpc code*/
  KO0KS1D(); /* check comm or misc*/
  KO0KS1E(); /* check rep/agency*/
  KO0KS1F(); /* check agency*/

  if (KO0KM001.KO0KWCMM == 0 /* map month = 0*/
   || KO0KM001.KO0KWCMM == 0) /* map year = 0*/
    KO0KW01.KO0KWDTE = KOZREC.KOZCSTMO;
    KO0KM001.KO0KWCMM = KO0KW01.KO0KWMM;
    KO0KM001.KO0KWCYY = KO0KW01.KO0KWYY;
  else
    KO0KW01.KO0KWMM = KO0KM001.KO0KWCMM;
    KO0KW01.KO0KWYY = KO0KM001.KO0KWCYY;
    if (KO0KM001.KO0KWCYY > 70)
      KO0KW01.KO0KWCC = 19;
    else
   /* --------- y2k out begin -------*/
     /* MOVE 20 TO KO0KW01.KO0KWYY;*/
   /* --------- y2k out end ---------*/
   /* --------- y2k in  begin -------*/
      KO0KW01.KO0KWCC = 20;
   /* --------- y2k in end ----------*/
    end
  end

  if (converseVar.validationMsgNum == 0)
    KO0KS1H(); /* select adjustments*/
  end


end // end KO0KS1B

Function KO0KS1C()



           /* retrieve gpc code*/



  set KO0KM001.SM1AGYID cursor;
  set KO0KM001.XGPCD normal;

  if (KO0KM001.KO0KWCOM == "M"
   && KO0KM001.XGPCD == " ")
    KO0KM001.XGPABRV = " ";
    KO0KW01.XGPCD = " ";
  else
    if (KO0KM001.XGPCD in XGPTBL.XGPCD)
      KO0KW01.XGPCD = KO0KM001.XGPCD;
      KO0KM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      KO0KM001.XGPABRV = " ";
      converseLib.validationFailed(93);
        /* invalid gpc code*/
      set KO0KM001.XGPCD cursor, bold;
    end

  end


end // end KO0KS1C

Function KO0KS1D()



     /* check comm or misc*/



  set KO0KM001.KO0KWCOM normal;

  if (KO0KM001.KO0KWCOM == "C"
   || KO0KM001.KO0KWCOM == "M")
    KO0KW01.KO0KWCOM = KO0KM001.KO0KWCOM;
  else
    converseLib.validationFailed(128);
       /* enter a 'c' for comm adj or an 'm'for misc adj*/
    set KO0KM001.KO0KWCOM cursor, bold;
  end


end // end KO0KS1D

Function KO0KS1E()



           /* retrieve from sales rep/agency id*/




  set KO0KM001.SM1AGYID normal;
  set KO0KM001.SM4REPID normal;

  if (KO0KM001.SM4REPID == 0)
    KO0KM001.XXXFSTNM = " ";
    KO0KM001.XXXLSTNM = " ";
    KO0KM001.XXXMDINT = " ";
    VRAGCY02.SM4REPID = 0;
  else
    VRAGCY02.SM1AGYID = KO0KM001.SM1AGYID;
    VRAGCY02.SM4REPID = KO0KM001.SM4REPID;
    VRAGCY02.XXXSTAT = "A";

    call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};


    if (SQLCA.VAGen_SQLCODE == 0)
      KO0KM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
      KO0KM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
      KO0KM001.XXXMDINT = VRAGCY02.XXXMDINT;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VRAGCY02";
        TA1REC.TA1LOCAT[1] = "KO0KS1E";
        TA1REC.TA1LOCAT[2] = "IO0400";
        XSKO001(); /* abort*/
      end
    end


    if (SQLCA.VAGen_SQLCODE == 100)

      VRAGCY02.XXXSTAT = "I";

      call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};


      if (SQLCA.VAGen_SQLCODE == 0)
        call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
        KO0KM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
        KO0KM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
        KO0KM001.XXXMDINT = VRAGCY02.XXXMDINT;
        call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          KO0KM001.XXXFSTNM = " ";
          KO0KM001.XXXLSTNM = " ";
          KO0KM001.XXXMDINT = " ";
          call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
          converseLib.validationFailed(51);
          set KO0KM001.SM4REPID bold;
          set KO0KM001.SM1AGYID cursor, bold;
        else
          TA1REC.TA1DBASE = "DSLSMN";
          TA1REC.TA1TBLVU = "VRAGCY02";
          TA1REC.TA1LOCAT[1] = "KO0KS1E";
          TA1REC.TA1LOCAT[2] = "IO0400";
          XSKO001(); /* abort*/
        end
      end

    end
  end


end // end KO0KS1E

Function KO0KS1F()



           /* retrieve from sales agency id*/



  set KO0KM001.SM1AGYID normal;
  if (KO0KM001.SM1AGYID == "ALL ")
    KO0KM001.SM1AGYNM = "ALL OF NIKE ADJUSTMENTS";
    SM1REC.SM1AGYID = KO0KM001.SM1AGYID;
  else
    SM1REC.SM1AGYID = KO0KM001.SM1AGYID;

    call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};


    if (SQLCA.VAGen_SQLCODE == 0)
      KO0KM001.SM1AGYNM = SM1REC.SM1AGYNM;
      if (converseVar.validationMsgNum == 51)
           /* invalid sales rep agency*/
        set KO0KM001.SM4REPID cursor;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KO0KM001.SM1AGYNM = " ";
        converseLib.validationFailed(52);
          /* invalid sales agency*/
        set KO0KM001.SM1AGYID cursor, bold;
      else
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VSAGCY01";
        TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
        TA1REC.TA1LOCAT[1] = "KO0KS1F";
        TA1REC.TA1LOCAT[2] = "IO0050";
        XSKO001(); /* abort*/
      end
    end

  end


end // end KO0KS1F

Function KO0KS1G()



     /* get commission statment month*/



  call "IO0640" ("S ", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    KO0KW01.KO0KWDTE = KOZREC.KOZCSTMO;
    KO0KM001.KO0KWCMM = KO0KW01.KO0KWMM;
    KO0KM001.KO0KWCYY = KO0KW01.KO0KWYY;
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOCTL01";
    TA1REC.TA1LOCAT[1] = "KO0HS1G";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001(); /* abort*/
  end


end // end KO0KS1G

// set up scrolling table
Function KO0KS1H()



     /* set up scrolling table*/






  KO0KS1I(); /* select set adj codes*/

  while (SQLCA.VAGen_SQLCODE != 100)

    KO0KS1J(); /* select next adj codes*/

  end

  if (KO0KM001.KO0KWCOM == "C")
    KO0KS1K(); /* select set adj*/
  else
    KO0KS1M(); /* select set misc adj*/
  end


end // end KO0KS1H

// retrieve adjustment code desc
Function KO0KS1I()



           /* retrieve all adjustment codes &  description*/



  set SQLCA empty;
  set KOYREC empty;

  call "IO1030" ("S1", SQLCA, KOYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    set KO0KW02 empty;
    KO0KW01.KO0KWSUB = 0;
    KO0KM001.KO0KMTL1 = 0;
    KO0KM001.KO0KMTL2 = 0;
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VADJCD01";
    TA1REC.TA1TBLKE = KOYREC.KOYADJCD;
    TA1REC.TA1LOCAT[1] = "KO0HS1I";
    TA1REC.TA1LOCAT[2] = "IO1030";
    XSKO001(); /* abort*/
  end


end // end KO0KS1I

// retrieve next adj code & desc
Function KO0KS1J()



           /* retrieve next adj codes &  description*/





  call "IO1030" ("N1", SQLCA, KOYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOYREC.KOYADJTP == KO0KM001.KO0KWCOM
     || KOYREC.KOYADJTP == "B")
      KO0KW01.KO0KWSUB = KO0KW01.KO0KWSUB + 1;
      KO0KW02.KOYADJCD[KO0KWSUB] = KOYREC.KOYADJCD;
      KO0KW02.KOYADJAB[KO0KWSUB] = KOYREC.KOYADJAB;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0KW01.KO0KWSUB = KO0KW01.KO0KWSUB + 1;
      KO0KW02.KOYADJCD[KO0KWSUB] = "99";
      KO0KW02.KOYADJAB[KO0KWSUB] = "EOT";
      call "IO1030" ("C1", SQLCA, KOYREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        SQLCA.VAGen_SQLCODE = 100;
      else
        TA1REC.TA1DBASE = "DCOMM";
        TA1REC.TA1TBLVU = "VADJCD01";
        TA1REC.TA1TBLKE = KOYREC.KOYADJCD;
        TA1REC.TA1LOCAT[1] = "KO0HS1I";
        TA1REC.TA1LOCAT[2] = "IO1030";
        XSKO001(); /* abort*/
      end
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VADJCD01";
      TA1REC.TA1TBLKE = KOYREC.KOYADJCD;
      TA1REC.TA1LOCAT[1] = "KO0HS1I";
      TA1REC.TA1LOCAT[2] = "IO1030";
      XSKO001(); /* abort*/
    end
  end


end // end KO0KS1J

// retrieve adjustments
Function KO0KS1K()



           /* retrieve adjustments*/


  set SQLCA empty;
  set KOHREC empty;


  KOHREC.KOHADFAG = KO0KM001.SM1AGYID;
  KOHREC.KOHADFRP = KO0KM001.SM4REPID;
  KOHREC.XGPCD = KO0KM001.XGPCD;
  KOHREC.KOZCSTMO = KO0KW01.KO0KWDTE;

  call "IO0620" ("SS", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    while (SQLCA.VAGen_SQLCODE == 0)
      KO0KS1L();
    end

    call "IO0620" ("CS", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes};

  else

    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VADJCD01";
    TA1REC.TA1TBLKE = KOYREC.KOYADJCD;
    TA1REC.TA1LOCAT[1] = "KO0KS1K";
    TA1REC.TA1LOCAT[2] = "IO0620";
    XSKO001(); /* abort*/
  end


end // end KO0KS1K

// retrieve next adj
Function KO0KS1L()


  call "IO0620" ("SN", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    KO0KW01.KO0KWUI1 = KO0KW01.XXXUSRID;
    KO0KW01.KO0KWUI2 = KOHREC.XXXUSRID;

    if (KO0KW01.KO0KWUI1 == KO0KW01.KO0KWUI2
     || KO0KW01.KO0KWUI1 == " ")
      KO0KS1O(); /* load adjs to table*/
    end

  else

    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VADJCD01";
      TA1REC.TA1LOCAT[1] = "KO0KS1L";
      TA1REC.TA1LOCAT[2] = "IO0620";
      XSKO001(); /* abort*/
    end

  end


end // end KO0KS1L

// retrieve misc adjustments
Function KO0KS1M()


  set SQLCA empty;
  set KOTREC empty;

  KOTREC.SM1AGYID = KO0KM001.SM1AGYID;
  KOTREC.SM4REPID = KO0KM001.SM4REPID;
  KOTREC.KOZCSTMO = KO0KW01.KO0KWDTE;

  call "IO0670" ("SS", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    while (SQLCA.VAGen_SQLCODE == 0)
      KO0KS1N();
    end

    call "IO0670" ("CS", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};

  else

    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VMSADJ01";
    TA1REC.TA1TBLKE = KOYREC.KOYADJCD;
    TA1REC.TA1LOCAT[1] = "KO0KS1M";
    TA1REC.TA1LOCAT[2] = "IO0670";
    XSKO001(); /* abort*/
  end


end // end KO0KS1M

// retrieve next misc adj
Function KO0KS1N()


  call "IO0670" ("SN", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    KO0KW01.KO0KWUI1 = KO0KW01.XXXUSRID;
    KO0KW01.KO0KWUI2 = KOTREC.XXXUSRID;

    if (KO0KW01.KO0KWUI1 == KO0KW01.KO0KWUI2
     || KO0KW01.KO0KWUI1 == " ")

      if (KOTREC.KOYADJCD in KO0KW02.KOYADJCD)
        KO0KS1U();
      end

    end

  else

    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VMSADJ01";
      TA1REC.TA1LOCAT[1] = "KO0KS1N";
      TA1REC.TA1LOCAT[2] = "IO0670";
      XSKO001(); /* abort*/
    end
  end


end // end KO0KS1N

// load comm adjs to table
Function KO0KS1O()


  if (KOHREC.KOYADJCD in KO0KW02.KOYADJCD)

    KO0KW02.KO0KWSAD[sysVar.arrayIndex] = KO0KW02.KO0KWSAD[sysVar.arrayIndex] + KOHREC.KOHADJSL;
    KO0KM001.KO0KMTL1 = KO0KM001.KO0KMTL1 + KOHREC.KOHADJSL;

    if (KO0KM001.SM1AGYID == "ALL ") /* agency = 'all'*/
      KO0KS1S(); /* ;    process from agency*/
    else
      if (KO0KM001.SM1AGYID == KOHREC.KOHADFAG)
        if (KO0KM001.SM4REPID == KOHREC.KOHADFRP
         || KO0KM001.SM4REPID == 0)
          KO0KS1S(); /* ;    process from agency*/
        end
      end
    end

    if (KO0KM001.SM1AGYID == "ALL ") /* agency = 'all*/
      KO0KS1T(); /* ;    process to agency*/
    else
      if (KO0KM001.SM1AGYID == KOHREC.KOHADTAG)
        if (KO0KM001.SM4REPID == KOHREC.KOHADTRP
         || KO0KM001.SM4REPID == 0)
          KO0KS1T(); /* ;    process to agency*/
        end
      end
    end
  end


end // end KO0KS1O

// move table to screen
Function KO0KS1P()



      /* move table to screen for display*/




  KO0KW01.KO0KWEAF = "N";
  KO0KW01.KO0KWSB2 = 1;

  while (KO0KW01.KO0KWEAF == "N"
   && KO0KW01.KO0KWSB2 <= 10)

    if (KO0KW02.KOYADJCD[KO0KWSUB] == "99")
      KO0KW01.KO0KWEAF = "Y";
    else
      KO0KM001.KOYADJCD[KO0KWSB2] = KO0KW02.KOYADJCD[KO0KWSUB];
      KO0KM001.KOYADJAB[KO0KWSB2] = KO0KW02.KOYADJAB[KO0KWSUB];
      KO0KM001.KO0KMSAD[KO0KWSB2] = KO0KW02.KO0KWSAD[KO0KWSUB];
      KO0KM001.KO0KMCAD[KO0KWSB2] = KO0KW02.KO0KWCAD[KO0KWSUB];

      KO0KW01.KO0KWSB1 = KO0KW01.KO0KWSUB + 1;

      if (KO0KW01.KO0KWSB1 <= 100
       && KO0KW02.KOYADJCD[KO0KWSB1] == "99")
        KO0KW01.KO0KWEAF = "Y";
      end

    end

    KO0KW01.KO0KWSUB = KO0KW01.KO0KWSUB + 1;
    KO0KW01.KO0KWSB2 = KO0KW01.KO0KWSB2 + 1;

  end

  if (KO0KW01.KO0KWEAF == "Y")
    set KO0KM001.KO0KMTOT skip;
    set KO0KM001.KO0KMTL1 initialAttributes;
    set KO0KM001.KO0KMTL2 initialAttributes;
  else
    set KO0KM001.KO0KMTOT skip, invisible;
    set KO0KM001.KO0KMTL1 skip, invisible;
    set KO0KM001.KO0KMTL2 skip, invisible;
  end

  while (KO0KW01.KO0KWSB2 <= 10)
    KO0KM001.KOYADJCD[KO0KWSB2] = " ";
    KO0KM001.KOYADJAB[KO0KWSB2] = " ";
    KO0KM001.KO0KMSAD[KO0KWSB2] = 0;
    KO0KM001.KO0KMCAD[KO0KWSB2] = 0;
    KO0KW01.KO0KWSB2 = KO0KW01.KO0KWSB2 + 1;
  end


end // end KO0KS1P

// process from agency
Function KO0KS1S()


  KO0KW02.KO0KWCAD[sysVar.arrayIndex] = KO0KW02.KO0KWCAD[sysVar.arrayIndex] + KOHREC.KOHADFCO;
  KO0KM001.KO0KMTL2 = KO0KM001.KO0KMTL2 + KOHREC.KOHADFCO;


end // end KO0KS1S

// process to agency
Function KO0KS1T()


  KO0KW02.KO0KWCAD[sysVar.arrayIndex] = KO0KW02.KO0KWCAD[sysVar.arrayIndex] + KOHREC.KOHADTCO;
  KO0KM001.KO0KMTL2 = KO0KM001.KO0KMTL2 + KOHREC.KOHADTCO;


end // end KO0KS1T

// load misc adjs to table
Function KO0KS1U()


  KO0KW02.KO0KWCAD[sysVar.arrayIndex] = KO0KW02.KO0KWCAD[sysVar.arrayIndex] + KOTREC.KOTMADAM;
  KO0KM001.KO0KMTL2 = KO0KM001.KO0KMTL2 + KOTREC.KOTMADAM;


end // end KO0KS1U

Function KO0KS2A()



      /* check for valid pfkeys and valid use of opt: and item:*/
      /* fields*/




  COMMAREA.CAITEM = " ";
  COMMAREA.CATOAP = " ";

  if (converseVar.eventKey is pf1)
    XSPF1(); /* transfer to help*/
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "KO0A";
      XSEXIT();
      VAGen_EZEMSG = COMMAREA.CAMSG;
    else
      if (converseVar.eventKey is pf4)
        XSPF4(); /* transfer to main menu*/
      else
        if (KO0KM001.CATOAP > " ")
          COMMAREA.CATOAP = KO0KM001.CATOAP;
          COMMAREA.CAITEM = KO0KM001.CAITEM;
          XSEXIT();
          VAGen_EZEMSG = COMMAREA.CAMSG;
        else
          if (converseVar.eventKey is pa2)
            COMMAREA.CATOAP = "KO0A";
            XSEXIT();
            VAGen_EZEMSG = COMMAREA.CAMSG;
          else
            if (converseVar.eventKey is enter
             || converseVar.eventKey is pf7
             || converseVar.eventKey is pf8)
              KO0KS2B(); /* edit enter key*/
            else
              converseLib.validationFailed(2);
                /* invalid pfkey*/
            end
          end
        end
      end
    end
  end



end // end KO0KS2A

Function KO0KS2B()



      /* edit enter key pf7 and pf8*/






  if (KO0KM001.SM1AGYID != SM1REC.SM1AGYID
   || KO0KM001.SM4REPID != VRAGCY02.SM4REPID
   || KO0KM001.KO0KWCOM != KO0KW01.KO0KWCOM
   || KO0KM001.XGPCD != KO0KW01.XGPCD
   || KO0KM001.XXXUSRID != KO0KW01.XXXUSRID
   || KO0KM001.KO0KWCMM != KO0KW01.KO0KWMM
   || KO0KM001.KO0KWCYY != KO0KW01.KO0KWYY)
    KO0KS1B(); /* edit top portion of screen*/
    if (converseVar.validationMsgNum == 0)
      KO0KW01.KO0KWSUB = 1;
      KO0KS1P(); /* display screen*/
    end
  else
    if (converseVar.eventKey is pf7)
      KO0KS2C(); /* scroll backward*/
    else
      if (converseVar.eventKey is pf8)
        KO0KS2D(); /* scroll forward*/
      end
    end
  end


end // end KO0KS2B

// pf7 scroll backward
Function KO0KS2C()



      /* pf7 scroll backward*/





  if (KO0KM001.KOYADJCD[1] == " ")
      /* next sentence*/
  else
    if (KO0KM001.KOYADJCD[1] in KO0KW02.KOYADJCD)
      KO0KW01.KO0KWSUB = sysVar.arrayIndex - 10;
      if (KO0KW01.KO0KWSUB > 0)
        KO0KS1P(); /* display the table*/
      end
    end
  end


end // end KO0KS2C

Function KO0KS2D()



      /* pf8 scroll forward*/





  if (KO0KM001.KOYADJCD[10] == " ")
       /* next sentence*/
  else
    if (KO0KM001.KOYADJCD[10] in KO0KW02.KOYADJCD)
      KO0KW01.KO0KWSUB = sysVar.arrayIndex + 1;
      if (KO0KW02.KOYADJCD[KO0KWSUB] == "99")
          /* next sentence*/
      else
        KO0KS1P(); /* display table*/
      end
    end
  end


end // end KO0KS2D

//*** RECORD=KO0KW01 ****
// *******************  koarec record *************************
// this is a record used internally by application ko0k
// 
// 
// ************************************************************
// maintenance:
// 
// rev.
// number  who      when      why
// ------  ------   -------   ---------------------------------
//   00    bnaber   02-12-87  created record
// 
// 
// ************************************************************
// ***********************
Record KO0KW01 type basicRecord
  5 KO0KWGRP KO0KWGRP ; 
    10 CAITEM CAITEM ; 
      15 SM1AGYID SM1AGYID ; 
      15 KO0KWREP KO0KWREP ; 
      15 KO0KWCOM KO0KWCOM ; 
      15 XGPCD XGPCD ; 
      15 * char(9) ; 
    10 XXXUSRID XXXUSRID ; 
    10 KO0KWUI1 KO0KWUI1 ; 
    10 KO0KWUI2 KO0KWUI2 ; 
    10 KO0KWDTE KO0KWDTE ; 
      15 * num(3) ; 
      15 KO0KWCC KO0KWCC ; 
      15 KO0KWYY KO0KWYY ; 
      15 KO0KWMM KO0KWMM ; 
    10 KO0KWSUB KO0KWSUB ; 
    10 KO0KWSB2 KO0KWSB2 ; 
    10 KO0KWSB1 KO0KWSB1 ; 
    10 KO0KWTOT KO0KWTOT ; 
    10 KOHADJSL KOHADJSL ; 
    10 KO0KWWAA KO0KWWAA ; 
    10 KO0KWEAF KO0KWEAF ; 
end // end KO0KW01

//*** RECORD=KO0KW02 ****
// *******************  ko0kw01 record ************************
// this is an interal table used by application ko0k.
// 
// 
// ************************************************************
// maintenance:
// 
// rev.
// number  who      when      why
// ------  ------   -------   ---------------------------------
//   00    bnaber   02-12-87  created record
// 
// 
// ************************************************************
// ***********************
Record KO0KW02 type basicRecord
  5 KO0KW02G KO0KW02G ; 
    10 KOYADJCD KOYADJCD [100] ; 
    10 KOYADJAB KOYADJAB [100] ; 
    10 KO0KWSAD KO0KWSAD [100] ; 
    10 KO0KWCAD KO0KWCAD [100] ; 
end // end KO0KW02

// ko0yw02 group item
DataItem KO0KW02G char(2400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comm adj amount
DataItem KO0KWCAD decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem KO0KWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comm or misc indicator
DataItem KO0KWCOM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date hold area
DataItem KO0KWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. end of adjust flag
DataItem KO0KWEAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ko0kw01 group item
DataItem KO0KWGRP char(89)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comm. prev. stmt month
DataItem KO0KWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep id
DataItem KO0KWREP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales adj amount
DataItem KO0KWSAD decimal(11,2)  {
  currency = no, numericSeparator = yes, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// used as subscript
DataItem KO0KWSB1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used as subscript
DataItem KO0KWSB2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used as subscript
DataItem KO0KWSUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KO0KWTOT char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st 4 char of user-id - a
DataItem KO0KWUI1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st 4 char of user-id - b
DataItem KO0KWUI2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. comm amt
DataItem KO0KWWAA num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// split apart year
DataItem KO0KWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

