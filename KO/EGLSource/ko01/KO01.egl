package ko01;

import corpcom1.CAITEM;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXFSTNM;
import corpcom7.XXXLSTNM;
import corpcom7.XXXMDINT;
import corpx1.XDVCD;
import corpx1.XDVDESC;
import corpx1.XDVTBL;
import corpx1.XGPCD;
import corpx1.XGPDESC;
import corpx1.XGPTBL;
import corpx1.XOBTBL;
import corpx1.XPRTBL;
import corpx2.XOBCD;
import corpx2.XOBDESC;
import corpx2.XPRCD;
import corpy2.YSCCD;
import corpy2.YSCTBL;
import ko.common.KOAREC;
import ko.common.KOBCOPCT;
import ko.common.KOBPCTED;
import ko.common.KOBPCTXD;
import ko.common.KOBREC;
import ko.common.KOZCSTMO;
import ko.common.KOZREC;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import sm.common.SM1AGYID;
import sm.common.SM1AGYNM;
import sm.common.SM1REC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VRAGCY02;
//*** PROGRAM=KO01 ****
//      this application will allow the user to add and change
// the commission rate earned for the various exception levels
// for an agency/rep (i.e, prod typ/cust/base ot rate).
// 
// 
// 06-19-89   dmeier  installed
// 11-13-89   jbecke  changed ypgcd to xprcd in s1k.
// 10-08-90   jbecke  fixed history/current processing.
//                    added top and bottom scrolling.
// 04-09-92   aivers  regen for april database changes.
// 06-04-92   aivers  regen for JUNE database changes.
// 10-09-92   aivers  database changes.  get rep's name from
//                    vragcy02 instead of sm5rec.
// *********************
Program KO01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO01W01 KO01W01; // record
  KO01W02 KO01W02; // record
  KOAREC KOAREC; // record
  KOBREC KOBREC; // record
  KOZREC KOZREC; // record
  KUCREC KUCREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VRAGCY02 VRAGCY02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use YSCTBL {deleteAfterUse = yes}; // table
  use KO01M.KO01M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO01000: KO01000();
    ;
    ;
    goto KO01005;
    ;
    ;
    KO01005: KO01005();
    ;
    ;
    goto KO01005;
    ;
    ;
  end // end main
end // end KO01

// initialize application
Function KO01000()
  ;
  ;
  set KO01W01 empty; /* ; initialize ws rec*/
  set KO01W02 empty; /* ; initialize ws rec*/
  ;
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; set segmented trans id*/
  KO01S0A(); /* ; get current stmt mo*/
  ;
  if (COMMAREA.CAITEM != " ") /* ; fast path item used*/
    KO01W01.CAITEM = COMMAREA.CAITEM; /* ; move item to w.s.*/
    KO01W01.SM1AGYID = KO01W01.KO01WID1; /* ; build w.s. agency*/
    KO01W01.SM4REPID = KO01W01.KO01WID2; /* ; build w.s. rep*/
    KO01W01.XDVCD = KO01W01.KO01WID3; /* ; build w.s. div*/
    KO01W01.XGPCD = KO01W01.KO01WID4; /* ; build w.s. gpc*/
    KO01W01.KO01WEKF = "Y"; /* ; set edit key flag*/
  end
  ;
  KO01W01.KO01WBMF = "Y"; /* ; set build map flag*/
  KO01W01.KO01WNKF = "Y"; /* ; set new key flag*/
  KO01W01.KO01WNAF = "Y"; /* ; set new array flag*/
  ;
  ;
  ;
   /* *************************************************************/
end // end KO01000

// converse split sched screen
Function KO01005()
  ;
  ;
  if (KO01W01.KO01WBMF == "Y") /* ; build map flag = 'y'*/
    KO01W01.KO01WBMF = "N"; /* ; reset build map flag*/
    KO01006(); /* ; build map codes*/
    KO01007(); /* ; build map desc*/
  end
  ;
  KO01M001.XXXPRCNM = "KO01005";
  KO01M001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  if (KO01W01.KO01WFN2 == "C") /* ; function 2 = 'current'*/
    KO01M001.KO01MP14 = "14:HISTORY"; /* ; set pf14 to history*/
    KO01M001.KO01MTTL = "CURRENT RATES"; /* set title to history*/
  else
    KO01M001.KO01MP14 = "14:CURRENT"; /* ; set pf14 to current*/
    KO01M001.KO01MTTL = "   HISTORY   "; /* set title to blanks*/
  end
  ;
  KO01M001.KO01MMSG = KO01W01.KO01WMSG;
  if (KO01W01.KO01WMNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(KO01W01.KO01WMNO);
  end
  KO01W01.KO01WMSG = " ";
  KO01W01.KO01WMNO = 0;
  ;
  ;
   /* *************************************************************/
  ;
  converse KO01M001 ;
  ;
   /* *************************************************************/
  ;
  KO01007(); /* ; reset map attributes*/
  KO01008(); /* ; edit pf/pa key*/
  ;
  if (KO01W01.KO01WMSG == " " /* ; no system messages*/
   && KO01W01.KO01WMNO == 0)  /* ; no error messages*/
    KO01009(); /* ; edit map*/
  end
  ;
  ;
   /* *************************************************************/
end // end KO01005

// build screen
Function KO01006()
  ;
  ;
  converseLib.clearScreen();
  set KO01M001 initial; /* ; reset screen*/
  ;
  if (KO01W01.KO01WNKF == "Y") /* ; new key flag = 'y'*/
    KO01W01.KO01WNKF = "N"; /* ; reset new key flag*/
    KO01S1A(); /* ; build new key*/
  end
  ;
  if (KO01W01.KO01WNAF == "Y") /* ; new array flag = 'y'*/
    KO01W01.KO01WNAF = "N"; /* ; reset new array flag*/
    KO01S1I(); /* ; build new array*/
  end
  ;
  KO01S1L(); /* ; move sched to screen*/
  KO01S1N(); /* ; set pf key attributes*/
  ;
  KO01M001.SM1AGYID = KO01W01.SM1AGYID;
  KO01M001.SM1AGYNM = KO01W01.SM1AGYNM;
  ;
  KO01M001.SM4REPID = KO01W01.SM4REPID;
  KO01M001.XXXLSTNM = KO01W01.XXXLSTNM;
  KO01M001.XXXFSTNM = KO01W01.XXXFSTNM;
  KO01M001.XXXMDINT = KO01W01.XXXMDINT;
  ;
  KO01M001.XDVCD = KO01W01.XDVCD;
  KO01M001.XDVDESC = KO01W01.XDVDESC;
  ;
  KO01M001.XGPCD = KO01W01.XGPCD;
  KO01M001.XGPDESC = KO01W01.XGPDESC;
  ;
  ;
  ;
end // end KO01006

// set map attributes
Function KO01007()
  ;
  ;
  KO01W01.KO01WSB1 = 4; /* ; set array subscript*/
  while (KO01W01.KO01WSB1 > 0) /* ; until top of array*/
    ;
    KO01S2A(); /* ; get begin date*/
    KO01S2B(); /* ; get end date*/
    ;
    if (KO01M001.XPRCD[KO01WSB1] == " "    /* ; no map prod group*/
     && KO01M001.YSCCD[KO01WSB1] == "  "   /* ; no map sales cat*/
     && KO01M001.KO01MCID[KO01WSB1] == 0   /* ; no map cust*/
     && KO01M001.XOBCD[KO01WSB1] == "  "   /* ; no map base ot*/
     && KO01M001.KO01MPCT[KO01WSB1] == 0   /* ; no map pct*/
     && KO01M001.KO01MEDT[KO01WSB1] == " " /* ; no map begin date*/
     && KO01M001.KO01MXDT[KO01WSB1] == " ") /* ; no map end date*/
      KO01M001.XPRABRV[KO01WSB1] = " ";
      KO01M001.YSCABRV[KO01WSB1] = " ";
      KO01M001.KUCCONM[KO01WSB1] = " ";
      KO01M001.XOBABRV[KO01WSB1] = " ";
    else
      KO01S2C(); /* ; get prod grp abrv*/
      KO01S2D(); /* ; get sales cat abrv*/
      KO01S2E(); /* ; get cust name*/
      KO01S2F(); /* ; get ord typ abrv*/
    end
    ;
    KO01S2G(); /* ; set row attributes*/
    ;
    KO01W01.KO01WSB1 = KO01W01.KO01WSB1 - 1; /* ; increment array*/
    ;
  end
  ;
  ;
end // end KO01007

// validate attention key
Function KO01008()
  ;
  ;
  set KO01M001.CATOAP normal; /* ; reset map to appl*/
  set KO01M001.CAITEM normal; /* ; reset map to item*/
  ;
  COMMAREA.CATOAP = " "; /* ; reset commarea to appl*/
  COMMAREA.CAITEM = " "; /* ; reset commarea to item*/
  KO01W01.KO01WFN1 = " "; /* ; reset function*/
  ;
  if (KO01M001.CATOAP != " ") /* ; fast path used*/
    KO01S3A(); /* ; edit fast path*/
  else
    if (converseVar.eventKey is enter /* ; attention key = enter*/
     || converseVar.eventKey is pf7   /* ; or pf7*/
     || converseVar.eventKey is pf8   /* ; or pf8*/
     || converseVar.eventKey is pf14  /* ; or pf14*/
     || converseVar.eventKey is pf19  /* ; or pf19*/
     || converseVar.eventKey is pf20) /* ; or pf20*/
      KO01S3B(); /* ; set function key*/
    else
      if (converseVar.eventKey is pf1) /* ; attention key = pf1*/
        XSPF1(); /* ; call help*/
      else
        if (converseVar.eventKey is pf3 /* ; attention key = pf3*/
         || converseVar.eventKey is pa2) /* ; or pa2*/
          COMMAREA.CATOAP = "KO0A"; /* ; call comm menu*/
          XSEXIT();
        else
          if (converseVar.eventKey is pf4) /* ; attention key = pf4*/
            XSPF4(); /* ; call main menu*/
          else
            KO01W01.KO01WMNO = 2; /* ; invalid attenion key*/
          end
        end
      end
    end
  end
  ;
  KO01W01.KO01WMSG = COMMAREA.CAMSG; /* ; save comm mssg*/
  COMMAREA.CAMSG = " "; /* ; reset comm mssg*/
  ;
  ;
end // end KO01008

// edit map
Function KO01009()
  ;
  ;
  KO01W01.KO01WKCF = "N"; /* ; reset key change flag*/
  ;
  KO01S4A(); /* ; check for changes*/
  ;
  if (KO01W01.KO01WKCF == "Y") /* ; key changes were made*/
    KO01S4B(); /* ; process key changes*/
  else
    KO01S4C(); /* ; process no changes*/
  end
  ;
  ;
end // end KO01009

// get current stmt mo
Function KO01S0A()
  ;
  ;
  set SQLCA empty;
  set KOZREC empty;
  ;
  call "IO0640" ("S ", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO01W01.KO01WDT3 = KOZREC.KOZCSTMO;
    KO01W01.KO01WCD4 = KO01W01.KO01WCD3;
    KO01W01.KO01WDD4 = 0;
    KO01W01.KOZCSTMO = KO01W01.KO01WDT4;
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOCTL01";
    TA1REC.TA1LOCAT[1] = "KO01S0A";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001();
  end
  ;
  ;
  if (KO01W01.KO01WMMB < 12)
    KO01W01.KO01WMMB = KO01W01.KO01WMMB + 1;
  else
    KO01W01.KO01WMMB = 1;
    KO01W01.KO01WYYB = KO01W01.KO01WYYB + 1;
    if (KO01W01.KO01WYYB == 0)
      KO01W01.KO01WCCB = KO01W01.KO01WCCB + 1;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S0A

// build new key
Function KO01S1A()
  ;
  ;
  KO01S1B(); /* ; reset w.s. fields*/
  ;
  if (KO01W01.KO01WEKF == "Y") /* ; edit key flag = 'y'*/
    KO01W01.KO01WEKF = "N"; /* ; reset edit key flag*/
    KO01S1C(); /* ; edit key data*/
  end
  ;
  ;
   /* *************************************************************/
end // end KO01S1A

// reset working storage
Function KO01S1B()
  ;
  ;
  KO01W01.KO01WFN2 = "C"; /* ; set function to current*/
  KO01W01.KO01WKEF = "N"; /* ; set key error flag*/
  KO01W01.KO01WSFF = "N"; /* ; set sched found flag*/
  KO01W01.KO01WSAF = "N"; /* ; set scroll allowed flag*/
  KO01W01.SM1AGYNM = " "; /* ; set w.s. agcy name*/
  KO01W01.XXXLSTNM = " "; /* ; set w.s. rep last name*/
  KO01W01.XXXFSTNM = " "; /* ; set w.s. rep first name*/
  KO01W01.XXXMDINT = " "; /* ; set w.s. rep mid init*/
  KO01W01.XDVDESC = " "; /* ; set w.s. div desc*/
  KO01W01.XGPDESC = " "; /* ; set w.s. gpc desc*/
  KO01W01.XOBDESC = " "; /* ; set w.s. base ot desc*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1B

// edit key data
Function KO01S1C()
  ;
  ;
  KO01S1D(); /* ; edit gpc*/
  KO01S1E(); /* ; edit division*/
  KO01S1F(); /* ; edit rep id*/
  KO01S1H(); /* ; edit agcy id*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1C

// edit gpc
Function KO01S1D()
  ;
  ;
  if (KO01W01.XGPCD == "**" /* ; all gpcs*/
   || KO01W01.XGPCD == " ") /* ; no gpc entered*/
    KO01W01.XGPCD = "**"; /* ; set xgpcd to 'all'*/
    KO01W01.XGPDESC = "ALL GPCS";
  else
    if (KO01W01.XGPCD in XGPTBL.XGPCD) /* ; valid gpc*/
      KO01W01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* ; status not = 'a'*/
        set KO01M001.XGPCD cursor, bold; /* ; highlight gpc*/
        KO01W01.KO01WKEF = "Y"; /* ; set error flag*/
        KO01W01.KO01WMNO = 92; /* ; inactive gpc*/
      end
      if (XGPTBL.COCMFL[sysVar.arrayIndex] != "Y") /* ; comm flag not 'yes'*/
        set KO01M001.XGPCD cursor, bold; /* ; highlight gpc*/
        KO01W01.KO01WKEF = "Y"; /* ; set error flag*/
        KO01W01.KO01WMNO = 169; /* ; non-comm gpc*/
      end
    else
      set KO01M001.XGPCD cursor, bold; /* ; highligt gpc*/
      KO01W01.KO01WKEF = "Y"; /* ; set error flag*/
      KO01W01.KO01WMNO = 93; /* ; invalid gpc*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1D

// edit division
Function KO01S1E()
  ;
  ;
  if (KO01W01.XDVCD == "**" /* ; all divs*/
   || KO01W01.XDVCD == " ") /* ; no div entered*/
    KO01W01.XDVCD = "**"; /* ; set div code*/
    KO01W01.XDVDESC = "ALL DIVISIONS";
  else
    if (KO01W01.XDVCD in XDVTBL.XDVCD) /* ; valid div*/
      KO01W01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      if (XDVTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* ; inactive div*/
        set KO01M001.XDVCD cursor, bold;
        KO01W01.KO01WKEF = "Y";
        KO01W01.KO01WMNO = 185;
      end
    else
      set KO01M001.XDVCD cursor, bold; /* ; invalid div*/
      KO01W01.KO01WKEF = "Y";
      KO01W01.KO01WMNO = 175;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1E

// edit rep id
Function KO01S1F()
  ;
  ;
  if (KO01W01.SM4REPID == 0) /* ; no rep id entenred*/
    KO01W01.XXXLSTNM = "ALL REPS"; /* ; set rep name*/
  else
    ;
    set SQLCA empty;
    set VRAGCY02 empty;
    ;
    VRAGCY02.SM1AGYID = KO01W01.SM1AGYID;
    VRAGCY02.SM4REPID = KO01W01.SM4REPID;
    call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* ; sucessful open*/
      KO01S1G(); /* ; fetch rep rec*/
    else
      KO01W01.KO01WKEF = "Y"; /* ; set key error flag*/
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY02";
      TA1REC.TA1LOCAT[1] = "KO01S1F";
      TA1REC.TA1LOCAT[2] = "IO0400";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1F

// fetch sm5rec
Function KO01S1G()
  ;
  ;
  set SQLCA empty;
  ;
  call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO01W01.XXXLSTNM = VRAGCY02.XXXLSTNM;
    KO01W01.XXXFSTNM = VRAGCY02.XXXFSTNM;
    KO01W01.XXXMDINT = VRAGCY02.XXXMDINT;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KO01M001.SM4REPID cursor, bold;
      set KO01M001.SM1AGYID bold;
      KO01W01.KO01WKEF = "Y";
      KO01W01.KO01WMNO = 6;
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY02";
      TA1REC.TA1LOCAT[1] = "KO01S1G";
      TA1REC.TA1LOCAT[2] = "IO0400";
      XSKO001(); /* abort*/
    end
  end
  ;
  call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1G

// edit agcy id
Function KO01S1H()
  ;
  ;
  if (KO01W01.SM1AGYID == " ") /* ; no agcy id entered*/
    set KO01M001.SM1AGYID cursor, bold; /* ; highlight agcy id*/
    KO01W01.KO01WKEF = "Y"; /* ; set key error flag*/
    KO01W01.KO01WMNO = 38; /* ; required field*/
  else
    ;
    set SQLCA empty;
    set SM1REC empty;
    ;
    SM1REC.SM1AGYID = KO01W01.SM1AGYID;
    ;
    call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KO01W01.SM1AGYNM = SM1REC.SM1AGYNM;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set KO01M001.SM1AGYID cursor, bold;
        KO01W01.KO01WKEF = "Y";
        KO01W01.KO01WMNO = 4;
      else
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VSAGCY01";
        TA1REC.TA1LOCAT[1] = "KO01S1H";
        TA1REC.TA1LOCAT[2] = "IO0050";
        XSKO001(); /* abort*/
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1H

// build comm rate schedule
Function KO01S1I()
  ;
  ;
  set KO01W02 empty; /* ; reset array*/
  ;
  if (KO01W01.SM1AGYID != "    " /* ; agency not = ' '*/
   && KO01W01.KO01WKEF != "Y")   /* ; no key errors*/
    ;
    set SQLCA empty;
    set KOBREC empty;
    ;
    KOBREC.SM1AGYID = KO01W01.SM1AGYID;
    KOBREC.SM4REPID = KO01W01.SM4REPID;
    ;
    call "IO0690" ("S1", SQLCA, KOBREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      ;
      KO01W02.KO01WTOT = 1; /* ; reset sched total*/
      ;
      while (KO01W02.KO01WTOT <= 100
       && SQLCA.VAGen_SQLCODE == 0)
        KO01S1J();
      end
      ;
      if (KO01W02.KO01WTOT == 1) /* ; no rows found*/
        if (KO01W01.KO01WFN2 == "H")
          KO01W01.KO01WMNO = 133;
        else
          KO01W01.KO01WMNO = 126;
        end
      end
      ;
      call "IO0690" ("C1", SQLCA, KOBREC) {isNoRefresh = yes, isExternal = yes};
      ;
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VOTSCH01";
      TA1REC.TA1LOCAT[1] = "KO01S1I";
      TA1REC.TA1LOCAT[2] = "IO0690";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1I

// fetch comm rate rec
Function KO01S1J()
  ;
  ;
  set SQLCA empty;
  set KOBREC empty;
  ;
  call "IO0690" ("N1", SQLCA, KOBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
    ;
    if (KO01W01.XDVCD == KOBREC.XDVCD
     && KO01W01.XGPCD == KOBREC.XGPCD
     && KOBREC.XOTCD == "**")
      KO01S1K(); /* ; move kobrec to array*/
    end
    ;
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; not at end of array*/
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VOTSCH01";
      TA1REC.TA1LOCAT[1] = "KO01S1J";
      TA1REC.TA1LOCAT[2] = "IO0690";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1J

// move kobrec to array
Function KO01S1K()
  ;
  ;
  if (KOBREC.KOBPCTXD >= KO01W01.KOZCSTMO /* ; term date in curr range*/
   && KO01W01.KO01WFN2 == "H")            /* ; function = history*/
    return; /* ; skip record*/
  else
    if (KOBREC.KOBPCTXD == 0 /* ; term date = 0*/
     && KO01W01.KO01WFN2 == "H") /* ;      ; function = history*/
      return; /* ; skip record*/
    else
      if (KOBREC.KOBPCTXD < KO01W01.KOZCSTMO /* ; term date < curr stmt*/
       && KOBREC.KOBPCTXD > 0                /* ;      ; term date > 0*/
       && KO01W01.KO01WFN2 == "C")           /* ; function = current*/
        return; /* ; skip record*/
      end
    end
  end
  ;
  KO01W02.XPRCD[KO01WTOT] = KOBREC.XPRCD;
  KO01W02.YSCCD[KO01WTOT] = KOBREC.YSCCD;
  KO01W02.KUCCOID[KO01WTOT] = KOBREC.KUCCOID;
  KO01W02.XOBCD[KO01WTOT] = KOBREC.XOBCD;
  KO01W02.KOBPCTED[KO01WTOT] = KOBREC.KOBPCTED;
  KO01W02.KOBPCTXD[KO01WTOT] = KOBREC.KOBPCTXD;
  KO01W02.KOBCOPCT[KO01WTOT] = KOBREC.KOBCOPCT;
  ;
  KO01W02.KO01WTOT = KO01W02.KO01WTOT + 1;
  ;
  if (KO01W02.KO01WTOT > 100
   && KO01W01.KO01WFN2 == "H")
    KO01W01.KO01WMNO = 206;
  end
  ;
   /* *************************************************************/
  ;
end // end KO01S1K

// move sched to screen
Function KO01S1L()
  ;
  ;
  KO01W01.KO01WSB1 = 4; /* ; reset map subscript*/
  while (KO01W01.KO01WSB1 > 0) /* ; until top of map sched*/
    KO01S1M(); /* ; move row to row*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1L

// move sched row to map row
Function KO01S1M()
  ;
  ;
  KO01W01.KO01WSB2 = KO01W01.KO01WSB1 + KO01W02.KO01WPOS;
  ;
  KO01M001.XPRCD[KO01WSB1] = KO01W02.XPRCD[KO01WSB2];
  KO01M001.YSCCD[KO01WSB1] = KO01W02.YSCCD[KO01WSB2];
  KO01M001.KO01MCID[KO01WSB1] = KO01W02.KUCCOID[KO01WSB2];
  KO01M001.XOBCD[KO01WSB1] = KO01W02.XOBCD[KO01WSB2];
  KO01M001.KO01MPCT[KO01WSB1] = KO01W02.KOBCOPCT[KO01WSB2];
  ;
  if (KO01W02.KOBPCTED[KO01WSB2] == 0)
    KO01M001.KO01MEDT[KO01WSB1] = " ";
  else
    KO01W01.KO01WDTB = KO01W02.KOBPCTED[KO01WSB2];
    KO01W01.KO01WYYA = KO01W01.KO01WYYB;
    KO01W01.KO01WMMA = KO01W01.KO01WMMB;
    KO01W01.KO01WDDA = KO01W01.KO01WDDB;
    KO01W01.KO01WFA1 = "-";
    KO01W01.KO01WFA2 = "-";
    KO01M001.KO01MEDT[KO01WSB1] = KO01W01.KO01WDTA;
  end
  ;
  if (KO01W02.KOBPCTXD[KO01WSB2] == 0)
    KO01M001.KO01MXDT[KO01WSB1] = " ";
  else
    KO01W01.KO01WDTB = KO01W02.KOBPCTXD[KO01WSB2];
    KO01W01.KO01WYYA = KO01W01.KO01WYYB;
    KO01W01.KO01WMMA = KO01W01.KO01WMMB;
    KO01W01.KO01WDDA = KO01W01.KO01WDDB;
    KO01W01.KO01WFA1 = "-";
    KO01W01.KO01WFA2 = "-";
    KO01M001.KO01MXDT[KO01WSB1] = KO01W01.KO01WDTA;
  end
  ;
  KO01W01.KO01WSB1 = KO01W01.KO01WSB1 - 1;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1M

// set pf key attributes
Function KO01S1N()
  ;
  ;
  if (KO01W01.SM1AGYID == " ") /* ; no map agency id*/
    KO01W01.KO01WSAF = "N"; /* ; scroll allowed = n*/
    set KO01M001.KO01MP07 skip, invisible;
    set KO01M001.KO01MP08 skip, invisible;
    set KO01M001.KO01MP14 skip, invisible;
    set KO01M001.KO01MP19 skip, invisible;
    set KO01M001.KO01MP20 skip, invisible;
  else
    if (KO01W01.KO01WKEF == "Y" /* ; key errors exist*/
     && KO01W01.KO01WSFF == "N") /* ; no sched recs found*/
      KO01W01.KO01WSAF = "N"; /* ; scroll allowed = 'n'*/
      set KO01M001.KO01MP07 skip, invisible;
      set KO01M001.KO01MP08 skip, invisible;
      set KO01M001.KO01MP14 initialAttributes;
      set KO01M001.KO01MP19 skip, invisible;
      set KO01M001.KO01MP20 skip, invisible;
    else
      KO01W01.KO01WSAF = "Y"; /* ; scroll allowed = 'y'*/
      set KO01M001.KO01MP07 initialAttributes;
      set KO01M001.KO01MP08 initialAttributes;
      set KO01M001.KO01MP14 initialAttributes;
      set KO01M001.KO01MP19 initialAttributes;
      set KO01M001.KO01MP20 initialAttributes;
    end
  end
  ;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S1N

// set effective date
Function KO01S2A()
  ;
  ;
  if (KO01M001.KO01MEDT[KO01WSB1] != " ") /* ; map has begin date*/
    KO01W01.KO01WDT1 = KO01M001.KO01MEDT[KO01WSB1];
    if (KO01W01.KO01WF11 == "-"
     || KO01W01.KO01WF11 == "/")
      KO01W01.KO01WMMA = KO01W01.KO01WMM1;
      KO01W01.KO01WDDA = KO01W01.KO01WDD1;
      KO01W01.KO01WYYA = KO01W01.KO01WYY1;
      KO01W01.KO01WFA1 = "-";
      KO01W01.KO01WFA2 = "-";
      KO01M001.KO01MEDT[KO01WSB1] = KO01W01.KO01WDTA;
    else
      KO01W01.KO01WDT2 = KO01M001.KO01MEDT[KO01WSB1];
      KO01W01.KO01WMMA = KO01W01.KO01WMM2;
      KO01W01.KO01WDDA = KO01W01.KO01WDD2;
      KO01W01.KO01WYYA = KO01W01.KO01WYY2;
      KO01W01.KO01WFA1 = "-";
      KO01W01.KO01WFA2 = "-";
      KO01M001.KO01MEDT[KO01WSB1] = KO01W01.KO01WDTA;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S2A

// set termination date
Function KO01S2B()
  ;
  ;
  if (KO01M001.KO01MXDT[KO01WSB1] != " ") /* ; map has end date*/
    KO01W01.KO01WDT1 = KO01M001.KO01MXDT[KO01WSB1];
    if (KO01W01.KO01WF11 == "-"
     || KO01W01.KO01WF11 == "/")
      KO01W01.KO01WMMA = KO01W01.KO01WMM1;
      KO01W01.KO01WDDA = KO01W01.KO01WDD1;
      KO01W01.KO01WYYA = KO01W01.KO01WYY1;
      KO01W01.KO01WFA1 = "-";
      KO01W01.KO01WFA2 = "-";
      KO01M001.KO01MXDT[KO01WSB1] = KO01W01.KO01WDTA;
    else
      KO01W01.KO01WDT2 = KO01M001.KO01MXDT[KO01WSB1];
      KO01W01.KO01WMMA = KO01W01.KO01WMM2;
      KO01W01.KO01WDDA = KO01W01.KO01WDD2;
      KO01W01.KO01WYYA = KO01W01.KO01WYY2;
      KO01W01.KO01WFA1 = "-";
      KO01W01.KO01WFA2 = "-";
      KO01M001.KO01MXDT[KO01WSB1] = KO01W01.KO01WDTA;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S2B

// get prod group abrv
Function KO01S2C()
  ;
  ;
  KO01M001.XPRABRV[KO01WSB1] = " "; /* ; reset prod grp abrv*/
  ;
  if (KO01M001.XPRCD[KO01WSB1] == " "
   || KO01M001.XPRCD[KO01WSB1] == "**")
    KO01M001.XPRCD[KO01WSB1] = "**";
    KO01M001.XPRABRV[KO01WSB1] = "ALL";
  else
    if (KO01M001.XPRCD[KO01WSB1] in XPRTBL.XPRCD) /* prod grp in table*/
      KO01M001.XPRABRV[KO01WSB1] = XPRTBL.XPRABRV[sysVar.arrayIndex];
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S2C

// get sales catg abrv
Function KO01S2D()
  ;
  ;
  KO01M001.YSCABRV[KO01WSB1] = " "; /* ; reset sls cat abrv*/
  ;
  if (KO01M001.YSCCD[KO01WSB1] == " "
   || KO01M001.YSCCD[KO01WSB1] == "**")
    KO01M001.YSCCD[KO01WSB1] = "**";
    KO01M001.YSCABRV[KO01WSB1] = "ALL";
  else
    if (KO01M001.YSCCD[KO01WSB1] in YSCTBL.YSCCD) /* sls cat in table*/
      KO01M001.YSCABRV[KO01WSB1] = YSCTBL.YSCABRV[sysVar.arrayIndex];
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S2D

// get cust name
Function KO01S2E()
  ;
  ;
  KO01M001.KUCCONM[KO01WSB1] = " "; /* ; reset cust name*/
  ;
  if (KO01M001.KO01MCID[KO01WSB1] == 0
   || KO01M001.KO01MCID[KO01WSB1] == -1)
    KO01M001.KO01MCID[KO01WSB1] = -1;
    KO01M001.KUCCONM[KO01WSB1] = "ALL COMPANIES";
  else
    ;
    set KUCREC empty;
    set SQLCA empty;
    ;
    KUCREC.KUCCOID = KO01M001.KO01MCID[KO01WSB1];
    ;
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KO01M001.KUCCONM[KO01WSB1] = KUCREC.KUCCONM;
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1DBASE = "DCUST   ";
        TA1REC.TA1TBLVU = "VCMPNY01";
        TA1REC.TA1LOCAT[1] = "KO01S2E";
        TA1REC.TA1LOCAT[2] = "IO0240";
        XSKO001(); /* ; abort*/
      end
    end
  end
  ;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S2E

// get base ot abrv
Function KO01S2F()
  ;
  ;
  KO01M001.XOBABRV[KO01WSB1] = " "; /* ; reset ord typ abrv*/
  ;
  if (KO01M001.XOBCD[KO01WSB1] == " "
   || KO01M001.XOBCD[KO01WSB1] == "**")
    KO01M001.XOBCD[KO01WSB1] = "**";
    KO01M001.XOBABRV[KO01WSB1] = "ALL";
  else
    if (KO01M001.XOBCD[KO01WSB1] in XOBTBL.XOBCD) /* ord typ in table*/
      KO01M001.XOBABRV[KO01WSB1] = XOBTBL.XOBABRV[sysVar.arrayIndex];
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S2F

// set row attributes
Function KO01S2G()
  ;
  ;
  KO01W01.KO01WSB2 = KO01W01.KO01WSB1 + KO01W02.KO01WPOS;
  ;
  if (KO01W02.XPRCD[KO01WSB2] == " " /* ; no array prod group*/
   && KO01W02.YSCCD[KO01WSB2] == " " /* ; no array sls cat*/
   && KO01W02.KUCCOID[KO01WSB2] == 0) /* ; no array cust*/
    set KO01M001.XPRCD[KO01WSB1] skip, invisible;
    set KO01M001.YSCCD[KO01WSB1] skip, invisible;
    set KO01M001.KO01MCID[KO01WSB1] skip, invisible;
    set KO01M001.XOBCD[KO01WSB1] skip, invisible;
    set KO01M001.KO01MPCT[KO01WSB1] skip, invisible;
    set KO01M001.KO01MEDT[KO01WSB1] skip, invisible;
    set KO01M001.KO01MXDT[KO01WSB1] skip, invisible;
  else
    set KO01M001.XPRCD[KO01WSB1] initialAttributes;
    set KO01M001.YSCCD[KO01WSB1] initialAttributes;
    set KO01M001.KO01MCID[KO01WSB1] initialAttributes;
    set KO01M001.XOBCD[KO01WSB1] initialAttributes;
    set KO01M001.KO01MPCT[KO01WSB1] initialAttributes;
    set KO01M001.KO01MEDT[KO01WSB1] initialAttributes;
    set KO01M001.KO01MXDT[KO01WSB1] initialAttributes;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S2G

// edit fast path
Function KO01S3A()
  ;
  ;
  if (converseVar.eventKey is enter)
    COMMAREA.CATOAP = KO01M001.CATOAP;
    COMMAREA.CAITEM = KO01M001.CAITEM;
    XSEXIT();
    set KO01M001.CATOAP cursor, bold;
  else
    set KO01M001.CATOAP cursor, bold;
    KO01W01.KO01WMNO = 1;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S3A

// edit function
Function KO01S3B()
  ;
  ;
  if (converseVar.eventKey is enter) /* ; user pressed enter*/
    KO01W01.KO01WFN1 = "U"; /* ; function = update*/
  else
    if (converseVar.eventKey is pf7 /* ; user pressed pf7*/
     && KO01W01.KO01WSAF == "Y")    /* ; scrolling is allowed*/
      KO01W01.KO01WFN1 = "B"; /* ; function = back*/
    else
      if (converseVar.eventKey is pf8 /* ; user pressed pf8*/
       && KO01W01.KO01WSAF == "Y")    /* ; scrolling is allowed*/
        KO01W01.KO01WFN1 = "F"; /* ; function = frwd*/
      else
        if (converseVar.eventKey is pf14 /* ; user pressed pf14*/
         && KO01W01.KO01WFN2 == "C")     /* ; function = current*/
          KO01W01.KO01WFN1 = "H"; /* ; function = history*/
        else
          if (converseVar.eventKey is pf14 /* ; user pressed pf14*/
           && KO01W01.KO01WFN2 == "H")     /* ; function = history*/
            KO01W01.KO01WFN1 = "C"; /* ; function = current*/
          else
            if (converseVar.eventKey is pf19 /* ; user pressed pf19*/
             && KO01W01.KO01WSAF == "Y")     /* ; scrolling is allowed*/
              KO01W01.KO01WFN1 = "T"; /* ; function = top*/
            else
              if (converseVar.eventKey is pf20 /* ; user pressed pf20*/
               && KO01W01.KO01WSAF == "Y")     /* ; scrolling is allowed*/
                KO01W01.KO01WFN1 = "Z"; /* ; function = bottom*/
              else
                KO01W01.KO01WMNO = 2; /* ; invalid pf key*/
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S3B

// check for data changes
Function KO01S4A()
  ;
  ;
  if (KO01M001.SM1AGYID != KO01W01.SM1AGYID /* ; new map agcy*/
   || KO01M001.SM4REPID != KO01W01.SM4REPID /* ; new map rep*/
   || KO01M001.XDVCD != KO01W01.XDVCD       /* ; new map div code*/
   || KO01M001.XGPCD != KO01W01.XGPCD)      /* ; new map gpc*/
    KO01W01.KO01WKCF = "Y"; /* ; set key change flag*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S4A

// process key changes
Function KO01S4B()
  ;
  ;
  if (KO01W01.KO01WFN1 != "U") /* ; function not = update*/
    KO01W01.KO01WBMF = "Y"; /* ; set build map flag*/
    KO01W01.KO01WMNO = 161; /* ; set w.s. messg*/
  else
    KO01W01.SM1AGYID = KO01M001.SM1AGYID;
    KO01W01.SM4REPID = KO01M001.SM4REPID;
    KO01W01.XDVCD = KO01M001.XDVCD;
    KO01W01.XGPCD = KO01M001.XGPCD;
    KO01W01.KO01WBMF = "Y";
    KO01W01.KO01WNKF = "Y";
    KO01W01.KO01WEKF = "Y";
    KO01W01.KO01WNAF = "Y";
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S4B

// process no changes
Function KO01S4C()
  ;
  ;
  if (KO01W01.KO01WFN1 == "U") /* ; function 1 = update*/
    KO01S4D(); /* ; process enter key*/
  else
    if (KO01W01.KO01WFN1 == "B")
                                   /* ; function 1 = scroll back*/
      KO01S4E(); /* ; scroll back*/
    else
      if (KO01W01.KO01WFN1 == "F")
                                   /* ; function 1 = scroll frwd*/
        KO01S4F(); /* ; scroll frwd*/
      else
        if (KO01W01.KO01WFN1 == "T") /* ; function 1 = scroll top*/
          KO01S4H(); /* ; scroll top*/
        else
          if (KO01W01.KO01WFN1 == "Z") /* ; function 1 = scroll bottom*/
            KO01S4G(); /* ; scroll bottom*/
          else
            if (KO01W01.KO01WFN1 == "H" /* ; function = history*/
             || KO01W01.KO01WFN1 == "C") /* ; function = current*/
              KO01W01.KO01WBMF = "Y"; /* ; set build map flag*/
              KO01W01.KO01WNAF = "Y"; /* ; set new array flag*/
              KO01W01.KO01WFN2 = KO01W01.KO01WFN1;
            end
          end
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S4C

// process enter key
Function KO01S4D()
  ;
  ;
  if (KO01W01.SM1AGYID == " " /* ; no w.s. agency*/
   && KO01W01.SM4REPID == 0   /* ; no w.s. rep*/
   && KO01W01.XDVCD == " "    /* ; no w.s div*/
   && KO01W01.XGPCD == " ")   /* ; no w.s. gpc*/
    KO01W01.KO01WBMF = "Y"; /* ; set build map flag*/
    KO01W01.KO01WNKF = "Y"; /* ; set new key flag*/
    KO01W01.KO01WEKF = "Y"; /* ; set edit key flag*/
    KO01W01.KO01WNAF = "Y"; /* ; set new array flag*/
  else
    KO01W01.SM1AGYID = " "; /* ; reset w.s. agency*/
    KO01W01.SM4REPID = 0; /* ;     ; reset w.s. rep*/
    KO01W01.XDVCD = " "; /* ; reset w.s. div*/
    KO01W01.XGPCD = " "; /* ; reset w.s. gpc*/
    KO01W01.KO01WBMF = "Y"; /* ;     ; set build map flag*/
    KO01W01.KO01WNKF = "Y"; /* ;     ; set new key flag*/
    KO01W01.KO01WNAF = "Y"; /* ;     ; set new array flag*/
  end
  ;
  KO01W01.KO01WFN2 = "C"; /* ; set function 2 current*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S4D

// scroll back
Function KO01S4E()
  ;
  ;
  if (KO01W02.KO01WPOS == 0) /* ; array pos at top*/
    KO01W01.KO01WMNO = 70;
  else
    KO01W02.KO01WPOS = KO01W02.KO01WPOS - 4; /* ; set position in array*/
    if (KO01W02.KO01WPOS < 0)
      KO01W02.KO01WPOS = 0;
    end
    KO01W01.KO01WBMF = "Y"; /* ; set build map flag*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S4E

// scroll frwd
Function KO01S4F()
  ;
  ;
  if (KO01W02.KO01WPOS >= 96)
                                   /* ; already at bottom*/
    KO01W01.KO01WMNO = 68;
  else
    KO01W01.KO01WSB1 = KO01W02.KO01WPOS + 4; /* ; check last map line*/
    if (KO01W02.XPRCD[KO01WSB1] == " ") /* ; no prod grp in array*/
      KO01W01.KO01WMNO = 68;
    else
      KO01W01.KO01WSB1 = KO01W01.KO01WSB1 + 1; /* ; check next page*/
      if (KO01W02.XPRCD[KO01WSB1] == " ") /* ; no prod grp in array*/
        KO01W01.KO01WMNO = 68;
      else
        KO01W02.KO01WPOS = KO01W02.KO01WPOS + 4; /* ; set array position*/
        KO01W01.KO01WBMF = "Y"; /* ; set build map flag*/
        if (KO01W02.KO01WPOS > 96)
          KO01W02.KO01WPOS = KO01W02.KO01WPOS - 4;
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S4F

// SCROLL TO BOTTOM
Function KO01S4G()
  ;
  ;
  KO01W01.KO01WBMF = "Y"; /* ; build new map*/
  ;
  KO01W01.KO01WWTT = KO01W02.KO01WPOS + 4;
  ;
  if (KO01W02.KO01WPOS == 96 /* ; at bottom*/
   || KO01W01.KO01WWTT >= KO01W02.KO01WTOT)
    KO01W01.KO01WMNO = 68;
  else
    KO01W02.KO01WPOS = KO01W02.KO01WTOT - 4; /* ; set array pointer*/
  end
  ;
end // end KO01S4G

// SCROLL TO TOP
Function KO01S4H()
  ;
  ;
  if (KO01W02.KO01WPOS == 0)
    KO01W01.KO01WMNO = 70;
  else
    KO01W01.KO01WBMF = "Y";
    KO01W02.KO01WPOS = 0;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO01S4H

Record KO01W01 type basicRecord
  10 CAITEM CAITEM ; 
    15 KO01WID1 KO01WID1 ; 
    15 KO01WID2 KO01WID2 ; 
    15 KO01WID3 KO01WID3 ; 
    15 KO01WID4 KO01WID4 ; 
    15 * char(8) ; 
  10 KO01WMNO KO01WMNO ; 
  10 KO01WMSG KO01WMSG ; 
  10 KOZCSTMO KOZCSTMO ; 
  10 SM1AGYID SM1AGYID ; 
  10 SM4REPID SM4REPID ; 
  10 XDVCD XDVCD ; 
  10 XGPCD XGPCD ; 
  10 KO01WBMF KO01WBMF ; 
  10 KO01WNKF KO01WNKF ; 
  10 KO01WNAF KO01WNAF ; 
  10 KO01WEKF KO01WEKF ; 
  10 KO01WFN1 KO01WFN1 ; 
  10 KO01WFN2 KO01WFN2 ; 
  10 KO01WKEF KO01WKEF ; 
  10 KO01WSFF KO01WSFF ; 
  10 KO01WSAF KO01WSAF ; 
  10 KO01WKCF KO01WKCF ; 
  10 KO01WERR KO01WERR ; 
  10 SM1AGYNM SM1AGYNM ; 
  10 XXXLSTNM XXXLSTNM ; 
  10 XXXFSTNM XXXFSTNM ; 
  10 XXXMDINT XXXMDINT ; 
  10 XDVDESC XDVDESC ; 
  10 XGPDESC XGPDESC ; 
  10 XOBDESC XOBDESC ; 
  10 KOBPCTED KOBPCTED ; 
  10 KOBPCTXD KOBPCTXD ; 
  10 KOBCOPCT KOBCOPCT ; 
  10 KO01WDTA KO01WDTA ; 
    15 KO01WMMA KO01WMMA ; 
    15 KO01WFA1 KO01WFA1 ; 
    15 KO01WDDA KO01WDDA ; 
    15 KO01WFA2 KO01WFA2 ; 
    15 KO01WYYA KO01WYYA ; 
  10 KO01WDTB KO01WDTB ; 
    15 KO01WCCB KO01WCCB ; 
    15 KO01WYYB KO01WYYB ; 
    15 KO01WMMB KO01WMMB ; 
    15 KO01WDDB KO01WDDB ; 
  10 KO01WDTC KO01WDTC ; 
    15 KO01WCCC KO01WCCC ; 
    15 KO01WYYC KO01WYYC ; 
    15 KO01WMMC KO01WMMC ; 
    15 KO01WDDC KO01WDDC ; 
  10 KO01WDT1 KO01WDT1 ; 
    15 KO01WMM1 KO01WMM1 ; 
    15 KO01WF11 KO01WF11 ; 
    15 KO01WDD1 KO01WDD1 ; 
    15 KO01WF12 KO01WF12 ; 
    15 KO01WYY1 KO01WYY1 ; 
  10 KO01WDT2 KO01WDT2 ; 
    15 KO01WMM2 KO01WMM2 ; 
    15 KO01WDD2 KO01WDD2 ; 
    15 KO01WYY2 KO01WYY2 ; 
    15 * char(2) ; 
  10 KO01WDT3 KO01WDT3 ; 
    15 KO01WF13 KO01WF13 ; 
    15 KO01WCD3 KO01WCD3 ; 
  10 KO01WDT4 KO01WDT4 ; 
    15 KO01WCD4 KO01WCD4 ; 
    15 KO01WDD4 KO01WDD4 ; 
  10 KO01WWTT KO01WWTT ; 
  10 KO01WSB1 KO01WSB1 ; 
  10 KO01WSB2 KO01WSB2 ; 
  10 KO01WSB3 KO01WSB3 ; 
end // end KO01W01

//*** RECORD=KO01W02 ****
// this will set-up one area for adding zzz-stuff to each
// db2 table.
// ***********************
Record KO01W02 type basicRecord
  10 KO01WTBL KO01WTBL [100] ; 
    15 XPRCD XPRCD ; 
    15 YSCCD YSCCD ; 
    15 KUCCOID KUCCOID ; 
    15 XOBCD XOBCD ; 
    15 KOBPCTED KOBPCTED ; 
    15 KOBPCTXD KOBPCTXD ; 
    15 KOBCOPCT KOBCOPCT ; 
  10 KO01WTOT KO01WTOT ; 
  10 KO01WPOS KO01WPOS ; 
end // end KO01W02

// build map flag
DataItem KO01WBMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date b century
DataItem KO01WCCB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date c century
DataItem KO01WCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 3 0ccyymm
DataItem KO01WCD3 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 4 0ccyymm
DataItem KO01WCD4 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 1 day
DataItem KO01WDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 2 day
DataItem KO01WDD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 4 00
DataItem KO01WDD4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date a day
DataItem KO01WDDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date b day
DataItem KO01WDDB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date c day
DataItem KO01WDDC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 1
DataItem KO01WDT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date 2
DataItem KO01WDT2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date 3 000ccyymm
DataItem KO01WDT3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 4 0ccyymmdd
DataItem KO01WDT4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date a
DataItem KO01WDTA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date b
DataItem KO01WDTB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date c
DataItem KO01WDTC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// edit key flag
DataItem KO01WEKF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem KO01WERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date 1 filler 1
DataItem KO01WF11 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date 1 filler 2
DataItem KO01WF12 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date 3 filler 00
DataItem KO01WF13 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date a filler 1
DataItem KO01WFA1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date a filler 2
DataItem KO01WFA2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function 1
DataItem KO01WFN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function 2
DataItem KO01WFN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// f.p. sales agency id
DataItem KO01WID1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// f.p. sales rep id
DataItem KO01WID2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// f.p. division code
DataItem KO01WID3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// f.p. gpc
DataItem KO01WID4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key change flag
DataItem KO01WKCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key error flag
DataItem KO01WKEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date 1 month
DataItem KO01WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 2 month
DataItem KO01WMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date a month
DataItem KO01WMMA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date b month
DataItem KO01WMMB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date c month
DataItem KO01WMMC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. mssg nbr
DataItem KO01WMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. mssg
DataItem KO01WMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new array flag
DataItem KO01WNAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new key flag
DataItem KO01WNKF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc array pos
DataItem KO01WPOS num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// scroll allowed flag
DataItem KO01WSAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. subscript 1
DataItem KO01WSB1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript 2
DataItem KO01WSB2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript 3
DataItem KO01WSB3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// schedule found flag
DataItem KO01WSFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table
DataItem KO01WTBL char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc array total
DataItem KO01WTOT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work total
DataItem KO01WWTT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 1 year
DataItem KO01WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 2 year
DataItem KO01WYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date a year
DataItem KO01WYYA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date b year
DataItem KO01WYYB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date c year
DataItem KO01WYYC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

