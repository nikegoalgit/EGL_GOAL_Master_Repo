package ko0r;

import corpcom1.CAITEM;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx2.XXXUSRID;
import ko.common.KOHREC;
import ko.common.KOTREC;
import ko.common.KOYADJCD;
import ko.common.KOYREC;
import ko.common.KOZREC;
import sm.common.SM1REC;
import ta.common.TA1REC;
import vv.common.VRAGCY02;
//*** PROGRAM=KO0R ****
// this application is the comm./misc. adjustment detail
// inquiry screen.
// 
// 
// date created:        aug 07, 1986
// 
// maintenance:
// 
// init   date      reason
// -------------------------------------------------------
// jjr   02-17-87   created csp application.
// oab   04-07-87   changed map, added new selects from kohrec
// glw   08-18-87   added adj-cd to key for extract-ko0rs1h
// dsm   08-18-88   show sales, comm to, comm from totals
// jbw   12-20-88   added noncsp option to calls
// jbw   12-20-88   added xssegtr logic
// ayi   04-09-92   rename sm5stat to xxxstat.
// ayi   10-09-92   database changes.  Get rep's name from
//                  vragcy02 instead of sm5rec.
// 
// application purpose/description:
// 
// this application will display either the comm. or misc.
// detail adjustment tables.
// 
// commission adj.:
// 
// if the user input 'all ' into ko0rm001.sm1agyid then the
// application will retrieve all commission adjustments for
// a specific gpc code.
// 
// 
// for misc. adj.:
// 
// if the user input 'all ' into ko0rm001.sm1agyid then the
// application will retrieve all the misc. adjustments.
// 
// *********************
Program KO0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO0RW01 KO0RW01; // record
  KO0RW02 KO0RW02; // record
  KOHREC KOHREC; // record
  KOTREC KOTREC; // record
  KOYREC KOYREC; // record
  KOZREC KOZREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VRAGCY02 VRAGCY02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use KO0RM.KO0RM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0R001: KO0R001();
     /* ***************************************/
    ;
    goto KO0R005; /* flow to the next process.*/
    ;
    ;
    ;
    KO0R005: KO0R005();
    ;
    ;
    goto KO0R005;
    ;
    ;
  end // end main
end // end KO0R

// security check,first time thru
Function KO0R001()
  ;
  ;
  XSENTRY();
  ;
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set TA1REC empty;
  set KO0RW01 empty;
  set KO0RW02 empty;
  set ERRSQLCA empty;
  ;
  KO0RS1A(); /* GET COMMISSION STATEMENT MONTH.*/
  ;
  if (COMMAREA.CAITEM == " ")
    set KO0RM001 initial;
    KO0RM001.KO0RMCMM = KO0RW01.KO0RWMM;
    KO0RM001.KO0RMCYY = KO0RW01.KO0RWYY;
  else
    KO0RW01.CAITEM = COMMAREA.CAITEM;
    KO0RW01.KO0RWDSF = "Y";
    KO0RW01.KO0RWBSF = "Y";
    COMMAREA.CAITEM = " ";
  end
  ;
  ;
   /* ********************************************/
end // end KO0R001

// comm/misc. adj. detail inquiry
Function KO0R005()
  ;
  ;
  if (KO0RW01.KO0RWDSF == "Y") /* display screen flag = 'y'*/
    KO0RW01.KO0RWDSF = "N"; /* re-set display screen flag*/
    KO0RS2A(); /* display screen*/
  end
  ;
  KO0RM001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
   /* ***********************************************************/
  converse KO0RM001 ;
   /* ***********************************************************/
  ;
  KO0RW01.KO0RWEFL = "N"; /* re-set appl error flag*/
  ;
  if (KO0RM001.CATOAP != " ") /* user entered fast path data*/
    KO0RS3A(); /* validate fast path usage.*/
  else
    KO0RS4A(); /* validate attention keys*/
  end
  ;
  ;
end // end KO0R005

// first time thru
Function KO0RS1A()
  ;
  ;
  set SQLCA empty;
  set KOZREC empty;
  ;
  call "IO0640" ("S ", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0RW01.KO0RWDTE = KOZREC.KOZCSTMO;
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOCTL01";
    TA1REC.TA1LOCAT[1] = "KO0RS1A";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0RS1A

// display screen
Function KO0RS2A()
  ;
  ;
  KO0RW01.KO0RWEFL = "N"; /* re-set error flag*/
  ;
  if (KO0RW01.KO0RWBSF == "Y") /* build screen flag = 'y'*/
    KO0RS2B(); /* build screen*/
    KO0RS2J(); /* build array*/
  else
    if (KO0RW01.KO0RWBAF == "Y") /* build array flag = 'y'*/
      KO0RS2J(); /* build array*/
    end
  end
  ;
  KO0RS2V(); /* move array to map*/
  ;
  KO0RW01.KO0RWBSF = "N"; /* re-set build screen flag*/
  KO0RW01.KO0RWBAF = "N"; /* re-set build array flag*/
  ;
  ;
end // end KO0RS2A

// build screen
Function KO0RS2B()
  ;
  ;
  set KO0RM001 initial;
  ;
  KO0RM001.KO0RMCMM = KO0RW01.KO0RWMM;
  KO0RM001.KO0RMCYY = KO0RW01.KO0RWYY;
  KO0RM001.SM1AGYID = KO0RW01.KO0RWAGY;
  KO0RM001.SM4REPID = KO0RW01.KO0RWREP;
  KO0RM001.KO0RMPGM = KO0RW01.KO0RWPGM;
  KO0RM001.XGPCD = KO0RW01.XGPCD;
  KO0RM001.KO0RMADJ = KO0RW01.KO0RWADJ;
  KO0RM001.KO0RMBID = KO0RW01.KO0RWBID;
  KO0RM001.XXXUSRID = KO0RW01.XXXUSRID;
  ;
  KO0RS2C(); /* edit screen*/
  ;
  if (KO0RW01.KO0RWEFL == "N") /* no map errors exist*/
    KO0RW01.KO0RWDMF = "Y"; /* set display message flag*/
  else
    KO0RW01.KO0RWAGY = " "; /* re-set saved key fields*/
    KO0RW01.KO0RWPGM = " ";
    KO0RW01.XGPCD = " ";
    KO0RW01.KO0RWADJ = " ";
    KO0RW01.KO0RWREP = 0;
    KO0RW01.KO0RWBID = 0;
  end
  ;
  ;
end // end KO0RS2B

// edit screen
Function KO0RS2C()
  ;
  ;
  KO0RS2D(); /* ; edit adj code*/
  KO0RS2E(); /* ; edit gpc*/
  KO0RS2F(); /* ; edit adj type*/
  ;
  if (KO0RM001.SM4REPID != 0 /* ; user entered rep id*/
   && KO0RM001.SM1AGYID != "ALL ")
                                   /* user requested specific agency*/
    KO0RS2G(); /* ; edit rep id*/
  else
    if (KO0RM001.SM4REPID != 0 /* ; user entered rep id*/
     && KO0RM001.SM1AGYID == "ALL ") /* user requested all agencies*/
      set KO0RM001.SM4REPID cursor, bold;
      KO0RW01.KO0RWEFL = "Y";
      converseLib.validationFailed(158);
    end
  end
  ;
  if (KO0RM001.SM1AGYID != " " /* user entered an agency id*/
   && KO0RM001.SM1AGYID != "ALL") /* user did not request all agencies*/
    KO0RS2I(); /* edit agency id*/
  else
    if (KO0RM001.SM1AGYID == " ") /* user did not enter an agency id*/
      set KO0RM001.SM1AGYID cursor, bold;
      KO0RW01.KO0RWEFL = "Y";
      converseLib.validationFailed(38);
    end
  end
  ;
  if (KO0RM001.KO0RMCMM == 0
   || KO0RM001.KO0RMCYY == 0)
    KO0RW01.KO0RWDTE = KOZREC.KOZCSTMO;
    KO0RM001.KO0RMCMM = KO0RW01.KO0RWMM;
    KO0RM001.KO0RMCYY = KO0RW01.KO0RWYY;
  else
    KO0RW01.KO0RWMM = KO0RM001.KO0RMCMM;
    KO0RW01.KO0RWYY = KO0RM001.KO0RMCYY;
    if (KO0RM001.KO0RMCYY > 70)
      KO0RW01.KO0RWCC = 19;
    else
      KO0RW01.KO0RWCC = 20;
    end
  end
  ;
  KO0RW01.XXXUSRID = KO0RM001.XXXUSRID;
  ;
  ;
end // end KO0RS2C

// edit adj code
Function KO0RS2D()
  ;
  ;
  if (KO0RM001.KO0RMADJ != " ") /* user entered adjustment code*/
    ;
    set SQLCA empty;
    set KOYREC empty;
    ;
    KOYREC.KOYADJCD = KO0RM001.KO0RMADJ;
    ;
    call "IO1030" ("S ", SQLCA, KOYREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      ;
      if (KOYREC.KOYADJTP != KO0RM001.KO0RMPGM
       && KOYREC.KOYADJTP != "B")
        set KO0RM001.KO0RMADJ cursor, bold;
        KO0RW01.KO0RWEFL = "Y";
        converseLib.validationFailed(114);
      end
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100)
        set KO0RM001.KO0RMADJ cursor, bold;
        KO0RW01.KO0RWEFL = "Y";
        converseLib.validationFailed(37);
      else
        TA1REC.TA1DBASE = "DCOMM";
        TA1REC.TA1TBLVU = "VADJCD01";
        TA1REC.TA1TBLKE = KOYREC.KOYADJCD;
        TA1REC.TA1LOCAT[1] = "KO0RS2D";
        TA1REC.TA1LOCAT[2] = "IO1030";
        XSKO001(); /* abort*/
      end
    end
  end
  ;
  ;
end // end KO0RS2D

// edit gpc
Function KO0RS2E()
  ;
  ;
  if (KO0RM001.KO0RMPGM == "C") /* a commission adj inquiry*/
    ;
    if (KO0RM001.XGPCD == " ") /* user did not enter gpc*/
      set KO0RM001.XGPCD cursor, bold;
      KO0RW01.KO0RWEFL = "Y";
      converseLib.validationFailed(38);
    else
      if (KO0RM001.XGPCD in XGPTBL.XGPCD)
        KO0RM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      else
        set KO0RM001.XGPCD cursor, bold;
        KO0RW01.KO0RWEFL = "Y";
        converseLib.validationFailed(93);
      end
    end
    ;
  else
    ;
    if (KO0RM001.XGPCD != " ") /* user entered a gpc*/
      set KO0RM001.XGPCD cursor, bold;
      KO0RW01.KO0RWEFL = "Y";
      converseLib.validationFailed(157);
    end
    ;
  end
  ;
  ;
end // end KO0RS2E

// edit adj type
Function KO0RS2F()
  ;
  ;
  if (KO0RM001.KO0RMPGM == "C")
    KO0RM001.KO0RMSDC = "COMM.";
  else
    if (KO0RM001.KO0RMPGM == "M")
      KO0RM001.KO0RMSDC = "MISC.";
    else
      set KO0RM001.KO0RMPGM cursor, bold;
      KO0RW01.KO0RWEFL = "Y";
      converseLib.validationFailed(128);
    end
  end
  ;
  ;
end // end KO0RS2F

// edit rep id
Function KO0RS2G()
  ;
  ;
  set SQLCA empty;
  set VRAGCY02 empty;
  ;
  VRAGCY02.SM1AGYID = KO0RM001.SM1AGYID;
  VRAGCY02.SM4REPID = KO0RM001.SM4REPID;
  VRAGCY02.XXXSTAT = "A";
  ;
  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* record was found*/
    KO0RM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
    KO0RM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
    KO0RM001.XXXMDINT = VRAGCY02.XXXMDINT;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record was not found*/
      KO0RS2H(); /* search for inactive rep*/
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY02";
      TA1REC.TA1LOCAT[1] = "KO0RS2G";
      TA1REC.TA1LOCAT[2] = "IO0400";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0RS2G

// search for inactive rep
Function KO0RS2H()
  ;
  ;
  set SQLCA empty;
  set VRAGCY02 empty;
  ;
  VRAGCY02.SM1AGYID = KO0RM001.SM1AGYID;
  VRAGCY02.SM4REPID = KO0RM001.SM4REPID;
  VRAGCY02.XXXSTAT = "I";
  ;
  call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KO0RM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
      KO0RM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
      KO0RM001.XXXMDINT = VRAGCY02.XXXMDINT;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set KO0RM001.SM4REPID cursor, bold;
        KO0RW01.KO0RWEFL = "Y";
        converseLib.validationFailed(51);
      else
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VRAGCY02";
        TA1REC.TA1LOCAT[1] = "KO0RS2H";
        TA1REC.TA1LOCAT[2] = "IO0400";
        XSKO001(); /* abort*/
      end
    end
    ;
    call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
  else
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY02";
    TA1REC.TA1LOCAT[1] = "KO0RS2H";
    TA1REC.TA1LOCAT[2] = "IO0400";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0RS2H

// edit agency id
Function KO0RS2I()
  ;
  ;
  set SQLCA empty;
  set SM1REC empty;
  ;
  SM1REC.SM1AGYID = KO0RM001.SM1AGYID;
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0RM001.SM1AGYNM = SM1REC.SM1AGYNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KO0RM001.SM1AGYID cursor, bold;
      KO0RW01.KO0RWEFL = "Y";
      converseLib.validationFailed(52);
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      TA1REC.TA1LOCAT[1] = "KO0RS2I";
      TA1REC.TA1LOCAT[2] = "IO0050";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0RS2I

// build adjustment array
Function KO0RS2J()
  ;
  ;
  KO0RS2K(); /* initialize array*/
  ;
  if (KO0RW01.KO0RWEFL == "N") /* no errors exist*/
    ;
    if (KO0RM001.KO0RMPGM == "C") /* adjust program = 'c'*/
      KO0RS2L(); /* build comm adj array*/
    else
      KO0RS2Q(); /* build misc adj array*/
    end
    ;
    if (KO0RW01.KO0RWDMF == "Y") /* display message flag = 'y'*/
      KO0RW01.KO0RWMS1 = KO0RW01.KO0RWTOT;
      KO0RW01.KO0RWMS2 = " RECORDS SELECTED";
      KO0RM001.VAGen_EZEMSG = KO0RW01.KO0RWMSG;
      KO0RW01.KO0RWDMF = "N";
    end
    ;
  end
  ;
  ;
end // end KO0RS2J

// initialize array
Function KO0RS2K()
  ;
  ;
  set KO0RW02 empty; /* initialize w.s. array*/
  ;
  KO0RW01.KO0RWPS1 = 0;
  KO0RW01.KO0RWSB1 = 0;
  KO0RW01.KO0RWWDX = 0;
  KO0RW01.KO0RWTOT = 0;
  KO0RW01.KO0RWAMT = 0;
  KO0RW01.KO0RWFCO = 0;
  KO0RW01.KO0RWTCO = 0;
  ;
  ;
end // end KO0RS2K

// build comm adj array
Function KO0RS2L()
  ;
  ;
  set SQLCA empty;
  set KOHREC empty;
  ;
  KOHREC.KOHADFAG = KO0RW01.KO0RWAGY;
  KOHREC.KOHADFRP = KO0RW01.KO0RWREP;
  KOHREC.XGPCD = KO0RW01.XGPCD;
  KOHREC.KOYADJCD = KO0RW01.KO0RWADJ;
  KOHREC.KOZCSTMO = KO0RW01.KO0RWDTE;
  ;
  call "IO0620" ("SS", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    while (SQLCA.VAGen_SQLCODE == 0) /* ; until end of file*/
      KO0RS2M(); /* ; read records*/
    end
    ;
    call "IO0620" ("CS", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes};
    ;
  else
    TA1REC.TA1DBASE = "DCOMM.";
    TA1REC.TA1TBLVU = "VCOADJ01";
    TA1REC.TA1LOCAT[1] = "KO0RS2L";
    TA1REC.TA1LOCAT[2] = "IO0620";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0RS2L

// read comm adj recs
Function KO0RS2M()
  ;
  ;
  set SQLCA empty;
  ;
  call "IO0620" ("SN", SQLCA, KOHREC) {isNoRefresh = yes, isExternal = yes}; /* read record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    KO0RW01.KO0RWUI1 = KO0RW01.XXXUSRID;
    KO0RW01.KO0RWUI2 = KOHREC.XXXUSRID;
    ;
    if (KO0RW01.KO0RWUI1 == KO0RW01.KO0RWUI2
     || KO0RW01.KO0RWUI1 == " ")
      ;
      if (KO0RW01.KO0RWSB1 == 90 /* comm adj array is full*/
       && KO0RW01.KO0RWBID != 0) /* beginning adj id not 0*/
        KO0RS2N();
      end
      ;
      KO0RS2O(); /* ; move record to array*/
      KO0RS2P(); /* ; add record to totals*/
      ;
    end
    ;
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; not at end of file*/
      TA1REC.TA1DBASE = "DCOMM.";
      TA1REC.TA1TBLVU = "VCOADJ01";
      TA1REC.TA1LOCAT[1] = "KO0RS2M";
      TA1REC.TA1LOCAT[2] = "IO0620";
      XSKO001(); /* ; call abort routine*/
    end
  end
  ;
  ;
end // end KO0RS2M

// compare kohrec/begin adj id
Function KO0RS2N()
  ;
  ;
  if (KO0RW01.KO0RWBID >= KOHREC.KOHADJID)
    KO0RW01.KO0RWPS2 = KO0RW01.KO0RWPS2 + 90;
    KO0RW01.KO0RWSB1 = 0;
    KO0RW01.KO0RWWDX = 0;
    set KO0RW02 empty;
  end
  ;
  ;
end // end KO0RS2N

// move kohrec to array
Function KO0RS2O()
  ;
  ;
  KO0RW01.KO0RWPS1 = KO0RW01.KO0RWPS1 + 1;
  ;
  if (KO0RW01.KO0RWPS1 > KO0RW01.KO0RWPS2
   && KO0RW01.KO0RWSB1 < 90)
    KO0RW01.KO0RWSB1 = KO0RW01.KO0RWSB1 + 1;
    KO0RW02.KO0RWAID[KO0RWSB1] = KOHREC.KOHADJID;
    KO0RW02.KOYADJCD[KO0RWSB1] = KOHREC.KOYADJCD;
    KO0RW02.KO0RWAMT[KO0RWSB1] = KOHREC.KOHADJSL;
    ;
    if (KO0RM001.SM1AGYID == "ALL")
      KO0RW02.KO0RWFCO[KO0RWSB1] = KOHREC.KOHADFCO;
    else
      if (KO0RM001.SM1AGYID == KOHREC.KOHADFAG)
        if (KO0RM001.SM4REPID == KOHREC.KOHADFRP
         || KO0RM001.SM4REPID == 0)
          KO0RW02.KO0RWFAG[KO0RWSB1] = KOHREC.KOHADFAG;
          KO0RW02.KO0RWFRP[KO0RWSB1] = KOHREC.KOHADFRP;
          KO0RW02.KO0RWFCO[KO0RWSB1] = KOHREC.KOHADFCO;
        end
      end
    end
    ;
    if (KO0RM001.SM1AGYID == "ALL")
      KO0RW02.KO0RWTAG[KO0RWSB1] = KOHREC.KOHADTAG;
      KO0RW02.KO0RWTRP[KO0RWSB1] = KOHREC.KOHADTRP;
      KO0RW02.KO0RWTCO[KO0RWSB1] = KOHREC.KOHADTCO;
    else
      if (KO0RM001.SM1AGYID == KOHREC.KOHADTAG)
        if (KO0RM001.SM4REPID == KOHREC.KOHADTRP
         || KO0RM001.SM4REPID == 0)
          KO0RW02.KO0RWTAG[KO0RWSB1] = KOHREC.KOHADTAG;
          KO0RW02.KO0RWTRP[KO0RWSB1] = KOHREC.KOHADTRP;
          KO0RW02.KO0RWTCO[KO0RWSB1] = KOHREC.KOHADTCO;
        end
      end
    end
  end
  ;
  ;
end // end KO0RS2O

// add kohrec to totals
Function KO0RS2P()
  ;
  ;
  KO0RW01.KO0RWTOT = KO0RW01.KO0RWTOT + 1;
  ;
  KO0RW01.KO0RWAMT = KO0RW01.KO0RWAMT + KOHREC.KOHADJSL;
  ;
  if (KO0RM001.SM1AGYID == "ALL")
    KO0RW01.KO0RWFCO = KO0RW01.KO0RWFCO + KOHREC.KOHADFCO;
  else
    if (KO0RM001.SM1AGYID == KOHREC.KOHADFAG)
      if (KO0RM001.SM4REPID == KOHREC.KOHADFRP
       || KO0RM001.SM4REPID == 0)
        KO0RW01.KO0RWFCO = KO0RW01.KO0RWFCO + KOHREC.KOHADFCO;
      end
    end
  end
  ;
  if (KO0RM001.SM1AGYID == "ALL")
    KO0RW01.KO0RWTCO = KO0RW01.KO0RWTCO + KOHREC.KOHADTCO;
  else
    if (KO0RM001.SM1AGYID == KOHREC.KOHADFAG)
      if (KO0RM001.SM4REPID == KOHREC.KOHADFRP
       || KO0RM001.SM4REPID == 0)
        KO0RW01.KO0RWTCO = KO0RW01.KO0RWTCO + KOHREC.KOHADTCO;
      end
    end
  end
  ;
  ;
end // end KO0RS2P

// build misc adj array
Function KO0RS2Q()
  ;
  ;
  set SQLCA empty;
  set KOTREC empty;
  ;
  KOTREC.SM1AGYID = KO0RW01.KO0RWAGY;
  KOTREC.SM4REPID = KO0RW01.KO0RWREP;
  KOTREC.KOYADJCD = KO0RW01.KO0RWADJ;
  KOTREC.KOZCSTMO = KO0RW01.KO0RWDTE;
  ;
  call "IO0670" ("SS", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes}; /* select records*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful select*/
    ;
    while (SQLCA.VAGen_SQLCODE == 0) /* ; until end of file*/
      KO0RS2R(); /* ; read records*/
    end
    ;
    call "IO0670" ("CS", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes}; /* close file*/
    ;
  else
    TA1REC.TA1DBASE = "DCOMM.";
    TA1REC.TA1TBLVU = "VMSADJ01";
    TA1REC.TA1LOCAT[1] = "KO0RS2Q";
    TA1REC.TA1LOCAT[2] = "IO0670";
    XSKO001(); /* ; call abort routine*/
  end
  ;
  ;
end // end KO0RS2Q

// read misc adj recs
Function KO0RS2R()
  ;
  ;
  set SQLCA empty;
  ;
  call "IO0670" ("SN", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    KO0RW01.KO0RWUI1 = KO0RW01.XXXUSRID;
    KO0RW01.KO0RWUI2 = KOTREC.XXXUSRID;
    ;
    if (KO0RW01.KO0RWUI1 == KO0RW01.KO0RWUI2
     || KO0RW01.KO0RWUI1 == " ")
      ;
      if (KO0RW01.KO0RWSB1 == 90 /* comm adj array is full*/
       && KO0RW01.KO0RWBID != 0)
        KO0RS2S();
      end
      ;
      KO0RS2T(); /* move kotrec to array*/
      KO0RS2U(); /* add kotrec to totals*/
      ;
    end
    ;
  else
    if (SQLCA.VAGen_SQLCODE != +100) /* not at end of file*/
      TA1REC.TA1DBASE = "DCOMM.";
      TA1REC.TA1TBLVU = "VMSADJ01";
      TA1REC.TA1TBLKE = KOTREC.KOTKEY;
      TA1REC.TA1LOCAT[1] = "KO0RS2R";
      TA1REC.TA1LOCAT[2] = "IO0670";
      XSKO001(); /* call abort routine*/
    end
  end
  ;
  ;
end // end KO0RS2R

// compare kotrec/begin adj id
Function KO0RS2S()
  ;
  ;
  if (KO0RW01.KO0RWBID >= KOTREC.KOTMADID)
    KO0RW01.KO0RWPS2 = KO0RW01.KO0RWPS2 + 90;
    KO0RW01.KO0RWSB1 = 0;
    set KO0RW02 empty;
  end
  ;
  ;
end // end KO0RS2S

// move kotrec to array
Function KO0RS2T()
  ;
  ;
  KO0RW01.KO0RWPS1 = KO0RW01.KO0RWPS1 + 1;
  ;
  if (KO0RW01.KO0RWPS1 > KO0RW01.KO0RWPS2
   && KO0RW01.KO0RWSB1 < 90)
    KO0RW01.KO0RWSB1 = KO0RW01.KO0RWSB1 + 1;
    KO0RW02.KO0RWAID[KO0RWSB1] = KOTREC.KOTMADID;
    KO0RW02.KOYADJCD[KO0RWSB1] = KOTREC.KOYADJCD;
    KO0RW02.KO0RWAMT[KO0RWSB1] = KOTREC.KOTMADAM;
  end
  ;
  ;
end // end KO0RS2T

// add kotrec to totals
Function KO0RS2U()
  ;
  ;
  KO0RW01.KO0RWTOT = KO0RW01.KO0RWTOT + 1;
  KO0RW01.KO0RWAMT = KO0RW01.KO0RWAMT + KOTREC.KOTMADAM;
  ;
  ;
end // end KO0RS2U

// move array to map
Function KO0RS2V()
  ;
  ;
  if (KO0RW01.KO0RWBID != 0) /* begin adj id not = 0*/
    KO0RS2W(); /* reposition array*/
  end
  ;
  KO0RW01.KO0RWMDX = 9; /* re-set map index*/
  while (KO0RW01.KO0RWMDX > 0)
    ;
    KO0RW01.KO0RWSB1 = KO0RW01.KO0RWWDX + KO0RW01.KO0RWMDX;
    ;
    if (KO0RW01.KO0RWWDX > 90)
      KO0RM001.KOYADJCD[KO0RWMDX] = " ";
      KO0RM001.KO0RMFAG[KO0RWMDX] = " ";
      KO0RM001.KO0RMTAG[KO0RWMDX] = " ";
      KO0RM001.KO0RMAID[KO0RWMDX] = 0;
      KO0RM001.KO0RMAMT[KO0RWMDX] = 0;
      KO0RM001.KO0RMFRP[KO0RWMDX] = 0;
      KO0RM001.KO0RMFCO[KO0RWMDX] = 0;
      KO0RM001.KO0RMTRP[KO0RWMDX] = 0;
      KO0RM001.KO0RMTCO[KO0RWMDX] = 0;
    else
      KO0RM001.KO0RMAID[KO0RWMDX] = KO0RW02.KO0RWAID[KO0RWSB1];
      KO0RM001.KOYADJCD[KO0RWMDX] = KO0RW02.KOYADJCD[KO0RWSB1];
      KO0RM001.KO0RMAMT[KO0RWMDX] = KO0RW02.KO0RWAMT[KO0RWSB1];
      KO0RM001.KO0RMFAG[KO0RWMDX] = KO0RW02.KO0RWFAG[KO0RWSB1];
      KO0RM001.KO0RMFRP[KO0RWMDX] = KO0RW02.KO0RWFRP[KO0RWSB1];
      KO0RM001.KO0RMFCO[KO0RWMDX] = KO0RW02.KO0RWFCO[KO0RWSB1];
      KO0RM001.KO0RMTAG[KO0RWMDX] = KO0RW02.KO0RWTAG[KO0RWSB1];
      KO0RM001.KO0RMTRP[KO0RWMDX] = KO0RW02.KO0RWTRP[KO0RWSB1];
      KO0RM001.KO0RMTCO[KO0RWMDX] = KO0RW02.KO0RWTCO[KO0RWSB1];
    end
    KO0RW01.KO0RWMDX = KO0RW01.KO0RWMDX - 1;
    ;
  end
  ;
  KO0RW01.KO0RWSB1 = KO0RW01.KO0RWPS2 + KO0RW01.KO0RWWDX + 9;
  ;
  if (KO0RW01.KO0RWSB1 >= KO0RW01.KO0RWTOT)
    KO0RM001.KO0RMTTL = "TOTAL:";
    KO0RM001.KO0RMTL1 = KO0RW01.KO0RWAMT;
    KO0RM001.KO0RMTL2 = KO0RW01.KO0RWFCO;
    KO0RM001.KO0RMTL3 = KO0RW01.KO0RWTCO;
  else
    KO0RM001.KO0RMTTL = " ";
    KO0RM001.KO0RMTL1 = 0;
    KO0RM001.KO0RMTL2 = 0;
    KO0RM001.KO0RMTL3 = 0;
  end
  ;
  ;
  KO0RM001.KO0RMBID = 0; /* re-set map begin adj id*/
  KO0RW01.KO0RWBID = 0; /* re-set ws begin adj id*/
  ;
  ;
end // end KO0RS2V

// reposition array
Function KO0RS2W()
  ;
  ;
  KO0RW01.KO0RWWDX = 0; /* re-set array index*/
  KO0RW01.KO0RWSB1 = 1; /* re-set w.s. index 1*/
  KO0RW01.KO0RWSB2 = 10; /* re-set w.s. index 2*/
  ;
  while (KO0RW01.KO0RWSB1 < 90 /* w.s. index 1 <= 90*/
   && KO0RW01.KO0RWSB2 < 90) /* w.s. index 2 < = 90*/
    ;
    if (KO0RW02.KO0RWAID[KO0RWSB1] > KO0RW01.KO0RWBID)
      KO0RW01.KO0RWSB1 = 90;
      KO0RW01.KO0RWSB2 = 90;
    else
      KO0RW01.KO0RWWDX = KO0RW01.KO0RWSB1 - 1;
      if (KO0RW02.KO0RWAID[KO0RWSB2] >= KO0RW01.KO0RWBID
       || KO0RW02.KO0RWAID[KO0RWSB2] == 0)
        KO0RW01.KO0RWSB1 = 90;
        KO0RW01.KO0RWSB1 = 90;
      else
        KO0RW01.KO0RWSB1 = KO0RW01.KO0RWSB1 + 9;
        KO0RW01.KO0RWSB2 = KO0RW01.KO0RWSB2 + 9;
      end
    end
  end
  ;
  ;
end // end KO0RS2W

// validate fast path usage
Function KO0RS3A()
  ;
  ;
  if (converseVar.eventKey is enter) /* user pressed enter key*/
    COMMAREA.CATOAP = KO0RM001.CATOAP;
    COMMAREA.CAITEM = KO0RM001.CAITEM;
    XSEXIT();
    KO0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  else
    KO0RW01.KO0RWEFL = "Y";
    converseLib.validationFailed(1);
  end
  ;
  ;
end // end KO0RS3A

// validate attention key
Function KO0RS4A()
  ;
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    KO0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KO0RW01.KO0RWEFL = "Y";
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "KO0A";
      XSEXIT();
      KO0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      KO0RW01.KO0RWEFL = "Y";
    else
      if (converseVar.eventKey is pf4
       || converseVar.eventKey is pa2)
        XSPF4();
        KO0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        KO0RW01.KO0RWEFL = "Y";
      else
        if (converseVar.eventKey is enter
         || converseVar.eventKey is pf7
         || converseVar.eventKey is pf8)
          KO0RS4B();
        else
          KO0RW01.KO0RWEFL = "Y";
          converseLib.validationFailed(2);
        end
      end
    end
  end
  ;
  ;
end // end KO0RS4A

// edit screen changes
Function KO0RS4B()
  ;
  ;
  KO0RS4C(); /* check for key changes*/
  ;
  if (converseVar.eventKey is pf7) /* user requested scroll back*/
    KO0RS4D(); /* scroll back thru data*/
  else
    if (converseVar.eventKey is pf8) /* user requested scroll forward*/
      KO0RS4E(); /* scroll forward thru data*/
    else
      KO0RS4F(); /* process enter key*/
    end
  end
  ;
  ;
end // end KO0RS4B

// check for key changes
Function KO0RS4C()
  ;
  ;
  KO0RW01.KO0RWKCF = "N"; /* re-set key changes flag*/
  ;
  if (KO0RM001.KO0RMCMM != KO0RW01.KO0RWMM
   || KO0RM001.KO0RMCYY != KO0RW01.KO0RWYY
   || KO0RM001.SM1AGYID != KO0RW01.KO0RWAGY
   || KO0RM001.SM4REPID != KO0RW01.KO0RWREP
   || KO0RM001.KO0RMPGM != KO0RW01.KO0RWPGM
   || KO0RM001.KO0RMADJ != KO0RW01.KO0RWADJ
   || KO0RM001.XGPCD != KO0RW01.XGPCD
   || KO0RM001.XXXUSRID != KO0RW01.XXXUSRID)
    KO0RW01.KO0RWKCF = "Y";
  end
  ;
  ;
end // end KO0RS4C

// scroll back thru data
Function KO0RS4D()
  ;
  ;
  if (KO0RW01.KO0RWKCF == "Y") /* key data was changed*/
    KO0RW01.KO0RWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(159);
  else
    KO0RW01.KO0RWDSF = "Y"; /* set display screen flag*/
    KO0RW01.KO0RWWDX = KO0RW01.KO0RWWDX - 9;
    if (KO0RW01.KO0RWWDX < 0)
      KO0RW01.KO0RWPS2 = KO0RW01.KO0RWPS2 - 90;
      if (KO0RW01.KO0RWPS2 >= 0)
        KO0RW01.KO0RWBAF = "Y";
      else
        KO0RW01.KO0RWPS2 = 0;
        KO0RW01.KO0RWWDX = 0;
        converseLib.validationFailed(70);
      end
    end
  end
  ;
  ;
end // end KO0RS4D

// scroll forward thru data
Function KO0RS4E()
  ;
  ;
  if (KO0RW01.KO0RWKCF == "Y")
    KO0RW01.KO0RWEFL = "Y";
    converseLib.validationFailed(159);
  else
    KO0RW01.KO0RWDSF = "Y";
    KO0RW01.KO0RWSB1 = KO0RW01.KO0RWWDX;
    KO0RW01.KO0RWSB1 = KO0RW01.KO0RWSB1 + KO0RW01.KO0RWPS2;
    KO0RW01.KO0RWSB1 = KO0RW01.KO0RWSB1 + 9;
    if (KO0RW01.KO0RWSB1 >= KO0RW01.KO0RWTOT)
      converseLib.validationFailed(68);
    else
      KO0RW01.KO0RWSB1 = KO0RW01.KO0RWSB1 - KO0RW01.KO0RWPS2;
      if (KO0RW01.KO0RWSB1 < 90)
        KO0RW01.KO0RWWDX = KO0RW01.KO0RWSB1;
      else
        KO0RW01.KO0RWPS2 = KO0RW01.KO0RWPS2 + 90;
        KO0RW01.KO0RWWDX = 0;
        KO0RW01.KO0RWBAF = "Y";
      end
    end
  end
  ;
  ;
end // end KO0RS4E

// process enter key
Function KO0RS4F()
  ;
  ;
  if (KO0RW01.KO0RWKCF == "Y") /* key changes flag = 'y'*/
    KO0RS4G(); /* save key fields*/
  else
    if (KO0RM001.KO0RMBID != 0) /* user entered begin adj id*/
      KO0RS4H(); /* edit begin adj id*/
    else
      KO0RS4I(); /* clear screen*/
    end
  end
  ;
  ;
end // end KO0RS4F

// save key fields
Function KO0RS4G()
  ;
  ;
  KO0RW01.KO0RWMM = KO0RM001.KO0RMCMM;
  KO0RW01.KO0RWYY = KO0RM001.KO0RMCYY;
  ;
  if (KO0RM001.KO0RMCYY > 70)
    KO0RW01.KO0RWCC = 19;
  else
    KO0RW01.KO0RWCC = 20;
  end
  ;
  KO0RW01.KO0RWAGY = KO0RM001.SM1AGYID;
  KO0RW01.KO0RWREP = KO0RM001.SM4REPID;
  KO0RW01.KO0RWPGM = KO0RM001.KO0RMPGM;
  KO0RW01.XGPCD = KO0RM001.XGPCD;
  KO0RW01.KO0RWADJ = KO0RM001.KO0RMADJ;
  KO0RW01.KO0RWBID = KO0RM001.KO0RMBID;
  KO0RW01.XXXUSRID = KO0RM001.XXXUSRID;
  ;
  KO0RW01.KO0RWDSF = "Y";
  KO0RW01.KO0RWBSF = "Y";
  ;
  KO0RW01.KO0RWPS2 = 0;
  ;
  ;
end // end KO0RS4G

// edit begin adj id
Function KO0RS4H()
  ;
  ;
  KO0RW01.KO0RWAFF = "N"; /* re-set array found flag*/
  KO0RW01.KO0RWSB1 = 1; /* set w.s. index 1*/
  KO0RW01.KO0RWSB2 = 9; /* set w.s. index 2*/
  ;
  while (KO0RW01.KO0RWAFF == "N" /* while adj found flag = 'n'*/
   && KO0RW01.KO0RWSB1 <= 90  /* and index 1 < 90*/
   && KO0RW01.KO0RWSB2 <= 90) /* and index 2 < 90*/
    ;
    if (KO0RW02.KO0RWAID[KO0RWSB1] >= KO0RM001.KO0RMBID)
      KO0RW01.KO0RWSB1 = 91;
      KO0RW01.KO0RWSB2 = 91;
    else
      if (KO0RW02.KO0RWAID[KO0RWSB2] >= KO0RM001.KO0RMBID
       || KO0RW02.KO0RWAID[KO0RWSB2] == 0)
        KO0RW01.KO0RWAFF = "Y";
      else
        KO0RW01.KO0RWSB1 = KO0RW01.KO0RWSB1 + 9;
        KO0RW01.KO0RWSB2 = KO0RW01.KO0RWSB2 + 9;
      end
    end
  end
  ;
  if (KO0RW01.KO0RWAFF == "Y")
    KO0RW01.KO0RWWDX = KO0RW01.KO0RWSB1 - 1;
    KO0RW01.KO0RWDSF = "Y";
    KO0RM001.KO0RMBID = 0;
  else
    KO0RW01.KO0RWBID = KO0RM001.KO0RMBID;
    KO0RW01.KO0RWDSF = "Y";
    KO0RW01.KO0RWBAF = "Y";
    KO0RM001.KO0RMBID = 0;
    KO0RW01.KO0RWPS2 = 0;
    KO0RW01.KO0RWWDX = 0;
  end
  ;
  ;
end // end KO0RS4H

// edit w.s. key fields
Function KO0RS4I()
  ;
  ;
  if (KO0RW01.KO0RWAGY == " "
   && KO0RW01.KO0RWPGM == " "
   && KO0RW01.XGPCD == " "
   && KO0RW01.KO0RWREP == 0
   && KO0RW01.KO0RWBID == 0)
    KO0RW01.KO0RWDSF = "Y";
    KO0RW01.KO0RWBSF = "Y";
  else
    set KO0RM001 initial;
    set KO0RW02 empty;
    KO0RW01.KO0RWDTE = KOZREC.KOZCSTMO;
    KO0RM001.KO0RMCMM = KO0RW01.KO0RWMM;
    KO0RM001.KO0RMCYY = KO0RW01.KO0RWYY;
    KO0RW01.KO0RWAGY = " ";
    KO0RW01.KO0RWPGM = " ";
    KO0RW01.XGPCD = " ";
    KO0RW01.KO0RWREP = 0;
    KO0RW01.KO0RWBID = 0;
    KO0RW01.KO0RWPS2 = 0;
    KO0RW01.KO0RWWDX = 0;
  end
  ;
  ;
end // end KO0RS4I

//*** RECORD=KO0RW01 ****
// *******************  ko0rw01 record  ***********************
// this is a working storage record for keeping track of
// general indexs,keys etc.
// 
// 
// 
// ************************************************************
// maintenance:
// 
// rev.
// number  who      when      why
// ------  ------   -------   ---------------------------------
//   00    jricha   02-18-87  created record
// 
// 
// ************************************************************
// ***********************
Record KO0RW01 type basicRecord
  5 KO0RW01G KO0RW01G ; 
    10 CAITEM CAITEM ; 
      15 KO0RWAGY KO0RWAGY ; 
      15 KO0RWREP KO0RWREP ; 
      15 KO0RWPGM KO0RWPGM ; 
      15 XGPCD XGPCD ; 
      15 KO0RWADJ KO0RWADJ ; 
      15 KO0RWBID KO0RWBID ; 
      15 * char(1) ; 
    10 XXXUSRID XXXUSRID ; 
    10 KO0RWUI1 KO0RWUI1 ; 
    10 KO0RWUI2 KO0RWUI2 ; 
    10 KO0RWDTE KO0RWDTE ; 
      15 * num(3) ; 
      15 KO0RWCC KO0RWCC ; 
      15 KO0RWYY KO0RWYY ; 
      15 KO0RWMM KO0RWMM ; 
    10 KO0RWTOT KO0RWTOT ; 
    10 KO0RWPS1 KO0RWPS1 ; 
    10 KO0RWPS2 KO0RWPS2 ; 
    10 KO0RWWDX KO0RWWDX ; 
    10 KO0RWMDX KO0RWMDX ; 
    10 KO0RWMSG KO0RWMSG ; 
      15 KO0RWMS1 KO0RWMS1 ; 
      15 KO0RWMS2 KO0RWMS2 ; 
    10 KO0RWKCF KO0RWKCF ; 
    10 KO0RWEFL KO0RWEFL ; 
    10 KO0RWDSF KO0RWDSF ; 
    10 KO0RWBSF KO0RWBSF ; 
    10 KO0RWBAF KO0RWBAF ; 
    10 KO0RWAFF KO0RWAFF ; 
    10 KO0RWDMF KO0RWDMF ; 
    10 KO0RWSB1 KO0RWSB1 ; 
    10 KO0RWSB2 KO0RWSB2 ; 
    10 KO0RWAMT KO0RWAMT ; 
    10 KO0RWFCO KO0RWFCO ; 
    10 KO0RWTCO KO0RWTCO ; 
end // end KO0RW01

//*** RECORD=KO0RW02 ****
// ******************* ko0rw02 record  ************************
// this is a working storage record for keeping track of upto
// 500 detail adjustment records.
// this limit most likely will not be exceeded.
// 
// ***********************************************************
// maintenance history
// 
// when        who      why
// --------   ------   ---------------------------------------
// 02-18-87   jricha   created record
// 
// 
// ***********************************************************
// ***********************
Record KO0RW02 type basicRecord
  10 KO0RWGRP KO0RWGRP [90] ; 
    15 KO0RWAID KO0RWAID ; 
    15 KOYADJCD KOYADJCD ; 
    15 KO0RWAMT KO0RWAMT ; 
    15 KO0RWFAG KO0RWFAG ; 
    15 KO0RWFRP KO0RWFRP ; 
    15 KO0RWFCO KO0RWFCO ; 
    15 KO0RWTRP KO0RWTRP ; 
    15 KO0RWTAG KO0RWTAG ; 
    15 KO0RWTCO KO0RWTCO ; 
end // end KO0RW02

// ko0rw01 group
DataItem KO0RW01G char(145)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjustment code requested
DataItem KO0RWADJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adj found flag
DataItem KO0RWAFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales agency id
DataItem KO0RWAGY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map comm. adjustment id.
DataItem KO0RWAID num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// comm. sales amount.
DataItem KO0RWAMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// build array flag
DataItem KO0RWBAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning adj id
DataItem KO0RWBID num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// build screen flag
DataItem KO0RWBSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date centery
DataItem KO0RWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display message flag
DataItem KO0RWDMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display screen flag
DataItem KO0RWDSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date hold area
DataItem KO0RWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag trigger
DataItem KO0RWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// the agency the adj. is from
DataItem KO0RWFAG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comm. $ adj. from
DataItem KO0RWFCO decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// the rep. the adj. is from
DataItem KO0RWFRP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ko0rw02 group
DataItem KO0RWGRP char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key changes flag
DataItem KO0RWKCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map area index
DataItem KO0RWMDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date month
DataItem KO0RWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// application error message 1
DataItem KO0RWMS1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// application error message 2
DataItem KO0RWMS2 char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error message
DataItem KO0RWMSG char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KO0RWPGM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage position 1
DataItem KO0RWPS1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage position 2
DataItem KO0RWPS2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep id
DataItem KO0RWREP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working storage subscript1
DataItem KO0RWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage subscript2
DataItem KO0RWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// the agency the adj. is to
DataItem KO0RWTAG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comm. $ adj. to
DataItem KO0RWTCO decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total # of records selected
DataItem KO0RWTOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// the rep. the adj. is to
DataItem KO0RWTRP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user id 1st 4 char - 1
DataItem KO0RWUI1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id 1st 4 char - 2
DataItem KO0RWUI2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage index
DataItem KO0RWWDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date year
DataItem KO0RWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

