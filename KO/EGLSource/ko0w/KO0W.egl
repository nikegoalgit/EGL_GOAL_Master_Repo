package ko0w;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCLTBL;
import corpx1.XDMCD;
import corpx1.XDMTBL;
import corpx1.XGPABRV;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XLCABRV;
import corpx1.XLCCD;
import corpx1.XLCCD1;
import corpx1.XLCCD2;
import corpx1.XLCCD3;
import corpx1.XLCCD4;
import corpx1.XLCTBL;
import corpx1.XPRTBL;
import corpx1.XQATBL;
import corpx1.XRCTBL;
import corpx2.XPRABRV;
import corpx2.XQAABRV;
import corpx2.XQACD;
import corpx2.XSMTYPCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZSDT;
import ko.common.KOFCOMCD;
import ko.common.KOXREC;
import sy.common.SY1REC;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import sy.common.SY2CEDT1;
import sy.common.SY2CEDT2;
import sy.common.SY2CEDT3;
import sy.common.SY2CEDT4;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KO0W ****
//           ko0w - product commission rate inquiry
// 
// this application displays commission information as it
// applies to specific products.  it consists of two screens,
// ko0wm001, product commission rate inquiry and ko0wm002 -
// product commission rate history inquiry.
// 
// the first screen displays commission information for all
// colors for a given style.  to prompt this information, the
// gpc, style, life cycle and quality code must first be typed
// in the header area.  only the most current commission record
// is displayed on this first screen.  if a color's commission
// information was changed, a history record was created.
// history is indicated by the field label "hfl" and indicates
// how many times the color has had its commission information
// changed.  a selection field ("se", left margin) is used to
// prompt display of history.  you can select one or more
// colors to display history by typing the letter s in this
// field next to the desired color.  if all colors are desired,
// type the letter a in the "se" field on the first line entry.
// if the history flag field indicates the number 1, this is
// the only existing record for that color.  if no selections
// of colors having history are made from this screen, pressing
// enter refreshes the screen.
// 
// for colors selected, press enter to prompt display of the
// history screen.  then press enter to prompt display of the
// next color's history.  from this screen you can go back to
// the first screen at any time by pressing pf16.  the first
// screen displays with all original data in tact, but the
// colors that have had history viewed now show the letter v
// in the selection field.  press enter to continue display
// of any remaining history to be viewed.  when all selected
// colors have been viewed, display returns to a clean
// ko0wm001 screen.
// 
// ------------------------------------------------------------
// the numbering scheme used for this application pretty
// much follows that of the add/change application, ko0x.
// 
// processes:
// ko0w001 - initialize the appication
// ko0w005 - display ko0wm001 screen
// ko0w010 - retrieve data from db2
// ko0w015 - display ko0wm001 screen with data
// ko0w030 - retrieve history from db2
// ko0w035 - display ko0wm002 screen with history
// 
// statement groups:
// ko0wsab - check pf keys
// ko0wsad - validate key fields
// ko0wsaf - validate quality code
// ko0wsag - validate life cycle code
// ko0wsah - validate gpc code
// ko0wsba - validate and retrieve style # and name
// ko0wsbc - retrieve koxrec for commission info - 'ss'
// ko0wsbd - move ko0ww01 to ko0wm001
// ko0wsbe - retrieve sy2rec for color info 's'
// ko0wsbh - retrieve next koxrec record - 'sn'
// ko0wsbj - close koxrec 'cs'
// ko0wsca - check if map key data has changed
// ko0wscb - check pf keys
// ko0wscc - set screen fields normal
// ko0wscj - process pf7 key
// ko0wsck - process pf8 key
// ko0wscl - process enter key
// ko0wsco - clear key fields
// ko0wscp - if 'a', set all fields to 's' select
// ko0wsfa - prepare for getting history records
// ko0wsfc - set up 'ss' for koxrec history record
// ko0wsfd - retrieve next koxrec record 'sn'
// ko0wsfe - move koxrec comm info the ko0ww02
// ko0wsfh - move ko0ww02 commission info to ko0wm002
// ko0wsff - move ko0ww02 header info to k00wm002
// ko0wsfi - move ko0ww01 header info to ko0ww02
// ko0wsfj - move ko0ww02 life cycle info to ko0wm002
// ko0wsfg - close koxrec 'cs'
// ko0wsgb - check pf keys
// ko0wsgc - set ko0wm002 fields normal
// ko0wsgl - check if header key changed
// xspf1   - transfer to the help system
// xspf4   - transfer to the main menu
// xsexit  - transfer to the requested appl
// xsko001 - error abort routine
// 
// ------------------------------------------------------------
// date created:  march 5, 1987
// 
// maintenance:
// 
// init   date      reason
// -------------------------------------------------------
// ob     3-4-87    created appication
// jwood 12-21-88   added noncsp option to calls
// jwood 12-21-88   added xssegtr logic
// AIVERS10-09-92   REGEN FOR DATABASE CHANGES.
// RPATTE 02-25-94  DB2 TBLCHGS.  DELETE XRCCD.
// 
// 
// *********************
Program KO0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO0WW01 KO0WW01; // record
  KO0WW02 KO0WW02; // record
  KO0WW04 KO0WW04; // record
  KOXREC KOXREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XLCTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XRCTBL {deleteAfterUse = yes}; // table
  use XCLTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use KO0WM.KO0WM001,  // forms
      KO0WM.KO0WM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0W001: KO0W001();
    ;
    ;
    ;
    if (KO0WW04.XGPCD > " ")
      goto KO0W010; /* validate and retrieve data*/
    else
      goto KO0W005;
    end
    ;
    ;
    ;
    KO0W005: KO0W005();
    ;
    ;
     /* ********************************************/
    ;
    if (KO0WW04.KO0WWEFL == "Y"
     || converseVar.validationMsgNum > 0)
      goto KO0W005;
    else
      goto KO0W010;
    end
    ;
    ;
    ;
    KO0W010: KO0W010();
    ;
    ;
         /* **********************************************/
         /* *                                           **/
         /* *                                           **/
         /* **********************************************/
    goto KO0W015;
    ;
    ;
    ;
    KO0W015: KO0W015();
    ;
    ;
    ;
    if (KO0WW04.KO0WWKFL == "Y")
      goto KO0W010;
    else
      if (KO0WW04.KO0WWEFL == "Y")
        goto KO0W015;
      else
        if (converseVar.eventKey is pf7
         || converseVar.eventKey is pf8)
          goto KO0W015;
        else
          if (converseVar.eventKey is enter)
            if (KO0WW04.KO0WWFFL == "H") /* retrieve history*/
              goto KO0W030;
            else
              if (KO0WM001.KO0WMSEL[KO0WWMDX] != "S"
               || KO0WM001.KO0WMSEL[1] != "A"
               || KO0WM001.KO0WMSEL[KO0WWMDX] != " ")
                converseLib.validationFailed(87);
                goto KO0W015;
              else
                goto KO0W005;
              end
            end
          end
        end
      end
    end
    ;
    ;
    ;
    KO0W030: KO0W030();
    ;
    ;
    ;
    if (KO0WW04.KO0WWFIN == "Y")
      ;
      set SQLCA empty;
      set ERRSQLCA empty;
      set KOXREC empty;
      set KO0WW01 empty;
      set KO0WW02 empty;
      set KO0WW04 empty;
      set SY1REC empty;
      set SY2REC empty;
      set KO0WM001 initial;
      set KO0WM002 initial;
      ;
      goto KO0W005;
    else
      if (KO0WW04.KO0WWEFL == "Y")
        goto KO0W015;
      else
        goto KO0W035;
      end
    end
    ;
    ;
    ;
    KO0W035: KO0W035();
    ;
    ;
    if (KO0WW04.KO0WWKFL == "Y")
      goto KO0W010;
    else
      if (KO0WW04.KO0WWEFL == "Y")
        goto KO0W035; /* redisplay ko0wm002 due to error*/
      else
        if (converseVar.eventKey is pf16)
          goto KO0W010; /* display ko0wm001 map w/original data*/
        else /* and 'v' showing viewed selections*/
          if (converseVar.eventKey is enter
           && KO0WW04.KO0WWFIN == "Y") /* display clean screen ko0wm001*/
            goto KO0W005;
          else
            set KO0WM002 empty;
            goto KO0W030;
          end
        end
      end
    end
  end // end main
end // end KO0W

// set rec. & maps empty
Function KO0W001()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  ;
  XSENTRY();
  ;
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set KOXREC empty;
  set KO0WW01 empty;
  set KO0WW02 empty;
  set KO0WW04 empty;
  set SY1REC empty;
  set SY2REC empty;
  set KO0WM001 initial;
  set KO0WM002 initial;
  ;
  ;
  if (COMMAREA.CAITEM > " ")
    KO0WW04.KO0WWKEY = COMMAREA.CAITEM;
    KO0WM001.XGPCD = KO0WW04.XGPCD;
    KO0WM001.SY1STNBR = KO0WW04.SY1STNBR;
    KO0WM001.XLCCD = KO0WW04.XLCCD;
    KO0WM001.XQACD = KO0WW04.XQACD;
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
  else
    /* next sentence*/
  end
  ;
  ;
  ;
  ;
end // end KO0W001

// display ko0wm001 screen
Function KO0W005()
  ;
       /* **********************************************/
       /* *    display ko0wm001 screen                **/
       /* *                                           **/
       /* **********************************************/
  ;
  ;
  KO0WM001.XXXCURDT = VGVar.currentShortGregorianDate;
  KO0WM001.XXXPRCNM = "KO0W005";
  ;
  set KO0WM001.XGPCD cursor;
  ;
  KO0WW04.KO0WWMDX = 1;
  while (KO0WW04.KO0WWMDX < 11)
    set KO0WM001.KO0WMSEL[KO0WWMDX] skip, invisible;
    KO0WW04.KO0WWMDX = KO0WW04.KO0WWMDX + 1;
  end
  ;
  ;
   /* ***********************************************************/
  converse KO0WM001 ;
   /* ***********************************************************/
  ;
  ;
  KO0WSAB(); /* check pf keys*/
  ;
  ;
  ;
  ;
  ;
end // end KO0W005

// retrieve data from db2
Function KO0W010()
  ;
  ;
       /* **********************************************/
       /* *        retrieve data from db2             **/
       /* *                                           **/
       /* **********************************************/
  ;
  KO0WSAD(); /* validate key ko0wm001 fields*/
  ;
  if (KO0WW04.KO0WWEFL == "Y")
    exit stack;
  else
    /* next sentence*/
  end
  ;
  ;
  ;
  KO0WSBA(); /* validate style # and retrieve style name*/
  ;
  ;
  ;
  ;
  KO0WSBC(); /* retrieve data*/
  ;
  ;
  KO0WW01.XGPCD = KO0WM001.XGPCD;
  KO0WW01.XGPABRV = KO0WM001.XGPABRV;
  KO0WW01.SY1STNBR = KO0WM001.SY1STNBR;
  KO0WW01.SY1STYNM = KO0WM001.SY1STYNM;
  KO0WW01.XLCCD = KO0WM001.XLCCD;
  KO0WW01.XLCABRV = KO0WM001.XLCABRV;
  KO0WW01.XQACD = KO0WM001.XQACD;
  KO0WW01.XQAABRV = KO0WM001.XQAABRV;
  ;
  ;
  if (KO0WW04.KO0WWEFL == "N")
    KO0WW04.KO0WWDTC = KO0WW04.KO0WWTOT; /* tot # colors retrvd*/
    KO0WW04.KO0WWDSP = " ";
    KO0WW04.KO0WWDCD = " COLORS SELECTED ";
    KO0WM001.XXXMSG = KO0WW04.KO0WWDCL;
    converseLib.validationFailed(87);
  else
     /* next sentence*/
  end
  ;
  ;
  KO0WW04.KO0WWCDX = 1;
  KO0WW04.KO0WWMDX = 1;
  KO0WW04.KO0WWTOP = 1;
  ;
  ;
  KO0WSBD();
                                   /* move working storage data to ko0wm001*/
  ;
  ;
  ;
end // end KO0W010

// display retrieved data
Function KO0W015()
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  KO0WM001.XXXCURDT = VGVar.currentShortGregorianDate;
  KO0WM001.XXXPRCNM = "KO0W015";
  ;
  ;
  ;
  if (KO0WW04.KO0WWEFL == "Y")
     /* next sentence*/
  else
    KO0WW04.KO0WWDTC = KO0WW04.KO0WWTOT; /* tot # colors retrvd*/
    KO0WW04.KO0WWDSP = " ";
    KO0WW04.KO0WWDCD = " COLORS SELECTED ";
    KO0WM001.XXXMSG = KO0WW04.KO0WWDCL;
    converseLib.validationFailed(87);
    KO0WSCC(); /* set fields defined*/
    ;
    ;
  end
  ;
  KO0WW04.KO0WWMDX = 1;
  while (KO0WW04.KO0WWMDX <= 10)
    if (KO0WM001.XSMTYPCD[KO0WWMDX] == " ")
      set KO0WM001.KO0WMSEL[KO0WWMDX] skip, invisible;
    else
      /* next sentence*/
    end
    KO0WW04.KO0WWMDX = KO0WW04.KO0WWMDX + 1;
  end
  ;
  ;
   /* ***********************************************************/
  converse KO0WM001 ;
   /* ***********************************************************/
  ;
  ;
  KO0WSCB(); /* check pf keys*/
  ;
  KO0WSCA();
                                   /* check that key fields are not changed*/
  ;
  ;
  ;
  if (converseVar.eventKey is pf7)
    KO0WSCJ(); /* process pf7*/
    exit stack;
  else
    /* next sentence*/
  end
  ;
  if (converseVar.eventKey is pf8)
    KO0WSCK(); /* process pf8*/
    exit stack;
  else
    /* next sentence*/
  end
  ;
  if (converseVar.eventKey is enter)
    KO0WSCL(); /* process enter*/
    exit stack;
  end
  ;
  ;
  ;
  ;
end // end KO0W015

// retrieve history records
Function KO0W030()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  KO0WW04.KO0WWFIN = "Y";
  ;
  KO0WSFA(); /* retrieve all prod. comm. fields with 's' from ko0ww01*/
  ;
  ;
  KO0WSFF(); /* move ko0ww02 to ko0wm002*/
  ;
  ;
end // end KO0W030

// display history
Function KO0W035()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  ;
  KO0WM002.XXXCURDT = VGVar.currentShortGregorianDate;
  KO0WM002.XXXPRCNM = "KO0W035";
  ;
  KO0WSGC(); /* set fields defined*/
  ;
   /* ***********************************************************/
  converse KO0WM002 ;
   /* ***********************************************************/
  ;
  ;
  KO0WSGB(); /* check pf keys*/
  ;
  KO0WSGL(); /* check if header key has chg.*/
  ;
  ;
  ;
  ;
  ;
end // end KO0W035

// check pf keys
Function KO0WSAB()
  ;
  ;
  ;
  ;
  if (converseVar.eventKey is pf5)
    exit program;
  else /* next sentence*/
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
    KO0WM001.XXXMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf4)
      XSPF4();
      KO0WM001.XXXMSG = COMMAREA.CAMSG;
      return;
    else
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pa2)
        COMMAREA.CATOAP = "KO0A";
        XSEXIT();
        KO0WM001.XXXMSG = COMMAREA.CAMSG;
        return;
      else
        if (KO0WM001.CATOAP != " ")
          if (converseVar.eventKey is enter)
            COMMAREA.CATOAP = KO0WM001.CATOAP;
            COMMAREA.CAITEM = KO0WM001.CAITEM;
            XSEXIT();
            KO0WM001.XXXMSG = COMMAREA.CAMSG;
            exit stack;
          else
            set KO0WM001.CATOAP cursor, bold;
            converseLib.validationFailed(1);
            exit stack;
          end
        else
          if (converseVar.eventKey is enter)
            return;
          else
            converseLib.validationFailed(2);
          end
        end
      end
    end
  end
end // end KO0WSAB

// validate screen fields
Function KO0WSAD()
  ;
  ;
  ;
  if (KO0WM001.XQACD == " ")
    converseLib.validationFailed(38); /* this is a requried field*/
    KO0WW04.KO0WWEFL = "Y";
    set KO0WM001.XQACD cursor, bold;
  else
    KO0WSAF(); /* validate quality code*/
  end
  ;
  ;
  if (KO0WM001.XLCCD == " ")
    converseLib.validationFailed(38); /* this is a required field*/
    KO0WW04.KO0WWEFL = "Y";
    set KO0WM001.XLCCD cursor, bold;
  else
    KO0WSAG(); /* validate life cycle code*/
  end
  ;
  ;
  if (KO0WM001.SY1STNBR == " ")
    converseLib.validationFailed(38); /* this is a required field*/
    KO0WW04.KO0WWEFL = "Y";
    set KO0WM001.SY1STNBR cursor, bold;
  else
    ;
  end
  ;
  ;
  if (KO0WM001.XGPCD == " ")
    converseLib.validationFailed(38); /* this is a required field*/
    KO0WW04.KO0WWEFL = "Y";
    set KO0WM001.XGPCD cursor, bold;
  else
    KO0WSAH(); /* validate gpc code*/
  end
  ;
  ;
  ;
end // end KO0WSAD

// validate quality code
Function KO0WSAF()
  ;
  ;
  if (KO0WM001.XQACD in XQATBL.XQACD)
    KO0WM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
    KO0WW01.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(89); /* invalid quality code*/
    KO0WM001.XQAABRV = " ";
    KO0WW04.KO0WWEFL = "Y";
    set KO0WM001.XQACD cursor, bold;
  end
  ;
  ;
end // end KO0WSAF

// validate l.c. code
Function KO0WSAG()
  ;
  ;
  if (KO0WM001.XLCCD in XLCTBL.XLCCD)
    KO0WM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(91); /* life cycle code does not exist*/
    KO0WW04.KO0WWEFL = "Y";
    set KO0WM001.XLCCD cursor, bold;
  end
  ;
  ;
  ;
end // end KO0WSAG

// validate gpc code
Function KO0WSAH()
  ;
  ;
  if (KO0WM001.XGPCD in XGPTBL.XGPCD)
    KO0WM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(93); /* invalid gpc code does not exist*/
    KO0WW04.KO0WWEFL = "Y";
    set KO0WM001.XGPCD cursor, bold;
  end
  ;
  ;
  ;
end // end KO0WSAH

// val. & ret. style # & name
Function KO0WSBA()
  ;
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set SY1REC empty;
  ;
  SY1REC.XGPCD = KO0WM001.XGPCD;
  SY1REC.SY1STNBR = KO0WM001.SY1STNBR;
  ;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0WM001.SY1STYNM = SY1REC.SY1STYNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0WM001.SY1STYNM = " ";
      converseLib.validationFailed(88); /* style number not found*/
      KO0WW04.KO0WWEFL = "Y";
      set KO0WM001.SY1STNBR cursor, bold;
      exit stack; /* no records found, redisplay screen*/
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      TA1REC.TA1LOCAT[1] = "KO0WSBA";
      TA1REC.TA1LOCAT[2] = "IO0120";
      XSKO001();
    end
  end
end // end KO0WSBA

// retrieve koxrec comm info 'ss'
Function KO0WSBC()
  ;
  ;
  ;
  set KOXREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  KOXREC.XGPCD = KO0WM001.XGPCD;
  KOXREC.SY1STNBR = KO0WM001.SY1STNBR;
  KOXREC.XLCCD = KO0WM001.XLCCD;
  ;
  call "IO0970" ("SS", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0WW04.KO0WWCDX = 0;
    KO0WW04.KO0WWTOT = 0;
    while (SQLCA.VAGen_SQLCODE == 0)
      KO0WSBH(); /* retrieve all current comm. prod.*/
                                   /* rates*/
    end
    KO0WSBJ(); /* ; close selected set*/
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYRATE01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0WSBD";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
  ;
end // end KO0WSBC

// move ko0ww01 to ko0wm001
Function KO0WSBD()
  ;
  ;
  ;
  while (KO0WW04.KO0WWMDX <= 10)
    ;
    if (KO0WW01.SY2CLRID[KO0WWCDX] > " ")
      KO0WM001.KO0WMSEL[KO0WWMDX] = KO0WW01.KO0WMSEL[KO0WWCDX];
      KO0WM001.KOFCOMCD[KO0WWMDX] = KO0WW01.KOFCOMCD[KO0WWCDX];
      KO0WM001.XSMTYPCD[KO0WWMDX] = KO0WW01.XSMTYPCD[KO0WWCDX];
      KO0WM001.KO0WMEDT[KO0WWMDX] = KO0WW01.KO0WMEDT[KO0WWCDX];
      KO0WM001.KO0WMXDT[KO0WWMDX] = KO0WW01.KO0WMXDT[KO0WWCDX];
      KO0WM001.KO0WMHFL[KO0WWMDX] = KO0WW01.KO0WMHFL[KO0WWCDX];
      KO0WM001.SY2CLRID[KO0WWMDX] = KO0WW01.SY2CLRID[KO0WWCDX];
      KO0WM001.SY2CLRAB[KO0WWMDX] = KO0WW01.SY2CLRAB[KO0WWCDX];
      KO0WM001.XDMCD[KO0WWMDX] = KO0WW01.XDMCD[KO0WWCDX];
      KO0WM001.XPRABRV[KO0WWMDX] = KO0WW01.XPRABRV[KO0WWCDX];
      KO0WM001.ZZZSDT[KO0WWMDX] = KO0WW01.ZZZSDT[KO0WWCDX];
      KO0WM001.ZZZCHGDT[KO0WWMDX] = KO0WW01.ZZZCHGDT[KO0WWCDX];
      ;
      KO0WW04.KO0WWCDX = KO0WW04.KO0WWCDX + 1;
      KO0WW04.KO0WWTOP = KO0WW04.KO0WWTOP + 1;
      KO0WW04.KO0WWMDX = KO0WW04.KO0WWMDX + 1;
      ;
    else
      set KO0WM001.KO0WMSEL[KO0WWMDX] skip, invisible;
      set KO0WM001.KOFCOMCD[KO0WWMDX] skip, invisible;
      set KO0WM001.XSMTYPCD[KO0WWMDX] skip, invisible;
      set KO0WM001.KO0WMEDT[KO0WWMDX] skip, invisible;
      set KO0WM001.KO0WMXDT[KO0WWMDX] skip, invisible;
      set KO0WM001.KO0WMHFL[KO0WWMDX] skip, invisible;
      set KO0WM001.SY2CLRID[KO0WWMDX] skip, invisible;
      set KO0WM001.SY2CLRAB[KO0WWMDX] skip, invisible;
      set KO0WM001.XDMCD[KO0WWMDX] skip, invisible;
      set KO0WM001.XPRABRV[KO0WWMDX] skip, invisible;
      set KO0WM001.ZZZSDT[KO0WWMDX] skip, invisible;
      set KO0WM001.ZZZCHGDT[KO0WWMDX] skip, invisible;
      KO0WW04.KO0WWMDX = KO0WW04.KO0WWMDX + 1;
      ;
      ;
    end
    ;
  end
  ;
end // end KO0WSBD

// get sy2rec color info 's'
Function KO0WSBE()
  ;
  ;
       /* ***************************************************/
       /* * select the color record for color abrv, lc info**/
       /* ***************************************************/
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set SY2REC empty;
  ;
  SY2REC.XGPCD = KO0WM001.XGPCD;
  SY2REC.SY1STNBR = KO0WM001.SY1STNBR;
  SY2REC.SY2CLRID = KOXREC.SY2CLRID;
  SY2REC.XDMCD = KOXREC.XDMCD;
  ;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    KO0WW01.SY2CLRAB[KO0WWCDX] = SY2REC.SY2CLRAB;
    ;
    KO0WW01.XLCCD1[KO0WWCDX] = SY2REC.XLCCD1;
    KO0WW01.SY2CEDT1[KO0WWCDX] = SY2REC.SY2CEDT1;
    KO0WW01.XLCCD2[KO0WWCDX] = SY2REC.XLCCD2;
    KO0WW01.SY2CEDT2[KO0WWCDX] = SY2REC.SY2CEDT2;
    KO0WW01.XLCCD3[KO0WWCDX] = SY2REC.XLCCD3;
    KO0WW01.SY2CEDT3[KO0WWCDX] = SY2REC.SY2CEDT3;
    KO0WW01.XLCCD4[KO0WWCDX] = SY2REC.XLCCD4;
    KO0WW01.SY2CEDT4[KO0WWCDX] = SY2REC.SY2CEDT4;
    ;
    ;
    if (SY2REC.XPRCD in XPRTBL.XPRCD)
      KO0WW01.XPRABRV[KO0WWCDX] = XPRTBL.XPRABRV[sysVar.arrayIndex];
    else
      KO0WW01.XPRABRV[KO0WWCDX] = " ";
    end
    ;
    ;
    ;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0WW01.SY2CLRAB[KO0WWCDX] = "NOT FOUND";
    else
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1REC.TA1TBLKE = SY2REC.SY2KEY;
      TA1REC.TA1LOCAT[1] = "KO0WSBE";
      TA1REC.TA1LOCAT[2] = "IO0130";
      XSKO001();
    end
  end
  ;
  ;
  ;
end // end KO0WSBE

// retrieve next koxrec 'sn'
Function KO0WSBH()
  ;
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  call "IO0970" ("SN", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOXREC.SY2CLRID == KO0WW04.SY2CLRID)
      KO0WW01.KO0WMHFL[KO0WWCDX] = KO0WW01.KO0WMHFL[KO0WWCDX] + 1;
    else
      KO0WW04.KO0WWCDX = KO0WW04.KO0WWCDX + 1;
      KO0WW04.KO0WWTOT = KO0WW04.KO0WWTOT + 1;
      ;
      KO0WW01.KO0WMHFL[KO0WWCDX] = 1;
      KO0WW01.KOFCOMCD[KO0WWCDX] = KOXREC.KOFCOMCD;
      KO0WW01.XSMTYPCD[KO0WWCDX] = KOXREC.XSMTYPCD;
      KO0WW01.KO0WMEDT[KO0WWCDX] = KOXREC.KOXSCMED;
      KO0WW01.KO0WMXDT[KO0WWCDX] = KOXREC.KOXSCMXD;
      KO0WW01.SY2CLRID[KO0WWCDX] = KOXREC.SY2CLRID;
      KO0WW01.XDMCD[KO0WWCDX] = KOXREC.XDMCD;
      KO0WW01.ZZZSDT[KO0WWCDX] = KOXREC.ZZZSDT;
      KO0WW01.ZZZCHGDT[KO0WWCDX] = KOXREC.ZZZCHGDT;
      ;
      ;
      ;
      KO0WW04.SY2CLRID = KOXREC.SY2CLRID;
      ;
      KO0WSBE(); /* call sy2rec for color and life cycle info*/
    end
    ;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (KO0WW04.KO0WWCDX == 0)
        converseLib.validationFailed(135);
        set KO0WM001.XGPCD cursor;
        KO0WW04.KO0WWEFL = "Y";
      else
        /* next sentence*/
      end
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VSYRAT01";
      TA1REC.TA1TBLKE = KOXREC.KOXKEY;
      TA1REC.TA1LOCAT[1] = "KO0WSBH";
      TA1REC.TA1LOCAT[2] = "IO0970";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0WSBH

// close koxrec 'cs'
Function KO0WSBJ()
  ;
  ;
  call "IO0970" ("CS", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentenece*/
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYRATE01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0WSBJ";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0WSBJ

// check map key data has not chg
Function KO0WSCA()
  ;
  ;
       /* **********************************************/
       /* * check that the map key header fields have **/
       /* * not changed.                              **/
       /* **********************************************/
  ;
  if (KO0WM001.XGPCD == KO0WW01.XGPCD
   && KO0WM001.SY1STNBR == KO0WW01.SY1STNBR
   && KO0WM001.XLCCD == KO0WW01.XLCCD
   && KO0WM001.XQACD == KO0WW01.XQACD)
    /* next sentence*/
  else
    set SQLCA empty;
    set ERRSQLCA empty;
    set KOXREC empty;
    set KO0WW01 empty;
    set KO0WW02 empty;
    set KO0WW04 empty;
    set SY1REC empty;
    set SY2REC empty;
    set KO0WM002 initial;
    ;
    KO0WW04.XGPCD = KO0WM001.XGPCD;
    KO0WW04.SY1STNBR = KO0WM001.SY1STNBR;
    KO0WW04.XLCCD = KO0WM001.XLCCD;
    KO0WW04.XQACD = KO0WM001.XQACD;
    set KO0WM001 initial;
    KO0WM001.XGPCD = KO0WW04.XGPCD;
    KO0WM001.SY1STNBR = KO0WW04.SY1STNBR;
    KO0WM001.XLCCD = KO0WW04.XLCCD;
    KO0WM001.XQACD = KO0WW04.XQACD;
    KO0WW04.KO0WWKFL = "Y"; /* header key fields*/
    KO0WW04.KO0WWEFL = "N"; /* set error field no*/
    exit stack;
  end
  ;
  ;
end // end KO0WSCA

// check pf keys
Function KO0WSCB()
  ;
  ;
  ;
  if (converseVar.eventKey is pf5)
    exit program;
  else /* next sentence*/
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
    KO0WM001.XXXMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf4)
      XSPF4();
      KO0WM001.XXXMSG = COMMAREA.CAMSG;
      return;
    else
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pa2)
        COMMAREA.CATOAP = "KO0A";
        XSEXIT();
        KO0WM001.XXXMSG = COMMAREA.CAMSG;
        return;
      else
        if (KO0WM001.CATOAP != " ")
          if (converseVar.eventKey is enter)
            COMMAREA.CATOAP = KO0WM001.CATOAP;
            COMMAREA.CAITEM = KO0WM001.CAITEM;
            XSEXIT();
            KO0WM001.XXXMSG = COMMAREA.CAMSG;
            exit stack;
          else
            set KO0WM001.CATOAP cursor, bold;
            converseLib.validationFailed(1);
            exit stack;
          end
        else
          if (converseVar.eventKey is enter
           || converseVar.eventKey is pf7
           || converseVar.eventKey is pf8)
            return;
          else
            converseLib.validationFailed(2);
          end
        end
      end
    end
  end
end // end KO0WSCB

// set screen fields normal
Function KO0WSCC()
  ;
  ;
  KO0WW04.KO0WWKFL = "N";
  KO0WW04.KO0WWEFL = "N";
  KO0WW04.KO0WWMDX = 1;
  ;
  while (KO0WW04.KO0WWMDX < 11)
    set KO0WM001.KO0WMSEL[KO0WWMDX] initialAttributes;
    set KO0WM001.KOFCOMCD[KO0WWMDX] initialAttributes;
    set KO0WM001.XSMTYPCD[KO0WWMDX] initialAttributes;
    set KO0WM001.KO0WMEDT[KO0WWMDX] initialAttributes;
    set KO0WM001.KO0WMXDT[KO0WWMDX] initialAttributes;
    set KO0WM001.KO0WMHFL[KO0WWMDX] initialAttributes;
    set KO0WM001.SY2CLRID[KO0WWMDX] initialAttributes;
    set KO0WM001.SY2CLRAB[KO0WWMDX] initialAttributes;
    set KO0WM001.XDMCD[KO0WWMDX] initialAttributes;
    set KO0WM001.XPRABRV[KO0WWMDX] initialAttributes;
    set KO0WM001.ZZZSDT[KO0WWMDX] initialAttributes;
    set KO0WM001.ZZZCHGDT[KO0WWMDX] initialAttributes;
    ;
    KO0WW04.KO0WWMDX = KO0WW04.KO0WWMDX + 1;
    ;
    set KO0WM001.KO0WMSEL[1] cursor;
    ;
  end
  ;
  ;
  ;
end // end KO0WSCC

// process pf7
Function KO0WSCJ()
  ;
  ;
  if (KO0WW04.KO0WWCDX <= 11)
    converseLib.validationFailed(70);
    KO0WW04.KO0WWEFL = "Y";
    exit stack;
  else
    /* next sentence*/
  end
  ;
  KO0WSCO(); /* clear screen fields*/
  ;
  ;
  if (KO0WW04.KO0WWTOP <= 11)
    KO0WW04.KO0WWCDX = KO0WW04.KO0WWCDX - KO0WW04.KO0WWTOP;
    KO0WW04.KO0WWCDX = KO0WW04.KO0WWCDX - 10;
  else
     /* next sentence*/
  end
  ;
  if (KO0WW04.KO0WWCDX < 11)
    KO0WW04.KO0WWCDX = 1;
  else
    /* next sentence*/
  end
  ;
  KO0WW04.KO0WWMDX = 1;
  KO0WW04.KO0WWTOP = 1;
  ;
  KO0WSBD(); /* move ko0ww01 to ko0wm001*/
  ;
  ;
end // end KO0WSCJ

// process pf8
Function KO0WSCK()
  ;
  ;
  ;
  if (KO0WW04.KO0WWCDX > KO0WW04.KO0WWTOT)
    converseLib.validationFailed(68);
    KO0WW04.KO0WWEFL = "Y";
    exit stack;
  else
    /* next sentence*/
  end
  ;
  ;
  ;
  KO0WSCO(); /* clear screen field*/
  ;
  ;
  KO0WW04.KO0WWMDX = 1;
  KO0WW04.KO0WWTOP = 1;
  ;
  ;
  KO0WSBD(); /* move record to map*/
  ;
  ;
end // end KO0WSCK

// process enter
Function KO0WSCL()
  ;
  ;
  KO0WW04.KO0WWCDX = KO0WW04.KO0WWCDX - KO0WW04.KO0WWTOP;
  KO0WW04.KO0WWCDX = KO0WW04.KO0WWCDX + 1;
  ;
  KO0WW04.KO0WWMDX = 1;
  KO0WW04.KO0WWTOP = 1;
  ;
  ;
  if (KO0WM001.KO0WMSEL[1] == "S"
   && KO0WW01.KO0WMHFL <= 1)
    converseLib.validationFailed(133);
    KO0WW04.KO0WWEFL = "Y";
    exit stack;
  else
    /* next sentence*/
  end
  ;
  while (KO0WW04.KO0WWMDX <= 10)
    if (KO0WM001.KO0WMSEL[1] == "A"
     || KO0WM001.KO0WMSEL[KO0WWMDX] == "S")
      KO0WW01.KO0WMSEL[KO0WWCDX] = KO0WM001.KO0WMSEL[KO0WWMDX];
      KO0WW04.KO0WWFFL = "H";
    else
      /* NEXT SENTENCE*/
    end
    KO0WW04.KO0WWMDX = KO0WW04.KO0WWMDX + 1;
    KO0WW04.KO0WWCDX = KO0WW04.KO0WWCDX + 1;
    KO0WW04.KO0WWTOP = KO0WW04.KO0WWTOP + 1;
  end
  ;
  KO0WSCP(); /* check if ko0wmsel = a, then move s to all ko0wmsel*/
  ;
  KO0WSCO();
end // end KO0WSCL

// move hdr ko0ww01 to ko0wm001
Function KO0WSCO()
  ;
  ;
  ;
  set KO0WM001 initial;
  ;
  ;
  KO0WM001.XGPCD = KO0WW01.XGPCD;
  KO0WM001.XGPABRV = KO0WW01.XGPABRV;
  KO0WM001.SY1STNBR = KO0WW01.SY1STNBR;
  KO0WM001.SY1STYNM = KO0WW01.SY1STYNM;
  KO0WM001.XLCCD = KO0WW01.XLCCD;
  KO0WM001.XLCABRV = KO0WW01.XLCABRV;
  KO0WM001.XQACD = KO0WW01.XQACD;
  KO0WM001.XQAABRV = KO0WW01.XQAABRV;
  ;
  ;
end // end KO0WSCO

// set all fields to 's' select
Function KO0WSCP()
  ;
  ;
       /* ***************************************/
       /* * if the user want to see all the    **/
       /* * colors then set all the            **/
       /* * select fields to s.                **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  if (KO0WM001.KO0WMSEL[1] == "A"
   && KO0WW04.KO0WWFFL == "H")
    KO0WM001.KO0WMSEL[1] = "V";
    KO0WW01.KO0WMSEL[1] = "V";
    KO0WW04.KO0WWCDX = 1;
    while (KO0WW04.KO0WWCDX <= KO0WW04.KO0WWTOT)
      KO0WW01.KO0WMSEL[KO0WWCDX] = "S";
      KO0WW04.KO0WWCDX = KO0WWCDX + 1;
    end
  else
    /* next sentence*/
  end
  ;
  ;
  ;
end // end KO0WSCP

// prepare for getting history
Function KO0WSFA()
  ;
  ;
  ;
  ;
  KO0WW04.KO0WWCDX = 1;
  ;
  while (KO0WW04.KO0WWCDX <= KO0WW04.KO0WWTOT
   && KO0WW04.KO0WWFIN == "Y")
    if (KO0WW01.KO0WMSEL[KO0WWCDX] == "S")
      set KO0WW02 empty;
      KO0WSFC(); /* get koxrec*/
      KO0WW01.KO0WMSEL[KO0WWCDX] = "V";
      KO0WW04.KO0WWFIN = "N";
    else
      /* next sentence*/
      KO0WW04.KO0WWCDX = KO0WW04.KO0WWCDX + 1;
    end
  end
  ;
  ;
  ;
end // end KO0WSFA

// set up 'ss' to koxrec
Function KO0WSFC()
  ;
  ;
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set KOXREC empty;
  ;
  ;
  KOXREC.XGPCD = KO0WW01.XGPCD;
  KOXREC.SY1STNBR = KO0WW01.SY1STNBR;
  KOXREC.SY2CLRID = KO0WW01.SY2CLRID[KO0WWCDX];
  KOXREC.XDMCD = KO0WW01.XDMCD;
  KOXREC.XQACD = KO0WW01.XQACD;
  KOXREC.XLCCD = KO0WW01.XLCCD;
  ;
  ;
  call "IO0970" ("SS", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0WW04.KO0WWMDX = 1;
    while (SQLCA.VAGen_SQLCODE == 0)
      KO0WSFI(); /* move header w01 data to ko0ww02*/
      KO0WSFD(); /* retrieve all koxrec.*/
    end
    KO0WSFG(); /* close selected set.*/
    ;
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VSYRAT01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0WSFC";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0WSFC

// get next koxrec 'sn'
Function KO0WSFD()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  ;
  call "IO0970" ("SN", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0WSFE(); /* move koxrec to ko0ww02*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VSYRAT01";
      TA1REC.TA1TBLKE = KOXREC.KOXKEY;
      TA1REC.TA1LOCAT[1] = "KO0WSFD";
      TA1REC.TA1LOCAT[2] = "IO0970";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0WSFD

// move koxrec to ko0ww02
Function KO0WSFE()
  ;
  ;
       /* ***************************************/
       /* * move koxrec to ko0xw02 record.     **/
       /* *                                    **/
       /* ***************************************/
  ;
  KO0WW02.SY2CLRID[KO0WWMDX] = KO0WW01.SY2CLRID[KO0WWCDX];
  KO0WW02.SY2CLRAB[KO0WWMDX] = KO0WW01.SY2CLRAB[KO0WWCDX];
  KO0WW02.XPRABRV[KO0WWMDX] = KO0WW01.XPRABRV[KO0WWCDX];
  KO0WW02.XDMCD[KO0WWMDX] = KO0WW01.XDMCD[KO0WWCDX];
  ;
  ;
  KO0WW02.KOFCOMCD[KO0WWMDX] = KOXREC.KOFCOMCD;
  KO0WW02.XSMTYPCD[KO0WWMDX] = KOXREC.XSMTYPCD;
  ;
  KO0WW02.KO0WMEDT[KO0WWMDX] = KOXREC.KOXSCMED;
  ;
  KO0WW02.KO0WMXDT[KO0WWMDX] = KOXREC.KOXSCMXD;
  ;
  KO0WW02.XLCCD[KO0WWMDX] = KOXREC.XLCCD;
  KO0WW02.ZZZSDT[KO0WWMDX] = KOXREC.ZZZSDT;
  KO0WW02.ZZZCHGDT[KO0WWMDX] = KOXREC.ZZZCHGDT;
  KO0WW02.ZZZCHGCT[KO0WWMDX] = KOXREC.ZZZCHGCT;
  ;
  KO0WW04.KO0WWMDX = KO0WW04.KO0WWMDX + 1;
  ;
  if (KO0WW04.KO0WWMDX > 10)
    KO0WW04.KO0WWEFL = "Y";
    converseLib.validationFailed(100);
    exit stack;
  else
    /* next sentence*/
  end
  ;
  ;
  ;
  ;
end // end KO0WSFE

// move header ko0ww02-> ko0wm002
Function KO0WSFF()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0WM002.XGPCD = KO0WW02.XGPCD;
  KO0WM002.XGPABRV = KO0WW02.XGPABRV;
  KO0WM002.SY1STNBR = KO0WW02.SY1STNBR;
  KO0WM002.SY1STYNM = KO0WW02.SY1STYNM;
  KO0WM002.KO0WMLC = KO0WW02.KO0WMLC;
  KO0WM002.KO0WMXAB = KO0WW02.KO0WMXAB;
  KO0WM002.XQACD = KO0WW02.XQACD;
  KO0WM002.XQAABRV = KO0WW02.XQAABRV;
  ;
  KO0WM002.XLCCD1 = KO0WW02.XLCCD1;
  KO0WM002.SY2CEDT1 = KO0WW02.SY2CEDT1;
  KO0WM002.XLCCD2 = KO0WW02.XLCCD2;
  KO0WM002.SY2CEDT2 = KO0WW02.SY2CEDT2;
  KO0WM002.XLCCD3 = KO0WW02.XLCCD3;
  KO0WM002.SY2CEDT3 = KO0WW02.SY2CEDT3;
  KO0WM002.XLCCD4 = KO0WW02.XLCCD4;
  KO0WM002.SY2CEDT4 = KO0WW02.SY2CEDT4;
  KO0WSFJ(); /* retrieve life cycle abrv.*/
  ;
  ;
  KO0WSFH();
                                   /* move detail lines ko0ww02 to ko0wm002*/
  ;
  ;
  ;
end // end KO0WSFF

// close koxrec 'cs'
Function KO0WSFG()
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  ;
  call "IO0970" ("CS", SQLCA, KOXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentenece*/
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VSYRAT01";
    TA1REC.TA1TBLKE = KOXREC.KOXKEY;
    TA1REC.TA1LOCAT[1] = "KO0WSFG";
    TA1REC.TA1LOCAT[2] = "IO0970";
    XSKO001(); /* abort*/
  end
  ;
  ;
  ;
end // end KO0WSFG

// move comm info w02 to m002
Function KO0WSFH()
  ;
  ;
  ;
  ;
  ;
  KO0WW04.KO0WWMDX = 1;
  ;
  while (KO0WW04.KO0WWMDX <= 10)
    ;
    if (KO0WW02.XSMTYPCD[KO0WWMDX] > " ")
      KO0WM002.XSMTYPCD[KO0WWMDX] = KO0WW02.XSMTYPCD[KO0WWMDX];
      KO0WM002.KOFCOMCD[KO0WWMDX] = KO0WW02.KOFCOMCD[KO0WWMDX];
      KO0WM002.KO0WMEDT[KO0WWMDX] = KO0WW02.KO0WMEDT[KO0WWMDX];
      KO0WM002.KO0WMXDT[KO0WWMDX] = KO0WW02.KO0WMXDT[KO0WWMDX];
      KO0WM002.SY2CLRID[KO0WWMDX] = KO0WW02.SY2CLRID[KO0WWMDX];
      KO0WM002.SY2CLRAB[KO0WWMDX] = KO0WW02.SY2CLRAB[KO0WWMDX];
      KO0WM002.XDMCD[KO0WWMDX] = KO0WW02.XDMCD[KO0WWMDX];
      KO0WM002.XLCCD[KO0WWMDX] = KO0WW02.XLCCD[KO0WWMDX];
      KO0WM002.XPRABRV[KO0WWMDX] = KO0WW02.XPRABRV[KO0WWMDX];
      KO0WM002.ZZZSDT[KO0WWMDX] = KO0WW02.ZZZSDT[KO0WWMDX];
      KO0WM002.ZZZCHGDT[KO0WWMDX] = KO0WW02.ZZZCHGDT[KO0WWMDX];
    else
      KO0WM002.XSMTYPCD[KO0WWMDX] = " ";
      KO0WM002.KOFCOMCD[KO0WWMDX] = " ";
      KO0WM002.KO0WMEDT[KO0WWMDX] = 0;
      KO0WM002.KO0WMXDT[KO0WWMDX] = 0;
      KO0WM002.SY2CLRID[KO0WWMDX] = " ";
      KO0WM002.SY2CLRAB[KO0WWMDX] = " ";
      KO0WM002.XDMCD[KO0WWMDX] = " ";
      KO0WM002.XLCCD[KO0WWMDX] = " ";
      KO0WM002.XPRABRV[KO0WWMDX] = " ";
      KO0WM002.ZZZSDT[KO0WWMDX] = 0;
      KO0WM002.ZZZCHGDT[KO0WWMDX] = 0;
      set KO0WM002.XSMTYPCD[KO0WWMDX] skip, invisible;
      set KO0WM002.KOFCOMCD[KO0WWMDX] skip, invisible;
      set KO0WM002.KO0WMEDT[KO0WWMDX] skip, invisible;
      set KO0WM002.KO0WMXDT[KO0WWMDX] skip, invisible;
      set KO0WM002.SY2CLRID[KO0WWMDX] skip, invisible;
      set KO0WM002.SY2CLRAB[KO0WWMDX] skip, invisible;
      set KO0WM002.XDMCD[KO0WWMDX] skip, invisible;
      set KO0WM002.XLCCD[KO0WWMDX] skip, invisible;
      set KO0WM002.XPRABRV[KO0WWMDX] skip, invisible;
      set KO0WM002.ZZZSDT[KO0WWMDX] skip, invisible;
      set KO0WM002.ZZZCHGDT[KO0WWMDX] skip, invisible;
    end
    ;
    KO0WW04.KO0WWMDX = KO0WW04.KO0WWMDX + 1;
    ;
  end
  ;
  ;
end // end KO0WSFH

// move header ko0ww01 to ko0ww02
Function KO0WSFI()
  ;
  ;
  ;
       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/
  ;
  ;
  KO0WW02.XGPCD = KO0WW01.XGPCD;
  KO0WW02.XGPABRV = KO0WW01.XGPABRV;
  KO0WW02.SY1STNBR = KO0WW01.SY1STNBR;
  KO0WW02.SY1STYNM = KO0WW01.SY1STYNM;
  KO0WW02.KO0WMLC = KO0WW01.XLCCD;
  KO0WW02.KO0WMXAB = KO0WW01.XLCABRV;
  KO0WW02.XQACD = KO0WW01.XQACD;
  KO0WW02.XQAABRV = KO0WW01.XQAABRV;
  ;
  KO0WW02.XLCCD1 = KO0WW01.XLCCD1[KO0WWCDX];
  KO0WW02.SY2CEDT1 = KO0WW01.SY2CEDT1[KO0WWCDX];
  KO0WW02.XLCCD2 = KO0WW01.XLCCD2[KO0WWCDX];
  KO0WW02.SY2CEDT2 = KO0WW01.SY2CEDT2[KO0WWCDX];
  KO0WW02.XLCCD3 = KO0WW01.XLCCD3[KO0WWCDX];
  KO0WW02.SY2CEDT3 = KO0WW01.SY2CEDT3[KO0WWCDX];
  KO0WW02.XLCCD4 = KO0WW01.XLCCD4[KO0WWCDX];
  KO0WW02.SY2CEDT4 = KO0WW01.SY2CEDT4[KO0WWCDX];
  ;
  ;
  ;
end // end KO0WSFI

// move w02 l.c. info to m002
Function KO0WSFJ()
  ;
  ;
  ;
  ;
  if (KO0WW02.XLCCD1 in XLCTBL.XLCCD)
    KO0WM002.XLCABRV[1] = XLCTBL.XLCABRV[sysVar.arrayIndex];
  else
    KO0WM002.XLCABRV[1] = " ";
  end
  ;
  ;
  if (KO0WW02.XLCCD2 in XLCTBL.XLCCD)
    KO0WM002.XLCABRV[2] = XLCTBL.XLCABRV[sysVar.arrayIndex];
  else
    KO0WM002.XLCABRV[2] = " ";
  end
  ;
  ;
  if (KO0WW02.XLCCD3 in XLCTBL.XLCCD)
    KO0WM002.XLCABRV[3] = XLCTBL.XLCABRV[sysVar.arrayIndex];
  else
    KO0WM002.XLCABRV[3] = " ";
  end
  ;
  ;
  if (KO0WW02.XLCCD4 in XLCTBL.XLCCD)
    KO0WM002.XLCABRV[4] = XLCTBL.XLCABRV[sysVar.arrayIndex];
  else
    KO0WM002.XLCABRV[4] = " ";
  end
  ;
  ;
  ;
end // end KO0WSFJ

// check pf keys
Function KO0WSGB()
  ;
  ;
  if (converseVar.eventKey is pf5)
    exit program;
  else
  end
  ;
  if (converseVar.eventKey is pf16)
    exit stack;
  else
  end
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    KO0WM002.XXXMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf4)
      XSPF4();
      KO0WM002.XXXMSG = COMMAREA.CAMSG;
      return;
    else
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pa2)
        COMMAREA.CATOAP = "KO0A";
        XSEXIT();
        KO0WM002.XXXMSG = COMMAREA.CAMSG;
        return;
      else
        if (KO0WM002.CATOAP != " ")
          if (converseVar.eventKey is enter)
            COMMAREA.CATOAP = KO0WM002.CATOAP;
            COMMAREA.CAITEM = KO0WM002.CAITEM;
            XSEXIT();
            KO0WM002.XXXMSG = COMMAREA.CAMSG;
            exit stack;
          else
            set KO0WM002.CATOAP cursor, bold;
            converseLib.validationFailed(1);
            exit stack;
          end
        else
          if (converseVar.eventKey is enter)
            return;
          else
            /* next sentence*/
          end
        end
      end
    end
  end
end // end KO0WSGB

// set ko0wm002 fields normal
Function KO0WSGC()
  ;
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  ;
  set KO0WM002.XGPCD normal;
  set KO0WM002.SY1STNBR normal;
  set KO0WM002.SY1STYNM initialAttributes;
  set KO0WM002.KO0WMLC normal;
  set KO0WM002.KO0WMXAB normal;
  set KO0WM002.XQACD normal;
  set KO0WM002.XQAABRV normal;
  ;
  set KO0WM002.XLCCD1 initialAttributes;
  set KO0WM002.SY2CEDT1 initialAttributes;
  set KO0WM002.XLCCD2 initialAttributes;
  set KO0WM002.SY2CEDT2 initialAttributes;
  set KO0WM002.XLCCD3 initialAttributes;
  set KO0WM002.SY2CEDT3 initialAttributes;
  set KO0WM002.XLCCD4 initialAttributes;
  set KO0WM002.SY2CEDT4 initialAttributes;
  ;
  ;
  KO0WM002.XXXMSG = " ";
  KO0WW04.KO0WWKFL = "N";
  KO0WW04.KO0WWEFL = "N";
  KO0WW04.KO0WWMDX = 1;
  ;
  while (KO0WW04.KO0WWMDX < 11)
    set KO0WM002.KOFCOMCD[KO0WWMDX] initialAttributes;
    set KO0WM002.XSMTYPCD[KO0WWMDX] initialAttributes;
    set KO0WM002.KO0WMEDT[KO0WWMDX] initialAttributes;
    set KO0WM002.KO0WMXDT[KO0WWMDX] initialAttributes;
    set KO0WM002.SY2CLRID[KO0WWMDX] initialAttributes;
    set KO0WM002.SY2CLRAB[KO0WWMDX] initialAttributes;
    set KO0WM002.XDMCD[KO0WWMDX] initialAttributes;
    set KO0WM002.XPRABRV[KO0WWMDX] initialAttributes;
    set KO0WM002.ZZZSDT[KO0WWMDX] initialAttributes;
    set KO0WM002.ZZZCHGDT[KO0WWMDX] initialAttributes;
    ;
    KO0WW04.KO0WWMDX = KO0WW04.KO0WWMDX + 1;
    ;
  end
  ;
  ;
  ;
  ;
end // end KO0WSGC

// check if header key chg.
Function KO0WSGL()
  ;
  ;
       /* **********************************************/
       /* *                                           **/
       /* *                                           **/
       /* **********************************************/
  ;
  if (KO0WM002.XGPCD == KO0WW02.XGPCD
   && KO0WM002.SY1STNBR == KO0WW02.SY1STNBR
   && KO0WM002.KO0WMLC == KO0WW02.KO0WMLC
   && KO0WM002.XQACD == KO0WW02.XQACD)
    /* next sentence*/
  else
    set SQLCA empty;
    set ERRSQLCA empty;
    set KOXREC empty;
    set KO0WW01 empty;
    set KO0WW02 empty;
    set KO0WW04 empty;
    set SY1REC empty;
    set SY2REC empty;
    set KO0WM001 initial;
    ;
    KO0WW04.XGPCD = KO0WM002.XGPCD;
    KO0WW04.SY1STNBR = KO0WM002.SY1STNBR;
    KO0WW04.XLCCD = KO0WM002.XLCCD;
    KO0WW04.XQACD = KO0WM002.XQACD;
    set KO0WM002 initial;
    KO0WM001.XGPCD = KO0WW04.XGPCD;
    KO0WM001.SY1STNBR = KO0WW04.SY1STNBR;
    KO0WM001.XLCCD = KO0WW04.XLCCD;
    KO0WM001.XQACD = KO0WW04.XQACD;
    KO0WW04.KO0WWKFL = "Y";
    KO0WW04.KO0WWEFL = "N";
    exit stack;
  end
  ;
  ;
  ;
  ;
end // end KO0WSGL

//*** RECORD=KO0WW01 ****
// ************************************************************
// *** DATE     USERID REASON                               ***
// *** 02-24-94 RPATTE DB2 CHANGES. DELETE XRCCD.           ***
// ************************************************************
// ***********************
Record KO0WW01 type basicRecord
  10 KO0WWGRP KO0WWGRP ; 
    15 KO0WWHDR KO0WWHDR ; 
      20 XGPCD XGPCD ; 
      20 XGPABRV XGPABRV ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY1STYNM SY1STYNM ; 
      20 XLCCD XLCCD ; 
      20 XLCABRV XLCABRV ; 
      20 XQACD XQACD ; 
      20 XQAABRV XQAABRV ; 
      20 KO0WMLCD KO0WMLCD ; 
    15 KO0WWDET KO0WWDET [200] ; 
      20 KO0WMSEL KO0WMSEL ; 
      20 KOFCOMCD KOFCOMCD ; 
      20 XSMTYPCD XSMTYPCD ; 
      20 KO0WMEDT KO0WMEDT ; 
      20 KO0WMXDT KO0WMXDT ; 
      20 KO0WMHFL KO0WMHFL ; 
      20 SY2CLRID SY2CLRID ; 
      20 SY2CLRAB SY2CLRAB ; 
      20 XDMCD XDMCD ; 
      20 XPRABRV XPRABRV ; 
      20 ZZZSDT ZZZSDT ; 
      20 ZZZCHGDT ZZZCHGDT ; 
      20 XLCCD1 XLCCD1 ; 
      20 SY2CEDT1 SY2CEDT1 ; 
      20 XLCCD2 XLCCD2 ; 
      20 SY2CEDT2 SY2CEDT2 ; 
      20 XLCCD3 XLCCD3 ; 
      20 SY2CEDT3 SY2CEDT3 ; 
      20 XLCCD4 XLCCD4 ; 
      20 SY2CEDT4 SY2CEDT4 ; 
end // end KO0WW01

//*** RECORD=KO0WW02 ****
// ************************************************************
// ***  DATE    USERID REASON                               ***
// *** 02-24-94 RPATTE DB2 CHANGES. DELETE XRCCD.           ***
// ************************************************************
// ***********************
Record KO0WW02 type basicRecord
  10 KO0WWG02 KO0WWG02 ; 
    15 KO0WWH02 KO0WWH02 ; 
      20 XGPCD XGPCD ; 
      20 XGPABRV XGPABRV ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY1STYNM SY1STYNM ; 
      20 KO0WMLC KO0WMLC ; 
      20 KO0WMXAB KO0WMXAB ; 
      20 XQACD XQACD ; 
      20 XQAABRV XQAABRV ; 
      20 KO0WMLCD KO0WMLCD ; 
      20 XLCCD1 XLCCD1 ; 
      20 SY2CEDT1 SY2CEDT1 ; 
      20 XLCCD2 XLCCD2 ; 
      20 SY2CEDT2 SY2CEDT2 ; 
      20 XLCCD3 XLCCD3 ; 
      20 SY2CEDT3 SY2CEDT3 ; 
      20 XLCCD4 XLCCD4 ; 
      20 SY2CEDT4 SY2CEDT4 ; 
    15 KO0WWD02 KO0WWD02 [10] ; 
      20 KOFCOMCD KOFCOMCD ; 
      20 XSMTYPCD XSMTYPCD ; 
      20 KO0WMEDT KO0WMEDT ; 
      20 KO0WMXDT KO0WMXDT ; 
      20 SY2CLRID SY2CLRID ; 
      20 SY2CLRAB SY2CLRAB ; 
      20 XDMCD XDMCD ; 
      20 XLCCD XLCCD ; 
      20 XPRABRV XPRABRV ; 
      20 ZZZSDT ZZZSDT ; 
      20 ZZZCHGDT ZZZCHGDT ; 
      20 ZZZCHGCT ZZZCHGCT ; 
end // end KO0WW02

//*** RECORD=KO0WW04 ****
// ************************************************************
// ************************************************************
// maintenance history
// 
// when       who        why
// --------   --------   --------------------------------------
// 10-30-86   jricha     created application
// ************************************************************
// ***********************
Record KO0WW04 type basicRecord
  10 KO0WWKEY KO0WWKEY ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 XLCCD XLCCD ; 
    15 XQACD XQACD ; 
  10 KO0WWTOT KO0WWTOT ; 
  10 KO0WWCDX KO0WWCDX ; 
  10 KO0WWMDX KO0WWMDX ; 
  10 KO0WWTOP KO0WWTOP ; 
  10 SY2CLRID SY2CLRID ; 
  10 KO0WWKFL KO0WWKFL ; 
  10 KO0WWEFL KO0WWEFL ; 
  10 KO0WWFFL KO0WWFFL ; 
  10 KO0WMHFL KO0WMHFL ; 
  10 KO0WWFST KO0WWFST ; 
  10 KO0WWFIN KO0WWFIN ; 
    15 KO0WMEDT KO0WMEDT ; 
    15 KO0WMXDT KO0WMXDT ; 
  10 KO0WWDCL KO0WWDCL ; 
    15 KO0WWDSP KO0WWDSP ; 
    15 KO0WWDTC KO0WWDTC ; 
    15 KO0WWDCD KO0WWDCD ; 
end // end KO0WW04

// ko0wm001 eff. date
DataItem KO0WMEDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ko0wm001 history flag
DataItem KO0WMHFL num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map life cycle code
DataItem KO0WMLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map life cycle date check
DataItem KO0WMLCD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ko0xm001 select field
DataItem KO0WMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map life cycle date
DataItem KO0WMXAB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ko0wm001 end date
DataItem KO0WMXDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// index for ko0ww01 area
DataItem KO0WWCDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail lines
DataItem KO0WWD02 char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display color message
DataItem KO0WWDCD char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display color message
DataItem KO0WWDCL char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail lines
DataItem KO0WWDET char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display 3 space field{
DataItem KO0WWDSP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display total colors sel.
DataItem KO0WWDTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag trigger
DataItem KO0WWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function trigger flag
DataItem KO0WWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// finished adding all dates
DataItem KO0WWFIN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru date check
DataItem KO0WWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for ko0xw01
DataItem KO0WWG02 char(572)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KO0WWGRP char(14068)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header info. for ko0xm001
DataItem KO0WWH02 char(92)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header info. for ko0xm001
DataItem KO0WWHDR char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data key for fast path
DataItem KO0WWKEY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag to trig. key header chg
DataItem KO0WWKFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for ko0wm001 line #
DataItem KO0WWMDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// # of lines displayed on map
DataItem KO0WWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total number of records ret.
DataItem KO0WWTOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

