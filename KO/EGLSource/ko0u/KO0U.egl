package ko0u;

import corpcom1.CAITEM;
import corpcom1.CATOAP;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import ko.common.KOTMADID;
import ko.common.KOTREC;
import ko.common.KOYREC;
import sm.common.SM1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VRAGCY02;
//*** PROGRAM=KO0U ****
// ko0u - miscellaneous adjustment inquiry is provided for
// users to view what was done through ko0t - maintain
// miscellaneous adjustments.
// 
// 
// miscellaneous adjustments differ from regular commissions
// adjustments in that miscellaneous adjustments are usually
// not customer related.  some examples of misc. adj. are
// nike paying the agency/rep's office rent, or nike paying
// the agency/rep's business expenses for a certain sale, or
// a bad debt writeoff for a customer that has gone out of
// business, or a previous adjustment was incorrect and this
// adjustment is to correct it.
// 
// the "for month of" field at the top of the screen reflects
// the commission statment month/year in which the adjustment
// was processed.  the field "adjustment for the month of"
// reflects the month/year that the adjustment actually applies
// to back in time.  the field "auth date" reflects the date
// the authorizing person authorized the adjustment to be made.
// 
// 
// iomods used:  io0670 - dcomm.vmsadj01 (kotrec)
//               io0160 - dslsmn.vragcy01 (sm5rec)
//               io0050 - dslsmn.vsagcy01 (sm1rec)
//               io1030 - dcomm.vadjcd01 (koyrec - adj cd desc)
// date created:  march 18 1987
// 
// maintenance:
// 
// init   date      reason
// -------------------------------------------------------
// obecke 3-18-87   created application
// jwood 12-20-88   added noncsp option to calls
// jwood 12-20-88   added xssegtr logic
// aivers 4-09-92   rename sm5stat to xxxstat.
// aivers 10-9-92   database changes.  Get rep's name from
//                  vragcy02 instead of sm5rec in ko0us1f.
// 
// *********************
Program KO0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO0UW01 KO0UW01; // record
  KOTREC KOTREC; // record
  KOYREC KOYREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VRAGCY02 VRAGCY02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KO0UM.KO0UM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0U001: KO0U001();
    ;
    ;
    goto KO0U005;
    ;
    ;
    ;
    KO0U005: KO0U005();
    ;
    ;
    ;
    goto KO0U005; /* display screen with data*/
    ;
    ;
    ;
  end // end main
end // end KO0U

// initialize application
Function KO0U001()
  ;
  ;
  XSENTRY();
  ;
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set KO0UM001 initial;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TA1REC empty;
  set TA2REC empty;
  set SM1REC empty;
  set VRAGCY02 empty;
  set KOYREC empty;
  set KOTREC empty;
  ;
  if (COMMAREA.CAITEM != " ")
    KO0UW01.KO0UWCID = COMMAREA.CAITEM;
    KO0UM001.KOTMADID = KO0UW01.KO0UWNID;
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    KO0US1B();
  else
     /* next sentence*/
  end
  ;
  ;
  ;
end // end KO0U001

// converse the misc adjustment
Function KO0U005()
  ;
  ;
  KO0UM001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
  set KO0UW01 empty;
  ;
  ;
  ;
  converse KO0UM001 ;
  ;
  ;
  ;
  KO0UW01.KOTMADID = KO0UM001.KOTMADID;
  KO0UW01.CATOAP = KO0UM001.CATOAP;
  KO0UW01.CAITEM = KO0UM001.CAITEM;
  set KO0UM001 initial;
  KO0UM001.KOTMADID = KO0UW01.KOTMADID;
  KO0UM001.CATOAP = KO0UW01.CATOAP;
  KO0UM001.CAITEM = KO0UW01.CAITEM;
  ;
  KO0US2A(); /* validate attention keys*/
  ;
  KO0US1B();
                                   /* get commission adjustment row--kotrec*/
  ;
  ;
end // end KO0U005

// get comm adj row
Function KO0US1B()
  ;
  ;
     /* get commission adjustment row*/
  ;
  ;
  KOTREC.KOTMADID = KO0UM001.KOTMADID;
  set KO0UM001.KOTMADID cursor, normal;
  ;
  ;
  call "IO0670" ("S ", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0US1C(); /* move data to screen*/
    KO0US1D(); /* get descriptions for fields*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KO0UM001 initial;
      KO0UM001.KOTMADID = KOTREC.KOTMADID;
      KO0UM001.XXXCURDT = VGVar.currentShortGregorianDate;
      converseLib.validationFailed(136);
          /* commission adjustment id does not exist*/
      set KO0UM001.KOTMADID cursor, bold;
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VMSADJ01";
      TA1REC.TA1TBLKE = KOTREC.KOTKEY;
      TA1REC.TA1LOCAT[1] = "KO0US1B";
      TA1REC.TA1LOCAT[2] = "IO0670";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0US1B

// move kotrec to screen
Function KO0US1C()
  ;
  ;
     /* move data from kotrec to screen*/
  ;
  ;
  KO0UW01.KO0UWADT = KOTREC.KOZCSTMO;
  KO0UM001.KO0UWCMM = KO0UW01.KO0UWCMM;
  KO0UM001.KO0UWCYY = KO0UW01.KO0UWCYY;
  KO0UM001.KOTMADID = KOTREC.KOTMADID;
  KO0UW01.KOTMADID = KOTREC.KOTMADID;
  KO0UM001.SM4REPID = KOTREC.SM4REPID;
  KO0UM001.SM1AGYID = KOTREC.SM1AGYID;
  KO0UM001.KOTMADAM = KOTREC.KOTMADAM;
  KO0UM001.KOYADJCD = KOTREC.KOYADJCD;
  KO0UM001.KOHADJD1 = KOTREC.KOHADJD1;
  KO0UM001.KOHADJD2 = KOTREC.KOHADJD2;
  KO0UW01.KO0UWDTE = KOTREC.KOHADJMO;
  KO0UM001.KO0UWPMM = KO0UW01.KO0UWPMM;
  KO0UM001.KO0UWPYY = KO0UW01.KO0UWPYY;
  KO0UM001.KOHPADID = KOTREC.KOHPADID;
  KO0UM001.KOHADJNM = KOTREC.KOHADJNM;
  KO0UW01.KO0UWAUD = KOTREC.KOHADJDT;
  KO0UM001.KO0UWAYY = KO0UW01.KO0UWAYY;
  KO0UM001.KO0UWAMM = KO0UW01.KO0UWAMM;
  KO0UM001.IVCID = KOTREC.IVCID;
  ;
  if (KOTREC.KOHADJDT == +0)
    KO0UM001.KO0UWAYY = " ";
    KO0UM001.KO0UWAMM = " ";
  else
    /* next sentence*/
  end
  ;
  ;
  ;
end // end KO0US1C

// edit fields needing desc
Function KO0US1D()
  ;
  ;
     /* edit fields that have descriptions*/
  ;
  ;
  KO0US1E(); /* retrieve from sales agency id first occurence*/
  ;
  KO0US1F(); /* retrieve from sales rep/agency id*/
  ;
  KO0US1G(); /* retrieve adjustment code*/
  ;
  ;
  ;
end // end KO0US1D

// retrieve from sales agency id
Function KO0US1E()
  ;
  ;
  ;
           /* retrieve from sales agency id*/
  ;
  ;
  ;
  ;
  ;
  SM1REC.SM1AGYID = KO0UM001.SM1AGYID;
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0UM001.SM1AGYNM = SM1REC.SM1AGYNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0UM001.SM1AGYNM = " ";
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      TA1REC.TA1LOCAT[1] = "KO0US1E";
      TA1REC.TA1LOCAT[2] = "IO0050";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0US1E

// retrieve from sales rep/agy id
Function KO0US1F()
  ;
  ;
  ;
           /* retrieve from sales rep/agency id*/
  ;
  ;
  ;
  ;
  ;
  VRAGCY02.SM1AGYID = KO0UM001.SM1AGYID;
  VRAGCY02.SM4REPID = KO0UM001.SM4REPID;
  VRAGCY02.XXXSTAT = "A";
  ;
  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0UM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
    KO0UM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
    KO0UM001.XXXMDINT = VRAGCY02.XXXMDINT;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY02";
      TA1REC.TA1LOCAT[1] = "KO0US1F";
      TA1REC.TA1LOCAT[2] = "IO0400";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    ;
    VRAGCY02.XXXSTAT = "I";
    ;
    call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
      KO0UM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
      KO0UM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
      KO0UM001.XXXMDINT = VRAGCY02.XXXMDINT;
      call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KO0UM001.XXXFSTNM = " ";
        KO0UM001.XXXLSTNM = " ";
        KO0UM001.XXXMDINT = " ";
        call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
      else
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VRAGCY02";
        TA1REC.TA1LOCAT[1] = "KO0US1F";
        TA1REC.TA1LOCAT[2] = "IO0400";
        XSKO001(); /* abort*/
      end
    end
    ;
  end
  ;
  ;
   /* -----------*/
end // end KO0US1F

// retrieve adjustment code desc
Function KO0US1G()
  ;
  ;
  ;
           /* retrieve adjustment code description*/
  ;
  ;
  ;
  ;
  ;
  KOYREC.KOYADJCD = KO0UM001.KOYADJCD;
  ;
  call "IO1030" ("S ", SQLCA, KOYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0UM001.KOYADJDS = KOYREC.KOYADJDS;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0UM001.KOYADJDS = " ";
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VADJCD01";
      TA1REC.TA1TBLKE = KOYREC.KOYADJCD;
      TA1REC.TA1LOCAT[1] = "KO0US1G";
      TA1REC.TA1LOCAT[2] = "IO1030";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0US1G

// check pfkeys and selection
Function KO0US2A()
  ;
  ;
  ;
      /* check for valid pfkeys and valid use of opt: and item:*/
      /* fields*/
  ;
  ;
  if (KO0UM001.CATOAP > " ")
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KO0UM001.CATOAP;
      COMMAREA.CAITEM = KO0UM001.CAITEM;
      XSEXIT();
      VAGen_EZEMSG = COMMAREA.CAMSG;
      exit stack;
    else
      set KO0UM001.CATOAP cursor, bold;
      converseLib.validationFailed(1);
      exit stack;
    end
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf1)
    XSPF1(); /* transfer to help*/
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "KO0A";
      XSEXIT();
      VAGen_EZEMSG = COMMAREA.CAMSG;
    else
      if (converseVar.eventKey is pf4)
        XSPF4(); /* transfer to main menu*/
      else
        if (converseVar.eventKey is pa2)
          COMMAREA.CATOAP = "KO0A";
          XSEXIT();
          VAGen_EZEMSG = COMMAREA.CAMSG;
        else
          if (converseVar.eventKey is enter)
            return;
          else
            converseLib.validationFailed(2); /* invalid pf key*/
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end KO0US2A

//*** RECORD=KO0UW01 ****
// *******************  ko0hw01 record ************************
// this is the working storage record for ko0h application
// 
// 
// ************************************************************
// MAINTENANCE:
// 
// REV.
// NUMBER  WHO      WHEN      WHY
// ------  ------   -------   ---------------------------------
//  00     bnaber   09-24-86  created record.
// 
// 
// ************************************************************
// ***********************
Record KO0UW01 type basicRecord
  5 KO0UWGRP KO0UWGRP ; 
    10 KOTMADID KOTMADID ; 
    10 CATOAP CATOAP ; 
    10 CAITEM CAITEM ; 
    10 KO0UWDTE KO0UWDTE ; 
      15 * char(3) ; 
      15 KO0UWPYY KO0UWPYY ; 
      15 KO0UWPMM KO0UWPMM ; 
    10 KO0UWADT KO0UWADT ; 
      15 * char(3) ; 
      15 KO0UWCYY KO0UWCYY ; 
      15 KO0UWCMM KO0UWCMM ; 
    10 KO0UWCID KO0UWCID ; 
      15 KO0UWNID KO0UWNID ; 
      15 * char(14) ; 
    10 KO0UWAUD KO0UWAUD ; 
      15 * char(3) ; 
      15 KO0UWAYY KO0UWAYY ; 
      15 KO0UWAMM KO0UWAMM ; 
end // end KO0UW01

// comm. processing statemnet mo
DataItem KO0UWADT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// month of auth
DataItem KO0UWAMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// the date of authorization
DataItem KO0UWAUD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year of auth
DataItem KO0UWAYY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character comm adj id
DataItem KO0UWCID char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month comm stmt
DataItem KO0UWCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year comm stmt
DataItem KO0UWCYY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split month and year
DataItem KO0UWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comm. next misc. adj. id
DataItem KO0UWGRP char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric comm adj id
DataItem KO0UWNID num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month adj to affect
DataItem KO0UWPMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year adj to affect
DataItem KO0UWPYY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

