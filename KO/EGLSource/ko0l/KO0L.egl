package ko0l;

import corpcom1.CAITEM;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXFSTNM;
import corpcom7.XXXLSTNM;
import corpcom7.XXXMDINT;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGPCD;
import corpx1.XGPDESC;
import corpx1.XGPTBL;
import corpx1.XOBTBL;
import corpx2.XOBCD;
import ko.common.KOAREC;
import ko.common.KOEREC;
import ko.common.KOZREC;
import ku.common.KUCCOID;
import ku.common.KUCGRPID;
import ku.common.KUCREC;
import sm.common.SM1AGYID;
import sm.common.SM1AGYNM;
import sm.common.SM1REC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VRAGCY02;
//*** PROGRAM=KO0L ****
//      this application will allow the user to add and change
// the percentage of commission to be paid to the agency for
// commissions earned by reps of nike owned agencies.
// 
// 
// 12-16-88   jwood   added noncsp option on calls
// 12-16-88   jwood   added xssegtr logic
// 06-01-89   dmeier  restructure program / add cust, div,
//                    base ot, beginning month, ending month
//                    to agency split schedule
// 04-09-92   aivers  rename sm5stat to xxxstat.
// 06-04-92   aivers  REGEN FOR DATABASE CHANGES.
// 10-09-92   aivers  database changes.  Get rep's name from
//                    vragcy02 instead of sm5rec.
// *********************
Program KO0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO0LW01 KO0LW01; // record
  KO0LW02 KO0LW02; // record
  KO0LW03 KO0LW03; // record
  KOAREC KOAREC; // record
  KOEREC KOEREC; // record
  KOZREC KOZREC; // record
  KUCREC KUCREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VRAGCY02 VRAGCY02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use KO0LM.KO0LM005,  // forms
      KO0LM.KO0LM010, 
      KO0LM.KO0LM015
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0L000: KO0L000();
    ;
    ;
    goto KO0L005;
    ;
    ;
    KO0L005: KO0L005();
    ;
    ;
    if (KO0LW01.KO0LWAPP == "KO0L010")
      goto KO0L010;
    else
      if (KO0LW01.KO0LWAPP == "KO0L015")
        goto KO0L015;
      else
        goto KO0L005;
      end
    end
    ;
    ;
    KO0L010: KO0L010();
    ;
    ;
    if (KO0LW01.KO0LWAPP == "KO0L010")
      goto KO0L010;
    else
      if (KO0LW01.KO0LWAPP == "KO0L015")
        goto KO0L015;
      else
        goto KO0L005;
      end
    end
    ;
    ;
    KO0L015: KO0L015();
    ;
    ;
    if (KO0LW01.KO0LWAPP == "KO0L010")
      goto KO0L010;
    else
      if (KO0LW01.KO0LWAPP == "KO0L015")
        goto KO0L015;
      else
        goto KO0L005;
      end
    end
    ;
    ;
  end // end main
end // end KO0L

// initialize application
Function KO0L000()
  ;
  ;
  set KO0LW01 empty; /* ; initialize ws rec*/
  set KO0LW02 empty; /* ; initialize ws rec*/
  set KO0LW03 empty; /* ; initialize ws rec*/
  ;
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; set segmented trans id*/
  KO0LSAA(); /* ; get current stmt mo*/
  ;
  KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
  KO0LW01.KO0LWNKF = "Y"; /* ; set new key flag*/
  KO0LW01.KO0LWNAF = "Y"; /* ; set new array flag*/
  ;
  if (COMMAREA.CAITEM != " ") /* ; fast path item used*/
    KO0LW01.CAITEM = COMMAREA.CAITEM; /* ; move item to w.s.*/
    KO0LW01.SM1AGYID = KO0LW01.KO0LWID1; /* ; build w.s. agency*/
    KO0LW01.SM4REPID = KO0LW01.KO0LWID2; /* ; build w.s. rep*/
    KO0LW01.KO0LWEKF = "Y"; /* ; set edit key flag*/
  end
  ;
  KO0LW01.KO0LWAPP = "KO0L005"; /* set app proc name*/
  ;
  ;
   /* *************************************************************/
end // end KO0L000

// converse split sched screen
Function KO0L005()
  ;
  ;
  if (KO0LW01.KO0LWBMF == "Y") /* ; build map flag = 'y'*/
    KO0LW01.KO0LWBMF = "N"; /* ; reset build map flag*/
    KO0L006(); /* ; build map codes*/
    KO0L007(); /* ; build map desc*/
  else
    set KO0LM005.KO0LMMM1 skip, invisible; /* ; darken map mssg 1*/
    set KO0LM005.KO0LMMM2 skip, invisible; /* ; darken map mssg 2*/
  end
  ;
  KO0LM005.XXXPRCNM = "KO0L005";
  KO0LM005.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  if (KO0LW01.KO0LWMSG != " ")
    KO0LM005.VAGen_EZEMSG = KO0LW01.KO0LWMSG;
  else
    if (KO0LW01.KO0LWMNO != 0)
      if (KO0LW01.KO0LWMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KO0LW01.KO0LWMNO);
      end
    end
  end
  ;
  KO0LW01.KO0LWMNO = 0;
  ;
  ;
   /* *************************************************************/
  ;
  converse KO0LM005 ;
  ;
   /* *************************************************************/
  ;
  KO0L007(); /* ; reset map attributes*/
  KO0L008(); /* ; edit pf/pa key*/
  ;
  if (KO0LW01.KO0LWMSG == " " /* ; no system messages*/
   && KO0LW01.KO0LWMNO == 0)  /* ; no error messages*/
    KO0L009(); /* ; edit map*/
  end
  ;
  ;
   /* *************************************************************/
end // end KO0L005

// build screen
Function KO0L006()
  ;
  ;
  converseLib.clearScreen();
  set KO0LM005 initial; /* ; reset screen*/
  ;
  set KO0LM005.KO0LMMM1 skip, invisible; /* ; darken map mssg 1*/
  set KO0LM005.KO0LMMM2 skip, invisible; /* ; darken map mssg 2*/
  ;
  if (KO0LW01.KO0LWNKF == "Y") /* ; new key flag = 'y'*/
    KO0LW01.KO0LWNKF = "N"; /* ; reset new key flag*/
    KO0LSBA(); /* ; build new key*/
  end
  ;
  if (KO0LW01.KO0LWNAF == "Y") /* ; new array flag = 'y'*/
    KO0LW01.KO0LWNAF = "N"; /* ; reset new array flag*/
    KO0LSBI(); /* ; retrieve split sched*/
  end
  ;
  KO0LSBN(); /* ; move sched to screen*/
  KO0LSBQ(); /* ; move prev sel codes*/
  KO0LSBR(); /* ; set pf key attributes*/
  ;
  KO0LM005.SM1AGYID = KO0LW01.SM1AGYID;
  KO0LM005.SM1AGYNM = KO0LW01.SM1AGYNM;
  KO0LM005.SM4REPID = KO0LW01.SM4REPID;
  KO0LM005.XXXLSTNM = KO0LW01.XXXLSTNM;
  KO0LM005.XXXFSTNM = KO0LW01.XXXFSTNM;
  KO0LM005.XXXMDINT = KO0LW01.XXXMDINT;
  ;
  ;
   /* *************************************************************/
end // end KO0L006

// set map attributes
Function KO0L007()
  ;
  ;
  set KO0LW03 empty; /* ; reset ko0lw03*/
  ;
  KO0LW01.KO0LWSB1 = 10; /* ; set array subscript*/
  while (KO0LW01.KO0LWSB1 > 0) /* ; until top of array*/
    ;
    if (KO0LM005.XGPCD[KO0LWSB1] == " "    /* ; no map gpc*/
     && KO0LM005.KO0LMRPC[KO0LWSB1] == 0   /* ; no map rep pct*/
     && KO0LM005.KO0LMAPC[KO0LWSB1] == 0   /* ; no map agcy pct*/
     && KO0LM005.KO0LMBMO[KO0LWSB1] == " " /* ; no map begin date*/
     && KO0LM005.KO0LMXMO[KO0LWSB1] == " ") /* ; no map end date*/
      KO0LM005.XGPDESC[KO0LWSB1] = " "; /* ; clear map gpc abrv*/
    else
      KO0LSCA(); /* ; get begin date*/
      KO0LSCB(); /* ; get end date*/
      KO0LSCC(); /* ; get gpc abrv*/
    end
    ;
    KO0LSCD(); /* ; set row attributes*/
    KO0LSCE(); /* ; build ko0lw03*/
    ;
    KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 - 1; /* ; increment array*/
    ;
  end
  ;
  KO0LW03.SM1AGYID = KO0LM005.SM1AGYID;
  KO0LW03.SM4REPID = KO0LM005.SM4REPID;
  ;
  ;
end // end KO0L007

// validate attention key
Function KO0L008()
  ;
  ;
  set KO0LM005.CATOAP normal; /* ; reset map to appl*/
  set KO0LM005.CAITEM normal; /* ; reset map to item*/
  ;
  COMMAREA.CATOAP = " "; /* ; reset commarea to appl*/
  COMMAREA.CAITEM = " "; /* ; reset commarea to item*/
  ;
  if (KO0LM005.CATOAP != " ") /* ; fast path used*/
    KO0LSDA(); /* ; edit fast path*/
  else
    if (converseVar.eventKey is enter /* ; attention key = enter*/
     || converseVar.eventKey is pf7   /* ; or pf7*/
     || converseVar.eventKey is pf8)  /* ; or pf8*/
      KO0LSDB(); /* ; set function key*/
    else
      if (converseVar.eventKey is pf1) /* ; attention key = pf1*/
        XSPF1(); /* ; call help*/
      else
        if (converseVar.eventKey is pf3 /* ; attention key = pf3*/
         || converseVar.eventKey is pa2) /* ; or pa2*/
          COMMAREA.CATOAP = "KO0A"; /* ; call comm menu*/
          XSEXIT();
        else
          if (converseVar.eventKey is pf4) /* ; attention key = pf4*/
            XSPF4(); /* ; call main menu*/
          else
            KO0LW01.KO0LWMNO = 2; /* ; invalid attenion key*/
          end
        end
      end
    end
  end
  ;
  KO0LW01.KO0LWMSG = COMMAREA.CAMSG; /* ; save comm mssg*/
  COMMAREA.CAMSG = " "; /* ; reset comm mssg*/
  ;
  ;
end // end KO0L008

// edit map
Function KO0L009()
  ;
  ;
  KO0LW01.KO0LWKCF = "N"; /* ; reset key change flag*/
  KO0LW01.KO0LWFCF = "N"; /* ; reset funct change flag*/
  KO0LW01.KO0LWSCF = "N"; /* ; reset sched change flag*/
  ;
  KO0LSEA(); /* ; check for changes*/
  ;
  if (KO0LW01.KO0LWKCF == "Y") /* ; key changes were made*/
    KO0LSEC(); /* ; process key changes*/
  else
    if (KO0LW01.KO0LWFCF == "Y") /* ; funct changes were made*/
      KO0LSED();
                                   /* ; process function changes*/
    else
      KO0LSEE(); /* ; process no changes*/
    end
  end
  ;
  ;
end // end KO0L009

// converse split sched history
Function KO0L010()
  ;
  ;
  if (KO0LW01.KO0LWBMF == "Y") /* ; build map flag = 'y'*/
    KO0LW01.KO0LWBMF = "N"; /* ; reset build map flag*/
    KO0L011(); /* ; build map codes*/
    KO0L012(); /* ; build map desc*/
  else
    set KO0LM010.KO0LMMM1 skip, invisible; /* ; darken map mssg 1*/
    set KO0LM010.KO0LMMM2 skip, invisible; /* ; darken map mssg 2*/
  end
  ;
  KO0LM010.XXXPRCNM = "KO0L010";
  KO0LM010.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  if (KO0LW01.KO0LWMSG != " ")
    KO0LM010.VAGen_EZEMSG = KO0LW01.KO0LWMSG;
  else
    if (KO0LW01.KO0LWMNO != 0)
      if (KO0LW01.KO0LWMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KO0LW01.KO0LWMNO);
      end
    end
  end
  ;
  KO0LW01.KO0LWMSG = " ";
  KO0LW01.KO0LWMNO = 0;
  ;
  ;
   /* *************************************************************/
  ;
  converse KO0LM010 ;
  ;
   /* *************************************************************/
  ;
  KO0L012(); /* ; reset map attributes*/
  KO0L013(); /* ; edit pf/pa key*/
  ;
  if (KO0LW01.KO0LWMSG == " " /* ; no system messages*/
   && KO0LW01.KO0LWMNO == 0)  /* ; no error messages*/
    KO0L014(); /* ; edit map*/
  end
  ;
  ;
   /* *************************************************************/
end // end KO0L010

// build screen
Function KO0L011()
  ;
  ;
  converseLib.clearScreen();
  set KO0LM010 initial; /* ; reset screen*/
  ;
  if (KO0LW01.KO0LWNKF == "Y") /* ; new key flag = 'y'*/
    KO0LW01.KO0LWNKF = "N"; /* ; reset new key flag*/
    KO0LSFA(); /* ; build new key*/
  end
  ;
  if (KO0LW01.KO0LWNAF == "Y") /* ; new array flag = 'y'*/
    KO0LW01.KO0LWNAF = "N"; /* ; reset new array flag*/
    KO0LSFJ(); /* ; retrieve split sched*/
  else
    set KO0LM010.KO0LMMM1 skip, invisible; /* ; darken map mssg 1*/
    set KO0LM010.KO0LMMM2 skip, invisible; /* ; darken map mssg 2*/
  end
  ;
  KO0LSFQ(); /* ; move sched to screen*/
  KO0LSFS(); /* ; set pf key attributes*/
  ;
  KO0LM010.SM1AGYID = KO0LW01.SM1AGYID;
  KO0LM010.SM1AGYNM = KO0LW01.SM1AGYNM;
  KO0LM010.SM4REPID = KO0LW01.SM4REPID;
  KO0LM010.XXXLSTNM = KO0LW01.XXXLSTNM;
  KO0LM010.XXXFSTNM = KO0LW01.XXXFSTNM;
  KO0LM010.XXXMDINT = KO0LW01.XXXMDINT;
  KO0LM010.XGPCD = KO0LW01.XGPCD;
  KO0LM010.XGPDESC = KO0LW01.XGPDESC;
  ;
  ;
   /* *************************************************************/
end // end KO0L011

// set map attributes
Function KO0L012()
  ;
  ;
  KO0LW01.KO0LWSB1 = 10; /* ; set array subscript*/
  while (KO0LW01.KO0LWSB1 > 0) /* ; until top of array*/
    ;
    KO0LSGA(); /* ; get begin date*/
    KO0LSGB(); /* ; get end date*/
    KO0LSGC(); /* ; set row attribtues*/
    ;
    KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 - 1; /* ; increment array*/
    ;
  end
  ;
  ;
end // end KO0L012

// validate attention key
Function KO0L013()
  ;
  ;
  set KO0LM010.CATOAP normal; /* ; reset map to appl*/
  set KO0LM010.CAITEM normal; /* ; reset map to item*/
  ;
  COMMAREA.CATOAP = " "; /* ; reset commarea to appl*/
  COMMAREA.CAITEM = " "; /* ; reset commarea to item*/
  ;
  if (KO0LM010.CATOAP != " ") /* ; fast path used*/
    KO0LSHA(); /* ; edit fast path*/
  else
    if (converseVar.eventKey is enter /* ; attention key = enter*/
     || converseVar.eventKey is pf3   /* ; or pf3*/
     || converseVar.eventKey is pf7   /* ; or pf7*/
     || converseVar.eventKey is pf8)  /* ; or pf8*/
      KO0LSHB(); /* ; set function key*/
    else
      if (converseVar.eventKey is pf1) /* ; attention key = pf1*/
        XSPF1(); /* ; call help*/
      else
        if (converseVar.eventKey is pa2) /* ; or pa2*/
          COMMAREA.CATOAP = "KO0A"; /* ; call comm menu*/
          XSEXIT();
        else
          if (converseVar.eventKey is pf4) /* ; attention key = pf4*/
            XSPF4(); /* ; call main menu*/
          else
            KO0LW01.KO0LWMNO = 2; /* ; invalid attenion key*/
          end
        end
      end
    end
  end
  ;
  KO0LW01.KO0LWMSG = COMMAREA.CAMSG; /* ; save comm mssg*/
  COMMAREA.CAMSG = " "; /* ; reset comm mssg*/
  ;
  ;
end // end KO0L013

// edit map
Function KO0L014()
  ;
  ;
  KO0LW01.KO0LWKCF = "N"; /* ; reset key change flag*/
  KO0LW01.KO0LWSCF = "N"; /* ; reset sched change flag*/
  ;
  KO0LSIA(); /* ; check for changes*/
  ;
  if (KO0LW01.KO0LWKCF == "Y") /* ; key changes were made*/
    KO0LSIB(); /* ; process key changes*/
  else
    KO0LSIC(); /* ; process no changes*/
  end
  ;
  ;
end // end KO0L014

// converse split sched excepts
Function KO0L015()
  ;
  ;
  if (KO0LW01.KO0LWBMF == "Y") /* ; build map flag = 'y'*/
    KO0LW01.KO0LWBMF = "N"; /* ; reset build map flag*/
    KO0L016(); /* ; build map codes*/
    KO0L017(); /* ; build map desc*/
  else
    set KO0LM015.KO0LMMM1 skip, invisible; /* ; darken map mssg 1*/
    set KO0LM015.KO0LMMM2 skip, invisible; /* ; darken map mssg 2*/
    set KO0LM015.KO0LMMM3 skip, invisible; /* ; darken map mssg 3*/
    set KO0LM015.KO0LMMM4 skip, invisible; /* ; darken map mssg 4*/
  end
  ;
  KO0LM015.XXXPRCNM = "KO0L015";
  ;
  if (KO0LW01.KO0LWCHF == "C") /* ; curr/history flag = 'c'*/
    KO0LM015.KO0LMTTL = "CURRENT"; /* ; map title = current*/
  else
    KO0LM015.KO0LMTTL = "HISTORY"; /* ; map title = history*/
  end
  ;
  KO0LM015.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  if (KO0LW01.KO0LWMSG != " ")
    KO0LM015.VAGen_EZEMSG = KO0LW01.KO0LWMSG;
  else
    if (KO0LW01.KO0LWMNO != 0)
      if (KO0LW01.KO0LWMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KO0LW01.KO0LWMNO);
      end
    end
  end
  ;
  KO0LW01.KO0LWMSG = " ";
  KO0LW01.KO0LWMNO = 0;
  ;
  ;
   /* *************************************************************/
  ;
  converse KO0LM015 ;
  ;
   /* *************************************************************/
  ;
  KO0L017(); /* ; reset map attributes*/
  KO0L018(); /* ; edit pf/pa key*/
  ;
  if (KO0LW01.KO0LWMSG == " " /* ; no system messages*/
   && KO0LW01.KO0LWMNO == 0)  /* ; no error messages*/
    KO0L019(); /* ; edit map*/
  end
  ;
  ;
   /* *************************************************************/
end // end KO0L015

// build screen
Function KO0L016()
  ;
  ;
  converseLib.clearScreen();
  set KO0LM015 initial; /* ; reset screen*/
  ;
  if (KO0LW01.KO0LWNKF == "Y") /* ; new key flag = 'y'*/
    KO0LW01.KO0LWNKF = "N"; /* ; reset new key flag*/
    KO0LSJA(); /* ; build new key*/
  end
  ;
  if (KO0LW01.KO0LWNAF == "Y") /* ; new array flag = 'y'*/
    KO0LW01.KO0LWNAF = "N"; /* ; reset new array flag*/
    KO0LSJJ(); /* ; retrieve split sched*/
  else
    set KO0LM015.KO0LMMM3 skip, invisible; /* ; darken map mssg 3*/
    set KO0LM015.KO0LMMM4 skip, invisible; /* ; darken map mssg 4*/
  end
  ;
  KO0LSJQ(); /* ; move sched to screen*/
  KO0LSJT(); /* ; set pf key attributes*/
  ;
  KO0LM015.SM1AGYID = KO0LW01.SM1AGYID;
  KO0LM015.SM1AGYNM = KO0LW01.SM1AGYNM;
  KO0LM015.SM4REPID = KO0LW01.SM4REPID;
  KO0LM015.XXXLSTNM = KO0LW01.XXXLSTNM;
  KO0LM015.XXXFSTNM = KO0LW01.XXXFSTNM;
  KO0LM015.XXXMDINT = KO0LW01.XXXMDINT;
  KO0LM015.XGPCD = KO0LW01.XGPCD;
  KO0LM015.XGPDESC = KO0LW01.XGPDESC;
  ;
  ;
   /* *************************************************************/
end // end KO0L016

// set map attributes
Function KO0L017()
  ;
  ;
  KO0LW01.KO0LWSB1 = 5; /* ; set array subscript*/
  while (KO0LW01.KO0LWSB1 > 0) /* ; until top of array*/
    ;
    KO0LSKA(); /* ; get begin date*/
    KO0LSKB(); /* ; get end date*/
    KO0LSKC(); /* ; get cust name*/
    KO0LSKD(); /* ; get div abrv*/
    KO0LSKE(); /* ; get bot abrv*/
    KO0LSKF(); /* ; set row attributes*/
    ;
    KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 - 1; /* ; increment array*/
    ;
  end
  ;
  ;
end // end KO0L017

// validate attention key
Function KO0L018()
  ;
  ;
  set KO0LM015.CATOAP normal; /* ; reset map to appl*/
  set KO0LM015.CAITEM normal; /* ; reset map to item*/
  ;
  COMMAREA.CATOAP = " "; /* ; reset commarea to appl*/
  COMMAREA.CAITEM = " "; /* ; reset commarea to item*/
  ;
  if (KO0LM015.CATOAP != " ") /* ; fast path used*/
    KO0LSLA(); /* ; edit fast path*/
  else
    if (converseVar.eventKey is enter /* ; attention key = enter*/
     || converseVar.eventKey is pf3   /* ; or pf3*/
     || converseVar.eventKey is pf7   /* ; or pf7*/
     || converseVar.eventKey is pf8   /* ; or pf8*/
     || converseVar.eventKey is pf16) /* ; or pf16*/
      KO0LSLB(); /* ; set function key*/
    else
      if (converseVar.eventKey is pf1) /* ; attention key = pf1*/
        XSPF1(); /* ; call help*/
      else
        if (converseVar.eventKey is pa2) /* ; or pa2*/
          COMMAREA.CATOAP = "KO0A"; /* ; call comm menu*/
          XSEXIT();
        else
          if (converseVar.eventKey is pf4) /* ; attention key = pf4*/
            XSPF4(); /* ; call main menu*/
          else
            KO0LW01.KO0LWMNO = 2; /* ; invalid attenion key*/
          end
        end
      end
    end
  end
  ;
  KO0LW01.KO0LWMSG = COMMAREA.CAMSG; /* ; save comm mssg*/
  COMMAREA.CAMSG = " "; /* ; reset comm mssg*/
  ;
  ;
end // end KO0L018

// edit map
Function KO0L019()
  ;
  ;
  if (KO0LM015.SM1AGYID != KO0LW01.SM1AGYID /* ; new map agcy*/
   || KO0LM015.SM4REPID != KO0LW01.SM4REPID /* ; new map rep*/
   || KO0LM015.XGPCD != KO0LW01.XGPCD)      /* ; new map gpc*/
    KO0LSMA(); /* ; process key changes*/
  else
    KO0LSMB(); /* ; process no changes*/
  end
  ;
  ;
end // end KO0L019

// get current stmt mo
Function KO0LSAA()
  ;
  ;
  set SQLCA empty;
  set KOZREC empty;
  ;
  call "IO0640" ("S ", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOCTL01";
    TA1REC.TA1LOCAT[1] = "KO0LSAA";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001();
  end
  ;
  KO0LW01.KO0LWCSM = KOZREC.KOZCSTMO;
  KO0LW01.KO0LWDTB = KOZREC.KOZCSTMO;
  ;
  if (KO0LW01.KO0LWMMB < 12)
    KO0LW01.KO0LWMMB = KO0LW01.KO0LWMMB + 1;
  else
    KO0LW01.KO0LWMMB = 1;
    KO0LW01.KO0LWYYB = KO0LW01.KO0LWYYB + 1;
    if (KO0LW01.KO0LWYYB == 0)
      KO0LW01.KO0LWCCB = KO0LW01.KO0LWCCB + 1;
    end
  end
  ;
  KO0LW01.KO0LWNSM = KO0LW01.KO0LWDTB;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSAA

// build new key
Function KO0LSBA()
  ;
  ;
  KO0LSBB(); /* ; reset w.s. fields*/
  ;
  if (KO0LW01.KO0LWEKF == "Y") /* ; edit key flag = 'y'*/
    KO0LW01.KO0LWEKF = "N"; /* ; reset edit key flag*/
    KO0LSBC(); /* ; edit key data*/
  end
  ;
  ;
   /* *************************************************************/
end // end KO0LSBA

// reset working storage
Function KO0LSBB()
  ;
  ;
  KO0LW01.KO0LWKEF = "N"; /* ; set key error flag*/
  KO0LW01.KO0LWKWF = "N"; /* ; set key warning flag*/
  KO0LW01.KO0LWSFF = "N"; /* ; set sched found flag*/
  KO0LW01.KO0LWSAF = "N"; /* ; set scroll allowed flag*/
  KO0LW01.SM1AGYNM = " "; /* ; set w.s. agcy name*/
  KO0LW01.XXXLSTNM = " "; /* ; set w.s. rep last name*/
  KO0LW01.XXXFSTNM = " "; /* ; set w.s. rep first name*/
  KO0LW01.XXXMDINT = " "; /* ; set w.s. rep mid init*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBB

// edit key data
Function KO0LSBC()
  ;
  ;
  if (KO0LW01.SM4REPID != 0) /* ; user entered rep id*/
    KO0LSBD(); /* ; edit rep id*/
  else
    set KO0LM005.SM4REPID cursor, bold; /* ; highlight rep id*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 38; /* ; required field*/
  end
  ;
  if (KO0LW01.SM1AGYID != " ") /* ; user entered agcy id*/
    KO0LSBG(); /* ; edit agcy id*/
  else
    set KO0LM005.SM1AGYID cursor, bold; /* ; highlight agcy id*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 38; /* ; required field*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBC

// edit rep id
Function KO0LSBD()
  ;
  ;
  set SQLCA empty;
  set VRAGCY02 empty;
  ;
  VRAGCY02.SM1AGYID = KO0LW01.SM1AGYID;
  VRAGCY02.SM4REPID = KO0LW01.SM4REPID;
  call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; sucessful open*/
    KO0LSBE(); /* ; fetch rep rec*/
  else
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY02";
    TA1REC.TA1LOCAT[1] = "KO0LSBD";
    TA1REC.TA1LOCAT[2] = "IO0400";
    XSKO001(); /* ; abort*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBD

// fetch sm5rec
Function KO0LSBE()
  ;
  ;
  set SQLCA empty;
  ;
  call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
    KO0LSBF(); /* ; edit comm rate ind*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KO0LM005.SM4REPID cursor, bold;
      set KO0LM005.SM1AGYID bold;
      KO0LW01.KO0LWKEF = "Y";
      KO0LW01.KO0LWMNO = 6;
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY02";
      TA1REC.TA1LOCAT[1] = "KO0LSBE";
      TA1REC.TA1LOCAT[2] = "IO0400";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBE

// edit comm rate ind/status
Function KO0LSBF()
  ;
  ;
  KO0LW01.XXXFSTNM = VRAGCY02.XXXFSTNM;
  KO0LW01.XXXLSTNM = VRAGCY02.XXXLSTNM;
  KO0LW01.XXXMDINT = VRAGCY02.XXXMDINT;
  ;
  if (VRAGCY02.SM5COMIN != "Y") /* ; comm rate ind not 'y'*/
    set KO0LM005.SM4REPID cursor, bold; /* ; highlight rep*/
    set KO0LM005.SM1AGYID bold; /* ; highlight agcy*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 162; /* ; set error message*/
  else
    if (VRAGCY02.XXXSTAT != "A") /* ; status not 'a'*/
      KO0LW01.KO0LWKWF = "Y"; /* ; set key warning flag*/
      KO0LW01.KO0LWMNO = 202;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBF

// edit agcy id
Function KO0LSBG()
  ;
  ;
  set SQLCA empty;
  set SM1REC empty;
  ;
  SM1REC.SM1AGYID = KO0LW01.SM1AGYID;
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    KO0LSBH(); /* ; edit pay code*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KO0LM005.SM1AGYID cursor, bold;
      KO0LW01.KO0LWKEF = "Y";
      KO0LW01.KO0LWMNO = 4;
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1LOCAT[1] = "KO0LSBG";
      TA1REC.TA1LOCAT[2] = "IO0050";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBG

// edit agcy pay code/status
Function KO0LSBH()
  ;
  ;
  KO0LW01.SM1AGYNM = SM1REC.SM1AGYNM;
  ;
  if (SM1REC.SM1PAYCD != "NP") /* ; pay code not 'np'*/
    set KO0LM005.SM1AGYID cursor, bold; /* ; highlight agcy*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 168; /* ; set error message*/
  else
    if (SM1REC.SM1STAT != "A") /* ; status not 'a'*/
      KO0LW01.KO0LWKWF = "Y"; /* ; set key warning flag*/
      KO0LW01.KO0LWMNO = 203;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBH

// build agcy split schedule
Function KO0LSBI()
  ;
  ;
  KO0LW01.XGPCD = "**"; /* ; reset gpc code*/
  KO0LW01.KO0LWBMO = 0; /* ; reset begin month*/
  KO0LW01.KO0LWXMO = 0; /* ; reset end month*/
  ;
  set KO0LW02 empty;
  ;
  if (KO0LW01.SM1AGYID != "    "
   && KO0LW01.SM4REPID != 0)
    ;
    set SQLCA empty;
    set KOEREC empty;
    ;
    KOEREC.SM1AGYID = KO0LW01.SM1AGYID;
    KOEREC.SM4REPID = KO0LW01.SM4REPID;
    ;
    call "IO0700" ("SS", SQLCA, KOEREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      ;
      KO0LW01.KO0LWSB1 = 1; /* ; reset subscript 1*/
      KO0LW02.KO0LWTOT = 1; /* ; reset sched total*/
      KO0LW02.KO0LWTTL = 0; /* ; reset rec total*/
      ;
      while (KO0LW02.KO0LWTOT <= 100 /* ; array is not full*/
       && SQLCA.VAGen_SQLCODE == 0) /* ; successful sql rtn*/
        KO0LSBJ(); /* ; fetch sched recs*/
      end
      ;
      call "IO0700" ("CS", SQLCA, KOEREC) {isNoRefresh = yes, isExternal = yes};
      ;
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VASSCH01";
      TA1REC.TA1LOCAT[1] = "KO0LSBI";
      TA1REC.TA1LOCAT[2] = "IO0700";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  if (KO0LW01.SM1AGYID != " " /* ; map has agency*/
   && KO0LW01.SM4REPID != 0)  /* ; map has rep*/
    KO0LM005.KO0LMMM1 = KO0LW02.KO0LWTTL; /* ; set map message 1*/
    set KO0LM005.KO0LMMM1 initialAttributes; /* ; show map mssg 1*/
    set KO0LM005.KO0LMMM2 initialAttributes; /* ; show map mssg 2*/
  else
    set KO0LM005.KO0LMMM1 skip, invisible; /* ; darken map mssg 1*/
    set KO0LM005.KO0LMMM2 skip, invisible; /* ; darken map mssg 2*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBI

// fetch agcy split rec
Function KO0LSBJ()
  ;
  ;
  set SQLCA empty;
  set KOEREC empty;
  ;
  call "IO0700" ("SN", SQLCA, KOEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; fetch was successful*/
    KO0LW01.KO0LWSFF = "Y"; /* ; set sched found flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; at end of recs*/
      KOEREC.XGPCD = "99";
      KOEREC.KUCCOID = -1;
      KOEREC.XDVCD = "**";
      KOEREC.XOBCD = "**";
    end
  end
  ;
  if (KOEREC.XGPCD == KO0LW01.XGPCD) /* ; process same gpc*/
    KO0LSBK();
  else
    if (KO0LW01.KO0LWKEF == "N") /* ; no key errors*/
      if (KO0LW01.KO0LWSFF == "Y" /* ; split sched found*/
       || KO0LW01.KO0LWKWF == "N") /* ; no key warnings*/
        KO0LSBL(); /* ; move xgptbl to array*/
      end
    end
    ;
    if (KO0LW02.KO0LWTOT <= 100 /* ; array is not full*/
     && KOEREC.XGPCD != "99")   /* ; VALID KOEREC*/
      KO0LSBM(); /* ; move koerec to array*/
    end
  end
  ;
  KO0LW01.XGPCD = KOEREC.XGPCD; /* ; set w.s. gpc*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBJ

// process same gpc rec
Function KO0LSBK()
  ;
  ;
  KO0LW01.KO0LWSB2 = KO0LW02.KO0LWTOT - 2;
  ;
  if (KOEREC.KUCCOID != -1
   || KOEREC.XDVCD != "**"
   || KOEREC.XOBCD != "**")
    KO0LW02.KO0LWFF2[KO0LWSB2] = "*";
  else
    KO0LW02.KO0LWFF1[KO0LWSB2] = "*";
    if (KOEREC.KOEASBMO >= KO0LW02.KO0LWBMO[KO0LWSB2])
      if (KOEREC.KOEASXMO >= KO0LW01.KO0LWNSM
       || KOEREC.KOEASXMO == 0)
        KO0LW02.KO0LWRPC[KO0LWSB2] = 100 - KOEREC.KOEASPCT;
        KO0LW02.KO0LWAPC[KO0LWSB2] = 0 + KOEREC.KOEASPCT;
        KO0LW02.KO0LWBMO[KO0LWSB2] = KOEREC.KOEASBMO;
        KO0LW02.KO0LWXMO[KO0LWSB2] = KOEREC.KOEASXMO;
      else
        KO0LW01.KO0LWDTB = KOEREC.KOEASXMO;
        ;
        if (KO0LW01.KO0LWMMB < 12)
          KO0LW01.KO0LWMMB = KO0LW01.KO0LWMMB + 1;
        else
          if (KO0LW01.KO0LWYYB < 99)
            KO0LW01.KO0LWYYB = KO0LW01.KO0LWYYB + 1;
            KO0LW01.KO0LWMMB = 01;
          else
            KO0LW01.KO0LWCCB = KO0LW01.KO0LWCCB + 1;
            KO0LW01.KO0LWYYB = 00;
            KO0LW01.KO0LWMMB = 01;
          end
        end
        ;
        KO0LW02.KO0LWRPC[KO0LWSB2] = 100;
        KO0LW02.KO0LWAPC[KO0LWSB2] = 0;
        KO0LW02.KO0LWBMO[KO0LWSB2] = KO0LW01.KO0LWDTB;
        KO0LW02.KO0LWXMO[KO0LWSB2] = 0;
        ;
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBK

// move xgptbl to array
Function KO0LSBL()
  ;
  ;
  while (XGPTBL.XGPCD[KO0LWSB1] < KOEREC.XGPCD)
    ;
    if (XGPTBL.XGPCD[KO0LWSB1] > KO0LW01.XGPCD /* ; new gpc*/
     && XGPTBL.XXXSTAT[KO0LWSB1] == "A"        /* ; gpc is active*/
     && XGPTBL.COCMFL[KO0LWSB1] == "Y")        /* ; comm flag = y*/
      KO0LW02.KO0LWFF2[KO0LWTOT] = " ";
      KO0LW02.XGPCD[KO0LWTOT] = XGPTBL.XGPCD[KO0LWSB1];
      KO0LW02.KUCCOID[KO0LWTOT] = -1;
      KO0LW02.XDVCD[KO0LWTOT] = "**";
      KO0LW02.XOBCD[KO0LWTOT] = "**";
      KO0LW02.KO0LWRPC[KO0LWTOT] = 100;
      KO0LW02.KO0LWAPC[KO0LWTOT] = 0;
      KO0LW02.KO0LWBMO[KO0LWTOT] = 0;
      KO0LW02.KO0LWXMO[KO0LWTOT] = 0;
      KO0LW02.KO0LWTTL = KO0LW02.KO0LWTTL + 1;
      KO0LW02.KO0LWTOT = KO0LW02.KO0LWTOT + 2;
    end
    ;
    KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1; /* ; increment subscript*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBL

// move koerec to array
Function KO0LSBM()
  ;
  ;
  KO0LW02.XGPCD[KO0LWTOT] = KOEREC.XGPCD;
  KO0LW02.KUCCOID[KO0LWTOT] = -1;
  KO0LW02.XDVCD[KO0LWTOT] = "**";
  KO0LW02.XOBCD[KO0LWTOT] = "**";
  ;
  if (KOEREC.KUCCOID != -1
   || KOEREC.XDVCD != "**"
   || KOEREC.XOBCD != "**")
    KO0LW02.KO0LWFF2[KO0LWTOT] = "*";
    KO0LW02.KO0LWRPC[KO0LWTOT] = 100;
    KO0LW02.KO0LWAPC[KO0LWTOT] = 0;
    KO0LW02.KO0LWBMO[KO0LWTOT] = 0;
    KO0LW02.KO0LWXMO[KO0LWTOT] = 0;
  else
    if (KOEREC.KOEASXMO >= KO0LW01.KO0LWNSM
     || KOEREC.KOEASXMO == 0)
      KO0LW02.KO0LWRPC[KO0LWTOT] = 100 - KOEREC.KOEASPCT;
      KO0LW02.KO0LWAPC[KO0LWTOT] = 0 + KOEREC.KOEASPCT;
      KO0LW02.KO0LWBMO[KO0LWTOT] = KOEREC.KOEASBMO;
      KO0LW02.KO0LWXMO[KO0LWTOT] = KOEREC.KOEASXMO;
    else
      KO0LW01.KO0LWDTB = KOEREC.KOEASXMO;
      ;
      if (KO0LW01.KO0LWMMB < 12)
        KO0LW01.KO0LWMMB = KO0LW01.KO0LWMMB + 1;
      else
        if (KO0LW01.KO0LWYYB < 99)
          KO0LW01.KO0LWYYB = KO0LW01.KO0LWYYB + 1;
          KO0LW01.KO0LWMMB = 01;
        else
          KO0LW01.KO0LWCCB = KO0LW01.KO0LWCCB + 1;
          KO0LW01.KO0LWYYB = 00;
          KO0LW01.KO0LWMMB = 01;
        end
      end
      ;
      KO0LW02.KO0LWFF1[KO0LWTOT] = "*";
      KO0LW02.KO0LWRPC[KO0LWTOT] = 100;
      KO0LW02.KO0LWAPC[KO0LWTOT] = 0;
      KO0LW02.KO0LWBMO[KO0LWTOT] = KO0LW01.KO0LWDTB;
      KO0LW02.KO0LWXMO[KO0LWTOT] = 0;
      ;
    end
  end
  ;
  KO0LW02.KO0LWTTL = KO0LW02.KO0LWTTL + 1;
  KO0LW02.KO0LWTOT = KO0LW02.KO0LWTOT + 2;
  ;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBM

// move split sched to screen
Function KO0LSBN()
  ;
  ;
  KO0LW01.KO0LWEF1 = "N"; /* ; reset error flag 1*/
  while (KO0LW01.KO0LWEF1 == "N")
                                   /* ; until error flag 1 = 'y'*/
    KO0LW01.KO0LWSB1 = 10; /* ; reset map subscript*/
    while (KO0LW01.KO0LWSB1 > 0) /* ; until top of map sched*/
      KO0LSBO(); /* ; move row to row*/
    end
    ;
    KO0LW01.KO0LWSB1 = 10; /* ; reset map subscript*/
    while (KO0LW01.KO0LWSB1 > 0) /* ; until top of map sched*/
      KO0LSBP(); /* ; compare row to ko0ew03*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBN

// move array row to map row
Function KO0LSBO()
  ;
  ;
  KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB1 + KO0LW02.KO0LWPOS;
  ;
  KO0LM005.KO0LMFF1[KO0LWSB1] = KO0LW02.KO0LWFF1[KO0LWSB2];
  KO0LM005.KO0LMSC1[KO0LWSB1] = " ";
  KO0LM005.KO0LMFF2[KO0LWSB1] = KO0LW02.KO0LWFF2[KO0LWSB2];
  KO0LM005.KO0LMSC2[KO0LWSB1] = " ";
  KO0LM005.XGPCD[KO0LWSB1] = KO0LW02.XGPCD[KO0LWSB2];
  KO0LM005.KO0LMRPC[KO0LWSB1] = KO0LW02.KO0LWRPC[KO0LWSB2];
  KO0LM005.KO0LMAPC[KO0LWSB1] = KO0LW02.KO0LWAPC[KO0LWSB2];
  ;
  if (KO0LW02.KO0LWBMO[KO0LWSB2] == 0)
    KO0LM005.KO0LMBMO[KO0LWSB1] = " ";
  else
    KO0LW01.KO0LWDTB = KO0LW02.KO0LWBMO[KO0LWSB2];
    KO0LW01.KO0LWYYA = KO0LW01.KO0LWYYB;
    KO0LW01.KO0LWMMA = KO0LW01.KO0LWMMB;
    KO0LW01.KO0LWFLA = "/";
    KO0LM005.KO0LMBMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
  end
  ;
  if (KO0LW02.KO0LWXMO[KO0LWSB2] == 0)
    KO0LM005.KO0LMXMO[KO0LWSB1] = " ";
  else
    KO0LW01.KO0LWDTB = KO0LW02.KO0LWXMO[KO0LWSB2];
    KO0LW01.KO0LWYYA = KO0LW01.KO0LWYYB;
    KO0LW01.KO0LWMMA = KO0LW01.KO0LWMMB;
    KO0LW01.KO0LWFLA = "/";
    KO0LM005.KO0LMXMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
  end
  ;
  KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 - 1;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBO

// compare map to ko0ew03
Function KO0LSBP()
  ;
  ;
  KO0LW01.KO0LWSB2 = 1; /* ; reset ko0lw03 subscript*/
  while (KO0LW01.KO0LWSB2 <= 10) /* ; until end of ko0lw03*/
    if (KO0LM005.XGPCD[KO0LWSB2] >= KO0LW03.XGPCD[KO0LWSB2])
      KO0LW01.KO0LWEF1 = "Y";
      KO0LW01.KO0LWSB2 = 11;
    else
      KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB2 + 1;
    end
  end
  ;
  if (KO0LW01.KO0LWEF1 == "N")
    KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 - 1;
  else
    KO0LW01.KO0LWSB1 = 0;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBP

// move prev sel codes to map
Function KO0LSBQ()
  ;
  ;
  KO0LW01.KO0LWSB1 = 1; /* ; reset subscript 1*/
  while (KO0LW01.KO0LWSB1 <= 10) /* ; until subscript 1 > 10*/
    ;
    if (KO0LM005.XGPCD[KO0LWSB1] != " ") /* ; map has gpc*/
      KO0LW01.KO0LWSB2 = 1; /* ; reset subscript 2*/
      while (KO0LW01.KO0LWSB2 <= 10) /* ; until sub 2 > 10*/
        if (KO0LW03.XGPCD[KO0LWSB2] == KO0LM005.XGPCD[KO0LWSB1])
          KO0LM005.KO0LMSC1[KO0LWSB1] = KO0LW03.KO0LWSC1[KO0LWSB2];
          KO0LM005.KO0LMSC2[KO0LWSB1] = KO0LW03.KO0LWSC2[KO0LWSB2];
          KO0LW01.KO0LWSB2 = 11;
        else
          KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB2 + 1;
        end
      end
    end
    ;
    KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1;
    ;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBQ

// set pf key attributes
Function KO0LSBR()
  ;
  ;
  if (KO0LW01.SM1AGYID == " " /* ; no map agency id*/
   && KO0LW01.SM4REPID == 0)  /* ; no map rep id*/
    KO0LW01.KO0LWSAF = "N"; /* ; scroll allowed = n*/
    set KO0LM005.KO0LMP07 skip, invisible;
    set KO0LM005.KO0LMP08 skip, invisible;
  else
    if (KO0LW01.KO0LWKEF == "Y" /* ; key errors exist*/
     && KO0LW01.KO0LWSFF == "N") /* ; no sched recs found*/
      KO0LW01.KO0LWSAF = "N"; /* ; scroll allowed = 'n'*/
      set KO0LM005.KO0LMP07 skip, invisible;
      set KO0LM005.KO0LMP08 skip, invisible;
    else
      KO0LW01.KO0LWSAF = "Y"; /* ; scroll allowed = 'y'*/
      set KO0LM005.KO0LMP07 initialAttributes;
      set KO0LM005.KO0LMP08 initialAttributes;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSBR

// get begin date
Function KO0LSCA()
  ;
  ;
  if (KO0LM005.KO0LMBMO[KO0LWSB1] != " ") /* ; map has begin date*/
    KO0LW01.KO0LWDT1 = KO0LM005.KO0LMBMO[KO0LWSB1];
    if (KO0LW01.KO0LWFL1 == "-"
     || KO0LW01.KO0LWFL1 == "/")
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM1;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY1;
      KO0LM005.KO0LMBMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    else
      KO0LW01.KO0LWDT2 = KO0LM005.KO0LMBMO[KO0LWSB1];
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM2;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY2;
      KO0LM005.KO0LMBMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSCA

// get end date
Function KO0LSCB()
  ;
  ;
  if (KO0LM005.KO0LMXMO[KO0LWSB1] != " ") /* ; map has end date*/
    KO0LW01.KO0LWDT1 = KO0LM005.KO0LMXMO[KO0LWSB1];
    if (KO0LW01.KO0LWFL1 == "-"
     || KO0LW01.KO0LWFL1 == "/")
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM1;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY1;
      KO0LM005.KO0LMXMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    else
      KO0LW01.KO0LWDT2 = KO0LM005.KO0LMXMO[KO0LWSB1];
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM2;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY2;
      KO0LM005.KO0LMXMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSCB

// get gpc desc
Function KO0LSCC()
  ;
  ;
  KO0LM005.XGPDESC[KO0LWSB1] = " "; /* ; reset map gpc abrv*/
  ;
  if (KO0LM005.XGPCD[KO0LWSB1] != " ") /* ; map has gpc code*/
    if (KO0LM005.XGPCD[KO0LWSB1] in XGPTBL.XGPCD 
     /* gpc code is in gpc table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* ; gpc status is active*/
     && XGPTBL.COCMFL[sysVar.arrayIndex] == "Y") /* ; gpc is commissionable*/
      KO0LM005.XGPDESC[KO0LWSB1] = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSCC

// set row attributes
Function KO0LSCD()
  ;
  ;
  KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB1 + KO0LW02.KO0LWPOS;
  ;
  if (KO0LW02.XGPCD[KO0LWSB2] == " ") /* ; no array gpc code*/
    set KO0LM005.KO0LMSC1[KO0LWSB1] skip, invisible;
    set KO0LM005.KO0LMSC2[KO0LWSB1] skip, invisible;
    set KO0LM005.KO0LMSC1[KO0LWSB1] skip, invisible;
    set KO0LM005.KO0LMSC2[KO0LWSB1] skip, invisible;
    set KO0LM005.XGPCD[KO0LWSB1] skip, invisible;
    set KO0LM005.KO0LMRPC[KO0LWSB1] skip, invisible;
    set KO0LM005.KO0LMAPC[KO0LWSB1] skip, invisible;
    set KO0LM005.KO0LMBMO[KO0LWSB1] skip, invisible;
    set KO0LM005.KO0LMXMO[KO0LWSB1] skip, invisible;
  else
    set KO0LM005.XGPCD[KO0LWSB1] initialAttributes;
    set KO0LM005.KO0LMRPC[KO0LWSB1] initialAttributes;
    set KO0LM005.KO0LMAPC[KO0LWSB1] initialAttributes;
    set KO0LM005.KO0LMBMO[KO0LWSB1] initialAttributes;
    set KO0LM005.KO0LMXMO[KO0LWSB1] initialAttributes;
    ;
    if (KO0LM005.KO0LMFF2[KO0LWSB1] != " ")
      set KO0LM005.KO0LMSC2[KO0LWSB1] cursor, normal;
    else
      set KO0LM005.KO0LMSC2[KO0LWSB1] skip, invisible;
    end
    ;
    if (KO0LM005.KO0LMFF1[KO0LWSB1] != " ")
      set KO0LM005.KO0LMSC1[KO0LWSB1] cursor, normal;
    else
      set KO0LM005.KO0LMSC1[KO0LWSB1] skip, invisible;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSCD

// build ko0ew03
Function KO0LSCE()
  ;
  ;
  KO0LW03.KO0LWSC1[KO0LWSB1] = KO0LM005.KO0LMSC1[KO0LWSB1];
  KO0LW03.KO0LWSC2[KO0LWSB1] = KO0LM005.KO0LMSC2[KO0LWSB1];
  KO0LW03.XGPCD[KO0LWSB1] = KO0LM005.XGPCD[KO0LWSB1];
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSCE

// validate fast path
Function KO0LSDA()
  ;
  ;
  if (converseVar.eventKey is enter)
    COMMAREA.CATOAP = KO0LM005.CATOAP;
    COMMAREA.CAITEM = KO0LM005.CAITEM;
    XSEXIT();
    set KO0LM005.CATOAP cursor, bold;
  else
    set KO0LM005.CATOAP cursor, bold;
    KO0LW01.KO0LWMNO = 1;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSDA

// validate function
Function KO0LSDB()
  ;
  ;
  KO0LW01.KO0LWFN1 = " "; /* ; reset function*/
  ;
  if (converseVar.eventKey is enter) /* ; user pressed enter*/
    KO0LW01.KO0LWFN1 = "U"; /* ; function = update*/
  else
    if (converseVar.eventKey is pf7 /* ; user pressed pf7*/
     && KO0LW01.KO0LWSAF == "Y")    /* ; scrolling is allowed*/
      KO0LW01.KO0LWFN1 = "B"; /* ; function = back*/
    else
      if (converseVar.eventKey is pf8 /* ; user pressed pf8*/
       && KO0LW01.KO0LWSAF == "Y")    /* ; scrolling is allowed*/
        KO0LW01.KO0LWFN1 = "F"; /* ; function = frwd*/
      else
        KO0LW01.KO0LWMNO = 2; /* ; invalid pf key*/
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSDB

// check for data changes
Function KO0LSEA()
  ;
  ;
  if (KO0LM005.SM1AGYID != KO0LW01.SM1AGYID /* ; new map agcy*/
   || KO0LM005.SM4REPID != KO0LW01.SM4REPID) /* ; new map rep*/
    KO0LW01.KO0LWKCF = "Y"; /* ; set key change flag*/
  end
  ;
  KO0LW01.KO0LWSB1 = 1; /* ; reset map subscript*/
  while (KO0LW01.KO0LWSB1 <= 10) /* ; until end of map sched*/
    KO0LSEB(); /* ; check for funct change*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSEA

// check for function change
Function KO0LSEB()
  ;
  ;
  if (KO0LM005.KO0LMSC1[KO0LWSB1] != " " /* ; select code 1 not ' '*/
   || KO0LM005.KO0LMSC2[KO0LWSB1] != " ") /* ; select code 2 not ' '*/
    KO0LW01.KO0LWFCF = "Y"; /* ; set funct change flag*/
  end
  ;
  KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSEB

// process key changes
Function KO0LSEC()
  ;
  ;
  if (KO0LW01.KO0LWFN1 != "U") /* ; function not = update*/
    set KO0LM005.SM1AGYID bold; /* ; highlight map agcy*/
    set KO0LM005.SM4REPID bold; /* ; highlight rep*/
    KO0LW01.KO0LWMNO = 161;
  else
    if (KO0LW01.KO0LWFCF == "Y") /* ; sched changes made*/
      set KO0LM005.SM1AGYID bold; /* ; highlight agcy*/
      set KO0LM005.SM4REPID bold; /* ; highlight rep*/
      KO0LW01.KO0LWMNO = 201;
    else
      KO0LW01.SM1AGYID = KO0LM005.SM1AGYID;
      KO0LW01.SM4REPID = KO0LM005.SM4REPID;
      KO0LW01.KO0LWBMF = "Y";
      KO0LW01.KO0LWNKF = "Y";
      KO0LW01.KO0LWNAF = "Y";
      KO0LW01.KO0LWEKF = "Y";
    end
  end
  ;
  KO0LM005.SM1AGYID = KO0LW01.SM1AGYID;
  KO0LM005.SM4REPID = KO0LW01.SM4REPID;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSEC

// process function changes
Function KO0LSED()
  ;
  ;
  if (KO0LW01.KO0LWFN1 != "U") /* ; function not = update*/
    KO0LW01.KO0LWMNO = 199; /* ; set error message*/
  else
    KO0LW01.KO0LWSB1 = 1; /* ; reset subscript*/
    while (KO0LW01.KO0LWSB1 <= 10) /* ; until subscript > 10*/
      if (KO0LM005.KO0LMSC1[KO0LWSB1] != " ") /* ; history selected*/
        KO0LW03.KO0LWSC1[KO0LWSB1] = " ";
        KO0LM005.KO0LMSC1[KO0LWSB1] = " ";
        KO0LW01.XGPCD = KO0LM005.XGPCD[KO0LWSB1];
        KO0LW01.KO0LWAPP = "KO0L010";
        KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
        KO0LW01.KO0LWNKF = "Y"; /* ; set new key flag*/
        KO0LW01.KO0LWEKF = "Y"; /* ; set edit key flag*/
        KO0LW01.KO0LWNAF = "Y"; /* ; set new array flag*/
        KO0LW01.KO0LWSB1 = 11; /* ; set subscript*/
      else
        if (KO0LM005.KO0LMSC2[KO0LWSB1] != " ") /* ; exceptions selected*/
          KO0LW03.KO0LWSC2[KO0LWSB1] = " ";
          KO0LM005.KO0LMSC2[KO0LWSB1] = " ";
          KO0LW01.XGPCD = KO0LM005.XGPCD[KO0LWSB1];
          KO0LW01.KO0LWAPP = "KO0L015";
          KO0LW01.KO0LWCHF = "C";
          KO0LW01.KO0LWBMF = "Y";
          KO0LW01.KO0LWNKF = "Y";
          KO0LW01.KO0LWEKF = "Y";
          KO0LW01.KO0LWNAF = "Y";
          KO0LW01.KO0LWSB1 = 11; /* ; set subscript*/
        else
          KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1;
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSED

// process no changes
Function KO0LSEE()
  ;
  ;
  if (KO0LW01.KO0LWFN1 == "U") /* ; function 1 = update*/
    if (KO0LW01.SM1AGYID == " " /* ; no w.s. agency*/
     && KO0LW01.SM4REPID == 0)  /* ; no w.s. rep*/
      KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
      KO0LW01.KO0LWNKF = "Y"; /* ; set new key flag*/
      KO0LW01.KO0LWNAF = "Y"; /* ; set new key flag*/
      KO0LW01.KO0LWEKF = "Y"; /* ; set edit key flag*/
      KO0LW01.KO0LWFN1 = " "; /* ; reset function 1*/
    else
      KO0LW01.SM1AGYID = " "; /* ; reset w.s. agency*/
      KO0LW01.SM4REPID = 0; /* ;     ; reset w.s. rep*/
      KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
      KO0LW01.KO0LWNKF = "Y"; /* ; set new key flag*/
      KO0LW01.KO0LWNAF = "Y"; /* ; set new key flag*/
      KO0LW01.KO0LWFN1 = " "; /* ; reset function 1*/
    end
  else
    if (KO0LW01.KO0LWFN1 == "B")
                                   /* ; function 1 = scroll back*/
      KO0LSEF(); /* ; scroll back*/
    else
      if (KO0LW01.KO0LWFN1 == "F")
                                   /* ; function 1 = scroll frwd*/
        KO0LSEG(); /* ; scroll frwd*/
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSEE

// scroll back
Function KO0LSEF()
  ;
  ;
  if (KO0LW02.KO0LWPOS == 0) /* ; array pos at top*/
    KO0LW01.KO0LWMNO = 70;
  else
    KO0LW02.KO0LWPOS = KO0LW02.KO0LWPOS - 10; /* ; set position in array*/
    KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
  end
  ;
  KO0LW01.KO0LWFN1 = " "; /* ; reset function 1 flag*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSEF

// scroll frwd
Function KO0LSEG()
  ;
  ;
  KO0LW01.KO0LWSB1 = KO0LW02.KO0LWPOS + 10; /* ; check last map line*/
  ;
  if (KO0LW01.KO0LWSB1 > KO0LW02.KO0LWTOT) /* ; at end of array*/
    KO0LW01.KO0LWMNO = 68;
  else
    KO0LW02.KO0LWPOS = KO0LW02.KO0LWPOS + 10;
    KO0LW01.KO0LWBMF = "Y";
  end
  ;
  KO0LW01.KO0LWFN1 = " "; /* ; reset function 1*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSEG

// build new key
Function KO0LSFA()
  ;
  ;
  KO0LSFB(); /* ; reset w.s. fields*/
  ;
  if (KO0LW01.KO0LWEKF == "Y") /* ; edit key flag = 'y'*/
    KO0LW01.KO0LWEKF = "N"; /* ; reset edit key flag*/
    KO0LSFC(); /* ; edit key data*/
  end
  ;
  ;
   /* *************************************************************/
end // end KO0LSFA

// reset w.s. fields
Function KO0LSFB()
  ;
  ;
  KO0LW01.KO0LWKEF = "N"; /* ; set key error flag*/
  KO0LW01.KO0LWKWF = "N"; /* ; set key warning flag*/
  KO0LW01.KO0LWSFF = "N"; /* ; set sched found flag*/
  KO0LW01.KO0LWSAF = "N"; /* ; set scroll allowed flag*/
  KO0LW01.SM1AGYNM = " "; /* ; set w.s. agcy name*/
  KO0LW01.XXXLSTNM = " "; /* ; set w.s. rep last name*/
  KO0LW01.XXXFSTNM = " "; /* ; set w.s. rep first name*/
  KO0LW01.XXXMDINT = " "; /* ; set w.s. rep mid init*/
  KO0LW01.XGPDESC = " "; /* ; set w.s. gpc desc*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFB

// edit key data
Function KO0LSFC()
  ;
  ;
  if (KO0LW01.XGPCD != " ") /* ; edit gpc*/
    KO0LSFD(); /* ; edit gpc code*/
  else
    set KO0LM010.XGPCD cursor, bold; /* ; highlight gpc*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 38; /* ; required field*/
  end
  ;
  if (KO0LW01.SM4REPID != 0) /* ; user entered rep id*/
    KO0LSFE(); /* ; edit rep id*/
  else
    set KO0LM010.SM4REPID cursor, bold; /* ; highlight rep id*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 38; /* ; required field*/
  end
  ;
  if (KO0LW01.SM1AGYID != " ") /* ; user entered agcy id*/
    KO0LSFH(); /* ; edit agcy id*/
  else
    set KO0LM010.SM1AGYID cursor, bold; /* ; highlight agcy id*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 38; /* ; required field*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFC

// edit gpc
Function KO0LSFD()
  ;
  ;
  if (KO0LW01.XGPCD in XGPTBL.XGPCD) /* ; gpc code in table*/
    KO0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* ; gpc status not active*/
      set KO0LM010.XGPCD cursor, bold; /* ; highlight gpc*/
      KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
      KO0LW01.KO0LWMNO = 92; /* ; set w.s. error nbr*/
    else
      if (XGPTBL.COCMFL[sysVar.arrayIndex] != "Y") /* ; gpc is non-comm*/
        set KO0LM010.XGPCD cursor, bold; /* ; highlight gpc*/
        KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
        KO0LW01.KO0LWMNO = 169; /* ; set w.s. error nbr*/
      end
    end
  else
    set KO0LM010.XGPCD cursor, bold; /* ; highlight gpc*/
    KO0LW01.XGPDESC = " "; /* ;reset w.s. gpc desc*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 173; /* ; set w.s. error nbr*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFD

// edit rep
Function KO0LSFE()
  ;
  ;
  set SQLCA empty;
  set VRAGCY02 empty;
  ;
  VRAGCY02.SM1AGYID = KO0LW01.SM1AGYID;
  VRAGCY02.SM4REPID = KO0LW01.SM4REPID;
  call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; sucessful open*/
    KO0LSFF(); /* ; fetch rep rec*/
  else
    KO0LW01.KO0LWKEF = "Y"; /* ; set key err flag*/
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY02";
    TA1REC.TA1LOCAT[1] = "KO0LSFE";
    TA1REC.TA1LOCAT[2] = "IO0400";
    XSKO001(); /* ; abort*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFE

// fetch sm5rec
Function KO0LSFF()
  ;
  ;
  set SQLCA empty;
  ;
  call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
    KO0LSFG(); /* ; edit com rate ind*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; rec not found*/
      set KO0LM010.SM4REPID cursor, bold;
      set KO0LM010.SM1AGYID bold;
      KO0LW01.KO0LWKEF = "Y";
      KO0LW01.KO0LWMNO = 6;
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY02";
      TA1REC.TA1LOCAT[1] = "KO0LSFF";
      TA1REC.TA1LOCAT[2] = "IO0400";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFF

// validate comm rate/status
Function KO0LSFG()
  ;
  ;
  KO0LW01.XXXFSTNM = VRAGCY02.XXXFSTNM;
  KO0LW01.XXXLSTNM = VRAGCY02.XXXLSTNM;
  KO0LW01.XXXMDINT = VRAGCY02.XXXMDINT;
  ;
  if (VRAGCY02.SM5COMIN != "Y") /* ; comm rate ind not 'y'*/
    set KO0LM010.SM4REPID cursor, bold; /* ; highlight rep*/
    set KO0LM010.SM1AGYID bold; /* ; highlight agcy*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 162; /* ; set error message*/
  else
    if (VRAGCY02.XXXSTAT != "A") /* ; status not 'a'*/
      KO0LW01.KO0LWKWF = "Y"; /* ; set key warning flag*/
      KO0LW01.KO0LWMNO = 202;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFG

// edit agcy
Function KO0LSFH()
  ;
  ;
  set SQLCA empty;
  set SM1REC empty;
  ;
  SM1REC.SM1AGYID = KO0LW01.SM1AGYID;
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0LSFI(); /* ; edit pay code/status*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KO0LM010.SM1AGYID cursor, bold;
      KO0LW01.KO0LWKEF = "Y";
      KO0LW01.KO0LWMNO = 4;
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1LOCAT[1] = "KO0LSFH";
      TA1REC.TA1LOCAT[2] = "IO0050";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFH

// edit pay code/status
Function KO0LSFI()
  ;
  ;
  KO0LW01.SM1AGYNM = SM1REC.SM1AGYNM;
  ;
  if (SM1REC.SM1PAYCD != "NP") /* ; pay code not 'np'*/
    set KO0LM010.SM1AGYID cursor, bold; /* ; highlight agcy*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 168; /* ; set error message*/
  else
    if (SM1REC.SM1STAT != "A") /* ; status not 'a'*/
      KO0LW01.KO0LWKWF = "Y"; /* ; set key warning flag*/
      KO0LW01.KO0LWMNO = 203;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFI

// get split sched
Function KO0LSFJ()
  ;
  ;
  set KO0LW02 empty; /* ; reset split sched array*/
  ;
  KO0LW01.KO0LWBMO = 0; /* ; set w.s. begin month*/
  KO0LW01.KO0LWXMO = 0; /* ; set w.s. end month*/
  ;
  if (KO0LW01.SM1AGYID != "    "
   && KO0LW01.SM4REPID != 0
   && KO0LW01.XGPCD != " ")
    ;
    set SQLCA empty;
    set KOEREC empty;
    ;
    KOEREC.SM1AGYID = KO0LW01.SM1AGYID;
    KOEREC.SM4REPID = KO0LW01.SM4REPID;
    KOEREC.XGPCD = KO0LW01.XGPCD;
    KO0LW02.KO0LWTOT = 1;
    ;
    call "IO0700" ("SS", SQLCA, KOEREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      ;
      while (SQLCA.VAGen_SQLCODE == 0
       && KO0LW02.KO0LWTOT < 100)
        KO0LSFK();
      end
      ;
      call "IO0700" ("CS", SQLCA, KOEREC) {isNoRefresh = yes, isExternal = yes};
      ;
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VASSCH01";
      TA1REC.TA1LOCAT[1] = "KO0LSFJ";
      TA1REC.TA1LOCAT[2] = "IO0700";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  if (KO0LW01.SM1AGYID != " " /* ; map has agency*/
   && KO0LW01.SM4REPID != 0   /* ; map has rep*/
   && KO0LW01.XGPCD != " ")   /* ; map has gpc*/
    KO0LM010.KO0LMMM1 = KO0LW02.KO0LWTTL;
    set KO0LM010.KO0LMMM1 initialAttributes;
    set KO0LM010.KO0LMMM2 initialAttributes;
  else
    set KO0LM010.KO0LMMM1 skip, invisible;
    set KO0LM010.KO0LMMM2 skip, invisible;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFJ

// process koerec
Function KO0LSFK()
  ;
  ;
  KO0LW01.KO0LWEF1 = "N"; /* ; set error flag 1*/
  while (KO0LW01.KO0LWEF1 == "N") /* ; until error flag = 'y'*/
    KO0LSFL(); /* ; fetch next koerec*/
  end
  ;
  if (KO0LW01.KO0LWKEF == "N") /* ; no key errors*/
    if (KO0LW01.KO0LWSFF == "Y" /* ; split sched was found*/
     || KO0LW01.KO0LWKWF == "N") /* ; no key warnings*/
      KO0LSFN(); /* ; move xgptbl to array*/
    end
  end
  ;
  KO0LSFO(); /* ; move koerec to array*/
  KO0LSFP(); /* ; set next end month*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFK

// fetch next koerec
Function KO0LSFL()
  ;
  ;
  set SQLCA empty;
  set KOEREC empty;
  ;
  call "IO0700" ("SN", SQLCA, KOEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* ; fetch was successful*/
   && KOEREC.KUCCOID == -1     /* ; rec for all customers*/
   && KOEREC.XDVCD == "**"     /* ;            ; rec for all divisions*/
   && KOEREC.XOBCD == "**")    /* ; rec for all bots*/
    KO0LW01.KO0LWEF1 = "Y"; /* ; set error flag #1*/
    KO0LW01.KO0LWSFF = "Y"; /* ; set sched found flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; at end of recs*/
      KOEREC.XGPCD = "99"; /* ; set rec xgp code*/
      KOEREC.KOEASXMO = -1; /* ; set rec end date*/
      KO0LW01.KO0LWEF1 = "Y"; /* ; set error flag #1*/
    end
  end
  ;
  KO0LSFM(); /* ; set next begin month*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFL

// set next begin month
Function KO0LSFM()
  ;
  ;
  if (KOEREC.XGPCD == "99"                /* ; invalid xgp code*/
   || KOEREC.KOEASXMO >= KO0LW01.KO0LWNSM /* ; end mo > next stmt*/
   || KOEREC.KOEASXMO == 0)               /* ; end mo = 0*/
    KO0LW01.KO0LWBMO = 0; /* ; set next begin month*/
  else
    ;
    KO0LW01.KO0LWDTB = KOEREC.KOEASXMO; /* ; set work date b*/
    ;
    if (KO0LW01.KO0LWMMB < 12) /* ; work date b < 12*/
      KO0LW01.KO0LWMMB = KO0LW01.KO0LWMMB + 1; /* ; increment month*/
    else
      if (KO0LW01.KO0LWYYB < 99) /* ; work date b < 99*/
        KO0LW01.KO0LWYYB = KO0LW01.KO0LWYYB + 1; /* increment year*/
        KO0LW01.KO0LWMMB = 01; /* ; set month*/
      else
        KO0LW01.KO0LWCCB = KO0LW01.KO0LWCCB + 1; /* increment century*/
        KO0LW01.KO0LWYYB = 00; /* ; set year*/
        KO0LW01.KO0LWMMB = 01; /* ; set month*/
      end
    end
    ;
    KO0LW01.KO0LWBMO = KO0LW01.KO0LWDTB; /* ; set next begin month*/
    ;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFM

// move xgptbl to array
Function KO0LSFN()
  ;
  ;
  if (KO0LW01.KO0LWBMO > KOEREC.KOEASXMO /* ; begin mo > rec end mo*/
   && KO0LW01.KO0LWXMO >= 0              /* ; end mo >= 0*/
   && KO0LW02.KO0LWTOT < 100)            /* ; array not full*/
    ;
    if (KO0LW01.KO0LWXMO >= KO0LW01.KO0LWBMO /* ; end mo > begin mo*/
     || KO0LW01.KO0LWXMO == 0)               /* ; end month = 0*/
      ;
      KO0LW02.KO0LWTOT = KO0LW02.KO0LWTOT + 1; /* ; increment array total*/
      KO0LW02.KO0LWTTL = KO0LW02.KO0LWTTL + 1; /* ; increment rec total*/
      ;
      KO0LW02.XGPCD[KO0LWTOT] = KO0LW01.XGPCD;
      KO0LW02.KUCCOID[KO0LWTOT] = -1;
      KO0LW02.XDVCD[KO0LWTOT] = "**";
      KO0LW02.XOBCD[KO0LWTOT] = "**";
      KO0LW02.KO0LWRPC[KO0LWTOT] = 100;
      KO0LW02.KO0LWAPC[KO0LWTOT] = 0;
      KO0LW02.KO0LWBMO[KO0LWTOT] = KO0LW01.KO0LWBMO;
      KO0LW02.KO0LWXMO[KO0LWTOT] = KO0LW01.KO0LWXMO;
      ;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFN

// move koerec to array
Function KO0LSFO()
  ;
  ;
  if (KOEREC.XGPCD != "99")
    if (KO0LW02.KO0LWTOT < 100)
      KO0LW02.KO0LWTOT = KO0LW02.KO0LWTOT + 1;
      KO0LW02.KO0LWTTL = KO0LW02.KO0LWTTL + 1;
      KO0LW02.XGPCD[KO0LWTOT] = KOEREC.XGPCD;
      KO0LW02.KUCCOID[KO0LWTOT] = KOEREC.KUCCOID;
      KO0LW02.XDVCD[KO0LWTOT] = KOEREC.XDVCD;
      KO0LW02.XOBCD[KO0LWTOT] = KOEREC.XOBCD;
      KO0LW02.KO0LWRPC[KO0LWTOT] = 100 - KOEREC.KOEASPCT;
      KO0LW02.KO0LWAPC[KO0LWTOT] = 0 + KOEREC.KOEASPCT;
      KO0LW02.KO0LWBMO[KO0LWTOT] = KOEREC.KOEASBMO;
      KO0LW02.KO0LWXMO[KO0LWTOT] = KOEREC.KOEASXMO;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFO

// set next end month
Function KO0LSFP()
  ;
  ;
  if (KOEREC.KOEASBMO == 0) /* ; rec begin mo = 0*/
    KO0LW01.KO0LWXMO = -1; /* ; set next end month*/
  else
    ;
    KO0LW01.KO0LWDTB = KOEREC.KOEASBMO; /* ; set work date b*/
    ;
    if (KO0LW01.KO0LWMMB > 1) /* ; work date b > 1*/
      KO0LW01.KO0LWMMB = KO0LW01.KO0LWMMB - 1; /* ; decrement month*/
    else
      if (KO0LW01.KO0LWYYB > 00) /* ; work date b > 0*/
        KO0LW01.KO0LWYYB = KO0LW01.KO0LWYYB - 1; /* decrement year*/
        KO0LW01.KO0LWMMB = 12; /* ; set month*/
      else
        KO0LW01.KO0LWCCB = KO0LW01.KO0LWCCB - 1; /* decrement century*/
        KO0LW01.KO0LWYYB = 99; /* ; set year*/
        KO0LW01.KO0LWMMB = 12; /* ; set month*/
      end
    end
    ;
    KO0LW01.KO0LWXMO = KO0LW01.KO0LWDTB; /* set next end month*/
    ;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFP

// move split sched to screen
Function KO0LSFQ()
  ;
  ;
  KO0LW01.KO0LWSB1 = 10; /* ; reset map subscript*/
  while (KO0LW01.KO0LWSB1 > 0) /* ; until top of map sched*/
    KO0LSFR(); /* ; move row to row*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFQ

// move sched row to map row
Function KO0LSFR()
  ;
  ;
  KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB1 + KO0LW02.KO0LWPOS;
  ;
  KO0LM010.KO0LMRPC[KO0LWSB1] = KO0LW02.KO0LWRPC[KO0LWSB2];
  KO0LM010.KO0LMAPC[KO0LWSB1] = KO0LW02.KO0LWAPC[KO0LWSB2];
  ;
  if (KO0LW02.KO0LWBMO[KO0LWSB2] == 0)
    KO0LM010.KO0LMBMO[KO0LWSB1] = " ";
  else
    KO0LW01.KO0LWDTB = KO0LW02.KO0LWBMO[KO0LWSB2];
    KO0LW01.KO0LWYYA = KO0LW01.KO0LWYYB;
    KO0LW01.KO0LWMMA = KO0LW01.KO0LWMMB;
    KO0LW01.KO0LWFLA = "/";
    KO0LM010.KO0LMBMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
  end
  ;
  if (KO0LW02.KO0LWXMO[KO0LWSB2] == 0)
    KO0LM010.KO0LMXMO[KO0LWSB1] = " ";
  else
    KO0LW01.KO0LWDTB = KO0LW02.KO0LWXMO[KO0LWSB2];
    KO0LW01.KO0LWYYA = KO0LW01.KO0LWYYB;
    KO0LW01.KO0LWMMA = KO0LW01.KO0LWMMB;
    KO0LW01.KO0LWFLA = "/";
    KO0LM010.KO0LMXMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
  end
  ;
  KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 - 1;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFR

// set pfkey attributes
Function KO0LSFS()
  ;
  ;
  if (KO0LW01.SM1AGYID == " " /* ; no map agency id*/
   && KO0LW01.SM4REPID == 0   /* ; no map rep id*/
   && KO0LW01.XGPCD == " ")   /* ; no map gpc*/
    KO0LW01.KO0LWSAF = "N"; /* ; scroll allowed = n*/
    set KO0LM010.KO0LMP07 skip, invisible;
    set KO0LM010.KO0LMP08 skip, invisible;
  else
    if (KO0LW01.KO0LWKEF == "Y" /* ; key errors exist*/
     && KO0LW01.KO0LWSFF == "N") /* ; no sched recs found*/
      KO0LW01.KO0LWSAF = "N"; /* ; scroll allowed = 'n'*/
      set KO0LM010.KO0LMP07 skip, invisible;
      set KO0LM010.KO0LMP08 skip, invisible;
    else
      KO0LW01.KO0LWSAF = "Y"; /* ; scroll allowed = 'y'*/
      set KO0LM010.KO0LMP07 initialAttributes;
      set KO0LM010.KO0LMP08 initialAttributes;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSFS

// get begin date
Function KO0LSGA()
  ;
  ;
  if (KO0LM010.KO0LMBMO[KO0LWSB1] != " ") /* ; map has begin date*/
    KO0LW01.KO0LWDT1 = KO0LM010.KO0LMBMO[KO0LWSB1];
    if (KO0LW01.KO0LWFL1 == "-"
     || KO0LW01.KO0LWFL1 == "/")
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM1;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY1;
      KO0LM010.KO0LMBMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    else
      KO0LW01.KO0LWDT2 = KO0LM010.KO0LMBMO[KO0LWSB1];
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM2;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY2;
      KO0LM010.KO0LMBMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSGA

// get end date
Function KO0LSGB()
  ;
  ;
  if (KO0LM010.KO0LMXMO[KO0LWSB1] != " ") /* ; map has end date*/
    KO0LW01.KO0LWDT1 = KO0LM010.KO0LMXMO[KO0LWSB1];
    if (KO0LW01.KO0LWFL1 == "-"
     || KO0LW01.KO0LWFL1 == "/")
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM1;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY1;
      KO0LM010.KO0LMXMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    else
      KO0LW01.KO0LWDT2 = KO0LM010.KO0LMXMO[KO0LWSB1];
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM2;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY2;
      KO0LM010.KO0LMXMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSGB

// set row attributes
Function KO0LSGC()
  ;
  ;
  KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB1 + KO0LW02.KO0LWPOS;
  ;
  if (KO0LW02.XGPCD[KO0LWSB2] == " ") /* ; no array gpc code*/
    set KO0LM010.KO0LMRPC[KO0LWSB1] skip, invisible;
    set KO0LM010.KO0LMAPC[KO0LWSB1] skip, invisible;
    set KO0LM010.KO0LMBMO[KO0LWSB1] skip, invisible;
    set KO0LM010.KO0LMXMO[KO0LWSB1] skip, invisible;
  else
    set KO0LM010.KO0LMRPC[KO0LWSB1] initialAttributes;
    set KO0LM010.KO0LMAPC[KO0LWSB1] initialAttributes;
    set KO0LM010.KO0LMBMO[KO0LWSB1] initialAttributes;
    set KO0LM010.KO0LMXMO[KO0LWSB1] initialAttributes;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSGC

// validate fast path
Function KO0LSHA()
  ;
  ;
  if (converseVar.eventKey is enter)
    COMMAREA.CATOAP = KO0LM010.CATOAP;
    COMMAREA.CAITEM = KO0LM010.CAITEM;
    XSEXIT();
    set KO0LM010.CATOAP cursor, bold;
  else
    set KO0LM010.CATOAP cursor, bold;
    KO0LW01.KO0LWMNO = 1;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSHA

// validate function
Function KO0LSHB()
  ;
  ;
  KO0LW01.KO0LWFN1 = " "; /* ; reset function*/
  ;
  if (converseVar.eventKey is enter) /* ; user pressed enter*/
    KO0LW01.KO0LWFN1 = "U"; /* ; function = update*/
  else
    if (converseVar.eventKey is pf3) /* ; user pressed pf3*/
      KO0LW01.KO0LWFN1 = "X"; /* ; function = exit*/
    else
      if (converseVar.eventKey is pf7 /* ; user pressed pf7*/
       && KO0LW01.KO0LWSAF == "Y")    /* ; scrolling allowed*/
        KO0LW01.KO0LWFN1 = "B"; /* ; function = back*/
      else
        if (converseVar.eventKey is pf8 /* ; user pressed pf8*/
         && KO0LW01.KO0LWSAF == "Y")    /* ; scrolling allowed*/
          KO0LW01.KO0LWFN1 = "F"; /* ; function = frwd*/
        else
          KO0LW01.KO0LWMNO = 2; /* ; invalid pf key*/
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSHB

// check for changes
Function KO0LSIA()
  ;
  ;
  if (KO0LM010.SM1AGYID != KO0LW01.SM1AGYID /* ; new map agcy*/
   || KO0LM010.SM4REPID != KO0LW01.SM4REPID /* ; new map rep*/
   || KO0LM010.XGPCD != KO0LW01.XGPCD)      /* ; new map gpc*/
    KO0LW01.KO0LWKCF = "Y"; /* ; set key change flag*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSIA

// process key changes
Function KO0LSIB()
  ;
  ;
  if (KO0LW01.KO0LWFN1 != "U") /* ; function not = update*/
    set KO0LM010.SM1AGYID bold; /* ; highlight agcy*/
    set KO0LM010.SM4REPID bold; /* ; highlight rep*/
    set KO0LM010.XGPCD bold; /* ; highlight gpc*/
    KO0LW01.KO0LWMNO = 161;
  else
    KO0LW01.SM1AGYID = KO0LM010.SM1AGYID;
    KO0LW01.SM4REPID = KO0LM010.SM4REPID;
    KO0LW01.XGPCD = KO0LM010.XGPCD;
    KO0LW01.KO0LWBMF = "Y";
    KO0LW01.KO0LWNKF = "Y";
    KO0LW01.KO0LWNAF = "Y";
    KO0LW01.KO0LWEKF = "Y";
    if (KO0LW01.SM1AGYID != KO0LW03.SM1AGYID
     || KO0LW01.SM4REPID != KO0LW03.SM4REPID)
      set KO0LW03 empty;
    else
      if (KO0LW01.XGPCD in KO0LW03.XGPCD)
        KO0LW03.KO0LWSC1[sysVar.arrayIndex] = " ";
      end
    end
  end
  ;
  KO0LM010.SM1AGYID = KO0LW01.SM1AGYID;
  KO0LM010.SM4REPID = KO0LW01.SM4REPID;
  KO0LM010.XGPCD = KO0LW01.XGPCD;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSIB

// process no changes
Function KO0LSIC()
  ;
  ;
  if (KO0LW01.KO0LWFN1 == "B")
                                   /* ; function 1 = scroll back*/
    KO0LSID(); /* ; scroll back*/
  else
    if (KO0LW01.KO0LWFN1 == "F")
                                   /* ; function 1 = scroll frwd*/
      KO0LSIE(); /* ; scroll frwd*/
    else
      KO0LSIF(); /* ; update screen*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSIC

// scroll back
Function KO0LSID()
  ;
  ;
  if (KO0LW02.KO0LWPOS == 0) /* ; array pos at top*/
    KO0LW01.KO0LWMNO = 70;
  else
    KO0LW02.KO0LWPOS = KO0LW02.KO0LWPOS - 10; /* ; set position in array*/
    KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
  end
  ;
  KO0LW01.KO0LWFN1 = " "; /* ; reset function 1 flag*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSID

// scroll frwd
Function KO0LSIE()
  ;
  ;
  KO0LW01.KO0LWSB1 = KO0LW02.KO0LWPOS + 10; /* ; check last map line*/
  ;
  if (KO0LW01.KO0LWSB1 > KO0LW02.KO0LWTOT) /* ; at end of array*/
    KO0LW01.KO0LWMNO = 68;
  else
    KO0LW02.KO0LWPOS = KO0LW02.KO0LWPOS + 10;
    KO0LW01.KO0LWBMF = "Y";
  end
  ;
  KO0LW01.KO0LWFN1 = " "; /* ; reset function 1*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSIE

// update screen
Function KO0LSIF()
  ;
  ;
  if (KO0LW01.KO0LWFN1 == "X") /* ; function = exit*/
    KO0LW01.KO0LWAPP = "KO0L005"; /* ; set next application*/
    KO0LW01.XGPCD = " "; /* ; reset w.s. gpc*/
    KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
    KO0LW01.KO0LWNKF = "Y"; /* ; set new key flag*/
    KO0LW01.KO0LWEKF = "Y"; /* ; set edit key flag*/
    KO0LW01.KO0LWNAF = "Y"; /* ; set new key flag*/
    KO0LW01.KO0LWFN1 = " "; /* ; reset function 1*/
  else
    KO0LSIG(); /* ; check ko0lw03*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSIF

// check ko0ew03
Function KO0LSIG()
  ;
  ;
  KO0LW01.KO0LWEF1 = "N";
  KO0LW01.KO0LWSB1 = 1;
  ;
  while (KO0LW01.KO0LWEF1 == "N"
   && KO0LW01.KO0LWSB1 <= 10)
    if (KO0LW03.XGPCD[KO0LWSB1] != " "
     && KO0LW03.KO0LWSC1[KO0LWSB1] != " ")
      KO0LW03.KO0LWSC1[KO0LWSB1] = " ";
      KO0LW01.SM1AGYID = KO0LW03.SM1AGYID;
      KO0LW01.SM4REPID = KO0LW03.SM4REPID;
      KO0LW01.XGPCD = KO0LW03.XGPCD[KO0LWSB1];
      KO0LW01.KO0LWAPP = "KO0L010";
      KO0LW01.KO0LWBMF = "Y";
      KO0LW01.KO0LWNKF = "Y";
      KO0LW01.KO0LWEKF = "Y";
      KO0LW01.KO0LWNAF = "Y";
      KO0LW01.KO0LWEF1 = "Y";
    else
      if (KO0LW03.XGPCD[KO0LWSB1] != " "
       && KO0LW03.KO0LWSC2[KO0LWSB1] != " ")
        KO0LW03.KO0LWSC2[KO0LWSB1] = " ";
        KO0LW01.SM1AGYID = KO0LW03.SM1AGYID;
        KO0LW01.SM4REPID = KO0LW03.SM4REPID;
        KO0LW01.XGPCD = KO0LW03.XGPCD[KO0LWSB1];
        KO0LW01.KO0LWAPP = "KO0L015";
        KO0LW01.KO0LWCHF = "C";
        KO0LW01.KO0LWBMF = "Y";
        KO0LW01.KO0LWNKF = "Y";
        KO0LW01.KO0LWEKF = "Y";
        KO0LW01.KO0LWNAF = "Y";
        KO0LW01.KO0LWEF1 = "Y";
      else
        KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1;
      end
    end
  end
  ;
  if (KO0LW01.KO0LWEF1 == "N")
    KO0LW01.KO0LWAPP = "KO0L005";
    KO0LW01.KO0LWBMF = "Y";
    KO0LW01.KO0LWNKF = "Y";
    KO0LW01.KO0LWEKF = "Y";
    KO0LW01.KO0LWNAF = "Y";
    KO0LW01.KO0LWEF1 = "Y";
    KO0LW01.XGPCD = " ";
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSIG

// build new key
Function KO0LSJA()
  ;
  ;
  KO0LSJB(); /* ; reset w.s. fields*/
  ;
  if (KO0LW01.KO0LWEKF == "Y") /* ; edit key flag = 'y'*/
    KO0LW01.KO0LWEKF = "N"; /* ; reset edit key flag*/
    KO0LSJC(); /* ; edit key data*/
  end
  ;
  ;
   /* *************************************************************/
end // end KO0LSJA

// reset w.s. fields
Function KO0LSJB()
  ;
  ;
  KO0LW01.KO0LWKEF = "N"; /* ; set key error flag*/
  KO0LW01.KO0LWKWF = "N"; /* ; set key warning flag*/
  KO0LW01.KO0LWSFF = "N"; /* ; set sched found flag*/
  KO0LW01.KO0LWSAF = "N"; /* ; set scroll allowed flag*/
  KO0LW01.SM1AGYNM = " "; /* ; set w.s. agcy name*/
  KO0LW01.XXXLSTNM = " "; /* ; set w.s. rep last name*/
  KO0LW01.XXXFSTNM = " "; /* ; set w.s. rep first name*/
  KO0LW01.XXXMDINT = " "; /* ; set w.s. rep mid init*/
  KO0LW01.XGPDESC = " "; /* ; set w.s. gpc desc*/
  KO0LW01.KUCCOID = -2; /* ; set w.s. cust id*/
  KO0LW01.KUCGRPID = -2; /* ; set w.s. group id*/
  KO0LW03.KUCCOID = 0; /* ; set w.s. last cust*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJB

// edit key data
Function KO0LSJC()
  ;
  ;
  if (KO0LW01.XGPCD != " ") /* ; edit gpc*/
    KO0LSJD(); /* ; edit gpc code*/
  else
    set KO0LM015.XGPCD cursor, bold; /* ; highlight gpc*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 38; /* ; required field*/
  end
  ;
  if (KO0LW01.SM4REPID != 0) /* ; user entered rep id*/
    KO0LSJE(); /* ; edit rep id*/
  else
    set KO0LM015.SM4REPID cursor, bold; /* ; highlight rep id*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 38; /* ; required field*/
  end
  ;
  if (KO0LW01.SM1AGYID != " ") /* ; user entered agcy id*/
    KO0LSJH(); /* ; edit agcy id*/
  else
    set KO0LM015.SM1AGYID cursor, bold; /* ; highlight agcy id*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 38; /* ; required field*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJC

// edit gpc
Function KO0LSJD()
  ;
  ;
  if (KO0LW01.XGPCD in XGPTBL.XGPCD) /* ; gpc code in table*/
    KO0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* ; gpc status not active*/
      set KO0LM015.XGPCD cursor, bold; /* ; highlight gpc*/
      KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
      KO0LW01.KO0LWMNO = 92; /* ; set w.s. error nbr*/
    else
      if (XGPTBL.COCMFL[sysVar.arrayIndex] != "Y") /* ; gpc is non-comm*/
        set KO0LM015.XGPCD cursor, bold; /* ; highlight gpc*/
        KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
        KO0LW01.KO0LWMNO = 169; /* ; set w.s. error nbr*/
      end
    end
  else
    set KO0LM015.XGPCD cursor, bold; /* ; highlight gpc*/
    KO0LW01.XGPDESC = " "; /* ;reset w.s. gpc desc*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 173; /* ; set w.s. error nbr*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJD

// edit rep
Function KO0LSJE()
  ;
  ;
  set SQLCA empty;
  set VRAGCY02 empty;
  ;
  VRAGCY02.SM1AGYID = KO0LW01.SM1AGYID;
  VRAGCY02.SM4REPID = KO0LW01.SM4REPID;
  call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful open*/
    KO0LSJF(); /* ; fetch rep rec*/
  else
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY02";
    TA1REC.TA1LOCAT[1] = "KO0LSJE";
    TA1REC.TA1LOCAT[2] = "IO0400";
    XSKO001(); /* abort*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJE

// fetch sm5rec
Function KO0LSJF()
  ;
  ;
  set SQLCA empty;
  ;
  call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
    KO0LSJG(); /* ; edit comm rate ind*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; rec not found*/
      set KO0LM015.SM4REPID cursor, bold;
      set KO0LM015.SM1AGYID bold;
      KO0LW01.KO0LWKEF = "Y";
      KO0LW01.KO0LWMNO = 6;
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY02";
      TA1REC.TA1LOCAT[1] = "KO0LSJF";
      TA1REC.TA1LOCAT[2] = "IO0400";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJF

// validate comm rate/status
Function KO0LSJG()
  ;
  ;
  KO0LW01.XXXFSTNM = VRAGCY02.XXXFSTNM;
  KO0LW01.XXXLSTNM = VRAGCY02.XXXLSTNM;
  KO0LW01.XXXMDINT = VRAGCY02.XXXMDINT;
  ;
  if (VRAGCY02.SM5COMIN != "Y") /* ; comm rate ind not 'y'*/
    set KO0LM015.SM4REPID cursor, bold; /* ; highlight rep*/
    set KO0LM015.SM1AGYID bold; /* ; highlight agcy*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 162; /* ; set error message*/
  else
    if (VRAGCY02.XXXSTAT != "A") /* ; status not 'a'*/
      KO0LW01.KO0LWKWF = "Y"; /* ; set key warning flag*/
      KO0LW01.KO0LWMNO = 202;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJG

// edit agcy
Function KO0LSJH()
  ;
  ;
  set SQLCA empty;
  set SM1REC empty;
  ;
  SM1REC.SM1AGYID = KO0LW01.SM1AGYID;
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0LSJI(); /* ; edit pay code/status*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KO0LM015.SM1AGYID cursor, bold;
      KO0LW01.KO0LWKEF = "Y";
      KO0LW01.KO0LWMNO = 4;
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1LOCAT[1] = "KO0LSJH";
      TA1REC.TA1LOCAT[2] = "IO0050";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJH

// edit pay code/status
Function KO0LSJI()
  ;
  ;
  KO0LW01.SM1AGYNM = SM1REC.SM1AGYNM;
  ;
  if (SM1REC.SM1PAYCD != "NP") /* ; pay code not 'np'*/
    set KO0LM015.SM1AGYID cursor, bold; /* ; highlight agcy*/
    KO0LW01.KO0LWKEF = "Y"; /* ; set key error flag*/
    KO0LW01.KO0LWMNO = 168; /* ; set error message*/
  else
    if (SM1REC.SM1STAT != "A") /* ; status not 'a'*/
      KO0LW01.KO0LWKWF = "Y"; /* ; set key warning flag*/
      KO0LW01.KO0LWMNO = 203;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJI

// get split sched
Function KO0LSJJ()
  ;
  ;
  KO0LW01.KO0LWHEF = "N"; /* ; set history exists flag*/
  ;
  set KO0LW02 empty; /* ; reset split sched array*/
  ;
  if (KO0LW01.SM1AGYID != "    "
   && KO0LW01.SM4REPID != 0
   && KO0LW01.XGPCD != " ")
    ;
    set SQLCA empty;
    set KOEREC empty;
    ;
    KOEREC.SM1AGYID = KO0LW01.SM1AGYID;
    KOEREC.SM4REPID = KO0LW01.SM4REPID;
    KOEREC.XGPCD = KO0LW01.XGPCD;
    KO0LW02.KO0LWTOT = 0;
    KO0LW02.KO0LWTTL = 0;
    KO0LW01.KO0LWSB1 = 0;
    KO0LW01.KO0LWSB2 = 0;
    ;
    call "IO0700" ("SS", SQLCA, KOEREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      ;
      while (SQLCA.VAGen_SQLCODE == 0
       && KO0LW02.KO0LWTOT < 100)
        KO0LSJK();
      end
      ;
      call "IO0700" ("CS", SQLCA, KOEREC) {isNoRefresh = yes, isExternal = yes};
      ;
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VASSCH01";
      TA1REC.TA1LOCAT[1] = "KO0LSJJ";
      TA1REC.TA1LOCAT[2] = "IO0700";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  if (KO0LW01.SM1AGYID != " " /* ; map has agency*/
   && KO0LW01.SM4REPID != 0   /* ; map has rep*/
   && KO0LW01.XGPCD != " ")   /* ; map has gpc*/
    KO0LM015.KO0LMMM3 = KO0LW02.KO0LWTTL;
    set KO0LM015.KO0LMMM3 initialAttributes;
    set KO0LM015.KO0LMMM4 initialAttributes;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJJ

// fetch koerec
Function KO0LSJK()
  ;
  ;
  set SQLCA empty;
  set KOEREC empty;
  ;
  call "IO0700" ("SN", SQLCA, KOEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; fetch was successful*/
    if (KOEREC.KUCCOID != -1 /* ; rec has customer*/
     || KOEREC.XDVCD != "**" /* ; rec has division*/
     || KOEREC.XOBCD != "**") /* ; rec has base ot*/
      KO0LSJL(); /* ; process koerec*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJK

// process koerec
Function KO0LSJL()
  ;
  ;
  if (KO0LW01.KO0LWCHF == "C"            
   /* ; current/history flag = c*/
   && KOEREC.KOEASXMO < KO0LW01.KO0LWCSM /* ; term mo < curr stmt mo*/
   && KOEREC.KOEASXMO != 0)              /* ; term mo > 0*/
    KO0LW01.KO0LWHEF = "Y"; /* ; set history exists flag*/
  else
    KO0LSJM(); /* ; move koerec to array*/
  end
  ;
   /* *************************************************************/
  ;
end // end KO0LSJL

// move koerec to array
Function KO0LSJM()
  ;
  ;
  if (KOEREC.KUCCOID != KO0LW01.KUCCOID) /* ; new customer*/
    KO0LSJN(); /* ; set array total*/
    KO0LSJP(); /* ; check ko0lw03*/
  end
  ;
  KO0LW02.KO0LWTOT = KO0LW02.KO0LWTOT + 1;
  KO0LW02.KO0LWTTL = KO0LW02.KO0LWTTL + 1;
  KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1;
  ;
  KO0LW02.XGPCD[KO0LWTOT] = KOEREC.XGPCD;
  KO0LW02.KUCCOID[KO0LWTOT] = KOEREC.KUCCOID;
  KO0LW02.XDVCD[KO0LWTOT] = KOEREC.XDVCD;
  KO0LW02.XOBCD[KO0LWTOT] = KOEREC.XOBCD;
  KO0LW02.KO0LWRPC[KO0LWTOT] = 100 - KOEREC.KOEASPCT;
  KO0LW02.KO0LWAPC[KO0LWTOT] = 0 + KOEREC.KOEASPCT;
  KO0LW02.KO0LWBMO[KO0LWTOT] = KOEREC.KOEASBMO;
  KO0LW02.KO0LWXMO[KO0LWTOT] = KOEREC.KOEASXMO;
  ;
  KO0LW01.KO0LWSFF = "Y";
  ;
  if (KO0LW01.KO0LWSB1 >= 5)
    KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 - 5;
    KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB2 + 5;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJM

// process new cust
Function KO0LSJN()
  ;
  ;
  if (KOEREC.KUCCOID != KO0LW01.KUCCOID) /* ; new customer*/
    ;
    KO0LSJO(); /* ; check kucgrpid*/
    ;
    if (KUCREC.KUCGRPID != KO0LW01.KUCGRPID /* ; new group id*/
     || KUCREC.KUCGRPID == 0)               /* ; no group id*/
      if (KO0LW02.KO0LWTOT > 0) /* ; not first rec in array*/
        while (KO0LW01.KO0LWSB1 < 5)
          KO0LW02.KO0LWTOT = KO0LW02.KO0LWTOT + 1;
          KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1;
        end
        ;
        KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB2 + 5;
        KO0LW01.KO0LWSB1 = 0;
        ;
      end
    end
  end
  ;
  KO0LW01.KUCCOID = KOEREC.KUCCOID;
  KO0LW01.KUCGRPID = KUCREC.KUCGRPID;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJN

// check kucgrpid
Function KO0LSJO()
  ;
  ;
  if (KOEREC.KUCCOID == -1)
    KUCREC.KUCGRPID = 0; /* ; set group id*/
  else
    set KUCREC empty;
    set SQLCA empty;
    ;
    KUCREC.KUCCOID = KOEREC.KUCCOID;
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE == 100)
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1LOCAT[1] = "KO0LSJO";
      TA1REC.TA1LOCAT[2] = "IO0240";
      XSKO001(); /* ; abort*/
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJO

// check ko0ew03
Function KO0LSJP()
  ;
  ;
  if (KOEREC.KUCCOID == KO0LW03.KUCCOID)
    KO0LW02.KO0LWPOS = KO0LW01.KO0LWSB2;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJP

// move array to map map
Function KO0LSJQ()
  ;
  ;
  KO0LW01.KO0LWSB1 = 5; /* ; reset map subscript*/
  while (KO0LW01.KO0LWSB1 > 0) /* ; until top of map sched*/
    KO0LSJR(); /* ; move row to row*/
  end
  ;
  KO0LSJS();
  ;
  KO0LW01.KO0LWEF1 = "N"; /* ; reset error 1 flag*/
  KO0LW01.KO0LWSB1 = 1; /* ; reset map subscript*/
  while (KO0LW01.KO0LWSB1 <= 5 /* ; until top of map sched*/
   && KO0LW01.KO0LWEF1 == "N") /* ; or error flag 1 = 'y'*/
    if (KO0LM015.KO0LMCID[KO0LWSB1] != 0)
      KO0LW03.KUCCOID = KO0LM015.KO0LMCID[KO0LWSB1];
      KO0LW01.KO0LWEF1 = "Y";
    else
      KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1;
    end
  end
  ;
  if (KO0LW01.KO0LWEF1 == "N") /* ; no map cust id*/
    set KO0LM015.KO0LMMM1 skip, invisible; /* ; darken map mssg 1*/
    set KO0LM015.KO0LMMM2 skip, invisible; /* ; darken map mssg 2*/
  else
    KO0LW01.KO0LWSB1 = 0; /* ; reset subscript 1*/
    KO0LW01.KO0LWSB2 = 1; /* ; reset subscript 2*/
    KO0LW01.KO0LWEF2 = "N"; /* ; set error 2 flag*/
    while (KO0LW01.KO0LWSB2 <= KO0LW02.KO0LWTOT /* ; until end of array*/
     && KO0LW01.KO0LWEF2 == "N") /* ; error flag 2 = 'y'*/
      if (KO0LW02.KUCCOID[KO0LWSB2] != KO0LW03.KUCCOID)
        KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB2 + 1;
      else
        while (KO0LW01.KO0LWSB2 <= KO0LW02.KO0LWTOT
         && KO0LW02.KUCCOID[KO0LWSB2] != 0)
          KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1;
          KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB2 + 1;
          set KO0LM015.KO0LMMM1 initialAttributes;
          set KO0LM015.KO0LMMM2 initialAttributes;
          KO0LM015.KO0LMMM1 = KO0LW01.KO0LWSB1;
          KO0LW01.KO0LWEF2 = "Y";
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJQ

// move array row to map row
Function KO0LSJR()
  ;
  ;
  KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB1 + KO0LW02.KO0LWPOS;
  ;
  KO0LM015.KO0LMCID[KO0LWSB1] = KO0LW02.KUCCOID[KO0LWSB2];
  KO0LM015.XDVCD[KO0LWSB1] = KO0LW02.XDVCD[KO0LWSB2];
  KO0LM015.XOBCD[KO0LWSB1] = KO0LW02.XOBCD[KO0LWSB2];
  KO0LM015.KO0LMRPC[KO0LWSB1] = KO0LW02.KO0LWRPC[KO0LWSB2];
  KO0LM015.KO0LMAPC[KO0LWSB1] = KO0LW02.KO0LWAPC[KO0LWSB2];
  ;
  if (KO0LW02.KO0LWBMO[KO0LWSB2] == 0)
    KO0LM015.KO0LMBMO[KO0LWSB1] = " ";
  else
    KO0LW01.KO0LWDTB = KO0LW02.KO0LWBMO[KO0LWSB2];
    KO0LW01.KO0LWYYA = KO0LW01.KO0LWYYB;
    KO0LW01.KO0LWMMA = KO0LW01.KO0LWMMB;
    KO0LW01.KO0LWFLA = "/";
    KO0LM015.KO0LMBMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
  end
  ;
  if (KO0LW02.KO0LWXMO[KO0LWSB2] == 0)
    KO0LM015.KO0LMXMO[KO0LWSB1] = " ";
  else
    KO0LW01.KO0LWDTB = KO0LW02.KO0LWXMO[KO0LWSB2];
    KO0LW01.KO0LWYYA = KO0LW01.KO0LWYYB;
    KO0LW01.KO0LWMMA = KO0LW01.KO0LWMMB;
    KO0LW01.KO0LWFLA = "/";
    KO0LM015.KO0LMXMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
  end
  ;
  KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 - 1;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJR

// move map cust to ko0ew03
Function KO0LSJS()
  ;
  ;
  set KO0LM015.KO0LMMM1 skip, invisible; /* ; darken map mssg 1*/
  set KO0LM015.KO0LMMM2 skip, invisible; /* ; darken map mssg 2*/
  ;
  KO0LW01.KO0LWSB1 = 1; /* ; reset map subscript*/
  while (KO0LW01.KO0LWSB1 <= 5)
                                   /* ; until end of map sched*/
    if (KO0LM015.KO0LMCID[KO0LWSB1] == 0)
      KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1; /* ; increment subscript*/
    else
      KO0LW03.KUCCOID = KO0LM015.KO0LMCID[KO0LWSB1];
      KO0LW01.KO0LWSB1 = 6;
      KO0LW01.KO0LWSB2 = 0;
      ;
      if (KO0LW03.KUCCOID in KO0LW02.KUCCOID)
        KO0LW01.KO0LWSB3 = sysVar.arrayIndex; /* no map cust id*/
        while (KO0LW02.KO0LWTOT >= KO0LW01.KO0LWSB3
         && KO0LW02.KUCCOID[KO0LWSB3] != 0)
          KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB2 + 1;
          KO0LW01.KO0LWSB3 = KO0LW01.KO0LWSB3 + 1;
        end
      end
      ;
      KO0LM015.KO0LMMM1 = KO0LW01.KO0LWSB2;
      set KO0LM015.KO0LMMM1 initialAttributes;
      set KO0LM015.KO0LMMM2 initialAttributes;
      ;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJS

// set pf key attributes
Function KO0LSJT()
  ;
  ;
  if (KO0LW01.SM1AGYID == " " /* ; no map agency id*/
   && KO0LW01.SM4REPID == 0   /* ; no map rep id*/
   && KO0LW01.XGPCD == " ")   /* ; no map gpc*/
    KO0LW01.KO0LWSAF = "N"; /* ; scroll allowed = n*/
    set KO0LM015.KO0LMP07 skip, invisible;
    set KO0LM015.KO0LMP08 skip, invisible;
  else
    if (KO0LW01.KO0LWKEF == "Y" /* ; key errors exist*/
     && KO0LW01.KO0LWSFF == "N") /* ; no sched recs found*/
      KO0LW01.KO0LWSAF = "N"; /* ; scroll allowed = 'n'*/
      set KO0LM015.KO0LMP07 skip, invisible;
      set KO0LM015.KO0LMP08 skip, invisible;
    else
      KO0LW01.KO0LWSAF = "Y"; /* ; scroll allowed = 'y'*/
      set KO0LM015.KO0LMP07 initialAttributes;
      set KO0LM015.KO0LMP08 initialAttributes;
    end
  end
  ;
  if (KO0LW01.SM1AGYID != " " /* ; map has agency id*/
   && KO0LW01.SM4REPID != 0   /* ; map has rep id*/
   && KO0LW01.XGPCD != " ")   /* ; map has gpc*/
    if (KO0LW01.KO0LWCHF == "H")
                                   /* ; current/history flag = h*/
      KO0LW01.KO0LWFAF = "Y"; /* ; set funct allowed flag*/
      KO0LM015.KO0LMP16 = "16:CURRENT"; /* ; set pf16 key to CURRENT*/
      set KO0LM015.KO0LMP16 initialAttributes;
    else
      if (KO0LW01.KO0LWHEF == "Y")
        KO0LM015.KO0LMP16 = "16:HISTORY"; /* ; set pf16 to history*/
        KO0LW01.KO0LWFAF = "Y"; /* ; set funct allowed flag*/
        set KO0LM015.KO0LMP16 initialAttributes;
      else
        KO0LW01.KO0LWFAF = "N";
                                   /* ; reset funct allowed flag*/
        KO0LM015.KO0LMP16 = " "; /* ; set pf16 KEY blank*/
        set KO0LM015.KO0LMP16 skip, invisible;
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSJT

// get begin date
Function KO0LSKA()
  ;
  ;
  if (KO0LM015.KO0LMBMO[KO0LWSB1] != " ") /* ; map has begin date*/
    KO0LW01.KO0LWDT1 = KO0LM015.KO0LMBMO[KO0LWSB1];
    if (KO0LW01.KO0LWFL1 == "-"
     || KO0LW01.KO0LWFL1 == "/")
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM1;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY1;
      KO0LM015.KO0LMBMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    else
      KO0LW01.KO0LWDT2 = KO0LM015.KO0LMBMO[KO0LWSB1];
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM2;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY2;
      KO0LM015.KO0LMBMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSKA

// get end date
Function KO0LSKB()
  ;
  ;
  if (KO0LM015.KO0LMXMO[KO0LWSB1] != " ") /* ; map has end date*/
    KO0LW01.KO0LWDT1 = KO0LM015.KO0LMXMO[KO0LWSB1];
    if (KO0LW01.KO0LWFL1 == "-"
     || KO0LW01.KO0LWFL1 == "/")
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM1;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY1;
      KO0LM015.KO0LMXMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    else
      KO0LW01.KO0LWDT2 = KO0LM015.KO0LMXMO[KO0LWSB1];
      KO0LW01.KO0LWMMA = KO0LW01.KO0LWMM2;
      KO0LW01.KO0LWFLA = "-";
      KO0LW01.KO0LWYYA = KO0LW01.KO0LWYY2;
      KO0LM015.KO0LMXMO[KO0LWSB1] = KO0LW01.KO0LWDTA;
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSKB

// get cust name
Function KO0LSKC()
  ;
  ;
  KO0LM015.KO0LMCNM[KO0LWSB1] = " ";
  ;
  if (KO0LM015.SM1AGYID != " " /* ; map has agcy*/
   && KO0LM015.SM4REPID != 0   /* ; map has rep*/
   && KO0LM015.XGPCD != " "    /* ; map has gpc*/
   && KO0LW01.KO0LWKEF == "N") /* ; map has no key errors*/
    if (KO0LM015.KO0LMCID[KO0LWSB1] != 0
     || KO0LM015.XDVCD[KO0LWSB1] != " "
     || KO0LM015.XOBCD[KO0LWSB1] != " "
     || KO0LM015.KO0LMRPC[KO0LWSB1] != 0
     || KO0LM015.KO0LMAPC[KO0LWSB1] != 0
     || KO0LM015.KO0LMBMO[KO0LWSB1] != " "
     || KO0LM015.KO0LMXMO[KO0LWSB1] != " ")
      if (KO0LM015.KO0LMCID[KO0LWSB1] == -1 /* ; cust = -1*/
       || KO0LM015.KO0LMCID[KO0LWSB1] == 0) /* ; cust = 0*/
        KO0LM015.KO0LMCID[KO0LWSB1] = -1;
        KO0LM015.KO0LMCNM[KO0LWSB1] = "ALL COMPANIES";
      else
        ;
        set KUCREC empty;
        set SQLCA empty;
        ;
        KUCREC.KUCCOID = KO0LM015.KO0LMCID[KO0LWSB1];
        ;
        call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
        ;
        if (SQLCA.VAGen_SQLCODE == 0)
          KO0LM015.KO0LMCNM[KO0LWSB1] = KUCREC.KUCCONM;
        else
          if (SQLCA.VAGen_SQLCODE != 100)
            TA1REC.TA1DBASE = "DCUST   ";
            TA1REC.TA1TBLVU = "VCMPNY01";
            TA1REC.TA1LOCAT[1] = "KO0LSKC";
            TA1REC.TA1LOCAT[2] = "IO0240";
            XSKO001(); /* ; abort*/
          end
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSKC

// get div abrv
Function KO0LSKD()
  ;
  ;
  KO0LM015.XDVABRV[KO0LWSB1] = " ";
  ;
  if (KO0LM015.SM1AGYID != " " /* ; map has agency*/
   && KO0LM015.SM4REPID != " " /* ; map has rep*/
   && KO0LM015.XGPCD != " "    /* ; map has gpc*/
   && KO0LW01.KO0LWKEF == "N") /* ; map has no key errors*/
    if (KO0LM015.KO0LMCID[KO0LWSB1] != 0
     || KO0LM015.XDVCD[KO0LWSB1] != " "
     || KO0LM015.XOBCD[KO0LWSB1] != " "
     || KO0LM015.KO0LMRPC[KO0LWSB1] != 0
     || KO0LM015.KO0LMAPC[KO0LWSB1] != 0
     || KO0LM015.KO0LMBMO[KO0LWSB1] != " "
     || KO0LM015.KO0LMXMO[KO0LWSB1] != " ")
      if (KO0LM015.XDVCD[KO0LWSB1] == "**" /* ; map = all div codes*/
       || KO0LM015.XDVCD[KO0LWSB1] == "  ") /* ; map = no div code*/
        KO0LM015.XDVCD[KO0LWSB1] = "**";
        KO0LM015.XDVABRV[KO0LWSB1] = "ALL";
      else
        if (KO0LM015.XDVCD[KO0LWSB1] in XDVTBL.XDVCD)
          KO0LM015.XDVABRV[KO0LWSB1] = XDVTBL.XDVABRV[sysVar.arrayIndex];
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSKD

// get base ot abrv
Function KO0LSKE()
  ;
  ;
  KO0LM015.XOBABRV[KO0LWSB1] = " ";
  ;
  if (KO0LM015.SM1AGYID != " " /* ; map has agency*/
   && KO0LM015.SM4REPID != " " /* ; map has rep*/
   && KO0LM015.XGPCD != " "    /* ; map has gpc*/
   && KO0LW01.KO0LWKEF == "N") /* ; map has no key errors*/
    if (KO0LM015.KO0LMCID[KO0LWSB1] != 0
     || KO0LM015.XDVCD[KO0LWSB1] != " "
     || KO0LM015.XOBCD[KO0LWSB1] != " "
     || KO0LM015.KO0LMRPC[KO0LWSB1] != 0
     || KO0LM015.KO0LMAPC[KO0LWSB1] != 0
     || KO0LM015.KO0LMBMO[KO0LWSB1] != " "
     || KO0LM015.KO0LMXMO[KO0LWSB1] != " ")
      if (KO0LM015.XOBCD[KO0LWSB1] == "**" /* ; map = all bot codes*/
       || KO0LM015.XOBCD[KO0LWSB1] == "  ") /* ; map = no bot code*/
        KO0LM015.XOBCD[KO0LWSB1] = "**";
        KO0LM015.XOBABRV[KO0LWSB1] = "ALL";
      else
        if (KO0LM015.XOBCD[KO0LWSB1] in XOBTBL.XOBCD)
          KO0LM015.XOBABRV[KO0LWSB1] = XOBTBL.XOBABRV[sysVar.arrayIndex];
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSKE

// set row attributes
Function KO0LSKF()
  ;
  ;
  KO0LW01.KO0LWSB2 = KO0LW01.KO0LWSB1 + KO0LW02.KO0LWPOS;
  ;
  if (KO0LW02.XGPCD[KO0LWSB2] == " ") /* ; no array gpc code*/
    set KO0LM015.KO0LMCID[KO0LWSB1] skip, invisible;
    set KO0LM015.XDVCD[KO0LWSB1] skip, invisible;
    set KO0LM015.XOBCD[KO0LWSB1] skip, invisible;
    set KO0LM015.KO0LMRPC[KO0LWSB1] skip, invisible;
    set KO0LM015.KO0LMAPC[KO0LWSB1] skip, invisible;
    set KO0LM015.KO0LMBMO[KO0LWSB1] skip, invisible;
    set KO0LM015.KO0LMXMO[KO0LWSB1] skip, invisible;
  else
    set KO0LM015.KO0LMCID[KO0LWSB1] initialAttributes;
    set KO0LM015.XDVCD[KO0LWSB1] initialAttributes;
    set KO0LM015.XOBCD[KO0LWSB1] initialAttributes;
    set KO0LM015.KO0LMRPC[KO0LWSB1] initialAttributes;
    set KO0LM015.KO0LMAPC[KO0LWSB1] initialAttributes;
    set KO0LM015.KO0LMBMO[KO0LWSB1] initialAttributes;
    set KO0LM015.KO0LMXMO[KO0LWSB1] initialAttributes;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSKF

// validate fast path
Function KO0LSLA()
  ;
  ;
  if (converseVar.eventKey is enter)
    COMMAREA.CATOAP = KO0LM015.CATOAP;
    COMMAREA.CAITEM = KO0LM015.CAITEM;
    XSEXIT();
    set KO0LM015.CATOAP cursor, bold;
  else
    set KO0LM015.CATOAP cursor, bold;
    KO0LW01.KO0LWMNO = 1;
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSLA

// validate function
Function KO0LSLB()
  ;
  ;
  KO0LW01.KO0LWFN1 = " "; /* ; reset function*/
  ;
  if (converseVar.eventKey is enter) /* ; user pressed enter*/
    KO0LW01.KO0LWFN1 = "U"; /* ; function = update*/
  else
    if (converseVar.eventKey is pf3) /* ; user pressed pf3*/
      KO0LW01.KO0LWFN1 = "X"; /* ; function = exit*/
    else
      if (converseVar.eventKey is pf7 /* ; user pressed pf7*/
       && KO0LW01.KO0LWSAF == "Y")    /* ; scrolling allowed*/
        KO0LW01.KO0LWFN1 = "B"; /* ; function = back*/
      else
        if (converseVar.eventKey is pf8 /* ; user pressed pf8*/
         && KO0LW01.KO0LWSAF == "Y")    /* ; scrolling allowed*/
          KO0LW01.KO0LWFN1 = "F"; /* ; function = frwd*/
        else
          if (converseVar.eventKey is pf16 /* ; user pressed pf16*/
           && KO0LW01.KO0LWFAF == "Y")     /* ; function is allowed*/
            KO0LW01.KO0LWFN1 = "H"; /* ; function = history*/
          else
            KO0LW01.KO0LWMNO = 2; /* ; invalid pf key*/
          end
        end
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSLB

// process key changes
Function KO0LSMA()
  ;
  ;
  if (KO0LW01.KO0LWFN1 != "U") /* ; function not = update*/
    set KO0LM015.SM1AGYID bold; /* ; highlight agcy*/
    set KO0LM015.SM4REPID bold; /* ; highlight rep*/
    set KO0LM015.XGPCD bold; /* ; highlight gpc*/
    KO0LW01.KO0LWMNO = 161;
  else
    KO0LW01.SM1AGYID = KO0LM015.SM1AGYID;
    KO0LW01.SM4REPID = KO0LM015.SM4REPID;
    KO0LW01.XGPCD = KO0LM015.XGPCD;
    KO0LW01.KO0LWBMF = "Y";
    KO0LW01.KO0LWNKF = "Y";
    KO0LW01.KO0LWNAF = "Y";
    KO0LW01.KO0LWEKF = "Y";
    if (KO0LW01.SM1AGYID != KO0LW03.SM1AGYID
     || KO0LW01.SM4REPID != KO0LW03.SM4REPID)
      set KO0LW03 empty;
    else
      if (KO0LW01.XGPCD in KO0LW03.XGPCD)
        KO0LW03.KO0LWSC2[sysVar.arrayIndex] = " ";
      end
    end
  end
  ;
  KO0LM015.SM1AGYID = KO0LW01.SM1AGYID;
  KO0LM015.SM4REPID = KO0LW01.SM4REPID;
  KO0LM015.XGPCD = KO0LW01.XGPCD;
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSMA

// process no changes
Function KO0LSMB()
  ;
  ;
  if (KO0LW01.KO0LWFN1 == "B")
                                   /* ; function 1 = scroll back*/
    KO0LSMC(); /* ; scroll back*/
  else
    if (KO0LW01.KO0LWFN1 == "F")
                                   /* ; function 1 = scroll frwd*/
      KO0LSMD(); /* ; scroll frwd*/
    else
      if (KO0LW01.KO0LWFN1 == "H") /* ; function 1 = history*/
        KO0LSME();
      else
        KO0LSMF(); /* ; update screen*/
      end
    end
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSMB

// scroll back
Function KO0LSMC()
  ;
  ;
  if (KO0LW02.KO0LWPOS == 0) /* ; array pos at top*/
    KO0LW01.KO0LWMNO = 70;
  else
    KO0LW02.KO0LWPOS = KO0LW02.KO0LWPOS - 5; /* ; set position in array*/
    KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
  end
  ;
  KO0LW01.KO0LWFN1 = " "; /* ; reset function 1 flag*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSMC

// scroll frwd
Function KO0LSMD()
  ;
  ;
  KO0LW01.KO0LWSB1 = KO0LW02.KO0LWPOS + 5; /* ; check last map line*/
  ;
  if (KO0LW01.KO0LWSB1 > KO0LW02.KO0LWTOT) /* ; at end of array*/
    KO0LW01.KO0LWMNO = 68;
  else
    KO0LW02.KO0LWPOS = KO0LW02.KO0LWPOS + 5;
    KO0LW01.KO0LWBMF = "Y";
  end
  ;
  KO0LW01.KO0LWFN1 = " "; /* ; reset function 1*/
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSMD

// change to history/current
Function KO0LSME()
  ;
  ;
  KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
  KO0LW01.KO0LWNAF = "Y"; /* ; set new array flag*/
  ;
  if (KO0LW01.KO0LWCHF == "C") /* ; function = exit*/
    KO0LW01.KO0LWCHF = "H";
                                   /* ; set current/history flag*/
    KO0LM015.KO0LMTTL = "HISTORY"; /* ; set map title*/
    KO0LM015.KO0LMP16 = "16:CURRENT"; /* ; set map pf16*/
  else
    KO0LW01.KO0LWCHF = "C";
                                   /* ; set current/history flag*/
    KO0LM015.KO0LMTTL = "CURRENT"; /* ; set map title*/
    KO0LM015.KO0LMP16 = "16:HISTORY"; /* ; set map pf16*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSME

// update screen
Function KO0LSMF()
  ;
  ;
  if (KO0LW01.KO0LWFN1 == "X") /* ; function = exit*/
    KO0LW01.KO0LWAPP = "KO0L005"; /* ; set next application*/
    KO0LW01.XGPCD = " "; /* ; reset w.s. gpc*/
    KO0LW01.KO0LWBMF = "Y"; /* ; set build map flag*/
    KO0LW01.KO0LWNKF = "Y"; /* ; set new key flag*/
    KO0LW01.KO0LWEKF = "Y"; /* ; set edit key flag*/
    KO0LW01.KO0LWNAF = "Y"; /* ; set new key flag*/
    KO0LW01.KO0LWFN1 = " "; /* ; reset function 1*/
    KO0LW01.KO0LWFN2 = " "; /* ; reset function 2*/
  else
    KO0LSMG(); /* ; check ko0lw03*/
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSMF

// check ko0ew03
Function KO0LSMG()
  ;
  ;
  KO0LW01.KO0LWEF1 = "N";
  KO0LW01.KO0LWSB1 = 1;
  ;
  while (KO0LW01.KO0LWEF1 == "N"
   && KO0LW01.KO0LWSB1 <= 10)
    if (KO0LW03.XGPCD[KO0LWSB1] != " "
     && KO0LW03.KO0LWSC1[KO0LWSB1] != " ")
      KO0LW03.KO0LWSC1[KO0LWSB1] = " ";
      KO0LW01.SM1AGYID = KO0LW03.SM1AGYID;
      KO0LW01.SM4REPID = KO0LW03.SM4REPID;
      KO0LW01.XGPCD = KO0LW03.XGPCD[KO0LWSB1];
      KO0LW01.KO0LWAPP = "KO0L010";
      KO0LW01.KO0LWBMF = "Y";
      KO0LW01.KO0LWNKF = "Y";
      KO0LW01.KO0LWEKF = "Y";
      KO0LW01.KO0LWNAF = "Y";
      KO0LW01.KO0LWEF1 = "Y";
    else
      if (KO0LW03.XGPCD[KO0LWSB1] != " "
       && KO0LW03.KO0LWSC2[KO0LWSB1] != " ")
        KO0LW03.KO0LWSC2[KO0LWSB1] = " ";
        KO0LW01.SM1AGYID = KO0LW03.SM1AGYID;
        KO0LW01.SM4REPID = KO0LW03.SM4REPID;
        KO0LW01.XGPCD = KO0LW03.XGPCD[KO0LWSB1];
        KO0LW01.KO0LWAPP = "KO0L015";
        KO0LW01.KO0LWCHF = "C";
        KO0LW01.KO0LWBMF = "Y";
        KO0LW01.KO0LWNKF = "Y";
        KO0LW01.KO0LWEKF = "Y";
        KO0LW01.KO0LWNAF = "Y";
        KO0LW01.KO0LWEF1 = "Y";
      else
        KO0LW01.KO0LWSB1 = KO0LW01.KO0LWSB1 + 1;
      end
    end
  end
  ;
  if (KO0LW01.KO0LWEF1 == "N")
    KO0LW01.KO0LWAPP = "KO0L005";
    KO0LW01.KO0LWBMF = "Y";
    KO0LW01.KO0LWNKF = "Y";
    KO0LW01.KO0LWEKF = "Y";
    KO0LW01.KO0LWNAF = "Y";
    KO0LW01.KO0LWEF1 = "Y";
    KO0LW01.XGPCD = " ";
  end
  ;
  ;
   /* *************************************************************/
  ;
end // end KO0LSMG

Record KO0LW01 type basicRecord
  10 KO0LWAPP KO0LWAPP ; 
  10 KO0LWCSM KO0LWCSM ; 
  10 KO0LWNSM KO0LWNSM ; 
  10 CAITEM CAITEM ; 
    15 KO0LWID1 KO0LWID1 ; 
    15 KO0LWID2 KO0LWID2 ; 
    15 * char(12) ; 
  10 KO0LWCHF KO0LWCHF ; 
  10 KO0LWBMF KO0LWBMF ; 
  10 KO0LWNKF KO0LWNKF ; 
  10 KO0LWNAF KO0LWNAF ; 
  10 KO0LWEKF KO0LWEKF ; 
  10 KO0LWKEF KO0LWKEF ; 
  10 KO0LWKWF KO0LWKWF ; 
  10 KO0LWSFF KO0LWSFF ; 
  10 KO0LWHEF KO0LWHEF ; 
  10 KO0LWSAF KO0LWSAF ; 
  10 KO0LWFAF KO0LWFAF ; 
  10 KO0LWKCF KO0LWKCF ; 
  10 KO0LWSCF KO0LWSCF ; 
  10 KO0LWFCF KO0LWFCF ; 
  10 SM1AGYID SM1AGYID ; 
  10 SM1AGYNM SM1AGYNM ; 
  10 SM4REPID SM4REPID ; 
  10 XXXLSTNM XXXLSTNM ; 
  10 XXXFSTNM XXXFSTNM ; 
  10 XXXMDINT XXXMDINT ; 
  10 KO0LWFN1 KO0LWFN1 ; 
  10 KO0LWFN2 KO0LWFN2 ; 
  10 KO0LWMNO KO0LWMNO ; 
  10 KO0LWMSG KO0LWMSG ; 
  10 KO0LWBMO KO0LWBMO ; 
  10 KO0LWXMO KO0LWXMO ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 KUCCOID KUCCOID ; 
  10 KUCGRPID KUCGRPID ; 
  10 KO0LWDTA KO0LWDTA ; 
    15 KO0LWMMA KO0LWMMA ; 
    15 KO0LWFLA KO0LWFLA ; 
    15 KO0LWYYA KO0LWYYA ; 
  10 KO0LWDTB KO0LWDTB ; 
    15 KO0LWCCB KO0LWCCB ; 
    15 KO0LWYYB KO0LWYYB ; 
    15 KO0LWMMB KO0LWMMB ; 
  10 KO0LWDT1 KO0LWDT1 ; 
    15 KO0LWMM1 KO0LWMM1 ; 
    15 KO0LWFL1 KO0LWFL1 ; 
    15 KO0LWYY1 KO0LWYY1 ; 
  10 KO0LWDT2 KO0LWDT2 ; 
    15 KO0LWMM2 KO0LWMM2 ; 
    15 KO0LWYY2 KO0LWYY2 ; 
    15 * char(1) ; 
  10 KO0LWEF1 KO0LWEF1 ; 
  10 KO0LWEF2 KO0LWEF2 ; 
  10 KO0LWSB1 KO0LWSB1 ; 
  10 KO0LWSB2 KO0LWSB2 ; 
  10 KO0LWSB3 KO0LWSB3 ; 
  10 KO0LWFF1 KO0LWFF1 ; 
end // end KO0LW01

//*** RECORD=KO0LW02 ****
// this will set-up one area for adding zzz-stuff to each
// db2 table.
// ***********************
Record KO0LW02 type basicRecord
  10 KO0LWTB2 KO0LWTB2 [100] ; 
    15 KO0LWFF1 KO0LWFF1 ; 
    15 KO0LWFF2 KO0LWFF2 ; 
    15 XGPCD XGPCD ; 
    15 KUCCOID KUCCOID ; 
    15 XDVCD XDVCD ; 
    15 XOBCD XOBCD ; 
    15 KO0LWRPC KO0LWRPC ; 
    15 KO0LWAPC KO0LWAPC ; 
    15 KO0LWBMO KO0LWBMO ; 
    15 KO0LWXMO KO0LWXMO ; 
  10 KO0LWTOT KO0LWTOT ; 
  10 KO0LWTTL KO0LWTTL ; 
  10 KO0LWPOS KO0LWPOS ; 
end // end KO0LW02

//*** RECORD=KO0LW03 ****
// this will set-up one area for adding zzz-stuff to each
// db2 table.
// ***********************
Record KO0LW03 type basicRecord
  10 SM1AGYID SM1AGYID ; 
  10 SM4REPID SM4REPID ; 
  10 KO0LWTB3 KO0LWTB3 [10] ; 
    15 XGPCD XGPCD ; 
    15 KO0LWSC1 KO0LWSC1 ; 
    15 KO0LWSC2 KO0LWSC2 ; 
  10 KUCCOID KUCCOID ; 
end // end KO0LW03

// pct to agcy
DataItem KO0LWAPC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. application proc
DataItem KO0LWAPP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build map flag
DataItem KO0LWBMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning month
DataItem KO0LWBMO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date b century
DataItem KO0LWCCB num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current/history flag
DataItem KO0LWCHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current statement month
DataItem KO0LWCSM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 1
DataItem KO0LWDT1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date 2
DataItem KO0LWDT2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date a
DataItem KO0LWDTA char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date b
DataItem KO0LWDTB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag 1
DataItem KO0LWEF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag 2
DataItem KO0LWEF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit key flag
DataItem KO0LWEKF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function allowed flag
DataItem KO0LWFAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function change flag
DataItem KO0LWFCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function flag 1
DataItem KO0LWFF1 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// function flag 2
DataItem KO0LWFF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. flag 1
DataItem KO0LWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date a filler
DataItem KO0LWFLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function 1
DataItem KO0LWFN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function 2
DataItem KO0LWFN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history exists flag
DataItem KO0LWHEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales agency id
DataItem KO0LWID1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep id
DataItem KO0LWID2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key change flag
DataItem KO0LWKCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key error flag
DataItem KO0LWKEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key warning flag
DataItem KO0LWKWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date 1 month
DataItem KO0LWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 2 month
DataItem KO0LWMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date a month
DataItem KO0LWMMA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date b month
DataItem KO0LWMMB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. mssg nbr
DataItem KO0LWMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. mssg
DataItem KO0LWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new array flag
DataItem KO0LWNAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new key flag
DataItem KO0LWNKF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next statment month
DataItem KO0LWNSM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc array pos
DataItem KO0LWPOS num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pct to rep
DataItem KO0LWRPC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// scroll allowed flag
DataItem KO0LWSAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. subscript 1
DataItem KO0LWSB1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript 2
DataItem KO0LWSB2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript 3
DataItem KO0LWSB3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection code 1
DataItem KO0LWSC1 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// selection code 2
DataItem KO0LWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// schedule change flag
DataItem KO0LWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// schedule found flag
DataItem KO0LWSFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table
DataItem KO0LWTB2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table
DataItem KO0LWTB3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc array total
DataItem KO0LWTOT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc array total 2
DataItem KO0LWTTL num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending month
DataItem KO0LWXMO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 1 year
DataItem KO0LWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 2 year
DataItem KO0LWYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date a year
DataItem KO0LWYYA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date b year
DataItem KO0LWYYB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

