package ko0i;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XOTTBL;
import corpx2.XOTABRV;
import corpx2.XOTCD;
import corpx2.XRCCD;
import corpz3.ZZZCHGDT;
import corpz3.ZZZSDT;
import ko.common.KOBCOPCT;
import ko.common.KOBPCTED;
import ko.common.KOBPCTXD;
import ko.common.KOBREC;
import sm.common.SM1AGYID;
import sm.common.SM1REC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VRAGCY02;
//*** PROGRAM=KO0I ****
// maintenance history
// 
// rev
// num.  when      who       why
// ----  --------  --------  ----------------------------------
// 00    02-10-87  obecke    created application.
// 00    08-05-87  gwells    corrected workings of pf7 & pf8
//                           keys when agency & srep entered.
//                           clear out old srep name when
//                           selecting on agency only.
// 
// 00    08-31-87  gwells    fixed ko0is2j so it returns
//                           history rate data also when
//                           retreiving by order type.
// e0    08-01-88  dmeier    show rate termination date.
//       12-20-88  jwood     added noncsp option to calls
//       12-20-88  jwood     added xssegtr logic
// 04    11-13-89  jbecke    changed ypgcd to xprcd s2h, s2j.
//       04-09-92  aivers    rename sm5stat to xxxstat
//       10-09-92  aivers    database changes.  Get rep's name
//                           from vragcy02 instead on sm5rec.
// ------------------------------------------------------------
// *********************
Program KO0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO0IW01 KO0IW01; // record
  KOBREC KOBREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VRAGCY02 VRAGCY02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOTTBL {deleteAfterUse = yes}; // table
  use KO0IM.KO0IM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0I000: KO0I000();



    if (KO0IM001.SM1AGYID == " "
     && KO0IM001.SM4REPID == +0
     && KO0IM001.KO0IMCD == " ")
      goto KO0I010; /* display clear screen*/
    else
      goto KO0I020; /* validate and retrieve data*/
    end



    KO0I010: KO0I010();



    if (converseVar.validationMsgNum > 0)
      goto KO0I010; /* display screen*/
    else
      goto KO0I020; /* validate and retrieve data*/
    end



    KO0I020: KO0I020();


    if (converseVar.validationMsgNum == 0)
      goto KO0I030; /* display retrieved data*/
    else
      goto KO0I010; /* start over*/
    end



    KO0I030: KO0I030();



    if (KO0IM001.SM1AGYID != KO0IW01.SM1AGYID
     || KO0IM001.SM4REPID != KO0IW01.SM4REPID
     || KO0IM001.KO0IMCD != KO0IW01.KO0IWCD)
      goto KO0I020; /* validate new information*/
    else
      goto KO0I030;
    end



  end // end main
end // end KO0I

// initialize application
Function KO0I000()

       /* ***************************************/
       /* * set all records and maps to zero   **/
       /* * or blanks. validate entry          **/
       /* *                                    **/
       /* * check for fast path.               **/
       /* ***************************************/

  XSENTRY();


  XSSEGTR(); /* set segmented transaction id*/

  set SQLCA empty;
  set KOBREC empty;
  set KO0IW01 empty;
  set SM1REC empty;
  set VRAGCY02 empty;
  set TA1REC empty;
  set TA2REC empty;
  set ERRSQLCA empty;

  set KO0IM001 initial;

       /* ***************************************/
       /* *  if user fast paths into this appl.**/
       /* *  then the caitem area is moved to  **/
       /* *  a redefined area and the record is**/
       /* *  retrieved from db2, and the screen**/
       /* *  displayed.                        **/
       /* ***************************************/

  if (COMMAREA.CAITEM > " ")
    KO0IW01.KO0IWKEY = COMMAREA.CAITEM;
    KO0IM001.SM1AGYID = KO0IW01.KO0IWAID;
    KO0IM001.SM4REPID = KO0IW01.KO0IWRID;
    KO0IW01.SM1AGYID = KO0IW01.KO0IWAID;
    KO0IW01.SM4REPID = KO0IW01.KO0IWRID;
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";

  else
    /* next sentence*/
  end



end // end KO0I000

// display comm. rate screen
Function KO0I010()



  KO0IM001.XXXCURDT = VGVar.currentShortGregorianDate;
  KO0IM001.XXXPRCNM = "KO0I010";
  set KO0IM001.KO0IMPF7 skip, invisible;
  set KO0IM001.KO0IMPF8 skip, invisible;



  converse KO0IM001 ;



  KO0IS1A(); /* validate pf keys*/



end // end KO0I010

// validate and retrieve data
Function KO0I020()



  KO0IS2A(); /* set record and map empty*/

  if (KO0IM001.KO0IMCD > " ")
    KO0IS2B(); /* validate order type code*/
  else
    /* next sentence*/
  end

  if (KO0IM001.SM4REPID > 0)
    KO0IS2C(); /* validate sales rep*/
  else
    /* next sentence*/
  end

  KO0IS2D(); /* validate sales agency*/

  if (converseVar.validationMsgNum > 0)
    exit stack;
  else
    /* next sentence*/
  end

  KO0IW01.KO0IWCDX = 1;
  KO0IW01.KO0IWTOT = 1;
  KO0IW01.KO0IWMDX = 1;
  KO0IW01.KO0IWCD = KO0IM001.KO0IMCD;

  if (KO0IM001.KO0IMCD == " ")
    KO0IS2E(); /* retrieve all order types*/
  else
    KO0IS2F(); /* retrieve one order type*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* ko0i010 start over*/
  else
    KO0IW01.KO0IWCDX = 1;
    KO0IW01.KO0IWMDX = 1;
    KO0IW01.KO0IWTOP = 1;

    KO0IS2G(); /* move record to map*/

  end



end // end KO0I020

// display screen w/data
Function KO0I030()



  KO0IM001.XXXCURDT = VGVar.currentShortGregorianDate;

  KO0IM001.XXXPRCNM = "KO0I030";

  if (KO0IW01.KO0IWTOT > 12)
    set KO0IM001.KO0IMPF7 initialAttributes;
    set KO0IM001.KO0IMPF8 initialAttributes;
  else
    set KO0IM001.KO0IMPF7 skip, invisible;
    set KO0IM001.KO0IMPF8 skip, invisible;
  end

  if (KO0IW01.KO0IWTOT > 2)
    KO0IW01.KO0IWMCT = KO0IW01.KO0IWTOT - 1; /* actual records retrieved*/
    KO0IW01.KO0IWLIT = "TOTAL RECORDS FOUND PER REQUEST = ";
    KO0IM001.XXXMSG = KO0IW01.KO0IWMSG;
  else
     /* next sentence*/
  end

  KO0IW01.KO0IWMDX = 1;
  while (KO0IW01.KO0IWMDX <= 11)
    if (KO0IM001.XOTCD[KO0IWMDX] == " ")
      set KO0IM001.KOBCOPCT[KO0IWMDX] skip, invisible;
    else
      /* next sentence*/
    end
    KO0IW01.KO0IWMDX = KO0IW01.KO0IWMDX + 1;
  end


  converse KO0IM001 ;



  KO0IS1A(); /* validate pf keys*/



  if (KO0IM001.SM1AGYID != KO0IW01.SM1AGYID
   || KO0IM001.SM4REPID != KO0IW01.SM4REPID
   || KO0IM001.KO0IMCD != KO0IW01.KO0IWCD)
    exit stack;
  else
    /* next sentence*/
  end


  if (converseVar.eventKey is pf7)
    KO0IS3A(); /* scroll backwards.*/
  else
    /* next sentence*/
  end

  if (converseVar.eventKey is pf8)
    KO0IS3B(); /* scroll forward.*/
  else
    /* next sentence*/
  end



end // end KO0I030

// validate and execute pf keys
Function KO0IS1A()




  if (KO0IM001.CATOAP != " ") /* check for fast path*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KO0IM001.CATOAP;
      COMMAREA.CAITEM = KO0IM001.CAITEM;
      XSEXIT();
      set KO0IM001.CATOAP cursor, bold;
      KO0IM001.XXXMSG = COMMAREA.CAMSG;
      exit stack;
    else
      set KO0IM001.CATOAP cursor, bold;
      converseLib.validationFailed(1);
      exit stack;
    end
  end

  if (converseVar.eventKey is pf1) /* transfer to help facitily*/
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    XSPF1();
    KO0IM001.XXXMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf3 /* cancel application*/
   || converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KO0A";
    COMMAREA.CAITEM = " ";
    XSEXIT();
    KO0IM001.XXXMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf4) /* transfer to main menu*/
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    XSPF4();
    KO0IM001.XXXMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is enter /* valid attention key*/
   || converseVar.eventKey is pf7   
   || converseVar.eventKey is pf8) 
    return;
  else
    converseLib.validationFailed(2);
    exit stack;
  end


end // end KO0IS1A

// set records and map empty
Function KO0IS2A()



  KO0IW01.SM1AGYID = KO0IM001.SM1AGYID;
  KO0IW01.SM4REPID = KO0IM001.SM4REPID;
  KO0IW01.KO0IWCD = KO0IM001.KO0IMCD;
  set KO0IM001 initial;
  KO0IM001.SM1AGYID = KO0IW01.SM1AGYID;
  KO0IM001.SM4REPID = KO0IW01.SM4REPID;
  KO0IM001.KO0IMCD = KO0IW01.KO0IWCD;

  set KO0IW01 empty;



end // end KO0IS2A

// validate order type
Function KO0IS2B()


  if (KO0IM001.KO0IMCD in XOTTBL.XOTCD)
    KO0IM001.KO0IMAB = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(65); /* invalid order type*/
    set KO0IM001.KO0IMCD cursor, bold;
  end


end // end KO0IS2B

// validate and retrieve rep nm
Function KO0IS2C()



           /* retrieve from sales rep/agency id*/


  set KO0IM001.SM1AGYID normal;
  set KO0IM001.SM4REPID normal;

  VRAGCY02.SM1AGYID = KO0IM001.SM1AGYID;
  KO0IW01.SM4REPID = KO0IM001.SM4REPID;
  VRAGCY02.SM4REPID = KO0IM001.SM4REPID;
  VRAGCY02.XXXSTAT = "A";

  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KO0IM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
    KO0IM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
    KO0IM001.XXXMDINT = VRAGCY02.XXXMDINT;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY02";
      TA1REC.TA1LOCAT[1] = "KO0IS2C";
      TA1REC.TA1LOCAT[2] = "IO0400";
      XSKO001(); /* abort*/
    end
  end


  if (SQLCA.VAGen_SQLCODE == 100)

    VRAGCY02.XXXSTAT = "I";

    call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};


    if (SQLCA.VAGen_SQLCODE == 0)
      call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
      KO0IM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
      KO0IM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
      KO0IM001.XXXMDINT = VRAGCY02.XXXMDINT;
      call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KO0IM001.XXXFSTNM = " ";
        KO0IM001.XXXLSTNM = " ";
        KO0IM001.XXXMDINT = " ";
        call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(51);
        set KO0IM001.SM4REPID bold;
        set KO0IM001.SM1AGYID cursor, bold;
      else
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VRAGCY02";
        TA1REC.TA1LOCAT[1] = "KO0IS2C";
        TA1REC.TA1LOCAT[2] = "IO0400";
        XSKO001(); /* abort*/
      end
    end

  end


end // end KO0IS2C

// validate & retrieve agency nm
Function KO0IS2D()


  SM1REC.SM1AGYID = KO0IM001.SM1AGYID;
  KO0IW01.SM1AGYID = KO0IM001.SM1AGYID;

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KO0IM001.SM1AGYNM = SM1REC.SM1AGYNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(4);
      set KO0IM001.SM1AGYID cursor, bold;
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      TA1REC.TA1LOCAT[1] = "KO0IS2B";
      TA1REC.TA1LOCAT[2] = "IO0050";
      XSKO001();
    end
  end

  call "IO0050" ("CS", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};



end // end KO0IS2D

// retrieve all order type 's1'
Function KO0IS2E()



  set KOBREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  KOBREC.SM1AGYID = KO0IM001.SM1AGYID;
  KOBREC.SM4REPID = KO0IM001.SM4REPID;

  call "IO0690" ("S1", SQLCA, KOBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0)
      KO0IS2H(); /* ; sequential read thru the selected set*/
    end
    KO0IS2I(); /* close selected set*/
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VOTSCH01";
    TA1REC.TA1TBLKE = "KOBREC.KOBKEY";
    TA1REC.TA1LOCAT[1] = "KO0IS2D";
    TA1REC.TA1LOCAT[2] = "IO0690";
    XSKO001();
  end



end // end KO0IS2E

// retrieve one ord type 's2'
Function KO0IS2F()



  set KOBREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  KOBREC.SM1AGYID = KO0IM001.SM1AGYID;
  KOBREC.SM4REPID = KO0IM001.SM4REPID;

  call "IO0690" ("S1", SQLCA, KOBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0)
      KO0IS2J(); /* read through selected set*/
    end
    KO0IS2K(); /* close selected set*/
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VOTSCH01";
    TA1REC.TA1TBLKE = KOBREC.KOBKEY;
    TA1REC.TA1LOCAT[1] = "KO0IS2G";
    TA1REC.TA1LOCAT[2] = "IO0690";
    XSKO001(); /* abort*/
  end



end // end KO0IS2F

// move record to map
Function KO0IS2G()



  while (KO0IW01.KO0IWMDX <= 11
   && KO0IW01.XOTCD[KO0IWCDX] > " ")

    KO0IM001.XOTCD[KO0IWMDX] = KO0IW01.XOTCD[KO0IWCDX];
    KO0IM001.XOTABRV[KO0IWMDX] = KO0IW01.XOTABRV[KO0IWCDX];
    KO0IM001.KOBCOPCT[KO0IWMDX] = KO0IW01.KOBCOPCT[KO0IWCDX];
    KO0IM001.KOBPCTED[KO0IWMDX] = KO0IW01.KOBPCTED[KO0IWCDX];
    KO0IM001.KOBPCTXD[KO0IWMDX] = KO0IW01.KOBPCTXD[KO0IWCDX];
    KO0IM001.ZZZSDT[KO0IWMDX] = KO0IW01.ZZZSDT[KO0IWCDX];
    KO0IM001.ZZZCHGDT[KO0IWMDX] = KO0IW01.ZZZCHGDT[KO0IWCDX];

    KO0IW01.KO0IWCDX = KO0IW01.KO0IWCDX + 1;
    KO0IW01.KO0IWMDX = KO0IW01.KO0IWMDX + 1;
    KO0IW01.KO0IWTOP = KO0IW01.KO0IWTOP + 1;

  end



end // end KO0IS2G

// read set n1 current ord types
Function KO0IS2H()



  set SQLCA empty;
  set ERRSQLCA empty;
  call "IO0690" ("N1", SQLCA, KOBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOBREC.XPRCD == "**"
     && KOBREC.YSCCD == "**"
     && KOBREC.KUCCOID == -1
     && KOBREC.XDVCD == "99"
     && KOBREC.XGPCD == "99"
     && KOBREC.XOBCD == "99"
     && KOBREC.XSOCD == "99"
     && KOBREC.XOTCD != "**"
     && KOBREC.XOTCD != KO0IW01.KO0IWSOT)
      KO0IS2L(); /* move kobrec to working storage*/
      KO0IW01.KO0IWSOT = KOBREC.XOTCD;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100
     && KO0IW01.XOTCD[1] == " ")
      converseLib.validationFailed(126);
    end
  end



end // end KO0IS2H

// close set for all ord typ 'c1'
Function KO0IS2I()



  call "IO0690" ("C1", SQLCA, KOBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VOTSCH01";
    TA1REC.TA1TBLKE = KOBREC.KOBKEY;
    TA1REC.TA1LOCAT[1] = "KO0BS2F";
    TA1REC.TA1LOCAT[2] = "IO0690";
    XSKO001(); /* abort*/
  end



end // end KO0IS2I

// read set for one ord type 'n2'
Function KO0IS2J()



  set KOBREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  call "IO0690" ("N1", SQLCA, KOBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOBREC.XPRCD == "**"
     && KOBREC.YSCCD == "**"
     && KOBREC.KUCCOID == -1
     && KOBREC.XDVCD == "99"
     && KOBREC.XGPCD == "99"
     && KOBREC.XOBCD == "99"
     && KOBREC.XSOCD == "99"
     && KOBREC.XOTCD != "**"
     && KOBREC.XOTCD == KO0IM001.KO0IMCD)
      KO0IS2L();
                                   /* move n2 kobrec to map working storage*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (KO0IW01.XOTCD[1] == " ")
        converseLib.validationFailed(126);
        set KO0IM001.SM1AGYID cursor, bold;
      else
        /* next sentence*/
      end
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VOTSCH01";
      TA1REC.TA1TBLKE = "KOBREC.KOBKEY";
      TA1REC.TA1LOCAT[1] = "KO0IS2D";
      TA1REC.TA1LOCAT[2] = "IO0690";
      XSKO001();
    end
  end
end // end KO0IS2J

// close set for one ord type 'c2
Function KO0IS2K()



  call "IO0690" ("C1", SQLCA, KOBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VOTSCH01";
    TA1REC.TA1TBLKE = KOBREC.KOBKEY;
    TA1REC.TA1LOCAT[1] = "KO0IS2I";
    TA1REC.TA1LOCAT[2] = "IO0690";
    XSKO001(); /* abort*/
  end



end // end KO0IS2K

// move kobrec to ko0iwrec
Function KO0IS2L()


  KO0IW01.XOTCD[KO0IWCDX] = KOBREC.XOTCD;
  KO0IW01.KOBCOPCT[KO0IWCDX] = KOBREC.KOBCOPCT;
  KO0IW01.KOBPCTED[KO0IWCDX] = KOBREC.KOBPCTED;
  KO0IW01.KOBPCTXD[KO0IWCDX] = KOBREC.KOBPCTXD;
  KO0IW01.ZZZSDT[KO0IWCDX] = KOBREC.ZZZSDT;
  KO0IW01.ZZZCHGDT[KO0IWCDX] = KOBREC.ZZZCHGDT;


  if (KOBREC.XOTCD in XOTTBL.XOTCD)
    KO0IW01.XOTABRV[KO0IWCDX] = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KO0IW01.XOTABRV[KO0IWCDX] = " ";
  end


  KO0IW01.KO0IWCDX = KO0IW01.KO0IWCDX + 1;
  KO0IW01.KO0IWTOT = KO0IW01.KO0IWTOT + 1;


end // end KO0IS2L

// handle scrolling backwards
Function KO0IS3A()


  if (KO0IW01.KO0IWCDX <= 12)
    converseLib.validationFailed(70); /* cannot scroll backward any further*/
    exit stack;
  else
    /* next sentence*/
  end


  KO0IS3C();
                                   /* clear screen fields for next display.*/



       /* ***************************************/
       /* *  pf7 scroll backwards starting from**/
       /* *  the top of screen.                **/
       /* *                                    **/
       /* ***************************************/

   /* *****  this will set-up the working storage pointer*/
   /* *****  to the appropriate starting point to read forward*/
   /* *****  read forward.*/


  if (KO0IW01.KO0IWTOP < 11)
    KO0IW01.KO0IWCDX = KO0IW01.KO0IWCDX - KO0IW01.KO0IWTOP;
    KO0IW01.KO0IWCDX = KO0IW01.KO0IWCDX - 10;
  else
    KO0IW01.KO0IWCDX = KO0IW01.KO0IWCDX - 22;
  end

  if (KO0IW01.KO0IWCDX <= 11)
    KO0IW01.KO0IWCDX = 1;
  else
    /* next sentence*/
  end

  KO0IW01.KO0IWMDX = 1;
  KO0IW01.KO0IWTOP = 1;

  KO0IS2G(); /* move ko0iwrec detail to ko0im001*/


  if (KO0IW01.KO0IWMDX == 12)
    KO0IW01.KO0IWMDX = KO0IW01.KO0IWMDX - 1;
    KO0IW01.KO0IWTOP = KO0IW01.KO0IWTOP - 1;
  else
    /* next sentence*/
  end



end // end KO0IS3A

// handle scrolling forward
Function KO0IS3B()


  if (KO0IW01.KO0IWCDX >= KO0IW01.KO0IWTOT)
    converseLib.validationFailed(68); /* you are at the end cannot scroll forward*/
    return;
  else
    /* next sentence*/
  end


  KO0IS3C();
                                   /* clear screen fields for next display.*/



       /* ***************************************/
       /* *  pf8 scroll forward starting from  **/
       /* *  the end of the previous screen.   **/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/

   /* *****  this will set-up the working storage pointer*/
   /* *****  to the appropriate starting point to read forward*/
   /* *****  from.*/


  KO0IW01.KO0IWMDX = 1;
  KO0IW01.KO0IWTOP = 1;


  KO0IS2G(); /* move record to map*/


end // end KO0IS3B

// clear map fields
Function KO0IS3C()



  KO0IW01.KO0IWMDX = 1;


  while (KO0IW01.KO0IWMDX <= 11)
    KO0IM001.XOTCD[KO0IWMDX] = " ";
    KO0IM001.XOTABRV[KO0IWMDX] = " ";
    KO0IM001.KOBCOPCT[KO0IWMDX] = 0;
    KO0IM001.KOBPCTED[KO0IWMDX] = 0;
    KO0IM001.KOBPCTXD[KO0IWMDX] = 0;
    KO0IM001.ZZZSDT[KO0IWMDX] = 0;
    KO0IM001.ZZZCHGDT[KO0IWMDX] = 0;

    set KO0IM001.KOBCOPCT[KO0IWMDX] initialAttributes;

    KO0IW01.KO0IWMDX = KO0IW01.KO0IWMDX + 1;

  end



end // end KO0IS3C

//*** RECORD=KO0IW01 ****
// ************************************************************
// this is the general working storage area for ko0i.
// it contains indexes, flags and key comparison fields.
// 
// 
// ************************************************************
// maintenance history
// when       who        why
// --------   --------   --------------------------------------
// 2-3-87     obecke     created application
// 
// 
// ************************************************************
// ***********************
Record KO0IW01 type basicRecord
  5 KO0IWGRP KO0IWGRP ; 
    10 KO0IWKEY KO0IWKEY ; 
      15 KO0IWAID KO0IWAID ; 
      15 KO0IWRID KO0IWRID ; 
    10 KO0IWWS KO0IWWS ; 
      15 SM1AGYID SM1AGYID ; 
      15 SM4REPID SM4REPID ; 
      15 KO0IWCD KO0IWCD ; 
      15 KO0IWAB KO0IWAB ; 
    10 KO0IWMAP KO0IWMAP [98] ; 
      20 XOTCD XOTCD ; 
      20 XOTABRV XOTABRV ; 
      20 KOBCOPCT KOBCOPCT ; 
      20 KOBPCTED KOBPCTED ; 
      20 KOBPCTXD KOBPCTXD ; 
      20 ZZZSDT ZZZSDT ; 
      20 ZZZCHGDT ZZZCHGDT ; 
      20 XRCCD XRCCD ; 
    10 KO0IWCTT KO0IWCTT ; 
      15 KO0IWCDX KO0IWCDX ; 
      15 KO0IWTOT KO0IWTOT ; 
      15 KO0IWTOP KO0IWTOP ; 
      15 KO0IWMDX KO0IWMDX ; 
      15 KO0IWSOT KO0IWSOT ; 
    10 KO0IWMSG KO0IWMSG ; 
      15 KO0IWLIT KO0IWLIT ; 
      15 KO0IWMCT KO0IWMCT ; 
end // end KO0IW01

// retrieved ord typ abrv
DataItem KO0IWAB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales agency id
DataItem KO0IWAID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// entered order type code
DataItem KO0IWCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. counter
DataItem KO0IWCDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for all counters
DataItem KO0IWCTT char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage for ko0i appl
DataItem KO0IWGRP char(2916)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key info into rep/agency
DataItem KO0IWKEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message literal for ko0i030
DataItem KO0IWLIT char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array counter for map
DataItem KO0IWMAP char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msg field for total # rows
DataItem KO0IWMCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for map
DataItem KO0IWMDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total ot's retrieved msg
DataItem KO0IWMSG char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep id
DataItem KO0IWRID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// saved order type code
DataItem KO0IWSOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// # of lines used on ko0im001
DataItem KO0IWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tot. # of rows in table
DataItem KO0IWTOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage like map
DataItem KO0IWWS char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

