package ko0t;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKO001;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpcom7.ZZHHMMSS;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import iv.common.IV0REC;
import iv.common.IVCID;
import ko.common.KOAREC;
import ko.common.KOTGROUP;
import ko.common.KOTMADID;
import ko.common.KOTREC;
import ko.common.KOYREC;
import ko.common.KOZREC;
import sm.common.SM1REC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VRAGCY02;
//*** PROGRAM=KO0T ****
// this is the commissions main menu program
// 
// 
// 
// date created:        july 25, 1986
// 
// maintenance:
// 
// init   date      reason
// -------------------------------------------------------
// jbw    12-20-88  added noncsp option to calls
// jbw    12-20-88  added xssegtr logic
// jab    12-05-89  require description for adj. code 97.
// ayi    04-09-92  rename sm5stat to xxxstat.
// ayi    10-09-92  database changes.  Get rep's name from
//                  vragcy02 instead of sm5rec.
// *********************
Program KO0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0REC IV0REC; // record
  KO0TW01 KO0TW01; // record
  KOAREC KOAREC; // record
  KOTREC KOTREC; // record
  KOYREC KOYREC; // record
  KOZREC KOZREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VRAGCY02 VRAGCY02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KO0TM.KO0TM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0T001: KO0T001();
    goto KO0T005;
    KO0T005: KO0T005();
    ;
    ;
        /* go to the top of application no matter what.*/
    ;
    ;
    goto KO0T005;
    ;
    ;
  end // end main
end // end KO0T

// security check,first time thru
Function KO0T001()
  XSENTRY();
  XSSEGTR(); /* set segmented transaction id*/
  KO0TS1A();
end // end KO0T001

// converse the misc adjustment
Function KO0T005()
  ;
  ;
  KO0TM001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
   /* ***********************************************************/
  converse KO0TM001 ;
   /* ***********************************************************/
  ;
  ;
       /* check pfkeys and menu selection*/
  ;
  if (KO0TM001 is modified
   || KO0TW01.KO0TWSW == "ADD")
    KO0TW01.KO0TWMDF = "Y";
  end
  ;
  KO0TS2A();
  ;
  ;
  ;
end // end KO0T005

// first time thru
Function KO0TS1A()
  ;
  ;
     /* check fastpath and see if a commission adjustment*/
     /* number was passed from calling program.*/
     /* if so get commission adjustment and move data to screens.*/
  ;
  if (COMMAREA.CAITEM > " ")
    KO0TW01.KO0TWCID = COMMAREA.CAITEM;
    KO0TM001.KOTMADID = KO0TW01.KO0TWNID;
    KO0TS1B(); /* get commission adjustment row*/
  else
    KO0TS1J(); /* get commission adjustment id*/
    KO0TS1I(); /* unprotect all fields for an add*/
    KO0TM001.KOTMADID = KOZREC.KOZNMAID;
    KO0TW01.KOTMADID = KOZREC.KOZNMAID;
    set KO0TM001.KO0TWPMM cursor;
    set KO0TM001.KO0TMP16 skip, invisible;
    set KO0TM001.KO0TMP17 skip, invisible;
  end
  ;
  set KO0TM001.KO0TMP14 skip, invisible;
  KO0TW01.KO0TWIOF = "N";
  KO0TW01.KO0TWMDF = "N";
  ;
  ;
end // end KO0TS1A

// first time thru
Function KO0TS1B()
  ;
  ;
     /* get commission adjustment row*/
  ;
  ;
  ;
  KOTREC.KOTMADID = KO0TM001.KOTMADID;
  ;
  call "IO0670" ("S ", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0TS1C(); /* move data to screen*/
    KO0TS1D(); /* get descriptions for fields*/
    KO0TS1H(); /* see if able to update*/
    KO0TW01.KO0TWSW = "CHANGE";
    KO0TW01.SM4REPID = KOTREC.SM4REPID;
    KO0TW01.IVCID = KOTREC.IVCID;
    KO0TW01.KO0TWIOF = "Y";
    KO0TW01.KO0TWROF = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KO0TM001 initial;
      KO0TW01.KO0TWSW = " ";
      KO0TM001.KOTMADID = KOTREC.KOTMADID;
      KO0TW01.KOTMADID = 0;
      KO0TM001.XXXCURDT = VGVar.currentShortGregorianDate;
      converseLib.validationFailed(45);
      KO0TW01.SM4REPID = 0;
      KO0TW01.IVCID = 0;
      KO0TW01.KO0TWIOF = "N";
      KO0TW01.KO0TWROF = "N";
      set KO0TM001.KO0TMP12 skip, invisible;
      set KO0TM001.KO0TMP16 skip, invisible;
      set KO0TM001.KO0TMP17 skip, invisible;
          /* commission adjustment id does not exist*/
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VCOAOJ01";
      TA1REC.TA1TBLKE = KOTREC.KOTKEY;
      TA1REC.TA1LOCAT[1] = "KO0TS1B";
      TA1REC.TA1LOCAT[2] = "IO0670";
      XSKO001(); /* abort*/
    end
  end
  ;
  set KO0TM001.KO0TMP14 skip, invisible;
  KO0TM001.KO0TMP14 = " ";
  KO0TW01.KO0TWOAF = "N";
  KO0TW01.KO0TWMDF = "N";
  ;
  ;
end // end KO0TS1B

// first time thru
Function KO0TS1C()
  ;
  ;
     /* move data from hohrec to screen*/
  ;
  ;
  set KO0TM001 initial;
  KO0TM001.KOTMADID = KOTREC.KOTMADID;
  KO0TW01.KOTMADID = KOTREC.KOTMADID;
  KO0TM001.SM4REPID = KOTREC.SM4REPID;
  KO0TM001.SM1AGYID = KOTREC.SM1AGYID;
  KO0TM001.KOTMADAM = KOTREC.KOTMADAM;
  KO0TM001.KOYADJCD = KOTREC.KOYADJCD;
  KO0TM001.KOHADJD1 = KOTREC.KOHADJD1;
  KO0TM001.KOHADJD2 = KOTREC.KOHADJD2;
  KO0TW01.KO0TWDTE = KOTREC.KOHADJMO;
  KO0TM001.KO0TWPMM = KO0TW01.KO0TWMM;
  KO0TM001.KO0TWPYY = KO0TW01.KO0TWYY;
  KO0TM001.KOHPADID = KOTREC.KOHPADID;
  KO0TM001.KOHADJNM = KOTREC.KOHADJNM;
  KO0TM001.IVCID = KOTREC.IVCID;
  ;
  if (KOTREC.KOHADJDT > 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = KOTREC.KOHADJDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KO0TM001.KOHADJDT = TA2REC.TA2GRGB;
  end
  ;
  KO0TW01.KOTGROUP = KOTREC.KOTGROUP;
  ;
  ;
end // end KO0TS1C

// first time thru
Function KO0TS1D()
  ;
  ;
     /* edit fields that have descriptions*/
  ;
  ;
  KO0TS1E(); /* retrieve from sales agency id first occurence*/
  ;
  KO0TS1F(); /* retrieve from sales rep/agency id*/
  ;
  KO0TS1G(); /* retrieve adjustment code*/
  ;
  ;
  ;
end // end KO0TS1D

// retrieve from sales agency id
Function KO0TS1E()
  ;
  ;
  ;
           /* retrieve from sales agency id*/
  ;
  ;
  ;
  ;
  ;
  SM1REC.SM1AGYID = KO0TM001.SM1AGYID;
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0TM001.SM1AGYNM = SM1REC.SM1AGYNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0TM001.SM1AGYNM = " ";
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      TA1REC.TA1LOCAT[1] = "KO0TS1E";
      TA1REC.TA1LOCAT[2] = "IO0050";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0TS1E

// retrieve from sales rep/agy id
Function KO0TS1F()
  ;
  ;
  ;
           /* retrieve from sales rep/agency id*/
  ;
  ;
  ;
  ;
  ;
  VRAGCY02.SM1AGYID = KO0TM001.SM1AGYID;
  VRAGCY02.SM4REPID = KO0TM001.SM4REPID;
  VRAGCY02.XXXSTAT = "A";
  ;
  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0TM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
    KO0TM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
    KO0TM001.XXXMDINT = VRAGCY02.XXXMDINT;
    KO0TW01.XXXSTAT = "A";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY02";
      TA1REC.TA1LOCAT[1] = "KO0TS1F";
      TA1REC.TA1LOCAT[2] = "IO0400";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    ;
    VRAGCY02.XXXSTAT = "I";
    ;
    call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
    call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KO0TM001.XXXFSTNM = VRAGCY02.XXXFSTNM;
      KO0TM001.XXXLSTNM = VRAGCY02.XXXLSTNM;
      KO0TM001.XXXMDINT = VRAGCY02.XXXMDINT;
      KO0TW01.XXXSTAT = VRAGCY02.XXXSTAT;
      call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KO0TM001.XXXFSTNM = " ";
        KO0TM001.XXXLSTNM = " ";
        KO0TM001.XXXMDINT = " ";
        KO0TW01.XXXSTAT = " ";
      else
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VRAGCY02";
        TA1REC.TA1LOCAT[1] = "KO0TS1F";
        TA1REC.TA1LOCAT[2] = "IO0400";
        XSKO001(); /* abort*/
      end
    end
    ;
    ;
  end
  ;
  ;
end // end KO0TS1F

// retrieve adjustment code desc
Function KO0TS1G()
  ;
  ;
  ;
           /* retrieve adjustment code description*/
  ;
  ;
  ;
  ;
  ;
  KOYREC.KOYADJCD = KO0TM001.KOYADJCD;
  ;
  call "IO1030" ("S ", SQLCA, KOYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0TM001.KOYADJDS = KOYREC.KOYADJDS;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0TM001.KOYADJDS = " ";
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VADJCD01";
      TA1REC.TA1TBLKE = KOYREC.KOYADJCD;
      TA1REC.TA1LOCAT[1] = "KO0TS1G";
      TA1REC.TA1LOCAT[2] = "IO1030";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0TS1G

// retrieve control file date
Function KO0TS1H()
  ;
  ;
  ;
           /* retrieve control record and check to see if*/
           /* the record is of current month, if both the record*/
           /* and control record dates are of the same month*/
          /* user is able to change this recoord*/
  ;
  ;
  call "IO0640" ("S ", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KOZREC.KOZCSTMO == KOTREC.KOZCSTMO)
      KO0TS1I(); /* unprotect fields that can be updated*/
      KO0TM001.KO0TWFOR = "  FOR";
      KO0TW01.KO0TWDTE = KOZREC.KOZCSTMO;
    else
      KO0TM001.KO0TWFOR = "PRIOR";
      KO0TW01.KO0TWDTE = KOTREC.KOZCSTMO;
      set KO0TM001.KO0TMP12 skip, invisible;
      set KO0TM001.KO0TMP17 skip, invisible;
    end
    KO0TM001.KO0TWCMM = KO0TW01.KO0TWMM;
    KO0TM001.KO0TWCYY = KO0TW01.KO0TWYY;
  else
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VSAGCY01";
    TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
    TA1REC.TA1LOCAT[1] = "KO0TS1E";
    TA1REC.TA1LOCAT[2] = "IO0050";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0TS1H

// set update screen attributes
Function KO0TS1I()
  ;
  ;
  ;
           /* unprotect all fields that can be updated*/
  ;
  ;
  ;
  ;
  set KO0TM001.KO0TWPMM normal;
  set KO0TM001.KO0TWPYY normal;
  set KO0TM001.KOYADJCD normal;
  set KO0TM001.KOTMADAM normal;
  set KO0TM001.SM1AGYID normal;
  set KO0TM001.SM4REPID normal;
  set KO0TM001.IVCID normal;
  set KO0TM001.KOHPADID normal;
  set KO0TM001.KOHADJD1 normal;
  set KO0TM001.KOHADJD2 normal;
  set KO0TM001.KOHADJNM normal;
  set KO0TM001.KOHADJDT normal;
  ;
  ;
end // end KO0TS1I

// get new commission adj id
Function KO0TS1J()
  ;
  ;
  ;
      /* get new commission adj id*/
  ;
  ;
  ;
  ;
  ;
  call "IO0640" ("S ", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KOZREC.KOZNMAID = KOZREC.KOZNMAID + 1;
    KO0TW01.KO0TWDTE = KOZREC.KOZCSTMO;
    KO0TM001.KO0TWCMM = KO0TW01.KO0TWMM;
    KO0TM001.KO0TWCYY = KO0TW01.KO0TWYY;
    KO0TW01.KO0TWSW = "ADD";
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VTOCTL01";
    TA1REC.TA1LOCAT[1] = "KO0TS2D";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001(); /* abort*/
  end
  ;
  set KO0TM001.KO0TMP14 skip, invisible;
  set KO0TM001.KO0TMP16 skip, invisible;
  set KO0TM001.KO0TMP17 skip, invisible;
  ;
  KO0TM001.KO0TMP14 = " ";
  KO0TW01.KO0TWMDF = "N";
  KO0TW01.KO0TWOAF = "N";
  KO0TW01.KO0TWIOF = "N";
  KO0TW01.KO0TWROF = "N";
  KO0TW01.SM4REPID = 0;
  KO0TW01.IVCID = 0;
  ;
  ;
end // end KO0TS1J

// check pfkeys and selection
Function KO0TS2A()
  ;
  ;
  ;
      /* check for valid pfkeys and valid use of opt: and item:*/
      /* fields*/
  ;
  ;
  ;
  ;
  COMMAREA.CAITEM = " ";
  COMMAREA.CATOAP = " ";
  ;
  if (converseVar.eventKey is pf1)
    XSPF1(); /* transfer to help*/
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "KO0A";
      XSEXIT();
      VAGen_EZEMSG = COMMAREA.CAMSG;
    else
      if (converseVar.eventKey is pf4)
        XSPF4(); /* transfer to main menu*/
      else
        if (KO0TM001.CATOAP > " ")
          COMMAREA.CATOAP = KO0TM001.CATOAP;
          COMMAREA.CAITEM = KO0TM001.CAITEM;
          XSEXIT();
          VAGen_EZEMSG = COMMAREA.CAMSG;
        else
          if (converseVar.eventKey is pa2)
            COMMAREA.CATOAP = "KO0A";
            XSEXIT();
            VAGen_EZEMSG = COMMAREA.CAMSG;
          else
            if (converseVar.eventKey is pf12)
              if (KO0TM001.KOTMADID != KO0TW01.KOTMADID)
                KO0TS1B(); /* get new commission adjusment id*/
              else
                KO0TS2B(); /* edit screen*/
                if (converseVar.validationMsgNum == 0)
                  converseLib.validationFailed(76);
                     /* edit only option has taken place*/
                end
              end
            else
              if (converseVar.eventKey is enter)
                KO0TS2C();
              else
                if (converseVar.eventKey is pf14
                 && KO0TW01.KO0TWOAF == "Y")
                  KO0TS2C();
                else
                  if (converseVar.eventKey is pf16
                   && KO0TW01.KO0TWSW == "CHANGE")
                    KO0TS2C();
                  else
                    if (converseVar.eventKey is pf17
                     && KO0TM001.KO0TWFOR == "  FOR")
                      KO0TS2C();
                    else
                      converseLib.validationFailed(2);
                       /* invalid pfkey*/
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end KO0TS2A

// edit screen
Function KO0TS2B()
  ;
  ;
  ;
      /* edit screen*/
  ;
  if (converseVar.eventKey is pf16)
    KO0TS1J(); /* get commission adjustment id*/
    KO0TS1I(); /* unprotect all fields for an add*/
    KO0TM001.KOTMADID = KOZREC.KOZNMAID;
    KO0TW01.KOTMADID = KOZREC.KOZNMAID;
    KO0TM001.KO0TWFOR = "  FOR";
    converseLib.validationFailed(154);
    set KO0TM001.KO0TWPMM cursor;
    set KO0TM001.KO0TMP14 skip, invisible;
    set KO0TM001.KO0TMP16 skip, invisible;
    set KO0TM001.KO0TMP17 skip, invisible;
    KO0TW01.KO0TWOAF = "N";
    KO0TW01.KO0TWIOF = "N";
    KO0TW01.KO0TWMDF = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf17
   && KO0TW01.KO0TWSW == "CHANGE")
    converseLib.validationFailed(118);
      /* adjustment delete requested, please enter to delete*/
    KO0TW01.KO0TWP17 = "DELETE";
    return;
  end
  ;
  if (KO0TW01.KO0TWMDF == "N")
    return;
  end
  ;
  set KO0TM001.KOTMADID cursor;
  set KO0TM001.IVCID normal;
  set KO0TM001.SM4REPID normal;
  set KO0TM001.KO0TMP14 skip, invisible;
  KO0TM001.KO0TMP14 = " ";
  KO0TW01.KO0TWOAF = "N";
  ;
  KO0TS2F(); /* authorization date validation*/
  ;
  KO0TS2G(); /* authorization name validation*/
  ;
  KO0TS2H(); /* previous adj id validation*/
  ;
  if (KO0TM001.SM4REPID > 0)
    KO0TS2J(); /* to rep/agency validation*/
  else
    KO0TM001.XXXLSTNM = " ";
    KO0TM001.XXXFSTNM = " ";
    KO0TM001.XXXMDINT = " ";
  end
  ;
  KO0TS2K(); /* to agency validation*/
  ;
  KO0TS2M(); /* adj code and sales $ validation*/
  ;
  KO0TS2N(); /* for adj month validation*/
  ;
  if (converseVar.validationMsgNum == 0) /* no map errors exist*/
    KO0TS2V(); /* rep status validation*/
    if (converseVar.validationMsgNum == 0) /* no map errors exist*/
      KO0TS2I(); /* invoice validation*/
    end
  end
  ;
  ;
end // end KO0TS2B

// edit enter key and do whatever
Function KO0TS2C()
  ;
  ;
  ;
      /* edit enter key and do whatever*/
  ;
  ;
  ;
  ;
  if (KO0TW01.KO0TWP17 == "DELETE")
    KO0TS2U(); /* delete adjustment*/
    KO0TW01.KO0TWP17 = " ";
  else
    if (KO0TM001.KOTMADID == 0
     && KO0TW01.KOTMADID == 0)
          /* next sentence*/
    else
      if (KO0TM001.KOTMADID != KO0TW01.KOTMADID)
        KO0TS1B(); /* get new commission adjustment row*/
      else
        KO0TS2B(); /* edit screen*/
        if (converseVar.validationMsgNum > 0)
             /* next sentence*/
        else
          KO0TS2E(); /* update commission adjustment table*/
        end
      end
    end
  end
  ;
  ;
  ;
  ;
end // end KO0TS2C

// get new commission adj id
Function KO0TS2D()
  ;
  ;
  ;
      /* get new commission adj id*/
  ;
  ;
  ;
  ;
  call "IO0640" ("U1", SQLCA, KOZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VTOCTL01";
    TA1REC.TA1LOCAT[1] = "KO0TS2D";
    TA1REC.TA1LOCAT[2] = "IO0640";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0TS2D

// update commission adj table
Function KO0TS2E()
  ;
  ;
  ;
      /* update commission adjustment table*/
  ;
  ;
  ;
  if (KO0TM001.KO0TWFOR == "PRIOR")
    set KO0TM001 initial;
    KO0TS1J();
    KO0TS1I();
    KO0TM001.KOTMADID = KOZREC.KOZNMAID;
    KO0TW01.KOTMADID = KOZREC.KOZNMAID;
    set KO0TM001.KO0TWPMM cursor;
    set KO0TM001.KO0TMP14 skip, invisible;
    set KO0TM001.KO0TMP16 skip, invisible;
    set KO0TM001.KO0TMP17 skip, invisible;
  else
    if (KO0TW01.KO0TWMDF == "N")
      set KO0TM001 initial;
      KO0TS1J();
      KO0TS1I();
      KO0TM001.KOTMADID = KOZREC.KOZNMAID;
      KO0TW01.KOTMADID = KOZREC.KOZNMAID;
      set KO0TM001.KO0TWPMM cursor;
      set KO0TM001.KO0TMP14 skip, invisible;
      set KO0TM001.KO0TMP16 skip, invisible;
      set KO0TM001.KO0TMP17 skip, invisible;
    else
      KO0TS2T(); /* get time and date stamp*/
      ;
      ;
      if (KO0TW01.KO0TWSW == "CHANGE")
        KOTREC.KOTGROUP = KO0TW01.KOTGROUP;
        KO0TS2R(); /* move kohrec to audit*/
        KOAREC.KOAACTTY = "2";
        KO0TS2S(); /* write before audit record*/
        KO0TS2O(); /* move screen to kohrec*/
        KO0TS2P(); /* update kohrec*/
        KO0TS2R(); /* move kohrec to audit*/
        KOAREC.KOAACTTY = "3";
        KO0TS2S(); /* write before audit record*/
      else
        set KOTREC empty;
        KO0TS2O(); /* move screen to kohrec*/
        KO0TS2Q(); /* add kohrec*/
        if (converseVar.validationMsgNum != 43) /* successful add message*/
            /* next sentence*/
        else
          KO0TS2R(); /* move kohrec to audit*/
          KOAREC.KOAACTTY = "1";
          KO0TS2S(); /* write before audit record*/
        end
      end
    end
  end
  ;
  ;
end // end KO0TS2E

// edit authorization date
Function KO0TS2F()
  ;
  ;
  ;
     /* autorization date validation*/
  ;
  ;
  ;
  set KO0TM001.KOHADJDT normal;
  ;
  if (KO0TM001.KOHADJDT == " ")
    return;
  end
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  KO0TW01.KO0TWDT = KO0TM001.KOHADJDT;
  ;
  if (KO0TW01.KO0TWHYY != " ") /* check form mm-dd-yy or mmddyy*/
    TA2REC.TA2GRTYP = "B";
    TA2REC.TA2GRGB = KO0TM001.KOHADJDT;
  else
    if (KO0TW01.KO0TWSL1 != "-") /* check form mm-dd-yy or mmddyy*/
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2GRGA = KO0TM001.KOHADJDT;
    else
      TA2REC.TA2GRTYP = "B";
      TA2REC.TA2GRGB = KO0TM001.KOHADJDT;
    end
  end
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0TM001.KOHADJDT = TA2REC.TA2GRGB;
  else
    set KO0TM001.KOHADJDT cursor, bold;
    converseLib.validationFailed(46);
     /* date must be valid and in mmddyy or mm-dd-yy format*/
  end
  ;
  ;
end // end KO0TS2F

// edit authorization name
Function KO0TS2G()
  ;
  ;
  ;
     /* authorization name validation*/
  ;
  ;
  ;
  set KO0TM001.KOHADJNM normal;
  ;
  if (KO0TM001.KOHADJDT > " "
   && KO0TM001.KOHADJNM == " ")
    converseLib.validationFailed(48);
        /* autorization name is required with authorization date*/
    set KO0TM001.KOHADJNM cursor, bold;
  end
  ;
  ;
  ;
end // end KO0TS2G

// previous adj id edit
Function KO0TS2H()
  ;
  ;
  ;
     /* previous adjustment id validation*/
  ;
  ;
  ;
  set KO0TM001.KOHPADID normal;
  ;
  if (KO0TM001.KOHPADID >= KO0TM001.KOTMADID)
    converseLib.validationFailed(62);
        /* previous adjustment id cannot be greater*/
        /* than adjustment id*/
    set KO0TM001.KOHPADID cursor, bold;
  else
    if (KO0TM001.KOHPADID > 0)
      KOTREC.KOTMADID = KO0TM001.KOHPADID;
      ;
      call "IO0670" ("S ", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};
      ;
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
          /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(49);
              /* nonexistent previous comm adj id*/
          set KO0TM001.KOHPADID cursor, bold;
        else
          TA1REC.TA1DBASE = "DCOMM";
          TA1REC.TA1TBLVU = "VMSADJ01";
          TA1REC.TA1TBLKE = KOTREC.KOTKEY;
          TA1REC.TA1LOCAT[1] = "KO0TS2H";
          TA1REC.TA1LOCAT[2] = "IO0670";
          XSKO001(); /* abort*/
        end
      end
    end
  end
  ;
  ;
end // end KO0TS2H

// validate invoice id
Function KO0TS2I()
  ;
  ;
  set KO0TM001.IVCID normal;
  ;
  if (KO0TW01.IVCID == KO0TM001.IVCID)
    if (KO0TW01.KO0TWIOF == "Y")
      return;
    else
      if (converseVar.eventKey is pf14)
        set KO0TM001.IVCID normal;
        KO0TW01.KO0TWIOF = "Y";
        return;
      end
    end
  end
  ;
  KO0TW01.IVCID = KO0TM001.IVCID;
  KO0TW01.KO0TWIOF = "N";
  ;
  if (KO0TM001.IVCID != 0)
    set SQLCA empty;
    set IV0REC empty;
    KO0TW01.KO0TWIVC = KO0TM001.IVCID;
    IV0REC.IV0IVCID = KO0TW01.KO0TWIVC;
    IV0REC.IV0PARTN = KO0TW01.KO0TWPRT;
    ;
    call "IO1110" ("S ", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      set KO0TM001.IVCID normal;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set KO0TM001.IVCID cursor, bold;
        set KO0TM001.KO0TMP14 initialAttributes;
        KO0TM001.KO0TMP14 = "14:ACCEPT INVOICE";
        KO0TW01.KO0TWOAF = "Y";
        converseLib.validationFailed(117);
      else
        TA1REC.TA1DBASE = "DINVC";
        TA1REC.TA1TBLVU = "VIVHDX01";
        TA1REC.TA1TBLKE = IV0REC.IV0KEY;
        TA1REC.TA1LOCAT[1] = "KO0TS2I";
        TA1REC.TA1LOCAT[2] = "IO1110";
        XSKO001(); /* abort*/
      end
    end
    ;
  end
  ;
  ;
end // end KO0TS2I

// to sales rep/agy edit
Function KO0TS2J()
  ;
  ;
  ;
     /* to sales rep/agency edit*/
  ;
  ;
  ;
  ;
  ;
  set KO0TM001.SM4REPID normal;
  set KO0TM001.SM1AGYID normal;
  ;
  if (KO0TM001.SM4REPID == 0)
    KO0TM001.XXXLSTNM = " ";
    KO0TM001.XXXFSTNM = " ";
    KO0TM001.XXXMDINT = " ";
    KO0TW01.XXXSTAT = " ";
  else
    KO0TS1F(); /* sales rep/agency io*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(51);
          /* invalid sales rep /agency*/
      set KO0TM001.SM4REPID cursor, bold;
    end
  end
  ;
  ;
  ;
end // end KO0TS2J

// to sales agency edit
Function KO0TS2K()
  ;
  ;
  ;
     /* to sales agency edit*/
  ;
  ;
  ;
  ;
  ;
  set KO0TM001.SM1AGYID normal;
  ;
  KO0TS1E(); /* sales rep/agency io*/
  ;
  if (SM1REC.SM1PAYCD == "NP"
   && KO0TM001.SM4REPID == 0)
    set KO0TM001.SM4REPID cursor, bold;
    converseLib.validationFailed(105);
      /* sales agency is a no pay agency, sales rep required*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(52);
        /* invalid sales agency*/
    set KO0TM001.SM1AGYID cursor, bold;
  end
  ;
  ;
  ;
end // end KO0TS2K

// adjustment cd and sales $ edit
Function KO0TS2M()
  ;
  ;
  ;
     /* adjusmtent code and sales $ edit*/
  ;
  ;
  ;
  ;
  ;
  set KO0TM001.KOYADJCD normal;
  set KO0TM001.KOTMADAM normal;
  set KO0TM001.KOHADJD1 normal;
  set KO0TM001.KOHADJD2 normal;
  ;
  KO0TS1G(); /* commission adjustment code io*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(37);
        /* invalid adjustment code*/
    set KO0TM001.KOYADJCD cursor, bold;
  else
    if (KOYREC.KOYADJFL == "Y"
     && KO0TM001.KOTMADAM == 0)
      converseLib.validationFailed(61);
      set KO0TM001.KOTMADAM cursor, bold;
         /* ajdustment amount cannot be zero*/
    end
  end
  ;
  ;
  if (KOYREC.KOYADJTP == "M"
   || KOYREC.KOYADJTP == "B")
    if (KOYREC.KOYADJCD == "97" /* adjustment code 97*/
     && KO0TM001.KOHADJD1 <= " "
     && KO0TM001.KOHADJD2 <= " ")
      converseLib.validationFailed(205); /* requires description*/
      set KO0TM001.KOYADJCD bold;
      set KO0TM001.KOHADJD1 cursor, bold;
    end
  else
    converseLib.validationFailed(114);
    set KO0TM001.KOYADJCD cursor, bold;
       /* invalid adjustment code / type combination*/
  end
  ;
  ;
end // end KO0TS2M

// adjustment month edit
Function KO0TS2N()
  ;
  ;
  ;
     /* adjustment month edit*/
  ;
  ;
  ;
  ;
  ;
  set KO0TM001.KO0TWPMM normal;
  set KO0TM001.KO0TWPYY normal;
  ;
  ;
  KO0TW01.KO0TWNMM = KO0TM001.KO0TWPMM;
  KO0TW01.KO0TWNYY = KO0TM001.KO0TWPYY;
  KO0TW01.KO0TWNDD = 1;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGE = KO0TW01.KO0TWNDT;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KO0TW01.KO0TWDTH = TA2REC.TA2GRGGN;
    if (KO0TW01.KO0TWDYM <= KOZREC.KOZCSTMO)
       /* next sentence*/
    else
      converseLib.validationFailed(59);
         /* the adjustment for month of must be less than or equal to*/
         /* comm stmt month*/
      set KO0TM001.KO0TWPMM cursor, bold;
      set KO0TM001.KO0TWPYY bold;
    end
  else
    set KO0TM001.KO0TWPMM cursor, bold;
    set KO0TM001.KO0TWPYY bold;
    converseLib.validationFailed(58);
     /* date must be a valid month and year*/
  end
  ;
  ;
end // end KO0TS2N

// move screen to kohrec
Function KO0TS2O()
  ;
  ;
  ;
      /* move screen to kohrec*/
  ;
  ;
  ;
  ;
  KOTREC.KOTMADID = KO0TM001.KOTMADID;
  KOTREC.IVCID = KO0TM001.IVCID;
  KOTREC.KOTMADAM = KO0TM001.KOTMADAM;
  KOTREC.KOYADJCD = KO0TM001.KOYADJCD;
  KOTREC.KOHADJD1 = KO0TM001.KOHADJD1;
  KOTREC.KOHADJD2 = KO0TM001.KOHADJD2;
  KOTREC.SM4REPID = KO0TM001.SM4REPID;
  KOTREC.SM1AGYID = KO0TM001.SM1AGYID;
  KOTREC.KOHPADID = KO0TM001.KOHPADID;
  KOTREC.KOHADJNM = KO0TM001.KOHADJNM;
  KOTREC.XXXUSRID = COMMAREA.CAUSERID;
  ;
  if (KO0TM001.KOHADJDT > " ")
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "B";
    TA2REC.TA2GRGB = KO0TM001.KOHADJDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KOTREC.KOHADJDT = TA2REC.TA2GRGGN;
  end
  ;
  ;
  KO0TW01.KO0TWNMM = KO0TM001.KO0TWPMM;
  KO0TW01.KO0TWNYY = KO0TM001.KO0TWPYY;
  KO0TW01.KO0TWNDD = 1;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGE = KO0TW01.KO0TWNDT;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  KO0TW01.KO0TWDTH = TA2REC.TA2GRGGN;
  KOTREC.KOHADJMO = KO0TW01.KO0TWDYM;
  ;
  ;
  KO0TW01.KO0TWNMM = KO0TM001.KO0TWCMM;
  KO0TW01.KO0TWNYY = KO0TM001.KO0TWCYY;
  KO0TW01.KO0TWNDD = 1;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGE = KO0TW01.KO0TWNDT;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  KO0TW01.KO0TWDTH = TA2REC.TA2GRGGN;
  KOTREC.KOZCSTMO = KO0TW01.KO0TWDYM;
  ;
  ;
end // end KO0TS2O

// update kotrec
Function KO0TS2P()
  ;
  ;
  ;
      /* update ko6tec*/
  ;
  ;
  ;
  KOTREC.ZZZCHGDT = KO0TW01.ZZZCHGDT;
  KOTREC.ZZZCHGTM = KO0TW01.ZZZCHGTM;
  ;
  call "IO0670" ("U ", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    set KO0TM001 initial;
    KO0TS1J(); /* get new commission adjustment id*/
    KO0TM001.KOTMADID = KOZREC.KOZNMAID;
    KO0TW01.KOTMADID = KOZREC.KOZNMAID;
    set KO0TM001.KO0TWPMM cursor;
    KO0TS1I(); /* unprotect fields for an add*/
    converseLib.validationFailed(44);
       /* change was successful*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KO0TS1B(); /* someone has updated in the meantime*/
      converseLib.validationFailed(60);
        /* the data has been modified by someone else, reenter chang*/
    else
      TA1REC.TA1DBASE = "DCOMM";
      TA1REC.TA1TBLVU = "VMSAOJ01";
      TA1REC.TA1TBLKE = KOTREC.KOTKEY;
      TA1REC.TA1LOCAT[1] = "KO0TSPY";
      TA1REC.TA1LOCAT[2] = "IO0640";
      XSKO001(); /* abort*/
    end
  end
  ;
  ;
end // end KO0TS2P

// add kotrec
Function KO0TS2Q()
  ;
  ;
  KO0TS1J(); /* get commission adjustment id*/
  ;
  if (KO0TM001.KOTMADID != KOZREC.KOZNMAID)
    set KO0TM001.KOTMADID modified;
    KO0TM001.KOTMADID = KOZREC.KOZNMAID;
    KO0TW01.KOTMADID = KOZREC.KOZNMAID;
    converseLib.validationFailed(104);
  else
    KO0TS2D(); /* update commission adjustment id*/
    KOZREC.KOZNMAID = KOZREC.KOZNMAID + 1;
    if (KO0TM001.KOTMADID != KOZREC.KOZNMAID)
      set KO0TM001.KOTMADID modified;
      KO0TM001.KOTMADID = KOZREC.KOZNMAID;
      KO0TW01.KOTMADID = KOZREC.KOZNMAID;
      converseLib.validationFailed(104);
    else
      KOTREC.ZZZSDT = KO0TW01.ZZZSDT;
      KOTREC.ZZZCHGDT = KO0TW01.ZZZCHGDT;
      KOTREC.ZZZCHGTM = KO0TW01.ZZZCHGTM;
      ;
      call "IO0670" ("A ", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        set KO0TM001 initial;
        set KO0TM001.KO0TWPMM cursor;
        KO0TS1J(); /* get next misc commission adj id*/
        KO0TS1I(); /* unprotect fields for add*/
        converseLib.validationFailed(43); /* add was successful*/
        KO0TM001.KOTMADID = KOZREC.KOZNMAID;
        KO0TW01.KOTMADID = KOZREC.KOZNMAID;
      else
        TA1REC.TA1DBASE = "DCOMM";
        TA1REC.TA1TBLVU = "VMSADJ01";
        TA1REC.TA1TBLKE = KOTREC.KOTKEY;
        TA1REC.TA1LOCAT[1] = "KO0TS2Q";
        TA1REC.TA1LOCAT[2] = "IO0670";
        XSKO001(); /* abort*/
      end
    end
  end
  ;
  ;
  ;
  ;
end // end KO0TS2Q

// add kotrec
Function KO0TS2R()
  ;
  ;
  ;
      /* move kotrec to audit*/
  ;
  ;
  ;
  ;
  set KOAREC empty;
  KOAREC.KOTMADID = KOTREC.KOTMADID;
  KOAREC.KOZCSTMO = KOTREC.KOZCSTMO;
  KOAREC.IVCID = KOTREC.IVCID;
  KOAREC.KOTMADAM = KOTREC.KOTMADAM;
  KOAREC.SM4REPID = KOTREC.SM4REPID;
  KOAREC.SM1AGYID = KOTREC.SM1AGYID;
  KOAREC.KOYADJCD = KOTREC.KOYADJCD;
  KOAREC.KOHADJD1 = KOTREC.KOHADJD1;
  KOAREC.KOHADJD2 = KOTREC.KOHADJD2;
  KOAREC.KOHADJMO = KOTREC.KOHADJMO;
  KOAREC.KOHPADID = KOTREC.KOHPADID;
  KOAREC.KOHADJNM = KOTREC.KOHADJNM;
  KOAREC.KOHADJDT = KOTREC.KOHADJDT;
  KOAREC.XXXUSRID = COMMAREA.CAUSERID;
  KOAREC.KOACRSDT = KOTREC.ZZZSDT;
  ;
  ;
  ;
  ;
end // end KO0TS2R

// before shot for sales agnecy
Function KO0TS2S()
  ;
  ;
           /* store audit records*/
  ;
  ;
  ;
  KOAREC.KOATBLCD = 40;
  KOAREC.XXXTBLNM = "VMSADJ01";
  KOAREC.ZZZSDT = KO0TW01.ZZZSDT;
  KOAREC.ZZHHMMSS = KO0TW01.ZZHHMMSS;
  ;
  call "IO0630" ("A ", SQLCA, KOAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0TS2S

// get time and date stamp
Function KO0TS2T()
  ;
  ;
  ;
      /* get time and date stamp*/
  ;
  ;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  KO0TW01.ZZZSDT = TA2REC.TA2GRGGN;
  KO0TW01.ZZZCHGDT = TA2REC.TA2GRGGN;
  KO0TW01.ZZZCHGTM = TA2REC.TA2TIMHM;
  KO0TW01.ZZHHMMSS = TA2REC.TA2TIMEN;
  ;
  ;
  ;
  ;
end // end KO0TS2T

// delete misc commission adjust
Function KO0TS2U()
  ;
  ;
  ;
           /* delete misc commission adjustment*/
  ;
  ;
  ;
  ;
  ;
  KOTREC.KOTMADID = KO0TM001.KOTMADID;
  ;
  call "IO0670" ("D ", SQLCA, KOTREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KO0TS2T(); /* get time and date stamp*/
    KO0TS2R(); /* move kotrec to audit*/
    KOAREC.KOAACTTY = "4";
    KO0TS2S(); /* write delete audit record*/
    set KO0TM001 initial;
    KO0TS1J(); /* get new commission adjustment id*/
    KO0TM001.KOTMADID = KOZREC.KOZNMAID;
    KO0TW01.KOTMADID = KOZREC.KOZNMAID;
    set KO0TM001.KO0TWPMM cursor;
    KO0TS1I(); /* unprotect fields for an add*/
    converseLib.validationFailed(119);
      /* delete successful*/
  else
    TA1REC.TA1DBASE = "DCOMM";
    TA1REC.TA1TBLVU = "VCOADJ01";
    TA1REC.TA1TBLKE = KOTREC.KOTKEY;
    TA1REC.TA1LOCAT[1] = "KO0TS1B";
    TA1REC.TA1LOCAT[2] = "IO0670";
    XSKO001(); /* abort*/
  end
  ;
  ;
end // end KO0TS2U

// validate rep status
Function KO0TS2V()
  ;
  ;
  if (KO0TW01.SM4REPID == KO0TM001.SM4REPID) /* rep has not been changed*/
    if (KO0TW01.KO0TWROF == "Y") /* ; rep overide flag = 'y'*/
      return;
    else
      if (converseVar.eventKey is pf14) /* ; attention key = pf14*/
        KO0TW01.KO0TWROF = "Y"; /* set rep overide flag*/
        return;
      end
    end
  end
  ;
  KO0TW01.SM4REPID = KO0TM001.SM4REPID;
  KO0TW01.KO0TWROF = "N";
  ;
  if (KO0TW01.XXXSTAT == "I") /* ; from rep status = inactive*/
    KO0TM001.KO0TMP14 = "14:ACCEPT REP";
    KO0TW01.KO0TWOAF = "Y"; /* ; set override allowed flag*/
    converseLib.validationFailed(160); /* ; inactive rep*/
    set KO0TM001.SM4REPID cursor, bold;
    set KO0TM001.KO0TMP14 initialAttributes;
  end
  ;
  ;
end // end KO0TS2V

//*** RECORD=KO0TW01 ****
// *******************  ko0hw01 record ************************
// this is the working storage record for ko0h application
// 
// 
// ************************************************************
// MAINTENANCE:
// 
// REV.
// NUMBER  WHO      WHEN      WHY
// ------  ------   -------   ---------------------------------
//  00     bnaber   09-24-86  created record.
// 
// 
// ************************************************************
// ***********************
Record KO0TW01 type basicRecord
  5 KO0TWGRP KO0TWGRP ; 
    10 KO0TWSW KO0TWSW ; 
    10 KO0TWDTE KO0TWDTE ; 
      15 * char(5) ; 
      15 KO0TWYY KO0TWYY ; 
      15 KO0TWMM KO0TWMM ; 
    10 KO0TWCID KO0TWCID ; 
      15 KO0TWNID KO0TWNID ; 
      15 * char(14) ; 
    10 KO0TWDT KO0TWDT ; 
      15 KO0TWHMM KO0TWHMM ; 
      15 KO0TWSL1 KO0TWSL1 ; 
      15 KO0TWHDD KO0TWHDD ; 
      15 * char(1) ; 
      15 KO0TWHYY KO0TWHYY ; 
    10 KO0TWNDT KO0TWNDT ; 
      15 KO0TWNYY KO0TWNYY ; 
      15 KO0TWNMM KO0TWNMM ; 
      15 KO0TWNDD KO0TWNDD ; 
    10 KO0TWDTH KO0TWDTH ; 
      15 KO0TWDYM KO0TWDYM ; 
      15 * char(2) ; 
    10 KOTGROUP KOTGROUP ; 
    10 KOTMADID KOTMADID ; 
    10 ZZHHMMSS ZZHHMMSS ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 KO0TWP17 KO0TWP17 ; 
    10 IVCID IVCID ; 
    10 SM4REPID SM4REPID ; 
    10 KO0TWOAF KO0TWOAF ; 
    10 KO0TWIOF KO0TWIOF ; 
    10 KO0TWROF KO0TWROF ; 
    10 KO0TWMDF KO0TWMDF ; 
    10 KO0TWIVC KO0TWIVC ; 
      15 * num(7) ; 
      15 KO0TWPRT KO0TWPRT ; 
    10 XXXSTAT XXXSTAT ; 
end // end KO0TW01

// character comm adj id
DataItem KO0TWCID char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date hold area
DataItem KO0TWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split month and year
DataItem KO0TWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date hold for year and month
DataItem KO0TWDTH num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date hold yyyymm
DataItem KO0TWDYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comm. next misc. adj. id
DataItem KO0TWGRP char(288)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day of mm-dd-yy
DataItem KO0TWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month of mm-dd-yy
DataItem KO0TWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year of mm-dd-yy
DataItem KO0TWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice overide flag
DataItem KO0TWIOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// find part number of invoice
DataItem KO0TWIVC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem KO0TWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comm. prev. stmt month
DataItem KO0TWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day of yymmdd
DataItem KO0TWNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date hold area
DataItem KO0TWNDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric comm adj id
DataItem KO0TWNID num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month of yymmdd
DataItem KO0TWNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year of yymmdd
DataItem KO0TWNYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// overide allowed flag
DataItem KO0TWOAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf17 delete switch
DataItem KO0TWP17 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// find part number of invoice
DataItem KO0TWPRT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rep overide flag
DataItem KO0TWROF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KO0TWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add and change switch
DataItem KO0TWSW char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split apart year
DataItem KO0TWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

