package ko0m;

import corpcom1.CAITEM;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XSMTBL;
import corpx2.XSMTYPCD;
import ko.common.KOFREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KO0M ****
//  *********      special schedule inquiry      **********
// 
// application km0m - special schedule inquiry allows the user
// to view all existing special schedules.
// 
// a special schedule falls under one of four categories:
// .  mel - (major emphasis line) an additional commission
//    percentage added to the normal rate.  used as incentive
//    to reach sales goals.  normally lasts three to six mos.
//    currently there are two types of mel categories:
//    .  'a' - products that are of average volume and do
//       not have the potential to be "runaway" products
//    .  'b' - products with more high risk/high demand that
//       could be very substantial in volume.
// .  specialty - higher commission rates provided for
//    important but limited volume products.  may be used
//    independent of or exclusive to a sales program.  a
//    special commission overrides all other commission rates.
// .  incentive - exclusive to sales programs.  used in
//    addition to current commission rates.
// .  closeout - distressed, discounted or overstocked items
//    sold at a reduced commission rate.  normally, the sales
//    price offered on closeouts is very attractive.  the
//    closeout rate may be negative.
// 
// each special commission is made unique through the use of
//    .  a commission type code, and   (xsmtypcd)
//    .  a special commission code     (kofcomcd)
// each commission type (discussed above) has it's own unique
// identifying code (e.g. m = mel, s = specialty).  under a
// commission type, a special commission code is assigned each
// percentage to uniquely identify it.
// 
// the mel commission type may have only two special commission
// codes ('a' and 'b').  the others may have up to 26
// special commission codes.  a given commission is in either
// active or inactive status.
// EXAMPLE:  commission type code =   c   (closeout)
//           special comm code    =   b   (unique % identifier)
//           commission percent   = 2.0
//           status               =   a    (active)
// 
// see user documentation for further details.
// ************************************************************
// application    ko0m
// processes      ko0m000   initialization
//                ko0m010   display screen
//                ko0m020   retrieve special schedule
// stmt groups    ko0ms11   reset screen attributes
//                ko0ms13   validate attention keys
//                ko0ms21   clear commission fields
//                ko0ms23   select special schedule
//                ko0ms25   retrieve special schedule
//                xspf1     help
//                xspf4     main menu
//                xsexit    xfer to reqested appl
// 
//  init     date         change
//  -----  ---------  -----------------------------------------
//  ob     1-30-87    created program.
//  jwood  12-20-88   added noncsp option to calls
//  jwood  12-20-88   added xssegtr logic
// 
// 
// 
// 
// *********************
Program KO0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CO00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KO0MW01 KO0MW01; // record
  KOFREC KOFREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSMTBL {deleteAfterUse = yes}; // table
  use KO0MM.KO0MM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KO0M000: KO0M000();


    if (KO0MM001.XSMTYPCD == " ")
      goto KO0M010; /* converse map*/
    else
      goto KO0M020; /* retrieve special schedule*/
    end



    KO0M010: KO0M010();



    if (converseVar.validationMsgNum > 0)
      goto KO0M010; /* converse screen*/
    else
      goto KO0M020; /* retrieve special schedule*/
    end



    KO0M020: KO0M020();


    goto KO0M010; /* converse screen*/



  end // end main
end // end KO0M

// initialization
Function KO0M000()


  XSENTRY(); /* check security*/


  XSSEGTR(); /* set segmented transaction id*/

  converseLib.clearScreen();
  set KO0MM001 initial; /* initialize map*/

  set SQLCA empty; /* initialize records*/
  set KOFREC empty;
  set KO0MW01 empty;
  set TA1REC empty;
  set TA2REC empty;
  set ERRSQLCA empty;

  if (COMMAREA.CAITEM != " ")
    KO0MW01.CAITEM = COMMAREA.CAITEM;
    KO0MM001.XSMTYPCD = KO0MW01.KO0MWCD;
  else
         /* next sentence*/
  end


end // end KO0M000

// display screen
Function KO0M010()



  KO0MM001.XXXCURDT = VGVar.currentShortGregorianDate;

  set KO0MW01 empty;


  converse KO0MM001 ;


  KO0MS11(); /* reset screen attributes*/
  KO0MS13(); /* validate attention keys*/


  if (KO0MM001.XSMTYPCD in XSMTBL.XSMCD)
    KO0MM001.XSMTYPCD = XSMCD[sysVar.arrayIndex];
  else
    set KO0MM001.XSMTYPCD cursor, bold;
    KO0MW01.XSMTYPCD = KO0MM001.XSMTYPCD;
    converseLib.clearScreen();
    set KO0MM001 initial;
    KO0MM001.XSMTYPCD = KO0MW01.XSMTYPCD;
    converseLib.validationFailed(8);
                                   /* this is not a valid schedule type*/
  end



end // end KO0M010

// retrieve special schedule
Function KO0M020()



  KO0MS21(); /* clear screen*/


  KO0MS23(); /* select special schedule*/



end // end KO0M020

// reset screen attributes
Function KO0MS11()



  KO0MM001.KO0MMSG = " ";

  set KO0MM001.XSMTYPCD cursor, normal;
  set KO0MM001.CATOAP normal;
  set KO0MM001.CAITEM normal;



end // end KO0MS11

// validate attention keys
Function KO0MS13()



  if (KO0MM001.CATOAP != " ") /* check for fast path*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KO0MM001.CATOAP;
      COMMAREA.CAITEM = KO0MM001.CAITEM;
      XSEXIT();
      set KO0MM001.CATOAP cursor, bold;
      KO0MM001.KO0MMSG = COMMAREA.CAMSG;
      exit stack;
    else
      set KO0MM001.CATOAP cursor, bold;
      converseLib.validationFailed(1);
      exit stack;
    end
  end

  if (converseVar.eventKey is pf1) /* transfer to help facitily*/
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    XSPF1();
    KO0MM001.KO0MMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf3 /* cancel application*/
   || converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KO0A";
    COMMAREA.CAITEM = " ";
    XSEXIT();
    KO0MM001.KO0MMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf4) /* transfer to main menu*/
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    XSPF4();
    KO0MM001.KO0MMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is enter) /* valid attention key*/
    return;
  else
    converseLib.validationFailed(2);
    exit stack;
  end


end // end KO0MS13

// clear commission fields
Function KO0MS21()



  KO0MW01.XSMTYPCD = KO0MM001.XSMTYPCD;
  converseLib.clearScreen();
  set KO0MM001 initial;
  KO0MM001.XSMTYPCD = KO0MW01.XSMTYPCD;



end // end KO0MS21

// select special schedule
Function KO0MS23()



  set KOFREC empty;
  set SQLCA empty;

  KOFREC.XSMTYPCD = KO0MM001.XSMTYPCD;

  call "IO0710" ("SS", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    KO0MW01.KO0MWSUB = 1;

    while (SQLCA.VAGen_SQLCODE == 0
     && KO0MW01.KO0MWSUB <= 26)

      KO0MS25(); /* retrieve special schedule*/

    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(125); /* schedule does not exist*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KO0M";
      TA1REC.TA1LOCAT = "KO0MS23";
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  end

  call "IO0710" ("CS", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};



end // end KO0MS23

// retrieve special schedule
Function KO0MS25()



  call "IO0710" ("SN", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    KO0MM001.KOFCOMCD[KO0MWSUB] = KOFREC.KOFCOMCD;
    KO0MM001.KO0MMPCT[KO0MWSUB] = KOFREC.KOFCSPCT;
    KO0MM001.XXXSTAT[KO0MWSUB] = KOFREC.XXXSTAT;
    KO0MM001.ZZZSDT[KO0MWSUB] = KOFREC.ZZZSDT;
    KO0MM001.ZZZCHGDT[KO0MWSUB] = KOFREC.ZZZCHGDT;
    KO0MW01.KO0MWSUB = KO0MW01.KO0MWSUB + 1;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KO0M    ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "KO0MS25 ";
      TA1REC.TA1LOCAT[3] = "IO0710  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "KO0MM001";
      TA1DBASE = "DCOMM.";
      TA1REC.TA1TBLVU = "VSMSCH01";
      TA1REC.TA1TBLKE = KO0MM001.XSMTYPCD;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      KO0MM001.KO0MMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end KO0MS25

//*** RECORD=KO0MW01 ****
// this area is used by ko0f to verify changes to the screens
// ***********************
Record KO0MW01 type basicRecord
  10 CAITEM CAITEM ; 
    15 KO0MWCD KO0MWCD ; 
    15 KO0MWFLR KO0MWFLR ; 
  10 XSMTYPCD XSMTYPCD ; 
  10 KO0MWSUB KO0MWSUB ; 
end // end KO0MW01

// xsmtypcd spcl comm type cd
DataItem KO0MWCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KO0MWFLR char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript
DataItem KO0MWSUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

