package fk0d;

import corpcom2.XX0XW01;
import corpcom3.XPFK001;
import corpcom3.XPTA0P;
import corpcom4.XSFKS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXLSTDT;
import corpcom7.XXXLSTTM;
import corpcom7.XXXPGMNB;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB8BUYDT;
import fb.common.FBAREC;
import fb.common.FBKREC;
import fk.common.*;
import pc.common.PC3REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA2REC01;
import ta.common.TA3REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VLRPSH01;
//*** PROGRAM=FK0D ****
// description here
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/17/88  USERID  New application.
//          05/26/92  JALLE1  Fix production jcl tables.
//          08/05/92  DFRANC  Fix fk0d-520 month wrap around.
//                            Move errors msgs to EZEMNO.
//          09/02/92  JALLE1  Add update and edit logic for
//                            DCMPNT.VFKPGM01 table.
//          09/28/92  JALLE1  Remove model type from map.
//                            Default type to 'MTL'.
//          09/30/92  JALLE1  Cosmetic map changes.
//          10/12/92  JALLE1  Add initial fcty fcst flag to
//                            map.
//          11/12/92  JALLE1  Add autoload complete flag to
//                            map.
// FK-???   12/22/92  JALLE1  Add first fcst mo to map and
//                            allow field to be used to
//                            create a late lrps;
// FK-???   01/04/93  JALLE1  Open mapper download.
// FK-018   02/26/93  JALLE1  Activate PFKeys for FK0G, FK0H.
// FK-026   07/07/93  JALLE1  Add actuals and prelims to LRPS
//                            when creating production fcst or
//                            fcty fcst lrps.
//          08/09/93  JALLE1  Remove references to fbmdtyp
//                            for Aug '93 table changes.
// FK-032   09/10/93  JALLE1  Added Download Airbag Prelims to
//                            mapper.
// FK-032   09/20/93  JALLE1  Added Air Bag mapper rid loc. to
//                            map.
//          03/07/94  JALLE1  Fix test jcl for mapper download.
//                            March 1994 table changes.
// FK9999   11/22/95  JNIESE  Added model information to the
//                            screen.
// FK9999   11/29/95  JNIESE  Added buy date and changed
//                            verbage of several fields.
// FK9999   03/20/96  RMCAFE  USE BUY DATE FROM DFBUY.VFYMDL01
//                            INSTEAD OF DFBUY.VFMCTL01
// y2kfix   11-06-97  oricha  y2k modifications:  fk0dm010
//                            fk0dm-first-fcst-dt and fk0dm-
//                            prelim-dt now zero fill for y2k.
// FK9999   07/09/98  MSMIT2  Remove Mapper downloads.
// *********************
Program FK0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FBAREC FBAREC; // record
  FBKREC FBKREC; // record
  FK0DW00 FK0DW00; // record
  FK0DW01 FK0DW01; // record
  FK0DW02 FK0DW02; // record
  FK0DW04 FK0DW04; // record
  FK0DW05 FK0DW05; // record
  FKWREC FKWREC; // record
  PC3REC PC3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA2REC01 TA2REC01; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VFKPGM01 VFKPGM01; // record
  VLRPSH01 VLRPSH01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK0DT01 {deleteAfterUse = yes}; // table
  use FK0DT02 {deleteAfterUse = yes}; // table
  use FK0DT03 {deleteAfterUse = yes}; // table
  use FK0DT04 {deleteAfterUse = yes}; // table
  use FK0DT05 {deleteAfterUse = yes}; // table
  use FK0DT06 {deleteAfterUse = yes}; // table
  use FK0DT51 {deleteAfterUse = yes}; // table
  use FK0DT52 {deleteAfterUse = yes}; // table
  use FK0DT53 {deleteAfterUse = yes}; // table
  use FK0DT54 {deleteAfterUse = yes}; // table
  use FK0DT55 {deleteAfterUse = yes}; // table
  use FK0DT56 {deleteAfterUse = yes}; // table
  use FK0DM.FK0DM110, // form
    	FK0DM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FK0DM110 initial; /* map input/output*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FK0DW00.FK0DW-REQUEST-DATA-SW = "Y"; /* Get some data*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FK0D-001; /* Converse the main process*/


    FK0D-001: FK0D-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FK0D-001; /* Converse the main process*/


  end // end main
end // end FK0D

// Main process to display a map
Function FK0D-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FK0D-100(); /* Obtain the data to display*/

  FK0D-200(); /* Format and display the map*/

  FK0D-300(); /* Check attention identifier*/

  FK0D-400(); /* Reset fields to normal intensity*/

  FK0D-500(); /* Verify the entered data*/

  FK0D-600(); /* Process valid input request*/


end // end FK0D-001

// Obtain data to display
Function FK0D-100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FK0DW00.FK0DW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* Or an error was found*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* 1. Scan for the most latest prelim model information.*/
   /* 2. Get the current buy date from DFBUY.VFYMDL01.*/
   /* ------------------------------------------------------------*/

  set FBAREC empty;

  FBAREC.FBDMDTYP = "FL1"; /* FB MODEL TYPE*/
  FBAREC.FBASTDFL = "Y"; /* FB MODEL flag*/

  FK0D-150(); /* Select (S2) DFBUY.VFYMDL01*/
  FK0D-160(); /* Fetch (N2) DFBUY.VFYMDL01*/

  FK0DW00.FB8BUYDT = FBAREC.FB8BUYDT;
  FK0DM110.FK0DM-PRELIM-PUR-MDL = FBAREC.FBAMDNBR;
  FK0DM110.FK0DM-PRELIM-PUR-DT = FBAREC.ZZZSDT;

  FK0D-170(); /* Close (C2) DFBUY.VFYMDL01*/

   /* ------------------------------------------------------------*/
   /* Get the standard model row (if there is any) for the current*/
   /* buy month from DFBUY.VFYMDL01.*/
   /* ------------------------------------------------------------*/

  FK0D-120(); /* Select unique DFBUY.VFYMDL01*/


   /* ------------------------------------------------------------*/
   /* Determine if autoload has run for the current buy month.*/
   /* ------------------------------------------------------------*/

  FK0D-130(); /* Select count DPRODC.VPOHDR01*/


   /* ------------------------------------------------------------*/
   /* Calculate dates used in this application.  The following dates*/
   /* will be calculated:*/
   /* - FK0DW00.FK0DW-SYS-FIRST-FCST-DT - The first forecast date*/
   /* calculated from the current buy date.  Not modifiable.*/
   /* - FK0DW00.FK0DW-SYS-MO-BEFORE-BUY-DT - The date for the month*/
   /* before the current buy date.  Not modifiable.*/
   /* - FK0DW00.FK0DM-FIRST-FCST-DT - First forecast date that will*/
   /* be displayed on the map.  Initially will be equal to*/
   /* FK0DW00.FK0DW-SYS-FIRST-FCST-DT.  Can be modified.*/
   /* - FK0DW00.FK0DM-PRELIM-DT - Prelim date that will be displayed*/
   /* on the map.  Initially will be equal to*/
   /* FB9REC.FB8BUYDT.  Can be modified.*/
   /* ------------------------------------------------------------*/

  FK0D-140(); /* Calculate application dates*/

   /* ------------------------------------------------------------*/
   /* USE LATEST PRELIM MODEL AND BUY INFO FROM DFBUY.VFYMDL01.*/
   /* ------------------------------------------------------------*/
  FK0D-180(); /* Convert Buy date to yy-mm-mm*/
  FK0DM110.FK0DM-PRELIM-PUR-PO-ID = FK0DW00.FK0DW-WORK-BUY-DT;

   /* ------------------------------------------------------------*/
   /* Scan for the most latest prod model information.*/
   /* ------------------------------------------------------------*/

  set FBAREC empty;

  FBAREC.FBDMDTYP = "FT1"; /* FB MODEL TYPE*/
  FBAREC.FBASTDFL = "Y"; /* FB MODEL flag*/

  FK0D-150(); /* Select (S2) DFBUY.VFYMDL01*/
  FK0D-160(); /* Fetch (N2) DFBUY.VFYMDL01*/

  FK0DM110.FK0DM-PROD-LRPS-MDL = FBAREC.FBAMDNBR;
  FK0DM110.FK0DM-PROD-LRPS-DT = FBAREC.ZZZSDT;

  FK0D-180(); /* Convert Buy date to yy-mm-mm*/
  FK0DM110.FK0DM-PROD-LRPS-PO-ID = FK0DW00.FK0DW-WORK-BUY-DT;

  FK0D-170(); /* Close (C2) DFBUY.VFYMDL01*/

   /* ------------------------------------------------------------*/
   /* Reset flags and switches.*/
   /* ------------------------------------------------------------*/

  FK0DW00.FK0DW-REQUEST-DATA-SW = "N";


end // end FK0D-100

// Select DFBUY.VFYMDL01
Function FK0D-120()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FBAREC empty;

   /* Add a month to the buy date to get the forcst date*/

   /* 3/20/96 USE DFBUY.VFYMDL01 BUY DATE INSTEAD OF DFBUY.VFMCTL01.*/

   /* MOVE FB9REC.FB8BUYDT TO FK0DW00.FK0DW-WORK-BUY-DT;*/
  FK0DW00.FK0DW-WORK-BUY-DT = FK0DW00.FB8BUYDT;

  FK0DW00.FK0DW-WORK-BUY-DT-MM = FK0DW00.FK0DW-WORK-BUY-DT-MM + 1;
  if (FK0DW00.FK0DW-WORK-BUY-DT-MM > 12) /* If year wraparound*/

    FK0DW00.FK0DW-WORK-BUY-DT-MM = 1; /* Set to January*/
    FK0DW00.FK0DW-WORK-BUY-DT-CY = FK0DW00.FK0DW-WORK-BUY-DT-CY + 1;
  end

  FBAREC.FB8BUYDT = FK0DW00.FK0DW-WORK-BUY-DT; /* Buy dt*/


  FBAREC.FBDMDTYP = "FL1"; /* FB MODEL TYPE*/

  try
    call "IO3470" ("SA", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      FK0DW00.FK0DM-FCST-AVAIL-SW = "Y"; /* Forecast avail sw*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
        FK0DW00.FK0DM-FCST-AVAIL-SW = "N"; /* Forecast avail sw*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "120 SELECT DFBUY.VFYMDL01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0D-120

// Select count DPRODC.VPOHDR01
Function FK0D-130()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PC3REC empty;

   /* 3/20/96: USE BUY DATE FROM DFBUY.VFYMDL01 INSTEAD OF*/
   /* DFBUY.VFMCTL01.*/

   /* MOVE FB9REC.FB8BUYDT TO FK0DW00.FK0DW-WORK-BUY-DT;*/
  FK0DW00.FK0DW-WORK-BUY-DT = FK0DW00.FB8BUYDT;

  PC3REC.PC3BUYMO = FK0DW-WORK-BUY-DT-CYM; /* Buy month*/
  PC3REC.XGPCD = "02"; /* XGP-GPC-CD*/
  PC3REC.PC3ENTBY = "PC1102"; /* entered by id*/

  set FK0DW04 empty;
  FK0DW04.FK0DW-FUNC = "SD"; /* Function code*/


  try
    call "IO3270" (FK0DW04, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* GOOD RETURN*/

    if (FK0DW04.FK0DW-SUM-1 > 0) /* If autoload rand*/

      FK0DW00.FK0DM-AUTO-CMPLT-SW = "Y"; /* Set switch*/
    else

      FK0DW00.FK0DM-AUTO-CMPLT-SW = "N"; /* Set switch*/
    end

    return;
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "130 SEL DISTINCT DPRODC.VPOHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0D-130

// Calculate application dates
Function FK0D-140()
   /* ------------------------------------------------------------*/
   /* Calculate dates used in this application.  The following dates*/
   /* will be calculated:*/
   /* - FK0DW00.FK0DW-SYS-FIRST-FCST-DT - The first forecast date*/
   /* calculated from the current buy date.  Not modifiable.*/
   /* - FK0DW00.FK0DW-SYS-MO-BEFORE-BUY-DT - The date for the month*/
   /* before the current buy date.  Not modifiable.*/
   /* - FK0DW00.FK0DM-FIRST-FCST-DT - First forecast date that will*/
   /* be displayed on the map.  Initially will be equal to*/
   /* FK0DW00.FK0DW-SYS-FIRST-FCST-DT.  Can be modified.*/
   /* - FK0DW00.FK0DM-PRELIM-DT - Prelim date that will be displayed*/
   /* on the map.  Initially will be equal to*/
   /* FB0KW00.FB8BUYDT.  Can be modified.*/
   /* ------------------------------------------------------------*/



   /* Calculate FK0DW-SYS-FIRST-FCST-DT.*/

   /* 3/20/96: USE BUY DATE FROM DFBUY.VFYMDL01 INSTEAD OF*/
   /* DFBUY.VFMCTL01.*/

                                  /* MOVE FB9REC.FB8BUYDT TO*/
                                   /* FK0DW00.FK0DW-WORK-BUY-DT; /* Move to*/
                                   /* buy date*/
  FK0DW00.FK0DW-WORK-BUY-DT = FK0DW00.FB8BUYDT; /* Move to buy date*/

  if (FK0DW00.FK0DW-WORK-BUY-DT-MM == 12) /* If December*/

    FK0DW00.FK0DW-WORK-BUY-DT-MM = 1; /* Roll over to January*/
    FK0DW00.FK0DW-WORK-BUY-DT-CY = FK0DW00.FK0DW-WORK-BUY-DT-CY + 1;
  else

    FK0DW00.FK0DW-WORK-BUY-DT-MM = FK0DW00.FK0DW-WORK-BUY-DT-MM + 1;
  end

  FK0DW00.FK0DW-SYS-FIRST-FCST-DT = FK0DW00.FK0DW-WORK-BUY-DT;



   /* Calculate FK0DM-FIRST-FCST-DT.*/


  FK0DW00.FK0DW-FIRST-FCST-YY = FK0DW00.FK0DW-WORK-BUY-DT-YY;
  FK0DW00.FK0DW-FIRST-FCST-MM = FK0DW00.FK0DW-WORK-BUY-DT-MM;
  FK0DM110.FK0DM-FIRST-FCST-DT = FK0DW00.FK0DM-FIRST-FCST-DT;



   /* Calculate FK0DW-SYS-MO-BEFORE-BUY-DT.*/

   /* 3/20/96: USE BUY DATE FROM DFBUY.VFYMDL01 INSTEAD OF*/
   /* DFBUY.VFMCTL01.*/

                                  /* MOVE FB9REC.FB8BUYDT TO*/
                                   /* FK0DW00.FK0DW-WORK-BUY-DT; /* Move to*/
                                   /* buy date*/
  FK0DW00.FK0DW-WORK-BUY-DT = FK0DW00.FB8BUYDT; /* Move to buy date*/

  if (FK0DW00.FK0DW-WORK-BUY-DT-MM == 1) /* If January*/

    FK0DW00.FK0DW-WORK-BUY-DT-MM = 12; /* Roll over to December*/
    FK0DW00.FK0DW-WORK-BUY-DT-CY = FK0DW00.FK0DW-WORK-BUY-DT-CY - 1;
  else

    FK0DW00.FK0DW-WORK-BUY-DT-MM = FK0DW00.FK0DW-WORK-BUY-DT-MM - 1;
  end

  FK0DW00.FK0DW-SYS-MO-BEFORE-BUY-DT = FK0DW00.FK0DW-WORK-BUY-DT;



   /* Calculate FK0DM-PRELIM-DT.*/

   /* 3/20/96: USE BUY DATE FROM DFBUY.VFYMDL01 INSTEAD OF*/
   /* DFBUY.VFMCTL01.*/

                                  /* MOVE FB9REC.FB8BUYDT TO*/
                                   /* FK0DW00.FK0DW-WORK-BUY-DT; /* Move to*/
                                   /* buy date*/
  FK0DW00.FK0DW-WORK-BUY-DT = FK0DW00.FB8BUYDT; /* Move to buy date*/
  FK0DW00.FK0DW-PRELIM-YY = FK0DW00.FK0DW-WORK-BUY-DT-YY;
  FK0DW00.FK0DW-PRELIM-MM = FK0DW00.FK0DW-WORK-BUY-DT-MM;
  FK0DM110.FK0DM-PRELIM-DT = FK0DW00.FK0DM-PRELIM-DT;


end // end FK0D-140

// Select set (S2) DFBUY.VFYMDL01
Function FK0D-150()
   /* ------------------------------------------------------------*/
   /* Select the requested sets from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3470" ("S2", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "150 SELECT DFBUY.VFYMDL01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0D-150

// Fetch (N2) DFBUY.VFYMDL01
Function FK0D-160()
   /* ------------------------------------------------------------*/
   /* Select the requested sets from the table.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3470" ("N2", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "160"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "160 SELECT DFBUY.VFYMDL01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0D-160

// Close set (C2) DFBUY.VFYMDL01
Function FK0D-170()
   /* ------------------------------------------------------------*/
   /* Close the selected set of records from the table*/
   /* ------------------------------------------------------------*/


  try
    call "IO3470" ("C2", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "170"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "170 SELECT DFBUY.VFYMDL01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK0D-170

Function FK0D-180()
   /* ------------------------------------------------------------*/
   /* Rearrange the Buy date into the format of YY-MM-MM where the*/
   /* first MM is the month to begin production, and the second MM*/
   /* is the month where the product will be delivered (Buy Month).*/
   /* ------------------------------------------------------------*/

  FK0DW00.FK0DW-WORK-BUY-DT = FBAREC.FB8BUYDT; /* Get Buy Date*/
  FK0DW00.FK0DW-WORK-BUY-DT-DD = FK0DW00.FK0DW-WORK-BUY-DT-MM;

  if (FK0DW00.FK0DW-WORK-BUY-DT-MM == 02) /* If February*/
    FK0DW00.FK0DW-WORK-BUY-DT-MM = 12; /* Roll back to December*/
    FK0DW00.FK0DW-WORK-BUY-DT-CY = FK0DW00.FK0DW-WORK-BUY-DT-CY - 1;
  else
    if (FK0DW00.FK0DW-WORK-BUY-DT-MM == 01) /* If January*/
      FK0DW00.FK0DW-WORK-BUY-DT-MM = 11; /* Roll back to November*/
      FK0DW00.FK0DW-WORK-BUY-DT-CY = FK0DW00.FK0DW-WORK-BUY-DT-CY - 1;
    else
      FK0DW00.FK0DW-WORK-BUY-DT-MM = FK0DW00.FK0DW-WORK-BUY-DT-MM - 2;
    end
  end


end // end FK0D-180

// Format and converse map
Function FK0D-200()

  if (converseVar.validationMsgNum != 0) /* ERROR FOUND*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FK0DM110.FK0DM-FCST-AVAIL-SW = FK0DW00.FK0DM-FCST-AVAIL-SW;
  FK0DM110.FK0DM-AUTO-CMPLT-SW = FK0DW00.FK0DM-AUTO-CMPLT-SW;

  FK0DM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FK0DM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0DM110.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0DM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FK0DM110.XXXMODID = FKWREC.XXX-MOD-ID; /* Module identification*/

    set FK0DM110 alarm; /* Indicate sound alarm*/

  else

     /* ESTABLISH CURSOR POSITION.*/

    if (FK0DM110.FBAMDNBR <= 0) /* IF LRPS NUMBER NOT ENTERED*/
      set FK0DM110.FBAMDNBR cursor; /* SET CURSOR LRPS NUMBER*/
    else
      set FK0DM110.FK0DM-SELECTION cursor; /* SET CRS SELECTION*/
    end
  end

  converse FK0DM110 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FK0DM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0DM110.CAITEM; /* Application data*/


end // end FK0D-200

// Check attention identifier
Function FK0D-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = "FK0D"; /* to applicaiton*/
    COMMAREA.CAITEM = "    "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FK0DM110.CATOAP cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty; /* PASS RECORD IS INITED*/
      FKWREC.FBAMDNBR = FK0DM110.FBAMDNBR; /* LRPS NUMBER IS PASSD*/
      COMMAREA.CATOAP = FK0DM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0DM110.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FK0DM110.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* EXIT requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* MTRL requested*/
   || converseVar.eventKey is pf13 /* MSTY requested*/
   || converseVar.eventKey is pf14 /* CONT requested*/
   || converseVar.eventKey is pf15 /* CLST requested*/
   || converseVar.eventKey is pf16) /* STYM requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0DM110"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0A"; /* TO application*/
      COMMAREA.CAITEM = FK0DM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK0DM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0E"; /* TO application*/
      COMMAREA.CAITEM = FK0DM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0F"; /* TO application*/
      COMMAREA.CAITEM = FK0DM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0G"; /* TO application*/
      COMMAREA.CAITEM = FK0DM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FK0H"; /* TO application*/
      COMMAREA.CAITEM = FK0DM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0M"; /* TO application*/
      COMMAREA.CAITEM = FK0DM110.CAITEM; /* item*/
    end

    set FKWREC empty; /* PASS RECORD IS INITED*/
    FKWREC.FBAMDNBR = FK0DM110.FBAMDNBR; /* LRPS NUMBER IS PASSD*/

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FKWREC.XXX-MOD-ID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FK0D-300

// Reset highlighted fields
Function FK0D-400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set FK0DM110.FBAMDNBR initialAttributes; /* Initialize LRPS NUMBER*/
  set FK0DM110.FK0DM-FIRST-FCST-DT initialAttributes; /* First forecast date*/
  set FK0DM110.FK0DM-PRELIM-DT initialAttributes; /* Prelim date*/
  set FK0DM110.FK0DM-SELECTION initialAttributes; /* Reset select FIELD*/

  set FK0DM110.CATOAP initialAttributes; /* TO application*/
  set FK0DM110.CAITEM initialAttributes; /* Application data*/


end // end FK0D-400

// Verify data that was entered
Function FK0D-500()
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

  if (FK0DM110.CAITEM > " ") /* IF ITEM ENTERED*/
    set FK0DM110.CAITEM cursor, bold; /* HILITE ITEM*/
    FKWREC.XXX-MOD-ID = "500"; /* MODULE ID.*/
    converseLib.validationFailed(7); /* USE ONLY WITH FASTPATH*/
  end


   /* ------------------------------------------------------------*/
   /* Reformat first forecast date entered on map to ccyymmdd format.*/
   /* This will be used throughout the verify process.*/
   /* ------------------------------------------------------------*/

  FK0DW00.FK0DM-FIRST-FCST-DT = FK0DM110.FK0DM-FIRST-FCST-DT;
  FK0DW00.FK0DW-WORK-BUY-DT-YY = FK0DW00.FK0DW-FIRST-FCST-YY;
  FK0DW00.FK0DW-WORK-BUY-DT-MM = FK0DW00.FK0DW-FIRST-FCST-MM;
  FK0DW00.FK0DW-WORK-BUY-DT-DD = 01;
  if (FK0DW00.FK0DW-WORK-BUY-DT-YY <= 80)
    FK0DW00.FK0DW-WORK-BUY-DT-CC = 20; /* Set century to 20*/
  else
    FK0DW00.FK0DW-WORK-BUY-DT-CC = 19; /* Set century to 19*/
  end

  FK0DW00.FK0DW-FIRST-FCST-CCYYMMDD = FK0DW00.FK0DW-WORK-BUY-DT;


   /* ------------------------------------------------------------*/
   /* Reformat prelim date to ccyymmdd format.*/
   /* ------------------------------------------------------------*/

  FK0DW00.FK0DM-PRELIM-DT = FK0DM110.FK0DM-PRELIM-DT;
  FK0DW00.FK0DW-WORK-BUY-DT-YY = FK0DW00.FK0DW-PRELIM-YY;
  FK0DW00.FK0DW-WORK-BUY-DT-MM = FK0DW00.FK0DW-PRELIM-MM;
  FK0DW00.FK0DW-WORK-BUY-DT-DD = 01;
  if (FK0DW00.FK0DW-WORK-BUY-DT-YY <= 80)
    FK0DW00.FK0DW-WORK-BUY-DT-CC = 20; /* Set century to 20*/
  else
    FK0DW00.FK0DW-WORK-BUY-DT-CC = 19; /* Set century to 19*/
  end

  FK0DW00.FK0DW-PRELIM-CCYYMMDD = FK0DW00.FK0DW-WORK-BUY-DT;


   /* ------------------------------------------------------------*/
   /* Verify selection 7 is not entered.  This edit*/
   /* will need to be removed when option 7 is added.*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "7")
    set FK0DM110.FK0DM-SELECTION cursor, bold; /* HILITE SELECTION*/
    FKWREC.XXX-MOD-ID = "500"; /* MODULE ID.*/
    converseLib.validationFailed(63); /* OPTION NOT AVAILABLE*/
  end


   /* ------------------------------------------------------------*/
   /* Verify selection code.*/
   /* 07/09/98: DEINSTALL MAPPER DOWNLOAD OPTIONS 5 AND 6*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "1"
   || FK0DM110.FK0DM-SELECTION == "2"
   || FK0DM110.FK0DM-SELECTION == "3"
   || FK0DM110.FK0DM-SELECTION == "4")

    /* NEXT SENTENCE*/
  else

    set FK0DM110.FK0DM-SELECTION cursor, bold; /* HILITE SELECTION*/
    FKWREC.XXX-MOD-ID = "500"; /* MODULE ID.*/
    converseLib.validationFailed(8); /* REQUIRED FIELD MISING OR INVALID*/
  end


   /* ------------------------------------------------------------*/
   /* If selected, verify prelim date.*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "6") /* If Air bag download requested*/
    FK0D-570(); /* Verify prelim exists for date*/
    FK0D-560(); /* Verify date*/
  end


   /* ------------------------------------------------------------*/
   /* VALIDATE LRPS NUMBER ----MONTH AND MODEL.*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION != "6") /* If Air bag download NOT requested*/
    FK0DW-FBAMDNBR = FK0DM110.FBAMDNBR; /* MOVE LRPS TO WORK AREA*/
    if (FK0DW-FBAMDNBR-MONTH >= 01 /* VALIDATE LRPS MONTH*/
     && FK0DW-FBAMDNBR-MONTH <= 12)

      /* NEXT SENTENCE*/

    else

      set FK0DM110.FBAMDNBR cursor, bold; /* HILITE LRPS NUMBER*/
      FKWREC.XXX-MOD-ID = "500"; /* MODULE ID.*/
      converseLib.validationFailed(8); /* REQUIRED FIELD MISSING OR INVALID*/
    end


    if (FK0DW-FBAMDNBR-MODEL >= .01 /* VALIDATE LRPS MODEL*/
     && FK0DW-FBAMDNBR-MODEL <= .09)

      /* NEXT SENTENCE*/
    else

      set FK0DM110.FBAMDNBR cursor, bold; /* HILITE LRPS NUMBER*/
      FKWREC.XXX-MOD-ID = "500"; /* MODULE ID.*/
      converseLib.validationFailed(8); /* REQUIRED FIELD MISSING OR INVALID*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Verify the first forecast month.*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION != "6") /* If Air bag download not rqstd*/

    FK0D-520(); /* Verify first forecast month*/

    if (converseVar.validationMsgNum != 0)
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If SELECTION IS 1 OR 2 VERIFY LRPS # DOES NOT ALREADY EXIST*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "1"
   || FK0DM110.FK0DM-SELECTION == "2")

    FK0D-510(); /* VERIFY LRPS DOES NOT ALREADY EXIST*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If SELECTION IS 1 VERIFY PRODUCTION FORECASTS EXIST ON*/
   /* FOOTWEAR BUY QUANTITY TO BUY SUMMARY TABLE, AND THAT THE FIRST*/
   /* FORECAST MONTH IF FOR THE CURRENT BUY DATE only.*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "1")

    if (FK0DW00.FK0DW-FIRST-FCST-CCYYMMDD == 
    FK0DW00.FK0DW-SYS-FIRST-FCST-DT) /* If for current first fcst mo*/

      FK0D-530(); /* Verify product forecast exists*/
    else

      set FK0DM110.FBAMDNBR cursor, bold; /* Highlight*/
      set FK0DM110.FK0DM-FIRST-FCST-DT bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "500"; /* MODULE ID.*/
      converseLib.validationFailed(47); /* LRPS nbr must be for current forecast*/
                                   /* month*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If SELECTION IS 2 VERIFY STANDARD LRPS EXISTS FOR THE*/
   /* ENTERED FORECAST MONTH.*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "2")

    FK0D-540(); /* VERIFY STD LRPS EXISTS*/
  end


   /* ------------------------------------------------------------*/
   /* If SELECTION IS 3, 4, 5, 7 VERIFY LRPS NUMBER EXISTS.*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "3"
   || FK0DM110.FK0DM-SELECTION == "4"
   || FK0DM110.FK0DM-SELECTION == "5"
   || FK0DM110.FK0DM-SELECTION == "7")
    FK0D-550(); /* SEE COMMENT ABOVE*/
  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* If SELECTION IS 1 OR 2 VERIFY JOBS NOT ALREADY RUNNING*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "1"
   || FK0DM110.FK0DM-SELECTION == "2"
   || FK0DM110.FK0DM-SELECTION == "3"
   || FK0DM110.FK0DM-SELECTION == "4")
    FK0DW-PGM-NBR = "FK600D"; /* CHECK LRPS PROD CREATE JOB*/
    FK0DS-S001(); /* CHECK LRPS PROD CREATE JOB*/
    FK0DW-PGM-NBR = "FK601D"; /* CHECK LRPS FCTY CREATE JOB*/
    FK0DS-S001(); /* CHECK LRPS FCTY CREATE JOB*/
    FK0DW-PGM-NBR = "FK602D"; /* CHECK LRPS PRELIMS ADD JOB*/
    FK0DS-S001(); /* CHECK LRPS PRELIMS ADD JOB*/
    FK0DW-PGM-NBR = "FK603D"; /* CHECK LRPS ACTUALS ADD JOB*/
    FK0DS-S001(); /* CHECK LRPS ACTUALS ADD JOB*/
  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FK0D-500

// CHECK IF LRPS ALREADY EXISTS
Function FK0D-510()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VLRPSH01 empty;

  VLRPSH01.FBAMDNBR = FK0DM110.FBAMDNBR; /* LRPS nbr*/

  try
    call "IO6250" ("S ", SQLCA, VLRPSH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* LRPS ALREADY EXISTS*/

      converseLib.validationFailed(42); /* SEE ABOVE*/
      FKWREC.XXX-MOD-ID = "510"; /* Module identification*/
      set FK0DM110.FBAMDNBR cursor, bold; /* Highlight*/
      exit stack; /* EXIT TO DISPLAY ERROR*/
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* LRPS NOT FOUND*/
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "510 CHECK IF LRPS ALREADY EXIST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPSH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRPSH01.VLRPSH01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0D-510

// Verify first forecast month
Function FK0D-520()
   /* -------------------------------------------------------------------*/
   /* Verify entered first forecast month is no more than one month old.*/
   /* This edit not valid for any downloads (options 5,6,7).*/
   /* -------------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "5" /* Mapper download requested*/
   || FK0DM110.FK0DM-SELECTION == "6" /* Mapper air bag download requested*/
   || FK0DM110.FK0DM-SELECTION == "7") /* PC download requested*/

     /* next sentence*/
  else

    /* 3/20/96: USE BUY DATE FROM DFBUY.VFYMDL01 INSTEAD OF*/
    /* DFBUY.VFMCTL01.*/

    /* IF FK0DW00.FK0DW-FIRST-FCST-CCYYMMDD LT FB9REC.FB8BUYDT;*/
    if (FK0DW00.FK0DW-FIRST-FCST-CCYYMMDD < FK0DW00.FB8BUYDT)

      set FK0DM110.FK0DM-FIRST-FCST-DT cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "520"; /* MODULE ID.*/
      converseLib.validationFailed(112); /* 1st fcst month must be within 1 mo of buy dt*/
    end
  end


   /* -------------------------------------------------------------------*/
   /* Verify entered first forecast month is not greater than the*/
   /* current system first forecast month.*/
   /* -------------------------------------------------------------------*/

  if (FK0DW00.FK0DW-FIRST-FCST-CCYYMMDD > FK0DW00.FK0DW-SYS-FIRST-FCST-DT)

    set FK0DM110.FK0DM-FIRST-FCST-DT cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "520"; /* MODULE ID.*/
    converseLib.validationFailed(114); /* Date entered is > current first fcst date*/
  end


   /* -------------------------------------------------------------------*/
   /* Verify lrps nbr and first forecast month are for the same month.*/
   /* -------------------------------------------------------------------*/

  FK0DW00.FK0DW-FBAMDNBR = FK0DM110.FBAMDNBR;
  FK0DW00.FK0DM-FIRST-FCST-DT = FK0DM110.FK0DM-FIRST-FCST-DT;

  if (FK0DW00.FK0DW-FBAMDNBR-MONTH != FK0DW00.FK0DW-FIRST-FCST-MM)

    set FK0DM110.FBAMDNBR cursor, bold; /* Highlight*/
    set FK0DM110.FK0DM-FIRST-FCST-DT bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "520"; /* MODULE ID.*/
    converseLib.validationFailed(111); /* LRPS # must be for the first forecast month*/
  end


end // end FK0D-520

// VERIFY PROD FCST EXIST ON FB Q
Function FK0D-530()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FBKREC empty;

  FBKREC.FB8RCTYP = "L"; /* MOVE LRPS TO REC TYPE INDICATOR*/
  FK0DW05.FK0DW-FUNC = "SC"; /* MOVE SELECT COUNT TO FUNCTION*/
  FK0DW05.FK0DW-SUM-1 = 0; /* ZERO OUT SUMMARY COUNT*/

  try
    call "IO4740" (FK0DW05, SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      if (FK0DW05.FK0DW-SUM-1 == 0) /* AND NO FORECAST RECS.*/
        converseLib.validationFailed(51); /* NO PROD FCST FOR FCST MONTH*/
        FKWREC.XXX-MOD-ID = "530"; /* Module identification*/
        set FK0DM110.FBAMDNBR cursor, bold; /* HighlighT*/
        exit stack; /* Return to previous process*/
      else
        return; /* GOODCOUNT RETURN TO PREV PROCESS*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "530 VERIFY PROD FCST EXISTS    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.FBKGROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0D-530

// Select DFBUY.VFYMDL01 (FT1)
Function FK0D-540()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FBAREC empty;

  FBAREC.FB8BUYDT = FK0DW00.FK0DW-WORK-BUY-DT; /* Buy dt*/
  FBAREC.FB8BUYDT = FK0DW00.FK0DW-FIRST-FCST-CCYYMMDD; /* Buy dt*/


  FBAREC.FBDMDTYP = "FT1"; /* FB MODEL TYPE*/

  try
    call "IO3470" ("SA", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
        set FK0DM110.FBAMDNBR cursor, bold; /* Highlight*/
        set FK0DM110.FK0DM-FIRST-FCST-DT bold; /* Highlight*/
        converseLib.validationFailed(113); /* No std lrps exists for fcst month*/
        FKWREC.XXX-MOD-ID = "540"; /* Module identification*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "540"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "540 SELECT DFBUY.VFYMDL01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0D-540

// VERIFY LRPS NUMBER EXISTS
Function FK0D-550()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VLRPSH01 empty;

  VLRPSH01.FBAMDNBR = FK0DM110.FBAMDNBR; /* LRPS nbr*/

  try
    call "IO6250" ("S ", SQLCA, VLRPSH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* LRPS DOES NOT EXIST*/
      converseLib.validationFailed(46); /* SEE ABOVE*/
      FKWREC.XXX-MOD-ID = "550"; /* Module identification*/
      set FK0DM110.FBAMDNBR cursor, bold; /* Highlight*/
      exit stack; /* EXIT TO DISPLAY MAP*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* LRPS FOUND*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "550"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "550 VERIFY LRPS NUMBER EXISTS  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPSH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRPSH01.VLRPSH01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0D-550

// Verify prelim date
Function FK0D-560()
   /* -------------------------------------------------------------------*/
   /* Verify entered prelim date is not greater than the current prelim*/
   /* date.*/
   /* -------------------------------------------------------------------*/

   /* 5/20/96: USE BUY DATE FROM DFBUY.VFYMDL01 INSTEAD OF*/
   /* DFBUY.VFMCTL01.*/

   /* IF FK0DW00.FK0DW-PRELIM-CCYYMMDD GT FB9REC.FB8BUYDT;*/
  if (FK0DW00.FK0DW-PRELIM-CCYYMMDD > FK0DW00.FB8BUYDT)

    set FK0DM110.FK0DM-PRELIM-DT cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "520"; /* MODULE ID.*/
    converseLib.validationFailed(144); /* Date entered is > current prelim date*/
  end


   /* ------------------------------------------------------------*/
   /* Determine if date is valid format.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize ta2rec*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* Date option*/
  TA2REC.TA2GRTYP = "G"; /* Date format*/
  TA2REC.TA2GRGGN = FK0DW00.FK0DW-PRELIM-CCYYMMDD;

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation routine*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA2REC.TA2RTNCD != 0)
      converseLib.validationFailed(84); /* Date is missing or invalid*/
      FKWREC.XXX-MOD-ID = "560"; /* Module identification*/
      set FK0DM110.FK0DM-PRELIM-DT cursor, bold; /* Highlight*/
    end
  end


end // end FK0D-560

// Select DFBUY.VFYMDL01 (FL1)
Function FK0D-570()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FBAREC empty;

  FBAREC.FB8BUYDT = FK0DW00.FK0DW-PRELIM-CCYYMMDD; /* Buy dt*/
  FBAREC.FBDMDTYP = "FL1"; /* FB MODEL TYPE*/

  try
    call "IO3470" ("SA", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
        set FK0DM110.FK0DM-PRELIM-DT cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* No prelims exist for entered month*/
        FKWREC.XXX-MOD-ID = "570"; /* Module identification*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "570"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "570 SELECT DFBUY.VFYMDL01 (FL1)";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M110"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0D-570

// Process valid input request
Function FK0D-600()

   /* ----------------------------------------------------------*/
   /* Determine which environment the program is executing in:*/
   /* Development or Production*/
   /* ----------------------------------------------------------*/

  FK0D-610(); /* Determine Region*/

  FK0D-620(); /* Submit production report*/


end // end FK0D-600

// get region information
Function FK0D-610()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ASSIGN ";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

     /* next sentence*/

  else

    FKWREC.XXX-MOD-ID = "610"; /* module identification*/
    converseLib.validationFailed(10); /* System error*/
    exit stack;
  end


end // end FK0D-610

// Process prod JCL
Function FK0D-620()

   /* ------------------------------------------------------------*/
   /* LOAD PARAMETER INFO.*/
   /* ------------------------------------------------------------*/

  FK0DW01.FK0DW-LRPS-MDN = FK0DM110.FBAMDNBR; /* LOAD LRPS NUMBER*/
  FK0DW01.FK0DW-FIRST-FCST-CCYYMMDD = FK0DW00.FK0DW-FIRST-FCST-CCYYMMDD; /* FIRST FCST DATE*/
  FK0DW02.FK0DW-PRELIM-CCYYMMDD = FK0DW00.FK0DW-PRELIM-CCYYMMDD; /* PRELIM DATE*/

   /* ------------------------------------------------------------*/
   /* Determine which table to use and pass rows to ta6rec.*/
   /* ------------------------------------------------------------*/


  if (FK0DM110.FK0DM-SELECTION == "1"
   || FK0DM110.FK0DM-SELECTION == "2")
    FK0D-621();
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
    if (FK0DM110.FK0DM-SELECTION == "1")
      FK0DW-PGM-NBR = "FK600D";
    else
      FK0DW-PGM-NBR = "FK601D";
    end
    FK0DM110.FK0DM-SELECTION = "*";
    XX0XS01(); /* GET CURRENT DATE AND TIME*/
    FK0DS-S001(); /* SELECT VFKPGM01 REC TO UPDATE*/
    FK0DS-S002(); /* UPDATE VFKPGM01 REC*/
  end
  if (FK0DM110.FK0DM-SELECTION == "3")
    FK0D-622();
    FK0DM110.FK0DM-SELECTION = "*";
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
    FK0DW-PGM-NBR = "FK602D";
    FK0DM110.FK0DM-SELECTION = "*";
    XX0XS01(); /* GET CURRENT DATE AND TIME*/
    FK0DS-S001(); /* SELECT VFKPGM01 REC TO UPDATE*/
    FK0DS-S002(); /* UPDATE VFKPGM01 REC*/
  end
  if (FK0DM110.FK0DM-SELECTION == "4")
    FK0D-623();
    FK0DM110.FK0DM-SELECTION = "*";
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
    FK0DW-PGM-NBR = "FK603D";
    FK0DM110.FK0DM-SELECTION = "*";
    XX0XS01(); /* GET CURRENT DATE AND TIME*/
    FK0DS-S001(); /* SELECT VFKPGM01 REC TO UPDATE*/
    FK0DS-S002(); /* UPDATE VFKPGM01 REC*/
  end
  if (FK0DM110.FK0DM-SELECTION == "5") /* download to mapper*/
    FK0D-624();
    FK0DM110.FK0DM-SELECTION = "*";
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end
  if (FK0DM110.FK0DM-SELECTION == "6") /* download air bag prelim to mapper*/
    FK0D-625();
    FK0DM110.FK0DM-SELECTION = "*";
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end
  if (FK0DM110.FK0DM-SELECTION == "7")
    FK0D-626();
    FK0DM110.FK0DM-SELECTION = "*";
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end


end // end FK0D-620

// Format JCL for FK6000
Function FK0D-621()

   /* ------------------------------------------------------------*/
   /* DETERMINE OVERIDES.*/
   /* ------------------------------------------------------------*/

  if (FK0DM110.FK0DM-SELECTION == "1") /* ADD PROD FCST TO LRPS*/
    FK0DW01.FK0DW-CND[1] = "GT"; /* EXECUTE FK6001*/
    FK0DW01.FK0DW-CND[2] = "LE"; /* DON'T EXECUTE FK6011*/
  else
    FK0DW01.FK0DW-CND[1] = "LE"; /* DON'T EXECUTE FK6001*/
    FK0DW01.FK0DW-CND[2] = "GT"; /* EXECUTE FK6011*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0DW00.FK0DW-IXT = 1; /* Initialize table index*/
  FK0DW00.FK0DW-IX1 = 1; /* Initialize CONDITION INDEX*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Check to see if the destination needs to be obtained when no*/
   /* reports have been selected.*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0DW00.FK0DW-IXT > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0DT01.TARTYPE[FK0DW-IXT] == "C") /* IF CONDITION STATEMENT*/

        FK0DW-JCC[FK0DW-IX1] = FK0DT01.TARJCL[FK0DW-IXT];
        FK0DW-CLG[FK0DW-IX1] = FK0DW01.FK0DW-CND[FK0DW-IX1];
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCC[FK0DW-IX1];
        TA6REC.TARTYPE[TA6INDEX] = "C";

        FK0DW-IX1 = FK0DW00.FK0DW-IX1 + 1; /* INCREMENT CONDITION INDEX*/
      else
        if (FK0DT01.TARTYPE[FK0DW-IXT] == "P") /* IF PARAMETER STATEMENT*/
          TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
          TA6REC.TARTYPE[TA6INDEX] = "P";
        else
          TA6REC.TARJCL[TA6INDEX] = FK0DT01.TARJCL[FK0DW-IXT];
          TA6REC.TARTYPE[TA6INDEX] = FK0DT01.TARTYPE[FK0DW-IXT];
        end
      end

         /* --------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* --------------------------------------------------*/

      if (FK0DT01.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    else

      if (FK0DT51.TARTYPE[FK0DW-IXT] == "C") /* IF CONDITION STATEMENT*/

        FK0DW-JCC[FK0DW-IX1] = FK0DT51.TARJCL[FK0DW-IXT];
        FK0DW-CLG[FK0DW-IX1] = FK0DW01.FK0DW-CND[FK0DW-IX1];
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCC[FK0DW-IX1];
        TA6REC.TARTYPE[TA6INDEX] = "C";

        FK0DW-IX1 = FK0DW00.FK0DW-IX1 + 1; /* INCREMENT CONDITION INDEX*/
      else
        if (FK0DT51.TARTYPE[FK0DW-IXT] == "P") /* IF PARAMETER STATEMENT*/
          TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
          TA6REC.TARTYPE[TA6INDEX] = "P";
        else
          TA6REC.TARJCL[TA6INDEX] = FK0DT51.TARJCL[FK0DW-IXT];
          TA6REC.TARTYPE[TA6INDEX] = FK0DT51.TARTYPE[FK0DW-IXT];
        end
      end

         /* -----------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -----------------------------------------------------*/

      if (FK0DT51.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FKWREC.XXXMSGNO = 27; /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    FKWREC.XXXMSGNO = 35; /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "621"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "621"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0D-621

// Format JCL for FK6020
Function FK0D-622()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/


  FK0DW00.FK0DW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0DW00.FK0DW-IXT > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0DT02.TARTYPE[FK0DW-IXT] == "P") /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";
      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT02.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT02.TARTYPE[FK0DW-IXT];
      end

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT02.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    else

      if (FK0DT52.TARTYPE[FK0DW-IXT] == "P") /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";
      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT52.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT52.TARTYPE[FK0DW-IXT];
      end

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT52.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

  end

  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/


  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FKWREC.XXXMSGNO = 27; /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    FKWREC.XXXMSGNO = 35; /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "622"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "622"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0D-622

// Format JCL for FK6030
Function FK0D-623()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/


  FK0DW00.FK0DW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0DW00.FK0DW-IXT > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0DT03.TARTYPE[FK0DW-IXT] == "P") /* PARM CARD*/
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";

      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT03.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT03.TARTYPE[FK0DW-IXT];
      end

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT03.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    else

      if (FK0DT53.TARTYPE[FK0DW-IXT] == "P") /* PARM CARD*/
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";

      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT53.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT53.TARTYPE[FK0DW-IXT];
      end

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT53.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/


  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "623"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "623"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0D-623

// Format JCL for FK1301
Function FK0D-624()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/


  FK0DW00.FK0DW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0DW00.FK0DW-IXT > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0DT05.TARTYPE[FK0DW-IXT] == "P") /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";

      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT05.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT05.TARTYPE[FK0DW-IXT];
      end /**/

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT05.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    else

      if (FK0DT55.TARTYPE[FK0DW-IXT] == "P") /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";

      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT55.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT55.TARTYPE[FK0DW-IXT];
      end /**/

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT55.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

  end

  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/


  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "624"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "624"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0D-624

// Format JCL for FK1321
Function FK0D-625()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/


  FK0DW00.FK0DW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0DW00.FK0DW-IXT > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0DT06.TARTYPE[FK0DW-IXT] == "P") /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DW02.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";

      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT06.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT06.TARTYPE[FK0DW-IXT];
      end

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT06.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    else

      if (FK0DT56.TARTYPE[FK0DW-IXT] == "P")
        TA6REC.TARJCL[TA6INDEX] = FK0DW02.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";

      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT56.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT56.TARTYPE[FK0DW-IXT];
      end

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT56.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

  end

  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/


  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "625"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "625"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0D-625

// Format JCL for FK6090
Function FK0D-626()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/


  FK0DW00.FK0DW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0DW00.FK0DW-IXT > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0DT04.TARTYPE[FK0DW-IXT] == "P") /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";

      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT04.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT04.TARTYPE[FK0DW-IXT];
      end /**/

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT04.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    else

      if (FK0DT54.TARTYPE[FK0DW-IXT] == "P") /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DW01.FK0DW-JCP;
        TA6REC.TARTYPE[TA6INDEX] = "P";

      else /**/
        TA6REC.TARJCL[TA6INDEX] = FK0DT54.TARJCL[FK0DW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0DT54.TARTYPE[FK0DW-IXT];
      end /**/

         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/

      if (FK0DT54.TARJCL[FK0DW-IXT] == "/*EOF") /* End of table*/

        FK0DW00.FK0DW-IXT = 0; /* Indicate end of table*/

      else

        FK0DW00.FK0DW-IXT = FK0DW00.FK0DW-IXT + 1; /* Incr tbl idx*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

  end

  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/


  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "626"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "626"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0D-626

// Read VFKPGM01 USING IO6310
Function FK0DS-S001()
   /* ------------------------------------------------------------*/
   /* SELECT THE VFKPGM01 RECORD TO CHECK FOR PROGRAM CONTENTION*/
   /* ------------------------------------------------------------*/

  set VFKPGM01 empty; /* CLEAR OUT RECORD AREA*/

  VFKPGM01.XXXPGMNB = FK0DW-PGM-NBR; /* PROGRAM NUMBER*/

  try
    call "IO6310" ("S ", SQLCA, VFKPGM01) {isNoRefresh = yes, isExternal = yes};
  end /* SELECT ROW*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    if (FK-MDL-PROC-FL == "Y") /* PROGRAM IS RUNNING*/
      if (FK0DW-PGM-NBR == "FK600D")
        converseLib.validationFailed(78); /* 'PROD LRPS CREATE RUNNING..TRY LATER'*/
      else
        if (FK0DW-PGM-NBR == "FK601D")
          converseLib.validationFailed(79); /* 'FCTY LRPS CREATE RUNNING..TRY LATER'*/
        else
          if (FK0DW-PGM-NBR == "FK602D")
            converseLib.validationFailed(104); /* 'ADD PRELIMS RUNNING'*/
          else
            if (FK0DW-PGM-NBR == "FK603D")
              converseLib.validationFailed(105); /* 'ADD ACTUALS RUNNING'*/
            end
          end
        end
      end
      FKWREC.XXX-MOD-ID = "S001"; /* MODULE IDENTIFICATION*/
      set FK0DM110.FK0DM-SELECTION cursor, bold; /* CURSOR*/
      exit stack; /* EXIT TO DISPLAY ERROR*/
    else
      return; /* NO CONTENTION--RETURN TO PREV PROC*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = SQLCA.SQLCAREC; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "S001"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE FROM VFKPGM01  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VFKPGM01"; /* DATA BASE TABLE VIEW*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  TA1REC.TA1TBLKE = FK0DW-PGM-NBR; /* KEY*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0DS-S001

// UPDATE VFKPGM01 USING IO6310
Function FK0DS-S002()
   /* ------------------------------------------------------------*/
   /* UPDATE THE VFKPGM01 RECORD TO PREVENT PROGRAM CONTENTION*/
   /* ------------------------------------------------------------*/

  VFKPGM01.XXXPGMNB = FK0DW-PGM-NBR; /* PROGRAM NUMBER*/
  VFKPGM01.FK-MDL-PROC-FL = "Y"; /* PGM RUNNING FLAG*/
  VFKPGM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VFKPGM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VFKPGM01.XXXLSTDT = XX0XW01.XX0XWDAT;
  VFKPGM01.XXXLSTTM = XX0XW01.XX0XWTIM;

  try
    call "IO6310" ("U ", SQLCA, VFKPGM01) {isNoRefresh = yes, isExternal = yes};
  end /* SELECT ROW*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* UPDATE SUCCESSFUL RETURN*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = SQLCA.SQLCAREC; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "S002"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE VFKPGM01 - PGM XQTING ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VFKPGM01"; /* DATA BASE TABLE VIEW*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  TA1REC.TA1TBLKE = FK0DW-PGM-NBR; /* KEY*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK0DS-S002

//*** RECORD=FK0DW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0DW00 type basicRecord
  10 FK0DW-SWF FK0DW-SWF ; 
  10 FK0DM-FCST-AVAIL-SW FK0DM-FCST-AVAIL-SW ; 
  10 FK0DM-AUTO-CMPLT-SW FK0DM-AUTO-CMPLT-SW ; 
  10 FK0DW-REQUEST-DATA-SW FK0DW-REQUEST-DATA-SW ; 
  10 FK0DW-PGM-NBR FK0DW-PGM-NBR ; 
  10 FK0DW-IXT FK0DW-IXT ; 
  10 FK0DW-IX1 FK0DW-IX1 ; 
  10 FK0DW-FCST-DT FK0DW-FCST-DT ; 
    15 FK0DW-FCST-CY FK0DW-FCST-CY ; 
    15 FK0DW-FCST-MONTH FK0DW-FCST-MONTH ; 
    15 FK0DW-FCST-DD FK0DW-FCST-DD ; 
  10 FK0DW-WORK-BUY-DT FK0DW-WORK-BUY-DT ; 
    15 FK0DW-WORK-BUY-DT-CYM FK0DW-WORK-BUY-DT-CYM ; 
      20 FK0DW-WORK-BUY-DT-CY FK0DW-WORK-BUY-DT-CY ; 
        25 FK0DW-WORK-BUY-DT-CC FK0DW-WORK-BUY-DT-CC ; 
        25 FK0DW-WORK-BUY-DT-YY FK0DW-WORK-BUY-DT-YY ; 
      20 FK0DW-WORK-BUY-DT-MM FK0DW-WORK-BUY-DT-MM ; 
    15 FK0DW-WORK-BUY-DT-DD FK0DW-WORK-BUY-DT-DD ; 
  10 FK0DW-SYS-FIRST-FCST-DT FK0DW-SYS-FIRST-FCST-DT ; 
  10 FK0DW-SYS-MO-BEFORE-BUY-DT FK0DW-SYS-MO-BEFORE-BUY-DT ; 
  10 FK0DW-FBAMDNBR FK0DW-FBAMDNBR ; 
    15 FK0DW-FBAMDNBR-MONTH FK0DW-FBAMDNBR-MONTH ; 
    15 FK0DW-FBAMDNBR-MODEL FK0DW-FBAMDNBR-MODEL ; 
  10 FK0DM-FIRST-FCST-DT FK0DM-FIRST-FCST-DT ; 
    15 FK0DW-FIRST-FCST-YY FK0DW-FIRST-FCST-YY ; 
    15 FK0DW-FIRST-FCST-MM FK0DW-FIRST-FCST-MM ; 
  10 FK0DW-FIRST-FCST-CCYYMMDD FK0DW-FIRST-FCST-CCYYMMDD ; 
  10 FK0DM-PRELIM-DT FK0DM-PRELIM-DT ; 
    15 FK0DW-PRELIM-YY FK0DW-PRELIM-YY ; 
    15 FK0DW-PRELIM-MM FK0DW-PRELIM-MM ; 
  10 FK0DW-PRELIM-CCYYMMDD FK0DW-PRELIM-CCYYMMDD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FB8BUYDT FB8BUYDT ; 
end // end FK0DW00

//*** RECORD=FK0DW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0DW01 type basicRecord
  10 FK0DW-JCP FK0DW-JCP ; 
    15 FK0DW-LRPS-MDN FK0DW-LRPS-MDN ; 
    15 FK0DW-FIRST-FCST-CCYYMMDD FK0DW-FIRST-FCST-CCYYMMDD ; 
    15 * char(66) ; 
  10 FK0DW-JCC FK0DW-JCC [2] ; 
    15 FK0DW-CN1 FK0DW-CN1 ; 
    15 FK0DW-CLG FK0DW-CLG ; 
    15 FK0DW-CN3 FK0DW-CN3 ; 
    15 * char(57) ; 
  10 FK0DW-TYP FK0DW-TYP ; 
  10 FK0DW-CND FK0DW-CND [2] ; 
end // end FK0DW01

//*** RECORD=FK0DW02 ****
// ----------------------------
// Parameter record for FK1321.
// ----------------------------
// ***********************
Record FK0DW02 type basicRecord
  10 FK0DW-JCP FK0DW-JCP ; 
    15 FK0DW-PRELIM-CCYYMMDD FK0DW-PRELIM-CCYYMMDD ; 
    15 * char(71) ; 
end // end FK0DW02

//*** RECORD=FK0DW04 ****
// This work area is the first argument that is passed in the
// CALL statement for module IO3270.
// It contains the function to be performed and one general
// use summary count field.  The count field is used in
// conjunction with the select count function.
// 
// 
//   DATE       NAME      COMMENT
// --------    ------     -------------------------------------
// 02/14/92    JALLE1     Initial record creation.
// ***********************
Record FK0DW04 type basicRecord
  10 FK0DW-FUNC FK0DW-FUNC ; 
  10 FK0DW-SUM-1 FK0DW-SUM-1 ; 
end // end FK0DW04

//*** RECORD=FK0DW05 ****
// This work area is the first argument that is passed in the
// CALL statement for module IO4740.
// It contains the function to be performed and one general
// use summary count field.  The count field is used in
// conjunction with the select count function.
// 
// 
//   DATE       NAME      COMMENT
// --------    ------     -------------------------------------
// 02/14/92    RPATTE     Initial record creation.
// ***********************
Record FK0DW05 type basicRecord
  10 FK0DW-FUNC FK0DW-FUNC ; 
  10 FK0DW-SUM-1 FK0DW-SUM-1 ; 
end // end FK0DW05

//*** RECORD=VFKPGM01 ****
// *************** COMPONENTS FORECASTING SYSTEM **************
// ***************     PROGRAM CONTROL TABLE       ************
// 
// DB2 TABLE VIEW:     DCMPNT.VFKPGM01
// 
// COPYLIB MEMBER:     DCL01036
// 
// I/O MODULE:         IO6310
// 
// KEY TO DB2 TABLE    XXXPGMNO
// 
// MAINTENANCE LOG:
// 
// CONTROL     DATE    NAME     COMMENT
// --------  --------  ------   -------------------------------
//           03/30/92  JALLE1   NEW RECORD DEFINITION.
// 
// ************************
Record VFKPGM01 type basicRecord
  5 VFKPGM01-GROUP VFKPGM01-GROUP ; 
    10 XXXPGMNB XXXPGMNB ; 
    10 FK-MDL-PROC-FL FK-MDL-PROC-FL ; 
    10 XXXLSTDT XXXLSTDT ; 
    10 XXXLSTTM XXXLSTTM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VFKPGM01

// FK_MDL_PROC_FL
DataItem FK-MDL-PROC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Autoload complete switch
DataItem FK0DM-AUTO-CMPLT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Initial fcty fcst avail sw
DataItem FK0DM-FCST-AVAIL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First forecast date
DataItem FK0DM-FIRST-FCST-DT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Prelim month
DataItem FK0DM-PRELIM-DT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition statement logic
DataItem FK0DW-CLG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition statement constants
DataItem FK0DW-CN1 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition statement constants
DataItem FK0DW-CN3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition code work area
DataItem FK0DW-CND char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LRPS NUMBER WORK AREA--GROUP L
DataItem FK0DW-FBAMDNBR num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LRPS NUMBER MODEL
DataItem FK0DW-FBAMDNBR-MODEL num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LRPS NUMBER MONTH
DataItem FK0DW-FBAMDNBR-MONTH num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK BUY DATE CENTURY & YEAR
DataItem FK0DW-FCST-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK AREA FOR FB9REC BUY DATE
DataItem FK0DW-FCST-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK AREA FOR FB9REC BUY DATE
DataItem FK0DW-FCST-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK AREA FOR FB9REC BUY DATE
DataItem FK0DW-FCST-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First fcst date ccyymmd format
DataItem FK0DW-FIRST-FCST-CCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First forecast month
DataItem FK0DW-FIRST-FCST-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First forecast year
DataItem FK0DW-FIRST-FCST-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// I/O module function
DataItem FK0DW-FUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX FOR CONDITION STATEMENTS
DataItem FK0DW-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX FOR JCL STATEMENTS
DataItem FK0DW-IXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statment
DataItem FK0DW-JCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PARAMETER statment
DataItem FK0DW-JCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LRPS MODEL NUMBER
DataItem FK0DW-LRPS-MDN num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PROGRAM NUM FOR CONTENTION-CHK
DataItem FK0DW-PGM-NBR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prelim date ccyymmdd format
DataItem FK0DW-PRELIM-CCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prelim month
DataItem FK0DW-PRELIM-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prelim year
DataItem FK0DW-PRELIM-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request the data sw
DataItem FK0DW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summary count 1
DataItem FK0DW-SUM-1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FK0DW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SYSTEM CALC'D FIRST FCST DATE
DataItem FK0DW-SYS-FIRST-FCST-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SYSTEM CALC'D MO PREV TO BUY
DataItem FK0DW-SYS-MO-BEFORE-BUY-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem FK0DW-TYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORK AREA FOR FB9REC BUY DATE
DataItem FK0DW-WORK-BUY-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK BUY DATE CENTURY
DataItem FK0DW-WORK-BUY-DT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK BUY DATE CENTURY & YEAR
DataItem FK0DW-WORK-BUY-DT-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK BUY DATE CENTURY/YEAR/MO
DataItem FK0DW-WORK-BUY-DT-CYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK BUY DATE DAY
DataItem FK0DW-WORK-BUY-DT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK BUY DATE MONTH
DataItem FK0DW-WORK-BUY-DT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK BUY DATE YEAR
DataItem FK0DW-WORK-BUY-DT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ftwr buy program control group
DataItem VFKPGM01-GROUP char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

