package fk0t;

import corpcom2.XX0XW02;
import corpcom3.XPFK001;
import corpcom3.XPXCL01;
import corpcom3.XPXMG01;
import corpcom3.XPXX001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCLCD;
import corpx1.XCLTBL;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XMGTBL;
import corpx2.XMG-COLR-GRP-CD;
import corpx2.XMU-MAT-UOM-CD;
import fb.common.FB9REC;
import fb.common.FBAMDNBR;
import fk.common.FK-DEPT-MAT-DESC;
import fk.common.FK-MAT-NBR;
import fk.common.FK-VEND-CD;
import fk.common.FKWREC;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VLRPSH01;
import vv.common.VLRSTY01;
import vv.common.VMATRL01;
import vv.common.VMUSGE01;
import vv.common.VVNDR001;
//*** PROGRAM=FK0T ****
// FK0T  -  COMPONENTS FORECASTING - LRPS BY VENDOR/MATERIAL
//                        INQUIRY
// 
// This program is part of the Components Forecasting System.
// The application provides inquiry capability for LRPS by
// Vendor/Material.  The user will key in a LRPS number, PO
// month, Vendor, Material, Color Group and Color.  The
// application will retrieve all Style/Color/Dimension and
// quantities for the products that use the Material, Color
// Group, and Color for the LRPS number and month selected.
// 
// Popup windows will be proveided for the color group and
// color table.
// 
// Users will be allowed to exit this application via pfkeys
// or Fastpath, with the 'Option' field available for use
// with any applciation transfer.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      03/16/92  DFRANC  New application.
//          09/29/92  JALLE1  Remove LRPS type from map.
//          08/09/93  JALLE1  Remove references to FMDMDTYP
//                            for Aug '93 table changes.
//          03/07/94  JALLE1  Fix 'request processed, no msg
//                            to display' message in 1000.
//                            March 1994 table changes.
// 
// Y2KFIX   11/13/97  VRAMAC  Y2K MODIFICATION MADE TO:
//                            FK0TM110 : CHANGE FK0TM-BUY-DT
//                            TO ALLOW '00' FOR YEAR 2000
// 
// *********************
Program FK0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FK0TW00 FK0TW00; // record
  FK0TW01 FK0TW01; // record
  FKWREC FKWREC; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VLRPSH01 VLRPSH01; // record
  VLRSTY01 VLRSTY01; // record
  VMATRL01 VMATRL01; // record
  VMUSGE01 VMUSGE01; // record
  VVNDR001 VVNDR001; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCLTBL; // table
  use XMGTBL; // table
  use FK0TM.FK0TM110, // form
  FK0TM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0TM110 initial; /* map input/output*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Initialize temp storage record*/
    set VLRSTY01 empty; /* LRPS style*/
    set VMATRL01 empty; /* Material*/
    set VMUSGE01 empty; /* Material Usage*/
    set FY1REC empty; /* Factory table*/
    set FB9REC empty; /* Footwear buy control table*/
    set PG2REC empty; /* Style color production*/
    set PG4REC empty; /* Style color development*/
    set FK0TW00 empty; /* Initialize working storage rec*/
    set FK0TW01 empty; /* Initialize working storage rec*/
    ;
     /* ------------------------------------------------------------*/
     /* Check for LRPS number, vendor, and material being passed*/
     /* from another application.*/
     /* ------------------------------------------------------------*/
    ;
    FK0TM110.FBAMDNBR = FKWREC.FBAMDNBR;
    FK0TW00.FK0TW-BUY-DT = FKWREC.FB8BUYDT;
    FK0TM110.FK0TM-BUY-DT = FK0TW00.FK0TW-BUY-YYMM;
    FK0TM110.FK-VEND-CD = FKWREC.FK-VEND-CD[1];
    FK0TM110.FK-MAT-NBR = FKWREC.FK-MAT-NBR[1];
    FK0TM110.XMG-COLR-GRP-CD = FKWREC.XMG-COLR-GRP-CD[1];
    FK0TM110.XCLCD = FKWREC.XCLCD[1];
    ;
    if (FKWREC.FBAMDNBR > 0
     && FKWREC.FB8BUYDT > 0
     && FKWREC.FK-VEND-CD[1] > " "
     && FKWREC.FK-MAT-NBR[1] > " "
     && FKWREC.XMG-COLR-GRP-CD[1] > " "
     && FKWREC.XCLCD[1] > " ")
      FK0TW00.FK0TW-REQUEST-DATA-SW = "Y"; /* Data requested switch*/
    else
      FK0TW00.FK0TW-REQUEST-DATA-SW = "N"; /* Data requested switch*/
    end
    ;
    set FKWREC empty; /* Clear out FKWREC*/
    ;
    FK0TW00.FK0TW-FORMAT-MAP-SW = "N"; /* Format the data*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0T-0001; /* Converse the main process*/
    ;
    ;
    FK0T-0001: FK0T-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0T-0001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0T

// Main process to display a map
Function FK0T-0001()
   /* ---------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0T-1000(); /* Obtain the data to display*/
  ;
  FK0T-2000(); /* Format and display the map*/
  ;
  FK0T-3000(); /* Check attention identifier*/
  ;
  FK0T-4000(); /* Reset fields to normal intensity*/
  ;
  FK0T-5000(); /* Verify the entered data*/
  ;
  FK0T-6000(); /* Process valid input request*/
  ;
   /* --------------------- END OF FK0T-0001 ------------------------*/
end // end FK0T-0001

// Obtain the data to display
Function FK0T-1000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TW00.FK0TW-REQUEST-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK0TW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  ;
  FK0T-1100(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Select LRPS header information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0T-1200(); /* Get material description*/
  ;
   /* ------------------------------------------------------------*/
   /* Check to see if an error has been found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.XXXTSLEN = 974; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Declare and Open cursor for Material Usage table*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.FK0TW-VMUSGE01-EOF-SW = "N"; /* Initialize switch*/
  FK0TW00.FK0TW-IDX = 1; /* Display line index*/
  ;
  FK0T-1300(); /* Open Cursor Material Usage*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch a row from the Material Usage table*/
   /* ------------------------------------------------------------*/
  ;
  FK0T-1310(); /* Fetch next row from Material Usage*/
  ;
  if (FK0TW00.FK0TW-VMUSGE01-EOF-SW == "N")
    ;
    FK0T-1320(); /* Save key*/
    ;
  else
    ;
    converseLib.validationFailed(18); /* No data to display*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module id*/
    FK0TW00.FK0TW-FORMAT-MAP-SW = "N";
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Process through the Material Usage table until end of cursor*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0TW00.FK0TW-VMUSGE01-EOF-SW == "N") /* Until end of cursor*/
    ;
    FK0TW00.FK0TW-VLRSTY01-EOF-SW = "N"; /* Initialize switch*/
    ;
    FK0T-1400(); /* Declare LRPS style cursor*/
    ;
    FK0T-1410(); /* Read in LRPS style record*/
    ;
    /* ------------------------------------------------------------*/
     /* Process through the LRPS Style table until end of cursor*/
    /* ------------------------------------------------------------*/
    ;
    while (FK0TW00.FK0TW-VLRSTY01-EOF-SW == "N")
      ;
      FK0T-1430(); /* Obtain country for factory found*/
      FK0T-1440(); /* Convert quantity*/
      FK0T-1450(); /* Calculate yield*/
      FK0T-1460(); /* Calculate needs*/
      ;
      FK0TW00.FK0TW-PG2REC-EOF-SW = "N"; /* Initialize switch*/
      FK0TW00.FK0TW-PG4REC-EOF-SW = "N"; /* Initialize switch*/
      ;
      FK0T-1470(); /* Obtain Production product info*/
      ;
      if (FK0TW00.FK0TW-PG2REC-EOF-SW == "Y")
        FK0T-1480(); /* Obtain Development information*/
      end
      ;
      FK0T-1500(); /* Save data in display storage*/
      ;
       /* -------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
       /* -------------------------------------------------------*/
      ;
      if (FK0TW00.FK0TW-IDX > 14) /* Page is full*/
        ;
        FK0T-1600(); /* Add page to temp storage*/
        ;
        FK0TW00.FK0TW-IDX = 1; /* Display line index*/
        ;
        set FK0TW01 empty; /* Initialize hold area*/
        ;
      end
      ;
      FK0T-1410(); /* Read next LPRS style*/
      ;
    end
    ;
    FK0T-1420(); /* Close LPRS sytle table*/
    ;
    FK0T-1310(); /* Read next VMUSGE01*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the Material Usage Cursor*/
   /* ------------------------------------------------------------*/
  ;
  FK0T-1330(); /* Close the selected set cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TW00.FK0TW-IDX > 1) /* Page was formatted*/
    FK0T-1600(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    FKWREC.XXXMSGNO = 18; /* No data was found to display*/
    FK0TW00.FK0TW-FORMAT-MAP-SW = "Y";
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.FK0TW-REQUEST-DATA-SW = "N"; /* Request for data*/
  ;
   /* ----------------- END OF FK0T-1000 --------------------------*/
end // end FK0T-1000

// Purge any temporary storage
Function FK0T-1100()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0TW01 empty; /* M110 display storage*/
  ;
  FK0TW00.FK0TW-UPDATE-SW = "N"; /* Storage update sw;*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK0TW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FK0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1100 -----------------------------*/
end // end FK0T-1100

// Select unique DCMPNT.VMATRL01
Function FK0T-1200()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VMATRL01 empty; /* Clear row storage area*/
  ;
  VMATRL01.FK-MAT-NBR = FK0TM110.FK-MAT-NBR; /* Material number*/
  VMATRL01.FK-VEND-CD = FK0TM110.FK-VEND-CD; /* Vendor code*/
  ;
  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      set FK0TM110.FK-VEND-CD cursor, bold;
      set FK0TM110.FK-MAT-NBR bold;
      FKWREC.XXX-MOD-ID = "1200"; /* module id*/
      converseLib.validationFailed(76); /* Material/Vendor Code not found*/
      FK0TW00.FK0TW-FORMAT-MAP-SW = "N"; /* Format data switch*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.FK0TW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN VENDOR NAME";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FK0TM110.FK-VEND-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1200 ------------------------------*/
end // end FK0T-1200

// Open cursor DCMPNT.VMUSGE01
Function FK0T-1300()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VMUSGE01 empty; /* Clear row storage area*/
  ;
  VMUSGE01.FK-MAT-NBR = FK0TM110.FK-MAT-NBR; /* Material number*/
  VMUSGE01.XMG-COLR-GRP-CD = FK0TM110.XMG-COLR-GRP-CD; /* Colr grp cd*/
  VMUSGE01.XCLCD = FK0TM110.XCLCD; /* Color cd*/
  ;
  try
    call "IO6240" ("S2", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMUSGE01.VMUSGE01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1300 ------------------------------*/
end // end FK0T-1300

// Fetch next row DCMPNT.VMUSGE01
Function FK0T-1310()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6240" ("N2", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FK0TW00.FK0TW-VMUSGE01-EOF-SW = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1310"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMUSGE01.VMUSGE01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1310 ------------------------------*/
end // end FK0T-1310

// Save key
Function FK0T-1320()
   /* -------------------------------------------------------------------*/
   /* Save key entered*/
   /* -------------------------------------------------------------------*/
  ;
  FK0TW00.FK-MAT-NBR = FK0TM110.FK-MAT-NBR; /* Material number*/
  ;
  FK0TW00.FK0TW-BUY-YYMM = FK0TM110.FK0TM-BUY-DT; /* PO buy date*/
  ;
  FK0TW00.FK-VEND-CD = FK0TM110.FK-VEND-CD; /* Vendor code*/
  ;
  FK0TW00.FK-MAT-NBR = FK0TM110.FK-MAT-NBR; /* Material number*/
  ;
  FK0TW00.XMG-COLR-GRP-CD = FK0TM110.XMG-COLR-GRP-CD; /* Color group*/
  ;
  FK0TW00.XCLCD = FK0TM110.XCLCD; /* Color code*/
  ;
   /* ----------------- END OF FK0T-1320 ------------------------------*/
end // end FK0T-1320

// Close cursor DCMPNT.VMUSGE01
Function FK0T-1330()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6240" ("C2", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1330"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1330 -----------------------------*/
end // end FK0T-1330

// Open cursor DCMPNT.VLRSTY01
Function FK0T-1400()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VLRSTY01 empty; /* Clear row storage area*/
  ;
  VLRSTY01.FBAMDNBR = FK0TM110.FBAMDNBR; /* LRPS number*/
  VLRSTY01.SY1STNBR = VMUSGE01.SY1STNBR; /* Style number*/
  ;
  if (VMUSGE01.XDMCD == " ") /* Development product*/
    VLRSTY01.SY2CLRID = " "; /* Color id*/
  else
    VLRSTY01.SY2CLRID = VMUSGE01.SY2CLRID; /* Color id*/
  end
  ;
  VLRSTY01.XDMCD = VMUSGE01.XDMCD; /* Dimension code*/
  ;
  if (FK0TW00.FK0TW-BUY-YY < 50) /* Year less than 50*/
    FK0TW00.FK0TW-BUY-CC = 20; /* Century*/
  else
    FK0TW00.FK0TW-BUY-CC = 19; /* Century*/
  end
  ;
  FK0TW00.FK0TW-BUY-DD = 1; /* Day*/
  FK0TW00.FK0TW-BUY-YYMM = FK0TM110.FK0TM-BUY-DT; /* Year and month*/
  VLRSTY01.FB8BUYDT = FK0TW00.FK0TW-BUY-DT; /* Buy date*/
  ;
  try
    call "IO6170" ("S2", SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1400 ------------------------------*/
end // end FK0T-1400

// Read next DCMPNT.VLRSTY01 row
Function FK0T-1410()
   /* ------------------------------------------------------------*/
   /* Read in the next row from the LRPS style*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6170" ("N2", SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of file*/
        ;
        FK0TW00.FK0TW-VLRSTY01-EOF-SW = "Y";
        return;
        ;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1410"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1410 ------------------------------*/
end // end FK0T-1410

// Close cursor DCMPNT.VLRSTY01
Function FK0T-1420()
   /* ------------------------------------------------------------*/
   /* Read in the next row from the LRPS style*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6170" ("C2", SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1420"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1420 ------------------------------*/
end // end FK0T-1420

// Select unique DFCTY.VFCTY01
Function FK0T-1430()
   /* ------------------------------------------------------------*/
   /* Read in the next row from the LRPS style*/
   /* ------------------------------------------------------------*/
  ;
  set FY1REC empty;
  ;
  FY1REC.XGPCD = "02";
  FY1REC.FY1FCTYC = VLRSTY01.FY1FCTYC;
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of file*/
      ;
      FY1REC.XCTCD = "****";
      return; /* Exit*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        ;
        return; /* Exit*/
        ;
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1430"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1430 ------------------------------*/
end // end FK0T-1430

// Convert quantity
Function FK0T-1440()
   /* ------------------------------------------------------------*/
   /* Convert LRPS quantity to Manufacturying quantity*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.FK0TW-QTY = VLRSTY01.FB8FTQTB * VMUSGE01.FK-MAT-MFG-PCT;
  ;
   /* ----------------- END OF FK0T-1440 ------------------------------*/
end // end FK0T-1440

// Calculate yield
Function FK0T-1450()
   /* ------------------------------------------------------------*/
   /* Calculate YIELD*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Determine the Usage to be used in the calculation*/
   /* ------------------------------------------------------------*/
  ;
  if (VMUSGE01.FK-MAT-FINL-USE == 0)
    ;
    if (VMUSGE01.FK-MAT-PROD-USE == 0)
      FK0TW00.FK0TW-USAGE = VMUSGE01.FK-MAT-DEVL-USE;
    else
      FK0TW00.FK0TW-USAGE = VMUSGE01.FK-MAT-PROD-USE;
    end
    ;
  else
    ;
    FK0TW00.FK0TW-USAGE = VMUSGE01.FK-MAT-FINL-USE;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the yield*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.FK0TW-YIELD = FK0TW00.FK0TW-USAGE -         FK0TW00.FK0TW-USAGE * VMUSGE01.FK-MAT-WAST-PCT;
  ;
  ;
  ;
  ;
   /* ----------------- END OF FK0T-1450 ------------------------------*/
end // end FK0T-1450

// Calculate NEEDS
Function FK0T-1460()
   /* ------------------------------------------------------------*/
   /* Calculate the NEEDS*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.FK0TW-NEEDS = mathLib.round(FK0TW00.FK0TW-YIELD * FK0TW00.FK0TW-QTY, -mathLib.decimals(FK0TW00.FK0TW-NEEDS));
  ;
   /* ----------------- END OF FK0T-1460 ------------------------------*/
end // end FK0T-1460

// Select set DPRODG.VSYCLR01
Function FK0T-1470()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* Clear row storage area*/
  ;
  PG2REC.XGPCD = "02"; /* Group code*/
  PG2REC.SY1STNBR = VMUSGE01.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = VMUSGE01.SY2CLRID; /* Color id*/
  PG2REC.XDMCD = VMUSGE01.XDMCD; /* Dimension code*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      FK0TW00.FK0TW-PG2REC-EOF-SW = "N";
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/
      ;
      FK0TW00.FK0TW-PG2REC-EOF-SW = "Y";
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1470"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FK0TW01.SY1STNBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1470 ------------------------------*/
end // end FK0T-1470

// Select style (DPRODG.VSYDVL01)
Function FK0T-1480()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  PG4REC.PG4STNBR = VMUSGE01.SY1STNBR; /* Style number*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      ;
      FK0TW00.FK0TW-PG4REC-EOF-SW = "Y";
      ;
      return;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1480"; /* Module identification*/
  ;
  FK0TW00.FK0TW-REQUEST-DATA-SW = "N"; /* Set data switch*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1440 GET COLOR DATA             ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0T"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FK0TW01.SY1STNBR; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* -------------------END OF FK0T-1480 --------------------------------*/
end // end FK0T-1480

// Save header data
Function FK0T-1500()
   /* ------------------------------------------------------------*/
   /* Save key information*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW01.FBAMDNBR = FK0TM110.FBAMDNBR; /* LRPS number*/
  FK0TW01.FK0TW-BUY-YYMM = FK0TM110.FK0TM-BUY-DT;
  FK0TW01.FK-VEND-CD = FK0TM110.FK-VEND-CD; /* Vendor code*/
  FK0TW01.FK-MAT-NBR = FK0TM110.FK-MAT-NBR; /* Material number*/
  FK0TW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC;
  FK0TW01.XMG-COLR-GRP-CD = FK0TM110.XMG-COLR-GRP-CD;
  FK0TW01.XCLCD = FK0TM110.XCLCD; /* Color code*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the line information in temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW01.XCTCD[FK0TW-IDX] = VLRSTY01.XCTCD; /* Country code*/
  FK0TW01.FY1FCTYC[FK0TW-IDX] = VLRSTY01.FY1FCTYC; /* Factory code*/
  FK0TW01.SY1STNBR[FK0TW-IDX] = VMUSGE01.SY1STNBR; /* Style number*/
  FK0TW01.SY2CLRID[FK0TW-IDX] = VMUSGE01.SY2CLRID; /* Color id*/
  FK0TW01.XDMCD[FK0TW-IDX] = VMUSGE01.XDMCD; /* Dimension code*/
  ;
  if (FK0TW00.FK0TW-PG2REC-EOF-SW == "N") /* Prod found*/
    FK0TW01.SY1SSTNM[FK0TW-IDX] = PG2REC.SY1SSTNM; /* Short name*/
    FK0TW01.SY2CLRAB[FK0TW-IDX] = PG2REC.SY2CLRAB; /* Color Abrv*/
  else
    if (FK0TW00.FK0TW-PG4REC-EOF-SW == "N")
      FK0TW01.SY1SSTNM[FK0TW-IDX] = PG4REC.SY1SSTNM;
      FK0TW01.SY2CLRAB[FK0TW-IDX] = " ";
    else
      FK0TW01.SY1SSTNM[FK0TW-IDX] = " NOT FOUND  ";
      FK0TW01.SY1SSTNM[FK0TW-IDX] = " ";
    end
  end
  ;
  FK0TW01.FK0TW-QTY[FK0TW-IDX] = FK0TW00.FK0TW-QTY; /* Quantity*/
  FK0TW01.FK0TW-YIELD[FK0TW-IDX] = FK0TW00.FK0TW-YIELD; /* Yield*/
  FK0TW01.XMU-MAT-UOM-CD[FK0TW-IDX] = VMATRL01.XMU-MAT-UOM-CD;
  FK0TW01.FK0TW-NEEDS[FK0TW-IDX] = FK0TW00.FK0TW-NEEDS; /* Needs*/
  ;
   /* ------------------------------------------------------------*/
   /* Increment the index*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.FK0TW-IDX = FK0TW00.FK0TW-IDX + 1;
  ;
   /* ----------------- END OF FK0T-1500 -----------------------------*/
end // end FK0T-1500

// Add page to temporary storage
Function FK0T-1600()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW01.XXXTSLEN = FK0TW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FK0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FK0TW01 empty; /* M001 display storage*/
    ;
    FK0TW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-1600 ------------------------------*/
end // end FK0T-1600

// Format and converse map
Function FK0T-2000()
   /* -------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display*/
   /* -------------------------------------------------------------*/
  ;
  if (FK0TW00.FK0TW-REQUEST-DATA-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0)   /* or no error found*/
    ;
    if (FK0TW00.FK0TW-FORMAT-MAP-SW == "Y") /* Map must be formatted*/
      FK0T-2100(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Protect select fields where no data is present.*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.FK0TW-IDX = 1; /* Initialize line index*/
  ;
  while (FK0TW00.FK0TW-IDX <= 14) /* Until screen is processed*/
    ;
    if (FK0TW01.SY1STNBR[FK0TW-IDX] <= " ")
      set FK0TM110.XCTCD[FK0TW-IDX] invisible, skip;
      set FK0TM110.FY1FCTYC[FK0TW-IDX] invisible, skip;
      set FK0TM110.SY1STNBR[FK0TW-IDX] invisible, skip;
      set FK0TM110.SY2CLRID[FK0TW-IDX] invisible, skip;
      set FK0TM110.XDMCD[FK0TW-IDX] invisible, skip;
      set FK0TM110.SY1SSTNM[FK0TW-IDX] invisible, skip;
      set FK0TM110.SY2CLRAB[FK0TW-IDX] invisible, skip;
      set FK0TM110.FK0TM-QTY[FK0TW-IDX] invisible, skip;
      set FK0TM110.FK0TM-YIELD[FK0TW-IDX] invisible, skip;
      set FK0TM110.XMU-MAT-UOM-CD[FK0TW-IDX] invisible, skip;
      set FK0TM110.FK0TM-NEEDS[FK0TW-IDX] invisible, skip;
    end
    ;
    FK0TW00.FK0TW-IDX = FK0TW00.FK0TW-IDX + 1; /* Increment line index*/
    ;
  end
  ;
   /* -------------------------------------------------------------*/
   /* If an error was found, save the error message number*/
   /* -------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    set FK0TM110.FBAMDNBR cursor; /* Set cursor on LRPS number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0TM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0TM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0TM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0TM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0TM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/
    ;
    set FK0TM110 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FK0TM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0TM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0TM110.CAITEM; /* Application data*/
  ;
   /* ---------------- End of FK0T-2000 --------------------------*/
end // end FK0T-2000

// Format the display data
Function FK0T-2100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0TM110 initial; /* M110 input/output area*/
  ;
  FK0TW00.FK0TW-FORMAT-MAP-SW = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FK0TW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (FK0TW00.FK0TW-UPDATE-SW == "Y") /* Current page was changed*/
        ;
        FK0TS-01(); /* Update temporary storage page*/
        ;
        FK0TW00.FK0TW-UPDATE-SW = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FK0TW00.XXXTSPAG > FK0TW00.TA5TSQIX) /* Desired greater highest*/
        FK0TW00.XXXTSPAG = FK0TW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FK0TS-02(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FK0TM110.XXXLITPG skip; /* "PAGE" literal*/
    FK0TM110.XXXTSPAG = FK0TW00.XXXTSPAG; /* Current page*/
    set FK0TM110.XXXLITOF skip; /* "OF" literal*/
    FK0TM110.TA5TSQIX = FK0TW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TW01.FBAMDNBR <= 0) /* LRPS number not present*/
    set FK0TM110.FBAMDNBR cursor; /* Position cursor*/
  end
  ;
  FK0TM110.FBAMDNBR = FK0TW01.FBAMDNBR; /* LRPS number*/
  FK0TM110.FK0TM-BUY-DT = FK0TW01.FK0TW-BUY-YYMM;
  FK0TM110.FK-VEND-CD = FK0TW01.FK-VEND-CD; /* Vendor code*/
  FK0TM110.FK-MAT-NBR = FK0TW01.FK-MAT-NBR; /* Material number*/
  FK0TM110.FK-DEPT-MAT-DESC = FK0TW01.FK-DEPT-MAT-DESC;
  FK0TM110.XMG-COLR-GRP-CD = FK0TW01.XMG-COLR-GRP-CD; /* Color group*/
  FK0TM110.XCLCD = FK0TW01.XCLCD; /* Color code*/
  ;
  FK0TW00.FK0TW-IDX = 1; /* Initialize line index*/
  ;
  while (FK0TW00.FK0TW-IDX <= 14) /* Until screen is full*/
    ;
    FK0TM110.XCTCD[FK0TW-IDX] = FK0TW01.XCTCD[FK0TW-IDX];
    FK0TM110.FY1FCTYC[FK0TW-IDX] = FK0TW01.FY1FCTYC[FK0TW-IDX];
    FK0TM110.SY1STNBR[FK0TW-IDX] = FK0TW01.SY1STNBR[FK0TW-IDX];
    FK0TM110.SY2CLRID[FK0TW-IDX] = FK0TW01.SY2CLRID[FK0TW-IDX];
    FK0TM110.XDMCD[FK0TW-IDX] = FK0TW01.XDMCD[FK0TW-IDX];
    FK0TM110.SY1SSTNM[FK0TW-IDX] = FK0TW01.SY1SSTNM[FK0TW-IDX];
    FK0TM110.SY2CLRAB[FK0TW-IDX] = FK0TW01.SY2CLRAB[FK0TW-IDX];
    FK0TM110.FK0TM-QTY[FK0TW-IDX] = FK0TW01.FK0TW-QTY[FK0TW-IDX];
    FK0TM110.FK0TM-YIELD[FK0TW-IDX] = FK0TW01.FK0TW-YIELD[FK0TW-IDX];
    FK0TM110.XMU-MAT-UOM-CD[FK0TW-IDX] = FK0TW01.XMU-MAT-UOM-CD[FK0TW-IDX];
    FK0TM110.FK0TM-NEEDS[FK0TW-IDX] = FK0TW01.FK0TW-NEEDS[FK0TW-IDX];
    ;
    FK0TW00.FK0TW-IDX = FK0TW00.FK0TW-IDX + 1; /* Increment line index*/
    ;
  end
  ;
   /* ----------------- END OF FK0T-2100 --------------------------*/
end // end FK0T-2100

// Check attention identifier
Function FK0T-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FK0TW00.FK0TW-REQUEST-DATA-SW == "Y") /* Request for data*/
      set FK0TW01 empty; /* M110 display storage*/
    end
    ;
    FK0TW00.FK0TW-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    FK0TW00.FK0TW-REQUEST-DATA-SW = "N"; /* Request for data switch*/
    ;
    FKWREC.FBAMDNBR = FK0TM110.FBAMDNBR; /* LRPS number*/
    ;
    FK0TW00.FK0TW-BUY-YYMM = FK0TM110.FK0TM-BUY-DT;
    if (FK0TW00.FK0TW-BUY-YY < 50)
      FK0TW00.FK0TW-BUY-CC = 20;
    else
      FK0TW00.FK0TW-BUY-CC = 19;
    end
    FK0TW00.FK0TW-BUY-DD = 1;
    FKWREC.FB8BUYDT = FK0TW00.FK0TW-BUY-DT;
    ;
    FKWREC.FK-VEND-CD[1] = FK0TM110.FK-VEND-CD; /* Vendor code*/
    FKWREC.FK-MAT-NBR[1] = FK0TM110.FK-MAT-NBR; /* Material number*/
    FKWREC.XMG-COLR-GRP-CD[1] = FK0TM110.XMG-COLR-GRP-CD; /* Clr grp*/
    FKWREC.XCLCD[1] = FK0TM110.XCLCD; /* Color code*/
    COMMAREA.CATOAP = "FK0T"; /* to applicaiton*/
    COMMAREA.CAITEM = "    "; /* item*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FK0T-1100(); /* Purge temporary storage*/
      ;
      FKWREC.FBAMDNBR = FK0TM110.FBAMDNBR; /* LRPS number*/
      ;
      FK0TW00.FK0TW-BUY-YYMM = FK0TM110.FK0TM-BUY-DT;
      if (FK0TW00.FK0TW-BUY-YY < 50)
        FK0TW00.FK0TW-BUY-CC = 20;
      else
        FK0TW00.FK0TW-BUY-CC = 19;
      end
      FK0TW00.FK0TW-BUY-DD = 1;
      FKWREC.FB8BUYDT = FK0TW00.FK0TW-BUY-DT;
      ;
      FKWREC.FK-VEND-CD[1] = FK0TM110.FK-VEND-CD; /* Vendor code*/
      FKWREC.FK-MAT-NBR[1] = FK0TM110.FK-MAT-NBR; /* Material number*/
      FKWREC.XMG-COLR-GRP-CD[1] = FK0TM110.XMG-COLR-GRP-CD; /* Clr grp*/
      FKWREC.XCLCD[1] = FK0TM110.XCLCD; /* Color code*/
      ;
      COMMAREA.CATOAP = FK0TM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0TM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0TM110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* EXIT requested*/
   || converseVar.eventKey is pf4  /* MN0M master menu requested*/
   || converseVar.eventKey is pf12 /* FK0P requested (prelims by ctry/fcty)*/
   || converseVar.eventKey is pf14 /* FK0R requested (LRPS by ctry/fcty)*/
   || converseVar.eventKey is pf17) /* FK0V requested (LRPS by vendor)*/
    ;
    FKWREC.FBAMDNBR = FK0TM110.FBAMDNBR; /* LRPS number*/
    ;
    FK0TW00.FK0TW-BUY-YYMM = FK0TM110.FK0TM-BUY-DT;
    if (FK0TW00.FK0TW-BUY-YY < 50)
      FK0TW00.FK0TW-BUY-CC = 20;
    else
      FK0TW00.FK0TW-BUY-CC = 19;
    end
    FK0TW00.FK0TW-BUY-DD = 1;
    FKWREC.FB8BUYDT = FK0TW00.FK0TW-BUY-DT;
    ;
    FKWREC.FK-VEND-CD[1] = FK0TM110.FK-VEND-CD; /* Vendor code*/
    FKWREC.FK-MAT-NBR[1] = FK0TM110.FK-MAT-NBR; /* Material number*/
    FKWREC.XMG-COLR-GRP-CD[1] = FK0TM110.XMG-COLR-GRP-CD; /* Clr grp*/
    FKWREC.XCLCD[1] = FK0TM110.XCLCD; /* Color code*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0TM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0O"; /* TO application*/
      COMMAREA.CAITEM = FK0TM110.CAITEM; /* item*/
      ;
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK0TM110.CAITEM; /* item*/
      ;
    end
    ;
    if (converseVar.eventKey is pf12) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0P"; /* TO application*/
      COMMAREA.CAITEM = FK0TM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK0R"; /* TO application*/
      COMMAREA.CAITEM = FK0TM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK0V"; /* TO application*/
      COMMAREA.CAITEM = FK0TM110.CAITEM; /* item*/
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
    return; /* Return*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 pressed*/
   && converseVar.eventKey not pf8)  /* PF8 pressed*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ---------------- End of FK0T-3000 ---------------------------------*/
end // end FK0T-3000

// Reset highlighted fields
Function FK0T-4000()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0TM110.FBAMDNBR initialAttributes; /* LRPS Material number*/
  set FK0TM110.FK0TM-BUY-DT initialAttributes; /* Buy date*/
  set FK0TM110.FK-VEND-CD initialAttributes; /* Vendor code*/
  set FK0TM110.FK-MAT-NBR initialAttributes; /* Material number*/
  set FK0TM110.FK-DEPT-MAT-DESC initialAttributes; /* Material description*/
  set FK0TM110.XMG-COLR-GRP-CD initialAttributes; /* Color group code*/
  set FK0TM110.XCLCD initialAttributes; /* Color code*/
  ;
  FK0TW00.FK0TW-IDX = 1; /* Initialize line index*/
  ;
  set FK0TM110.CATOAP initialAttributes; /* TO application*/
  set FK0TM110.CAITEM initialAttributes; /* Application data*/
  ;
   /* ---------------------------------------------------------------------*/
   /* If no country list was not requested, return to the previous process*/
   /* ---------------------------------------------------------------------*/
  ;
  if (FK0TM110.XMG-COLR-GRP-CD == "?" /* Color group code requested*/
   || FK0TM110.XCLCD == "?")          /* Color code requested*/
    ;
    if (converseVar.eventKey not enter) /* Enter not pressed*/
      FKWREC.XXX-MOD-ID = "4000"; /* Module id*/
      converseLib.validationFailed(19); /* PA/PF key may not be used*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    return;
    ;
  end
  ;
   /* ---------------------------------------------------------------------*/
   /* If Color code list requested, display the list of xcl codes.*/
   /* ---------------------------------------------------------------------*/
  ;
  if (FK0TM110.XCLCD == "?") /* Color code requested*/
    ;
    XPXX001(); /* Window initialization*/
    ;
    XX0XW02.XX0XWHDR = " COLOR   "; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of display*/
      XPXCL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FK0TM110.XCTCD = " "; /* Restore prior code*/
    else
      FK0TM110.XCLCD = XCLTBL.XCLCD[XX0XWPIX]; /* Selected code*/
    end
    ;
    set FK0TM110.XCLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ---------------------------------------------------------------------*/
   /* If Color group code list requested, display the list of xcl codes.*/
   /* ---------------------------------------------------------------------*/
  ;
  if (FK0TM110.XMG-COLR-GRP-CD == "?") /* Color group code requested*/
    ;
    XPXX001(); /* Window initialization*/
    ;
    XX0XW02.XX0XWHDR = "COLOR GRP"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of display*/
      XPXMG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FK0TM110.XMG-COLR-GRP-CD = " "; /* Restore prior code*/
    else
      FK0TM110.XMG-COLR-GRP-CD = XMGTBL.XMG-COLR-GRP-CD[XX0XWPIX];
    end
    ;
   /* Establish cursor position*/
    set FK0TM110.XMG-COLR-GRP-CD cursor;
  end
  ;
   /* ---------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER must*/
   /* BE PRESSED TO PROCESS ANY CHANGES.*/
   /* ---------------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FKWREC.XXX-MOD-ID = "4000"; /* Module id*/
  converseLib.validationFailed(20); /* Corporate list displayed*/
  ;
  exit stack;
  ;
   /* ----------------- END OF FK0T-4000 ----------------------------*/
end // end FK0T-4000

// Verify data that was entered
Function FK0T-5000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TM110.CAITEM > " ") /* Application data was entered*/
    if (converseVar.eventKey is pf12 /* FK0P selected*/
     || converseVar.eventKey is pf13 /* FK0Q selected*/
     || converseVar.eventKey is pf14 /* FK0R selected*/
     || converseVar.eventKey is pf17) /* FK0V selected*/
         /* next sentence*/
    else
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      set FK0TM110.CAITEM cursor, bold; /* Highlight*/
      converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    FK0T-5100(); /* Verify scroll request*/
    ;
  end
  ;
   /* --------------------------------------------------------*/
   /* Verify Color code entered*/
   /* ------------------------------------------------------------*/
  ;
  FK0T-5200();
  ;
   /* --------------------------------------------------------*/
   /* Verify Color group code entered*/
   /* ------------------------------------------------------------*/
  ;
  FK0T-5300();
  ;
   /* --------------------------------------------------------*/
   /* Verify Material code entered*/
   /* ------------------------------------------------------------*/
  ;
  FK0T-5400();
  ;
   /* --------------------------------------------------------*/
   /* Verify Vendor code entered*/
   /* ------------------------------------------------------------*/
  ;
  FK0T-5500();
  ;
   /* --------------------------------------------------------*/
   /* Otherwise, verify that a P.O. month was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   && FK0TM110.FK0TM-BUY-DT <= 0)
    converseLib.validationFailed(8); /* Required field must be entered*/
    FKWREC.XXX-MOD-ID = 5000; /* Module id*/
    set FK0TM110.FK0TM-BUY-DT cursor, bold;
    exit stack;
  end
  ;
   /* --------------------------------------------------------*/
   /* Otherwise, verify that a factory number was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   && FK0TM110.FBAMDNBR <= 0)
    converseLib.validationFailed(8); /* LRPS number must be entered*/
    FKWREC.XXX-MOD-ID = 5000; /* Module id*/
    set FK0TM110.FBAMDNBR cursor, bold;
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ----------------- END OF FK0T-5000 ----------------------------*/
end // end FK0T-5000

// Verify scroll request
Function FK0T-5100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK0TW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK0TW00.XXXTSPAG >= FK0TW00.TA5TSQIX) /* and no more pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TM110.FBAMDNBR != FK0TW01.FBAMDNBR               /* LRPS number changed*/
   || FK0TM110.FK0TM-BUY-DT != FK0TW01.FK0TW-BUY-YYMM     /* PO buy date*/
   || FK0TM110.FK-VEND-CD != FK0TW01.FK-VEND-CD           /* Vendor code*/
   || FK0TM110.FK-MAT-NBR != FK0TW01.FK-MAT-NBR           /* Material numbeer*/
   || FK0TM110.XMG-COLR-GRP-CD != FK0TW01.XMG-COLR-GRP-CD /* Color group*/
   || FK0TM110.XCLCD != FK0TW01.XCLCD)                    /* Color code*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    set FK0TM110.FBAMDNBR cursor, bold; /* Highlight*/
    set FK0TM110.FK0TM-BUY-DT bold; /* Highlight*/
    set FK0TM110.FK-VEND-CD bold; /* Highlight*/
    set FK0TM110.FK-MAT-NBR bold; /* Highlight*/
    set FK0TM110.XMG-COLR-GRP-CD bold; /* Highlight*/
    set FK0TM110.XCLCD bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
   /* ----------------- END OF FK0T-5100 --------------------------*/
end // end FK0T-5100

// Search XCLTBL for color code
Function FK0T-5200()
   /* ------------------------------------------------------------*/
   /* Check to see is Color code was entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TM110.XCLCD <= " ")
    set FK0TM110.XCLCD bold, cursor;
    FKWREC.XXX-MOD-ID = "5200";
    converseLib.validationFailed(8);
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Read CSP Corporate table for Color code validation*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TM110.XCLCD in XCLTBL.XCLCD)
    ;
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
      ;
      return;
      ;
    end
    ;
  else
    ;
    FKWREC.XXX-MOD-ID = "5200"; /* Module id*/
    set FK0TM110.XCLCD cursor, bold;
    converseLib.validationFailed(8); /* Required field not found*/
    ;
  end
  ;
   /* ----------------- END OF FK0T-5200 ------------------------------*/
end // end FK0T-5200

// Search XMGTBL Color group code
Function FK0T-5300()
   /* ------------------------------------------------------------*/
   /* Check to see is Color group code was entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TM110.XMG-COLR-GRP-CD <= " ")
    set FK0TM110.XMG-COLR-GRP-CD bold, cursor;
    FKWREC.XXX-MOD-ID = "5300";
    converseLib.validationFailed(8);
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Read CSP Corporate table for Color group validation*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TM110.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD)
    ;
    if (XMGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
      ;
      return;
      ;
    end
    ;
  else
    ;
    FKWREC.XXX-MOD-ID = "5300"; /* Module id*/
    set FK0TM110.XMG-COLR-GRP-CD cursor, bold;
    converseLib.validationFailed(8); /* Required field not found*/
    ;
  end
  ;
   /* ----------------- END OF FK0T-5300 ------------------------------*/
end // end FK0T-5300

// Check DCMPNT.VMATRL01 number
Function FK0T-5400()
   /* ------------------------------------------------------------*/
   /* Read in the next row from the LRPS style*/
   /* ------------------------------------------------------------*/
  ;
  set VMATRL01 empty;
  ;
  VMATRL01.FK-MAT-NBR = FK0TM110.FK-MAT-NBR;
  VMATRL01.FK-VEND-CD = FK0TM110.FK-VEND-CD;
  ;
  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of file*/
      ;
      converseLib.validationFailed(76); /* Material number invalid*/
      FKWREC.XXX-MOD-ID = "5400"; /* Module*/
      set FK0TM110.FK-VEND-CD cursor, bold;
      set FK0TM110.FK-MAT-NBR bold;
      ;
      return; /* Exit*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      ;
      return; /* Exit*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-5400 ------------------------------*/
end // end FK0T-5400

// Check DCMPNT.VVNDR001 code
Function FK0T-5500()
   /* ------------------------------------------------------------*/
   /* Read in the next row from the LRPS style*/
   /* ------------------------------------------------------------*/
  ;
  set VVNDR001 empty;
  ;
  VVNDR001.FK-VEND-CD = FK0TM110.FK-VEND-CD;
  ;
  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of file*/
      ;
      converseLib.validationFailed(21); /* Required field not found*/
      FKWREC.XXX-MOD-ID = "5500"; /* Module*/
      set FK0TM110.FK-VEND-CD cursor, bold;
      ;
      return; /* Exit*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      ;
      return; /* Exit*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5500"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0T-5500 ------------------------------*/
end // end FK0T-5500

// Process valid input request
Function FK0T-6000()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW00.FK0TW-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/
  ;
  set FKWREC empty;
  ;
  FKWREC.FBAMDNBR = FK0TM110.FBAMDNBR; /* LRPS number*/
  ;
  if (FK0TM110.FK0TM-BUY-DT > " ")
    FK0TW00.FK0TW-BUY-YYMM = FK0TM110.FK0TM-BUY-DT;
    if (FK0TW00.FK0TW-BUY-YY > 50)
      FK0TW00.FK0TW-BUY-CC = 19;
    else
      FK0TW00.FK0TW-BUY-CC = 20;
    end
    FK0TW00.FK0TW-BUY-DD = 1;
    FKWREC.FB8BUYDT = FK0TW00.FK0TW-BUY-DT;
  end
  ;
  FKWREC.FK-VEND-CD[1] = FK0TM110.FK-VEND-CD; /* Vendor code*/
  FKWREC.FK-MAT-NBR[1] = FK0TM110.FK-MAT-NBR; /* Material number*/
  FKWREC.XMG-COLR-GRP-CD = FK0TM110.XMG-COLR-GRP-CD; /* Color group*/
  FKWREC.XCLCD = FK0TM110.XCLCD; /* Color*/
  ;
   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0TM110.FBAMDNBR != FK0TW00.FBAMDNBR               /* LRPS number changed*/
   || FK0TM110.FK0TM-BUY-DT != FK0TW00.FK0TW-BUY-YYMM     /* PO buy date*/
   || FK0TM110.FK-VEND-CD != FK0TW00.FK-VEND-CD           /* Vendor code changed*/
   || FK0TM110.FK-MAT-NBR != FK0TW00.FK-MAT-NBR           /* Material NBR changed*/
   || FK0TM110.XMG-COLR-GRP-CD != FK0TW00.XMG-COLR-GRP-CD /* CLR Grp chng*/
   || FK0TM110.XCLCD != FK0TW00.XCLCD)                    /* Color code changed*/
    ;
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (FK0TM110.FBAMDNBR > 0) /* LRPS number was entered*/
      ;
      FK0TW00.FK0TW-REQUEST-DATA-SW = "Y";
      ;
    else
      ;
      FK0TW00.FK0TW-REQUEST-DATA-SW = "N";
      ;
      FK0T-1100(); /* Purge any temporary storage*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FK0TW00.XXXTSPAG = FK0TW00.XXXTSPAG - 1; /* Decrement page number*/
    FK0TW00.FK0TW-REQUEST-DATA-SW = "N";
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FK0TW00.XXXTSPAG = FK0TW00.XXXTSPAG + 1; /* Increment page number*/
    FK0TW00.FK0TW-REQUEST-DATA-SW = "N";
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check PF keys for transfer to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* Help requested*/
   || converseVar.eventKey is pf3  /* Exit requested*/
   || converseVar.eventKey is pf4  /* Master menu*/
   || converseVar.eventKey is pf16 /* FK0T requested*/
   || converseVar.eventKey is pf17) /* FK0V requested*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
end // end FK0T-6000

// Update temporary storage page
Function FK0TS-01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FK0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-S01 -----------------------------*/
end // end FK0TS-01

// Read temporary storage page
Function FK0TS-02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0TW01.XXXTSLEN = FK0TW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FK0TW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FK0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-S02 ------------------------------*/
end // end FK0TS-02

//*** RECORD=FK0TW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0TW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FK0TW-IDX FK0TW-IDX ; 
  10 FK0TW-VLRSTY01-EOF-SW FK0TW-VLRSTY01-EOF-SW ; 
  10 FK0TW-VMUSGE01-EOF-SW FK0TW-VMUSGE01-EOF-SW ; 
  10 FK0TW-VMATRL01-EOF-SW FK0TW-VMATRL01-EOF-SW ; 
  10 FK0TW-PG2REC-EOF-SW FK0TW-PG2REC-EOF-SW ; 
  10 FK0TW-PG4REC-EOF-SW FK0TW-PG4REC-EOF-SW ; 
  10 FK0TW-REQUEST-DATA-SW FK0TW-REQUEST-DATA-SW ; 
  10 FK0TW-FORMAT-MAP-SW FK0TW-FORMAT-MAP-SW ; 
  10 FK0TW-UPDATE-SW FK0TW-UPDATE-SW ; 
  10 FK0TW-BUY-DT FK0TW-BUY-DT ; 
    15 * num(1) ; // filler
    15 FK0TW-BUY-CC FK0TW-BUY-CC ; 
    15 FK0TW-BUY-YYMM FK0TW-BUY-YYMM ; 
      20 FK0TW-BUY-YY FK0TW-BUY-YY ; 
      20 FK0TW-BUY-MM FK0TW-BUY-MM ; 
    15 FK0TW-BUY-DD FK0TW-BUY-DD ; 
  10 FBAMDNBR FBAMDNBR ; 
  10 FK-VEND-CD FK-VEND-CD ; 
  10 FK-MAT-NBR FK-MAT-NBR ; 
  10 XMG-COLR-GRP-CD XMG-COLR-GRP-CD ; 
  10 XCLCD XCLCD ; 
  10 FK0TW-USAGE FK0TW-USAGE ; 
  10 FK0TW-QTY FK0TW-QTY ; 
  10 FK0TW-YIELD FK0TW-YIELD ; 
  10 FK0TW-NEEDS FK0TW-NEEDS ; 
end // end FK0TW00

//*** RECORD=FK0TW01 ****
// ------------------------
// Map 110 display storage.
// ------------------------
// ***********************
Record FK0TW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(974) ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 FK0TW-BUY-YYMM FK0TW-BUY-YYMM ; 
    10 FK-VEND-CD FK-VEND-CD ; 
    10 FK-MAT-NBR FK-MAT-NBR ; 
    10 FK-DEPT-MAT-DESC FK-DEPT-MAT-DESC ; 
    10 XMG-COLR-GRP-CD XMG-COLR-GRP-CD ; 
    10 XCLCD XCLCD ; 
    10 XCTCD XCTCD [14] ; 
    10 FY1FCTYC FY1FCTYC [14] ; 
    10 SY1STNBR SY1STNBR [14] ; 
    10 SY2CLRID SY2CLRID [14] ; 
    10 XDMCD XDMCD [14] ; 
    10 SY1SSTNM SY1SSTNM [14] ; 
    10 SY2CLRAB SY2CLRAB [14] ; 
    10 FK0TW-QTY FK0TW-QTY [14] ; 
    10 FK0TW-YIELD FK0TW-YIELD [14] ; 
    10 XMU-MAT-UOM-CD XMU-MAT-UOM-CD [14] ; 
    10 FK0TW-NEEDS FK0TW-NEEDS [14] ; 
end // end FK0TW01

// buy century
DataItem FK0TW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy day
DataItem FK0TW-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FB_BUY_DT
DataItem FK0TW-BUY-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FK0TW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem FK0TW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year and month
DataItem FK0TW-BUY-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FK0TW-FORMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FK0TW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NEEDS
DataItem FK0TW-NEEDS num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FK0TW-PG2REC-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FK0TW-PG4REC-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// QUANTITY
DataItem FK0TW-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem FK0TW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FK0TW-UPDATE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Used to calculate yield
DataItem FK0TW-USAGE decimal(7,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem FK0TW-VLRSTY01-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FK0TW-VMATRL01-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FK0TW-VMUSGE01-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YIELD
DataItem FK0TW-YIELD num(7,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

