package fk02;

import corpcom2.XX0XW01;
import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpz3.ZZZCHGCT;
import fk.common.*;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VCTRCT01;
import vv.common.VMATRL01;
import vv.common.VVNDR001;
//*** PROGRAM=FK02 ****
// description here.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/17/88  USERID  New application.
// FK-018   03/01/93  JALLE1  Added contract field to maps.
// FK-019   04/16/93  JALLE1  Provide ability to list vendors
//                            for all managers on inq screen.
// y2kfix   11-06-97  oricha  y2k modifications.  regen only
//                            for xx0xs01 century adjustment.
// *********************
Program FK02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK02W00 FK02W00; // record
  FK02W01 FK02W01; // record
  FK02W02 FK02W02; // record
  FKWREC FKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCTRCT01 VCTRCT01; // record
  VMATRL01 VMATRL01; // record
  VVNDR001 VVNDR001; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use FK02M.FK02M110,  // forms
      FK02M.FK02M210, 
      FK02M.FK02M310, 
      FK02M.FK02M410
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FK02M110 initial; /* M110 inquiry map input/output*/
    set FK02M210 initial; /* M210 add map input/output*/
    set FK02M310 initial; /* M310 chng map input/output*/
    set FK02M410 initial; /* M410 delete map input/output*/
    set FK02W00 empty; /* Working storage*/
    set FK02W01 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FK02W00.FK02W-VERIFY-DEL-SW = "N"; /* INIT DELETE SWITCH*/
    FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* INIT FORMAT MAP SWITCH*/

    if (FKWREC.FK-MAT-MGR-ID[1] > " ")
      FK02W00.FK02W-REQUEST-DATA-SW = "Y";

      if (FKWREC.FKW-UPDATE-FUNCTION == "A" /* add requested*/
       || FKWREC.FKW-UPDATE-FUNCTION == "C" /* chg requested*/
       || FKWREC.FKW-UPDATE-FUNCTION == "D") /* del requested*/

        FK02W00.FK02W-FK-MAT-MGR-ID = COMMAREA.CAUSERID;
      else

        FK02W00.FK02W-FK-MAT-MGR-ID = FKWREC.FK-MAT-MGR-ID[1];
      end
    else
      FK02W00.FK02W-REQUEST-DATA-SW = "Y";
      FK02W00.FK02W-FK-MAT-MGR-ID = COMMAREA.CAUSERID;

    end


     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (FKWREC.FKW-UPDATE-FUNCTION == "A") /* add requested*/
      FK02W00.FK02M-MAP-SWITCH = "2";
      FK02M210.FK-MAT-MGR-ID = FK02W00.FK02W-FK-MAT-MGR-ID;
      FK02W01.FK-MAT-MGR-ID = FK02W00.FK02W-FK-MAT-MGR-ID;
    else
      if (FKWREC.FKW-UPDATE-FUNCTION == "C") /* add requested*/
        FK02W00.FK02M-MAP-SWITCH = "3";
        FK02M310.FK-MAT-MGR-ID = FK02W00.FK02W-FK-MAT-MGR-ID;
      else
        if (FKWREC.FKW-UPDATE-FUNCTION == "D") /* delete requested*/
          FK02W00.FK02M-MAP-SWITCH = "4";
          FK02M410.FK-MAT-MGR-ID = FK02W00.FK02W-FK-MAT-MGR-ID;
        else
          FK02W00.FK02M-MAP-SWITCH = "1";
          FK02M110.FK-MAT-MGR-ID = FK02W00.FK02W-FK-MAT-MGR-ID;
        end
      end
    end


    set FKWREC empty;

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FK02-001; /* Converse the main process*/


    FK02-001: FK02-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FK02-001; /* Converse the main process*/


  end // end main
end // end FK02

// Main process to display a map
Function FK02-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, if specified, display the fourth map.*/
   /* 5) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.FK02M-MAP-SWITCH == "1") /* Map 1 was requested*/

    FK02-1000(); /* Display map 1*/

  else

    if (FK02W00.FK02M-MAP-SWITCH == "2") /* Map 2 was requested*/

      FK02-2000(); /* Display map 2*/

    else

      if (FK02W00.FK02M-MAP-SWITCH == "3") /* Map 3 was requested*/

        FK02-3000(); /* Display map 3*/

      else

        if (FK02W00.FK02M-MAP-SWITCH == "4") /* Map 4 was requested*/

          FK02-4000(); /* Display map 4*/

        else

          /* ------------------------------------------------------------*/
           /* Write the error to the Error Diagnosis Reporting Facility.*/
          /* ------------------------------------------------------------*/

          FKWREC.XXX-MOD-ID = "001"; /* Module identification*/
          FKWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
          TA1REC.TA1MAPNO = FK02W00.FK02M-MAP-SWITCH; /* Map number*/
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/

          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

          /* ------------------------------------------------------------*/
           /* Exit to display the application system menu.*/
          /* ------------------------------------------------------------*/

          COMMAREA.CATOAP = "FK0B"; /* TO application*/

          XSFKS01(); /* Exit to another application*/

          /* ------------------------------------------------------------*/
           /* Abnormally terminate the transaction if the exit failed.*/
          /* ------------------------------------------------------------*/

          TA1REC.TA1FUNC = "ABND"; /* Termination function*/

          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

        end

      end

    end

  end


end // end FK02-001

// Process inquiry map
Function FK02-1000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FK02-1100(); /* Obtain the data to display*/

  FK02-1200(); /* Format and display the map*/

  FK02-1300(); /* Check attention identifier*/

  FK02-1400(); /* Reset fields to normal intensity*/

  FK02-1500(); /* Verify the entered data*/

  FK02-1600(); /* Process valid input request*/


end // end FK02-1000

// Obtain the data to display
Function FK02-1100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.FK02W-REQUEST-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FK02W00.XXXTSLEN = 736; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK02W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  FK02-1110(); /* Purge any temporary storage*/

  FK02W01.FK-MAT-MGR-ID = FK02M110.FK-MAT-MGR-ID;

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FK02-1120(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-DISP-INDEX = 1; /* Display line index*/
  FK02W00.FK02W-END-CURSOR-SW = "N"; /* End of cursor switch*/

  while (FK02W00.FK02W-END-CURSOR-SW == "N" /* Until end of cursor*/
  )
    FK02-1130(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (FK02W00.FK02W-END-CURSOR-SW == "N") /* Not end of cursor*/
      FK02-1170(); /* Get contracts*/
      FK02-1140(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (FK02W00.FK02W-DISP-INDEX > 14) /* Page is full*/

      FK02-1150(); /* Add page to temporary storage*/

      FK02W00.FK02W-DISP-INDEX = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.FK02W-DISP-INDEX > 1) /* Page was formatted*/
    FK02-1150(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FK02-1160(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.TA5TSQIX == 0) /* No pages formatted*/

    FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
    FKWREC.XXXMSGNO = 18; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-REQUEST-DATA-SW = "N"; /* Request for data switch*/
  FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Request for data switch*/


end // end FK02-1100

// Purge any temporary storage
Function FK02-1110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FK02W01 empty; /* M001 display storage*/

  FK02W00.FK02W-TS-UPDATE-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK02W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FK02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "1110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-1110

// Select set and open cursor
Function FK02-1120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VVNDR001 empty; /* Clear row storage area*/

  VVNDR001.FK-MAT-MGR-ID = FK02W01.FK-MAT-MGR-ID; /* mat manager*/


  try
    call "IO6180" ("S1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "1120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-1120

// Fetch next row in the cursor
Function FK02-1130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6180" ("N1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FK02W00.FK02W-END-CURSOR-SW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "1130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-1130

// Save data in display storage
Function FK02-1140()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.TA5TSQIX > 0          /* Not the first page*/
   && FK02W00.FK02W-DISP-INDEX == 1 /* and first line on page*/
  )                                
    FK02W01.FK-MAT-MGR-ID = FK02M110.FK-MAT-MGR-ID;
   /* MOVE VVNDR001.FK-MAT-MGR-ID TO FK02W01.FK-MAT-MGR-ID;*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  FK02W01.FK-VEND-CD[FK02W-DISP-INDEX] = VVNDR001.FK-VEND-CD;
  FK02W01.FK-VEND-SNM[FK02W-DISP-INDEX] = VVNDR001.FK-VEND-SNM;
  FK02W01.FK-VEND-NM[FK02W-DISP-INDEX] = VVNDR001.FK-VEND-NM;
  FK02W01.XCTCD[FK02W-DISP-INDEX] = VVNDR001.XCTCD;
  FK02W01.ZZZCHGCT[FK02W-DISP-INDEX] = VVNDR001.ZZZCHGCT;
  FK02W01.FK02M-CONT-FL[FK02W-DISP-INDEX] = FK02W00.FK02M-CONT-FL;

  FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* increment ix*/


end // end FK02-1140

// Add page to temporary storage
Function FK02-1150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FK02W01.XXXTSLEN = FK02W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FK02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FK02W01 empty; /* M110 display storage*/

    FK02W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "1150"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-1150

// Close selected set cursor
Function FK02-1160()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6180" ("C1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "1160"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-1160

// Select exists DCMPNT.VCTRCT01
Function FK02-1170()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VCTRCT01 empty; /* Clear row storage area*/
  set FK02W02 empty; /* IOmod parameters*/

  XX0XS01(); /* Get current date and time*/

  VCTRCT01.FK-VEND-CD = VVNDR001.FK-VEND-CD; /* Vendor code*/
  FK02W02.FK02W-DATE = XX0XW01.XX0XWDAT; /* Date*/
  FK02W02.FK02W-FUNC = "T2"; /* Function code*/


  try
    call "IO6650" (FK02W02, SQLCA, VCTRCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/

      if (FK02W02.FK02W-COUNT > 0) /* If records were found*/
        FK02W00.FK02M-CONT-FL = "Y"; /* Contract exists*/
      else
        FK02W00.FK02M-CONT-FL = "N"; /* Contract does not exist*/
      end

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "1170"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT EXIST DCMPNT.VCTRCT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTRCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTRCT01.VCTRCT01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-1170

// Format and converse INQ map
Function FK02-1200()
  if (converseVar.validationMsgNum != 0) /* error to display*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  if (FK02W00.FK02W-REQUEST-DATA-SW == "Y"
   || converseVar.validationMsgNum == 0)
    if (FK02W00.FK02M-FMAT-MAP-SW == "Y")
      FK02-1210();
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FK02M110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FK02M110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK02M110.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK02M110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set FK02M110.FK-MAT-MGR-ID cursor; /* set cursor position*/

    FK02M110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/

    set FK02M110 alarm; /* Indicate sound alarm*/
  end

  converse FK02M110 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FK02M110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK02M110.CAITEM; /* Application data*/


end // end FK02-1200

// Format the display data
Function FK02-1210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FK02M110 initial; /* m110 input/output area*/

  FK02W00.FK02M-FMAT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FK02W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/


      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FK02W00.XXXTSPAG > FK02W00.TA5TSQIX) /* Desired greater highest*/
        FK02W00.XXXTSPAG = FK02W00.TA5TSQIX; /* Default to highest*/
      end

      FK02S-020(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FK02M110.XXXLITPG skip; /* "PAGE" literal*/
    FK02M110.XXXTSPAG = FK02W00.XXXTSPAG; /* Current page*/
    set FK02M110.XXXLITOF skip; /* "OF" literal*/
    FK02M110.TA5TSQIX = FK02W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (FK02W01.FK-MAT-MGR-ID <= " ") /* mat manager not present*/
    set FK02M110.FK-MAT-MGR-ID cursor; /* Position cursor*/
  end

  FK02M110.FK-MAT-MGR-ID = FK02W01.FK-MAT-MGR-ID;

  FK02W00.FK02W-DISP-INDEX = 1; /* Initialize line index*/

  while (FK02W00.FK02W-DISP-INDEX <= 14) /* Until screen is full*/
    if (FK02W01.FK-VEND-CD[FK02W-DISP-INDEX] > " ") /* IF LINE HAS DATA*/

      if (FK02W00.FK02W-DISP-INDEX == 1) /* First select field*/

        set FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] cursor, normal;
      else
        set FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] initialAttributes; /* Unprotect*/

      end

      FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] = FK02W01.FK02M-SELECT[FK02W-DISP-INDEX];
      FK02M110.FK-VEND-CD[FK02W-DISP-INDEX] = FK02W01.FK-VEND-CD[FK02W-DISP-INDEX]; /* vendor CODE*/
      FK02M110.FK-VEND-SNM[FK02W-DISP-INDEX] = FK02W01.FK-VEND-SNM[FK02W-DISP-INDEX]; /* vendor short n*/
      FK02M110.FK-VEND-NM[FK02W-DISP-INDEX] = FK02W01.FK-VEND-NM[FK02W-DISP-INDEX]; /* vendor descripti*/
      FK02M110.XCTCD[FK02W-DISP-INDEX] = FK02W01.XCTCD[FK02W-DISP-INDEX]; /* country code*/
      FK02M110.FK02M-CONT-FL[FK02W-DISP-INDEX] = FK02W01.FK02M-CONT-FL[FK02W-DISP-INDEX]; /* Contract flag*/

    else
      set FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] invisible, skip; /**/
    end

    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* increment x*/

  end


end // end FK02-1210

// Check attention identifier
Function FK02-1300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = "FK02"; /* to applicaiton*/
    COMMAREA.CAITEM = "I"; /* item*/
    set FKWREC empty;
    if (FK02M110.FK-MAT-MGR-ID == "*")
      FKWREC.FK-MAT-MGR-ID = COMMAREA.CAUSERID;
    else
      FKWREC.FK-MAT-MGR-ID = FK02M110.FK-MAT-MGR-ID;
    end

    XSFKS01(); /* Exit to another application*/

    set FK02M110.CATOAP cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FK02M110.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (FK02M110.CATOAP == "FK02") /* FAST PATH to same pgm requested*/
        set FKWREC empty;
        FKWREC.FK-MAT-MGR-ID = FK02M110.FK-MAT-MGR-ID;
      end

      COMMAREA.CATOAP = FK02M110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK02M110.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FK02M110.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* FK0B requested*/
   || converseVar.eventKey is pf4) /* MSTR MN requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK02M110"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
      COMMAREA.CAITEM = FK02M110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK02M110.CAITEM; /* item*/
    end

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* FRWD requested*/
   && converseVar.eventKey not pf8   /* BACK requested*/
   && converseVar.eventKey not pf12  /* FK0E requested*/
   && converseVar.eventKey not pf13  /* FK0F requested*/
   && converseVar.eventKey not pf14  /* FK0G requested*/
   && converseVar.eventKey not pf15  /* FK0H requested*/
   && converseVar.eventKey not pf18) /* appl xfer fk03*/

    FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FK02-1300

// Reset highlighted fields
Function FK02-1400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FK02M110.FK-MAT-MGR-ID initialAttributes; /* materiL MANAGER ID*/

  FK02W00.FK02W-DISP-INDEX = 1; /* Initialize line index*/

  while (FK02W00.FK02W-DISP-INDEX <= 14 /* Until end of lines*/
   && FK02M110.FK-VEND-CD[FK02W-DISP-INDEX] > " ") /* or end of displa*/

    set FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] normal; /* Reset select flg*/

    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* Incr INDEX*/

  end

  set FK02M110.CATOAP initialAttributes; /* TO application*/
  set FK02M110.CAITEM initialAttributes; /* Application data*/


end // end FK02-1400

// Verify data that was entered
Function FK02-1500()
   /* ------------------------------------------------------------*/
   /* IF PFKEY TRANSFERS ... SKIP VERIFY*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18)
    return; /**/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FK02M110.CAITEM > " ") /* Application data was entered*/

    FKWREC.XXX-MOD-ID = "1500"; /* Module identification*/
    set FK02M110.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FK02-1510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (FK02W00.TA5TSQIX > 0) /* Page was formatted*/

      FK02W00.FK02W-DISP-INDEX = 14; /* Initialize line index*/
      FK02W00.FK02W-NBR-SEL = 0; /* Initialize SELECT COUNT*/

      while (FK02W00.FK02W-DISP-INDEX > 0) /* Until end of lines*/

        FK02-1520(); /* Verify data in the line*/

        FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX - 1; /* DCRM*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Verify ONLY ONE LINE SELECTED.*/
    /* ------------------------------------------------------------*/
    if (FK02W00.FK02W-NBR-SEL > 1) /* MORE THAN 1 LINE SELECTED*/

      FKWREC.XXX-MOD-ID = "1500"; /* Module identification*/
      set FK02M110.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
      converseLib.validationFailed(22); /* Field missing or invalid*/

    end

    /* ------------------------------------------------------------*/
     /* Verify the MATERIAL MANAGER CODE.*/
    /* ------------------------------------------------------------*/

    if (FK02M110.FK-MAT-MGR-ID > " ") /* IF MATERIAL MANAGER CODE ENTERED*/

       /* NEXT SENTENCE*/

    else

      /* ------------------------------------------------------------*/
       /* If not ENTERED  indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      FKWREC.XXX-MOD-ID = "1500"; /* Module identification*/
      set FK02M110.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Field missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FK02-1500

// Verify scroll request
Function FK02-1510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK02W00.XXXTSPAG < 2)       /* and no previous pages*/

    FKWREC.XXX-MOD-ID = "1510"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK02W00.XXXTSPAG >= FK02W00.TA5TSQIX) /* and no more pages*/

    FKWREC.XXX-MOD-ID = "1510"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-DISP-INDEX = 14; /* Initialize line index*/

  while (FK02W00.FK02W-DISP-INDEX > 0) /* Until end of lines*/

    if (FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] > " "
    )
      FKWREC.XXX-MOD-ID = "1510"; /* Module identification*/
      set FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* Highl*/
      converseLib.validationFailed(19); /* PF KEYS CAN'T BE USED WITH LIST RQST*/

    end

    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX - 1; /* Decr*/

  end

  if (FK02M110.FK-MAT-MGR-ID != FK02W01.FK-MAT-MGR-ID) /* MAT MGR CHNG*/

    FKWREC.XXX-MOD-ID = "1510"; /* Module identification*/
    set FK02M110.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/

  end


end // end FK02-1510

// Verify data in the line
Function FK02-1520()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] == "S") /* COUNT # of slects*/
    FK02W00.FK02W-NBR-SEL = FK02W00.FK02W-NBR-SEL + 1; /**/
  end

  if (FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] != 
  FK02W01.FK02M-SELECT[FK02W-DISP-INDEX]
   && FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] != "S") /* and is not a "S"*/

    FKWREC.XXX-MOD-ID = "1520"; /* Module identification*/
    set FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* HL*/
    converseLib.validationFailed(13); /* Only "S" may be entered*/

  end


end // end FK02-1520

// Process valid input request
Function FK02-1600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Format the map switch*/


   /* ------------------------------------------------------------*/
   /* If material manager changed, exit to display map.*/
   /* ------------------------------------------------------------*/

  if (FK02M110.FK-MAT-MGR-ID != FK02W01.FK-MAT-MGR-ID)
    FK02W00.FK02W-REQUEST-DATA-SW = "Y"; /* rqst for data switch*/


    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FK02W00.XXXTSPAG = FK02W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FK02W00.XXXTSPAG = FK02W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if pfkey was pressed, search select fields for a select.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18)

    if (converseVar.eventKey is pf12)
      COMMAREA.CATOAP = "FK0E";
      COMMAREA.CAITEM = FK02M110.CAITEM;
    end

    if (converseVar.eventKey is pf13)
      COMMAREA.CATOAP = "FK0F";
      COMMAREA.CAITEM = FK02M110.CAITEM;
    end

    if (converseVar.eventKey is pf14)
      COMMAREA.CATOAP = "FK0G";
      COMMAREA.CAITEM = FK02M110.CAITEM;
    end

    if (converseVar.eventKey is pf15)
      COMMAREA.CATOAP = "FK0H";
      COMMAREA.CAITEM = FK02M110.CAITEM;
    end

    if (converseVar.eventKey is pf18)
      COMMAREA.CATOAP = "FK03";
      COMMAREA.CAITEM = FK02M110.CAITEM;
    end

    FK02W00.FK02W-DISP-INDEX = 1; /* INIT INDEX*/
    while (FK02W00.FK02W-DISP-INDEX <= 14) /* Until end of lines*/

      if (FK02M110.FK02M-SELECT[FK02W-DISP-INDEX] == "S"
      )
        set FKWREC empty;
        FKWREC.FK-VEND-CD[1] = FK02M110.FK-VEND-CD[FK02W-DISP-INDEX];

      end

      FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1;

    end

    XSFKS01();
    exit stack;

  end

end // end FK02-1600

// Process ADD map
Function FK02-2000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* PERFORM FK02-2100;       /* Obtain the data to display*/

  FK02-2200(); /* Format and display the map*/

  FK02-2300(); /* Check attention identifier*/

  FK02-2400(); /* Reset fields to normal intensity*/

  FK02-2500(); /* Verify the entered data*/

  FK02-2600(); /* Process valid input request*/


end // end FK02-2000

// Format and converse ADD map
Function FK02-2200()
  if (converseVar.validationMsgNum != 0) /* ERROR TO DISPLAY*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* MESSAGE NUMBER*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FK02M210.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FK02M210.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK02M210.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK02M210.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end


    FK02M210.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/

    set FK02M210 alarm; /* Indicate sound alarm*/

  else
    if (FK02M210.FK-MAT-MGR-ID == " ") /* set cursor position*/
      set FK02M210.FK-MAT-MGR-ID cursor; /* set cursor position*/
    else
      set FK02M210.FK-VEND-CD cursor; /* set cursor position*/
    end
  end

  if (FK02W00.FK02W-REQUEST-DATA-SW == "Y"
   || converseVar.validationMsgNum == 0)
    if (FK02W00.FK02M-FMAT-MAP-SW == "Y")

       /* MOVE FK02W01.FK-MAT-MGR-ID TO FK02M210.FK-MAT-MGR-ID; /**/

      if (FK02M210.FK-MAT-MGR-ID == " ") /* set cursor position*/
        set FK02M210.FK-MAT-MGR-ID cursor; /* set cursor position*/
      else
        set FK02M210.FK-VEND-CD cursor; /* set cursor position*/
      end
      FK02W00.FK02M-FMAT-MAP-SW = "N"; /* RESET FRMAT MAP SWITCH*/
    end
  end


  converse FK02M210 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FK02M210.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK02M210.CAITEM; /* Application data*/


end // end FK02-2200

// Check attention identifier
Function FK02-2300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;
    FKWREC.FK-MAT-MGR-ID = FK02M210.FK-MAT-MGR-ID;
    COMMAREA.CATOAP = "FK02"; /* to applicaiton*/
    COMMAREA.CAITEM = "A"; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FK02M210.CATOAP cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FK02M210.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-MAT-MGR-ID = FK02M210.FK-MAT-MGR-ID;

      COMMAREA.CATOAP = FK02M210.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK02M210.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FK02M210.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "2300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* FK0B requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* FK0E requested*/
   || converseVar.eventKey is pf13 /* FK0F requested*/
   || converseVar.eventKey is pf14 /* FK0G requested*/
   || converseVar.eventKey is pf15 /* FK0H requested*/
   || converseVar.eventKey is pf18) /* FK03 requested*/

    set FKWREC empty;
    FKWREC.FK-MAT-MGR-ID = FK02M210.FK-MAT-MGR-ID;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK02M210"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
      COMMAREA.CAITEM = FK02M210.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK02M210.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0E"; /* TO application*/
      COMMAREA.CAITEM = FK02M210.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0F"; /* TO application*/
      COMMAREA.CAITEM = FK02M210.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0G"; /* TO application*/
      COMMAREA.CAITEM = FK02M210.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FK0H"; /* TO application*/
      COMMAREA.CAITEM = FK02M210.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FK03"; /* TO application*/
      COMMAREA.CAITEM = FK02M210.CAITEM; /* item*/
    end

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* FRWD requested*/
   && converseVar.eventKey not pf8)  /* BACK requested*/

    FKWREC.XXX-MOD-ID = "2300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FK02-2300

// Reset highlighted fields
Function FK02-2400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FK02M210.FK-MAT-MGR-ID initialAttributes; /* materiaL MANAGER ID*/
  set FK02M210.FK-VEND-CD initialAttributes; /* vendor code*/
  set FK02M210.FK-VEND-SNM initialAttributes; /* vendor short name*/
  set FK02M210.FK-VEND-NM initialAttributes; /* vendor description*/
  set FK02M210.XCTCD initialAttributes; /* country code*/


  set FK02M210.CATOAP initialAttributes; /* TO application*/
  set FK02M210.CAITEM initialAttributes; /* Application data*/


end // end FK02-2400

// Verify data that was entered
Function FK02-2500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FK02M210.CAITEM > " ") /* Application data was entered*/

    FKWREC.XXX-MOD-ID = "2500"; /* Module identification*/
    set FK02M210.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end



   /* ------------------------------------------------------------*/
   /* Verify the country code.*/
   /* ------------------------------------------------------------*/

  if (FK02M210.XCTCD > " ") /* IF country code entered*/

    if (FK02M210.XCTCD in XCTTBL.XCTCD /* country code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
     /* next sentence;*/
    else
      FKWREC.XXX-MOD-ID = "2500"; /* Module identification*/
      set FK02M210.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Field missing or invalid*/

    end

  else

    /* ------------------------------------------------------------*/
     /* If not ENTERED  indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FKWREC.XXX-MOD-ID = "2500"; /* Module identification*/
    set FK02M210.XCTCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the vendor description.*/
   /* ------------------------------------------------------------*/

  if (FK02M210.FK-VEND-NM > " ") /* IF vendor description ENTERED*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not ENTERED  indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FKWREC.XXX-MOD-ID = "2500"; /* Module identification*/
    set FK02M210.FK-VEND-NM cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Field missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the vendor short name..*/
   /* ------------------------------------------------------------*/

  if (FK02M210.FK-VEND-SNM > " ") /* IF vendor description ENTERED*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not ENTERED  indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FKWREC.XXX-MOD-ID = "2500"; /* Module identification*/
    set FK02M210.FK-VEND-SNM cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the vendor code.*/
   /* ------------------------------------------------------------*/

  if (FK02M210.FK-VEND-CD > " ") /* IF vendor code ENTERED*/

    set VVNDR001 empty;
    VVNDR001.FK-VEND-CD = FK02M210.FK-VEND-CD;
    try
      call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
    end
    if (sysVar.errorCode == "00000000")
      if (SQLCA.VAGen_SQLCODE == 0)
        FKWREC.XXX-MOD-ID = "2500"; /* Module identification*/
        set FK02M210.FK-VEND-CD cursor, bold; /* Highlight*/
        converseLib.validationFailed(16); /* row already exists.*/
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          FKWREC.XXX-MOD-ID = "2500"; /* Module identification*/
          set FK02M210.FK-VEND-CD cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* fatal error.*/
        end
      end
    end

  else

    /* ------------------------------------------------------------*/
     /* If not ENTERED  indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FKWREC.XXX-MOD-ID = "2500"; /* Module identification*/
    set FK02M210.FK-VEND-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Field missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the MATERIAL MANAGER CODE.*/
   /* ------------------------------------------------------------*/

  if (FK02M210.FK-MAT-MGR-ID == " " /* IF MATERIAL MANAGER CODE MISSING*/
   || FK02M210.FK-MAT-MGR-ID == "*") /* IF MATERIAL MANAGER CODE WILDCARD*/

    FKWREC.XXX-MOD-ID = "2500"; /* Module identification*/
    set FK02M210.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FK02-2500

// Process valid input request
Function FK02-2600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/

  if (FK02M210.FK-MAT-MGR-ID != FK02W01.FK-MAT-MGR-ID) /* mat manager chngd*/
    FK02W01.FK-MAT-MGR-ID = FK02M210.FK-MAT-MGR-ID; /**/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Update the changed data in the table row.*/
   /* ------------------------------------------------------------*/

  FK02-2610(); /* Update table row*/

   /* ------------------------------------------------------------*/
   /* Indicate that the table update was successfully completed.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-REQUEST-DATA-SW = "Y"; /**/

  FKWREC.XXX-MOD-ID = "2600"; /* Module identification*/
  FKWREC.XXXMSGNO = 1; /* Table update was completed*/

  set FK02M210 initial; /* INIT MAP*/

   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/


end // end FK02-2600

// ADD the NEW table row
Function FK02-2610()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set VVNDR001 empty;

  VVNDR001.FK-VEND-CD = FK02M210.FK-VEND-CD; /* vendor code*/
  VVNDR001.FK-VEND-SNM = FK02M210.FK-VEND-SNM; /* vendor short name*/
  VVNDR001.FK-VEND-NM = FK02M210.FK-VEND-NM; /* vendor description*/
  VVNDR001.XCTCD = FK02M210.XCTCD; /* country code*/
  VVNDR001.FK-MAT-MGR-ID = FK02M210.FK-MAT-MGR-ID; /* manager code*/
  VVNDR001.FK-NIKE-MGR-ID = COMMAREA.CAUSERID; /* nikmanager code*/


  VVNDR001.ZZZSDT = XX0XW01.XX0XWDAT; /* start  date*/
  VVNDR001.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VVNDR001.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VVNDR001.ZZZCHGCT = 0; /* Change time*/

   /* ------------------------------------------------------------*/
   /* ADD    the NEW     row TO the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6180" ("A ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FK02W00.FK02W-REQUEST-DATA-SW = "Y"; /**/

      FKWREC.XXX-MOD-ID = "2610"; /* Module identification*/
      FKWREC.XXXMSGNO = 12; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "2610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-2610

// Process CHANGE map
Function FK02-3000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FK02-3100(); /* Obtain the data to display*/

  FK02-3200(); /* Format and display the map*/

  FK02-3300(); /* Check attention identifier*/

  FK02-3400(); /* Reset fields to normal intensity*/

  FK02-3500(); /* Verify the entered data*/

  FK02-3600(); /* Process valid input request*/


end // end FK02-3000

// Obtain the data to display
Function FK02-3100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.FK02W-REQUEST-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FK02W00.XXXTSLEN = 736; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK02W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  FK02-3110(); /* Purge any temporary storage*/

  FK02W01.FK-MAT-MGR-ID = FK02M310.FK-MAT-MGR-ID;

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FK02-3120(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-DISP-INDEX = 1; /* Display line index*/
  FK02W00.FK02W-END-CURSOR-SW = "N"; /* End of cursor switch*/

  while (FK02W00.FK02W-END-CURSOR-SW == "N" /* Until end of cursor*/
  )
    FK02-3130(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (FK02W00.FK02W-END-CURSOR-SW == "N") /* Not end of cursor*/
      FK02-3170(); /* Check for contracts*/
      FK02-3140(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (FK02W00.FK02W-DISP-INDEX > 14) /* Page is full*/

      FK02-3150(); /* Add page to temporary storage*/

      FK02W00.FK02W-DISP-INDEX = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.FK02W-DISP-INDEX > 1) /* Page was formatted*/
    FK02-3150(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FK02-3160(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.TA5TSQIX == 0) /* No pages formatted*/

    FKWREC.XXX-MOD-ID = "3100"; /* Module identification*/
    FKWREC.XXXMSGNO = 18; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-REQUEST-DATA-SW = "N"; /* Request for data switch*/
  FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Request for data switch*/


end // end FK02-3100

// Purge any temporary storage
Function FK02-3110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FK02W01 empty; /* M310 display storage*/

  FK02W00.FK02W-TS-UPDATE-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK02W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FK02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "3110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M310"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-3110

// Select set and open cursor
Function FK02-3120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VVNDR001 empty; /* Clear row storage area*/

  VVNDR001.FK-MAT-MGR-ID = FK02W01.FK-MAT-MGR-ID; /* mat manager*/


  try
    call "IO6180" ("S1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "3120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-3120

// Fetch next row in the cursor
Function FK02-3130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6180" ("N1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FK02W00.FK02W-END-CURSOR-SW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "3130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-3130

// Save data in display storage
Function FK02-3140()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.TA5TSQIX > 0          /* Not the first page*/
   && FK02W00.FK02W-DISP-INDEX == 1 /* and first line on page*/
  )                                
    FK02W01.FK-MAT-MGR-ID = VVNDR001.FK-MAT-MGR-ID;

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  FK02W01.FK-VEND-CD[FK02W-DISP-INDEX] = VVNDR001.FK-VEND-CD;
  FK02W01.FK-VEND-SNM[FK02W-DISP-INDEX] = VVNDR001.FK-VEND-SNM;
  FK02W01.FK-VEND-NM[FK02W-DISP-INDEX] = VVNDR001.FK-VEND-NM;
  FK02W01.XCTCD[FK02W-DISP-INDEX] = VVNDR001.XCTCD;
  FK02W01.FK02M-CONT-FL[FK02W-DISP-INDEX] = FK02W00.FK02M-CONT-FL;
  FK02W01.ZZZCHGCT[FK02W-DISP-INDEX] = VVNDR001.ZZZCHGCT;

  FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* increment ix*/


end // end FK02-3140

// Add page to temporary storage
Function FK02-3150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FK02W01.XXXTSLEN = FK02W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FK02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FK02W01 empty; /* M310 display storage*/

    FK02W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "3150"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M310"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-3150

// Close selected set cursor
Function FK02-3160()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6180" ("C1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "3160"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-3160

// Select exists DCMPNT.VCTRCT01
Function FK02-3170()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VCTRCT01 empty; /* Clear row storage area*/
  set FK02W02 empty; /* IOmod parameters*/

  XX0XS01(); /* Get current date and time*/

  VCTRCT01.FK-VEND-CD = VVNDR001.FK-VEND-CD; /* Vendor code*/
  FK02W02.FK02W-DATE = XX0XW01.XX0XWDAT; /* Date*/
  FK02W02.FK02W-FUNC = "T2"; /* Function code*/


  try
    call "IO6650" (FK02W02, SQLCA, VCTRCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/

      if (FK02W02.FK02W-COUNT > 0) /* If records were found*/
        FK02W00.FK02M-CONT-FL = "Y"; /* Contract exists*/
      else
        FK02W00.FK02M-CONT-FL = "N"; /* Contract does not exist*/
      end

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "3170"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT EXIST DCMPNT.VCTRCT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTRCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTRCT01.VCTRCT01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-3170

// Format and converse INQ map
Function FK02-3200()
  if (converseVar.validationMsgNum != 0) /* error to display*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  if (FK02W00.FK02W-REQUEST-DATA-SW == "Y"
   || converseVar.validationMsgNum == 0)
    if (FK02W00.FK02M-FMAT-MAP-SW == "Y")
      FK02-3210();
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FK02M310.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FK02M310.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK02M310.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK02M310.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FK02M310.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/

    set FK02M310 alarm; /* Indicate sound alarm*/

  else

    if (FK02M310.FK-MAT-MGR-ID <= " ") /* set cursor position*/
      set FK02M310.FK-MAT-MGR-ID cursor; /* set cursor position*/
    else
      set FK02M310.FK02M-SELECT[1] cursor; /* set cursor position*/
    end
  end




  converse FK02M310 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FK02M310.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK02M310.CAITEM; /* Application data*/


end // end FK02-3200

// Format the display data
Function FK02-3210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FK02M310 initial; /* M310 input/output area*/

  FK02W00.FK02M-FMAT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FK02W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/


      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FK02W00.XXXTSPAG > FK02W00.TA5TSQIX) /* Desired greater highest*/
        FK02W00.XXXTSPAG = FK02W00.TA5TSQIX; /* Default to highest*/
      end

      FK02S-020(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FK02M310.XXXLITPG skip; /* "PAGE" literal*/
    FK02M310.XXXTSPAG = FK02W00.XXXTSPAG; /* Current page*/
    set FK02M310.XXXLITOF skip; /* "OF" literal*/
    FK02M310.TA5TSQIX = FK02W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (FK02W01.FK-MAT-MGR-ID <= " ") /* mat manager not present*/
    set FK02M310.FK-MAT-MGR-ID cursor; /* Position cursor*/
  end

  FK02M310.FK-MAT-MGR-ID = FK02W01.FK-MAT-MGR-ID;

  FK02W00.FK02W-DISP-INDEX = 1; /* Initialize line index*/

  while (FK02W00.FK02W-DISP-INDEX <= 14) /* Until screen is full*/
    if (FK02W01.FK-VEND-CD[FK02W-DISP-INDEX] > " ") /* IF DATA*/

      if (FK02W00.FK02W-DISP-INDEX == 1) /* First select field*/

        set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] cursor, normal; /* pos crsr*/
      else
        set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] normal; /* Unprotect*/

      end

      FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] = FK02W01.FK02M-SELECT[FK02W-DISP-INDEX];
      FK02M310.FK-VEND-CD[FK02W-DISP-INDEX] = FK02W01.FK-VEND-CD[FK02W-DISP-INDEX]; /* VENDOR CODE*/
      FK02M310.FK-VEND-SNM[FK02W-DISP-INDEX] = FK02W01.FK-VEND-SNM[FK02W-DISP-INDEX]; /* vendor short n*/
      FK02M310.FK-VEND-NM[FK02W-DISP-INDEX] = FK02W01.FK-VEND-NM[FK02W-DISP-INDEX]; /* vendor descripti*/
      FK02M310.XCTCD[FK02W-DISP-INDEX] = FK02W01.XCTCD[FK02W-DISP-INDEX]; /* country code*/
      FK02M310.FK02M-CONT-FL[FK02W-DISP-INDEX] = FK02W01.FK02M-CONT-FL[FK02W-DISP-INDEX]; /* Contract flag*/

    else
      set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] invisible, protect;
      set FK02M310.FK-VEND-CD[FK02W-DISP-INDEX] invisible, protect;
      set FK02M310.FK-VEND-SNM[FK02W-DISP-INDEX] invisible, protect;
      set FK02M310.FK-VEND-NM[FK02W-DISP-INDEX] invisible, protect;
      set FK02M310.XCTCD[FK02W-DISP-INDEX] invisible, protect;
      set FK02M310.FK02M-CONT-FL[FK02W-DISP-INDEX] invisible, protect;
    end

    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* increment x*/

  end


end // end FK02-3210

// Check attention identifier
Function FK02-3300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = "FK02"; /* to applicaiton*/
    COMMAREA.CAITEM = "C"; /* item*/
    set FKWREC empty;
    FKWREC.FK-MAT-MGR-ID = FK02M310.FK-MAT-MGR-ID;

    XSFKS01(); /* Exit to another application*/

    set FK02M310.CATOAP cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FK02M310.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set FKWREC empty;
      FKWREC.FK-MAT-MGR-ID = FK02M310.FK-MAT-MGR-ID;

      COMMAREA.CATOAP = FK02M310.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK02M310.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FK02M310.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "3300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* FK0B requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* FK0E requested*/
   || converseVar.eventKey is pf13 /* FK0F requested*/
   || converseVar.eventKey is pf14 /* FK0G requested*/
   || converseVar.eventKey is pf15 /* FK0H requested*/
   || converseVar.eventKey is pf18) /* FK03 requested*/

    set FKWREC empty;
    FKWREC.FK-MAT-MGR-ID = FK02M310.FK-MAT-MGR-ID;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK02M310"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
      COMMAREA.CAITEM = FK02M310.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK02M310.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0E"; /* TO application*/
      COMMAREA.CAITEM = FK02M310.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0F"; /* TO application*/
      COMMAREA.CAITEM = FK02M310.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0G"; /* TO application*/
      COMMAREA.CAITEM = FK02M310.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FK0H"; /* TO application*/
      COMMAREA.CAITEM = FK02M310.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FK03"; /* TO application*/
      COMMAREA.CAITEM = FK02M310.CAITEM; /* item*/
    end

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* FRWD requested*/
   && converseVar.eventKey not pf8)  /* BACK requested*/

    FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FK02-3300

// Reset highlighted fields
Function FK02-3400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FK02M310.FK-MAT-MGR-ID initialAttributes; /* materiL MANAGER ID*/

  FK02W00.FK02W-DISP-INDEX = 1; /* Initialize line index*/

  while (FK02W00.FK02W-DISP-INDEX <= 14 /* Until end of lines*/
   && FK02M310.FK-VEND-CD[FK02W-DISP-INDEX] > " ") /* nd of display*/

    set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] initialAttributes; /* Reset select*/
    set FK02M310.FK-VEND-CD[FK02W-DISP-INDEX] initialAttributes; /* Reset vendor c*/
    set FK02M310.FK-VEND-SNM[FK02W-DISP-INDEX] initialAttributes; /* Reset vendor*/
    set FK02M310.FK-VEND-NM[FK02W-DISP-INDEX] initialAttributes; /* Reset vendor c*/
    set FK02M310.XCTCD[FK02W-DISP-INDEX] initialAttributes; /* Reset country*/
    set FK02M310.FK02M-CONT-FL[FK02W-DISP-INDEX] initialAttributes; /* Reset cont fl*/

    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* Incr INDEX*/

  end

  set FK02M310.CATOAP initialAttributes; /* TO application*/
  set FK02M310.CAITEM initialAttributes; /* Application data*/


end // end FK02-3400

// Verify data that was entered
Function FK02-3500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FK02M310.CAITEM > " ") /* Application data was entered*/

    FKWREC.XXX-MOD-ID = "3500"; /* Module identification*/
    set FK02M310.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    FK02-3510();
  else
    if (FK02W00.TA5TSQIX > 0) /* page was formatted*/

      FK02W00.FK02W-DISP-INDEX = 14; /* initialize line index*/

      while (FK02W00.FK02W-DISP-INDEX > 0) /* until end of lines*/

        if (FK02M310.XCTCD[FK02W-DISP-INDEX] != 
        FK02W01.XCTCD[FK02W-DISP-INDEX]       /**/
         || FK02M310.FK-VEND-NM[FK02W-DISP-INDEX] != 
        FK02W01.FK-VEND-NM[FK02W-DISP-INDEX]  /**/
         || FK02M310.FK-VEND-SNM[FK02W-DISP-INDEX] != 
        FK02W01.FK-VEND-SNM[FK02W-DISP-INDEX] /**/
         || FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] != 
        FK02W01.FK02M-SELECT[FK02W-DISP-INDEX]) /**/

          FK02-3520(); /* verify data in line*/
        end

        FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX - 1; /* dec lin*/


      end
    end


    /* ------------------------------------------------------------*/
     /* Verify the MATERIAL MANAGER CODE.*/
    /* ------------------------------------------------------------*/

    if (FK02M310.FK-MAT-MGR-ID == " " /* IF MATERIAL MANAGER CODE MISSING*/
     || FK02M310.FK-MAT-MGR-ID == "*") /* IF MATERIAL MANAGER CODE WILDCARD*/

      FKWREC.XXX-MOD-ID = "3500"; /* Module identification*/
      set FK02M310.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Field missing or invalid*/

    end
  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end FK02-3500

// Verify scroll request
Function FK02-3510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK02W00.XXXTSPAG < 2)       /* and no previous pages*/

    FKWREC.XXX-MOD-ID = "3510"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK02W00.XXXTSPAG >= FK02W00.TA5TSQIX) /* and no more pages*/

    FKWREC.XXX-MOD-ID = "3510"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-DISP-INDEX = 14; /* Initialize line index*/

  while (FK02W00.FK02W-DISP-INDEX > 0) /* Until end of lines*/

    if (FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] > " "
    )
      FKWREC.XXX-MOD-ID = "3510"; /* Module identification*/
      set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* Highl*/
      converseLib.validationFailed(19); /* PF KEYS CAN'T BE USED WITH LIST RQST*/

    end

    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX - 1; /* Decr*/

  end

  if (FK02M310.FK-MAT-MGR-ID != FK02W01.FK-MAT-MGR-ID) /* MAT MGR CHNG*/

    FKWREC.XXX-MOD-ID = "3510"; /* Module identification*/
    set FK02M310.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/

  end


end // end FK02-3510

// Verify data that was entered
Function FK02-3520()
   /* ------------------------------------------------------------*/
   /* Verify the country code.*/
   /* ------------------------------------------------------------*/

  if (FK02M310.XCTCD[FK02W-DISP-INDEX] > " ") /* IF ode entered*/

    if (FK02M310.XCTCD[FK02W-DISP-INDEX] in XCTTBL.XCTCD
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
       /* next sentence;*/
    else
      FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
      set FK02M310.XCTCD[FK02W-DISP-INDEX] cursor, bold; /**/
      converseLib.validationFailed(8); /* Field missing or invalid*/

    end

  else

    /* ------------------------------------------------------------*/
     /* If not ENTERED  indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
    set FK02M310.XCTCD[FK02W-DISP-INDEX] cursor, bold; /* Highlite*/
    converseLib.validationFailed(8); /* Field missing or invalid*/

  end

    /* ------------------------------------------------------------*/
     /* Verify the vendor description.*/
    /* ------------------------------------------------------------*/

  if (FK02M310.FK-VEND-NM[FK02W-DISP-INDEX] > " ") /* IF v desc ENTERD*/

       /* NEXT SENTENCE*/

  else

      /* ------------------------------------------------------------*/
       /* If not ENTERED  indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

    FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
    set FK02M310.FK-VEND-NM[FK02W-DISP-INDEX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Field missing or invalid*/

  end


    /* ------------------------------------------------------------*/
     /* Verify the vendor short name..*/
    /* ------------------------------------------------------------*/

  if (FK02M310.FK-VEND-SNM[FK02W-DISP-INDEX] > " ") /* IF v short name e*/

       /* NEXT SENTENCE*/

  else

      /* ------------------------------------------------------------*/
       /* If not ENTERED  indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

    FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
    set FK02M310.FK-VEND-SNM[FK02W-DISP-INDEX] cursor, bold; /* Highlite*/
    converseLib.validationFailed(8); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify select field contains only 'S' or blank ' '.*/
   /* ------------------------------------------------------------*/

  if (FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] != "S")
    if (FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] != " ")

      FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
      set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* Hilite*/
      converseLib.validationFailed(24); /* only "S" may be entered to CHANGE*/

    end
  end

   /* ------------------------------------------------------------*/
   /* if any field is changed and line not selected indicate error.*/
   /* ------------------------------------------------------------*/

  if (FK02M310.XCTCD[FK02W-DISP-INDEX] != 
  FK02W01.XCTCD[FK02W-DISP-INDEX])
    if (FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] != "S"
    )
      FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
      set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* Hil*/
      converseLib.validationFailed(24); /* enter "S" to change a line of data*/

    end
  end


  if (FK02M310.FK-VEND-NM[FK02W-DISP-INDEX] != 
  FK02W01.FK-VEND-NM[FK02W-DISP-INDEX])
    if (FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] != "S"
    )
      FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
      set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* Hil*/
      converseLib.validationFailed(24); /* enter "S" to change a line of data*/

    end
  end

  if (FK02M310.FK-VEND-SNM[FK02W-DISP-INDEX] != 
  FK02W01.FK-VEND-SNM[FK02W-DISP-INDEX])
    if (FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] != "S"
    )
      FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
      set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* Hil*/
      converseLib.validationFailed(24); /* enter "S" to change a line of data*/

    end
  end


  if (FK02M310.FK-VEND-CD[FK02W-DISP-INDEX] != 
  FK02W01.FK-VEND-CD[FK02W-DISP-INDEX])
    if (FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] != "S"
    )
      FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
      set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* Hil*/
      converseLib.validationFailed(24); /* enter "S" to change a line of data*/

    end
  end



   /* ------------------------------------------------------------*/
   /* IF LINE SELECTED BUT NO DATA CHANGED INDICATE ERROR.*/
   /* ------------------------------------------------------------*/

  if (FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] == "S"
   && FK02M310.XCTCD[FK02W-DISP-INDEX] == 
  FK02W01.XCTCD[FK02W-DISP-INDEX]
   && FK02M310.FK-VEND-NM[FK02W-DISP-INDEX] == 
  FK02W01.FK-VEND-NM[FK02W-DISP-INDEX]
   && FK02M310.FK-VEND-SNM[FK02W-DISP-INDEX] == 
  FK02W01.FK-VEND-SNM[FK02W-DISP-INDEX]
   && FK02M310.FK-VEND-CD[FK02W-DISP-INDEX] == 
  FK02W01.FK-VEND-CD[FK02W-DISP-INDEX])

    FKWREC.XXX-MOD-ID = "3520"; /* Module identification*/
    set FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* Hil*/
    converseLib.validationFailed(25); /* enter "S" to change a line of data*/

  end
end // end FK02-3520

// Process valid input request
Function FK02-3600()
   /* ------------------------------------------------------------*/
   /* If material manager changed, exit to display map.*/
   /* ------------------------------------------------------------*/

  if (FK02M310.FK-MAT-MGR-ID != FK02W01.FK-MAT-MGR-ID)
    FK02W00.FK02W-REQUEST-DATA-SW = "Y"; /* rqst for data switch*/


    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/

  if (FK02M310.FK-MAT-MGR-ID != FK02W01.FK-MAT-MGR-ID) /* mat manager chngd*/
    FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Format the map switch*/
    return;
  end

  if (converseVar.eventKey is pf7)
    FK02W00.XXXTSPAG = FK02W00.XXXTSPAG - 1; /* DECREMENT PAGE NUMBER*/
    FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Format the map switch*/

    return;
  end

  if (converseVar.eventKey is pf8)
    FK02W00.XXXTSPAG = FK02W00.XXXTSPAG + 1; /* INCREMENT PAGE NUMBER*/
    FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Format the map switch*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* initialize display index and process all 'S'elected lines*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-DISP-INDEX = 1;
  while (FK02W-DISP-INDEX <= 14)
    if (FK02M310.FK02M-SELECT[FK02W-DISP-INDEX] == "S")

   /* ------------------------------------------------------------*/
   /* Update the changed data in the table row.*/
   /* ------------------------------------------------------------*/

      FK02-3610(); /* Update table row*/

      /* ------------------------------------------------------------*/
       /* Indicate that the table update was successfully completed.*/
      /* ------------------------------------------------------------*/

      FK02W00.FK02W-REQUEST-DATA-SW = "Y"; /**/

      FKWREC.XXX-MOD-ID = "3600"; /* Module identification*/
      FKWREC.XXXMSGNO = 1; /* Table update was completed*/


      /* ------------------------------------------------------------*/
       /* Commit all changes made to protected resources.*/
      /* ------------------------------------------------------------*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all changes*/
    end
    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* inc iX*/

  end


end // end FK02-3600

// Update the changed table row
Function FK02-3610()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/


  VVNDR001.FK-VEND-CD = FK02M310.FK-VEND-CD[FK02W-DISP-INDEX]; /**/
  VVNDR001.FK-VEND-SNM = FK02M310.FK-VEND-SNM[FK02W-DISP-INDEX]; /**/
  VVNDR001.FK-VEND-NM = FK02M310.FK-VEND-NM[FK02W-DISP-INDEX]; /**/
  VVNDR001.XCTCD = FK02M310.XCTCD[FK02W-DISP-INDEX]; /**/
  VVNDR001.FK-MAT-MGR-ID = FK02M310.FK-MAT-MGR-ID; /**/
  VVNDR001.FK-NIKE-MGR-ID = COMMAREA.CAUSERID; /* nike manager cd*/

  VVNDR001.ZZZCHGCT = FK02W01.ZZZCHGCT[FK02W-DISP-INDEX]; /**/

  VVNDR001.ZZZSDT = XX0XW01.XX0XWDAT; /* start  date*/
  VVNDR001.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VVNDR001.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6180" ("U ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FK02W00.FK02W-REQUEST-DATA-SW = "Y"; /**/

      FKWREC.XXX-MOD-ID = "3610"; /* Module identification*/
      FKWREC.XXXMSGNO = 12; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "3610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-3610

// Process DELETE map
Function FK02-4000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FK02-4100(); /* Obtain the data to display*/

  FK02-4200(); /* Format and display the map*/

  FK02-4300(); /* Check attention identifier*/

  FK02-4400(); /* Reset fields to normal intensity*/

  FK02-4500(); /* Verify the entered data*/

  FK02-4600(); /* Process valid input request*/


end // end FK02-4000

// Obtain the data to display
Function FK02-4100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.FK02W-REQUEST-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FK02W00.XXXTSLEN = 736; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK02W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  FK02-4110(); /* Purge any temporary storage*/

  FK02W01.FK-MAT-MGR-ID = FK02M410.FK-MAT-MGR-ID;

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FK02-4120(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-DISP-INDEX = 1; /* Display line index*/
  FK02W00.FK02W-END-CURSOR-SW = "N"; /* End of cursor switch*/

  while (FK02W00.FK02W-END-CURSOR-SW == "N" /* Until end of cursor*/
  )
    FK02-4130(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (FK02W00.FK02W-END-CURSOR-SW == "N") /* Not end of cursor*/
      FK02-4170(); /* Check for contracts*/
      FK02-4140(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (FK02W00.FK02W-DISP-INDEX > 14) /* Page is full*/

      FK02-4150(); /* Add page to temporary storage*/

      FK02W00.FK02W-DISP-INDEX = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.FK02W-DISP-INDEX > 1) /* Page was formatted*/
    FK02-4150(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FK02-4160(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.TA5TSQIX == 0) /* No pages formatted*/

    if (FKWREC.XXXMSGNO != 1) /* SUCESSFUL UPDATE MESS NOT SENT*/
      FKWREC.XXX-MOD-ID = "4100"; /* Module identification*/
      FKWREC.XXXMSGNO = 18; /* No data was found to display*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-REQUEST-DATA-SW = "N"; /* Request for data switch*/
  FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Request for data switch*/


end // end FK02-4100

// Purge any temporary storage
Function FK02-4110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FK02W01 empty; /* M310 display storage*/

  FK02W00.FK02W-TS-UPDATE-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK02W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FK02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "4110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M410"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-4110

// Select set and open cursor
Function FK02-4120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VVNDR001 empty; /* Clear row storage area*/

  VVNDR001.FK-MAT-MGR-ID = FK02W01.FK-MAT-MGR-ID; /* mat manager*/


  try
    call "IO6180" ("S1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "4120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-4120

// Fetch next row in the cursor
Function FK02-4130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6180" ("N1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FK02W00.FK02W-END-CURSOR-SW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "4130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-4130

// Save data in display storage
Function FK02-4140()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.TA5TSQIX > 0          /* Not the first page*/
   && FK02W00.FK02W-DISP-INDEX == 1 /* and first line on page*/
  )                                
    FK02W01.FK-MAT-MGR-ID = VVNDR001.FK-MAT-MGR-ID;

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  FK02W01.FK-VEND-CD[FK02W-DISP-INDEX] = VVNDR001.FK-VEND-CD;
  FK02W01.FK-VEND-SNM[FK02W-DISP-INDEX] = VVNDR001.FK-VEND-SNM;
  FK02W01.FK-VEND-NM[FK02W-DISP-INDEX] = VVNDR001.FK-VEND-NM;
  FK02W01.XCTCD[FK02W-DISP-INDEX] = VVNDR001.XCTCD;
  FK02W01.FK02M-CONT-FL[FK02W-DISP-INDEX] = FK02W00.FK02M-CONT-FL;
  FK02W01.ZZZCHGCT[FK02W-DISP-INDEX] = VVNDR001.ZZZCHGCT;

  FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* increment ix*/


end // end FK02-4140

// Add page to temporary storage
Function FK02-4150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FK02W01.XXXTSLEN = FK02W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FK02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FK02W01 empty; /* M310 display storage*/

    FK02W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "4150"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M410"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-4150

// Close selected set cursor
Function FK02-4160()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6180" ("C1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "4160"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-4160

// Select exists DCMPNT.VCTRCT01
Function FK02-4170()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VCTRCT01 empty; /* Clear row storage area*/
  set FK02W02 empty; /* IOmod parameters*/

  XX0XS01(); /* Get current date and time*/

  VCTRCT01.FK-VEND-CD = VVNDR001.FK-VEND-CD; /* Vendor code*/
  FK02W02.FK02W-DATE = XX0XW01.XX0XWDAT; /* Date*/
  FK02W02.FK02W-FUNC = "T2"; /* Function code*/


  try
    call "IO6650" (FK02W02, SQLCA, VCTRCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/

      if (FK02W02.FK02W-COUNT > 0) /* If records were found*/
        FK02W00.FK02M-CONT-FL = "Y"; /* Contract exists*/
      else
        FK02W00.FK02M-CONT-FL = "N"; /* Contract does not exist*/
      end

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "4170"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT EXIST DCMPNT.VCTRCT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTRCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTRCT01.VCTRCT01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-4170

// Format and converse del map
Function FK02-4200()
  if (converseVar.validationMsgNum != 0) /* error to display*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  if (FK02W00.FK02W-REQUEST-DATA-SW == "Y"
   || converseVar.validationMsgNum == 0)
    if (FK02W00.FK02M-FMAT-MAP-SW == "Y")
      FK02-4210();
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FK02M410.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FK02M410.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK02M410.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK02M410.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FK02M410.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/

    set FK02M410 alarm; /* Indicate sound alarm*/

  else

    if (FK02M410.FK-MAT-MGR-ID <= " ") /* DETERMINE cursor position*/
      set FK02M410.FK-MAT-MGR-ID cursor; /* set cursor position*/
    else
      set FK02M410.FK-MAT-MGR-ID cursor; /* set cursor position*/
    end
  end





  converse FK02M410 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FK02M410.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK02M410.CAITEM; /* Application data*/


end // end FK02-4200

// Format the display data
Function FK02-4210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FK02M410 initial; /* M410 input/output area*/

  FK02W00.FK02M-FMAT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FK02W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FK02W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/


      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FK02W00.XXXTSPAG > FK02W00.TA5TSQIX) /* Desired greater highest*/
        FK02W00.XXXTSPAG = FK02W00.TA5TSQIX; /* Default to highest*/
      end

      FK02S-020(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FK02M410.XXXLITPG skip; /* "PAGE" literal*/
    FK02M410.XXXTSPAG = FK02W00.XXXTSPAG; /* Current page*/
    set FK02M410.XXXLITOF skip; /* "OF" literal*/
    FK02M410.TA5TSQIX = FK02W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (FK02W01.FK-MAT-MGR-ID <= " ") /* mat manager not present*/
    set FK02M410.FK-MAT-MGR-ID cursor; /* Position cursor*/
  end

  FK02M410.FK-MAT-MGR-ID = FK02W01.FK-MAT-MGR-ID;

  FK02W00.FK02W-DISP-INDEX = 1; /* Initialize line index*/

  while (FK02W00.FK02W-DISP-INDEX <= 14) /* Until screen is full*/
    if (FK02W01.FK-VEND-CD[FK02W-DISP-INDEX] > " ") /* or end of data*/

      if (FK02W00.FK02W-DISP-INDEX == 1) /* First select field*/

        set FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] cursor, normal; /* pos crsr*/
      else
        set FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] normal; /* Unprotect*/

      end

      FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] = FK02W01.FK02M-SELECT[FK02W-DISP-INDEX];
      FK02M410.FK-VEND-CD[FK02W-DISP-INDEX] = FK02W01.FK-VEND-CD[FK02W-DISP-INDEX]; /* vendor short n*/
      FK02M410.FK-VEND-SNM[FK02W-DISP-INDEX] = FK02W01.FK-VEND-SNM[FK02W-DISP-INDEX]; /* vendor short n*/
      FK02M410.FK-VEND-NM[FK02W-DISP-INDEX] = FK02W01.FK-VEND-NM[FK02W-DISP-INDEX]; /* vendor descripti*/
      FK02M410.XCTCD[FK02W-DISP-INDEX] = FK02W01.XCTCD[FK02W-DISP-INDEX]; /* country code*/
      FK02M410.FK02M-CONT-FL[FK02W-DISP-INDEX] = FK02W01.FK02M-CONT-FL[FK02W-DISP-INDEX]; /* Cont fl*/

    else
      set FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] invisible, protect; /**/
    end

    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* increment x*/

  end


end // end FK02-4210

// Check attention identifier
Function FK02-4300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = "FK02"; /* to applicaiton*/
    COMMAREA.CAITEM = "D"; /* item*/
    set FKWREC empty;
    FKWREC.FK-MAT-MGR-ID = FK02M410.FK-MAT-MGR-ID;

    XSFKS01(); /* Exit to another application*/

    set FK02M410.CATOAP cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FK02M410.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-MAT-MGR-ID = FK02M410.FK-MAT-MGR-ID;

      COMMAREA.CATOAP = FK02M410.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK02M410.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FK02M410.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "4300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* FK0B requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* FK0E requested*/
   || converseVar.eventKey is pf13 /* FK0F requested*/
   || converseVar.eventKey is pf14 /* FK0G requested*/
   || converseVar.eventKey is pf15 /* FK0H requested*/
   || converseVar.eventKey is pf18) /* FK03 requested*/

    set FKWREC empty;
    FKWREC.FK-MAT-MGR-ID = FK02M410.FK-MAT-MGR-ID;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK02M410"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
      COMMAREA.CAITEM = FK02M410.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK02M410.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0E"; /* TO application*/
      COMMAREA.CAITEM = FK02M410.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0F"; /* TO application*/
      COMMAREA.CAITEM = FK02M410.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0G"; /* TO application*/
      COMMAREA.CAITEM = FK02M410.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FK0H"; /* TO application*/
      COMMAREA.CAITEM = FK02M410.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FK03"; /* TO application*/
      COMMAREA.CAITEM = FK02M410.CAITEM; /* item*/
    end

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* FRWD requested*/
   && converseVar.eventKey not pf8)  /* BACK requested*/

    FKWREC.XXX-MOD-ID = "4300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FK02-4300

// Reset highlighted fields
Function FK02-4400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  set FK02M410.FK-MAT-MGR-ID initialAttributes; /* materiL MANAGER ID*/

  FK02W00.FK02W-DISP-INDEX = 1; /* Initialize line index*/

  while (FK02W00.FK02W-DISP-INDEX <= 14 /* Until end of lines*/
   && FK02M410.FK-VEND-CD[FK02W-DISP-INDEX] > " ") /* or end f display*/

    set FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] initialAttributes;
    set FK02M410.FK02M-CONT-FL[FK02W-DISP-INDEX] initialAttributes;

    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX + 1; /* Incr INDEX*/

  end

  set FK02M410.CATOAP initialAttributes; /* TO application*/
  set FK02M410.CAITEM initialAttributes; /* Application data*/


end // end FK02-4400

// Verify data that was entered
Function FK02-4500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FK02M410.CAITEM > " ") /* Application data was entered*/

    FKWREC.XXX-MOD-ID = "4500"; /* Module identification*/
    set FK02M410.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* Verify any scroll request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    FK02-4510(); /* Verify scroll request*/
  else
    if (FK02W00.TA5TSQIX > 0) /* page was formatted*/

      FK02W00.FK02W-DISP-INDEX = 14; /* initialize line index*/

      while (FK02W00.FK02W-DISP-INDEX > 0) /* until end of lines*/
        FK02-4520(); /* verify data in line*/
        FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX - 1; /* dec lin*/
      end
    end


    /* ------------------------------------------------------------*/
     /* Verify the MATERIAL MANAGER CODE.*/
    /* ------------------------------------------------------------*/

    if (FK02M410.FK-MAT-MGR-ID == " " /* IF MATERIAL MANAGER CODE MISSING*/
     || FK02M410.FK-MAT-MGR-ID == "*") /* IF MATERIAL MANAGER CODE WILDCARD*/

      FKWREC.XXX-MOD-ID = "4500"; /* Module identification*/
      set FK02M410.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Field missing or invalid*/

    end
  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

  FK02W00.FK02W-NBR-SEL = 0; /* initialize SELECT COUNT*/
  FK02W00.FK02W-SEL-CHGD-SW = "N"; /* initialize SELECT CHGD SWITCH*/

  if (FK02W00.FK02W-VERIFY-DEL-SW == "Y") /* VERIFY DELETE*/

    FK02W00.FK02W-DISP-INDEX = 14; /* initialize line index*/

    while (FK02W00.FK02W-DISP-INDEX > 0) /**/
      if (FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] == "S")
        FK02W00.FK02W-NBR-SEL = FK02W-NBR-SEL + 1; /* ACCUM SELECTS*/
      end
      if (FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] != 
      FK02W01.FK02M-SELECT[FK02W-DISP-INDEX]) /* IF SELECT CHANGED*/

        FK02W00.FK02W-SEL-CHGD-SW = "Y"; /* SET SELECT CHANGED SWITC*/
        FK02W01.FK02M-SELECT[FK02W-DISP-INDEX] = FK02M410.FK02M-SELECT[FK02W-DISP-INDEX]; /* UPDATE WORKING STOR*/

      end
      FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX - 1; /* dec lin*/

    end
  end

  if (FK02W00.FK02W-SEL-CHGD-SW == "Y") /* IF SELECTS CHANGED*/
    if (FK02W00.FK02W-NBR-SEL > 0) /* IF NUMBER OF SELECTS GREATER THAN 0.*/
      FKWREC.XXX-MOD-ID = "4500"; /* Module identification*/
      converseLib.validationFailed(30); /* PRESS ENTER TO CONTINUE PA2 CANCL*/
      exit stack; /* Exit to display mESSAGE*/
    else
      FK02W00.FK02W-VERIFY-DEL-SW = "N"; /* RESET VERIFY DEL SWITCH*/
      exit stack; /* Exit to display map*/
    end

  end
end // end FK02-4500

// Verify scroll request
Function FK02-4510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK02W00.XXXTSPAG < 2)       /* and no previous pages*/

    FKWREC.XXX-MOD-ID = "4510"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK02W00.XXXTSPAG >= FK02W00.TA5TSQIX) /* and no more pages*/

    FKWREC.XXX-MOD-ID = "4510"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FK02W00.FK02W-DISP-INDEX = 14; /* Initialize line index*/

  while (FK02W00.FK02W-DISP-INDEX > 0) /* Until end of lines*/

    if (FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] > " "
    )
      FKWREC.XXX-MOD-ID = "4510"; /* Module identification*/
      set FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* Highl*/
      converseLib.validationFailed(19); /* PF KEYS CAN'T BE USED WITH LIST RQST*/

    end

    FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX - 1; /* Decr*/

  end

  if (FK02M410.FK-MAT-MGR-ID != FK02W01.FK-MAT-MGR-ID) /* MAT MGR CHNG*/

    FKWREC.XXX-MOD-ID = "4510"; /* Module identification*/
    set FK02M410.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/

  end


end // end FK02-4510

// VERIFY DATA IN LINE
Function FK02-4520()
   /* ------------------------------------------------------------*/
   /* Verify no select fields.*/
   /* ------------------------------------------------------------*/

  if (FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] != "S"
   && FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] != " ")

    FKWREC.XXX-MOD-ID = "4520";
    set FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* HILITE*/
    converseLib.validationFailed(13); /* ONLY 'S' MAY BE USED TO SELECT A LINE*/
  end

  if (FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] != "S")
    return;
  end


   /* ------------------------------------------------------------*/
   /* Verify no contracts exist for this vendor.*/
   /* ------------------------------------------------------------*/

  FK02-4521(); /* Check for contracts*/


   /* ------------------------------------------------------------*/
   /* Verify no materials exist for this vendor.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;
  VMATRL01.FK-VEND-CD = FK02M410.FK-VEND-CD[FK02W-DISP-INDEX];
  VMATRL01.FK-MAT-NBR = "*";

   /* ------------------------------------------------------------*/
   /* DECLARE CURSOR FOR MATERIAL TABLE*/
   /* ------------------------------------------------------------*/

  try
    call "IO6190" ("S1", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, CONTINUE process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    /* next sentence                /* continue process*/

  else
    /* ------------------------------------------------------------*/
     /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    FKWREC.XXX-MOD-ID = "4520"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "DECLARE CURSOR ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
    TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
    TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Table KEY*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* FETCH FIRST RECORD-MATERIAL TABLE*/
   /* ------------------------------------------------------------*/

  try
    call "IO6190" ("N1", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, CONTINUE process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      FKWREC.XXX-MOD-ID = "4520";
      set FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* HILITE*/
      converseLib.validationFailed(29); /* " MATERIALS EXIST -- CANNOT PROCESS "*/
    else
      if (SQLCA.VAGen_SQLCODE != 100) /* and NOT "NOT FOUND"*/
        FKWREC.XXX-MOD-ID = "4520";
        set FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold; /* HILITE*/
        converseLib.validationFailed(10); /* FATAL ERROR*/
      end
    end
  else
    /* ------------------------------------------------------------*/
     /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    FKWREC.XXX-MOD-ID = "4520"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "FETCH NEXT CURSOR";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
    TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
    TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Table KEY*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* CLOSER MATERIAL TABLE*/
   /* ------------------------------------------------------------*/

  try
    call "IO6190" ("C1", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, CONTINUE process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    /* NEXT SENTENCE*/

  else
    /* ------------------------------------------------------------*/
     /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    FKWREC.XXX-MOD-ID = "4520"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "CLOSE CURSOR";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
    TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
    TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Table KEY*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end
end // end FK02-4520

// Select count DCMPNT.VCTRCT01
Function FK02-4521()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VCTRCT01 empty; /* Clear row storage area*/
  set FK02W02 empty; /* IOmod parameters*/

  XX0XS01(); /* Get current date and time*/

  VCTRCT01.FK-VEND-CD = FK02M410.FK-VEND-CD[FK02W-DISP-INDEX]; /* Vend*/
  VCTRCT01.FK-MAT-CONT-NBR = -1; /* Contract*/
  FK02W02.FK02W-FUNC = "T1"; /* Function code*/


  try
    call "IO6650" (FK02W02, SQLCA, VCTRCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/

      if (FK02W02.FK02W-COUNT > 0) /* If records were found*/
        converseLib.validationFailed(116); /* Contracts exist*/
        FKWREC.XXX-MOD-ID = "4521";
        set FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] cursor, bold;
      end

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "4521"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT COUNT DCMPNT.VCTRCT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTRCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTRCT01.VCTRCT01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-4521

// Process valid input request
Function FK02-4600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* If any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/

  if (FK02M410.FK-MAT-MGR-ID != FK02W01.FK-MAT-MGR-ID) /* mat manager chngd*/
    FK02W00.FK02W-REQUEST-DATA-SW = "Y"; /* request for data switch*/
    FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Format the map switch*/
    FK02W00.FK02W-VERIFY-DEL-SW = "N"; /* VERIFY DELETE SWITCH*/
    return;
  end

  if (converseVar.eventKey is pf7)
    FK02W00.XXXTSPAG = FK02W00.XXXTSPAG - 1; /* DECREMENT PAGE NUMBER*/
    FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Format the map switch*/

    return;
  end

  if (converseVar.eventKey is pf8)
    FK02W00.XXXTSPAG = FK02W00.XXXTSPAG + 1; /* INCREMENT PAGE NUMBER*/
    FK02W00.FK02M-FMAT-MAP-SW = "Y"; /* Format the map switch*/

    return;
  end

   /* ------------------------------------------------------------*/
  if (FK02W00.FK02W-VERIFY-DEL-SW == "N")
    FK02W00.FK02W-VERIFY-DEL-SW = "Y"; /* VERIFY DELETE SWITCH*/
    FK02W00.FK02W-DISP-INDEX = 14; /* INIT LINE INDEX*/
    while (FK02W-DISP-INDEX > 0)
      FK02W01.FK02M-SELECT[FK02W-DISP-INDEX] = FK02M410.FK02M-SELECT[FK02W-DISP-INDEX]; /**/
      if (FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] == "S")
        converseLib.validationFailed(30); /* PRESS ENTER TO CONTINUE,PA2 TO CANCEL*/
      end

      FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX - 1; /* DECR INX*/
    end
    return; /**/
  else
    if (FK02W00.FK02W-VERIFY-DEL-SW == "Y")
      FK02W00.FK02W-DISP-INDEX = 14; /* INITIALIZE LINE INDEX*/
      while (FK02W-DISP-INDEX > 0)
        if (FK02M410.FK02M-SELECT[FK02W-DISP-INDEX] == "S")
          FK02-4610();
        /* ------------------------------------------------------------*/
         /* Indicate that the table update was successfully completed.*/
        /* ------------------------------------------------------------*/

          FK02W00.FK02W-VERIFY-DEL-SW = "N"; /* VERIFY DELETE SWITCH*/
          FK02W00.FK02W-REQUEST-DATA-SW = "Y"; /**/

          FKWREC.XXX-MOD-ID = "4600"; /* Module identification*/
          FKWREC.XXXMSGNO = 1; /* Table update was completed*/


        /* ------------------------------------------------------------*/
         /* Commit all changes made to protected resources.*/
        /* ------------------------------------------------------------*/

          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* Commit all changes*/

        end
        FK02W00.FK02W-DISP-INDEX = FK02W00.FK02W-DISP-INDEX - 1; /* DECR INX*/
      end
    end
  end



end // end FK02-4600

// DELETE THE SELECTED table row
Function FK02-4610()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/


  VVNDR001.FK-VEND-CD = FK02M410.FK-VEND-CD[FK02W-DISP-INDEX]; /**/



   /* ------------------------------------------------------------*/
   /* DELETE the SELECTEd row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6180" ("D ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FK02W00.FK02W-REQUEST-DATA-SW = "Y"; /**/

      FKWREC.XXX-MOD-ID = "4610"; /* Module identification*/
      FKWREC.XXXMSGNO = 12; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "4610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02-4610

// Read temporary storage page
Function FK02S-020()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FK02W01.XXXTSLEN = FK02W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FK02W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FK02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "S020"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M???"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FK02S-020

//*** RECORD=FK02W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK02W00 type basicRecord
  10 FK02M-MAP-SWITCH FK02M-MAP-SWITCH ; 
  10 FK02M-FMAT-MAP-SW FK02M-FMAT-MAP-SW ; 
  10 FK02W-END-CURSOR-SW FK02W-END-CURSOR-SW ; 
  10 FK02W-REQUEST-DATA-SW FK02W-REQUEST-DATA-SW ; 
  10 FK02W-TS-UPDATE-SW FK02W-TS-UPDATE-SW ; 
  10 FK02W-VERIFY-DEL-SW FK02W-VERIFY-DEL-SW ; 
  10 FK02W-DISP-INDEX FK02W-DISP-INDEX ; 
  10 FK02W-SEL-CHGD-SW FK02W-SEL-CHGD-SW ; 
  10 FK02W-NBR-SEL FK02W-NBR-SEL ; 
  10 FK02W-FK-MAT-MGR-ID FK02W-FK-MAT-MGR-ID ; 
  10 FK02M-CONT-FL FK02M-CONT-FL ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
end // end FK02W00

//*** RECORD=FK02W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FK02W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(736) ; 
    10 FK-MAT-MGR-ID FK-MAT-MGR-ID ; 
    10 FK02M-SELECT FK02M-SELECT [14] ; 
    10 FK-VEND-CD FK-VEND-CD [14] ; 
    10 FK-VEND-SNM FK-VEND-SNM [14] ; 
    10 FK-VEND-NM FK-VEND-NM [14] ; 
    10 XCTCD XCTCD [14] ; 
    10 FK02M-CONT-FL FK02M-CONT-FL [14] ; 
    10 ZZZCHGCT ZZZCHGCT [14] ; 
end // end FK02W01

//*** RECORD=FK02W02 ****
// This work area is the first argument that is passed in the
// CALL statement for module IO6650.
// 
// 
//   DATE       NAME      COMMENT
// --------    ------     -------------------------------------
// 03/01/93    JALLE1     Initial record creation.
// ***********************
Record FK02W02 type basicRecord
  10 FK02W-FUNC FK02W-FUNC ; 
  10 FK02W-DATE FK02W-DATE ; 
  10 FK02W-COUNT FK02W-COUNT ; 
  10 FK02W-INDICATOR FK02W-INDICATOR ; 
end // end FK02W02

// Contract exists flag
DataItem FK02M-CONT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem FK02M-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem FK02M-MAP-SWITCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FK02M-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic count field
DataItem FK02W-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generic date
DataItem FK02W-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map line to be displayed index
DataItem FK02W-DISP-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of cursor switch
DataItem FK02W-END-CURSOR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FK-MAT-MGR-ID
DataItem FK02W-FK-MAT-MGR-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// I/O module function
DataItem FK02W-FUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Indicator variable
DataItem FK02W-INDICATOR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map line to be displayed index
DataItem FK02W-NBR-SEL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request for data switch
DataItem FK02W-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map line to be displayed index
DataItem FK02W-SEL-CHGD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage update switch
DataItem FK02W-TS-UPDATE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage update switch
DataItem FK02W-VERIFY-DEL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

