package fk01;

import corpcom2.XX0XW01;
import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fk.common.FK-MAT-MGR-ID;
import fk.common.FK-NIKE-MGR-ID;
import fk.common.FK-VEND-CD;
import fk.common.FK-VEND-NM;
import fk.common.FK-VEND-SNM;
import fk.common.FKWREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VVNDR001;
import vv.common.VVNDR001-GROUP;
//*** PROGRAM=FK01 ****
// THIS APPLICATION IS PART OF THE COMPONENTS FORECASTING
// SYSTEM.
// 
// THIS APPLICATION ALLOWS USERS TO DISPLAY ALL VENDORS
// ASSOCIATED WITH AN ENTERED MATERIAL MANAGER.  IF THE USER
// SELECTS A VENDOR, A NEW MATERIAL MANAGER MAY BE ASSIGNED TO
// THE VENDOR.  USERS WILL BE ALLOWED TO PF7 AND PF8 TO SCROLL
// THROUGH ALL THE VENDORS.
// 
// THE USER MAY EXIT TO ANY ALLOWED APPLICATION VIA FASTPATH
// OR PFKEYS, WITH THE OPTION FIELD AVAILABLE FOR USE WITH ANY
// APPLICATION TRANSFER.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/30/92  JALLE1  New application.
// y2kfix   11-06-97  oricha  y2k modifications.  regen only
//                            for xx0xs01 century adjustment.
// *********************
Program FK01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK01W00 FK01W00; // record
  FK01W01 FK01W01; // record
  FKWREC FKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VVNDR001 VVNDR001; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK01M.FK01M110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK01M110 initial; /* M100 input/output area*/
    set FK01W00 empty; /* Application working storage*/
    set FK01W01 empty; /* Application display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* TA0050 parameters*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Use data passed in COMMAREA as initial key.*/
     /* ------------------------------------------------------------*/
    ;
    FK01W00.FK01W-REQUEST-DATA-SW = "N"; /* No data to get*/
    FK01W00.FK01W-FMAT-MAP-SW = "N"; /* Don't format the map*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK01-0001; /* Main process to display a map*/
    ;
    ;
    FK01-0001: FK01-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK01-0001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK01

// Main process to display a map
Function FK01-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK01-1000(); /* Obtain the data to display*/
  ;
  FK01-2000(); /* Format and display the map*/
  ;
  FK01-3000(); /* Check attention identifier*/
  ;
  FK01-4000(); /* Reset fields to normal intensity*/
  ;
  FK01-5000(); /* Verify the entered data*/
  ;
  FK01-6000(); /* Process valid input request*/
  ;
  ;
end // end FK01-0001

// Obtain data to display
Function FK01-1000()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK01W00.FK01W-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* --------------------------------------------------------------*/
  ;
  FK01W00.XXXTSLEN = 1148; /* Temporary storage page length*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* --------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK01W00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* --------------------------------------------------------------*/
  ;
  FK01-1100(); /* Purge temp storage*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Declare and process a cursor to get all vendors from the*/
   /* DCMPNT.VVNDR001 table for the enterd material manager.*/
   /* --------------------------------------------------------------*/
  ;
  FK01W00.FK01W-IDX = 1; /* Init index*/
  FK01W00.FK01W-END-VENDOR-SW = "N"; /* Init end of cursor switch*/
  ;
  FK01-1200(); /* Declare DCMPNT.VVNDR001 cursor*/
  FK01-1300(); /* Fetch DCMPNT.VVNDR001 cursor*/
  ;
  while (FK01W00.FK01W-END-VENDOR-SW != "Y") /* Until end of cursor*/
    ;
    ;
    /* Save vendor record in display storage*/
    ;
    if (FK01W00.FK01W-IDX == 1) /* If first record*/
      FK01W01.FK-MAT-MGR-ID = VVNDR001.FK-MAT-MGR-ID; /* Mgr id*/
    end
    FK01W01.VVNDR001-GROUP[FK01W-IDX] = VVNDR001.VVNDR001-GROUP;
    ;
    ;
    ;
    FK01W00.FK01W-IDX = FK01W00.FK01W-IDX + 1; /* Increment index*/
    ;
    if (FK01W00.FK01W-IDX > 15) /* If page full*/
      FK01-1400(); /* Add page to temp storage queue*/
      FK01W00.FK01W-IDX = 1;
    end
    ;
    FK01-1300(); /* Fetch DCMPNT.VVNDR001 cursor*/
  end
  ;
  FK01-1500(); /* Close DCMPNT.VVNDR001 cursor*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Add any partially formatted page to temporary storage.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK01W00.FK01W-IDX > 1) /* Data formatted*/
    FK01-1400(); /* Add page to temporary storage queue*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If data was found, save map header information.  Otherwise,*/
   /* set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK01W00.TA5TSQIX == 0) /* If data was not found*/
    ;
    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    set FK01M110.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/
  ;
  FK01W00.FK01W-REQUEST-DATA-SW = "N";
  FK01W00.FK01W-FMAT-MAP-SW = "Y";
  ;
  ;
end // end FK01-1000

// Purge any temporary storage
Function FK01-1100()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FK01W01 empty; /* m110 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK01W00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FK01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK01-1100

// Decl DCMPNT.VVNDR001 csr
Function FK01-1200()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set VVNDR001 empty; /* Clear storage record*/
  ;
  VVNDR001.FK-MAT-MGR-ID = FK01M110.FK-MAT-MGR-ID; /* Curr mat mgr*/
  ;
  try
    call "IO6180" ("S1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK01W00.FK01W-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECL DCMPNT.VVNDR001 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK01-1200

// Fetch DCMPNT.VVNDR001 csr
Function FK01-1300()
   /* ------------------------------------------------------------*/
   /* Fetch the next record from the cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6180" ("N1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/
      FK01W00.FK01W-END-VENDOR-SW = "Y"; /* Set end of cursor sw*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK01W00.FK01W-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DCMPNT.VVNDR001 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK01-1300

// Add page to temporary storage
Function FK01-1400()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK01W01.XXXTSLEN = FK01W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FK01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FK01W01 empty; /* m110 display storage*/
    ;
    FK01W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK01-1400

// Close DCMPNT.VVNDR001 csr
Function FK01-1500()
   /* ------------------------------------------------------------*/
   /* Close the group cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6180" ("C1", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK01W00.FK01W-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1500"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DCMPNT.VVNDR001 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK01-1500

// Format and converse the map
Function FK01-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK01W00.FK01W-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/
    ;
    FK01-2100(); /* Format the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK01M110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK01M110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK01M110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    set FK01M110 alarm; /* Indicate sound alarm*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK01M110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK01M110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (no detail lines formatted to temporary storage).*/
   /* ------------------------------------------------------------*/
  ;
  if (FK01W00.TA5TSQIX == 0) /* No data formatted*/
    ;
    set FK01M110.XXXTSPAG invisible, skip;
    set FK01M110.TA5TSQIX invisible, skip;
    ;
    FK01W00.FK01W-IDX = 1; /* Init index*/
    ;
    while (FK01W00.FK01W-IDX <= 15) /* Do this for each line*/
      ;
      set FK01M110.FK01M-SEL[FK01W-IDX] invisible, skip;
      set FK01M110.FK-VEND-CD[FK01W-IDX] invisible, skip;
      set FK01M110.FK-VEND-SNM[FK01W-IDX] invisible, skip;
      set FK01M110.FK01M-NEW-MTL-MGR[FK01W-IDX] invisible, skip;
      FK01W00.FK01W-IDX = FK01W00.FK01W-IDX + 1; /* Increment*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (but there is at least partial data on the map).*/
   /* ------------------------------------------------------------*/
  ;
  FK01W00.FK01W-IDX = 1; /* Init index*/
  ;
  while (FK01W00.FK01W-IDX <= 15) /* Do this for each line*/
    ;
    if (FK01M110.FK-VEND-CD[FK01W-IDX] == " ") /* No data*/
      ;
      set FK01M110.FK01M-SEL[FK01W-IDX] invisible, skip;
      set FK01M110.FK-VEND-CD[FK01W-IDX] invisible, skip;
      set FK01M110.FK-VEND-SNM[FK01W-IDX] invisible, skip;
      set FK01M110.FK01M-NEW-MTL-MGR[FK01W-IDX] invisible, skip;
    end
    ;
    FK01W00.FK01W-IDX = FK01W00.FK01W-IDX + 1; /* Increment*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no message to display*/
    if (FK01M110.FK-MAT-MGR-ID == " ") /* If no mtrl mgr*/
      ;
      set FK01M110.FK-MAT-MGR-ID cursor;
    else
      ;
      set FK01M110.FK01M-SEL[1] cursor;
    end
  end
  ;
  ;
  converse FK01M110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK01M110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK01M110.CAITEM; /* Application data*/
  ;
  ;
end // end FK01-2000

// Format the data to display
Function FK01-2100()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK01M110 initial; /* Initialize map*/
  ;
  FK01W-FMAT-MAP-SW = "N"; /* Format map switch*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK01W00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FK01W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      if (FK01W00.XXXTSPAG > FK01W00.TA5TSQIX) /* Desired page > highest*/
        FK01W00.XXXTSPAG = FK01W00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FK01-2110(); /* Obtain temp storage page*/
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/
  ;
  FK01M110.FK-MAT-MGR-ID = FK01W01.FK-MAT-MGR-ID; /* Mgr id*/
  ;
  FK01M110.XXXTSPAG = FK01W00.XXXTSPAG; /* Current page*/
  FK01M110.TA5TSQIX = FK01W00.TA5TSQIX; /* Max page*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/
  ;
  FK01W00.FK01W-IDX = 1; /* Initialize idx*/
  ;
  while (FK01W00.FK01W-IDX <= 15) /* For each line*/
    ;
    FK01M110.FK-VEND-CD[FK01W-IDX] = FK01W01.FK-VEND-CD[FK01W-IDX]; /* Color grp code*/
    FK01M110.FK-VEND-SNM[FK01W-IDX] = FK01W01.FK-VEND-SNM[FK01W-IDX]; /* Color grp desc*/
    ;
    FK01W00.FK01W-IDX = FK01W00.FK01W-IDX + 1;
  end
  ;
  ;
end // end FK01-2100

// Read page from temp storage
Function FK01-2110()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK01W01.XXXTSLEN = FK01W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FK01W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FK01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "2110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK01-2110

// Check attention identifier
Function FK01-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    COMMAREA.CATOAP = "FK01"; /* to applicaiton*/
    COMMAREA.CAITEM = " "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK01M110.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK01M110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty; /* Initialize fkwrec*/
      COMMAREA.CATOAP = FK01M110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK01M110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK01M110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, process PF key.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* FK0B requested*/
   || converseVar.eventKey is pf4) /* MSTR MN requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK01M110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
      COMMAREA.CAITEM = "    "; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK requested*/
   && converseVar.eventKey not pf8)  /* FWRD requested*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK01-3000

// Reset Highlighted fields
Function FK01-4000()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK01M110.FK-MAT-MGR-ID initialAttributes; /* Current mtl mgr*/
  set FK01M110.XXXTSPAG initialAttributes; /* Page nbr*/
  set FK01M110.TA5TSQIX initialAttributes; /* Max page*/
  ;
  FK01W00.FK01W-IDX = 1; /* Initialize index*/
  ;
  while (FK01W00.FK01W-IDX <= 15) /* For each line*/
    set FK01M110.FK01M-SEL[FK01W-IDX] initialAttributes; /* Selection*/
    set FK01M110.FK-VEND-CD[FK01W-IDX] initialAttributes; /* Vendor code*/
    set FK01M110.FK-VEND-SNM[FK01W-IDX] initialAttributes; /* Vendor short name*/
    set FK01M110.FK01M-NEW-MTL-MGR[FK01W-IDX] initialAttributes; /* New mtl mgr*/
    FK01W00.FK01W-IDX = FK01W00.FK01W-IDX + 1;
  end
  ;
  set FK01M110.CATOAP initialAttributes; /* To application*/
  set FK01M110.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FK01-4000

// Verify entered fields
Function FK01-5000()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK01M110.CAITEM > " ") /* Application data was entered*/
    ;
    set FK01M110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Pf7 pressed*/
   || converseVar.eventKey is pf8) /* Pf8 pressed*/
    ;
    FK01-5100(); /* Verify scroll request*/
  end
  ;
   /* ---------------------------------------------------------------*/
   /* If the header was changed, verify it.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK01M110.FK-MAT-MGR-ID != FK01W01.FK-MAT-MGR-ID) /* mgr changed*/
    ;
    if (FK01M110.FK-MAT-MGR-ID == " ") /* Mgr id not entered*/
      ;
      converseLib.validationFailed(8); /* Required field missing or invalid*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      set FK01M110.FK-MAT-MGR-ID cursor, bold; /* Highlight*/
    end
    return;
  end
  ;
  ;
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify the select fields.*/
   /* ---------------------------------------------------------------*/
  ;
  FK01W00.FK01W-IDX = 15; /* Initialize map index*/
  ;
  while (FK01W00.FK01W-IDX > 0) /* Check each map field*/
    ;
    ;
    /* make sure new mgr id is entered if row selected*/
    ;
    if (FK01M110.FK01M-SEL[FK01W-IDX] == "S" /* If selected*/
     && FK01M110.FK01M-NEW-MTL-MGR[FK01W-IDX] == " ") /* but no change*/
      ;
      converseLib.validationFailed(25); /* No changes have been made to this row*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      set FK01M110.FK01M-SEL[FK01W-IDX] cursor, bold; /* Highlight*/
      set FK01M110.FK01M-NEW-MTL-MGR[FK01W-IDX] bold; /* Highlight*/
    end
    ;
    ;
    /* make sure select field is s or ' '*/
    ;
    if (FK01M110.FK01M-SEL[FK01W-IDX] != "S" /* If not selected*/
     && FK01M110.FK01M-SEL[FK01W-IDX] != " ") /* and not blank*/
      ;
      converseLib.validationFailed(13); /* Only 's' may be used to select a line*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      set FK01M110.FK01M-SEL[FK01W-IDX] cursor, bold; /* Highlight*/
    end
    ;
    ;
    /* make sure select is entered if new mgr id is entered*/
    ;
    if (FK01M110.FK01M-SEL[FK01W-IDX] == " " /* If not selected*/
     && FK01M110.FK01M-NEW-MTL-MGR[FK01W-IDX] != " ") /* but a change*/
      ;
      converseLib.validationFailed(24); /* Enter 's' to change a row of data*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      set FK01M110.FK01M-SEL[FK01W-IDX] cursor, bold; /* Highlight*/
      set FK01M110.FK01M-NEW-MTL-MGR[FK01W-IDX] bold; /* Highlight*/
    end
    ;
    ;
    FK01W00.FK01W-IDX = FK01W00.FK01W-IDX - 1; /* Decrement index*/
  end
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
end // end FK01-5000

// Verify scroll request
Function FK01-5100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK01W00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK01W00.XXXTSPAG >= FK01W00.TA5TSQIX) /* and no more pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FK01-5100

// Process valid request
Function FK01-6000()
   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number*/
   /* and exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Back*/
    ;
    FK01W00.FK01W-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK01W00.XXXTSPAG = FK01W00.XXXTSPAG - 1; /* Decrement page to display*/
    ;
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number*/
   /* and exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Forward*/
    ;
    FK01W00.FK01W-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK01W00.XXXTSPAG = FK01W00.XXXTSPAG + 1; /* Decrement page to display*/
    ;
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If key changed exit to obtain the data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK01M110.FK-MAT-MGR-ID != FK01W01.FK-MAT-MGR-ID) /* Mgr id changed*/
    ;
    FK01W00.FK01W-REQUEST-DATA-SW = "Y";
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check to see if data changed.  If it was, update the vendor*/
   /* table.  Do this for each row that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Get time and date*/
  ;
  FK01W00.FK01W-IDX = 1; /* Init index*/
  FK01W00.FK01W-UPDATE-PERFORMED-SW = "N"; /* Init switch*/
  ;
  while (FK01W00.FK01W-IDX <= 15 /* For each line on screen*/
   && FK01M110.FK-VEND-CD[FK01W-IDX] > " ") /* that has a vendor*/
    ;
    if (FK01M110.FK01M-SEL[FK01W-IDX] == "S") /* If line was selected*/
      ;
      FK01-6100(); /* Update DCMPNT.VVNDR001*/
      FK01W00.FK01W-UPDATE-PERFORMED-SW = "Y"; /* Set switch*/
    end
    ;
    FK01W00.FK01W-IDX = FK01W00.FK01W-IDX + 1;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If any updates were performed, set a message and exit to*/
   /* re-obtain the data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK01W00.FK01W-UPDATE-PERFORMED-SW == "Y") /* If updated performed*/
    ;
    FKWREC.XXXMSGNO = 1; /* Update performed*/
    FKWREC.XXX-MOD-ID = "6000"; /* Module identification*/
    ;
    FK01W-REQUEST-DATA-SW = "Y"; /* Re-obtain the data*/
    ;
    return;
  end
  ;
end // end FK01-6000

// Update DCMPNT.VVNDR001
Function FK01-6100()
   /* ------------------------------------------------------------*/
   /* Update DCMPNT.VVNDR001*/
   /* ------------------------------------------------------------*/
  ;
  VVNDR001.VVNDR001-GROUP = FK01W01.VVNDR001-GROUP[FK01W-IDX];
  ;
  VVNDR001.FK-MAT-MGR-ID = FK01M110.FK01M-NEW-MTL-MGR[FK01W-IDX];
  ;
  VVNDR001.FK-NIKE-MGR-ID = FK01M110.FK01M-NEW-MTL-MGR[FK01W-IDX];
  ;
  VVNDR001.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VVNDR001.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  try
    call "IO6180" ("U ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* Normal return code*/
      ;
      FKWREC.XXXMSGNO = 12; /* Data updated by another*/
      FKWREC.XXX-MOD-ID = "6100"; /* Module identification*/
      FK01W00.FK01W-REQUEST-DATA-SW = "Y"; /* Get new data*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      exit stack;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK01W00.FK01W-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "6100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DCMPNT.VVNDR001  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK01-6100

//*** RECORD=FK01W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK01W00 type basicRecord
  10 FK01W-IDX FK01W-IDX ; 
  10 FK01W-REQUEST-DATA-SW FK01W-REQUEST-DATA-SW ; 
  10 FK01W-FMAT-MAP-SW FK01W-FMAT-MAP-SW ; 
  10 FK01W-END-VENDOR-SW FK01W-END-VENDOR-SW ; 
  10 FK01W-UPDATE-PERFORMED-SW FK01W-UPDATE-PERFORMED-SW ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end FK01W00

//*** RECORD=FK01W01 ****
// ------------------------
// Map 110 display storage.
// ------------------------
// ***********************
Record FK01W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1148) ; 
    10 FK-MAT-MGR-ID FK-MAT-MGR-ID ; 
    10 VVNDR001-GROUP VVNDR001-GROUP [15] ; 
      15 FK-VEND-CD FK-VEND-CD ; 
      15 FK-VEND-NM FK-VEND-NM ; 
      15 FK-VEND-SNM FK-VEND-SNM ; 
      15 XCTCD XCTCD ; 
      15 FK01W-MGR-ID FK01W-MGR-ID ; 
      15 FK-NIKE-MGR-ID FK-NIKE-MGR-ID ; 
      15 ZZZSDT ZZZSDT ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end FK01W01

// End of vendor csr switch
DataItem FK01W-END-VENDOR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FK01W-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic index
DataItem FK01W-IDX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fk-mat-mgr-id (for fk01 app)
DataItem FK01W-MGR-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch
DataItem FK01W-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update was performed switch
DataItem FK01W-UPDATE-PERFORMED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

