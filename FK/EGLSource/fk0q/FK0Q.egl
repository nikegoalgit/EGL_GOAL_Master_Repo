package fk0q;

import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCLCD;
import corpx1.XCLDESC;
import corpx1.XCLTBL;
import corpx1.XMGTBL;
import corpx2.XMG-COLR-GRP-CD;
import corpx2.XMG-COLR-GRP-DESC;
import fk.common.FK-DEPT-MAT-DESC;
import fk.common.FK-MAT-NBR;
import fk.common.FK-VEND-CD;
import fk.common.FKWREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VGROUP01;
import vv.common.VMATRL01;
import vv.common.VMCOLR01;
//*** PROGRAM=FK0Q ****
// THIS APPLICATION IS PART OF THE COMPONENTS FORECASTING
// SYSTEM.
// 
// THIS APPLICATION ALLOWS USERS TO INQUIRE UPON ALL COLOR
// GROUPS AND COLORS FOR A GIVEN MATERIAL NUMBER.  USERS WILL
// BE ALLOWED TO ENTER A MATERIAL NUMBER, AND ALL COLOR GROUPS
// AND COLORS FOR THAT MATERIAL WILL BE RETRIEVED FROM THE
// COLOR GROUP (DCMPNT.VGROUP01) AND COLOR (DCMPNT.VMCOLR01)
// TABLES.  USERS WILL BE ALLOWED TO PF7 AND PF8 TO SCROLL
// THROUGH ALL THE COLORS.  USERS MAY ALSO SELECT A COLOR/
// COLOR GROUP ROW AND PFKEY TO ANOTHER APPLICATION, TAKING THE
// SELECTED DATA WITH IT.
// 
// THE USER MAY EXIT TO ANY ALLOWED APPLICATION VIA FASTPATH
// OR PFKEYS, WITH THE OPTION FIELD AVAILABLE FOR USE WITH ANY
// APPLICATION TRANSFER.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      09/03/92  JALLE1  New application.
// FK9994   09/10/93  JALLE1  CSP 4.1 conversion.
// *********************
Program FK0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK0QW00 FK0QW00; // record
  FK0QW01 FK0QW01; // record
  FKWREC FKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VGROUP01 VGROUP01; // record
  VMATRL01 VMATRL01; // record
  VMCOLR01 VMCOLR01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XMGTBL; // table
  use XCLTBL; // table
  use FK0QM.FK0QM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0QM110 initial; /* M100 input/output area*/
    set FK0QW00 empty; /* Application working storage*/
    set FK0QW01 empty; /* Application display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* TA0050 parameters*/
    ;
    set VMATRL01 empty; /* DCMPNT.VMATRL01 record*/
    set VGROUP01 empty; /* DCMPNT.VGROUP01 record*/
    set VMCOLR01 empty; /* DCMPNT.VMCOLR01 record*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Use data passed in COMMAREA as initial key.*/
     /* ------------------------------------------------------------*/
    ;
    FK0QM110.FK-MAT-NBR = FKWREC.FK-MAT-NBR[1]; /* Material nbr*/
    ;
    if (FK0QM110.FK-MAT-NBR != " ") /* Data was passed*/
      FK0QW00.FK0QW-REQUEST-DATA-SW = "Y"; /* Get some data*/
    else
      FK0QW00.FK0QW-REQUEST-DATA-SW = "N"; /* No data to get*/
    end
    ;
    ;
    ;
    FK0QW00.FK0QW-FMAT-MAP-SW = "N"; /* Don't format the map*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0Q-0001; /* Main process to display a map*/
    ;
    ;
    FK0Q-0001: FK0Q-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0Q-0001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0Q

// Main process to display a map
Function FK0Q-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0Q-1000(); /* Obtain the data to display*/
  ;
  FK0Q-2000(); /* Format and display the map*/
  ;
  FK0Q-3000(); /* Check attention identifier*/
  ;
  FK0Q-4000(); /* Reset fields to normal intensity*/
  ;
  FK0Q-5000(); /* Verify the entered data*/
  ;
  FK0Q-6000(); /* Process valid input request*/
  ;
  ;
end // end FK0Q-0001

// Obtain data to display
Function FK0Q-1000()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0QW00.FK0QW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* --------------------------------------------------------------*/
  ;
  FK0QW00.XXXTSLEN = 686; /* Temporary storage page length*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* --------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK0QW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* --------------------------------------------------------------*/
  ;
  FK0Q-1100(); /* Purge temp storage*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Obtain the material description.*/
   /* --------------------------------------------------------------*/
  ;
  FK0Q-1200(); /* Get mtrl desc*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Declare and process a cursor to get all color groups from*/
   /* DCMPNT.VGROUP01.  For every color group record found,*/
   /* a second cursor will be declared on the DCMPNT.VMCOLR01 table*/
   /* to get all colors for the color group.*/
   /* --------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-IDX = 1; /* Init index*/
  FK0QW00.FK0QW-END-VGROUP-SW = "N"; /* Init end of cursor switch*/
  ;
  FK0Q-1300(); /* Declare DCMPNT.VGROUP01 cursor*/
  FK0Q-1400(); /* Fetch DCMPNT.VGROUP01 cursor*/
  ;
  while (FK0QW00.FK0QW-END-VGROUP-SW != "Y") /* Until end of cursor*/
    ;
    FK0Q-1500(); /* Get color data/save record to temp storage*/
    FK0Q-1400(); /* Fetch DCMPNT.VGROUP01 cursor*/
  end
  ;
  FK0Q-1600(); /* Close DCMPNT.VGROUP01 cursor*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Add any partially formatted page to temporary storage.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0QW00.FK0QW-IDX > 1) /* Data formatted*/
    FK0Q-1700(); /* Add page to temporary storage queue*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If data was found, save map header information.  Otherwise,*/
   /* set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0QW00.TA5TSQIX == 0) /* If data was not found*/
    ;
    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    set FK0QM110.FK-MAT-NBR cursor, bold; /* Highlight*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  FK0QW00.FK0QW-FMAT-MAP-SW = "Y";
  ;
  ;
end // end FK0Q-1000

// Purge any temporary storage
Function FK0Q-1100()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0QW01 empty; /* m110 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK0QW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FK0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0Q-1100

// Obtain material description
Function FK0Q-1200()
   /* --------------------------------------------------------------*/
   /* Declare a cursor to get material data.  Fetch 1 row.  Close*/
   /* the cursor.*/
   /* --------------------------------------------------------------*/
  ;
  FK0Q-1210(); /* Declare DMCPNT.VMATRL01 cursor*/
  ;
  FK0Q-1220(); /* Fetch DMCPNT.VMATRL01 cursor*/
  ;
  FK0Q-1230(); /* Close DMCPNT.VMATRL01 cursor*/
end // end FK0Q-1200

// Decl DCMPNT.VMATRL01 csr
Function FK0Q-1210()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set VMATRL01 empty; /* Clear storage record*/
  ;
  VMATRL01.FK-MAT-NBR = FK0QM110.FK-MAT-NBR; /* Material nbr*/
  ;
  try
    call "IO6190" ("S2", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1210"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECL DCMPNT.VMATRL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0Q-1210

// Fetch DCMPNT.VMATRL01 csr
Function FK0Q-1220()
   /* ------------------------------------------------------------*/
   /* Fetch the next record from the cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6190" ("N2", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/
      VMATRL01.FK-DEPT-MAT-DESC = "***************";
      VMATRL01.FK-VEND-CD = " ";
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1220"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DCMPNT.VMATRL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0Q-1220

// Close DCMPNT.VMATRL01 csr
Function FK0Q-1230()
   /* ------------------------------------------------------------*/
   /* Close the set cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6190" ("C2", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1230"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DCMPNT.VMATRL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0Q-1230

// Decl DCMPNT.VGROUP01 csr
Function FK0Q-1300()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set VGROUP01 empty; /* Clear storage record*/
  ;
  VGROUP01.FK-MAT-NBR = FK0QM110.FK-MAT-NBR; /* Material nbr*/
  ;
  try
    call "IO6200" ("S1", SQLCA, VGROUP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECL DCMPNT.VGROUP01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGROUP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VGROUP01.VGROUP01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0Q-1300

// Fetch DCMPNT.VGROUP01 csr
Function FK0Q-1400()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the set cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6200" ("N1", SQLCA, VGROUP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* End of cursor*/
      FK0QW00.FK0QW-END-VGROUP-SW = "Y"; /* Set end of csr switch*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DCMPNT.VGROUP01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGROUP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VGROUP01.VGROUP01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0Q-1400

// Get color data
Function FK0Q-1500()
   /* ------------------------------------------------------------*/
   /* Declare a cursor for the DCMPNT.VMCOLR01 table.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-COLOR-DATA-SW = "N"; /* No data found yet*/
  ;
  FK0Q-1510(); /* Declare DCMPNT.VMCOLR01 csr*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Fetch a record from the DCMPNT.VMCOLR01 table.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-END-VMCOLR-SW = "N"; /* Init end of cursor*/
  FK0Q-1520(); /* Fetch DCMPNT.VMCOLR01 csr*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format records to display storage until end of cursor is found.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0QW00.FK0QW-END-VMCOLR-SW != "Y") /* Until end of cursor*/
    ;
    FK0QW00.FK0QW-COLOR-DATA-SW = "Y"; /* Color data exists*/
    ;
    if (VGROUP01.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD) /* If in table*/
      FK0QW00.XMG-COLR-GRP-DESC = XMGTBL.XMG-COLR-GRP-DESC[sysVar.arrayIndex]; /* Save color group desc*/
    end
    ;
    if (VMCOLR01.XCLCD in XCLTBL.XCLCD) /* If in table*/
      FK0QW00.XCLDESC = XCLTBL.XCLDESC[sysVar.arrayIndex]; /* Color desc*/
    end
    ;
    FK0Q-1530(); /* Format to temporary storage*/
    FK0Q-1520(); /* Fetch DCMPNT.VMCOLR01 csr*/
  end
  ;
  FK0Q-1540(); /* Close DCMPNT.VMCOLR01 csr*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If no DCMPNT.VMCOLR01 data was found, format the*/
   /* color group record to display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0QW00.FK0QW-COLOR-DATA-SW == "N") /* No color data found*/
    ;
    if (VGROUP01.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD) /* If in table*/
      FK0QW00.XMG-COLR-GRP-DESC = XMGTBL.XMG-COLR-GRP-DESC[sysVar.arrayIndex]; /* Save color group desc*/
    end
    ;
    FK0Q-1530(); /* Format to temporary storage*/
  end
  ;
  ;
end // end FK0Q-1500

// Decl DCMPNT.VMCOLR01 csr
Function FK0Q-1510()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set VMCOLR01 empty; /* Clear storage record*/
  ;
  VMCOLR01.FK-MAT-NBR = FK0QM110.FK-MAT-NBR; /* Material nbr*/
  VMCOLR01.XMG-COLR-GRP-CD = VGROUP01.XMG-COLR-GRP-CD; /* Clr group*/
  ;
  try
    call "IO6210" ("S4", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1510"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECL DCMPNT.VMCOLR01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0Q-1510

// Fetch DCMPNT.VMCOLR01 csr
Function FK0Q-1520()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the set cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6210" ("N4", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* End of cursor*/
      FK0QW00.FK0QW-END-VMCOLR-SW = "Y"; /* Set end of csr switch*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1520"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DCMPNT.VMCOLR01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0Q-1520

// Save data in disp storage
Function FK0Q-1530()
   /* --------------------------------------------------------------*/
   /* Format data to the display storage page.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0QW00.FK0QW-IDX == 1) /* If first record on page*/
    ;
    FK0QW01.FK-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FK0QW01.FK-MAT-NBR = FK0QM110.FK-MAT-NBR; /* Mtrl nbr*/
    FK0QW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Desc*/
  end
  ;
  FK0QW01.XMG-COLR-GRP-CD[FK0QW-IDX] = VGROUP01.XMG-COLR-GRP-CD;
  FK0QW01.XMG-COLR-GRP-DESC[FK0QW-IDX] = FK0QW00.XMG-COLR-GRP-DESC;
  ;
  if (FK0QW00.FK0QW-COLOR-DATA-SW == "Y") /* If color data exists*/
    FK0QW01.XCLCD[FK0QW-IDX] = VMCOLR01.XCLCD; /* Color code*/
    FK0QW01.XCLDESC[FK0QW-IDX] = FK0QW00.XCLDESC; /* Color desc*/
  else
    FK0QW01.XCLCD[FK0QW-IDX] = " "; /* Color code*/
    FK0QW01.XCLDESC[FK0QW-IDX] = " "; /* Color desc*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Increment the index for the display storage page.*/
   /* If the page is full, add page to temporary storage page queue.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0QW00.FK0QW-IDX == 13) /* Page is full*/
    ;
    FK0Q-1700(); /* Add page to temp storage*/
    FK0QW00.FK0QW-IDX = 0; /* Reset index*/
  end
  ;
  FK0QW00.FK0QW-IDX = FK0QW00.FK0QW-IDX + 1; /* Increment line index*/
  ;
  ;
end // end FK0Q-1530

// Close DCMPNT.VMCOLR01 csr
Function FK0Q-1540()
   /* ------------------------------------------------------------*/
   /* Close the group cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6210" ("C4", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1540"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DCMPNT.VMCOLR01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0Q-1540

// Close DCMPNT.VGROUP01 csr
Function FK0Q-1600()
   /* ------------------------------------------------------------*/
   /* Close the group cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6200" ("C1", SQLCA, VGROUP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1600"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DCMPNT.VGROUP01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGROUP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VGROUP01.VGROUP01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0Q-1600

// Add page to temporary storage
Function FK0Q-1700()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW01.XXXTSLEN = FK0QW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FK0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FK0QW01 empty; /* m110 display storage*/
    ;
    FK0QW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1800"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0Q-1700

// Format and converse the map
Function FK0Q-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0QW00.FK0QW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/
    ;
    FK0Q-2100(); /* Format the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0QM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0QM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    set FK0QM110 alarm; /* Indicate sound alarm*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0QM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0QM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (no detail lines formatted to temporary storage).*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0QW00.TA5TSQIX == 0) /* No data formatted*/
    ;
    FK0QM110.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Desc*/
    FK0QM110.FK-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    set FK0QM110.XXXTSPAG invisible, skip;
    set FK0QM110.TA5TSQIX invisible, skip;
    ;
    FK0QW00.FK0QW-IDX = 1; /* Init index*/
    ;
    while (FK0QW00.FK0QW-IDX <= 13) /* Do this for each line*/
      ;
      set FK0QM110.FK0QM-SEL[FK0QW-IDX] invisible, skip;
      set FK0QM110.XMG-COLR-GRP-CD[FK0QW-IDX] invisible, skip;
      set FK0QM110.XMG-COLR-GRP-DESC[FK0QW-IDX] invisible, skip;
      set FK0QM110.XCLCD[FK0QW-IDX] invisible, skip;
      set FK0QM110.XCLDESC[FK0QW-IDX] invisible, skip;
      FK0QW00.FK0QW-IDX = FK0QW00.FK0QW-IDX + 1; /* Increment*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (but there is at least partial data on the map).*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-IDX = 1; /* Init index*/
  ;
  while (FK0QW00.FK0QW-IDX <= 13) /* Do this for each line*/
    ;
    if (FK0QM110.XMG-COLR-GRP-CD[FK0QW-IDX] == " ") /* No data*/
      ;
      set FK0QM110.FK0QM-SEL[FK0QW-IDX] invisible, skip;
      set FK0QM110.XMG-COLR-GRP-CD[FK0QW-IDX] invisible, skip;
      set FK0QM110.XMG-COLR-GRP-DESC[FK0QW-IDX] invisible, skip;
      set FK0QM110.XCLCD[FK0QW-IDX] invisible, skip;
      set FK0QM110.XCLDESC[FK0QW-IDX] invisible, skip;
    end
    ;
    FK0QW00.FK0QW-IDX = FK0QW00.FK0QW-IDX + 1; /* Increment*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no message to display*/
    if (FK0QM110.FK-MAT-NBR == " ") /* If mtrl number not entered*/
      ;
      set FK0QM110.FK-MAT-NBR cursor;
    else
      ;
      set FK0QM110.FK0QM-SEL[1] cursor;
    end
  end
  ;
  ;
  converse FK0QM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0QM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0QM110.CAITEM; /* Application data*/
  ;
  ;
end // end FK0Q-2000

// Format the data to display
Function FK0Q-2100()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK0QM110 initial; /* Initialize map*/
  ;
  FK0QW-FMAT-MAP-SW = "N"; /* Format map switch*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0QW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FK0QW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      if (FK0QW00.XXXTSPAG > FK0QW00.TA5TSQIX) /* Desired page > highest*/
        FK0QW00.XXXTSPAG = FK0QW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FK0Q-2110(); /* Obtain temp storage page*/
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0QM110.FK-VEND-CD = FK0QW01.FK-VEND-CD; /* Vendor*/
  FK0QM110.FK-MAT-NBR = FK0QW01.FK-MAT-NBR; /* Material nbr*/
  FK0QM110.FK-DEPT-MAT-DESC = FK0QW01.FK-DEPT-MAT-DESC; /* Desc*/
  ;
  FK0QM110.XXXTSPAG = FK0QW00.XXXTSPAG; /* Current page*/
  FK0QM110.TA5TSQIX = FK0QW00.TA5TSQIX; /* Max page*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-IDX = 1; /* Initialize idx*/
  ;
  while (FK0QW00.FK0QW-IDX <= 13) /* For each line*/
    ;
    FK0QM110.XMG-COLR-GRP-CD[FK0QW-IDX] = FK0QW01.XMG-COLR-GRP-CD[FK0QW-IDX]; /* Color grp code*/
    FK0QM110.XMG-COLR-GRP-DESC[FK0QW-IDX] = FK0QW01.XMG-COLR-GRP-DESC[FK0QW-IDX]; /* Color grp desc*/
    FK0QM110.XCLCD[FK0QW-IDX] = FK0QW01.XCLCD[FK0QW-IDX]; /* Color code*/
    FK0QM110.XCLDESC[FK0QW-IDX] = FK0QW01.XCLDESC[FK0QW-IDX]; /* Color desc*/
    ;
    FK0QW00.FK0QW-IDX = FK0QW00.FK0QW-IDX + 1;
  end
  ;
  ;
end // end FK0Q-2100

// Read page from temp storage
Function FK0Q-2110()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0QW01.XXXTSLEN = FK0QW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FK0QW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FK0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "2110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0Q-2110

// Check attention identifier
Function FK0Q-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    FKWREC.FK-VEND-CD[1] = FK0QM110.FK-VEND-CD; /* Vendor*/
    FKWREC.FK-MAT-NBR[1] = FK0QM110.FK-MAT-NBR; /* Mtrl nbr*/
    ;
    COMMAREA.CATOAP = "FK0Q"; /* to applicaiton*/
    COMMAREA.CAITEM = " "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0QM110.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0QM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty; /* Initialize fkwrec*/
      FKWREC.FK-VEND-CD[1] = FK0QM110.FK-VEND-CD; /* Vendor*/
      FKWREC.FK-MAT-NBR[1] = FK0QM110.FK-MAT-NBR; /* Mtrl nbr*/
      ;
      COMMAREA.CATOAP = FK0QM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0QM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0QM110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, process PF key.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* FK0B requested*/
   || converseVar.eventKey is pf4) /* MSTR MN requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0QM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
      COMMAREA.CAITEM = "    "; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK requested*/
   && converseVar.eventKey not pf8   /* FWRD requested*/
   && converseVar.eventKey not pf12  /* MTRL requested*/
   && converseVar.eventKey not pf13  /* MSTY requested*/
   && converseVar.eventKey not pf16) /* STYM requested*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK0Q-3000

// Reset Highlighted fields
Function FK0Q-4000()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK0QM110.FK-MAT-NBR initialAttributes; /* Material nbr*/
  set FK0QM110.FK-DEPT-MAT-DESC initialAttributes; /* Mtrl desc*/
  set FK0QM110.XXXTSPAG initialAttributes; /* Page nbr*/
  set FK0QM110.TA5TSQIX initialAttributes; /* Max page*/
  ;
  FK0QW00.FK0QW-IDX = 1; /* Initialize index*/
  ;
  while (FK0QW00.FK0QW-IDX <= 13) /* For each line*/
    set FK0QM110.FK0QM-SEL[FK0QW-IDX] initialAttributes; /* Selection*/
    set FK0QM110.XMG-COLR-GRP-CD[FK0QW-IDX] initialAttributes; /* Color grp code*/
    set FK0QM110.XMG-COLR-GRP-DESC[FK0QW-IDX] initialAttributes; /* Color grp desc*/
    set FK0QM110.XCLCD[FK0QW-IDX] initialAttributes; /* Color code*/
    set FK0QM110.XCLDESC[FK0QW-IDX] initialAttributes; /* Color desc*/
    FK0QW00.FK0QW-IDX = FK0QW00.FK0QW-IDX + 1;
  end
  ;
  set FK0QM110.CATOAP initialAttributes; /* To application*/
  set FK0QM110.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FK0Q-4000

// Verify entered fields
Function FK0Q-5000()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0QM110.CAITEM > " "         /* Application data was entered*/
   && converseVar.eventKey not pf12 /* MTRL*/
   && converseVar.eventKey not pf13 /* MSTY*/
   && converseVar.eventKey not pf16) /* STYM*/
    ;
    set FK0QM110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Pf7 pressed*/
   || converseVar.eventKey is pf8) /* Pf8 pressed*/
    ;
    FK0Q-5100(); /* Verify scroll request*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify the select fields.*/
   /* ---------------------------------------------------------------*/
  ;
  FK0QW00.FK0QW-COUNT = 0; /* Initialize count*/
  FK0QW00.FK0QW-IDX = 13; /* Initialize map index*/
  ;
  while (FK0QW00.FK0QW-IDX > 0) /* Check each map field*/
    ;
    if (FK0QM110.FK0QM-SEL[FK0QW-IDX] != "S" /* If not selected*/
     && FK0QM110.FK0QM-SEL[FK0QW-IDX] != " ") /* and not blank*/
      ;
      converseLib.validationFailed(13); /* Only 's' may be used to select a line*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      set FK0QM110.FK0QM-SEL[FK0QW-IDX] cursor, bold; /* Highlight*/
    end
    ;
    if (FK0QM110.FK0QM-SEL[FK0QW-IDX] == "S") /* If selected*/
      FK0QW00.FK0QW-COUNT = FK0QW00.FK0QW-COUNT + 1; /* Increment counter*/
    end
    ;
    FK0QW00.FK0QW-IDX = FK0QW00.FK0QW-IDX - 1; /* Decrement index*/
  end
  ;
  if (FK0QW00.FK0QW-COUNT > 1) /* If more than 1 row selected*/
    converseLib.validationFailed(22); /* Only 1 row may be selected at a time*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    ;
    FK0QW00.FK0QW-IDX = 1;
    while (FK0QW00.FK0QW-IDX < 14) /* For every line*/
      ;
      if (FK0QM110.FK0QM-SEL[FK0QW-IDX] == "S") /* If line selected*/
        set FK0QM110.FK0QM-SEL[FK0QW-IDX] cursor, bold; /* Highlight*/
      end
      FK0QW00.FK0QW-IDX = FK0QW00.FK0QW-IDX + 1; /* Increment*/
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify header data.  Header does not need to be edited if*/
   /* a transfer to another application is being attempted.*/
   /* ---------------------------------------------------------------*/
  if (converseVar.eventKey is pf12 /* MTRL*/
   || converseVar.eventKey is pf13 /* MSTY*/
   || converseVar.eventKey is pf16) /* STYM*/
    ;
     /* next sentence*/
  else
    ;
    if (FK0QM110.FK-MAT-NBR == " ") /* Material not entered*/
      ;
      converseLib.validationFailed(26); /* Mtrl nbr missing or invalid*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      set FK0QM110.FK-MAT-NBR cursor, bold; /* Highlight*/
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
end // end FK0Q-5000

// Verify scroll request
Function FK0Q-5100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK0QW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK0QW00.XXXTSPAG >= FK0QW00.TA5TSQIX) /* and no more pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FK0Q-5100

// Process valid request
Function FK0Q-6000()
   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number*/
   /* and exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Back*/
    ;
    FK0QW00.FK0QW-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK0QW00.XXXTSPAG = FK0QW00.XXXTSPAG - 1; /* Decrement page to display*/
    ;
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number*/
   /* and exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Forward*/
    ;
    FK0QW00.FK0QW-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK0QW00.XXXTSPAG = FK0QW00.XXXTSPAG + 1; /* Decrement page to display*/
    ;
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, transfer to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf12 /* MTRL requested*/
   || converseVar.eventKey is pf13 /* MSTY requested*/
   || converseVar.eventKey is pf16) /* STYM requested*/
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0E"; /* TO application*/
      COMMAREA.CAITEM = FK0QM110.CAITEM; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0F"; /* TO application*/
      COMMAREA.CAITEM = FK0QM110.CAITEM; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0M"; /* TO application*/
      COMMAREA.CAITEM = FK0QM110.CAITEM; /* Application find code*/
    end
    ;
    set FKWREC empty;
    ;
    FKWREC.FK-VEND-CD[1] = FK0QM110.FK-VEND-CD; /* Vendor*/
    FKWREC.FK-MAT-NBR[1] = FK0QM110.FK-MAT-NBR; /* Mtrl nbr*/
    ;
    FK0QW00.FK0QW-IDX = 1; /* Init index*/
    while (FK0QW00.FK0QW-IDX <= 13) /* Search each line*/
      ;
      if (FK0QM110.FK0QM-SEL[FK0QW-IDX] == "S") /* If line selected*/
        FKWREC.XMG-COLR-GRP-CD[1] = FK0QM110.XMG-COLR-GRP-CD[FK0QW-IDX]; /* Color grp*/
        FKWREC.XCLCD[1] = FK0QM110.XCLCD[FK0QW-IDX]; /* Color*/
        FK0QW00.FK0QW-IDX = 14;
      end
      FK0QW00.FK0QW-IDX = FK0QW00.FK0QW-IDX + 1;
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If key changed exit to obtain the data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0QM110.FK-MAT-NBR != FK0QW01.FK-MAT-NBR) /* Mtrl nbr changed*/
    ;
    FK0QW00.FK0QW-REQUEST-DATA-SW = "Y";
    return;
  end
  ;
  ;
end // end FK0Q-6000

//*** RECORD=FK0QW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0QW00 type basicRecord
  10 FK0QW-IDX FK0QW-IDX ; 
  10 FK0QW-REQUEST-DATA-SW FK0QW-REQUEST-DATA-SW ; 
  10 FK0QW-END-VGROUP-SW FK0QW-END-VGROUP-SW ; 
  10 FK0QW-END-VMCOLR-SW FK0QW-END-VMCOLR-SW ; 
  10 FK0QW-FMAT-MAP-SW FK0QW-FMAT-MAP-SW ; 
  10 FK0QW-COLOR-DATA-SW FK0QW-COLOR-DATA-SW ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XCLDESC XCLDESC ; 
  10 XMG-COLR-GRP-DESC XMG-COLR-GRP-DESC ; 
  10 FK0QW-COUNT FK0QW-COUNT ; 
end // end FK0QW00

//*** RECORD=FK0QW01 ****
// ------------------------
// Map 110 display storage.
// ------------------------
// ***********************
Record FK0QW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(688) ; 
    10 FK-VEND-CD FK-VEND-CD ; 
    10 FK-MAT-NBR FK-MAT-NBR ; 
    10 FK-DEPT-MAT-DESC FK-DEPT-MAT-DESC ; 
    10 XMG-COLR-GRP-CD XMG-COLR-GRP-CD [13] ; 
    10 XMG-COLR-GRP-DESC XMG-COLR-GRP-DESC [13] ; 
    10 XCLCD XCLCD [13] ; 
    10 XCLDESC XCLDESC [13] ; 
end // end FK0QW01

// Color data exists switch
DataItem FK0QW-COLOR-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic count variable
DataItem FK0QW-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of DCMPNT.VGROUP01 csr sw
DataItem FK0QW-END-VGROUP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of DCMPNT.VMCOLR01 csr sw
DataItem FK0QW-END-VMCOLR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FK0QW-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic index
DataItem FK0QW-IDX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request data switch
DataItem FK0QW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

