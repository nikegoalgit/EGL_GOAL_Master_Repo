package fk03;

import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCLCD;
import corpx1.XCLDESC;
import corpx1.XCLTBL;
import corpx1.XTMTBL;
import corpx2.XMG-COLR-GRP-CD;
import corpx2.XTM-MAT-THCK-DESC;
import fk.common.FK-DEPT-MAT-DESC;
import fk.common.FK-MAT-MGR-ID;
import fk.common.FK-MAT-NBR;
import fk.common.FK-VEND-CD;
import fk.common.FK-VEND-COLR-DESC;
import fk.common.FK-VEND-MAT-DESC;
import fk.common.FK-VEND-NM;
import fk.common.FKWREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VMATRL01;
import vv.common.VMCOLR01;
import vv.common.VVNDR001;
//*** PROGRAM=FK03 ****
//      FK03  -  COMPONENTS FORECASTING - MATERIALS INQUIRY
// 
// This program is part of the Components Forecasting System.
// The application provides inquiry capability for materials by
// vendor.  The user enters a vendor code and the application
// will retrieves the vendor name and all the material data for
// that vendor and store it in temporary storage.  The program
// then reads the data from temporary storage and displays the
// map.  The user may then select a single or multiple rows and
// transfer to another application with the data being passed
// in the commarea.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      12/31/91  DFRANC  New application.
//          05/18/93  JALLE1  Remove abends when no desc found
//                            on XTMTBL, XCLTBL.
// *********************
Program FK03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK03W00 FK03W00; // record
  FK03W01 FK03W01; // record
  FKWREC FKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VMATRL01 VMATRL01; // record
  VMCOLR01 VMCOLR01; // record
  VVNDR001 VVNDR001; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XTMTBL; // table
  use XCLTBL; // table
  use FK03M.FK03M110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK03M110 initial; /* map input/output*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Initialize temp storage record*/
    set VMATRL01 empty; /* Initialize material record*/
    set VMCOLR01 empty; /* Initialize material color record*/
    set VVNDR001 empty; /* Initialize vendor record*/
    set FK03W00 empty; /* Initialize working storage rec*/
    set FK03W01 empty; /* Initialize working storage rec*/
    ;
     /* ------------------------------------------------------------*/
     /* Check for vendor code being passed in from another application*/
     /* ------------------------------------------------------------*/
    ;
    if (FKWREC.FK-VEND-CD[1] > " ")
      FK03M110.FK-VEND-CD = FKWREC.FK-VEND-CD[1];
      FK03W00.FK03W-SWR = "Y"; /* Data requested switch*/
      FK03W00.FK03W-SWF = "Y"; /* Format the data*/
      set FKWREC empty; /* Clear out FKWREC*/
    else
      set FKWREC empty; /* Clear out FKWREC*/
      FK03W00.FK03W-SWR = "N"; /* Data requested switch*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK03-001; /* Converse the main process*/
    ;
    ;
    FK03-001: FK03-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK03-001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK03

// Main process to display a map
Function FK03-001()
   /* ---------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK03-100(); /* Obtain the data to display*/
  ;
  FK03-200(); /* Format and display the map*/
  ;
  FK03-300(); /* Check attention identifier*/
  ;
  FK03-400(); /* Reset fields to normal intensity*/
  ;
  FK03-500(); /* Verify the entered data*/
  ;
  FK03-600(); /* Process valid input request*/
  ;
   /* --------------------- END OF FK03-001 -------------------------*/
end // end FK03-001

// Obtain the data to display
Function FK03-100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03W00.FK03W-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W00.XXXTSLEN = 2098; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK03W00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  ;
  FK03-110(); /* Purge any temporary storage*/
  ;
  FK03W01.FK-VEND-CD = FK03M110.FK-VEND-CD; /* Vendor code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select vendor information to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK03-120(); /* Select vendor*/
  ;
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  FK03-130(); /* Select set and open cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Process through the material table until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W00.FK03W-IDX = 1; /* Display line index*/
  FK03W00.FK03W-SWC = "N"; /* End of cursor switch*/
  ;
  while (FK03W00.FK03W-SWC == "N") /* Until end of cursor*/
    ;
    FK03W00.FK03W-SCLR = "N"; /* Reset color flag switch*/
    ;
    FK03-140(); /* Fetch next row in the cursor*/
    ;
    if (FK03W00.FK03W-SWC == "N") /* Not end of cursor*/
      FK03-141(); /* Get thickness*/
      FK03-142(); /* Open Color table*/
      FK03-143(); /* Read Color table row*/
      ;
       /* --------------------------------------------------------*/
       /* Process through color table until end of file.*/
       /* --------------------------------------------------------*/
      ;
      while (FK03W00.FK03W-SCLR != "Y")
        ;
        FK03-144(); /* Get Nike Color*/
        ;
         /* --------------------------------------------------------*/
         /* If not end of cursor, save the data in display storage.*/
         /* --------------------------------------------------------*/
        ;
        FK03-150(); /* Save data in display storage*/
        ;
         /* -------------------------------------------------------*/
         /* If the page is full, add the page to the storage queue.*/
         /* -------------------------------------------------------*/
        ;
        if (FK03W00.FK03W-IDX > 14) /* Page is full*/
          ;
          FK03-160(); /* Add page to temp storage*/
          ;
          FK03W00.FK03W-IDX = 1; /* Display line index*/
          ;
        end
        ;
        FK03-143(); /* Read Color table row*/
        ;
      end
      ;
      FK03-145(); /* Close Color cursor*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03W00.FK03W-IDX > 1) /* Page was formatted*/
    FK03-160(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the Material Cursor.*/
   /* ------------------------------------------------------------*/
  ;
  FK03-170(); /* Close the selected set cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03W00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FKWREC.XXX-MOD-ID = "100"; /* Module identification*/
    FKWREC.XXXMSGNO = 18; /* No data was found to display*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W00.FK03W-SWR = "N"; /* Request for data*/
  ;
   /* ----------------- END OF FK03-100 ---------------------------*/
end // end FK03-100
// Purge any temporary storage
Function FK03-110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FK03W01 empty; /* M110 display storage*/
  ;
  FK03W00.FK03W-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK03W00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FK03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-110 ------------------------------*/
end // end FK03-110

// Select the heading information
Function FK03-120()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VVNDR001 empty; /* Clear row storage area*/
  ;
   /* Vender code*/
  VVNDR001.FK-VEND-CD = FK03W01.FK-VEND-CD;
  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      set FK03M110.FK-VEND-CD cursor, bold;
      FKWREC.XXX-MOD-ID = "120"; /* module id*/
      converseLib.validationFailed(21); /* vendor code not found*/
      FK03W00.FK03W-SWF = "N"; /* Format data switch*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN VENDOR NAME";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.FK-VEND-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-120 -------------------------------*/
end // end FK03-120

// Open cursor DCMPNT.VMATRL01
Function FK03-130()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VMATRL01 empty; /* Clear row storage area*/
  ;
  VMATRL01.FK-VEND-CD = FK03W01.FK-VEND-CD; /* Vendor code*/
  VMATRL01.FK-MAT-NBR = "*"; /* Material number*/
  VMATRL01.XTM-MAT-THCK-CD = "*"; /* Thickness code*/
  ;
  try
    call "IO6190" ("S1", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.FK-VEND-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-130 -------------------------------*/
end // end FK03-130

// Fetch next row DCMPNT.VMATRL01
Function FK03-140()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6190" ("N1", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FK03W00.FK03W-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.FK-MAT-NBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-140 -------------------------------*/
end // end FK03-140

// OBTAIN MATRL THICKNESS XTMTL
Function FK03-141()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  if (VMATRL01.XTM-MAT-THCK-CD in XTMTBL.XTM-MAT-THCK-CD) /* thk cd in tbl*/
    ;
    FK03W00.XTM-MAT-THCK-DESC = XTMTBL.XTM-MAT-THCK-DESC[sysVar.arrayIndex];
    ;
  else
    ;
    FK03W00.XTM-MAT-THCK-DESC = "******";
  end
  ;
   /* ----------------- END OF FK03-141 -------------------------------*/
end // end FK03-141

// Open cursor DCMPNT.VMCOLR01
Function FK03-142()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VMCOLR01 empty; /* Clear row storage area*/
  ;
  VMCOLR01.FK-MAT-NBR = VMATRL01.FK-MAT-NBR; /* Material number*/
  VMCOLR01.XMG-COLR-GRP-CD = "*"; /* color grp code*/
  ;
  try
    call "IO6210" ("S1", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "142"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.FK-MAT-NBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-142 -------------------------------*/
end // end FK03-142

// Fetch cursor DCMPNT.VMCOLR01
Function FK03-143()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6210" ("N1", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of file*/
      FK03W00.FK03W-SCLR = "Y"; /* End of file flag*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "143"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT COLOR CODE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.FK-MAT-NBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-143 -------------------------------*/
end // end FK03-143

// Obtain NIKE color description
Function FK03-144()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  if (VMCOLR01.XCLCD in XCLTBL.XCLCD) /* clr cd in tbl*/
    ;
    FK03W01.XCLDESC[FK03W-IDX] = XCLTBL.XCLDESC[sysVar.arrayIndex];
    ;
  else
    ;
    FK03W01.XCLDESC[FK03W-IDX] = "************";
  end
  ;
   /* ----------------- END OF FK03-144 -------------------------------*/
end // end FK03-144

// Close color cursor VMCOLR01
Function FK03-145()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6210" ("C1", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "145"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-145 -------------------------------*/
end // end FK03-145

// Save data in display storage
Function FK03-150()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W01.FK-VEND-CD = VVNDR001.FK-VEND-CD; /* Vendor code*/
  FK03W01.FK-VEND-NM = VVNDR001.FK-VEND-NM; /* Vendor name*/
  FK03W01.FK-MAT-MGR-ID = VVNDR001.FK-MAT-MGR-ID; /* Vendor name*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W01.FK-MAT-NBR[FK03W-IDX] = VMATRL01.FK-MAT-NBR; /* Mtl nbr*/
  FK03W01.XTM-MAT-THCK-DESC[FK03W-IDX] = FK03W00.XTM-MAT-THCK-DESC;
  FK03W01.FK-DEPT-MAT-DESC[FK03W-IDX] = VMATRL01.FK-DEPT-MAT-DESC;
  FK03W01.FK-VEND-MAT-DESC[FK03W-IDX] = VMATRL01.FK-VEND-MAT-DESC;
  ;
  ;
  if (FK03W00.FK03W-SCLR == "Y") /* Color not found*/
    FK03W01.XCLCD[FK03W-IDX] = " ";
    FK03W01.FK-VEND-COLR-DESC[FK03W-IDX] = " ";
  else
    FK03W01.XCLCD[FK03W-IDX] = VMCOLR01.XCLCD;
    FK03W01.FK-VEND-COLR-DESC[FK03W-IDX] = VMCOLR01.FK-VEND-COLR-DESC;
    FK03W01.XMG-COLR-GRP-CD[FK03W-IDX] = VMCOLR01.XMG-COLR-GRP-CD;
  end
  ;
  FK03W00.FK03W-IDX = FK03W00.FK03W-IDX + 1; /* Increment line index*/
  ;
   /* ----------------- END OF FK03-150 ------------------------------*/
end // end FK03-150

// Add page to temporary storage
Function FK03-160()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W01.XXXTSLEN = FK03W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FK03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FK03W01 empty; /* M001 display storage*/
    ;
    FK03W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "160"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-160 -------------------------------*/
end // end FK03-160

// Close cursor DCMPNT.VMATRL01
Function FK03-170()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6190" ("C1", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "170"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-170 ------------------------------*/
end // end FK03-170

// Format and converse map
Function FK03-200()
   /* -------------------------------------------------------------*/
   /* If an error was found, save the error message number*/
   /* -------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* -------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display*/
   /* -------------------------------------------------------------*/
  ;
  if (FK03W00.FK03W-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FK03W00.FK03W-SWF == "Y") /* Map must be formatted*/
      FK03-210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Protect select fields where no data is present.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W00.FK03W-IDX = 1; /* Initialize line index*/
  ;
  while (FK03W00.FK03W-IDX <= 14) /* Until screen is processed*/
    ;
    if (FK03W01.FK-MAT-NBR[FK03W-IDX] <= 0)
      set FK03M110.FK03M-SEL[FK03W-IDX] invisible, skip;
      FK03W00.FK03W-IDX = FK03W00.FK03W-IDX + 1; /* Increment line index*/
    else
      FK03W00.FK03W-IDX = FK03W00.FK03W-IDX + 1; /* Increment line index*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no data to display set cursor at vendor code*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03W01.FK-MAT-NBR[1] <= 0)
    set FK03M110.FK-VEND-CD cursor;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK03M110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK03M110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK03M110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK03M110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK03M110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/
    ;
    set FK03M110 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FK03M110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK03M110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK03M110.CAITEM; /* Application data*/
  ;
   /* ---------------- End of FK03-200 ---------------------------*/
end // end FK03-200

// Format the display data
Function FK03-210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FK03M110 initial; /* M110 input/output area*/
  ;
  FK03W00.FK03W-SWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03W00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FK03W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (FK03W00.FK03W-SWU == "Y") /* Current page was changed*/
        ;
        FK03S-01(); /* Update temporary storage page*/
        ;
        FK03W00.FK03W-SWU = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FK03W00.XXXTSPAG > FK03W00.TA5TSQIX) /* Desired greater highest*/
        FK03W00.XXXTSPAG = FK03W00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FK03S-02(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FK03M110.XXXLITPG skip; /* "PAGE" literal*/
    FK03M110.XXXTSPAG = FK03W00.XXXTSPAG; /* Current page*/
    set FK03M110.XXXLITOF skip; /* "OF" literal*/
    FK03M110.TA5TSQIX = FK03W00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03W01.FK-VEND-CD <= " ") /* Vender code not present*/
    set FK03M110.FK-VEND-CD cursor; /* Position cursor*/
  end
  ;
  FK03M110.FK-VEND-CD = FK03W01.FK-VEND-CD; /* Vendor code*/
  FK03M110.FK-VEND-NM = FK03W01.FK-VEND-NM; /* Vendor name*/
  FK03M110.FK-MAT-MGR-ID = FK03W01.FK-MAT-MGR-ID; /* manager id*/
  ;
  FK03W00.FK03W-IDX = 1; /* Initialize line index*/
  ;
  while (FK03W00.FK03W-IDX <= 14) /* Until screen is full*/
    ;
    if (FK03W00.FK03W-IDX == 1 /* First select field*/
     && converseVar.validationMsgNum == 0)
      ;
      set FK03M110.FK03M-SEL[FK03W-IDX] cursor, normal;
      ;
    else
      ;
      set FK03M110.FK03M-SEL[FK03W-IDX] normal; /* Unprotect*/
      ;
    end
    ;
    FK03M110.FK03M-SEL[FK03W-IDX] = FK03W01.FK03M-SEL[FK03W-IDX];
    FK03M110.FK-MAT-NBR[FK03W-IDX] = FK03W01.FK-MAT-NBR[FK03W-IDX];
    FK03M110.FK-DEPT-MAT-DESC[FK03W-IDX] = FK03W01.FK-DEPT-MAT-DESC[FK03W-IDX];
    FK03M110.XCLCD[FK03W-IDX] = FK03W01.XCLCD[FK03W-IDX];
    FK03M110.FK03M-COLR-DESC[FK03W-IDX] = FK03W01.XCLDESC[FK03W-IDX];
    FK03M110.XTM-MAT-THCK-DESC[FK03W-IDX] = FK03W01.XTM-MAT-THCK-DESC[FK03W-IDX];
    FK03M110.FK-VEND-MAT-DESC[FK03W-IDX] = FK03W01.FK-VEND-MAT-DESC[FK03W-IDX];
    FK03M110.FK-VEND-COLR-DESC[FK03W-IDX] = FK03W01.FK-VEND-COLR-DESC[FK03W-IDX];
    FK03W00.FK03W-IDX = FK03W00.FK03W-IDX + 1; /* Increment line index*/
    ;
  end
  ;
   /* ----------------- END OF FK03-210 ---------------------------*/
end // end FK03-210

// Check attention identifier
Function FK03-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FK03W00.FK03W-SWR == "Y") /* Request for data*/
      set FK03W01 empty; /* M110 display storage*/
    end
    ;
    FK03W00.FK03W-SWF = "Y"; /* Format the map switch*/
    FK03W00.FK03W-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = "    "; /* to applicaiton*/
    COMMAREA.CAITEM = "    "; /* item*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03M110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FK03-110(); /* Purge temporary storage*/
      ;
      COMMAREA.CATOAP = FK03M110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK03M110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK03M110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* EXIT requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* MTRL requested*/
   || converseVar.eventKey is pf13 /* MSTY requested*/
   || converseVar.eventKey is pf16 /* STYM requested*/
   || converseVar.eventKey is pf17) /* VEND requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK03M110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
      COMMAREA.CAITEM = FK03M110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK03M110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0E"; /* TO application*/
      if (FK03M110.CAITEM == " ")
        COMMAREA.CAITEM = "C"; /* Default function to change*/
      else
        COMMAREA.CAITEM = FK03M110.CAITEM; /* item*/
      end
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0F"; /* TO application*/
      COMMAREA.CAITEM = FK03M110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0M"; /* TO application*/
      COMMAREA.CAITEM = FK03M110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK02"; /* TO application*/
      COMMAREA.CAITEM = FK03M110.CAITEM; /* item*/
    end
    ;
    return; /* Return*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 pressed*/
   && converseVar.eventKey not pf8)  /* pf8 pressed*/
    ;
    FKWREC.XXX-MOD-ID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ---------------- End of FK03-300 ----------------------------*/
end // end FK03-300

// Reset highlighted fields
Function FK03-400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FK03M110.FK-VEND-CD initialAttributes; /* Vendor code*/
  set FK03M110.FK-VEND-NM initialAttributes; /* Vendor name*/
  ;
  FK03W00.FK03W-IDX = 1; /* Initialize line index*/
  ;
  while (FK03W00.FK03W-IDX <= 14 /* Until end of lines*/
   && FK03M110.FK-VEND-CD > " ") /* or end of display*/
    ;
    set FK03M110.FK03M-SEL[FK03W-IDX] normal; /* Reset select flag*/
    ;
    FK03W00.FK03W-IDX = FK03W00.FK03W-IDX + 1; /* Increment line index*/
    ;
  end
  ;
  set FK03M110.CATOAP initialAttributes; /* TO application*/
  set FK03M110.CAITEM initialAttributes; /* Application data*/
  ;
   /* ----------------- END OF FK03-400 -----------------------------*/
end // end FK03-400

// Verify data that was entered
Function FK03-500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03M110.CAITEM > " ") /* Application data was entered*/
    if (converseVar.eventKey is pf12 /* MTRL selected*/
     || converseVar.eventKey is pf13 /* MSTY selected*/
     || converseVar.eventKey is pf16 /* STYM selected*/
     || converseVar.eventKey is pf17) /* MSTY selected*/
         /* next sentence*/
    else
      FKWREC.XXX-MOD-ID = "500"; /* Module identification*/
      set FK03M110.CAITEM cursor, bold; /* Highlight*/
      converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    FK03-510(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Otherwise, verify that a vendor code was entered.*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is enter
     && FK03M110.FK-VEND-CD <= " ")
      converseLib.validationFailed(21); /* Vendor code must be entered*/
      FKWREC.XXX-MOD-ID = 500; /* Module id*/
      set FK03M110.FK-VEND-CD cursor, bold;
      exit stack;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/
    ;
    if (FK03W00.TA5TSQIX > 0) /* Page was formatted*/
      ;
      FK03W00.FK03W-IDX = 14; /* Initialize line index*/
      ;
      while (FK03W00.FK03W-IDX > 0) /* Until end of lines*/
        ;
        FK03-520(); /* Verify data in the line*/
        ;
        FK03W00.FK03W-IDX = FK03W00.FK03W-IDX - 1; /* Decrement line number*/
        ;
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ----------------- END OF FK03-500 -----------------------------*/
end // end FK03-500

// Verify scroll request
Function FK03-510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK03W00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FKWREC.XXX-MOD-ID = "510"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK03W00.XXXTSPAG >= FK03W00.TA5TSQIX) /* and no more pages*/
    ;
    FKWREC.XXX-MOD-ID = "510"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W00.FK03W-IDX = 14; /* Initialize line index*/
  ;
  while (FK03W00.FK03W-IDX > 0) /* Until end of lines*/
    ;
    if (FK03M110.FK03M-SEL[FK03W-IDX] != FK03W01.FK03M-SEL[FK03W-IDX])
      ;
      FKWREC.XXX-MOD-ID = "510"; /* Module identification*/
      set FK03M110.FK03M-SEL[FK03W-IDX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/
      ;
    end
    ;
    FK03W00.FK03W-IDX = FK03W00.FK03W-IDX - 1; /* Decrement line number*/
    ;
  end
  ;
  if (FK03M110.FK-VEND-CD != FK03W01.FK-VEND-CD) /* Vendor changed*/
    ;
    FKWREC.XXX-MOD-ID = "510"; /* Module identification*/
    set FK03M110.FK-VEND-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
  ;
   /* ----------------- END OF FK03-510 ---------------------------*/
end // end FK03-510

// Verify data in the line
Function FK03-520()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03M110.FK03M-SEL[FK03W-IDX] != FK03W01.FK03M-SEL[FK03W-IDX]
   && FK03M110.FK03M-SEL[FK03W-IDX] != "S") /* and is not a "S"*/
    ;
    FKWREC.XXX-MOD-ID = "520"; /* Module identification*/
    set FK03M110.FK03M-SEL[FK03W-IDX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(13); /* Only "S" may be entered*/
    ;
  end
  ;
   /* ----------------- END OF FK03-520 ---------------------------*/
end // end FK03-520

// Process valid input request
Function FK03-600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W00.FK03W-SWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/
  ;
  set FKWREC empty;
  ;
  FKWREC.FK-VEND-CD[1] = FK03M110.FK-VEND-CD; /* Vendor code*/
  ;
   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK03M110.FK-VEND-CD != FK03W01.FK-VEND-CD) /* Vendor code changed*/
    ;
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (FK03M110.FK-VEND-CD > " ") /* Vendor was entered*/
      ;
      FK03W00.FK03W-SWR = "Y"; /* Request for data switch*/
      ;
    else
      ;
      FK03W00.FK03W-SWR = "N"; /* Request for data switch*/
      ;
      FK03-110(); /* Purge any temporary storage*/
      ;
    end
    ;
    /* EZERTN;                         /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FK03W00.XXXTSPAG = FK03W00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FK03W00.XXXTSPAG = FK03W00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W00.FK03W-IDX = 1; /* Initialize line index*/
  ;
  while (FK03W00.FK03W-IDX <= 14) /* Until end of lines*/
    ;
    if (FK03M110.FK03M-SEL[FK03W-IDX] != FK03W01.FK03M-SEL[FK03W-IDX])
      ;
      FK03W01.FK03M-SEL[FK03W-IDX] = FK03M110.FK03M-SEL[FK03W-IDX];
      FK03W00.FK03W-SWU = "Y"; /* Storage update switch*/
      ;
    end
    ;
    FK03W00.FK03W-IDX = FK03W00.FK03W-IDX + 1;
    ;
  end
  ;
  if (converseVar.eventKey is pf1  /* Help requested*/
   || converseVar.eventKey is pf3  /* Exit requested*/
   || converseVar.eventKey is pf4  /* Master menu*/
   || converseVar.eventKey is pf12 /* MTRL requested*/
   || converseVar.eventKey is pf13 /* MSTY requested*/
   || converseVar.eventKey is pf16 /* STYM requested*/
   || converseVar.eventKey is pf17) /* VEND requested*/
    ;
    FK03W00.FK03W-IDX = 1; /* Initialize line index*/
    FKWREC.FKWINDX1 = 1; /* Initialize FKWREC index*/
    ;
    while (FK03W00.FK03W-IDX <= 14) /* Until end of lines*/
      ;
      if (FK03M110.FK03M-SEL[FK03W-IDX] == "S") /* Line was selected*/
        ;
        FKWREC.FK-VEND-CD[FKWINDX1] = FK03M110.FK-VEND-CD;
        ;
        FKWREC.FK-MAT-NBR[FKWINDX1] = FK03W01.FK-MAT-NBR[FK03W-IDX];
        FKWREC.XCLCD[FKWINDX1] = FK03W01.XCLCD[FK03W-IDX];
        FKWREC.XMG-COLR-GRP-CD[FKWINDX1] = FK03W01.XMG-COLR-GRP-CD[FK03W-IDX];
        ;
        FK03W00.FK03W-SWU = "Y"; /* Storage update switch*/
        FK03W00.FK03W-SWR = "Y"; /* Request for data switch*/
        ;
        FKWREC.FKWINDX1 = FKWREC.FKWINDX1 + 1; /* Incr FKWREC index*/
        ;
      end
      ;
      FK03W00.FK03W-IDX = FK03W00.FK03W-IDX + 1; /* Increment line index*/
      ;
    end
    ;
    FKWREC.FKWINDX1 = FKWREC.FKWINDX1 - 1; /* Decrement FKWREC index by one*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FK03-600

// Update temporary storage page
Function FK03S-01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FK03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-S01 -----------------------------*/
end // end FK03S-01

// Read temporary storage page
Function FK03S-02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK03W01.XXXTSLEN = FK03W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FK03W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FK03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK03-S02 ------------------------------*/
end // end FK03S-02

//*** RECORD=FK03W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK03W00 type basicRecord
  10 FK03W-IDX FK03W-IDX ; 
  10 FK03W-SWC FK03W-SWC ; 
  10 FK03W-SWD FK03W-SWD ; 
  10 FK03W-SWF FK03W-SWF ; 
  10 FK03W-SWR FK03W-SWR ; 
  10 FK03W-SWU FK03W-SWU ; 
  10 FK03W-SCLR FK03W-SCLR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XTM-MAT-THCK-DESC XTM-MAT-THCK-DESC ; 
end // end FK03W00

//*** RECORD=FK03W01 ****
// ------------------------
// Map 110 display storage.
// ------------------------
// ***********************
Record FK03W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(2098) ; 
    10 FK-VEND-CD FK-VEND-CD ; 
    10 FK-VEND-NM FK-VEND-NM ; 
    10 FK-MAT-MGR-ID FK-MAT-MGR-ID ; 
    10 FK03M-SEL FK03M-SEL [14] ; 
    10 FK-MAT-NBR FK-MAT-NBR [14] ; 
    10 FK-DEPT-MAT-DESC FK-DEPT-MAT-DESC [14] ; 
    10 XCLCD XCLCD [14] ; 
    10 XCLDESC XCLDESC [14] ; 
    10 XTM-MAT-THCK-DESC XTM-MAT-THCK-DESC [14] ; 
    10 FK-VEND-MAT-DESC FK-VEND-MAT-DESC [14] ; 
    10 FK-VEND-COLR-DESC FK-VEND-COLR-DESC [14] ; 
    10 XMG-COLR-GRP-CD XMG-COLR-GRP-CD [14] ; 
end // end FK03W01

// fk03m-sel
DataItem FK03M-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FK03W-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Color cursor end of file flag
DataItem FK03W-SCLR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FK03W-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem FK03W-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FK03W-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FK03W-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FK03W-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

