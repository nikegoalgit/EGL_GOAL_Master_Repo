package fk04;

import corpcom2.XX0XW01;
import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XCLDESC;
import corpx1.XCLTBL;
import corpx1.XDMCD;
import fk.common.*;
import pg.common.PG4REC;
import pg.common.PG4STNBR;
import sy.common.SY1SSTNM;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TAEREC;
import vv.common.VMUSGE01;
//*** PROGRAM=FK04 ****
// STYLE/COLOR/DIM MFG PERCENT MAINT
// 
// THIS PROGRAM IS PART OF THE COMPONENTS FORECASTING SYSTEM.
// THIS APPLICATION PROVIDES THE CAPABILITY OF MAINTAINING
// MANUFACTURING PERCENTS FOR STYLE DEVELOPMENT PRODUCTS.
// USERS WILL BE ALLOWED TO ENTER A STYLE DEVELOPMENT PRODUCT.
// A LIST OF ALL COLORS FOR THAT STYLE WILL BE RETRIEVED FROM
// THE MATERIAL USAGE TABLE (DCMPNT.VMUSGE01).  USERS WILL BE
// ALLOWED TO CHANGE THE MANUFACTURING PERCENTS FOR THE LISTED
// PRODUCTS, AS LONG AS ALL THE MANUFACTURING PERCENTS TOTAL
// 100%.  ALL RECORDS IN THE DCMPNT.VMUSGE01 TABLE FOR THE
// STYLE DEVELOPMENT PRODUCT WILL BE UPDATED WHEN A
// MANUFACTURING PERCENT IS CHANGED.
// 
// THE USER MAY EXIT TO ANY ALLOWED APPLICATION VIA
// FAST PATH OR PF KEYS, WITH THE OPTION FIELDS AVAILABLE
// FOR USE WITH ANY APPLICATION TRANSFER.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      04/02/92  JALLE1  New application.
// FK-018   02/26/93  JALLE1  Activate PFKeys to FK0G, FK0H.
// FK9999   11/09/95  MSMIT2  TAKE OUT EDIT FOR % = 100 (ERROR
//                            MESSAGE 68).
// y2kfix   11-06-97  oricha  y2k modifications:  regen only
//                            for xx0xs01 century adjustment.
// *********************
Program FK04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK04W00 FK04W00; // record
  FK04W01 FK04W01; // record
  FKWREC FKWREC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VMUSGE01 VMUSGE01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCLTBL; // table
  use FK04M.FK04M110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FK04M110 initial; /* map input/output*/
    set FK04W00 empty; /* Application working storage*/
    set FK04W01 empty; /* Application display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/


     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (FKWREC.SY1STNBR[1] != " ") /* Style passed*/

      FK04M110.PG4STNBR = FKWREC.SY1STNBR[1]; /* Move to map*/
      FK04W00.FK04W-REQUEST-DATA-SW = "Y"; /* Request the data*/
    end

    set FKWREC empty; /* Initialize fkwrec*/

    FK04W00.FK04W-FMAT-MAP-SW = "N"; /* Don't format the map*/


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FK04-0001; /* Converse the main process*/


    FK04-0001: FK04-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FK04-0001; /* Converse the main process*/


  end // end main
end // end FK04

// Main process to display a map
Function FK04-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FK04-1000(); /* Obtain the data to display*/

  FK04-2000(); /* Format and display the map*/

  FK04-3000(); /* Check attention identifier*/

  FK04-4000(); /* Reset fields to normal intensity*/

  FK04-5000(); /* Verify the entered data*/

  FK04-6000(); /* Process valid input request*/


end // end FK04-0001

// Obtain data to display
Function FK04-1000()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/

  if (FK04W00.FK04W-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* --------------------------------------------------------------*/
   /* Initialize display storage record.*/
   /* --------------------------------------------------------------*/

  set FK04W01 empty; /* Initialize*/
  FK04W00.FK04W-DATA-FOUND-SW = "Y"; /* Init switch*/


   /* --------------------------------------------------------------*/
   /* Obtain the style development record.*/
   /* --------------------------------------------------------------*/

  FK04-1100(); /* Get style development record*/


   /* --------------------------------------------------------------*/
   /* Obtain all color/dimension combinations from DCMPNT.VMUSGE01.*/
   /* --------------------------------------------------------------*/

  FK04W00.FK04W-INDEX = 1; /* Init index*/
  FK04W00.FK04W-END-VMUSGE01-SW = "N";

  FK04-1200(); /* Declare cursor for DCMPNT.VMUSGE01*/

  FK04-1300(); /* Fetch DCMPNT.VMUSGE01 record*/

  if (FK04W-END-VMUSGE01-SW != "Y") /* If not end of cursor*/
    FK04W00.SY2CLRID = VMUSGE01.SY2CLRID; /* Save color*/
    FK04W00.XDMCD = VMUSGE01.XDMCD; /* Save dimension*/
    FK04W00.FK-MAT-MFG-PCT = VMUSGE01.FK-MAT-MFG-PCT; /* Save mfg%*/
  end

  while (FK04W00.FK04W-END-VMUSGE01-SW != "Y" /* Until end of cursor*/
   && FK04W00.FK04W-INDEX <= 15) /**/

    FK04-1300(); /* Fetch DCMPNT.VMUSGE01 record*/

    if (VMUSGE01.SY2CLRID != FK04W00.SY2CLRID /* If color break*/
     || VMUSGE01.XDMCD != FK04W00.XDMCD       /* or dimension break*/
     || FK04W00.FK04W-END-VMUSGE01-SW == "Y") /* or end of cursor*/


      /* ======> Get color description*/
      /* ======> Save display storage record*/

      if (FK04W00.SY2CLRID in XCLTBL.XCLCD /* If color in table*/
       && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        FK04W01.XCLDESC[FK04W-INDEX] = XCLTBL.XCLDESC[sysVar.arrayIndex];
      else

        FK04W01.XCLDESC[FK04W-INDEX] = "***************";
      end

      FK04W01.SY2CLRID[FK04W-INDEX] = FK04W00.SY2CLRID;
      FK04W01.XDMCD[FK04W-INDEX] = FK04W00.XDMCD;
      FK04W01.FK-MAT-MFG-PCT[FK04W-INDEX] = FK04W00.FK-MAT-MFG-PCT;


      /* ======> Initialize next hold record*/

      FK04W00.SY2CLRID = VMUSGE01.SY2CLRID; /* Save color*/
      FK04W00.XDMCD = VMUSGE01.XDMCD; /* Save dimenstion*/
      FK04W00.FK-MAT-MFG-PCT = VMUSGE01.FK-MAT-MFG-PCT; /* Save mfg%*/


      /* ======> Increment display storage index*/

      FK04W00.FK04W-INDEX = FK04W00.FK04W-INDEX + 1; /* Increment index*/
    end
  end


   /* --------------------------------------------------------------*/
   /* Close the DCMPNT.VMUSGE01 cursor.*/
   /* --------------------------------------------------------------*/

  FK04-1400(); /* Close DCMPNT.VMUSGE01 record*/


   /* --------------------------------------------------------------*/
   /* If data was found, save map header information.  Otherwise,*/
   /* set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/

  if (FK04W01.SY2CLRID[1] != " ") /* If data was found*/

    FK04W00.PG4STNBR = FK04M110.PG4STNBR;
  else

    FK04W00.FK04W-DATA-FOUND-SW = "N"; /* No data found*/
    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    set FK04M110.PG4STNBR cursor, bold; /* Highlight*/
  end


   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/

  FK04W00.FK04W-REQUEST-DATA-SW = "N";
  FK04W00.FK04W-FMAT-MAP-SW = "Y";


end // end FK04-1000

// Select unique DPRODG.VSYDVL01
Function FK04-1100()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PG4REC empty; /* Clear row storage area*/

  PG4REC.PG4STNBR = FK04M110.PG4STNBR; /* Sty devl nbr*/

  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FK04W00.SY1SSTNM = PG4REC.SY1SSTNM; /* Style desc*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FK04W00.SY1SSTNM = "************"; /* Style desc*/
      FK04W00.FK04W-DATA-FOUND-SW = "N"; /* No data found*/
      set FK04M110.PG4STNBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "1100"; /* module id*/
      converseLib.validationFailed(15); /* No row for specified key value*/

      exit stack; /* Exit to display the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  FK04W00.FK04W-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYDVL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK04-1100

// Declare DCMPNT.VMUSGE01 cursor
Function FK04-1200()
   /* ------------------------------------------------------------*/
   /* Declare a cursor for the table.*/
   /* ------------------------------------------------------------*/

  set VMUSGE01 empty; /* Clear row storage area*/

  VMUSGE01.SY1STNBR = FK04M110.PG4STNBR; /* Style*/
  VMUSGE01.SY2CLRID = "*"; /* Color*/
  VMUSGE01.XDMCD = "*"; /* Dimension*/

  try
    call "IO6240" ("S3", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  FK04W00.FK04W-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "1200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DCL DCMPNT.VMUSGE01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMUSGE01.VMUSGE01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK04-1200

// Fetch DCMPNT.VMUSGE01 cursor
Function FK04-1300()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6240" ("N3", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        FK04W00.FK04W-END-VMUSGE01-SW = "Y"; /* Set end of csr switch*/
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  FK04W00.FK04W-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DCMPNT.VMUSGE01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMUSGE01.VMUSGE01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK04-1300

// Close DCMPNT.VMUSGE01 cursor
Function FK04-1400()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6240" ("C3", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  FK04W00.FK04W-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DCMPNT.VMUSGE01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMUSGE01.VMUSGE01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK04-1400

// Format and converse the map
Function FK04-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FK04W00.FK04W-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/

    FK04-2100(); /* Format the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FK04M110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FK04M110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK04M110.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    set FK04M110 alarm; /* Indicate sound alarm*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK04M110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FK04M110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/

  end

  FK04M110.SY1SSTNM = FK04W00.SY1SSTNM;

   /* ------------------------------------------------------------*/
   /* Set detail line dark, autoskip for all lines with no data to*/
   /* display.*/
   /* ------------------------------------------------------------*/

  FK04W00.FK04W-INDEX = 1; /* Init index*/

  while (FK04W00.FK04W-INDEX <= 15) /* Do this for each line*/

    if (FK04M110.SY2CLRID[FK04W-INDEX] == " " /* If no color*/
     || FK04W00.FK04W-DATA-FOUND-SW == "N")   /* Or no data found*/
      set FK04M110.FK04M-SELECT[FK04W-INDEX] invisible, skip;
      set FK04M110.SY2CLRID[FK04W-INDEX] invisible, skip;
      set FK04M110.XDMCD[FK04W-INDEX] invisible, skip;
      set FK04M110.XCLDESC[FK04W-INDEX] invisible, skip;
      set FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX] invisible, skip;
    end

    FK04W00.FK04W-INDEX = FK04W00.FK04W-INDEX + 1;
  end


   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* If no message to display*/
   || FKWREC.XXXMSGNO == 1)             /* or update complete*/

    if (FK04M110.PG4STNBR == " ") /* No style*/

      set FK04M110.PG4STNBR cursor; /* Set cursor at style*/
    else

      set FK04M110.FK04M-SELECT[1] cursor; /* First select field*/
    end
  end


  converse FK04M110 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FK04M110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK04M110.CAITEM; /* Application data*/


end // end FK04-2000

// Format the data to display
Function FK04-2100()
   /* --------------------------------------------------------------------*/
   /* Reset format switch.*/
   /* --------------------------------------------------------------------*/


  FK04W-FMAT-MAP-SW = "N"; /* Format map switch*/





  set FK04M110 initial; /* Initialize map*/


   /* --------------------------------------------------------------------*/
   /* Format header data in the map.*/
   /* --------------------------------------------------------------------*/

  FK04M110.PG4STNBR = FK04W00.PG4STNBR; /* Style*/
  FK04M110.SY1SSTNM = FK04W00.SY1SSTNM; /* Style name*/


   /* --------------------------------------------------------------------*/
   /* Format the detail map data.*/
   /* --------------------------------------------------------------------*/

  FK04W00.FK04W-INDEX = 1; /* Initialize index*/

  while (FK04W00.FK04W-INDEX <= 15) /* For each detail line*/

    FK04M110.SY2CLRID[FK04W-INDEX] = FK04W01.SY2CLRID[FK04W-INDEX];
    FK04M110.XDMCD[FK04W-INDEX] = FK04W01.XDMCD[FK04W-INDEX];
    FK04M110.XCLDESC[FK04W-INDEX] = FK04W01.XCLDESC[FK04W-INDEX];
    FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX] = FK04W01.FK-MAT-MFG-PCT[FK04W-INDEX];

    FK04W00.FK04W-INDEX = FK04W00.FK04W-INDEX + 1;
  end



end // end FK04-2100

// Check attention identifier
Function FK04-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty; /* Initialize fkwrec*/

    FKWREC.SY1STNBR[1] = FK04M110.PG4STNBR;
    COMMAREA.CATOAP = "FK04"; /* to applicaiton*/
    COMMAREA.CAITEM = " "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FK04M110.CATOAP cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FK04M110.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty; /* Initialize fkwrec*/

      FKWREC.SY1STNBR[1] = FK04M110.PG4STNBR;
      COMMAREA.CATOAP = FK04M110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK04M110.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FK04M110.CATOAP cursor, bold; /* Highlight*/
    else

      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
    end

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, process PF key.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* FK0B requested*/
   || converseVar.eventKey is pf4) /* MSTR MN requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK04M110"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = "    "; /* Application find code*/
    end

    set FKWREC empty; /* Initialize fkwrec*/

    FKWREC.SY1STNBR[1] = FK04M110.PG4STNBR; /* Style*/
    COMMAREA.CAITEM = FK04M110.CAITEM; /* Application find code*/

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf12  /* FK0E requested*/
   && converseVar.eventKey not pf13  /* FK0F requested*/
   && converseVar.eventKey not pf14  /* FK0G requested*/
   && converseVar.eventKey not pf15  /* FK0H requested*/
   && converseVar.eventKey not pf16  /* FK0M requested*/
   && converseVar.eventKey not pf17  /* FK02 requested*/
   && converseVar.eventKey not pf18) /* FK03 requested*/

    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FK04-3000

// Reset Highlighted fields
Function FK04-4000()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/

  set FK04M110.PG4STNBR initialAttributes; /* Style*/

  FK04W00.FK04W-INDEX = 1; /* Initialize index*/

  while (FK04W00.FK04W-INDEX <= 15) /* For each detail line*/

    set FK04M110.FK04M-SELECT[FK04W-INDEX] initialAttributes; /* Select*/
    set FK04M110.SY2CLRID[FK04W-INDEX] initialAttributes; /* Color*/
    set FK04M110.XDMCD[FK04W-INDEX] initialAttributes; /* Dimension*/
    set FK04M110.XCLDESC[FK04W-INDEX] initialAttributes; /* Color abrv*/
    set FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX] initialAttributes; /* Mfg %*/

    FK04W00.FK04W-INDEX = FK04W00.FK04W-INDEX + 1;
  end

  set FK04M110.CATOAP initialAttributes; /* To application*/
  set FK04M110.CAITEM initialAttributes; /* Application data*/


end // end FK04-4000

// Verify entered fields
Function FK04-5000()
   /* ---------------------------------------------------------------*/
   /* If a valid pfkey was pressed, exit this routine.*/
   /* No edits need to be performed when a pfkey is pressed.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf12 /* PF12 pressed*/
   || converseVar.eventKey is pf13 /* PF13 pressed*/
   || converseVar.eventKey is pf14 /* PF14 pressed*/
   || converseVar.eventKey is pf15 /* PF14 pressed*/
   || converseVar.eventKey is pf16 /* PF16 pressed*/
   || converseVar.eventKey is pf17 /* PF17 pressed*/
   || converseVar.eventKey is pf18) /* PF18 pressed*/

    return;
  end


   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FK04M110.CAITEM > " ") /* Application data was entered*/

    set FK04M110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify header was entered.*/
   /* ---------------------------------------------------------------*/

  if (FK04M110.PG4STNBR == " ") /* If style not entered*/

    set FK04M110.PG4STNBR cursor, bold;
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(8); /* Required field missing or invalid*/
  else

   /* ---------------------------------------------------------------*/
   /* Otherwise, verify data in the detail lines.*/
   /* ---------------------------------------------------------------*/

    if (FK04M110.PG4STNBR == FK04W00.PG4STNBR) /* Hdr did not change*/

      FK04W00.FK04W-WORK-QTY = 0; /* Initialize work quantity*/
      FK04W00.FK04W-INDEX = 15; /* Initialize index*/

      while (FK04W00.FK04W-INDEX >= 1) /* Edit every detail line*/


      /* =======> Verify percents between 0.00 and 1.00 inclusive*/

        if (FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX] < 0
         || FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX] > 1)

          set FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX] cursor, bold;
          FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
          converseLib.validationFailed(67); /* Mfg % must be between 0 and 1 inclusive*/
        end


      /* =======> Verify select fields contain spaces or 's'*/

        if (FK04M110.FK04M-SELECT[FK04W-INDEX] == " " /* If select = space*/
         || FK04M110.FK04M-SELECT[FK04W-INDEX] == "S") /* or select = 's'*/

         /* Next sentence*/
        else

          set FK04M110.FK04M-SELECT[FK04W-INDEX] cursor, bold; /* Highlight*/
          FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
          converseLib.validationFailed(13); /* Only 's' may be entered*/
        end


      /* =======> Verify select fields = 's' when data was changed*/

        if (FK04M110.FK04M-SELECT[FK04W-INDEX] != "S" /* If select not = 's'*/
         && FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX]      
         != FK04W01.FK-MAT-MFG-PCT[FK04W-INDEX])      /* and data changed*/

          set FK04M110.FK04M-SELECT[FK04W-INDEX] cursor, bold; /* Highlight*/
          FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
          converseLib.validationFailed(24); /* Enter 's' to change a row of data*/
        end


      /* =======> Verify data changed when select field = 's'*/

        if (FK04M110.FK04M-SELECT[FK04W-INDEX] == "S" /* If select = 's'*/
         && FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX]      
         == FK04W01.FK-MAT-MFG-PCT[FK04W-INDEX])      /* and data not changed*/

          set FK04M110.FK04M-SELECT[FK04W-INDEX] cursor, bold; /* Highlight*/
          FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
          converseLib.validationFailed(25); /* No changes have been made to this row*/
        end


      /* =======> Sum fk-mat-mfg-pct*/

        FK04W00.FK04W-WORK-QTY = FK04W00.FK04W-WORK-QTY       + FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX];


        FK04W00.FK04W-INDEX = FK04W00.FK04W-INDEX - 1; /* Decrement index*/
      end


    /* ---------------------------------------------------------------*/
    /* If any errors were found, exit to display the map.*/
    /* ---------------------------------------------------------------*/

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        exit stack;
      end


    /* ---------------------------------------------------------------*/
    /* Verify sum of manufacturing percentages = 1.00.*/
    /* ---------------------------------------------------------------*/

    /* 11/09/95: COMMENT OUT PER KURT STOCKBRIDGE*/

    /* IF FK04W00.FK04W-WORK-QTY NE 1.00; /* If sum not = 0*/
    /* MOVE '5000' TO FKWREC.XXX-MOD-ID; /* Module identification*/
    /* MOVE 68 TO EZEMNO; /* Sum of manufacturin percents must = 1.00*/
    /* END;*/
    /* ---------------------------------------------------------------*/
    /* Verify sum of manufacturing percentages BETWEEN 0.00 AND 1.00*/
    /* ---------------------------------------------------------------*/

    /* 11/09/95: ALLOW MANUFACTURING PERCENT TO BE <= 1.00*/

      if (FK04W00.FK04W-WORK-QTY > 1.00) /* If sum not = 0*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(67); /* MANUFACTURING % MUST BE BETWEN 0.00 AND 1.00*/
        sysVar.arrayIndex = 1;
        while (sysVar.arrayIndex <= 15)
          if (FK04M110.FK-MAT-MFG-PCT[sysVar.arrayIndex] > 0.00)
            set FK04M110.FK-MAT-MFG-PCT[sysVar.arrayIndex] bold;
          end
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
      end
    end
  end


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


end // end FK04-5000

// Process valid request
Function FK04-6000()
   /* ------------------------------------------------------------*/
   /* Process PFKEY transfer request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12 /* MTRL*/
   || converseVar.eventKey is pf13 /* MSTY*/
   || converseVar.eventKey is pf14 /* CONT*/
   || converseVar.eventKey is pf15 /* CLST*/
   || converseVar.eventKey is pf16 /* STYM*/
   || converseVar.eventKey is pf17 /* VEND*/
   || converseVar.eventKey is pf18) /* MTLS*/

    FK04-6100(); /* Process pfkey request*/
  end


   /* ------------------------------------------------------------*/
   /* Check for key change.  If key was changed, exit to obtain*/
   /* the data.*/
   /* ------------------------------------------------------------*/

  if (FK04M110.PG4STNBR != FK04W00.PG4STNBR) /* If style changed*/

    FK04W00.FK04W-REQUEST-DATA-SW = "Y"; /* Obtain the data*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Obtain formatted current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get current date and time*/


   /* ------------------------------------------------------------*/
   /* Search the map for all records that have had data changed.*/
   /* For each record with a data change, update ALL*/
   /* DCMPNT.VMUSGE01 records.*/
   /* ------------------------------------------------------------*/


  FK04W00.FK04W-UPDATE-PERFORMED-SW = "N"; /* Init switch*/
  FK04W00.FK04W-INDEX = 1; /* Init index*/

  while (FK04W00.FK04W-INDEX <= 15) /* Check each row*/

    if (FK04M110.FK04M-SELECT[FK04W-INDEX] == "S") /* If row was changed*/

      FK04W00.FK04W-END-VMUSGE01-SW = "N";
                                   /* Init end of cursor switch*/

      FK04-6200(); /* Declare DCMPNT.VMUSGE01 cursor*/
      FK04-6300(); /* Fetch DCMPNT.VMUSGE01 cursor*/

      while (FK04W00.FK04W-END-VMUSGE01-SW != "Y") /* Until end of cursor*/

        FK04-6400(); /* Update DCMPNT.VMUSGE01 cursor*/
        FK04-6300(); /* Fetch DCMPNT.VMUSGE01 cursor*/
      end

      FK04-6500(); /* Close DCMPNT.VMUSGE01 cursor*/
    end

    FK04W00.FK04W-INDEX = FK04W00.FK04W-INDEX + 1; /* Increment index*/
  end


   /* ------------------------------------------------------------*/
   /* If updates were successful, display message.*/
   /* ------------------------------------------------------------*/

  if (FK04W00.FK04W-UPDATE-PERFORMED-SW == "Y") /* Update performed*/

    FKWREC.XXXMSGNO = 1;
    FKWREC.XXX-MOD-ID = "6000"; /* Module identification*/
    FK04W00.FK04W-REQUEST-DATA-SW = "Y"; /* Get data*/
  end


end // end FK04-6000

// Process pfkey request
Function FK04-6100()
   /* ------------------------------------------------------------*/
   /* Process PFKEY transfer request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
    COMMAREA.CATOAP = "FK0E"; /* TO application*/
    COMMAREA.CAITEM = FK04M110.CAITEM;
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    COMMAREA.CATOAP = "FK0F"; /* TO application*/
    COMMAREA.CAITEM = FK04M110.CAITEM;
  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    COMMAREA.CATOAP = "FK0G"; /* TO application*/
    COMMAREA.CAITEM = FK04M110.CAITEM;
  end

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    COMMAREA.CATOAP = "FK0H"; /* TO application*/
    COMMAREA.CAITEM = FK04M110.CAITEM;
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "FK0M"; /* TO application*/
    COMMAREA.CAITEM = FK04M110.CAITEM;
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CATOAP = "FK02"; /* TO application*/
    COMMAREA.CAITEM = FK04M110.CAITEM;
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    COMMAREA.CATOAP = "FK03"; /* TO application*/
    COMMAREA.CAITEM = FK04M110.CAITEM;
  end

  set FKWREC empty; /* Initialize fkwrec*/
  FK04W00.FK04W-INDEX = 1;
  FK04W00.FK04W-INDEX2 = 1;

  FKWREC.SY1STNBR[1] = FK04M110.PG4STNBR; /* Style*/

  while (FK04W00.FK04W-INDEX <= 15
   && FK04W00.FK04W-INDEX2 <= 15)

    if (FK04M110.FK04M-SELECT[FK04W-INDEX] == "S") /* If row selected*/

      FKWREC.SY1STNBR[FK04W-INDEX2] = FK04M110.PG4STNBR; /* Style*/
      FKWREC.SY2CLRID[FK04W-INDEX2] = FK04M110.SY2CLRID[FK04W-INDEX]; /* Color*/
      FKWREC.XDMCD[FK04W-INDEX2] = FK04M110.XDMCD[FK04W-INDEX]; /* Dimension*/

      FK04W00.FK04W-INDEX2 = FK04W00.FK04W-INDEX2 + 1;
    end

    FK04W00.FK04W-INDEX = FK04W00.FK04W-INDEX + 1;
  end

  XSFKS01(); /* Exit to another application*/

  FKWREC.XXX-MOD-ID = "6100"; /* Module identification*/
  exit stack; /* Exit to display map*/


end // end FK04-6100

// Declare DCMPNT.VMUSGE01 cursor
Function FK04-6200()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMUSGE01 empty; /* Clear row storage area*/

  VMUSGE01.SY1STNBR = FK04M110.PG4STNBR; /* Style*/
  VMUSGE01.SY2CLRID = FK04M110.SY2CLRID[FK04W-INDEX]; /* Color*/
  VMUSGE01.XDMCD = FK04M110.XDMCD[FK04W-INDEX]; /* Dimension*/

  try
    call "IO6240" ("S1", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "6200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DCL DCMPNT.VMUSGE01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMUSGE01.VMUSGE01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK04-6200

// Fetch DCMPNT.VMUSGE01 cursor
Function FK04-6300()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6240" ("N1", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        FK04W00.FK04W-END-VMUSGE01-SW = "Y"; /* Set end of csr switch*/
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "6300"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DCMPNT.VMUSGE01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMUSGE01.VMUSGE01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK04-6300

// Update DCMPNT.VMUSGE01 record
Function FK04-6400()
   /* ------------------------------------------------------------*/
   /* Update the table row.*/
   /* ------------------------------------------------------------*/

  VMUSGE01.FK-MAT-MFG-PCT = FK04M110.FK-MAT-MFG-PCT[FK04W-INDEX];
  VMUSGE01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VMUSGE01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


  try
    call "IO6240" ("U ", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FK04W00.FK04W-UPDATE-PERFORMED-SW = "Y"; /* Successful update*/
      return; /* Return to previous process*/
    else

      if (VAGen_SQLCODE == 100) /* Row not found*/

        FKWREC.XXXMSGNO = 12; /* Data updated by another*/
        FKWREC.XXX-MOD-ID = "6400"; /* Module identification*/
        FK04W00.FK04W-REQUEST-DATA-SW = "Y";
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Rollback database changes;*/
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "6400"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DCMPNT.VMUSGE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMUSGE01.VMUSGE01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK04-6400

// Close DCMPNT.VMUSGE01 cursor
Function FK04-6500()
   /* ------------------------------------------------------------*/
   /* Close the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6240" ("C1", SQLCA, VMUSGE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "6500"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DCMPNT.VMUSGE01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMUSGE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMUSGE01.VMUSGE01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK04-6500

//*** RECORD=FK04W00 ****
// ----------------------------
// Application display storage.
// ----------------------------
// ***********************
Record FK04W00 type basicRecord
  10 FK04W-INDEX FK04W-INDEX ; 
  10 FK04W-INDEX2 FK04W-INDEX2 ; 
  10 FK04W-REQUEST-DATA-SW FK04W-REQUEST-DATA-SW ; 
  10 FK04W-FMAT-MAP-SW FK04W-FMAT-MAP-SW ; 
  10 FK04W-END-VMUSGE01-SW FK04W-END-VMUSGE01-SW ; 
  10 FK04W-UPDATE-PERFORMED-SW FK04W-UPDATE-PERFORMED-SW ; 
  10 FK04W-DATA-FOUND-SW FK04W-DATA-FOUND-SW ; 
  10 FK04W-WORK-QTY FK04W-WORK-QTY ; 
  10 PG4STNBR PG4STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 FK04W-HOLD-AREA FK04W-HOLD-AREA ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 FK-MAT-MFG-PCT FK-MAT-MFG-PCT ; 
end // end FK04W00

//*** RECORD=FK04W01 ****
// ----------------------------
// Application display storage.
// ----------------------------
// ***********************
Record FK04W01 type basicRecord
  10 SY2CLRID SY2CLRID [15] ; 
  10 XDMCD XDMCD [15] ; 
  10 XCLDESC XCLDESC [15] ; 
  10 FK-MAT-MFG-PCT FK-MAT-MFG-PCT [15] ; 
end // end FK04W01

// data found switch
DataItem FK04W-DATA-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of dcmpnt.vmusge01 switch
DataItem FK04W-END-VMUSGE01-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format the map switch
DataItem FK04W-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage hold area
DataItem FK04W-HOLD-AREA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// generic index
DataItem FK04W-INDEX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// generic index 2
DataItem FK04W-INDEX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request data switch
DataItem FK04W-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update was performed switch
DataItem FK04W-UPDATE-PERFORMED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work quantity
DataItem FK04W-WORK-QTY decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

