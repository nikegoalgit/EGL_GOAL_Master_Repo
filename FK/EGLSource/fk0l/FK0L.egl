package fk0l;

import corpcom2.XX0XW01;
import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import fb.common.FB4SZPCT;
import fk.common.*;
import pg.common.PG2REC;
import pg.common.PG3REC;
import pg.common.PG4REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SY4IDDSC;
import sy.common.SY4REC;
import sy.common.SY4SZSCL;
import sy.common.SY5SZID;
import ta.common.TA1REC;
import ta.common.TAEREC;
import vv.common.VSYSCL01;
//*** PROGRAM=FK0L ****
// THIS APPLICATION IS PART OF THE COMPONENTS FORECASTING
// SYSTEM.
// 
// THIS APPLICATION PROVIES THE CAPABILITY OF MAINTAINING
// ROWS ON THE BAG STYLE/COLOR/DIM DATABASE TABLE
// (DCMPNT.VSYSCL01).  USERS WILL BE ALLOWED TO MAINTAIN
// THE PERCENT DATA OF THE 40 SIZES ON THE MAP PROVIEDED IN
// THIS APPLICATION.
// 
// MAINTENANCE MAP - MAP FK0LM110 IS PROVIDED FOR USERS TO
// CHANGE INFORMATION FOR A BAG STYLE/COLOR/DIM.  USERS WILL
// BE ALLOWED TO CHANGE IN FORMATION ON THE MAP, AND UPDATES
// WILL BGE PERFORMED ON THE AIR BAG STYLE/COLOR/DIM TABLE.
// WHEN A STYLE, COLOR AND DIMENSION ARE ENTERED AND THE
// ASSOCIATED SIZE SCALE PERCENTAGES ARE DISPLAYED ON THE MAP,
// THE USER MAY THEN CHANGE THE SIZE PERCENTAGES.  UPON
// PRESSING ENTER, THE TOTAL PERCENTAGE WILL BE COMPUTED.
// BEFORE THE APPLICATION WILL UPDATE THE DATABASE TABLE, THE
// SUM OF ALL THE PERCENTAGES MUST EQUAL 100.  THE 'COPY FROM'
// FUNCTION ALLOWS USERS TO COPY INFORMATION FROM EXISTING
// STYLE/COLOR/DIM SIZER PERCENTAGES AND OVERLAY THEM ON THE
// MAP FOR COPYING.
// 
// USERS WILL BE ALLOWED TO EXIT THIS APPLICATION VIA FASTPATH
// OR PFKEYS, WITH THE 'OPTION' FIELD AVAILABLE FOR USE WITH
// ANY APPLICATION TRANSFER.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/04/92  JALLE1  New application.
// 
// Y2KFIX   11/05/97  VRAMAC  Y2K MODIFICATIONS MADE TO:
//                            REGEN TO PICK NEW COPY OF XX0XS01
// 
// *********************
Program FK0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK0LW00 FK0LW00; // record
  FK0LW01 FK0LW01; // record
  FKWREC FKWREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VSYSCL01 VSYSCL01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK0LM.FK0LM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0LM110 initial; /* M110 inquiry map input/output*/
    set FK0LW00 empty; /* Working storage*/
    set FK0LW01 empty; /* Display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/
    ;
    if (FKWREC.SY1STNBR[1] != " ") /* If style was passed*/
      ;
      FK0LM110.SY1STNBR = FKWREC.SY1STNBR[1]; /* Style*/
      FK0LM110.SY2CLRID = FKWREC.SY2CLRID[1]; /* Color*/
      FK0LM110.XDMCD = FKWREC.XDMCD[1]; /* Dimension*/
      FK0LW00.FK0LW-REQUEST-DATA-SW = "Y"; /* Request data*/
      set FKWREC empty;
    else
      ;
      FK0LW00.FK0LW-REQUEST-DATA-SW = "N"; /* Don't request data*/
      set FKWREC empty;
    end
    ;
    ;
    FK0LW00.FK0LW-IDX = 1; /* Init index*/
    ;
    while (FK0LW00.FK0LW-IDX <= 40) /* Calculate all 40 sizes*/
      ;
      FK0LW00.SY5SZID[FK0LW-IDX] = FK0LW00.FK0LW-IDX; /* Save size*/
      ;
      FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX + 1; /* Increment*/
    end
    ;
    ;
    move "N" to FK0LW00.FK0LW-DISPLAY-SIZE-SW[1] for all; /* Don't display any sizes*/
    FK0LW00.FK0LW-FMAT-MAP-SW = "Y"; /* Format the map*/
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0L-0001; /* Converse the main process*/
    ;
    ;
    FK0L-0001: FK0L-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0L-0001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0L

// Main process to display a map
Function FK0L-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0L-1000(); /* Obtain the data to display*/
  ;
  FK0L-2000(); /* Format and display the map*/
  ;
  FK0L-3000(); /* Check attention identifier*/
  ;
  FK0L-4000(); /* Reset fields to normal intensity*/
  ;
  FK0L-5000(); /* Verify the entered data*/
  ;
  FK0L-6000(); /* Process valid input request*/
  ;
  ;
end // end FK0L-0001

// Process inquiry map
Function FK0L-1000()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0LW00.FK0LW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Initialize display storage.*/
   /* --------------------------------------------------------------*/
  ;
  set FK0LW01 empty; /* Initialize display storage*/
  ;
  move "N" to FK0LW00.FK0LW-DISPLAY-SIZE-SW[1] for all; /* Init display switches*/
  ;
   /* --------------------------------------------------------------*/
   /* Obtain the product description.*/
   /* --------------------------------------------------------------*/
  ;
  FK0L-1100(); /* Obtain product description*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Obtain the data from DCMPNT.VSYSCL01.*/
   /* If requested, get the size percents from the 'copy from' product.*/
   /* Otherwise, get the size percents from the requested product.*/
   /* --------------------------------------------------------------*/
  ;
  FK0L-1200(); /* Declare DCMPNT.VSYSCL01 cursor*/
  ;
  FK0LW00.FK0LW-END-CURSOR-SW = "N"; /* Initialize csr switch*/
  FK0LW00.FK0LW-DATA-OBTAINED-SW = "N"; /* Data obtained switch*/
  move 0 to FK0LW00.FB4SZPCT[1] for all; /* Initialize size percents*/
  ;
  FK0L-1300(); /* Fetch DCMPNT.VSYSCL01 cursor*/
  ;
  while (FK0LW00.FK0LW-END-CURSOR-SW != "Y") /* Until end of cursor*/
    ;
    FK0LW00.FK0LW-IDX = VSYSCL01.SY5SZID;
    FK0LW00.FB4SZPCT[FK0LW-IDX] = VSYSCL01.FB4SZPCT; /* Size pct*/
    FK0LW00.SY4SZSCL = VSYSCL01.SY4SZSCL; /* Save size scale*/
    ;
    FK0L-1300(); /* Fetch DCMPNT.VSYSCL01 cursor*/
  end
  ;
  FK0L-1400(); /* Close DCMPNT.VSYSCL01 cursor*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If no data found, exit to display the map and an error.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0LW00.FK0LW-DATA-OBTAINED-SW != "Y") /* If data not obtained*/
    ;
    if (FK0LM110.FK0LM-COPY-SY1STNBR != " ") /* If copying data*/
      set FK0LM110.FK0LM-COPY-SY1STNBR cursor, bold;
      set FK0LM110.FK0LM-COPY-SY2CLRID bold;
      set FK0LM110.FK0LM-COPY-XDMCD bold;
    else
      set FK0LM110.SY1STNBR cursor, bold;
      set FK0LM110.SY2CLRID bold;
      set FK0LM110.XDMCD bold;
    end
    converseLib.validationFailed(18); /* No data to display*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    exit stack;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Obtain the size descriptions.*/
   /* If the size percents were obtained from an inline product, use*/
   /* subprogram xspg301 to get the size descriptions.*/
   /* Otherwise, get the size descriptons from DPROD.VSCALE01.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0LW00.FK0LW-PRODUCT-TYPE == "I") /* If inline product*/
    ;
    FK0L-1500(); /* Get size descriptions from XSPG301*/
  else
    ;
    FK0L-1600(); /* Get size descriptions from DPROD.VSCALE01.*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Move asterisks to sizes with a blank size description.*/
   /* --------------------------------------------------------------*/
  FK0LW00.FK0LW-IDX = 1; /* Init index*/
  ;
  while (FK0LW00.FK0LW-IDX <= 40) /* For all sizes*/
    ;
    if (FK0LW00.SY4IDDSC[FK0LW-IDX] == " ") /* If size invalid*/
      FK0LW00.SY4IDDSC[FK0LW-IDX] = "*****"; /* Move asterisks*/
    end
    ;
    FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX + 1;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Determine sizes to display.*/
   /* --------------------------------------------------------------*/
  ;
  FK0LW00.FK0LW-IDX = 1; /* Init index*/
  ;
  while (FK0LW00.FK0LW-IDX <= 40) /* For all sizes*/
    ;
    if (FK0LW00.SY4IDDSC[FK0LW-IDX] != "*****" /* If size valid*/
     || FK0LW00.FB4SZPCT[FK0LW-IDX] != 0       /* or size % exists*/
    )                                         
      FK0LW00.FK0LW-DISPLAY-SIZE-SW[FK0LW-IDX] = "Y"; /* Show size*/
    end
    ;
    FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX + 1;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Calculate the total size percent.*/
   /* --------------------------------------------------------------*/
  ;
  FK0LW00.FK0LM-TOT-PCT = 0; /* Initialize pct*/
  FK0LW00.FK0LW-IDX = 1; /* Initialize index*/
  ;
  while (FK0LW00.FK0LW-IDX <= 40) /* For each size*/
    ;
    FK0LW00.FK0LM-TOT-PCT = FK0LW00.FK0LM-TOT-PCT     + FK0LW00.FB4SZPCT[FK0LW-IDX]; /* Add pct to total pct*/
    ;
    FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX + 1; /* Increment index*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Save data in display storage.*/
   /* --------------------------------------------------------------*/
  ;
  FK0L-1700(); /* Save data in display storage*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0LW00.FK0LW-DATA-OBTAINED-SW == "Y" /* If data was obtained*/
   && FK0LM110.FK0LM-COPY-SY1STNBR != " ")  /* and copying data*/
    ;
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    FKWREC.XXXMSGNO = 101; /* Copy data displayed*/
  end
  ;
  ;
  FK0LW00.FK0LW-REQUEST-DATA-SW = "N";
  FK0LW00.FK0LW-FMAT-MAP-SW = "Y";
  ;
  ;
end // end FK0L-1000

// Get style description
Function FK0L-1100()
   /* ------------------------------------------------------------*/
   /* Set up key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  ;
  PG2REC.XGPCD = "02"; /* Group code*/
  PG2REC.SY1STNBR = FK0LM110.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FK0LM110.SY2CLRID; /* Color id*/
  PG2REC.XDMCD = FK0LM110.XDMCD; /* Dimension code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0LW00.FK0LW-PRODUCT-TYPE = "I"; /* Inline product*/
      FK0LW00.SY1SSTNM = PG2REC.SY1SSTNM; /* Short style name*/
      ;
      return;
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      FK0L-1110(); /* Obtain style development desc*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1100 GET STYLE DESCRIPTION      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-1100

// Get style dvl description
Function FK0L-1110()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty;
  ;
  PG4REC.PG4STNBR = FK0LM110.SY1STNBR; /* Style number*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0LW00.FK0LW-PRODUCT-TYPE = "D"; /* Development type*/
      FK0LW00.SY1SSTNM = PG4REC.SY1SSTNM; /* Short name*/
      ;
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100 /* Normal return code*/
    )                             
      FK0LW00.FK0LW-PRODUCT-TYPE = " "; /* No type at all*/
      FK0LW00.SY1SSTNM = "************"; /* Short name*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1110"; /* Module identification*/
  ;
  FK0LW00.FK0LW-REQUEST-DATA-SW = "N"; /* Set data switch*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1110 GET STYLE DVL DESCRIPTION  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-1110

// Declare DCMPNT.VSYSCL01 csr
Function FK0L-1200()
   /* ------------------------------------------------------------*/
   /* Declare and open a cursor from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VSYSCL01 empty;
  ;
  if (FK0LM110.FK0LM-COPY-SY1STNBR != " ") /* If copying data*/
    ;
    VSYSCL01.SY1STNBR = FK0LM110.FK0LM-COPY-SY1STNBR; /* Style*/
    VSYSCL01.SY2CLRID = FK0LM110.FK0LM-COPY-SY2CLRID; /* Color*/
    VSYSCL01.XDMCD = FK0LM110.FK0LM-COPY-XDMCD; /* Dimension*/
    VSYSCL01.FK-AIRBAG-ID = "*"; /* Air bag nbr*/
  else
    ;
    VSYSCL01.SY1STNBR = FK0LM110.SY1STNBR; /* Style*/
    VSYSCL01.SY2CLRID = FK0LM110.SY2CLRID; /* Color*/
    VSYSCL01.XDMCD = FK0LM110.XDMCD; /* Dimension*/
    VSYSCL01.FK-AIRBAG-ID = "*"; /* Air bag nbr*/
  end
  ;
  ;
  try
    call "IO6390" ("S1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1200 DECLARE VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-1200

// Fetch DCMPNT.VSYSCL01 csr
Function FK0L-1300()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6390" ("N1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0LW00.FK0LW-DATA-OBTAINED-SW = "Y"; /* Data obtained*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* End of cursor*/
      ;
      FK0LW00.FK0LW-END-CURSOR-SW = "Y"; /* Set end of cursor switch*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1300 FETCH VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-1300

// Close DCMPNT.VSYSCL01 csr
Function FK0L-1400()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6390" ("C1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1400 CLOSE VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-1400

// Get inline size descriptions
Function FK0L-1500()
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/
  ;
  set PG3REC empty;
  ;
  ;
  PG3REC.XGPCD = "02";
  PG3REC.SY1STNBR = FK0LM110.SY1STNBR;
  PG3REC.SY2CLRID = FK0LM110.SY2CLRID;
  PG3REC.XDMCD = FK0LM110.XDMCD;
  PG3REC.XQACD = "**"; /* Get either A or B grade sizes*/
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";
  PG3REC.PG3XDVCD = " ";
  ;
  ;
  XSPG301(); /* Get valid sizes*/
  ;
  ;
  move PG3REC.SY4IDDSC to FK0LW00.SY4IDDSC[1] for all; /* Save size descriptions*/
  ;
  ;
end // end FK0L-1500

// Get sty dvl size descriptions
Function FK0L-1600()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set SY4REC empty;
  ;
  SY4REC.SY4SZSCL = FK0LW00.SY4SZSCL; /* Prod size scale*/
  ;
  ;
  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      move "*****" to SY4REC.SY4IDDSC[1] for all; /* Default asterisks*/
      return; /* Return to previous process*/
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      move SY4REC.SY4IDDSC to FK0LW00.SY4IDDSC[1] for all; /* Save size scale*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1600"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1600 STY DVL SIZE DESC   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCALE01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY4REC.SY4DATA; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-1600

// Save data in display storage
Function FK0L-1700()
   /* ------------------------------------------------------------*/
   /* Save data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK0LW01.SY1STNBR = FK0LM110.SY1STNBR; /* Style*/
  FK0LW01.SY2CLRID = FK0LM110.SY2CLRID; /* Color*/
  FK0LW01.XDMCD = FK0LM110.XDMCD; /* Dimension*/
  ;
  FK0LW01.FK0LM-COPY-SY1STNBR = FK0LM110.FK0LM-COPY-SY1STNBR;
  FK0LW01.FK0LM-COPY-SY2CLRID = FK0LM110.FK0LM-COPY-SY2CLRID;
  FK0LW01.FK0LM-COPY-XDMCD = FK0LM110.FK0LM-COPY-XDMCD;
  ;
  FK0LW01.SY1SSTNM = FK0LW00.SY1SSTNM; /* Short style name*/
  ;
  ;
  FK0LW00.FK0LW-IDX = 1; /* Init index*/
  FK0LW00.FK0LW-IDX2 = 1; /* Init another index*/
  ;
  while (FK0LW00.FK0LW-IDX <= 40 /* For all sizes*/
   && FK0LW00.FK0LW-IDX2 <= 40)
    ;
    if (FK0LW00.FK0LW-DISPLAY-SIZE-SW[FK0LW-IDX] == "Y") /* If valid size*/
      ;
      FK0LW01.SY5SZID[FK0LW-IDX2] = FK0LW00.FK0LW-IDX;
      FK0LW01.SY4IDDSC[FK0LW-IDX2] = FK0LW00.SY4IDDSC[FK0LW-IDX];
      FK0LW01.FB4SZPCT[FK0LW-IDX2] = FK0LW00.FB4SZPCT[FK0LW-IDX];
      ;
      FK0LW00.FK0LW-IDX2 = FK0LW00.FK0LW-IDX2 + 1; /* Increment*/
    end
    FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX + 1; /* Increment*/
  end
  ;
  ;
end // end FK0L-1700

// Format and converse the map
Function FK0L-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0LW00.FK0LW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/
    ;
    FK0L-2100(); /* Format the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0LM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0LM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0LM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If copy function being used, protect all percent fields.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0LM110.FK0LM-COPY-SY1STNBR != " ") /* If trying to copy*/
    ;
    FK0LW00.FK0LW-IDX = 1; /* Init index*/
    ;
    while (FK0LW00.FK0LW-IDX <= 40) /* For all 40 sizes*/
      ;
      set FK0LM110.FB4SZPCT[FK0LW-IDX] skip; /* Protect*/
      FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX + 1; /* Increment*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Protect fields with no valid size description or size pct.*/
   /* ------------------------------------------------------------*/
  ;
  FK0LW00.FK0LW-IDX = 1; /* Init index*/
  ;
  while (FK0LW00.FK0LW-IDX <= 40) /* For all 40 sizes*/
    ;
    if (FK0LW01.SY4IDDSC[FK0LW-IDX] == " ") /* If no size description*/
      ;
      set FK0LM110.SY4IDDSC[FK0LW-IDX] invisible, skip; /* Protect*/
      set FK0LM110.FB4SZPCT[FK0LW-IDX] invisible, skip; /* Protect*/
    end
    ;
    FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX + 1; /* Increment*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not obtained, also protect the size percent and product*/
   /* name.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0LW00.FK0LW-DATA-OBTAINED-SW != "Y") /* If data not found*/
    set FK0LM110.FK0LM-TOT-PCT invisible, skip; /* Protect*/
    set FK0LM110.SY1SSTNM invisible, skip; /* Protect*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (converseVar.validationMsgNum != 0)
      set FK0LM110 alarm; /* Indicate sound alarm*/
    end
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0LM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0LM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0 /* No errors*/
   || FKWREC.XXXMSGNO == 1)             /* Update complete*/
    ;
    set FK0LM110.SY1STNBR cursor; /* Set cursor at style*/
  end
  ;
  ;
  converse FK0LM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0LM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0LM110.CAITEM; /* Application data*/
  ;
  ;
end // end FK0L-2000

// Format the display data
Function FK0L-2100()
   /* --------------------------------------------------------------------*/
   /* Reset format switch.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0LW-FMAT-MAP-SW = "N"; /* Format map switch*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format key data in the map.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0LM110.SY1STNBR = FK0LW01.SY1STNBR; /* Style*/
  FK0LM110.SY2CLRID = FK0LW01.SY2CLRID; /* Color*/
  FK0LM110.XDMCD = FK0LW01.XDMCD; /* Dimension*/
  ;
  FK0LM110.FK0LM-COPY-SY1STNBR = FK0LW01.FK0LM-COPY-SY1STNBR;
  FK0LM110.FK0LM-COPY-SY2CLRID = FK0LW01.FK0LM-COPY-SY2CLRID;
  FK0LM110.FK0LM-COPY-XDMCD = FK0LW01.FK0LM-COPY-XDMCD;
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format the data in the map from display storage.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0LM110.SY1SSTNM = FK0LW01.SY1SSTNM; /* Style name*/
  FK0LM110.FK0LM-TOT-PCT = FK0LW00.FK0LM-TOT-PCT; /* Total pct*/
  move FK0LW01.SY4IDDSC to FK0LM110.SY4IDDSC[1] for all; /* Size descriptions*/
  move FK0LW01.FB4SZPCT to FK0LM110.FB4SZPCT[1] for all; /* Size percents*/
  ;
  ;
end // end FK0L-2100

// Check attention identifier
Function FK0L-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    FKWREC.SY1STNBR[1] = FK0LM110.SY1STNBR; /* Style*/
    FKWREC.SY2CLRID[1] = FK0LM110.SY2CLRID; /* Color*/
    FKWREC.XDMCD[1] = FK0LM110.XDMCD; /* Dimension*/
    ;
    COMMAREA.CATOAP = "FK0L"; /* to applicaiton*/
    COMMAREA.CAITEM = " "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0LM110.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0LM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty; /* Initialize fkwrec*/
      FKWREC.SY1STNBR[1] = FK0LM110.SY1STNBR; /* Style*/
      FKWREC.SY2CLRID[1] = FK0LM110.SY2CLRID; /* Color*/
      FKWREC.XDMCD[1] = FK0LM110.XDMCD; /* Dimension*/
      ;
      COMMAREA.CATOAP = FK0LM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0LM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0LM110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, process PF key.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* FK0B requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* FK0I requested*/
   || converseVar.eventKey is pf13 /* FK0J requested*/
   || converseVar.eventKey is pf14 /* FK0K requested*/
   || converseVar.eventKey is pf17) /* FK0Z requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0LM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = "    "; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0I"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0J"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0K"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK0Z"; /* TO application*/
    end
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    FKWREC.SY1STNBR[1] = FK0LM110.SY1STNBR; /* Style*/
    FKWREC.SY2CLRID[1] = FK0LM110.SY2CLRID; /* Color*/
    FKWREC.XDMCD[1] = FK0LM110.XDMCD; /* Dimension*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK0L-3000

// Reset highlighted fields
Function FK0L-4000()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK0LM110.SY1STNBR initialAttributes; /* Style*/
  set FK0LM110.SY2CLRID initialAttributes; /* Color*/
  set FK0LM110.XDMCD initialAttributes; /* Dimension*/
  set FK0LM110.FK0LM-COPY-SY1STNBR initialAttributes; /* Copy style*/
  set FK0LM110.FK0LM-COPY-SY2CLRID initialAttributes; /* Copy color*/
  set FK0LM110.FK0LM-COPY-XDMCD initialAttributes; /* Copy dim*/
  ;
  set FK0LM110.SY1SSTNM initialAttributes; /* Short style name*/
  set FK0LM110.FK0LM-TOT-PCT initialAttributes; /* Total percent*/
  ;
  ;
  FK0LW00.FK0LW-IDX = 1; /* Init index*/
  ;
  while (FK0LW00.FK0LW-IDX <= 40) /**/
    ;
    set FK0LM110.SY4IDDSC[FK0LW-IDX] initialAttributes; /* Size desc*/
    set FK0LM110.FB4SZPCT[FK0LW-IDX] initialAttributes; /* Size pct*/
    FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX + 1; /* Increment*/
  end
  ;
  ;
  set FK0LM110.CATOAP initialAttributes; /* To application*/
  set FK0LM110.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FK0L-4000

// Verify entered fields
Function FK0L-5000()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0LM110.CAITEM > " ") /* Application data was entered*/
    ;
    set FK0LM110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any of the key was changed, verify it.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0LM110.SY1STNBR != FK0LW01.SY1STNBR /* Style changed*/
   || FK0LM110.SY2CLRID != FK0LW01.SY2CLRID /* Color changed*/
   || FK0LM110.XDMCD != FK0LW01.XDMCD       /* Dim changed*/
   || FK0LM110.FK0LM-COPY-SY1STNBR != FK0LW01.FK0LM-COPY-SY1STNBR
   || FK0LM110.FK0LM-COPY-SY2CLRID != FK0LW01.FK0LM-COPY-SY2CLRID
   || FK0LM110.FK0LM-COPY-XDMCD != FK0LW01.FK0LM-COPY-XDMCD)
    ;
    if (FK0LM110.FK0LM-COPY-SY1STNBR != " " /* If copy requested*/
     || FK0LM110.FK0LM-COPY-SY2CLRID != " " /**/
     || FK0LM110.FK0LM-COPY-XDMCD != " ")   /**/
      ;
      FK0L-5100(); /* Verify copy data*/
    end
    ;
    ;
    FK0L-5200(); /* Verify data exists to display*/
    ;
    ;
    if (FK0LM110.FK0LM-COPY-SY1STNBR != " " /* If copy requested*/
     && converseVar.validationMsgNum == 0)  /* And no errors yet, verify same size scale*/
      ;
      if (FK0LW00.FK0LW-SY4SZSCL != FK0LW00.FK0LW-COPY-SY4SZSCL)
        ;
        set FK0LM110.SY1STNBR cursor, bold; /* Highlight*/
        set FK0LM110.SY2CLRID bold; /* Highlight*/
        set FK0LM110.XDMCD bold; /* Highlight*/
        set FK0LM110.FK0LM-COPY-SY1STNBR bold; /* Highlight*/
        set FK0LM110.FK0LM-COPY-SY2CLRID bold; /* Highlight*/
        set FK0LM110.FK0LM-COPY-XDMCD bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(100); /* Product size codes not equal*/
      end
    end
  else
    /* ---------------------------------------------------------------*/
    /* Otherwise, verify detail data.*/
    /* ---------------------------------------------------------------*/
    ;
    FK0LW00.FK0LW-IDX = 40; /* Init index*/
    FK0LW00.FK0LM-TOT-PCT = 0; /* Total pct*/
    ;
    while (FK0LW00.FK0LW-IDX > 0) /* For all sizes*/
      ;
      if (FK0LM110.FB4SZPCT[FK0LW-IDX] < 0 /* If pct < 0*/
       || FK0LM110.FB4SZPCT[FK0LW-IDX] > 100) /* or pct > 100*/
        ;
        set FK0LM110.FB4SZPCT[FK0LW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(92); /* Pct must be > 0 and < 100 inclusive*/
      end
      ;
      FK0LW00.FK0LM-TOT-PCT = FK0LW00.FK0LM-TOT-PCT       + FK0LM110.FB4SZPCT[FK0LW-IDX]; /* Add percentage to total*/
      ;
      FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX - 1; /* ; /* Decrement*/
    end
    ;
    if (FK0LW00.FK0LM-TOT-PCT != 100.00) /* If total percent not = 100*/
      ;
      set FK0LM110.FK0LM-TOT-PCT bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(93); /* Sum of percents must = 100*/
    end
  end
  ;
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If total percent has changed, move new total to map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0LW00.FK0LM-TOT-PCT != FK0LM110.FK0LM-TOT-PCT)
    FK0LM110.FK0LM-TOT-PCT = FK0LW00.FK0LM-TOT-PCT;
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
end // end FK0L-5000

// Verify copy data
Function FK0L-5100()
   /* --------------------------------------------------------------*/
   /* Declare a cusor to check for copy data on DCMPNT.VSYSCL01.*/
   /* --------------------------------------------------------------*/
  ;
  FK0L-5110(); /* Declare DCMPNT.VSYSCL01 cursor*/
  ;
  FK0L-5120(); /* Fetch DCMPNT.VSYSCL01 cursor*/
  ;
  FK0L-5130(); /* Close DCMPNT.VSYSCL01 cursor*/
  ;
  ;
end // end FK0L-5100

// Declare DCMPNT.VSYSCL01 csr
Function FK0L-5110()
   /* ------------------------------------------------------------*/
   /* Declare and open a cursor from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VSYSCL01 empty;
  ;
  VSYSCL01.SY1STNBR = FK0LM110.FK0LM-COPY-SY1STNBR; /* Style*/
  VSYSCL01.SY2CLRID = FK0LM110.FK0LM-COPY-SY2CLRID; /* Color*/
  VSYSCL01.XDMCD = FK0LM110.FK0LM-COPY-XDMCD; /* Dimension*/
  VSYSCL01.FK-AIRBAG-ID = "*"; /* Air bag nbr*/
  ;
  ;
  try
    call "IO6390" ("S1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "5110 DECLARE VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-5110

// Fetch DCMPNT.VSYSCL01 csr
Function FK0L-5120()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6390" ("N1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0LW00.FK0LW-COPY-SY4SZSCL = VSYSCL01.SY4SZSCL; /* Save sz scl*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* End of cursor*/
      ;
      FK0LW00.FK0LW-COPY-SY4SZSCL = " ";
      ;
      set FK0LM110.FK0LM-COPY-SY1STNBR cursor, bold; /* Highlight*/
      set FK0LM110.FK0LM-COPY-SY2CLRID bold; /* Highlight*/
      set FK0LM110.FK0LM-COPY-XDMCD bold; /* Highlight*/
      converseLib.validationFailed(18); /* Request processed - no data*/
      FKWREC.XXX-MOD-ID = "5120"; /* Module identification*/
      ;
      FK0LW00.FK0LW-DATA-OBTAINED-SW = "N"; /* No data obtained*/
      move "N" to FK0LW00.FK0LW-DISPLAY-SIZE-SW[1] for all; /* Don't display sizes*/
      set FK0LW01 empty; /* Initialize display storage*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "5120 FETCH VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-5120

// Close DCMPNT.VSYSCL01 csr
Function FK0L-5130()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6390" ("C1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "5130 CLOSE VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-5130

// Verify product data
Function FK0L-5200()
   /* --------------------------------------------------------------*/
   /* Declare a cusor to check for data on DCMPNT.VSYSCL01.*/
   /* --------------------------------------------------------------*/
  ;
  FK0L-5210(); /* Declare DCMPNT.VSYSCL01 cursor*/
  ;
  FK0L-5220(); /* Fetch DCMPNT.VSYSCL01 cursor*/
  ;
  FK0L-5230(); /* Close DCMPNT.VSYSCL01 cursor*/
  ;
  ;
end // end FK0L-5200

// Declare DCMPNT.VSYSCL01 csr
Function FK0L-5210()
   /* ------------------------------------------------------------*/
   /* Declare and open a cursor from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VSYSCL01 empty;
  ;
  VSYSCL01.SY1STNBR = FK0LM110.SY1STNBR; /* Style*/
  VSYSCL01.SY2CLRID = FK0LM110.SY2CLRID; /* Color*/
  VSYSCL01.XDMCD = FK0LM110.XDMCD; /* Dimension*/
  VSYSCL01.FK-AIRBAG-ID = "*"; /* Air bag nbr*/
  ;
  ;
  try
    call "IO6390" ("S1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5210"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "5210 DECLARE VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-5210

// Fetch DCMPNT.VSYSCL01 csr
Function FK0L-5220()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6390" ("N1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0LW00.FK0LW-SY4SZSCL = VSYSCL01.SY4SZSCL; /* Save sz scl*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* End of cursor*/
      ;
      FK0LW00.FK0LW-COPY-SY4SZSCL = " ";
      ;
      set FK0LM110.SY1STNBR cursor, bold; /* Highlight*/
      set FK0LM110.SY2CLRID bold; /* Highlight*/
      set FK0LM110.XDMCD bold; /* Highlight*/
      converseLib.validationFailed(18); /* Request processed - no data*/
      FKWREC.XXX-MOD-ID = "5220"; /* Module identification*/
      ;
      FK0LW00.FK0LW-DATA-OBTAINED-SW = "N"; /* No data obtained*/
      move "N" to FK0LW00.FK0LW-DISPLAY-SIZE-SW[1] for all; /* Don't display sizes*/
      set FK0LW01 empty; /* Initialize display storage*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5220"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "5220 FETCH VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-5220

// Close DCMPNT.VSYSCL01 csr
Function FK0L-5230()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6390" ("C1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5230"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "5230 CLOSE VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-5230

// Process valid request
Function FK0L-6000()
   /* ---------------------------------------------------------------*/
   /* Check for a key change.  Obtain data if key is changed.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0LM110.SY1STNBR != FK0LW01.SY1STNBR
   || FK0LM110.SY2CLRID != FK0LW01.SY2CLRID
   || FK0LM110.XDMCD != FK0LW01.XDMCD
   || FK0LM110.FK0LM-COPY-SY1STNBR != FK0LW01.FK0LM-COPY-SY1STNBR
   || FK0LM110.FK0LM-COPY-SY2CLRID != FK0LW01.FK0LM-COPY-SY2CLRID
   || FK0LM110.FK0LM-COPY-XDMCD != FK0LW01.FK0LM-COPY-XDMCD)
    ;
    FK0LW00.FK0LW-REQUEST-DATA-SW = "Y";
    return;
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Determine if data is going to be updated on the database.*/
   /* ---------------------------------------------------------------*/
  ;
  FK0LW00.FK0LW-UPDT-DATA-SW = "N"; /* Init switch*/
  ;
  if (FK0LM110.FK0LM-COPY-SY1STNBR != " ") /* If copying*/
    ;
    FK0LW00.FK0LW-UPDT-DATA-SW = "Y"; /* Set switch = 'y'es*/
  else
    ;
    FK0LW00.FK0LW-IDX = 1; /* Init index*/
    while (FK0LW00.FK0LW-IDX <= 40) /* Check each size*/
      ;
      if (FK0LM110.FB4SZPCT[FK0LW-IDX] != FK0LW01.FB4SZPCT[FK0LW-IDX])
        ;
        FK0LW00.FK0LW-UPDT-DATA-SW = "Y"; /* Set switch = 'y'es*/
        FK0LW00.FK0LW-IDX = 41; /* Get out while ya can*/
      end
      FK0LW00.FK0LW-IDX = FK0LW00.FK0LW-IDX + 1; /* Increment*/
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If requested, update the DCMPNT.VSYSCL01 records here.*/
   /* ---------------------------------------------------------------*/
  ;
  FK0LW00.FK0LW-UPDT-PERFORMED-SW = "N"; /* Init updt switch*/
  ;
  if (FK0LW00.FK0LW-UPDT-DATA-SW == "Y") /* If data is to be updated*/
    ;
    XX0XS01(); /* Get current date and time*/
    ;
    FK0L-6100(); /* Update DCMPNT.VSYSCL01*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If an update was performed, set message and exit to re-obtain*/
   /* the data.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0LW00.FK0LW-UPDT-PERFORMED-SW == "Y") /* If update performed*/
    ;
    FK0LW00.FK0LW-REQUEST-DATA-SW = "Y"; /* Request the data*/
    FKWREC.XXX-MOD-ID = "6000"; /* Module identification*/
    FKWREC.XXXMSGNO = 1; /* Update complete*/
    FK0LM110.FK0LM-COPY-SY1STNBR = " "; /* Init copy style*/
    FK0LM110.FK0LM-COPY-SY2CLRID = " "; /* Init copy color*/
    FK0LM110.FK0LM-COPY-XDMCD = " "; /* Init copy dimension*/
  end
  ;
  ;
end // end FK0L-6000

// Update DCMPNT.VSYSCL01 process
Function FK0L-6100()
   /* ---------------------------------------------------------------*/
   /* Declare a cursor for the DCMPNT.VSYSCL01 table.*/
   /* ---------------------------------------------------------------*/
  ;
  FK0L-6110(); /* Declare DCMPNT.VSYSCL01 cursor*/
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Fetch the DCMPNT.VSYSCL01 table cursor.*/
   /* ---------------------------------------------------------------*/
  ;
  FK0LW00.FK0LW-END-CURSOR-SW = "N"; /* Init end of cursor switch*/
  ;
  FK0L-6120(); /* Fetch DCMPNT.VSYSCL01 cursor*/
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Update records until end of cursor is found.*/
   /* ---------------------------------------------------------------*/
  ;
  while (FK0LW00.FK0LW-END-CURSOR-SW != "Y") /* While not end of cursor*/
    ;
    FK0L-6130(); /* Update DCMPNT.VSYSCL01*/
    ;
    FK0L-6120(); /* Fetch DCMPNT.VSYSCL01 cursor*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Close the DCMPNT.VSYSCL01 cursor.*/
   /* ---------------------------------------------------------------*/
  ;
  FK0L-6140(); /* Close DCMPNT.VSYSCL01 cursor*/
  ;
  ;
end // end FK0L-6100

// Declare DCMPNT.VSYSCL01 csr
Function FK0L-6110()
   /* ------------------------------------------------------------*/
   /* Declare and open a cursor from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VSYSCL01 empty;
  ;
  VSYSCL01.SY1STNBR = FK0LM110.SY1STNBR; /* Style*/
  VSYSCL01.SY2CLRID = FK0LM110.SY2CLRID; /* Color*/
  VSYSCL01.XDMCD = FK0LM110.XDMCD; /* Dimension*/
  VSYSCL01.FK-AIRBAG-ID = "*"; /* Wildcard air bag*/
  ;
  ;
  try
    call "IO6390" ("S1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "6110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "6110 DECLARE VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-6110

// Fetch DCMPNT.VSYSCL01 csr
Function FK0L-6120()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6390" ("N1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* End of cursor*/
      ;
      FK0LW00.FK0LW-END-CURSOR-SW = "Y"; /* Set end of cursor switch*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "6120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "6120 FETCH VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-6120

// Update DCMPNT.VSYSCL01
Function FK0L-6130()
   /* ------------------------------------------------------------*/
   /* Update the requested row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  if (VSYSCL01.SY5SZID in FK0LW01.SY5SZID) /* If size on map*/
    ;
    VSYSCL01.FB4SZPCT = FK0LM110.FB4SZPCT[sysVar.arrayIndex];
  else
    ;
    VSYSCL01.FB4SZPCT = 0; /* Init to 0*/
  end
  ;
  VSYSCL01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VSYSCL01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO6390" ("U ", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0LW00.FK0LW-UPDT-PERFORMED-SW = "Y"; /* Update performed*/
      ;
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No record*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback all changes*/
      converseLib.validationFailed(12); /* Data updated by another app.*/
      FKWREC.XXX-MOD-ID = "6130"; /* Module identification*/
      ;
      exit stack; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all changes*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "6130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "6130 UPDATE DCMPNT.VSYSCL01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-6130

// Close DCMPNT.VSYSCL01 csr
Function FK0L-6140()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6390" ("C1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "6140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "6140 CLOSE VSYSCL01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0LM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0L-6140

//*** RECORD=FK0LW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0LW00 type basicRecord
  10 FK0LW-FMAT-MAP-SW FK0LW-FMAT-MAP-SW ; 
  10 FK0LW-REQUEST-DATA-SW FK0LW-REQUEST-DATA-SW ; 
  10 FK0LW-DATA-OBTAINED-SW FK0LW-DATA-OBTAINED-SW ; 
  10 FK0LW-END-CURSOR-SW FK0LW-END-CURSOR-SW ; 
  10 FK0LW-UPDT-DATA-SW FK0LW-UPDT-DATA-SW ; 
  10 FK0LW-UPDT-PERFORMED-SW FK0LW-UPDT-PERFORMED-SW ; 
  10 FK0LW-DISPLAY-SIZE-SW FK0LW-DISPLAY-SIZE-SW [40] ; 
  10 FK0LW-PRODUCT-TYPE FK0LW-PRODUCT-TYPE ; 
  10 FK0LW-IDX FK0LW-IDX ; 
  10 FK0LW-IDX2 FK0LW-IDX2 ; 
  10 SY4SZSCL SY4SZSCL ; 
  10 SY5SZID SY5SZID [40] ; 
  10 SY4IDDSC SY4IDDSC [40] ; 
  10 FB4SZPCT FB4SZPCT [40] ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 FK0LM-COPY-SY1STNBR FK0LM-COPY-SY1STNBR ; 
  10 FK0LM-COPY-SY2CLRID FK0LM-COPY-SY2CLRID ; 
  10 FK0LW-COPY-SY4SZSCL FK0LW-COPY-SY4SZSCL ; 
  10 FK0LM-TOT-PCT FK0LM-TOT-PCT ; 
  10 FK0LM-COPY-XDMCD FK0LM-COPY-XDMCD ; 
  10 FK0LW-SY4SZSCL FK0LW-SY4SZSCL ; 
end // end FK0LW00

//*** RECORD=FK0LW01 ****
// ----------------------------
// Application display storage.
// ----------------------------
// ***********************
Record FK0LW01 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 FK0LM-TOT-PCT FK0LM-TOT-PCT ; 
  10 FK0LW-SIZE-DATA FK0LW-SIZE-DATA ; 
    15 SY5SZID SY5SZID [40] ; 
    15 SY4IDDSC SY4IDDSC [40] ; 
    15 FB4SZPCT FB4SZPCT [40] ; 
  10 FK0LM-COPY-SY1STNBR FK0LM-COPY-SY1STNBR ; 
  10 FK0LM-COPY-SY2CLRID FK0LM-COPY-SY2CLRID ; 
  10 FK0LM-COPY-XDMCD FK0LM-COPY-XDMCD ; 
end // end FK0LW01

// Copy style
DataItem FK0LM-COPY-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Copy color
DataItem FK0LM-COPY-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Copy dimension
DataItem FK0LM-COPY-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total percent
DataItem FK0LM-TOT-PCT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Copy sy-sz-scl-cd
DataItem FK0LW-COPY-SY4SZSCL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data obtained switch
DataItem FK0LW-DATA-OBTAINED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display the size switch
DataItem FK0LW-DISPLAY-SIZE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor switch
DataItem FK0LW-END-CURSOR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FK0LW-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic index
DataItem FK0LW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generic index 2
DataItem FK0LW-IDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product type (D=dvl,I=inline)
DataItem FK0LW-PRODUCT-TYPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FK0LW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size data
DataItem FK0LW-SIZE-DATA char(400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sy-sz-scl-cd
DataItem FK0LW-SY4SZSCL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update the data switch
DataItem FK0LW-UPDT-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update performed switch
DataItem FK0LW-UPDT-PERFORMED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

