package fk0o;

import corpcom2.XX0XW01;
import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import fk.common.FKWREC;
import ta.common.TA1REC;
import ta.common.TAEREC;
import vv.common.VLRPSH01;
//*** PROGRAM=FK0O ****
//                     LRPS/PRELIM MENU
// 
// THIS PROGRAM DISPLAYS A LIST OF RELATED APPLICATIONS AND
// PROCESSES WHCIH MAY BE ACCESSED VIA NA ENTERED SELECTION OR
// SPECIFIED PF KEYS.  THE MENU CONTAINS THE LRPS NUMBER AND
// TYPE THAT MAY BE ENTERED AND WILL BE PASSED TO THE SELECTED
// APPLICATION.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      02/26/92  DFRANC  New application.
//          07/20/92  JALLE1  Fix logic to pass and retrieve
//                            data from COMMAREA.
//          09/28/92  JALLE1  Remove lrps type from map.
//          08/09/93  JALLE1  Remove references to FBDMDTYP
//                            for Aug '93 table changes.
// *********************
Program FK0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FKWREC FKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VLRPSH01 VLRPSH01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK0OM.FK0OM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0OM110 initial; /* map input/output*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
     /* ------------------------------------------------------------*/
     /* Get data passed in COMMAREA.*/
     /* ------------------------------------------------------------*/
    ;
    FK0OM110.FBAMDNBR = FKWREC.FBAMDNBR;
    ;
     /* ------------------------------------------------------------*/
     /* Clear FKWREC*/
     /* ------------------------------------------------------------*/
    ;
    set FKWREC empty;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0O-001; /* Converse the main process*/
    ;
    ;
    FK0O-001: FK0O-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0O-001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0O

// Main process to display a map
Function FK0O-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
   /* PERFORM FK0O100;                  /* Obtain the data to display*/
  ;
  FK0O-2000(); /* Format and display the map*/
  ;
  FK0O-3000(); /* Check attention identifier*/
  ;
  FK0O-4000(); /* Reset fields to normal intensity*/
  ;
  FK0O-5000(); /* Verify the entered data*/
  ;
  FK0O-6000(); /* Process valid input request*/
  ;
  ;
end // end FK0O-001

// Format and converse map
Function FK0O-2000()
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0OM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0OM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0OM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0OM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* if message to display*/
    set FK0OM110 alarm; /* Indicate sound alarm*/
    FK0OM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/
  end
  ;
   /* --------------------------------------------------------------*/
   /* Establish cursor position*/
   /* --------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no errors*/
    if (FK0OM110.FBAMDNBR > 0)
      set FK0OM110.FK0OM-SELECTION cursor; /* establish cursor position*/
    else
      set FK0OM110.FBAMDNBR cursor; /* establish cursor position*/
    end
  end
  ;
  ;
  converse FK0OM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0OM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0OM110.CAITEM; /* Application data*/
  ;
  ;
end // end FK0O-2000

// Check attention identifier
Function FK0O-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FKWREC empty; /* Init fkwrec*/
    ;
    FKWREC.FBAMDNBR = FK0OM110.FBAMDNBR; /* Model nbr*/
    ;
    COMMAREA.CATOAP = "FK0O"; /* to applicaiton*/
    COMMAREA.CAITEM = "    "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0OM110.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0OM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty; /* Init fkwrec*/
      ;
      FKWREC.FBAMDNBR = FK0OM110.FBAMDNBR; /* Model nbr*/
      ;
      COMMAREA.CATOAP = FK0OM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0OM110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* EXIT requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* PRCF requested*/
   || converseVar.eventKey is pf14 /* LRCF requested*/
   || converseVar.eventKey is pf15 /* HDRS requested*/
   || converseVar.eventKey is pf16 /* LRVM requested*/
   || converseVar.eventKey is pf17) /* LRVD requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0OM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0A"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0P"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0R"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FK0S"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0T"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK0V"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* item*/
    end
    ;
    set FKWREC empty; /* Init fkwrec*/
    ;
    FKWREC.FBAMDNBR = FK0OM110.FBAMDNBR; /* Model nbr*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK0O-3000

// Reset highlighted fields
Function FK0O-4000()
  ;
   /* ----------------------------------------------------*/
   /* Set all modifiable fields defined*/
   /* ----------------------------------------------------*/
  ;
  set FK0OM110.FBAMDNBR initialAttributes; /* LRPS number*/
  ;
  set FK0OM110.FK0OM-SELECTION initialAttributes; /* selection*/
  ;
  set FK0OM110.CATOAP initialAttributes;
  set FK0OM110.CAITEM initialAttributes;
  ;
  ;
end // end FK0O-4000

// Verify entered data
Function FK0O-5000()
   /* ----------------------------------------------------*/
   /* Display error if invalid selection*/
   /* ----------------------------------------------------*/
  ;
  if (FK0OM110.FK0OM-SELECTION >= 1
   && FK0OM110.FK0OM-SELECTION <= 5)
    ;
     /* next sentence*/
    ;
  else
    ;
    converseLib.validationFailed(8); /* field invalid or missing*/
    FKWREC.XXX-MOD-ID = "5000"; /* module identification*/
    set FK0OM110.FK0OM-SELECTION bold, cursor; /* highlight*/
    ;
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* Notify user if selection made for application not*/
   /* available at this time.*/
   /* ----------------------------------------------------*/
  ;
  if (FK0OM110.FK0OM-SELECTION == 5) /* FK0P*/
    ;
    converseLib.validationFailed(63); /* Selection not available*/
    FKWREC.XXX-MOD-ID = "5000"; /* module identification*/
    set FK0OM110.FK0OM-SELECTION bold, cursor; /* highlight*/
    exit stack;
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* Verify LRPS number and LPRS type*/
   /* ----------------------------------------------------*/
  ;
  FK0O-5100(); /* Verify LRPS info*/
  ;
   /* ----------------------------------------------------*/
   /* If any errors found, return to display map.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
end // end FK0O-5000

// Verify LRPS information
Function FK0O-5100()
  ;
   /* ----------------------------------------------------*/
   /* Verify LRPS number and LPRS type*/
   /* ----------------------------------------------------*/
  ;
  if (FK0OM110.FBAMDNBR <= 0 /* Model nbr missing*/
   && FK0OM110.FK0OM-SELECTION != 4) /* and not lrps header*/
    set FK0OM110.FBAMDNBR bold, cursor;
    FKWREC.XXX-MOD-ID = "5100"; /* Module id*/
    converseLib.validationFailed(71); /* lrps number must be entered*/
                                         /* and greater than 0*/
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check to see if a header record exists for the LRPS entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0OM110.FK0OM-SELECTION != 4) /* If lrps header not requested*/
    FK0O-5200(); /* Lookup header info*/
  end
  ;
   /* ----------------------------------------------------*/
   /* If any errors found, return to display map.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
end // end FK0O-5100

// Verify LRPS number
Function FK0O-5200()
  ;
   /* ---------------------------------------------------------*/
   /* Verify LRPS number against header table*/
   /* ---------------------------------------------------------*/
  ;
  VLRPSH01.FBAMDNBR = FK0OM110.FBAMDNBR;
  ;
  try
    call "IO6250" ("S ", SQLCA, VLRPSH01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
   /* ---------------------------------------------------------*/
   /* If call was successful, return to the previous process*/
   /* ---------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call sucessful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found code*/
      set FK0OM110.FBAMDNBR cursor, bold;
      FKWREC.XXX-MOD-ID = "5200"; /* module id*/
      converseLib.validationFailed(46); /* LRPS not found*/
      return;
    end
    ;
  end
  ;
   /* ---------------------------------------------------------*/
   /* If data not available, return an error message to the user*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ---------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data not available*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "5200 GET LRPS HEADER DATA ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0OM110"; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPSH01"; /* TABLE VIEW NAME*/
  TA1REC.TA1TBLKE = VLRPSH01.VLRPSH01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0O-5200

// Process valid request
Function FK0O-6000()
   /* ------------------------------------------------------------*/
   /* Process valid request - transfer to requested application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0OM110.FK0OM-SELECTION >= 1
   && FK0OM110.FK0OM-SELECTION <= 5)
    ;
    if (FK0OM110.FBAMDNBR > 0)
      FKWREC.FBAMDNBR = FK0OM110.FBAMDNBR; /* LRPS number*/
    end
    ;
    if (FK0OM110.FK0OM-SELECTION == 1) /* FK0R requested*/
      COMMAREA.CATOAP = "FK0R"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* map item*/
    end
    ;
    if (FK0OM110.FK0OM-SELECTION == 2) /* FK0T requested*/
      COMMAREA.CATOAP = "FK0T"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* map item*/
    end
    ;
    if (FK0OM110.FK0OM-SELECTION == 3) /* FK0V requested*/
      COMMAREA.CATOAP = "FK0V"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* map item*/
    end
    ;
    if (FK0OM110.FK0OM-SELECTION == 4) /* FK0S requested*/
      COMMAREA.CATOAP = "FK0S"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* map item*/
    end
    ;
    if (FK0OM110.FK0OM-SELECTION == 5) /* FK0P requested*/
      COMMAREA.CATOAP = "FK0P"; /* TO application*/
      COMMAREA.CAITEM = FK0OM110.CAITEM; /* map item*/
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK0O-6000

