package fk0k;

import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom4.XSPG301;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XDMCD;
import fb.common.FB4SZPCT;
import fk.common.*;
import pg.common.PG2REC;
import pg.common.PG3REC;
import pg.common.PG4REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SY4IDDSC;
import sy.common.SY4REC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VABUSE01;
import vv.common.VSYSCL01;
//*** PROGRAM=FK0K ****
//  FK0K  -  COMPONENTS FORECASTING - STYLE/BAG SIZE INQUIRY
// 
// This program is part of the Components Forecasting System.
// The application provides inquiry capability for air bags by
// style and size.  The user will key in a style, color, and
// dimension, and the application will retrieve all air bag and
// size scales for the entered style, color, and dimension.
// All valid shoe sizes will be displayed.  The user may scroll
// up and down until no more data is displayed.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/19/92  DFRANC  New application.
//          08/16/93  JALLE1  Ignore bag size 88.
// FK9994   09/09/93  JALLE1  CSP 4.1 conversion.
// FK0027   12/30/93  JALLE1  Show 'XX' for air bag size if
//                            FK-ALT-AIRBAG-FL = 'Y'es.
// *********************
Program FK0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK0KW00 FK0KW00; // record
  FK0KW01 FK0KW01; // record
  FK0KW02 FK0KW02; // record
  FKWREC FKWREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VABUSE01 VABUSE01; // record
  VSYSCL01 VSYSCL01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK0KM.FK0KM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0KM110 initial; /* map input/output*/
    set TAEREC empty; /* Error diagnosis information*/
    set SQLCA empty; /* SQL communication area*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Initialize temp storage record*/
    set VSYSCL01 empty; /* Initialize airbag style record*/
    set VABUSE01 empty; /* Initialize airbag usage record*/
    set PG2REC empty; /* Initialize production style record*/
    set PG4REC empty; /* Initialize development style record*/
    set SY4REC empty; /* Initialize scale record*/
    set FK0KW00 empty; /* Initialize working storage rec*/
    set FK0KW01 empty; /* Initialize working storage rec*/
    set FK0KW02 empty; /* Initialize working storage rec table*/
    ;
     /* ------------------------------------------------------------*/
     /* Check for vendor code being passed in from another application*/
     /* ------------------------------------------------------------*/
    ;
    if (FKWREC.SY1STNBR[1] > " "
     || FKWREC.SY2CLRID[1] > " "
     || FKWREC.XDMCD[1] > " ")
      FK0KM110.SY1STNBR = FKWREC.SY1STNBR[1];
      FK0KM110.SY2CLRID = FKWREC.SY2CLRID[1];
      FK0KM110.XDMCD = FKWREC.XDMCD[1];
      FK0KW00.FK0KW-REQUEST-DATA-SW = "Y"; /* Data requested switch*/
    else
      FK0KW00.FK0KW-REQUEST-DATA-SW = "N"; /* Data requested switch*/
    end
    ;
    set FKWREC empty; /* Clear out FKWREC*/
    FK0KW00.FK0KW-FORMAT-MAP-SW = "Y"; /* Format the data*/
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0K-0001; /* Converse the main process*/
    ;
    ;
    FK0K-0001: FK0K-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0K-0001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0K

// Main process to display a map
Function FK0K-0001()
   /* ---------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0K-1000(); /* Obtain the data to display*/
  ;
  FK0K-2000(); /* Format and display the map*/
  ;
  FK0K-3000(); /* Check attention identifier*/
  ;
  FK0K-4000(); /* Reset fields to normal intensity*/
  ;
  FK0K-5000(); /* Verify the entered data*/
  ;
  FK0K-6000(); /* Process valid input request*/
  ;
   /* --------------------- END OF FK0k-0001 ------------------------*/
end // end FK0K-0001

// Obtain the data to display
Function FK0K-1000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0KW00.FK0KW-REQUEST-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW00.XXXTSLEN = 405; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK0KW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  ;
  FK0K-1100(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Clear out table working storage and move map key fields to*/
   /* temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0KW02 empty;
  ;
  FK0KW01.SY1STNBR = FK0KM110.SY1STNBR; /* style number*/
  FK0KW01.SY2CLRID = FK0KM110.SY2CLRID; /* style color*/
  FK0KW01.XDMCD = FK0KM110.XDMCD; /* dimension code*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain style description to display on the map*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-VSYCLR01-FOUND-SW = "N";
  ;
  FK0K-1200(); /* Select product style*/
  ;
  if (FK0KW00.FK0KW-VSYCLR01-FOUND-SW == "N")
    ;
    FK0K-1210(); /* Select development*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check for errors*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize Indexes and switches.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-IDX = 1; /* Initialize line index*/
  FK0KW00.FK0KW-AB-IDX = 1; /* Initialize air bag index*/
  FK0KW00.FK0KW-SZ-IDX = 1; /* Initialize size index*/
  FK0KW00.FK0KW-VSYSCL01-EOF-SW = "N"; /* End of cursor switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Open and read in the first record from DCMPNT.VSYSCL01*/
   /* If no records found, set error message and return*/
   /* ------------------------------------------------------------*/
  ;
  FK0K-1300(); /* Select set and open cursor (DCMPNT.VSYSCL01)*/
  ;
  FK0K-1310(); /* Fetch next row in the cursor*/
  ;
  if (FK0KW00.FK0KW-VSYSCL01-EOF-SW == "Y") /* key entered not found*/
    set FK0KM110.SY1STNBR cursor, bold;
    set FK0KM110.SY2CLRID bold;
    set FK0KM110.XDMCD bold;
    converseLib.validationFailed(15);
    FKWREC.XXX-MOD-ID = "1000";
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save key information*/
   /* ------------------------------------------------------------*/
  ;
  FK0K-1330(); /* Save the key information*/
  ;
   /* ------------------------------------------------------------*/
   /* Process through the Air bag style size table until EOF.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0KW00.FK0KW-VSYSCL01-EOF-SW == "N" /* Until end of cursor*/
   && FK0KW00.FK0KW-SZ-IDX <= 160)
    ;
    FK0K-1310(); /* Read next row from DCMPNT.VSYSCL01*/
    ;
    if (FK0KW00.FK0KW-VSYSCL01-EOF-SW == "N")
      ;
      FK0K-1400(); /* process records*/
      ;
    end
    ;
  end
  ;
  FK0K-1320(); /* Close cursor (DCMPNT.VSYSCL01)*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the size descriptions for display on the map.  If a*/
   /* production style/color/dimension product was found use the*/
   /* XSPG301 subprogram, else look up the descriptions on the*/
   /* VSCALE01 table.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0KW00.FK0KW-VSYCLR01-FOUND-SW == "Y")
    FK0K-1500(); /* Obtain size desc from XSPG301*/
  else
    FK0K-1550(); /* Obtain size desc from DPROD.VSCALE01*/
    FK0K-1560(); /* Load size descriptions in table*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data gathtered to temporary storage.  Editing is*/
   /* also performed in this section, which is unique to this program.*/
   /* This is done so errors will be displayed on the initial presentation*/
   /* of the screen.*/
   /* ------------------------------------------------------------*/
  ;
  FK0K-1600(); /* Format the data to temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0KW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    FKWREC.XXXMSGNO = 18; /* No data was found to display*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-REQUEST-DATA-SW = "N"; /* Request for data*/
  ;
   /* ----------------- END OF FK0K-1000 --------------------------*/
end // end FK0K-1000

// Purge any temporary storage
Function FK0K-1100()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0KW01 empty; /* M110 display storage*/
  ;
  FK0KW00.FK0KW-STORAGE-UPD-SW = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK0KW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FK0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-1100 -----------------------------*/
end // end FK0K-1100

// Select style (DPRODG.VSYCLR01)
Function FK0K-1200()
   /* ------------------------------------------------------------*/
   /* Set up the key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* Clear row storage area*/
  ;
  PG2REC.XGPCD = "02"; /* Group code*/
  PG2REC.SY1STNBR = FK0KM110.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FK0KM110.SY2CLRID; /* Color id*/
  PG2REC.XDMCD = FK0KM110.XDMCD; /* Dimension code*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0KW00.FK0KW-VSYCLR01-FOUND-SW = "Y";
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1200 GET COLOR DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-1200 ------------------------------*/
end // end FK0K-1200

// Select color (DPRODG.VSYDVL01)
Function FK0K-1210()
   /* ------------------------------------------------------------*/
   /* Set up the key*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty; /* Clear row storage area*/
  ;
  PG4REC.PG4STNBR = FK0KM110.SY1STNBR; /* Style number*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0KW00.FK0KW-VSYDVL01-FOUND-SW = "Y";
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FKWREC.XXX-MOD-ID = "1210"; /* Module*/
      converseLib.validationFailed(43); /* Style not found*/
      FK0KW00.FK0KW-FORMAT-MAP-SW = "N";
      set FK0KM110.SY1STNBR cursor, bold;
      set FK0KM110.SY2CLRID bold;
      set FK0KM110.XDMCD bold;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1220"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1210 GET COLOR DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-1210 ------------------------------*/
end // end FK0K-1210

// Open cursor DCMPNT.VSYSCL01
Function FK0K-1300()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VSYSCL01 empty; /* Clear row storage area*/
  ;
  VSYSCL01.SY1STNBR = FK0KW01.SY1STNBR; /* Style number*/
  VSYSCL01.SY2CLRID = FK0KW01.SY2CLRID; /* Color id*/
  VSYSCL01.XDMCD = FK0KW01.XDMCD; /* Dimension code*/
  VSYSCL01.FK-AIRBAG-ID = "*"; /* Air bag number*/
  ;
  try
    call "IO6390" ("S1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  FK0KW00.FK0KW-REQUEST-DATA-SW = "N";
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-1300 ------------------------------*/
end // end FK0K-1300

// Fetch next row DCMPNT.VSYSCL01
Function FK0K-1310()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6390" ("N1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FK0KW00.FK0KW-VSYSCL01-EOF-SW = "Y"; /* Indicate end of file*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1310"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-1310 ------------------------------*/
end // end FK0K-1310

// Close cursor DCMPNT.VSYSCL01
Function FK0K-1320()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6390" ("C1", SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1320"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR VSYSCL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-1320 ------------------------------*/
end // end FK0K-1320

// Save key information
Function FK0K-1330()
   /* ------------------------------------------------------------*/
   /* For the first read of the DCMPNT.VSYSCL01 record save the*/
   /* key information into working storage record.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW02.FK-AIRBAG-ID[1] = VSYSCL01.FK-AIRBAG-ID;
  FK0KW02.FK-AIRBAG-SZ-SCLCD[1] = VSYSCL01.FK-AIRBAG-SZ-SCLCD;
  ;
  if (VSYSCL01.FK-AIRBAG-SZ-ID > 0)
    FK0KW02.FK0KW-SZ-FLAG-1[FK0KW-SZ-IDX] = "Y";
    FK0KW02.FK0KW-BAG-SZ-ID-NUM-1[FK0KW-SZ-IDX] = VSYSCL01.FK-AIRBAG-SZ-ID;
    ;
      /* ------------------------------------------------------------*/
      /* Save the percent for the size scale. This only needs to*/
      /* be done for the first air bag found as the percent should*/
      /* be the same for all airbags for this style/color/dim.*/
      /* ------------------------------------------------------------*/
    ;
    FK0KW02.FB4SZPCT[FK0KW-SZ-IDX] = VSYSCL01.FB4SZPCT;
    ;
  else
    ;
    FK0KW02.FK0KW-SZ-FLAG-1[FK0KW-SZ-IDX] = "N";
    FK0KW02.FB4SZPCT[FK0KW-SZ-IDX] = VSYSCL01.FB4SZPCT;
    if (VSYSCL01.FK-ALT-AIRBAG-FL == "Y") /* Alternate bag exists*/
      FK0KW02.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] = "XX";
    else
      FK0KW02.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-SZ-IDX] = "00";
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Increment the index*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-SZ-IDX = FK0KW00.FK0KW-SZ-IDX + 1;
  ;
   /* ----------------- END OF FK0K-1330 --------------------------*/
end // end FK0K-1330

// Obtain the data to display
Function FK0K-1400()
   /* ------------------------------------------------------------*/
   /* If the air bag number or the air bag size scale code have*/
   /* changed, reset the size index, save the new key and process*/
   /* through the records.*/
   /* ------------------------------------------------------------*/
  ;
  if (VSYSCL01.FK-AIRBAG-ID != FK0KW02.FK-AIRBAG-ID[FK0KW-AB-IDX]
   || VSYSCL01.FK-AIRBAG-SZ-SCLCD != 
  FK0KW02.FK-AIRBAG-SZ-SCLCD[FK0KW-AB-IDX])
    ;
    FK0KW00.FK0KW-AB-IDX = FK0KW00.FK0KW-AB-IDX + 1;
    FK0KW00.FK0KW-SZ-IDX = 1;
    ;
    if (FK0KW00.FK0KW-AB-IDX == 2)
      FK0KW02.FK-AIRBAG-ID[2] = VSYSCL01.FK-AIRBAG-ID;
      FK0KW02.FK-AIRBAG-SZ-SCLCD[2] = VSYSCL01.FK-AIRBAG-SZ-SCLCD;
      if (VSYSCL01.FK-AIRBAG-SZ-ID > 0)
        FK0KW02.FK0KW-SZ-FLAG-2[FK0KW-SZ-IDX] = "Y";
        FK0KW02.FK0KW-BAG-SZ-ID-NUM-2[FK0KW-SZ-IDX] = VSYSCL01.FK-AIRBAG-SZ-ID;
        ;
      else
        FK0KW02.FK0KW-SZ-FLAG-2[FK0KW-SZ-IDX] = "N";
        if (VSYSCL01.FK-ALT-AIRBAG-FL == "Y") /* Alternate bag exists*/
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-SZ-IDX] = "XX";
        else
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-SZ-IDX] = "00";
        end
      end
      ;
    end
    ;
    if (FK0KW00.FK0KW-AB-IDX == 3)
      FK0KW02.FK-AIRBAG-ID[3] = VSYSCL01.FK-AIRBAG-ID;
      FK0KW02.FK-AIRBAG-SZ-SCLCD[3] = VSYSCL01.FK-AIRBAG-SZ-SCLCD;
      if (VSYSCL01.FK-AIRBAG-SZ-ID > 0)
        FK0KW02.FK0KW-SZ-FLAG-3[FK0KW-SZ-IDX] = "Y";
        FK0KW02.FK0KW-BAG-SZ-ID-NUM-3[FK0KW-SZ-IDX] = VSYSCL01.FK-AIRBAG-SZ-ID;
        ;
      else
        FK0KW02.FK0KW-SZ-FLAG-3[FK0KW-SZ-IDX] = "N";
        if (VSYSCL01.FK-ALT-AIRBAG-FL == "Y") /* Alternate bag exists*/
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-SZ-IDX] = "XX";
        else
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-SZ-IDX] = "00";
        end
      end
      ;
    end
    ;
    if (FK0KW00.FK0KW-AB-IDX == 4)
      FK0KW02.FK-AIRBAG-ID[4] = VSYSCL01.FK-AIRBAG-ID;
      FK0KW02.FK-AIRBAG-SZ-SCLCD[4] = VSYSCL01.FK-AIRBAG-SZ-SCLCD;
      if (VSYSCL01.FK-AIRBAG-SZ-ID > 0)
        FK0KW02.FK0KW-SZ-FLAG-4[FK0KW-SZ-IDX] = "Y";
        FK0KW02.FK0KW-BAG-SZ-ID-NUM-4[FK0KW-SZ-IDX] = VSYSCL01.FK-AIRBAG-SZ-ID;
        ;
      else
        FK0KW02.FK0KW-SZ-FLAG-4[FK0KW-SZ-IDX] = "N";
        if (VSYSCL01.FK-ALT-AIRBAG-FL == "Y") /* Alternate bag exists*/
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-SZ-IDX] = "XX";
        else
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-SZ-IDX] = "00";
        end
      end
      ;
    end
    ;
  else
    if (FK0KW00.FK0KW-AB-IDX == 1)
      if (VSYSCL01.FK-AIRBAG-SZ-ID > 0)
        FK0KW02.FK0KW-SZ-FLAG-1[FK0KW-SZ-IDX] = "Y";
        FK0KW02.FK0KW-BAG-SZ-ID-NUM-1[FK0KW-SZ-IDX] = VSYSCL01.FK-AIRBAG-SZ-ID;
            /* ------------------------------------------------------------*/
            /* Save the percent for the size scale. This only needs to*/
            /* be done for the first air bag found as the percent should*/
            /* be the same for all airbags for this style/color/dim.*/
            /* ------------------------------------------------------------*/
        FK0KW02.FB4SZPCT[FK0KW-SZ-IDX] = VSYSCL01.FB4SZPCT;
        ;
      else
        FK0KW02.FK0KW-SZ-FLAG-1[FK0KW-SZ-IDX] = "N";
        FK0KW02.FB4SZPCT[FK0KW-SZ-IDX] = VSYSCL01.FB4SZPCT;
        if (VSYSCL01.FK-ALT-AIRBAG-FL == "Y") /* Alternate bag exists*/
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-SZ-IDX] = "XX";
        else
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-SZ-IDX] = "00";
        end
      end
      ;
    end
    ;
    if (FK0KW00.FK0KW-AB-IDX == 2)
      if (VSYSCL01.FK-AIRBAG-SZ-ID > 0)
        FK0KW02.FK0KW-SZ-FLAG-2[FK0KW-SZ-IDX] = "Y";
        FK0KW02.FK0KW-BAG-SZ-ID-NUM-2[FK0KW-SZ-IDX] = VSYSCL01.FK-AIRBAG-SZ-ID;
      else
        FK0KW02.FK0KW-SZ-FLAG-2[FK0KW-SZ-IDX] = "N";
        if (VSYSCL01.FK-ALT-AIRBAG-FL == "Y") /* Alternate bag exists*/
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-SZ-IDX] = "XX";
        else
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-SZ-IDX] = "00";
        end
      end
      ;
    end
    ;
    if (FK0KW00.FK0KW-AB-IDX == 3)
      if (VSYSCL01.FK-AIRBAG-SZ-ID > 0)
        FK0KW02.FK0KW-SZ-FLAG-3[FK0KW-SZ-IDX] = "Y";
        FK0KW02.FK0KW-BAG-SZ-ID-NUM-3[FK0KW-SZ-IDX] = VSYSCL01.FK-AIRBAG-SZ-ID;
      else
        FK0KW02.FK0KW-SZ-FLAG-3[FK0KW-SZ-IDX] = "N";
        if (VSYSCL01.FK-ALT-AIRBAG-FL == "Y") /* Alternate bag exists*/
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-SZ-IDX] = "XX";
        else
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-SZ-IDX] = "00";
        end
      end
      ;
    end
    ;
    if (FK0KW00.FK0KW-AB-IDX == 4)
      if (VSYSCL01.FK-AIRBAG-SZ-ID > 0)
        FK0KW02.FK0KW-SZ-FLAG-4[FK0KW-SZ-IDX] = "Y";
        FK0KW02.FK0KW-BAG-SZ-ID-NUM-4[FK0KW-SZ-IDX] = VSYSCL01.FK-AIRBAG-SZ-ID;
      else
        FK0KW02.FK0KW-SZ-FLAG-4[FK0KW-SZ-IDX] = "N";
        if (VSYSCL01.FK-ALT-AIRBAG-FL == "Y") /* Alternate bag exists*/
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-SZ-IDX] = "XX";
        else
          FK0KW02.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-SZ-IDX] = "00";
        end
      end
      ;
    end
    ;
  end
  ;
  FK0KW00.FK0KW-SZ-IDX = FK0KW00.FK0KW-SZ-IDX + 1;
  ;
   /* ----------------- END OF FK0K-1400 --------------------------*/
end // end FK0K-1400

// obtain size descriptions
Function FK0K-1500()
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/
  ;
  set PG3REC empty;
  ;
  PG3REC.XGPCD = "02";
  PG3REC.SY1STNBR = FK0KM110.SY1STNBR;
  PG3REC.SY2CLRID = FK0KM110.SY2CLRID;
  PG3REC.XDMCD = FK0KM110.XDMCD;
  PG3REC.XQACD = "**"; /* Get either A or B grade sizes*/
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";
  PG3REC.PG3XDVCD = "  ";
  ;
  XSPG301(); /* Get valid sizes*/
  ;
   /* ---------------------------------------------------------*/
   /* determine which fields have size descriptions.*/
   /* ---------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-SZ-IDX = 1; /* init index*/
  ;
  while (FK0KW00.FK0KW-SZ-IDX <= 40) /* for all sizes*/
    ;
    if (PG3REC.SY4IDDSC[FK0KW-SZ-IDX] != " ") /* if description*/
      FK0KW02.FK0KW-SZ-DESC-FLAG[FK0KW-SZ-IDX] = "Y";
      FK0KW02.SY4IDDSC[FK0KW-SZ-IDX] = PG3REC.SY4IDDSC[FK0KW-SZ-IDX];
    else
      FK0KW02.FK0KW-SZ-DESC-FLAG[FK0KW-SZ-IDX] = "N";
    end
    ;
    FK0KW00.FK0KW-SZ-IDX = FK0KW00.FK0KW-SZ-IDX + 1;
  end
  ;
end // end FK0K-1500

// Select unique DPROD.VSCALE01
Function FK0K-1550()
   /* ---------------------------------------------------------------------*/
   /* Select unique size scale row for the style/color/dim size scale code*/
   /* ---------------------------------------------------------------------*/
  ;
  set SY4REC empty;
  ;
  SY4REC.SY4SZSCL = VSYSCL01.SY4SZSCL;
  ;
  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FK0KW00.FK0KW-VSCALE01-EOF-SW = "Y"; /* Indicate end of file*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1550"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VSCALE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCALE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.SY4SZSCL; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-1310 ------------------------------*/
end // end FK0K-1550

// Load size desc into table
Function FK0K-1560()
   /* ------------------------------------------------------------*/
   /* Load the size descriptions from DPROD.VSCALE01 into a table*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-SZ-IDX = 1;
  ;
  while (FK0KW00.FK0KW-SZ-IDX <= 40)
    ;
    if (FK0KW00.FK0KW-VSCALE01-EOF-SW == "N")
      ;
      FK0KW01.SY4IDDSC[FK0KW-SZ-IDX] = "***";
      ;
    else
      ;
      if (SY4REC.SY4IDDSC[FK0KW-SZ-IDX] > " ")
        FK0KW02.FK0KW-SZ-DESC-FLAG[FK0KW-SZ-IDX] = "Y";
        FK0KW02.SY4IDDSC[FK0KW-SZ-IDX] = SY4REC.SY4IDDSC[FK0KW-SZ-IDX];
      else
        FK0KW02.FK0KW-SZ-DESC-FLAG[FK0KW-SZ-IDX] = "N";
      end
      ;
    end
    ;
    FK0KW00.FK0KW-SZ-IDX = FK0KW00.FK0KW-SZ-IDX + 1;
    ;
  end
  ;
   /* ----------------- END OF FK0K-1560 -----------------------------*/
end // end FK0K-1560

// Save data in display storage
Function FK0K-1600()
   /* ------------------------------------------------------------*/
   /* Obtain usage information to determine if number of airbags*/
   /* per shoe is correct.  This information will be used in FK0K-1620*/
   /* ------------------------------------------------------------*/
  ;
  FK0K-5200(); /* Open cursor DCMPNT.VABUSE01*/
  ;
  FK0K-5210(); /* Read record DCMPNT.VABUSE01*/
  ;
  FK0K-5220(); /* Close cursor DCMPNT.VABUSE01*/
  ;
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0K-1610(); /* Format header information*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the data from working storage tables to display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-IDX = 1; /* Initialize screen index*/
  FK0KW00.FK0KW-SZ-IDX = 1; /* Initialize size index*/
  FK0KW00.FK0KW-AB-IDX = 1; /* Initialize air bag index*/
  ;
   /* --------------------------------------------------------------------*/
   /* Process through through all the arrays and load information into*/
   /* temporary storage record and write the record out.  Continue until*/
   /* end of arrays.*/
   /* --------------------------------------------------------------------*/
  ;
  while (FK0KW00.FK0KW-SZ-IDX <= 40)
    ;
     /* ------------------------------------------------------------*/
     /* If a description is found move it temporary storage along with*/
     /* with the rest of the line fields.  If a description wasn't found*/
     /* and a air bag size id has been entered, place ***** in description*/
     /* field.  Only display those records that have a description or air*/
     /* bag size id's entered.*/
     /* ------------------------------------------------------------*/
    ;
    if (FK0KW02.FK0KW-SZ-DESC-FLAG[FK0KW-SZ-IDX] == "Y")
      FK0KW01.SY4IDDSC[FK0KW-IDX] = FK0KW02.SY4IDDSC[FK0KW-SZ-IDX];
      FK0KW01.FB4SZPCT[FK0KW-IDX] = FK0KW02.FB4SZPCT[FK0KW-SZ-IDX];
      FK0KW00.FK0KW-FORMAT-LINE-SW = "Y";
      FK0KW01.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] = FK0KW02.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-SZ-IDX];
      FK0KW01.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] = FK0KW02.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-SZ-IDX];
      FK0KW01.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] = FK0KW02.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-SZ-IDX];
      FK0KW01.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] = FK0KW02.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-SZ-IDX];
      ;
    else
      if (FK0KW02.FK0KW-SZ-FLAG-1[FK0KW-SZ-IDX] == "Y"
       || FK0KW02.FK0KW-SZ-FLAG-2[FK0KW-SZ-IDX] == "Y"
       || FK0KW02.FK0KW-SZ-FLAG-3[FK0KW-SZ-IDX] == "Y"
       || FK0KW02.FK0KW-SZ-FLAG-4[FK0KW-SZ-IDX] == "Y")
        FK0KW01.SY4IDDSC[FK0KW-IDX] = "*****";
        FK0KW01.FB4SZPCT[FK0KW-IDX] = FK0KW02.FB4SZPCT[FK0KW-SZ-IDX];
        FK0KW00.FK0KW-FORMAT-LINE-SW = "Y";
        FK0KW01.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] = FK0KW02.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-SZ-IDX];
        FK0KW01.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] = FK0KW02.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-SZ-IDX];
        FK0KW01.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] = FK0KW02.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-SZ-IDX];
        FK0KW01.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] = FK0KW02.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-SZ-IDX];
      end
    end
    ;
    if (FK0KW00.FK0KW-FORMAT-LINE-SW == "Y")
      ;
        /* -------------------------------------------------------------*/
        /* If a line is to be formatted, edit the line data against*/
        /* the VABUSE01 information to see if shoe size has the correct*/
        /* number of air bags per shoe.   Increment the index*/
        /* -------------------------------------------------------------*/
      ;
      FK0K-1620(); /* Verify line data*/
      ;
      FK0KW00.FK0KW-IDX = FK0KW00.FK0KW-IDX + 1; /* Increment line idx*/
      FK0KW00.FK0KW-FORMAT-LINE-SW = "N"; /* Reset switch*/
    end
    ;
    FK0KW00.FK0KW-SZ-IDX = FK0KW00.FK0KW-SZ-IDX + 1;
    ;
     /* ---------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
     /* ---------------------------------------------------------------*/
    ;
    if (FK0KW00.FK0KW-IDX > 14)
      ;
      FK0K-1700(); /* Write temporary storage record*/
      ;
      FK0K-1610(); /* Format header data to display*/
      ;
      FK0KW00.FK0KW-IDX = 1;
    end
    ;
  end
  ;
   /* --------------------------------------------------------------------*/
   /* Add any partially formatted last page to temporary storage.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0KW00.FK0KW-IDX > 1)
    ;
    FK0K-1700(); /* Write temporary storage record*/
    ;
  end
  ;
   /* ----------------- END OF FK0K-1600 -----------------------------*/
end // end FK0K-1600

// Format header display data
Function FK0K-1610()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW01.SY1STNBR = VSYSCL01.SY1STNBR; /* Style number*/
  FK0KW01.SY2CLRID = VSYSCL01.SY2CLRID; /* Color id*/
  FK0KW01.XDMCD = VSYSCL01.XDMCD; /* Dimension code*/
  ;
  if (FK0KW00.FK0KW-VSYCLR01-FOUND-SW == "Y")
    FK0KW01.SY1SSTNM = PG2REC.SY1SSTNM;
  else
    FK0KW01.SY1SSTNM = PG4REC.SY1SSTNM;
  end
  ;
   /* --------------------------------------------------------------------*/
   /* Save the air bag numbers and size scale codes to appropriate header*/
   /* There is a maximum of 4 air bags that can be displayed for a style/*/
   /* Color/Dimension on the screen.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0KW02.FK-AIRBAG-ID[1] > " ")
    FK0KW01.FK-AIRBAG-ID[1] = FK0KW02.FK-AIRBAG-ID[1];
    FK0KW01.FK-AIRBAG-SZ-SCLCD[1] = FK0KW02.FK-AIRBAG-SZ-SCLCD[1];
  end
  ;
  if (FK0KW02.FK-AIRBAG-ID[2] > " ")
    FK0KW01.FK-AIRBAG-ID[2] = FK0KW02.FK-AIRBAG-ID[2];
    FK0KW01.FK-AIRBAG-SZ-SCLCD[2] = FK0KW02.FK-AIRBAG-SZ-SCLCD[2];
  end
  ;
  if (FK0KW02.FK-AIRBAG-ID[3] > " ")
    FK0KW01.FK-AIRBAG-ID[3] = FK0KW02.FK-AIRBAG-ID[3];
    FK0KW01.FK-AIRBAG-SZ-SCLCD[3] = FK0KW02.FK-AIRBAG-SZ-SCLCD[3];
  end
  ;
  if (FK0KW02.FK-AIRBAG-ID[4] > " ")
    FK0KW01.FK-AIRBAG-ID[4] = FK0KW02.FK-AIRBAG-ID[4];
    FK0KW01.FK-AIRBAG-SZ-SCLCD[4] = FK0KW02.FK-AIRBAG-SZ-SCLCD[4];
  end
  ;
   /* ----------------- END OF FK0K-1610 -----------------------------*/
end // end FK0K-1610

// Verify displayed line data
Function FK0K-1620()
   /* ---------------------------------------------------------------------*/
   /* Count the number of air bags on the current line.  If number*/
   /* does not equal the VABUSE01 air bags per shoe, set an error flag in*/
   /* temporary storage record, along with the error message.  This*/
   /* editing is unique to this program and does not follow the normal*/
   /* coding standards of this system.*/
   /* ---------------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-NBR-AIRBAGS = 0; /* Reset counter*/
  ;
  if (FK0KW02.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-SZ-IDX] != "00"
   && FK0KW02.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-SZ-IDX] != "XX")
    FK0KW00.FK0KW-NBR-AIRBAGS = FK0KW00.FK0KW-NBR-AIRBAGS + 1;
  end
  ;
  if (FK0KW02.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-SZ-IDX] != "00"
   && FK0KW02.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-SZ-IDX] != "XX")
    FK0KW00.FK0KW-NBR-AIRBAGS = FK0KW00.FK0KW-NBR-AIRBAGS + 1;
  end
  ;
  if (FK0KW02.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-SZ-IDX] != "00"
   && FK0KW02.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-SZ-IDX] != "XX")
    FK0KW00.FK0KW-NBR-AIRBAGS = FK0KW00.FK0KW-NBR-AIRBAGS + 1;
  end
  ;
  if (FK0KW02.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-SZ-IDX] != "00"
   && FK0KW02.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-SZ-IDX] != "XX")
    FK0KW00.FK0KW-NBR-AIRBAGS = FK0KW00.FK0KW-NBR-AIRBAGS + 1;
  end
  ;
  if (FK0KW00.FK0KW-NBR-AIRBAGS != VABUSE01.FK-NBR-AIRBAG-SHOE
   && FK0KW02.FB4SZPCT[FK0KW-SZ-IDX] > 0)
    FK0KW01.FK0KW-ERROR-FLAG[FK0KW-IDX] = "Y";
    FK0KW01.FK0KW-LINE-ERROR-NBR[FK0KW-IDX] = 91;
    FK0KW01.FK0KW-MOD-ID[FK0KW-IDX] = "1620";
  end
  ;
  if (FK0KW02.FB4SZPCT[FK0KW-SZ-IDX] > 0
   && FK0KW00.FK0KW-NBR-AIRBAGS == 0)
    FK0KW01.FK0KW-ERROR-FLAG[FK0KW-IDX] = "Y";
    FK0KW01.FK0KW-LINE-ERROR-NBR[FK0KW-IDX] = 90;
    FK0KW01.FK0KW-MOD-ID[FK0KW-IDX] = "1620";
  end
  ;
   /* ---------------------- End FK0K-1620 ------------------------------*/
end // end FK0K-1620

// Add page to temporary storage
Function FK0K-1700()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW01.XXXTSLEN = FK0KW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FK0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FK0KW01 empty; /* M001 display storage*/
    ;
    FK0KW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-1700 ------------------------------*/
end // end FK0K-1700

// Format and converse map
Function FK0K-2000()
   /* -------------------------------------------------------------*/
   /* If an error was found, save the error message number*/
   /* -------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* -------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display*/
   /* -------------------------------------------------------------*/
  ;
  if (FK0KW00.FK0KW-REQUEST-DATA-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0)   /* or no error found*/
    ;
    if (FK0KW00.FK0KW-FORMAT-MAP-SW == "Y") /* Map must be formatted*/
      FK0K-2100(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* -------------------------------------------------------------*/
   /* Set dark any air bag sizes that are = 0.*/
   /* -------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-IDX = 1; /* Init index*/
  ;
  while (FK0KW00.FK0KW-IDX <= 14) /* For each map line*/
    ;
    if (FK0KM110.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] == "00") /* If bag size 0*/
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] invisible, skip;
    end
    if (FK0KM110.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] == "00") /* If bag size 0*/
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] invisible, skip;
    end
    if (FK0KM110.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] == "00") /* If bag size 0*/
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] invisible, skip;
    end
    if (FK0KM110.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] == "00") /* If bag size 0*/
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] invisible, skip;
    end
    ;
    FK0KW00.FK0KW-IDX = FK0KW00.FK0KW-IDX + 1; /* Increment*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no data to display set cursor at vendor code*/
   /* ------------------------------------------------------------*/
  ;
  set FK0KM110.SY1STNBR cursor;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0KM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0KM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0KM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0KM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/
    ;
    set FK0KM110 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FK0KM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0KM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0KM110.CAITEM; /* Application data*/
  ;
   /* ---------------- End of FK0K-2000 --------------------------*/
end // end FK0K-2000

// Format the display data
Function FK0K-2100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0KM110 initial; /* M110 input/output area*/
  ;
  FK0KW00.FK0KW-FORMAT-MAP-SW = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0KW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FK0KW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (FK0KW00.FK0KW-STORAGE-UPD-SW == "Y") /* Current page was changed*/
        ;
        FK0KS-01(); /* Update temporary storage page*/
        ;
        FK0KW00.FK0KW-STORAGE-UPD-SW = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FK0KW00.XXXTSPAG > FK0KW00.TA5TSQIX) /* Desired greater highest*/
        FK0KW00.XXXTSPAG = FK0KW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FK0KS-02(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FK0KM110.XXXLITPG skip; /* "PAGE" literal*/
    FK0KM110.XXXTSPAG = FK0KW00.XXXTSPAG; /* Current page*/
    set FK0KM110.XXXLITOF skip; /* "OF" literal*/
    FK0KM110.TA5TSQIX = FK0KW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0KW01.SY1STNBR <= " ") /* Style number not present*/
    set FK0KM110.SY1STNBR cursor; /* Position cursor*/
  end
  ;
  FK0KM110.SY1STNBR = FK0KW01.SY1STNBR; /* Style number*/
  FK0KM110.SY2CLRID = FK0KW01.SY2CLRID; /* Color id*/
  FK0KM110.XDMCD = FK0KW01.XDMCD; /* Dimension code*/
  ;
  FK0KM110.SY1SSTNM = FK0KW01.SY1SSTNM; /* Style description*/
  ;
  FK0KM110.FK0KW-FK-AIRBAG-NBR-1 = FK0KW01.FK-AIRBAG-ID[1];
  FK0KM110.FK0KW-FK-AIRBAG-NBR-2 = FK0KW01.FK-AIRBAG-ID[2];
  FK0KM110.FK0KW-FK-AIRBAG-NBR-3 = FK0KW01.FK-AIRBAG-ID[3];
  FK0KM110.FK0KW-FK-AIRBAG-NBR-4 = FK0KW01.FK-AIRBAG-ID[4];
  ;
  FK0KM110.FK0KW-FK-AIRBAG-SZ-SCLCD-1 = FK0KW01.FK-AIRBAG-SZ-SCLCD[1];
  FK0KM110.FK0KW-FK-AIRBAG-SZ-SCLCD-2 = FK0KW01.FK-AIRBAG-SZ-SCLCD[2];
  FK0KM110.FK0KW-FK-AIRBAG-SZ-SCLCD-3 = FK0KW01.FK-AIRBAG-SZ-SCLCD[3];
  FK0KM110.FK0KW-FK-AIRBAG-SZ-SCLCD-4 = FK0KW01.FK-AIRBAG-SZ-SCLCD[4];
  ;
  FK0KW00.FK0KW-IDX = 1; /* Initialize line index*/
  ;
  while (FK0KW00.FK0KW-IDX <= 14) /* Until screen is full*/
    ;
    FK0KM110.SY4IDDSC[FK0KW-IDX] = FK0KW01.SY4IDDSC[FK0KW-IDX];
    FK0KM110.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] = FK0KW01.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX];
    FK0KM110.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] = FK0KW01.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX];
    FK0KM110.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] = FK0KW01.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX];
    FK0KM110.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] = FK0KW01.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX];
    ;
    if (FK0KW01.FK0KW-ERROR-FLAG[FK0KW-IDX] == "Y")
      set FK0KM110.SY4IDDSC[FK0KW-IDX] bold, protect;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] bold, protect;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] bold, protect;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] bold, protect;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] bold, protect;
      set FK0KM110.FB4SZPCT[FK0KW-IDX] bold, protect;
      FKWREC.XXXMSGNO = FK0KW01.FK0KW-LINE-ERROR-NBR[FK0KW-IDX];
      FKWREC.XXX-MOD-ID = FK0KW01.FK0KW-MOD-ID[FK0KW-IDX];
    end
    ;
    FK0KM110.FB4SZPCT[FK0KW-IDX] = FK0KW01.FB4SZPCT[FK0KW-IDX];
    ;
    FK0KW00.FK0KW-IDX = FK0KW00.FK0KW-IDX + 1; /* Increment line index*/
    ;
  end
  ;
   /* ----------------- END OF FK0K-2100 --------------------------*/
end // end FK0K-2100

// Check attention identifier
Function FK0K-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FKWREC empty; /* Initialize transfer record*/
    FKWREC.SY1STNBR[1] = FK0KM110.SY1STNBR;
    FKWREC.SY2CLRID[1] = FK0KM110.SY2CLRID;
    FKWREC.XDMCD[1] = FK0KM110.XDMCD;
    ;
    COMMAREA.CATOAP = "FK0K"; /* to applicaiton*/
    COMMAREA.CAITEM = "    "; /* item*/
    ;
    XSFKS01(); /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0KM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty; /* Initialize transfer record*/
      ;
      FK0K-1100(); /* Purge temporary storage*/
      ;
      FKWREC.SY1STNBR[1] = FK0KM110.SY1STNBR;
      FKWREC.SY2CLRID[1] = FK0KM110.SY2CLRID;
      FKWREC.XDMCD[1] = FK0KM110.XDMCD;
      ;
      COMMAREA.CATOAP = FK0KM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0KM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* EXIT requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* FK0I (BAG MAINT) requested*/
   || converseVar.eventKey is pf13 /* FK0J (BAG SIZE SCALE TO S/C/D)*/
   || converseVar.eventKey is pf15 /* FK0L (S/C/D BAG MAINT)*/
   || converseVar.eventKey is pf17) /* FK0Z (SIZE SCALE PER BAG)*/
    ;
    FKWREC.SY1STNBR[1] = FK0KM110.SY1STNBR;
    FKWREC.SY2CLRID[1] = FK0KM110.SY2CLRID;
    FKWREC.XDMCD[1] = FK0KM110.XDMCD;
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0KM110"; /* Application find code*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
      COMMAREA.CAITEM = FK0KM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK0KM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0I"; /* TO application*/
      XSFKS01(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0J"; /* TO application*/
      XSFKS01(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf15) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0L"; /* TO application*/
      XSFKS01(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK0Z"; /* TO application*/
      XSFKS01(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    return; /* Return*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 pressed*/
   && converseVar.eventKey not pf8)  /* pf8 pressed*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ---------------- End of FK0K-3000 ----------------------------*/
end // end FK0K-3000

// Reset highlighted fields
Function FK0K-4000()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0KM110.SY1STNBR initialAttributes; /* Style number*/
  set FK0KM110.SY2CLRID initialAttributes; /* Color id*/
  set FK0KM110.XDMCD initialAttributes; /* Dimension number*/
  ;
  set FK0KM110.CATOAP initialAttributes; /* TO application*/
  set FK0KM110.CAITEM initialAttributes; /* Application data*/
  ;
  FK0KW00.FK0KW-IDX = 1; /* Reset index*/
  ;
  while (FK0KW00.FK0KW-IDX <= 14)
    ;
    set FK0KM110.SY4IDDSC[FK0KW-IDX] initialAttributes;
    set FK0KM110.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] initialAttributes;
    set FK0KM110.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] initialAttributes;
    set FK0KM110.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] initialAttributes;
    set FK0KM110.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] initialAttributes;
    set FK0KM110.FB4SZPCT[FK0KW-IDX] initialAttributes;
    ;
    FK0KW00.FK0KW-IDX = FK0KW00.FK0KW-IDX + 1; /* Increment index*/
    ;
  end
  ;
   /* ----------------- END OF FK0K-400 -----------------------------*/
end // end FK0K-4000

// Verify data that was entered
Function FK0K-5000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0KM110.CAITEM > " ") /* Application data was entered*/
    FKWREC.XXX-MOD-ID = "500"; /* Module identification*/
    set FK0KM110.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    FK0K-5100(); /* Verify scroll request*/
    ;
  else
    ;
     /* ------------------------------------------------------------*/
      /* Otherwise, verify that a style number was entered.*/
     /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is enter
     && FK0KM110.SY1STNBR <= " ")
      converseLib.validationFailed(43); /* Style is missing or invalid*/
      FKWREC.XXX-MOD-ID = 5000; /* Module id*/
      set FK0KM110.SY1STNBR cursor, bold;
      exit stack;
    end
    ;
     /* ------------------------------------------------------------*/
      /* Verify the data displayed in the detail lines.*/
     /* ------------------------------------------------------------*/
    ;
    if (FK0KM110.SY1STNBR == FK0KW01.SY1STNBR /* Style not changed*/
     && FK0KM110.SY2CLRID == FK0KW01.SY2CLRID /* Color id not changed*/
     && FK0KM110.XDMCD == FK0KW01.XDMCD)      /* Dimension not changed*/
      ;
      FK0K-5200(); /* Declare cursor DCMPNT.VABUSE01*/
      ;
      FK0K-5210(); /* Select row DCMPNT.VABUSE01*/
      ;
      FK0K-5220(); /* Close cursor DCMPNT.VABUSE01*/
      ;
      if (FK0KW00.TA5TSQIX > 0) /* Page was formatted*/
        ;
        FK0K-5300(); /* Verify data in the line*/
        ;
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ----------------- END OF FK0K-5000 ----------------------------*/
end // end FK0K-5000

// Verify scroll request
Function FK0K-5100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK0KW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK0KW00.XXXTSPAG >= FK0KW00.TA5TSQIX) /* and no more pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0KM110.SY1STNBR != FK0KW01.SY1STNBR /* Style number changed*/
   || FK0KM110.SY2CLRID != FK0KW01.SY2CLRID /* Color id changed*/
   || FK0KM110.XDMCD != FK0KW01.XDMCD)      /* Dimension changed*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    set FK0KM110.SY1STNBR cursor, bold; /* Highlight*/
    set FK0KM110.SY2CLRID bold; /* Highlight*/
    set FK0KM110.XDMCD bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
   /* ----------------- END OF FK0K-5100 --------------------------*/
end // end FK0K-5100

// Open cursor DCMPNT.VABUSE01
Function FK0K-5200()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VABUSE01 empty; /* Clear row storage area*/
  ;
  VABUSE01.SY1STNBR = FK0KM110.SY1STNBR; /* Style number*/
  VABUSE01.SY2CLRID = FK0KM110.SY2CLRID; /* Color id*/
  VABUSE01.XDMCD = FK0KM110.XDMCD; /* Dimension code*/
  ;
  try
    call "IO6350" ("S1", SQLCA, VABUSE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  FK0KW00.FK0KW-REQUEST-DATA-SW = "N";
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABUSE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VABUSE01.VABUSE01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-5200 ------------------------------*/
end // end FK0K-5200

// Fetch next row DCMPNT.VABUSE01
Function FK0K-5210()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6350" ("N1", SQLCA, VABUSE01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FK0KW00.FK0KW-VABUSE01-EOF-SW = "Y"; /* Indicate end of file*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5210"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABUSE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VABUSE01.VABUSE01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-5210 ------------------------------*/
end // end FK0K-5210

// Close cursor DCMPNT.VABUSE01
Function FK0K-5220()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6350" ("C1", SQLCA, VABUSE01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5220"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR VABUSE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABUSE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VABUSE01.VABUSE01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0K-5220 ------------------------------*/
end // end FK0K-5220

// Verify displayed line data
Function FK0K-5300()
   /* ---------------------------------------------------------------------*/
   /* Count the number of air bags on the current line.  If number*/
   /* does not equal the VABUSE01 air bags per shoe, display error message*/
   /* ---------------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-IDX = 14; /* Reset map index*/
  ;
  while (FK0KW00.FK0KW-IDX >= 1)
    ;
    FK0KW00.FK0KW-NBR-AIRBAGS = 0; /* Reset counter*/
    ;
    if (FK0KM110.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] != "00"
     && FK0KM110.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] != "XX")
      FK0KW00.FK0KW-NBR-AIRBAGS = FK0KW00.FK0KW-NBR-AIRBAGS + 1;
    end
    ;
    if (FK0KM110.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] != "00"
     && FK0KM110.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] != "XX")
      FK0KW00.FK0KW-NBR-AIRBAGS = FK0KW00.FK0KW-NBR-AIRBAGS + 1;
    end
    ;
    if (FK0KM110.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] != "00"
     && FK0KM110.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] != "XX")
      FK0KW00.FK0KW-NBR-AIRBAGS = FK0KW00.FK0KW-NBR-AIRBAGS + 1;
    end
    ;
    if (FK0KM110.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] != "00"
     && FK0KM110.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] != "XX")
      FK0KW00.FK0KW-NBR-AIRBAGS = FK0KW00.FK0KW-NBR-AIRBAGS + 1;
    end
    ;
    if (FK0KW00.FK0KW-NBR-AIRBAGS != VABUSE01.FK-NBR-AIRBAG-SHOE
     && FK0KM110.FB4SZPCT[FK0KW-IDX] > 0)
      set FK0KM110.SY4IDDSC[FK0KW-IDX] bold, protect;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] bold, protect;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] bold, protect;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] bold, protect;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] bold, protect;
      set FK0KM110.FB4SZPCT[FK0KW-IDX] bold, protect;
      converseLib.validationFailed(91);
      FKWREC.XXX-MOD-ID = "5300";
    end
    ;
    if (FK0KM110.FB4SZPCT[FK0KW-IDX] > 0
     && FK0KW00.FK0KW-NBR-AIRBAGS == 0)
      set FK0KM110.SY4IDDSC[FK0KW-IDX] bold;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-1[FK0KW-IDX] bold;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-2[FK0KW-IDX] bold;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-3[FK0KW-IDX] bold;
      set FK0KM110.FK0KW-BAG-SZ-ID-CHA-4[FK0KW-IDX] bold;
      set FK0KM110.FB4SZPCT[FK0KW-IDX] bold;
      converseLib.validationFailed(90);
      FKWREC.XXX-MOD-ID = "5300";
    end
    ;
    FK0KW00.FK0KW-IDX = FK0KW00.FK0KW-IDX - 1;
    ;
  end
end // end FK0K-5300

// Process valid input request
Function FK0K-6000()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW00.FK0KW-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/
  ;
  set FKWREC empty;
  ;
  FKWREC.SY1STNBR[1] = FK0KM110.SY1STNBR; /* Style number*/
  FKWREC.SY2CLRID[1] = FK0KM110.SY2CLRID; /* Color code*/
  FKWREC.XDMCD[1] = FK0KM110.XDMCD; /* Dimension code*/
  ;
   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0KM110.SY1STNBR != FK0KW01.SY1STNBR /* Style changed*/
   || FK0KM110.SY2CLRID != FK0KW01.SY2CLRID /* Color id*/
   || FK0KM110.XDMCD != FK0KW01.XDMCD)      /* Dimension*/
    ;
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (FK0KM110.SY1STNBR > " ") /* Style entered*/
      ;
      FK0KW00.FK0KW-REQUEST-DATA-SW = "Y"; /* Request for data switch*/
      ;
    else
      ;
      FK0KW00.FK0KW-REQUEST-DATA-SW = "N"; /* Request for data switch*/
      ;
      FK0K-1100(); /* Purge any temporary storage*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FK0KW00.XXXTSPAG = FK0KW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FK0KW00.XXXTSPAG = FK0KW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FK0K-6000

// Update temporary storage page
Function FK0KS-01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FK0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0KS-01 -----------------------------*/
end // end FK0KS-01

// Read temporary storage page
Function FK0KS-02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0KW01.XXXTSLEN = FK0KW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FK0KW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FK0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0KS-02 ------------------------------*/
end // end FK0KS-02

//*** RECORD=FK0KW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0KW00 type basicRecord
  10 FK0KW-IDX FK0KW-IDX ; 
  10 FK0KW-AB-IDX FK0KW-AB-IDX ; 
  10 FK0KW-SZ-IDX FK0KW-SZ-IDX ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FK0KW-REQUEST-DATA-SW FK0KW-REQUEST-DATA-SW ; 
  10 FK0KW-FORMAT-MAP-SW FK0KW-FORMAT-MAP-SW ; 
  10 FK0KW-STORAGE-UPD-SW FK0KW-STORAGE-UPD-SW ; 
  10 FK0KW-DISPLAY-MAP-SW FK0KW-DISPLAY-MAP-SW ; 
  10 FK0KW-VSYCLR01-FOUND-SW FK0KW-VSYCLR01-FOUND-SW ; 
  10 FK0KW-VSYDVL01-FOUND-SW FK0KW-VSYDVL01-FOUND-SW ; 
  10 FK0KW-VSYSCL01-EOF-SW FK0KW-VSYSCL01-EOF-SW ; 
  10 FK0KW-VABUSE01-EOF-SW FK0KW-VABUSE01-EOF-SW ; 
  10 FK0KW-VSCALE01-EOF-SW FK0KW-VSCALE01-EOF-SW ; 
  10 FK0KW-FORMAT-LINE-SW FK0KW-FORMAT-LINE-SW ; 
  10 FK0KW-NBR-AIRBAGS FK0KW-NBR-AIRBAGS ; 
end // end FK0KW00

//*** RECORD=FK0KW01 ****
// ------------------------
// Map 110 display storage.
// ------------------------
// ***********************
Record FK0KW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(405) ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 FK-AIRBAG-ID FK-AIRBAG-ID [4] ; 
    10 FK-AIRBAG-SZ-SCLCD FK-AIRBAG-SZ-SCLCD [4] ; 
    10 SY4IDDSC SY4IDDSC [14] ; 
    10 FK0KW-BAG-SZ-ID-CHA-1 FK0KW-BAG-SZ-ID-CHA-1 [14] ; 
      15 FK0KW-BAG-SZ-ID-NUM-1 FK0KW-BAG-SZ-ID-NUM-1 ; 
    10 FK0KW-BAG-SZ-ID-CHA-2 FK0KW-BAG-SZ-ID-CHA-2 [14] ; 
      15 FK0KW-BAG-SZ-ID-NUM-2 FK0KW-BAG-SZ-ID-NUM-2 ; 
    10 FK0KW-BAG-SZ-ID-CHA-3 FK0KW-BAG-SZ-ID-CHA-3 [14] ; 
      15 FK0KW-BAG-SZ-ID-NUM-3 FK0KW-BAG-SZ-ID-NUM-3 ; 
    10 FK0KW-BAG-SZ-ID-CHA-4 FK0KW-BAG-SZ-ID-CHA-4 [14] ; 
      15 FK0KW-BAG-SZ-ID-NUM-4 FK0KW-BAG-SZ-ID-NUM-4 ; 
    10 FB4SZPCT FB4SZPCT [14] ; 
    10 FK0KW-ERROR-FLAG FK0KW-ERROR-FLAG [14] ; 
    10 FK0KW-LINE-ERROR-NBR FK0KW-LINE-ERROR-NBR [14] ; 
    10 FK0KW-MOD-ID FK0KW-MOD-ID [14] ; 
end // end FK0KW01

//*** RECORD=FK0KW02 ****
// ----------------------------------------------------------
// Application working storage.  Tables
// ----------------------------------------------------------
// ***********************
Record FK0KW02 type basicRecord
  10 FK-AIRBAG-ID FK-AIRBAG-ID [4] ; 
  10 FK-AIRBAG-SZ-SCLCD FK-AIRBAG-SZ-SCLCD [4] ; 
  10 FK0KW-SZ-TABLE FK0KW-SZ-TABLE [40] ; 
    15 FK0KW-SZ-FLAG-1 FK0KW-SZ-FLAG-1 ; 
    15 FK0KW-SZ-FLAG-2 FK0KW-SZ-FLAG-2 ; 
    15 FK0KW-SZ-FLAG-3 FK0KW-SZ-FLAG-3 ; 
    15 FK0KW-SZ-FLAG-4 FK0KW-SZ-FLAG-4 ; 
    15 FK0KW-BAG-SZ-ID-CHA-1 FK0KW-BAG-SZ-ID-CHA-1 ; 
      20 FK0KW-BAG-SZ-ID-NUM-1 FK0KW-BAG-SZ-ID-NUM-1 ; 
    15 FK0KW-BAG-SZ-ID-CHA-2 FK0KW-BAG-SZ-ID-CHA-2 ; 
      20 FK0KW-BAG-SZ-ID-NUM-2 FK0KW-BAG-SZ-ID-NUM-2 ; 
    15 FK0KW-BAG-SZ-ID-CHA-3 FK0KW-BAG-SZ-ID-CHA-3 ; 
      20 FK0KW-BAG-SZ-ID-NUM-3 FK0KW-BAG-SZ-ID-NUM-3 ; 
    15 FK0KW-BAG-SZ-ID-CHA-4 FK0KW-BAG-SZ-ID-CHA-4 ; 
      20 FK0KW-BAG-SZ-ID-NUM-4 FK0KW-BAG-SZ-ID-NUM-4 ; 
    15 FB4SZPCT FB4SZPCT ; 
  10 FK0KW-SZ-DESC-TABLE FK0KW-SZ-DESC-TABLE [40] ; 
    15 FK0KW-SZ-DESC-FLAG FK0KW-SZ-DESC-FLAG ; 
    15 SY4IDDSC SY4IDDSC ; 
end // end FK0KW02

// Index for air bag numbers
DataItem FK0KW-AB-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FK-AIRBAG-SZ-ID1 (CHA)
DataItem FK0KW-BAG-SZ-ID-CHA-1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FK-AIRBAG-SZ-ID2 (CHA)
DataItem FK0KW-BAG-SZ-ID-CHA-2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FK-AIRBAG-SZ-ID3 (CHA)
DataItem FK0KW-BAG-SZ-ID-CHA-3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FK-AIRBAG-SZ-ID4 (CHA)
DataItem FK0KW-BAG-SZ-ID-CHA-4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FK-AIRBAG-SZ-ID1 (NUMERIC)
DataItem FK0KW-BAG-SZ-ID-NUM-1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FK-AIRBAG-SZ-ID2 (NUMERIC)
DataItem FK0KW-BAG-SZ-ID-NUM-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FK-AIRBAG-SZ-ID3 (NUMERIC)
DataItem FK0KW-BAG-SZ-ID-NUM-3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FK-AIRBAG-SZ-ID4 (NUMERIC)
DataItem FK0KW-BAG-SZ-ID-NUM-4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem FK0KW-DISPLAY-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error flag
DataItem FK0KW-ERROR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format line switch
DataItem FK0KW-FORMAT-LINE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FK0KW-FORMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FK0KW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line error number
DataItem FK0KW-LINE-ERROR-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Module number
DataItem FK0KW-MOD-ID char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of airbags per shoe
DataItem FK0KW-NBR-AIRBAGS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem FK0KW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FK0KW-STORAGE-UPD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FK0KW-SZ-DESC-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FK0KW-SZ-DESC-TABLE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FK0KW-SZ-FLAG-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FK0KW-SZ-FLAG-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FK0KW-SZ-FLAG-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FK0KW-SZ-FLAG-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for size buckets
DataItem FK0KW-SZ-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0KW-SZ-TABLE char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Air bag style switch
DataItem FK0KW-VABUSE01-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size scale switch
DataItem FK0KW-VSCALE01-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Production style switch
DataItem FK0KW-VSYCLR01-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Development style switch
DataItem FK0KW-VSYDVL01-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Air bag style switch
DataItem FK0KW-VSYSCL01-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

