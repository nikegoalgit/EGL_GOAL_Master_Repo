package fk0n;

import corpcom2.XX0XW02;
import corpcom3.XPFK001;
import corpcom3.XPTA0P;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx2.XURDEST;
import fb.common.FB9REC;
import fb.common.FBAREC;
import fk.common.*;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VVNDR001;
//*** PROGRAM=FK0N ****
// THIS APPLICATION IS PART OF THE COMPONENTS FORECASTING
// SYSTEM.
// 
// THIS APPLICATION PROVIDES THE CAPABLILITY OF SUBMITTING
// BATCH APPLICATIONS TO CREATE PRELIM REPORTS.  USERS
// WILL FIRST SPECIFY AN OUTPUT DESTINATION, THEN WILL BE
// ALLOWED TO SUBMIT ONE OR MORE REPORTS FROM THE DISPLAYED
// OPTIONS.
// 
// A POPUP WINDOW WILL BE PROVIDED FOR THE COUNTRY CODE TABLE.
// 
// USERS WILL BE ALLOWED TO EXIT THIS APPLICATION VIA PFKEYS
// OR FASTPATH, WITH THE 'OPTION' FIELD AVAILABLE FOR USE WITH
// ANY APPLICATION TRANSFER.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      09/21/92  JALLE1  New application.
//          10/20/92  JALLE1  Fix JCLtable FK0NT01 (FK1091).
//          11/20/92  JALLE1  Add datain TO FK2001 (P0030).
//                            Add datain to fk2021 (P0010).
//          06/07/93  JALLE1  Replace TESTRMS with TESTENC in
//                            all test jcl tables.
// FK-023   06/08/93  JALLE1  Allow prelim reports for past
//                            months.
//          08/24/93  JALLE1  Add report numbers to map.
// FK-031   08/26/93  JALLE1  Add Air Bag Prelims by Ctry/Fcty
//                            (FK2110).
// FK9994   09/07/93  JALLE1  CSP 4.1 conversion.
// 
// Y2KFIX   11/06/97  VRAMAC  Y2K MODIFICATIONS MADE TO:
//                            FK0NM010 - CHANGE PRELIM DATE TO
//                            DISPLAY 00 FOR YEAR 2000
// *********************
Program FK0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FBAREC FBAREC; // record
  FK0NW00 FK0NW00; // record
  FK0NW01 FK0NW01; // record
  FKWREC FKWREC; // record
  FY1REC FY1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VVNDR001 VVNDR001; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK0NT01; // table
  use FK0NT02; // table
  use FK0NT03; // table
  use FK0NT04; // table
  use FK0NT05 {deleteAfterUse = yes}; // table
  use FK0NT51; // table
  use FK0NT52; // table
  use FK0NT53; // table
  use FK0NT54; // table
  use FK0NT55 {deleteAfterUse = yes}; // table
  use XCTTBL; // table
  use FK0NM.FK0NM010, // form
  FK0NM.TA0PM001,
  FK0NM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0NM010 initial; /* M001 input/output*/
    set FK0NW00 empty; /* Working storage*/
    set FK0NW01 empty; /* Working storage paramters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Internal reader record*/
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/
    ;
    FK0NM010.FK-VEND-CD = FKWREC.FK-VEND-CD[1]; /* Vendor*/
    FK0NM010.FY1FCTYC = FKWREC.FY1FCTYC; /* Factory*/
    FK0NM010.XCTCD = FKWREC.XCTCD; /* Country*/
    ;
    if (FK0NM010.FK-VEND-CD == " ") /* Vendor not entered*/
      FK0NM010.FK-VEND-CD = "*"; /* Default to **/
    end
    ;
    if (FK0NM010.FY1FCTYC == " ") /* Factory not entered*/
      FK0NM010.FY1FCTYC = "*"; /* Default to **/
    end
    ;
    if (FK0NM010.XCTCD == " ") /* / * Country not entered*/
      FK0NM010.XCTCD = "*"; /* Default to **/
    end
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Initialize application variables.*/
     /* ------------------------------------------------------------*/
    ;
    FK0NW00.FK0NW-OUTPUT-DEST-SW = "N"; /* Output destination switch*/
    FK0NW00.FK0NW-REQUEST-DATA-SW = "Y"; /* Obtain the data*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0N-0001; /* Converse the main process*/
    ;
    ;
    FK0N-0001: FK0N-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0N-0001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0N

// Main process to display a map
Function FK0N-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0N-1000(); /* Obtain the data to be displayed*/
  ;
  FK0N-2000(); /* Format and display the map*/
  ;
  FK0N-3000(); /* Check attention identifier*/
  ;
  FK0N-4000(); /* Reset fields to normal intensity*/
  ;
  FK0N-5000(); /* Verify the entered data*/
  ;
  FK0N-6000(); /* Process valid input request*/
  ;
  ;
end // end FK0N-0001

// Obtain data to display
Function FK0N-1000()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0NW00.FK0NW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Get buy date from DFBUY.VFMCTL01.*/
   /* --------------------------------------------------------------*/
  ;
  FK0N-1100(); /* Select DFBUY.VFMCTL01 row*/
  ;
  FK0NW00.FK0NW-WORK-DT = FB9REC.FB8BUYDT;
  FK0NM010.FK0NM-PRELIM-DT = FK0NW00.FK0NW-WORK-YYMM;
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Get standard model row from DFBUY.VFYMDL01*/
   /* --------------------------------------------------------------*/
  ;
  FK0N-1200(); /* Select DFBUY.VFYMDL01 row*/
  ;
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-REQUEST-DATA-SW = "N";
  ;
  ;
end // end FK0N-1000

// Select DFBUY.VFMCTL01
Function FK0N-1100()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set FB9REC empty; /* Clear storage record*/
  ;
  ;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFBUY.VFMCTL01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0N-1100

// Select DFBUY.VFYMDL01
Function FK0N-1200()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set FBAREC empty; /* Clear storage record*/
  ;
  FBAREC.FBDMDTYP = "FL1"; /* Buy type*/
  FBAREC.FB8BUYDT = FB9REC.FB8BUYDT; /* Buy date*/
  ;
  try
    call "IO3470" ("SA", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FK0NW00.FK0NM-PRELIM-AVAIL-SW = "Y"; /* Prelim is available*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/
      FK0NW00.FK0NM-PRELIM-AVAIL-SW = "N"; /* No prelim available*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFBUY.VFYMDL01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0N-1200

// Format and converse the map
Function FK0N-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0NM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0NM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NM010.FK0NM-PRELIM-AVAIL-SW = FK0NW00.FK0NM-PRELIM-AVAIL-SW;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0NM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0NM010.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/
    ;
    set FK0NM010 alarm; /* Indicate sound alarm*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* DETERMINE CURSOR POSITION.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0 /* No errors*/
   || converseVar.validationMsgNum == 27) /* Report submitted*/
    ;
    if (FK0NM010.FK0NM-SELECT-OUTPUT == " ") /* Output not specified*/
      set FK0NM010.FK0NM-SELECT-OUTPUT cursor; /* Set cursor*/
    else
      set FK0NM010.FK0NM-SELECT[1] cursor; /* Set cursor at 1st rpt*/
    end
  end
  ;
  converse FK0NM010 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0NM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0NM010.CAITEM; /* Application data*/
  ;
  ;
end // end FK0N-2000

// Check attention identifier
Function FK0N-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FKWREC empty;
    ;
    if (FK0NM010.FK-VEND-CD != "*")
      FKWREC.FK-VEND-CD[1] = FK0NM010.FK-VEND-CD; /* Vendor*/
    end
    if (FK0NM010.FY1FCTYC != "*")
      FKWREC.FY1FCTYC = FK0NM010.FY1FCTYC; /* Factory*/
    end
    if (FK0NM010.XCTCD != "*")
      FKWREC.XCTCD = FK0NM010.XCTCD; /* Country*/
    end
    ;
    COMMAREA.CATOAP = "FK0N"; /* to applicaiton*/
    COMMAREA.CAITEM = "    "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0NM010.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0NM010.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty;
      ;
      if (FK0NM010.FK-VEND-CD != "*")
        FKWREC.FK-VEND-CD[1] = FK0NM010.FK-VEND-CD; /* Vendor*/
      end
      if (FK0NM010.FY1FCTYC != "*")
        FKWREC.FY1FCTYC = FK0NM010.FY1FCTYC; /* Factory*/
      end
      if (FK0NM010.XCTCD != "*")
        FKWREC.XCTCD = FK0NM010.XCTCD; /* Country*/
      end
      ;
      COMMAREA.CATOAP = FK0NM010.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0NM010.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0NM010.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* EXIT requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* PRCF requested*/
   || converseVar.eventKey is pf14 /* LRCF requested*/
   || converseVar.eventKey is pf15 /* HDRS requested*/
   || converseVar.eventKey is pf16 /* LRVM requested*/
   || converseVar.eventKey is pf17) /* LRVD requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0NM010"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0A"; /* TO application*/
      COMMAREA.CAITEM = FK0NM010.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK0NM010.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0P"; /* TO application*/
      COMMAREA.CAITEM = FK0NM010.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0R"; /* TO application*/
      COMMAREA.CAITEM = FK0NM010.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FK0S"; /* TO application*/
      COMMAREA.CAITEM = FK0NM010.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0T"; /* TO application*/
      COMMAREA.CAITEM = FK0NM010.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK0V"; /* TO application*/
      COMMAREA.CAITEM = FK0NM010.CAITEM; /* item*/
    end
    ;
    set FKWREC empty;
    ;
    if (FK0NM010.FK-VEND-CD != "*")
      FKWREC.FK-VEND-CD[1] = FK0NM010.FK-VEND-CD; /* Vendor*/
    end
    if (FK0NM010.FY1FCTYC != "*")
      FKWREC.FY1FCTYC = FK0NM010.FY1FCTYC; /* Factory*/
    end
    if (FK0NM010.XCTCD != "*")
      FKWREC.XCTCD = FK0NM010.XCTCD; /* Country*/
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK0N-3000

// Reset highlighted fields
Function FK0N-4000()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0NM010.FK-VEND-CD initialAttributes;
  set FK0NM010.FY1FCTYC initialAttributes;
  set FK0NM010.XCTCD initialAttributes;
  set FK0NM010.FK0NM-PRELIM-AVAIL-SW initialAttributes;
  set FK0NM010.FK0NM-SELECT-OUTPUT initialAttributes;
  ;
  ;
  FK0NW00.FK0NW-IDX = 1; /* Init index*/
  ;
  while (FK0NW00.FK0NW-IDX <= 5) /* For each select field*/
    ;
    set FK0NM010.FK0NM-SELECT[FK0NW-IDX] initialAttributes; /* Set defined*/
    FK0NW00.FK0NW-IDX = FK0NW00.FK0NW-IDX + 1;
  end
  ;
  ;
  set FK0NM010.CATOAP initialAttributes; /* TO application*/
  set FK0NM010.CAITEM initialAttributes; /* Application data*/
  ;
  ;
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0NM010.XCTCD == "?") /* XCT list requested*/
    ;
    if (converseVar.eventKey not enter) /* Enter not pressed*/
      ;
      FKWREC.XXX-MOD-ID = "4000"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  else
    ;
    return; /* Return to previous process*/
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If requested, display the list of xct codes.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0NM010.XCTCD == "?") /* xct list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FK0NM010.XCTCD = " "; /* Init country code*/
    else
      FK0NM010.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
    end
    ;
    set FK0NM010.XCTCD cursor; /* Establish cursor position*/
  end
  ;
  ;
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/
  ;
  exit stack;
  ;
  ;
end // end FK0N-4000

// Verify data that was entered
Function FK0N-5000()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0NM010.CAITEM > " ") /* Application data was entered*/
    ;
    set FK0NM010.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify the select fields*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-RPT-SW = "N"; /* Report selected switch*/
  FK0NW00.FK0NW-IDX = 5; /* Init index*/
  ;
  while (FK0NW00.FK0NW-IDX >= 1) /* For each select field*/
    ;
    if (FK0NM010.FK0NM-SELECT[FK0NW-IDX] == "S") /* Report selected*/
      ;
      FK0NW00.FK0NW-RPT-SW = "Y"; /* Set switch yes*/
    else
      ;
      if (FK0NM010.FK0NM-SELECT[FK0NW-IDX] != "*" /* If not valid*/
       && FK0NM010.FK0NM-SELECT[FK0NW-IDX] != " ") /**/
        ;
        set FK0NM010.FK0NM-SELECT[FK0NW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(13); /* Only "s" valid to select a line*/
      end
    end
    ;
    FK0NW00.FK0NW-IDX = FK0NW00.FK0NW-IDX - 1; /* Decrement index*/
  end
  ;
  if (FK0NM-SELECT-OUTPUT == "S"
   || FK0NM-SELECT-OUTPUT == "*"
   || FK0NM-SELECT-OUTPUT == " ")
    ;
    /* Next sentence*/
  else
    ;
    set FK0NM010.FK0NM-SELECT-OUTPUT cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(13); /* Only "s" valid to select a line*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify the country code*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0NM010.XCTCD == "*") /* If wildcard*/
    ;
    /* Next sentence*/
  else
    ;
    if (FK0NM010.XCTCD in XCTTBL.XCTCD /* If in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/
      ;
      /* Next sentence*/
    else
      ;
      set FK0NM010.XCTCD cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(8); /* Required field missing or invalid*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify the factory code*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0NM010.FY1FCTYC == "X" /* Blank factory*/
   || FK0NM010.FY1FCTYC == "*") /* All factories*/
    ;
     /* Next sentence*/
  else
    ;
    if (FK0NM010.FY1FCTYC == " ") /* Factory not entered*/
      ;
      set FK0NM010.FY1FCTYC cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(8); /* Required field missing or invalid*/
    else
      FK0N-5100(); /* Verify factory*/
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If both factory and country were entered, verify the factory*/
   /* is in the country.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0NM010.XCTCD != "*"    /* Country not wildcarded*/
   && FK0NM010.XCTCD != " "    /* Country not missing*/
   && FK0NM010.FY1FCTYC != "*" /* Factory not wildcarded*/
   && FK0NM010.FY1FCTYC != " ") /* Factory not missing*/
    ;
    if (FY1REC.XCTCD != FK0NM010.XCTCD) /* If factories not =*/
      ;
      set FK0NM010.XCTCD bold; /* Highlight*/
      set FK0NM010.FY1FCTYC cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(80); /* Factory does not exist in specified country*/
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify vendor code*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0NM010.FK-VEND-CD != "*") /* If vendor not wildcarded*/
    ;
    FK0N-5200(); /* Verify vendor*/
    ;
    if (FK0NM010.FK0NM-SELECT[3] == "S" /* Prelims for Air Sole*/
     && FK0NM010.FK-VEND-CD != "AS")    /* And air sole not specified*/
      set FK0NM010.FK-VEND-CD cursor, bold; /* Highlight*/
      set FK0NM010.FK0NM-SELECT[3] bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(21); /* Factory does not exist in specified country*/
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify prelim exits for entered month.*/
   /* ---------------------------------------------------------------*/
  ;
  FK0N-5300(); /* Select DFBUY.VFYMDL01*/
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If reports were selected, verify output destination has been*/
   /* established or selected.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0NW00.FK0NW-RPT-SW == "Y") /* If report requested*/
    ;
    if (FK0NW00.FK0NW-OUTPUT-DEST-SW == "Y" /* Output already established*/
     || FK0NM010.FK0NM-SELECT-OUTPUT == "S") /* or selected*/
      ;
       /* Next sentence*/
    else
      ;
      set FK0NM010.FK0NM-SELECT-OUTPUT cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(23); /* Output destination must be selected*/
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
end // end FK0N-5000

// Verify entered factory
Function FK0N-5100()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FY1REC empty; /* Clear row storage area*/
  ;
  FY1REC.XGPCD = "02"; /* Gpc code*/
  FY1REC.FY1FCTYC = FK0NM010.FY1FCTYC; /* Factory*/
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      set FK0NM010.FY1FCTYC cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5100"; /* module id*/
      converseLib.validationFailed(8); /* Required field missing or invalid*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY ENTERED FACTORY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0N-5100

// Verify entered vendor
Function FK0N-5200()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VVNDR001 empty; /* Clear row storage area*/
  ;
  VVNDR001.FK-VEND-CD = FK0NM010.FK-VEND-CD; /* Vendor*/
  ;
  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      set FK0NM010.FK-VEND-CD cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5200"; /* module id*/
      converseLib.validationFailed(21); /* Vendor code missing or invalid*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY ENTERED VENDOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0N-5200

// Select DFBUY.VFYMDL01
Function FK0N-5300()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set FBAREC empty; /* Clear storage record*/
  ;
  FBAREC.FBDMDTYP = "FL1"; /* Buy type*/
  ;
  FK0NW-WORK-YYMM = FK0NM010.FK0NM-PRELIM-DT;
  FK0NW00.FK0NW-WORK-DD = 01;
  if (FK0NW00.FK0NW-WORK-YY <= 70)
    FK0NW00.FK0NW-WORK-CC = 20;
  else
    FK0NW00.FK0NW-WORK-CC = 19;
  end
  FBAREC.FB8BUYDT = FK0NW00.FK0NW-WORK-DT; /* Buy date*/
  ;
  try
    call "IO3470" ("SA", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FK0NW00.FK0NM-PRELIM-AVAIL-SW = "Y"; /* Prelim is available*/
      FK0NM010.FK0NM-PRELIM-AVAIL-SW = "Y"; /* Prelim is available*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/
      FK0NW00.FK0NM-PRELIM-AVAIL-SW = "N"; /* No prelim available*/
      FK0NM010.FK0NM-PRELIM-AVAIL-SW = "N"; /* No prelim available*/
      ;
      set FK0NM010.FK0NM-PRELIM-AVAIL-SW skip, bold; /* Highlight*/
      converseLib.validationFailed(118); /* No prelims exist*/
      FKWREC.XXX-MOD-ID = "5300"; /* Module identification*/
      ;
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFBUY.VFYMDL01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0N-5300

// Process valid input request
Function FK0N-6000()
   /* --------------------------------------------------------------*/
   /* IF SPECIFY OUTPUT DESTINATION IS SELECTED ;*/
   /* SETUP CALL TO TA0P TO GET DESTINATION.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0NM010.FK0NM-SELECT-OUTPUT == "S") /* Select output*/
    ;
    set TA6REC empty;
    TA6REC.TA6SUBSW = "N"; /* GET REPORT DISTRIBUTION ONLY*/
    TA6REC.TA6MSGSW = "N"; /* DONT DISPLAY MSG WHEN DONE*/
    ;
    XPTA0P();
    ;
    if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
     && TA6REC.TA6RTNCD == "0")        /* AND NORMAL RETURN*/
      FK0NW01.XURDEST = TA6REC.XURDEST; /* PRINT DESTINATION*/
      FK0NM010.FK0NM-SELECT-OUTPUT = "*"; /* Output dest specified*/
      FK0NW00.FK0NW-OUTPUT-DEST-SW = "Y"; /**/
    else
      ;
      if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
       && TA6REC.TA6RTNCD == "1")        /* USER CANCELLED*/
        FK0NM010.FK0NM-SELECT-OUTPUT = "S"; /* Reset select*/
        set FK0NM010.FK0NM-SELECT-OUTPUT cursor; /* Reset cursor*/
        converseLib.validationFailed(35); /* INDICATE USER CANCELLED*/
        FKWREC.XXX-MOD-ID = "6000"; /* MODULE ID.*/
        exit stack; /* EXIT TO DISPLAY MAP.*/
      end
    end
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Check to see if REPORTS SELECTED.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0NW-RPT-SW == "Y") /* REPORTS SELECTED*/
    ;
    /* ----------------------------------------------------------*/
    /* Determine which environment the program is executing in:*/
    /* Development or Production*/
    /* Then submit the reports*/
    /* ----------------------------------------------------------*/
    ;
    FK0N-6100(); /* Determine Region*/
    ;
    FK0N-6200(); /* Submit report(s)*/
    ;
  end
  ;
  ;
end // end FK0N-6000

// Get region information
Function FK0N-6100()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  ;
  TA3REC.TA3OPTN = "ASSIGN ";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FKWREC.XXX-MOD-ID = "6100"; /* module identification*/
    converseLib.validationFailed(10); /* System error*/
    exit stack;
  end
  ;
  ;
end // end FK0N-6100

// Determine which job to submit
Function FK0N-6200()
   /* ------------------------------------------------------------*/
   /* Load the parm.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW01.FK-VEND-CD = FK0NM010.FK-VEND-CD; /* Vendor*/
  FK0NW01.XCTCD = FK0NM010.XCTCD; /* Country*/
  ;
  if (FK0NM010.FY1FCTYC == "X") /* If blank fcty requested*/
    FK0NW01.FY1FCTYC = " "; /* Factory*/
  else
    FK0NW01.FY1FCTYC = FK0NM010.FY1FCTYC; /* Factory*/
  end
  ;
  FK0NW-WORK-YYMM = FK0NM010.FK0NM-PRELIM-DT;
  FK0NW00.FK0NW-WORK-DD = 01;
  if (FK0NW00.FK0NW-WORK-YY <= 70)
    FK0NW00.FK0NW-WORK-CC = 20;
  else
    FK0NW00.FK0NW-WORK-CC = 19;
  end
  FK0NW01.FK0NW-BUY-DT = FK0NW00.FK0NW-WORK-DT; /* Buy date*/
  ;
   /* ------------------------------------------------------------*/
   /* Determine which reports to submit*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0NM010.FK0NM-SELECT[1] == "S") /* FK1090 requested*/
    FK0N-6210(); /* Submit report (prod or test)*/
    FK0NM010.FK0NM-SELECT[1] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end
  ;
  if (FK0NM010.FK0NM-SELECT[2] == "S") /* FK2000 requested*/
    FK0N-6220(); /* Submit report (prod or test)*/
    FK0NM010.FK0NM-SELECT[2] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end
  ;
  if (FK0NM010.FK0NM-SELECT[3] == "S") /* FK2020 requested*/
    FK0N-6230(); /* Submit report (prod or test)*/
    FK0NM010.FK0NM-SELECT[3] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end
  ;
  if (FK0NM010.FK0NM-SELECT[4] == "S") /* FK2030 requested*/
    FK0N-6240(); /* Submit report (prod or test)*/
    FK0NM010.FK0NM-SELECT[4] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end
  ;
  if (FK0NM010.FK0NM-SELECT[5] == "S") /* FK2110 requested*/
    FK0N-6250(); /* Submit report (prod or test)*/
    FK0NM010.FK0NM-SELECT[5] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end
end // end FK0N-6200

// Format JCL for FK1090
Function FK0N-6210()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0NW01.XURDEST; /* Load in printer destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0NW00.FK0NW-TBL-IDX > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      if (FK0NT01.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT01.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT01.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT01.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/
      ;
      if (FK0NT01.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    else /* Format test jcl*/
      ;
      if (FK0NT51.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT51.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT51.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT51.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/
      ;
      if (FK0NT51.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end
  ;
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6210"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6210"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0N-6210

// Format JCL for FK2000
Function FK0N-6220()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0NW01.XURDEST; /* Load in printer destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0NW00.FK0NW-TBL-IDX > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      if (FK0NT02.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT02.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT02.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT02.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/
      ;
      if (FK0NT02.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    else /* Format test jcl*/
      ;
      if (FK0NT52.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT52.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT52.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT52.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/
      ;
      if (FK0NT52.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end
  ;
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6220"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6220"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0N-6220

// Format JCL for FK2020
Function FK0N-6230()
   /* ------------------------------------------------------------*/
   /* Since this is an 'air sole' only report, set vendor to air sole.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0NW01.FK-VEND-CD = "AS"; /* 'air sole' vendor.*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0NW01.XURDEST; /* Load in printer destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0NW00.FK0NW-TBL-IDX > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      if (FK0NT03.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT03.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT03.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT03.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/
      ;
      if (FK0NT03.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    else /* Format test jcl*/
      ;
      if (FK0NT53.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT53.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT53.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT53.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/
      ;
      if (FK0NT53.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end
  ;
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6230"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6230"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0N-6230

// Format JCL for FK2030
Function FK0N-6240()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0NW01.XURDEST; /* Load in printer destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0NW00.FK0NW-TBL-IDX > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      if (FK0NT04.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT04.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT04.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT04.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/
      ;
      if (FK0NT04.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    else /* Format test jcl*/
      ;
      if (FK0NT54.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT54.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT54.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT54.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/
      ;
      if (FK0NT54.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end
  ;
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6240"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6240"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0N-6240

// Format JCL for FK2110
Function FK0N-6250()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FK0NW00.FK0NW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0NW01.XURDEST; /* Load in printer destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0NW00.FK0NW-TBL-IDX > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      if (FK0NT05.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT05.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT05.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT05.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/
      ;
      if (FK0NT05.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    else /* Format test jcl*/
      ;
      if (FK0NT55.TARTYPE[FK0NW-TBL-IDX] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NW01.FK0NW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0NT55.TARTYPE[FK0NW-TBL-IDX];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0NT55.TARJCL[FK0NW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0NT55.TARTYPE[FK0NW-TBL-IDX];
      end
      ;
      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/
      ;
      if (FK0NT55.TARJCL[FK0NW-TBL-IDX] == "/*EOF") /* End of table*/
        ;
        FK0NW00.FK0NW-TBL-IDX = 0; /* Indicate end of table*/
      else
        ;
        FK0NW00.FK0NW-TBL-IDX = FK0NW00.FK0NW-TBL-IDX + 1;
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end
  ;
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6250"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6250"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0N-6250

//*** RECORD=FK0NW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0NW00 type basicRecord
  10 FK0NW-IDX FK0NW-IDX ; 
  10 FK0NW-TBL-IDX FK0NW-TBL-IDX ; 
  10 FK0NW-OUTPUT-DEST-SW FK0NW-OUTPUT-DEST-SW ; 
  10 FK0NW-REQUEST-DATA-SW FK0NW-REQUEST-DATA-SW ; 
  10 FK0NW-RPT-SW FK0NW-RPT-SW ; 
  10 FK0NM-PRELIM-AVAIL-SW FK0NM-PRELIM-AVAIL-SW ; 
  10 FK0NW-WORK-DT FK0NW-WORK-DT ; 
    15 FK0NW-WORK-FILLER FK0NW-WORK-FILLER ; 
    15 FK0NW-WORK-CC FK0NW-WORK-CC ; 
    15 FK0NW-WORK-YYMM FK0NW-WORK-YYMM ; 
      20 FK0NW-WORK-YY FK0NW-WORK-YY ; 
      20 FK0NW-WORK-MM FK0NW-WORK-MM ; 
    15 FK0NW-WORK-DD FK0NW-WORK-DD ; 
end // end FK0NW00

//*** RECORD=FK0NW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0NW01 type basicRecord
  10 XURDEST XURDEST ; 
  10 FK0NW-PARM FK0NW-PARM ; 
    15 FK-VEND-CD FK-VEND-CD ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 FK0NW-BUY-DT FK0NW-BUY-DT ; 
    15 * char(61) ; 
end // end FK0NW01

// Prelim available switch
DataItem FK0NM-PRELIM-AVAIL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FB-BUY-DT
DataItem FK0NW-BUY-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for application table
DataItem FK0NW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Output dest specified switch
DataItem FK0NW-OUTPUT-DEST-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Paramter passed to report apps
DataItem FK0NW-PARM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch
DataItem FK0NW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report selected switch
DataItem FK0NW-RPT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for table
DataItem FK0NW-TBL-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work century
DataItem FK0NW-WORK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work day
DataItem FK0NW-WORK-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work date
DataItem FK0NW-WORK-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work date filler
DataItem FK0NW-WORK-FILLER num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work month
DataItem FK0NW-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work year
DataItem FK0NW-WORK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work year and month
DataItem FK0NW-WORK-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

