package fk0h;

import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import fk.common.*;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VCTRCT01;
import vv.common.VVNDR001;
//*** PROGRAM=FK0H ****
// THIS PROGRAM IS PART OF THE COMPONENTS FORECASTING SYSTEM.
// 
// THIS APPLICATION PROVIDES THE ABILITY TO LIST CONTRACTS
// ASSOCIATED WITH A VENDOR.  USERS WILL BE ALLOWED TO ENTER
// A VENDOR CODE AND A LIST OF ALL CONTRACTS FOR THAT VENDOR
// WILL BE RETRIEVED FROM THE FOOTWEAR MATERIAL CONTRACT TABLE
// DCMPNT.VCTRCT01.  USERS WILL BE ALLOWED TO SELECT A CONTRACT
// AND PFKEY TO THE CONTRACT MAINTENANCE SCREEN FOR FURTHER
// INQUIRY UPON SPECIFIC CONTRACTS.
// 
// USERS IWLL BE ALLOWED TO EXIT THIS APPLICATION VIA PFKEYS OR
// FASTPATH, WITH THE 'OPTION' FIELD AVAILABLE FOR USE WITH ANY
// APPLICATION TRANSFER.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      02/25/93  JALLE1  New application.
//          12/16/93  JALLE1  Fix abend code.
// *********************
Program FK0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK0HW00 FK0HW00; // record
  FK0HW01 FK0HW01; // record
  FKWREC FKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCTRCT01 VCTRCT01; // record
  VVNDR001 VVNDR001; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK0HM.FK0HM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0HM110 initial; /* map input/output*/
    set FK0HW00 empty; /* Application working storage*/
    set FK0HW01 empty; /* Application display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    ;
    ;
    FK0HW00.FK0HW-REQUEST-DATA-SW = "N"; /* Request the data*/
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/
    ;
    if (FKWREC.FK-VEND-CD[1] != " ") /* Vendor passed*/
      ;
      FK0HM110.FK-VEND-CD = FKWREC.FK-VEND-CD[1]; /* Move to map*/
      FK0HW00.FK0HW-REQUEST-DATA-SW = "Y"; /* Request the data*/
    end
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FK0HW00.FK0HW-FMAT-MAP-SW = "N"; /* Don't format the map*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0H-0001; /* Converse the main process*/
    ;
    ;
    FK0H-0001: FK0H-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0H-0001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0H

// Main process to display a map
Function FK0H-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0H-1000(); /* Obtain the data to display*/
  FK0H-2000(); /* Format and display the map*/
  FK0H-3000(); /* Check attention identifier*/
  FK0H-4000(); /* Reset fields to normal intensity*/
  FK0H-5000(); /* Verify the entered data*/
  FK0H-6000(); /* Process valid input request*/
  ;
  ;
end // end FK0H-0001

// Obtain data to display
Function FK0H-1000()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0HW00.FK0HW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* --------------------------------------------------------------*/
  ;
  FK0HW00.XXXTSLEN = 182; /* Temporary storage page length*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Initialize the working storage hold area.*/
   /* --------------------------------------------------------------*/
  ;
  set FK0HW01 empty;
  ;
   /* --------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* --------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK0HW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* --------------------------------------------------------------*/
  ;
  FK0H-1100(); /* Purge temp storage*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Obtain the vendor description*/
   /* --------------------------------------------------------------*/
  ;
  FK0H-1200(); /* Get vendor description*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Declare and process a cursor to get all contracts for this*/
   /* vendor from the contract table.*/
   /* --------------------------------------------------------------*/
  ;
  FK0HW00.FK0HW-END-CURSOR-SW = "N"; /* Init end of csr switch*/
  FK0HW00.FK0HW-INDEX = 1; /* Init index*/
  ;
  FK0H-1300(); /* Declare contract cursor*/
  ;
  FK0H-1400(); /* Fetch contract cursor*/
  ;
  if (FK0HW00.FK0HW-END-CURSOR-SW != "Y") /* If not end of cursor*/
    ;
    FK0H-1500(); /* Fmat to temp storage*/
    ;
    FK0HW00.FK-MAT-CONT-NBR = VCTRCT01.FK-MAT-CONT-NBR; /* Save cont*/
  end
  ;
  while (FK0HW00.FK0HW-END-CURSOR-SW != "Y") /* Until end of cursor*/
    ;
    if (VCTRCT01.FK-MAT-CONT-NBR != FK0HW00.FK-MAT-CONT-NBR) /* If cont brk*/
      ;
      FK0H-1500(); /* Fmat to temp storage*/
      ;
      if (FK0HW00.FK0HW-INDEX > 14) /* If temp storage page full*/
        FK0H-1600(); /* Add page to temp storage page queue*/
        FK0HW00.FK0HW-INDEX = 1; /* Reset index*/
      end
      ;
      FK0HW00.FK-MAT-CONT-NBR = VCTRCT01.FK-MAT-CONT-NBR;
      FK0HW00.FK-CONT-EFF-BDT = VCTRCT01.FK-CONT-EFF-BDT;
      FK0HW00.FK-CONT-EFF-XDT = VCTRCT01.FK-CONT-EFF-XDT;
    end
    ;
    FK0H-1400(); /* Fetch contract cursor*/
  end
  ;
  FK0H-1700(); /* Close contract cursor*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Add any partially formatted page to temporary storage.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0HW00.FK0HW-INDEX > 1) /* Data formatted*/
    FK0H-1600(); /* Add page to temporary storage*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If data was found, save map header information.  Otherwise,*/
   /* set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0HW00.TA5TSQIX == 0) /* If data was not found*/
    ;
    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    set FK0HM110.FK-VEND-CD cursor, bold;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/
  ;
  FK0HW00.FK0HW-REQUEST-DATA-SW = "N";
  FK0HW00.FK0HW-FMAT-MAP-SW = "Y";
  ;
  ;
end // end FK0H-1000

// Purge any temporary storage
Function FK0H-1100()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0HW01 empty; /* m110 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK0HW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FK0HW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0H-1100

// Select DCMPNT.VVNDR001
Function FK0H-1200()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VVNDR001 empty;
  ;
  VVNDR001.FK-VEND-CD = FK0HM110.FK-VEND-CD; /* Vendor*/
  ;
  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1200 SELECT DCMPNT.VVNDR001     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0H-1200

// Declare DCMPNT.VCTRCT01 cursor
Function FK0H-1300()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VCTRCT01 empty;
  ;
  VCTRCT01.FK-VEND-CD = FK0HM110.FK-VEND-CD; /* Vendor*/
  VCTRCT01.FK-MAT-CONT-NBR = -1; /* Wildcard contract nbr*/
  ;
  try
    call "IO6650" ("S1", SQLCA, VCTRCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1300 DECLARE DCMPNT.VCTRCT01 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTRCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTRCT01.VCTRCT01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0H-1300

// Fetch DCMPNT.VCTRCT01 cursor
Function FK0H-1400()
   /* ------------------------------------------------------------*/
   /* Fetch a row from the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6650" ("N1", SQLCA, VCTRCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/
      ;
      FK0HW00.FK0HW-END-CURSOR-SW = "Y"; /* Set end of cursor switch*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1400 FETCH DCMPNT.VCTRCT01      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTRCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTRCT01.VCTRCT01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0H-1400

// Format data to display storage
Function FK0H-1500()
   /* ------------------------------------------------------------*/
   /* Save the data to the next row of display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0HW00.FK0HW-INDEX == 1) /* If first row*/
    ;
    FK0HW01.FK-VEND-CD = FK0HM110.FK-VEND-CD; /* Vendor code*/
    FK0HW01.FK-VEND-SNM = VVNDR001.FK-VEND-SNM; /* Vendor desc*/
  end
  ;
  FK0HW01.FK-MAT-CONT-NBR[FK0HW-INDEX] = VCTRCT01.FK-MAT-CONT-NBR; /* Contract nbr*/
  ;
  FK0HW01.FK-CONT-EFF-BDT[FK0HW-INDEX] = VCTRCT01.FK-CONT-EFF-BDT; /* Beginning effective date*/
  ;
  FK0HW01.FK-CONT-EFF-XDT[FK0HW-INDEX] = VCTRCT01.FK-CONT-EFF-XDT; /* Ending effective date*/
  ;
  ;
  FK0HW00.FK0HW-INDEX = FK0HW00.FK0HW-INDEX + 1; /* Increment*/
  ;
  ;
end // end FK0H-1500

// Add page to temporary storage
Function FK0H-1600()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK0HW01.XXXTSLEN = FK0HW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FK0HW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FK0HW01 empty; /* m110 display storage*/
    ;
    FK0HW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0H-1600

// Close DCMPNT.VCTRCT01 cursor
Function FK0H-1700()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6650" ("C1", SQLCA, VCTRCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1700"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1700 CLOSE DCMPNT.VCTRCT01 CSR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTRCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTRCT01.VCTRCT01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0H-1700

// Format and converse the map
Function FK0H-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0HW00.FK0HW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/
    ;
    FK0H-2100(); /* Format the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0HM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0HM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0HM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    set FK0HM110 alarm; /* Indicate sound alarm*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0HM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0HM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them.*/
   /* ------------------------------------------------------------*/
  ;
  FK0HW00.FK0HW-INDEX = 1; /* Init map index*/
  ;
  while (FK0HW00.FK0HW-INDEX <= 14) /* Do this for every map line*/
    ;
    if (FK0HM110.FK-MAT-CONT-NBR[FK0HW-INDEX] == 0) /* No data*/
      ;
      set FK0HM110.FK0HM-SELECT[FK0HW-INDEX] invisible, skip;
      set FK0HM110.FK0HM-HYPHEN-LIT[FK0HW-INDEX] invisible, skip;
    end
    ;
    FK0HW00.FK0HW-INDEX = FK0HW00.FK0HW-INDEX + 1;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Set all lines dark if no data to display (at all).*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0HW00.TA5TSQIX == 0) /* No data to display*/
    ;
    FK0HM110.FK-VEND-SNM = VVNDR001.FK-VEND-SNM;
    ;
    FK0HW00.FK0HW-INDEX = 1; /* Init map index*/
    ;
    while (FK0HW00.FK0HW-INDEX <= 14) /* Do this for every map line*/
      ;
      set FK0HM110.FK0HM-SELECT[FK0HW-INDEX] invisible, skip;
      set FK0HM110.FK-MAT-CONT-NBR[FK0HW-INDEX] invisible, skip;
      set FK0HM110.FK-CONT-EFF-BDT[FK0HW-INDEX] invisible, skip;
      set FK0HM110.FK0HM-HYPHEN-LIT[FK0HW-INDEX] invisible, skip;
      set FK0HM110.FK-CONT-EFF-XDT[FK0HW-INDEX] invisible, skip;
      FK0HW00.FK0HW-INDEX = FK0HW00.FK0HW-INDEX + 1;
    end
    ;
    if (FK0HM110.FK-VEND-CD == " ") /* If vendor missing*/
      ;
      set FK0HM110.FK-VEND-SNM invisible, skip;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no message to display*/
    if (FK0HM110.FK-VEND-CD == " ") /* If no vendor*/
      set FK0HM110.FK-VEND-CD cursor; /* Set cursor at vendor*/
    else
      if (FK0HM110.FK-MAT-CONT-NBR[1] > 0) /* If contracts exist*/
        set FK0HM110.FK0HM-SELECT[1] cursor; /* Set csr at 1st select*/
      else
        set FK0HM110.FK-VEND-CD cursor; /* Set cursor at vendor*/
      end
    end
  end
  ;
  ;
  converse FK0HM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0HM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0HM110.CAITEM; /* Application data*/
  ;
  ;
end // end FK0H-2000

// Format the data to display
Function FK0H-2100()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK0HM110 initial; /* Initialize map*/
  ;
  FK0HW-FMAT-MAP-SW = "N"; /* Format map switch*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0HW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FK0HW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      if (FK0HW00.XXXTSPAG > FK0HW00.TA5TSQIX) /* Desireg page > highest*/
        FK0HW00.XXXTSPAG = FK0HW00.TA5TSQIX; /* Defaul to highest*/
      end
      ;
      FK0H-2110(); /* Obtain temp storage page*/
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0HM110.FK-VEND-CD = FK0HW01.FK-VEND-CD; /* Vendor cd*/
  FK0HM110.FK-VEND-SNM = FK0HW01.FK-VEND-SNM; /* Vendor short name*/
  ;
  FK0HM110.XXXTSPAG = FK0HW00.XXXTSPAG; /* Current page*/
  FK0HM110.TA5TSQIX = FK0HW00.TA5TSQIX; /* Max page*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format detail data to the map.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0HW00.FK0HW-INDEX = 1; /* Init index*/
  ;
  while (FK0HW00.FK0HW-INDEX <= 14 /* For each map line*/
  )
    FK0HM110.FK-MAT-CONT-NBR[FK0HW-INDEX] = FK0HW01.FK-MAT-CONT-NBR[FK0HW-INDEX]; /* Contract nbr*/
    ;
    FK0HM110.FK-CONT-EFF-BDT[FK0HW-INDEX] = FK0HW01.FK-CONT-EFF-BDT[FK0HW-INDEX]; /* Effective begin date*/
    ;
    FK0HM110.FK-CONT-EFF-XDT[FK0HW-INDEX] = FK0HW01.FK-CONT-EFF-XDT[FK0HW-INDEX]; /* Effective end date*/
    ;
    FK0HW00.FK0HW-INDEX = FK0HW00.FK0HW-INDEX + 1;
  end
  ;
  ;
end // end FK0H-2100

// Read page from temp storage
Function FK0H-2110()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0HW01.XXXTSLEN = FK0HW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FK0HW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FK0HW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "2110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0H-2110

// Check attention identifier
Function FK0H-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FKWREC.FK-VEND-CD[1] = FK0HM110.FK-VEND-CD; /* Vendor code*/
    COMMAREA.CATOAP = "FK0H"; /* to applicaiton*/
    COMMAREA.CAITEM = " "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0HM110.CATOAP cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0HM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty; /* Initialize fkwrec*/
      ;
      FKWREC.FK-VEND-CD[1] = FK0HM110.FK-VEND-CD; /* Vendor*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0HM110.CATOAP cursor, bold; /* Highlight*/
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
    end
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, process PF key.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* FK0B requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* MTL MAINT requested*/
   || converseVar.eventKey is pf13 /* MTL STY MAINT requested*/
   || converseVar.eventKey is pf16 /* STY MTL MAINT requested*/
   || converseVar.eventKey is pf17) /* VENDOR MAINT requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0HM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0B"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = "    "; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0E"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0F"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0M"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK02"; /* TO application*/
    end
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FKWREC.FK-VEND-CD[1] = FK0HM110.FK-VEND-CD; /* Vendor code*/
    COMMAREA.CAITEM = FK0HM110.CAITEM; /* Application find code*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK requested*/
   && converseVar.eventKey not pf8   /* FRWD requested*/
   && converseVar.eventKey not pf14) /* FK0G requested*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK0H-3000

// Reset Highlighted fields
Function FK0H-4000()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK0HM110.FK-VEND-CD initialAttributes; /* Vendor*/
  set FK0HM110.FK-VEND-SNM initialAttributes; /* Vendor short name*/
  set FK0HM110.XXXTSPAG initialAttributes; /* Current page*/
  set FK0HM110.TA5TSQIX initialAttributes; /* Max page*/
  ;
  FK0HW00.FK0HW-INDEX = 1; /* Initialize index*/
  ;
  while (FK0HW00.FK0HW-INDEX <= 14) /* For each detail line*/
    ;
    set FK0HM110.FK0HM-SELECT[FK0HW-INDEX] initialAttributes;
    set FK0HM110.FK-MAT-CONT-NBR[FK0HW-INDEX] initialAttributes;
    set FK0HM110.FK-CONT-EFF-BDT[FK0HW-INDEX] initialAttributes;
    set FK0HM110.FK0HM-HYPHEN-LIT[FK0HW-INDEX] initialAttributes;
    set FK0HM110.FK-CONT-EFF-XDT[FK0HW-INDEX] initialAttributes;
    FK0HW00.FK0HW-INDEX = FK0HW00.FK0HW-INDEX + 1;
  end
  ;
  set FK0HM110.CATOAP initialAttributes; /* To application*/
  set FK0HM110.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FK0H-4000

// Verify entered fields
Function FK0H-5000()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0HM110.CAITEM > " " /* Application data was entered*/
   && converseVar.eventKey not pf14) /* And pf14 not pressed*/
    ;
    set FK0HM110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify scroll request*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* PF7 pressed*/
   || converseVar.eventKey is pf8) /* PF8 pressed*/
    ;
    FK0H-5100(); /* Verify scroll request*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If vendor changed, verify and exit edit routine.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0HM110.FK-VEND-CD != FK0HW01.FK-VEND-CD) /* If vendor changed*/
    ;
    FK0H-5200(); /* Verify vendor*/
    ;
    return;
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Otherwise, verify the select fields.*/
   /* ---------------------------------------------------------------*/
  ;
  FK0HW00.FK0HW-INDEX = 14; /* Init index*/
  FK0HW00.FK0HW-WORK-QTY = 0; /* Init work quantity*/
  ;
  while (FK0HW00.FK0HW-INDEX >= 1) /* For each map field*/
    ;
    if (FK0HM110.FK0HM-SELECT[FK0HW-INDEX] == "S") /* or selected*/
      FK0HW00.FK0HW-WORK-QTY = FK0HW00.FK0HW-WORK-QTY + 1;
    else
      if (FK0HM110.FK0HM-SELECT[FK0HW-INDEX] != " ") /* If not spaces*/
        ;
        set FK0HM110.FK0HM-SELECT[FK0HW-INDEX] cursor, bold;
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(13); /* Only S may be used to select a line*/
      end
    end
    ;
    FK0HW00.FK0HW-INDEX = FK0HW00.FK0HW-INDEX - 1; /* Decrement*/
  end
  ;
  ;
  if (FK0HW00.FK0HW-WORK-QTY > 1) /* If more than 1 line selected*/
    ;
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(22); /* Only 1 line may be selected at a time*/
    ;
    FK0HW00.FK0HW-INDEX = 14;
    while (FK0HW00.FK0HW-INDEX >= 1)
      if (FK0HM110.FK0HM-SELECT[FK0HW-INDEX] == "S") /* If selected*/
        set FK0HM110.FK0HM-SELECT[FK0HW-INDEX] cursor, bold;
      end
      FK0HW00.FK0HW-INDEX = FK0HW00.FK0HW-INDEX - 1; /* Decrement*/
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
end // end FK0H-5000

// Verify scroll request
Function FK0H-5100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK0HW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK0HW00.XXXTSPAG >= FK0HW00.TA5TSQIX) /* and no more pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FK0H-5100

// Verify vendor code
Function FK0H-5200()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VVNDR001 empty;
  ;
  VVNDR001.FK-VEND-CD = FK0HM110.FK-VEND-CD; /* Vendor*/
  ;
  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      ;
      set FK0HM110.FK-VEND-CD cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5200"; /* Module identification*/
      converseLib.validationFailed(21); /* Vendor code missing or invalid*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "5200 VERIFY VENDOR CODE         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0H-5200

// Process valid request
Function FK0H-6000()
   /* ------------------------------------------------------------*/
   /* Process PFKEY transfer request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14) /* CONT*/
    ;
    FK0H-6100(); /* Process pfkey request*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If pf7 pressed, decrement page number and exit to display*/
   /* the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7)
    ;
    FK0HW00.FK0HW-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK0HW00.XXXTSPAG = FK0HW00.XXXTSPAG - 1; /* Decrement page*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If pf8 pressed, increment page number and exit to display*/
   /* the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8)
    ;
    FK0HW00.FK0HW-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK0HW00.XXXTSPAG = FK0HW00.XXXTSPAG + 1; /* Increment page*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check for key change.  If key was changed, exit to obtain*/
   /* the data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0HM110.FK-VEND-CD != FK0HW01.FK-VEND-CD) /* Vendor changed*/
    ;
    FK0HW00.FK0HW-REQUEST-DATA-SW = "Y"; /* Obtain the data*/
    return;
  end
  ;
  ;
end // end FK0H-6000

// Process PFKEY transfer rqst
Function FK0H-6100()
   /* ------------------------------------------------------------*/
   /* Process PFKEY transfer request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    COMMAREA.CATOAP = "FK0G"; /* TO application*/
    COMMAREA.CAITEM = FK0HM110.CAITEM;
  end
  ;
  set FKWREC empty; /* Initialize fkwrec*/
  FK0HW00.FK0HW-INDEX = 1;
  ;
  FKWREC.FK-VEND-CD[1] = FK0HM110.FK-VEND-CD; /* Vendor*/
  ;
  while (FK0HW00.FK0HW-INDEX <= 14)
    ;
    if (FK0HM110.FK0HM-SELECT[FK0HW-INDEX] == "S") /* If row selected*/
      ;
      FKWREC.FK-MAT-CONT-NBR = FK0HM110.FK-MAT-CONT-NBR[FK0HW-INDEX]; /* Contract nbr*/
      ;
      FK0HW00.FK0HW-INDEX = 15; /* Get out while ya can*/
    end
    ;
    FK0HW00.FK0HW-INDEX = FK0HW00.FK0HW-INDEX + 1;
  end
  ;
  XSFKS01(); /* Exit to another application*/
  ;
  FKWREC.XXX-MOD-ID = "6100"; /* Module identification*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0H-6100

//*** RECORD=FK0HW00 ****
// ----------------------------
// Application display storage.
// ----------------------------
// ***********************
Record FK0HW00 type basicRecord
  10 FK0HW-INDEX FK0HW-INDEX ; 
  10 FK0HW-REQUEST-DATA-SW FK0HW-REQUEST-DATA-SW ; 
  10 FK0HW-FMAT-MAP-SW FK0HW-FMAT-MAP-SW ; 
  10 FK0HW-END-CURSOR-SW FK0HW-END-CURSOR-SW ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FK-VEND-CD FK-VEND-CD ; 
  10 FK-MAT-CONT-NBR FK-MAT-CONT-NBR ; 
  10 FK-CONT-EFF-BDT FK-CONT-EFF-BDT ; 
  10 FK-CONT-EFF-XDT FK-CONT-EFF-XDT ; 
  10 FK0HW-WORK-QTY FK0HW-WORK-QTY ; 
end // end FK0HW00

//*** RECORD=FK0HW01 ****
// ----------------------------
// Application display storage.
// ----------------------------
// ***********************
Record FK0HW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(182) ; 
    10 FK-VEND-CD FK-VEND-CD ; 
    10 FK-VEND-SNM FK-VEND-SNM ; 
    10 FK-MAT-CONT-NBR FK-MAT-CONT-NBR [14] ; 
    10 FK-CONT-EFF-BDT FK-CONT-EFF-BDT [14] ; 
    10 FK-CONT-EFF-XDT FK-CONT-EFF-XDT [14] ; 
end // end FK0HW01

// end of dcmpnt.vmusge01 switch
DataItem FK0HW-END-CURSOR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format the map switch
DataItem FK0HW-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// generic index
DataItem FK0HW-INDEX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request data switch
DataItem FK0HW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work quantity
DataItem FK0HW-WORK-QTY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

