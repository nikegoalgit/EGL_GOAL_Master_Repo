package fk0c;

import corpcom2.XX0XW01;
import corpcom3.XPFK001;
import corpcom3.XPTA0P;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx2.XURDEST;
import fk.common.FK-AIRBAG-ID;
import fk.common.FK-AIRBAG-SZ-SCLCD;
import fk.common.FKWREC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VABAG001;
import vv.common.VSYSCL01;
//*** PROGRAM=FK0C ****
// This application provides the capability of submitting
// batch applications to create material/bag reports.
// 
// Users will first specify an output destination, then will
// be allowed to submit one or more reports from an output
// destination, then will be allowed to submit one or more
// reports from the displayed options.  Each report selected
// with an "s" has a separate job stream that is submitted for
// execution.
// 
// Users may exit the application via pfkeys or fastpath, with
// the "OPTION" field entered with the application name.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      12/10/91  DFRANC  New application.
//          05/26/92  JALLE1  Open FK5020 for submit.
//          07/14/92  JALLE1  Open all reports for submit.
//          12/29/92  JALLE1  Remove 'Invalid Size Pct' report
//                            (FK1220).
// FK-018   02/25/93  JALLE1  Activate PFkeys to FK0G,FK0H.
// FK-021   06/08/93  JALLE1  Allow wildcard of bag size scl
//                            on fk4120.
//          08/24/93  JALLE1  Add report numbers to map.
// FK9994   09/07/93  JALLE1  CSP 4.1 conversion.
//          12/16/93  JALLE1  Fix abend code.
// *********************
Program FK0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK0CW00 FK0CW00; // record
  FK0CW01 FK0CW01; // record
  FK0CW02 FK0CW02; // record
  FKWREC FKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VABAG001 VABAG001; // record
  VSYSCL01 VSYSCL01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK0CT01 {deleteAfterUse = yes}; // table
  use FK0CT02 {deleteAfterUse = yes}; // table
  use FK0CT03 {deleteAfterUse = yes}; // table
  use FK0CT05 {deleteAfterUse = yes}; // table
  use FK0CT06 {deleteAfterUse = yes}; // table
  use FK0CT08 {deleteAfterUse = yes}; // table
  use FK0CT09 {deleteAfterUse = yes}; // table
  use FK0CT11 {deleteAfterUse = yes}; // table
  use FK0CT51 {deleteAfterUse = yes}; // table
  use FK0CT52 {deleteAfterUse = yes}; // table
  use FK0CT53 {deleteAfterUse = yes}; // table
  use FK0CT55 {deleteAfterUse = yes}; // table
  use FK0CT56 {deleteAfterUse = yes}; // table
  use FK0CT58 {deleteAfterUse = yes}; // table
  use FK0CT59 {deleteAfterUse = yes}; // table
  use FK0CT61 {deleteAfterUse = yes}; // table
  use FK0CM.FK0CM110, // form
  FK0CM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0CM110 initial; /* M001 input/output*/
    set FK0CW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Internal reader record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FK0CW00.FK0CW-SWD = "1"; /* Map to be displayed switch*/
    FK0CW00.FK0CW-SWF = "Y"; /* Format the map switch*/
    FK0CW00.FK0CW-SWR = "N"; /* Request for data switch*/
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/
    ;
    if (COMMAREA.CAITEM > " ") /* Data was passed*/
      ;
      ;
      COMMAREA.CAITEM = " "; /* Clear passed data*/
      ;
      FK0CW00.FK0CW-SWR = "Y"; /* Request for data switch*/
      ;
    else
      ;
      ;
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0C-001; /* Converse the main process*/
    ;
    ;
    FK0C-001: FK0C-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0C-001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0C

// Main process to display a map
Function FK0C-001()
  ;
  ;
  FK0C-100(); /* Display map 1*/
  ;
end // end FK0C-001

// List the rows in the table
Function FK0C-100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0C-200(); /* Format and display the map*/
  ;
  FK0C-300(); /* Check attention identifier*/
  ;
  FK0C-400(); /* Reset fields to normal intensity*/
  ;
  FK0C-500(); /* Verify the entered data*/
  ;
  FK0C-600(); /* Process valid input request*/
  ;
  ;
end // end FK0C-100

// Format and converse the map
Function FK0C-200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0CM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0CM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0CM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0CM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0CM110.XXXMODID = FKWREC.XXX-MOD-ID; /* Module identification*/
    ;
    set FK0CM110 alarm; /* Indicate sound alarm*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* DETERMINE CURSOR POSITION.*/
    /* ------------------------------------------------------------*/
    ;
    if (FK0CM110.FK0CM-OUT <= " ") /* OUTPUT DESTINATION SELECTION BLANK*/
      set FK0CM110.FK0CM-OUT cursor; /* SET CURSOR ON OUT.DEST.SELECT*/
    else
      set FK0CM110.FK0CM-SEL[1] cursor; /* SET CURSOR ON 1ST REPORT SELECT*/
    end
    ;
  end
  ;
  converse FK0CM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0CM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0CM110.CAITEM; /* Application data*/
  ;
  ;
end // end FK0C-200

// Check attention identifier
Function FK0C-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    COMMAREA.CATOAP = "FK0C"; /* to applicaiton*/
    COMMAREA.CAITEM = "    "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0CM110.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0CM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = FK0CM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0CM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0CM110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* EXIT requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* MTRL requested*/
   || converseVar.eventKey is pf13 /* MSTY requested*/
   || converseVar.eventKey is pf14 /* CONT requested*/
   || converseVar.eventKey is pf15 /* CLST requested*/
   || converseVar.eventKey is pf16) /* STYM requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0CM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0A"; /* TO application*/
      COMMAREA.CAITEM = FK0CM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK0CM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0E"; /* TO application*/
      COMMAREA.CAITEM = FK0CM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FK0F"; /* TO application*/
      COMMAREA.CAITEM = FK0CM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0G"; /* TO application*/
      COMMAREA.CAITEM = FK0CM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FK0H"; /* TO application*/
      COMMAREA.CAITEM = FK0CM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0M"; /* TO application*/
      COMMAREA.CAITEM = FK0CM110.CAITEM; /* item*/
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FKWREC.XXX-MOD-ID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK0C-300

// Reset highlighted fields
Function FK0C-400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW00.FK0CW-IXM = 1; /* Initialize line index*/
  ;
  set FK0CM110.FK0CM-OUT normal; /* Initialize output selection*/
  ;
  while (FK0CW00.FK0CW-IXM <= 8) /* Until end of lines*/
    ;
    set FK0CM110.FK0CM-SEL[FK0CW-IXM] normal; /* Reset select flag*/
    FK0CW00.FK0CW-IXM = FK0CW00.FK0CW-IXM + 1; /* Increment line index*/
  end
  ;
  set FK0CM110.FK-AIRBAG-ID initialAttributes; /* Air bag number*/
  set FK0CM110.FK0CM-BAG-NBR2 initialAttributes; /* Air bag 2*/
  set FK0CM110.FK0CM-BAG-SS2 initialAttributes; /* Size scale 2*/
  ;
  set FK0CM110.CATOAP initialAttributes; /* TO application*/
  set FK0CM110.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FK0C-400

// Verify data that was entered
Function FK0C-500()
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  FK0CW-RPT = "N"; /* INIT Report selected SWITCH*/
  move " " to FK0CW01.FK0CW-APL[1] for all; /* INIT APPL SUBMIT ARRAY*/
  ;
   /* ------------------------------------------------------------*/
   /* Process through the selection fields from the map.  Store*/
   /* the application report names selected into a table for later*/
   /* processing.  Increments indexes if report selection found.*/
   /* ------------------------------------------------------------*/
  ;
  FK0CW00.FK0CW-IXM = 8; /* Initialize line index*/
  ;
  while (FK0CW00.FK0CW-IXM >= 1) /* Until end of lines*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* Verify bag nbr if air bag size table selected.*/
    /* ------------------------------------------------------------*/
    ;
    if (FK0CW00.FK0CW-IXM == 5 /* Air bag size table selected*/
     && FK0CM110.FK0CM-SEL[FK0CW-IXM] == "S")
      ;
      if (FK0CM110.FK-AIRBAG-ID == "*") /* All airbags*/
        ;
         /* next sentence*/
      else
        ;
        FK0C-510(); /* Verify bag number*/
      end
    end
    ;
    ;
    /* ------------------------------------------------------------*/
     /* Verify bag nbr and size scale if style/color/dim air bag*/
     /* report selected.*/
    /* ------------------------------------------------------------*/
    ;
    ;
    if (FK0CW00.FK0CW-IXM == 8 /* style/bag report selected*/
     && FK0CM110.FK0CM-SEL[FK0CW-IXM] == "S")
      ;
      if (FK0CM110.FK0CM-BAG-SS2 == "  ") /* SS missing*/
        set FK0CM110.FK0CM-BAG-SS2 cursor, bold;
        FKWREC.XXX-MOD-ID = "500"; /* Module id*/
        converseLib.validationFailed(87); /* Bag size scale missing or invalid*/
      end
      ;
      if (FK0CM110.FK0CM-BAG-NBR2 == "      ") /* Bag missing*/
        set FK0CM110.FK0CM-BAG-NBR2 cursor, bold;
        FKWREC.XXX-MOD-ID = "500"; /* Module id*/
        converseLib.validationFailed(82); /* Bag missing or invalid*/
      end
      ;
      if (FK0CM110.FK0CM-BAG-NBR2 > "      " /* If bag entered*/
       && FK0CM110.FK0CM-BAG-SS2 > "  ")     /* and size scl entered*/
        ;
        if (FK0CM110.FK0CM-BAG-NBR2 == "*" /* If bag wildcarded*/
         && FK0CM110.FK0CM-BAG-SS2 == "*") /* and size scl wildcarded*/
          ;
          set FK0CM110.FK0CM-BAG-NBR2 cursor, bold;
          set FK0CM110.FK0CM-BAG-SS2 bold;
          FKWREC.XXX-MOD-ID = "500"; /* Module id*/
          converseLib.validationFailed(117); /* Cannot enter '*' for both bag and ss*/
        else
          FK0C-520(); /* Verify bag number*/
        end
      end
    end
    ;
    ;
    /* ------------------------------------------------------------*/
     /* Verify the select fields.*/
    /* ------------------------------------------------------------*/
    ;
    if (FK0CM110.FK0CM-SEL[FK0CW-IXM] > " ")
      if (FK0CM110.FK0CM-SEL[FK0CW-IXM] == "S")
        if (FK0CW-IXM == 1)
          FK0CW01.FK0CW-APL[FK0CW-IXM] = "FK4090";
        end
        if (FK0CW-IXM == 2)
          FK0CW01.FK0CW-APL[FK0CW-IXM] = "FK4080";
        end
        if (FK0CW-IXM == 3)
          FK0CW01.FK0CW-APL[FK0CW-IXM] = "FK3090";
        end
        if (FK0CW-IXM == 4)
          FK0CW01.FK0CW-APL[FK0CW-IXM] = "FK4000";
        end
        if (FK0CW-IXM == 5)
          FK0CW01.FK0CW-APL[FK0CW-IXM] = "FK4020";
        end
        if (FK0CW-IXM == 6)
          FK0CW01.FK0CW-APL[FK0CW-IXM] = "FK4030";
        end
        if (FK0CW-IXM == 7)
          FK0CW01.FK0CW-APL[FK0CW-IXM] = "FK5020";
        end
        if (FK0CW-IXM == 8)
          FK0CW01.FK0CW-APL[FK0CW-IXM] = "FK4120";
        end
        FK0CW-RPT = "Y"; /* Report selected*/
      else
        if (FK0CM110.FK0CM-SEL[FK0CW-IXM] == "*")
             /* next sentence*/
        else /* ;*/
          set FK0CM110.FK0CM-SEL[FK0CW-IXM] cursor, bold;
          FKWREC.XXX-MOD-ID = "500"; /* Module id*/
          converseLib.validationFailed(13); /* Only enter 's'*/
        end
      end
      FK0CW-IXM = FK0CW-IXM - 1;
    else
      FK0CW-IXM = FK0CW-IXM - 1;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check to see if the output destination has been selected.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0CW00.FK0CW-RPT == "Y")
    ;
    if (FK0CM110.FK0CM-OUT == "S"
     || FK0CM110.FK0CM-OUT == "*")
       /* next sentence*/
    else
      set FK0CM110.FK0CM-OUT cursor, bold; /* Set attributes*/
      FKWREC.XXX-MOD-ID = "500"; /* Module id*/
      converseLib.validationFailed(36); /* Must be an 's'*/
      exit stack;
    end
    ;
  else
    ;
    if (FK0CM110.FK0CM-OUT == "S")
       /* next sentence*/
    else
      if (FK0CM110.FK0CM-OUT == "*")
        set FK0CM110.FK0CM-OUT cursor, bold; /* Set attributes*/
        FKWREC.XXX-MOD-ID = "500"; /* Module id*/
        converseLib.validationFailed(37); /* Select output*/
        exit stack;
      end
    end
  end
  ;
end // end FK0C-500

// Verify bag number
Function FK0C-510()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the air bag table.*/
   /* ------------------------------------------------------------*/
  ;
  FK0C-511(); /* Declare DCMPNT.VABAG001 cursor*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Fetch a record from the air bag table.*/
   /* ------------------------------------------------------------*/
  ;
  FK0C-512(); /* Fetch DCMPNT.VABAG001 cursor*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Close the air bag table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  FK0C-513(); /* Close DCMPNT.VABAG001 cursor*/
  ;
  ;
end // end FK0C-510

// Declare DCMPNT.VABAG001 cursor
Function FK0C-511()
   /* ------------------------------------------------------------*/
   /* Declare a cursor for the requested table.*/
   /* ------------------------------------------------------------*/
  ;
  set VABAG001 empty;
  ;
  VABAG001.FK-AIRBAG-ID = FK0CM110.FK-AIRBAG-ID; /* Bag*/
  ;
  ;
  try
    call "IO6360" ("S1", SQLCA, VABAG001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "511"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "511 SELECT DCMPNT.VABAG001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABAG001"; /* Table view name*/
  TA1REC.TA1TBLKE = VABAG001.VABAG001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-511

// Fetch DCMPNT.VABAG001 cursor
Function FK0C-512()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6360" ("N1", SQLCA, VABAG001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/
      ;
      converseLib.validationFailed(82); /* Bag number missing or invalid*/
      FKWREC.XXX-MOD-ID = "512"; /* Module identification*/
      set FK0CM110.FK-AIRBAG-ID cursor, bold; /* Highlight*/
      ;
      return;
    end
    ;
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "512"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "512 FETCH DCMPNT.VABAG001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABAG001"; /* Table view name*/
  TA1REC.TA1TBLKE = VABAG001.VABAG001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-512

// Close DCMPNT.VABAG001 cursor
Function FK0C-513()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6360" ("C1", SQLCA, VABAG001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "513"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "513 CLOSE DCMPNT.VABAG001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABAG001"; /* Table view name*/
  TA1REC.TA1TBLKE = VABAG001.VABAG001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-513

// Select count DCMPNT.VSYSCL01
Function FK0C-520()
   /* ------------------------------------------------------------*/
   /* Select count on the dcmpnt.vsyscl01 table.*/
   /* ------------------------------------------------------------*/
  ;
  set VSYSCL01 empty;
  set FK0CW02 empty;
  ;
  VSYSCL01.FK-AIRBAG-ID = FK0CM110.FK0CM-BAG-NBR2; /* Bag*/
  VSYSCL01.FK-AIRBAG-SZ-SCLCD = FK0CM110.FK0CM-BAG-SS2; /* bag ss*/
  ;
  FK0CW02.FK0CW-FUNCTION = "SD"; /* Function*/
  ;
  try
    call "IO6390" (FK0CW02, SQLCA, VSYSCL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FK0CW02.FK0CW-SUM == 0) /* If no rows found*/
        ;
        set FK0CM110.FK0CM-BAG-SS2 bold; /* Highlight*/
        set FK0CM110.FK0CM-BAG-NBR2 cursor, bold; /* Highlight*/
        converseLib.validationFailed(88); /* Bag and size scale combo invalid*/
        FKWREC.XXX-MOD-ID = "520"; /* Module identification*/
      end
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "520"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "520 SELECT COUNT DCMPNT.VSYSCL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYSCL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYSCL01.VSYSCL01-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-520

// Process valid input request
Function FK0C-600()
   /* --------------------------------------------------------------*/
   /* IF SPECIFY OUTPUT DESTINATION IS SELECTED ;*/
   /* SETUP CALL TO TA0P TO GET DESTINATION.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0CM110.FK0CM-OUT == "S")
    set TA6REC empty;
    TA6REC.TA6SUBSW = "N"; /* GET REPORT DISTRIBUTION ONLY*/
    TA6REC.TA6MSGSW = "N"; /* DONT DISPLAY MSG WHEN DONE*/
    XPTA0P();
    if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
     && TA6REC.TA6RTNCD == "0")        /* AND NORMAL RETURN*/
      FK0CW01.XURDEST = TA6REC.XURDEST; /* PRINT DESTINATION*/
      FK0CM110.FK0CM-OUT = "*"; /* MOVE '*' TO DEST SELECT FIELD*/
    else
      if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
       && TA6REC.TA6RTNCD == "1")        /* USER CANCELLED*/
        FK0CM110.FK0CM-OUT = "S"; /* MOVE 'S' TO DEST SELECT FIELD*/
        set FK0CM110.FK0CM-OUT cursor; /* SET CURSOR*/
        converseLib.validationFailed(35); /* INDICATE USER CANCELLED*/
        FKWREC.XXX-MOD-ID = "600"; /* MODULE ID.*/
        exit stack; /* EXIT TO DISPLAY MAP.*/
      end
    end
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Check to see if REPORTS SELECTED.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0CW-RPT == "Y") /* REPORTS SELECTED*/
    ;
    /* ----------------------------------------------------------*/
    /* Determine which environment the program is executing in:*/
    /* Development or Production*/
    /* ----------------------------------------------------------*/
    ;
    FK0C-610(); /* Determine Region*/
    ;
    FK0CW00.FK0CW-PRF = "Y"; /* print flag*/
    FK0CW00.FK0CW-FRF = "Y"; /* FIRST TIME FLAG.*/
    ;
    FK0C-620(); /* Submit production report*/
    ;
    FK0CW00.FK0CW-PRF = "N"; /* Set print request flag*/
    FK0CW00.FK0CW-SWF = "Y"; /* Format the map*/
    ;
  end
  ;
end // end FK0C-600

// get region information
Function FK0C-610()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  ;
  TA3REC.TA3OPTN = "ASSIGN ";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FKWREC.XXX-MOD-ID = "610"; /* module identification*/
    converseLib.validationFailed(10); /* System error*/
    exit stack;
  end
  ;
  ;
end // end FK0C-610

// Process prod JCL
Function FK0C-620()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW-IXA = 1; /* Set index for selection table*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Determine which table to use and pass rows to ta6rec.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  while (FK0CW-IXA <= 8)
    ;
    if (FK0CW01.FK0CW-APL[FK0CW-IXA] == "FK4090")
      FK0C-621();
      FK0CM110.FK0CM-SEL[FK0CW-IXA] = "*";
      move " " to TA6REC.TARJCL[1] for all;
      move " " to TA6REC.TARTYPE[1] for all;
    end
    ;
    if (FK0CW01.FK0CW-APL[FK0CW-IXA] == "FK4080")
      FK0C-622();
      FK0CM110.FK0CM-SEL[FK0CW-IXA] = "*";
      move " " to TA6REC.TARJCL[1] for all;
      move " " to TA6REC.TARTYPE[1] for all;
    end
    ;
    if (FK0CW01.FK0CW-APL[FK0CW-IXA] == "FK3090")
      FK0C-623();
      FK0CM110.FK0CM-SEL[FK0CW-IXA] = "*";
      move " " to TA6REC.TARJCL[1] for all;
      move " " to TA6REC.TARTYPE[1] for all;
    end
    ;
    if (FK0CW01.FK0CW-APL[FK0CW-IXA] == "FK4000")
      FK0C-625();
      FK0CM110.FK0CM-SEL[FK0CW-IXA] = "*";
      move " " to TA6REC.TARJCL[1] for all;
      move " " to TA6REC.TARTYPE[1] for all;
    end
    ;
    if (FK0CW01.FK0CW-APL[FK0CW-IXA] == "FK4020")
      FK0C-628();
      FK0CM110.FK0CM-SEL[FK0CW-IXA] = "*";
      move " " to TA6REC.TARJCL[1] for all;
      move " " to TA6REC.TARTYPE[1] for all;
    end
    ;
    if (FK0CW01.FK0CW-APL[FK0CW-IXA] == "FK4030")
      FK0C-629();
      FK0CM110.FK0CM-SEL[FK0CW-IXA] = "*";
      move " " to TA6REC.TARJCL[1] for all;
      move " " to TA6REC.TARTYPE[1] for all;
    end
    ;
    if (FK0CW01.FK0CW-APL[FK0CW-IXA] == "FK5020")
      FK0C-631();
      FK0CM110.FK0CM-SEL[FK0CW-IXA] = "*";
      move " " to TA6REC.TARJCL[1] for all;
      move " " to TA6REC.TARTYPE[1] for all;
    end
    ;
    if (FK0CW01.FK0CW-APL[FK0CW-IXA] == "FK4120")
      FK0C-626();
      FK0CM110.FK0CM-SEL[FK0CW-IXA] = "*";
      move " " to TA6REC.TARJCL[1] for all;
      move " " to TA6REC.TARTYPE[1] for all;
    end
    ;
    ;
    FK0CW-IXA = FK0CW-IXA + 1;
    FK0CW00.FK0CW-FRF = "N"; /* Not first time anymore*/
    ;
  end
  ;
  FK0CW-RPT = "N"; /* INIT REPORT SELECTED SWITCH*/
end // end FK0C-620

// Format JCL for FK4090
Function FK0C-621()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW00.FK0CW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0CW01.XURDEST; /* Load in printer destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Check to see if the destination needs to be obtained when no*/
   /* reports have been selected.*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0CW00.FK0CW-IXT > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT01.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT01.TARTYPE[FK0CW-IXT];
      ;
         /* --------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* --------------------------------------------------*/
      ;
      if (FK0CT01.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    else
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT51.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT51.TARTYPE[FK0CW-IXT];
      ;
         /* -----------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -----------------------------------------------------*/
      ;
      if (FK0CT51.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
    ;
  end
  ;
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "621"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "621"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-621

// Format JCL for FK4080
Function FK0C-622()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW00.FK0CW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0CW01.XURDEST; /* Load in report destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0CW00.FK0CW-IXT > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT02.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT02.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT02.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    else
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT52.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT52.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT52.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
    ;
  end
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "622"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "622"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-622

// Format JCL for FK3090
Function FK0C-623()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW00.FK0CW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0CW01.XURDEST; /* Load in report destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0CW00.FK0CW-IXT > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT03.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT03.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT03.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    else
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT53.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT53.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT53.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
    ;
  end
  ;
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "623"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "623"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-623

// Format JCL for FK4000
Function FK0C-625()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW00.FK0CW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0CW01.XURDEST; /* Load in report destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0CW00.FK0CW-IXT > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT05.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT05.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT05.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    else
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT55.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT55.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT55.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
    ;
  end
  ;
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "625"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "625"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-625

// Format JCL for FK4120
Function FK0C-626()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW00.FK0CW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0CW01.XURDEST; /* Load in report destination*/
  ;
  FK0CW00.FK-AIRBAG-ID = FK0CM110.FK0CM-BAG-NBR2; /* Load parm*/
  FK0CW00.FK-AIRBAG-SZ-SCLCD = FK0CM110.FK0CM-BAG-SS2;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0CW00.FK0CW-IXT > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      if (FK0CT06.TARTYPE[FK0CW-IXT] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0CW00.FK0CW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0CT06.TARTYPE[FK0CW-IXT];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0CT06.TARJCL[FK0CW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0CT06.TARTYPE[FK0CW-IXT];
      end
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT06.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    else
      ;
      if (FK0CT56.TARTYPE[FK0CW-IXT] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0CW00.FK0CW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0CT56.TARTYPE[FK0CW-IXT];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0CT56.TARJCL[FK0CW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0CT56.TARTYPE[FK0CW-IXT];
      end
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT56.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
    ;
  end
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "629"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "629"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-626

// Format JCL for FK4020
Function FK0C-628()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW00.FK0CW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0CW01.XURDEST; /* Load in report destination*/
  ;
  FK0CW00.FK-AIRBAG-ID = FK0CM110.FK-AIRBAG-ID; /* Load parm*/
  FK0CW00.FK-AIRBAG-SZ-SCLCD = "  "; /* Set size scale blank*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0CW00.FK0CW-IXT > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      if (FK0CT08.TARTYPE[FK0CW-IXT] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0CW00.FK0CW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0CT08.TARTYPE[FK0CW-IXT];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0CT08.TARJCL[FK0CW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0CT08.TARTYPE[FK0CW-IXT];
      end
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT08.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    else
      ;
      if (FK0CT58.TARTYPE[FK0CW-IXT] == "P") /* Parameter stmt*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0CW00.FK0CW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0CT58.TARTYPE[FK0CW-IXT];
      else
        ;
        TA6REC.TARJCL[TA6INDEX] = FK0CT58.TARJCL[FK0CW-IXT];
        TA6REC.TARTYPE[TA6INDEX] = FK0CT58.TARTYPE[FK0CW-IXT];
      end
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT58.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
    ;
  end
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "629"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "629"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-628

// Format JCL for FK4030
Function FK0C-629()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW00.FK0CW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0CW01.XURDEST; /* Load in report destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0CW00.FK0CW-IXT > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT09.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT09.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT09.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    else
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT59.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT59.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT59.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
    ;
  end
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "631"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "631"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-629

// Format JCL for FK5020
Function FK0C-631()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FK0CW00.FK0CW-IXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0CW01.XURDEST; /* Load in report destination*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0CW00.FK0CW-IXT > 0) /* Until end of table*/
    ;
    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT11.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT11.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT11.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    else
      ;
      TA6REC.TARJCL[TA6INDEX] = FK0CT61.TARJCL[FK0CW-IXT];
      TA6REC.TARTYPE[TA6INDEX] = FK0CT61.TARTYPE[FK0CW-IXT];
      ;
         /* -------------------------------------------------------*/
          /* If not end of table, increment the table index.*/
         /* -------------------------------------------------------*/
      ;
      if (FK0CT61.TARJCL[FK0CW-IXT] == "/*EOF") /* End of table*/
        ;
        FK0CW00.FK0CW-IXT = 0; /* Indicate end of table*/
        ;
      else
        ;
        FK0CW00.FK0CW-IXT = FK0CW00.FK0CW-IXT + 1; /* Incr tbl idx*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
    ;
  end
  ;
  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/
  ;
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(27); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "633"; /* module identification*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "633"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0C-631

//*** RECORD=FK0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0CW00 type basicRecord
  10 FK0CW-IXM FK0CW-IXM ; 
  10 FK0CW-IXA FK0CW-IXA ; 
  10 FK0CW-IXT FK0CW-IXT ; 
  10 FK0CW-SWC FK0CW-SWC ; 
  10 FK0CW-SWD FK0CW-SWD ; 
  10 FK0CW-SWF FK0CW-SWF ; 
  10 FK0CW-PRF FK0CW-PRF ; 
  10 FK0CW-FRF FK0CW-FRF ; 
  10 FK0CW-RPT FK0CW-RPT ; 
  10 FK0CW-SWR FK0CW-SWR ; 
  10 FK0CW-SWU FK0CW-SWU ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FK0CW-PARM FK0CW-PARM ; 
    15 FK-AIRBAG-ID FK-AIRBAG-ID ; 
    15 FK-AIRBAG-SZ-SCLCD FK-AIRBAG-SZ-SCLCD ; 
    15 * char(72) ; 
end // end FK0CW00

//*** RECORD=FK0CW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0CW01 type basicRecord
  5 * char(90) ; 
    10 FK0CW-APL FK0CW-APL [14] ; 
    10 XURDEST XURDEST ; 
end // end FK0CW01

//*** RECORD=FK0CW02 ****
// This work area is the first argument that is passed in the
// CALL statement for module IO6240.
// It contains the function to be performed and one general
// use summary count field.  The count field is used in
// conjunction with the select count function.
// 
// 
//   DATE       NAME      COMMENT
// --------    ------     -------------------------------------
// 02/21/89    pmainw     Initial record creation.
// ***********************
Record FK0CW02 type basicRecord
  10 FK0CW-FUNCTION FK0CW-FUNCTION ; 
  10 FK0CW-SUM FK0CW-SUM ; 
end // end FK0CW02

// Application table
DataItem FK0CW-APL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST REPORT FLAG
DataItem FK0CW-FRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// I/O module function
DataItem FK0CW-FUNCTION char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for application table
DataItem FK0CW-IXA smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FK0CW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table
DataItem FK0CW-IXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FK0C parameter
DataItem FK0CW-PARM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRINT REPORT FLAG
DataItem FK0CW-PRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for report switch
DataItem FK0CW-RPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summary count 1
DataItem FK0CW-SUM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem FK0CW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem FK0CW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FK0CW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FK0CW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FK0CW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

