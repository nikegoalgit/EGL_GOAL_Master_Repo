package fk0r;

import corpcom2.XX0XW02;
import corpcom3.XPFK001;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import fb.common.FBAMDNBR;
import fk.common.*;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VLRPSH01;
import vv.common.VLRSTY01;
import vv.common.VVNDR001;
//*** PROGRAM=FK0R ****
// FK0R  -  COMPONENTS FORECASTING - LRPS BY COUNTRY/FACTORY
//                        INQUIRY
// 
// This program is part of the Components Forecasting System.
// The application provides inquiry capability for LRPS by
// country/factory.  The user will key in a LRPS number, LRPS
// type, country and factory and the application will retrieve
// the style/color/dimension and quantities to be made and
// store the data in temporary storage.  The application then
// reads the data from temporary storage and displays the
// map.  The user may then select a single or multiple rows and
// transfer to another application with the data being passed
// in the commarea.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      03/03/92  DFRANC  New application.
//          07/20/92  JALLE1  Fix data pass between FK0O and
//                            other applications.
//          09/28/92  JALLE1  Remove lrps type from map.
//                            Default lrps type to 'mtl'.
//          08/09/93  JALLE1  Remove references to FBDMDTYP
//                            for Aug '93 table changes.
// 
// Y2KFIX   11/11/97  VRAMAC  Y2K MODIFICATIONS MADE TO:
//                            FK0R-1210: INCLUDE CC IN DATE
//                            CALCULATIONS
//                            FK0RW00 : INTRODUCED NEW VARIABLE
//                            FOR DATE CALCULATION WITH CCYY
// 
// *********************
Program FK0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK0RW00 FK0RW00; // record
  FK0RW01 FK0RW01; // record
  FK0RW02 FK0RW02; // record
  FK0RW03 FK0RW03; // record
  FKWREC FKWREC; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VLRPSH01 VLRPSH01; // record
  VLRSTY01 VLRSTY01; // record
  VVNDR001 VVNDR001; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use FK0RM.FK0RM110, // form
  FK0RM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0RM110 initial; /* map input/output*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Initialize temp storage record*/
    set VLRSTY01 empty; /* LRPS style*/
    set VLRPSH01 empty; /* LRPS header*/
    set PG2REC empty; /* Style color production*/
    set PG4REC empty; /* Style color development*/
    set FY1REC empty; /* Factory*/
    set FK0RW00 empty; /* Initialize working storage rec*/
    set FK0RW01 empty; /* Initialize working storage rec*/
    set FK0RW02 empty; /* Initialize working storage rec*/
    set FK0RW03 empty; /* Initialize working storage rec*/
    ;
     /* ------------------------------------------------------------*/
     /* Receive data being passed from other applications.*/
     /* ------------------------------------------------------------*/
    ;
    FK0RM110.FBAMDNBR = FKWREC.FBAMDNBR;
    FK0RM110.XCTCD = FKWREC.XCTCD;
    FK0RM110.FY1FCTYC = FKWREC.FY1FCTYC;
    ;
    if (FKWREC.FBAMDNBR != 0 /* Model number passed*/
     && FKWREC.XCTCD != " "  /* Country passed*/
     && FKWREC.FY1FCTYC != " ") /* Factory passed*/
      ;
      FK0RW00.FK0RW-REQUEST-DATA-SW = "Y"; /* Data requested switch*/
    else
      FK0RW00.FK0RW-REQUEST-DATA-SW = "N"; /* Data requested switch*/
    end
    ;
    ;
    set FKWREC empty; /* Clear out FKWREC*/
    ;
    FK0RW00.FK0RW-FORMAT-MAP-SW = "N"; /* Format the data*/
    FK0RW00.FK0RW-DISPLAY-LEFT-SW = "Y"; /* Display left screen*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0R-0001; /* Converse the main process*/
    ;
    ;
    FK0R-0001: FK0R-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0R-0001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0R

// Main process to display a map
Function FK0R-0001()
   /* ---------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0R-1000(); /* Obtain the data to display*/
  ;
  FK0R-2000(); /* Format and display the map*/
  ;
  FK0R-3000(); /* Check attention identifier*/
  ;
  FK0R-4000(); /* Reset fields to normal intensity*/
  ;
  FK0R-5000(); /* Verify the entered data*/
  ;
  FK0R-6000(); /* Process valid input request*/
  ;
   /* --------------------- END OF FK0R-0001 ------------------------*/
end // end FK0R-0001

// Obtain the data to display
Function FK0R-1000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RW00.FK0RW-REQUEST-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK0RW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  ;
  FK0R-1100(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Select LRPS header information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0R-1200(); /* Select LRPS header*/
  ;
   /* ------------------------------------------------------------*/
   /* Check to see if an error has been found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the dates to appear on the map header*/
   /* ------------------------------------------------------------*/
  ;
  FK0R-1210(); /* Calculate dates*/
  ;
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW00.XXXTSLEN = 1499; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Declare and open cursor for the LRPS style table.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW00.FK0RW-LRPS-EOF-SW = "N"; /* Initialize switch*/
  FK0RW00.FK0RW-PG2REC-EOF-SW = "N"; /* Initialize switch*/
  FK0RW00.FK0RW-PG4REC-EOF-SW = "N"; /* Initialize switch*/
  FK0RW00.FK0RW-IDX = 1; /* Display line index*/
  ;
  FK0R-1300(); /* Select set and open cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch a row from the LRPS style table.*/
   /* ------------------------------------------------------------*/
  ;
  FK0R-1400(); /* Fetch next row from LRPS style*/
  ;
  if (FK0RW00.FK0RW-LRPS-EOF-SW == "N")
    ;
    FK0R-1410(); /* Save key*/
    FK0R-1420(); /* Save quantities*/
    ;
  else
    ;
    converseLib.validationFailed(15); /* No records found for key*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module id*/
    set FK0RM110.FBAMDNBR bold, cursor;
    set FK0RM110.XCTCD bold;
    set FK0RM110.FY1FCTYC bold;
    FK0RW00.FK0RW-REQUEST-DATA-SW = "N";
    FK0RW00.FK0RW-FORMAT-MAP-SW = "Y";
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Process through the LRPS style table unit end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  while (FK0RW00.FK0RW-LRPS-EOF-SW == "N") /* Until end of cursor*/
    ;
    FK0R-1400(); /* Fetch next row from LRPS style*/
    ;
    if (VLRSTY01.SY1STNBR == FK0RW01.SY1STNBR
     && VLRSTY01.SY2CLRID == FK0RW01.SY2CLRID
     && VLRSTY01.XDMCD == FK0RW01.XDMCD
     && FK0RW-LRPS-EOF-SW == "N")
      ;
      FK0RW00.FK0RW-BUY-DT = VLRSTY01.FB8BUYDT;
      ;
      FK0R-1420(); /* Save quantities*/
      ;
    else
      ;
      FK0RW00.FK0RW-PG2REC-EOF-SW = "N";
      FK0RW00.FK0RW-PG4REC-EOF-SW = "N";
      ;
      FK0R-1430(); /* Select DPRODG.VSYCLR01 row*/
      ;
      if (FK0RW00.FK0RW-PG2REC-EOF-SW == "Y")
        ;
        FK0R-1440(); /* Select DPRODG.VSYDVL01 row*/
        ;
      end
      ;
      FK0R-1500(); /* Save data in display storage*/
                                  /* Increment index*/
      /* -------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
      /* -------------------------------------------------------*/
      ;
      if (FK0RW00.FK0RW-IDX > 15) /* Page is full*/
        ;
        FK0R-1600(); /* Add page to temp storage*/
        ;
        FK0RW00.FK0RW-IDX = 1; /* Display line index*/
        ;
      end
      ;
      set FK0RW01 empty; /* Initialize hold area*/
      ;
      FK0R-1410(); /* Save key*/
      ;
      FK0R-1420(); /* Save quantities*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RW00.FK0RW-IDX > 1) /* Page was formatted*/
    FK0R-1600(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the LRPS Cursor.*/
   /* ------------------------------------------------------------*/
  ;
  FK0R-1700(); /* Close the selected set cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    FKWREC.XXXMSGNO = 18; /* No data was found to display*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW00.FK0RW-REQUEST-DATA-SW = "N"; /* Request for data*/
  ;
   /* ----------------- END OF FK0R-1000 --------------------------*/
end // end FK0R-1000

// Purge any temporary storage
Function FK0R-1100()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0RW02 empty; /* M110 display storage*/
  ;
  FK0RW00.FK0RW-UPDATE-SW = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK0RW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FK0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-1100 -----------------------------*/
end // end FK0R-1100

// Select unique DCMPNT.VLRPSH01
Function FK0R-1200()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VLRPSH01 empty; /* Clear row storage area*/
  ;
  VLRPSH01.FBAMDNBR = FK0RM110.FBAMDNBR; /* LRPS number*/
  ;
  try
    call "IO6250" ("S ", SQLCA, VLRPSH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      set FK0RM110.FBAMDNBR cursor, bold;
      FKWREC.XXX-MOD-ID = "1200"; /* module id*/
      converseLib.validationFailed(15); /* LRPS number not found*/
      FK0RW00.FK0RW-FORMAT-MAP-SW = "N"; /* Format data switch*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW00.FK0RW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN VENDOR NAME";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPSH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRPSH01.VLRPSH01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF fk0r-1200 ------------------------------*/
end // end FK0R-1200

// Calculate header dates on map
Function FK0R-1210()
  ;
  FK0RW00.FK0RW-BUY-DT = VLRPSH01.FB8BUYDT; /* Buy date*/
  ;
   /* ------------------------ Y2K IN  BEGIN --------------------*/
  FK0RW00.FK0RW-BUY-DTY2K = FK0RW00.FK0RW-BUY-DT; /* Buy date*/
   /* ------------------------ Y2K IN  END ----------------------*/
  ;
  if (FK0RW00.FK0RW-BUY-MM == 1)
    FK0RW00.FK0RW-ACT-1-MM = 10;
    ;
    /* ------------------------ Y2K OUT BEGIN --------------------*/
    /* FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY - 1;*/
    /* MOVE 11 TO FK0RW00.FK0RW-ACT-2-MM;*/
    /* FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY - 1;*/
    /* MOVE 12 TO FK0RW00.FK0RW-PRELIM-MM;*/
    /* FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY - 1;*/
    /* ------------------------ Y2K OUT END ----------------------*/
    ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
    FK0RW00.FK0RW-BUY-CCYY = FK0RW00.FK0RW-BUY-CCYY - 1;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CCY2K;
    FK0RW00.FK0RW-ACT-2-MM = 11;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-PRELIM-MM = 12;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CC;
    /* ------------------------ Y2K IN  END ----------------------*/
    ;
    FK0RW00.FK0RW-FORCST-1-MM = FK0RW00.FK0RW-BUY-MM;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 2;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 3;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 4;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-5-MM = 5;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-6-MM = 6;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-7-MM = 7;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 2)
    FK0RW00.FK0RW-ACT-1-MM = 11;
    ;
    /* ------------------------ Y2K OUT BEGIN --------------------*/
    /* FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY - 1;*/
    /* MOVE 12 TO FK0RW00.FK0RW-ACT-2-MM;*/
    /* FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY - 1;*/
    /* ------------------------ Y2K OUT END ----------------------*/
    ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
    FK0RW00.FK0RW-BUY-CCYY = FK0RW00.FK0RW-BUY-CCYY - 1;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CCY2K;
    FK0RW00.FK0RW-ACT-2-MM = 12;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CC;
    /* ------------------------ Y2K IN  END ----------------------*/
    ;
    FK0RW00.FK0RW-PRELIM-MM = 1;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 2;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 3;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 4;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 5;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-5-MM = 6;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-6-MM = 7;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-7-MM = 8;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 3)
    FK0RW00.FK0RW-ACT-1-MM = 12;
    ;
    /* ------------------------ Y2K OUT BEGIN --------------------*/
    /* FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY - 1;*/
    /* ------------------------ Y2K OUT END ----------------------*/
    ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
    FK0RW00.FK0RW-BUY-CCYY = FK0RW00.FK0RW-BUY-CCYY - 1;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CCY2K;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CC;
    /* ------------------------ Y2K IN  END ----------------------*/
    ;
    FK0RW00.FK0RW-ACT-2-MM = 1;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 2;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 3;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 4;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 5;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 6;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-5-MM = 7;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-6-MM = 8;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-7-MM = 9;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 4)
    FK0RW00.FK0RW-ACT-1-MM = 1;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-ACT-2-MM = 2;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 3;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 4;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 5;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 6;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 7;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-5-MM = 8;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-6-MM = 9;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-7-MM = 10;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 5)
    FK0RW00.FK0RW-ACT-1-MM = 2;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-ACT-2-MM = 3;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 4;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 5;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 6;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 7;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 8;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-5-MM = 9;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-6-MM = 10;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-7-MM = 11;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 6)
    FK0RW00.FK0RW-ACT-1-MM = 3;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-ACT-2-MM = 4;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 5;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 6;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 7;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 8;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 9;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-5-MM = 10;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-6-MM = 11;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-7-MM = 12;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 7)
    FK0RW00.FK0RW-ACT-1-MM = 4;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-ACT-2-MM = 5;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 6;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 7;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 8;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 9;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 10;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-5-MM = 11;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-6-MM = 12;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-7-MM = 1;
    ;
    /* ------------------------ Y2K OUT BEGIN --------------------*/
    /* FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* ------------------------ Y2K OUT END ----------------------*/
    ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
    FK0RW00.FK0RW-BUY-CCYY = FK0RW00.FK0RW-BUY-CCYY + 1;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CCY2K;
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CC;
    /* ------------------------ Y2K IN  END ----------------------*/
    ;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 8)
    FK0RW00.FK0RW-ACT-1-MM = 5;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-ACT-2-MM = 6;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 7;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 8;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 9;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 10;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 11;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-5-MM = 12;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-6-MM = 1;
    ;
    /* ------------------------ Y2K OUT BEGIN --------------------*/
    /* FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 2 TO FK0RW00.FK0RW-FORCST-7-MM;*/
    /* FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* ------------------------ Y2K OUT END ----------------------*/
    ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
    FK0RW00.FK0RW-BUY-CCYY = FK0RW00.FK0RW-BUY-CCYY + 1;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-MM = 2;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CCY2K;
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CC;
    /* ------------------------ Y2K IN  END ----------------------*/
    ;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 9)
    FK0RW00.FK0RW-ACT-1-MM = 6;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-ACT-2-MM = 7;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 8;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 9;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 10;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 11;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 12;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-5-MM = 1;
    ;
    /* ------------------------ Y2K OUT BEGIN --------------------*/
    /* FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 2 TO FK0RW00.FK0RW-FORCST-6-MM;*/
    /* FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 3 TO FK0RW00.FK0RW-FORCST-7-MM;*/
    /* FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* ------------------------ Y2K OUT END ----------------------*/
    ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
    FK0RW00.FK0RW-BUY-CCYY = FK0RW00.FK0RW-BUY-CCYY + 1;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-6-MM = 2;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-MM = 3;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CCY2K;
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CC;
    /* ------------------------ Y2K IN  END ----------------------*/
    ;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 10)
    FK0RW00.FK0RW-ACT-1-MM = 7;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-ACT-2-MM = 8;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 9;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 10;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 11;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 12;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-4-MM = 1;
    ;
    /* ------------------------ Y2K OUT BEGIN --------------------*/
    /* FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 2 TO FK0RW00.FK0RW-FORCST-5-MM;*/
    /* FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 3 TO FK0RW00.FK0RW-FORCST-6-MM;*/
    /* FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 4 TO FK0RW00.FK0RW-FORCST-7-MM;*/
    /* FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* ------------------------ Y2K OUT END ----------------------*/
    ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
    FK0RW00.FK0RW-BUY-CCYY = FK0RW00.FK0RW-BUY-CCYY + 1;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-5-MM = 2;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-6-MM = 3;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-MM = 4;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CCY2K;
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CC;
    /* ------------------------ Y2K IN  END ----------------------*/
    ;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 11)
    FK0RW00.FK0RW-ACT-1-MM = 8;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-ACT-2-MM = 9;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 10;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 11;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 12;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-3-MM = 1;
    ;
    /* ------------------------ Y2K OUT BEGIN --------------------*/
    /* FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 2 TO FK0RW00.FK0RW-FORCST-4-MM;*/
    /* FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 3 TO FK0RW00.FK0RW-FORCST-5-MM;*/
    /* FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 4 TO FK0RW00.FK0RW-FORCST-6-MM;*/
    /* FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 5 TO FK0RW00.FK0RW-FORCST-7-MM;*/
    /* FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* ------------------------ Y2K OUT END ----------------------*/
    ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
    FK0RW00.FK0RW-BUY-CCYY = FK0RW00.FK0RW-BUY-CCYY + 1;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-4-MM = 2;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-5-MM = 3;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-6-MM = 4;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-MM = 5;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CCY2K;
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CC;
    /* ------------------------ Y2K IN  END ----------------------*/
    ;
  end
  ;
  if (FK0RW00.FK0RW-BUY-MM == 12)
    FK0RW00.FK0RW-ACT-1-MM = 9;
    FK0RW00.FK0RW-ACT-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-ACT-2-MM = 10;
    FK0RW00.FK0RW-ACT-2-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-PRELIM-MM = 11;
    FK0RW00.FK0RW-PRELIM-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-1-MM = 12;
    FK0RW00.FK0RW-FORCST-1-YY = FK0RW00.FK0RW-BUY-YY;
    FK0RW00.FK0RW-FORCST-2-MM = 1;
    ;
    /* ------------------------ Y2K OUT BEGIN --------------------*/
    /* FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 2 TO FK0RW00.FK0RW-FORCST-3-MM;*/
    /* FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 3 TO FK0RW00.FK0RW-FORCST-4-MM;*/
    /* FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 4 TO FK0RW00.FK0RW-FORCST-5-MM;*/
    /* FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 5 TO FK0RW00.FK0RW-FORCST-6-MM;*/
    /* FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* MOVE 6 TO FK0RW00.FK0RW-FORCST-7-MM;*/
    /* FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YY + 1;*/
    /* ------------------------ Y2K OUT END ----------------------*/
    ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
    FK0RW00.FK0RW-BUY-CCYY = FK0RW00.FK0RW-BUY-CCYY + 1;
    FK0RW00.FK0RW-FORCST-2-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-3-MM = 2;
    FK0RW00.FK0RW-FORCST-3-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-4-MM = 3;
    FK0RW00.FK0RW-FORCST-4-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-5-MM = 4;
    FK0RW00.FK0RW-FORCST-5-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-6-MM = 5;
    FK0RW00.FK0RW-FORCST-6-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-MM = 6;
    FK0RW00.FK0RW-FORCST-7-YY = FK0RW00.FK0RW-BUY-YYY2K;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CCY2K;
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CC;
    /* ------------------------ Y2K IN  END ----------------------*/
    ;
  end
  ;
    /* ------------------------ Y2K OUT BEGIN---------------------*/
   /* IF FK0RW00.FK0RW-BUY-YY = 00*/
   /* AND FK0RW00.FK0RW-BUY-MM LT 4;*/
   /* MOVE 19 TO FK0RW00.FK0RW-ACT-1-CC;*/
   /* MOVE 99 TO FK0RW00.FK0RW-ACT-1-YY;*/
   /* MOVE FK0RW00.FK0RW-BUY-DD TO FK0RW00.FK0RW-ACT-1-DD;*/
   /* MOVE FK0RW00.FK0RW-BUY-CC TO FK0RW00.FK0RW-FORCST-7-CC;*/
   /* MOVE FK0RW00.FK0RW-BUY-DD TO FK0RW00.FK0RW-FORCST-7-DD;*/
   /* ELSE;*/
   /* IF FK0RW00.FK0RW-BUY-YY = 99*/
     /* AND FK0RW00.FK0RW-BUY-MM GE 8;*/
     /* MOVE FK0RW00.FK0RW-BUY-CC TO FK0RW00.FK0RW-ACT-1-CC;*/
     /* MOVE FK0RW00.FK0RW-BUY-DD TO FK0RW00.FK0RW-ACT-1-DD;*/
     /* MOVE 00 TO FK0RW00.FK0RW-FORCST-7-YY;*/
     /* MOVE 20 TO FK0RW00.FK0RW-FORCST-7-CC;*/
     /* MOVE FK0RW00.FK0RW-BUY-DD TO FK0RW00.FK0RW-FORCST-7-DD;*/
   /* ELSE;*/
     /* MOVE FK0RW00.FK0RW-BUY-CC TO FK0RW00.FK0RW-ACT-1-CC;*/
     /* MOVE FK0RW00.FK0RW-BUY-CC TO FK0RW00.FK0RW-FORCST-7-CC;*/
     /* MOVE FK0RW00.FK0RW-BUY-DD TO FK0RW00.FK0RW-ACT-1-DD;*/
     /* MOVE FK0RW00.FK0RW-BUY-DD TO FK0RW00.FK0RW-FORCST-7-DD;*/
   /* END;*/
   /* END;*/
    /* ------------------------ Y2K OUT END ----------------------*/
  ;
    /* ------------------------ Y2K IN  BEGIN --------------------*/
  if (FK0RW00.FK0RW-BUY-MM >= 4
   && FK0RW00.FK0RW-BUY-MM <= 6)
    FK0RW00.FK0RW-ACT-1-CC = FK0RW00.FK0RW-BUY-CC;
    FK0RW00.FK0RW-FORCST-7-CC = FK0RW00.FK0RW-BUY-CC;
    FK0RW00.FK0RW-ACT-1-DD = FK0RW00.FK0RW-BUY-DD;
    FK0RW00.FK0RW-FORCST-7-DD = FK0RW00.FK0RW-BUY-DD;
  else
    FK0RW00.FK0RW-ACT-1-DD = FK0RW00.FK0RW-BUY-DD;
    FK0RW00.FK0RW-FORCST-7-DD = FK0RW00.FK0RW-BUY-DD;
  end
    /* ------------------------ Y2K IN  END ----------------------*/
  ;
  ;
  ;
  ;
  ;
  ;
   /* ----------------- END OF FK0R-1210 -----------------------------*/
end // end FK0R-1210

// Open cursor DCMPNT.VLRSTY01
Function FK0R-1300()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VLRSTY01 empty; /* Clear row storage area*/
  ;
  VLRSTY01.FBAMDNBR = FK0RM110.FBAMDNBR; /* LRPS number*/
  ;
  if (FK0RM110.FY1FCTYC == "X") /* Factory code*/
    VLRSTY01.FY1FCTYC = " ";
  else
    VLRSTY01.FY1FCTYC = FK0RM110.FY1FCTYC;
  end
  ;
  if (FK0RM110.XCTCD == "X") /* Country code*/
    VLRSTY01.XCTCD = " ";
  else
    VLRSTY01.XCTCD = FK0RM110.XCTCD;
  end
  ;
  FK0RW03.FK0RW-IO-TASK = "S1"; /* type of call*/
  FK0RW03.FK0RW-LOW-DATE = FK0RW00.FK0RW-ACT-1-DT;
  FK0RW03.FK0RW-HIGH-DATE = FK0RW00.FK0RW-FORCST-7-DT;
  ;
  try
    call "IO6170" (FK0RW03, SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-1300 ------------------------------*/
end // end FK0R-1300

// Fetch next row DCMPNT.VLRSTY01
Function FK0R-1400()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW03.FK0RW-IO-TASK = "N1";
  ;
  try
    call "IO6170" (FK0RW03, SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FK0RW00.FK0RW-LRPS-EOF-SW = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-1400 ------------------------------*/
end // end FK0R-1400

// Save key
Function FK0R-1410()
   /* -------------------------------------------------------------------*/
   /* Save key entered*/
   /* -------------------------------------------------------------------*/
  ;
  FK0RW01.FBAMDNBR = VLRSTY01.FBAMDNBR; /* LRPS number*/
  ;
  FK0RW01.XCTCD = FK0RM110.XCTCD; /* Country code*/
  ;
  FK0RW01.FY1FCTYC = FK0RM110.FY1FCTYC; /* Factory code*/
  ;
  FK0RW01.SY1STNBR = VLRSTY01.SY1STNBR;
  ;
  FK0RW01.SY2CLRID = VLRSTY01.SY2CLRID;
  ;
  FK0RW01.XDMCD = VLRSTY01.XDMCD;
  ;
  FK0RW00.FK0RW-BUY-DT = VLRSTY01.FB8BUYDT;
  ;
   /* ----------------- END OF FK0R-1410 ------------------------------*/
end // end FK0R-1410

// Save Quantities
Function FK0R-1420()
   /* ------------------------------------------------------------*/
   /* Save the quantities in their appropriate buckets.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-ACT-1-YYMM)
    FK0RW01.FK0RW-ACT-1-QTY = FK0RW01.FK0RW-ACT-1-QTY + VLRSTY01.FB8FTQTB;
  end
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-ACT-2-YYMM)
    FK0RW01.FK0RW-ACT-2-QTY = FK0RW01.FK0RW-ACT-2-QTY + VLRSTY01.FB8FTQTB;
  end
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-PRELIM-YYMM)
    FK0RW01.FK0RW-PRELIM-QTY = FK0RW01.FK0RW-PRELIM-QTY                             + VLRSTY01.FB8FTQTB;
  end
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-FORCST-1-YYMM)
    FK0RW01.FK0RW-FORCST-1-QTY = FK0RW01.FK0RW-FORCST-1-QTY                               + VLRSTY01.FB8FTQTB;
  end
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-FORCST-2-YYMM)
    FK0RW01.FK0RW-FORCST-2-QTY = FK0RW01.FK0RW-FORCST-2-QTY                               + VLRSTY01.FB8FTQTB;
  end
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-FORCST-3-YYMM)
    FK0RW01.FK0RW-FORCST-3-QTY = FK0RW01.FK0RW-FORCST-3-QTY                               + VLRSTY01.FB8FTQTB;
  end
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-FORCST-4-YYMM)
    FK0RW01.FK0RW-FORCST-4-QTY = FK0RW01.FK0RW-FORCST-4-QTY                               + VLRSTY01.FB8FTQTB;
  end
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-FORCST-5-YYMM)
    FK0RW01.FK0RW-FORCST-5-QTY = FK0RW01.FK0RW-FORCST-5-QTY                               + VLRSTY01.FB8FTQTB;
  end
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-FORCST-6-YYMM)
    FK0RW01.FK0RW-FORCST-6-QTY = FK0RW01.FK0RW-FORCST-6-QTY                               + VLRSTY01.FB8FTQTB;
  end
  ;
  if (FK0RW00.FK0RW-BUY-YYMM == FK0RW00.FK0RW-FORCST-7-YYMM)
    FK0RW01.FK0RW-FORCST-7-QTY = FK0RW01.FK0RW-FORCST-7-QTY                               + VLRSTY01.FB8FTQTB;
  end
  ;
   /* ----------------- END OF FK0R-1420 ------------------------------*/
end // end FK0R-1420

// Select set DPRODG.VSYCLR01
Function FK0R-1430()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* Clear row storage area*/
  ;
  PG2REC.XGPCD = "02"; /* Group code*/
  PG2REC.SY1STNBR = FK0RW01.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FK0RW01.SY2CLRID; /* Color id*/
  PG2REC.XDMCD = FK0RW01.XDMCD; /* Dimension code*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      FK0RW00.FK0RW-PG2REC-EOF-SW = "N";
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/
      ;
      FK0RW00.FK0RW-PG2REC-EOF-SW = "Y";
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1430"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FK0RW01.SY1STNBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-1430 ------------------------------*/
end // end FK0R-1430

// Select style (DPRODG.VSYDVL01)
Function FK0R-1440()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  PG4REC.PG4STNBR = FK0RW01.SY1STNBR; /* Style number*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      ;
      FK0RW00.FK0RW-PG4REC-EOF-SW = "Y";
      ;
      return;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1440"; /* Module identification*/
  ;
  FK0RW00.FK0RW-REQUEST-DATA-SW = "N"; /* Set data switch*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1440 GET COLOR DATA             ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FK0R"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FK0RW01.SY1STNBR; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0R-1440

// Save data in display storage
Function FK0R-1500()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW02.FBAMDNBR = FK0RW01.FBAMDNBR; /* LRPS number*/
  FK0RW02.XCTCD = FK0RW01.XCTCD; /* County code*/
  FK0RW02.FY1FCTYC = FK0RW01.FY1FCTYC; /* Factory code*/
  FK0RW02.FK0RW-ACT-1-YYMM = FK0RW00.FK0RW-ACT-1-YYMM;
  FK0RW02.FK0RW-ACT-2-YYMM = FK0RW00.FK0RW-ACT-2-YYMM;
  FK0RW02.FK0RW-PRELIM-YYMM = FK0RW00.FK0RW-PRELIM-YYMM;
  FK0RW02.FK0RW-FORCST-1-YYMM = FK0RW00.FK0RW-FORCST-1-YYMM;
  FK0RW02.FK0RW-FORCST-2-YYMM = FK0RW00.FK0RW-FORCST-2-YYMM;
  FK0RW02.FK0RW-FORCST-3-YYMM = FK0RW00.FK0RW-FORCST-3-YYMM;
  FK0RW02.FK0RW-FORCST-4-YYMM = FK0RW00.FK0RW-FORCST-4-YYMM;
  FK0RW02.FK0RW-FORCST-5-YYMM = FK0RW00.FK0RW-FORCST-5-YYMM;
  FK0RW02.FK0RW-FORCST-6-YYMM = FK0RW00.FK0RW-FORCST-6-YYMM;
  FK0RW02.FK0RW-FORCST-7-YYMM = FK0RW00.FK0RW-FORCST-7-YYMM;
  ;
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW02.SY1STNBR[FK0RW-IDX] = FK0RW01.SY1STNBR; /* Style number*/
  FK0RW02.SY2CLRID[FK0RW-IDX] = FK0RW01.SY2CLRID; /* Color number*/
  FK0RW02.XDMCD[FK0RW-IDX] = FK0RW01.XDMCD; /* Dimension*/
  ;
  if (FK0RW00.FK0RW-PG2REC-EOF-SW == "Y") /* Production not found*/
    ;
    if (FK0RW00.FK0RW-PG4REC-EOF-SW == "Y")
      FK0RW02.SY1SSTNM[FK0RW-IDX] = "NOT FOUND"; /* Short name*/
      FK0RW02.SY2CLRAB = " ";
    else
      FK0RW02.SY1SSTNM[FK0RW-IDX] = PG4REC.SY1SSTNM; /* Short name*/
      FK0RW02.SY2CLRAB = " ";
    end
    ;
  else
    ;
    FK0RW02.SY1SSTNM[FK0RW-IDX] = PG2REC.SY1SSTNM; /* Short name*/
    FK0RW02.SY2CLRAB[FK0RW-IDX] = PG2REC.SY2CLRAB; /* Color desc*/
    ;
  end
  ;
  FK0RW02.FK0RW-ACT-1-QTY[FK0RW-IDX] = FK0RW01.FK0RW-ACT-1-QTY;
  FK0RW02.FK0RW-ACT-2-QTY[FK0RW-IDX] = FK0RW01.FK0RW-ACT-2-QTY;
  FK0RW02.FK0RW-PRELIM-QTY[FK0RW-IDX] = FK0RW01.FK0RW-PRELIM-QTY;
  FK0RW02.FK0RW-FORCST-1-QTY[FK0RW-IDX] = FK0RW01.FK0RW-FORCST-1-QTY;
  FK0RW02.FK0RW-FORCST-2-QTY[FK0RW-IDX] = FK0RW01.FK0RW-FORCST-2-QTY;
  FK0RW02.FK0RW-FORCST-3-QTY[FK0RW-IDX] = FK0RW01.FK0RW-FORCST-3-QTY;
  FK0RW02.FK0RW-FORCST-4-QTY[FK0RW-IDX] = FK0RW01.FK0RW-FORCST-4-QTY;
  FK0RW02.FK0RW-FORCST-5-QTY[FK0RW-IDX] = FK0RW01.FK0RW-FORCST-5-QTY;
  FK0RW02.FK0RW-FORCST-6-QTY[FK0RW-IDX] = FK0RW01.FK0RW-FORCST-6-QTY;
  FK0RW02.FK0RW-FORCST-7-QTY[FK0RW-IDX] = FK0RW01.FK0RW-FORCST-7-QTY;
  ;
  FK0RW00.FK0RW-IDX = FK0RW00.FK0RW-IDX + 1; /* Increment line index*/
  ;
   /* ----------------- END OF FK0R-1500 -----------------------------*/
end // end FK0R-1500

// Add page to temporary storage
Function FK0R-1600()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW02.XXXTSLEN = FK0RW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FK0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FK0RW02 empty; /* M001 display storage*/
    ;
    FK0RW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-1600 ------------------------------*/
end // end FK0R-1600

// Close cursor DCMPNT.VLRSTY01
Function FK0R-1700()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW03.FK0RW-IO-TASK = "C1";
  ;
  try
    call "IO6170" (FK0RW03, SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-1700 -----------------------------*/
end // end FK0R-1700

// Format and converse map
Function FK0R-2000()
   /* -------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display*/
   /* -------------------------------------------------------------*/
  ;
  if (FK0RW00.FK0RW-REQUEST-DATA-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0)   /* or no error found*/
    ;
    if (FK0RW00.FK0RW-FORMAT-MAP-SW == "Y") /* Map must be formatted*/
      FK0R-2100(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Protect select fields where no data is present.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RM110.SY1STNBR[1] <= " ")
    set FK0RM110.FK0RM-DATE-1 invisible, skip;
    set FK0RM110.FK0RM-DATE-2 invisible, skip;
    set FK0RM110.FK0RM-DATE-3 invisible, skip;
    set FK0RM110.FK0RM-DATE-4 invisible, skip;
    set FK0RM110.FK0RM-DATE-5 invisible, skip;
    set FK0RM110.FK0RM-DATE-1-DESC invisible, skip;
    set FK0RM110.FK0RM-DATE-2-DESC invisible, skip;
    set FK0RM110.FK0RM-DATE-3-DESC invisible, skip;
    set FK0RM110.FK0RM-DATE-4-DESC invisible, skip;
    set FK0RM110.FK0RM-DATE-5-DESC invisible, skip;
  end
  ;
  FK0RW00.FK0RW-IDX = 1; /* Initialize line index*/
  ;
  while (FK0RW00.FK0RW-IDX <= 15) /* Until screen is processed*/
    ;
    if (FK0RW02.SY1STNBR[FK0RW-IDX] <= " ")
      set FK0RM110.SY1STNBR[FK0RW-IDX] invisible, skip;
      set FK0RM110.SY2CLRID[FK0RW-IDX] invisible, skip;
      set FK0RM110.XDMCD[FK0RW-IDX] invisible, skip;
      set FK0RM110.SY1SSTNM[FK0RW-IDX] invisible, skip;
      set FK0RM110.SY2CLRAB[FK0RW-IDX] invisible, skip;
      set FK0RM110.FK0RM-QTY-1[FK0RW-IDX] invisible, skip;
      set FK0RM110.FK0RM-QTY-2[FK0RW-IDX] invisible, skip;
      set FK0RM110.FK0RM-QTY-3[FK0RW-IDX] invisible, skip;
      set FK0RM110.FK0RM-QTY-4[FK0RW-IDX] invisible, skip;
      set FK0RM110.FK0RM-QTY-5[FK0RW-IDX] invisible, skip;
    end
    ;
    FK0RW00.FK0RW-IDX = FK0RW00.FK0RW-IDX + 1; /* Increment line index*/
    ;
  end
  ;
   /* -------------------------------------------------------------*/
   /* If an error was found, save the error message number*/
   /* -------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    set FK0RM110.FBAMDNBR cursor; /* Set cursor on LRPS number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0RM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0RM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0RM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0RM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/
    ;
    set FK0RM110 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0)
    if (FK0RM110.FBAMDNBR == 0) /* Model number missing*/
      set FK0RM110.FBAMDNBR cursor;
    else
      if (FK0RM110.XCTCD == " ") /* Country missing*/
        set FK0RM110.XCTCD cursor;
      else
        if (FK0RM110.FY1FCTYC == " ") /* Factory missing*/
          set FK0RM110.FY1FCTYC cursor;
        else
          set FK0RM110.XCTCD cursor; /* Default to country*/
        end
      end
    end
  end
  ;
  ;
  converse FK0RM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0RM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0RM110.CAITEM; /* Application data*/
  ;
   /* ---------------- End of FK0R-2000 --------------------------*/
end // end FK0R-2000

// Format the display data
Function FK0R-2100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0RM110 initial; /* M110 input/output area*/
  ;
  FK0RW00.FK0RW-FORMAT-MAP-SW = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FK0RW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (FK0RW00.FK0RW-UPDATE-SW == "Y") /* Current page was changed*/
        ;
        FK0RS-01(); /* Update temporary storage page*/
        ;
        FK0RW00.FK0RW-UPDATE-SW = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FK0RW00.XXXTSPAG > FK0RW00.TA5TSQIX) /* Desired greater highest*/
        FK0RW00.XXXTSPAG = FK0RW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FK0RS-02(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FK0RM110.XXXLITPG skip; /* "PAGE" literal*/
    FK0RM110.XXXTSPAG = FK0RW00.XXXTSPAG; /* Current page*/
    set FK0RM110.XXXLITOF skip; /* "OF" literal*/
    FK0RM110.TA5TSQIX = FK0RW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RW02.FBAMDNBR <= 0) /* LRPS number not present*/
    set FK0RM110.FBAMDNBR cursor; /* Position cursor*/
  end
  ;
  FK0RM110.FBAMDNBR = FK0RW02.FBAMDNBR; /* LRPS number*/
  FK0RM110.XCTCD = FK0RW02.XCTCD; /* Country code*/
  FK0RM110.FY1FCTYC = FK0RW02.FY1FCTYC; /* Factory code*/
  ;
  FK0RW00.FK0RW-IDX = 1; /* Initialize line index*/
  ;
  while (FK0RW00.FK0RW-IDX <= 15) /* Until screen is full*/
    ;
    FK0RM110.SY1STNBR[FK0RW-IDX] = FK0RW02.SY1STNBR[FK0RW-IDX];
    FK0RM110.SY2CLRID[FK0RW-IDX] = FK0RW02.SY2CLRID[FK0RW-IDX];
    FK0RM110.XDMCD[FK0RW-IDX] = FK0RW02.XDMCD[FK0RW-IDX];
    FK0RM110.SY1SSTNM[FK0RW-IDX] = FK0RW02.SY1SSTNM[FK0RW-IDX];
    FK0RM110.SY2CLRAB[FK0RW-IDX] = FK0RW02.SY2CLRAB[FK0RW-IDX];
    ;
    if (FK0RW00.FK0RW-DISPLAY-LEFT-SW == "Y"
    )
      FK0RM110.FK0RM-DATE-1-DESC = "ACTUAL";
      FK0RM110.FK0RM-DATE-2-DESC = "ACTUAL";
      FK0RM110.FK0RM-DATE-3-DESC = "PRELIM";
      FK0RM110.FK0RM-DATE-4-DESC = "FORCST";
      FK0RM110.FK0RM-DATE-5-DESC = "FORCST";
      FK0RM110.FK0RM-DATE-1 = FK0RW02.FK0RW-ACT-1-YYMM;
      FK0RM110.FK0RM-DATE-2 = FK0RW02.FK0RW-ACT-2-YYMM;
      FK0RM110.FK0RM-DATE-3 = FK0RW02.FK0RW-PRELIM-YYMM;
      FK0RM110.FK0RM-DATE-4 = FK0RW02.FK0RW-FORCST-1-YYMM;
      FK0RM110.FK0RM-DATE-5 = FK0RW02.FK0RW-FORCST-2-YYMM;
      FK0RM110.FK0RM-QTY-1[FK0RW-IDX] = FK0RW02.FK0RW-ACT-1-QTY[FK0RW-IDX];
      FK0RM110.FK0RM-QTY-2[FK0RW-IDX] = FK0RW02.FK0RW-ACT-2-QTY[FK0RW-IDX];
      FK0RM110.FK0RM-QTY-3[FK0RW-IDX] = FK0RW02.FK0RW-PRELIM-QTY[FK0RW-IDX];
      FK0RM110.FK0RM-QTY-4[FK0RW-IDX] = FK0RW02.FK0RW-FORCST-1-QTY[FK0RW-IDX];
      FK0RM110.FK0RM-QTY-5[FK0RW-IDX] = FK0RW02.FK0RW-FORCST-2-QTY[FK0RW-IDX];
      ;
    else
      ;
      FK0RM110.FK0RM-DATE-1-DESC = "FORCST";
      FK0RM110.FK0RM-DATE-2-DESC = "FORCST";
      FK0RM110.FK0RM-DATE-3-DESC = "FORCST";
      FK0RM110.FK0RM-DATE-4-DESC = "FORCST";
      FK0RM110.FK0RM-DATE-5-DESC = "FORCST";
      FK0RM110.FK0RM-DATE-1 = FK0RW02.FK0RW-FORCST-3-YYMM;
      FK0RM110.FK0RM-DATE-2 = FK0RW02.FK0RW-FORCST-4-YYMM;
      FK0RM110.FK0RM-DATE-3 = FK0RW02.FK0RW-FORCST-5-YYMM;
      FK0RM110.FK0RM-DATE-4 = FK0RW02.FK0RW-FORCST-6-YYMM;
      FK0RM110.FK0RM-DATE-5 = FK0RW02.FK0RW-FORCST-7-YYMM;
      FK0RM110.FK0RM-QTY-1[FK0RW-IDX] = FK0RW02.FK0RW-FORCST-3-QTY[FK0RW-IDX];
      FK0RM110.FK0RM-QTY-2[FK0RW-IDX] = FK0RW02.FK0RW-FORCST-4-QTY[FK0RW-IDX];
      FK0RM110.FK0RM-QTY-3[FK0RW-IDX] = FK0RW02.FK0RW-FORCST-5-QTY[FK0RW-IDX];
      FK0RM110.FK0RM-QTY-4[FK0RW-IDX] = FK0RW02.FK0RW-FORCST-6-QTY[FK0RW-IDX];
      FK0RM110.FK0RM-QTY-5[FK0RW-IDX] = FK0RW02.FK0RW-FORCST-7-QTY[FK0RW-IDX];
      ;
    end
    ;
    FK0RW00.FK0RW-IDX = FK0RW00.FK0RW-IDX + 1; /* Increment line index*/
    ;
  end
  ;
   /* ----------------- END OF FK0R-2100 --------------------------*/
end // end FK0R-2100

// Check attention identifier
Function FK0R-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FK0RW00.FK0RW-REQUEST-DATA-SW == "Y") /* Request for data*/
      set FK0RW01 empty; /* M110 display storage*/
    end
    ;
    FK0RW00.FK0RW-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    FK0RW00.FK0RW-REQUEST-DATA-SW = "N"; /* Request for data switch*/
    ;
    set FKWREC empty;
    ;
    FKWREC.FBAMDNBR = FK0RM110.FBAMDNBR; /* LRPS number*/
    FKWREC.XCTCD = FK0RM110.XCTCD; /* Country code*/
    FKWREC.FY1FCTYC = FK0RM110.FY1FCTYC; /* Factory code*/
    ;
    COMMAREA.CATOAP = "FK0R"; /* to applicaiton*/
    COMMAREA.CAITEM = "    "; /* item*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FK0R-1100(); /* Purge temporary storage*/
      ;
      set FKWREC empty;
      ;
      FKWREC.FBAMDNBR = FK0RM110.FBAMDNBR; /* LRPS number*/
      FKWREC.XCTCD = FK0RM110.XCTCD; /* Country code*/
      FKWREC.FY1FCTYC = FK0RM110.FY1FCTYC; /* Factory code*/
      ;
      COMMAREA.CATOAP = FK0RM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0RM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0RM110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* EXIT requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf16 /* FK0T requested*/
   || converseVar.eventKey is pf17) /* FK0V requested*/
    ;
    set FKWREC empty;
    ;
    FKWREC.FBAMDNBR = FK0RM110.FBAMDNBR; /* LRPS number*/
    FKWREC.XCTCD = FK0RM110.XCTCD; /* Country code*/
    FKWREC.FY1FCTYC = FK0RM110.FY1FCTYC; /* Factory code*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0RM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0O"; /* TO application*/
      COMMAREA.CAITEM = FK0RM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK0RM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0T"; /* TO application*/
      COMMAREA.CAITEM = FK0RM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK0V"; /* TO application*/
      COMMAREA.CAITEM = FK0RM110.CAITEM; /* item*/
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 pressed*/
   && converseVar.eventKey not pf8   /* PF8 pressed*/
   && converseVar.eventKey not pf10  /* PF7 pressed*/
   && converseVar.eventKey not pf11) /* PF8 pressed*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ---------------- End of FK0R-3000 ---------------------------------*/
end // end FK0R-3000

// Reset highlighted fields
Function FK0R-4000()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0RM110.FBAMDNBR initialAttributes; /* LRPS number*/
  set FK0RM110.XCTCD initialAttributes; /* Factory code*/
  set FK0RM110.FY1FCTYC initialAttributes; /* Factory code*/
  ;
  set FK0RM110.FK0RM-DATE-1-DESC initialAttributes; /* Date 1 description*/
  set FK0RM110.FK0RM-DATE-2-DESC initialAttributes; /* Date 2 description*/
  set FK0RM110.FK0RM-DATE-3-DESC initialAttributes; /* Date 3 description*/
  set FK0RM110.FK0RM-DATE-4-DESC initialAttributes; /* Date 4 description*/
  set FK0RM110.FK0RM-DATE-5-DESC initialAttributes; /* Date 5 description*/
  ;
  set FK0RM110.FK0RM-DATE-1 initialAttributes; /* Date 1*/
  set FK0RM110.FK0RM-DATE-2 initialAttributes; /* Date 2*/
  set FK0RM110.FK0RM-DATE-3 initialAttributes; /* Date 3*/
  set FK0RM110.FK0RM-DATE-4 initialAttributes; /* Date 4*/
  set FK0RM110.FK0RM-DATE-5 initialAttributes; /* Date 5*/
  ;
  ;
  FK0RW00.FK0RW-IDX = 1; /* Initialize line index*/
  ;
  set FK0RM110.CATOAP initialAttributes; /* TO application*/
  set FK0RM110.CAITEM initialAttributes; /* Application data*/
  ;
   /* ---------------------------------------------------------------------*/
   /* If no country list was not requested, return to the previous process*/
   /* ---------------------------------------------------------------------*/
  ;
  if (FK0RM110.XCTCD == "?") /* Country code requested*/
    ;
    if (converseVar.eventKey not enter) /* Enter not pressed*/
      FKWREC.XXX-MOD-ID = "4000"; /* Module id*/
      converseLib.validationFailed(19); /* PA/PF key may not be used*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    return;
    ;
  end
  ;
   /* ---------------------------------------------------------------------*/
   /* If country list requested, display the list of xct codes.*/
   /* ---------------------------------------------------------------------*/
  ;
  if (FK0RM110.XCTCD == "?") /* xct list requested*/
    ;
    XPXX001(); /* Window initialization*/
    ;
    XX0XW02.XX0XWHDR = " COUNTRY "; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of display*/
      XPXCT01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FK0RM110.XCTCD = " "; /* Restore prior code*/
    else
      FK0RM110.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
    end
    ;
    set FK0RM110.XCTCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ---------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER must*/
   /* BE PRESSED TO PROCESS ANY CHANGES.*/
   /* ---------------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FKWREC.XXX-MOD-ID = "4000"; /* Module id*/
  converseLib.validationFailed(20); /* Corporate list displayed*/
  ;
  exit stack;
  ;
   /* ----------------- END OF FK0R-4000 ----------------------------*/
end // end FK0R-4000

// Verify data that was entered
Function FK0R-5000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RM110.CAITEM > " ") /* Application data was entered*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    set FK0RM110.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FK0R-5100(); /* Verify scroll request*/
    ;
  end
  ;
   /* --------------------------------------------------------*/
   /* Verify Country code entered*/
   /* ------------------------------------------------------------*/
  ;
  FK0R-5200();
  ;
   /* --------------------------------------------------------*/
   /* Verify Factory code entered*/
   /* ------------------------------------------------------------*/
  ;
  FK0R-5300();
  ;
   /* --------------------------------------------------------*/
   /* Otherwise, verify that a factory number was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   && FK0RM110.FBAMDNBR <= 0)
    converseLib.validationFailed(8); /* LRPS number must be entered*/
    FKWREC.XXX-MOD-ID = 5000; /* Module id*/
    set FK0RM110.FBAMDNBR cursor, bold;
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ----------------- END OF FK0R-5000 ----------------------------*/
end // end FK0R-5000

// Verify scroll request
Function FK0R-5100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK0RW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK0RW00.XXXTSPAG >= FK0RW00.TA5TSQIX) /* and no more pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  if (converseVar.eventKey is pf10 /* Scroll left requested*/
   && FK0RW00.FK0RW-DISPLAY-LEFT-SW == "Y")
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(74); /* No more pages to display*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11 /* Scroll left requested*/
   && FK0RW00.FK0RW-DISPLAY-LEFT-SW == "N")
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(75); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RM110.FBAMDNBR != FK0RW02.FBAMDNBR /* LRPS number changed*/
   || FK0RM110.XCTCD != FK0RW02.XCTCD       /* Country code changed*/
   || FK0RM110.FY1FCTYC != FK0RW02.FY1FCTYC) /* Factory code changed*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    set FK0RM110.FBAMDNBR cursor, bold; /* Highlight*/
    set FK0RM110.XCTCD bold; /* Highlight*/
    set FK0RM110.FY1FCTYC bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
   /* ----------------- END OF FK0R-5100 --------------------------*/
end // end FK0R-5100

// Search XCTTBL for country code
Function FK0R-5200()
   /* ------------------------------------------------------------*/
   /* Check to see is country code was entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RM110.XCTCD <= " ")
    set FK0RM110.XCTCD bold, cursor;
    FKWREC.XXX-MOD-ID = "5200";
    converseLib.validationFailed(8);
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Read CSP Corporate table for country code validation*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RM110.XCTCD == "X")
    ;
     /* next sentence*/
    ;
  else
    if (FK0RM110.XCTCD in XCTTBL.XCTCD)
      ;
      if (XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
        ;
        return;
        ;
      end
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "5200"; /* Module id*/
      set FK0RM110.XCTCD cursor, bold;
      converseLib.validationFailed(8); /* Required field not found*/
      ;
    end
    ;
  end
  ;
   /* ----------------- END OF FK0R-5200 ------------------------------*/
end // end FK0R-5200

// Select set DFCTY.VFCTY001
Function FK0R-5300()
   /* ------------------------------------------------------------*/
   /* Check to see if the factory code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RM110.FY1FCTYC <= " ") /* Factory code not entered*/
    converseLib.validationFailed(8); /* Required field missing or invalid*/
    set FK0RM110.FY1FCTYC bold, cursor;
    FKWREC.XXX-MOD-ID = "5300";
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check to see if the factory code entered is found in corporate*/
   /* table.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RM110.FY1FCTYC == "X") /* Select blank factory*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FK0R-5310();
    ;
  end
  ;
   /* ----------------- END OF FK0R-5300 ------------------------------*/
end // end FK0R-5300

// Select set DFCTY.VFCTY001
Function FK0R-5310()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FY1REC empty; /* Clear row storage area*/
  ;
  FY1REC.FY1FCTYC = FK0RM110.FY1FCTYC; /* Factory code*/
  FY1REC.XGPCD = "02"; /* Group code*/
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of file reached*/
      ;
      converseLib.validationFailed(8); /* Required field missing or invalid*/
      set FK0RM110.FY1FCTYC bold, cursor;
      FKWREC.XXX-MOD-ID = "5310";
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5310"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FK0RM110.FY1FCTYC; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-5310 ------------------------------*/
end // end FK0R-5310

// Process valid input request
Function FK0R-6000()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW00.FK0RW-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/
  ;
  set FKWREC empty;
  ;
  FKWREC.FBAMDNBR = FK0RM110.FBAMDNBR; /* LRPS number*/
  FKWREC.XCTCD = FK0RM110.XCTCD; /* Country code*/
  FKWREC.FY1FCTYC = FK0RM110.FY1FCTYC; /* Factory code*/
  ;
   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0RM110.FBAMDNBR != FK0RW01.FBAMDNBR /* LRPS number changed*/
   || FK0RM110.XCTCD != FK0RW01.XCTCD       /* Country code changed*/
   || FK0RM110.FY1FCTYC != FK0RW01.FY1FCTYC) /* Factory code changed*/
    ;
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (FK0RM110.FBAMDNBR > 0) /* LRPS number was entered*/
      ;
      FK0RW00.FK0RW-REQUEST-DATA-SW = "Y";
    else
      ;
      FK0RW00.FK0RW-REQUEST-DATA-SW = "N";
      ;
      FK0R-1100(); /* Purge any temporary storage*/
    end
    ;
    FK0RW00.FK0RW-DISPLAY-LEFT-SW = "Y"; /* Display the left screen*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FK0RW00.XXXTSPAG = FK0RW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FK0RW00.XXXTSPAG = FK0RW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll left was requested, specify left page to display*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FK0RW00.FK0RW-DISPLAY-LEFT-SW = "Y";
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll right was requested, specify right page to display*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll left requested*/
    ;
    FK0RW00.FK0RW-DISPLAY-LEFT-SW = "N";
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FK0R-6000

// Update temporary storage page
Function FK0RS-01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FK0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-S01 -----------------------------*/
end // end FK0RS-01

// Read temporary storage page
Function FK0RS-02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0RW02.XXXTSLEN = FK0RW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FK0RW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FK0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ----------------- END OF FK0R-S02 ------------------------------*/
end // end FK0RS-02

//*** RECORD=FK0RW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0RW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FK0RW-IDX FK0RW-IDX ; 
  10 FK0RW-LRPS-EOF-SW FK0RW-LRPS-EOF-SW ; 
  10 FK0RW-PG2REC-EOF-SW FK0RW-PG2REC-EOF-SW ; 
  10 FK0RW-PG4REC-EOF-SW FK0RW-PG4REC-EOF-SW ; 
  10 FK0RW-REQUEST-DATA-SW FK0RW-REQUEST-DATA-SW ; 
  10 FK0RW-FORMAT-MAP-SW FK0RW-FORMAT-MAP-SW ; 
  10 FK0RW-DISPLAY-LEFT-SW FK0RW-DISPLAY-LEFT-SW ; 
  10 FK0RW-UPDATE-SW FK0RW-UPDATE-SW ; 
  10 FK0RW-BUY-DT FK0RW-BUY-DT ; 
    15 * num(1) ; // filler
    15 FK0RW-BUY-CC FK0RW-BUY-CC ; 
    15 FK0RW-BUY-YYMM FK0RW-BUY-YYMM ; 
      20 FK0RW-BUY-YY FK0RW-BUY-YY ; 
      20 FK0RW-BUY-MM FK0RW-BUY-MM ; 
    15 FK0RW-BUY-DD FK0RW-BUY-DD ; 
  10 FK0RW-BUY-DTY2K FK0RW-BUY-DTY2K ; 
    15 FK0RW-BUY-CYMY2K FK0RW-BUY-CYMY2K ; 
      20 FK0RW-BUY-CCYY FK0RW-BUY-CCYY ; 
        25 FK0RW-BUY-CCY2K FK0RW-BUY-CCY2K ; 
        25 FK0RW-BUY-YYY2K FK0RW-BUY-YYY2K ; 
      20 FK0RW-BUY-MMY2K FK0RW-BUY-MMY2K ; 
    15 FK0RW-BUY-DDY2K FK0RW-BUY-DDY2K ; 
  10 FK0RW-ACT-1-DT FK0RW-ACT-1-DT ; 
    15 FK0RW-ACT-1-CC FK0RW-ACT-1-CC ; 
    15 FK0RW-ACT-1-YYMM FK0RW-ACT-1-YYMM ; 
      20 FK0RW-ACT-1-YY FK0RW-ACT-1-YY ; 
      20 FK0RW-ACT-1-MM FK0RW-ACT-1-MM ; 
    15 FK0RW-ACT-1-DD FK0RW-ACT-1-DD ; 
  10 FK0RW-ACT-2-YYMM FK0RW-ACT-2-YYMM ; 
    15 FK0RW-ACT-2-YY FK0RW-ACT-2-YY ; 
    15 FK0RW-ACT-2-MM FK0RW-ACT-2-MM ; 
  10 FK0RW-PRELIM-YYMM FK0RW-PRELIM-YYMM ; 
    15 FK0RW-PRELIM-YY FK0RW-PRELIM-YY ; 
    15 FK0RW-PRELIM-MM FK0RW-PRELIM-MM ; 
  10 FK0RW-FORCST-1-YYMM FK0RW-FORCST-1-YYMM ; 
    15 FK0RW-FORCST-1-YY FK0RW-FORCST-1-YY ; 
    15 FK0RW-FORCST-1-MM FK0RW-FORCST-1-MM ; 
  10 FK0RW-FORCST-2-YYMM FK0RW-FORCST-2-YYMM ; 
    15 FK0RW-FORCST-2-YY FK0RW-FORCST-2-YY ; 
    15 FK0RW-FORCST-2-MM FK0RW-FORCST-2-MM ; 
  10 FK0RW-FORCST-3-YYMM FK0RW-FORCST-3-YYMM ; 
    15 FK0RW-FORCST-3-YY FK0RW-FORCST-3-YY ; 
    15 FK0RW-FORCST-3-MM FK0RW-FORCST-3-MM ; 
  10 FK0RW-FORCST-4-YYMM FK0RW-FORCST-4-YYMM ; 
    15 FK0RW-FORCST-4-YY FK0RW-FORCST-4-YY ; 
    15 FK0RW-FORCST-4-MM FK0RW-FORCST-4-MM ; 
  10 FK0RW-FORCST-5-YYMM FK0RW-FORCST-5-YYMM ; 
    15 FK0RW-FORCST-5-YY FK0RW-FORCST-5-YY ; 
    15 FK0RW-FORCST-5-MM FK0RW-FORCST-5-MM ; 
  10 FK0RW-FORCST-6-YYMM FK0RW-FORCST-6-YYMM ; 
    15 FK0RW-FORCST-6-YY FK0RW-FORCST-6-YY ; 
    15 FK0RW-FORCST-6-MM FK0RW-FORCST-6-MM ; 
  10 FK0RW-FORCST-7-DT FK0RW-FORCST-7-DT ; 
    15 FK0RW-FORCST-7-CC FK0RW-FORCST-7-CC ; 
    15 FK0RW-FORCST-7-YYMM FK0RW-FORCST-7-YYMM ; 
      20 FK0RW-FORCST-7-YY FK0RW-FORCST-7-YY ; 
      20 FK0RW-FORCST-7-MM FK0RW-FORCST-7-MM ; 
    15 FK0RW-FORCST-7-DD FK0RW-FORCST-7-DD ; 
end // end FK0RW00

//*** RECORD=FK0RW01 ****
// ---------------------------------------------------------
// Hold display storage record.
// ---------------------------------------------------------
// ***********************
Record FK0RW01 type basicRecord
  5 * char(82) ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 XCTCD XCTCD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 FK0RW-ACT-1-QTY FK0RW-ACT-1-QTY ; 
    10 FK0RW-ACT-2-QTY FK0RW-ACT-2-QTY ; 
    10 FK0RW-PRELIM-QTY FK0RW-PRELIM-QTY ; 
    10 FK0RW-FORCST-1-QTY FK0RW-FORCST-1-QTY ; 
    10 FK0RW-FORCST-2-QTY FK0RW-FORCST-2-QTY ; 
    10 FK0RW-FORCST-3-QTY FK0RW-FORCST-3-QTY ; 
    10 FK0RW-FORCST-4-QTY FK0RW-FORCST-4-QTY ; 
    10 FK0RW-FORCST-5-QTY FK0RW-FORCST-5-QTY ; 
    10 FK0RW-FORCST-6-QTY FK0RW-FORCST-6-QTY ; 
    10 FK0RW-FORCST-7-QTY FK0RW-FORCST-7-QTY ; 
end // end FK0RW01

//*** RECORD=FK0RW02 ****
// ------------------------
// Map 110 display storage.
// ------------------------
// ***********************
Record FK0RW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1499) ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 XCTCD XCTCD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 FK0RW-ACT-1-DT FK0RW-ACT-1-DT ; 
      15 FK0RW-ACT-1-CC FK0RW-ACT-1-CC ; 
      15 FK0RW-ACT-1-YYMM FK0RW-ACT-1-YYMM ; 
        20 FK0RW-ACT-1-YY FK0RW-ACT-1-YY ; 
        20 FK0RW-ACT-1-MM FK0RW-ACT-1-MM ; 
      15 FK0RW-ACT-1-DD FK0RW-ACT-1-DD ; 
    10 FK0RW-ACT-2-YYMM FK0RW-ACT-2-YYMM ; 
      15 FK0RW-ACT-2-YY FK0RW-ACT-2-YY ; 
      15 FK0RW-ACT-2-MM FK0RW-ACT-2-MM ; 
    10 FK0RW-PRELIM-YYMM FK0RW-PRELIM-YYMM ; 
      15 FK0RW-PRELIM-YY FK0RW-PRELIM-YY ; 
      15 FK0RW-PRELIM-MM FK0RW-PRELIM-MM ; 
    10 FK0RW-FORCST-1-YYMM FK0RW-FORCST-1-YYMM ; 
      15 FK0RW-FORCST-1-YY FK0RW-FORCST-1-YY ; 
      15 FK0RW-FORCST-1-MM FK0RW-FORCST-1-MM ; 
    10 FK0RW-FORCST-2-YYMM FK0RW-FORCST-2-YYMM ; 
      15 FK0RW-FORCST-2-YY FK0RW-FORCST-2-YY ; 
      15 FK0RW-FORCST-2-MM FK0RW-FORCST-2-MM ; 
    10 FK0RW-FORCST-3-YYMM FK0RW-FORCST-3-YYMM ; 
      15 FK0RW-FORCST-3-YY FK0RW-FORCST-3-YY ; 
      15 FK0RW-FORCST-3-MM FK0RW-FORCST-3-MM ; 
    10 FK0RW-FORCST-4-YYMM FK0RW-FORCST-4-YYMM ; 
      15 FK0RW-FORCST-4-YY FK0RW-FORCST-4-YY ; 
      15 FK0RW-FORCST-4-MM FK0RW-FORCST-4-MM ; 
    10 FK0RW-FORCST-5-YYMM FK0RW-FORCST-5-YYMM ; 
      15 FK0RW-FORCST-5-YY FK0RW-FORCST-5-YY ; 
      15 FK0RW-FORCST-5-MM FK0RW-FORCST-5-MM ; 
    10 FK0RW-FORCST-6-YYMM FK0RW-FORCST-6-YYMM ; 
      15 FK0RW-FORCST-6-YY FK0RW-FORCST-6-YY ; 
      15 FK0RW-FORCST-6-MM FK0RW-FORCST-6-MM ; 
    10 FK0RW-FORCST-7-DT FK0RW-FORCST-7-DT ; 
      15 FK0RW-FORCST-7-CC FK0RW-FORCST-7-CC ; 
      15 FK0RW-FORCST-7-YYMM FK0RW-FORCST-7-YYMM ; 
        20 FK0RW-FORCST-7-YY FK0RW-FORCST-7-YY ; 
        20 FK0RW-FORCST-7-MM FK0RW-FORCST-7-MM ; 
      15 FK0RW-FORCST-7-DD FK0RW-FORCST-7-DD ; 
    10 SY1STNBR SY1STNBR [15] ; 
    10 SY2CLRID SY2CLRID [15] ; 
    10 XDMCD XDMCD [15] ; 
    10 SY1SSTNM SY1SSTNM [15] ; 
    10 SY2CLRAB SY2CLRAB [15] ; 
    10 FK0RW-ACT-1-QTY FK0RW-ACT-1-QTY [15] ; 
    10 FK0RW-ACT-2-QTY FK0RW-ACT-2-QTY [15] ; 
    10 FK0RW-PRELIM-QTY FK0RW-PRELIM-QTY [15] ; 
    10 FK0RW-FORCST-1-QTY FK0RW-FORCST-1-QTY [15] ; 
    10 FK0RW-FORCST-2-QTY FK0RW-FORCST-2-QTY [15] ; 
    10 FK0RW-FORCST-3-QTY FK0RW-FORCST-3-QTY [15] ; 
    10 FK0RW-FORCST-4-QTY FK0RW-FORCST-4-QTY [15] ; 
    10 FK0RW-FORCST-5-QTY FK0RW-FORCST-5-QTY [15] ; 
    10 FK0RW-FORCST-6-QTY FK0RW-FORCST-6-QTY [15] ; 
    10 FK0RW-FORCST-7-QTY FK0RW-FORCST-7-QTY [15] ; 
end // end FK0RW02

//*** RECORD=FK0RW03 ****
// ------------------------------
// Parameters for DCMPNT.VLRSTY01
// ------------------------------
// ***********************
Record FK0RW03 type basicRecord
  10 FK0RW-IO-TASK FK0RW-IO-TASK ; 
  10 FK0RW-LOW-DATE FK0RW-LOW-DATE ; 
  10 FK0RW-HIGH-DATE FK0RW-HIGH-DATE ; 
end // end FK0RW03

DataItem FK0RW-ACT-1-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-ACT-1-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// actual 1 date
DataItem FK0RW-ACT-1-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-ACT-1-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// actual 1 quantity
DataItem FK0RW-ACT-1-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-ACT-1-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-ACT-1-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-ACT-2-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// actual 2 quantity
DataItem FK0RW-ACT-2-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-ACT-2-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Actual 2 date year/month
DataItem FK0RW-ACT-2-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy century
DataItem FK0RW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy century - y2k
DataItem FK0RW-BUY-CCY2K num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy ccyy - y2k
DataItem FK0RW-BUY-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy ccyymm - y2k
DataItem FK0RW-BUY-CYMY2K num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy day
DataItem FK0RW-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy day - y2k
DataItem FK0RW-BUY-DDY2K num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FB_BUY_DT
DataItem FK0RW-BUY-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FB_BUY_DT - y2k
DataItem FK0RW-BUY-DTY2K num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FK0RW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month - y2k
DataItem FK0RW-BUY-MMY2K num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem FK0RW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year and month
DataItem FK0RW-BUY-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year - y2k
DataItem FK0RW-BUY-YYY2K num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Right and left map switch
DataItem FK0RW-DISPLAY-LEFT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FK0RW-FORCST-1-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forcast quantity
DataItem FK0RW-FORCST-1-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-1-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forecast year/month
DataItem FK0RW-FORCST-1-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-2-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forcast quantity
DataItem FK0RW-FORCST-2-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-2-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-2-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-3-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forcast quantity
DataItem FK0RW-FORCST-3-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-3-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-3-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-4-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forcast quantity
DataItem FK0RW-FORCST-4-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-4-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-4-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-5-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forcast quantity
DataItem FK0RW-FORCST-5-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-5-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-5-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-6-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forcast quantity
DataItem FK0RW-FORCST-6-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-6-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-6-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-7-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-7-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-7-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-7-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forcast quantity
DataItem FK0RW-FORCST-7-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-7-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FK0RW-FORCST-7-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FK0RW-FORMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forcast 7 date
DataItem FK0RW-HIGH-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem FK0RW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// iomod selection
DataItem FK0RW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual 1 date
DataItem FK0RW-LOW-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem FK0RW-LRPS-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FK0RW-PG2REC-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FK0RW-PG4REC-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FK0RW-PRELIM-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// preliminary quantity
DataItem FK0RW-PRELIM-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// preliminary
DataItem FK0RW-PRELIM-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// preliminary
DataItem FK0RW-PRELIM-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed switch
DataItem FK0RW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FK0RW-UPDATE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

