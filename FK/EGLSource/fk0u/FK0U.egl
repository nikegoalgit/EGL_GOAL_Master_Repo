package fk0u;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFK001;
import corpcom3.XPTA0P;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx2.XURDEST;
import fb.common.FB9REC;
import fk.common.*;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VLRPSH01;
import vv.common.VVNDR001;
//*** PROGRAM=FK0U ****
// THIS APPLICATION IS PART OF THE COMPONENTS FORECASTING
// SYSTEM.
// 
// THIS APPLICATION PROVIDES THE CAPABLILITY OF SUBMITTING
// BATCH APPLICATIONS TO CREATE LRPS/PRELIM REPORTS.  USERS
// WILL FIRST SPECIFY AN OUTPUT DESTINATION, THEN WILL BE
// ALLOWED TO SUBMIT ONE OR MORE REPORTS FROM THE DISPLAYED
// OPTIONS.
// 
// A POPUP WINDOW WILL BE PROVIDED FOR THE COUNTRY CODE TABLE.
// 
// USERS WILL BE ALLOWED TO EXIT THIS APPLICATION VIA PFKEYS
// OR FASTPATH, WITH THE 'OPTION' FIELD AVAILABLE FOR USE WITH
// ANY APPLICATION TRANSFER.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      04/08/92  JALLE1  New application.
//          09/28/92  JALLE1  Remove lrps type from map.
//          09/28/92  JALLE1  Remove prelim reports, open all
//                            report submits.
//          11/09/92  JALLE1  Add lrps by style/bag rpt,
//                            rearrange rpts on map.
//          12/21/92  JALLE1  Add edits to material lrps rpts
//                            to show when parms not accepted.
//          12/29/92  JALLE1  Add invalid size pct (fk1220)
//                            report.
//          02/09/93  JALLE1  Fix test JCL overrides in JCL
//                            tables FK0UT64, FK0UT66.
//          07/14/93  JALLE1  Change TESTRMS to TESTENC on all
//                            test JCL tables.
//          08/09/93  JALLE1  Remove references to FMDMDTYP
//                            for Aug '93 table changes.
//          08/20/93  JALLE1  Remove all bag reports.
// FK-024   08/31/93  JALLE1  Open Fcst Comparison by Pairs
//                            for submit.
// FK-024   09/14/93  JALLE1  Open Fcst Comparison by Usage
//                            for submit.
//          11/07/95  jniese  removed report fk3060 from
//                            selection screen.
// *********************
Program FK0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FK0UW00 FK0UW00; // record
  FK0UW01 FK0UW01; // record
  FK0UW02 FK0UW02; // record
  FKWREC FKWREC; // record
  FY1REC FY1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VLRPSH01 VLRPSH01; // record
  VVNDR001 VVNDR001; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use FK0UT01; // table
  use FK0UT02; // table
  use FK0UT03; // table
  use FK0UT04; // table
  use FK0UT05; // table
  use FK0UT06; // table
  use FK0UT07; // table
  use FK0UT08; // table
  use FK0UT09; // table
  use FK0UT1O; // table
  use FK0UT51; // table
  use FK0UT52; // table
  use FK0UT53; // table
  use FK0UT54; // table
  use FK0UT55; // table
  use FK0UT56; // table
  use FK0UT57; // table
  use FK0UT58; // table
  use FK0UT59; // table
  use FK0UT6O; // table
  use FK0UM.FK0UM110, // form
  FK0UM.XX0XM001,
  FK0UM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FK0UM110 initial; /* M001 input/output*/
    set FK0UW00 empty; /* Working storage*/
    set FK0UW01 empty; /* Working storage paramters*/
    set FK0UW02 empty; /* Working storage paramters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Internal reader record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    FK0UM110.FBAMDNBR = FKWREC.FBAMDNBR; /* Model nbr*/
    FK0UM110.FK-VEND-CD = FKWREC.FK-VEND-CD[1]; /* Vendor*/
    FK0UM110.FY1FCTYC = FKWREC.FY1FCTYC; /* Factory*/
    FK0UM110.XCTCD = FKWREC.XCTCD; /* Country*/

    if (FK0UM110.FK-VEND-CD == " ") /* Vendor not entered*/
      FK0UM110.FK-VEND-CD = "*"; /* Default to **/
    end

    if (FK0UM110.FY1FCTYC == " ") /* Factory not entered*/
      FK0UM110.FY1FCTYC = "*"; /* Default to **/
    end

    if (FK0UM110.XCTCD == " ") /* / * Country not entered*/
      FK0UM110.XCTCD = "*"; /* Default to **/
    end

    set FKWREC empty; /* Initialize fkwrec*/


     /* ------------------------------------------------------------*/
     /* Initialize application variables.*/
     /* ------------------------------------------------------------*/

    FK0UW00.FK0UW-OUTPUT-DEST-SW = "N"; /* Output destination switch*/
    FK0UW00.FK0UW-NBR-SELECTS = 9; /* Number of rpts to select*/
    FK0UM110.FK0UM-TOLERANCE-PCT-1 = 5; /* Default to 5%*/
    FK0UM110.FK0UM-TOLERANCE-PCT-2 = 5; /* Default to 5%*/


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FK0U-0001; /* Converse the main process*/


    FK0U-0001: FK0U-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FK0U-0001; /* Converse the main process*/


  end // end main
end // end FK0U

// Main process to display a map
Function FK0U-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* PERFORM FK0U-1000;                /* Obtain the data to be displayed*/

  FK0U-2000(); /* Format and display the map*/

  FK0U-3000(); /* Check attention identifier*/

  FK0U-4000(); /* Reset fields to normal intensity*/

  FK0U-5000(); /* Verify the entered data*/

  FK0U-6000(); /* Process valid input request*/


end // end FK0U-0001

// Format and converse the map
Function FK0U-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FK0UM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FK0UM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0UM110.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0UM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FK0UM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module identification*/

    set FK0UM110 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* DETERMINE CURSOR POSITION.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   || converseVar.validationMsgNum == 27) /* Report submitted*/

    if (FK0UM110.FBAMDNBR == 0) /* Model number not entered*/
      set FK0UM110.FBAMDNBR cursor; /* Set cursor*/
    else
      if (FK0UM110.FK0UM-SELECT-OUTPUT == " ") /* Output not specified*/
        set FK0UM110.FK0UM-SELECT-OUTPUT cursor; /* Set cursor*/
      else
        set FK0UM110.FK0UM-SELECT[1] cursor; /* Set cursor at 1st rpt*/
      end
    end
  end

  converse FK0UM110 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FK0UM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0UM110.CAITEM; /* Application data*/


end // end FK0U-2000

// Check attention identifier
Function FK0U-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;

    FKWREC.FBAMDNBR = FK0UM110.FBAMDNBR; /* Model nbr*/
    if (FK0UM110.FK-VEND-CD != "*")
      FKWREC.FK-VEND-CD[1] = FK0UM110.FK-VEND-CD; /* Vendor*/
    end
    if (FK0UM110.FY1FCTYC != "*")
      FKWREC.FY1FCTYC = FK0UM110.FY1FCTYC; /* Factory*/
    end
    if (FK0UM110.XCTCD != "*")
      FKWREC.XCTCD = FK0UM110.XCTCD; /* Country*/
    end

    COMMAREA.CATOAP = "FK0U"; /* to applicaiton*/
    COMMAREA.CAITEM = "    "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FK0UM110.CATOAP cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FK0UM110.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;

      FKWREC.FBAMDNBR = FK0UM110.FBAMDNBR; /* Model nbr*/
      if (FK0UM110.FK-VEND-CD != "*")
        FKWREC.FK-VEND-CD[1] = FK0UM110.FK-VEND-CD; /* Vendor*/
      end
      if (FK0UM110.FY1FCTYC != "*")
        FKWREC.FY1FCTYC = FK0UM110.FY1FCTYC; /* Factory*/
      end
      if (FK0UM110.XCTCD != "*")
        FKWREC.XCTCD = FK0UM110.XCTCD; /* Country*/
      end

      COMMAREA.CATOAP = FK0UM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0UM110.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FK0UM110.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* EXIT requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf14 /* LRCF requested*/
   || converseVar.eventKey is pf15 /* HDRS requested*/
   || converseVar.eventKey is pf16 /* LRVM requested*/
   || converseVar.eventKey is pf17) /* LRVD requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0UM110"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0A"; /* TO application*/
      COMMAREA.CAITEM = FK0UM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FK0UM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0R"; /* TO application*/
      COMMAREA.CAITEM = FK0UM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FK0S"; /* TO application*/
      COMMAREA.CAITEM = FK0UM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0T"; /* TO application*/
      COMMAREA.CAITEM = FK0UM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FK0V"; /* TO application*/
      COMMAREA.CAITEM = FK0UM110.CAITEM; /* item*/
    end

    set FKWREC empty;

    FKWREC.FBAMDNBR = FK0UM110.FBAMDNBR; /* Model nbr*/
    if (FK0UM110.FK-VEND-CD != "*")
      FKWREC.FK-VEND-CD[1] = FK0UM110.FK-VEND-CD; /* Vendor*/
    end
    if (FK0UM110.FY1FCTYC != "*")
      FKWREC.FY1FCTYC = FK0UM110.FY1FCTYC; /* Factory*/
    end
    if (FK0UM110.XCTCD != "*")
      FKWREC.XCTCD = FK0UM110.XCTCD; /* Country*/
    end

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FK0U-3000

// Reset highlighted fields
Function FK0U-4000()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FK0UM110.FBAMDNBR initialAttributes;
  set FK0UM110.FK-VEND-CD initialAttributes;
  set FK0UM110.FY1FCTYC initialAttributes;
  set FK0UM110.XCTCD initialAttributes;
  set FK0UM110.FK0UM-SELECT-OUTPUT initialAttributes;


  FK0UW00.FK0UW-IDX = 1; /* Init index*/

  while (FK0UW00.FK0UW-IDX <= FK0UW00.FK0UW-NBR-SELECTS) /* / * Each select*/

    set FK0UM110.FK0UM-SELECT[FK0UW-IDX] initialAttributes; /* Set defined*/
    FK0UW00.FK0UW-IDX = FK0UW00.FK0UW-IDX + 1;
  end

  set FK0UM110.FK0UM-TOLERANCE-PCT-1 initialAttributes;
  set FK0UM110.FK0UM-TOLERANCE-PCT-2 initialAttributes;

  set FK0UM110.CATOAP initialAttributes; /* TO application*/
  set FK0UM110.CAITEM initialAttributes; /* Application data*/


   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/

  if (FK0UM110.XCTCD == "?") /* XCT list requested*/

    if (converseVar.eventKey not enter) /* Enter not pressed*/

      FKWREC.XXX-MOD-ID = "4000"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  else

    return; /* Return to previous process*/
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of xct codes.*/
   /* --------------------------------------------------------------------*/

  if (FK0UM110.XCTCD == "?") /* xct list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FK0UM110.XCTCD = " "; /* Init country code*/
    else
      FK0UM110.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
    end

    set FK0UM110.XCTCD cursor; /* Establish cursor position*/
  end




   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/

  exit stack;


end // end FK0U-4000

// Verify data that was entered
Function FK0U-5000()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FK0UM110.CAITEM > " ") /* Application data was entered*/

    set FK0UM110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ------------------------------------------------------------*/
   /* Verify the select fields*/
   /* ------------------------------------------------------------*/

  FK0UW00.FK0UW-RPT-SW = "N"; /* Report selected switch*/
  FK0UW00.FK0UW-IDX = FK0UW00.FK0UW-NBR-SELECTS;

  while (FK0UW00.FK0UW-IDX >= 1) /* For each select field*/

    if (FK0UM110.FK0UM-SELECT[FK0UW-IDX] == "S") /* Report selected*/

      FK0UW00.FK0UW-RPT-SW = "Y"; /* Set switch yes*/
    else

      if (FK0UM110.FK0UM-SELECT[FK0UW-IDX] != "*" /* If not valid*/
       && FK0UM110.FK0UM-SELECT[FK0UW-IDX] != " ") /**/

        set FK0UM110.FK0UM-SELECT[FK0UW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(13); /* Only "s" valid to select a line*/
      end
    end

    FK0UW00.FK0UW-IDX = FK0UW00.FK0UW-IDX - 1; /* Decrement index*/
  end

  if (FK0UM-SELECT-OUTPUT == "S"
   || FK0UM-SELECT-OUTPUT == "*"
   || FK0UM-SELECT-OUTPUT == " ")

    /* Next sentence*/
  else

    set FK0UM110.FK0UM-SELECT-OUTPUT cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(13); /* Only "s" valid to select a line*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the country code*/
   /* If country code is valid, make sure fk2070 not requested*/
   /* ------------------------------------------------------------*/

  if (FK0UM110.XCTCD == "*") /* If wildcard*/

    /* Next sentence*/
  else

    if (FK0UM110.XCTCD in XCTTBL.XCTCD /* If in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

       /* Verify certain reports not specified*/

      if (FK0UM110.FK0UM-SELECT[9] == "S") /* FK7010 selected*/

        set FK0UM110.XCTCD cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[9] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(145); /* cannot specify fcty or ctry*/
      end

      if (FK0UM110.FK0UM-SELECT[8] == "S") /* FK7000 selected*/

        set FK0UM110.XCTCD cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[8] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(110); /* cannot specify vendor, fcty, or ctry*/
      end

      if (FK0UM110.FK0UM-SELECT[6] == "S") /* fk2070 selected*/

        set FK0UM110.XCTCD cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[6] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(110); /* cannot specify vendor, fcty, or ctry*/
      end

    else

      set FK0UM110.XCTCD cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(8); /* Required field missing or invalid*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify the factory code*/
   /* ------------------------------------------------------------*/

  if (FK0UM110.FY1FCTYC == "X" /* Blank factory*/
   || FK0UM110.FY1FCTYC == "*") /* All factories*/

     /* Next sentence*/
  else

    if (FK0UM110.FY1FCTYC == " ") /* Factory not entered*/

      set FK0UM110.FY1FCTYC cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(8); /* Required field missing or invalid*/
    else
      FK0U-5100(); /* Verify factory*/
    end
  end


   /* ---------------------------------------------------------------*/
   /* If both factory and country were entered, verify the factory*/
   /* is in the country.*/
   /* ---------------------------------------------------------------*/

  if (FK0UM110.XCTCD != "*"    /* Country not wildcarded*/
   && FK0UM110.XCTCD != " "    /* Country not missing*/
   && FK0UM110.FY1FCTYC != "*" /* Factory not wildcarded*/
   && FK0UM110.FY1FCTYC != " ") /* Factory not missing*/

    if (FY1REC.XCTCD != FK0UM110.XCTCD) /* If factories not =*/

      set FK0UM110.XCTCD bold; /* Highlight*/
      set FK0UM110.FY1FCTYC cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(80); /* Factory does not exist in specified country*/
    end
  end


   /* ---------------------------------------------------------------*/
   /* Verify vendor code*/
   /* ---------------------------------------------------------------*/

  if (FK0UM110.FK-VEND-CD != "*") /* If vendor not wildcarded*/

    FK0U-5200(); /* Verify vendor*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify lrps number*/
   /* ---------------------------------------------------------------*/

  FK0U-5400(); /* Select DCMPNT.VLRPSH01*/

  if (converseVar.validationMsgNum == 0) /* If no errors yet*/
    if (FK0UM110.FK0UM-SELECT[6] == "S") /* CURRENT VS. LAST MO. LRPS*/

      FK0U-5500(); /* Select DFBUY.VFMCTL01*/

      FK0UW00.FK0UW-WORK-DT = FB9REC.FB8BUYDT; /* Move buy date*/

      if (FK0UW00.FK0UW-WORK-MM == 12) /* If December*/

        FK0UW00.FK0UW-WORK-MM = 1; /* Move January to month*/
        FK0UW00.FK0UW-WORK-CCYY = FK0UW00.FK0UW-WORK-CCYY + 1;

      else

        FK0UW00.FK0UW-WORK-MM = FK0UW00.FK0UW-WORK-MM + 1;
      end

      if (VLRPSH01.FB8BUYDT != FK0UW00.FK0UW-WORK-DT) /* If dates not =*/

        set FK0UM110.FBAMDNBR cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[6] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(47); /* Lrps must be for the current buy month*/

      end
    end
  end

   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


   /* ---------------------------------------------------------------*/
   /* If reports were selected, verify output destination has been*/
   /* established or selected.*/
   /* ---------------------------------------------------------------*/

  if (FK0UW00.FK0UW-RPT-SW == "Y") /* If report requested*/

    if (FK0UW00.FK0UW-OUTPUT-DEST-SW == "Y" /* Output already established*/
     || FK0UM110.FK0UM-SELECT-OUTPUT == "S") /* or selected*/

       /* Next sentence*/
    else

      set FK0UM110.FK0UM-SELECT-OUTPUT cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(23); /* Output destination must be selected*/
    end
  end


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


end // end FK0U-5000

// Verify entered factory
Function FK0U-5100()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Clear row storage area*/

  FY1REC.XGPCD = "02"; /* Gpc code*/
  FY1REC.FY1FCTYC = FK0UM110.FY1FCTYC; /* Factory*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

       /* Verify certain reports are not selected*/

      if (FK0UM110.FK0UM-SELECT[9] == "S") /* FK7010 requested*/

        set FK0UM110.FY1FCTYC cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[9] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5100"; /* module id*/
        converseLib.validationFailed(145); /* Cannot specify fcty or ctry*/
      end

      if (FK0UM110.FK0UM-SELECT[8] == "S") /* FK7000 requested*/

        set FK0UM110.FY1FCTYC cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[8] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5100"; /* module id*/
        converseLib.validationFailed(110); /* Cannot specify vendor,fcty,or ctry*/
      end

      if (FK0UM110.FK0UM-SELECT[6] == "S") /* FK2070 requested*/

        set FK0UM110.FY1FCTYC cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[6] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5100"; /* module id*/
        converseLib.validationFailed(110); /* Cannot specify vendor,fcty,or ctry*/
      end

      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set FK0UM110.FY1FCTYC cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5100"; /* module id*/
      converseLib.validationFailed(8); /* Required field missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY ENTERED FACTORY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK0U-5100

// Verify entered vendor
Function FK0U-5200()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VVNDR001 empty; /* Clear row storage area*/

  VVNDR001.FK-VEND-CD = FK0UM110.FK-VEND-CD; /* Vendor*/

  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FK0UM110.FK0UM-SELECT[8] == "S") /* FK7000 requested*/

        set FK0UM110.FK-VEND-CD cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[8] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5200"; /* module id*/
        converseLib.validationFailed(110); /* Can't specify vendor for this report*/
      end

      if (FK0UM110.FK0UM-SELECT[6] == "S") /* FK2070 requested*/

        set FK0UM110.FK-VEND-CD cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[6] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5200"; /* module id*/
        converseLib.validationFailed(110); /* Can't specify vendor for this report*/
      end

      if (FK0UM110.FK0UM-SELECT[5] == "S") /* FK1030 requested*/

        set FK0UM110.FK-VEND-CD cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[5] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5200"; /* module id*/
        converseLib.validationFailed(109); /* Can't specify vendor for this report*/
      end

      if (FK0UM110.FK0UM-SELECT[4] == "S") /* FK1040 requested*/

        set FK0UM110.FK-VEND-CD cursor, bold; /* Highlight*/
        set FK0UM110.FK0UM-SELECT[4] bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5200"; /* module id*/
        converseLib.validationFailed(109); /* Can't specify vendor for this report*/
      end

      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set FK0UM110.FK-VEND-CD cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5200"; /* module id*/
      converseLib.validationFailed(21); /* Vendor code missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "5200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY ENTERED VENDOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK0U-5200

// Select DCMPNT.VLRPSH01
Function FK0U-5400()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VLRPSH01 empty; /* Clear row storage area*/

  VLRPSH01.FBAMDNBR = FK0UM110.FBAMDNBR; /* Model nbr*/

  try
    call "IO6250" ("S ", SQLCA, VLRPSH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set FK0UM110.FBAMDNBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5400"; /* module id*/
      converseLib.validationFailed(61); /* No lrps for vendor and type*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "5400"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCMPNT.VLRPSH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPSH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRPSH01.VLRPSH01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK0U-5400

// Select DFBUY.VFMCTL01
Function FK0U-5500()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FB9REC empty; /* Clear row storage area*/

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FKWREC.XXX-MOD-ID = "5500"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFBUY.VFMCTL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FK0U-5500

// Process valid input request
Function FK0U-6000()
   /* --------------------------------------------------------------*/
   /* IF SPECIFY OUTPUT DESTINATION IS SELECTED ;*/
   /* SETUP CALL TO TA0P TO GET DESTINATION.*/
   /* --------------------------------------------------------------*/

  if (FK0UM110.FK0UM-SELECT-OUTPUT == "S") /* Select output*/

    set TA6REC empty;
    TA6REC.TA6SUBSW = "N"; /* GET REPORT DISTRIBUTION ONLY*/
    TA6REC.TA6MSGSW = "N"; /* DONT DISPLAY MSG WHEN DONE*/

    XPTA0P();

    if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
     && TA6REC.TA6RTNCD == "0")        /* AND NORMAL RETURN*/
      FK0UW01.XURDEST = TA6REC.XURDEST; /* PRINT DESTINATION*/
      FK0UW02.XURDEST = TA6REC.XURDEST; /* PRINT DESTINATION*/
      FK0UM110.FK0UM-SELECT-OUTPUT = "*"; /* Output dest specified*/
      FK0UW00.FK0UW-OUTPUT-DEST-SW = "Y"; /**/
    else

      if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
       && TA6REC.TA6RTNCD == "1")        /* USER CANCELLED*/
        FK0UM110.FK0UM-SELECT-OUTPUT = "S"; /* Reset select*/
        set FK0UM110.FK0UM-SELECT-OUTPUT cursor; /* Reset cursor*/
        converseLib.validationFailed(35); /* INDICATE USER CANCELLED*/
        FKWREC.XXX-MOD-ID = "6000"; /* MODULE ID.*/
        exit stack; /* EXIT TO DISPLAY MAP.*/
      end
    end
  end


   /* --------------------------------------------------------------*/
   /* Check to see if REPORTS SELECTED.*/
   /* --------------------------------------------------------------*/

  if (FK0UW-RPT-SW == "Y") /* REPORTS SELECTED*/

    /* ----------------------------------------------------------*/
    /* Determine which environment the program is executing in:*/
    /* Development or Production*/
    /* Then submit the reports*/
    /* ----------------------------------------------------------*/

    FK0U-6100(); /* Determine Region*/

    FK0U-6200(); /* Submit report(s)*/

  end


end // end FK0U-6000

// Get region information
Function FK0U-6100()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ASSIGN ";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

     /* next sentence*/

  else

    FKWREC.XXX-MOD-ID = "6100"; /* module identification*/
    converseLib.validationFailed(10); /* System error*/
    exit stack;
  end


end // end FK0U-6100

// Determine which job to submit
Function FK0U-6200()

   /* ------------------------------------------------------------*/
   /* Load the parm.*/
   /* ------------------------------------------------------------*/

  FK0UW01.FK0UW-LRPS-NBR = FK0UM110.FBAMDNBR; /* Lrps number*/
  FK0UW02.FK0UW-LRPS-NBR = FK0UM110.FBAMDNBR; /* Lrps number*/
  FK0UW01.FK-VEND-CD = FK0UM110.FK-VEND-CD; /* Vendor*/
  FK0UW02.FK-VEND-CD = FK0UM110.FK-VEND-CD; /* Vendor*/
  FK0UW01.XCTCD = FK0UM110.XCTCD; /* Country*/
  FK0UW02.XCTCD = FK0UM110.XCTCD; /* Country*/
  if (FK0UM110.FY1FCTYC == "X") /* Blank fcty requested*/
    FK0UW01.FY1FCTYC = " "; /* Factory*/
    FK0UW02.FY1FCTYC = " "; /* Factory*/
  else
    FK0UW01.FY1FCTYC = FK0UM110.FY1FCTYC; /* Factory*/
    FK0UW02.FY1FCTYC = FK0UM110.FY1FCTYC; /* Factory*/
  end
  FK0UW01.FK0UW-TOLERANCE-PCT = 0;

   /* ------------------------------------------------------------*/
   /* Determine which reports to submit*/
   /* ------------------------------------------------------------*/

  if (FK0UM110.FK0UM-SELECT[1] == "S") /* FK2080 requested*/
    FK0UW02.FK0UW-RPT-NBR = "FK2080"; /* report number*/
    FK0U-6210(); /* Submit report (prod or test)*/
    FK0UM110.FK0UM-SELECT[1] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end

  if (FK0UM110.FK0UM-SELECT[2] == "S") /* FK3050 requested*/
    FK0UW02.FK0UW-RPT-NBR = "FK3050"; /* report number*/
    FK0U-6220(); /* Submit report (prod or test)*/
    FK0UM110.FK0UM-SELECT[2] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end

  if (FK0UM110.FK0UM-SELECT[3] == "S") /* FK1010 requested*/
    FK0U-6240(); /* Submit report (prod or test)*/
    FK0UM110.FK0UM-SELECT[3] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end

  if (FK0UM110.FK0UM-SELECT[4] == "S") /* FK1040 requested*/
    FK0U-6250(); /* Submit report (prod or test)*/
    FK0UM110.FK0UM-SELECT[4] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end

  if (FK0UM110.FK0UM-SELECT[5] == "S") /* FK1030 requested*/
    FK0U-6260(); /* Submit report (prod or test)*/
    FK0UM110.FK0UM-SELECT[5] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end

  if (FK0UM110.FK0UM-SELECT[6] == "S") /* FK2070 requested*/
    FK0U-6270(); /* Submit report (prod or test)*/
    FK0UM110.FK0UM-SELECT[6] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end

  if (FK0UM110.FK0UM-SELECT[7] == "S") /* FK5030 requested*/
    FK0U-6280(); /* Submit report (prod or test)*/
    FK0UM110.FK0UM-SELECT[7] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end

  if (FK0UM110.FK0UM-SELECT[8] == "S") /* FK7000 requested*/
    FK0U-6290(); /* Submit report (prod or test)*/
    FK0UM110.FK0UM-SELECT[8] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end

  if (FK0UM110.FK0UM-SELECT[9] == "S") /* FK7010 requested*/
    FK0U-6300(); /* Submit report (prod or test)*/
    FK0UM110.FK0UM-SELECT[9] = "*"; /* Report submitted*/
    move " " to TA6REC.TARJCL[1] for all;
    move " " to TA6REC.TARTYPE[1] for all;
  end


end // end FK0U-6200

// Format JCL for FK2080
Function FK0U-6210()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0UW00.FK0UW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0UW02.XURDEST; /* Load in printer destination*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0UW00.FK0UW-TBL-IDX > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0UT01.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW02.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT01.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT01.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT01.TARTYPE[FK0UW-TBL-IDX];
      end

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FK0UT01.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    else /* Format test jcl*/

      if (FK0UT51.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW02.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT51.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT51.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT51.TARTYPE[FK0UW-TBL-IDX];
      end

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FK0UT51.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6210"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6210"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0U-6210

// Format JCL for FK3050
Function FK0U-6220()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0UW00.FK0UW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0UW02.XURDEST; /* Load in printer destination*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0UW00.FK0UW-TBL-IDX > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0UT02.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW02.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT02.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT02.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT02.TARTYPE[FK0UW-TBL-IDX];
      end

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FK0UT02.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    else /* Format test jcl*/

      if (FK0UT52.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW02.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT52.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT52.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT52.TARTYPE[FK0UW-TBL-IDX];
      end

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FK0UT52.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6220"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6220"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0U-6220

// Format JCL for FK1010
Function FK0U-6240()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0UW00.FK0UW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0UW01.XURDEST; /* Load in printer destination*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0UW00.FK0UW-TBL-IDX > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0UT04.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT04.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT04.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT04.TARTYPE[FK0UW-TBL-IDX];
      end

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FK0UT04.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    else /* Format test jcl*/

      if (FK0UT54.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT54.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT54.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT54.TARTYPE[FK0UW-TBL-IDX];
      end

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FK0UT54.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6240"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6240"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0U-6240

// Format JCL for FK1040
Function FK0U-6250()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0UW00.FK0UW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0UW01.XURDEST; /* Load in printer destination*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0UW00.FK0UW-TBL-IDX > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0UT05.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT05.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT05.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT05.TARTYPE[FK0UW-TBL-IDX];
      end

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FK0UT05.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    else /* Format test jcl*/

      if (FK0UT55.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT55.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT55.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT55.TARTYPE[FK0UW-TBL-IDX];
      end

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FK0UT55.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6250"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6250"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0U-6250

// Format JCL for FK1030
Function FK0U-6260()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0UW00.FK0UW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0UW01.XURDEST; /* Load in printer destination*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0UW00.FK0UW-TBL-IDX > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0UT06.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT06.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT06.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT06.TARTYPE[FK0UW-TBL-IDX];
      end

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FK0UT06.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    else /* Format test jcl*/

      if (FK0UT56.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT56.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT56.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT56.TARTYPE[FK0UW-TBL-IDX];
      end

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FK0UT56.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6260"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6260"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0U-6260

// Format JCL for FK2070
Function FK0U-6270()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0UW00.FK0UW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0UW01.XURDEST; /* Load in printer destination*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0UW00.FK0UW-TBL-IDX > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0UT07.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT07.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT07.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT07.TARTYPE[FK0UW-TBL-IDX];
      end

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FK0UT07.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    else /* Format test jcl*/

      if (FK0UT57.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT57.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT57.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT57.TARTYPE[FK0UW-TBL-IDX];
      end

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FK0UT57.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6270"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6270"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0U-6270

// Format JCL for FK5030
Function FK0U-6280()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0UW00.FK0UW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0UW01.XURDEST; /* Load in printer destination*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0UW00.FK0UW-TBL-IDX > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0UT08.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT08.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT08.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT08.TARTYPE[FK0UW-TBL-IDX];
      end

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FK0UT08.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    else /* Format test jcl*/

      if (FK0UT58.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT58.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT58.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT58.TARTYPE[FK0UW-TBL-IDX];
      end

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FK0UT58.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6280"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6280"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0U-6280

// Format JCL for FK7000
Function FK0U-6290()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0UW01.FK0UW-TOLERANCE-PCT = FK0UM110.FK0UM-TOLERANCE-PCT-1;

  FK0UW00.FK0UW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0UW01.XURDEST; /* Load in printer destination*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0UW00.FK0UW-TBL-IDX > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0UT09.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT09.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT09.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT09.TARTYPE[FK0UW-TBL-IDX];
      end

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FK0UT09.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    else /* Format test jcl*/

      if (FK0UT59.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT59.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT59.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT59.TARTYPE[FK0UW-TBL-IDX];
      end

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FK0UT59.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6290"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6290"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0U-6290

// Format JCL for FK7010
Function FK0U-6300()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FK0UW01.FK0UW-TOLERANCE-PCT = FK0UM110.FK0UM-TOLERANCE-PCT-2;

  FK0UW00.FK0UW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.XURDEST = FK0UW01.XURDEST; /* Load in printer destination*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FK0UW00.FK0UW-TBL-IDX > 0) /* Until end of table*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/

      if (FK0UT1O.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT1O.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT1O.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT1O.TARTYPE[FK0UW-TBL-IDX];
      end

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FK0UT1O.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    else /* Format test jcl*/

      if (FK0UT6O.TARTYPE[FK0UW-TBL-IDX] == "P") /* Parameter stmt*/

        TA6REC.TARJCL[TA6INDEX] = FK0UW01.FK0UW-PARM;
        TA6REC.TARTYPE[TA6INDEX] = FK0UT6O.TARTYPE[FK0UW-TBL-IDX];
      else

        TA6REC.TARJCL[TA6INDEX] = FK0UT6O.TARJCL[FK0UW-TBL-IDX];
        TA6REC.TARTYPE[TA6INDEX] = FK0UT6O.TARTYPE[FK0UW-TBL-IDX];
      end

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FK0UT6O.TARJCL[FK0UW-TBL-IDX] == "/*EOF") /* End of table*/

        FK0UW00.FK0UW-TBL-IDX = 0; /* Indicate end of table*/
      else

        FK0UW00.FK0UW-TBL-IDX = FK0UW00.FK0UW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end


  if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
    TA6REC.TA6RTNCD = " "; /* init return code*/
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/



  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(27); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(35); /* Indicate user cancelled*/
    FKWREC.XXX-MOD-ID = "6300"; /* module identification*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    FKWREC.XXX-MOD-ID = "6300"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FK0U-6300

//*** RECORD=FK0UW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0UW00 type basicRecord
  10 FK0UW-IDX FK0UW-IDX ; 
  10 FK0UW-TBL-IDX FK0UW-TBL-IDX ; 
  10 FK0UW-OUTPUT-DEST-SW FK0UW-OUTPUT-DEST-SW ; 
  10 FK0UW-RPT-SW FK0UW-RPT-SW ; 
  10 FK0UW-WORK-DT FK0UW-WORK-DT ; 
    15 FK0UW-WORK-CCYY FK0UW-WORK-CCYY ; 
      20 FK0UW-WORK-CC FK0UW-WORK-CC ; 
      20 FK0UW-WORK-YY FK0UW-WORK-YY ; 
    15 FK0UW-WORK-MM FK0UW-WORK-MM ; 
    15 FK0UW-WORK-DD FK0UW-WORK-DD ; 
  10 FK0UW-NBR-SELECTS FK0UW-NBR-SELECTS ; 
end // end FK0UW00

//*** RECORD=FK0UW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0UW01 type basicRecord
  10 XURDEST XURDEST ; 
  10 FK0UW-PARM FK0UW-PARM ; 
    15 FK0UW-LRPS-NBR FK0UW-LRPS-NBR ; 
    15 FK-VEND-CD FK-VEND-CD ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 * char(8) ; // FK_AIRBAG_ID
    15 FK0UW-TOLERANCE-PCT FK0UW-TOLERANCE-PCT ; 
    15 * char(55) ; 
end // end FK0UW01

//*** RECORD=FK0UW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FK0UW02 type basicRecord
  10 XURDEST XURDEST ; 
  10 FK0UW-PARM FK0UW-PARM ; 
    15 FK0UW-LRPS-NBR FK0UW-LRPS-NBR ; 
    15 FK-VEND-CD FK-VEND-CD ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 FK0UW-RPT-NBR FK0UW-RPT-NBR ; 
    15 * char(59) ; 
end // end FK0UW02

// Index for application table
DataItem FK0UW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Lrps number (fb-mdl-nbr)
DataItem FK0UW-LRPS-NBR num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Nbr of selects on map
DataItem FK0UW-NBR-SELECTS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Output dest specified switch
DataItem FK0UW-OUTPUT-DEST-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Paramter passed to report apps
DataItem FK0UW-PARM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FK_AIRBAG_ID
DataItem FK0UW-RPT-NBR char(6)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Report selected switch
DataItem FK0UW-RPT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for table
DataItem FK0UW-TBL-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Tolerance percent
DataItem FK0UW-TOLERANCE-PCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work century
DataItem FK0UW-WORK-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work century and year
DataItem FK0UW-WORK-CCYY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work day
DataItem FK0UW-WORK-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work date
DataItem FK0UW-WORK-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work month
DataItem FK0UW-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work year
DataItem FK0UW-WORK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

