package fk0w;

import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import fb.common.FBAMDNBR;
import fk.common.*;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VLRPSH01;
import vv.common.VLRSTY01;
//*** PROGRAM=FK0W ****
// THIS PROGRAM IS PART OF THE COMPONENTS FORECASTING SYSTEM.
// 
// THIS APPLICATION PROVIDES INQUIRY CAPABILITY FOR LRPS BY
// MATERIAL.  THIS APPLICATION WILL BE ENTERED FROM APPLICATION
// FK0V, BRINGING VENDOR CODE, LRPS NUMBER, AND LRPS TYPE
// ALONG WITH THE TRANSFER.  THE APPLICATION WILL THEN OBTAIN
// ALL MATERIALS FOR THE VENDOR PASSED, AND WILL ACCUMULATE
// LRPS QUANTITIES FOR EACH OF THE MATERIALS.  THE DATA WILL BE
// FORMATTED TO TEMPORARY STORAGE AND DISPLAYED ON THE MAP.
// USERS WILL BE ALLOWED TO USE PF7 AND PF8 SCROLLING LOGIC TO
// VIEW MULTIPLE PAGES OF MATERIAL AND LRPS DATA.
// 
// THE USER MAY EXIT TO ANY ALLOWED APPLICATION VIA FASTPATH
// OR PFKEYS, WITH THE OPTION FIELD AVAILABLE FOR USE WITH ANY
// APPLICATION TRANSFER.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      03/06/92  JALLE1  New application.
//          08/10/93  JALLE1  Remove references to FBDMDTYP
//                            for Aug '93 table changes.
// *********************
Program FK0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK0WW00 FK0WW00; // record
  FK0WW01 FK0WW01; // record
  FKWREC FKWREC; // record
  FKZREC FKZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VLRPSH01 VLRPSH01; // record
  VLRSTY01 VLRSTY01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK0WM.FK0WM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Flow to perform application initialization.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0W-0001; /* Application initialization*/
    ;
    ;
    FK0W-0001: FK0W-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0W-0002; /* Converse the main process*/
    ;
    ;
    FK0W-0002: FK0W-0002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0W-0002; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0W

// Application initialization
Function FK0W-0001()
   /* ------------------------------------------------------------*/
   /* Initalize working storage and display storage areas.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0WM110 initial; /* M110 input/output*/
  set FK0WW00 empty; /* Application working storage*/
  set FK0WW01 empty; /* M110 display storage*/
  set SQLCA empty; /* SQL communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set TA5REC empty; /* Temporary storage parameters*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify application entered via fk0v, w, or x.  If not, set*/
   /* error and exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP != "FK0V" /* If from app. not = fk0v*/
   && COMMAREA.CAFROMAP != "FK0W" /* and from app. not = fk0w*/
   && COMMAREA.CAFROMAP != "FK0X") /* and from app. not = fk0x*/
    ;
    converseLib.validationFailed(72); /* Cannot fastpath to this application*/
    FKWREC.XXX-MOD-ID = "0001"; /* Module identification*/
    set FK0WM110.CATOAP cursor; /* Set cursor*/
    FK0WW00.FK0WW-REQUEST-DATA-SW = "N"; /* Don't request data*/
    FK0WW00.FK0WW-DATA-FOUND-SW = "N"; /* No data was found*/
    FK0WW00.FK0WW-FMAT-MAP-SW = "N"; /* Don't format the map*/
    ;
    return; /* Exit to display the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Use data passed in the COMMAREA as the initial key.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WM110.FK-VEND-CD = FKWREC.FK-VEND-CD[1]; /* Vendor code*/
  FK0WW00.FBAMDNBR = FKWREC.FBAMDNBR; /* Model number*/
  ;
  set FKWREC empty; /* Initialize fkwrec*/
  ;
  ;
  ;
  FK0WW00.FK0WW-REQUEST-DATA-SW = "Y"; /* Request data*/
  FK0WW00.FK0WW-DATA-FOUND-SW = "N"; /* No data found (yet)*/
  FK0WW00.FK0WW-FMAT-MAP-SW = "N"; /* Don't format the map*/
  FK0WW00.FK0WW-SIDE-TO-DISP-SW = "L"; /* Display left side*/
  ;
  ;
end // end FK0W-0001

// Main process to display a map
Function FK0W-0002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0W-1000(); /* Obtain the data to display*/
  ;
  FK0W-2000(); /* Format and display the map*/
  ;
  FK0W-3000(); /* Check attention identifier*/
  ;
  FK0W-4000(); /* Reset fields to normal intensity*/
  ;
  FK0W-5000(); /* Verify the entered data*/
  ;
  FK0W-6000(); /* Process valid input request*/
  ;
  ;
end // end FK0W-0002

// Obtain data to display
Function FK0W-1000()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0WW00.FK0WW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  FK0WW00.FK0WW-DATA-FOUND-SW = "N"; /* Init data found switch*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* --------------------------------------------------------------*/
  ;
  FK0WW00.XXXTSLEN = 2030; /* Temporary storage page length*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* --------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FK0WW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* --------------------------------------------------------------*/
  ;
  FK0W-1700(); /* Purge temp storage*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Obtain the lrps header record.*/
   /* --------------------------------------------------------------*/
  ;
  FK0W-1100(); /* Get lrps header*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Calculate dates to be used on the map.*/
   /* --------------------------------------------------------------*/
  ;
  FK0W-1200(); /* Calculate dates*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Declare and process a cursor to do a join of the vendor,*/
   /* material, color group, color, and material usage tables.*/
   /* --------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-END-CMPNT-SW = "N"; /* Init end of cursor switch*/
  FK0WW00.FK0WW-MAP-IDX = 1; /* Init map index*/
  ;
  FK0W-1400(); /* Declare cursor to join cmpnt tables*/
  ;
  FK0W-1500(); /* Fetch cmpnt join cursor*/
  ;
   /* --------------------------------------------------------------*/
   /* Initialize the working storage hold area.*/
   /* --------------------------------------------------------------*/
  ;
  FK0WW00.FK0WM-QTY1 = 0; /* Column 1 quantity*/
  FK0WW00.FK0WM-QTY2 = 0; /* Column 2 quantity*/
  FK0WW00.FK0WM-QTY3 = 0; /* Column 3 quantity*/
  FK0WW00.FK0WM-QTY4 = 0; /* Column 4 quantity*/
  FK0WW00.FK0WM-QTY5 = 0; /* Column 5 quantity*/
  FK0WW00.FK0WM-QTY6 = 0; /* Column 6 quantity*/
  FK0WW00.FK0WM-QTY7 = 0; /* Column 7 quantity*/
  FK0WW00.FK0WM-QTY8 = 0; /* Column 8 quantity*/
  FK0WW00.FK0WM-QTY9 = 0; /* Column 9 quantity*/
  FK0WW00.FK0WM-QTY10 = 0; /* Column 10 quantity*/
  FK0WW00.FK0WM-QTY11 = 0; /* Column 11 quantity*/
  FK0WW00.FK0WM-QTY12 = 0; /* Column 12 quantity*/
  ;
  if (FK0WW00.FK0WW-END-CMPNT-SW != "Y") /* If not end of cursor*/
    ;
    FK0WW00.FK-MAT-NBR = FKZREC.FK-MAT-NBR; /* Material nbr*/
    FK0WW00.FK-DEPT-MAT-DESC = FKZREC.FK-DEPT-MAT-DESC; /* Desc*/
    FK0WW00.FK-VEND-SNM = FKZREC.FK-VEND-SNM; /* Vend short name*/
  else
    ;
    FK0WW00.FK-MAT-NBR = " "; /* Material nbr*/
    FK0WW00.FK-DEPT-MAT-DESC = " "; /* Desc*/
    FK0WW00.FK-VEND-SNM = " "; /* Vend short name*/
  end
  ;
  while (FK0WW00.FK0WW-END-CMPNT-SW != "Y") /* Until end of cursor*/
    ;
    FK0W-1600(); /* Obtain lrps quantities*/
    ;
    FK0W-1500(); /* Fetch cmpnt join cursor*/
    ;
    if (FK0WW00.FK0WW-END-CMPNT-SW == "Y" /* If end of cursor*/
     || FKZREC.FK-MAT-NBR != FK0WW00.FK-MAT-NBR) /* or material change*/
      ;
      /* --------------------------------------------------------------*/
      /* If lrps data was found,*/
      /* Format a detail line to temporary storage.  If necessary, add*/
      /* the temporary storage page to the temporary storage page queue.*/
      /* --------------------------------------------------------------*/
      ;
      if (FK0WW00.FK0WW-DATA-FOUND-SW == "Y") /* If data was found*/
        ;
        FK0WW01.FK-VEND-CD = FK0WM110.FK-VEND-CD; /* Vendor*/
        FK0WW01.FK-VEND-SNM = FK0WW00.FK-VEND-SNM; /* Vendor name*/
        FK0WW01.FK-MAT-NBR[FK0WW-MAP-IDX] = FK0WW00.FK-MAT-NBR; /* Material*/
        FK0WW01.FK-DEPT-MAT-DESC[FK0WW-MAP-IDX] = FK0WW00.FK-DEPT-MAT-DESC; /* Material desc*/
        FK0WW01.FK0WM-QTY1[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY1;
        FK0WW01.FK0WM-QTY2[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY2;
        FK0WW01.FK0WM-QTY3[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY3;
        FK0WW01.FK0WM-QTY4[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY4;
        FK0WW01.FK0WM-QTY5[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY5;
        FK0WW01.FK0WM-QTY6[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY6;
        FK0WW01.FK0WM-QTY7[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY7;
        FK0WW01.FK0WM-QTY8[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY8;
        FK0WW01.FK0WM-QTY9[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY9;
        FK0WW01.FK0WM-QTY10[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY10;
        FK0WW01.FK0WM-QTY11[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY11;
        FK0WW01.FK0WM-QTY12[FK0WW-MAP-IDX] = FK0WW00.FK0WM-QTY12;
        ;
        FK0WW00.FK0WW-MAP-IDX = FK0WW00.FK0WW-MAP-IDX + 1; /* Increment*/
        ;
        if (FK0WW00.FK0WW-MAP-IDX > 14) /* If temp storage page full*/
          ;
          FK0W-1800(); /* Add page to temp storage page queue*/
          ;
          FK0WW00.FK0WW-MAP-IDX = 1; /* Reset map index*/
        end
        ;
      end
      ;
      /* --------------------------------------------------------------*/
      /* Initialize the working storage hold area.*/
      /* Only do this if not at the end of the components cursor.*/
      /* --------------------------------------------------------------*/
      ;
      if (FK0WW00.FK0WW-END-CMPNT-SW != "Y") /* If not end of cursor*/
        ;
        FK0WW00.FK0WW-DATA-FOUND-SW = "N"; /* Init data found switch*/
        ;
        FK0WW00.FK-MAT-NBR = FKZREC.FK-MAT-NBR; /* Material nbr*/
        FK0WW00.FK-DEPT-MAT-DESC = FKZREC.FK-DEPT-MAT-DESC; /* Desc*/
        FK0WW00.FK-VEND-SNM = FKZREC.FK-VEND-SNM; /* Vend short name*/
        FK0WW00.FK0WM-QTY1 = 0; /* Column 1 quantity*/
        FK0WW00.FK0WM-QTY2 = 0; /* Column 2 quantity*/
        FK0WW00.FK0WM-QTY3 = 0; /* Column 3 quantity*/
        FK0WW00.FK0WM-QTY4 = 0; /* Column 4 quantity*/
        FK0WW00.FK0WM-QTY5 = 0; /* Column 5 quantity*/
        FK0WW00.FK0WM-QTY6 = 0; /* Column 6 quantity*/
        FK0WW00.FK0WM-QTY7 = 0; /* Column 7 quantity*/
        FK0WW00.FK0WM-QTY8 = 0; /* Column 8 quantity*/
        FK0WW00.FK0WM-QTY9 = 0; /* Column 9 quantity*/
        FK0WW00.FK0WM-QTY10 = 0; /* Column 10 quantity*/
        FK0WW00.FK0WM-QTY11 = 0; /* Column 11 quantity*/
        FK0WW00.FK0WM-QTY12 = 0; /* Column 12 quantity*/
      end
    end
  end
  ;
  FK0W-1900(); /* Close cmpnt join cursor*/
  ;
   /* --------------------------------------------------------------*/
   /* Add any partially formatted page to temporary storage.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0WW00.FK0WW-MAP-IDX > 1) /* Data formatted*/
    FK0W-1800(); /* Add page to temporary storage*/
  end
  ;
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If data was found, save map header information.  Otherwise,*/
   /* set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0WW00.TA5TSQIX == 0) /* If data was not found*/
    ;
    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    set FK0WM110.FK-VEND-CD bold;
    set FK0WM110.CATOAP cursor; /* Set cursor*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-REQUEST-DATA-SW = "N";
  FK0WW00.FK0WW-FMAT-MAP-SW = "Y";
  FK0WW00.FK0WW-SIDE-TO-DISP-SW = "L";
  ;
  ;
end // end FK0W-1000

// Select unique DCMPNT.VLRPSH01
Function FK0W-1100()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VLRPSH01 empty; /* Clear row storage area*/
  ;
  VLRPSH01.FBAMDNBR = FK0WW00.FBAMDNBR; /* LRPS number*/
  ;
  try
    call "IO6250" ("S ", SQLCA, VLRPSH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FKWREC.XXX-MOD-ID = "1100"; /* module id*/
      converseLib.validationFailed(15); /* No row for specified key value*/
      ;
      exit stack; /* Exit to display the map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCMPNT.VLRPSH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPSH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRPSH01.VLRPSH01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0W-1100

// Calculate map dates
Function FK0W-1200()
   /* ------------------------------------------------------------*/
   /* Calculate the prelim date.*/
   /* Prelim date = vlrpsh01.fb-buy-dt - 1 month.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-BUY-DT = VLRPSH01.FB8BUYDT;
  ;
  if (FK0WW00.FK0WW-BUY-MM == 1) /* If year end*/
    ;
    FK0WW00.FK0WW-BUY-MM = 12; /* move December to month*/
    FK0WW00.FK0WW-BUY-CCYY = FK0WW00.FK0WW-BUY-CCYY - 1; /* subract 1 yy*/
  else
    ;
    FK0WW00.FK0WW-BUY-MM = FK0WW00.FK0WW-BUY-MM - 1; /* subtract 1 mm*/
  end
  ;
  FK0WW00.FK0WW-MAP-DATE[4] = FK0WW00.FK0WW-BUY-DT; /* Prelim*/
  FK0WW00.FK0WM-HDR-TYPE[4] = "PRELIM"; /* Prelim*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the actual dates.*/
   /* Actual dates are the 3 months prior to the prelim date.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-BUY-DT = FK0WW00.FK0WW-MAP-DATE[4];
  ;
  FK0WW00.FK0WW-IDX = 3; /* Initialize index*/
  ;
  while (FK0WW00.FK0WW-IDX > 0) /* Calculate 3 months*/
    ;
    if (FK0WW00.FK0WW-BUY-MM == 1) /* If year end*/
      ;
      FK0WW00.FK0WW-BUY-MM = 12; /* move December to month*/
      FK0WW00.FK0WW-BUY-CCYY = FK0WW00.FK0WW-BUY-CCYY - 1; /* subract 1 yy*/
    else
      ;
      FK0WW00.FK0WW-BUY-MM = FK0WW00.FK0WW-BUY-MM - 1; /* subtract 1 mm*/
    end
    ;
    FK0WW00.FK0WW-MAP-DATE[FK0WW-IDX] = FK0WW00.FK0WW-BUY-DT;
    FK0WW00.FK0WM-HDR-TYPE[FK0WW-IDX] = "ACTUAL";
    ;
    FK0WW00.FK0WW-IDX = FK0WW00.FK0WW-IDX - 1; /* Decrement index*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the forecast dates.*/
   /* Forecast dates are the 4 months following the prelim date.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-BUY-DT = FK0WW00.FK0WW-MAP-DATE[4];
  ;
  FK0WW00.FK0WW-IDX = 5; /* Initialize index*/
  ;
  while (FK0WW00.FK0WW-IDX <= 12) /* Calculate all fcst months*/
    ;
    if (FK0WW00.FK0WW-BUY-MM == 12 /* If year end*/
    )                             
      FK0WW00.FK0WW-BUY-MM = 1; /* move January to month*/
      FK0WW00.FK0WW-BUY-CCYY = FK0WW00.FK0WW-BUY-CCYY + 1; /* subract 1 yy*/
    else
      ;
      FK0WW00.FK0WW-BUY-MM = FK0WW00.FK0WW-BUY-MM + 1; /* subtract 1 mm*/
    end
    ;
    FK0WW00.FK0WW-MAP-DATE[FK0WW-IDX] = FK0WW00.FK0WW-BUY-DT;
    FK0WW00.FK0WM-HDR-TYPE[FK0WW-IDX] = "FORCST";
    ;
    FK0WW00.FK0WW-IDX = FK0WW00.FK0WW-IDX + 1; /* Decrement index*/
  end
  ;
  ;
end // end FK0W-1200

// Declare csr for CMPNT join
Function FK0W-1400()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set FKZREC empty; /* Clear row storage area*/
  ;
  FKZREC.FK-VEND-CD = FK0WM110.FK-VEND-CD; /* Vendor code*/
  FKZREC.FK-MAT-NBR = "*"; /* Material number*/
  FKZREC.XMG-COLR-GRP-CD = "*"; /* Color group*/
  FKZREC.XCLCD = "*"; /* Color*/
  ;
  try
    call "FK1110" ("S1", SQLCA, FKZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE CMPNT JOIN    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "JOIN    "; /* Table view name*/
  TA1REC.TA1TBLKE = FKZREC.FKZREC-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0W-1400

// Fetch CMPNT join cursor
Function FK0W-1500()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "FK1110" ("N1", SQLCA, FKZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
        ;
        FK0WW00.FK0WW-END-CMPNT-SW = "Y"; /* Set end of table*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1500"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH CMPNT JOIN      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "JOIN    "; /* Table view name*/
  TA1REC.TA1TBLKE = FKZREC.FKZREC-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0W-1500

// Obtain data to display
Function FK0W-1600()
   /* --------------------------------------------------------------*/
   /* Accumulate lrps quantities into a working storage hold area.*/
   /* --------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-END-LRSTY-SW = "N"; /* Init end of cursor switch*/
  FK0WW00.FK0WW-TEMP-QTY1 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY2 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY3 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY4 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY5 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY6 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY7 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY8 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY9 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY10 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY11 = 0; /* Init qty*/
  FK0WW00.FK0WW-TEMP-QTY12 = 0; /* Init qty*/
  ;
  FK0W-1610(); /* Declare cursor for DCMPNT.VLRSTY01*/
  ;
  FK0W-1620(); /* Fetch DCMPNT.VLRSTY01 cursor*/
  ;
  ;
  while (FK0WW00.FK0WW-END-LRSTY-SW != "Y") /* Until end of cursor*/
    ;
       /* ==== Add quantities to working storage according to buy date ===*/
    ;
    if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[1])
      FK0WW00.FK0WW-TEMP-QTY1 = FK0WW00.FK0WW-TEMP-QTY1 + VLRSTY01.FB8FTQTB;
    else
      ;
      if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[2])
        FK0WW00.FK0WW-TEMP-QTY2 = FK0WW00.FK0WW-TEMP-QTY2 + VLRSTY01.FB8FTQTB;
      else
        ;
        if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[3])
          FK0WW00.FK0WW-TEMP-QTY3 = FK0WW00.FK0WW-TEMP-QTY3 + VLRSTY01.FB8FTQTB;
        else
          ;
          if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[4])
            FK0WW00.FK0WW-TEMP-QTY4 = FK0WW00.FK0WW-TEMP-QTY4 + VLRSTY01.FB8FTQTB;
          else
            ;
            if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[5])
              FK0WW00.FK0WW-TEMP-QTY5 = FK0WW00.FK0WW-TEMP-QTY5 + VLRSTY01.FB8FTQTB;
            else
              ;
              if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[6])
                FK0WW00.FK0WW-TEMP-QTY6 = FK0WW00.FK0WW-TEMP-QTY6 + VLRSTY01.FB8FTQTB;
              else
                ;
                if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[7])
                  FK0WW00.FK0WW-TEMP-QTY7 = FK0WW00.FK0WW-TEMP-QTY7 + VLRSTY01.FB8FTQTB;
                else
                  ;
                  if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[8])
                    FK0WW00.FK0WW-TEMP-QTY8 = FK0WW00.FK0WW-TEMP-QTY8 + VLRSTY01.FB8FTQTB;
                  else
                    ;
                    if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[9])
                      FK0WW00.FK0WW-TEMP-QTY9 = FK0WW00.FK0WW-TEMP-QTY9 + VLRSTY01.FB8FTQTB;
                    else
                      ;
                      if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[10])
                        FK0WW00.FK0WW-TEMP-QTY10 = FK0WW00.FK0WW-TEMP-QTY10 + VLRSTY01.FB8FTQTB;
                      else
                        ;
                        if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[11])
                          FK0WW00.FK0WW-TEMP-QTY11 = FK0WW00.FK0WW-TEMP-QTY11 + VLRSTY01.FB8FTQTB;
                        else
                          ;
                          if (VLRSTY01.FB8BUYDT == FK0WW00.FK0WW-MAP-DATE[12])
                            FK0WW00.FK0WW-TEMP-QTY12 = FK0WW00.FK0WW-TEMP-QTY12 + VLRSTY01.FB8FTQTB;
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    ;
    ;
    FK0W-1620(); /* Fetch DCMPNT.VLRSTY01 cursor*/
  end
  ;
  ;
     /* ======= Determine usage ========================================*/
  ;
  if (FKZREC.FK-MAT-FINL-USE != 0) /* Final usage*/
    FK0WW00.FK0WW-USAGE = FKZREC.FK-MAT-FINL-USE; /* Save usage*/
  else
    if (FKZREC.FK-MAT-PROD-USE != 0) /* Prod usage*/
      FK0WW00.FK0WW-USAGE = FKZREC.FK-MAT-PROD-USE; /* Save usage*/
    else
      FK0WW00.FK0WW-USAGE = FKZREC.FK-MAT-DEVL-USE; /* Save usage*/
    end
  end
  ;
  ;
     /* ======= convert lrps qty to manufacturing usage quantity =======*/
  ;
  FK0WW00.FK0WW-TEMP-QTY1 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY1   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY1));
  ;
  FK0WW00.FK0WW-TEMP-QTY2 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY2   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY2));
  ;
  FK0WW00.FK0WW-TEMP-QTY3 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY3   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY3));
  ;
  FK0WW00.FK0WW-TEMP-QTY4 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY4   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY4));
  ;
  FK0WW00.FK0WW-TEMP-QTY5 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY5   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY5));
  ;
  FK0WW00.FK0WW-TEMP-QTY6 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY6   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY6));
  ;
  FK0WW00.FK0WW-TEMP-QTY7 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY7   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY7));
  ;
  FK0WW00.FK0WW-TEMP-QTY8 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY8   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY8));
  ;
  FK0WW00.FK0WW-TEMP-QTY9 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY9   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY9));
  ;
  FK0WW00.FK0WW-TEMP-QTY10 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY10   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY10));
  ;
  FK0WW00.FK0WW-TEMP-QTY11 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY11   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY11));
  ;
  FK0WW00.FK0WW-TEMP-QTY12 = mathLib.round(FK0WW00.FK0WW-TEMP-QTY12   * FKZREC.FK-MAT-MFG-PCT   * FK0WW00.FK0WW-USAGE, -mathLib.decimals(FK0WW00.FK0WW-TEMP-QTY12));
  ;
  ;
  FK0WW00.FK0WM-QTY1 = FK0WW00.FK0WM-QTY1 + FK0WW00.FK0WW-TEMP-QTY1;
  FK0WW00.FK0WM-QTY2 = FK0WW00.FK0WM-QTY2 + FK0WW00.FK0WW-TEMP-QTY2;
  FK0WW00.FK0WM-QTY3 = FK0WW00.FK0WM-QTY3 + FK0WW00.FK0WW-TEMP-QTY3;
  FK0WW00.FK0WM-QTY4 = FK0WW00.FK0WM-QTY4 + FK0WW00.FK0WW-TEMP-QTY4;
  FK0WW00.FK0WM-QTY5 = FK0WW00.FK0WM-QTY5 + FK0WW00.FK0WW-TEMP-QTY5;
  FK0WW00.FK0WM-QTY6 = FK0WW00.FK0WM-QTY6 + FK0WW00.FK0WW-TEMP-QTY6;
  FK0WW00.FK0WM-QTY7 = FK0WW00.FK0WM-QTY7 + FK0WW00.FK0WW-TEMP-QTY7;
  FK0WW00.FK0WM-QTY8 = FK0WW00.FK0WM-QTY8 + FK0WW00.FK0WW-TEMP-QTY8;
  FK0WW00.FK0WM-QTY9 = FK0WW00.FK0WM-QTY9 + FK0WW00.FK0WW-TEMP-QTY9;
  FK0WW00.FK0WM-QTY10 = FK0WW00.FK0WM-QTY10 + FK0WW00.FK0WW-TEMP-QTY10;
  FK0WW00.FK0WM-QTY11 = FK0WW00.FK0WM-QTY11 + FK0WW00.FK0WW-TEMP-QTY11;
  FK0WW00.FK0WM-QTY12 = FK0WW00.FK0WM-QTY12 + FK0WW00.FK0WW-TEMP-QTY12;
  ;
  ;
  FK0W-1630(); /* Close DCMPNT.VLRSTY01 cursor*/
  ;
  ;
end // end FK0W-1600

// Declare DCMPNT.VLRSTY01 csr
Function FK0W-1610()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set VLRSTY01 empty; /* Clear row storage area*/
  ;
  VLRSTY01.FBAMDNBR = FK0WW00.FBAMDNBR; /* Model number*/
  VLRSTY01.SY1STNBR = FKZREC.SY1STNBR; /* Style*/
  ;
  if (FKZREC.XDMCD == " ") /* If style development product*/
    VLRSTY01.SY2CLRID = " "; /* Move spaces to lrps color*/
  else
    VLRSTY01.SY2CLRID = FKZREC.SY2CLRID; /* Color*/
  end
  ;
  VLRSTY01.XDMCD = FKZREC.XDMCD; /* Dimension*/
  VLRSTY01.FB8BUYDT = -1; /* Buy date*/
  ;
  ;
  try
    call "IO6170" ("S2", SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1610"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE DCMPNT.VLRSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0W-1610

// Fetch DCMPNT.VLRSTY01 csr
Function FK0W-1620()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6170" ("N2", SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0WW00.FK0WW-DATA-FOUND-SW = "Y"; /* Data was found*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
        ;
        FK0WW00.FK0WW-END-LRSTY-SW = "Y"; /* Set end of table*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DCMPNT.VLRSTY01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0W-1620

// Close DCMPNT.VLRSTY01 csr
Function FK0W-1630()
   /* ------------------------------------------------------------*/
   /* Close the cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6170" ("C2", SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DCMPNT.VLRSTY01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0W-1630

// Purge any temporary storage
Function FK0W-1700()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FK0WW01 empty; /* m110 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FK0WW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FK0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0W-1700

// Add page to temporary storage
Function FK0W-1800()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW01.XXXTSLEN = FK0WW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FK0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FK0WW01 empty; /* m110 display storage*/
    ;
    FK0WW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1800"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0W-1800

// Close CMPNT join csr
Function FK0W-1900()
   /* ------------------------------------------------------------*/
   /* Close the cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "FK1110" ("C1", SQLCA, FKZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1900"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CMPNT JOIN      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "JOIN    "; /* Table view name*/
  TA1REC.TA1TBLKE = FKZREC.FKZREC-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0W-1900

// Format and converse the map
Function FK0W-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0WW00.FK0WW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/
    ;
    FK0W-2100(); /* Format the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0WM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0WM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    set FK0WM110 alarm; /* Indicate sound alarm*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0WM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0WM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-MAP-IDX = 1; /* Init map index*/
  ;
  while (FK0WW00.FK0WW-MAP-IDX <= 14) /* Do this for map line*/
    ;
    if (FK0WM110.FK-MAT-NBR[FK0WW-MAP-IDX] == "      ") /* No data*/
      ;
      set FK0WM110.FK0WM-SELECT[FK0WW-MAP-IDX] invisible, skip;
      set FK0WM110.FK-MAT-NBR[FK0WW-MAP-IDX] invisible, skip;
      set FK0WM110.FK-DEPT-MAT-DESC[FK0WW-MAP-IDX] invisible, skip;
      set FK0WM110.FK0WM-QTY1[FK0WW-MAP-IDX] invisible, skip;
      set FK0WM110.FK0WM-QTY2[FK0WW-MAP-IDX] invisible, skip;
      set FK0WM110.FK0WM-QTY3[FK0WW-MAP-IDX] invisible, skip;
      set FK0WM110.FK0WM-QTY4[FK0WW-MAP-IDX] invisible, skip;
      set FK0WM110.FK0WM-QTY5[FK0WW-MAP-IDX] invisible, skip;
      set FK0WM110.FK0WM-QTY6[FK0WW-MAP-IDX] invisible, skip;
    end
    ;
    FK0WW00.FK0WW-MAP-IDX = FK0WW00.FK0WW-MAP-IDX + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Set map header dark if no data was found to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0WW00.TA5TSQIX == 0) /* If data not found*/
    ;
    FK0WW00.FK0WW-IDX = 1; /* Init index*/
    ;
    while (FK0WW00.FK0WW-IDX <= 6) /* For each date*/
      ;
      set FK0WM110.FK0WM-HDR-DT[FK0WW-IDX] invisible, skip; /* Set dark*/
      FK0WW00.FK0WW-IDX = FK0WW00.FK0WW-IDX + 1;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no message to display*/
    ;
    set FK0WM110.FK0WM-SELECT[1] cursor;
  end
  ;
  ;
  converse FK0WM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0WM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0WM110.CAITEM; /* Application data*/
  ;
  ;
end // end FK0W-2000

// Format the data to display
Function FK0W-2100()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK0WM110 initial; /* Initialize map*/
  ;
  FK0WW-FMAT-MAP-SW = "N"; /* Format map switch*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0WW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FK0WW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      if (FK0WW00.XXXTSPAG > FK0WW00.TA5TSQIX) /* Desireg page > highest*/
        FK0WW00.XXXTSPAG = FK0WW00.TA5TSQIX; /* Defaul to highest*/
      end
      ;
      FK0W-2110(); /* Obtain temp storage page*/
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0WM110.FK-VEND-CD = FK0WW01.FK-VEND-CD; /* Vendor cd*/
  FK0WM110.FK-VEND-SNM = FK0WW01.FK-VEND-SNM; /* Vendor short name*/
  ;
  FK0WM110.XXXTSPAG = FK0WW00.XXXTSPAG; /* Current page*/
  FK0WM110.TA5TSQIX = FK0WW00.TA5TSQIX; /* Max page*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If requested, format the left header*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0WW00.FK0WW-SIDE-TO-DISP-SW == "L") /* Left page to display*/
    ;
    FK0WW00.FK0WW-IDX = 1; /* Initialize idx*/
    ;
    while (FK0WW00.FK0WW-IDX <= 6) /* For each buy date*/
      ;
      FK0WW00.FK0WW-BUY-DT = FK0WW00.FK0WW-MAP-DATE[FK0WW-IDX]; /* Breakout date*/
      ;
      FK0WW00.FK0WW-FORMAT-YY = FK0WW00.FK0WW-BUY-YY; /* Format year*/
      FK0WW00.FK0WW-FORMAT-MM = FK0WW00.FK0WW-BUY-MM; /* Format month*/
      ;
      FK0WM110.FK0WM-HDR-DT[FK0WW-IDX] = FK0WW00.FK0WW-FORMAT-DT;
      FK0WM110.FK0WM-HDR-TYPE[FK0WW-IDX] = FK0WW00.FK0WM-HDR-TYPE[FK0WW-IDX];
      ;
      FK0WW00.FK0WW-IDX = FK0WW00.FK0WW-IDX + 1;
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If requested, format the right header*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0WW00.FK0WW-SIDE-TO-DISP-SW != "L") /* Right page to display*/
    ;
    FK0WW00.FK0WW-IDX = 1; /* Initialize idx*/
    FK0WW00.FK0WW-IDX2 = 7; /* Initialize idx2*/
    ;
    while (FK0WW00.FK0WW-IDX <= 6 /* For each buy date*/
     && FK0WW00.FK0WW-IDX2 <= 12)
      ;
      FK0WW00.FK0WW-BUY-DT = FK0WW00.FK0WW-MAP-DATE[FK0WW-IDX2]; /* Breakout date*/
      ;
      FK0WW00.FK0WW-FORMAT-YY = FK0WW00.FK0WW-BUY-YY; /* Format year*/
      FK0WW00.FK0WW-FORMAT-MM = FK0WW00.FK0WW-BUY-MM; /* Format month*/
      ;
      FK0WM110.FK0WM-HDR-DT[FK0WW-IDX] = FK0WW00.FK0WW-FORMAT-DT;
      FK0WM110.FK0WM-HDR-TYPE[FK0WW-IDX] = FK0WW00.FK0WM-HDR-TYPE[FK0WW-IDX2];
      ;
      FK0WW00.FK0WW-IDX = FK0WW00.FK0WW-IDX + 1;
      FK0WW00.FK0WW-IDX2 = FK0WW00.FK0WW-IDX2 + 1;
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If requested, format the left detail.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0WW00.FK0WW-SIDE-TO-DISP-SW == "L") /* Left page to display*/
    ;
    FK0WW00.FK0WW-MAP-IDX = 1; /* Initialize idx*/
    ;
    while (FK0WW00.FK0WW-MAP-IDX <= 14) /* For each map line*/
      ;
      FK0WM110.FK-MAT-NBR[FK0WW-MAP-IDX] = FK0WW01.FK-MAT-NBR[FK0WW-MAP-IDX]; /* Material*/
      FK0WM110.FK-DEPT-MAT-DESC[FK0WW-MAP-IDX] = FK0WW01.FK-DEPT-MAT-DESC[FK0WW-MAP-IDX]; /* Material desc*/
      FK0WM110.FK0WM-QTY1[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY1[FK0WW-MAP-IDX]; /* Qty 1*/
      FK0WM110.FK0WM-QTY2[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY2[FK0WW-MAP-IDX]; /* Qty 2*/
      FK0WM110.FK0WM-QTY3[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY3[FK0WW-MAP-IDX]; /* Qty 3*/
      FK0WM110.FK0WM-QTY4[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY4[FK0WW-MAP-IDX]; /* Qty 4*/
      FK0WM110.FK0WM-QTY5[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY5[FK0WW-MAP-IDX]; /* Qty 5*/
      FK0WM110.FK0WM-QTY6[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY6[FK0WW-MAP-IDX]; /* Qty 6*/
      ;
      FK0WW00.FK0WW-MAP-IDX = FK0WW00.FK0WW-MAP-IDX + 1;
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If requested, format the right detail.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0WW00.FK0WW-SIDE-TO-DISP-SW != "L") /* Right page to display*/
    ;
    FK0WW00.FK0WW-MAP-IDX = 1; /* Initialize idx*/
    ;
    while (FK0WW00.FK0WW-MAP-IDX <= 14) /* For each map line*/
      ;
      FK0WM110.FK-MAT-NBR[FK0WW-MAP-IDX] = FK0WW01.FK-MAT-NBR[FK0WW-MAP-IDX]; /* Material*/
      FK0WM110.FK-DEPT-MAT-DESC[FK0WW-MAP-IDX] = FK0WW01.FK-DEPT-MAT-DESC[FK0WW-MAP-IDX]; /* Material desc*/
      FK0WM110.FK0WM-QTY1[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY7[FK0WW-MAP-IDX]; /* Qty 7*/
      FK0WM110.FK0WM-QTY2[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY8[FK0WW-MAP-IDX]; /* Qty 8*/
      FK0WM110.FK0WM-QTY3[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY9[FK0WW-MAP-IDX]; /* Qty 9*/
      FK0WM110.FK0WM-QTY4[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY10[FK0WW-MAP-IDX]; /* Qty 10*/
      FK0WM110.FK0WM-QTY5[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY11[FK0WW-MAP-IDX]; /* Qty 11*/
      FK0WM110.FK0WM-QTY6[FK0WW-MAP-IDX] = FK0WW01.FK0WM-QTY12[FK0WW-MAP-IDX]; /* Qty 12*/
      ;
      FK0WW00.FK0WW-MAP-IDX = FK0WW00.FK0WW-MAP-IDX + 1;
    end
  end
  ;
  ;
  ;
end // end FK0W-2100

// Read page from temp storage
Function FK0W-2110()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FK0WW01.XXXTSLEN = FK0WW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FK0WW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FK0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "2110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FK0W-2110

// Check attention identifier
Function FK0W-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FKWREC.FK-VEND-CD[1] = FK0WM110.FK-VEND-CD; /* Vendor*/
    FKWREC.FBAMDNBR = FK0WW00.FBAMDNBR; /* Model number*/
    ;
    COMMAREA.CATOAP = "FK0W"; /* to applicaiton*/
    COMMAREA.CAITEM = " "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0WM110.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0WM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty; /* Initialize fkwrec*/
      ;
      FKWREC.FK-VEND-CD[1] = FK0WM110.FK-VEND-CD; /* Vendor*/
      FKWREC.FBAMDNBR = FK0WW00.FBAMDNBR; /* Model number*/
      ;
      COMMAREA.CATOAP = FK0WM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0WM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0WM110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, process PF key.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* FK0O requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* FK0P requested*/
   || converseVar.eventKey is pf14 /* FK0R requested*/
   || converseVar.eventKey is pf16) /* FK0T requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0WM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0V"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = "    "; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0P"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0R"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0T"; /* TO application*/
    end
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FKWREC.FK-VEND-CD[1] = FK0WM110.FK-VEND-CD; /* Vendor*/
    FKWREC.FBAMDNBR = FK0WW00.FBAMDNBR; /* Model number*/
    COMMAREA.CAITEM = FK0WM110.CAITEM; /* Application find code*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* Back*/
   && converseVar.eventKey not pf8   /* Fwrd*/
   && converseVar.eventKey not pf10  /* Left*/
   && converseVar.eventKey not pf11) /* Right*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK0W-3000

// Reset Highlighted fields
Function FK0W-4000()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK0WM110.FK-VEND-CD initialAttributes; /* Vender code*/
  ;
  FK0WW00.FK0WW-IDX = 1; /* Initialize index*/
  ;
  while (FK0WW00.FK0WW-IDX <= 6) /* For each date*/
    set FK0WM110.FK0WM-HDR-DT[FK0WW-IDX] initialAttributes; /* Header dates*/
    set FK0WM110.FK0WM-HDR-TYPE[FK0WW-IDX] initialAttributes; /* Header type*/
    FK0WW00.FK0WW-IDX = FK0WW00.FK0WW-IDX + 1;
  end
  ;
  ;
  FK0WW00.FK0WW-MAP-IDX = 1; /* Initialize index*/
  ;
  while (FK0WW00.FK0WW-MAP-IDX <= 14) /* For each line*/
    ;
    set FK0WM110.FK0WM-SELECT[FK0WW-MAP-IDX] initialAttributes; /* Select*/
    set FK0WM110.FK-MAT-NBR[FK0WW-MAP-IDX] initialAttributes; /* Thickness*/
    set FK0WM110.FK-DEPT-MAT-DESC[FK0WW-MAP-IDX] initialAttributes; /* Mtrl desc*/
    set FK0WM110.FK0WM-QTY1[FK0WW-MAP-IDX] initialAttributes; /* Qty 1*/
    set FK0WM110.FK0WM-QTY2[FK0WW-MAP-IDX] initialAttributes; /* Qty 2*/
    set FK0WM110.FK0WM-QTY3[FK0WW-MAP-IDX] initialAttributes; /* Qty 3*/
    set FK0WM110.FK0WM-QTY4[FK0WW-MAP-IDX] initialAttributes; /* Qty 4*/
    set FK0WM110.FK0WM-QTY5[FK0WW-MAP-IDX] initialAttributes; /* Qty 5*/
    set FK0WM110.FK0WM-QTY6[FK0WW-MAP-IDX] initialAttributes; /* Qty 6*/
    FK0WW00.FK0WW-MAP-IDX = FK0WW00.FK0WW-MAP-IDX + 1;
  end
  ;
  set FK0WM110.CATOAP initialAttributes; /* To application*/
  set FK0WM110.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FK0W-4000

// Verify entered fields
Function FK0W-5000()
   /* ---------------------------------------------------------------*/
   /* Verify application was not entered via fastpath.  If it was,*/
   /* set an error and exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0WM110.FK-VEND-CD == "  ") /* Vendor never entered*/
    ;
    converseLib.validationFailed(72); /* Can't fastpath into this application*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    set FK0WM110.CATOAP cursor; /* Set cursor*/
    ;
    exit stack; /* Exit to display the map*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0WM110.CAITEM > " ") /* Application data was entered*/
    ;
    set FK0WM110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7  /* Pf7 pressed*/
   || converseVar.eventKey is pf8  /* Pf8 pressed*/
   || converseVar.eventKey is pf10 /* Pf10 pressed*/
   || converseVar.eventKey is pf11) /* Pf11 pressed*/
    ;
    FK0W-5100(); /* Verify scroll request*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify the select fields.*/
   /* ---------------------------------------------------------------*/
  ;
  FK0WW00.FK0WW-COUNT = 0; /* Initialize count*/
  FK0WW00.FK0WW-MAP-IDX = 14; /* Initialize map index*/
  ;
  while (FK0WW00.FK0WW-MAP-IDX > 0) /* Check each map field*/
    ;
    if (FK0WM110.FK0WM-SELECT[FK0WW-MAP-IDX] != "S" /* If not selected*/
     && FK0WM110.FK0WM-SELECT[FK0WW-MAP-IDX] != " ") /* and not blank*/
      ;
      converseLib.validationFailed(13); /* Only 's' may be used to select a line*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      set FK0WM110.FK0WM-SELECT[FK0WW-MAP-IDX] cursor, bold; /* Highlight*/
    end
    ;
    if (FK0WM110.FK0WM-SELECT[FK0WW-MAP-IDX] == "S") /* If selected*/
      FK0WW00.FK0WW-COUNT = FK0WW00.FK0WW-COUNT + 1; /* Increment counter*/
    end
    ;
    FK0WW00.FK0WW-MAP-IDX = FK0WW00.FK0WW-MAP-IDX - 1; /* Decrement index*/
  end
  ;
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If no previous errors exist and enter was pressed, verify*/
   /* that exactly 1 line was selected.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* Enter pressed*/
    ;
    if (FK0WW00.FK0WW-COUNT != 1) /* If number of selects not = 1*/
      ;
      converseLib.validationFailed(73); /* 1 line must be selected*/
      FKWREC.XXX-MOD-ID = 5000; /* Module identification*/
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
end // end FK0W-5000

// Verify scroll request
Function FK0W-5100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FK0WW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FK0WW00.XXXTSPAG >= FK0WW00.TA5TSQIX) /* and no more pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FK0WW00.FK0WW-SIDE-TO-DISP-SW == "L") /* And already on left page*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(56); /* No more columns to left to display*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FK0WW00.FK0WW-SIDE-TO-DISP-SW == "R") /* And already on right page*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(57); /* No more columns to right to display*/
    ;
  end
  ;
  ;
  ;
  ;
end // end FK0W-5100

// Process valid request
Function FK0W-6000()
   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number*/
   /* and exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Back*/
    ;
    FK0WW00.FK0WW-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK0WW00.XXXTSPAG = FK0WW00.XXXTSPAG - 1; /* Decrement page to display*/
    ;
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number*/
   /* and exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Forward*/
    ;
    FK0WW00.FK0WW-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK0WW00.XXXTSPAG = FK0WW00.XXXTSPAG + 1; /* Decrement page to display*/
    ;
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If page left was requested, set page to display switch*/
   /* and exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Left*/
    ;
    FK0WW00.FK0WW-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK0WW00.FK0WW-SIDE-TO-DISP-SW = "L"; /* Display left page*/
    ;
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If page right was requested, set page to display switch*/
   /* and exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Right*/
    ;
    FK0WW00.FK0WW-FMAT-MAP-SW = "Y"; /* Format the map*/
    FK0WW00.FK0WW-SIDE-TO-DISP-SW = "R"; /* Display left page*/
    ;
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER pressed, exit to application FK0X.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* Enter was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FKWREC.FK-VEND-CD[1] = FK0WM110.FK-VEND-CD; /* Vendor*/
    FKWREC.FBAMDNBR = FK0WW00.FBAMDNBR; /* Model number*/
    ;
    FK0WW00.FK0WW-MAP-IDX = 1; /* Initialize index*/
    ;
    while (FK0WW00.FK0WW-MAP-IDX <= 14) /* For each map line*/
      ;
      if (FK0WM110.FK0WM-SELECT[FK0WW-MAP-IDX] == "S") /* If line selected*/
        ;
        FKWREC.FK-MAT-NBR[1] = FK0WW01.FK-MAT-NBR[FK0WW-MAP-IDX];
        FK0WW-MAP-IDX = 15; /* Get out while ya still can*/
      end
      ;
      FK0WW00.FK0WW-MAP-IDX = FK0WW00.FK0WW-MAP-IDX + 1;
    end
    ;
    COMMAREA.CATOAP = "FK0X"; /* to applicaiton*/
    COMMAREA.CAITEM = " "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0WM110.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
  ;
end // end FK0W-6000

//*** RECORD=FK0WW00 ****
// ----------------------------
// Application display storage.
// ----------------------------
// ***********************
Record FK0WW00 type basicRecord
  10 FK0WW-IDX FK0WW-IDX ; 
  10 FK0WW-IDX2 FK0WW-IDX2 ; 
  10 FK0WW-MAP-IDX FK0WW-MAP-IDX ; 
  10 FK0WW-REQUEST-DATA-SW FK0WW-REQUEST-DATA-SW ; 
  10 FK0WW-END-CMPNT-SW FK0WW-END-CMPNT-SW ; 
  10 FK0WW-END-LRSTY-SW FK0WW-END-LRSTY-SW ; 
  10 FK0WW-FMAT-MAP-SW FK0WW-FMAT-MAP-SW ; 
  10 FK0WW-DATA-FOUND-SW FK0WW-DATA-FOUND-SW ; 
  10 FK0WW-SIDE-TO-DISP-SW FK0WW-SIDE-TO-DISP-SW ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FBAMDNBR FBAMDNBR ; 
  10 FK0WM-HDR-TYPE FK0WM-HDR-TYPE [12] ; 
  10 FK0WW-MAP-DATE FK0WW-MAP-DATE [12] ; 
  10 FK0WW-BUY-DT FK0WW-BUY-DT ; 
    15 FK0WW-BUY-FILLER FK0WW-BUY-FILLER ; 
    15 FK0WW-BUY-CCYY FK0WW-BUY-CCYY ; 
      20 FK0WW-BUY-CC FK0WW-BUY-CC ; 
      20 FK0WW-BUY-YY FK0WW-BUY-YY ; 
    15 FK0WW-BUY-MM FK0WW-BUY-MM ; 
    15 FK0WW-BUY-DD FK0WW-BUY-DD ; 
  10 FK0WW-MFG-QTY FK0WW-MFG-QTY ; 
  10 FK0WW-FORMAT-DT FK0WW-FORMAT-DT ; 
    15 FK0WW-FORMAT-YY FK0WW-FORMAT-YY ; 
    15 FK0WW-FORMAT-MM FK0WW-FORMAT-MM ; 
  10 FK0WW-COUNT FK0WW-COUNT ; 
  10 FK0WW-HOLD-AREA FK0WW-HOLD-AREA ; 
    15 FK-VEND-SNM FK-VEND-SNM ; 
    15 FK-DEPT-MAT-DESC FK-DEPT-MAT-DESC ; 
    15 FK-MAT-NBR FK-MAT-NBR ; 
    15 FK0WM-QTY1 FK0WM-QTY1 ; 
    15 FK0WM-QTY2 FK0WM-QTY2 ; 
    15 FK0WM-QTY3 FK0WM-QTY3 ; 
    15 FK0WM-QTY4 FK0WM-QTY4 ; 
    15 FK0WM-QTY5 FK0WM-QTY5 ; 
    15 FK0WM-QTY6 FK0WM-QTY6 ; 
    15 FK0WM-QTY7 FK0WM-QTY7 ; 
    15 FK0WM-QTY8 FK0WM-QTY8 ; 
    15 FK0WM-QTY9 FK0WM-QTY9 ; 
    15 FK0WM-QTY10 FK0WM-QTY10 ; 
    15 FK0WM-QTY11 FK0WM-QTY11 ; 
    15 FK0WM-QTY12 FK0WM-QTY12 ; 
  10 FK0WW-TEMP-QTY1 FK0WW-TEMP-QTY1 ; 
  10 FK0WW-TEMP-QTY2 FK0WW-TEMP-QTY2 ; 
  10 FK0WW-TEMP-QTY3 FK0WW-TEMP-QTY3 ; 
  10 FK0WW-TEMP-QTY4 FK0WW-TEMP-QTY4 ; 
  10 FK0WW-TEMP-QTY5 FK0WW-TEMP-QTY5 ; 
  10 FK0WW-TEMP-QTY6 FK0WW-TEMP-QTY6 ; 
  10 FK0WW-TEMP-QTY7 FK0WW-TEMP-QTY7 ; 
  10 FK0WW-TEMP-QTY8 FK0WW-TEMP-QTY8 ; 
  10 FK0WW-TEMP-QTY9 FK0WW-TEMP-QTY9 ; 
  10 FK0WW-TEMP-QTY10 FK0WW-TEMP-QTY10 ; 
  10 FK0WW-TEMP-QTY11 FK0WW-TEMP-QTY11 ; 
  10 FK0WW-TEMP-QTY12 FK0WW-TEMP-QTY12 ; 
  10 FK0WW-USAGE FK0WW-USAGE ; 
end // end FK0WW00

//*** RECORD=FK0WW01 ****
// ------------------------
// Map 110 display storage.
// ------------------------
// ***********************
Record FK0WW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(2030) ; 
    10 FK-VEND-CD FK-VEND-CD ; 
    10 FK-VEND-SNM FK-VEND-SNM ; 
    10 FK-MAT-NBR FK-MAT-NBR [14] ; 
    10 FK-DEPT-MAT-DESC FK-DEPT-MAT-DESC [14] ; 
    10 FK0WM-QTY1 FK0WM-QTY1 [14] ; 
    10 FK0WM-QTY2 FK0WM-QTY2 [14] ; 
    10 FK0WM-QTY3 FK0WM-QTY3 [14] ; 
    10 FK0WM-QTY4 FK0WM-QTY4 [14] ; 
    10 FK0WM-QTY5 FK0WM-QTY5 [14] ; 
    10 FK0WM-QTY6 FK0WM-QTY6 [14] ; 
    10 FK0WM-QTY7 FK0WM-QTY7 [14] ; 
    10 FK0WM-QTY8 FK0WM-QTY8 [14] ; 
    10 FK0WM-QTY9 FK0WM-QTY9 [14] ; 
    10 FK0WM-QTY10 FK0WM-QTY10 [14] ; 
    10 FK0WM-QTY11 FK0WM-QTY11 [14] ; 
    10 FK0WM-QTY12 FK0WM-QTY12 [14] ; 
end // end FK0WW01

// Header type
DataItem FK0WM-HDR-TYPE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Column 1 quantity
DataItem FK0WM-QTY1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 10 quantity
DataItem FK0WM-QTY10 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 11 quantity
DataItem FK0WM-QTY11 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 12 quantity
DataItem FK0WM-QTY12 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Colunn 2 quantity
DataItem FK0WM-QTY2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 3 quantity
DataItem FK0WM-QTY3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 4 quantity
DataItem FK0WM-QTY4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 5 quantity
DataItem FK0WM-QTY5 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 6 quantity
DataItem FK0WM-QTY6 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 7 quantity
DataItem FK0WM-QTY7 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 8 quantity
DataItem FK0WM-QTY8 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 9 quantity
DataItem FK0WM-QTY9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Buy date century
DataItem FK0WW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy date century and year
DataItem FK0WW-BUY-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy date day
DataItem FK0WW-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Footwear buy date
DataItem FK0WW-BUY-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy date leading zero
DataItem FK0WW-BUY-FILLER num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy date month
DataItem FK0WW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy date year
DataItem FK0WW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generic counter
DataItem FK0WW-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data was found switch
DataItem FK0WW-DATA-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of component csr switch
DataItem FK0WW-END-CMPNT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of lrps style csr switch
DataItem FK0WW-END-LRSTY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FK0WW-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header dates
DataItem FK0WW-FORMAT-DT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Header date month
DataItem FK0WW-FORMAT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Header date year
DataItem FK0WW-FORMAT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold area used in fk0w
DataItem FK0WW-HOLD-AREA char(156)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic index
DataItem FK0WW-IDX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generic index2
DataItem FK0WW-IDX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map dates
DataItem FK0WW-MAP-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generic index
DataItem FK0WW-MAP-IDX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Manufacturing quantity
DataItem FK0WW-MFG-QTY decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request data switch
DataItem FK0WW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Side to display switch
DataItem FK0WW-SIDE-TO-DISP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Column 1 temporary quantity
DataItem FK0WW-TEMP-QTY1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 10 temporary quantity
DataItem FK0WW-TEMP-QTY10 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 11 temporary quantity
DataItem FK0WW-TEMP-QTY11 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 12 temporary quantity
DataItem FK0WW-TEMP-QTY12 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 2 temporary quantity
DataItem FK0WW-TEMP-QTY2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 3 temporary quantity
DataItem FK0WW-TEMP-QTY3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 4 temporary quantity
DataItem FK0WW-TEMP-QTY4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 5 temporary quantity
DataItem FK0WW-TEMP-QTY5 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 6 temporary quantity
DataItem FK0WW-TEMP-QTY6 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 7 temporary quantity
DataItem FK0WW-TEMP-QTY7 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 8 temporary quantity
DataItem FK0WW-TEMP-QTY8 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Column 9 temporary quantity
DataItem FK0WW-TEMP-QTY9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Material usage
DataItem FK0WW-USAGE decimal(7,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

