package fk0v;

import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import fb.common.FBAMDNBR;
import fk.common.FK-VEND-CD;
import fk.common.FK-VEND-SNM;
import fk.common.FKWREC;
import fk.common.FKZREC;
import ta.common.TA1REC;
import ta.common.TAEREC;
import vv.common.VLRPSH01;
import vv.common.VLRSTY01;
import vv.common.VVNDR001;
//*** PROGRAM=FK0V ****
// LRPS BY VENDOR INQUIRY.
// 
// THIS PROGRAM IS PART OF THE COMPONENTS FORECASTING SYSTEM.
// THIS APPLICATION PROVIDES INQUIRY CAPABILITY FOR LRPS BY
// VENDOR.  THE USER WILL ENTER A MATERIAL OR BAG LRPS
// NUMBER AND A VENDOR.  THE APPLICATION WILL RETRIEVE ALL
// LRPS QUANTITIES FOR THE KEY DATA ENTERED AND DISPLAY IT
// ON THE MAP.  SINCE DATA WILL BE GATHERED FOR ONE VENDOR,
// ONLY ONE DETAIL LINE WILL BE FORMATTED ON THE MAP.
// 
// THE USER MAY EXIT TO ANY ALLOWED APPLICATION VIA
// FAST PATH OR PF KEYS, WITH THE OPTION FIELDS AVAILABLE
// FOR USE WITH ANY APPLICATION TRANSFER.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      03/05/92  JALLE1  New application.
//          07/21/92  JALLE1  Fix COMMAREA data pass.
//          09/29/92  JALLE1  Use mtl lrps only.
//          08/10/93  JALLE1  Remove references to FBDMDTYP
//                            for Aug '93 table changes.
// 
// Y2KFIX   11/13/97  VRAMAC  Y2K MODIFICATION MADE TO:
//                            FK0VM110 : CHANGE FK0VM-HDR-DT
//                            TO ALLOW '00' FOR YEAR 2000
// 
// *********************
Program FK0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FK0VW00 FK0VW00; // record
  FKWREC FKWREC; // record
  FKZREC FKZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VLRPSH01 VLRPSH01; // record
  VLRSTY01 VLRSTY01; // record
  VVNDR001 VVNDR001; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FK0VM.FK0VM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FK0VM110 initial; /* map input/output*/
    set FK0VW00 empty; /* Application working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/
    ;
    FK0VM110.FK0VM-MTL-LRPS-NBR = FKWREC.FBAMDNBR;
    FK0VM110.FK-VEND-CD = FKWREC.FK-VEND-CD[1]; /* Save vendor*/
    ;
    if (FKWREC.FBAMDNBR != 0 /* Model number passed*/
     && FKWREC.FK-VEND-CD[1] != " ") /* Vendor passed*/
      ;
      FK0VW00.FK0VW-REQUEST-DATA-SW = "Y"; /* Request the data*/
    else
      ;
      FK0VW00.FK0VW-REQUEST-DATA-SW = "N"; /* Don't request the data*/
    end
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FK0VW00.FK0VW-DATA-FOUND-SW = "N"; /* Data not found yet*/
    FK0VW00.FK0VW-FMAT-MAP-SW = "N"; /* Don't format the map*/
    FK0VW00.FK0VW-SIDE-TO-DISP-SW = "L"; /* Display left side*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0V-0001; /* Converse the main process*/
    ;
    ;
    FK0V-0001: FK0V-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FK0V-0001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FK0V

// Main process to display a map
Function FK0V-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FK0V-1000(); /* Obtain the data to display*/
  ;
  FK0V-2000(); /* Format and display the map*/
  ;
  FK0V-3000(); /* Check attention identifier*/
  ;
  FK0V-4000(); /* Reset fields to normal intensity*/
  ;
  FK0V-5000(); /* Verify the entered data*/
  ;
  FK0V-6000(); /* Process valid input request*/
  ;
  ;
end // end FK0V-0001

// Obtain data to display
Function FK0V-1000()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0VW00.FK0VW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Determine lrps number and type and save to working storage.*/
   /* --------------------------------------------------------------*/
  ;
  FK0VW00.FBAMDNBR = FK0VM110.FK0VM-MTL-LRPS-NBR; /* Lrps nbr*/
  ;
  FK0VW00.FK0VW-DATA-FOUND-SW = "N"; /* Init data found switch*/
  ;
   /* --------------------------------------------------------------*/
   /* Obtain the lrps header record.*/
   /* --------------------------------------------------------------*/
  ;
  FK0V-1100(); /* Get lrps header*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Calculate dates to be used on the map.*/
   /* --------------------------------------------------------------*/
  ;
  FK0V-1200(); /* Calculate dates*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Select the vendor record.*/
   /* --------------------------------------------------------------*/
  ;
  FK0V-1300(); /* Select vendor*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Accumulate lrps quantities into a working storage hold area.*/
   /* --------------------------------------------------------------*/
  ;
  move 0 to FK0VW00.FK0VM-QTY[1] for all; /* Init quantities*/
  FK0VW00.FK0VW-END-CMPNT-SW = "N"; /* Init end of cursor switch*/
  ;
  FK0V-1400(); /* Declare cursor to join cmpnt tables*/
  ;
  FK0V-1500(); /* Fetch cmpnt join cursor*/
  ;
  ;
  while (FK0VW00.FK0VW-END-CMPNT-SW != "Y") /* Until end of cursor*/
    ;
    move 0 to FK0VW00.FK0VW-HOLD-QTY[1] for all; /* Init hold quantities*/
    FK0VW00.FK0VW-END-LRSTY-SW = "N"; /* Init end of cursor switch*/
    ;
    FK0V-1600(); /* Declare cursor for DCMPNT.VLRSTY01*/
    ;
    FK0V-1700(); /* Fetch DCMPNT.VLRSTY01 cursor*/
    ;
    ;
    while (FK0VW00.FK0VW-END-LRSTY-SW != "Y") /* Until end of cursor*/
      ;
       /* ==== Add quantities to working storage according to buy date ===*/
      ;
      FK0VW00.FK0VW-INDEX = 1; /* Initialize index*/
      ;
      while (FK0VW00.FK0VW-INDEX <= 14) /* For each buy date*/
        ;
        if (VLRSTY01.FB8BUYDT == FK0VW00.FK0VW-MAP-DATE[FK0VW-INDEX])
          FK0VW00.FK0VW-HOLD-QTY[FK0VW-INDEX] = FK0VW00.FK0VW-HOLD-QTY[FK0VW-INDEX] + VLRSTY01.FB8FTQTB;
          FK0VW00.FK0VW-INDEX = 15; /* Get out while ya still can*/
        end
        ;
        FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX + 1; /* Increment*/
      end
      ;
      FK0V-1700(); /* Fetch DCMPNT.VLRSTY01 cursor*/
    end
    ;
    FK0V-1800(); /* Close DCMPNT.VLRSTY01 cursor*/
    ;
    ;
     /* ======= convert lrps qty to manufacturing usage quantity =======*/
    ;
    FK0VW00.FK0VW-INDEX = 1; /* Initialize index*/
    ;
    while (FK0VW00.FK0VW-INDEX <= 14) /* For each buy date*/
      ;
      if (FKZREC.FK-MAT-FINL-USE != 0) /* Final usage*/
        ;
        FK0VW00.FK0VW-MFG-QTY = mathLib.round(FK0VW00.FK0VW-HOLD-QTY[FK0VW-INDEX]         * FKZREC.FK-MAT-MFG-PCT         * FKZREC.FK-MAT-FINL-USE, -mathLib.decimals(FK0VW00.FK0VW-MFG-QTY));
        FK0VW00.FK0VM-QTY[FK0VW-INDEX] = mathLib.round(FK0VW00.FK0VM-QTY[FK0VW-INDEX]         + FK0VW-MFG-QTY, -mathLib.decimals(FK0VW00.FK0VM-QTY[FK0VW-INDEX])); /* Add to map quantity*/
      else
        ;
        if (FKZREC.FK-MAT-FINL-USE == 0 /* Final usage*/
         && FKZREC.FK-MAT-PROD-USE != 0) /* Prod usage*/
          ;
          FK0VW00.FK0VW-MFG-QTY = mathLib.round(FK0VW00.FK0VW-HOLD-QTY[FK0VW-INDEX]           * FKZREC.FK-MAT-MFG-PCT           * FKZREC.FK-MAT-PROD-USE, -mathLib.decimals(FK0VW00.FK0VW-MFG-QTY));
          FK0VW00.FK0VM-QTY[FK0VW-INDEX] = mathLib.round(FK0VW00.FK0VM-QTY[FK0VW-INDEX]           + FK0VW-MFG-QTY, -mathLib.decimals(FK0VW00.FK0VM-QTY[FK0VW-INDEX])); /* Add to map quantity*/
        else
          ;
          FK0VW00.FK0VW-MFG-QTY = mathLib.round(FK0VW00.FK0VW-HOLD-QTY[FK0VW-INDEX]           * FKZREC.FK-MAT-MFG-PCT           * FKZREC.FK-MAT-DEVL-USE, -mathLib.decimals(FK0VW00.FK0VW-MFG-QTY));
          FK0VW00.FK0VM-QTY[FK0VW-INDEX] = mathLib.round(FK0VW00.FK0VM-QTY[FK0VW-INDEX]           + FK0VW-MFG-QTY, -mathLib.decimals(FK0VW00.FK0VM-QTY[FK0VW-INDEX])); /* Add to map quantity*/
        end
      end
      ;
      FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX + 1; /* Increment*/
    end
    ;
    FK0V-1500(); /* Fetch cmpnt join cursor*/
  end
  ;
  FK0V-1900(); /* Close cmpnt join cursor*/
  ;
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If data was found, save map header information.  Otherwise,*/
   /* set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/
  ;
  if (FK0VW00.FK0VW-DATA-FOUND-SW == "Y") /* If data was found*/
    ;
    FK0VW00.FK0VM-MTL-LRPS-NBR = FK0VM110.FK0VM-MTL-LRPS-NBR;
    FK0VW00.FK-VEND-CD = FK0VM110.FK-VEND-CD;
  else
    ;
    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
    set FK0VM110.FK0VM-MTL-LRPS-NBR cursor, bold;
    set FK0VM110.FK-VEND-CD bold;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-SIDE-TO-DISP-SW = "L";
  FK0VW00.FK0VW-REQUEST-DATA-SW = "N";
  FK0VW00.FK0VW-FMAT-MAP-SW = "Y";
  ;
  ;
end // end FK0V-1000

// Select unique DCMPNT.VLRPSH01
Function FK0V-1100()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VLRPSH01 empty; /* Clear row storage area*/
  ;
  VLRPSH01.FBAMDNBR = FK0VW00.FBAMDNBR; /* LRPS number*/
  ;
  try
    call "IO6250" ("S ", SQLCA, VLRPSH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      set FK0VM110.FK0VM-MTL-LRPS-NBR cursor, bold;
      FKWREC.XXX-MOD-ID = "1100"; /* module id*/
      converseLib.validationFailed(15); /* No row for specified key value*/
      ;
      exit stack; /* Exit to display the map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCMPNT.VLRPSH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPSH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRPSH01.VLRPSH01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0V-1100

// Calculate map dates
Function FK0V-1200()
   /* ------------------------------------------------------------*/
   /* Calculate the prelim date.*/
   /* Prelim date = vlrpsh01.fb-buy-dt - 1 month.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-BUY-DT = VLRPSH01.FB8BUYDT;
  ;
  if (FK0VW00.FK0VW-BUY-MM == 1) /* If year end*/
    ;
    FK0VW00.FK0VW-BUY-MM = 12; /* move December to month*/
    FK0VW00.FK0VW-BUY-CCYY = FK0VW00.FK0VW-BUY-CCYY - 1; /* subract 1 yy*/
  else
    ;
    FK0VW00.FK0VW-BUY-MM = FK0VW00.FK0VW-BUY-MM - 1; /* subtract 1 mm*/
  end
  ;
  FK0VW00.FK0VW-MAP-DATE[4] = FK0VW00.FK0VW-BUY-DT; /* Prelim*/
  FK0VW00.FK0VM-HDR-TYPE[4] = "PRELIM";
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the actual dates.*/
   /* Actual dates are the 3 months prior to the prelim date.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-BUY-DT = FK0VW00.FK0VW-MAP-DATE[4];
  ;
  FK0VW00.FK0VW-INDEX = 3; /* Initialize index*/
  ;
  while (FK0VW00.FK0VW-INDEX > 0) /* Calculate 3 months*/
    ;
    if (FK0VW00.FK0VW-BUY-MM == 1) /* If year end*/
      ;
      FK0VW00.FK0VW-BUY-MM = 12; /* move December to month*/
      FK0VW00.FK0VW-BUY-CCYY = FK0VW00.FK0VW-BUY-CCYY - 1; /* subract 1 yy*/
    else
      ;
      FK0VW00.FK0VW-BUY-MM = FK0VW00.FK0VW-BUY-MM - 1; /* subtract 1 mm*/
    end
    ;
    FK0VW00.FK0VW-MAP-DATE[FK0VW-INDEX] = FK0VW00.FK0VW-BUY-DT;
    FK0VW00.FK0VM-HDR-TYPE[FK0VW-INDEX] = "ACTUAL";
    ;
    FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX - 1; /* Decrement index*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the forecast dates.*/
   /* Forecast dates are the 10 months following the prelim date.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-BUY-DT = FK0VW00.FK0VW-MAP-DATE[4];
  ;
  FK0VW00.FK0VW-INDEX = 5; /* Initialize index*/
  ;
  while (FK0VW00.FK0VW-INDEX < 15) /* Calculate 10 months*/
    ;
    if (FK0VW00.FK0VW-BUY-MM == 12 /* If year end*/
    )                             
      FK0VW00.FK0VW-BUY-MM = 1; /* move January to month*/
      FK0VW00.FK0VW-BUY-CCYY = FK0VW00.FK0VW-BUY-CCYY + 1; /* subract 1 yy*/
    else
      ;
      FK0VW00.FK0VW-BUY-MM = FK0VW00.FK0VW-BUY-MM + 1; /* subtract 1 mm*/
    end
    ;
    FK0VW00.FK0VW-MAP-DATE[FK0VW-INDEX] = FK0VW00.FK0VW-BUY-DT;
    FK0VW00.FK0VM-HDR-TYPE[FK0VW-INDEX] = "FORCST";
    ;
    FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX + 1; /* Decrement index*/
  end
  ;
  ;
end // end FK0V-1200

// Select unique DCMPNT.VVNDR001
Function FK0V-1300()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VVNDR001 empty; /* Clear row storage area*/
  ;
  VVNDR001.FK-VEND-CD = FK0VM110.FK-VEND-CD; /* Vendor code*/
  ;
  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0VW00.FK-VEND-SNM = VVNDR001.FK-VEND-SNM; /* Vendor desc*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FK0VW00.FK-VEND-SNM = "************"; /* Clear field*/
      set FK0VM110.FK-VEND-CD cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "1300"; /* module id*/
      converseLib.validationFailed(15); /* No row for specified key value*/
      ;
      exit stack; /* Exit to display the map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCMPNT.VVNDR001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0V-1300

// Declare csr for CMPNT join
Function FK0V-1400()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set FKZREC empty; /* Clear row storage area*/
  ;
  FKZREC.FK-VEND-CD = FK0VM110.FK-VEND-CD; /* Vendor code*/
  FKZREC.FK-MAT-NBR = "*"; /* Material number*/
  FKZREC.XMG-COLR-GRP-CD = "*"; /* Color group*/
  FKZREC.XCLCD = "*"; /* Color*/
  ;
  try
    call "FK1110" ("S1", SQLCA, FKZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE CMPNT JOIN    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "JOIN    "; /* Table view name*/
  TA1REC.TA1TBLKE = FKZREC.FKZREC-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0V-1400

// Fetch CMPNT join cursor
Function FK0V-1500()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "FK1110" ("N1", SQLCA, FKZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
        ;
        FK0VW00.FK0VW-END-CMPNT-SW = "Y"; /* Set end of table*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1500"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH CMPNT JOIN      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "JOIN    "; /* Table view name*/
  TA1REC.TA1TBLKE = FKZREC.FKZREC-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0V-1500

// Declare DCMPNT.VLRSTY01 csr
Function FK0V-1600()
   /* ------------------------------------------------------------*/
   /* Declare a cursor.*/
   /* ------------------------------------------------------------*/
  ;
  set VLRSTY01 empty; /* Clear row storage area*/
  ;
  VLRSTY01.FBAMDNBR = FK0VW00.FBAMDNBR; /* Model number*/
  VLRSTY01.SY1STNBR = FKZREC.SY1STNBR; /* Style*/
  ;
  if (FKZREC.XDMCD == " ") /* If style development product*/
    VLRSTY01.SY2CLRID = " "; /* Move spaces to color*/
  else
    VLRSTY01.SY2CLRID = FKZREC.SY2CLRID; /* Color*/
  end
  ;
  VLRSTY01.XDMCD = FKZREC.XDMCD; /* Dimension*/
  VLRSTY01.FB8BUYDT = -1; /* Buy date*/
  ;
  ;
  try
    call "IO6170" ("S2", SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1600"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE DCMPNT.VLRSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0V-1600

// Fetch DCMPNT.VLRSTY01 csr
Function FK0V-1700()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6170" ("N2", SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FK0VW00.FK0VW-DATA-FOUND-SW = "Y"; /* Data was found*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
        ;
        FK0VW00.FK0VW-END-LRSTY-SW = "Y"; /* Set end of table*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1700"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DCMPNT.VLRSTY01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0V-1700

// Close DCMPNT.VLRSTY01 csr
Function FK0V-1800()
   /* ------------------------------------------------------------*/
   /* Close the cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6170" ("C2", SQLCA, VLRSTY01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1800"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DCMPNT.VLRSTY01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLRSTY01.VLRSTY01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0V-1800

// Close CMPNT join csr
Function FK0V-1900()
   /* ------------------------------------------------------------*/
   /* Close the cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "FK1110" ("C1", SQLCA, FKZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-REQUEST-DATA-SW = "N";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1900"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CMPNT JOIN      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "JOIN    "; /* Table view name*/
  TA1REC.TA1TBLKE = FKZREC.FKZREC-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FK0V-1900

// Format and converse the map
Function FK0V-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0VW00.FK0VW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/
    ;
    FK0V-2100(); /* Format the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FK0VM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FK0VM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FK0VM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    set FK0VM110 alarm; /* Indicate sound alarm*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FK0VM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FK0VM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/
    ;
  end
  ;
  FK0VM110.FK-VEND-SNM = FK0VW00.FK-VEND-SNM;
  ;
   /* ------------------------------------------------------------*/
   /* Set detail line dark if no data to display.*/
   /* Also set the header date dark.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0VW00.FK0VW-DATA-FOUND-SW != "Y") /* If no data found*/
    ;
    FK0VW00.FK0VW-INDEX = 1; /* Init index*/
    ;
    while (FK0VW00.FK0VW-INDEX <= 7) /* Do this for each date*/
      ;
      set FK0VM110.FK0VM-HDR-TYPE[FK0VW-INDEX] invisible, skip;
      set FK0VM110.FK0VM-HDR-DT[FK0VW-INDEX] invisible, skip;
      set FK0VM110.FK0VM-QTY[FK0VW-INDEX] invisible, skip;
      FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX + 1;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0 /* If no message to display*/
   || FKWREC.XXXMSGNO == 1)             /* or update complete*/
    ;
    if (FK0VM110.FK0VM-MTL-LRPS-NBR != 0) /* Mtl lrps entered*/
      ;
      set FK0VM110.FK-VEND-CD cursor;
    else
      ;
      set FK0VM110.FK0VM-MTL-LRPS-NBR cursor; /* Mtl lrps number*/
    end
  end
  ;
  ;
  converse FK0VM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FK0VM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FK0VM110.CAITEM; /* Application data*/
  ;
  ;
end // end FK0V-2000

// Format the data to display
Function FK0V-2100()
   /* --------------------------------------------------------------------*/
   /* Reset format switch.*/
   /* --------------------------------------------------------------------*/
  ;
  ;
  FK0VW-FMAT-MAP-SW = "N"; /* Format map switch*/
  ;
  ;
  ;
  ;
  ;
  set FK0VM110 initial; /* Initialize map*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format header data in the map.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0VM110.FK-VEND-CD = FK0VW00.FK-VEND-CD; /* Vendor cd*/
  FK0VM110.FK0VM-MTL-LRPS-NBR = FK0VW00.FK0VM-MTL-LRPS-NBR;
  ;
   /* --------------------------------------------------------------------*/
   /* If requested, format the left header.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0VW00.FK0VW-SIDE-TO-DISP-SW == "L") /* Left side to display*/
    ;
    FK0VW00.FK0VW-INDEX = 1; /* Initialize index*/
    ;
    while (FK0VW00.FK0VW-INDEX <= 7) /* For each buy date*/
      ;
      FK0VW00.FK0VW-BUY-DT = FK0VW00.FK0VW-MAP-DATE[FK0VW-INDEX]; /* Breakout date*/
      ;
      FK0VW00.FK0VW-FORMAT-YY = FK0VW00.FK0VW-BUY-YY; /* Format year*/
      FK0VW00.FK0VW-FORMAT-MM = FK0VW00.FK0VW-BUY-MM; /* Format month*/
      ;
      FK0VM110.FK0VM-HDR-DT[FK0VW-INDEX] = FK0VW00.FK0VW-FORMAT-DT;
      FK0VM110.FK0VM-HDR-TYPE[FK0VW-INDEX] = FK0VW00.FK0VM-HDR-TYPE[FK0VW-INDEX];
      ;
      FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX + 1;
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If requested, format the right header.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0VW00.FK0VW-SIDE-TO-DISP-SW != "L") /* Right side to display*/
    ;
    FK0VW00.FK0VW-INDEX = 8; /* Initialize index*/
    FK0VW00.FK0VW-INDEX2 = 1; /* Initialize index2*/
    ;
    while (FK0VW00.FK0VW-INDEX <= 14) /* For each buy date*/
      ;
      FK0VW00.FK0VW-BUY-DT = FK0VW00.FK0VW-MAP-DATE[FK0VW-INDEX]; /* Breakout date*/
      ;
      FK0VW00.FK0VW-FORMAT-YY = FK0VW00.FK0VW-BUY-YY; /* Format year*/
      FK0VW00.FK0VW-FORMAT-MM = FK0VW00.FK0VW-BUY-MM; /* Format month*/
      ;
      FK0VM110.FK0VM-HDR-DT[FK0VW-INDEX2] = FK0VW00.FK0VW-FORMAT-DT;
      FK0VM110.FK0VM-HDR-TYPE[FK0VW-INDEX2] = FK0VW00.FK0VM-HDR-TYPE[FK0VW-INDEX];
      ;
      FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX + 1;
      FK0VW00.FK0VW-INDEX2 = FK0VW00.FK0VW-INDEX2 + 1;
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If requested, format the left detail.*/
   /* --------------------------------------------------------------------*/
  ;
  FK0VW00.FK0VW-INDEX = 1; /* Initialize index*/
  ;
  while (FK0VW00.FK0VW-INDEX <= 7) /* For each buy date*/
    ;
    FK0VM110.FK0VM-QTY[FK0VW-INDEX] = FK0VW00.FK0VM-QTY[FK0VW-INDEX];
    ;
    FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX + 1;
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If requested, format the right detail.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FK0VW00.FK0VW-SIDE-TO-DISP-SW != "L") /* Right side to display*/
    ;
    FK0VW00.FK0VW-INDEX = 8; /* Initialize index*/
    FK0VW00.FK0VW-INDEX2 = 1; /* Initialize index2*/
    ;
    while (FK0VW00.FK0VW-INDEX <= 14) /* For each buy date*/
      ;
      FK0VM110.FK0VM-QTY[FK0VW-INDEX2] = FK0VW00.FK0VM-QTY[FK0VW-INDEX];
      ;
      FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX + 1;
      FK0VW00.FK0VW-INDEX2 = FK0VW00.FK0VW-INDEX2 + 1;
    end
  end
  ;
  ;
  ;
end // end FK0V-2100

// Check attention identifier
Function FK0V-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FKWREC.FBAMDNBR = FK0VM110.FK0VM-MTL-LRPS-NBR; /* Lrps nbr*/
    FKWREC.FK-VEND-CD[1] = FK0VM110.FK-VEND-CD; /* Vendor*/
    ;
    COMMAREA.CATOAP = "FK0V"; /* to applicaiton*/
    COMMAREA.CAITEM = " "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0VM110.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0VM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty; /* Initialize fkwrec*/
      ;
      FKWREC.FBAMDNBR = FK0VM110.FK0VM-MTL-LRPS-NBR; /* Lrps nbr*/
      FKWREC.FK-VEND-CD[1] = FK0VM110.FK-VEND-CD; /* Vendor*/
      ;
      COMMAREA.CATOAP = FK0VM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FK0VM110.CAITEM; /* item*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FK0VM110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, process PF key.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* HELP requested*/
   || converseVar.eventKey is pf3  /* FK0O requested*/
   || converseVar.eventKey is pf4  /* MSTR MN requested*/
   || converseVar.eventKey is pf12 /* FK0P requested*/
   || converseVar.eventKey is pf14 /* FK0R requested*/
   || converseVar.eventKey is pf15 /* FK0S requested*/
   || converseVar.eventKey is pf16) /* FK0T requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FK0VM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FK0O"; /* TO application*/
      COMMAREA.CAITEM = FK0VM110.CAITEM; /* Item*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = "    "; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FK0P"; /* TO application*/
      COMMAREA.CAITEM = FK0VM110.CAITEM; /* Item*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FK0R"; /* TO application*/
      COMMAREA.CAITEM = FK0VM110.CAITEM; /* Item*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FK0S"; /* TO application*/
      COMMAREA.CAITEM = FK0VM110.CAITEM; /* Item*/
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FK0T"; /* TO application*/
      COMMAREA.CAITEM = FK0VM110.CAITEM; /* Item*/
    end
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FKWREC.FBAMDNBR = FK0VM110.FK0VM-MTL-LRPS-NBR; /* Lrps nbr*/
    FKWREC.FK-VEND-CD[1] = FK0VM110.FK-VEND-CD; /* Vendor*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf10  /* PF10 was not pressed*/
   && converseVar.eventKey not pf11) /* PF11 was not pressed*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FK0V-3000

// Reset Highlighted fields
Function FK0V-4000()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/
  ;
  set FK0VM110.FK0VM-MTL-LRPS-NBR initialAttributes; /* Mtl lrps nbr*/
  set FK0VM110.FK-VEND-CD initialAttributes; /* Vender code*/
  ;
  FK0VW00.FK0VW-INDEX = 1; /* Initialize index*/
  ;
  while (FK0VW00.FK0VW-INDEX <= 7) /* For each date*/
    ;
    set FK0VM110.FK0VM-HDR-TYPE[FK0VW-INDEX] initialAttributes; /* Header type*/
    set FK0VM110.FK0VM-HDR-DT[FK0VW-INDEX] initialAttributes; /* Header dates*/
    set FK0VM110.FK0VM-QTY[FK0VW-INDEX] initialAttributes; /* Detail quantities*/
    ;
    FK0VW00.FK0VW-INDEX = FK0VW00.FK0VW-INDEX + 1;
  end
  ;
  set FK0VM110.CATOAP initialAttributes; /* To application*/
  set FK0VM110.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FK0V-4000

// Verify entered fields
Function FK0V-5000()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0VM110.CAITEM > " ") /* Application data was entered*/
    ;
    set FK0VM110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify the scroll request.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left requested*/
   || converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FK0V-5100(); /* Verify scroll request*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify the vendor code.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0VM110.FK-VEND-CD == " ") /* If vendor code missing*/
    ;
    set FK0VM110.FK-VEND-CD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(21); /* Vendor code invalid or missing*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify the lrps number.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FK0VM110.FK0VM-MTL-LRPS-NBR == 0) /* Mtl lrps nbr missing*/
    ;
    set FK0VM110.FK0VM-MTL-LRPS-NBR cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(71); /* Lrps number invalid or missing*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
end // end FK0V-5000

// Verify scroll request
Function FK0V-5100()
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FK0VW00.FK0VW-SIDE-TO-DISP-SW == "L") /* And already on left page*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(56); /* No more columns to left to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, endure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FK0VW00.FK0VW-SIDE-TO-DISP-SW == "R") /* And already on right page*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(57); /* No more columns to right to display*/
    ;
  end
  ;
  ;
end // end FK0V-5100

// Process valid request
Function FK0V-6000()
   /* ------------------------------------------------------------*/
   /* Check for key change.  If key was changed, exit to obtain*/
   /* the data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FK0VM110.FK0VM-MTL-LRPS-NBR != FK0VW00.FK0VM-MTL-LRPS-NBR
   || FK0VM110.FK-VEND-CD != FK0VW00.FK-VEND-CD)
    ;
    FK0VW00.FK0VW-REQUEST-DATA-SW = "Y"; /* Obtain the data*/
    ;
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, process scroll request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    FK0VW00.FK0VW-SIDE-TO-DISP-SW = "L"; /* Display left side*/
    FK0VW00.FK0VW-FMAT-MAP-SW = "Y"; /* Format the map*/
  end
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    FK0VW00.FK0VW-SIDE-TO-DISP-SW = "R"; /* Display right side*/
    FK0VW00.FK0VW-FMAT-MAP-SW = "Y"; /* Format the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER pressed, exit to application FK0W.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* Enter was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    ;
    FKWREC.FBAMDNBR = FK0VM110.FK0VM-MTL-LRPS-NBR; /* Lrps nbr*/
    FKWREC.FK-VEND-CD[1] = FK0VM110.FK-VEND-CD; /* Vendor*/
    ;
    COMMAREA.CATOAP = "FK0W"; /* to applicaiton*/
    COMMAREA.CAITEM = " "; /* item*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FK0VM110.CATOAP cursor, bold; /* Highlight*/
    ;
  end
  ;
  ;
end // end FK0V-6000

//*** RECORD=FK0VW00 ****
// ----------------------------
// Application display storage.
// ----------------------------
// ***********************
Record FK0VW00 type basicRecord
  10 FK0VW-INDEX FK0VW-INDEX ; 
  10 FK0VW-INDEX2 FK0VW-INDEX2 ; 
  10 FK0VW-REQUEST-DATA-SW FK0VW-REQUEST-DATA-SW ; 
  10 FK0VW-END-CMPNT-SW FK0VW-END-CMPNT-SW ; 
  10 FK0VW-END-LRSTY-SW FK0VW-END-LRSTY-SW ; 
  10 FK0VW-FMAT-MAP-SW FK0VW-FMAT-MAP-SW ; 
  10 FK0VW-DATA-FOUND-SW FK0VW-DATA-FOUND-SW ; 
  10 FK0VW-SIDE-TO-DISP-SW FK0VW-SIDE-TO-DISP-SW ; 
  10 FK0VM-MTL-LRPS-NBR FK0VM-MTL-LRPS-NBR ; 
  10 FK0VM-BAG-LRPS-NBR FK0VM-BAG-LRPS-NBR ; 
  10 FK-VEND-CD FK-VEND-CD ; 
  10 FK-VEND-SNM FK-VEND-SNM ; 
  10 FK0VM-QTY FK0VM-QTY [14] ; 
  10 FK0VW-HOLD-QTY FK0VW-HOLD-QTY [14] ; 
  10 FK0VW-MFG-QTY FK0VW-MFG-QTY ; 
  10 FK0VW-MAP-DATE FK0VW-MAP-DATE [14] ; 
  10 FK0VM-HDR-TYPE FK0VM-HDR-TYPE [14] ; 
  10 FBAMDNBR FBAMDNBR ; 
  10 FK0VW-BUY-DT FK0VW-BUY-DT ; 
    15 FK0VW-BUY-FILLER FK0VW-BUY-FILLER ; 
    15 FK0VW-BUY-CCYY FK0VW-BUY-CCYY ; 
      20 FK0VW-BUY-CC FK0VW-BUY-CC ; 
      20 FK0VW-BUY-YY FK0VW-BUY-YY ; 
    15 FK0VW-BUY-MM FK0VW-BUY-MM ; 
    15 FK0VW-BUY-DD FK0VW-BUY-DD ; 
  10 FK0VW-FORMAT-DT FK0VW-FORMAT-DT ; 
    15 FK0VW-FORMAT-YY FK0VW-FORMAT-YY ; 
    15 FK0VW-FORMAT-MM FK0VW-FORMAT-MM ; 
end // end FK0VW00

// bag lrps number
DataItem FK0VM-BAG-LRPS-NBR num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// header type
DataItem FK0VM-HDR-TYPE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material lrps number
DataItem FK0VM-MTL-LRPS-NBR num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// lrps quantities
DataItem FK0VM-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// buy date century
DataItem FK0VW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date century and year
DataItem FK0VW-BUY-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date day
DataItem FK0VW-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// footwear buy date
DataItem FK0VW-BUY-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date leading zero
DataItem FK0VW-BUY-FILLER num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date month
DataItem FK0VW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date year
DataItem FK0VW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data was found switch
DataItem FK0VW-DATA-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of component csr switch
DataItem FK0VW-END-CMPNT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of lrps style csr switch
DataItem FK0VW-END-LRSTY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format the map switch
DataItem FK0VW-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header dates
DataItem FK0VW-FORMAT-DT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// header date month
DataItem FK0VW-FORMAT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header date year
DataItem FK0VW-FORMAT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold lrps qtys area
DataItem FK0VW-HOLD-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// generic index
DataItem FK0VW-INDEX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// generic index2
DataItem FK0VW-INDEX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map dates
DataItem FK0VW-MAP-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// manufacturing quantity
DataItem FK0VW-MFG-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request data switch
DataItem FK0VW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// side to display switch
DataItem FK0VW-SIDE-TO-DISP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

