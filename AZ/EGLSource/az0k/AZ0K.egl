package az0k;
import az.common.*;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=AZ0K ****
// OVERVIEW:  This application accesses the DSHIP.VAZCTN01 DB2
//    table to get all carton information for a particular
//    whse/bol/bol-sub/order no.. The screen allows scrolling
//    through the different rows. Only inquiry is allowed, no
//    updates are performed. Rows are initially stored in temp
//    storage and then brought back as needed for scrolling.
// 
// ********************************************************
// *     M A I N T E N A N C E     L O G                  *
// ********************************************************
// *
// * DATE        NAME          DESCRIPTION OF CHANGE
// *
// * 11/18/97   DKESLE     Created.
// * 12/04/97   DKESLE     changed method of obtaining ship
//                         weight screen field
// * 12/15/97   DKESLE     added capability to come from AZ0D
//                         and changed to using AZFREC instead
//                         of az0kw02
// * 06/18/98   tdaugh     regen for table changes
// *********************
Program AZ0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AZ00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AZ0KW01 AZ0KW01; // record
  AZDREC AZDREC; // record
  AZFREC AZFREC; // record
  AZWREC AZWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VAZCIT01 VAZCIT01; // record
  VAZCSZ01 VAZCSZ01; // record
  VAZCTN01 VAZCTN01; // record
  VAZHDR01 VAZHDR01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use AZ0KM.AZ0KM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AZ0K-00000: AZ0K-00000();
    set AZ0KM001 initial;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set VAZHDR01 empty;
    set VAZCSZ01 empty;
    AZWREC.AZWTSF3P = 1;

    goto AZ0K-01000;
    AZ0K-01000: AZ0K-01000();
    goto AZ0K-02000;
    AZ0K-02000: AZ0K-02000();
    goto AZ0K-10000;
    AZ0K-10000: AZ0K-10000();
    goto AZ0K-10000;
  end // end main
end // end AZ0K

// first time in entry linkage
Function AZ0K-00000()
   /* ------------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted*/
   /* ------------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------------*/
   /* Initialize the segmented transaction identification*/
   /* ------------------------------------------------------------------*/

  XSSEGTR();

   /* ------------------------------------------------------------------*/
   /* If control was passed to this application from 'pk0c', move*/
   /* commarea to working storage. Otherwise, put out error message.*/
   /* ------------------------------------------------------------------*/

  AZWREC.AZWGROUP = COMMAREA.CAUSERA;
  if (COMMAREA.CAFROMAP == "PK0C"
   || COMMAREA.CAFROMAP == "AZ0D")
   /* MOVE COMMAREA.CAUSERA TO AZWREC.AZWGROUP;*/
  else
    set AZWREC empty;
    XSNOWAY();
  end

  VGVar.handleHardIOErrors = 1;
  converseVar.commitOnConverse = 1;


end // end AZ0K-00000

// move passed data to screen
Function AZ0K-01000()
  AZWDDATE = VGVar.currentShortGregorianDate;

  set AZ0KM001.AZ0KM-SEL-COL skip, invisible;

  if (AZWREC.XWHCD in XWHTBL.XWHCD)
    AZ0KM001.XWHCD = AZWREC.XWHCD;
    AZ0KM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (COMMAREA.CAFROMAP == "PK0C")
    AZ0KM001.AZ0KM-BOL-SCHED-HDG = "  SCHEDULE:";
    AZ0KM001.AZ0KM-BOL-SCHED-HDG-NBR = AZWREC.PK-PICK-SCHED-NBR;
    set AZ0KM001.AZ0KM-BOL-SUB-HDG-NBR skip, invisible;
    AZ0KM-BOL-SUB-SCHED-COL = "BOL/SUB NO";
  else
    AZ0KM001.AZ0KM-BOL-SCHED-HDG = "BOL/SUB NO:";
    AZ0KM001.AZ0KM-BOL-SCHED-HDG-NBR = AZWREC.PK-BILL-OF-LADING;
    AZ0KM001.AZ0KM-BOL-SUB-HDG-NBR = AZWREC.PK-BOL-SUB-NBR;
    AZ0KM-BOL-SUB-SCHED-COL = " SCHEDULE ";
    set AZ0KM001.PK-BOL-SUB-NBR[1] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[2] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[3] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[4] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[5] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[6] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[7] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[8] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[9] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[10] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[11] skip, invisible;
    set AZ0KM001.PK-BOL-SUB-NBR[12] skip, invisible;
  end

  AZ0KW01.AZ0KW-OP-CUST-ORD-ID = AZWREC.OP-CUST-ORD-ID;
  AZ0KW01.AZ0KW-OP-FILLER = ".";
  AZ0KW01.AZ0KW-OP-NIKE-ORD-ID = AZWREC.OP-NIKE-ORD-ID;
  AZ0KM001.AZ0KM-OP-ORDER-ID = AZ0KW01.AZ0KW-OP-ORDER-ID;

  if (COMMAREA.CAFROMAP == "PK0C")
    AZ0KM001.XGP-GPC-CD = AZWREC.XGP-GPC-CD;
    AZ0KM001.SY-STY-NBR = AZWREC.SY-STY-NBR;
    AZ0KM001.SY-COLR-CD-ID = AZWREC.SY-COLR-CD-ID;
    AZ0KM001.XDM-DIM-CD = AZWREC.XDM-DIM-CD;
  else
    AZ0KM001.XGP-GPC-CD = " ";
    AZ0KM001.SY-STY-NBR = " ";
    AZ0KM001.SY-COLR-CD-ID = " ";
    AZ0KM001.XDM-DIM-CD = " ";
  end

  AZ0KM001.SY-STY-NM = " ";
  AZ0KM001.SY-STY-COLR-DESC = " ";

  AZ0KW01.AZ0KW-CU-CO-ID = AZWREC.CU-CO-ID;
  AZ0KW01.AZ0KW-CU-FILLER = ".";
  AZ0KW01.AZ0KW-CU-STOR-ID = AZWREC.CU-STOR-ID;
  AZ0KM001.AZ0KM-CU-CUST-ID = AZ0KW01.AZ0KW-CU-CUST-ID;

end // end AZ0K-01000

// load screen & temp storage
Function AZ0K-02000()

  XSAZT3P(); /* purge current temp storage*/

  AZ0KW01.AZ0KW-MORE-ROWS = "Y";
  AZWTSF3S = 1;

  if (COMMAREA.CAFROMAP == "PK0C")
    AZ0K-02100(); /* open dship.vazcit01 cursor (S3)*/
    AZ0K-02200(); /* fetch first item row (N3)*/

    if (AZ0KW01.AZ0KW-MORE-ROWS == "Y")
      AZ0KM001.SY-STY-NM = VAZCIT01.SY-STY-NM;
      AZ0KM001.SY-STY-COLR-DESC = VAZCIT01.SY-STY-COLR-DESC;
      AZWREC.AZWTSF3P = 1;
      AZ0KW01.AZ0KW-DISP-NEW-ROWS = "Y";
    else
      AZWREC.AZWTSF3P = 0;
      TA5REC.TA5TSQIX = 0;
    end

    while (AZ0KW01.AZ0KW-MORE-ROWS == "Y")
      set AZDREC empty;
      while (AZWTSF3S <= 12
       && AZ0KW01.AZ0KW-MORE-ROWS == "Y")
        AZ0K-02300(); /* move row fetched to temp strg*/
        AZWTSF3S = AZWTSF3S + 1;
        AZ0K-02200(); /* fetch next item row*/
      end
      XSAZT3A(); /* add page to temp storage*/
      AZWTSF3S = 1;
    end

    AZ0K-02400(); /* close dship.vazcit01 cursor (C3*/
  else
    AZ0K-02500(); /* open dship.vazctn01 cursor (S4)*/
    AZ0K-02600(); /* fetch first item row (N4)*/

    if (AZ0KW01.AZ0KW-MORE-ROWS == "Y")
      AZWREC.AZWTSF3P = 1;
      AZ0KW01.AZ0KW-DISP-NEW-ROWS = "Y";
    else
      AZWREC.AZWTSF3P = 0;
      TA5REC.TA5TSQIX = 0;
    end

    while (AZ0KW01.AZ0KW-MORE-ROWS == "Y")
      set AZDREC empty;
      while (AZWTSF3S <= 12
       && AZ0KW01.AZ0KW-MORE-ROWS == "Y")
        AZ0K-02700(); /* move row fetched to temp strg*/
        AZWTSF3S = AZWTSF3S + 1;
        AZ0K-02600(); /* fetch next ctn row (N4)*/
      end
      XSAZT3A(); /* add page to temp storage*/
      AZWTSF3S = 1;
    end

    AZ0K-02800(); /* close dship.vazctn01 cursor (C4*/

  end

  AZ0KM001.AZWTSF3P = AZWREC.AZWTSF3P;

  AZWREC.AZWTSF3M = TA5REC.TA5TSQIX;
  AZ0KM001.AZWTSF3M = AZWREC.AZWTSF3M;

end // end AZ0K-02000

// open cursor (S3) - VAZCit01
Function AZ0K-02100()

  VAZCIT01.XWH-WHSE-CD = AZWREC.XWHCD;
  VAZCIT01.PK-BILL-OF-LADING = -1;
  VAZCIT01.PK-BOL-SUB-NBR = -1;
  VAZCIT01.PK-PICK-SCHED-NBR = AZWREC.PK-PICK-SCHED-NBR;
  VAZCIT01.OP-CUST-ORD-ID = AZWREC.OP-CUST-ORD-ID;
  VAZCIT01.OP-NIKE-ORD-ID = AZWREC.OP-NIKE-ORD-ID;
  VAZCIT01.SY-STY-NBR = AZWREC.SY-STY-NBR;
  VAZCIT01.SY-COLR-CD-ID = AZWREC.SY-COLR-CD-ID;
  VAZCIT01.XDM-DIM-CD = AZWREC.XDM-DIM-CD;
  VAZCIT01.XGP-GPC-CD = AZWREC.XGP-GPC-CD;

  call "VAZCIT01" ("S3", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
    return;
  else
    converseLib.validationFailed(57); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "K-02100"; /* Process name*/
    TA1REC.TA1LOC = "OPEN CURSOR FOR ITEM TABLE";
    TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AZ0KM001.AZ0KMPRC = "K-02100"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end

end // end AZ0K-02100

// Fetch next carton row (N3)
Function AZ0K-02200()

  call "VAZCIT01" ("N3", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return code*/

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      AZ0KW01.AZ0KW-MORE-ROWS = "N";
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(56); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(57); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "K-02200"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT ITEM TABLE ROW";
      TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
      TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      AZ0KM001.AZ0KMPRC = "K-02200"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end

end // end AZ0K-02200

// Move dtl line data to temp rec
Function AZ0K-02300()

  AZDREC.AZD-CRTN-SEQ-NBR[AZWTSF3S] = VAZCIT01.PK-CRTN-SEQ-NBR;

  if (AZWREC.XWHCD == VAZCTN01.XWH-WHSE-CD
   && VAZCIT01.PK-BILL-OF-LADING == VAZCTN01.PK-BILL-OF-LADING
   && VAZCIT01.PK-BOL-SUB-NBR == VAZCTN01.PK-BOL-SUB-NBR
   && VAZCIT01.OP-CUST-ORD-ID == VAZCTN01.OP-CUST-ORD-ID
   && VAZCIT01.OP-NIKE-ORD-ID == VAZCTN01.OP-NIKE-ORD-ID
   && VAZCIT01.PK-CRTN-SEQ-NBR == VAZCTN01.PK-CRTN-SEQ-NBR
  ) /* next sentence*/
  else
    VAZCTN01.XWH-WHSE-CD = AZWREC.XWHCD;
    VAZCTN01.PK-BILL-OF-LADING = VAZCIT01.PK-BILL-OF-LADING;
    VAZCTN01.PK-BOL-SUB-NBR = VAZCIT01.PK-BOL-SUB-NBR;
    VAZCTN01.OP-CUST-ORD-ID = VAZCIT01.OP-CUST-ORD-ID;
    VAZCTN01.OP-NIKE-ORD-ID = VAZCIT01.OP-NIKE-ORD-ID;
    VAZCTN01.PK-CRTN-SEQ-NBR = VAZCIT01.PK-CRTN-SEQ-NBR;

    call "VAZCTN01" ("S ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* no row there*/
        VAZCTN01.PK-MOVERS-STAT-CD = "  ";
        VAZCTN01.PK-ACTL-CRTN-WT = 0;
        VAZCTN01.PK-CRTN-CHARGE-AMT = 0;
      else
        converseLib.validationFailed(57); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "K-02300"; /* Process name*/
        TA1REC.TA1LOC = "GET AZCTN WEIGHT";
        TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
        TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        AZ0KM001.AZ0KMPRC = "K-02300"; /* Process name*/
        exit stack; /* ===> exit to re-display map*/
      end
    end
  end

  AZDREC.AZD-MOVERS-STAT-CD[AZWTSF3S] = VAZCTN01.PK-MOVERS-STAT-CD;

  AZDREC.AZD-BOL-SCHED-NBR[AZWTSF3S] = VAZCIT01.PK-BILL-OF-LADING;
  AZDREC.AZD-BOL-SUB-NBR[AZWTSF3S] = VAZCIT01.PK-BOL-SUB-NBR;

  if (AZWREC.XWHCD == VAZHDR01.XWH-WHSE-CD
   && VAZCIT01.PK-BILL-OF-LADING == VAZHDR01.PK-BILL-OF-LADING
   && VAZCIT01.PK-BOL-SUB-NBR == VAZHDR01.PK-BOL-SUB-NBR)
    /* next sentence*/
  else
    VAZHDR01.XWH-WHSE-CD = AZWREC.XWHCD;
    VAZHDR01.PK-BILL-OF-LADING = VAZCIT01.PK-BILL-OF-LADING;
    VAZHDR01.PK-BOL-SUB-NBR = VAZCIT01.PK-BOL-SUB-NBR;

    call "VAZHDR01" ("S ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      /* next sentence*/
    else
      converseLib.validationFailed(57); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "K-02300"; /* Process name*/
      TA1REC.TA1LOC = "GET AZHDR INFO";
      TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
      TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      AZ0KM001.AZ0KMPRC = "K-02300"; /* Process name*/
      exit stack; /* ===> exit to re-display map*/
    end
  end

  AZDREC.AZD-SHPMT-RLSD-DATE[AZWTSF3S] = VAZHDR01.PK-SHPMT-RLSD-DATE;
  AZDREC.AZD-CARR-CD[AZWTSF3S] = VAZHDR01.TF-CARR-CD;
  AZDREC.AZD-SHP-SPUR-NBR[AZWTSF3S] = VAZHDR01.PK-SHP-SPUR-NBR;

  if (AZWREC.XWHCD == VAZCSZ01.XWH-WHSE-CD
   && VAZCIT01.PK-BILL-OF-LADING == VAZCSZ01.PK-BILL-OF-LADING
   && VAZCIT01.PK-BOL-SUB-NBR == VAZCSZ01.PK-BOL-SUB-NBR
   && VAZCIT01.OP-CUST-ORD-ID == VAZCSZ01.OP-CUST-ORD-ID
   && VAZCIT01.OP-NIKE-ORD-ID == VAZCSZ01.OP-NIKE-ORD-ID
   && VAZCIT01.PK-CRTN-SEQ-NBR == VAZCSZ01.PK-CRTN-SEQ-NBR
   && VAZCIT01.OP-LINE-ITEM-NBR == VAZCSZ01.OP-LINE-ITEM-NBR)
    /* next sentence*/
  else
    VAZCSZ01.XWH-WHSE-CD = AZWREC.XWHCD;
    VAZCSZ01.PK-BILL-OF-LADING = VAZCIT01.PK-BILL-OF-LADING;
    VAZCSZ01.PK-BOL-SUB-NBR = VAZCIT01.PK-BOL-SUB-NBR;
    VAZCSZ01.OP-CUST-ORD-ID = VAZCIT01.OP-CUST-ORD-ID;
    VAZCSZ01.OP-NIKE-ORD-ID = VAZCIT01.OP-NIKE-ORD-ID;
    VAZCSZ01.PK-CRTN-SEQ-NBR = VAZCIT01.PK-CRTN-SEQ-NBR;
    VAZCSZ01.OP-LINE-ITEM-NBR = VAZCIT01.OP-LINE-ITEM-NBR;
    VAZCSZ01.SY-SZ-ID = -1;

    AZFREC.AZFTASK = "SA";
    AZFREC.PK-ALOC-PICK-QTY = 0;
    call "VAZCSZ01" (AZFREC, SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      /* next sentence*/
    else
      converseLib.validationFailed(57); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "K-02300"; /* Process name*/
      TA1REC.TA1LOC = "GET AZCSZ SUM";
      TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
      TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      AZ0KM001.AZ0KMPRC = "K-02300"; /* Process name*/
      exit stack; /* ===> exit to re-display map*/
    end
  end

  AZDREC.AZD-QTY[AZWTSF3S] = AZFREC.PK-ALOC-PICK-QTY;

  AZDREC.AZD-WEIGHT[AZWTSF3S] = VAZCTN01.PK-ACTL-CRTN-WT;
  AZDREC.AZD-CRTN-CHARGE-AMT[AZWTSF3S] = VAZCTN01.PK-CRTN-CHARGE-AMT;

end // end AZ0K-02300

// Close item cursor (C3)
Function AZ0K-02400()

  call "VAZCIT01" ("C3", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "K-02400"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE FAILED FOR ITEM CURSOR";
    TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AZ0KM001.AZ0KMPRC = "K-02400"; /* Process name*/
    converseLib.validationFailed(57); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> exit to re-display map*/

  end

end // end AZ0K-02400

// open cursor (S4) - VAZCTN01
Function AZ0K-02500()

  VAZCTN01.XWH-WHSE-CD = AZWREC.XWHCD;
  VAZCTN01.PK-BILL-OF-LADING = AZWREC.PK-BILL-OF-LADING;
  VAZCTN01.PK-BOL-SUB-NBR = AZWREC.PK-BOL-SUB-NBR;
  VAZCTN01.OP-CUST-ORD-ID = AZWREC.OP-CUST-ORD-ID;
  VAZCTN01.OP-NIKE-ORD-ID = AZWREC.OP-NIKE-ORD-ID;

  call "VAZCTN01" ("S4", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
    return;
  else
    converseLib.validationFailed(57); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "K-02500"; /* Process name*/
    TA1REC.TA1LOC = "OPEN CURSOR FOR ITEM TABLE";
    TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AZ0KM001.AZ0KMPRC = "K-02500"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end

end // end AZ0K-02500

// Fetch next row (N4) vazctn01
Function AZ0K-02600()

  call "VAZCTN01" ("N4", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return code*/

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      AZ0KW01.AZ0KW-MORE-ROWS = "N";
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(56); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(57); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "K-02600"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT ITEM TABLE ROW";
      TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
      TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      AZ0KM001.AZ0KMPRC = "K-02600"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end

end // end AZ0K-02600

// Move dtl line data to temp rec
Function AZ0K-02700()

  AZDREC.AZD-CRTN-SEQ-NBR[AZWTSF3S] = VAZCTN01.PK-CRTN-SEQ-NBR;
  AZDREC.AZD-MOVERS-STAT-CD[AZWTSF3S] = VAZCTN01.PK-MOVERS-STAT-CD;
  AZDREC.AZD-BOL-SCHED-NBR[AZWTSF3S] = VAZCTN01.PK-PICK-SCHED-NBR;

  if (AZWREC.XWHCD == VAZHDR01.XWH-WHSE-CD
   && VAZCTN01.PK-BILL-OF-LADING == VAZHDR01.PK-BILL-OF-LADING
   && VAZCTN01.PK-BOL-SUB-NBR == VAZHDR01.PK-BOL-SUB-NBR)
    /* next sentence*/
  else
    VAZHDR01.XWH-WHSE-CD = AZWREC.XWHCD;
    VAZHDR01.PK-BILL-OF-LADING = VAZCTN01.PK-BILL-OF-LADING;
    VAZHDR01.PK-BOL-SUB-NBR = VAZCTN01.PK-BOL-SUB-NBR;

    call "VAZHDR01" ("S ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      /* next sentence*/
    else
      converseLib.validationFailed(57); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "K-02700"; /* Process name*/
      TA1REC.TA1LOC = "GET AZHDR INFO";
      TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
      TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      AZ0KM001.AZ0KMPRC = "K-02700"; /* Process name*/
      exit stack; /* ===> exit to re-display map*/
    end
  end

  AZDREC.AZD-SHPMT-RLSD-DATE[AZWTSF3S] = VAZHDR01.PK-SHPMT-RLSD-DATE;
  AZDREC.AZD-CARR-CD[AZWTSF3S] = VAZHDR01.TF-CARR-CD;
  AZDREC.AZD-SHP-SPUR-NBR[AZWTSF3S] = VAZHDR01.PK-SHP-SPUR-NBR;

  AZDREC.AZD-QTY[AZWTSF3S] = VAZCTN01.PK-CRTN-UNIT-QTY;
  AZDREC.AZD-WEIGHT[AZWTSF3S] = VAZCTN01.PK-ACTL-CRTN-WT;
  AZDREC.AZD-CRTN-CHARGE-AMT[AZWTSF3S] = VAZCTN01.PK-CRTN-CHARGE-AMT;

end // end AZ0K-02700

// Close cursor (C4) vazctn01
Function AZ0K-02800()

  call "VAZCTN01" ("C4", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "K-02800"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE FAILED FOR ITEM CURSOR";
    TA1REC.TA1MAP = "AZ0KM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AZ0KM001.AZ0KMPRC = "K-02800"; /* Process name*/
    converseLib.validationFailed(57); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> exit to re-display map*/

  end

end // end AZ0K-02800

// Mainline processing for az0k
Function AZ0K-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display az0km001.*/
   /* Processing always returns to the top of this process and*/
   /* falls through subordinate processes until an error is found*/
   /* or a valid request is processed.  Processing sequence is*/
   /* as follows:*/

   /* 1) if new data needed for display, get new data and display*/
   /* otherwise redisplay map with previous data*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Verify the data that was entered.*/
   /* 4) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AZ0K-12000(); /* Format and display the map*/

  AZ0K-13000(); /* Check attention identifier*/

  AZ0K-14000(); /* Verify the entered data*/

  AZ0K-15000(); /* Process valid input request*/


end // end AZ0K-10000

// Format and display the map
Function AZ0K-12000()

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (AZ0KW01.AZ0KW-DISP-NEW-ROWS == "Y") /* Map must be formatted*/
    AZ0K-12100(); /* Format the rows in the map*/
  end
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set AZ0KM001 alarm;
  end

  converse AZ0KM001 ;

end // end AZ0K-12000

// get new data from temp storage
Function AZ0K-12100()
  XSAZT3R(); /* read temp storage page*/

  AZ0KM001.AZWTSF3P = AZWREC.AZWTSF3P;

  AZWTSF3S = 1;

  while (AZWTSF3S <= 12)
    if (AZD-CRTN-SEQ-NBR[AZWTSF3S] == 0)
      set AZ0KM001.PK-CRTN-SEQ-NBR[AZWTSF3S] skip, invisible;
      set AZ0KM001.PK-MOVERS-STAT-CD[AZWTSF3S] skip, invisible;
      set AZ0KM001.AZ0KM-BOL-SCHED-NBR[AZWTSF3S] skip, invisible;
      if (COMMAREA.CAFROMAP == "PK0C")
        set AZ0KM001.PK-BOL-SUB-NBR[AZWTSF3S] skip, invisible;
      end
      set AZ0KM001.PK-SHPMT-RLSD-DATE[AZWTSF3S] skip, invisible;
      set AZ0KM001.AZ0KM-CARR-AND-SPUR[AZWTSF3S] skip, invisible;
      set AZ0KM001.AZ0KM-PK-QTY[AZWTSF3S] skip, invisible;
      set AZ0KM001.PK-WEIGHT[AZWTSF3S] skip, invisible;
      set AZ0KM001.PK-CRTN-CHARGE-AMT[AZWTSF3S] skip, invisible;
    else
      set AZ0KM001.PK-CRTN-SEQ-NBR[AZWTSF3S] initialAttributes;
      AZ0KM001.PK-CRTN-SEQ-NBR[AZWTSF3S] = AZD-CRTN-SEQ-NBR[AZWTSF3S];
      set AZ0KM001.PK-MOVERS-STAT-CD[AZWTSF3S] initialAttributes;
      AZ0KM001.PK-MOVERS-STAT-CD[AZWTSF3S] = AZD-MOVERS-STAT-CD[AZWTSF3S];
      set AZ0KM001.AZ0KM-BOL-SCHED-NBR[AZWTSF3S] initialAttributes;
      AZ0KM001.AZ0KM-BOL-SCHED-NBR[AZWTSF3S] = AZD-BOL-SCHED-NBR[AZWTSF3S];
      if (COMMAREA.CAFROMAP == "PK0C")
        set AZ0KM001.PK-BOL-SUB-NBR[AZWTSF3S] initialAttributes;
        AZ0KM001.PK-BOL-SUB-NBR[AZWTSF3S] = AZD-BOL-SUB-NBR[AZWTSF3S];
      end

      AZWREC.AZWDT8 = AZD-SHPMT-RLSD-DATE[AZWTSF3S];
      XSAZDCM();
      AZ0KM001.PK-SHPMT-RLSD-DATE[AZWTSF3S] = AZWREC.AZWDT6;

      set AZ0KM001.AZ0KM-CARR-AND-SPUR[AZWTSF3S] initialAttributes;
      AZ0KW01.AZ0KW-CARR-CD = AZD-CARR-CD[AZWTSF3S];
      AZ0KW01.AZ0KW-CASP-FILLER = "/";
      set AZ0KM001.PK-SHPMT-RLSD-DATE[AZWTSF3S] initialAttributes;
      AZ0KW01.AZ0KW-SHP-SPUR-NBR = AZD-SHP-SPUR-NBR[AZWTSF3S];
      AZ0KM001.AZ0KM-CARR-AND-SPUR[AZWTSF3S] = AZ0KW01.AZ0KW-CARR-AND-SPUR;
      set AZ0KM001.AZ0KM-PK-QTY[AZWTSF3S] initialAttributes;
      AZ0KM001.AZ0KM-PK-QTY[AZWTSF3S] = AZD-QTY[AZWTSF3S];
      set AZ0KM001.PK-WEIGHT[AZWTSF3S] initialAttributes;
      AZ0KM001.PK-WEIGHT[AZWTSF3S] = AZD-WEIGHT[AZWTSF3S];
      set AZ0KM001.PK-CRTN-CHARGE-AMT[AZWTSF3S] initialAttributes;
      AZ0KM001.PK-CRTN-CHARGE-AMT[AZWTSF3S] = AZD-CRTN-CHARGE-AMT[AZWTSF3S];
    end
    AZWTSF3S = AZWTSF3S + 1;
  end
end // end AZ0K-12100

// Check attention identifier
Function AZ0K-13000()

  if (converseVar.eventKey is enter)
    return;
  end

  if (AZ0KM001.CATOAP != " ") /* if fastpath entered*/
    set AZ0KM001.CATOAP cursor, bold; /* and pfkey pressed*/
    converseLib.validationFailed(064);
    exit stack;
  end

  if (converseVar.eventKey is pf2 /* if PF2 was pressed*/
   || converseVar.eventKey is pf3 /* if PF3 was pressed*/
   || converseVar.eventKey is pf4) /* if PF4 was pressed*/

    if (converseVar.eventKey is pf2) /* PF2 was pressed*/
      COMMAREA.CATOAP = "SR0A"; /* return to previous appl*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CAUSERA = AZWREC.AZWGROUP;
      COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* return to previous appl*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* return to previous appl*/
    end

    XSAZT3P();
    XSEXIT();

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf2   /* and PF2 was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf4   /* and PF4 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    AZ0KM001.AZ0KMPRC = "K-13000";
    converseLib.validationFailed(1); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end AZ0K-13000

// Verify entered data
Function AZ0K-14000()

   /* If anything is entered and the fastpath is being requested*/
   /* allow the request*/

  if (AZ0KM001.CATOAP != " ")
    set AZ0KM001.CATOAP cursor, bold;
    COMMAREA.CATOAP = AZ0KM001.CATOAP;
    COMMAREA.CAITEM = AZ0KM001.CAITEM;
    COMMAREA.CAUSERA = AZWREC.AZWGROUP;
    XSAZT3P(); /* Purge TSQ*/
    XSEXIT(); /* check security/xfer*/
    converseLib.clearScreen();
    
    AZ0KM001.CAMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CATOAP = " ";
    AZ0KM001.AZ0KMPRC = "K-14000";
    exit stack;
  end

  if (AZ0KM001.AZWTSF3P == AZWREC.AZWTSF3P)

  else
    if (AZ0KM001.AZWTSF3P < 1
     || AZ0KM001.AZWTSF3P > AZWREC.AZWTSF3M)
      converseLib.clearScreen();
      
      AZ0KM001.AZ0KMPRC = "K-14000"; /**/
      converseLib.validationFailed(21); /* page number not in range*/
      exit stack; /* Exit to display map*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        converseLib.clearScreen();
        
        AZ0KM001.AZ0KMPRC = "K-14000"; /**/
        converseLib.validationFailed(22); /* page number entered and pf7/pf8*/
        exit stack; /* Exit to display map*/
      end
    end
  end

end // end AZ0K-14000

// Process valid data
Function AZ0K-15000()
  if (converseVar.eventKey is pf7)
    if (AZ0KM001.AZWTSF3P < 2) /* ===> No previous pages*/
      converseLib.clearScreen();
      
      AZ0KM001.AZ0KMPRC = "K-15000"; /* ===> Module identification*/
      converseLib.validationFailed(23); /* ===> No previous page to display*/
      exit stack; /* ===> Exit to re-display map*/
    else
      AZWREC.AZWTSF3P = AZ0KM001.AZWTSF3P - 1;
      AZ0KW01.AZ0KW-DISP-NEW-ROWS = "Y";
      return;
    end
  end

  if (converseVar.eventKey is pf8)
    if (AZ0KM001.AZWTSF3P == AZ0KM001.AZWTSF3M) /* ===> No more pages*/
      converseLib.clearScreen();
      
      AZ0KM001.AZ0KMPRC = "K-15000"; /* ===> Module identification*/
      converseLib.validationFailed(24); /* ===> No more pages to display*/
      exit stack; /* ===> Exit to re-display map*/
    else
      AZWREC.AZWTSF3P = AZ0KM001.AZWTSF3P + 1;
      AZ0KW01.AZ0KW-DISP-NEW-ROWS = "Y";
      return;
    end
  end

  if (converseVar.eventKey is enter)
    AZWREC.AZWTSF3P = AZ0KM001.AZWTSF3P;
    AZ0KW01.AZ0KW-DISP-NEW-ROWS = "Y";
    return;
  end

end // end AZ0K-15000

// write temp storage 3 - cartons
Function XSAZT3A()

   /* write temporary storage 3*/

  TA5REC.TA5APPID = "AZF3"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  AZDREC.AZDTSLEN = 472; /* length of record*/

  call "TA0050" (AZDREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)

  else
    TA1REC.TA1LOCAT[1] = "ADD TS3";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XSAZENP(); /* post, no rollback, non db2 diags*/

  end
end // end XSAZT3A

// read temp storage 3 - cartons
Function XSAZT3R()
  set AZDREC empty;

  TA5REC.TA5APPID = "AZF3"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = AZWREC.AZWTSF3P; /* current page*/
  AZDREC.AZDTSLEN = 472; /* length of record*/

  call "TA0050" (AZDREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "READ TS3";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = AZDREC.AZDTSROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XSAZENP(); /* post, no rollback, non db2 diags*/
  end
end // end XSAZT3R

//*** RECORD=AZ0KW01 ****
//     working storage record for AZ0K.
// 
// ************************************************************
// *    MAINTENANCE LOG
// ************************************************************
// 
//   11/19/97    dkesle     initial creation
// ***********************
Record AZ0KW01 type basicRecord
  10 TA5TSQIX TA5TSQIX ; 
  10 AZ0KW-MORE-ROWS AZ0KW-MORE-ROWS ; 
  10 AZ0KW-DISP-NEW-ROWS AZ0KW-DISP-NEW-ROWS ; 
  10 AZ0KW-OP-ORDER-ID AZ0KW-OP-ORDER-ID ; 
    15 AZ0KW-OP-CUST-ORD-ID AZ0KW-OP-CUST-ORD-ID ; 
    15 AZ0KW-OP-FILLER AZ0KW-OP-FILLER ; 
    15 AZ0KW-OP-NIKE-ORD-ID AZ0KW-OP-NIKE-ORD-ID ; 
  10 AZ0KW-CU-CUST-ID AZ0KW-CU-CUST-ID ; 
    15 AZ0KW-CU-CO-ID AZ0KW-CU-CO-ID ; 
    15 AZ0KW-CU-FILLER AZ0KW-CU-FILLER ; 
    15 AZ0KW-CU-STOR-ID AZ0KW-CU-STOR-ID ; 
  10 AZ0KW-CARR-AND-SPUR AZ0KW-CARR-AND-SPUR ; 
    15 AZ0KW-CARR-CD AZ0KW-CARR-CD ; 
    15 AZ0KW-CASP-FILLER AZ0KW-CASP-FILLER ; 
    15 AZ0KW-SHP-SPUR-NBR AZ0KW-SHP-SPUR-NBR ; 
end // end AZ0KW01

// TSQ rel rec no./index
DataItem AZ0KW-CARR-AND-SPUR char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-CARR-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-CASP-FILLER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-CU-CO-ID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-CU-CUST-ID char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-CU-FILLER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-CU-STOR-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-DISP-NEW-ROWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AZ0KW-MORE-ROWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-OP-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-OP-FILLER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-OP-NIKE-ORD-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-OP-ORDER-ID char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0KW-SHP-SPUR-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

