package az0d;
import az.common.*;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import iv.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=AZ0D ****
// OVERVIEW:  This application accesses the DSHIP.VAZord01 DB2
//    table to get all order  information for a particular
//    whse/bol/bol-sub/.. The screen allows scrolling through
//    the different rows. Only inquiry is allowed, no updates
//    are performed. Rows are initially stored in temp
//    storage and then brought back as needed for scrolling.
// 
// ********************************************************
// *     M A I N T E N A N C E     L O G                  *
// ********************************************************
// *
// * DATE        NAME          DESCRIPTION OF CHANGE
// *
// * 12/10/97   tdaugh     Created.
// *********************
Program AZ0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AZ00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AZ0DW01 AZ0DW01; // record
  AZOREC AZOREC; // record
  AZWREC AZWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VAZORD01 VAZORD01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use AZ0DM.AZ0DM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AZ0D-00000: AZ0D-00000();
    set AZ0DM001 initial;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set VAZORD01 empty;
    AZWREC.AZWTSF2P = 1;

    goto AZ0D-01000;
    AZ0D-01000: AZ0D-01000();
    goto AZ0D-02000;
    AZ0D-02000: AZ0D-02000();
    goto AZ0D-10000;
    AZ0D-10000: AZ0D-10000();
    goto AZ0D-10000;
  end // end main
end // end AZ0D

// first time in entry linkage
Function AZ0D-00000()
   /* ------------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted*/
   /* ------------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------------*/
   /* Initialize the segmented transaction identification*/
   /* ------------------------------------------------------------------*/

  XSSEGTR();

   /* ------------------------------------------------------------------*/
   /* If control was passed to this application from 'AZ0B', move*/
   /* commarea to working storage. Otherwise, put out error message.*/
   /* ------------------------------------------------------------------*/

  AZWREC.AZWGROUP = COMMAREA.CAUSERA;
  if (COMMAREA.CAFROMAP == "AZ0B" || 
  COMMAREA.CAFROMAP == "AZ0K")
    /* MOVE COMMAREA.CAUSERA TO AZWREC.AZWGROUP;*/
  else
    set AZWREC empty;
    XSNOWAY();
  end

  VGVar.handleHardIOErrors = 1;
  converseVar.commitOnConverse = 1;


end // end AZ0D-00000

// move passed data to screen
Function AZ0D-01000()
  AZWDDATE = VGVar.currentShortGregorianDate;

  if (AZWREC.XWHCD in XWHTBL.XWHCD)
    AZ0DM001.XWHCD = AZWREC.XWHCD;
    AZ0DM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  AZ0DM001.PK-BILL-OF-LADING = AZWREC.PK-BILL-OF-LADING;

  AZ0DM001.PK-BOL-SUB-NBR = AZWREC.PK-BOL-SUB-NBR;

end // end AZ0D-01000

// load screen & temp storage
Function AZ0D-02000()

  XSAZT2P(); /* purge current temp storage*/

  AZ0D-02100(); /* open dship.vazord01 cursor*/

  AZWTSF2S = 1; /* page index*/
  AZ0DW01.AZ0DW-MORE-ORDER-ROWS = "Y";

  AZ0D-02200(); /* fetch first order row*/

  if (AZ0DW01.AZ0DW-MORE-ORDER-ROWS == "Y")
    AZWREC.AZWTSF2P = 1;
    AZ0DW01.AZ0DW-DISP-NEW-ROWS = "Y";
  else
    AZWREC.AZWTSF2P = 0;
    TA5REC.TA5TSQIX = 0;
  end

  while (AZ0DW01.AZ0DW-MORE-ORDER-ROWS == "Y")
    set AZOREC empty;
    while (AZWTSF2S <= 12
     && AZ0DW01.AZ0DW-MORE-ORDER-ROWS == "Y")
      AZ0D-02300(); /* move row fetched to temp storage*/
      AZWTSF2S = AZWTSF2S + 1;
      AZ0D-02200(); /* fetch next item row*/
    end
    XSAZT2A(); /* add page to temp storage*/
    AZWTSF2S = 1;
  end

  AZ0D-02400(); /* close dship.vazord01 cursor*/

  AZ0DM001.AZWTSF2P = AZWREC.AZWTSF2P;

  AZWREC.AZWTSF2M = TA5REC.TA5TSQIX;
  AZ0DM001.AZWTSF2M = AZWREC.AZWTSF2M;

end // end AZ0D-02000

// open cursor (S1) - VAZORD01
Function AZ0D-02100()

  VAZORD01.XWH-WHSE-CD = AZWREC.XWHCD;
  VAZORD01.PK-BILL-OF-LADING = AZWREC.PK-BILL-OF-LADING;
  VAZORD01.PK-BOL-SUB-NBR = AZWREC.PK-BOL-SUB-NBR;
  call "VAZORD01" ("S1", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
    return;
  else
    converseLib.validationFailed(57); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "D-02100"; /* Process name*/
    TA1REC.TA1LOC = "OPEN CURSOR FOR ORDER TABLE";
    TA1REC.TA1MAP = "AZ0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AZ0DM001.AZ0DMPRC = "D-02100"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end

end // end AZ0D-02100

// Fetch next order row (N1)
Function AZ0D-02200()

  call "VAZORD01" ("N1", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return code*/

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      AZ0DW01.AZ0DW-MORE-ORDER-ROWS = "N";
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(56); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(57); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "D-02200"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT ORDER TABLE ROW";
      TA1REC.TA1MAP = "AZ0DM001"; /* Map name*/
      TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      AZ0DM001.AZ0DMPRC = "D-02200"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end

end // end AZ0D-02200

// Move dtl line data to temp rec
Function AZ0D-02300()

  AZOREC.AZO-OP-CUST-ORD-ID[AZWTSF2S] = VAZORD01.OP-CUST-ORD-ID;
  AZOREC.AZO-OP-NIKE-ORD-ID[AZWTSF2S] = VAZORD01.OP-NIKE-ORD-ID;
  AZOREC.AZO-AZ-ORD-STAT-CD[AZWTSF2S] = VAZORD01.AZ-ORD-STAT-CD;

  AZOREC.AZO-OP-CUST-PO[AZWTSF2S] = VAZORD01.OP-CUST-PO;
  AZOREC.AZO-AZ-TOT-ORD-CARTONS[AZWTSF2S] = VAZORD01.AZ-TOT-ORD-CARTONS;
  AZOREC.AZO-OP-ORD-TOT-UNITS[AZWTSF2S] = VAZORD01.OP-ORD-TOT-UNITS;
  AZOREC.AZO-AZ-TOT-ORD-CART-WT[AZWTSF2S] = VAZORD01.AZ-TOT-ORD-CART-WT;
  AZOREC.AZO-CU-CO-ID[AZWTSF2S] = VAZORD01.CU-CO-ID;
  AZOREC.AZO-CU-STOR-ID[AZWTSF2S] = VAZORD01.CU-STOR-ID;

end // end AZ0D-02300

// Close order cursor (C1)
Function AZ0D-02400()

  call "VAZORD01" ("C1", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "D-02400"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE FAILED FOR ORDER CURSOR";
    TA1REC.TA1MAP = "AZ0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AZ0DM001.AZ0DMPRC = "D-02400"; /* Process name*/
    converseLib.validationFailed(57); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> exit to re-display map*/

  end


   /*  */
end // end AZ0D-02400

// Mainline processing for az0d
Function AZ0D-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display az0dm001.*/
   /* Processing always returns to the top of this process and*/
   /* falls through subordinate processes until an error is found*/
   /* or a valid request is processed.  Processing sequence is*/
   /* as follows:*/

   /* 1) if new data needed for display, get new data and display*/
   /* otherwise redisplay map with previous data*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Verify the data that was entered.*/
   /* 4) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AZ0D-12000(); /* Format and display the map*/

  AZ0D-13000(); /* Check attention identifier*/

  AZ0D-14000(); /* Verify the entered data*/

  AZ0D-15000(); /* Process valid input request*/


end // end AZ0D-10000

// Format and display the map
Function AZ0D-12000()

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (AZ0DW01.AZ0DW-DISP-NEW-ROWS == "Y") /* Map must be formatted*/
    AZ0D-12100(); /* Format the rows in the map*/
  end
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set AZ0DM001 alarm;
  else
    AZ0DM001.AZ0DMPRC = "AZ0D";
  end

  converse AZ0DM001 ;

end // end AZ0D-12000

// get new data from temp storage
Function AZ0D-12100()

  AZWTSF2S = 1;

  XSAZT2R(); /* read temp storage page*/

  AZ0DM001.AZWTSF2P = AZWREC.AZWTSF2P;

  while (AZWTSF2S <= 12)
    if (AZOREC.AZO-OP-CUST-ORD-ID[AZWTSF2S] == 0)
      set AZ0DM001.AZ0DMSEL[AZWTSF2S] skip, invisible, noHighLight;
      set AZ0DM001.OP-CUST-ORD-ID[AZWTSF2S] skip, invisible;
      set AZ0DM001.ORDER-SEP[AZWTSF2S] skip, invisible;
      set AZ0DM001.OP-NIKE-ORD-ID[AZWTSF2S] skip, invisible;
      set AZ0DM001.AZ-ORD-STAT-CD[AZWTSF2S] skip, invisible;
      set AZ0DM001.OP-CUST-PO[AZWTSF2S] skip, invisible;
      set AZ0DM001.AZ-TOT-ORD-CARTONS[AZWTSF2S] skip, invisible;
      set AZ0DM001.OP-ORD-TOT-UNITS[AZWTSF2S] skip, invisible;
      set AZ0DM001.AZ-TOT-ORD-CART-WT[AZWTSF2S] skip, invisible;
    else
      set AZ0DM001.AZ0DMSEL[AZWTSF2S] initialAttributes;
      set AZ0DM001.OP-CUST-ORD-ID[AZWTSF2S] initialAttributes;
      set AZ0DM001.ORDER-SEP[AZWTSF2S] initialAttributes;
      AZ0DM001.OP-CUST-ORD-ID[AZWTSF2S] = AZOREC.AZO-OP-CUST-ORD-ID[AZWTSF2S];
      AZ0DM001.ORDER-SEP[AZWTSF2S] = ".";
      set AZ0DM001.OP-NIKE-ORD-ID[AZWTSF2S] initialAttributes;
      AZ0DM001.OP-NIKE-ORD-ID[AZWTSF2S] = AZOREC.AZO-OP-NIKE-ORD-ID[AZWTSF2S];
      set AZ0DM001.AZ-ORD-STAT-CD[AZWTSF2S] initialAttributes;
      AZ0DM001.AZ-ORD-STAT-CD[AZWTSF2S] = AZOREC.AZO-AZ-ORD-STAT-CD[AZWTSF2S];
      set AZ0DM001.OP-CUST-PO[AZWTSF2S] initialAttributes;
      AZ0DM001.OP-CUST-PO[AZWTSF2S] = AZOREC.AZO-OP-CUST-PO[AZWTSF2S];
      set AZ0DM001.AZ-TOT-ORD-CARTONS[AZWTSF2S] initialAttributes;
      AZ0DM001.AZ-TOT-ORD-CARTONS[AZWTSF2S] = AZOREC.AZO-AZ-TOT-ORD-CARTONS[AZWTSF2S];
      set AZ0DM001.OP-ORD-TOT-UNITS[AZWTSF2S] initialAttributes;
      AZ0DM001.OP-ORD-TOT-UNITS[AZWTSF2S] = AZOREC.AZO-OP-ORD-TOT-UNITS[AZWTSF2S];
      set AZ0DM001.AZ-TOT-ORD-CART-WT[AZWTSF2S] initialAttributes;
      AZ0DM001.AZ-TOT-ORD-CART-WT[AZWTSF2S] = AZOREC.AZO-AZ-TOT-ORD-CART-WT[AZWTSF2S];
    end
    AZWTSF2S = AZWTSF2S + 1;
  end
end // end AZ0D-12100

// Check attention identifier
Function AZ0D-13000()

  if (converseVar.eventKey is enter)
    return;
  end

  if (AZ0DM001.CATOAP != " ") /* If fastpath entered*/
    set AZ0DM001.CATOAP cursor, bold; /* and pfkey pressed*/
    converseLib.validationFailed(064);
    exit stack;
  end

  if (converseVar.eventKey is pf2 /* if PF2 was pressed*/
   || converseVar.eventKey is pf3 /* if PF3 was pressed*/
   || converseVar.eventKey is pf4) /* if PF4 was pressed*/

    if (converseVar.eventKey is pf2) /* PF2 was pressed*/
      COMMAREA.CATOAP = "SR0A"; /* return to previous appl*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CAUSERA = AZWREC.AZWGROUP;
      COMMAREA.CATOAP = "AZ0B"; /* return to previous appl*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* return to previous appl*/
    end

    XSAZT2P();
    XSEXIT();

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf2   /* and PF2 was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf4   /* and PF4 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    AZ0DM001.AZ0DMPRC = "D-13000";
    converseLib.validationFailed(1); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end AZ0D-13000

// Verify entered data
Function AZ0D-14000()

   /* If anything is entered and the fastpath is being requested*/
   /* process the request*/

  if (AZ0DM001.CATOAP != " ")
    set AZ0DM001.CATOAP cursor, bold;
    COMMAREA.CATOAP = AZ0DM001.CATOAP;
    COMMAREA.CAITEM = AZ0DM001.CAITEM;
    COMMAREA.CAUSERA = AZWREC.AZWGROUP;
    XSAZT2P(); /* Purge TSQ*/
    XSEXIT();
    converseLib.clearScreen();
    
    AZ0DM001.CAMSG = COMMAREA.CAMSG; /* security failed*/
    AZ0DM001.AZ0DMPRC = "D-14000";
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (AZ0DM001.AZWTSF2P == AZWREC.AZWTSF2P)

  else
    if (AZ0DM001.AZWTSF2P < 1
     || AZ0DM001.AZWTSF2P > AZWREC.AZWTSF2M) /* is curr page gt last page*/
      converseLib.clearScreen();
      
      AZ0DM001.AZ0DMPRC = "D-14000"; /**/
      converseLib.validationFailed(21); /* page number not in range*/
      exit stack; /* Exit to display map*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        converseLib.clearScreen();
        
        AZ0DM001.AZ0DMPRC = "D-14000"; /**/
        converseLib.validationFailed(22); /* page number entered and pf7/pf8*/
        exit stack; /* Exit to display map*/
      end
    end
  end

  AZWREC.AZWTSF2S = 1; /* init subscript*/
  AZ0DW-SEL-CTR = 0;

  while (AZWREC.AZWTSF2S <= 12) /* max # orders per page*/
    if (AZ0DM001.AZ0DMSEL[AZWTSF2S] != "S"
     && AZ0DM001.AZ0DMSEL[AZWTSF2S] != " ")
      set AZ0DM001 alarm;
      converseLib.validationFailed(67);
      exit stack; /* exit to display map*/
    else
      if (AZ0DMSEL[AZWTSF2S] == "S")
        AZ0DW-SEL-CTR = AZ0DW-SEL-CTR + 1;
      end
    end
    AZWREC.AZWTSF2S = AZWREC.AZWTSF2S + 1;
  end

  if (AZ0DW-SEL-CTR > 1)
    set AZ0DM001 alarm;
    converseLib.validationFailed(68);
    exit stack;
  end

end // end AZ0D-14000

// Process valid data
Function AZ0D-15000()
  if (converseVar.eventKey is pf7)
    if (AZ0DM001.AZWTSF2P < 2) /* ===> No previous pages*/
      converseLib.clearScreen();
      
      AZ0DM001.AZ0DMPRC = "D-15000"; /* ===> Module identification*/
      converseLib.validationFailed(23); /* ===> No previous page to display*/
      exit stack; /* ===> Exit to re-display map*/
    else
      AZWREC.AZWTSF2P = AZ0DM001.AZWTSF2P - 1;
      AZ0DW01.AZ0DW-DISP-NEW-ROWS = "Y";
      return;
    end
  end

  if (converseVar.eventKey is pf8)
    if (AZ0DM001.AZWTSF2P == AZ0DM001.AZWTSF2M) /* ===> No more pages*/
      converseLib.clearScreen();
      
      AZ0DM001.AZ0DMPRC = "D-15000"; /* ===> Module identification*/
      converseLib.validationFailed(24); /* ===> No more pages to display*/
      exit stack; /* ===> Exit to re-display map*/
    else
      AZWREC.AZWTSF2P = AZ0DM001.AZWTSF2P + 1;
      AZ0DW01.AZ0DW-DISP-NEW-ROWS = "Y";
      return;
    end
  end


  /* following code was added for selection processing of orders*/
  /* move all selections from map to temp storage*/
  /* then process first selection using temp storage*/
  AZWREC.AZWTSF2S = 1; /* initialize subscript*/
  while (AZWREC.AZWTSF2S <= 12) /* max # orders per page*/
    if (AZ0DM001.AZ0DMSEL[AZWTSF2S] == "S")
      AZOREC.AZOMSEL[AZWTSF2S] = AZ0DM001.AZ0DMSEL[AZWTSF2S];
    end
    AZWREC.AZWTSF2S = AZWREC.AZWTSF2S + 1;
  end

  XSAZT2U(); /* update temp storage with selections*/

  AZ0DW01.AZ0DW-SEL-SUB = 0; /* reinit selected subscript*/
  AZWREC.AZWTSF2S = 1; /* init subscript*/

  while (AZWREC.AZWTSF2S <= 12 /* max orders per page*/
   && AZ0DW01.AZ0DW-SEL-SUB == 0)
    if (AZOREC.AZOMSEL[AZWTSF2S] == "S")
      move AZWTSF2S to AZ0DW-SEL-SUB withV60Compat;
    end

    AZWREC.AZWTSF2S = AZWREC.AZWTSF2S + 1;

  end
   /* if bol selected for inquiry, xfer to AZ0K*/

  if (AZ0DW01.AZ0DW-SEL-SUB > 0)
    AZWREC.AZWTSF2S = AZ0DW01.AZ0DW-SEL-SUB;
    AZWREC.OP-CUST-ORD-ID = AZOREC.AZO-OP-CUST-ORD-ID[AZWTSF2S];
    AZWREC.OP-NIKE-ORD-ID = AZOREC.AZO-OP-NIKE-ORD-ID[AZWTSF2S];
    AZWREC.CU-CO-ID = AZOREC.AZO-CU-CO-ID[AZWTSF2S];
    AZWREC.CU-STOR-ID = AZOREC.AZO-CU-STOR-ID[AZWTSF2S];
    COMMAREA.CAUSERA = AZWREC.AZWGROUP; /* xfer data*/
    COMMAREA.CATOAP = "AZ0K"; /* xfer to az0k*/
    XSEXIT();
  end

  if (converseVar.eventKey is enter)
    AZWREC.AZWTSF2P = AZ0DM001.AZWTSF2P;
    AZ0DW01.AZ0DW-DISP-NEW-ROWS = "Y";
    return;
  end

end // end AZ0D-15000

// write temp storage 2 - orders
Function XSAZT2A()

   /* write temporary storage 2*/

  TA5REC.TA5APPID = "AZF2"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  AZOREC.AZOTSLEN = 700; /* length of record*/

  call "TA0050" (AZOREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)

  else
    TA1REC.TA1LOCAT[1] = "ADD TS2";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XSAZENP(); /* post, no rollback, non db2 diags*/

  end
end // end XSAZT2A

// read temp storage 2 - orders
Function XSAZT2R()
  set AZOREC empty;

  TA5REC.TA5APPID = "AZF2"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = AZWREC.AZWTSF2P; /* current page*/
  AZOREC.AZOTSLEN = 700; /* length of record*/

  call "TA0050" (AZOREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "READ TS2";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = AZOREC.AZOTSROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XSAZENP(); /* post, no rollback, non db2 diags*/
  end
end // end XSAZT2R

// update temp storage 1 - ASNs
Function XSAZT2U()

   /* update temporary storage 2*/

  TA5REC.TA5APPID = "AZF2"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = AZWREC.AZWTSF2P; /* current page*/
  AZOREC.AZOTSLEN = 700; /* length of record*/

  call "TA0050" (AZOREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "UPD TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = AZOREC.AZOTSROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XSAZENP(); /* post, no rollback, non db2*/

  end
end // end XSAZT2U

//*** RECORD=AZ0DW01 ****
//     working storage record for az0d.
//     AZ0D map contens
// ************************************************************
// *    MAINTENANCE LOG
// ************************************************************
// 
//   12/10/97    tdaugh     initial creation
// ***********************
Record AZ0DW01 type basicRecord
  10 TA5TSQIX TA5TSQIX ; 
  10 AZ0DW-SEL-SUB AZ0DW-SEL-SUB ; 
  10 AZ0DW-MORE-ORDER-ROWS AZ0DW-MORE-ORDER-ROWS ; 
  10 AZ0DW-DISP-NEW-ROWS AZ0DW-DISP-NEW-ROWS ; 
  10 AZ0DW-SEL-CTR AZ0DW-SEL-CTR ; 
  10 AZ0DW-OP-CUST-ORD-ID AZ0DW-OP-CUST-ORD-ID ; 
  10 AZ0DW-OP-NIKE-ORD-ID AZ0DW-OP-NIKE-ORD-ID ; 
  10 AZ0DW-AZ-ORD-STAT-CD AZ0DW-AZ-ORD-STAT-CD ; 
  10 AZ0DW-OP-CUST-PO AZ0DW-OP-CUST-PO ; 
  10 AZ0DW-AZ-TOT-ORD-CARTONS AZ0DW-AZ-TOT-ORD-CARTONS ; 
  10 AZ0DW-OP-ORD-TOT-UNITS AZ0DW-OP-ORD-TOT-UNITS ; 
  10 AZ0DW-AZ-TOT-ORD-CART-WT AZ0DW-AZ-TOT-ORD-CART-WT ; 
end // end AZ0DW01

// TSQ rel rec no./index
DataItem AZ0DW-AZ-ORD-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0DW-AZ-TOT-ORD-CART-WT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0DW-AZ-TOT-ORD-CARTONS int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0DW-DISP-NEW-ROWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AZ0DW-MORE-ORDER-ROWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0DW-OP-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0DW-OP-CUST-PO char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0DW-OP-NIKE-ORD-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem AZ0DW-OP-ORD-TOT-UNITS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AZ0DW-SEL-CTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AZ0DW-SEL-SUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

