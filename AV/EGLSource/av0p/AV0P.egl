package av0p;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=AV0P ****
// ;------------------------ AV0P -----------------------------
// ;
// ;                  PHASED AVAILABILITY
// ;
// ;-----------------------------------------------------------
// ;
// ; MAINTENANCE HISTORY:
// ; -------------------
// ;
// ; DATE   NAME      DESCRIPTION
// ; ----   ----      -----------------------------------------
// ;121588  jwood     added noncsp option to calls
// ;121588  jwood     added xssegtr logic
// ;051689  mblail    changed xsncd to xsecd because of
// ;                  table changes.
// ;091990  mgatre    leave xdmcd and sy2clrid blank on screen.
// ;                  change call to io0130 to select set and
// ;                  fetch (063, 064, 065, 066).
// ;                  wildcard xdmcd if blank.
// ;102490  dbruih    modified to wildcard color and dimension
// ;                  if not present on map and default inven-
// ;                  tory segment and package type to 0 if not
// ;                  present on the map.
// ;
// ;121990  madams    modified to allow warehouse 51 for
// ;                  apparel. Also may wildcard warehouse.
// ;
// ;031891  dbruih    changed to use warehouse from map1 when
// ;                  transferring to av0k (substitutions)
// ;090991  dbruih    added close cursor to av0p063 get color
// ;                  desc.  also added move of dim cd and
// ;                  desc to map in av0p454.
// ;091291  dbruih    added display of blank style information
// ;                  map and processes
// ;032092  dbruih    added code to not show blank style
// ;                  availability if the finished style
// ;                  control indicator is equal to 4.
// ;040193  SCOCHR    ADD ALLOW NEW ORDER FLAG TO SCREENS
// ;091492  dbruih    change source of allow new orders flag
// ;                  from dprodg.vsyclr01 to dprod.vcolor
// ;100892  dbruih    changed av4rec.xsdcd to pc2inseg and
// ;                  av4rec.xsacd to xegcd for db2 tble chgs
// ;120192  dbruih    removed processes to display blank style
// ;                  qtys.
// ;121792  dbruih    restored processes to display blank style
// ;                  qtys.
// ;031893  dbruih    changed to allow wildcarding of owner grp
// ;                  for GPC 03 and Warehouses 25 & 51
// ;041393  dbruih    Added code to not wildcard owner group
// ;                  when application is entered from av0v.
// ;051093  dbruih    Added code accommodate wildcareded whse
// ;                  for db record lifecycle not equal to
// ;                  map lifecycle.
// ;061893  MSMIT2    REPLACE CALL TO SY1120 WITH PG1050.
// ;070996  MCHOW   AV214  Added call to SY2000 to pick up
// ;                       Canadian overrides (Allow New Order
// ;                       Flag, Hot Model Flag, Future Offer
// ;                       Date, Season Code, etc.).  Changed
// ;                       AV0PW06, AV0P, AV0PS-SY2ALNOR,
// ;                       AV0P160, AV0P162, AV0P307, AV0P320,
// ;                       AV0P320-CAN, AV0P325, AV0P340,
// ;                       AV0P345, AV0P349, AV0P453,
// ;                       AV0P453-CAN, AV0P454, AV0P454-CAN,
// ;                       AV0P455, AV0P455-CAN, AV0P600,
// ;                       AV0P700, AV0P707, AV0P854.
// ;032597  MCHOW   AV196  Added logic for USA and Canadian
// ;                       Equipment warehouses and products.
// ;                       Added call to EU0100 for Equipment.
// ;                       Changed or added: AV0P, AV0P-0311,
// ;                       AV0P-0421, AV0P-1621, AV0P-1622,
// ;                       AV0P-1642, AV0P-1662, AV0P-1682,
// ;                       AV0P-1692, AV0P-3201, AV0P-3202,
// ;                       AV0P-3222, AV0P-3252, AV0P-4531,
// ;                       AV0P-4541, AV0P-4551, AV0P-9201,
// ;                       AV0PM010, AV0PM020, AV0PM030,
// ;                       AV0PM040, AV0PS-CHECK-EQMT,
// ;                       AV0PS-EU0100-CS, AV0PS-EU0100-SN,
// ;                       AV0PS-EU0100-SS, AV0PS-EU0100-SU,
// ;                       AV0PS-SY2ALNOR, AV0PS-VSYCLR01,
// ;                       AV0PW01, AV0PW04, AV0PW06, AV0PW07,
// ;                       AV0PW08, AV0P001, AV0P010, AV0P020,
// ;                       AV0P025, AV0P030, AV0P031, AV0P035,
// ;                       AV0P043, AV0P063, AV0P064, AV0P065,
// ;                       AV0P066, AV0P140, AV0P150, AV0P152,
// ;                       AV0P160, AV0P162, AV0P164, AV0P166,
// ;                       AV0P168, AV0P169, AV0P300, AV0P307,
// ;                       AV0P310, AV0P320, AV0P322, AV0P323,
// ;                       AV0P325, AV0P340, AV0P345, AV0P355,
// ;                       AV0P453, AV0P454, AV0P455, AV0P520,
// ;                       AV0P525, AV0P600, AV0P610, AV0P700,
// ;                       AV0P707, AV0P710, AV0P850.
// ;                       CSP APT process forced standardizing
// ;                       of process names, which Canadian
// ;                       modules violated.  Therefore, I also
// ;                       made the following changes:
// ;                       AV0P042-CAN to AV0P-0421,
// ;                       AV0P162-CAN to AV0P-1621,
// ;                       AV0P320-CAN to AV0P-3201,
// ;                       AV0P453-CAN to AV0P-4531,
// ;                       AV0P454-CAN to AV0P-4541,
// ;                       AV0P455-CAN to AV0P-4551.
// ;040797  MCHOW   AV196  Changed up-front Canadian/Equipment
// ;                       Sales Office logic to use tabled,
// ;                       instead of hardcoded, values.
// ;                       Changes made to AV0PW01, AV0P010.
// ;082797  SATINA  AV695c Enhanced the application to display/
// ;                       process the warehouse '27'.
// ;091097  SREDDY  AV00   WORKING STORAGE ARRAY IN AV0PW04
// ;                       CHANGED TO 100 DUE TO 4038 ABEND.
// ;102397  Satina  AV1419 changes done to move the warehouse
// ;                       code entered in maps AV0PM020 and
// ;                       AV0PM030 to AV0V.
// ;070799  RRENUK  AV1616 Included whse 51 to process ftwr
// ;                       products - multi gpc
// ;120299  RRENUK  PT220  Changed the EU0100 call option from
// ;                       'S' to 'SU' to improve performance.
// ;013101  PSARKA  AV5215 Removed all references to whse code
// ;                       '27' and '72' in AV0P-1622, AV0P162
// ;                       and AV0P323.
// ;032701  spitch  AV5215 Removed all references to whse code
// ;                       '25' in AV0P42,  AV0P-1622, AV0P162
// ;                       and AV0P323.
// ;-----------------------------------------------------------
// ; PGM DESCRIPTION:
// ; ---------------
// ;
// ; THIS APPLICATION IS INQUIRY ONLY.
// ; THE PURPOSE OF THIS APPLICATION IS TO ALLOW THE USER TO
// ; VIEW A PRODUCTS AVAILABILITY BY SIZE AND PERIOD.
// ; WHEN THE USER FIRST ENTERS THIS APPLICATION THE FIRST
// ; SCREEN ENCOUNTEReD IS MAP AV0PM010. THIS IS THE SELECTION
// ; SCREEN ON WHICH THE USER ENTERS THE PRODUCT OR PRODUCTS
// ; THAT THEY WISH TO VIEW. IF THE GPC ENTERED IS '02' THEN
// ; THE USER IS TRANSFERRED TO THE PHASED FOOTWEAR SCREEN
// ; AV0PM020. IF THE GPC IS '03' (OR ANY OTHER GPC BESIDES
// ; FOOTWEAR) THE USER IS TRANSFERRED TO THE APPAREL PHASED
// ; AVAILABILITY SCREEN AV0PM030.
// ; IN MAP AV0PM010, THE SELECTION SCREEN, THE USER MAY WILD-
// ; CARD WAREHOUSE BY ENTERING A '00' IN THE WAREHOUSE FIELD.
// ; THIS WILL, FOR THE PRODUCTS ENTERED, BRING BACK RECORDS
// ; FROM WAREHOUSES 7, 4 and 2. WAREHOUSE MAY ONLY BE WILD-
// ; CARDED FOR GPC 2 (FOOTWEAR).
// ; OTHER FIELDS WHICH MAY BE WILDCARDED (BY LEAVING THEM
// ; BLANK) ARE COLOR, SPEC, SHADE, PACKAGE TYPE AND UNIT OF
// ; MEASURE.
// ;
// ;
// ;
// ;-----------------------------------------------------------
// *********************
Program AV0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV0PW01 AV0PW01; // record
  AV0PW02 AV0PW02; // record
  AV0PW03 AV0PW03; // record
  AV0PW04 AV0PW04; // record
  AV0PW05 AV0PW05; // record
  AV0PW06 AV0PW06; // record
  AV0PW07 AV0PW07; // record
  AV0PW08 AV0PW08; // record
  AV0PW09 AV0PW09; // record
  AV0PW10 AV0PW10; // record
  AV5REC AV5REC; // record
  AV6REC AV6REC; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  OSFREC OSFREC; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VEQPRD01 VEQPRD01; // record
  VSYREG02 VSYREG02; // record
  WEU0100 WEU0100; // record
  WSY2000 WSY2000; // record
  XOWREC XOWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AV01TBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XCLTBL {deleteAfterUse = yes}; // table
  use XCDTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use AV0PM.AV0PM010,  // forms
      AV0PM.AV0PM020,
      AV0PM.AV0PM030, 
      AV0PM.AV0PM040
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AV0P001: AV0P001();
    goto AV0P010;
    AV0P010: AV0P010();
    goto AV0P020;
    AV0P020: AV0P020();
    if (converseVar.eventKey is pa2)
      goto AV0P010; /* back to initialize*/
    else
      goto AV0P020; /* continue*/
    end
    AV0P030: AV0P030();
  end // end main
end // end AV0P

// get style/color from av0v info
Function AV0P-0311()
   /* -------------------- av0p-0311 -----------------------------*/
              /* validate color code/abrv*/
   /* ------------------------------------------------------------*/

  AV0PM010.XXXERRID = "AV0P031";
  set SYCREC empty;
  set SQLCA empty;

  SYCREC.XGPCD = AV0PW07.XGPCD[AV0PWIX1];
  SYCREC.SY1STNBR = AV0PW07.SY1STNBR[AV0PWIX1];
  SYCREC.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
  SYCREC.XDMCD = AV0PW07.XDMCD[AV0PWIX1];

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* get unique*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found return code*/
      return; /* return*/
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/
    else
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
    end
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "PRODUCT FROM AV0V"; /* error info*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "AV0P0311"; /* program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* database name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
    /* -------------  end of process av0p-0311  ----------------*/
end // end AV0P-0311

// verify Canadian ownr group
Function AV0P-0421()
   /* -------------------  av0p-0421  ----------------------*/

   /* verify Canadian owner group*/

   /* -------------------  av0p-0421  ----------------------*/

  if (AV0PM010.XOWCD > "  ")
    if (AV0PM010.XWHCD == "  ")
      XOWREC.XWHCD = "41"; /* whse*/
      XOWREC.XOWCD = AV0PM010.XOWCD; /* format key*/
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        AV0PM010.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0) /* Table entry not found*/
        XOWREC.XWHCD = "42"; /* WHSE*/
        XOWREC.XOWCD = AV0PM010.XOWCD; /* format key*/
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          AV0PM010.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          converseLib.validationFailed(81); /* Indicate owner code*/
          set AV0PM010.XOWCD cursor, modified, bold;
          AV0PM010.XOWDESC = " ";
          return; /* Return to caller*/
        end
      end
    else
      XOWREC.XWHCD = AV0PM010.XWHCD;
      XOWREC.XOWCD = AV0PM010.XOWCD;
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        AV0PM010.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        converseLib.validationFailed(81); /* Indicate owner code invalid*/
        set AV0PM010.XOWCD cursor, modified, bold;
        AV0PM010.XOWDESC = " ";
        return; /* Return to caller*/
      end
    end
  else
    return;
  end

  if (XOWTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not owner code*/
    AV0PM010.XOWDESC = " "; /* Clear owner code abrv*/
    set AV0PM010.XOWCD cursor, modified, bold;
    converseLib.validationFailed(82); /* Indicate owner code not active*/
    return; /* Return to caller*/
  else
    set AV0PM010.XOWCD initialAttributes;
  end

    /* -------------  end of process av0p-0421  ----------------*/
end // end AV0P-0421

// Get the life cycle 10 - US
Function AV0P-1621()
  AV0P164(); /* ss on avhdr01*/
  AV0PW01.AV0PWFLG = "Y";
  AV0PW01.AV0PWLFL = "N";

  while (AV0PW01.AV0PWFLG == "Y")
    AV0P166(); /* search for life cycle 10 or invalid*/

  end
  AV0P169(); /* close ss on avhdr01*/

end // end AV0P-1621

// Life cycle 10 check - US eqmt
Function AV0P-1622()
   /* -------------------------- av0p-1622  --------------------------*/
                      /* life cycle 10 check*/
   /* -------------------------- av0p-1622  --------------------------*/

  AV5REC.XGPCD = AV0PM010.XGPCD;
  AV5REC.SY1STNBR = AV0PM010.SY1STNBR[AV0PWIX1];

  if (AV0PM010.SY2CLRID[AV0PWIX1] != " ")
    AV5REC.SY2CLRID = AV0PM010.SY2CLRID[AV0PWIX1];
  else
    AV5REC.SY2CLRID = "***";
  end

  if (AV0PM010.XDMCD[AV0PWIX1] != " ")
    AV5REC.XDMCD = AV0PM010.XDMCD[AV0PWIX1];
  else
    AV5REC.XDMCD = "**";
  end

  AV5REC.XQACD = AV0PM010.XQACD;

  if (AV0PM010.XGPCD == "03")
    if (AV0PM010.XOWCD != "  ")
      AV5REC.XOWCD = AV0PM010.XOWCD;
    else
      if (AV0PM010.XWHCD == "  "
       || AV0PM010.XWHCD == "51") /* US apparel*/
  /* change begin*/
  /* OR AV0PM010.XWHCD = '25';/* US apparel*/
  /* change end*/
  /* change begins - 01/31/01*/
  /* OR AV0PM010.XWHCD = '27';/* US victory Crestor*/
  /* change ends   - 01/31/01*/
        AV5REC.XOWCD = "**";
      else
        AV5REC.XOWCD = "00";
      end
    end
  else
    if (AV0PM010.XOWCD != "  ")
      AV5REC.XOWCD = AV0PM010.XOWCD;
    else
      AV5REC.XOWCD = "00";
    end
  end

  if (AV0PM010.PC2INSEG[AV0PWIX1] != " ")
    AV5REC.XSDCD = AV0PM010.PC2INSEG[AV0PWIX1];
  else
    AV5REC.XSDCD = "000";
  end

  if (AV0PM010.XSACD[AV0PWIX1] != " ")
    AV5REC.XSACD = AV0PM010.XSACD[AV0PWIX1];
  else
    AV5REC.XSACD = "***";
  end

  if (AV0PM010.XPGCD[AV0PWIX1] != " ")
    AV5REC.XPGCD = AV0PM010.XPGCD[AV0PWIX1];
  else
    AV5REC.XPGCD = "00";
  end

  if (AV0PM010.XUMCD[AV0PWIX1] != " ")
    AV5REC.XUMCD = AV0PM010.XUMCD[AV0PWIX1];
  else
    AV5REC.XUMCD = "**";
  end

  AV5REC.AV5RECTY = " ";

  AV5REC.AV4PRDBD = 0;

   /* if whse wildcarded, find US equipment in any warehouse except '09',*/
   /* '12', and '42'*/

  if (AV0PM010.XWHCD == "  ")
    AV5REC.XWHCD = "**";
    AV0P-1642(); /* sd on avhdr01*/
    AV0PW01.AV0PWFLG = "Y";
    AV0PW01.AV0PWLFL = "N";
    while (AV0PW01.AV0PWFLG == "Y")
      AV0P-1662(); /* search for life cycle 10*/
    end

    AV0P-1692(); /* close cd on avhdr01*/

  else
    AV5REC.XWHCD = AV0PM010.XWHCD;
    AV0P164(); /* ss on avhdr01*/
    AV0PW01.AV0PWFLG = "Y";
    AV0PW01.AV0PWLFL = "N";
    while (AV0PW01.AV0PWFLG == "Y")
      AV0P166(); /* search for life cycle 10*/
    end

    AV0P169(); /* close ss on avhdr01*/

  end

  if (AV0PW01.AV0PWLFL == "Y") /* life cycle 10 found*/
    set AV0PM010.SY1STNBR[AV0PWIX1] normal;
  else
    if (AV0PM010.XWHCD != " ")
      set AV0PM010.SY1STNBR[AV0PWIX1] cursor, modified, bold;
      converseLib.validationFailed(167);
       /* style has no life cycle 10 in availability*/
    end
  end

   /* -------------------------- av0p-1622  --------------------------*/
end // end AV0P-1622

// sd/hdr01 for key from map 10
Function AV0P-1642()
   /* ------------------------- av0p-1642 ------------------------*/

                       /* sd on davail.vavhdr01*/

   /* ------------------------- av0p-1642 ------------------------*/

  call "IO2310" ("SD", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0P";
    TA1REC.TA1LOCAT = "AV0P1642";
    TA1REC.TA1MAP = "AV0PM010";
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.clearScreen();
    
    AV0PW01.AV0PWFL2 = "N";
    AV0PW01.AV0PWFTW = "N";
    AV0PW01.AV0PWAPR = "N";
    converseLib.validationFailed(76); /* fatal error*/
    exit stack;
  end

   /* ------------------------- av0p-1642 ------------------------*/
end // end AV0P-1642

// search for life cycle 10
Function AV0P-1662()
   /* ------------------------- av0p-1662 ------------------------*/

   /* do select next on the set obtained from av0p-1642 (vavhdr01)*/

   /* ------------------------- av0p-1662 ------------------------*/

  AV0P-1682(); /* sn on avhdr01*/

  if (VAGen_SQLCODE == 100)
    AV0PW01.AV0PWFLG = "N"; /* end while flag*/
    AV0PW01.AV0PWLFL = "N"; /* life cycle 10 found flag*/
    return;
  end

  if (AV5REC.XWHCD == AV0PM010.XWHCD)
    /* next sentence*/
  else
    if (AV5REC.XWHCD == "09" /* promo whse*/
     || AV5REC.XWHCD == "12" /* international promo whse*/
     || AV5REC.XWHCD == "42") /* Canadian whse*/
      return;
    end
  end

  if (AV5REC.XLCCD == "10")
    if (AV0PM010.XGPCD == "03")

      /* Bulk mailer t-shirt owner groups ('mr' and 'sm') should only be*/
      /* displayed if the owner group codes are specifically entered*/
      /* in the map:*/

      if (AV5REC.XOWCD != "MR"
       && AV5REC.XOWCD != "SM")
        AV0PW01.AV0PWLFL = "Y"; /* life cycle 10 found flag*/
        AV0PW01.AV0PWFLG = "N"; /* end while flag*/
      else
        if (AV5REC.XOWCD == "MR"
         || AV5REC.XOWCD == "SM")
          if (AV0PM010.XOWCD == AV5REC.XOWCD)
            AV0PW01.AV0PWLFL = "Y"; /* life cycle 10 found flag*/
            AV0PW01.AV0PWFLG = "N"; /* end while flag*/
          end
        end
      end
    else
      AV0PW01.AV0PWLFL = "Y"; /* life cycle 10 found flag*/
      AV0PW01.AV0PWFLG = "N"; /* end while flag*/
    end
  end

   /* ------------------------- av0p-1662 ------------------------*/
end // end AV0P-1662

// nd/hdr01 for key from map 10
Function AV0P-1682()
   /* ------------------------- av0p-1682 ------------------------*/

   /* do select next on the set obtained from av0p164 (vavhdr01)*/

   /* ------------------------- av0p-1682 ------------------------*/

  AV0PM020.XXXERRID = "AV0P1682";
  set SQLCA empty;

  call "IO2310" ("ND", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0P";
    TA1REC.TA1LOCAT = "AV0P1682";
    TA1REC.TA1MAP = "AV0PM010";
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.clearScreen();
    
    AV0PW01.AV0PWFL2 = "N";
    AV0PW01.AV0PWFTW = "N";
    converseLib.validationFailed(76); /* fatal error*/
    exit stack;
  end

   /* ------------------------- av0p-1682 ------------------------*/
end // end AV0P-1682

// close sd on hdr01
Function AV0P-1692()
   /* ------------------------- av0p-1692 ------------------------*/

   /* do a close set on the set obtained from av0p164 (vavhdr01)*/

   /* ------------------------- av0p-1692 ------------------------*/

  AV0PM020.XXXERRID = "AV0P1692";
  set SQLCA empty;

  call "IO2310" ("CD", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0P";
    TA1REC.TA1LOCAT = "AV0P1692";
    TA1REC.TA1MAP = "AV0PM010";
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.clearScreen();
    
    AV0PW01.AV0PWFL2 = "N";
    AV0PW01.AV0PWFTW = "N";
    converseLib.validationFailed(76); /* fatal error*/
    exit stack;
  end

   /* ------------------------- av0p-1692 ------------------------*/
end // end AV0P-1692

// clear w04; default whse to w42
Function AV0P-3201()
   /* --------------------------- AV0P-3201 --------------------------*/

                       /* save Canadian hdr01 keys to av0pw04*/

   /* --------------------------- AV0P-3201 --------------------------*/

   /* index for w-s area av0pw04 where the keys from this select*/
   /* set are kept. this index used in av0p350.*/

  AV0PW01.AV0PWI10 = 0;
  AV0PW01.AV0PWSI2 = 0;

  AV0PW01.AV0PWWWH = "N"; /* wildcarded whse*/

  if (AV0PM010.XGPCD == "03") /* if apparel*/
    if (AV0PW07.XWHCD[AV0PWIX1] == "  ") /* if whse cd wildcarded*/
      AV0PW01.AV0PWWWH = "Y"; /* wildcarded whse*/
    end
  end

  set AV0PW04 empty;

  if (AV0PM010.XGPCD != "03")
    if (AV0PW07.XWHCD[AV0PWIX1] == "  ") /* if whse cd wildcarded*/
      AV0PW01.AV0PWWWH = "Y"; /* wildcarded whse*/
      if (COMMAREA.XWHCD == "42")
        AV0PW07.XWHCD[AV0PWIX1] = "42";
      else
        if (COMMAREA.XWHCD == "41")
          AV0PW07.XWHCD[AV0PWIX1] = "41";
        else
          if (COMMAREA.XWHCD == "43")
            AV0PW07.XWHCD[AV0PWIX1] = "43";
          else
            AV0PW07.XWHCD[AV0PWIX1] = "42"; /* default to whse 42*/
          end
        end
      end
    end
  end

  AV0P325(); /* ss on hdr01*/

  if (VAGen_SQLCODE != 0)
    if (AV0PW01.AV0PWWWH == "Y") /* wildcarded whse*/
      AV0PM010.XWHABRV = "  ";
      AV0PM010.XWHCD = "  ";
      AV0PW07.XWHCD[AV0PWIX1] = "  ";
    end
    return;
  end

  AV0P340(); /* sn on hdr01*/

  if (VAGen_SQLCODE == 100
   && AV0PW01.AV0PWWWH != "Y")
    AV0PW01.AV0PWI10 = 0;
    AV0PM020.PC2INSEG = " ";
    AV0PM020.XPGCD = " ";
    AV0PM020.XUMDESC = " ";
    AV0PM020.AV1CUPRC = 0;
    AV0PM020.AV1PRPRC = 0;
    AV0PM020.AV0PMPRC = 0;
    AV0PM020.AV1CUEDT = 0;
    AV0PM020.AV2CMNT = " ";
    AV0PM020.AV5SMTFL = " ";
    AV0PM020.AV0PMHMF = " ";
    AV0PM020.SY2ALNOR = " ";
    AV0PM020.AV0PMCHG = 0;
    AV0PM030.PC2INSEG = " ";
    AV0PM030.XPGCD = " ";
    AV0PM030.XUMDESC = " ";
    AV0PM030.AV1CUPRC = 0;
    AV0PM030.AV1PRPRC = 0;
    AV0PM030.AV0PMPRC = 0;
    AV0PM030.AV1CUEDT = 0;
    AV0PM030.AV2CMNT = " ";
    AV0PM030.AV5SMTFL = " ";
    AV0PM030.AV0PMCHG = 0;
    converseLib.validationFailed(138); /* no recs for this prd enter/pf16*/
    if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
      AV0PM020.SY2CLRDS = " ";
      AV0PM030.SY2CLRDS = " ";
      AV0PM020.SY2CLRID = " ";
      AV0PM030.SY2CLRID = " ";
    end
    AV0P345(); /* close set on hdr01*/
    return;
  end

  AV0PW01.AV0PWIX2 = 0;

  AV0P322(); /* save keys from select set into*/
                                   /* av0pw04*/

  AV0P345(); /* close set on hdr01*/

   /* next 'if' in case no products w/ the proper life cycle*/
   /* were found. if we did not do this then color would*/
   /* turn up blank on the ftwr/aprl screens. it will anyway*/
   /* when color is wildcarded on map 10 but this is better*/
   /* then nothing.*/

  if (AV0PW01.AV0PWSI2 == 0)
    AV0PM020.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
    AV0PM030.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
     /* both ftwr and apprl maps since ftwr and aprl processes*/
     /* (av0p300 and av0p700) use this process.*/
  end

  if (AV0PW01.AV0PWWWH != "Y") /* wildcarded whse*/
    if (converseVar.eventKey is pf15) /* paging backward thru prds*/
      AV0PW01.AV0PWI10 = AV0PW01.AV0PWSI2;
      AV0PW01.AV0PWI10 = AV0PW01.AV0PWI10 + 1; /* one more then whats in w04*/
       /* because of av0p350*/
      if (AV0PW01.AV0PWSI2 == 0)
        AV0PW01.AV0PWI10 = 0;
        AV0PM020.PC2INSEG = " ";
        AV0PM020.XPGCD = " ";
        AV0PM020.XUMDESC = " ";
        AV0PM020.AV1CUPRC = 0;
        AV0PM020.AV1PRPRC = 0;
        AV0PM020.AV0PMPRC = 0;
        AV0PM020.AV1CUEDT = 0;
        AV0PM020.AV2CMNT = " ";
        AV0PM020.AV5SMTFL = " ";
        AV0PM020.AV0PMHMF = " ";
        AV0PM020.SY2ALNOR = " ";
        AV0PM020.AV0PMCHG = 0;
        AV0PM030.PC2INSEG = " ";
        AV0PM030.XPGCD = " ";
        AV0PM030.XUMDESC = " ";
        AV0PM030.AV1CUPRC = 0;
        AV0PM030.AV1PRPRC = 0;
        AV0PM030.AV0PMPRC = 0;
        AV0PM030.AV1CUEDT = 0;
        AV0PM030.AV2CMNT = " ";
        AV0PM030.AV5SMTFL = " ";
        AV0PM030.AV0PMCHG = 0;
        converseLib.validationFailed(138); /* no recs found*/
        if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
          AV0PM020.SY2CLRID = " ";
          AV0PM030.SY2CLRID = " ";
          AV0PM020.SY2CLRDS = " ";
          AV0PM030.SY2CLRDS = " ";
        end
      end
    else
      if (AV0PW01.AV0PWSI2 == 0)
        AV0PW01.AV0PWI10 = 0;
        AV0PW01.AV0PWI10 = 0;
        AV0PM020.PC2INSEG = " ";
        AV0PM020.XPGCD = " ";
        AV0PM020.XUMDESC = " ";
        AV0PM020.AV1CUPRC = 0;
        AV0PM020.AV1PRPRC = 0;
        AV0PM020.AV0PMPRC = 0;
        AV0PM020.AV1CUEDT = 0;
        AV0PM020.AV2CMNT = " ";
        AV0PM020.AV5SMTFL = " ";
        AV0PM020.AV0PMHMF = " ";
        AV0PM020.SY2ALNOR = " ";
        AV0PM020.AV0PMCHG = 0;
        AV0PM030.PC2INSEG = " ";
        AV0PM030.XPGCD = " ";
        AV0PM030.XUMDESC = " ";
        AV0PM030.AV1CUPRC = 0;
        AV0PM030.AV1PRPRC = 0;
        AV0PM030.AV0PMPRC = 0;
        AV0PM030.AV1CUEDT = 0;
        AV0PM030.AV2CMNT = " ";
        AV0PM030.AV5SMTFL = " ";
        AV0PM030.AV0PMCHG = 0;
        converseLib.validationFailed(138); /* no recs found*/
        if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
          AV0PM020.SY2CLRDS = " ";
          AV0PM030.SY2CLRDS = " ";
          AV0PM020.SY2CLRID = " ";
          AV0PM030.SY2CLRID = " ";
        end
      end
    end
    return;
  end

   /* --------------------------- AV0P-3201 --------------------------*/
end // end AV0P-3201

// clear w04; no default whse
Function AV0P-3202()
   /* -------------------------- av0p3202 ------------------------*/

   /* save eqmt hdr01 keys to av0pw04 in order of style/color/whse*/

   /* -------------------------- av0p3202 ------------------------*/

   /* Index for w-s area av0pw04 where the keys from this select*/
   /* set are kept. This index used in av0p350.*/

  AV0PW01.AV0PWI10 = 0;
  AV0PW01.AV0PWSI2 = 0;
  AV0PW01.AV0PWIX2 = 0;

  AV0PW01.AV0PWWWH = "N"; /* wildcarded whse*/

  set AV0PW04 empty;

  if (AV0PW07.XWHCD[AV0PWIX1] == "  ") /* if whse cd wildcarded*/
    AV0PW01.AV0PWWWH = "Y"; /* wildcarded whse*/
    AV0PW07.XWHCD[AV0PWIX1] = "**";
  end

  AV0P-3252(); /* ss on hdr01 for equipment*/

  if (VAGen_SQLCODE != 0)
    if (AV0PW01.AV0PWWWH == "Y") /* wildcarded whse*/
      AV0PM010.XWHABRV = "  ";
      AV0PM010.XWHCD = "  ";
      AV0PW07.XWHCD[AV0PWIX1] = "  ";
    end
    return;
  end

  AV0P340(); /* sn on hdr01*/

  if (VAGen_SQLCODE == 100)
    AV0PW01.AV0PWI10 = 0;
    AV0PM020.PC2INSEG = " ";
    AV0PM020.XPGCD = " ";
    AV0PM020.XUMDESC = " ";
    AV0PM020.AV1CUPRC = 0;
    AV0PM020.AV1PRPRC = 0;
    AV0PM020.AV0PMPRC = 0;
    AV0PM020.AV1CUEDT = 0;
    AV0PM020.AV2CMNT = " ";
    AV0PM020.AV5SMTFL = " ";
    AV0PM020.AV0PMCHG = 0;
    AV0PM030.PC2INSEG = " ";
    AV0PM030.XPGCD = " ";
    AV0PM030.XUMDESC = " ";
    AV0PM030.AV1CUPRC = 0;
    AV0PM030.AV1PRPRC = 0;
    AV0PM030.AV0PMPRC = 0;
    AV0PM030.AV1CUEDT = 0;
    AV0PM030.AV2CMNT = " ";
    AV0PM030.AV5SMTFL = " ";
    AV0PM030.AV0PMCHG = 0;
    converseLib.validationFailed(138); /* no recs for this prd enter/pf16*/
    if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
      AV0PM020.SY2CLRDS = " ";
      AV0PM030.SY2CLRDS = " ";
      AV0PM020.SY2CLRID = " ";
      AV0PM030.SY2CLRID = " ";
    end
    AV0P345(); /* close avhdr*/
    return;
  end

  AV0PW01.AV0PWIX2 = 0;

  AV0P-3222(); /* move to av0pw04*/

  AV0P345(); /* close avhdr*/

   /* next 'if' in case no products w/ the proper life cycle*/
   /* were found. if we did not do this then color would*/
   /* turn up blank on the ftwr/aprl screens. it will anyway*/
   /* when color is wildcarded on map 10 but this is better*/
   /* than nothing.*/

  if (AV0PW01.AV0PWSI2 == 0)
    AV0PM020.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
    AV0PM030.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
     /* both ftwr and apprl maps since ftwr and aprl processes*/
     /* (av0p300 and av0p700) use this process.*/
  end

  if (AV0PW01.AV0PWWWH != "Y") /* wildcarded whse*/
    if (converseVar.eventKey is pf15) /* paging backward thru prds*/
      AV0PW01.AV0PWI10 = AV0PW01.AV0PWSI2;
      AV0PW01.AV0PWI10 = AV0PW01.AV0PWI10 + 1; /* one more than whats in w04*/
       /* because of av0p350*/
      if (AV0PW01.AV0PWSI2 == 0)
        AV0PW01.AV0PWI10 = 0;
        AV0PM020.PC2INSEG = " ";
        AV0PM020.XPGCD = " ";
        AV0PM020.XUMDESC = " ";
        AV0PM020.AV1CUPRC = 0;
        AV0PM020.AV1PRPRC = 0;
        AV0PM020.AV0PMPRC = 0;
        AV0PM020.AV1CUEDT = 0;
        AV0PM020.AV2CMNT = " ";
        AV0PM020.AV5SMTFL = " ";
        AV0PM020.AV0PMCHG = 0;
        AV0PM030.PC2INSEG = " ";
        AV0PM030.XPGCD = " ";
        AV0PM030.XUMDESC = " ";
        AV0PM030.AV1CUPRC = 0;
        AV0PM030.AV1PRPRC = 0;
        AV0PM030.AV0PMPRC = 0;
        AV0PM030.AV1CUEDT = 0;
        AV0PM030.AV2CMNT = " ";
        AV0PM030.AV5SMTFL = " ";
        AV0PM030.AV0PMCHG = 0;
        converseLib.validationFailed(138); /* no recs found*/
        if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
          AV0PM020.SY2CLRID = " ";
          AV0PM030.SY2CLRID = " ";
          AV0PM020.SY2CLRDS = " ";
          AV0PM030.SY2CLRDS = " ";
        end
      end
    else
      if (AV0PW01.AV0PWSI2 == 0)
        AV0PW01.AV0PWI10 = 0;
        AV0PW01.AV0PWI10 = 0;
        AV0PM020.PC2INSEG = " ";
        AV0PM020.XPGCD = " ";
        AV0PM020.XUMDESC = " ";
        AV0PM020.AV1CUPRC = 0;
        AV0PM020.AV1PRPRC = 0;
        AV0PM020.AV0PMPRC = 0;
        AV0PM020.AV1CUEDT = 0;
        AV0PM020.AV2CMNT = " ";
        AV0PM020.AV5SMTFL = " ";
        AV0PM020.AV0PMCHG = 0;
        AV0PM030.PC2INSEG = " ";
        AV0PM030.XPGCD = " ";
        AV0PM030.XUMDESC = " ";
        AV0PM030.AV1CUPRC = 0;
        AV0PM030.AV1PRPRC = 0;
        AV0PM030.AV0PMPRC = 0;
        AV0PM030.AV1CUEDT = 0;
        AV0PM030.AV2CMNT = " ";
        AV0PM030.AV5SMTFL = " ";
        AV0PM030.AV0PMCHG = 0;
        converseLib.validationFailed(138); /* no recs found*/
        if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
          AV0PM020.SY2CLRDS = " ";
          AV0PM030.SY2CLRDS = " ";
          AV0PM020.SY2CLRID = " ";
          AV0PM030.SY2CLRID = " ";
        end
      end
    end
    return;
  end

   /* ------------------------- av0p-3202 ------------------------*/
end // end AV0P-3202

// save hdr01 keys from ss
Function AV0P-3222()
   /* ------------------------- av0p-3222 ------------------------*/
                       /* save hdr01 keys from select set*/
   /* ------------------------------------------------------------*/

  AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;

  if (AV0PW01.AV0PWWWH == "Y" /* wildcarded whse*/
   && VAGen_SQLCODE == 100)  
    AV0PW01.AV0PWSI2 = AV0PW01.AV0PWIX2;
    AV0PW04.XWHCD[AV0PWIX2] = AV0PW07.XWHCD[AV0PWIX1];
    AV0PW04.SY1STNBR[AV0PWIX2] = AV0PW07.SY1STNBR[AV0PWIX1];
    AV0PW04.SY2CLRID[AV0PWIX2] = AV0PW07.SY2CLRID[AV0PWIX1];
    AV0PW04.XDMCD[AV0PWIX2] = AV0PW07.XDMCD[AV0PWIX1];
    AV0PW04.XUMCD[AV0PWIX2] = AV0PW07.XUMCD[AV0PWIX1];
    AV0PW04.XOWCD[AV0PWIX2] = AV0PW07.XOWCD[AV0PWIX1];
    AV0PW04.PC2INSEG[AV0PWIX2] = AV0PW07.PC2INSEG[AV0PWIX1];
    AV0PW04.XPGCD[AV0PWIX2] = AV0PW07.XPGCD[AV0PWIX1];
    AV0PW04.AV0PW-EQMT-FL[AV0PWIX2] = AV0PW07.AV0PW-EQMT-FL[AV0PWIX1];
    AV0PW04.AV4PRDBD[AV0PWIX2] = 0;
    if (AV0PW01.AV0PWIX2 > 1)
      AV0PW04.AV0PWNHD[AV0PWIX2] = "Y"; /* hdr for this product*/
    else
      AV0PW04.AV0PWNHD[AV0PWIX2] = "N"; /* no hdr for this product*/
    end
    return;
  end

   /* same as above if life cycle not correct*/
  if (AV0PW01.AV0PWWWH == "Y" /* wildcarded whse*/
   && AV5REC.XWHCD != "09"    /* promo whse*/
   && AV5REC.XWHCD != "12"    /* promo international whse*/
   && AV5REC.XWHCD != "42"    /* Canada whse*/
   && AV5REC.XLCCD != AV0PW07.XLCCD[AV0PWIX1])
    AV0PW01.AV0PWSI2 = AV0PW01.AV0PWIX2;
    AV0PW04.XWHCD[AV0PWIX2] = AV5REC.XWHCD;
    AV0PW04.SY1STNBR[AV0PWIX2] = AV5REC.SY1STNBR;
    AV0PW04.SY2CLRID[AV0PWIX2] = AV5REC.SY2CLRID;
    AV0PW04.XDMCD[AV0PWIX2] = AV5REC.XDMCD;
    AV0PW04.XUMCD[AV0PWIX2] = AV5REC.XUMCD;
    AV0PW04.XOWCD[AV0PWIX2] = AV5REC.XOWCD;
    AV0PW04.PC2INSEG[AV0PWIX2] = AV5REC.XSDCD;
    AV0PW04.XPGCD[AV0PWIX2] = AV5REC.XPGCD;
    AV0PW04.AV0PW-EQMT-FL[AV0PWIX2] = AV0PW07.AV0PW-EQMT-FL[AV0PWIX1];
    AV0PW04.AV4PRDBD[AV0PWIX2] = 0;
    if (AV0PW01.AV0PWIX2 > 1)
      AV0PW04.AV0PWNHD[AV0PWIX2] = "Y"; /* hdr for this product*/
    else
      AV0PW04.AV0PWNHD[AV0PWIX2] = "N"; /* no hdr for this product*/
    end
  end

  while (AV0PW01.AV0PWIX2 <= 50)
    if (AV5REC.XLCCD == AV0PW07.XLCCD[AV0PWIX1])
      if (AV0PW01.AV0PWWWH == "Y" /* wildcarded whse*/
       && AV5REC.XWHCD != "09"    /* promo whse*/
       && AV5REC.XWHCD != "12"    /* promo international whse*/
       && AV5REC.XWHCD != "42"    /* Canada whse*/
      )                          
        AV0P323(); /* move key data to working storage*/
      else /* not wildcarded whse*/
        if (AV5REC.XWHCD == AV0PM010.XWHCD /* record & map whses match*/
         || AV5REC.XWHCD == AV0PW07.XWHCD[AV0PWIX1])
                                   /* record & ws whses match*/

          AV0P323(); /* move key data to working storage*/
        else
          AV0P340(); /* sn on hdr1 set (ftwr & aprl)*/
          if (VAGen_SQLCODE == 100)
            AV0PW01.AV0PWIX2 = 51;
          end
        end
      end
    else
      AV0P340(); /* sn on hdr1 set (ftwr & aprl)*/
      if (VAGen_SQLCODE == 100)
        AV0PW01.AV0PWIX2 = 51;
      end
    end
  end

   /* ------------------------- av0p-3222 ------------------------*/
end // end AV0P-3222

// ss/hdr01 for key from map 10
Function AV0P-3252()
   /* --------------------------- av0p325 ------------------------*/
                     /* do select set on a key from one of*/
                     /* the 10 keys from map 10.*/
   /* --------------------------- av0p325 ------------------------*/

  AV0PM020.XXXERRID = "AV0P325";
  set AV5REC empty;
  set SQLCA empty;

  if (AV0PM010.XWHCD == "  " /* if warehouse wildcarded*/
   && AV0PW01.AV0PWFL3 == "N") /* and not from AV0V*/
    AV5REC.XWHCD = "**"; /* wildcard it*/
  else
    AV5REC.XWHCD = AV0PW07.XWHCD[AV0PWIX1]; /* move warehouse code*/
  end

  AV5REC.XGPCD = AV0PW07.XGPCD[AV0PWIX1];
  AV5REC.SY1STNBR = AV0PW07.SY1STNBR[AV0PWIX1];

  if (AV0PW07.SY2CLRID[AV0PWIX1] != " ")
    AV5REC.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
  else
    AV5REC.SY2CLRID = "***";
  end

  if (AV0PW07.XDMCD[AV0PWIX1] != " ")
    AV5REC.XDMCD = AV0PW07.XDMCD[AV0PWIX1];
  else
    AV5REC.XDMCD = "**";
  end

  AV5REC.XQACD = AV0PW07.XQACD[AV0PWIX1];

  if (AV0PM010.XOWCD == "  " /* if owner group*/
   && AV0PW01.AV0PWFL3 == "N") /* and not from AV0V*/
    AV5REC.XOWCD = "**"; /* wildcard it*/
  else
    AV5REC.XOWCD = AV0PW07.XOWCD[AV0PWIX1]; /* move owner group cd*/
  end

  if (AV0PW07.PC2INSEG[AV0PWIX1] != " ")
    AV5REC.XSDCD = AV0PW07.PC2INSEG[AV0PWIX1];
  else
    AV5REC.XSDCD = "000";
  end

  if (AV0PW07.XSACD[AV0PWIX1] != " ")
    AV5REC.XSACD = AV0PW07.XSACD[AV0PWIX1];
  else
    AV5REC.XSACD = "000";
  end

  if (AV0PW07.XPGCD[AV0PWIX1] != " ")
    AV5REC.XPGCD = AV0PW07.XPGCD[AV0PWIX1];
  else
    AV5REC.XPGCD = "00";
  end

  if (AV0PW07.XUMCD[AV0PWIX1] != " ")
    AV5REC.XUMCD = AV0PW07.XUMCD[AV0PWIX1];
  else
    AV5REC.XUMCD = "**";
  end

  if (AV0PW07.XLCCD[AV0PWIX1] != " ")
    AV5REC.XLCCD = AV0PW07.XLCCD[AV0PWIX1];
  else
    AV5REC.XLCCD = "**";
  end

  AV5REC.AV5RECTY = " ";

  AV5REC.AV4PRDBD = 0;

  if (AV0PM010.XWHCD == "  " /* if warehouse wildcarded*/
   && AV0PW01.AV0PWFL3 == "N") /* and not from AV0V*/
    call "IO2310" ("SD", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  else
    call "IO2310" ("SS", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* for specific whse*/
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "AV0P-3252";
      TA1REC.TA1MAP = "AV0PM010";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
      TA1REC.TA1TBLKE = AV0PW07.SY1STNBR[AV0PWIX1]; /* table key*/
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1FUNC = "POST";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.clearScreen();
        
        converseLib.clearScreen();
        
        AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 - 1;
        AV0PW01.AV0PWFL2 = "Y";
        converseLib.validationFailed(75);
        return;
      else
        TA1REC.TA1FUNC = "RETN";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.clearScreen();
        
        converseLib.clearScreen();
        
        AV0PW01.AV0PWFL2 = "N";
        AV0PW01.AV0PWFTW = "N";
        AV0PW01.AV0PWAPR = "N";
        converseLib.validationFailed(76); /* fatal error*/
        exit stack;
      end
    end
  end

   /* --------------------------- av0p325 ------------------------*/
end // end AV0P-3252


// SY2000 for AV0PM020 CAN ovrrds
Function AV0P-4531()
   /* ---------------------- av0p-4531 ---------------------------*/

    /* get Canadian SY2ALNOR - Allow New Order Flag*/

   /* ---------------------- av0p-4531 ---------------------------*/

  AV0PM020.XXXERRID = "AV0P453";
  set WSY2000 empty;
  set SQLCA empty;

  WSY2000.XGP-GPC-CD = SY2REC.XGPCD;
  WSY2000.SY-STY-NBR = SY2REC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SY2REC.XDMCD;
  WSY2000.XDR-PROD-REG-CD = "05"; /* Canadian region*/
  WSY2000.WSY2000-OPTION-CODE = "S "; /* select unique*/
  WSY2000.WSY2000-SUB-OPTION-CODE = "O"; /* old format*/

  try
    call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};
  end

  if (WSY2000.WSY2000-RETURN-CODE == 00) /* record found*/
    AV0PM020.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;
    AV0PM020.AV0PMHMF = WSY2000.OP-HMDL-HOT-FL;
                                   /* move hot model flag to map*/
  else
    if (WSY2000.WSY2000-RETURN-CODE == 01
     || WSY2000.WSY2000-RETURN-CODE == 02) /* not found*/
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "SY2000 ";
      TA1REC.TA1MAP = "AV0PM020";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSYREG02"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end

   /* -------------  end of process av0p-4531  ------------------*/
end // end AV0P-4531

// SY2000 for AV0PM020 CAN ovrrds
Function AV0P-4541()
   /* ---------------------- av0p-4541 ---------------------------*/

    /* get Canadian SY2ALNOR - Allow New Order Flag*/

   /* ---------------------- av0p-4541 ---------------------------*/

  AV0PM020.XXXERRID = "AV0P454";
  set WSY2000 empty;
  set SQLCA empty;

  WSY2000.XGP-GPC-CD = SY2REC.XGPCD;
  WSY2000.SY-STY-NBR = SY2REC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SY2REC.XDMCD;
  WSY2000.XDR-PROD-REG-CD = "05"; /* Canadian region*/
  WSY2000.WSY2000-OPTION-CODE = "S "; /* select unique*/
  WSY2000.WSY2000-SUB-OPTION-CODE = "O"; /* old format*/

  try
    call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};
  end

  if (WSY2000.WSY2000-RETURN-CODE == 00) /* record found*/
    AV0PM020.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;
    AV0PM020.AV0PMHMF = WSY2000.OP-HMDL-HOT-FL;
  else
    if (WSY2000.WSY2000-RETURN-CODE == 01
     || WSY2000.WSY2000-RETURN-CODE == 02) /* not found*/
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "SY2000 ";
      TA1REC.TA1MAP = "AV0PM030";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSYREG02"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end

   /* ---------------  end of process av0p-4531  ------------------*/
end // end AV0P-4541
// SY2000 for AV0PM030 CAN ovrrds
Function AV0P-4551()
   /* ---------------------- av0p-4551 ---------------------------*/

    /* get Canadian SY2ALNOR - Allow New Order Flag*/

   /* ---------------------- av0p-4551 ---------------------------*/

  AV0PM020.XXXERRID = "AV0P455";
  set WSY2000 empty;
  set SQLCA empty;

  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.XDR-PROD-REG-CD = "05"; /* Canadian region*/
  WSY2000.WSY2000-OPTION-CODE = "S "; /* select unique*/
  WSY2000.WSY2000-SUB-OPTION-CODE = "O"; /* old format*/

  try
    call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};
  end

  if (WSY2000.WSY2000-RETURN-CODE == 00) /* record found*/
    AV0PM030.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;
  else
    if (WSY2000.WSY2000-RETURN-CODE == 01
     || WSY2000.WSY2000-RETURN-CODE == 02) /* not found*/
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "SY2000 ";
      TA1REC.TA1MAP = "AV0PM030";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSYREG02"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end

   /* ----------------  end of process av0p-4531  ------------------*/
end // end AV0P-4551

// display blank style info
Function AV0P-900()
   /* process to display blank style quantities:*/

  AV0PW10.AV0PWPFL = "Y"; /* execute process flag*/

  if (AV0PW10.SY1BSTNB > " ") /* if blank style to display*/
    set AV0PW02 empty;
    AV0PW10.AV0PWDFL = "Y"; /* set get data flag to yes*/
  else
    AV0PW10.AV0PWDFL = "N"; /* set get data flag to no*/
  end

   /* perform display blank style information until*/
   /* reset of screened style quantities is requested*/

  while (AV0PW10.AV0PWPFL == "Y") /* while process flag = 'yes'*/
    AV0P-9001(); /* display blank quantities process*/
  end

end // end AV0P-900

// display blank style info
Function AV0P-9001()

  if (AV0PW10.AV0PWDFL == "Y")
    AV0P-910(); /* select set davail.vavhdr01 for blank*/
  else
    if (AV0PW10.AV0PWFFL != "Y")
      AV0P-9002(); /* format 'no blank avail msg'*/
    end
  end

  AV0P-920(); /* format blank style map*/

  AV0P-930(); /* converse blank style map*/

  AV0P-940(); /* check pfkey transfers*/

end // end AV0P-9001

// get blank style hdr info
Function AV0P-9002()
   /* format 'no blank availability message*/

  AV0PW10.AV0PWMS1 = "NO BLANK AVAIL ";
  AV0PW10.AV0PWFFL = "N"; /* no to format map flag*/

end // end AV0P-9002

// get blank style availability
Function AV0P-910()

  if (AV0PW10.SY1BSTNB > " " /* if blank style to display*/
   && AV0PW10.AV0PWDFL == "Y") /* and request for data*/
    AV0P-911(); /* get blank style info from davail.vavhdr01*/
    AV0P-912(); /* get blank style info from davail.vavqty01*/
  end
end // end AV0P-910

// get blank style hdr info
Function AV0P-911()
   /* get blank style information from davail.vavhdr01*/

  AV0P-9111(); /* format davail.vavhdr01 key*/
  AV0P-9112(); /* select unique from davail.vavhdr01*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if product not found*/
    AV0PW10.AV0PWMS1 = "NO BLANK AVAIL ";
    AV0PW10.AV0PWDFL = "N"; /* no to request data flag*/
    AV0PW10.AV0PWFFL = "N"; /* no to format map flag*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    AV0P-9113(); /* move sizes and cond codes to ws*/
  end


end // end AV0P-911

// format key for davail.vavhdr01
Function AV0P-9111()
   /* set up av5rec with blank style key for a select unique*/
   /* from davail.vavdhr01:*/

  set AV5REC empty; /* clear davail.vavhdr01 work record*/

  AV5REC.XWHCD = AV0PW10.XWHCD; /* warehouse*/
  AV5REC.XGPCD = AV0PW10.XGPCD; /* general product class*/
  AV5REC.SY1STNBR = AV0PW10.SY1BSTNB; /* blank style number*/
  AV5REC.SY2CLRID = AV0PW10.SY2BCLCD; /* blank color code id*/
  AV5REC.XDMCD = AV0PW10.XDMCD; /* dimension code*/
  AV5REC.XQACD = AV0PW10.XQACD; /* quality code*/
  AV5REC.XOWCD = AV0PW10.XOWCD; /* blank style owner code*/
  AV5REC.XSDCD = AV0PW10.PC2INSEG; /* inventory segment code*/
  AV5REC.XSACD = AV0PW10.XSACD; /* shade code*/
  AV5REC.XPGCD = AV0PW10.XPGCD; /* package type code*/
  AV5REC.XUMCD = AV0PW10.XUMCD; /* unit of measure*/
  AV5REC.AV4PRDBD = AV0PW10.AV4PRDBD; /* season begin date*/

end // end AV0P-9111

// select from davail.vavhdr01
Function AV0P-9112()
   /* select unique from davail.vavhdr01 for blank style info*/

  try
    call "IO2310" ("S ", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AV0PM040.XXXERRID = "AV0P-9112";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "AV0P-9112"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

end // end AV0P-9112

// move sizes & cond cds to ws
Function AV0P-9113()
   /* get valid sizes and move sizes, condition codes and dates to*/
   /* working storage:*/

  AV0PW01.AV0PWIX7 = 1;

  AV0P-91131(); /* get size descriptions*/

   /* the next while is for moving the up to 40 size descriptions*/
   /* and condition code descriptions to w-s.*/

  AV0PW01.AV0PWIX7 = 1;
  AV0PW01.AV0PWIX2 = 1;

  while (AV0PW01.AV0PWIX7 <= 40)
    if (AV5REC.XCDCD[AV0PWIX7] != " ")
      AV0PW02.SY4IDDSC[AV0PWIX2] = PG3REC.SY4IDDSC[AV0PWIX7];
      AV0PW01.XCDCD = AV5REC.XCDCD[AV0PWIX7];
      if (AV0PW01.XCDCD in XCDTBL.XCDCD)
        AV0PW02.XCDABRV[AV0PWIX2] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0PW01.AV0PWIX7 = AV0PW01.AV0PWIX7 + 1;
  end

  AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 - 1;
  AV0PW01.AV0PWSLM = AV0PW01.AV0PWIX2; /* nbr sizes for this prd*/

end // end AV0P-9113

// get blank style valid sizes
Function AV0P-91131()
   /* get size descriptions using PG1050*/

  set PG3REC empty;

  PG3REC.XGPCD = AV5REC.XGPCD;
  PG3REC.SY1STNBR = AV5REC.SY1STNBR;
  PG3REC.SY2CLRID = AV5REC.SY2CLRID;
  PG3REC.XDMCD = AV5REC.XDMCD;
  PG3REC.XQACD = "**";
  PG3REC.PG3RETCD = 0;

  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  try
    call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE != +0
   && SQLCA.VAGen_SQLCODE != +100)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG ";
    TA1REC.TA1TBLVU = "VSYCLR01";
    TA1REC.TA1LOCAT[3] = "AV0P-91131";
    TA1REC.TA1LOCAT[4] = "PG1050";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

end // end AV0P-91131

// get blank style qty info
Function AV0P-912()
   /* get the at once and period records for blank style*/
     /* from davail.vavqty01*/

  if (AV0PW10.AV0PWDFL == "Y" /* if vavhdr01 record obtained*/
   && AV0PW10.SY1BSTNB > " ") /* and blank style to display*/

    AV0P-9121(); /* set up davail.vavqty01 rec key*/
    AV0P-9122(); /* select set from davail.vavqty01*/

    if (SQLCA.VAGen_SQLCODE != 0) /* if system or db2 error*/
      AV0P525(); /* close set davail.vavqty01*/
      AV0PW10.AV0PWDFL = "N"; /* move no to request data flag*/
      AV0PW10.AV0PWFFL = "N"; /* move no to format map flag*/
      return;
    else
      AV0P520(); /* select first row from vavqty01*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* if record not found*/
      AV0PW10.AV0PWMS1 = "NO BLANK AVAIL "; /* load message*/
      set AV0PW02 empty;
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* if select successful*/
        AV0P-9123(); /* move qtys to ws and select next row*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == 0) /* if data obtained successfully*/
      AV0PW10.AV0PWDFL = "N"; /* no to request data flag*/
      AV0PW10.AV0PWFFL = "Y"; /* move yes to format map flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if data base contention*/
        AV0PW10.AV0PWFFL = "N"; /* move no to format map flag*/
      else /* system or db2 error*/
        AV0PW10.AV0PWDFL = "N"; /* move no to request data flag*/
        AV0PW10.AV0PWFFL = "N"; /* move no to format map flag*/
      end
    end
  end

end // end AV0P-912

// set qty01 key for blank style
Function AV0P-9121()
   /* set up key for davail.vavqty01 select set*/

  set AV6REC empty;

  AV6REC.XWHCD = AV5REC.XWHCD;
  AV6REC.XGPCD = AV5REC.XGPCD;
  AV6REC.SY1STNBR = AV5REC.SY1STNBR;
  AV6REC.SY2CLRID = AV5REC.SY2CLRID;
  AV6REC.XDMCD = AV5REC.XDMCD;
  AV6REC.XQACD = AV5REC.XQACD;
  AV6REC.XOWCD = AV5REC.XOWCD;
  AV6REC.XSDCD = AV5REC.XSDCD;
  AV6REC.XSACD = AV5REC.XSACD;
  AV6REC.XPGCD = AV5REC.XPGCD;
  AV6REC.XUMCD = AV5REC.XUMCD;
  AV6REC.AV6PRDDT = AV5REC.AV4PRDBD;
  AV6REC.AV6RECTY = "$";

  AV0PW03.AV0PWOPT = "SS";

  if (AV0PW01.AV0PWSFL == "C") /* use current season*/
    AV0PW01.AV0PWFDT = AV0PW01.AV0PWCBD;
    AV0PW01.AV0PWFDD = 0;
    AV0PW03.AV0PWLOD = AV0PW01.AV0PWFDT;
    AV0PW03.AV0PWHID = AV0PW01.AV0PWCED;
  else /* use next season*/
    AV0PW01.AV0PWFDT = AV0PW01.AV0PWNBD;
    AV0PW01.AV0PWFDD = 0;
    AV0PW03.AV0PWLOD = AV0PW01.AV0PWFDT;
    AV0PW03.AV0PWHID = 999999999;
  end

end // end AV0P-9121

// select set davail.vavqty01
Function AV0P-9122()
   /* select set for blank style from davail.vavqty01*/
      /* get all at once and period records:*/

  call "IO2320" (AV0PW03, SQLCA, AV6REC) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AV0PM030.XXXERRID = "AV0P-9122";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "AV0P-9122"; /* PROGRAM NUMBER*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV6REC.AV6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

end // end AV0P-9122

// move blank qtys to ws
Function AV0P-9123()

   /* save the at once and period record quantites in working storage*/

  AV0PW01.AV0PWSNP = 0; /* nbr of periods*/

   /* MOVE IN PERIOD AND AT ONCE QTY'S TO AV0PW02*/

  AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/

  if (AV6REC.AV6RECTY == "N")
    AV0PW02.AV0PWADG = "  A/O";
  else
    if (AV6REC.AV6RECTY == "P")
      AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
      AV0PW02.AV0PWAMM = AV0PW01.AV0PWFMN;
      AV0PW02.AV0PWADY = AV0PW01.AV0PWFDD;
      AV0PW02.AV0PWASL = "/";
    end
  end

  AV0PW01.AV0PWIX2 = 1;
  AV0PW01.AV0PWIX9 = 1;

  while (AV0PWIX2 <= 40)
    if (AV5REC.XCDCD[AV0PWIX2] != " ")
      AV0PW02.AV0PWAQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
      AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
      AV0PW02.AV0PWATO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWATO;
      AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
    end
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end

  AV0P520(); /* select next on qty01*/

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWBMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWBDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWBSL = "/";
  end

  AV0PW01.AV0PWIX2 = 1;
  AV0PW01.AV0PWIX9 = 1;
  while (AV0PWIX2 <= 40)
    if (AV5REC.XCDCD[AV0PWIX2] != " ")
      AV0PW02.AV0PWBQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
      AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
      AV0PW02.AV0PWBTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWBTO;
      AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
    end
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end

  AV0P520(); /* select next on qty01*/

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWCMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWCDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWCSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWCQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWCTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWCTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWDMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWDDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWDSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWDQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWDTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWDTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWEMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWEDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWESL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWEQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWETO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWETO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end

  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWFMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWFDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWFSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWFQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWFTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWFTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWGMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWGDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWGSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWGQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWGTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWGTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
  end

  AV0P525(); /* close qty01 set*/

end // end AV0P-9123

// format map w blank sty info
Function AV0P-920()
  set AV0PM040 initial; /* clear blank style information map*/

   /* format map with screened style information:*/
  AV0P-9201(); /* move screened style info to blank map*/

  if (AV0PW10.AV0PWFFL == "Y") /* if format map flag = yes*/
    if (AV0PW10.SY1BSTNB > " ") /* and blank style to display*/
      AV0P-9202(); /* move blank style codes & qtys to map*/
    end
  end

end // end AV0P-920

// move screened style info
Function AV0P-9201()
   /* set up the blank style map with screened style information*/

  AV0PM040.XXXMAPNM = "AV0PM040"; /* mapname*/
  AV0PM040.XXXRVNBR = "00"; /* revision number*/
  AV0PM040.XXXCURDT = AV0PM030.XXXCURDT; /* current date*/

  AV0PM040.XGPABRV = AV0PM030.XGPABRV; /* gpc abreviation*/
  AV0PM040.SY1STNBR = AV0PM030.SY1STNBR; /* style number*/
  AV0PM040.SY1STYNM = AV0PM030.SY1STYNM; /* style name*/
  AV0PM040.XWHCD = AV0PM030.XWHCD; /* warehouse*/
  AV0PM040.XWHABRV = AV0PM030.XWHABRV; /* warehouse abreviation*/
  AV0PM040.XOWCD = AV0PM030.XOWCD; /* owner code*/
  AV0PM040.XOWABRV = AV0PM030.XOWABRV; /* owner abreviation*/
  AV0PM040.SY2CLRID = AV0PM030.SY2CLRID; /* color code id*/
  AV0PM040.SY2CLRDS = AV0PM030.SY2CLRDS; /* color description*/
  AV0PM040.XGAABRV = AV0PM030.XGAABRV; /* gender age abreviation*/
  AV0PM040.XSPDESC = AV0PM030.XSPDESC;
                                   /* sport acivity description*/
  AV0PM040.XDMCD = AV0PM030.XDMCD; /* dimension code*/
  AV0PM040.XDMDESC = AV0PM030.XDMDESC; /* dimension description*/
  AV0PM040.PC2INSEG = AV0PM030.PC2INSEG; /* inventory segment code*/
  AV0PM040.XPGCD = AV0PM030.XPGCD; /* package type code*/
  AV0PM040.XUMDESC = AV0PM030.XUMDESC;
                                   /* unit of measure description*/
  AV0PM040.AV5SMTFL = AV0PM030.AV5SMTFL; /* smart reserve flag*/
  AV0PM040.AV1CUPRC = AV0PM030.AV1CUPRC; /* current wholesale price*/
  AV0PM040.AV1CUEDT = AV0PM030.AV1CUEDT; /* price effective date*/
  AV0PM040.AV1PRPRC = AV0PM030.AV1PRPRC; /* previous wholesale price*/
  AV0PM040.AV0PMCHG = AV0PM030.AV0PMCHG; /* price percent changed*/
  AV0PM040.AV2CMNT = AV0PM030.AV2CMNT; /* product comment*/
  AV0PM040.AV0PMPRM = AV0PM030.AV0PMPRM;
                                   /* 'retail' or 'cost' literal*/
  AV0PM040.AV0PMPRC = AV0PM030.AV0PMPRC; /* retail price or cost*/

end // end AV0P-9201

// format map w blank sty qtys
Function AV0P-9202()
   /* set up the blank style map av0pm0040*/

  if (converseVar.eventKey is pf11)
    if (AV0PW01.AV0PWIX3 > AV0PW01.AV0PWSLM /* ix3 gt nbr sizes for prd?*/
     || AV0PW01.AV0PWSLM == 0)              /* or nbr of sizes eq 0*/
      converseLib.validationFailed(137); /* no more sizes for prd*/
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 - AV0PW01.AV0PWSIX;
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8 - AV0PW01.AV0PWIX3;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX3;
    end
  else
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWSIX - 8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX3;
      if (AV0PW01.AV0PWIX3 < 0)
        AV0PW01.AV0PWIX3 = 1;
        AV0PW01.AV0PWIX8 = 1;
      end
    else
      AV0PW01.AV0PWIX3 = 1;
      AV0PW01.AV0PWIX8 = 1;
    end
  end

  AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
  AV0PW01.AV0PWIX5 = 1;


   /* move size descriptions and condition code abrv's to map*/

  while (AV0PWIX5 <= 8)
    if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM) /* ix3 gt size limit for prd?*/
      AV0PM040.SY4IDDSC[AV0PWIX5] = AV0PW02.SY4IDDSC[AV0PWIX3];
      AV0PM040.XCDABRV[AV0PWIX5] = AV0PW02.XCDABRV[AV0PWIX3];
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
    else
      AV0PM040.SY4IDDSC[AV0PWIX5] = " ";
      AV0PM040.XCDABRV[AV0PWIX5] = " ";
    end
    AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
  end

   /* if no at once or qty records existed skip the rest of this.*/

  if (converseVar.validationMsgNum == 136) /* no at once or period records*/
    return;
  end

   /* move in the at once qty's (if any) and the period qty's to*/
   /* the map.*/

  if (AV0PW02.AV0PWADG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM040.AV0PMADG = AV0PW02.AV0PWADG;
    AV0PM040.AV0PMADC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM040.AV0PMAQY[AV0PWIX5] initialAttributes;
        AV0PM040.AV0PMAQY[AV0PWIX5] = AV0PW02.AV0PWAQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM040.AV0PMAQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P-92021(); /* move in totals if its time*/
    AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    return;
  end

  if (AV0PW02.AV0PWBDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM040.AV0PMBDG = AV0PW02.AV0PWBDG;
    AV0PM040.AV0PMBDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM040.AV0PMBQY[AV0PWIX5] initialAttributes;
        AV0PM040.AV0PMBQY[AV0PWIX5] = AV0PW02.AV0PWBQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM040.AV0PMBQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P-92021(); /* move in totals if its time*/
    AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    return;
  end

  if (AV0PW02.AV0PWCDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM040.AV0PMCDG = AV0PW02.AV0PWCDG;
    AV0PM040.AV0PMCDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM040.AV0PMCQY[AV0PWIX5] initialAttributes;
        AV0PM040.AV0PMCQY[AV0PWIX5] = AV0PW02.AV0PWCQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM040.AV0PMCQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P-92021(); /* move in totals if its time*/
    AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    return;
  end

  if (AV0PW02.AV0PWDDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM040.AV0PMDDG = AV0PW02.AV0PWDDG;
    AV0PM040.AV0PMDDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM040.AV0PMDQY[AV0PWIX5] initialAttributes;
        AV0PM040.AV0PMDQY[AV0PWIX5] = AV0PW02.AV0PWDQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM040.AV0PMDQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P-92021(); /* move in totals if its time*/
    AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    return;
  end

  if (AV0PW02.AV0PWEDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM040.AV0PMEDG = AV0PW02.AV0PWEDG;
    AV0PM040.AV0PMEDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM040.AV0PMEQY[AV0PWIX5] initialAttributes;
        AV0PM040.AV0PMEQY[AV0PWIX5] = AV0PW02.AV0PWEQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM040.AV0PMEQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P-92021(); /* move in totals if its time*/
    AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    return;
  end

  if (AV0PW02.AV0PWFDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM040.AV0PMFDG = AV0PW02.AV0PWFDG;
    AV0PM040.AV0PMFDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM040.AV0PMFQY[AV0PWIX5] initialAttributes;
        AV0PM040.AV0PMFQY[AV0PWIX5] = AV0PW02.AV0PWFQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM040.AV0PMFQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P-92021(); /* move in totals if its time*/
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end

  if (AV0PW02.AV0PWGDG != 0)
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM040.AV0PMGDG = AV0PW02.AV0PWGDG;
    AV0PM040.AV0PMGDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM040.AV0PMGQY[AV0PWIX5] initialAttributes;
        AV0PM040.AV0PMGQY[AV0PWIX5] = AV0PW02.AV0PWGQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM040.AV0PMGQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P-92021(); /* move in totals if its time*/
    AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    return;
  end

end // end AV0P-9202

// move qty totals to av0pm040
Function AV0P-92021()
   /* time to display totals?*/

   /* move in the totals for each period if there are no more*/
   /* sizes to display.*/

  if (AV0PW01.AV0PWIX3 > AV0PW01.AV0PWSLM)
    if (AV0PW02.AV0PWADG != " ")
      set AV0PM040.AV0PMATO initialAttributes;
      AV0PM040.AV0PMATO = AV0PW02.AV0PWATO;
    else
      set AV0PM040.AV0PMATO invisible;
    end
    if (AV0PW02.AV0PWBDG != " ")
      set AV0PM040.AV0PMBTO initialAttributes;
      AV0PM040.AV0PMBTO = AV0PW02.AV0PWBTO;
    else
      set AV0PM040.AV0PMBTO invisible;
    end
    if (AV0PW02.AV0PWCDG != " ")
      set AV0PM040.AV0PMCTO initialAttributes;
      AV0PM040.AV0PMCTO = AV0PW02.AV0PWCTO;
    else
      set AV0PM040.AV0PMCTO invisible;
    end
    if (AV0PW02.AV0PWDDG != " ")
      set AV0PM040.AV0PMDTO initialAttributes;
      AV0PM040.AV0PMDTO = AV0PW02.AV0PWDTO;
    else
      set AV0PM040.AV0PMDTO invisible;
    end
    if (AV0PW02.AV0PWEDG != " ")
      set AV0PM040.AV0PMETO initialAttributes;
      AV0PM040.AV0PMETO = AV0PW02.AV0PWETO;
    else
      set AV0PM040.AV0PMETO invisible;
    end
    if (AV0PW02.AV0PWFDG != " ")
      set AV0PM040.AV0PMFTO initialAttributes;
      AV0PM040.AV0PMFTO = AV0PW02.AV0PWFTO;
    else
      set AV0PM040.AV0PMFTO invisible;
    end
    if (AV0PW02.AV0PWGDG != " ")
      set AV0PM040.AV0PMGTO initialAttributes;
      AV0PM040.AV0PMGTO = AV0PW02.AV0PWGTO;
    else
      set AV0PM040.AV0PMGTO invisible;
    end
  end

  if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
    set AV0PM040.AV0PMATO invisible;
    set AV0PM040.AV0PMBTO invisible;
    set AV0PM040.AV0PMCTO invisible;
    set AV0PM040.AV0PMDTO invisible;
    set AV0PM040.AV0PMETO invisible;
    set AV0PM040.AV0PMFTO invisible;
    set AV0PM040.AV0PMGTO invisible;
  end

end // end AV0P-92021

// converse blank style map
Function AV0P-930()

  AV0PM040.XXXCURDT = VGVar.currentShortGregorianDate;

  if (converseVar.validationMsgNum == 0)
    AV0PM040.XXXERRID = "AV0P-930";
    /* if blank style info to show*/
    if (AV0PW10.SY1BSTNB > " ")
     /* display blank quantities message*/
      AV0PM040.AV0PMMSG = AV0PW10.AV0PWMSG;
    else
      AV0PM040.AV0PMMSG = "NOT A SCREENED STYLE ";
    end
  else
    if (converseVar.validationMsgNum == 137) /* if message not 'no more sizes'*/
      AV0PM040.AV0PMMSG = AV0PW10.AV0PWMSG;
    else
      set AV0PM040.AV0PMMSG invisible; /* clear message*/
    end
  end

  converse AV0PM040 ;
end // end AV0P-930

// check pfkey transfers
Function AV0P-940()
  if (converseVar.eventKey is pf3)
    AV0PW10.AV0PWPFL = "N"; /* set process flag to no*/
    return;
  end

  if (converseVar.eventKey is pf13)
    AV0PW10.AV0PWPFL = "N"; /* set process flag to no*/
    AV0P775(); /* converse screened style map av0pm030*/
    AV0P780(); /* check pfkey xfers*/
  end

  if (converseVar.eventKey is pf10 /* scroll left requested*/
   || converseVar.eventKey is pf11) /* scroll right requested*/
    AV0PW10.AV0PWFFL = "Y"; /* format map flag set to yes*/
    return; /* continue processing*/
  end

  if (converseVar.eventKey is enter) /* this key for use if -911 occurs*/
    return;
  end

  if (converseVar.eventKey is pf15)
  else
    converseLib.validationFailed(15); /* invalid pfkey*/
  end

end // end AV0P-940

// application entry
Function AV0P001()
   /* --------------------------- av0p001 ------------------------*/

                         /* application entry*/

   /* --------------------------- av0p001 ------------------------*/

  XSENTRY(); /* appl entry validation*/

  XSSEGTR(); /* set segmented transaction id*/

  VGVar.handleHardIOErrors = 1; /* return all file errors*/
  converseVar.commitOnConverse = 1; /* commit on every converse*/

   /* --------------------------- av0p001 ------------------------*/
end // end AV0P001

// application initialization
Function AV0P010()
   /* --------------------------- av0p010 ------------------------*/

                         /* application entry*/

   /* --------------------------- av0p010 ------------------------*/

  set AV0PW01 empty;
  set AV0PW07 empty;

  set SQLCA empty;

  set AV0PM010 initial;
  set AV0PM020 initial;
  set AV0PM030 initial;

  AV0PW01.AV0PWFL1 = "Y"; /* 1st time thru applic flag*/
  AV0PW01.AV0PWFL2 = "N"; /* 1st time in ftwr screen*/
  AV0PW01.AV0PWFL3 = "N"; /* came from av0v*/
  AV0PW01.AV0PWFTW = "N"; /* ftwr until flag*/
  AV0PW01.AV0PWAPR = "N"; /* aparell until flag*/

  if (COMMAREA.CAFROMAP == "AV0V")
    COMMAREA.CAFROMAP = " ";
    AV0PW01.AV0PWFL3 = "Y"; /* came from av0v*/
  end

  AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " ";

  AV0PM010.XXXCURDT = VGVar.currentShortGregorianDate;
  AV0PM020.XXXCURDT = VGVar.currentShortGregorianDate;
  AV0PM030.XXXCURDT = VGVar.currentShortGregorianDate;
  AV0PM010.XXXRVNBR = "00";
  AV0PM020.XXXRVNBR = "00";
  AV0PM030.XXXRVNBR = "00";
  AV0PM010.XXXMAPNM = "AV0PM010";
  AV0PM020.XXXMAPNM = "AV0PM020";
  AV0PM030.XXXMAPNM = "AV0PM030";
  VGVar.handleHardIOErrors = 1; /* return all file errors*/
  converseVar.commitOnConverse = 1; /* commit on every converse*/
   /*  */
   /* Determine if this user has a Canadian and/or Equipment Sales Office*/
   /*  */
  AV0PW01.AV0PW-AVXSO-FOUND = "N"; /* init SO found flag to no*/
  AV0PW01.AV0PW-CAN-SO = "N"; /* init Canadian SO to no*/
  AV0PW01.AV0PW-EQMT-SO = "N"; /* init Equipment SO to no*/
  sysVar.arrayIndex = 1; /* init eze subscript to 1*/

  if (COMMAREA.XSOCD != "  ") /* logon Sales Office not blank*/
    while (AV01TBL.XSOCD[sysVar.arrayIndex] != "99" /* not end of table marker*/
     && AV0PW01.AV0PW-AVXSO-FOUND == "N") /* and found flag is no*/
      if (COMMAREA.XSOCD == AV01TBL.XSOCD[sysVar.arrayIndex] /* logon SO = table SO*/
       && AV01TBL.XXXSTAT[sysVar.arrayIndex] == "A")         /* and table SO status active*/
        AV0PW01.AV0PW-CAN-SO = AV01TBL.AV-CAN-SO-FL[sysVar.arrayIndex];
        AV0PW01.AV0PW-EQMT-SO = AV01TBL.AV-EQMT-SO-FL[sysVar.arrayIndex];
        AV0PW01.AV0PW-AVXSO-FOUND = "Y"; /* set found flag to yes*/
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment ezetst*/
    end
  else
    if (COMMAREA.XSOCD == "  " /* blank Sales Office*/
     && COMMAREA.XNDCD == "EQMT") /* and Equipment Department*/
      AV0PW01.AV0PW-EQMT-SO = "Y"; /* set Equipment SO to 'y'es*/
    end
  end
   /* --------------------------- av0p010 ------------------------*/
end // end AV0P010

// main process
Function AV0P020()
   /* --------------------------- av0p020 ------------------------*/
                            /* main process*/
   /* ------------------------------------------------------------*/

  if (AV0PW01.AV0PWFL1 == "Y") /* 1st time thru applic flag*/
    AV0P030(); /* set up map defaults*/
    AV0PW01.AV0PWFL1 = "N"; /* no longer 1st time thru application*/
  end

  if (AV0PW01.AV0PWFL3 != "Y") /* did not come from av0v*/

    AV0P100(); /* converse av0pm010*/

    AV0P120(); /* set modified fields modified*/

    AV0P130(); /* check for pf key xfers*/

    AV0P140(); /* edit header info map 10*/

    if (converseVar.validationMsgNum == 0)
      set AV0PW07 empty; /* initialize AV0PM010 map image ws*/
      AV0P150(); /* edit 10 lines map 10*/
    end

  end

  if (converseVar.eventKey is pf12
   || converseVar.eventKey is pa2
   || converseVar.validationMsgNum != 0)
    exit stack;
  end

  if (converseVar.eventKey is enter
   || AV0PW01.AV0PWFL3 == "Y") /* came from av0v*/
    if (AV0PW07.XGPCD[1] == "02" /* footwear*/
     || AV0PM010.XGPCD == "02") 
      set AV0PW02 empty;
      set AV0PW03 empty;
      set AV0PW04 empty;
      set AV0PW05 empty;
      set AV0PW06 empty;
      AV0PW01.AV0PWFTW = "Y";
      AV0PW01.AV0PWFL2 = "Y"; /* ; 1st time in ftwr*/
      AV0PW01.AV0PWIX1 = 0;
      while (AV0PW01.AV0PWFTW == "Y")
        AV0P300(); /* phased ftwr process*/
      end

      set AV0PM010.SY1STNBR[1] cursor;
      AV0PW01.AV0PWIX1 = 1;
      while (AV0PW01.AV0PWIX1 <= 11)
        AV0PM010.SY1STNBR[AV0PWIX1] = " ";
        AV0PM010.SY1SSTNM[AV0PWIX1] = " ";
        AV0PM010.SY2CLRID[AV0PWIX1] = " ";
        AV0PM010.SY2CLRAB[AV0PWIX1] = " ";
        AV0PM010.XDMCD[AV0PWIX1] = " ";
        AV0PM010.XDMABRV[AV0PWIX1] = " ";
        AV0PM010.PC2INSEG[AV0PWIX1] = " ";
        AV0PM010.XSACD[AV0PWIX1] = " ";
        AV0PM010.XUMCD[AV0PWIX1] = " ";
        AV0PM010.XUMDESC[AV0PWIX1] = " ";
        AV0PM010.XPGCD[AV0PWIX1] = " ";
        AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 + 1;
      end
    end
  end

  if (converseVar.eventKey is enter
   || AV0PW01.AV0PWFL3 == "Y") /* came from av0v*/
    if (AV0PW07.XGPCD[1] != "02") /* apparel and all others*/
      set AV0PW02 empty;
      set AV0PW03 empty;
      set AV0PW04 empty;
      set AV0PW05 empty;
      set AV0PW06 empty;
      AV0PW01.AV0PWAPR = "Y";
      AV0PW01.AV0PWFL2 = "Y";
      AV0PW01.AV0PWIX1 = 0;
      while (AV0PW01.AV0PWAPR == "Y")
        AV0P700(); /* phased aprl process*/
      end

      set AV0PM010.SY1STNBR[1] cursor;
      AV0PW01.AV0PWIX1 = 1;
      while (AV0PW01.AV0PWIX1 <= 11)
        AV0PM010.SY1STNBR[AV0PWIX1] = " ";
        AV0PM010.SY1SSTNM[AV0PWIX1] = " ";
        AV0PM010.SY2CLRID[AV0PWIX1] = " ";
        AV0PM010.SY2CLRAB[AV0PWIX1] = " ";
        AV0PM010.XDMCD[AV0PWIX1] = " ";
        AV0PM010.XDMABRV[AV0PWIX1] = " ";
        AV0PM010.PC2INSEG[AV0PWIX1] = " ";
        AV0PM010.XSACD[AV0PWIX1] = " ";
        AV0PM010.XUMCD[AV0PWIX1] = " ";
        AV0PM010.XUMDESC[AV0PWIX1] = " ";
        AV0PM010.XPGCD[AV0PWIX1] = " ";
        AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 + 1;
      end
    end
  end

  if (AV0PW01.AV0PWFL3 == "Y") /* CAME FROM AV0V*/
    AV0PW01.AV0PWFL3 = "N"; /* came from av0v*/
    AV0PW01.AV0PWFL1 = "Y"; /* 1st time in appl*/
  end

   /* --------------------------- av0p020 ------------------------*/
end // end AV0P020

// load av0pw07 from map 10
Function AV0P025()
   /* ------------------------- av0p025 --------------------------*/

                      /* load av0pw07 w/ map 10 keys*/

   /* ------------------------- av0p025 --------------------------*/

  if (AV0PM010.SY1STNBR[AV0PWIX1] != " ")
    AV0PW07.XGPCD[AV0PWIX1] = AV0PM010.XGPCD;
    AV0PW07.XWHCD[AV0PWIX1] = AV0PM010.XWHCD;
    AV0PW07.XOWCD[AV0PWIX1] = AV0PM010.XOWCD;
    AV0PW07.SY1STNBR[AV0PWIX1] = AV0PM010.SY1STNBR[AV0PWIX1];
    AV0PW07.SY2CLRID[AV0PWIX1] = AV0PM010.SY2CLRID[AV0PWIX1];
    AV0PW07.SY2CLRAB[AV0PWIX1] = AV0PM010.SY2CLRAB[AV0PWIX1];
    AV0PW07.XDMCD[AV0PWIX1] = AV0PM010.XDMCD[AV0PWIX1];
    AV0PW07.XLCCD[AV0PWIX1] = AV0PM010.XLCCD;
    AV0PW07.PC2INSEG[AV0PWIX1] = AV0PM010.PC2INSEG[AV0PWIX1];
    AV0PW07.XPGCD[AV0PWIX1] = AV0PM010.XPGCD[AV0PWIX1];
    AV0PW07.XQACD[AV0PWIX1] = AV0PM010.XQACD;
    AV0PW07.XSACD[AV0PWIX1] = AV0PM010.XSACD;
    AV0PW07.XUMCD[AV0PWIX1] = AV0PM010.XUMCD[AV0PWIX1];
    AV0PW07.XSPCD[AV0PWIX1] = SYCREC.XSPCD;
    AV0PW07.XGACD[AV0PWIX1] = SYCREC.XGACD;
    AV0PW07.SY1STYNM[AV0PWIX1] = SYCREC.SY1STYNM;
    if (AV0PM010.SY2CLRID[AV0PWIX1] != "   "
     && AV0PM010.XDMCD[AV0PWIX1] != "  ") /* specific color/dim requested*/
      AV0PW07.SY2ALNOR[AV0PWIX1] = SYCREC.SY2ALNOR;
      AV0PW07.OPZHMIND[AV0PWIX1] = SYCREC.OPZHMIND;
      AV0PW07.SY2CLRDS[AV0PWIX1] = SYCREC.SY2CLRDS;
    end
    AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] = "N"; /* set eqmt flag to 'no'*/
    if (AV0PM010.AV0PM-EQMT-IND[AV0PWIX1] == "Y") /* equipment product*/
      AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] = "Y";
    end
  else /* the map style is blank*/
       /* if the working storage record in that position is not blank*/
       /* blank it out*/
    if (AV0PW07.SY1STNBR[AV0PWIX1] != " ")
      AV0PW07.XGPCD[AV0PWIX1] = " ";
      AV0PW07.XWHCD[AV0PWIX1] = " ";
      AV0PW07.XOWCD[AV0PWIX1] = " ";
      AV0PW07.SY1STNBR[AV0PWIX1] = " ";
      AV0PW07.SY2CLRID[AV0PWIX1] = " ";
      AV0PW07.SY2CLRAB[AV0PWIX1] = " ";
      AV0PW07.XDMCD[AV0PWIX1] = " ";
      AV0PW07.XLCCD[AV0PWIX1] = " ";
      AV0PW07.PC2INSEG[AV0PWIX1] = " ";
      AV0PW07.XPGCD[AV0PWIX1] = " ";
      AV0PW07.XQACD[AV0PWIX1] = " ";
      AV0PW07.XSACD[AV0PWIX1] = " ";
      AV0PW07.XUMCD[AV0PWIX1] = " ";
      AV0PW07.XSPCD[AV0PWIX1] = " ";
      AV0PW07.XGACD[AV0PWIX1] = " ";
      AV0PW07.SY1STYNM[AV0PWIX1] = " ";
      AV0PW07.SY2ALNOR[AV0PWIX1] = " ";
      AV0PW07.OPZHMIND[AV0PWIX1] = " ";
      AV0PW07.SY2CLRDS[AV0PWIX1] = " ";
      AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] = " ";
    end
  end

   /* ------------------------- av0p025 --------------------------*/
end // end AV0P025

// 1st time thru app set up maps
Function AV0P030()
   /* --------------------------- av0p030 ------------------------*/
                      /* set up map 10 defaults*/
   /* --------------------------- av0p030 ------------------------*/

   /* if transferred here from av0v and there are keys in the*/
   /* commarea save them in av0pw07.*/

  if (COMMAREA.CAUSERA != " "
   && AV0PW01.AV0PWFL3 == "Y") /* came from av0v*/
    AV0PW08.AV0PWGR8 = COMMAREA.CAUSERA;
    AV0P031(); /* move av0pw08 data to av0pw07 fields*/
    return;
  else
    if (COMMAREA.CAUSERA == " ")
      AV0PW01.AV0PWFL3 = "N"; /* came from av0v*/
    end
  end

   /* gpc and warehouse*/
  AV0PM010.XGPCD = COMMAREA.XGPCD;

  if (AV0PW07.XWHCD != " ")
    AV0PM010.XWHCD = AV0PW07.XWHCD;
    AV0PM010.XWHABRV = "  ";
  else
    if (AV0PM010.XGPCD == "02"
     || AV0PM010.XGPCD == "03")
      AV0PM010.XWHCD = "  ";
      AV0PM010.XWHABRV = "  ";
    else
      if (AV0PM010.XGPCD == "  ")
        AV0PM010.XWHABRV = "  ";
        AV0PM010.XWHCD = COMMAREA.XWHCD;
        set AV0PM010.XGPCD cursor, modified, bold;
        converseLib.validationFailed(64); /* please enter gpc*/
      end
    end
  end

  if (AV0PM010.XGPCD > "  ")
    if (AV0PM010.XWHCD == "  ")
      if (AV0PM010.XGPCD != "02"
       && AV0PM010.XGPCD != "03")
        AV0PM010.XWHABRV = "  ";
        set AV0PM010.XWHCD cursor, modified, bold;
        converseLib.validationFailed(56); /* please enter whse*/
      end
    end
  end

  if (AV0PM010.XGPCD != "03"
   && AV0PM010.XGPCD != "  ")
    AV0PM010.XOWCD = "00";
  end

  AV0PM010.XQACD = "01";
  AV0PM010.XLCCD = "10";

  AV0P035(); /* get default descriptions and verify*/
                                  /* codes*/

   /* --------------------------- av0p030 ------------------------*/
end // end AV0P030

// load av0pw07 from av0pw08
Function AV0P031()
   /* ------------------------- av0p031 --------------------------*/

              /* load av0pw07 w/ av0pw08 data (from AV0V)*/

   /* ------------------------- av0p031 --------------------------*/

  AV0PW01.AV0PWIX1 = 30; /* array max from av0v is 30 rows*/
  while (AV0PW01.AV0PWIX1 > 0) /* start bottom to top*/
      /* move av0pw08 fields to av0pw07 fields*/
    AV0PW07.XGPCD[AV0PWIX1] = AV0PW08.XGPCD[AV0PWIX1];
    AV0PW07.XWHCD[AV0PWIX1] = AV0PW08.XWHCD[AV0PWIX1];
    AV0PW07.XOWCD[AV0PWIX1] = AV0PW08.XOWCD[AV0PWIX1];
    AV0PW07.SY1STNBR[AV0PWIX1] = AV0PW08.SY1STNBR[AV0PWIX1];
    AV0PW07.SY2CLRID[AV0PWIX1] = AV0PW08.SY2CLRID[AV0PWIX1];
    AV0PW07.SY2CLRAB[AV0PWIX1] = AV0PW08.SY2CLRAB[AV0PWIX1];
    AV0PW07.XDMCD[AV0PWIX1] = AV0PW08.XDMCD[AV0PWIX1];
    AV0PW07.XLCCD[AV0PWIX1] = AV0PW08.XLCCD[AV0PWIX1];
    AV0PW07.PC2INSEG[AV0PWIX1] = AV0PW08.PC2INSEG[AV0PWIX1];
    AV0PW07.XPGCD[AV0PWIX1] = AV0PW08.XPGCD[AV0PWIX1];
    AV0PW07.XQACD[AV0PWIX1] = AV0PW08.XQACD[AV0PWIX1];
    AV0PW07.XSACD[AV0PWIX1] = AV0PW08.XSACD[AV0PWIX1];
    AV0PW07.XUMCD[AV0PWIX1] = AV0PW08.XUMCD[AV0PWIX1];
    if (AV0PW08.XGPCD[AV0PWIX1] != " " /* gpc not blank*/
     && AV0PW08.SY1STNBR[AV0PWIX1] != " ") /* and style not blank*/
      AV0P-0311(); /* get color02 record*/
      if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
        AV0PW07.XSPCD[AV0PWIX1] = SYCREC.XSPCD;
        AV0PW07.XGACD[AV0PWIX1] = SYCREC.XGACD;
        AV0PW07.SY1STYNM[AV0PWIX1] = SYCREC.SY1STYNM;
        AV0PW07.SY2ALNOR[AV0PWIX1] = SYCREC.SY2ALNOR;
        AV0PW07.OPZHMIND[AV0PWIX1] = SYCREC.OPZHMIND;
        AV0PW07.SY2CLRDS[AV0PWIX1] = SYCREC.SY2CLRDS;
        AV0PW01.AV0PW-EQMT-FL = "N"; /* not equipment product*/
        AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] = "N";
                                   /* set eqmt flag to 'no'*/
        AV0PS-CHECK-EQMT(); /* check if equipment product*/
        if (AV0PW01.AV0PW-EQMT-FL == "Y") /* equipment product*/
          AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] = "Y";
        end
      else /* color02 record not found*/
        AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] = "X";
        AV0PW01.AV0PW-EQMT-FL = "N"; /* not equipment product*/
        converseLib.validationFailed(07); /* style/color not found*/
      end
    end
    AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 - 1; /* decrement subscript*/
  end

   /* ------------------------- av0p031 --------------------------*/
end // end AV0P031

// get default descrips/verfiy
Function AV0P035()
   /* --------------------------- av0p035 ------------------------*/
           /* get all default descriptions and verify codes*/
   /* --------------------------- av0p035 ------------------------*/

  AV0P037(); /* validate life cycle*/

  AV0P039(); /* validate quality code*/

  AV0P045(); /* validate gpc*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (AV0PM010.XGPCD > "  ")
    if (AV0PM010.XGPCD != "03")
      AV0P041(); /* validate owner*/
    else
      if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian Sales Office*/
        AV0P-0421(); /* verify Canadian owner group*/
      else
        AV0P042(); /* verify owner group*/
      end
    end
  end

  if (AV0PM010.XGPCD > "  ")
    if (AV0PM010.XWHCD == "  "
     && AV0PM010.XGPCD == "02")
      /* next sentence*/
    else
      if (AV0PM010.XWHCD == "  "
       && AV0PM010.XGPCD == "03")
        /* next sentence*/
      else
        AV0P043(); /* validate warehouse code*/
      end
    end
  end

  if (AV0PM010.XGPCD > "  ")
    if (AV0PM010.XWHCD == "  "
     && AV0PM010.XGPCD == "02")
      /* next sentence*/
    else
      if (AV0PM010.XWHCD == "  "
       && AV0PM010.XGPCD == "03")
        /* next sentence*/
      else
        AV0P047(); /* gpc valid for this warehouse?*/
      end
    end
  end

   /* --------------------------- av0p035 ------------------------*/
end // end AV0P035

// Obtain life cycle code/abrv
Function AV0P037()
   /* -------------------- av0p037 -------------------------------*/

              /* validate life cycle code*/

   /* ------------------------------------------------------------*/


  AV0PM010.XLCABRV = " "; /* Clear life cycle abrv*/


  if (AV0PM010.XLCCD in XLCTBL.XLCCD)
    AV0PM010.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    converseLib.validationFailed(47); /* Indicate life cycle*/
    set AV0PM010.XLCCD cursor, modified, bold;
    AV0PM010.XLCABRV = " ";
    return; /* Return to caller*/
  else
    set AV0PM010.XLCCD initialAttributes;
  end

  if (XLCTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active life cycle*/

    AV0PM010.XLCABRV = " "; /* Clear life cycle abbreviation*/
    set AV0PM010.XLCCD cursor, modified, bold;
    converseLib.validationFailed(48); /* Indicate inactive life cycle*/
    return; /* Return to caller*/
  else
    set AV0PM010.XLCCD initialAttributes;
  end



    /* -------------  end of process av0p037  ------------------*/
end // end AV0P037

// Obtain quality code/abrv
Function AV0P039()
   /* -------------------- av0p039 -------------------------------*/

                /* validate quality code*/

   /* ------------------------------------------------------------*/


  AV0PM010.XQAABRV = " "; /* Clear quality   abbreviation*/

  if (AV0PM010.XQACD == "  ") /* quality code not entered*/

    converseLib.validationFailed(43); /* Indicate quality code required*/
    AV0PM010.XQAABRV = " ";
    set AV0PM010.XQACD cursor, modified, bold;
    return; /* Return to caller*/
  else
    set AV0PM010.XQACD normal;
  end

  if (AV0PM010.XQACD in XQATBL.XQACD)
    AV0PM010.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    converseLib.validationFailed(44); /* Indicate quality code*/
    set AV0PM010.XQACD cursor, modified, bold;
    AV0PM010.XQAABRV = " ";
    return; /* Return to caller*/
  else
    set AV0PM010.XQACD initialAttributes;
  end

  if (XQATBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active quality code*/

    AV0PM010.XQAABRV = " "; /* Clear quality code abrv*/
    set AV0PM010.XQACD cursor, modified, bold;
    converseLib.validationFailed(45); /* Indicate quality code*/
    return; /* Return to caller*/
  else
    set AV0PM010.XQACD initialAttributes;
  end

  AV0PM010.XQACD = AV0PM010.XQACD;


    /* -------------  end of process av0p039  ------------------*/
end // end AV0P039

// Obtain owner code/abrv
Function AV0P041()
   /* -------------------- av0p041 -------------------------------*/
                  /* validate owner code*/
   /* ------------------------------------------------------------*/

  AV0PM010.XOWDESC = " "; /* Clear owner  abbreviation*/
  set AV0PM010.XOWCD normal;

  if (AV0PM010.XOWCD == "  ")
    AV0PM010.XOWCD = "00";
  end

  if (AV0PM010.XOWCD in XOWTBL.XOWCD)
    AV0PM010.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    converseLib.validationFailed(81); /* Indicate owner code*/
    set AV0PM010.XOWCD cursor, modified, bold;
    AV0PM010.XOWDESC = " ";
    return; /* Return to caller*/
  else
    set AV0PM010.XOWCD initialAttributes;
  end

  if (XOWTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not owner code*/
    AV0PM010.XOWDESC = " "; /* Clear owner code abrv*/
    set AV0PM010.XOWCD cursor, modified, bold;
    converseLib.validationFailed(82); /* Indicate owner code not active*/
    return; /* Return to caller*/
  else
    set AV0PM010.XOWCD initialAttributes;
  end

    /* -------------  end of process av0p041  ------------------*/
end // end AV0P041

// verify ownr group
Function AV0P042()

  if (AV0PM010.XOWCD > "  ")
    if (AV0PM010.XWHCD == "  ")
  /* change begin*/
  /* MOVE '25' TO XOWREC.XWHCD;   /*  whse*/
  /* MOVE AV0PM010.XOWCD TO XOWREC.XOWCD;/* format key*/
  /* RETR XOWREC.XOWKEY XOWTBL.XOWKEY AV0PM010.XOWDESC XOWDESC;*/
  /* IF EZETST EQ 0;              /* Table entry not found*/
  /* change end*/
      XOWREC.XWHCD = "51"; /* WHSE*/
      XOWREC.XOWCD = AV0PM010.XOWCD; /* format key*/
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        AV0PM010.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        converseLib.validationFailed(81); /* Indicate owner code*/
        set AV0PM010.XOWCD cursor, modified, bold;
        AV0PM010.XOWDESC = " ";
        return; /* Return to caller*/
      end
  /* END;*/
    else
      XOWREC.XWHCD = AV0PM010.XWHCD;
      XOWREC.XOWCD = AV0PM010.XOWCD;
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        AV0PM010.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        converseLib.validationFailed(81); /* Indicate owner code invalid*/
        set AV0PM010.XOWCD cursor, modified, bold;
        AV0PM010.XOWDESC = " ";
        return; /* Return to caller*/
      end
    end
  else
    return;
  end

  if (XOWTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not owner code*/
    AV0PM010.XOWDESC = " "; /* Clear owner code abrv*/
    set AV0PM010.XOWCD cursor, modified, bold;
    converseLib.validationFailed(82); /* Indicate owner code not active*/
    return; /* Return to caller*/
  else
    set AV0PM010.XOWCD initialAttributes;
  end

    /* -------------  end of process av0p042  ------------------*/
end // end AV0P042

// Obtain warehouse abbreviation
Function AV0P043()
   /* -------------------- av0p043 -------------------------------*/

          /* validate warehouse code and get abrv*/

   /* ------------------------------------------------------------*/



  AV0PM010.XWHABRV = " "; /* Clear warehouse abbreviation*/

  if (AV0PM010.XWHCD == "  ") /* Warehouse code not entered*/

    converseLib.validationFailed(56); /* Indicate warehouse code required*/
    AV0PM010.XWHABRV = " ";
    set AV0PM010.XWHCD cursor, modified, bold;
    return; /* Return to caller*/
  else
    set AV0PM010.XWHCD normal;
  end

  if (AV0PM010.XWHCD in XWHTBL.XWHCD)
    AV0PM010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    converseLib.validationFailed(58); /* Indicate invalid warehouse*/
    set AV0PM010.XWHCD cursor, modified, bold;
    AV0PM010.XWHABRV = " ";
    return; /* Return to caller*/
  else
    set AV0PM010.XWHCD normal;
  end

  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/

    AV0PM010.XWHABRV = " "; /* Clear warehouse abbreviation*/
    set AV0PM010.XWHCD cursor, modified, bold;
    converseLib.validationFailed(57); /* Indicate inactive warehouse*/
    return; /* Return to caller*/
  else
    set AV0PM010.XWHCD normal;
  end

  AV0PM010.XWHCD = AV0PM010.XWHCD;


    /* -------------  end of process av0p043  ------------------*/
end // end AV0P043

// Obtain gpc cd/abrv
Function AV0P045()
   /* -------------------- av0p045 -------------------------------*/
                   /* validate gpc cd*/
   /* ------------------------------------------------------------*/

  AV0PM010.XGPDESC = " "; /* Clear gpc abbreviation*/

  if (AV0PM010.XGPCD == "  ") /* gpc not entered*/
    converseLib.validationFailed(73); /* Indicate gpc required*/
    AV0PM010.XGPDESC = " ";
    set AV0PM010.XGPCD cursor, modified, bold;
    return; /* Return to caller*/
  else
    set AV0PM010.XGPCD normal;
  end

  if (AV0PM010.XGPCD in XGPTBL.XGPCD)
    AV0PM010.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    converseLib.validationFailed(71); /* Indicate gpc type*/
    set AV0PM010.XGPCD cursor, modified, bold;
    AV0PM010.XGPDESC = " ";
    return; /* Return to caller*/
  else
    set AV0PM010.XGPCD initialAttributes;

    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not gpc type*/
      AV0PM010.XGPDESC = " "; /* Clear gpc abrv*/
      set AV0PM010.XGPCD cursor, modified, bold;
      converseLib.validationFailed(72); /* Indicate gpc error*/
      return; /* Return to caller*/
    else
      set AV0PM010.XGPCD initialAttributes;
    end
  end

  COMMAREA.XGPCD = AV0PM010.XGPCD;

    /* -------------  end of process av0p045  ------------------*/
end // end AV0P045

// gpc valid for whse check
Function AV0P047()
   /* --------------------------- av0p047 ------------------------*/

                 /* make sure gpc is valid for this whse*/

   /* --------------------------- av0p047 ------------------------*/


  AV0P043(); /* whse look up*/

  if (AV0PM010.XGPCD == XWHTBL.XGPCD1[sysVar.arrayIndex])
     /* NEXT SENTENCE*/
  else
    if (AV0PM010.XGPCD == XWHTBL.XGPCD2[sysVar.arrayIndex])
      /* NEXT SENTENCE*/
    else
      if (AV0PM010.XGPCD == XWHTBL.XGPCD3[sysVar.arrayIndex])
        /* NEXT SENTENCE*/
      else
        if (AV0PM010.XGPCD == XWHTBL.XGPCD4[sysVar.arrayIndex])
          /* NEXT SENTENCE*/
        else
          if (AV0PM010.XGPCD == XWHTBL.XGPCD5[sysVar.arrayIndex])
            /* NEXT SENTENCE*/
          else
            if (AV0PM010.XGPCD == XWHTBL.XGPCD6[sysVar.arrayIndex])
              /* NEXT SENTENCE*/
            else
              if (AV0PM010.XGPCD == XWHTBL.XGPCD7[sysVar.arrayIndex])
                /* NEXT SENTENCE*/
              else
                if (AV0PM010.XGPCD == XWHTBL.XGPCD8[sysVar.arrayIndex])
                  /* NEXT SENTENCE*/
                else
                  converseLib.validationFailed(128); /* gpc not valid for this whse*/
                  set AV0PM010.XGPCD cursor, modified, bold;
                end
              end
            end
          end
        end
      end
    end
  end


   /* --------------------------- av0p047 ------------------------*/
end // end AV0P047

// Obtain package type code/abrv
Function AV0P053()
   /* -------------------- av0p053 -------------------------------*/

              /* validate package code/abrv*/

   /* ------------------------------------------------------------*/


  if (AV0PM010.XPGCD[AV0PWIX1] == "  ") /* pkg type  not entered*/

    converseLib.validationFailed(1); /* Indicate pkg type code required*/
    set AV0PM010.XPGCD[AV0PWIX1] cursor, modified, bold;
    return; /* Return to caller*/
  else
    set AV0PM010.XPGCD[AV0PWIX1] normal;
  end

  AV0PW01.XPGCD = AV0PM010.XPGCD[AV0PWIX1];
  if (AV0PW01.XPGCD in XPGTBL.XPGCD)
    AV0PW01.XPGABRV = XPGTBL.XPGABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    converseLib.validationFailed(31); /* Indicate pkg type*/
    set AV0PM010.XPGCD[AV0PWIX1] cursor, modified, bold;
    return; /* Return to caller*/
  end

  if (XPGTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not pkg type code*/

    set AV0PM010.XPGCD[AV0PWIX1] cursor, modified, bold;
    converseLib.validationFailed(32); /* Indicate pkg type code*/
    return; /* Return to caller*/
  else
    set AV0PM010.XPGCD[AV0PWIX1] normal;
  end



    /* -------------  end of process av0p053  ------------------*/
end // end AV0P053

// Obtain shade code/abrv
Function AV0P055()
   /* -------------------- av0p055 -------------------------------*/

              /* validate shade code/abrv*/

   /* ------------------------------------------------------------*/



  if (AV0PM010.XSACD[AV0PWIX1] == "  ") /* shade not entered*/

    converseLib.validationFailed(132); /* Indicate shade code required*/
    set AV0PM010.XSACD[AV0PWIX1] cursor, modified, bold;
    return; /* Return to caller*/
  else
    set AV0PM010.XSACD[AV0PWIX1] normal;
  end

  AV0PW01.XSACD = AV0PM010.XSACD[AV0PWIX1];
  if (AV0PW01.XSACD in XSATBL.XSACD)
    AV0PW01.XSAABRV = XSATBL.XSAABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    converseLib.validationFailed(130); /* Indicate shade type*/
    set AV0PM010.XSACD[AV0PWIX1] cursor, modified, bold;
    return; /* Return to caller*/
  end

  if (XPGTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not shade code*/

    set AV0PM010.XSACD[AV0PWIX1] cursor, modified, bold;
    converseLib.validationFailed(131); /* Indicate shade code*/
    return; /* Return to caller*/
  else
    set AV0PM010.XSACD[AV0PWIX1] normal;
  end



    /* -------------  end of process av0p055  ------------------*/
end // end AV0P055

// Obtain spec type code/abrv
Function AV0P057()
   /* -------------------- av0p057 -------------------------------*/

            /* validate inventory segment code*/

   /* ------------------------------------------------------------*/

  if (AV0PM010.PC2INSEG[AV0PWIX1] == "  ") /* inv segment code not entered*/
    converseLib.validationFailed(40); /* Indicate inv segment code required*/
    set AV0PM010.PC2INSEG[AV0PWIX1] cursor, modified, bold;
    return; /* Return to caller*/
  else
    set AV0PM010.PC2INSEG[AV0PWIX1] normal;
  end

  AV0PW01.PC2INSEG = AV0PM010.PC2INSEG[AV0PWIX1];

  set PC2REC empty;
  PC2REC.XGPCD = AV0PM010.XGPCD; /* gpc code*/
  PC2REC.PC2INSEG = AV0PW01.PC2INSEG; /* cust segment code*/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    set AV0PM010.PC2INSEG[AV0PWIX1] initialAttributes;
    AV0PW01.PC2SEGAB = PC2REC.PC2SEGAB;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set AV0PM010.PC2INSEG[AV0PWIX1] cursor, modified, bold;
      converseLib.validationFailed(41); /* invalid code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "AV0P";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0P057";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLVU = "VPRDCU01"; /* table view*/
        TA1REC.TA1TBLKE = AV0PM010.PC2INSEG[AV0PWIX1]; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.clearScreen();
        
        converseLib.validationFailed(75);
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "AV0P";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0PM010";
        TA1REC.TA1DBASE = "DPRODC"; /* table name*/
        TA1REC.TA1TBLVU = "VPRDCU01"; /* table view*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.clearScreen();
        
        converseLib.validationFailed(76); /* fatal error*/
        exit stack;
      end
    end
  end

    /* -------------  end of process av0p057  ------------------*/
end // end AV0P057

// Obtain uom code/abrv
Function AV0P059()
   /* -------------------- av0p059 -------------------------------*/

              /* validate uom code/abrv*/

   /* ------------------------------------------------------------*/



  if (AV0PM010.XUMCD[AV0PWIX1] == "  ") /* uom not entered*/

    converseLib.validationFailed(77); /* Indicate uom code required*/
    set AV0PM010.XUMCD[AV0PWIX1] cursor, modified, bold;
    return; /* Return to caller*/
  else
    set AV0PM010.XUMCD[AV0PWIX1] normal;
  end

  AV0PW01.XUMCD = AV0PM010.XUMCD[AV0PWIX1];
  if (AV0PW01.XUMCD in XUMTBL.XUMCD)
    AV0PM010.XUMDESC[AV0PWIX1] = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    converseLib.validationFailed(124); /* Indicate uom type*/
    set AV0PM010.XUMCD[AV0PWIX1] cursor, modified, bold;
    return; /* Return to caller*/
  end

  if (XUMTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not uom code*/

    set AV0PM010.XUMCD[AV0PWIX1] cursor, modified, bold;
    converseLib.validationFailed(78); /* Indicate uom code*/
    return; /* Return to caller*/
  else
    set AV0PM010.XUMCD[AV0PWIX1] normal;
  end



    /* -------------  end of process av0p059  ------------------*/
end // end AV0P059

// Obtain dim code/abrv
Function AV0P061()
   /* -------------------- av0p061 -------------------------------*/

              /* validate dim code/abrv*/

   /* ------------------------------------------------------------*/


  AV0PM010.XDMABRV[AV0PWIX1] = " "; /* Clear dim abbreviation*/

  if (AV0PM010.XDMCD[AV0PWIX1] == "  ") /* dim not entered*/

    converseLib.validationFailed(82); /* Indicate dim code required*/
    AV0PM010.XDMABRV[AV0PWIX1] = " ";
    set AV0PM010.XDMCD[AV0PWIX1] cursor, modified, bold;
    return; /* Return to caller*/
  else
    set AV0PM010.XDMCD[AV0PWIX1] normal;
  end

  AV0PW01.XDMCD = AV0PM010.XDMCD[AV0PWIX1];
  if (AV0PW01.XDMCD in XDMTBL.XDMCD)
    AV0PM010.XDMABRV[AV0PWIX1] = XDMTBL.XDMABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    converseLib.validationFailed(84); /* Indicate dim type*/
    set AV0PM010.XDMCD[AV0PWIX1] cursor, modified, bold;
    AV0PM010.XDMABRV[AV0PWIX1] = " ";
    return; /* Return to caller*/
  end

  if (XDMTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not dim code*/

    AV0PM010.XDMABRV[AV0PWIX1] = " "; /* Clear dim abrv*/
    set AV0PM010.XDMCD[AV0PWIX1] cursor, modified, bold;
    converseLib.validationFailed(83); /* Indicate dim code*/
    return; /* Return to caller*/
  else
    set AV0PM010.XDMCD[AV0PWIX1] normal;
  end



    /* -------------  end of process av0p061  ------------------*/
end // end AV0P061

// get first style/color
Function AV0P063()
   /* -------------------- av0p063 -------------------------------*/

              /* validate color code/abrv*/

   /* ------------------------------------------------------------*/

  AV0PM010.XXXERRID = "AV0P063";
  set SYCREC empty;
  set SQLCA empty;

  SYCREC.XGPCD = AV0PM010.XGPCD;
  SYCREC.SY1STNBR = AV0PM010.SY1STNBR[AV0PWIX1];
  SYCREC.SY2CLRID = AV0PM010.SY2CLRID[AV0PWIX1];
  SYCREC.XDMCD = AV0PM010.XDMCD[AV0PWIX1];

  AV0P064(); /* open dprod.vcolor02 cursor*/

  if (SQLCA.VAGen_SQLCODE == +0)
    AV0P065(); /* fetch dprod.vcolor02 record*/
  else
    AV0P066(); /* close dprod.vcolor02 cursor*/
    return;
  end

  AV0P066(); /* close set*/

  if (SQLCA.VAGen_SQLCODE == 100)
    if (AV0PM010.SY2CLRID[AV0PWIX1] == "   " /* color wildcarded*/
     && AV0PM010.XDMCD[AV0PWIX1] == "  ")    /* dimension wildcarded*/
      converseLib.validationFailed(06); /* style record not found*/
      set AV0PM010.SY1STNBR[AV0PWIX1] cursor, modified, bold;
    else
      converseLib.validationFailed(07); /* color/dimension record not found*/
      set AV0PM010.SY2CLRID[AV0PWIX1] cursor, modified, bold;
      set AV0PM010.XDMCD[AV0PWIX1] modified, bold;
    end
  end

    /* -------------  end of process av0p063  ------------------*/
end // end AV0P063

// open color02 cursor
Function AV0P064()
   /* -------------------------av0p064----------------------------*/
                 /* select set dprod.vcolor02 data*/
   /* -------------------------av0p064----------------------------*/

  try
    call "IO0560" ("SS", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "064"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0p064----------------------------*/
end // end AV0P064

// fetch next color02 row
Function AV0P065()
   /* -------------------------av0p065----------------------------*/
              /* fetch next row of dprod.vcolor02 data*/
   /* -------------------------av0p065----------------------------*/


  try
    call "IO0560" ("SN", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "065"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0p065----------------------------*/
end // end AV0P065

// close color02 cursor
Function AV0P066()
   /* -------------------------av0p066----------------------------*/
              /* close cursor for dprod.vcolor02 data*/
   /* -------------------------av0p066----------------------------*/


  try
    call "IO0560" ("CS", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "066"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0p066----------------------------*/
end // end AV0P066

// converse av0pm010
Function AV0P100()

  AV0PM010.XXXERRID = "AV0P100";

  converse AV0PM010 ;
end // end AV0P100

// set modified fields modified
Function AV0P120()
   /* --------------------------- av0p120 ------------------------*/

                   /* set modified fields modified*/

   /* --------------------------- av0p120 ------------------------*/


  if (AV0PM010.XGPCD is modified)
    set AV0PM010.XGPCD modified;
  end

  if (AV0PM010.XWHCD is modified)
    set AV0PM010.XWHCD modified;
  end

  if (AV0PM010.XOWCD is modified)
    set AV0PM010.XOWCD modified;
  end


  if (AV0PM010.XLCCD is modified)
    set AV0PM010.XLCCD modified;
  end



  AV0PW01.AV0PWIX1 = 1;

  while (AV0PW01.AV0PWIX1 <= 11)
    if (AV0PM010.XPGCD[AV0PWIX1] is modified)
      set AV0PM010.XPGCD[AV0PWIX1] modified;
    end
    if (AV0PM010.XSACD[AV0PWIX1] is modified)
      set AV0PM010.XSACD[AV0PWIX1] modified;
    end
    if (AV0PM010.PC2INSEG[AV0PWIX1] is modified)
      set AV0PM010.PC2INSEG[AV0PWIX1] modified;
    end
    if (AV0PM010.XUMCD[AV0PWIX1] is modified)
      set AV0PM010.XUMCD[AV0PWIX1] modified;
    end
    if (AV0PM010.XDMCD[AV0PWIX1] is modified)
      set AV0PM010.XDMCD[AV0PWIX1] modified;
    end
    if (AV0PM010.SY2CLRID[AV0PWIX1] is modified)
      set AV0PM010.SY2CLRID[AV0PWIX1] modified;
    end
    if (AV0PM010.SY1STNBR[AV0PWIX1] is modified)
      set AV0PM010.SY1STNBR[AV0PWIX1] modified;
    end


    AV0PW01.AV0PWIX1 = AV0PWIX1 + 1;

  end

  if (AV0PM010.CATOAP is modified)
    set AV0PM010.CATOAP modified;
  end

  if (AV0PM010.CAITEM is modified)
    set AV0PM010.CAITEM modified;
  end

   /* --------------------------- av0p120 ------------------------*/
end // end AV0P120

// check pf key xfers
Function AV0P130()
   /* --------------------------- av0p130 ------------------------*/

                       /* check on pf key transfers*/

   /* --------------------------- av0p130 ------------------------*/



  if (AV0PM010.CAITEM != " "
   && AV0PM010.CATOAP == " ")
    converseLib.validationFailed(115); /* enter to application*/
    set AV0PM010.CATOAP cursor, modified, bold;
    exit stack;
  end


  if (AV0PM010.CATOAP is modified
   && AV0PM010.CATOAP != " ")
    if (AV0PM010.CATOAP == "OP0L") /* if request xfer to lost demand*/
      converseLib.validationFailed(281); /* xfer to op0l not allowed from this screen*/
      AV0PM010.CATOAP = " "; /* clear 'to application' option*/
      exit stack;
    end
    if (AV0PM010.CATOAP == "AV0K") /* if request xfer to subs criteria*/
      set AVWREC empty; /* clear commarea*/
      COMMAREA.CAUSERA = " ";
    end
    COMMAREA.CATOAP = AV0PM010.CATOAP;
    COMMAREA.CAITEM = AV0PM010.CAITEM;
    XSEXIT();
     /* if transfer fails, display error message*/
    AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set AV0PM010.CATOAP cursor, modified, bold;
    exit stack;
  end

  set AV0PM010.CATOAP normal;
  set AV0PM010.CAITEM normal;

  if (converseVar.eventKey is pf1)
    XSPF1(); /* to help*/
    AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CAFROMAP = "AV0P";
      COMMAREA.CATOAP = "AV0M"; /* back to avail menu*/
      XSEXIT();
      AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      exit stack;
    else
      if (converseVar.eventKey is pf4)
        XSPF4(); /* to goal menu*/
        AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
        exit stack;
      else
        /* next sentence*/
      end
    end
  end


  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
  end


  if (converseVar.eventKey is pf1)
    XSPF1(); /* to help*/
    AV0PM020.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf3)
      AV0PW01.AV0PWFTW = "N";
      return;
    else
      if (converseVar.eventKey is pf4)
        XSPF4(); /* to goal menu*/
        AV0PM020.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      else
        if (converseVar.eventKey is pf6)
          converseLib.validationFailed(15); /* invalid pf key*/
          return;
          /* smart reservation application not available yet*/
        else
          if (converseVar.eventKey is pf12)
            return;
            /* next sentence , skip to next product selected*/
          else
            if (converseVar.eventKey is pa2)
              AV0PW01.AV0PWFL1 = "Y"; /* we are going back to av0p010*/
              return;
              /* next sentence , skip to next product selected*/
            else
              if (converseVar.eventKey is enter)
                return;
              else
                converseLib.validationFailed(15); /* invalid pf key*/
              end
            end
          end
        end
      end
    end
  end



   /* --------------------------- av0p130 ------------------------*/
end // end AV0P130

// edit header info map 10
Function AV0P140()
   /* --------------------------- av0p140 ------------------------*/

                       /* edit header info on map 10*/

   /* --------------------------- av0p140 ------------------------*/

  AV0P045(); /* edit gpc code*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (AV0PM010.XLCCD is modified)
    AV0P037(); /* edit life cycle*/
  end

  if (AV0PM010.XQACD is modified)
    AV0P039(); /* edit quality code*/
  end

  if (AV0PM010.XGPCD != "03")
    AV0P041(); /* edit owner code*/
  else
    if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian Sales Offices*/
      AV0P-0421(); /* edit owner for apparel*/
    else
      AV0P042();
    end
  end

  if (AV0PM010.XWHCD == "  ")
    if (AV0PM010.XGPCD == "02"
     || AV0PM010.XGPCD == "03")
      set AV0PM010.XWHCD normal;
      AV0PM010.XWHABRV = " ";
    else
      converseLib.validationFailed(56);
      set AV0PM010.XWHCD cursor, bold;
      AV0PM010.XWHABRV = " ";
    end
  else
    if (AV0PM010.XWHCD != "  ")
      AV0P043(); /* edit whse code*/
    end
  end

  if (AV0PM010.XGPCD != "03"
   && AV0PM010.XGPCD != "02")
    if (AV0PM010.XWHCD == "  ")
      set AV0PM010.XGPCD cursor, modified, bold;
      converseLib.validationFailed(291); /* wildcard only valid for gpc 02 or 03*/
      return;
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (AV0PM010.XWHCD == "  ")
     /* next sentence*/
  else
    if (AV0PM010.XGPCD is modified
     || AV0PM010.XWHCD is modified)
      AV0P047(); /* is gpc valid for whse?*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* --------------------------- av0p140 ------------------------*/
end // end AV0P140

// edit 10 key lines map 10
Function AV0P150()
   /* --------------------------- av0p150 ------------------------*/

                       /* edit 10 key lines map 10*/

   /* --------------------------- av0p150 ------------------------*/

   /* -- determine if any styles entered on AV0PM010 --*/

  AV0PW01.AV0PWIX1 = 1;

  while (AV0PWIX1 <= 11)

    if (AV0PM010.XPGCD[AV0PWIX1] != " "
     || AV0PM010.XSACD[AV0PWIX1] != " "
     || AV0PM010.PC2INSEG[AV0PWIX1] != " "
     || AV0PM010.XUMCD[AV0PWIX1] != " "
     || AV0PM010.XDMCD[AV0PWIX1] != " "
     || AV0PM010.SY2CLRID[AV0PWIX1] != " "
     || AV0PM010.SY1STNBR[AV0PWIX1] != " ")
      AV0PW01.AV0PWIX1 = 15;
    else
      AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 + 1;
    end
    if (AV0PW01.AV0PWIX1 == 15)
       /* next sentence*/
    else
      if (AV0PW01.AV0PWIX1 == 12)
        converseLib.validationFailed(19); /* enter style number*/
        set AV0PM010.SY1STNBR[1] cursor, modified, bold;
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* -- determine what, if anything, changed;       --*/
   /* -- then check it out                           --*/

  AV0PW01.AV0PWIX1 = 11;

  while (AV0PWIX1 >= 1)

    if (AV0PM010.XPGCD[AV0PWIX1] is modified
     || AV0PM010.XSACD[AV0PWIX1] is modified
     || AV0PM010.PC2INSEG[AV0PWIX1] is modified
     || AV0PM010.XUMCD[AV0PWIX1] is modified
     || AV0PM010.XDMCD[AV0PWIX1] is modified
     || AV0PM010.SY2CLRID[AV0PWIX1] is modified
     || AV0PM010.SY1STNBR[AV0PWIX1] is modified)
      if (AV0PM010.XPGCD[AV0PWIX1] == " "
       && AV0PM010.XSACD[AV0PWIX1] == " "
       && AV0PM010.PC2INSEG[AV0PWIX1] == " "
       && AV0PM010.XUMCD[AV0PWIX1] == " "
       && AV0PM010.XDMCD[AV0PWIX1] == " "
       && AV0PM010.SY2CLRID[AV0PWIX1] == " "
       && AV0PM010.SY1STNBR[AV0PWIX1] == " ")
        set AV0PM010.XPGCD[AV0PWIX1] normal;
        set AV0PM010.XSACD[AV0PWIX1] normal;
        set AV0PM010.PC2INSEG[AV0PWIX1] normal;
        set AV0PM010.XUMCD[AV0PWIX1] normal;
        set AV0PM010.XDMCD[AV0PWIX1] normal;
        set AV0PM010.SY2CLRID[AV0PWIX1] normal;
        set AV0PM010.SY1STNBR[AV0PWIX1] normal;
      else

        if (AV0PM010.XPGCD[AV0PWIX1] != " ")
          AV0P053(); /* validate pkg type*/
        else
          set AV0PM010.XPGCD[AV0PWIX1] normal;
        end

        if (AV0PM010.XSACD[AV0PWIX1] != " ")
          AV0P055(); /* validate shade*/
        else
          set AV0PM010.XSACD[AV0PWIX1] normal;
        end

        if (AV0PM010.PC2INSEG[AV0PWIX1] != " ")
          AV0P057(); /* validate inv seg code*/
        else
          set AV0PM010.PC2INSEG[AV0PWIX1] normal;
        end

        if (AV0PM010.XDMCD[AV0PWIX1] != " ")
          AV0P061(); /* validate dim*/
        else
          set AV0PM010.XDMCD[AV0PWIX1] normal;
        end

        if (AV0PM010.SY2CLRID[AV0PWIX1] != " "
         && AV0PM010.XDMCD[AV0PWIX1] != " ")
          AV0P152(); /* validate style/color*/
        else
          AV0P063(); /* validate style*/
        end

        if (SQLCA.VAGen_SQLCODE == 0)
          set AV0PM010.SY2CLRID[AV0PWIX1] normal;
          if (AV0PM010.SY2CLRID[AV0PWIX1] != " ")
            AV0PM010.SY2CLRAB[AV0PWIX1] = SYCREC.SY2CLRAB;
          else
            AV0PM010.SY2CLRAB[AV0PWIX1] = " ";
          end

          if (AV0PM010.XUMCD[AV0PWIX1] != " ")
            AV0P059(); /* validate uom*/
          else
            AV0PM010.XUMCD[AV0PWIX1] = SYCREC.XUMCD;
            AV0PM010.XUMDESC[AV0PWIX1] = " ";
            AV0P059(); /* validate uom*/
          end

          AV0PM010.AV0PM-EQMT-IND[AV0PWIX1] = " "; /* init to blank*/
          AV0PW01.AV0PW-EQMT-FL = "N"; /* init to no*/
          AV0PS-CHECK-EQMT(); /* check if equipment product*/
          if (AV0PW01.AV0PW-EQMT-FL == "Y") /* if this is an equipment prod*/
            AV0PM010.AV0PM-EQMT-IND[AV0PWIX1] = "Y";
          else
            AV0PM010.AV0PM-EQMT-IND[AV0PWIX1] = "N";
          end
        end
      end
    end
    AV0P025(); /* move to AV0PW07*/

    AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 - 1;
  end

  if (converseVar.validationMsgNum == 0
   && AV0PM010.XLCCD == "10")
    AV0P160(); /* life cycle 10 check*/
  end

  if (converseVar.validationMsgNum == 0)
    set AV0PM010.SY1STNBR[1] cursor;
  end

   /* --------------------------- av0p150 ------------------------*/
end // end AV0P150

// get specific style/color
Function AV0P152()
   /* --------------------------- av0p152 ------------------------*/

   /* get sycrec for style short name and to validate sy1stnbr*/

   /* --------------------------- av0p152 ------------------------*/

  AV0PM010.XXXERRID = "AV0P152";
  set SYCREC empty;
  set SQLCA empty;

  SYCREC.XGPCD = AV0PM010.XGPCD;
  SYCREC.SY1STNBR = AV0PM010.SY1STNBR[AV0PWIX1];
  SYCREC.SY2CLRID = AV0PM010.SY2CLRID[AV0PWIX1];
  SYCREC.XDMCD = AV0PM010.XDMCD[AV0PWIX1];

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    AV0PM010.SY1SSTNM[AV0PWIX1] = SYCREC.SY1SSTNM;
    set AV0PM010.SY1STNBR[AV0PWIX1] normal;
    AV0PM010.SY2CLRID[AV0PWIX1] = SYCREC.SY2CLRID;
    set AV0PM010.SY2CLRID[AV0PWIX1] normal;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(311); /* style/color/dim record not found*/
      set AV0PM010.SY1STNBR[AV0PWIX1] cursor, modified, bold;
      set AV0PM010.SY2CLRID[AV0PWIX1] modified, bold;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "AV0P152";
      TA1REC.TA1MAP = "AV0PM010";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
      TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1FUNC = "POST";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.clearScreen();
        
        converseLib.validationFailed(75);
        exit stack;
      else
        TA1REC.TA1FUNC = "RETN";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.clearScreen();
        
        converseLib.validationFailed(76); /* fatal error*/
        exit stack;
      end
    end
  end

   /* --------------------------- av0p152 ------------------------*/
end // end AV0P152

// Life cycle 10 on Avail Hdr
Function AV0P160()
   /* --------------------------- av0p160 ------------------------*/

   /* check each product to see if it has a life cycle code of 10*/
   /* in the availability header file.*/

   /* --------------------------- av0p160 ------------------------*/

  AV0PW01.AV0PWIX1 = 11;
  while (AV0PWIX1 >= 1)
    if (AV0PM010.SY1STNBR[AV0PWIX1] != " ")
      if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian Sales Office*/
        AV0P-1621(); /* l.c. 10 check*/
      else
        if (AV0PM010.AV0PM-EQMT-IND[AV0PWIX1] == "Y") /* equipment product*/
          AV0P-1622(); /* USA Equipment l.c. 10 check*/
        else
          AV0P162(); /* USA l.c. 10 check*/
        end
      end
      AV0PW01.AV0PWLFL = "N"; /* l.c. 10 found flag*/
    end
    AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 - 1;
  end

   /* --------------------------- av0p160 ------------------------*/
end // end AV0P160

// Life cycle 10 check - US
Function AV0P162()
   /* ------------------------------ av0p162 ------------------------*/
                      /* life cycle 10 check*/
   /* --------------------------- av0p162 ------------------------*/

  AV5REC.XGPCD = AV0PM010.XGPCD;
  AV5REC.SY1STNBR = AV0PM010.SY1STNBR[AV0PWIX1];

  if (AV0PM010.SY2CLRID[AV0PWIX1] != " ")
    AV5REC.SY2CLRID = AV0PM010.SY2CLRID[AV0PWIX1];
  else
    AV5REC.SY2CLRID = "***";
  end

  if (AV0PM010.XDMCD[AV0PWIX1] != " ")
    AV5REC.XDMCD = AV0PM010.XDMCD[AV0PWIX1];
  else
    AV5REC.XDMCD = "**";
  end
  AV5REC.XQACD = AV0PM010.XQACD;

   /* Apparel products with warehouses '51' or '25' or '27' wildcarded:*/
   /* Warehouse = '  ' will wildcard to '51' , '25' and '27'in the io mod*/

  if (AV0PM010.XGPCD == "03")
    if (AV0PM010.XOWCD != " ")
      AV5REC.XOWCD = AV0PM010.XOWCD;
    else
      if (AV0PM010.XWHCD == "  "
       || AV0PM010.XWHCD == "51") /* US apparel*/
  /* change begin*/
  /* OR AV0PM010.XWHCD = '25';  /* US apparel*/
  /* change end*/
  /* change begins - 01/31/01*/
  /* OR AV0PM010.XWHCD = '27';  /* US victory crestor*/
  /* change ends   - 01/31/01*/
        AV5REC.XOWCD = "**";
      else
        AV5REC.XOWCD = "00";
      end
    end
  else
    if (AV0PM010.XOWCD != "  ")
      AV5REC.XOWCD = AV0PM010.XOWCD;
    else
      AV5REC.XOWCD = "00";
    end
  end

  if (AV0PM010.PC2INSEG[AV0PWIX1] != " ")
    AV5REC.XSDCD = AV0PM010.PC2INSEG[AV0PWIX1];
  else
    AV5REC.XSDCD = "000";
  end

  if (AV0PM010.XSACD[AV0PWIX1] != " ")
    AV5REC.XSACD = AV0PM010.XSACD[AV0PWIX1];
  else
    AV5REC.XSACD = "***";
  end

  if (AV0PM010.XPGCD[AV0PWIX1] != " ")
    AV5REC.XPGCD = AV0PM010.XPGCD[AV0PWIX1];
  else
    AV5REC.XPGCD = "00";
  end

  if (AV0PM010.XUMCD[AV0PWIX1] != " ")
    AV5REC.XUMCD = AV0PM010.XUMCD[AV0PWIX1];
  else
    AV5REC.XUMCD = "**";
  end

  AV5REC.AV5RECTY = " ";

  AV5REC.AV4PRDBD = 0;

  if (AV0PM010.XGPCD == "02")
    if (AV0PM010.XWHCD == "  ")
      AV5REC.XWHCD = "02";
    else
      AV5REC.XWHCD = AV0PM010.XWHCD;
    end

    AV0P164(); /* ss on avhdr01*/
    AV0PW01.AV0PWFLG = "Y";
    AV0PW01.AV0PWLFL = "N";

    while (AV0PW01.AV0PWFLG == "Y")
      AV0P166(); /* search for life cycle 10*/
    end
    AV0P169(); /* close ss on avhdr01*/

    if (AV0PW01.AV0PWLFL == "Y") /* life cycle 10 found*/
      set AV0PM010.SY1STNBR[AV0PWIX1] normal;
      return;
    end

    if (AV0PM010.XWHCD != " ")
      set AV0PM010.SY1STNBR[AV0PWIX1] cursor, modified, bold;
      converseLib.validationFailed(167);
       /* style has no life cycle 10 in availability*/
      return;
    end

    AV5REC.XWHCD = "04";
    AV0P164(); /* ss on avhdr01*/
    AV0PW01.AV0PWFLG = "Y";
    AV0PW01.AV0PWLFL = "N";

    while (AV0PW01.AV0PWFLG == "Y")
      AV0P166(); /* search for life cycle 10*/
    end
    AV0P169(); /* close ss on avhdr01*/

    if (AV0PW01.AV0PWLFL == "Y") /* life cycle 10 found*/
      set AV0PM010.SY1STNBR[AV0PWIX1] normal;
      return;
    end

    AV5REC.XWHCD = "51";
    AV0P164(); /* ss on avhdr01*/
    AV0PW01.AV0PWFLG = "Y";
    AV0PW01.AV0PWLFL = "N";

    while (AV0PW01.AV0PWFLG == "Y")
      AV0P166(); /* search for life cycle 10*/
    end
    AV0P169(); /* close ss on avhdr01*/

    if (AV0PW01.AV0PWLFL == "Y") /* life cycle 10 found*/
      set AV0PM010.SY1STNBR[AV0PWIX1] normal;
      return;
    end

    AV5REC.XWHCD = "07";
    AV0P164(); /* ss on avhdr01*/
    AV0PW01.AV0PWFLG = "Y";
    AV0PW01.AV0PWLFL = "N";

    while (AV0PW01.AV0PWFLG == "Y")
      AV0P166(); /* search for life cycle 10*/
    end
    AV0P169(); /* close ss on avhdr01*/

    if (AV0PW01.AV0PWLFL == "Y") /* life cycle 10 found*/
      set AV0PM010.SY1STNBR[AV0PWIX1] normal;
    else
      set AV0PM010.SY1STNBR[AV0PWIX1] cursor, modified, bold;
      converseLib.validationFailed(167);
       /* style has no life cycle 10 in availability*/
    end
    return;
  end

   /* GPC 03 check:*/
  if (AV0PM010.XGPCD == "03")
    if (AV0PM010.XWHCD == "  ")
  /* change begin*/
  /* MOVE '25' TO AV5REC.XWHCD;   /* US Apparel*/

  /* PERFORM AV0P-1621;           /* Get the life cycle 10*/
  /* ;*/
  /* IF AV0PW01.AV0PWLFL EQ 'Y';  /* life cycle 10 found*/
  /* SET AV0PM010.SY1STNBR(AV0PWIX1) NORMAL;*/
  /* EZERTN;*/
  /* END;*/
  /* ;*/
      AV5REC.XWHCD = "51"; /* US Apparel*/
      AV0P-1621(); /* Get the  life cycle 10*/

  /* change begins - 01/31/01*/
  /* IF AV0PW01.AV0PWLFL EQ 'Y';  /* life cycle 10 found*/
  /* SET AV0PM010.SY1STNBR(AV0PWIX1) NORMAL;*/
  /* EZERTN;*/
  /* END;*/
  /* ;*/
  /* MOVE '27' TO AV5REC.XWHCD;   /* US Victory Crestor*/
  /* PERFORM AV0P-1621;           /* Get the life cycle 10*/
  /* change ends   - 01/31/01*/

      if (AV0PW01.AV0PWLFL == "Y") /* life cycle 10 found*/
        set AV0PM010.SY1STNBR[AV0PWIX1] normal;
      else
        set AV0PM010.SY1STNBR[AV0PWIX1] cursor, modified, bold;
        converseLib.validationFailed(167);
       /* style has no life cycle 10 in availability*/
      end
      return;

    else
      AV5REC.XWHCD = AV0PM010.XWHCD;
      AV0P-1621(); /* Get the life cycle 10*/

      if (AV0PW01.AV0PWLFL == "Y") /* Get the life cycle 10*/
        set AV0PM010.SY1STNBR[AV0PWIX1] normal;
      else
        set AV0PM010.SY1STNBR[AV0PWIX1] cursor, modified, bold;
        converseLib.validationFailed(167);
       /* style has no life cycle 10 in availability*/
      end
      return;
    end
  end

end // end AV0P162

// ss/hdr01 for key from map 10
Function AV0P164()
   /* --------------------------- av0p164 ------------------------*/

                       /* ss on davail.vavhdr01*/

   /* --------------------------- av0p164 ------------------------*/

  call "IO2310" ("SS", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0P";
    TA1REC.TA1LOCAT = "AV0P164";
    TA1REC.TA1MAP = "AV0PM010";
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.clearScreen();
    
    AV0PW01.AV0PWFL2 = "N";
    AV0PW01.AV0PWFTW = "N";
    AV0PW01.AV0PWAPR = "N";
    converseLib.validationFailed(76); /* fatal error*/
    exit stack;
  end

   /* --------------------------- av0p164 ------------------------*/
end // end AV0P164

// search for life cycle 10
Function AV0P166()
   /* --------------------------- av0p166 ------------------------*/
                     /* do select next on the set obtained*/
                     /* from av0p168 (vavhdr01)*/
   /* ------------------------------------------------------------*/

  AV0P168(); /* sn on avhdr01*/

  if (VAGen_SQLCODE == 100)
    AV0PW01.AV0PWFLG = "N"; /* end while flag*/
    AV0PW01.AV0PWLFL = "N"; /* life cycle 10 found flag*/
    return;
  end

  if (AV5REC.XLCCD == "10")
    if (AV0PM010.XGPCD == "03")

      /* Bulk mailer t-shirt owner groups ('mr' and 'sm') should only be*/
      /* displayed if the owner group codes are specifically entered*/
      /* in the map:*/

      if (AV5REC.XOWCD != "MR"
       && AV5REC.XOWCD != "SM")
        AV0PW01.AV0PWLFL = "Y"; /* life cycle 10 found flag*/
        AV0PW01.AV0PWFLG = "N"; /* end while flag*/
      else
        if (AV5REC.XOWCD == "MR"
         || AV5REC.XOWCD == "SM")
          if (AV0PM010.XOWCD == AV5REC.XOWCD)
            AV0PW01.AV0PWLFL = "Y"; /* life cycle 10 found flag*/
            AV0PW01.AV0PWFLG = "N"; /* end while flag*/
          end
        end
      end
    else
      AV0PW01.AV0PWFLG = "N"; /* end while flag*/
      AV0PW01.AV0PWLFL = "Y"; /* life cycle 10 found flag*/
    end
  end

   /* --------------------------- av0p166 ------------------------*/
end // end AV0P166

// sn/hdr01 for key from map 10
Function AV0P168()
   /* --------------------------- av0p168 ------------------------*/

   /* do select next on the set obtained from av0p164 (vavhdr01)*/

   /* --------------------------- av0p168 ------------------------*/

  AV0PM020.XXXERRID = "AV0P168";
  set SQLCA empty;

  call "IO2310" ("SN", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0P";
    TA1REC.TA1LOCAT = "AV0P168";
    TA1REC.TA1MAP = "AV0PM010";
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.clearScreen();
    
    AV0PW01.AV0PWFL2 = "N";
    AV0PW01.AV0PWFTW = "N";
    converseLib.validationFailed(76); /* fatal error*/
    exit stack;
  end

   /* --------------------------- av0p168 ------------------------*/
end // end AV0P168

// close ss on hdr01
Function AV0P169()
   /* --------------------------- av0p169 ------------------------*/

   /* do a close set on the set obtained from av0p164 (vavhdr01)*/

   /* --------------------------- av0p169 ------------------------*/

  AV0PM020.XXXERRID = "AV0P169";
  set SQLCA empty;

  call "IO2310" ("CS", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0P";
    TA1REC.TA1LOCAT = "AV0P169";
    TA1REC.TA1MAP = "AV0PM010";
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.clearScreen();
    
    AV0PW01.AV0PWFL2 = "N";
    AV0PW01.AV0PWFTW = "N";
    converseLib.validationFailed(76); /* fatal error*/
    exit stack;
  end

   /* --------------------------- av0p169 ------------------------*/
end // end AV0P169

// phased ftwr process
Function AV0P300()
   /* --------------------------- av0p300 ------------------------*/

                       /* phased footwear process*/

   /* --------------------------- av0p300 ------------------------*/

  if (converseVar.validationMsgNum == 142 /* can't skip to previous selected prd*/
   || converseVar.validationMsgNum == 280 /* product must be quality 01, life cyc*/
   /* 10*/
   || converseVar.validationMsgNum == 282) /* can not fastpath to op0l*/
     /* next sentence*/
  else
    if (converseVar.eventKey is pf16 /* skip to next prd selected*/
     || converseVar.eventKey is pf17 /* skip to previous selected prd*/
     || AV0PW01.AV0PWFL2 == "Y")     /* first time in this map*/
      if (converseVar.eventKey is pf15) /* page back thru products*/
        AV0P307(); /* save map hdr/clear map/rebuild hdr*/
        AV0P310(); /* set up partial ftwr header*/
      else
        if (converseVar.eventKey is pf17) /* back to last selected product*/
           /* next sentence*/
        else
          AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 + 1;
          AV0P305(); /* position ix1 on selected prd*/
        end
        if (converseVar.validationMsgNum == 140) /* no more prds to page frwd to*/
          AV0PW01.AV0PWFL2 = "Y";
        else
          AV0P307(); /* save map hdr/clear map/rebuild hdr*/
          AV0P310(); /* set up partial ftwr header*/
        end
      end

      if (converseVar.validationMsgNum != 0) /* no more prds to page frwd to or db*/
                                   /* contention*/
        if (converseVar.eventKey is pf17)
          AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 + 1;
                                   /* reset to last prd displayed*/
          AV0PW01.AV0PWFL2 = "Y";
        else
          AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 - 1;
                                   /* reset to last prd displayed*/
          AV0PW01.AV0PWFL2 = "Y";
        end
      else
        if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian Sales Office*/
          AV0P-3201(); /* ss on hdr01 with key from map 10*/
        else
          if (AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] == "Y") /* equipment product*/
            AV0P-3202(); /* ss on hdr01 with key from map 10*/
          else
            AV0P320(); /* ss on hdr01 with key from map 10*/
          end
        end
      end
    end
  end

  if (AV0PW01.AV0PWWWH == "Y"
   && converseVar.validationMsgNum == 0)
    AV0P349(); /* if wildcarded whse is there a hdr?*/
  end

   /* if this is the first time in the phased ftwr screen or*/
   /* the user pressed enter (get next variation of the product)*/
   /* then:*/

  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16
     || converseVar.eventKey is pf17
     || AV0PW01.AV0PWFL2 == "Y") /* first time in ftwr screen*/

      AV0PW01.AV0PWFL2 = "N";

      AV0P350(); /* su on hdr01 set from av0pw04*/

      if (converseVar.validationMsgNum == 0 /* no problems*/
       || converseVar.validationMsgNum == 135) /* no more recs in w04 for this prd*/

        AV0P307(); /* save map hdr/clear map/rebuild hdr*/

        AV0P400(); /* move szs/cond cds from hdr01 to w-s*/

        AV0P450(); /* set up the rest of ftwr header info*/

        AV0P510(); /* ss on qty01/key from hdr01*/

        AV0P520(); /* sn on set for av0p510*/

        if (VAGen_SQLCODE == 100)
          AV0P525(); /* close set on qty01*/
          converseLib.validationFailed(136); /* no period or at once records*/
        else
          AV0P530(); /* move qtys/periods from qty01 to w-s*/
        end

        AV0P550(); /* set up phased ftwr map 20*/

      else
        AV0PW01.AV0PWFL2 = "Y"; /* db contention*/
      end
    end
  end

  AV0P600(); /* converse phased ftwr map 20*/

  AV0PM020.VAGen_EZEMSG = " ";

  AV0P610(); /* pf key xfers for map 10*/

  if (converseVar.eventKey is pa2
   || converseVar.eventKey is pf3)
    AV0PW01.AV0PWFL2 = "N"; /* first time in ftwr*/
    AV0PW01.AV0PWFTW = "N"; /* ftwr until flag*/
    return;
  end

  if (converseVar.eventKey is pf8
   || converseVar.eventKey is pf7)
    AV0P550(); /* page to next 11 sizes (if any) for*/
                                   /* product*/
  end

   /* next two if's are for adjusting the indexes on the set of*/
   /* headers obtained from a select set of headers obtained from*/
   /* one of the products on screen ten or on the selected pro-*/
   /* ducts from screen 10.*/
   /* this is to accomplish paging backwards thru products.*/
   /* ix1 = index into map 10's selected products.*/
   /* ix10 = index into av0pw04 where the set of headers from*/
         /* a select set on one of the products from screen 10*/
         /* are kept.*/

  if (converseVar.eventKey is enter)
    if (AV0PW01.AV0PWI10 < AV0PW01.AV0PWSI2) /* more prds in w04 to display*/
      AV0PW01.AV0PWFL2 = "N";
    else
      if (AV0PW01.AV0PWI10 == AV0PW01.AV0PWSI2)
                                   /* all prds in w04 alredy shown*/
        AV0PW01.AV0PWFL2 = "Y";
      end
    end
  end

  if (converseVar.eventKey is pf15) /* paging backwards*/
    if (AV0PW01.AV0PWI10 <= 1) /* no more hdrs in w04*/
      if (AV0PW01.AV0PWIX1 <= 1) /* no more products in map 10*/
        AV0PW01.AV0PWFL2 = "N";
        converseLib.validationFailed(141); /* can't back up anymore*/
        return;
      else
        AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX1 - 1;

         /* find the first non-blank style nbr in map 10 (bottom up)*/

        while (AV0PWIX6 <= AV0PWIX1
         && AV0PWIX6 > 0)
          if (AV0PW07.SY1STNBR[AV0PWIX6] != " ")
            AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX6;
            AV0PW01.AV0PWIX6 = -1; /* stop while*/
          else
            AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX6 - 1;
          end
        end
        if (AV0PW01.AV0PWIX6 == 0)
          AV0PW01.AV0PWFL2 = "N";
          converseLib.validationFailed(141); /* can't back up anymore*/
        else
          AV0PW01.AV0PWFL2 = "Y";
        end

        return;
      end
    else
      AV0PW01.AV0PWFL2 = "N";
    end
  end

  if (converseVar.eventKey is pf17) /* paging backwards thru selected prds*/
    if (AV0PW01.AV0PWIX1 <= 1) /* no more products in map 10*/
      AV0PW01.AV0PWFL2 = "N";
      converseLib.validationFailed(142); /* can't skip back anymore*/
      return;
    else
      AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX1 - 1;

       /* find the first non-blank style nbr in map 10 (bottom up)*/

      while (AV0PWIX6 <= AV0PWIX1
       && AV0PWIX6 > 0)
        if (AV0PW07.SY1STNBR[AV0PWIX6] != " ")
          AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX6;
          AV0PW01.AV0PWIX6 = -1; /* stop while*/
        else
          AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX6 - 1;
        end
      end
      if (AV0PW01.AV0PWIX6 == 0)
        AV0PW01.AV0PWFL2 = "N";
        converseLib.validationFailed(142); /* can't skip back up anymore*/
      else
        AV0PW01.AV0PWFL2 = "Y";
      end

      return;
    end
  end

   /* --------------------------- av0p300 ------------------------*/
end // end AV0P300

// position ix1 on next prd selec
Function AV0P305()
   /* --------------------------- av0p305 ------------------------*/

                   /* position ix1 on the next product*/
                   /* the user selected on map 010.*/

   /* --------------------------- av0p305 ------------------------*/



  AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX1;

  while (AV0PW01.AV0PWIX6 <= 30)
    if (AV0PW07.SY1STNBR[AV0PWIX6] != " ")
      AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX6;
      AV0PW01.AV0PWIX6 = 32;
    else
      AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX6 + 1;
    end
  end

  if (AV0PW01.AV0PWIX6 == 31)
    converseLib.validationFailed(140); /* no more prds to page frwd to*/
  end



   /* --------------------------- av0p305 ------------------------*/
end // end AV0P305
// save hdr/clear map/rebld hdr
Function AV0P307()
   /* --------------------------- av0p307 ------------------------*/

                     /* save apparel header.*/
                     /* clear map.*/
                     /* put header info back.*/

   /* --------------------------- av0p307 ------------------------*/

  AV0PW06.XXXERRID = AV0PM020.XXXERRID;
  AV0PW06.XXXMAPNM = AV0PM020.XXXMAPNM;
  AV0PW06.XXXRVNBR = AV0PM020.XXXRVNBR;
  AV0PW06.XXXCURDT = AV0PM020.XXXCURDT;
  AV0PW06.SY1STNBR = AV0PM020.SY1STNBR;
  AV0PW06.SY1STYNM = AV0PM020.SY1STYNM;
  AV0PW06.XWHABRV = AV0PM020.XWHABRV;
  AV0PW06.XOWCD = AV0PM020.XOWCD;
  AV0PW06.XOWABRV = AV0PM020.XOWABRV;
  AV0PW06.XDMCD = AV0PM020.XDMCD;
  AV0PW06.XDMDESC = AV0PM020.XDMDESC;
  AV0PW06.XGAABRV = AV0PM020.XGAABRV;
  AV0PW06.XSPDESC = AV0PM020.XSPDESC;
  AV0PW06.SY2CLRID = AV0PM020.SY2CLRID;
  AV0PW06.SY2CLRDS = AV0PM020.SY2CLRDS;
  AV0PW06.PC2INSEG = AV0PM020.PC2INSEG;
  AV0PW06.XPGCD = AV0PM020.XPGCD;
  AV0PW06.XUMDESC = AV0PM020.XUMDESC;
  AV0PW06.XSECOVFL = AV0PM020.XSECOVFL;
  AV0PW06.AV0PWHMF = AV0PM020.AV0PMHMF;
  AV0PW06.SY2ALNOR = AV0PM020.SY2ALNOR;
  AV0PW06.AV5SMTFL = AV0PM020.AV5SMTFL;
  AV0PW06.AV1CUPRC = AV0PM020.AV1CUPRC;
  AV0PW06.AV1CUEDT = AV0PM020.AV1CUEDT;
  AV0PW06.AV1PRPRC = AV0PM020.AV1PRPRC;
  AV0PW06.AV0PWCHG = AV0PM020.AV0PMCHG;
  AV0PW06.AV2CMNT = AV0PM020.AV2CMNT;
  AV0PW06.AV0PWPM = AV0PM020.AV0PMPRM;
  AV0PW06.AV0PWPC = AV0PM020.AV0PMPRC;

  set AV0PM020 initial;

  AV0PM020.XXXERRID = AV0PW06.XXXERRID;
  AV0PM020.XXXMAPNM = AV0PW06.XXXMAPNM;
  AV0PM020.XXXRVNBR = AV0PW06.XXXRVNBR;
  AV0PM020.XXXCURDT = AV0PW06.XXXCURDT;
  AV0PM020.SY1STNBR = AV0PW06.SY1STNBR;
  AV0PM020.SY1STYNM = AV0PW06.SY1STYNM;
  AV0PM020.XWHABRV = AV0PW06.XWHABRV;
  AV0PM020.XOWCD = AV0PW06.XOWCD;
  AV0PM020.XOWABRV = AV0PW06.XOWABRV;
  AV0PM020.XDMCD = AV0PW06.XDMCD;
  AV0PM020.XDMDESC = AV0PW06.XDMDESC;
  AV0PM020.XGAABRV = AV0PW06.XGAABRV;
  AV0PM020.XSPDESC = AV0PW06.XSPDESC;
  AV0PM020.SY2CLRID = AV0PW06.SY2CLRID;
  AV0PM020.SY2CLRDS = AV0PW06.SY2CLRDS;
  AV0PM020.PC2INSEG = AV0PW06.PC2INSEG;
  AV0PM020.XPGCD = AV0PW06.XPGCD;
  AV0PM020.XUMDESC = AV0PW06.XUMDESC;
  AV0PM020.XSECOVFL = AV0PW06.XSECOVFL;

  AV0PM020.SY2ALNOR = AV0PW06.SY2ALNOR; /* allow new order flag*/
  AV0PM020.AV0PMHMF = AV0PW06.AV0PWHMF; /* hot model flag*/
  if (AV0PW06.AV0PWHMF == "Y") /* if hot model set map field blinking*/
    set AV0PM020.AV0PMHMI initialAttributes;
  else
                                   /* if not hot model, set map field dark*/
    set AV0PM020.AV0PMHMI invisible;
  end

  AV0PM020.AV5SMTFL = AV0PW06.AV5SMTFL;
  AV0PM020.AV1CUPRC = AV0PW06.AV1CUPRC;
  AV0PM020.AV1CUEDT = AV0PW06.AV1CUEDT;
  AV0PM020.AV1PRPRC = AV0PW06.AV1PRPRC;
  AV0PM020.AV0PMCHG = AV0PW06.AV0PWCHG;
  AV0PM020.AV2CMNT = AV0PW06.AV2CMNT;
  AV0PM020.AV0PMPRM = AV0PW06.AV0PWPM;
  AV0PM020.AV0PMPRC = AV0PW06.AV0PWPC;

   /* --------------------------- av0p307 ------------------------*/
end // end AV0P307

// partially set up ftwr header
Function AV0P310()
   /* --------------------------- av0p310 ------------------------*/

                     /* partially set up ftwr header*/
                     /* (the rest is setup in av0p450)*/

   /* --------------------------- av0p310 ------------------------*/

  AV0PM020.SY1STNBR = AV0PW07.SY1STNBR[AV0PWIX1];

  if (AV0PW07.SY2CLRID[AV0PWIX1] != " ")
    AV0PM020.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
    AV0P453(); /* get color desc*/
  end

  AV0PW01.XWHCD = AV0PW07.XWHCD[AV0PWIX1];
  if (AV0PW01.XWHCD in XWHTBL.XWHCD)
    AV0PM020.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  AV0PM020.XOWCD = AV0PW07.XOWCD[AV0PWIX1];
  AV0PW01.XOWCD = AV0PW07.XOWCD[AV0PWIX1];
  if (AV0PW01.XOWCD in XOWTBL.XOWCD)
    AV0PM020.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  end

  AV0PM020.XDMCD = AV0PW07.XDMCD[AV0PWIX1];
  AV0PW01.XDMCD = AV0PW07.XDMCD[AV0PWIX1];
  if (AV0PW01.XDMCD in XDMTBL.XDMCD)
    AV0PM020.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
  end

  AV0PM020.PC2INSEG = AV0PW07.PC2INSEG[AV0PWIX1];

  AV0PM020.XPGCD = AV0PW07.XPGCD[AV0PWIX1];

  AV0PW01.XUMCD = AV0PW07.XUMCD[AV0PWIX1];
  if (AV0PW01.XUMCD in XUMTBL.XUMCD)
    AV0PM020.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  AV0PM020.XGAABRV = " "; /* clear gender age abrv*/
  if (AV0PW07.XGACD[AV0PWIX1] in XGATBL.XGACD)
    AV0PM020.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  AV0PM020.XSPDESC = " "; /* clear sport activity abrv*/
  if (AV0PW07.XSPCD[AV0PWIX1] in XSPTBL.XSPCD)
    AV0PM020.XSPDESC = XSPTBL.XSPDESC[sysVar.arrayIndex];
  end

  AV0PM020.SY1STYNM = AV0PW07.SY1STYNM[AV0PWIX1];

   /* --------------------------- av0p310 ------------------------*/
end // end AV0P310
// clear w04; default whse to w07
Function AV0P320()
   /* --------------------------- av0p320 ------------------------*/

                       /* save hdr01 keys to av0pw04*/

   /* --------------------------- av0p320 ------------------------*/

   /* index for w-s area av0pw04 where the keys from this select*/
   /* set are kept. this index used in av0p350.*/

  AV0PW01.AV0PWI10 = 0;
  AV0PW01.AV0PWSI2 = 0;

  AV0PW01.AV0PWWWH = "N"; /* wildcarded whse*/

  if (AV0PM010.XGPCD == "03") /* if apparel*/
    if (AV0PW07.XWHCD[AV0PWIX1] == "  ") /* if whse cd wildcarded*/
      AV0PW01.AV0PWWWH = "Y"; /* wildcarded whse*/
    end
  end

  set AV0PW04 empty;

  if (AV0PM010.XGPCD != "03")
    if (AV0PW07.XWHCD[AV0PWIX1] == "  ") /* if whse cd wildcarded*/
      AV0PW01.AV0PWWWH = "Y"; /* wildcarded whse*/
      if (COMMAREA.XWHCD == "07")
        AV0PW07.XWHCD[AV0PWIX1] = "07";
      else
        if (COMMAREA.XWHCD == "04")
          AV0PW07.XWHCD[AV0PWIX1] = "04";
        else
          if (COMMAREA.XWHCD == "51")
            AV0PW07.XWHCD[AV0PWIX1] = "51";
          else
            if (COMMAREA.XWHCD == "02")
              AV0PW07.XWHCD[AV0PWIX1] = "02";
            else
              AV0PW07.XWHCD[AV0PWIX1] = "02";
            end
          end
        end
      end
    end
  end

  AV0P325(); /* ss on hdr01*/

  if (VAGen_SQLCODE != 0)
    if (AV0PW01.AV0PWWWH == "Y") /* wildcarded whse*/
      AV0PM010.XWHABRV = "  ";
      AV0PM010.XWHCD = "  ";
      AV0PW07.XWHCD[AV0PWIX1] = "  ";
    end
    return;
  end

  AV0P340(); /* sn on hdr01*/

  if (VAGen_SQLCODE == 100
   && AV0PW01.AV0PWWWH != "Y")
    AV0PW01.AV0PWI10 = 0;
    AV0PM020.PC2INSEG = " ";
    AV0PM020.XPGCD = " ";
    AV0PM020.XUMDESC = " ";
    AV0PM020.AV1CUPRC = 0;
    AV0PM020.AV1PRPRC = 0;
    AV0PM020.AV0PMPRC = 0;
    AV0PM020.AV1CUEDT = 0;
    AV0PM020.AV2CMNT = " ";
    AV0PM020.AV5SMTFL = " ";
    AV0PM020.AV0PMCHG = 0;
    AV0PM030.PC2INSEG = " ";
    AV0PM030.XPGCD = " ";
    AV0PM030.XUMDESC = " ";
    AV0PM030.AV1CUPRC = 0;
    AV0PM030.AV1PRPRC = 0;
    AV0PM030.AV0PMPRC = 0;
    AV0PM030.AV1CUEDT = 0;
    AV0PM030.AV2CMNT = " ";
    AV0PM030.AV5SMTFL = " ";
    AV0PM030.AV0PMCHG = 0;
    converseLib.validationFailed(138); /* no recs for this prd enter/pf16*/
    if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
      AV0PM020.SY2CLRDS = " ";
      AV0PM030.SY2CLRDS = " ";
      AV0PM020.SY2CLRID = " ";
      AV0PM030.SY2CLRID = " ";
    end
    AV0P345(); /* close set on hdr01*/
    return;
  end

  AV0PW01.AV0PWIX2 = 0;

  AV0P322(); /* save keys from select set into*/
                                   /* av0pw04*/

  AV0P345(); /* close set on hdr01*/

   /* next 'if' in case no products w/ the proper life cycle*/
   /* were found. if we did not do this then color would*/
   /* turn up blank on the ftwr/aprl screens. it will anyway*/
   /* when color is wildcarded on map 10 but this is better*/
   /* then nothing.*/

  if (AV0PW01.AV0PWSI2 == 0)
    AV0PM020.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
    AV0PM030.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
     /* both ftwr and apprl maps since ftwr and aprl processes*/
     /* (av0p300 and av0p700) use this process.*/
  end

  if (AV0PW01.AV0PWWWH != "Y") /* wildcarded whse*/
    if (converseVar.eventKey is pf15) /* paging backward thru prds*/
      AV0PW01.AV0PWI10 = AV0PW01.AV0PWSI2;
      AV0PW01.AV0PWI10 = AV0PW01.AV0PWI10 + 1; /* one more then whats in w04*/
       /* because of av0p350*/
      if (AV0PW01.AV0PWSI2 == 0)
        AV0PW01.AV0PWI10 = 0;
        AV0PM020.PC2INSEG = " ";
        AV0PM020.XPGCD = " ";
        AV0PM020.XUMDESC = " ";
        AV0PM020.AV1CUPRC = 0;
        AV0PM020.AV1PRPRC = 0;
        AV0PM020.AV0PMPRC = 0;
        AV0PM020.AV1CUEDT = 0;
        AV0PM020.AV2CMNT = " ";
        AV0PM020.AV5SMTFL = " ";
        AV0PM020.AV0PMCHG = 0;
        AV0PM030.PC2INSEG = " ";
        AV0PM030.XPGCD = " ";
        AV0PM030.XUMDESC = " ";
        AV0PM030.AV1CUPRC = 0;
        AV0PM030.AV1PRPRC = 0;
        AV0PM030.AV0PMPRC = 0;
        AV0PM030.AV1CUEDT = 0;
        AV0PM030.AV2CMNT = " ";
        AV0PM030.AV5SMTFL = " ";
        AV0PM030.AV0PMCHG = 0;
        converseLib.validationFailed(138); /* no recs found*/
        if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
          AV0PM020.SY2CLRID = " ";
          AV0PM030.SY2CLRID = " ";
          AV0PM020.SY2CLRDS = " ";
          AV0PM030.SY2CLRDS = " ";
        end
      end
    else
      if (AV0PW01.AV0PWSI2 == 0)
        AV0PW01.AV0PWI10 = 0;
        AV0PW01.AV0PWI10 = 0;
        AV0PM020.PC2INSEG = " ";
        AV0PM020.XPGCD = " ";
        AV0PM020.XUMDESC = " ";
        AV0PM020.AV1CUPRC = 0;
        AV0PM020.AV1PRPRC = 0;
        AV0PM020.AV0PMPRC = 0;
        AV0PM020.AV1CUEDT = 0;
        AV0PM020.AV2CMNT = " ";
        AV0PM020.AV5SMTFL = " ";
        AV0PM020.AV0PMCHG = 0;
        AV0PM030.PC2INSEG = " ";
        AV0PM030.XPGCD = " ";
        AV0PM030.XUMDESC = " ";
        AV0PM030.AV1CUPRC = 0;
        AV0PM030.AV1PRPRC = 0;
        AV0PM030.AV0PMPRC = 0;
        AV0PM030.AV1CUEDT = 0;
        AV0PM030.AV2CMNT = " ";
        AV0PM030.AV5SMTFL = " ";
        AV0PM030.AV0PMCHG = 0;
        converseLib.validationFailed(138); /* no recs found*/
        if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
          AV0PM020.SY2CLRDS = " ";
          AV0PM030.SY2CLRDS = " ";
          AV0PM020.SY2CLRID = " ";
          AV0PM030.SY2CLRID = " ";
        end
      end
    end
    return;
  end

   /* --------------------------- av0p320 ------------------------*/
end // end AV0P320

// save hdr01 keys from ss
Function AV0P322()
   /* --------------------------- av0p322 ------------------------*/
                       /* save hdr01 keys from select set*/
   /* ------------------------------------------------------------*/

  AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;

  if (AV0PW01.AV0PWWWH == "Y" /* wildcarded whse*/
   && VAGen_SQLCODE == 100)  
    AV0PW01.AV0PWSI2 = AV0PW01.AV0PWIX2;
    AV0PW04.XWHCD[AV0PWIX2] = AV0PW07.XWHCD[AV0PWIX1];
    AV0PW04.SY1STNBR[AV0PWIX2] = AV0PW07.SY1STNBR[AV0PWIX1];
    AV0PW04.SY2CLRID[AV0PWIX2] = AV0PW07.SY2CLRID[AV0PWIX1];
    AV0PW04.XDMCD[AV0PWIX2] = AV0PW07.XDMCD[AV0PWIX1];
    AV0PW04.XUMCD[AV0PWIX2] = AV0PW07.XUMCD[AV0PWIX1];
    AV0PW04.XOWCD[AV0PWIX2] = AV0PW07.XOWCD[AV0PWIX1];
    AV0PW04.PC2INSEG[AV0PWIX2] = AV0PW07.PC2INSEG[AV0PWIX1];
    AV0PW04.XPGCD[AV0PWIX2] = AV0PW07.XPGCD[AV0PWIX1];
    AV0PW04.AV4PRDBD[AV0PWIX2] = 0;
    if (AV0PW01.AV0PWIX2 > 1)
      AV0PW04.AV0PWNHD[AV0PWIX2] = "Y"; /* hdr for this product*/
    else
      AV0PW04.AV0PWNHD[AV0PWIX2] = "N"; /* no hdr for this product*/
    end
    AV0PW04.AV0PW-EQMT-FL[AV0PWIX2] = AV0PW07.AV0PW-EQMT-FL[AV0PWIX1];
    return;
  end

   /* same as above if life cycle not correct*/
  if (AV0PW01.AV0PWWWH == "Y" /* wildcarded whse*/
   && AV5REC.XLCCD != AV0PW07.XLCCD[AV0PWIX1])
    AV0PW01.AV0PWSI2 = AV0PW01.AV0PWIX2;
    AV0PW04.XWHCD[AV0PWIX2] = AV5REC.XWHCD;
    AV0PW04.SY1STNBR[AV0PWIX2] = AV5REC.SY1STNBR;
    AV0PW04.SY2CLRID[AV0PWIX2] = AV5REC.SY2CLRID;
    AV0PW04.XDMCD[AV0PWIX2] = AV5REC.XDMCD;
    AV0PW04.XUMCD[AV0PWIX2] = AV5REC.XUMCD;
    AV0PW04.XOWCD[AV0PWIX2] = AV5REC.XOWCD;
    AV0PW04.PC2INSEG[AV0PWIX2] = AV5REC.XSDCD;
    AV0PW04.XPGCD[AV0PWIX2] = AV5REC.XPGCD;
    AV0PW04.AV4PRDBD[AV0PWIX2] = 0;
    if (AV0PW01.AV0PWIX2 > 1)
      AV0PW04.AV0PWNHD[AV0PWIX2] = "Y"; /* hdr for this product*/
    else
      AV0PW04.AV0PWNHD[AV0PWIX2] = "N"; /* no hdr for this product*/
    end
    AV0PW04.AV0PW-EQMT-FL[AV0PWIX2] = AV0PW07.AV0PW-EQMT-FL[AV0PWIX1];
  end

  while (AV0PW01.AV0PWIX2 <= 50)
    if (AV5REC.XLCCD == AV0PW07.XLCCD[AV0PWIX1])
      AV0P323(); /* move key data to working storage*/
    else
      AV0P340(); /* sn on hdr01 set (ftwr & aprl)*/
      if (VAGen_SQLCODE == 100)
        AV0PW01.AV0PWIX2 = 51;
      end
    end
  end

   /* --------------------------- av0p322 ------------------------*/
end // end AV0P322

// load ws with key data
Function AV0P323()
   /* --------------------------- av0p323 ------------------------*/
                       /* save hdr01 keys from select set*/
   /* ------------------------------------------------------------*/

   /* Bypass Mailer Reserve owner groups if not specifically entered:*/
  if (AV5REC.XGPCD == "03")
    if (AV5REC.XWHCD == "51" /* US apparel*/
     || AV5REC.XWHCD == "41" /* Canada*/
     || AV5REC.XWHCD == "42") /* Canada*/
  /* change begin*/
  /* OR AV5REC.XWHCD EQ '25';     /* US apparel*/
  /* change end*/
  /* change begins - 01/31/01*/
  /* OR AV5REC.XWHCD EQ '27'      /* US Victory Crestor*/
  /* OR AV5REC.XWHCD EQ '72';     /* 3rd Party*/
  /* change ends   - 01/31/01*/
      if (AV5REC.XOWCD == "MR"
       || AV5REC.XOWCD == "SM")
        if (AV5REC.XOWCD != AV0PM010.XOWCD)
          AV0P340(); /* sn on hdr01 set for footwear*/
          if (VAGen_SQLCODE == 100)
            AV0PW01.AV0PWIX2 = 51;
          end
          return;
        end
      end
    end
  end

   /* Move availability record to working storage:*/
  AV0PW04.XWHCD[AV0PWIX2] = AV5REC.XWHCD;
  AV0PW04.SY1STNBR[AV0PWIX2] = AV5REC.SY1STNBR;
  AV0PW04.SY2CLRID[AV0PWIX2] = AV5REC.SY2CLRID;
  AV0PW04.XDMCD[AV0PWIX2] = AV5REC.XDMCD;
  AV0PW04.XOWCD[AV0PWIX2] = AV5REC.XOWCD;
  AV0PW04.PC2INSEG[AV0PWIX2] = AV5REC.XSDCD;
  AV0PW04.XSACD[AV0PWIX2] = AV5REC.XSACD;
  AV0PW04.XPGCD[AV0PWIX2] = AV5REC.XPGCD;
  AV0PW04.XUMCD[AV0PWIX2] = AV5REC.XUMCD;
  AV0PW04.AV4PRDBD[AV0PWIX2] = AV5REC.AV4PRDBD;
  AV0PW04.AV0PW-EQMT-FL[AV0PWIX2] = AV0PW07.AV0PW-EQMT-FL[AV0PWIX1];
  AV0PW04.XSECD[AV0PWIX2] = " "; /* clear season fields*/
  AV0PW04.XSNYR[AV0PWIX2] = 0;

  AV0PW04.AV0PWNHD[AV0PWIX2] = "N"; /* no hdr for this product*/
  AV0PW01.AV0PWSI2 = AV0PW01.AV0PWIX2; /* save position*/

  AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;

  AV0P340(); /* sn on hdr01 set for footwear*/

  if (VAGen_SQLCODE == 100)
    AV0PW01.AV0PWIX2 = 51;
  end

   /* --------------------------- av0p323 ------------------------*/
end // end AV0P323

// ss/hdr01 for key from map 10
Function AV0P325()
   /* --------------------------- av0p325 ------------------------*/
                     /* do select set on a key from one of*/
                     /* the 10 keys from map 10.*/
   /* --------------------------- av0p325 ------------------------*/

  AV0PM020.XXXERRID = "AV0P325";
  set AV5REC empty;
  set SQLCA empty;

  if (AV0PM010.XGPCD == "03") /* if apparel*/
    if (AV0PM010.XWHCD == "  ") /* if warehouse wildcarded*/
      AV5REC.XWHCD = "**"; /* wildcard it*/
    else
      AV5REC.XWHCD = AV0PW07.XWHCD[AV0PWIX1]; /* move warehouse code*/
    end
  else
    AV5REC.XWHCD = AV0PW07.XWHCD[AV0PWIX1]; /* move warehouse code*/
  end

  AV5REC.XGPCD = AV0PW07.XGPCD[AV0PWIX1];
  AV5REC.SY1STNBR = AV0PW07.SY1STNBR[AV0PWIX1];

  if (AV0PW07.SY2CLRID[AV0PWIX1] != " ")
    AV5REC.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
  else
    AV5REC.SY2CLRID = "***";
  end

  if (AV0PW07.XDMCD[AV0PWIX1] != " ")
    AV5REC.XDMCD = AV0PW07.XDMCD[AV0PWIX1];
  else
    AV5REC.XDMCD = "**";
  end

  AV5REC.XQACD = AV0PW07.XQACD[AV0PWIX1];

  if (AV0PM010.XOWCD == "  " /* if owner group*/
   && AV0PW01.AV0PWFL3 == "N")
    AV5REC.XOWCD = "**"; /* wildcard it*/
  else
    AV5REC.XOWCD = AV0PW07.XOWCD[AV0PWIX1]; /* move owner group cd*/
  end

  if (AV0PW07.PC2INSEG[AV0PWIX1] != " ")
    AV5REC.XSDCD = AV0PW07.PC2INSEG[AV0PWIX1];
  else
    AV5REC.XSDCD = "000";
  end

  if (AV0PW07.XSACD[AV0PWIX1] != " ")
    AV5REC.XSACD = AV0PW07.XSACD[AV0PWIX1];
  else
    AV5REC.XSACD = "000";
  end

  if (AV0PW07.XPGCD[AV0PWIX1] != " ")
    AV5REC.XPGCD = AV0PW07.XPGCD[AV0PWIX1];
  else
    AV5REC.XPGCD = "00";
  end

  if (AV0PW07.XUMCD[AV0PWIX1] != " ")
    AV5REC.XUMCD = AV0PW07.XUMCD[AV0PWIX1];
  else
    AV5REC.XUMCD = "**";
  end

  AV5REC.AV5RECTY = " ";

  AV5REC.AV4PRDBD = 0;

  if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian Sales Office*/
    if (AV0PM010.XGPCD == "03" /* if apparel product*/
     && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
      call "IO2310" ("SB", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
    else
      if (AV0PM010.XGPCD == "02" /* if footwear product*/
       && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
        call "IO2310" ("SA", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
      else
        call "IO2310" ("SS", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* for all other gpcs*/
      end
    end
  else /* USA*/

    if (AV0PM010.XGPCD == "03" /* if apparel product*/
     && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
      call "IO2310" ("S4", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
    else
      if (AV0PM010.XGPCD == "02" /* if footwear product*/
       && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
        call "IO2310" ("S3", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
      else
        call "IO2310" ("SS", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* for all other gpcs*/
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "SELECT ";
      TA1REC.TA1MAP = "AV0P325";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
      TA1REC.TA1TBLKE = AV0PW07.SY1STNBR[AV0PWIX1]; /* table key*/
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1FUNC = "POST";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.clearScreen();
        
        converseLib.clearScreen();
        
        AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 - 1;
        AV0PW01.AV0PWFL2 = "Y";
        converseLib.validationFailed(75);
        return;
      else
        TA1REC.TA1FUNC = "RETN";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.clearScreen();
        
        converseLib.clearScreen();
        
        AV0PW01.AV0PWFL2 = "N";
        AV0PW01.AV0PWFTW = "N";
        AV0PW01.AV0PWAPR = "N";
        converseLib.validationFailed(76); /* fatal error*/
        exit stack;
      end
    end
  end

   /* --------------------------- av0p325 ------------------------*/
end // end AV0P325

// sn/hdr01 for key from map 10
Function AV0P340()
   /* --------------------------- av0p340 ------------------------*/

   /* do select set next on the set obtained from av0p325 (avhdr01)*/

   /* --------------------------- av0p340 ------------------------*/

  AV0PM020.XXXERRID = "AV0P340";
  set SQLCA empty;

  if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canada Sales Office*/
    if (AV0PM010.XGPCD == "03" /* if apparel product*/
     && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
      call "IO2310" ("NB", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
    else
      if (AV0PM010.XGPCD == "02" /* if footwear product*/
       && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
        call "IO2310" ("NA", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
      else
        call "IO2310" ("SN", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* all other gpcs*/
      end
    end
  else /* USA*/
    if (AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] == "Y") /* USA Equipment Product*/
      if (AV0PM010.XWHCD == "  " /* and warehouse wildcarded*/
       && AV0PW01.AV0PWFL3 == "N") /* not from AV0V*/
        call "IO2310" ("ND", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* any whse*/
      else
        call "IO2310" ("SN", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* specific whse*/
      end
    else
      if (AV0PM010.XGPCD == "03" /* if apparel product*/
       && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
        call "IO2310" ("N4", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (AV0PM010.XGPCD == "02" /* if footwear product*/
         && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
          call "IO2310" ("N3", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
        else
          call "IO2310" ("SN", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* all other gpcs*/
        end
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "AV0P340";
      TA1REC.TA1MAP = "AV0PM020";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      AV0PW01.AV0PWFL2 = "N";
      AV0PW01.AV0PWFTW = "N";
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end

   /* --------------------------- av0p340 ------------------------*/
end // end AV0P340

// close ss on hdr01
Function AV0P345()
   /* --------------------------- av0p345 ------------------------*/

   /* do a close set on the set obtained from av0p320 (vavhdr01)*/

   /* --------------------------- av0p345 ------------------------*/

  AV0PM020.XXXERRID = "AV0P345";
  set SQLCA empty;

  if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canada Sales Office*/
    if (AV0PM010.XGPCD == "03" /* if apparel*/
     && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
      call "IO2310" ("CB", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
    else
      if (AV0PM010.XGPCD == "02" /* if footwear product*/
       && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
        call "IO2310" ("CA", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
      else
        call "IO2310" ("CS", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* all other gpcs*/
      end
    end
  else /* USA*/

    if (AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] == "Y") /* USA Equipment Product*/
      if (AV0PM010.XWHCD == "  " /* if warehouse wildcarded*/
       && AV0PW01.AV0PWFL3 == "N") /* not from av0v*/
        call "IO2310" ("CD", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* equipment prods*/
      else
        call "IO2310" ("CS", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* all other gpcs*/
      end
    else
      if (AV0PM010.XGPCD == "03" /* if apparel*/
       && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
        call "IO2310" ("C4", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (AV0PM010.XGPCD == "02" /* if footwear product*/
         && AV0PM010.XWHCD == "  ") /* and warehouse wildcarded*/
          call "IO2310" ("C3", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
        else
          call "IO2310" ("CS", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes}; /* all other gpcs*/
        end
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0P";
    TA1REC.TA1LOCAT = "AV0P345";
    TA1REC.TA1MAP = "AV0PM020";
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.clearScreen();
    
    AV0PW01.AV0PWFL2 = "N";
    AV0PW01.AV0PWFTW = "N";
    converseLib.validationFailed(76); /* fatal error*/
    exit stack;
  end

   /* --------------------------- av0p345 ------------------------*/
end // end AV0P345
// check if hdr for wildcrard whs
Function AV0P349()
   /* --------------------------- av0p349 ------------------------*/

                     /* check if there was a good hdr for a*/
                     /* if whse was wildcarded.*/

   /* --------------------------- av0p349 ------------------------*/


  AV0PW01.AV0PWSI3 = AV0PW01.AV0PWI10;

  if (converseVar.eventKey is pf15) /* paging back thru products*/
    AV0PW01.AV0PWI10 = AV0PW01.AV0PWI10 - 1;
  else
    AV0PW01.AV0PWI10 = AV0PW01.AV0PWI10 + 1;
  end

  if (AV0PW04.AV0PWNHD[AV0PWI10] != "Y")
    AV0PW01.AV0PWI10 = AV0PW01.AV0PWSI3;
    return;
  else
    AV0P307(); /* save map/clear map/rebuild map*/
    converseLib.validationFailed(135); /* no more recs for this prd, hit enter*/
                                   /* or pf16*/
  end

  AV0PM020.PC2INSEG = " ";
  AV0PM020.XPGCD = " ";
  AV0PM020.XUMDESC = " ";
  AV0PM020.AV1CUPRC = 0;
  AV0PM020.AV1PRPRC = 0;
  AV0PM020.AV0PMPRC = 0;
  AV0PM020.AV1CUEDT = 0;
  AV0PM020.AV2CMNT = " ";
  AV0PM020.AV5SMTFL = " ";
  AV0PM020.AV0PMCHG = 0;
  AV0PM030.PC2INSEG = " ";
  AV0PM030.XPGCD = " ";
  AV0PM030.XUMDESC = " ";
  AV0PM030.AV1CUPRC = 0;
  AV0PM030.AV1PRPRC = 0;
  AV0PM030.AV0PMPRC = 0;
  AV0PM030.AV1CUEDT = 0;
  AV0PM030.AV2CMNT = " ";
  AV0PM030.AV5SMTFL = " ";
  AV0PM030.SY2ALNOR = " ";
  AV0PM030.AV0PMCHG = 0;
  set AV0PM020.AV0PMHMI invisible;
  AV0PM020.AV0PMHMF = " ";
  if (AV0PW07.SY2CLRID[AV0PWIX1] == "  ")
    AV0PM020.SY2CLRID = " ";
    AV0PM030.SY2CLRID = " ";
    AV0PM020.SY2CLRDS = " ";
    AV0PM030.SY2CLRDS = " ";
  else
    AV0PM020.SY2CLRID = AV0PW04.SY2CLRID[AV0PWI10];
    AV0P454(); /* get color*/
    AV0PM030.SY2CLRDS = AV0PM020.SY2CLRDS;
  end


   /* get whse abreviation*/

  if (AV0PW04.XWHCD[AV0PWI10] in XWHTBL.XWHCD)
    AV0PM020.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end
  AV0PM030.XWHABRV = AV0PM020.XWHABRV;
  AV0PM030.XWHCD = AV0PW04.XWHCD[AV0PWI10]; /* move warehouse*/


   /* spec*/

  if (AV0PW04.PC2INSEG[AV0PWI10] != " ")
    AV0PM020.PC2INSEG = AV0PW04.PC2INSEG[AV0PWI10];
    AV0PM030.PC2INSEG = AV0PW04.PC2INSEG[AV0PWI10];
  else
    AV0PM020.PC2INSEG = " ";
    AV0PM030.PC2INSEG = " ";
  end

   /* pkg type*/

  if (AV0PW04.XPGCD[AV0PWI10] != " ")
    AV0PM020.XPGCD = AV0PW04.XPGCD[AV0PWI10];
    AV0PM030.XPGCD = AV0PW04.XPGCD[AV0PWI10];
  else
    AV0PM020.XPGCD = " ";
    AV0PM030.XPGCD = " ";
  end

   /* uom*/

  if (AV0PW04.XUMCD[AV0PWI10] != " ")
    AV0PW01.XUMCD = AV0PW04.XUMCD[AV0PWI10];
    if (AV0PW01.XUMCD in XUMTBL.XUMCD)
      AV0PM020.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end
    AV0PM030.XUMDESC = AV0PM020.XUMDESC;
  else
    AV0PM020.XUMDESC = " ";
    AV0PM030.XUMDESC = " ";
  end




   /* --------------------------- av0p349 ------------------------*/
end // end AV0P349

// set keys for su on hdr01
Function AV0P350()
   /* --------------------------- av0p350 ------------------------*/

                     /* set up keys for su on hdr01. keys come*/
                     /* from av0pw04.*/

   /* --------------------------- av0p350 ------------------------*/

  if (converseVar.eventKey is pf15) /* paging back thru products*/
    AV0PW01.AV0PWI10 = AV0PW01.AV0PWI10 - 1;
  else
    AV0PW01.AV0PWI10 = AV0PW01.AV0PWI10 + 1;
  end

  if (AV0PW01.AV0PWI10 == 51 /* at end of av0pw04 (headers)*/
   || AV0PW04.SY1STNBR[AV0PWI10] == " ")
    AV0PW01.AV0PWI10 = AV0PW01.AV0PWI10 - 1;
    converseLib.validationFailed(135); /* no more recs for this prd, hit enter or pf16*/
    return;
  end

  set AV5REC empty;

  AV5REC.XWHCD = AV0PW04.XWHCD[AV0PWI10];
  AV5REC.SY1STNBR = AV0PW04.SY1STNBR[AV0PWI10];
  AV5REC.XGPCD = AV0PW07.XGPCD[AV0PWIX1];
  AV5REC.SY2CLRID = AV0PW04.SY2CLRID[AV0PWI10];
  AV5REC.XDMCD = AV0PW04.XDMCD[AV0PWI10];
  AV5REC.XQACD = AV0PW07.XQACD[AV0PWIX1];
  AV5REC.XOWCD = AV0PW04.XOWCD[AV0PWI10];
  AV5REC.XSDCD = AV0PW04.PC2INSEG[AV0PWI10];
  AV5REC.XSACD = AV0PW04.XSACD[AV0PWI10];
  AV5REC.XPGCD = AV0PW04.XPGCD[AV0PWI10];
  AV5REC.XUMCD = AV0PW04.XUMCD[AV0PWI10];
  if (AV0PW07.XGPCD[AV0PWIX1] != "03")
    AV5REC.AV4PRDBD = 0;
  else
    AV5REC.AV4PRDBD = AV0PW04.AV4PRDBD[AV0PWI10];
  end

  AV0P355(); /* su on hdr01*/


   /* --------------------------- av0p350 ------------------------*/
end // end AV0P350

// su on hdr01/keys from av0pw04
Function AV0P355()
   /* --------------------------- av0p355 ------------------------*/

   /* do select unique on avhdr01 keys from av0pw04*/

   /* --------------------------- av0p355 ------------------------*/

  AV0PM020.XXXERRID = "AV0P355";
  set SQLCA empty;

  call "IO2310" ("S ", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(138); /* no recs for this prd, press enter or*/
                                   /* pf16*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "AV0P355";
      TA1REC.TA1MAP = "AV0PM020";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VAVHDR01"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      converseLib.clearScreen();
      
      AV0PW01.AV0PWFL2 = "N";
      AV0PW01.AV0PWFTW = "N";
      AV0PW01.AV0PWAPR = "N";
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end

   /* --------------------------- av0p355 ------------------------*/
end // end AV0P355

// save hdr01 sizes/cond codes
Function AV0P400()
   /* --------------------------- av0p400 ------------------------*/

                /* save the up to 40 sizes and condition*/
                /* codes from the hdr01 record to working*/
                /* storage.*/

   /* --------------------------- av0p400 ------------------------*/

   /* CLEAR FTWR SAVED AREA*/

  set AV0PW02 empty;


   /* clear av0pm020 of size descriptions,xcdabrv,qty's*/

  AV0PW01.AV0PWIX7 = 1;


  AV0P410(); /* get size descriptions*/

   /* the next while is for moving the up to 40 size descriptions*/
   /* and condition code descriptions to w-s.*/


  AV0PW01.AV0PWIX7 = 1;
  AV0PW01.AV0PWIX2 = 1;

  while (AV0PW01.AV0PWIX7 <= 40)
    if (AV5REC.XCDCD[AV0PWIX7] != " ")
      AV0PW02.SY4IDDSC[AV0PWIX2] = PG3REC.SY4IDDSC[AV0PWIX7];
      AV0PW01.XCDCD = AV5REC.XCDCD[AV0PWIX7];
      if (AV0PW01.XCDCD in XCDTBL.XCDCD)
        AV0PW02.XCDABRV[AV0PWIX2] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0PW01.AV0PWIX7 = AV0PW01.AV0PWIX7 + 1;
  end

  AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 - 1;
  AV0PW01.AV0PWSLM = AV0PW01.AV0PWIX2; /* nbr sizes for this prd*/


   /* --------------------------- av0p400 ------------------------*/
end // end AV0P400

// get size descrip's (PG1050)
Function AV0P410()
   /* --------------------------- av0p410 ------------------------*/

                 /* get size descriptions using PG1050*/

   /* --------------------------- av0p410 ------------------------*/


  set PG3REC empty;


  PG3REC.XGPCD = AV5REC.XGPCD;
  PG3REC.SY1STNBR = AV5REC.SY1STNBR;
  PG3REC.SY2CLRID = AV5REC.SY2CLRID;
  PG3REC.XDMCD = AV5REC.XDMCD;
  PG3REC.XQACD = "**";
  PG3REC.PG3RETCD = 0;


  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "PRODUCT";
    TA1REC.TA1LOCAT[3] = "AV0P410";
    TA1REC.TA1LOCAT[4] = "PG1050";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end



   /* --------------------------- av0p410 ------------------------*/
end // end AV0P410

// set up the rest of ftwr hdr
Function AV0P450()
   /* --------------------------- av0p450 ------------------------*/

                     /* set up the rest of the footwear header*/
                     /* for map 20.*/

   /* --------------------------- av0p450 ------------------------*/

   /* get whse abreviation*/

  if (AV5REC.XWHCD in XWHTBL.XWHCD)
    AV0PM020.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end


   /* color abrv*/

  AV0PM020.SY2CLRID = AV5REC.SY2CLRID;

  AV0P454(); /* get color*/

   /* inventory segement code*/

  AV0PM020.PC2INSEG = AV5REC.XSDCD;

   /* pkg type*/

  AV0PM020.XPGCD = AV5REC.XPGCD;

   /* uom*/

  AV0PW01.XUMCD = AV5REC.XUMCD;
  if (AV0PW01.XUMCD in XUMTBL.XUMCD)
    AV0PM020.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

   /* current wholesale price*/

  AV0PM020.AV1CUPRC = AV5REC.AV1CUPRC;

   /* prior price*/

  AV0PM020.AV1PRPRC = AV5REC.AV1PRPRC;

  if (COMMAREA.CAILVL[1] == "Y")
    AV0PM020.AV0PMPRM = "         COST:";
    AV0PM020.AV0PMPRC = AV5REC.AV1CUCST;
  else
    AV0PM020.AV0PMPRM = "SUG RET PRICE:";
    AV0PM020.AV0PMPRC = AV5REC.AV5SGPRC;
  end

   /* date*/

  AV0PM020.AV1CUEDT = AV5REC.AV1CUEDT;

   /* comment*/

  AV0PM020.AV2CMNT = AV5REC.AV2CMNT;

   /* smart resrv flag*/

  AV0PM020.AV5SMTFL = AV5REC.AV5SMTFL;


   /* get carry over flag*/


   /* get % change*/

  AV0PW01.AV0PWREM = AV5REC.AV1CUPRC - AV5REC.AV1PRPRC;

  if (AV0PW01.AV0PWREM > 0)
    AV0PW01.AV0PWPCH = AV0PW01.AV0PWREM * 100 / AV5REC.AV1CUPRC;
    AV0PM020.AV0PMCHG = AV0PW01.AV0PWPCH;
  else
    if (AV0PW01.AV0PWREM < 0)
      AV0PW01.AV0PWPCH = AV0PW01.AV0PWREM * 100 / AV5REC.AV1PRPRC;
      AV0PM020.AV0PMCHG = AV0PW01.AV0PWPCH;
    else
      AV0PM020.AV0PMCHG = 0;
    end
  end



   /* --------------------------- av0p450 ------------------------*/
end // end AV0P450
// Get DPROD.VCOLOR01 4 AV0PM020
Function AV0P453()
   /* -------------------- av0p453 -------------------------------*/

    /* get SY2ALNOR - Allow New Order Flag*/

   /* ------------------------------------------------------------*/

  AV0PM020.XXXERRID = "AV0P453";
  set SY2REC empty;
  set SQLCA empty;

  SY2REC.XGPCD = AV0PW07.XGPCD;
  SY2REC.SY1STNBR = AV0PW07.SY1STNBR[AV0PWIX1];
  SY2REC.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
  SY2REC.XDMCD = AV0PW07.XDMCD[AV0PWIX1];

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    set AV0PM020.SY2CLRID normal;
     /* move in the color descriptions*/
    AV0PM020.SY2CLRDS = SY2REC.SY2CLRDS;
    AV0PM020.SY2ALNOR = SY2REC.SY2ALNOR;
    AV0PM020.AV0PMHMF = SY2REC.OPZHMIND;
                                   /* move hot model flag to map*/
    if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian sales office*/
      AV0P-4531(); /* get Canadian overrides*/
    end
    if (AV0PM020.AV0PMHMF == "Y") /* if product is a hot model*/
      set AV0PM020.AV0PMHMI initialAttributes; /* set map hot model field*/
                                   /* bright,blinking*/
    else /* if product is not hot model*/
      set AV0PM020.AV0PMHMI invisible; /* set map hot model field dark*/
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100
     || SQLCA.VAGen_SQLCODE == -911)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "AV0P453";
      TA1REC.TA1MAP = "AV0PM020";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end

    /* -------------  end of process av0p453  ------------------*/
end // end AV0P453

// Get DPROD.VCOLOR01 4 AV0PM020
Function AV0P454()
   /* -------------------- av0p454 -------------------------------*/

              /* validate color code/abrv*/

   /* ------------------------------------------------------------*/

  AV0PM020.XXXERRID = "AV0P454";
  set SY2REC empty;
  set SQLCA empty;

  SY2REC.XGPCD = AV5REC.XGPCD;
  SY2REC.SY1STNBR = AV5REC.SY1STNBR;
  SY2REC.SY2CLRID = AV5REC.SY2CLRID;
  SY2REC.XDMCD = AV5REC.XDMCD;

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    set AV0PM020.SY2CLRID normal;
     /* move in the color descriptions*/
    AV0PM020.SY2CLRDS = SY2REC.SY2CLRDS;
    AV0PM020.SY2ALNOR = SY2REC.SY2ALNOR;
    AV0PM020.AV0PMHMF = SY2REC.OPZHMIND;
                                   /* move hot model flag to map*/
    if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian sales office*/
      AV0P-4541(); /* get Canadian overrides*/
    end
    if (AV0PM020.AV0PMHMF == "Y") /* if product is hot model*/
      set AV0PM020.AV0PMHMI initialAttributes; /* set map hot model field*/
                                   /* bright,blinking*/
    else /* if product is not hot model*/
      set AV0PM020.AV0PMHMI invisible; /* set map hot model field dark*/
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100
     || SQLCA.VAGen_SQLCODE == -911)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "AV0P454";
      TA1REC.TA1MAP = "AV0PM020";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end

  AV0PM020.XDMCD = SY2REC.XDMCD;
  if (SY2REC.XDMCD in XDMTBL.XDMCD)
    AV0PM020.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
  end /* get dim desc*/

    /* -------------  end of process av0p454  ------------------*/
end // end AV0P454

// Get DPROD.VCOLOR02 4 AV0PM030
Function AV0P455()
   /* -------------------- av0p455 -------------------------------*/

              /* validate color code/abrv*/

   /* ------------------------------------------------------------*/

  AV0PM020.XXXERRID = "AV0P455";
  set SYCREC empty;
  set SQLCA empty;

  SYCREC.XGPCD = AV0PW07.XGPCD[AV0PWIX1];
  SYCREC.SY1STNBR = AV0PW07.SY1STNBR[AV0PWIX1];
  SYCREC.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];

  if (AV0PW07.XDMCD[AV0PWIX1] == " ")
    SYCREC.XDMCD = "  ";
  else
    SYCREC.XDMCD = AV0PW07.XDMCD[AV0PWIX1];
  end

  AV0P064(); /* open color cursor*/

  if (SQLCA.VAGen_SQLCODE == +0)
    AV0P065(); /* fetch color row*/
  else
    AV0P066(); /* close color cursor*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    set AV0PM030.SY2CLRID normal;
     /* move in the color descriptions*/
    AV0PM030.SY2CLRDS = SYCREC.SY2CLRDS;
    AV0PM030.SY2ALNOR = SYCREC.SY2ALNOR;
    if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian sales office*/
      AV0P-4551(); /* get sy2000 Canadian overrides*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(07); /* color record not found*/
      set AV0PM010.SY2CLRID[AV0PWIX1] cursor, modified, bold;
      set AV0PM010.XDMCD[AV0PWIX1] modified, bold;
    end
  end

  AV0P066(); /* close color cursor*/

    /* -------------  end of process av0p455  ------------------*/
end // end AV0P455
// get at once and period records
Function AV0P510()
   /* --------------------------- av0p510 ------------------------*/

                     /* get the at once and period records for*/
                     /* the product.*/

   /* --------------------------- av0p510 ------------------------*/


  AV0PM020.XXXERRID = "AV0P510";
  set AV6REC empty;
  set SQLCA empty;


  AV6REC.XWHCD = AV5REC.XWHCD;
  AV6REC.XGPCD = AV5REC.XGPCD;
  AV6REC.SY1STNBR = AV5REC.SY1STNBR;
  AV6REC.SY2CLRID = AV5REC.SY2CLRID;
  AV6REC.XDMCD = AV5REC.XDMCD;
  AV6REC.XQACD = AV5REC.XQACD;
  AV6REC.XOWCD = AV5REC.XOWCD;
  AV6REC.XSDCD = AV5REC.XSDCD;
  AV6REC.XSACD = AV5REC.XSACD;
  AV6REC.XPGCD = AV5REC.XPGCD;
  AV6REC.XUMCD = AV5REC.XUMCD;
  AV6REC.AV6RECTY = "$";
  AV0PW03.AV0PWOPT = "SS";

  AV0PW03.AV0PWLOD = 0;
  AV0PW03.AV0PWHID = 999999999;

  call "IO2320" (AV0PW03, SQLCA, AV6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "SELECT ";
      TA1REC.TA1MAP = "AV0P510";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VAVQTY01"; /* table view*/
      TA1REC.TA1TBLKE = AV0PM020.SY1STNBR; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      converseLib.clearScreen();
      
      converseLib.clearScreen();
      
      AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 - 1;
      AV0PW01.AV0PWFL2 = "Y";
      converseLib.validationFailed(75);
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "SELECT ";
      TA1REC.TA1MAP = "AV0PM020";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VAVQTY01"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      converseLib.clearScreen();
      
      AV0PW01.AV0PWFL2 = "N";
      AV0PW01.AV0PWFTW = "N";
      AV0PW01.AV0PWAPR = "N";
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end



   /* --------------------------- av0p510 ------------------------*/
end // end AV0P510

// get next on qty01 tbl
Function AV0P520()
   /* --------------------------- av0p520 ------------------------*/

                         /* get next on qty01.*/

   /* --------------------------- av0p520 ------------------------*/

  AV0PM020.XXXERRID = "AV0P520";
  set AV6REC empty;
  set SQLCA empty;
  AV0PW03.AV0PWOPT = "SN";

  call "IO2320" (AV0PW03, SQLCA, AV6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "AV0P520";
      TA1REC.TA1MAP = "AV0PM020";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VAVQTY01"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      converseLib.clearScreen();
      
      AV0PW01.AV0PWFL2 = "N";
      AV0PW01.AV0PWFTW = "N";
      AV0PW01.AV0PWAPR = "N";
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end

   /* --------------------------- av0p520 ------------------------*/
end // end AV0P520

// close set on qty01
Function AV0P525()
   /* --------------------------- av0p525 ------------------------*/

                         /* close set qty01.*/

   /* --------------------------- av0p525 ------------------------*/

  AV0PM020.XXXERRID = "AV0P525";
  set AV6REC empty;
  set SQLCA empty;
  AV0PW03.AV0PWOPT = "CS";

  call "IO2320" (AV0PW03, SQLCA, AV6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0P";
    TA1REC.TA1LOCAT = "AV0P525";
    TA1REC.TA1MAP = "AV0PM020";
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "VAVQTY01"; /* table view*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.clearScreen();
    
    AV0PW01.AV0PWFL2 = "N";
    AV0PW01.AV0PWFTW = "N";
    converseLib.validationFailed(76); /* fatal error*/
    exit stack;
  end



   /* --------------------------- av0p525 ------------------------*/
end // end AV0P525

// save qty01 hdrs/qty's
Function AV0P530()
   /* --------------------------- av0p530 ------------------------*/

                     /* save the up to 40 qty's and periods*/
                     /* from the qty01 record to working*/
                     /* storage.*/

   /* --------------------------- av0p530 ------------------------*/


   /* clear total qty's and period qty's and period months*/
   /* from av0pw02*/


  AV0PW02.AV0PWATO = 0;
  AV0PW02.AV0PWBTO = 0;
  AV0PW02.AV0PWCTO = 0;
  AV0PW02.AV0PWDTO = 0;
  AV0PW02.AV0PWETO = 0;
  AV0PW02.AV0PWFTO = 0;
  AV0PW02.AV0PWGTO = 0;

  AV0PW02.AV0PWADG = " ";
  AV0PW02.AV0PWBDG = " ";
  AV0PW02.AV0PWCDG = " ";
  AV0PW02.AV0PWDDG = " ";
  AV0PW02.AV0PWEDG = " ";
  AV0PW02.AV0PWFDG = " ";
  AV0PW02.AV0PWGDG = " ";



  AV0PW01.AV0PWIX2 = 1;




  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWAQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWBQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWCQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWDQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWEQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWFQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWGQY[AV0PWIX2] = 0;
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end


   /* MOVE IN PERIOD AND AT ONCE QTY'S TO AV0PW02*/


  if (AV6REC.AV6RECTY == "N")
    AV0PW02.AV0PWADG = "AT ONCE";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWAQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWATO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWATO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end

  if (VAGen_SQLCODE == 100)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWBMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWBDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWBSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWBQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWBTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWBTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWADG == " ")
    AV0P540(); /* move col b to col a*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWCMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWCDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWCSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWCQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWCTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWCTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWBDG == " ")
    AV0P541(); /* move col c to col b*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end

  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWDMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWDDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWDSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWDQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWDTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWDTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWCDG == " ")
    AV0P542(); /* move col d to col c*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWEMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWEDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWESL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWEQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWETO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWETO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWDDG == " ")
    AV0P543(); /* move col e to col d*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWFMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWFDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWFSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWFQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWFTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWFTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWEDG == " ")
    AV0P544(); /* move col f to col e*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end

  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWGMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWGDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWGSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWGQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWGTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWGTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
  end

  AV0P525(); /* close qty01 set*/

  if (AV0PW02.AV0PWFDG == " ")
    AV0P545(); /* move col g to col f*/
  end



   /* --------------------------- av0p530 ------------------------*/
end // end AV0P530

// move w-s column b to a
Function AV0P540()
   /* --------------------------- av0p540 ------------------------*/

                     /* move w-s column b to a.*/

   /* --------------------------- av0p540 ------------------------*/

   /* move column b to column a*/


  AV0PW02.AV0PWAMM = AV0PW02.AV0PWBMM;
  AV0PW02.AV0PWADY = AV0PW02.AV0PWBDY;
  AV0PW02.AV0PWASL = "/";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWATO = AV0PW02.AV0PWBTO;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWAQY[AV0PWIX2] = AV0PW02.AV0PWBQY[AV0PWIX2];
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end


   /* clear column b*/


  AV0PW02.AV0PWBDG = " ";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWBTO = 0;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWBQY[AV0PWIX2] = 0;
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end



   /* --------------------------- av0p540 ------------------------*/
end // end AV0P540

// move w-s column c to b
Function AV0P541()
   /* --------------------------- av0p541 ------------------------*/

                     /* move w-s column c to column b.*/

   /* --------------------------- av0p541 ------------------------*/

   /* move column c to column b*/


  AV0PW02.AV0PWBMM = AV0PW02.AV0PWCMM;
  AV0PW02.AV0PWBDY = AV0PW02.AV0PWCDY;
  AV0PW02.AV0PWBSL = "/";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWBTO = AV0PW02.AV0PWCTO;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWBQY[AV0PWIX2] = AV0PW02.AV0PWCQY[AV0PWIX2];
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end


   /* clear out w-s column c.*/


  AV0PW02.AV0PWCDG = " ";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWCTO = 0;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWCQY[AV0PWIX2] = 0;
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end




   /* --------------------------- av0p541 ------------------------*/
end // end AV0P541

// move w-s column d to c
Function AV0P542()
   /* --------------------------- av0p542 ------------------------*/

                     /* move w-s column d to column c.*/

   /* --------------------------- av0p542 ------------------------*/

   /* move column d to column c*/


  AV0PW02.AV0PWCMM = AV0PW02.AV0PWDMM;
  AV0PW02.AV0PWCDY = AV0PW02.AV0PWDDY;
  AV0PW02.AV0PWCSL = "/";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWCTO = AV0PW02.AV0PWDTO;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWCQY[AV0PWIX2] = AV0PW02.AV0PWDQY[AV0PWIX2];
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end


   /* clear out w-s column d.*/


  AV0PW02.AV0PWDDG = " ";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWDTO = 0;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWDQY[AV0PWIX2] = 0;
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end




   /* --------------------------- av0p542 ------------------------*/
end // end AV0P542

// move w-s column e to d
Function AV0P543()
   /* --------------------------- av0p543 ------------------------*/

                     /* move w-s column e to column d.*/

   /* --------------------------- av0p543 ------------------------*/

   /* move column e to column d*/


  AV0PW02.AV0PWDMM = AV0PW02.AV0PWEMM;
  AV0PW02.AV0PWDDY = AV0PW02.AV0PWEDY;
  AV0PW02.AV0PWDSL = "/";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWDTO = AV0PW02.AV0PWETO;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWDQY[AV0PWIX2] = AV0PW02.AV0PWEQY[AV0PWIX2];
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end


   /* clear out w-s column e.*/


  AV0PW02.AV0PWEDG = " ";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWETO = 0;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWEQY[AV0PWIX2] = 0;
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end




   /* --------------------------- av0p543 ------------------------*/
end // end AV0P543

// move w-s column f to e
Function AV0P544()
   /* --------------------------- av0p544 ------------------------*/

                     /* move w-s column f to column e.*/

   /* --------------------------- av0p544 ------------------------*/

   /* move column f to column e*/


  AV0PW02.AV0PWEMM = AV0PW02.AV0PWFMM;
  AV0PW02.AV0PWEDY = AV0PW02.AV0PWFDY;
  AV0PW02.AV0PWESL = "/";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWETO = AV0PW02.AV0PWFTO;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWEQY[AV0PWIX2] = AV0PW02.AV0PWFQY[AV0PWIX2];
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end


   /* clear out w-s column f.*/


  AV0PW02.AV0PWFDG = " ";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWFTO = 0;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWFQY[AV0PWIX2] = 0;
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end




   /* --------------------------- av0p544 ------------------------*/
end // end AV0P544

// move w-s column g to f
Function AV0P545()
   /* --------------------------- av0p545 ------------------------*/

                     /* move w-s column g to column f.*/

   /* --------------------------- av0p545 ------------------------*/

   /* move column g to column f*/


  AV0PW02.AV0PWFMM = AV0PW02.AV0PWGMM;
  AV0PW02.AV0PWFDY = AV0PW02.AV0PWGDY;
  AV0PW02.AV0PWFSL = "/";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWFTO = AV0PW02.AV0PWGTO;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWFQY[AV0PWIX2] = AV0PW02.AV0PWGQY[AV0PWIX2];
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end


   /* clear out w-s column g.*/


  AV0PW02.AV0PWGDG = " ";
  AV0PW01.AV0PWIX2 = 1;
  AV0PW02.AV0PWGTO = 0;
  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWGQY[AV0PWIX2] = 0;
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end




   /* --------------------------- av0p545 ------------------------*/
end // end AV0P545

// set up phased ftwr map 20
Function AV0P550()
   /* --------------------------- av0p550 ------------------------*/

                     /* set up the phased footwear map 20.*/

   /* --------------------------- av0p550 ------------------------*/



  if (converseVar.eventKey is pf8)
    if (AV0PW01.AV0PWIX3 > AV0PW01.AV0PWSLM /* ix3 gt nbr sizes for prd?*/
     || AV0PW01.AV0PWSLM == 0)              /* or nbr of sizes equal 0*/
      converseLib.validationFailed(137); /* no more sizes to page to*/
      return;
    end
  else
    if (converseVar.eventKey is pf7)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWSIX - 11;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX3;
      if (AV0PW01.AV0PWIX3 < 0)
        AV0PW01.AV0PWIX3 = 1;
        AV0PW01.AV0PWIX8 = 1;
        return;
      end
    else
      AV0PW01.AV0PWIX3 = 1;
      AV0PW01.AV0PWIX8 = 1;
    end
  end


  AV0P307();


  AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
  AV0PW01.AV0PWIX5 = 1;

   /* move size descriptions and condition code abrv's to map*/


  while (AV0PWIX5 <= 11)
    if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM) /* ix3 gt size limit for prd?*/
      AV0PM020.SY4IDDSC[AV0PWIX5] = AV0PW02.SY4IDDSC[AV0PWIX3];
      AV0PM020.XCDABRV[AV0PWIX5] = AV0PW02.XCDABRV[AV0PWIX3];
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
    else
      AV0PW01.AV0PWIX5 = 12;
    end
  end
   /* if no at once or period records existed then skip*/
   /* the rest of this.*/

  if (converseVar.validationMsgNum == 136 /* no at once or period records*/
   || converseVar.validationMsgNum == 140) /* no more prds to display*/
    if (converseVar.eventKey is pf7)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 11;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end



   /* move in the at once qty's (if any) and the period qty's to*/
   /* the map.*/


  if (AV0PW02.AV0PWADG != " ")
    AV0PW01.AV0PWIX5 = 1;
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PM020.AV0PMADG = AV0PW02.AV0PWADG;
    while (AV0PWIX5 <= 11)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        AV0PM020.AV0PMAQY[AV0PWIX5] = AV0PW02.AV0PWAQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
        AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
      else
        AV0PW01.AV0PWIX5 = 12;
      end
    end
  else
    AV0P552(); /* move in totals if its time*/
    if (converseVar.eventKey is pf7)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 11;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWBDG != " ")
    AV0PW01.AV0PWIX5 = 1;
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PM020.AV0PMBDG = AV0PW02.AV0PWBDG;
    while (AV0PWIX5 <= 11)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        AV0PM020.AV0PMBQY[AV0PWIX5] = AV0PW02.AV0PWBQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
        AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
      else
        AV0PW01.AV0PWIX5 = 12;
      end
    end
  else
    AV0P552(); /* move in totals if its time*/
    if (converseVar.eventKey is pf7)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 11;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end



  if (AV0PW02.AV0PWCDG != " ")
    AV0PW01.AV0PWIX5 = 1;
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PM020.AV0PMCDG = AV0PW02.AV0PWCDG;
    while (AV0PWIX5 <= 11)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        AV0PM020.AV0PMCQY[AV0PWIX5] = AV0PW02.AV0PWCQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
        AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
      else
        AV0PW01.AV0PWIX5 = 12;
      end
    end
  else
    AV0P552(); /* move in totals if its time*/
    if (converseVar.eventKey is pf7)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 11;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWDDG != " ")
    AV0PW01.AV0PWIX5 = 1;
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PM020.AV0PMDDG = AV0PW02.AV0PWDDG;
    while (AV0PWIX5 <= 11)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        AV0PM020.AV0PMDQY[AV0PWIX5] = AV0PW02.AV0PWDQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
        AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
      else
        AV0PW01.AV0PWIX5 = 12;
      end
    end
  else
    AV0P552(); /* move in totals if its time*/
    if (converseVar.eventKey is pf7)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 11;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWEDG != " ")
    AV0PW01.AV0PWIX5 = 1;
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PM020.AV0PMEDG = AV0PW02.AV0PWEDG;
    while (AV0PWIX5 <= 11)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        AV0PM020.AV0PMEQY[AV0PWIX5] = AV0PW02.AV0PWEQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
        AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
      else
        AV0PW01.AV0PWIX5 = 12;
      end
    end
  else
    AV0P552(); /* move in totals if its time*/
    if (converseVar.eventKey is pf7)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 11;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWFDG != " ")
    AV0PW01.AV0PWIX5 = 1;
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PM020.AV0PMFDG = AV0PW02.AV0PWFDG;
    while (AV0PWIX5 <= 11)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        AV0PM020.AV0PMFQY[AV0PWIX5] = AV0PW02.AV0PWFQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
        AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
      else
        AV0PW01.AV0PWIX5 = 12;
      end
    end
  else
    AV0P552(); /* move in totals if its time*/
    if (converseVar.eventKey is pf7)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 11;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWGDG != 0)
    AV0PW01.AV0PWIX5 = 1;
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PM020.AV0PMGDG = AV0PW02.AV0PWGDG;
    while (AV0PWIX5 <= 11)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        AV0PM020.AV0PMGQY[AV0PWIX5] = AV0PW02.AV0PWGQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
        AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
      else
        AV0PW01.AV0PWIX5 = 12;
      end
    end
  else
    AV0P552(); /* move in totals if its time*/
    if (converseVar.eventKey is pf7)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 11;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end

  if (converseVar.eventKey is pf7)
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 11;
  else
    AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
  end


   /* --------------------------- av0p550 ------------------------*/
end // end AV0P550

// move in totals if its time
Function AV0P552()
   /* --------------------------- av0p552 ------------------------*/

                     /* time to display totals?*/

   /* --------------------------- av0p552 ------------------------*/



   /* move in the totals for each period if there are no more*/
   /* sizes to display.*/


  if (AV0PW01.AV0PWIX3 > AV0PW01.AV0PWSLM)
    if (AV0PW02.AV0PWADG != " ")
      AV0PM020.AV0PMATO = AV0PW02.AV0PWATO;
    end
    if (AV0PW02.AV0PWBDG != " ")
      AV0PM020.AV0PMBTO = AV0PW02.AV0PWBTO;
    end
    if (AV0PW02.AV0PWCDG != " ")
      AV0PM020.AV0PMCTO = AV0PW02.AV0PWCTO;
    end
    if (AV0PW02.AV0PWDDG != " ")
      AV0PM020.AV0PMDTO = AV0PW02.AV0PWDTO;
    end
    if (AV0PW02.AV0PWEDG != " ")
      AV0PM020.AV0PMETO = AV0PW02.AV0PWETO;
    end
    if (AV0PW02.AV0PWFDG != " ")
      AV0PM020.AV0PMFTO = AV0PW02.AV0PWFTO;
    end
    if (AV0PW02.AV0PWGDG != " ")
      AV0PM020.AV0PMGTO = AV0PW02.AV0PWGTO;
    end
  end




   /* --------------------------- av0p552 ------------------------*/
end // end AV0P552

// converse av0pm020
Function AV0P600()

  AV0PM020.XXXERRID = "AV0P600";

  converse AV0PM020 ;
end // end AV0P600
// check pf key xfers (map 20)
Function AV0P610()
   /* --------------------------- av0p610 ------------------------*/

                 /* check on pf key transfers for map 20*/
                              /* (footwear)*/

   /* --------------------------- av0p610 ------------------------*/

  if (AV0PM020.CAITEM != " "
   && AV0PM020.CATOAP == " ")
    converseLib.validationFailed(115); /* enter to application*/
    set AV0PM020.CATOAP cursor, modified, bold;
    exit stack;
  end


  if (AV0PM020.CATOAP is modified
   && AV0PM020.CATOAP != " ")
    if (AV0PM020.CATOAP == "OP0L")
      converseLib.validationFailed(282); /* fastpath to op0l not allowed- use pf6*/
                                   /* key*/
      AV0PM020.CATOAP = " ";
      return;
    end
    if (AV0PM020.CATOAP == "AV0V")
      AV0P615(); /* move fields and xfer to av0v*/
    end

     /* if request xfer to substitutions applications,*/
     /* load key fields to xfer rec*/
    if (AV0PM020.CATOAP == "AV0J") /* subs table maintenance*/
      AV0P625(); /* move key fields for xfer*/
    end
    if (AV0PM020.CATOAP == "AV0K") /* subs criteria search*/
      set AVWREC empty; /* dont send key*/
      COMMAREA.CAUSERA = " ";
    end
    COMMAREA.CATOAP = AV0PM020.CATOAP;
    COMMAREA.CAITEM = AV0PM020.CAITEM;
    XSEXIT();
     /* if xfer not successful*/
    AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* move message to map*/
    COMMAREA.CAMSG = " ";
    exit stack;
  end

  set AV0PM020.CATOAP normal;
  set AV0PM020.CAITEM normal;


  if (converseVar.eventKey is pf6) /* if xfer to lost demand requested*/
    if (AV0PM010.XQACD == "01" /* if product is first quality*/
     && AV0PM010.XLCCD == "10") /* and active lifecycle*/
      AV0P620(); /* move fields and xfer to op0l*/
       /* if xfer fails, display error message*/
      AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      exit stack;
    else /* if product is not valid for xfer*/
      converseLib.validationFailed(280); /* product must be quality 01 and*/
                                   /* lifecycle 10*/
      return; /* exit to display error message*/
    end
  end


   /* if xfer to substitutions criteria select*/
   /* load key fields to xfer rec- (since there is no gpc on this*/
   /* map the gpc from av0pm010 is used)*/

  if (converseVar.eventKey is pf14)
    AV0P625();
    COMMAREA.CATOAP = "AV0L";
    XSEXIT(); /* transfer*/
     /* if xfer fails, display error message*/
    AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    exit stack;
  end


  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
  end


  if (converseVar.eventKey is pf1)
    XSPF1(); /* to help*/
    AV0PM020.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf3)
      AV0PW01.AV0PWFTW = "N"; /* ftwr until flag*/
      return;
    else
      if (converseVar.eventKey is pf4)
        XSPF4(); /* to goal menu*/
        AV0PM020.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      else
        if (converseVar.eventKey is pf7)
          return;
          /* next sentence , skip back to previous sizes*/
        else
          if (converseVar.eventKey is pf8)
            return;
            /* next sentence , skip to next page of sizes*/
          else
            if (converseVar.eventKey is pf15)
              return;
              /* next sentence , skip to last product selected*/
            else
              if (converseVar.eventKey is pf16)
                return;
                /* next sentence , skip to next product selected*/
              else
                if (converseVar.eventKey is pf17)
                  return;
                  /* next sentence , skip back to next product selected*/
                else
                  if (converseVar.eventKey is pa2)
                    AV0PW01.AV0PWFTW = "N";
                                   /* we are going back to av0p010*/
                    return;
                    /* next sentence , skip to next product selected*/
                  else
                    if (converseVar.eventKey is enter)
                      return;
                    else
                      converseLib.validationFailed(15); /* invalid pf key*/
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end




   /* --------------------------- av0p610 ------------------------*/
end // end AV0P610

// move key fields & xfer to av0v
Function AV0P615()
   /* ----------------------- AV0P615 ---------------------------*/

                 /* move key fields and xfer to av0v*/

   /* ----------------------- AV0P615 ---------------------------*/

  AV0PW01.XGPCD = AV0PW07.XGPCD[AV0PWIX1];
  AV0PW01.SY1STNBR = AV0PW07.SY1STNBR[AV0PWIX1];
  AV0PW01.XWHCD = AV0PW07.XWHCD[AV0PWIX1];
  set AV0PW07 empty;
  AV0PW07.XGPCD[1] = AV0PW01.XGPCD;
  AV0PW07.SY1STNBR[1] = AV0PW01.SY1STNBR;
  AV0PW07.XWHCD[1] = AV0PW01.XWHCD;

  COMMAREA.CAUSERA = AV0PW07.AV0PWGR7;

  COMMAREA.CATOAP = "AV0V";
  COMMAREA.CAITEM = AV0PM020.CAITEM;
  XSEXIT();

   /* ------------------------ av0p615 ---------------------------*/
end // end AV0P615

// move fields and xfer to op0l
Function AV0P620()
   /* --------------------------- av0p620 ------------------------*/

           /* move fields for xfer to lost demand application*/
                              /* (footwear)*/

   /* --------------------------- av0p620 ------------------------*/

  OSFREC.OSFGROUP = " "; /* initialize orders record*/
  OSFREC.XGPCD = COMMAREA.XGPCD;
  OSFREC.SY1STNBR = AV0PM020.SY1STNBR;
  OSFREC.SY2CLRID = AV0PM020.SY2CLRID;
  OSFREC.XDMCD = AV0PM020.XDMCD;
  COMMAREA.CAUSERA = OSFREC.OSFGROUP;

  COMMAREA.CATOAP = "OP0L"; /* move program name to xfer rec*/
  COMMAREA.CAITEM = AV0PM020.CAITEM;

  XSEXIT(); /* program exit module*/

   /* --------------------------- av0p620 ------------------------*/
end // end AV0P620

// move fields for xfer to subs
Function AV0P625()
   /* --------------------------- av0p625 ------------------------*/

      /* move key fields to avwrec and xfer to substitutions*/
                              /* (footwear)*/

   /* --------------------------- av0p625 ------------------------*/

   /* since gpc is not carried on this map, the gpc from av0pm010*/
   /* is used*/

  set AVWREC empty; /* clear xfer format record*/
  AVWREC.XGPCD = AV0PM010.XGPCD; /* gpc code from av0pm010*/
  AVWREC.SY1STNBR = AV0PM020.SY1STNBR; /* style number*/
  AVWREC.SY2CLRID[1] = AV0PM020.SY2CLRID; /* color id*/
  AVWREC.XDMCD = AV0PM020.XDMCD; /* dimension code*/

   /* warehouse on map1 is used;  If blank, will be wildcarded*/
   /* in av0l.*/
  AVWREC.XWHCD[1] = AV0PM010.XWHCD;

  AVWREC.AVWNWPRD = "Y"; /* set new product flag to yes*/

  COMMAREA.CAUSERA = AVWREC.CAUSERA;

   /* --------------------------- av0p625 ------------------------*/
end // end AV0P625

// phased apparel process
Function AV0P700()
   /* --------------------------- av0p700 ------------------------*/

                       /* phased apparel process*/

   /* --------------------------- av0p700 ------------------------*/

  if (converseVar.validationMsgNum == 142 /* can't skip to previous selected prd*/
   || converseVar.validationMsgNum == 137 /* no more sizes for this product*/
   || converseVar.validationMsgNum == 280 /* product must be quality 01 and*/
   /* lifecycle 10*/
   || converseVar.validationMsgNum == 282) /* may not fastpath to op0l*/
     /* next sentence*/
  else
    if (converseVar.eventKey is pf16 /* skip to next prd selected*/
     || converseVar.eventKey is pf17 /* skip to previous selected prd*/
     || AV0PW01.AV0PWFL2 == "Y")     /* first time in this map*/
      if (converseVar.eventKey is pf15) /* page back thru products*/
        AV0P707(); /* save map hdr/clear map/rebuild map*/
                                   /* hdr*/
        AV0P710(); /* set up partial aprl header*/
      else
        if (converseVar.eventKey is pf17) /* back to last selected product*/
           /* next sentence*/
        else
          AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 + 1;
          AV0P705(); /* position ix1 on selected prd*/
        end
        if (converseVar.validationMsgNum == 140) /* no more prds to page frwd to*/
          AV0PW01.AV0PWFL2 = "N";
        else
          AV0P707(); /* save map hdr/clear map/rebuild map*/
                                   /* hdr*/
          AV0P710(); /* set up partial aprl header*/
        end
      end

      if (converseVar.validationMsgNum != 0) /* no more prds to page frwd to or db*/
                                   /* contention*/
        if (converseVar.eventKey is pf17)
          AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 + 1;
                                   /* reset to last prd displayed*/
          AV0PW01.AV0PWFL2 = "Y";
        else
          AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX1 - 1;
                                   /* reset to last prd displayed*/
          AV0PW01.AV0PWFL2 = "Y";
        end
      else
        if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian sales office*/
          AV0P-3201();
        else
          if (AV0PW07.AV0PW-EQMT-FL[AV0PWIX1] == "Y") /* Equipment product*/
            AV0P-3202(); /* ss on hdr01 with key from map 10*/
          else
            AV0P320(); /* ss on hdr01 with key from map 10*/
          end /* and save set in av0pw04*/
        end
      end
    end
  end

   /* if this is the first time in the phased aprl screen or the*/
   /* user pressed enter (get next variation of the product), then:*/

  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16
     || converseVar.eventKey is pf17
     || AV0PW01.AV0PWFL2 == "Y") /* first time in aprl screen*/

      AV0PW01.AV0PWFL2 = "N";

      AV0P350(); /* su on hdr01 set from av0pw04*/

      if (converseVar.validationMsgNum == 0 /* no problems*/
       || converseVar.validationMsgNum == 135) /* no more records in w04 for this prd*/

        AV0P707(); /* save map hdr/clear map/rebuild map*/
                                   /* hdr*/

        AV0P800(); /* move szs/cond cds from hdr01 to w-s*/

        AV0P850(); /* set up the rest of aprl header info*/

        AV0P510(); /* ss on qty01/key from hdr01*/

        AV0P520(); /* sn on set for av0p510*/

        if (VAGen_SQLCODE == 100)
          AV0P525(); /* close set on qty01*/
          converseLib.validationFailed(136); /* no more period or at once records*/
        else
          AV0P730(); /* move qtys/periods from qty01 to w-s*/
        end

        AV0P750(); /* set up phased aprl map 30*/

      else
        AV0PW01.AV0PWFL2 = "Y"; /* db contention*/
      end
    end
  end

  AV0P775(); /* converse phased aprl map 30*/

  AV0P780(); /* pf key xfers for map 30*/

  AV0PM030.VAGen_EZEMSG = " ";

  if (converseVar.eventKey is pa2
   || converseVar.eventKey is pf3)
    AV0PW01.AV0PWFL2 = "N"; /* first time in aprl*/
    AV0PW01.AV0PWAPR = "N"; /* aprl until flag*/
    return;
  end

  if (converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)
    AV0P750(); /* page to next 11 sizes (if any) for*/
                                   /* product*/
  end

   /* next two if's are for adjusting the indexes on the set of*/
   /* headers obtained from a select set of headers obtained from*/
   /* one of the products on screen ten or on the selected products*/
   /* from screen 10.*/
   /* this is to accomplish paging backwards thru products.*/
   /* ix1 = index into map 10's selected products.*/
   /* ix10 = index into av0pw04 where the set of headers from*/
   /* a select set on one of the products from screen 10 are kept.*/

  if (converseVar.eventKey is enter)
    if (AV0PW01.AV0PWI10 < AV0PW01.AV0PWSI2) /* more prds in w04 to display*/
      AV0PW01.AV0PWFL2 = "N";
    else
      if (AV0PW01.AV0PWI10 == AV0PW01.AV0PWSI2)
                                   /* all prds in w04 already shown*/
        AV0PW01.AV0PWFL2 = "Y";
      end
    end
  end

  if (converseVar.eventKey is pf15) /* paging backwards*/
    if (AV0PW01.AV0PWI10 <= 1) /* no more hdrs in w04*/
      if (AV0PW01.AV0PWIX1 <= 1) /* no more products in map 10*/
        AV0PW01.AV0PWFL2 = "N";
        converseLib.validationFailed(141); /* can't back up anymore*/
        return;
      else
        AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX1 - 1;

         /* find the first non-blank style nbr in map 10 (bottom up)*/

        while (AV0PWIX6 <= AV0PWIX1
         && AV0PWIX6 > 0)
          if (AV0PW07.SY1STNBR[AV0PWIX6] != " ")
            AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX6;
            AV0PW01.AV0PWIX6 = -1; /* stop while*/
          else
            AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX6 - 1;
          end
        end
        if (AV0PW01.AV0PWIX6 == 0)
          AV0PW01.AV0PWFL2 = "N";
          converseLib.validationFailed(141); /* can't back up anymore*/
        else
          AV0PW01.AV0PWFL2 = "Y";
        end

        return;
      end
    else
      AV0PW01.AV0PWFL2 = "N";
    end
  end

  if (converseVar.eventKey is pf17) /* paging backwards thru selected prds*/
    if (AV0PW01.AV0PWIX1 <= 1) /* no more products in map 10*/
      AV0PW01.AV0PWFL2 = "N";
      converseLib.validationFailed(142); /* can't skip back anymore*/
      return;
    else
      AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX1 - 1;

       /* find the first non-blank style nbr in map 10 (bottom up)*/

      while (AV0PWIX6 <= AV0PWIX1
       && AV0PWIX6 > 0)
        if (AV0PW07.SY1STNBR[AV0PWIX6] != " ")
          AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX6;
          AV0PW01.AV0PWIX6 = -1; /* stop while*/
        else
          AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX6 - 1;
        end
      end
      if (AV0PW01.AV0PWIX6 == 0)
        AV0PW01.AV0PWFL2 = "N";
        converseLib.validationFailed(142); /* can't skip back up anymore*/
      else
        AV0PW01.AV0PWFL2 = "Y";
      end

      return;
    end
  end

   /* --------------------------- av0p700 ------------------------*/
end // end AV0P700
// position ix1 on next prd selec
Function AV0P705()
   /* --------------------------- av0p705 ------------------------*/

                   /* position ix1 on the next product*/
                   /* the user selected on map 010.*/

   /* --------------------------- av0p705 ------------------------*/


  AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX1;

  while (AV0PW01.AV0PWIX6 <= 30)
    if (AV0PW07.SY1STNBR[AV0PWIX6] != " ")
      AV0PW01.AV0PWIX1 = AV0PW01.AV0PWIX6;
      AV0PW01.AV0PWIX6 = 32;
    else
      AV0PW01.AV0PWIX6 = AV0PW01.AV0PWIX6 + 1;
    end
  end

  if (AV0PW01.AV0PWIX6 == 31)
    converseLib.validationFailed(140); /* no more prds to page forward to*/
  end



   /* --------------------------- av0p705 ------------------------*/
end // end AV0P705

// save hdr/clear map/rebld hdr
Function AV0P707()
   /* --------------------------- av0p707 ------------------------*/

                     /* save apparel header.*/
                     /* clear map.*/
                     /* put header info back.*/

   /* --------------------------- av0p707 ------------------------*/

  AV0PW06.XXXERRID = AV0PM030.XXXERRID;
  AV0PW06.XXXMAPNM = AV0PM030.XXXMAPNM;
  AV0PW06.XXXRVNBR = AV0PM030.XXXRVNBR;
  AV0PW06.XXXCURDT = AV0PM030.XXXCURDT;
  AV0PW06.XGPABRV = AV0PM030.XGPABRV;
  AV0PW06.SY1STNBR = AV0PM030.SY1STNBR;
  AV0PW06.SY1STYNM = AV0PM030.SY1STYNM;
  AV0PW06.XWHABRV = AV0PM030.XWHABRV;
  AV0PW06.XWHCD = AV0PM030.XWHCD;
  AV0PW06.XOWCD = AV0PM030.XOWCD;
  AV0PW06.XOWABRV = AV0PM030.XOWABRV;
  AV0PW06.XDMCD = AV0PM030.XDMCD;
  AV0PW06.XDMDESC = AV0PM030.XDMDESC;
  AV0PW06.XGAABRV = AV0PM030.XGAABRV;
  AV0PW06.XSPDESC = AV0PM030.XSPDESC;
  AV0PW06.SY2CLRID = AV0PM030.SY2CLRID;
  AV0PW06.SY2CLRDS = AV0PM030.SY2CLRDS;
  AV0PW06.PC2INSEG = AV0PM030.PC2INSEG;
  AV0PW06.XPGCD = AV0PM030.XPGCD;
  AV0PW06.XUMDESC = AV0PM030.XUMDESC;
  AV0PW06.AV5SMTFL = AV0PM030.AV5SMTFL;
  AV0PW06.SY2ALNOR = AV0PM030.SY2ALNOR;
  AV0PW06.AV1CUPRC = AV0PM030.AV1CUPRC;
  AV0PW06.AV1CUEDT = AV0PM030.AV1CUEDT;
  AV0PW06.AV1PRPRC = AV0PM030.AV1PRPRC;
  AV0PW06.AV0PWCHG = AV0PM030.AV0PMCHG;
  AV0PW06.AV2CMNT = AV0PM030.AV2CMNT;
  AV0PW06.AV0PWPM = AV0PM030.AV0PMPRM;
  AV0PW06.AV0PWPC = AV0PM030.AV0PMPRC;

  set AV0PM030 initial;

  AV0PM030.XXXERRID = AV0PW06.XXXERRID;
  AV0PM030.XXXMAPNM = AV0PW06.XXXMAPNM;
  AV0PM030.XXXRVNBR = AV0PW06.XXXRVNBR;
  AV0PM030.XXXCURDT = AV0PW06.XXXCURDT;
  AV0PM030.XGPABRV = AV0PW06.XGPABRV;
  AV0PM030.SY1STNBR = AV0PW06.SY1STNBR;
  AV0PM030.SY1STYNM = AV0PW06.SY1STYNM;
  AV0PM030.XWHABRV = AV0PW06.XWHABRV;
  AV0PM030.XWHCD = AV0PW06.XWHCD;
  AV0PM030.XOWCD = AV0PW06.XOWCD;
  AV0PM030.XOWABRV = AV0PW06.XOWABRV;
  AV0PM030.XDMCD = AV0PW06.XDMCD;
  AV0PM030.XDMDESC = AV0PW06.XDMDESC;
  AV0PM030.XGAABRV = AV0PW06.XGAABRV;
  AV0PM030.XSPDESC = AV0PW06.XSPDESC;
  AV0PM030.SY2CLRID = AV0PW06.SY2CLRID;
  AV0PM030.SY2CLRDS = AV0PW06.SY2CLRDS;
  AV0PM030.PC2INSEG = AV0PW06.PC2INSEG;
  AV0PM030.XPGCD = AV0PW06.XPGCD;
  AV0PM030.XUMDESC = AV0PW06.XUMDESC;
  AV0PM030.AV5SMTFL = AV0PW06.AV5SMTFL;
  AV0PM030.SY2ALNOR = AV0PW06.SY2ALNOR;
  AV0PM030.AV1CUPRC = AV0PW06.AV1CUPRC;
  AV0PM030.AV1CUEDT = AV0PW06.AV1CUEDT;
  AV0PM030.AV1PRPRC = AV0PW06.AV1PRPRC;
  AV0PM030.AV0PMCHG = AV0PW06.AV0PWCHG;
  AV0PM030.AV2CMNT = AV0PW06.AV2CMNT;
  AV0PM030.AV0PMPRM = AV0PW06.AV0PWPM;
  AV0PM030.AV0PMPRC = AV0PW06.AV0PWPC;

   /* --------------------------- av0p707 ------------------------*/
end // end AV0P707

// partially set up aprl header
Function AV0P710()
   /* --------------------------- av0p710 ------------------------*/
                     /* partially set up aprl header*/
                     /* (the rest is setup in av0p750)*/
   /* ------------------------------------------------------------*/

  if (AV0PW07.XGPCD[AV0PWIX1] in XGPTBL.XGPCD)
    AV0PM030.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end

  AV0PM030.SY1STNBR = AV0PW07.SY1STNBR[AV0PWIX1];

  if (AV0PW07.SY2CLRID[AV0PWIX1] != " ")
    AV0PM030.SY2CLRID = AV0PW07.SY2CLRID[AV0PWIX1];
    AV0P455(); /* get color desc*/
  end

  if (AV0PW07.XWHCD[AV0PWIX1] != "  ")
    if (AV0PW07.XWHCD[AV0PWIX1] in XWHTBL.XWHCD)
      AV0PM030.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
  end

  AV0PM030.XWHCD = AV0PW07.XWHCD[AV0PWIX1];
  AV0PM030.XOWCD = AV0PW07.XOWCD[AV0PWIX1];

  if (AV0PW07.XOWCD[AV0PWIX1] in XOWTBL.XOWCD)
    AV0PM030.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  end

  AV0PM030.XDMCD = AV0PW07.XDMCD[AV0PWIX1];

  AV0PW01.XDMCD = AV0PW07.XDMCD[AV0PWIX1];
  if (AV0PW01.XDMCD in XDMTBL.XDMCD)
    AV0PM030.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
  end

  AV0PM030.PC2INSEG = AV0PW07.PC2INSEG[AV0PWIX1];
  AV0PM030.XPGCD = AV0PW07.XPGCD[AV0PWIX1];

  AV0PW01.XUMCD = AV0PW07.XUMCD[AV0PWIX1];
  if (AV0PW07.XUMCD in XUMTBL.XUMCD)
    AV0PM030.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  AV0PM030.XGAABRV = " "; /* clear gender age abrv*/
  if (AV0PW07.XGACD[AV0PWIX1] in XGATBL.XGACD)
    AV0PM030.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  AV0PM030.XSPDESC = " "; /* clear sport activity abrv*/
  if (AV0PW07.XSPCD[AV0PWIX1] in XSPTBL.XSPCD)
    AV0PM030.XSPDESC = XSPTBL.XSPDESC[sysVar.arrayIndex];
  end

  AV0PM030.SY1STYNM = AV0PW07.SY1STYNM[AV0PWIX1];

   /* --------------------------- av0p710 ------------------------*/
end // end AV0P710

// save qty01 hdrs/qty's
Function AV0P730()
   /* --------------------------- av0p730 ------------------------*/

                     /* save the up to 40 qty's and periods*/
                     /* from the qty01 record to working*/
                     /* storage.*/

   /* --------------------------- av0p730 ------------------------*/

  AV0PW01.AV0PWSNP = 0; /* nbr of periods*/

   /* clear total qty's and period qty's and period months*/
   /* from av0pw02*/


  AV0PW02.AV0PWATO = 0;
  AV0PW02.AV0PWBTO = 0;
  AV0PW02.AV0PWCTO = 0;
  AV0PW02.AV0PWDTO = 0;
  AV0PW02.AV0PWETO = 0;
  AV0PW02.AV0PWFTO = 0;
  AV0PW02.AV0PWGTO = 0;

  AV0PW02.AV0PWADG = " ";
  AV0PW02.AV0PWBDG = " ";
  AV0PW02.AV0PWCDG = " ";
  AV0PW02.AV0PWDDG = " ";
  AV0PW02.AV0PWEDG = " ";
  AV0PW02.AV0PWFDG = " ";
  AV0PW02.AV0PWGDG = " ";



  AV0PW01.AV0PWIX2 = 1;




  while (AV0PWIX2 <= 40)
    AV0PW02.AV0PWAQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWBQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWCQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWDQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWEQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWFQY[AV0PWIX2] = 0;
    AV0PW02.AV0PWGQY[AV0PWIX2] = 0;
    AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
  end

   /* MOVE IN PERIOD AND AT ONCE QTY'S TO AV0PW02*/


  if (AV6REC.AV6RECTY == "N")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW02.AV0PWADG = "  A/O";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWAQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWATO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWATO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end

  if (VAGen_SQLCODE == 100)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWBMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWBDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWBSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWBQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWBTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWBTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWADG == " ")
    AV0P540(); /* move row b to row a*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWCMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWCDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWCSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWCQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWCTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWCTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWBDG == " ")
    AV0P541(); /* move row c to row b*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end

  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWDMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWDDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWDSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWDQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWDTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWDTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWCDG == " ")
    AV0P542(); /* move row d to row c*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWEMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWEDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWESL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWEQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWETO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWETO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWDDG == " ")
    AV0P543(); /* move row e to row d*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end


  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWFMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWFDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWFSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWFQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWFTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWFTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0P520(); /* select next on qty01*/
  end


  if (AV0PW02.AV0PWEDG == " ")
    AV0P544(); /* move row f to row e*/
  end

  if (VAGen_SQLCODE != 0)
    AV0P525(); /* close qty01 set*/
    return;
  end

  if (AV6REC.AV6RECTY == "P")
    AV0PW01.AV0PWSNP = AV0PW01.AV0PWSNP + 1; /* period counter*/
    AV0PW01.AV0PWFDT = AV6REC.AV6PRDDT;
    AV0PW02.AV0PWGMM = AV0PW01.AV0PWFMN;
    AV0PW02.AV0PWGDY = AV0PW01.AV0PWFDD;
    AV0PW02.AV0PWGSL = "/";
    AV0PW01.AV0PWIX2 = 1;
    AV0PW01.AV0PWIX9 = 1;
    while (AV0PWIX2 <= 40)
      if (AV5REC.XCDCD[AV0PWIX2] != " ")
        AV0PW02.AV0PWGQY[AV0PWIX9] = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW01.AV0PWTQY = AV6REC.AV1AVQTY[AV0PWIX2];
        AV0PW02.AV0PWGTO = AV0PW01.AV0PWTQY + AV0PW02.AV0PWGTO;
        AV0PW01.AV0PWIX9 = AV0PW01.AV0PWIX9 + 1;
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
  end

  AV0P525(); /* close qty01 set*/

  if (AV0PW02.AV0PWFDG == " ")
    AV0P545(); /* move row g to row f*/
  end



   /* --------------------------- av0p730 ------------------------*/
end // end AV0P730

// set up phased apparel map
Function AV0P750()
   /* --------------------------- av0p750 ------------------------*/

                     /* set up the phased apparel map 30.*/

   /* --------------------------- av0p750 ------------------------*/



  if (converseVar.eventKey is pf11)
    if (AV0PW01.AV0PWIX3 > AV0PW01.AV0PWSLM /* ix3 gt nbr sizes for prd?*/
     || AV0PW01.AV0PWSLM == 0)              /* or nbr of sizes eq 0*/
      converseLib.validationFailed(137); /* no more sizes for prd*/
      return;
    end
  else
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWSIX - 8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX3;
      if (AV0PW01.AV0PWIX3 < 0)
        AV0PW01.AV0PWIX3 = 1;
        AV0PW01.AV0PWIX8 = 1;
        return;
      end
    else
      AV0PW01.AV0PWIX3 = 1;
      AV0PW01.AV0PWIX8 = 1;
    end
  end



  AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
  AV0PW01.AV0PWIX5 = 1;

   /* move size descriptions and condition code abrv's to map*/


  while (AV0PWIX5 <= 8)
    if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM) /* ix3 gt size limit for prd?*/
      AV0PM030.SY4IDDSC[AV0PWIX5] = AV0PW02.SY4IDDSC[AV0PWIX3];
      AV0PM030.XCDABRV[AV0PWIX5] = AV0PW02.XCDABRV[AV0PWIX3];
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
    else
      AV0PM030.SY4IDDSC[AV0PWIX5] = " ";
      AV0PM030.XCDABRV[AV0PWIX5] = " ";
    end
    AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
  end

   /* if no at once or qty records existed skip the rest of this.*/

  if (converseVar.validationMsgNum == 136 /* no at once or period records*/
   || converseVar.validationMsgNum == 140) /* no more prds to display*/
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end



   /* move in the at once qty's (if any) and the period qty's to*/
   /* the map.*/


  if (AV0PW02.AV0PWADG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM030.AV0PMADG = AV0PW02.AV0PWADG;
    AV0PM030.AV0PMADC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM030.AV0PMAQY[AV0PWIX5] initialAttributes;
        AV0PM030.AV0PMAQY[AV0PWIX5] = AV0PW02.AV0PWAQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM030.AV0PMAQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P752(); /* move in totals if its time*/
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWBDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM030.AV0PMBDG = AV0PW02.AV0PWBDG;
    AV0PM030.AV0PMBDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM030.AV0PMBQY[AV0PWIX5] initialAttributes;
        AV0PM030.AV0PMBQY[AV0PWIX5] = AV0PW02.AV0PWBQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM030.AV0PMBQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P752(); /* move in totals if its time*/
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end



  if (AV0PW02.AV0PWCDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM030.AV0PMCDG = AV0PW02.AV0PWCDG;
    AV0PM030.AV0PMCDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM030.AV0PMCQY[AV0PWIX5] initialAttributes;
        AV0PM030.AV0PMCQY[AV0PWIX5] = AV0PW02.AV0PWCQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM030.AV0PMCQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P752(); /* move in totals if its time*/
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWDDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM030.AV0PMDDG = AV0PW02.AV0PWDDG;
    AV0PM030.AV0PMDDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM030.AV0PMDQY[AV0PWIX5] initialAttributes;
        AV0PM030.AV0PMDQY[AV0PWIX5] = AV0PW02.AV0PWDQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM030.AV0PMDQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P752(); /* move in totals if its time*/
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWEDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM030.AV0PMEDG = AV0PW02.AV0PWEDG;
    AV0PM030.AV0PMEDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM030.AV0PMEQY[AV0PWIX5] initialAttributes;
        AV0PM030.AV0PMEQY[AV0PWIX5] = AV0PW02.AV0PWEQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM030.AV0PMEQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P752(); /* move in totals if its time*/
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWFDG != " ")
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM030.AV0PMFDG = AV0PW02.AV0PWFDG;
    AV0PM030.AV0PMFDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM030.AV0PMFQY[AV0PWIX5] initialAttributes;
        AV0PM030.AV0PMFQY[AV0PWIX5] = AV0PW02.AV0PWFQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM030.AV0PMFQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P752(); /* move in totals if its time*/
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end


  if (AV0PW02.AV0PWGDG != 0)
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX5 = 1;
    AV0PM030.AV0PMGDG = AV0PW02.AV0PWGDG;
    AV0PM030.AV0PMGDC = ":";
    while (AV0PWIX5 <= 8)
      if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
                                   /* ix3 gt size limit for prd?*/
        set AV0PM030.AV0PMGQY[AV0PWIX5] initialAttributes;
        AV0PM030.AV0PMGQY[AV0PWIX5] = AV0PW02.AV0PWGQY[AV0PWIX3];
        AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX3 + 1;
      else
        set AV0PM030.AV0PMGQY[AV0PWIX5] invisible;
      end
      AV0PW01.AV0PWIX5 = AV0PW01.AV0PWIX5 + 1;
    end
  else
    AV0P752(); /* move in totals if its time*/
    if (converseVar.eventKey is pf10)
      AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
    else
      AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
      AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
    end
    return;
  end

  if (converseVar.eventKey is pf10)
    AV0PW01.AV0PWIX3 = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX8 + 8;
  else
    AV0PW01.AV0PWSIX = AV0PW01.AV0PWIX8;
    AV0PW01.AV0PWIX8 = AV0PW01.AV0PWIX3;
  end



   /* --------------------------- av0p750 ------------------------*/
end // end AV0P750

// move in totals if its time
Function AV0P752()
   /* --------------------------- av0p752 ------------------------*/

                     /* time to display totals?*/

   /* --------------------------- av0p752 ------------------------*/



   /* move in the totals for each period if there are no more*/
   /* sizes to display.*/


  if (AV0PW01.AV0PWIX3 > AV0PW01.AV0PWSLM)
    if (AV0PW02.AV0PWADG != " ")
      set AV0PM030.AV0PMATO initialAttributes;
      AV0PM030.AV0PMATO = AV0PW02.AV0PWATO;
    else
      set AV0PM030.AV0PMATO invisible;
    end
    if (AV0PW02.AV0PWBDG != " ")
      set AV0PM030.AV0PMBTO initialAttributes;
      AV0PM030.AV0PMBTO = AV0PW02.AV0PWBTO;
    else
      set AV0PM030.AV0PMBTO invisible;
    end
    if (AV0PW02.AV0PWCDG != " ")
      set AV0PM030.AV0PMCTO initialAttributes;
      AV0PM030.AV0PMCTO = AV0PW02.AV0PWCTO;
    else
      set AV0PM030.AV0PMCTO invisible;
    end
    if (AV0PW02.AV0PWDDG != " ")
      set AV0PM030.AV0PMDTO initialAttributes;
      AV0PM030.AV0PMDTO = AV0PW02.AV0PWDTO;
    else
      set AV0PM030.AV0PMDTO invisible;
    end
    if (AV0PW02.AV0PWEDG != " ")
      set AV0PM030.AV0PMETO initialAttributes;
      AV0PM030.AV0PMETO = AV0PW02.AV0PWETO;
    else
      set AV0PM030.AV0PMETO invisible;
    end
    if (AV0PW02.AV0PWFDG != " ")
      set AV0PM030.AV0PMFTO initialAttributes;
      AV0PM030.AV0PMFTO = AV0PW02.AV0PWFTO;
    else
      set AV0PM030.AV0PMFTO invisible;
    end
    if (AV0PW02.AV0PWGDG != " ")
      set AV0PM030.AV0PMGTO initialAttributes;
      AV0PM030.AV0PMGTO = AV0PW02.AV0PWGTO;
    else
      set AV0PM030.AV0PMGTO invisible;
    end
  end

  if (AV0PW01.AV0PWIX3 <= AV0PW01.AV0PWSLM)
    set AV0PM030.AV0PMATO invisible;
    set AV0PM030.AV0PMBTO invisible;
    set AV0PM030.AV0PMCTO invisible;
    set AV0PM030.AV0PMDTO invisible;
    set AV0PM030.AV0PMETO invisible;
    set AV0PM030.AV0PMFTO invisible;
    set AV0PM030.AV0PMGTO invisible;
  end



   /* --------------------------- av0p752 ------------------------*/
end // end AV0P752

// converse av0pm030
Function AV0P775()

  if (converseVar.validationMsgNum == 0) /* if no previous errors*/
    AV0PM030.XXXERRID = "AV0P775";
  end

  if (AV0PM010.XGPCD != "03") /* if not an apparel product*/
    set AV0PM030.AV0PM-MAP-PF13 invisible; /* do not show blank display option*/
  end

  converse AV0PM030 ;
end // end AV0P775

// check pf key xfers (map 30)
Function AV0P780()
   /* --------------------------- av0p780 ------------------------*/
                 /* check on pf key transfers for map 30*/
                              /* (apparel)*/
   /* ------------------------------------------------------------*/

  if (AV0PM030.CAITEM != " "
   && AV0PM030.CATOAP == " ")
    converseLib.validationFailed(115); /* enter to application*/
    set AV0PM030.CATOAP cursor, modified, bold;
    exit stack;
  end

  if (AV0PM030.CATOAP is modified
   && AV0PM030.CATOAP != " ")
    if (AV0PM030.CATOAP == "OP0L")
      converseLib.validationFailed(282); /* fastpath to op0l not allowed - use*/
                                   /* pf6 key*/
      AV0PM030.CATOAP = " "; /* clear 'to application' option*/
      return;
    end
    COMMAREA.CAUSERA = " ";
    if (AV0PM030.CATOAP == "AV0V")
      AV0P782(); /* move fields and xfer to av0v*/
    end
     /* if request xfer to substitutions table maintenance*/
     /* or substitutions criteria select*/
     /* move fields to format record and xfer*/
    if (AV0PM030.CATOAP == "AV0J") /* subs table maintenance*/
      AV0P785(); /* move key fields for xfer*/
    end
    if (AV0PM030.CATOAP == "AV0K") /* subs criteria search*/
      set AVWREC empty; /* don't send key*/
      COMMAREA.CAUSERA = " ";
    end
    COMMAREA.CATOAP = AV0PM030.CATOAP;
    COMMAREA.CAITEM = AV0PM030.CAITEM;
    XSEXIT();
     /* if xfer not successful, move message and exit to display*/
    AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    exit stack;
  end

  set AV0PM030.CATOAP normal;
  set AV0PM030.CAITEM normal;

  if (converseVar.eventKey is pf6) /* if request xfer to lost demand*/
    if (AV0PM010.XQACD == "01" /* if product is first quality*/
     && AV0PM010.XLCCD == "10") /* and active lifecycle*/
      AV0P781(); /* move fields and xfer to op0l*/
       /* if xfer fails, move message and exit to display it*/
      AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      exit stack;
    else /* if product is invalid for xfer*/
      converseLib.validationFailed(280); /* product must be quality 01 and*/
                                   /* lifecycle 10*/
      return; /* exit to display message*/
    end
  end

   /* if request xfer to substitutions criteria select*/
   /* move fields to format record and xfer*/
  if (converseVar.eventKey is pf14) /* if request xfer to subs criteria*/
                                   /* select*/
    AV0P785(); /* move fields and xfer to av0k*/
    COMMAREA.CATOAP = "AV0L"; /* substutuions list*/
    XSEXIT();
     /* if xfer fails, move message and exit to display it*/
    AV0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    exit stack;
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
  end

  if (converseVar.eventKey is pf1)
    COMMAREA.CAUSERA = " ";
    XSPF1(); /* to help*/
    AV0PM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf3)
      AV0PW01.AV0PWAPR = "N";
      return;
    else
      if (converseVar.eventKey is pf4)
        COMMAREA.CAUSERA = " ";
        XSPF4(); /* to goal menu*/
        AV0PM030.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      else
        if (converseVar.eventKey is pf15)
          return;
          /* next sentence , skip to last product selected*/
        else
          if (converseVar.eventKey is pf16)
            return;
            /* next sentence , skip to next product selected*/
          else
            if (converseVar.eventKey is pf17)
              return;
              /* next sentence , skip back to last selected prd*/
            else
              if (converseVar.eventKey is pa2)
                AV0PW01.AV0PWAPR = "N"; /* we are going back to av0p010*/
                return;
                /* next sentence , skip to next product selected*/
              else
                if (converseVar.eventKey is pf10) /* page left for more sizes*/
                  return;
                else
                  if (converseVar.eventKey is pf11) /* page right for more sizes*/
                    return;
                  else
                    if (converseVar.eventKey is enter)
                      return;
                    else
                      if (converseVar.eventKey is pf13)
                        AV0P-900(); /* blank style display process*/
                      else
                        converseLib.validationFailed(15); /* invalid pf key*/
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

   /* --------------------------- av0p780 ------------------------*/
end // end AV0P780

// move fields and xfer to op0l
Function AV0P781()
   /* --------------------------- av0p781 ------------------------*/

        /* move fields for transfer to lost demand application*/
                              /* (apparel)*/

   /* --------------------------- av0p781 ------------------------*/

  OSFREC.OSFGROUP = " "; /* initialize orders record*/
  OSFREC.XGPCD = COMMAREA.XGPCD;
  OSFREC.SY1STNBR = AV0PM030.SY1STNBR;
  OSFREC.SY2CLRID = AV0PM030.SY2CLRID;
  OSFREC.XDMCD = AV0PM030.XDMCD;
  COMMAREA.CAUSERA = OSFREC.OSFGROUP;

  COMMAREA.CATOAP = "OP0L"; /* move program name to xfer rec*/
  COMMAREA.CAITEM = AV0PM030.CAITEM;

  XSEXIT(); /* program exit module*/

   /* --------------------------- av0p781 ------------------------*/
end // end AV0P781

// move key fields & xfer to av0v
Function AV0P782()
   /* ----------------------- av0p782 ---------------------------*/

                 /* move key fields and xfer to av0v*/

   /* ----------------------- av0p782 ---------------------------*/

  AV0PW01.XGPCD = AV0PW07.XGPCD[AV0PWIX1];
  AV0PW01.SY1STNBR = AV0PW07.SY1STNBR[AV0PWIX1];
  AV0PW01.XWHCD = AV0PW07.XWHCD[AV0PWIX1];
  set AV0PW07 empty;
  AV0PW07.XGPCD[1] = AV0PW01.XGPCD;
  AV0PW07.SY1STNBR[1] = AV0PW01.SY1STNBR;
  AV0PW07.XWHCD = AV0PW01.XWHCD;

  COMMAREA.CAUSERA = AV0PW07.AV0PWGR7;

  COMMAREA.CATOAP = "AV0V";
  COMMAREA.CAITEM = AV0PM030.CAITEM;
  XSEXIT();

   /* ------------------------ av0p782 ---------------------------*/
end // end AV0P782

// move fields for xfer to subs
Function AV0P785()
   /* --------------------------- av0p785 ------------------------*/

      /* move key fields to avwrec and xfer to substitutions*/
                              /* (apparel)*/

   /* --------------------------- av0p785 ------------------------*/

   /* since gpc is not carried on this map, the gpc from av0pm010*/
   /* is used*/
   /* warehouse designated on map1 is moved;  if blank, will be*/
   /* wildcarded.*/

  set AVWREC empty; /* clear xfer format record*/
  AVWREC.XGPCD = AV0PM010.XGPCD; /* gpc code from av0pm010*/
  AVWREC.SY1STNBR = AV0PM030.SY1STNBR; /* style number*/
  AVWREC.SY2CLRID[1] = AV0PM030.SY2CLRID; /* color id*/
  AVWREC.XDMCD = AV0PM030.XDMCD; /* dimension code*/
  AVWREC.XWHCD[1] = AV0PM010.XWHCD; /* gpc code from av0pm010*/
  AVWREC.AVWNWPRD = "Y"; /* set new product flag to yes*/

  COMMAREA.CAUSERA = AVWREC.CAUSERA;

   /* --------------------------- av0p785 ------------------------*/
end // end AV0P785

// save hdr01 sizes/cond codes
Function AV0P800()
   /* --------------------------- av0p800 ------------------------*/

                /* save the up to 40 sizes and condition*/
                /* codes from the hdr01 record to working*/
                /* storage.*/

   /* --------------------------- av0p800 ------------------------*/

   /* CLEAR aprl SAVED AREA*/

  set AV0PW05 empty;


  AV0PW01.AV0PWIX7 = 1;


  AV0P410(); /* get size descriptions*/

   /* the next while is for moving the up to 40 size descriptions*/
   /* and condition code descriptions to w-s.*/


  AV0PW01.AV0PWIX7 = 1;
  AV0PW01.AV0PWIX2 = 1;

  while (AV0PW01.AV0PWIX7 <= 40)
    if (AV5REC.XCDCD[AV0PWIX7] != " ")
      AV0PW02.SY4IDDSC[AV0PWIX2] = PG3REC.SY4IDDSC[AV0PWIX7];
      AV0PW01.XCDCD = AV5REC.XCDCD[AV0PWIX7];
      if (AV0PW01.XCDCD in XCDTBL.XCDCD)
        AV0PW02.XCDABRV[AV0PWIX2] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      end
      AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 + 1;
    end
    AV0PW01.AV0PWIX7 = AV0PW01.AV0PWIX7 + 1;
  end

  AV0PW01.AV0PWIX2 = AV0PW01.AV0PWIX2 - 1;
  AV0PW01.AV0PWSLM = AV0PW01.AV0PWIX2; /* nbr sizes for this prd*/


   /* --------------------------- av0p800 ------------------------*/
end // end AV0P800

// set up the rest of aprl hdr
Function AV0P850()
   /* --------------------------- av0p850 ------------------------*/
                     /* set up the rest of the apparel header*/
                     /* for map 30.*/
   /* ------------------------------------------------------------*/

   /* get whse description:*/
  if (AV5REC.XWHCD in XWHTBL.XWHCD)
    AV0PM030.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end
  AV0PM030.XWHCD = AV5REC.XWHCD;

   /* style nbr*/
  AV0PM030.SY1STNBR = AV5REC.SY1STNBR;

   /* color id*/
  AV0PM030.SY2CLRID = AV5REC.SY2CLRID;

  AV0P854(); /* get color*/

   /* owner group code*/
  AV0PM030.XOWCD = AV5REC.XOWCD;

   /* get owner code abreviation:*/
  XOWREC.XWHCD = AV5REC.XWHCD;
  XOWREC.XOWCD = AV5REC.XOWCD;
  if (AV5REC.XOWCD in XOWTBL.XOWCD)
    AV0PM030.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  end

   /* inventory segement code*/
  AV0PM030.PC2INSEG = AV5REC.XSDCD;

   /* pkg type*/
  AV0PM030.XPGCD = AV5REC.XPGCD;

   /* uom*/
  AV0PW01.XUMCD = AV5REC.XUMCD;
  if (AV0PW01.XUMCD in XUMTBL.XUMCD)
    AV0PM030.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

   /* current wholesale price*/
  AV0PM030.AV1CUPRC = AV5REC.AV1CUPRC;

   /* prior price*/
  AV0PM030.AV1PRPRC = AV5REC.AV1PRPRC;

  if (COMMAREA.CAILVL[1] == "Y")
    AV0PM030.AV0PMPRM = "         COST:";
    AV0PM030.AV0PMPRC = AV5REC.AV1CUCST;
  else
    AV0PM030.AV0PMPRM = "SUG RET PRICE:";
    AV0PM030.AV0PMPRC = AV5REC.AV5SGPRC;
  end

   /* date*/
  AV0PM030.AV1CUEDT = AV5REC.AV1CUEDT;

   /* comment*/
  AV0PM030.AV2CMNT = AV5REC.AV2CMNT;

   /* smart resrv flag*/
  AV0PM030.AV5SMTFL = AV5REC.AV5SMTFL;

   /* get carry over flag*/

   /* get % change*/
  AV0PW01.AV0PWREM = AV5REC.AV1CUPRC - AV5REC.AV1PRPRC;

  if (AV0PW01.AV0PWREM > 0)
    AV0PW01.AV0PWPCH = AV0PW01.AV0PWREM * 100 / AV5REC.AV1CUPRC;
    AV0PM030.AV0PMCHG = AV0PW01.AV0PWPCH;
  else
    if (AV0PW01.AV0PWREM < 0)
      AV0PW01.AV0PWPCH = AV0PW01.AV0PWREM * 100 / AV5REC.AV1PRPRC;
      AV0PM030.AV0PMCHG = AV0PW01.AV0PWPCH;
    else
      AV0PM030.AV0PMCHG = 0;
    end
  end

   /* --------------------------- av0p850 ------------------------*/
end // end AV0P850

// get info from product file
Function AV0P854()
   /* -------------------- av0p854 -------------------------------*/
              /* validate color code/abrv*/
   /* ------------------------------------------------------------*/

  AV0PM030.XXXERRID = "AV0P854";

  PG2REC.XGPCD = AV5REC.XGPCD;
  PG2REC.SY1STNBR = AV5REC.SY1STNBR;
  PG2REC.SY2CLRID = AV5REC.SY2CLRID;
  PG2REC.XDMCD = AV5REC.XDMCD;

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == +0)
    set AV0PM030.SY1STNBR normal;
     /* move in the style name*/
    AV0PM030.SY1STYNM = PG2REC.SY1STYNM;

    AV0PM030.SY2CLRDS = PG2REC.SY2CLRDS;
    set AV0PM030.SY2CLRID normal;
     /* move in the color descriptions*/
    AV0PM030.SY2CLRDS = PG2REC.SY2CLRDS;

    /* move in the dimension code & description*/
    AV0PM030.XDMCD = PG2REC.XDMCD;
    if (PG2REC.XDMCD in XDMTBL.XDMCD)
      AV0PM030.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    end
  else
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0P";
      TA1REC.TA1LOCAT = "SELECT ";
      TA1REC.TA1MAP = "AV0PM030";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYCLR01"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    AV0P855(); /* set up blank style key and message*/
  end

  AV0PS-SY2ALNOR(); /* get allow new orders flag from*/
                                   /* dprod.vcolor01*/

    /* -------------  end of process av0p854  ------------------*/
end // end AV0P854

// set up blank style key & msg
Function AV0P855()
   /* move key info for getting blank style availability*/

  set AV0PW10 empty; /* clear blank style key record*/

   /* If the style is a screened style the blank style will be selected.*/
   /* if the blank style is a blank for a crested style*/
   /* (screened style indicator = 'u') the work record key will*/
   /* be loaded. If not a screened style, the blank style message*/
   /* the blank style message will indicate not a crested style*/
   /* and the blank style and color will be left blank.*/

  if (PG2REC.PG2SCRFL == "S")
    AV0PW10.XGPCD = AV5REC.XGPCD; /* general product class*/
    AV0PW10.SY1BSTNB = PG2REC.SY1BSTNB; /* blank style number*/
    AV0PW10.SY2BCLCD = PG2REC.SY2BCLCD; /* color code id*/
    AV0PW10.XDMCD = PG2REC.XDMCD; /* dimension code*/

    set PG2REC empty;

    PG2REC.XGPCD = AV0PW10.XGPCD;
    PG2REC.SY1STNBR = AV0PW10.SY1BSTNB;
    PG2REC.SY2CLRID = AV0PW10.SY2BCLCD;
    PG2REC.XDMCD = AV0PW10.XDMCD;

    AV0PS-VSYCLR01(); /* get dprodg.vsyclr01 record*/

    if (PG2REC.PG2SCRFL == "U" /* if crested style blank*/
     || PG2REC.PG2SCRFL == "B" /* or screened style blank*/
     || PG2REC.PG2SCRFL == "I") /* or interim style*/
      AV0PW10.XWHCD = AV5REC.XWHCD; /* warehouse*/
      AV0PW10.SY1BSTNB = PG2REC.SY1STNBR; /* blank style number*/
      AV0PW10.SY2BCLCD = PG2REC.SY2CLRID; /* color code id*/
      AV0PW10.XDMCD = AV5REC.XDMCD; /* dimension code*/

      AV0PW10.XQACD = AV5REC.XQACD; /* quality code*/
      AV0PW10.XOWCD = AV5REC.XOWCD; /* owner code*/
      AV0PW10.PC2INSEG = AV5REC.XSDCD; /* inventory segment code*/
      AV0PW10.XSACD = AV5REC.XSACD; /* shade code*/

      AV0PW10.XPGCD = AV5REC.XPGCD; /* package type code*/
      AV0PW10.XUMCD = AV5REC.XUMCD; /* unit of measure*/
      AV0PW10.AV4PRDBD = AV5REC.AV4PRDBD; /* season begin date*/

    /* format blank style message:*/
      if (PG2REC.PG2SCRFL == "U") /* if crested style blank*/
        AV0PW10.AV0PWMS1 = "USES UNCRESTED STYLE";
      end
      if (PG2REC.PG2SCRFL == "B" /* if screened style blank*/
       || PG2REC.PG2SCRFL == "I") /* or interim style*/
        AV0PW10.AV0PWMS1 = "USES BLANK STYLE";
      end
      AV0PW10.AV0PWMS2 = PG2REC.SY1STNBR;
      AV0PW10.AV0PWMS3 = PG2REC.SY2CLRID;
      AV0PW10.AV0PWMS4 = PG2REC.XDMCD;
    else
      AV0PW10.XGPCD = " ";
      AV0PW10.SY1BSTNB = " ";
      AV0PW10.SY2BCLCD = " ";
      AV0PW10.XDMCD = " ";
    end
  else
    if (PG2REC.PG2SCRFL == "U")
      AV0PW10.XWHCD = AV5REC.XWHCD; /* warehouse*/
      AV0PW10.XGPCD = AV5REC.XGPCD; /* general product class*/
      AV0PW10.SY1BSTNB = PG2REC.SY1STNBR; /* blank style number*/
      AV0PW10.SY2BCLCD = PG2REC.SY2CLRID; /* color code id*/
      AV0PW10.XDMCD = AV5REC.XDMCD; /* dimension code*/

      AV0PW10.XQACD = AV5REC.XQACD; /* quality code*/
      AV0PW10.XOWCD = AV5REC.XOWCD; /* owner code*/
      AV0PW10.PC2INSEG = AV5REC.XSDCD; /* inventory segment code*/
      AV0PW10.XSACD = AV5REC.XSACD; /* shade code*/

      AV0PW10.XPGCD = AV5REC.XPGCD; /* package type code*/
      AV0PW10.XUMCD = AV5REC.XUMCD; /* unit of measure*/
      AV0PW10.AV4PRDBD = AV5REC.AV4PRDBD; /* season begin date*/

      AV0PW10.AV0PWMSG = "CRESTED STYLE BLANK ";
    else
      AV0PW10.XGPCD = " ";
      AV0PW10.SY1BSTNB = " ";
      AV0PW10.SY2BCLCD = " ";
      AV0PW10.XDMCD = " ";
      AV0PW10.AV0PWMSG = "NOT A SCREENED STYLE ";
    end
  end

end // end AV0P855

// check if equipment product
Function AV0PS-CHECK-EQMT()
   /* --------------------- av0ps-check-eqmt ---------------------------*/

   /* determine whether or not this is an equipment product*/

  set WEU0100 empty; /* initialize the passing record*/
  set SQLCA empty; /* initialize sqlca record*/

  WEU0100.WEU0100-EQUIP-PROD-FL = "N";
  AV0PW01.AV0PW-EQMT-FL = "N";
  WEU0100.WEU0100-CALLING-APPL = "AV0P";
  WEU0100.SQLCAREC = SQLCA.SQLCAREC;

  WEU0100.XGPCD = SYCREC.XGPCD;
  WEU0100.SY1STNBR = SYCREC.SY1STNBR;
  WEU0100.SY2CLRID = SYCREC.SY2CLRID;
  WEU0100.XDMCD = SYCREC.XDMCD;

  if (SYCREC.SY2CLRID != " ")
    if (SYCREC.XDMCD == " ")
      WEU0100.XDMCD = "00";
    end
  end

  if (SYCREC.SY2CLRID == " ")
    AV0PS-EU0100-SS(); /* select set*/
    if (WEU0100.WEU0100-RETURN-CODE == 0) /* good return*/
      AV0PS-EU0100-SN(); /* select next - get the first record*/
      if (WEU0100.WEU0100-RETURN-CODE == 0) /* good return*/
        if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y") /* if equipment prod*/
          AV0PW01.AV0PW-EQMT-FL = "Y";
                                   /* set equipment flag to 'yes'*/
        end
      end
    end
    AV0PS-EU0100-CS(); /* close set*/
  else
    AV0PS-EU0100-SU(); /* select unique*/
    if (WEU0100.WEU0100-RETURN-CODE == 0) /* good return*/
      if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y") /* if equipment product*/
        AV0PW01.AV0PW-EQMT-FL = "Y";
      end
    end
  end

end // end AV0PS-CHECK-EQMT

// EU0100 close cursor
Function AV0PS-EU0100-CS()
   /* ------------------- av0ps-eu0100-cs -------------------------*/

  WEU0100.WEU0100-TASK = "CS";
  WEU0100.WEU0100-CALLER-LOCATION = "AV0PS-EU0100-CS";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to av0ps-check-eqmt*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "AV0PS-EU0100-CS"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- av0ps-eu0100-cs -------------------------*/
end // end AV0PS-EU0100-CS

// EU0100 select next
Function AV0PS-EU0100-SN()
   /* ------------------- av0ps-eu0100-sn -------------------------*/

  WEU0100.WEU0100-TASK = "SN";
  WEU0100.WEU0100-CALLER-LOCATION = "AV0PS-EU0100-SN";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select next*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to av0ps-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "AV0PS-EU0100-SN"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- av0ps-eu0100-sn -------------------------*/
end // end AV0PS-EU0100-SN

// EU0100 select set cursor
Function AV0PS-EU0100-SS()
   /* ------------------- av0ps-eu0100-ss -------------------------*/

  WEU0100.WEU0100-TASK = "SS";
  WEU0100.WEU0100-CALLER-LOCATION = "AV0PS-EU0100-SS";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select set*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to av0ps-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "AV0PS-EU0100-SS"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- av0ps-eu0100-ss -------------------------*/
end // end AV0PS-EU0100-SS

// EU0100 select unique
Function AV0PS-EU0100-SU()
   /* ------------------- av0ps-eu0100-su -------------------------*/

  WEU0100.WEU0100-TASK = "SU";
  WEU0100.WEU0100-CALLER-LOCATION = "AV0PS-EU0100-SU";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select unique*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to av0ps-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "AV0PS-EU0100-SU"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- av0ps-eu0100-su -------------------------*/
end // end AV0PS-EU0100-SU

// select dprod.vcolor01
Function AV0PS-SY2ALNOR()
  set SY2REC empty;

  SY2REC.XGPCD = AV5REC.XGPCD; /* general product class*/
  SY2REC.SY1STNBR = AV5REC.SY1STNBR; /* style number*/
  SY2REC.SY2CLRID = AV5REC.SY2CLRID; /* color id*/
  SY2REC.XDMCD = AV5REC.XDMCD; /* dimension code*/
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    AV0PM030.SY2ALNOR = SY2REC.SY2ALNOR;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0P";
    TA1REC.TA1MAP = "AV0PM030";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOC = "AV0PS-SY2ALNOR";
    TA1REC.TA1LOCAT[4] = " IO0130";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    exit stack;
  end

   /* Use Canadian Overrides*/
  if (AV0PW01.AV0PW-CAN-SO == "Y") /* Canadian Sales Office*/
    set WSY2000 empty;
    WSY2000.XGP-GPC-CD = AV5REC.XGPCD; /* general product code*/
    WSY2000.SY-STY-NBR = AV5REC.SY1STNBR; /* style number*/
    WSY2000.SY-COLR-CD-ID = AV5REC.SY2CLRID; /* color id*/
    WSY2000.XDM-DIM-CD = AV5REC.XDMCD; /* dimension code*/
    WSY2000.XDR-PROD-REG-CD = "05"; /* Canadian region code*/
    WSY2000.WSY2000-SUB-OPTION-CODE = "O"; /* old format*/
    WSY2000.WSY2000-OPTION-CODE = "S "; /* select unique*/
    try
      call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};
    end

    if (WSY2000.WSY2000-RETURN-CODE == 00) /* record found*/
      AV0PM030.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;
    else
      if (WSY2000.WSY2000-RETURN-CODE == 01
       || WSY2000.WSY2000-RETURN-CODE == 02) /* record not found*/
        /* next sentence*/
      else
        TA1REC.TA1TYPE = "APP";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "AV0P";
        TA1REC.TA1MAP = "AV0PM030";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "VSYREG02";
        TA1REC.TA1LOC = "AV0PS-SY2ALNOR";
        TA1REC.TA1LOCAT[4] = "SY2000 ";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        exit stack;
      end
    end
  end

end // end AV0PS-SY2ALNOR

// select dprod.vcolor01
Function AV0PS-VSYCLR01()
   /* ------------------------------------------------------------*/
   /* Get the dprodg.vsyclr01 record*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, continue*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
         /* continue*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYCLR01";
      TA1REC.TA1TBLKE = PG2REC.PG2KEY;
      TA1REC.TA1LOCAT[3] = "AV0PS-VSYCLR01";
      TA1REC.TA1LOCAT[4] = "IO3120 ";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      exit stack;
    end
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "VSYCLR01";
    TA1REC.TA1LOCAT[3] = "AV0PS-VSYCLR01";
    TA1REC.TA1LOCAT[4] = "IO3120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    exit stack;
  end

end // end AV0PS-VSYCLR01

//*** RECORD=AV0PW01 ****
// ;********************** av0pw01 ****************************
// ;
// ;         work record for av0p: phased availability
// ;
// ;***********************************************************
// ***********************
Record AV0PW01 type basicRecord
  5 AV0PWGR1 AV0PWGR1 ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XCLCD XCLCD ; 
    10 XCDCD XCDCD ; 
    10 XDMCD XDMCD ; 
    10 XUMCD XUMCD ; 
    10 XUMDESC XUMDESC ; 
    10 PC2INSEG PC2INSEG ; 
    10 PC2SEGAB PC2SEGAB ; 
    10 XSACD XSACD ; 
    10 XSAABRV XSAABRV ; 
    10 XPGCD XPGCD ; 
    10 XPGABRV XPGABRV ; 
    10 XSNYR XSNYR ; 
    10 AV0PWFL1 AV0PWFL1 ; 
    10 AV0PWFL2 AV0PWFL2 ; 
    10 AV0PWFL3 AV0PWFL3 ; 
    10 AV0PWFL4 AV0PWFL4 ; 
    10 AV0PWFL5 AV0PWFL5 ; 
    10 AV0PWFL6 AV0PWFL6 ; 
    10 AV0PWFLG AV0PWFLG ; 
    10 AV0PWLFL AV0PWLFL ; 
    10 AV0PWWWH AV0PWWWH ; 
    10 XWHCD XWHCD ; 
    10 XGPCD XGPCD ; 
    10 XOWCD XOWCD ; 
    10 AV0PWSLM AV0PWSLM ; 
    10 AV0PWSNP AV0PWSNP ; 
    10 AV0PWPRC AV0PWPRC ; 
    10 AV0PWFTW AV0PWFTW ; 
    10 AV0PWAPR AV0PWAPR ; 
    10 AV0PW-EQMT-FL AV0PW-EQMT-FL ; 
    10 AV0PW-END-EQMT-FL AV0PW-END-EQMT-FL ; 
    10 AV0PW-END-AVHDR-FL AV0PW-END-AVHDR-FL ; 
    10 AV0PW-CAN-SO AV0PW-CAN-SO ; 
    10 AV0PW-EQMT-SO AV0PW-EQMT-SO ; 
    10 AV0PW-AVXSO-FOUND AV0PW-AVXSO-FOUND ; 
    10 AV0PWDT1 AV0PWDT1 ; 
      15 AV0PWDCC AV0PWDCC ; 
      15 AV0PWDYY AV0PWDYY ; 
      15 AV0PWDMM AV0PWDMM ; 
      15 AV0PWDDD AV0PWDDD ; 
    10 AV0PWDT2 AV0PWDT2 ; 
    10 AV0PWDT4 AV0PWDT4 ; 
    10 AV0PWDAT AV0PWDAT ; 
      15 AV0PWDAY AV0PWDAY ; 
      15 AV0PWDAM AV0PWDAM ; 
      15 AV0PWDAD AV0PWDAD ; 
    10 AV0PWDT5 AV0PWDT5 ; 
      15 AV0PWMM5 AV0PWMM5 ; 
      15 AV0PWDD5 AV0PWDD5 ; 
      15 AV0PWYY5 AV0PWYY5 ; 
    10 AV0PWIX1 AV0PWIX1 ; 
    10 AV0PWIX2 AV0PWIX2 ; 
    10 AV0PWIX3 AV0PWIX3 ; 
    10 AV0PWIX4 AV0PWIX4 ; 
    10 AV0PWIX5 AV0PWIX5 ; 
    10 AV0PWIX6 AV0PWIX6 ; 
    10 AV0PWIX7 AV0PWIX7 ; 
    10 AV0PWIX8 AV0PWIX8 ; 
    10 AV0PWIX9 AV0PWIX9 ; 
    10 AV0PWSIX AV0PWSIX ; 
    10 AV0PWSIP AV0PWSIP ; 
    10 AV0PWSI2 AV0PWSI2 ; 
    10 AV0PWI10 AV0PWI10 ; 
    10 AV0PWSI3 AV0PWSI3 ; 
    10 AV0PWDT3 AV0PWDT3 ; 
      15 AV0PWDY3 AV0PWDY3 ; 
      15 AV0PWDM3 AV0PWDM3 ; 
      15 AV0PWDD3 AV0PWDD3 ; 
    10 AV0PWDT6 AV0PWDT6 ; 
      15 AV0PWDM6 AV0PWDM6 ; 
      15 AV0PWDD6 AV0PWDD6 ; 
      15 AV0PWDY6 AV0PWDY6 ; 
  5 AV0PWFDT AV0PWFDT ; 
    10 AV0PWFCT AV0PWFCT ; 
    10 AV0PWFDA AV0PWFDA ; 
      15 AV0PWFYY AV0PWFYY ; 
      15 AV0PWFMN AV0PWFMN ; 
      15 AV0PWFDD AV0PWFDD ; 
  5 AV0PWEIX AV0PWEIX ; 
  5 AV0PWREM AV0PWREM ; 
  5 AV0PWPCH AV0PWPCH ; 
  5 AV0PWTQY AV0PWTQY ; 
  5 AV0PWSCY AV0PWSCY ; 
    10 AV0PWSCC AV0PWSCC ; 
    10 AV0PWSYY AV0PWSYY ; 
  5 AV0PWSFL AV0PWSFL ; 
  5 AV0PWCBD AV0PWCBD ; 
  5 AV0PWCED AV0PWCED ; 
  5 AV0PWNBD AV0PWNBD ; 
  5 AV0PWNED AV0PWNED ; 
end // end AV0PW01

//*** RECORD=AV0PW02 ****
// *****************  availability work record ****************
// ;
// ;               this record holds the image of the
// ;               phased ftwr screen for a particular
// ;               map.
// ;
// ************************************************************
// ***********************
Record AV0PW02 type basicRecord
  5 AV0PWGR2 AV0PWGR2 ; 
    10 AV0PWADG AV0PWADG ; 
      15 AV0PWAMM AV0PWAMM ; 
      15 AV0PWASL AV0PWASL ; 
      15 AV0PWADY AV0PWADY ; 
      15 * char(2) ; 
    10 AV0PWBDG AV0PWBDG ; 
      15 AV0PWBMM AV0PWBMM ; 
      15 AV0PWBSL AV0PWBSL ; 
      15 AV0PWBDY AV0PWBDY ; 
      15 * char(2) ; 
    10 AV0PWCDG AV0PWCDG ; 
      15 AV0PWCMM AV0PWCMM ; 
      15 AV0PWCSL AV0PWCSL ; 
      15 AV0PWCDY AV0PWCDY ; 
      15 * char(2) ; 
    10 AV0PWDDG AV0PWDDG ; 
      15 AV0PWDMM AV0PWDMM ; 
      15 AV0PWDSL AV0PWDSL ; 
      15 AV0PWDDY AV0PWDDY ; 
      15 * char(2) ; 
    10 AV0PWEDG AV0PWEDG ; 
      15 AV0PWEMM AV0PWEMM ; 
      15 AV0PWESL AV0PWESL ; 
      15 AV0PWEDY AV0PWEDY ; 
      15 * char(2) ; 
    10 AV0PWFDG AV0PWFDG ; 
      15 AV0PWFMM AV0PWFMM ; 
      15 AV0PWFSL AV0PWFSL ; 
      15 AV0PWFDY AV0PWFDY ; 
      15 * char(2) ; 
    10 AV0PWGDG AV0PWGDG ; 
      15 AV0PWGMM AV0PWGMM ; 
      15 AV0PWGSL AV0PWGSL ; 
      15 AV0PWGDY AV0PWGDY ; 
      15 * char(2) ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 XCDABRV XCDABRV [40] ; 
    10 AV0PWAQY AV0PWAQY [40] ; 
    10 AV0PWBQY AV0PWBQY [40] ; 
    10 AV0PWCQY AV0PWCQY [40] ; 
    10 AV0PWDQY AV0PWDQY [40] ; 
    10 AV0PWEQY AV0PWEQY [40] ; 
    10 AV0PWFQY AV0PWFQY [40] ; 
    10 AV0PWGQY AV0PWGQY [40] ; 
    10 AV0PWATO AV0PWATO ; 
    10 AV0PWBTO AV0PWBTO ; 
    10 AV0PWCTO AV0PWCTO ; 
    10 AV0PWDTO AV0PWDTO ; 
    10 AV0PWETO AV0PWETO ; 
    10 AV0PWFTO AV0PWFTO ; 
    10 AV0PWGTO AV0PWGTO ; 
end // end AV0PW02

//*** RECORD=AV0PW03 ****
// *****************  availability work record ****************
// ;
// ;               this record used with io2320.
// ;
// ************************************************************
// ***********************
Record AV0PW03 type basicRecord
  5 AV0PWGR3 AV0PWGR3 ; 
    10 AV0PWOPT AV0PWOPT ; 
    10 AV0PWLOD AV0PWLOD ; 
    10 AV0PWHID AV0PWHID ; 
end // end AV0PW03

//*** RECORD=AV0PW04 ****
// *****************  availability work record ****************
// ;
// ;               this record holds the set of hdrs
// ;               retreived in av0p320.
// ;
// ; MAINTENANCE HISTOTY :
// ; -------------------
// ;
// ; CONTROL  DATE    NAME    DESCRIPTION OF CHANGE
// ; -------  ----    ----    ---------------------
// ; AV00     091097  SREDDY  WORKING STORAGE ARRAY CHANGED TO
// ;                          100 FROM 50, DUE TO 4038 ABEND
// ;                          WITH SY1STNBR.
// ;
// ************************************************************
// ***********************
Record AV0PW04 type basicRecord
  5 AV0PWGR4 AV0PWGR4 ; 
    10 XWHCD XWHCD [100] ; 
    10 XSECD XSECD [100] ; 
    10 XSNYR XSNYR [100] ; 
    10 SY1STNBR SY1STNBR [100] ; 
    10 SY2CLRID SY2CLRID [100] ; 
    10 XDMCD XDMCD [100] ; 
    10 XOWCD XOWCD [100] ; 
    10 PC2INSEG PC2INSEG [100] ; 
    10 XSACD XSACD [100] ; 
    10 XPGCD XPGCD [100] ; 
    10 XUMCD XUMCD [100] ; 
    10 AV4PRDBD AV4PRDBD [100] ; 
    10 AV0PWNHD AV0PWNHD [100] ; 
    10 AV0PW-EQMT-FL AV0PW-EQMT-FL [100] ; 
end // end AV0PW04

//*** RECORD=AV0PW05 ****
// *****************  availability work record ****************
// ;
// ;               this record holds the image of the
// ;               phased aprl screen for a particular
// ;               map.
// ;
// ************************************************************
// ***********************
Record AV0PW05 type basicRecord
  5 AV0PWGR5 AV0PWGR5 ; 
    10 AV0PWADG AV0PWADG ; 
      15 AV0PWAMM AV0PWAMM ; 
      15 AV0PWASL AV0PWASL ; 
      15 AV0PWADY AV0PWADY ; 
      15 * char(2) ; 
    10 AV0PWBDG AV0PWBDG ; 
      15 AV0PWBMM AV0PWBMM ; 
      15 AV0PWBSL AV0PWBSL ; 
      15 AV0PWBDY AV0PWBDY ; 
      15 * char(2) ; 
    10 AV0PWCDG AV0PWCDG ; 
      15 AV0PWCMM AV0PWCMM ; 
      15 AV0PWCSL AV0PWCSL ; 
      15 AV0PWCDY AV0PWCDY ; 
      15 * char(2) ; 
    10 AV0PWDDG AV0PWDDG ; 
      15 AV0PWDMM AV0PWDMM ; 
      15 AV0PWDSL AV0PWDSL ; 
      15 AV0PWDDY AV0PWDDY ; 
      15 * char(2) ; 
    10 AV0PWEDG AV0PWEDG ; 
      15 AV0PWEMM AV0PWEMM ; 
      15 AV0PWESL AV0PWESL ; 
      15 AV0PWEDY AV0PWEDY ; 
      15 * char(2) ; 
    10 AV0PWFDG AV0PWFDG ; 
      15 AV0PWFMM AV0PWFMM ; 
      15 AV0PWFSL AV0PWFSL ; 
      15 AV0PWFDY AV0PWFDY ; 
      15 * char(2) ; 
    10 AV0PWGDG AV0PWGDG ; 
      15 AV0PWGMM AV0PWGMM ; 
      15 AV0PWGSL AV0PWGSL ; 
      15 AV0PWGDY AV0PWGDY ; 
      15 * char(2) ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 XCDABRV XCDABRV [40] ; 
    10 AV0PWAQY AV0PWAQY [40] ; 
    10 AV0PWBQY AV0PWBQY [40] ; 
    10 AV0PWCQY AV0PWCQY [40] ; 
    10 AV0PWDQY AV0PWDQY [40] ; 
    10 AV0PWEQY AV0PWEQY [40] ; 
    10 AV0PWFQY AV0PWFQY [40] ; 
    10 AV0PWGQY AV0PWGQY [40] ; 
    10 AV0PWATO AV0PWATO ; 
    10 AV0PWBTO AV0PWBTO ; 
    10 AV0PWCTO AV0PWCTO ; 
    10 AV0PWDTO AV0PWDTO ; 
    10 AV0PWETO AV0PWETO ; 
    10 AV0PWFTO AV0PWFTO ; 
    10 AV0PWGTO AV0PWGTO ; 
end // end AV0PW05

//*** RECORD=AV0PW06 ****
// *****************  availability work record ****************
// ;
// ;               this record holds the image of the
// ;               phased screens header info.
// ;
// ************************************************************
// ***********************
Record AV0PW06 type basicRecord
  5 AV0PWGR6 AV0PWGR6 ; 
    10 XXXERRID XXXERRID ; 
    10 XXXMAPNM XXXMAPNM ; 
    10 XXXRVNBR XXXRVNBR ; 
    10 XXXCURDT XXXCURDT ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY1STYNM SY1STYNM ; 
    10 XWHABRV XWHABRV ; 
    10 XPGCD XPGCD ; 
    10 XOWCD XOWCD ; 
    10 XOWABRV XOWABRV ; 
    10 XGPABRV XGPABRV ; 
    10 XDMCD XDMCD ; 
    10 XDMDESC XDMDESC ; 
    10 XGAABRV XGAABRV ; 
    10 XSPDESC XSPDESC ; 
    10 SY2CLRID SY2CLRID ; 
    10 SY2CLRDS SY2CLRDS ; 
    10 PC2INSEG PC2INSEG ; 
    10 XUMDESC XUMDESC ; 
    10 XSECOVFL XSECOVFL ; 
    10 AV0PWHMF AV0PWHMF ; 
    10 AV5SMTFL AV5SMTFL ; 
    10 SY2ALNOR SY2ALNOR ; 
    10 AV1CUPRC AV1CUPRC ; 
    10 AV1CUEDT AV1CUEDT ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 AV1PRPRC AV1PRPRC ; 
    10 AV0PWCHG AV0PWCHG ; 
    10 AV2CMNT AV2CMNT ; 
    10 AV0PWPM AV0PWPM ; 
    10 AV0PWPC AV0PWPC ; 
    10 XWHCD XWHCD ; 
end // end AV0PW06

//*** RECORD=AV0PW07 ****
// *****************  availability work record ****************
// ;
// ;               this record holds selected keys which
// ;               were passed by av0v or were selected by
// ;               the user in av0pm010.
// ;
// ************************************************************
// ***********************
Record AV0PW07 type basicRecord
  5 AV0PWGR7 AV0PWGR7 ; 
    10 XGPCD XGPCD [30] ; 
    10 XWHCD XWHCD [30] ; 
    10 XOWCD XOWCD [30] ; 
    10 SY1STNBR SY1STNBR [30] ; 
    10 SY2CLRID SY2CLRID [30] ; 
    10 XDMCD XDMCD [30] ; 
    10 XSECD XSECD [30] ; 
    10 XSNYR XSNYR [30] ; 
    10 AV4PRDBD AV4PRDBD [30] ; 
    10 XLCCD XLCCD [30] ; 
    10 PC2INSEG PC2INSEG [30] ; 
    10 XPGCD XPGCD [30] ; 
    10 XQACD XQACD [30] ; 
    10 XSACD XSACD [30] ; 
    10 XUMCD XUMCD [30] ; 
    10 XSPCD XSPCD [30] ; 
    10 XGACD XGACD [30] ; 
    10 SY2ALNOR SY2ALNOR [30] ; 
    10 OPZHMIND OPZHMIND [30] ; 
    10 SY1STYNM SY1STYNM [30] ; 
    10 SY2CLRAB SY2CLRAB [30] ; 
    10 SY2CLRDS SY2CLRDS [30] ; 
    10 AV0PW-EQMT-FL AV0PW-EQMT-FL [30] ; 
end // end AV0PW07

//*** RECORD=AV0PW08 ****
// *****************  availability work record ****************
// ;
// ;               this record holds selected keys which
// ;               were passed by av0v or were selected by
// ;               the user in av0pm010.
// ;
// ************************************************************
// ***********************
Record AV0PW08 type basicRecord
  5 AV0PWGR8 AV0PWGR8 ; 
    10 XGPCD XGPCD [30] ; 
    10 XWHCD XWHCD [30] ; 
    10 XOWCD XOWCD [30] ; 
    10 SY1STNBR SY1STNBR [30] ; 
    10 SY2CLRID SY2CLRID [30] ; 
    10 SY2CLRAB SY2CLRAB [30] ; 
    10 XDMCD XDMCD [30] ; 
    10 XSECD XSECD [30] ; 
    10 XSNYR XSNYR [30] ; 
    10 AV4PRDBD AV4PRDBD [30] ; 
    10 XLCCD XLCCD [30] ; 
    10 PC2INSEG PC2INSEG [30] ; 
    10 XPGCD XPGCD [30] ; 
    10 XQACD XQACD [30] ; 
    10 XSACD XSACD [30] ; 
    10 XUMCD XUMCD [30] ; 
end // end AV0PW08

//*** RECORD=AV0PW09 ****
// *****************  availability control table **************
// 
// db2 table:         davail.avctl01
// 
// copylib member:    dcl00405
// iomod:             io2300
// 
// key to db2 table:  xwhcd
//                    xgpcd
//                    sy1stnbr
//                    sy2clrid
//                    xdmcd
//                    xsncd
//                    xsnyr
//                    xowcd
//                    xspcd
//                    xsacd
//                    xpgcd
// 
// date created:      11-12-87
// 
// maintenance log:
// date        init      comments
// --------    ------    --------------------------------------
// 11-12-87    tlewis    created csp record
// ************************************************************
// ***********************
Record AV0PW09 type basicRecord
  10 AV0PWG9 AV0PWG9 ; 
    15 XWHCD XWHCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XSACD XSACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 AV0PW9DT AV0PW9DT ; 
end // end AV0PW09

//*** RECORD=AV0PW10 ****
// *****************  blank style record key ******************
// 
// for use in displaying blank style quantities for the
// finished style displayed on map av0pm030
// 
// ************************************************************
// ***********************
Record AV0PW10 type basicRecord
  10 XWHCD XWHCD ; 
  10 XGPCD XGPCD ; 
  10 SY1BSTNB SY1BSTNB ; 
  10 SY2BCLCD SY2BCLCD ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XOWCD XOWCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XSACD XSACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 AV4PRDBD AV4PRDBD ; 
  10 AV0PWMSG AV0PWMSG ; 
    15 AV0PWMS1 AV0PWMS1 ; 
    15 * char(1) ; 
    15 AV0PWMS2 AV0PWMS2 ; 
    15 * char(1) ; 
    15 AV0PWMS3 AV0PWMS3 ; 
    15 * char(1) ; 
    15 AV0PWMS4 AV0PWMS4 ; 
  10 AV0PWDFL AV0PWDFL ; 
  10 AV0PWFFL AV0PWFFL ; 
  10 AV0PWPFL AV0PWPFL ; 
end // end AV0PW10

//*** RECORD=VEQPRD01 ****
// DB2 TABLE VIEW:      dequip.veqprd01
// 
// COPYLIB MEMBER:      Deqprd01
// 
// I/O MODULE:          veqprd01
// 
// KEY TO DB2 TABLE:    xgp-gpc-cd
//                      sy-sty-nbr
//                      sy-colr-cd-id
//                      xdm-dim-cd
// 
// 
// MAINTENANCE LOG:
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/06/97  dmeier  New record definition.
// ************************
Record VEQPRD01 type basicRecord
  5 VEQPRD01-GROUP VEQPRD01-GROUP ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 XDM-DIM-CD XDM-DIM-CD ; 
    10 XPCCD XPCCD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VEQPRD01

// AV Sales Office tbl match flag
DataItem AV0PW-AVXSO-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Canadian Sales Office flag
DataItem AV0PW-CAN-SO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-avhdr flag
DataItem AV0PW-END-AVHDR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-equipment flag
DataItem AV0PW-END-EQMT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// equipment product flag
DataItem AV0PW-EQMT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Equipment Sales Office flag
DataItem AV0PW-EQMT-SO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period begin date
DataItem AV0PW9DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row a
DataItem AV0PWADG char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row a day
DataItem AV0PWADY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// at once month
DataItem AV0PWAMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// apparel until
DataItem AV0PWAPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period qty row a
DataItem AV0PWAQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row a slash
DataItem AV0PWASL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total row a
DataItem AV0PWATO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row b hdg
DataItem AV0PWBDG char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row b day
DataItem AV0PWBDY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period month hdg
DataItem AV0PWBMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period qty row b
DataItem AV0PWBQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row b slash
DataItem AV0PWBSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total row b
DataItem AV0PWBTO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current ssn beg date
DataItem AV0PWCBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row c hdg
DataItem AV0PWCDG char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period day hdg
DataItem AV0PWCDY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current ssn end date
DataItem AV0PWCED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0PWCHG num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// period month hdg
DataItem AV0PWCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period qty row c
DataItem AV0PWCQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row c slash
DataItem AV0PWCSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total row c
DataItem AV0PWCTO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem AV0PWDAD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AV0PWDAM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date yymmdd
DataItem AV0PWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AV0PWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem AV0PWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem AV0PWDD3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AV0PWDD5 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem AV0PWDD6 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem AV0PWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row d hdg
DataItem AV0PWDDG char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row d day
DataItem AV0PWDDY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0PWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem AV0PWDM3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AV0PWDM6 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// period month hdg
DataItem AV0PWDMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period qty row d
DataItem AV0PWDQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row d slash
DataItem AV0PWDSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group date ccyymmdd
DataItem AV0PWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date yymmdd
DataItem AV0PWDT2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date yymmdd
DataItem AV0PWDT3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date yymmdd
DataItem AV0PWDT4 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date mmddyy
DataItem AV0PWDT5 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date yymmdd
DataItem AV0PWDT6 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total row d
DataItem AV0PWDTO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AV0PWDY3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AV0PWDY6 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AV0PWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row e hdg
DataItem AV0PWEDG char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row e day
DataItem AV0PWEDY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save ezetst
DataItem AV0PWEIX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// period month hdg
DataItem AV0PWEMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period qty row e
DataItem AV0PWEQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row e slash
DataItem AV0PWESL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total row e
DataItem AV0PWETO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem AV0PWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yymmdd
DataItem AV0PWFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem AV0PWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row f hdg
DataItem AV0PWFDG char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group ccyymmdd
DataItem AV0PWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row f day
DataItem AV0PWFDY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0PWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru appl
DataItem AV0PWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// perform ftwr until
DataItem AV0PWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// came from av0v
DataItem AV0PWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found flag
DataItem AV0PWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0PWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// clear map
DataItem AV0PWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// l.c. check flag
DataItem AV0PWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period month hdg
DataItem AV0PWFMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period month hdg
DataItem AV0PWFMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// period qty row f
DataItem AV0PWFQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row f slash
DataItem AV0PWFSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total row f
DataItem AV0PWFTO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ftwr until
DataItem AV0PWFTW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem AV0PWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// availability cntl table key
DataItem AV0PWG9 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row g hdg
DataItem AV0PWGDG char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row g day
DataItem AV0PWGDY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period month hdg
DataItem AV0PWGMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period qty row g
DataItem AV0PWGQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem AV0PWGR1 char(166)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0PWGR2 char(1578)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0PWGR3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0PWGR4 char(3500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0PWGR5 char(1578)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0PWGR6 char(258)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0PWGR7 char(3570)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0PWGR8 char(1560)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row g slash
DataItem AV0PWGSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total row g
DataItem AV0PWGTO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hi date
DataItem AV0PWHID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hot model flag
DataItem AV0PWHMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index 10
DataItem AV0PWI10 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 1
DataItem AV0PWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 2
DataItem AV0PWIX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 3
DataItem AV0PWIX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 4
DataItem AV0PWIX4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 5
DataItem AV0PWIX5 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 6
DataItem AV0PWIX6 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 7
DataItem AV0PWIX7 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 8
DataItem AV0PWIX8 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 9
DataItem AV0PWIX9 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// l.c. 10 found flag
DataItem AV0PWLFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lo date
DataItem AV0PWLOD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AV0PWMM5 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0PWMS1 char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0PWMS2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0PWMS3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0PWMS4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0PWMSG char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next ssn end date
DataItem AV0PWNBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next ssn end date
DataItem AV0PWNED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no header flag
DataItem AV0PWNHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// option
DataItem AV0PWOPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0PWPC num(8,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// % chg
DataItem AV0PWPCH decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0PWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0PWPM char(14)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of periods displayed
DataItem AV0PWPRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// remainder
DataItem AV0PWREM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem AV0PWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyy group
DataItem AV0PWSCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// which season to use flag
DataItem AV0PWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save next avail space in w04
DataItem AV0PWSI2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save index 10
DataItem AV0PWSI3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save last perd idx displayed
DataItem AV0PWSIP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save last size idx displayed
DataItem AV0PWSIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr sizes per prd
DataItem AV0PWSLM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of periods per prod
DataItem AV0PWSNP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem AV0PWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// intermediate total
DataItem AV0PWTQY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wildcarded whse flag
DataItem AV0PWWWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem AV0PWYY5 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GROUP LEVEL
DataItem VEQPRD01-GROUP char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

