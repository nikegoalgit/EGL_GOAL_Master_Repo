package av01;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=AV01 ****
// This application displays all the programs listed as active,
// inactive, or both active and inactive.  The list option will
// default to 'A' for active, but can be changed to 'I' or 'B'
// by the user.  With security clearance, the user may change,
// add, or delete programs.  If no data was found, he will
// receive blank lines so that he can add programs.  Without
// security clearance, the user will see any existing programs
// or if there is no data, he will receive a message that 'no
// programs were found'.  With or without security clearance,
// the user may select any existing program and transfer to
// AV02 to see the styles associated with the program.
// 
// The user must press PF9 to allow add or delete of programs.
// He may scroll forward and backward to view all programs by
// pressing PF7 and PF8.  He may exit to any allowed applica-
// tion, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/03/91  DPETTI  New application - Clone of AV02
//          01/29/91  RHETRI  Add cutoff date to screen
//          03/07/91  RHETRI  Add edit to stop pgm date overlap
//                            & remove cutoff date from screen
//          05/29/91  dbruih  changed date overlap logic to
//                            include owner group for a not
//                            equal select parameter in io5480
//          05/30/91  dbruih  removed delete of row from
//                            davail.vblnks01 when program is
//                            set inactive.
//          10/31/97  MBURLE  Y2KFIX: regenerated for latest
//                            version of XX0XS01.
// *********************
Program AV01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV01W00 AV01W00; // record
  AV01W01 AV01W01; // record
  AV01W02 AV01W02; // record
  AV01W03 AV01W03; // record
  AV01W04 AV01W04; // record
  AVGREC AVGREC; // record
  AVHREC AVHREC; // record
  AVIREC AVIREC; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XDMREC XDMREC; // record
  XOWREC XOWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use XOWTBL; // table
  use AV01M.AV01M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAV001: XPAV001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set AV01M001 initial; /* M001 input/output*/
    set AV01W00 empty; /* Working storage*/
    set AV01W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    if (COMMAREA.CAFROMAP != "AV02"
     && COMMAREA.CAFROMAP != "AV03")
      set AVWREC empty;
    end

    AV01W00.AV01WSWF = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* Set up defaults.*/
     /* ------------------------------------------------------------*/

    AV01W00.XGPCD = "03"; /* Default GPC code*/
    AV01W00.XWHCD = "51"; /* Default warehouse code*/

    AV01M001.AV01MOPT = "A"; /* Default list option*/

     /* ------------------------------------------------------------*/
     /* Set data request switch, depending on where you are coming*/
     /* from. If coming from AV02, set fields to read temp storage.*/
     /* However, if curr page is zero, there is no page in storage.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "AV02" /* If coming from AV02*/
     && AVWREC.AVWCURPG[1] > 0)     /* and current page nbr not zero*/

      AV01W00.AV01WSWR = "N"; /* Request for data switch*/
      AV01W00.AV01WDSW = "Y"; /* Data found switch*/
      AV01W00.XXXTSLEN = 1021; /* Move W.S. length*/

      /* ------------------------------------------------------------*/
       /* Use page numbers saved in AVWREC (from when you left to go*/
       /* to AV02), so you can display the same page you left from.*/
      /* ------------------------------------------------------------*/
      AV01W00.XXXTSPAG = AVWREC.AVWCURPG[1]; /* Move current page nbr*/
      AV01W00.TA5TSQIX = AVWREC.AVWMAXPG[1]; /* Move max page nbr*/

    else
      AV01W00.AV01WSWR = "Y"; /* Request for data switch*/

    end

     /* ------------------------------------------------------------*/
     /* If user has security clearance, set security-switch.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAADDFL == "Y" /* If add clearance exists*/
     && COMMAREA.CADELFL == "Y" /* If delete clearance exists*/
     && COMMAREA.CACHGFL == "Y") /* If change clearance exists*/

      AV01W00.AV01WSSW = "Y"; /* Security switch*/
    else

      AV01W00.AV01WSSW = "N"; /* Security switch*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AV01001; /* Converse the main process*/


    AV01001: AV01001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AV01001; /* Converse the main process*/


  end // end main
end // end AV01

// Main process to display a map
Function AV01001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AV01100(); /* Obtain the data to display*/

  AV01200(); /* Format and display the map*/

  AV01300(); /* Check attention identifier*/

  AV01400(); /* Reset fields to normal intensity*/

  AV01500(); /* Verify the entered data*/

  AV01600(); /* Process valid input request*/


end // end AV01001

// Obtain the data to display
Function AV01100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (AV01W00.AV01WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  AV01W00.XXXTSLEN = 1021; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  AV01S01(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Obtain Today - 6 months*/
   /* ------------------------------------------------------------*/

  if (AV01W00.AV01WFDT == 0) /* If AV01WFDT (FROM DATE) is missing*/
    AV01S02();
                                   /* Determine current date minus 6 months*/
  end

   /* ------------------------------------------------------------*/
   /* Save key in working storage.*/
   /* ------------------------------------------------------------*/

  AV01W01.AV01MOPT = AV01M001.AV01MOPT; /* List option*/

   /* ------------------------------------------------------------*/
   /* Obtain data for lines.*/
   /* ------------------------------------------------------------*/

  AV01110(); /* Open BLNKP*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  AV01W00.AV01WBSW = "Y"; /* Blank page switch*/
  while (AV01W00.AV01WSWC == "N") /* Until end of cursor*/

    AV01120(); /* Fetch BLNKP*/

    if (AV01W00.AV01WSWC == "N") /* If row was found*/

      /* ------------------------------------------------------------*/
       /* Save data in display storage.*/
      /* ------------------------------------------------------------*/

      AV01130(); /* Save data*/

      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/

      if (AV01W00.AV01WIXM > 15) /* Page is full*/
        AV01140(); /* Add page to temporary storage*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for DAVAIL.VBLNKP01.*/
   /* ------------------------------------------------------------*/

  AV01150(); /* Close BLNKP*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.  If you*/
   /* have a partially formatted page, you don't need extra page.*/
   /* (AV01WBSW switch controls extra blank page.)*/
   /* ------------------------------------------------------------*/

  if (AV01W00.AV01WIXM > 1) /* Page was formatted*/
    AV01140(); /* Add page to temporary storage*/
    AV01W00.AV01WBSW = "N"; /* Blank page switch*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (AV01W00.TA5TSQIX == 0) /* No pages formatted*/

    if (AV01W00.AV01WSSW != "Y") /* No security clearance*/
      AVWREC.XXXMODID = "100"; /* Module identification*/
      AVWREC.XXXMSGNO = 194; /* Indicate no data to display*/

    else
      AV01W00.XXXTSPAG = 0; /* Desired page number*/
      AV01W00.TA5TSQIX = 0; /* Highest page number*/

    end

  else
    /* ------------------------------------------------------------*/
     /* Data was found, check conditions for adding blank page.*/
    /* ------------------------------------------------------------*/
    AV01W00.XXXTSPAG = 1; /* Desired page number*/

    if (AV01W00.AV01WBSW == "Y" /* If blank page required*/
     && AV01W00.AV01WSSW == "Y") /* Security clearance*/
      AV01140(); /* Add page to temporary storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  AV01W00.AV01WSWR = "N"; /* Request for data switch*/


end // end AV01100

// Open BLNKP
Function AV01110()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVGREC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  if (AV01M001.AV01MOPT == "B") /* If option = 'both'*/
    AVGREC.XXXSTAT = "*"; /* Status*/
  else
    AVGREC.XXXSTAT = AV01M001.AV01MOPT; /* Status*/
  end

   /* ------------------------------------------------------------*/
   /* Open cursor for BLNKP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" ("S1", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    AV01W00.AV01WIXM = 1; /* Display line index*/
    AV01W00.AV01WSWC = "N"; /* End of cursor switch*/
    AV01W00.AV01WDSW = "N"; /* Data found switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01110

// Fetch BLNKP
Function AV01120()
   /* ------------------------------------------------------------*/
   /* Fetch BLNKP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" ("N1", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row found, set switch.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
        AV01W00.AV01WDSW = "Y"; /* Data found switch*/
      end

      /* ------------------------------------------------------------*/
       /* If end of selected set, indicate end of cursor.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        AV01W00.AV01WSWC = "Y"; /* Indicate end of cursor*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01120

// Save data in display storage
Function AV01130()
   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (AV01W00.AV01WSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If first line on page, save the option.*/
   /* ------------------------------------------------------------*/

  if (AV01W00.AV01WIXM == 1) /* If first line on page*/
    AV01W01.AV01MOPT = AV01M001.AV01MOPT; /* Save option*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  AV01W01.AV01WPSW[AV01WIXM] = "Y"; /* Prod in BLNKS*/

  AV01W01.XOWCD[AV01WIXM] = AVGREC.XOWCD; /* Style*/

  XOWREC.XWHCD = AV01W00.XWHCD; /* Format key*/
  XOWREC.XOWCD = AV01W01.XOWCD[AV01WIXM]; /* Format key*/
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    AV01W01.XOWDESC[AV01WIXM] = XOWTBL.XOWDESC[sysVar.arrayIndex];
  end

  AV01W01.AVGBPIND[AV01WIXM] = AVGREC.AVGBPIND; /* Style name*/

  AV01131(); /* Save descriptions*/

  AV01132(); /* Save dates*/

  AV01W01.XXXSTAT[AV01WIXM] = AVGREC.XXXSTAT; /* Status*/

   /* ------------------------------------------------------------*/
   /* Add to line loop counter.*/
   /* ------------------------------------------------------------*/
  AV01W00.AV01WIXM = AV01W00.AV01WIXM + 1; /* Increment line index*/


end // end AV01130

// Determine descriptions
Function AV01131()
   /* ------------------------------------------------------------*/
   /* Determine program description.*/
   /* ------------------------------------------------------------*/

  if (AV01W01.AVGBPIND[AV01WIXM] == "B")
    AV01W01.AV01WOPD[AV01WIXM] = "BLANK BULK";
  end

  if (AV01W01.AVGBPIND[AV01WIXM] == "M")
    AV01W01.AV01WOPD[AV01WIXM] = "SPECIAL MKUP";
  end

  if (AV01W01.AVGBPIND[AV01WIXM] == "S")
    AV01W01.AV01WOPD[AV01WIXM] = "SPCL CUS-TEE";
  end

  if (AV01W01.AVGBPIND[AV01WIXM] == "T")
    AV01W01.AV01WOPD[AV01WIXM] = "CUSTOM-TEE  ";
  end

  if (AV01W01.AVGBPIND[AV01WIXM] == "C")
    AV01W01.AV01WOPD[AV01WIXM] = "MARY SPECIAL";
  end


end // end AV01131

// Format dates for display
Function AV01132()
   /* ------------------------------------------------------------*/
   /* Format cutoff date for display.*/
   /* ------------------------------------------------------------*/

  AV01W03.AV01WDDT = AVGREC.OPJCUTDT; /* Mask*/
  AV01W02.AV01WGMM = AV01W03.AV01WDMM; /* Format MM*/
  AV01W02.AV01WGDD = AV01W03.AV01WDDD; /* Format DD*/
  AV01W02.AV01WGYY = AV01W03.AV01WDYY; /* Format YY*/

  AV01W01.OPJCUTDT[AV01WIXM] = AVGREC.OPJCUTDT; /* Hold ccyymmdd*/
  AV01W01.AV01MDT1[AV01WIXM] = AV01W02.AV01WGDT; /* Display storage*/

   /* ------------------------------------------------------------*/
   /* Format begin date for display.*/
   /* ------------------------------------------------------------*/

  AV01W03.AV01WDDT = AVGREC.AVGBENDT; /* Mask*/
  AV01W02.AV01WGMM = AV01W03.AV01WDMM; /* Format MM*/
  AV01W02.AV01WGDD = AV01W03.AV01WDDD; /* Format DD*/
  AV01W02.AV01WGYY = AV01W03.AV01WDYY; /* Format YY*/

  AV01W01.AVGBENDT[AV01WIXM] = AVGREC.AVGBENDT; /* Hold ccyymmdd*/
  AV01W01.AV01MDT2[AV01WIXM] = AV01W02.AV01WGDT; /* Display storage*/
  AV01W00.AV01WHDB[AV01WIXM] = AV01W02.AV01WGDT; /* Hold for compare*/

   /* ------------------------------------------------------------*/
   /* Format end date for display.*/
   /* ------------------------------------------------------------*/

  AV01W03.AV01WDDT = AVGREC.AVGEENDT; /* Mask*/
  AV01W02.AV01WGMM = AV01W03.AV01WDMM; /* Format MM*/
  AV01W02.AV01WGDD = AV01W03.AV01WDDD; /* Format DD*/
  AV01W02.AV01WGYY = AV01W03.AV01WDYY; /* Format YY*/

  AV01W01.AVGEENDT[AV01WIXM] = AVGREC.AVGEENDT; /* Hold ccyymmdd*/
  AV01W01.AV01MDT3[AV01WIXM] = AV01W02.AV01WGDT; /* Display storage*/
  AV01W00.AV01WHDE[AV01WIXM] = AV01W02.AV01WGDT; /* Hold for compare*/


end // end AV01132

// Add page to temporary storage
Function AV01140()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AV01W01.XXXTSLEN = AV01W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (AV01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set AV01W01 empty; /* M001 display storage*/

    AV01W00.AV01WIXM = 1; /* Display line index*/

    AV01W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  AVWREC.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01140

// Close BLNKP
Function AV01150()
   /* ------------------------------------------------------------*/
   /* Close BLNKP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" ("C1", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01150

// Format and converse the map
Function AV01200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    AVWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (AV01W00.AV01WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (AV01W00.AV01WSWF == "Y") /* Map must be formatted*/
      AV01210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AV01M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AV01M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AV01M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AVWREC.XXXMSGNO != 0) /* Message to display*/

    AV01M001.XXXMODID = AVWREC.XXXMODID; /* Module identification*/
    if (AVWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AVWREC.XXXMSGNO);
    end /* Message number*/

    set AV01M001 alarm; /* Indicate sound alarm*/

  end

  converse AV01M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = " "; /* Module identification*/
  AVWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = AV01M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = AV01M001.CAITEM; /* Application data*/


end // end AV01200

// Format the display data
Function AV01210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set AV01M001 initial; /* M001 input/output area*/

  AV01W00.AV01WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (AV01W00.TA5TSQIX > 0 /* Pages were formatted*/
   && AV01W00.AV01WDSW == "Y") /* and data was found*/

    if (AV01W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is less or equal the highest*/
       /* page in storage, obtain temporary storage.*/
      /* ------------------------------------------------------------*/
      if (AV01W00.XXXTSPAG > AV01W00.TA5TSQIX) /* Desired greater highest*/
        AV01W00.XXXTSPAG = AV01W00.TA5TSQIX;
      end

      AV01211(); /* Obtain temporary storage page*/

    end
    /* ------------------------------------------------------------*/
     /* Format the page information on the screen.*/
    /* ------------------------------------------------------------*/
    AV01M001.XXXTSPAG = AV01W00.XXXTSPAG; /* Current page*/
    AV01M001.TA5TSQIX = AV01W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* If list option is missing default it to 'a'.*/
   /* Format the key to the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (AV01W01.AV01MOPT == " ") /* If List option missing*/
    AV01W01.AV01MOPT = "A"; /* Default List option*/
  end

  AV01M001.AV01MOPT = AV01W01.AV01MOPT; /* List option*/

   /* ------------------------------------------------------------*/
   /* Place cursor on first select.*/
   /* ------------------------------------------------------------*/

  set AV01M001.AV01MSEL[1] cursor; /* Place cursor*/

   /* ------------------------------------------------------------*/
   /* Load the programs from BLNKP (stored in W01) to screen.*/
   /* ------------------------------------------------------------*/
  AV01W00.AV01WIXM = 1; /* Initialize line index*/

  while (AV01W00.AV01WIXM <= 15) /* Until screen is full*/

    AV01M001.AV01MSEL[AV01WIXM] = AV01W01.AV01MSEL[AV01WIXM];

    AV01M001.XOWCD[AV01WIXM] = AV01W01.XOWCD[AV01WIXM];
    AV01M001.XOWDESC[AV01WIXM] = AV01W01.XOWDESC[AV01WIXM];

    AV01M001.AVGBPIND[AV01WIXM] = AV01W01.AVGBPIND[AV01WIXM];
    AV01M001.AV01WOPD[AV01WIXM] = AV01W01.AV01WOPD[AV01WIXM];

    AV01M001.AV01MDT1[AV01WIXM] = AV01W01.AV01MDT1[AV01WIXM];
    AV01M001.AV01MDT2[AV01WIXM] = AV01W01.AV01MDT2[AV01WIXM];
    AV01M001.AV01MDT3[AV01WIXM] = AV01W01.AV01MDT3[AV01WIXM];
    AV01M001.XXXSTAT[AV01WIXM] = AV01W01.XXXSTAT[AV01WIXM];

    if (AV01W00.AV01WSSW == "Y") /* and security exists*/
      if (AV01W01.AV01WPSW[AV01WIXM] == "Y") /* if from D/B*/
        set AV01M001.XOWCD[AV01WIXM] skip; /* make field enterable*/
      else
        /* NEXT SENTENCE*/
      end
    else
      set AV01M001.XOWCD[AV01WIXM] skip; /* make field enterable*/
      set AV01M001.AVGBPIND[AV01WIXM] skip; /* make field enterable*/
      /* SET AV01M001.AV01MDT1(AV01WIXM) AUTOSKIP;*/
      set AV01M001.AV01MDT2[AV01WIXM] skip; /* Make field enterable*/
      set AV01M001.AV01MDT3[AV01WIXM] skip; /* Make field enterable*/
      set AV01M001.XXXSTAT[AV01WIXM] skip; /* Make field enterable*/
    end

    AV01M001.AV01WPSW[AV01WIXM] = AV01W01.AV01WPSW[AV01WIXM];

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    AV01W00.AV01WIXM = AV01W00.AV01WIXM + 1; /* Increment line index*/

  end


end // end AV01210

// Obtain TSQ Record
Function AV01211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  AV01W01.XXXTSLEN = AV01W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = AV01W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (AV01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  AVWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01211

// Check attention identifier
Function AV01300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (AV01W00.AV01WSWR == "Y") /* Request for data*/
      set AV01W01 empty; /* M001 display storage*/
    end

    AV01W00.AV01WSWF = "Y"; /* Format the map switch*/
    AV01W00.AV01WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (AV01M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (AVWREC.AVWMODSW == "Y" /* if data mod sw 'y'*/
       || COMMAREA.CATOAP == "AV02") /* or going to AV02*/
         /* next sentence*/
      else
        AVWREC.AVWCURPG = 0; /* Zero out current page*/
        AVWREC.AVWMAXPG = 0; /* Zero out max page*/

        AV01S01(); /* Purge temporary storage*/
      end

      XPAV003(); /* Exit to another application*/

      set AV01M001.CATOAP cursor, bold; /* Highlight*/

    else

      AVWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(23); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AV01M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AV0S"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "AV0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "AV0S"; /* TO application*/
    end

    if (AVWREC.AVWMODSW == "Y" /* if data mod sw 'y'*/
     || COMMAREA.CATOAP == "AV02") /* or going to AV02*/
       /* next sentence*/
    else
      AVWREC.AVWCURPG = 0; /* Zero out current page*/
      AVWREC.AVWMAXPG = 0; /* Zero out max page*/
      AV01S01(); /* Purge temporary storage*/
    end

    XPAV003(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9)  /* and PF9 was not pressed*/

    AVWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(279); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end AV01300

// Reset highlighted fields
Function AV01400()
   /* ------------------------------------------------------------*/
   /* Reset key field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AV01M001.AV01MOPT initialAttributes; /* List option*/

   /* ------------------------------------------------------------*/
   /* Reset all detail fields attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  AV01W00.AV01WIXM = 1; /* Initialize line index*/
  while (AV01W00.AV01WIXM <= 15) /* Until end of lines*/

    set AV01M001.AV01MSEL[AV01WIXM] normal; /* Reset select flag*/

    /* ------------------------------------------------------------*/
     /* Defaul all detail fields attributes to defined intensity.*/
    /* ------------------------------------------------------------*/

    set AV01M001.XOWCD[AV01WIXM] initialAttributes; /* default to defined*/
    set AV01M001.AVGBPIND[AV01WIXM] initialAttributes;
    set AV01M001.AV01MDT1[AV01WIXM] initialAttributes;
    set AV01M001.AV01MDT2[AV01WIXM] initialAttributes;
    set AV01M001.AV01MDT3[AV01WIXM] initialAttributes;
    set AV01M001.XXXSTAT[AV01WIXM] initialAttributes;

    /* ------------------------------------------------------------*/
     /* Check security and if row is from D/B.*/
    /* ------------------------------------------------------------*/

    if (AV01W00.AV01WSSW == "Y") /* and security exists*/

      if (AV01W01.AV01WPSW[AV01WIXM] == "Y") /* if from D/B*/
        set AV01M001.XOWCD[AV01WIXM] skip; /* make field askip*/
      else
        /* NEXT SENTENCE*/
      end

    else
      set AV01M001.XOWCD[AV01WIXM] skip; /* make field askip*/
      set AV01M001.AVGBPIND[AV01WIXM] skip; /* make field askip*/
      set AV01M001.AV01MDT1[AV01WIXM] skip; /* Make field askip*/
      set AV01M001.AV01MDT2[AV01WIXM] skip; /* Make field askip*/
      set AV01M001.AV01MDT3[AV01WIXM] skip; /* Make field askip*/
      set AV01M001.XXXSTAT[AV01WIXM] skip; /* Make field askip*/

    end

    AV01W00.AV01WIXM = AV01W00.AV01WIXM + 1; /* Increment line index*/

  end

  set AV01M001.CATOAP initialAttributes; /* TO application*/
  set AV01M001.CAITEM initialAttributes; /* Application data*/


end // end AV01400

// Verify the entered data
Function AV01500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (AV01M001.CAITEM > " ") /* Application data was entered*/

    AVWREC.XXXMODID = "500"; /* Module identification*/
    set AV01M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(274); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    AV01510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/

    if (AV01M001.AV01MOPT != AV01W01.AV01MOPT /* List option changed*/
     || AV01M001.AV01MOPT == " ")             /* or  missing*/

      AV01520(); /* Verify the key fields*/

    else

      /* ------------------------------------------------------------*/
       /* Otherwise, if page was formatted, verify selections.*/
      /* ------------------------------------------------------------*/
      AV01W00.AV01WIXM = 15; /* Initialize line index*/
      while (AV01W00.AV01WIXM > 0) /* Until end of lines*/

        /* ------------------------------------------------------------*/
         /* Verify data.*/
        /* ------------------------------------------------------------*/

        AV01530(); /* Verify data*/

        /* ------------------------------------------------------------*/
         /* If no error:*/
        /* ------------------------------------------------------------*/
        if (converseVar.validationMsgNum == 0) /* If no errors found*/
          AV01540(); /* Verify selections*/
        end

        /* ------------------------------------------------------------*/
         /* Subtract from loop counter.*/
        /* ------------------------------------------------------------*/
        AV01W00.AV01WIXM = AV01W00.AV01WIXM - 1; /* Decrement line number*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/

  else
    /* ------------------------------------------------------------*/
     /* If 'a' or 'd' entered, ask user to comfirm selection.*/
    /* ------------------------------------------------------------*/
    if ("D" in AV01M001.AV01MSEL /* If any 'd' entered*/
     || "A" in AV01M001.AV01MSEL /* If any 'a' entered*/
     || "C" in AV01M001.AV01MSEL) /* If any 'c' entered*/

      if (AV01W00.AV01WSSW == "Y") /* If security clearance*/

        AVWREC.XXXMODID = "500"; /* Module identification*/
        AVWREC.XXXMSGNO = 289; /* Indicate please confirm*/

      end

    end
  end


end // end AV01500

// Verify scroll request
Function AV01510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && AV01W00.XXXTSPAG < 2)       /* And no previous pages*/

    AVWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(10); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AV01W00.XXXTSPAG >= AV01W00.TA5TSQIX) /* and no more pages*/

    AVWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(11); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  AV01511(); /* Highlight any selection*/

   /* ------------------------------------------------------------*/
   /* Highlight key field if it was changed.*/
   /* ------------------------------------------------------------*/

  if (AV01M001.AV01MOPT != AV01W01.AV01MOPT) /* List Option*/

    AVWREC.XXXMODID = "510"; /* Module identification*/
    set AV01M001.AV01MOPT cursor, bold; /* Highlight*/
    converseLib.validationFailed(275); /* Modifications not allowed*/

  end


end // end AV01510

// Highlight any selection
Function AV01511()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/

  AV01W00.AV01WIXM = 15; /* Initialize line index*/

  while (AV01W00.AV01WIXM > 0) /* Until end of lines*/

    if (AV01M001.AV01MSEL[AV01WIXM] > " " /* Selection entered*/
     && AV01M001.AV01MSEL[AV01WIXM] != "V") /* and not equal '*'*/

      AVWREC.XXXMODID = "511"; /* Module identification*/
      set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(275); /* Modifications not allowed*/

    end

    AV01W00.AV01WIXM = AV01W00.AV01WIXM - 1; /* Decrement line number*/

  end


end // end AV01511

// Verify the key fields
Function AV01520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  AV01521(); /* Highlight any selection*/

   /* ------------------------------------------------------------*/
   /* If list option is missing, default it to 'a'.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.AV01MOPT == " ") /* If list option missing*/
    AV01M001.AV01MOPT = "A"; /* Default to 'a'*/
  end

   /* ------------------------------------------------------------*/
   /* Validate list option.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.AV01MOPT == "A"
   || AV01M001.AV01MOPT == "I"
   || AV01M001.AV01MOPT == "B")

    /* NEXT SENTENCE*/

  else

    /* --------------------------------------------------------*/
     /* Indicate option is invalid.*/
    /* --------------------------------------------------------*/
    AVWREC.XXXMODID = "520"; /* Module identification*/
    set AV01M001.AV01MOPT cursor, bold; /* Highlight*/
    converseLib.validationFailed(286); /* Indicate invalid*/

  end


end // end AV01520

// Highlight any selection
Function AV01521()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/

  AV01W00.AV01WIXM = 15; /* Initialize line index*/

  while (AV01W00.AV01WIXM > 0) /* Until end of lines*/

    if (AV01M001.AV01MSEL[AV01WIXM] > " " /* Selection entered*/
     && AV01M001.AV01MSEL[AV01WIXM] != "V") /* and not equal '*'*/

      AVWREC.XXXMODID = "521"; /* Module identification*/
      set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(276); /* Modifications not allowed*/

    end

    AV01W00.AV01WIXM = AV01W00.AV01WIXM - 1; /* Decrement line number*/

  end


end // end AV01521

// Verify detail
Function AV01530()
   /* ------------------------------------------------------------*/
   /* Reset description fields when codes are blank.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.AVGBPIND[AV01WIXM] == " ") /* If blank progrm indicator*/
    AV01M001.AV01WOPD[AV01WIXM] = " ";
  end

  if (AV01M001.XOWCD[AV01WIXM] == " ") /* If Owner Group blank*/
    AV01M001.XOWDESC[AV01WIXM] = " ";
  end

   /* ------------------------------------------------------------*/
   /* If line is blank, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.XXXSTAT[AV01WIXM] == " "
   && AV01M001.AV01MDT3[AV01WIXM] == " "
   && AV01M001.AV01MDT2[AV01WIXM] == " "
   /* AND AV01M001.AV01MDT1(AV01WIXM) EQ ' ';*/
   && AV01M001.AVGBPIND[AV01WIXM] == " "
   && AV01M001.XOWCD[AV01WIXM] == " ")

    return;
  end

   /* ------------------------------------------------------------*/
   /* Set modified data switch to 'y'.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.XXXSTAT[AV01WIXM] != AV01W01.XXXSTAT[AV01WIXM]
   || AV01M001.AV01MDT3[AV01WIXM] != AV01W01.AV01MDT3[AV01WIXM]
   || AV01M001.AV01MDT2[AV01WIXM] != AV01W01.AV01MDT2[AV01WIXM]
   /* OR AV01M001.AV01MDT1(AV01WIXM) NE AV01W01.AV01MDT1(AV01WIXM)*/
   || AV01M001.AVGBPIND[AV01WIXM] != AV01W01.AVGBPIND[AV01WIXM]
   || AV01M001.XOWCD[AV01WIXM] != AV01W01.XOWCD[AV01WIXM])

    AVWREC.AVWMODSW = "Y"; /* Modified Data switch*/
  end

   /* ------------------------------------------------------------*/
   /* All fields required when selection code is*/
        /* (A)dd (C)hg or (D)el*/
   /* ------------------------------------------------------------*/

  if (AV01M001.AV01MSEL[AV01WIXM] == "A" /* If 'a' entered*/
   || AV01M001.AV01MSEL[AV01WIXM] == "C" /* If 'c' entered*/
   || AV01M001.AV01MSEL[AV01WIXM] == "D") /* If 'd' entered*/

    if (AV01M001.XXXSTAT[AV01WIXM] == " ") /* If status blank*/

      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV01M001.XXXSTAT[AV01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(286); /* Indicate missing*/

    end

    if (AV01M001.AV01MDT3[AV01WIXM] == 0) /* If cutoff date blank*/

      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV01M001.AV01MDT3[AV01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(286); /* Indicate missing*/

    end

    if (AV01M001.AV01MDT2[AV01WIXM] == 0) /* If end date blank*/

      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV01M001.AV01MDT2[AV01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(286); /* Indicate missing*/

    end

    /* IF AV01M001.AV01MDT1(AV01WIXM) EQ 0  ; If begin date blank*/

     /* MOVE '530' TO AVWREC.XXXMODID      ; Module identification*/
     /* SET AV01M001.AV01MDT1(AV01WIXM) CURSOR,BRIGHT; Highlight*/
     /* MOVE 286 TO EZEMNO          ; Indicate missing*/

    /* END ;*/

    if (AV01M001.AVGBPIND[AV01WIXM] == " ") /* If blank progrm indicator*/

      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV01M001.AVGBPIND[AV01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(286); /* Indicate missing*/

    end

    if (AV01M001.XOWCD[AV01WIXM] == " ") /* If Owner Group blank*/

      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV01M001.XOWCD[AV01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(286); /* Indicate missing*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify status.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.XXXSTAT[AV01WIXM] != AV01W01.XXXSTAT[AV01WIXM])

    if (AV01M001.XXXSTAT[AV01WIXM] == "A" /* active*/
     || AV01M001.XXXSTAT[AV01WIXM] == "I") /* inactive*/
      /* NEXT SENTENCE*/
    else
      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV01M001.XXXSTAT[AV01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(286); /* Indicate missing*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify date FIELDS.*/
   /* ------------------------------------------------------------*/
  AV01531(); /* Validate Dates*/

   /* ------------------------------------------------------------*/
   /* Verify program indicator.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.AVGBPIND[AV01WIXM] != " ") /* If blank progrm indicator*/

    if (AV01M001.AVGBPIND[AV01WIXM] == "B" /* Blank Bulk*/
     || AV01M001.AVGBPIND[AV01WIXM] == "M" /* Special Makeup*/
     || AV01M001.AVGBPIND[AV01WIXM] == "T" /* Custom Tee*/
     || AV01M001.AVGBPIND[AV01WIXM] == "S" /* Special Custom Tee*/
     || AV01M001.AVGBPIND[AV01WIXM] == "C") /* mary special*/

      AV01532(); /* Populate description*/

    else
      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV01M001.AVGBPIND[AV01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(286); /* Indicate missing*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify owner group.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.XOWCD[AV01WIXM] != AV01W01.XOWCD[AV01WIXM])

    AV01533(); /* Validate Owner Group*/

  end


end // end AV01530

// Validate Dates
Function AV01531()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* VALIDATE END DATE.*/
   /* ------------------------------------------------------------*/
  AV01W00.AV01WMSK = AV01M001.AV01MDT3[AV01WIXM]; /* mask*/

   /* ------------------------------------------------------------*/
    /* Look for space in first character of date.*/
   /* ------------------------------------------------------------*/
  if (AV01W00.AV01WMK1 == " ")
    AV01W00.AV01WMK1 = "0";
  end

  TA2REC.TA2GRGA = AV01W00.AV01WMSK; /* MMDDYY*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";

   /* ------------------------------------------------------------*/
    /* CALL TO TA0040.*/
   /* ------------------------------------------------------------*/
  try
    call "TA0040" (TA2REC) {isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* Check return code.*/
   /* ------------------------------------------------------------*/
  if (TA2REC.TA2RTNCD == 0) /* If end date is valid*/

    /* ------------------------------------------------------------*/
      /* Check if end date is greater than (today minus six months)*/
      /* TA2GRGG  - CCYYMMDD Date*/
      /* AV01WFDT - (Today - Six months)*/
    /* ------------------------------------------------------------*/
    AV01W01.AVGEENDT[AV01WIXM] = TA2REC.TA2GRGGN;

  else
    /* ------------------------------------------------------------*/
      /* Indicate that the end date is invalid.*/
    /* ------------------------------------------------------------*/
    AVWREC.XXXMODID = "531";
    converseLib.validationFailed(95); /* Indicate invalid date*/
    set AV01M001.AV01MDT2[AV01WIXM] cursor, bold;
  end

   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* VALIDATE BEGIN DATE*/
   /* ------------------------------------------------------------*/
  AV01W00.AV01WMSK = AV01M001.AV01MDT2[AV01WIXM]; /* mask*/

   /* ------------------------------------------------------------*/
    /* Look for space in first character of date.*/
   /* ------------------------------------------------------------*/
  if (AV01W00.AV01WMK1 == " ")
    AV01W00.AV01WMK1 = "0";
  end

  TA2REC.TA2GRGA = AV01W00.AV01WMSK; /* MMDDYY*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";

   /* ------------------------------------------------------------*/
    /* CALL TO TA0040 - Validate Date for 023199 - invlaid days*/
   /* ------------------------------------------------------------*/
  try
    call "TA0040" (TA2REC) {isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* Check return code.*/
   /* ------------------------------------------------------------*/
  if (TA2REC.TA2RTNCD == 0) /* If beg date is valid*/

    /* ------------------------------------------------------------*/
      /* TA2GRGG  - CCYYMMDD Date*/
    /* ------------------------------------------------------------*/
    AV01W01.AVGBENDT[AV01WIXM] = TA2REC.TA2GRGGN;

    /* ------------------------------------------------------------*/
      /* END DATE MUST BE GREATER THAN BEGIN DATE*/
      /* Check if end date is greater than (today minus six months)*/
    /* ------------------------------------------------------------*/
    if (AV01W01.AVGEENDT[AV01WIXM] >= AV01W01.AVGBENDT[AV01WIXM])
       /* next sentence*/
    else
      AVWREC.XXXMODID = "531";
      converseLib.validationFailed(179);
      set AV01M001.AV01MDT2[AV01WIXM] cursor, bold;
      set AV01M001.AV01MDT3[AV01WIXM] bold;
    end

  else
    /* ------------------------------------------------------------*/
      /* Indicate that the beg date is invalid.*/
    /* ------------------------------------------------------------*/
    AVWREC.XXXMODID = "531";
    converseLib.validationFailed(95); /* Indicate invalid date*/
    set AV01M001.AV01MDT2[AV01WIXM] cursor, bold;
  end

   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Validate cutoff date.*/
   /* ------------------------------------------------------------*/
   /* MOVE AV01M001.AV01MDT1(AV01WIXM) TO AV01W00.AV01WMSK; mask*/

   /* ------------------------------------------------------------*/
    /* Look for space in first character of date.*/
   /* ------------------------------------------------------------*/
   /* IF AV01W00.AV01WMK1 EQ ' ';*/
    /* MOVE '0' TO AV01W00.AV01WMK1;*/
   /* END ;*/

   /* MOVE AV01W00.AV01WMSK TO TA2REC.TA2GRGA; MMDDYY*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/

   /* MOVE 0 TO TA2REC.TA2RTNCD;*/
   /* MOVE 'GREGGREG' TO TA2REC.TA2DTOPT;*/
   /* MOVE 'A' TO TA2REC.TA2GRTYP;*/

   /* ------------------------------------------------------------*/
    /* CALL TO TA0040.*/
   /* ------------------------------------------------------------*/
   /* cALL TA0040 TA2REC (NONCSP,REPLY;*/

   /* ------------------------------------------------------------*/
    /* Check return code.*/
   /* ------------------------------------------------------------*/
   /* IF TA2REC.TA2RTNCD EQ 0         ; If cutoff date valid*/
    /* MOVE TA2REC.TA2GRGGN TO AV01W01.OPJCUTDT(AV01WIXM);*/

   /* ELSE ;*/
   /* ------------------------------------------------------------*/
    /* Indicate that the end date is invalid.*/
   /* ------------------------------------------------------------*/

    /* MOVE '531' TO AVWREC.XXXMODID;*/
    /* MOVE 95 TO EZEMNO             ; Indicate invalid date*/
    /* SET AV01M001.AV01MDT1(AV01WIXM) CURSOR,BRIGHT;*/

   /* END ;*/


end // end AV01531

// Determine descriptions
Function AV01532()
   /* ------------------------------------------------------------*/
   /* Determine program description.*/
   /* ------------------------------------------------------------*/

  if (AV01M001.AVGBPIND[AV01WIXM] == "B")
    AV01M001.AV01WOPD[AV01WIXM] = "BLANK BULK";
  end

  if (AV01M001.AVGBPIND[AV01WIXM] == "M")
    AV01M001.AV01WOPD[AV01WIXM] = "SPECIAL MKUP";
  end

  if (AV01M001.AVGBPIND[AV01WIXM] == "S")
    AV01M001.AV01WOPD[AV01WIXM] = "SPCL CUS-TEE";
  end

  if (AV01M001.AVGBPIND[AV01WIXM] == "T")
    AV01M001.AV01WOPD[AV01WIXM] = "CUSTOM-TEE  ";
  end

  if (AV01M001.AVGBPIND[AV01WIXM] == "C")
    AV01M001.AV01WOPD[AV01WIXM] = "MARY SPECIAL";
  end


end // end AV01532

// Validate Owner Group
Function AV01533()
   /* ------------------------------------------------------------*/
   /* Verify owner group code valid.*/
   /* ------------------------------------------------------------*/
  XOWREC.XOWCD = AV01M001.XOWCD[AV01WIXM]; /* Format key*/
  XOWREC.XWHCD = AV01W00.XWHCD; /* Format key*/

  if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    AV01M001.XOWDESC[AV01WIXM] = XOWTBL.XOWDESC[sysVar.arrayIndex]; /* Abrv*/

  else

    /* --------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* --------------------------------------------------------*/
    AV01M001.XOWDESC[AV01WIXM] = " "; /* Abbreviation*/

    AVWREC.XXXMODID = "533"; /* Module identification*/
    set AV01M001.XOWCD[AV01WIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(295); /* Indicate missing or invalid*/

  end


end // end AV01533

// Verify selection
Function AV01540()
   /* ------------------------------------------------------------*/
   /* Verify only 's', 'a', 'd', or '*' entered.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.AV01MSEL[AV01WIXM] != "S" /* Valid selection character*/
   && AV01M001.AV01MSEL[AV01WIXM] != "A" /* Valid selection character*/
   && AV01M001.AV01MSEL[AV01WIXM] != "C" /* Valid selection character*/
   && AV01M001.AV01MSEL[AV01WIXM] != "D" /* Valid selection character*/
   && AV01M001.AV01MSEL[AV01WIXM] != "V" /* Valid selection character*/
   && AV01M001.AV01MSEL[AV01WIXM] != " ") /* Blank selection character*/

    AVWREC.XXXMODID = "540"; /* Module identification*/
    set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(116); /* Indicate invalid option selected*/

  else
    /* ------------------------------------------------------------*/
     /* Verify if 's' entered, that product exists.*/
    /* ------------------------------------------------------------*/

    if (AV01M001.AV01MSEL[AV01WIXM] == "S") /* If 's' entered*/

      if (AV01M001.AV01WPSW[AV01WIXM] != "Y") /* If product not from D/B*/
        AVWREC.XXXMODID = "540"; /* Module identification*/
        set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(295); /* Indicate program not there*/
      end

      /* ------------------------------------------------------------*/
       /* Verify only one 's' can be entered at a time.*/
      /* ------------------------------------------------------------*/
      AV01W00.AV01WIX2 = AV01W00.AV01WIXM - 1; /* Set counter*/

      while (AV01W00.AV01WIX2 > 0) /* While counter greater than 0*/

        if (AV01M001.AV01MSEL[AV01WIX2] == "S") /* If any other '*'*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(277); /* More than one selection*/
        end

        AV01W00.AV01WIX2 = AV01W00.AV01WIX2 - 1; /* Decrement counter*/

      end

      /* ------------------------------------------------------------*/
       /* Verify program has active status.*/
      /* ------------------------------------------------------------*/
     /* IF AV01M001.XXXSTAT(AV01WIXM) EQ 'I'; /* If program not active*/
       /* MOVE '540' TO AVWREC.XXXMODID;     /* Module identification*/
       /* SET AV01M001.AV01MSEL(AV01WIXM) CURSOR,BRIGHT; /* Highlight*/
       /* MOVE 294 TO EZEMNO;         /* Indicate program not active*/
     /* END;*/
      /* commented 3-10-92*/
    end

    /* ------------------------------------------------------------*/
     /* Verify if 'a', 'c' or 'd' entered, that security exists:*/
    /* ------------------------------------------------------------*/
    if ("D" in AV01M001.AV01MSEL /* If any 'd' entered*/
     || "C" in AV01M001.AV01MSEL /* Or any 'c' entered*/
     || "A" in AV01M001.AV01MSEL) /* Or any 'a' entered*/

      if (AV01W00.AV01WSSW != "Y") /* If no security clearance*/
        AVWREC.XXXMODID = "540"; /* Module identification*/
        set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(278); /* Indicate no security clearance*/

        return;

      else
        AVWREC.AVWMODSW = "Y"; /* Modified data switch*/

      end

      /* ------------------------------------------------------------*/
       /* Verify no 's' was entered with 'a', 'c' or 'd'.*/
      /* ------------------------------------------------------------*/
      if ("S" in AV01M001.AV01MSEL) /* If any 's' entered*/
        AVWREC.XXXMODID = "540"; /* Module identification*/
        set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(277); /* Indicate too many selections*/

      end

      /* ------------------------------------------------------------*/
       /* Verify if 'a' entered, all fields entered*/
      /* ------------------------------------------------------------*/
      if (AV01M001.AV01MSEL[AV01WIXM] == "A") /* If 'a' entered*/

        if (AV01M001.XXXSTAT[AV01WIXM] == " ") /* Status*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV01M001.XXXSTAT[AV01WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(286); /* Indicate missing*/
        end

        if (AV01M001.AV01MDT3[AV01WIXM] == " ") /* End date*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV01M001.AV01MDT3[AV01WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(286); /* Indicate missing*/
        end

        if (AV01M001.AV01MDT2[AV01WIXM] == " ") /* Begin date*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV01M001.AV01MDT2[AV01WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(286); /* Indicate missing*/
        end

        /* IF AV01M001.AV01MDT1(AV01WIXM) EQ ' '; Cutoff DATE*/
         /* MOVE '540' TO AVWREC.XXXMODID  ; Module identification*/
         /* SET AV01M001.AV01MDT1(AV01WIXM) CURSOR,BRIGHT; Highlight*/
         /* MOVE 286 TO EZEMNO      ; Indicate missing*/
        /* END ;*/

        if (AV01M001.AVGBPIND[AV01WIXM] == " ") /* Program indicator*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV01M001.AVGBPIND[AV01WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(286); /* Indicate missing*/
        end

        if (AV01M001.XOWCD[AV01WIXM] == " ") /* Owner Group*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV01M001.XOWCD[AV01WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(286); /* Indicate missing*/
        end

        /* ------------------------------------------------------------*/
         /* If 'a' entered, verify that this is not a protected line.*/
         /* (If protected, this product exists on D/B.)*/
         /* Can't ADD a record that already exists*/
        /* ------------------------------------------------------------*/
        if (AV01M001.AV01WPSW[AV01WIXM] == "Y") /* If pgm exists*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(293); /* Indicate product already exists*/
        else

          /* ------------------------------------------------------------*/
           /* Otherwise check BLNKP for row.  (It could be on different*/
           /* line other than the one where 'a' is entered.)*/
          /* ------------------------------------------------------------*/
          AV01541(); /* Select BLNKP*/

          if (SQLCA.VAGen_SQLCODE == 0) /* If program found*/
            AVWREC.XXXMODID = "540"; /* Module identification*/
            set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(293); /* Indicate product already exists*/
          end
          /* ------------------------------------------------------------*/
           /* Also check BLNKP for row with same program indicator and*/
           /* same date range.  We cannot allow duplicates.*/
          /* ------------------------------------------------------------*/
          AV01542(); /* Select BLNKP*/

          if (SQLCA.VAGen_SQLCODE == 0 /* If call 0 or 100*/
           || SQLCA.VAGen_SQLCODE == 100)
            if (AV01W04.AV01WCNT > 0) /* If row found*/
              AVWREC.XXXMODID = "540"; /* Module identification*/
              set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
              converseLib.validationFailed(315); /* Indicate date range overlaps*/
            end
          end
        end

      end

      /* ------------------------------------------------------------*/
       /* Verify if 'c' or 'd' entered, that product exists.*/
      /* ------------------------------------------------------------*/
      if (AV01M001.AV01MSEL[AV01WIXM] == "D" /* If 'D' entered*/
       || AV01M001.AV01MSEL[AV01WIXM] == "C") /* If 'C' entered*/

        if (AV01M001.AV01WPSW[AV01WIXM] != "Y") /* If product not from D/B*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(295); /* Indicate program not exist*/
          return; /* Return to previous process*/
        end
      end

      if (AV01M001.AV01MSEL[AV01WIXM] == "C") /* If 'C' entered*/
        /* ------------------------------------------------------------*/
         /* If the date range changed, check that the new date range*/
         /* doesn't overlap an existing one. We can't allow duplicates.*/
        /* ------------------------------------------------------------*/
        if (AV01M001.AV01MDT2[AV01WIXM] != AV01W00.AV01WHDB[AV01WIXM]
         || AV01M001.AV01MDT3[AV01WIXM] != AV01W00.AV01WHDE[AV01WIXM])

          /* --------------------------------------------------------*/
           /* Check BLNKP for row with same program indicator and same*/
           /* date range.  We cannot allow duplicates.*/
          /* --------------------------------------------------------*/
          AV01542(); /* Select BLNKP*/

          if (SQLCA.VAGen_SQLCODE == 0 /* If call 0 or 100*/
           || SQLCA.VAGen_SQLCODE == 100)
            if (AV01W04.AV01WCNT > 0) /* If row found*/
              AVWREC.XXXMODID = "540"; /* Module identification*/
              set AV01M001.AV01MSEL[AV01WIXM] cursor, bold; /* Highlight*/
              converseLib.validationFailed(315); /* Indicate date range overlaps*/
            end
          end
        end

      end
    end
  end


end // end AV01540

// Select BLNKP
Function AV01541()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVGREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  AVGREC.XOWCD = AV01M001.XOWCD[AV01WIXM]; /* Program*/

   /* ------------------------------------------------------------*/
   /* Select BLNKP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" ("S ", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "541"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01541

// Select BLNKP for count
Function AV01542()
   /* ------------------------------------------------------------*/
   /* Clear copybooks.*/
   /* ------------------------------------------------------------*/

  set AVGREC empty; /* Clear copybook*/
  set AVIREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format AV01W04.*/
   /* ------------------------------------------------------------*/

  AV01W04.AV01WFCN = "SC"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Format keys for AVGREC.*/
   /* ------------------------------------------------------------*/

  AVGREC.AVGBPIND = AV01M001.AVGBPIND[AV01WIXM]; /* Pgm ind*/
  AVGREC.XOWCD = AV01M001.XOWCD[AV01WIXM]; /* owner code*/
  AVGREC.AVGBENDT = AV01W01.AVGBENDT[AV01WIXM]; /* Beg dt*/
  AVGREC.AVGEENDT = AV01W01.AVGEENDT[AV01WIXM]; /* End dt*/

   /* ------------------------------------------------------------*/
   /* Select BLNKP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" (AV01W04, SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "542"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "COUNT ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01542

// Process valid input request
Function AV01600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  AV01W00.AV01WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the key was changed, update av01w00 and request data.*/
   /* ------------------------------------------------------------*/
  if (AV01M001.AV01MOPT != AV01W01.AV01MOPT) /* list option*/

    AV01W01.AV01MOPT = AV01M001.AV01MOPT; /* List Option*/
    AV01W00.AV01WSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    AV01W00.XXXTSPAG = AV01W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    AV01W00.XXXTSPAG = AV01W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If line was selected, transfer to display the forecast.*/
   /* ------------------------------------------------------------*/
  if ("S" in AV01M001.AV01MSEL) /* Program selected*/

    AVWREC.XOWCD = AV01W01.XOWCD[sysVar.arrayIndex]; /* Move Owner Group Code*/
    AVWREC.XOWDESC = AV01W01.XOWDESC[sysVar.arrayIndex]; /* Move owner grp name*/
    AVWREC.AVGBPIND = AV01W01.AVGBPIND[sysVar.arrayIndex]; /* Move pgm indicator*/

    AV01W01.AV01MSEL[sysVar.arrayIndex] = "V";
    AVWREC.AVWCURPG[1] = AV01W00.XXXTSPAG; /* Move current page nbr*/
    AVWREC.AVWMAXPG[1] = AV01W00.TA5TSQIX; /* Move max page nbr*/

    COMMAREA.CATOAP = "AV02"; /* TO application*/

    AV01610(); /* Update display storage*/
    AV01620(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If PF9 comfire pressed, process adds and deletes.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9) /* If PF9 was pressed*/

    AVWREC.XXXMSGNO = 0; /* Clear message out*/
    AVWREC.AVWMODSW = "N"; /* Clear modified data switch*/
    /* ------------------------------------------------------------*/
     /* If programs marked deleted on screen, delete from BLNKP.*/
    /* ------------------------------------------------------------*/
    if ("D" in AV01M001.AV01MSEL) /* Program(s) to be deleted*/

      AV01W00.AV01WIXM = 1; /* Initialize line index*/

      while (AV01W00.AV01WIXM <= 15) /* Until screen is full*/
        if (AV01M001.AV01MSEL[AV01WIXM] == "D") /* and line deleted*/

          AV01630(); /* Select BLNKP*/

          if (SQLCA.VAGen_SQLCODE == +0) /* row found*/
            AV01640(); /* Delete BLNKP*/
          end
        end
        AV01W00.AV01WIXM = AV01W00.AV01WIXM + 1; /* Increment line index*/

      end
      AV01W00.AV01WSWR = "Y"; /* Request for data switch*/
    end

    /* ------------------------------------------------------------*/
     /* If programs marked changed on screen, delete from BLNKP.*/
    /* ------------------------------------------------------------*/
    if ("C" in AV01M001.AV01MSEL) /* Program(s) to be changed*/

      AV01W00.AV01WIXM = 1; /* Initialize line index*/

      while (AV01W00.AV01WIXM <= 15) /* Until screen is full*/
        if (AV01M001.AV01MSEL[AV01WIXM] == "C") /* and line deleted*/

          AV01630(); /* Select BLNKP*/

          if (SQLCA.VAGen_SQLCODE == +0) /* row found*/
            AV01650(); /* Update BLNKP*/
          end
        end

        AV01W00.AV01WIXM = AV01W00.AV01WIXM + 1; /* Increment line index*/

      end
      AV01W00.AV01WSWR = "Y"; /* Request for data switch*/
    end

    /* ------------------------------------------------------------*/
     /* If programs added on screen, insert in BLNKP.*/
    /* ------------------------------------------------------------*/
    if ("A" in AV01M001.AV01MSEL) /* Program(s) to be inserted*/

      AV01W00.AV01WIXM = 1; /* Initialize line index*/

      while (AV01W00.AV01WIXM <= 15) /* Until screen is full*/
        if (AV01M001.AV01MSEL[AV01WIXM] == "A") /* and line added*/

          AV01630(); /* Select BLNKP*/

          if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
            AV01660(); /* Insert BLNKP*/
          end
        end

        AV01W00.AV01WIXM = AV01W00.AV01WIXM + 1; /* Increment line index*/

      end
      AV01W00.AV01WSWR = "Y"; /* Request for data switch*/
    end

  else
    /* ------------------------------------------------------------*/
     /* Load the map into storage.*/
    /* ------------------------------------------------------------*/
    AV01W00.AV01WIXM = 1; /* Initialize line index*/

    while (AV01W00.AV01WIXM <= 15) /* Until screen is full*/

      AV01670(); /* Load map to W01*/

      AV01W00.AV01WIXM = AV01W00.AV01WIXM + 1; /* Increment line index*/

    end
  end


end // end AV01600

// Update temporary storage
Function AV01610()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  AV01W01.XXXTSLEN = AV01W00.XXXTSLEN; /* page length*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (AV01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  AVWREC.XXXMODID = "610"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01610

// Transfer to AV02
Function AV01620()
   /* ------------------------------------------------------------*/
   /* Transfer control to AV02.*/
   /* ------------------------------------------------------------*/

  XPAV003(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/

  exit stack; /* Exit to display map*/


end // end AV01620

// Select BLNKP
Function AV01630()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVGREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  AVGREC.XOWCD = AV01M001.XOWCD[AV01WIXM]; /* Owner grp*/

   /* ------------------------------------------------------------*/
   /* Select BLNKP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" ("S ", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "630"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01630

// Delete BLNKP
Function AV01640()
   /* ------------------------------------------------------------*/
   /* Delete BLNKP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" ("D ", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/

      AV01S03(); /* Delete BLINKS*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "640"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01640

// Update BLNKP
Function AV01650()
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  AVGREC.XOWCD = AV01M001.XOWCD[AV01WIXM];
  AVGREC.AVGBPIND = AV01M001.AVGBPIND[AV01WIXM];
  AVGREC.OPJCUTDT = AV01W01.OPJCUTDT[AV01WIXM];
  AVGREC.AVGBENDT = AV01W01.AVGBENDT[AV01WIXM];
  AVGREC.AVGEENDT = AV01W01.AVGEENDT[AV01WIXM];
  AVGREC.XXXSTAT = AV01M001.XXXSTAT[AV01WIXM];

  AVGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AVGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update DAVAIL.VBLNKP01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" ("U ", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "650"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01650

// Insert BLNKP
Function AV01660()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVGREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  AVGREC.XOWCD = AV01M001.XOWCD[AV01WIXM];
  AVGREC.AVGBPIND = AV01M001.AVGBPIND[AV01WIXM];
  AVGREC.OPJCUTDT = AV01W01.OPJCUTDT[AV01WIXM];
  AVGREC.AVGBENDT = AV01W01.AVGBENDT[AV01WIXM];
  AVGREC.AVGEENDT = AV01W01.AVGEENDT[AV01WIXM];
  AVGREC.XXXSTAT = AV01M001.XXXSTAT[AV01WIXM];

  AVGREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  AVGREC.ZZZCHGDT = XX0XW01.XX0XWTIM; /* Setup time*/
  AVGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/

   /* ------------------------------------------------------------*/
   /* Insert DAVAIL.VBLNKP01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" ("A ", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "660"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01660

// Save map in working Storage
Function AV01670()
   /* ------------------------------------------------------------*/
   /* Load the styles from screen to storage (W01).*/
   /* ------------------------------------------------------------*/

  AV01W01.AV01MOPT = AV01M001.AV01MOPT; /* List option*/
  AV01W01.AV01MSEL[AV01WIXM] = AV01M001.AV01MSEL[AV01WIXM]; /* Select*/

  AV01W01.XOWCD[AV01WIXM] = AV01M001.XOWCD[AV01WIXM]; /* Owner grp*/
  AV01W01.XOWDESC[AV01WIXM] = AV01M001.XOWDESC[AV01WIXM]; /* Owner desc*/

  AV01W01.AVGBPIND[AV01WIXM] = AV01M001.AVGBPIND[AV01WIXM];
                                   /* Pgm ind*/
  AV01W01.AV01WOPD[AV01WIXM] = AV01M001.AV01WOPD[AV01WIXM]; /* Pgm desc*/

  AV01W01.AV01MDT1[AV01WIXM] = AV01M001.AV01MDT1[AV01WIXM]; /* cutoff dt*/
  AV01W01.AV01MDT2[AV01WIXM] = AV01M001.AV01MDT2[AV01WIXM]; /* Beg dt*/
  AV01W01.AV01MDT3[AV01WIXM] = AV01M001.AV01MDT3[AV01WIXM]; /* End dt*/

  AV01W01.XXXSTAT[AV01WIXM] = AV01M001.XXXSTAT[AV01WIXM]; /* Status*/
  AV01W01.AV01WPSW[AV01WIXM] = AV01M001.AV01WPSW[AV01WIXM]; /* Switch*/


end // end AV01670

// Purge temporary storage
Function AV01S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set AV01W01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current read number*/
  AV01W00.TA5TSQIX = 0; /* Max page number*/
  AV01W00.XXXTSPAG = 0; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (AV01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  AVWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01S01

// Determine today minus 6 months
Function AV01S02()
   /* ------------------------------------------------------------*/
   /* Get TODAY - 6 Months.*/
    /* AV01WFDT- From Date*/
   /* ------------------------------------------------------------*/

  AV01W00.AV01WFDT = 0;

  set TA2REC empty;

   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GETDATE";

  TA2REC.TA2GRTYP = "G";

  TA2REC.TA2DYAOD = -182;

   /* ------------------------------------------------------------*/
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(10);
    TA1REC.TA1LOC = "DETERMINE FROM DATE";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1MAPNO = "M001";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
    TA1REC.TA1PGMNO = AV01M001.XXXMODID;
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP;
    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    exit stack;
  end

  if (TA2RTNCD == 0)
    AV01W00.AV01WFDT = TA2REC.TA2GRGGN;
  else
    converseLib.validationFailed(10);
    TA1REC.TA1LOC = "PAD PARMS TO TA0040";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1MAPNO = "M001";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
    TA1REC.TA1PGMNO = AV01M001.XXXMODID;
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP;
    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    exit stack;
  end

   /* ------------------------------------------------------------*/




end // end AV01S02

// Delete BLNKS
Function AV01S03()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVHREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  AVHREC.XOWCD = AV01M001.XOWCD[AV01WIXM];

   /* ------------------------------------------------------------*/
   /* Delete BLNKS.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5470" ("D1", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV01S03

//*** RECORD=AV01W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AV01W00 type basicRecord
  10 AV01WIXM AV01WIXM ; 
  10 AV01WIX2 AV01WIX2 ; 
  10 AV01WSWC AV01WSWC ; 
  10 AV01WSWF AV01WSWF ; 
  10 AV01WSWR AV01WSWR ; 
  10 AV01WSSW AV01WSSW ; 
  10 AV01WBSW AV01WBSW ; 
  10 AV01WDSW AV01WDSW ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 XGPCD XGPCD ; 
  10 XWHCD XWHCD ; 
  10 * num(1) ; 
  10 AV01WFDT AV01WFDT ; 
  10 * num(1) ; 
  10 AV01WMSK AV01WMSK ; 
    15 AV01WMK1 AV01WMK1 ; 
    15 * char(5) ; 
  10 AV01WHDB AV01WHDB [15] ; 
  10 AV01WHDE AV01WHDE [15] ; 
end // end AV01W00

//*** RECORD=AV01W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record AV01W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1021) ; 
    10 AV01MOPT AV01MOPT ; 
    10 AV01MSEL AV01MSEL [15] ; 
    10 XOWCD XOWCD [15] ; 
    10 XOWDESC XOWDESC [15] ; 
    10 AVGBPIND AVGBPIND [15] ; 
    10 AV01WOPD AV01WOPD [15] ; 
    10 AV01MDT1 AV01MDT1 [15] ; 
    10 AV01MDT2 AV01MDT2 [15] ; 
    10 AV01MDT3 AV01MDT3 [15] ; 
    10 XXXSTAT XXXSTAT [15] ; 
    10 AV01WPSW AV01WPSW [15] ; 
    10 * char(180) ; 
      15 OPJCUTDT OPJCUTDT [15] ; 
      15 AVGBENDT AVGBENDT [15] ; 
      15 AVGEENDT AVGEENDT [15] ; 
end // end AV01W01

//*** RECORD=AV01W02 ****
// *************** substitution IO5480 pass record ************
// 
// DB2 table:         None
// 
// IOMOD:             None
// 
// 
// maintenance log:
// date        init      comments
// --------    ------    --------------------------------------
// 12-11-90    AHP       This record is used to convert dates
//                       to or from MMDDYY format.
// ************************************************************
// ***********************
Record AV01W02 type basicRecord
  5 AV01WGDT AV01WGDT ; 
    10 AV01WGMM AV01WGMM ; 
    10 AV01WGDD AV01WGDD ; 
    10 AV01WGYY AV01WGYY ; 
end // end AV01W02

//*** RECORD=AV01W03 ****
// **************** Database Date Work Record *****************
// 
// DB2 table:         DAVAIL.VBLNKP01
// 
// IOMOD:             IO5480
// 
// 
// maintenance log:
// date        init      comments
// --------    ------    --------------------------------------
// 12-11-90    AHP       This record is used to Convert DB
//                       dates from or to CCYYMMDD format.
// 
// ************************************************************
// ***********************
Record AV01W03 type basicRecord
  5 AV01WDDT AV01WDDT ; 
    10 AV01WFIL AV01WFIL ; 
    10 AV01WDCC AV01WDCC ; 
    10 AV01WDYY AV01WDYY ; 
    10 AV01WDMM AV01WDMM ; 
    10 AV01WDDD AV01WDDD ; 
end // end AV01W03

//*** RECORD=AV01W04 ****
// ********** SPECIAL FUNCTION I/O MODULE PARAMETERS **********
// 
// This record contains the function code and the beginning and
// ending months needed for special "count" function in IO5480.
// This record replaces the function literal that is passed as
// a parameter in the CALL statement.
// 
//    EXAMPLE:
//    --------
//    CALL IO5480 AV01W04,SQLCA,AVWREC (NOMAPS,NONCSP,REPLY;
// 
// ***********************
Record AV01W04 type basicRecord
  10 AV01WFCN AV01WFCN ; 
  10 * int ; 
  10 AV01WCNT AV01WCNT ; 
  10 * char(732) ; 
end // end AV01W04

// Cutoff date (MMDDYY)
DataItem AV01MDT1 char(6)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NEED DATE FROM (MMDDYY)
DataItem AV01MDT2 char(6)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NEED DATE TO (MMDDYY)
DataItem AV01MDT3 char(6)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Display option
DataItem AV01MOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection field (a/d/s/*)
DataItem AV01MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Blank page switch
DataItem AV01WBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// I/O module counter
DataItem AV01WCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV01WDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV01WDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV01WDDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV01WDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data found switch
DataItem AV01WDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV01WDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// I/O module function code
DataItem AV01WFCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TODAY - 6 MONTHS CCYYMMDD
DataItem AV01WFDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV01WFIL num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV01WGDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV01WGDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV01WGMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV01WGYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold D/B beg date for compare
DataItem AV01WHDB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold D/B end date for compare
DataItem AV01WHDE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem AV01WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem AV01WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// First character of date
DataItem AV01WMK1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Mask for dates
DataItem AV01WMSK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AVGBPIND Description
DataItem AV01WOPD char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From D/B switch
DataItem AV01WPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Security switch
DataItem AV01WSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem AV01WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem AV01WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem AV01WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

