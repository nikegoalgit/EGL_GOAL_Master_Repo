package av0a;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=AV0A ****
// 12-15-88   jwood  added NONCSP option to calls
// 12-15-88   jwood  added XSSEGTR logic
// 03-03-89   mblail added code to av0asla, av0asld,
//                   av0asma, av0asmd for 1 whse/product.
//                   changed av0as60 by moving close of
//                   cursor to avoid return code -502
//                   which was causing code to be skipped
//                   to verify whse/valid life cycle.
// 05-16-89   mblail changed xwhparnt to xwhcd and xsncd
//                   to xsecd because of table changes.
// 11-15-89   dbruih removed av1key from av0aw05
// 09-14-90   mgatre leave xdmcd and sy2clrid blank on screen.
//                   cange call to io0130 to use select set
//                   and fetch (s15,s16,s17,s18).
//                   corrected wildcard values for xdmcd, xsdcd
//                   and xpgcd.
// 100390     dbruih modify logic to handle color code for
//                   gpc 02.  change color io options to
//                   accommodate wildcarded dimension.
// 101090     dbruih removed wildcards from davail.vavqty02 key
//                   load.
// 102490     dbruih modified to display product by inventory
//                   segment and package type when codes are
//                   entered and default codes to zeros when
//                   not entered.
// 121390     rpatte removed hard coded warehouse for apparel.
//                   created new set of calls to vavqty02 i-o.
//                   added warehouse to maps 2,4 & 7.
//                   added logic to move warehouse code from
//                   working storage areas as necessary.
// 031891     dbruih changed to use warehouse from map1 when
//                   transferring key to av0k (substitutions)
// 070291     dbruih increase table size of av0aw05-
//                   added overflow message to av0as50
// 082791     dbruih added logic and screens to display blank
//                   style quantity info for apparel products.
// 102391     dbruih added logic to not show availability for
//                   the blank style when the av control
//                   indicator for the finished style is equal
//                   to '4'.
// 032092     dbruih added blank owner code to av0aw11 to fix
//                   repeat display of blank availbility screen
// 040192     SCOCHR ADDED SY2ALNOR TO 1ST RESULT SCREEN FOR
//                   APPAREL AND FOOTWEAR
// 081892     dbruih changed cursor default to sy1stnbr(1)
//                   and added logic to put cursor on av0am001.
//                   xgpcd if blank.
// 091492     dbruih changed origin of allow new orders flag
//                   from dprodg.vsyclr01 to dprod.vcolor01
// 
// 100892     dbruih changed av4rec.xsacd to xegcd and av4rec.
//                   xsdcd to pcinseg for db2 tble chgs.
// 120192     dbruih removed code to display blank style qtys.
// 121792     dbruih restored code to display blank style qtys.
// 020993     dbruih removed default of whse '51' in av0as01
//                   to enable nsg processing.
// 031893     dbruih Changed to allow wildcarding of owner grp
//                   for GPC03, warehouses 25 & 51.
// 060193     pkhan  AV0205: SET DEFAULT WHSE TO 04 FOR GPC 01
// 061693     dbruih Changed av0as60, av0as65 to not use 's3',
//                   'n3' or 'c3' option when calling IO2370
//                   for lifecycle 20 products.  The options
//                   'ss','sn','cs' or 's2','n2','c2' will be
//                   used instead.  This will allow wildcarding
//                   of owner group and whse for closeouts.
// 061693     MSMIT2 REPLACE CALL TO SY1120 WITH PG1050.
// 091793     dbruih Changed av0as60, av0as65 to use 's3',
//                   'n3' or 'c3' option when calling IO2370
//                   for gpc lifecycle 20 or quality 02 product
// 012694     dhuffm Changed av0am002 to display future offer
//                   date.
// 070996  MCHOW   AV214  Added call to SY2000 to pick up
//                        Canadian overrides (allow new order
//                        flag, hot model flag, season code,
//                        future offer date).  Changes made
//                        to AV0AW05, AV0A, AV0AS-SY2ALNOR,
//                        AV0ASBB, AV0ASBD, AV0ASCD, AV0ASDD,
//                        AV0ASED, AV0ASKD, AV0AS75, AV0A030,
//                        AV0AS75-CAN, AV0A085-CAN.
// 093096  MCHOW   AV196  Added logic to handle Equipment
//                        products.  Changes made to AV0AM001,
//                        AV0AS-SY2ALNOR, AV0ASBC, AV0ASKD,
//                        AV0AS01, AV0AS05, AV0AS15, AV0AS19,
//                        AV0AS50, AV0AS55, AV0AS75, AV0AW01,
//                        AV0AW05, AV0A001, AV0A081.  Add new
//                        AV0A-0802, AV0A-0822, AV0A-0832,
//                        AV0A-0842, AV0A-0852, AV0A-0892,
//                        AV0AS-YSMREC-CLSE, AV0AS-YSMREC-CRSR,
//                        AV0AS-YSMREC-FTCH, AV0AS60-EQMT,
//                        AV0AS65-EQMT, AV0AW03, AV0AW04,
//                        AV0A003.
// 022697  MCHOW   AV196  Changed program to use EU0100 to
//                        identify Equipment products, instead
//                        of building and checking an internal
//                        table.  Also changed the Canadian SO
//                        check to occur up front and to set a
//                        flag to check in the rest of the
//                        program.  That way there is only one
//                        place in the program where Canadian
//                        SOs need to be maintained, instead of
//                        throughout the program.  Did the same
//                        with Equipment SOs.  Also made some
//                        changes in the way wildcarded
//                        warehouses handled.  Changed: AV0AW01
//                        AV0AW04, AV0A001, AV0A002, AV0A005,
//                        AV0A030, AV0A-0802, AV0A-0832,
//                        AV0A-0852, AV0AS-CHECK-EQMT,
//                        AV0AS-SYALNOR, AV0ASBA, AV0ASCA,
//                        AV0ASDA, AV0ASEA, AV0ASFA, AV0ASGA,
//                        AV0ASJA, AV0ASKA, AV0ASKD, AV0ASKE,
//                        AV0ASLA, AV0ASLD, AV0ASLE, AV0ASMA,
//                        AV0ASMD, AV0ASME, AV0AS01, AV0AS15,
//                        AV0AS50, AV0AS55, AV0AS75.
//                        Added: AV0AS-EQMT-AVAIL,
//                        AV0AS-EU0100-CS, AV0AS-EU0100-SN,
//                        AV0AS-EU0100-SS, AV0AS-EU0100-SU,
//                        AV0AS-SAME-PRODUCT, AV0AS-SAVE-EQMT.
// 040797  MCHOW   AV196  Changed the up-front Sales Office
//                        check to use a table instead of hard
//                        coded values.  Changed: AV0AW01,
//                        AV0A002.
// 061097  MCHOW   AV196  Corrected Previous Product (PF5)
//                        function for Equipment products,
//                        replacing the GPC 02 calculation
//                        (based on always having 3 warehouses
//                        per style/color) with a new statement
//                        group to just find the first
//                        occurrence of the previous product
//                        regardless of warehouse.  Changed
//                        AV0A030, AV0A035, AV0A040, AV0ASJA
//                        and AV0AW01.  Added AV0AS-FIND-FIRST.
// 081197  SREDDY  AV695B Enhance the application to display
//                        and process warehouse '27'.
// 070699  RRENUK  AV1616 Included whse 51 to process ftwr
//                        and equipment products - multi gpc
// 120299  RRENUK  PT220  Changed the EU0100 call option from
//                        'S' to 'SU' to improve performance.
// 013101  PSARKA  AV5215 Removed all references to whse code
//                        '27' in AV0A081, AV0ASOWNR & AV0AS55.
// 032901  SPITCH  AV5215 Removed all references to whse code
//                        '25' in AV0A081, AV0ASOWNR & AV0AS55.
// 060401  RSELVA  AV00   Fix to show Available quantities for
//                        valid sizes, ignoring invalid sizes.
//                        AV0ASBE,AV0ASCE,AV0ASDE,AV0ASEE,
//                        AV0ASKE,AV0ASLE,AV0ASME,AV0A236,
//                        AV0A246,AV0A256,AV0A266.
// 
// *********************
Program AV0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV0AW01 AV0AW01; // record
  AV0AW02 AV0AW02; // record
  AV0AW04 AV0AW04; // record
  AV0AW05 AV0AW05; // record
  AV0AW11 AV0AW11; // record
  AV5REC AV5REC; // record
  AV7REC AV7REC; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  OSFREC OSFREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VSYREG02 VSYREG02; // record
  WEU0100 WEU0100; // record
  WSY2000 WSY2000; // record
  XOWREC XOWREC; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AV01TBL {deleteAfterUse = yes}; // table
  use XCDTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use AV0AM.AV0AM001,  // forms
      AV0AM.AV0AM002, 
      AV0AM.AV0AM003, 
      AV0AM.AV0AM004, 
      AV0AM.AV0AM005, 
      AV0AM.AV0AM006, 
      AV0AM.AV0AM007, 
      AV0AM.AV0AM009, 
      AV0AM.AV0AM010, 
      AV0AM.AV0AM011
   {
    helpKey = pf1,
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AV0A001: AV0A001();
    goto AV0A002;
    AV0A002: AV0A002();
    goto AV0A005;
    AV0A005: AV0A005();
    if (AV0AW01.AV0AWFZ == "N")
      if (AV0AM001.XGPCD == "02")
        goto AV0A020;
      else
        goto AV0A010;

      end
    end
    if (AV0AW01.AV0AWFF == "Y")
      goto AV0A005;
    end

    if (converseVar.eventKey is pf12)
      goto AV0A005;
    end

    if (converseVar.eventKey is enter
     && AV0AW01.AV0AWHIT == "Y")
      if (AV0AW01.AV0AWX2 > 0)
        if (AV0AM001.XGPCD == "02")
          goto AV0A020;
        else
          goto AV0A010;

        end
      end
    end

    goto AV0A005;

    AV0A010: AV0A010();
    goto AV0A015;
    AV0A015: AV0A015();
    if (converseVar.eventKey is pf11)
      goto AV0A017;
    end

    if (converseVar.eventKey is pf3)
      goto AV0A002;
    end
    if (converseVar.eventKey is pa1)
      exit program;
    end

    goto AV0A015;
    AV0A017: AV0A017();
    if (converseVar.eventKey is pf10)
      goto AV0A015; /* converse map 1 of apparel*/
    end

    if (converseVar.eventKey is pf11)
      goto AV0A025; /* converse map 3 of apparel*/
    end

    if (converseVar.eventKey is pf3)
      goto AV0A002;
    end

    if (converseVar.eventKey is enter)
      if (AV0AW01.AV0AWFF == "Y")
        goto AV0A017;
      else
        goto AV0A015;
      end
    end

    if (converseVar.eventKey is pf5)
      if (AV0AW01.AV0AWFF == "Y")
        goto AV0A017;
      else
        goto AV0A015;
      end
    end

    if (converseVar.eventKey is pa1)
      exit program;
    end


    goto AV0A017;
    AV0A020: AV0A020();
    goto AV0A030;

    AV0A025: AV0A025();
    if (converseVar.eventKey is pf3)
      goto AV0A002;
    end

    if (converseVar.eventKey is pf10)
      goto AV0A017;
    end

    if (converseVar.eventKey is enter)
      if (AV0AW01.AV0AWFF == "Y")
        goto AV0A025;
      else
        goto AV0A015;
      end
    end

    if (converseVar.eventKey is pf5)
      if (AV0AW01.AV0AWFF == "Y")
        goto AV0A025;
      else
        goto AV0A015;
      end
    end




    goto AV0A025;
    AV0A030: AV0A030();
    if (converseVar.eventKey is pf8)
      goto AV0A035;
    end

    if (converseVar.eventKey is enter)
      goto AV0A030;
    end

    if (converseVar.eventKey is pf3)
      goto AV0A002;
    end

    if (converseVar.eventKey is pf5)
      goto AV0A030;
    end

    goto AV0A030;
    AV0A035: AV0A035();

    if (converseVar.eventKey is pf8)
      goto AV0A040;
    end

    if (converseVar.eventKey is pf7)
      goto AV0A030;
    end

    if (converseVar.eventKey is enter)
      if (AV0AW01.AV0AWFF == "Y")
        goto AV0A035;
      else
        goto AV0A030;
      end
    end

    if (converseVar.eventKey is pf5)
      if (AV0AW01.AV0AWFF == "Y")
        goto AV0A035;
      else
        goto AV0A030;
      end
    end

    if (converseVar.eventKey is pf3)
      goto AV0A002;
    end

    goto AV0A035;

    AV0A040: AV0A040();

    if (converseVar.eventKey is pf8)
      converseLib.validationFailed(011);
      goto AV0A040;
    end

    if (converseVar.eventKey is enter)
      if (AV0AW01.AV0AWFF == "Y")
        goto AV0A040;
      else
        goto AV0A030;
      end
    end

    if (converseVar.eventKey is pf5)
      if (AV0AW01.AV0AWFF == "Y")
        goto AV0A040;
      else
        goto AV0A030;
      end
    end

    if (converseVar.eventKey is pf3)
      goto AV0A002;
    end

    if (converseVar.eventKey is pf7)
      goto AV0A035;
    end

    goto AV0A040;
  end // end main
end // end AV0A

// get eqmt wildcard style data
Function AV0A-0802()
                        /* AV0A080-EQMT */
            /* get style data for wildcarded whse*/


  AV0A081(); /* load av5rec from map for select set*/
  AV0AW01.AV0AWHIT = "N"; /* move no to style found flag*/
  AV0A-0822(); /* select set from davail.vavhdr01 for equipment*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if select set successful*/
    AV0AW01.AV0AWEOC = "N"; /* set end of cursor flag to no*/

    while (AV0AW01.AV0AWEOC == "N" /* until end of cursor*/
     && AV0AW01.AV0AWX2 <= 99) /* or display-data-rec not full*/
      AV0A-0832(); /* load av0aw07 rec with style data for*/
                                   /* equipment warehouses*/
    end
  end

  AV0A-0892(); /* close davail.vavhdr01 cursor*/

end // end AV0A-0802

// declare cursor davail.vavhdr01
Function AV0A-0822()
   /* -------------------------AV0A082-EQMT----------------------------*/
                 /* select set davail.vavhdr01 data*/
   /* -------------------------AV0A082-EQMT----------------------------*/


  try
    call "IO2310" ("SD", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "082"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------AV0A082-EQMT----------------------------*/
end // end AV0A-0822

// select&move eqmt data av0aw05
Function AV0A-0832()
                        /* AV0A083-EQMT*/
    /* select next of select set and perform move to display rec*/

   /* test ****/
   /* MOVE 'N' TO AV0AW01.AV0AWHIT;    /* move no to style found flag*/
   /* test ****/

  AV0A-0842(); /* select next davail.vavhdr01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
    if (AV5REC.XWHCD == "09" /* promo whse*/
     || AV5REC.XWHCD == "12" /* promo whse*/
     || AV5REC.XWHCD == "15" /* B-GRADE whse*/
     || AV5REC.XWHCD == "42") /* Canadian whse*/
      return;
    else
      AV0AW01.AV0AWHIT = "Y"; /* move yes to style found flag*/
      AV0A-0852(); /* select from vavqty02 and move to save*/
    end
  else
    AV0AW01.AV0AWEOC = "Y"; /* move yes to end of cursor flag*/
  end
end // end AV0A-0832

// fetch eqmt row davail.vavhdr01
Function AV0A-0842()
   /* -------------------------AV0A084-EQMT----------------------------*/
              /* fetch next row of davail.vavhdr01 data*/
   /* -------------------------AV0A084-EQMT----------------------------*/


  try
    call "IO2310" ("ND", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "084"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------AV0A084-EQMT----------------------------*/
end // end AV0A-0842

// move data for each eqmt whse
Function AV0A-0852()
                        /* AV0A085-EQMT*/
        /* select data for each US Equipment Warehouse and move to save*/

  if (AV0AW01.AV0AWX2 < 100) /* if save record not full*/
    AV0AW01.AV0AWWH = AV5REC.XWHCD; /* set select warehouse*/
    AV0A086(); /* load key, select and move to save*/
  end

   /* test*/
   /* test*/
   /*  */
   /* IF AV0AW01.AV0AWX2 LT 100;       /* if save record not full*/
   /* MOVE '07' TO AV0AW01.AV0AWWH;  /* set select warehouse*/
   /* PERFORM AV0A086;               /* load key, select and move to save*/
   /* END;*/
   /* ;*/
   /* IF AV0AW01.AV0AWX2 LT 100;       /* if save record not full*/
   /* MOVE '70' TO AV0AW01.AV0AWWH;  /* set select warehouse*/
   /* PERFORM AV0A086;               /* load key, select and move to save*/
   /* END;*/
   /* ;*/
   /* IF AV0AW01.AV0AWX2 LT 100;       /* if save record not full*/
   /* MOVE '72' TO AV0AW01.AV0AWWH;  /* set select warehouse*/
   /* PERFORM AV0A086;               /* load key, select and move to save*/
   /* END;*/
   /* test*/
end // end AV0A-0852

// close cursor davail.vavhdr01
Function AV0A-0892()
   /* -------------------------AV0A089-EQMT----------------------------*/
              /* close cursor for davail.vavhdr01 data*/
   /* -------------------------AV0A089-EQMT----------------------------*/


  try
    call "IO2310" ("CD", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "089"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0a089-EQMT------------------------*/
end // end AV0A-0892

// PREPROCESS INTO AVAILABILITY
Function AV0A001()
    /* ************************************************************/
    /* * THE PURPOSE OF THIS PROCESS IS TO INITIALLY SETUP THE   **/
    /* * VARIABLES ON THE MAP AV0AM001, WHICH ARE KNOWN TO THE   **/
    /* * APPLICATION AT THIS TIME.  ALSO THERE WILL BE A SECURITY**/
    /* * CHECK PERFORMED BEFORE THE APPLICATION WILL CONTINUE    **/
    /* ************************************************************/

  XSENTRY(); /* CHECK FOR SECURITY VIOLATION*/

  XSSEGTR(); /* set segmented transaction id*/

  set AV0AM001 initial; /* INITIALIZE SCREEN*/
  set SQLCA empty; /* INITIALIZE Sqlca area*/
  set AV0AW01 empty; /* initialize ws*/
  set AV0AW04 empty; /* initialize ws*/

end // end AV0A001

// PREPROCESS INTO AVAILABILITY
Function AV0A002()
    /* *********************************************************/
    /* * THE PURPOSE OF THIS PROCESS IS TO INITIALLY SETUP THE**/
    /* * VARIABLES ON THE MAP AV0AM001, WHICH ARE KNOWN TO    **/
    /* * APPLICATION AT THIS TIME.  ALSO THERE WILL BE A SECUR**/
    /* * CHECK PERFORMED BEFORE THE APPLICATION WILL CONTINUE **/
    /* *********************************************************/
    /*  */
  set AV0AM001 initial; /* clear map*/
  AV0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* MOVE SYSTEM DATE TO MAP*/

   /* if message from transferring program, move message to map*/
   /* and display:*/
  if (COMMAREA.CAMSG != " ")
    AV0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    exit stack;
  end

   /* the following fields are saved on first entry*/
   /* so user does not have to reenter this info*/
   /* they will be blank at session start up*/

  if (AV0AW01.AV0AWZA <= " " /* saved whse*/
   && AV0AW01.AV0AWZB <= " " /* saved season code*/
   && AV0AW01.AV0AWZC <= 0   /* saved season year*/
   && AV0AW01.AV0AWZD <= " " /* saved owner code*/
   && AV0AW01.AV0AWZG <= " ") /* saved gpc code*/
    set AV0AW01 empty;
    AV0AM001.XGPCD = COMMAREA.XGPCD; /* gpc code from session*/
  else
    set AV0AM001.SY1STNBR[1] cursor, normal;
    AV0AM001.XGPCD = AV0AW01.AV0AWZG;
    AV0AM001.XWHCD = AV0AW01.AV0AWZA;
    AV0AM001.XOWCD = AV0AW01.AV0AWZD;
    AV0AM001.XQACD = AV0AW01.AV0AWZE;
    AV0AM001.XLCCD = AV0AW01.AV0AWZF;
  end

  if (AV0AM001.XGPCD in XGPTBL.XGPCD) /* SEARCH FOR GPC DESCRIPTION*/
    AV0AM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* FOUND IT*/
  else
     /* NEXT SENTENCE; DID NOT FIND IT*/
  end

  set AV0AW01 empty;
  set AV0AW02 empty;
  set AV0AW05 empty;

  if (AV0AM001.XQACD <= "  ")
    AV0AM001.XQACD = "01"; /* first quality*/
    AV0AM001.XLCCD = "10"; /* active life cycle*/
  end

  if (AV0AM001.XGPCD == "03")
      /* NEXT SENTENCE */
  else
    if (AV0AM001.XOWCD == "  ") /* if owner code not entered*/
      AV0AM001.XOWCD = "00"; /* default owner to 0*/
    end
  end

   /* Determine if logon id is for Canadian and/or Equipment user*/

  AV0AW01.AV0AW-AVXSO-FOUND = "N"; /* init SO found flag to no*/
  AV0AW01.AV0AW-CAN-SO = "N"; /* init Canadian SO flag to no*/
  AV0AW01.AV0AW-EQMT-SO = "N"; /* init Equipment SO flag to no*/
  sysVar.arrayIndex = 1; /* init eze subscript to 1*/

  if (COMMAREA.XSOCD != "  ") /* logon Sales Office not blank*/
    while (AV01TBL.XSOCD[sysVar.arrayIndex] != "99" /* not end of table marker*/
     && AV0AW01.AV0AW-AVXSO-FOUND == "N") /* and found flag is no*/
      if (COMMAREA.XSOCD == AV01TBL.XSOCD[sysVar.arrayIndex] /* logon SO = table SO*/
       && AV01TBL.XXXSTAT[sysVar.arrayIndex] == "A")         /* and table SO status active*/
        AV0AW01.AV0AW-CAN-SO = AV01TBL.AV-CAN-SO-FL[sysVar.arrayIndex];
        AV0AW01.AV0AW-EQMT-SO = AV01TBL.AV-EQMT-SO-FL[sysVar.arrayIndex];
        AV0AW01.AV0AW-AVXSO-FOUND = "Y"; /* set SO found flag to yes*/
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment ezetst*/
    end
  else
    if (COMMAREA.XSOCD == "  " /* logon Sales Office is blank*/
     && COMMAREA.XNDCD == "EQMT") /* Equipment Department Code*/
      AV0AW01.AV0AW-EQMT-SO = "Y"; /* set Equipment S O flag to 'y'es*/
    end
  end

end // end AV0A002

// MAIN MENU INTO AVAILABILITY
Function AV0A005()
  if (AV0AW01.AV0AWFZ == "N") /* error found in edits*/
    exit stack;
  end

   /* SET AV0AW05 EMPTY;*/
  set PG3REC empty;

  if (AV0AM001.XGPCD == " ")
    set AV0AM001.XGPCD cursor;
  end

  converse AV0AM001 ;
  AV0AW01.AV0AWFF = "N"; /* error flag*/

  AV0AM001.XXXMSG = " ";

  if (converseVar.eventKey is pa1)
    exit program;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "AV0M";
    XSEXIT();
    AV0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is enter)
    if (AV0AM001.CATOAP > " ")
      if (AV0AM001.CATOAP == "OP0L")
        converseLib.validationFailed(281);
                                   /* may not xfer to op0l from this screen*/
        AV0AM001.CATOAP = " "; /* clear 'to application' option*/
        exit stack;
      end /* ;*/
      if (AV0AM001.CATOAP == "AV0K") /* xfer to subs criteria search*/
        set AVWREC empty; /* clear commarea, send no data*/
        COMMAREA.CAUSERA = " ";
      end /* ;*/
      COMMAREA.CATOAP = AV0AM001.CATOAP;
      COMMAREA.CAITEM = AV0AM001.CAITEM;
      XSEXIT();
      AV0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CATOAP = " ";
      exit stack;
    end
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
    AV0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf12
   || converseVar.eventKey is enter)
    AV0AS01(); /* edit map fields*/
  end

  if (AV0AW01.AV0AWFF == "Y") /* if error(s) found in edits*/
    exit stack;
  end

  COMMAREA.XGPCD = AV0AM001.XGPCD;

  if (converseVar.eventKey is pf12
   || converseVar.eventKey is enter)
    AV0AS05(); /* get product descriptions*/
  end

  if (converseVar.eventKey is pf6
   || converseVar.eventKey is pf14)
    converseLib.validationFailed(15); /* invalid pfkey*/
    exit stack;
  end

  if (AV0AW01.AV0AWFF != "Y")
    if (converseVar.eventKey is enter)
      AV0AS45(); /* set up and select from availability*/
    end
  end
end // end AV0A005

// PREPROCESS FOR APPAREL
Function AV0A010()

     /* BUILD FIRST SET OF SCREENS WHEN APPLICATION FIRST ENTER*/
      /* ENTERS THIS PHASE*/

  AV0AW01.AV0AWX3 = 0;

  converseLib.validationFailed(017);

  AV0ASAA();

end // end AV0A010

// CONVERSE MAP 1 OF APPAREL
Function AV0A015()
  AV0AM002.XXXCURDT = VGVar.currentShortGregorianDate;

  if (AV0AM001.XGPCD != "01")
    AV0AM002.AV0AMNM1 = AV0AW02.AV0AWNM[1];
    AV0AM002.AV0AMNM2 = AV0AW02.AV0AWNM[2];
    AV0AM002.AV0AMNM3 = AV0AW02.AV0AWNM[3];
    AV0AM002.AV0AMNM4 = AV0AW02.AV0AWNM[4];
  end

  if (AV0AM001.XGPCD != "03") /* if not an apparel process*/
    set AV0AM002.AV0AM-MAP-PF13 invisible; /* do not show blank display option*/
  end

  set AV0AM002.CATOAP cursor;

  converse AV0AM002 ;
  if (converseVar.eventKey is pf11)
    exit stack;
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf5)
    if (AV0AW01.AV0AWX3 <= 4)
      converseLib.validationFailed(17);
      exit stack;
    else
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1;
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 / 4;
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1; /* RELATIVE PAGE NO*/
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1; /* PAGE NUMBER TO GO TO*/
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 * 4; /* LAST LINE FOR PREVIOUS PAGE*/
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 4;
                                   /* STARTING LINE NUMBER FOR AV0ASAA*/

      if (AV0AW01.AV0AWX3 <= 0)
        AV0AW01.AV0AWX3 = 0;
        converseLib.validationFailed(017);
        AV0ASAA();
        exit stack;
      else

        AV0ASAA();
        exit stack;
      end
    end
  end


  if (converseVar.eventKey is pf6) /* if request transfer to orders app op0l*/
    if (AV7REC.XLCCD == "10" /* if active lifecycle*/
     && AV7REC.XQACD == "01") /* and first quality product*/
      OSFREC.OSFGROUP = " "; /* clear orders system record*/
      OSFREC.XGPCD = COMMAREA.XGPCD; /* commarea gpc*/
                                           /* to orders rec gpc code*/
      OSFREC.SY1STNBR = AV0AM002.AV0AMST1; /* map style nbr to orders*/
                                                    /* rec style nbr*/
      OSFREC.SY2CLRID = AV0AM002.AV0AMCL1; /* map color cd to orders*/
                                                    /* rec color code*/
     /* MOVE AV0AM002.AV0AMDM1 TO OSFREC.XDMCD; /* map dimension*/
      OSFREC.XDMCD = "00"; /* map dimension*/
                                            /* code to orders rec*/
      COMMAREA.CATOAP = "OP0L";
      COMMAREA.CAITEM = AV0AM002.CAITEM;
      COMMAREA.CAUSERA = OSFREC.OSFGROUP; /* move osfrec to commarea*/
      XSEXIT();
      /* if transfer not successful, display error message*/
      AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      exit stack;
    else /* if not qualified product*/
      converseLib.validationFailed(280); /* product must lifecycle 10 and quality 01*/
      exit stack;
    end
  end

  if (converseVar.eventKey is pf13)
    AV0A200(); /* display blank style process*/
  end

   /* if request xfer to substitutions criteria select*/
  if (converseVar.eventKey is pf14)
    AV0A016(); /* move key fields*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is enter)
    if (AV0AM002.CATOAP > " ")
      if (AV0AM002.CATOAP == "OP0L") /* if request xfer to orders system*/
        converseLib.validationFailed(282); /* fastpath to op0l not allowed*/
        AV0AM002.CATOAP = " ";
        exit stack;
      end
       /* if request xfer to substitutions applications:*/
      if (AV0AM002.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't send key*/
        COMMAREA.CAUSERA = " ";
      end
      if (AV0AM002.CATOAP == "AV0J") /* subs table maintenance*/
        AV0A016(); /* move key fields*/
      end
      COMMAREA.CATOAP = AV0AM002.CATOAP;
      COMMAREA.CAITEM = AV0AM002.CAITEM;
      XSEXIT();
      AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      set AV0AM002.CATOAP cursor, modified, bold;
      exit stack;
    else
      if (AV0AW01.AV0AWX3 >= AV0AW01.AV0AWX2)
        converseLib.validationFailed(016);
        exit stack;
      else
        AV0ASAA();
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf3)
    exit stack;
  end

  converseLib.validationFailed(015);

end // end AV0A015

// move fields for xfer to subs
Function AV0A016()
   /* ------------------------- av0a016 --------------------------*/
      /* move key fields to avwrec and xfer to substitutions*/
                            /* av0am002*/
   /* ------------------------------------------------------------*/

   /* the first style/color on the map is moved*/

  set AVWREC empty; /* clear format rec*/

   /* there is no gpc on av0am002 so gpc from av0am001 is used*/
  AVWREC.XGPCD = AV0AM001.XGPCD; /* gpc code to format*/
  AVWREC.SY1STNBR = AV0AM002.AV0AMST1; /* style nbr*/
  AVWREC.SY2CLRID = AV0AM002.AV0AMCL1; /* color id*/
   /* MOVE AV0AM002.AV0AMDM1 TO AVWREC.XDMCD;  /* dimension code*/
  AVWREC.XDMCD = "00"; /* dimension code*/

   /* warehouse designated on map1 is used;  If blank, will*/
   /* be wildcarded in av0l.*/
  AVWREC.XWHCD[1] = AV0AM001.XWHCD; /* warehouse code*/

  AVWREC.AVWNWPRD = "Y"; /* set new product flag to yes*/

   /* move key fields to commarea for xfer*/
  COMMAREA.CAUSERA = AVWREC.CAUSERA;

   /* ------------------------- av0a016 --------------------------*/
end // end AV0A016

// CONVERSE MAP 2 OF APPAREL
Function AV0A017()
  AV0AM007.XXXCURDT = VGVar.currentShortGregorianDate;

  if (AV0AM001.XGPCD != "03") /* if not an apparel style process*/
    set AV0AM007.AV0AM-MAP-PF13 invisible; /* do not show blank display option*/
  end

  set AV0AM007.CATOAP cursor;

  converse AV0AM007 ;
  if (converseVar.eventKey is pf11)
    exit stack;
  end

  if (converseVar.eventKey is pf10)
    exit stack;
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0AM007.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0AM007.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf5)
    if (AV0AW01.AV0AWX3 <= 4)
      converseLib.validationFailed(17);
      exit stack;
    else
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1;
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 / 4;
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1; /* RELATIVE PAGE NO*/
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1; /* PAGE NUMBER TO GO TO*/
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 * 4; /* LAST LINE FOR PREVIOUS PAGE*/
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 4;
                                   /* STARTING LINE NUMBER FOR AV0ASAA*/
      if (AV0AW01.AV0AWX3 <= 0)
        AV0AW01.AV0AWX3 = 0;
        converseLib.validationFailed(017);
        AV0ASAA();
        exit stack;
      else

        AV0ASAA();
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf6) /* if request to xfer to orders system*/
                                   /* app op0l*/
    if (AV7REC.XLCCD == "10" /* if product is active lifecycle*/
     && AV7REC.XQACD == "01") /* and first quality, xfer is valid*/
      OSFREC.OSFGROUP = " "; /* clear orders xfer record*/
      OSFREC.XGPCD = COMMAREA.XGPCD; /* commearea prod class to*/
                                  /* orders rec product class*/
      OSFREC.SY1STNBR = AV0AM007.AV0AMST1; /* map style to orders*/
                                  /* rec style nbr*/
      OSFREC.SY2CLRID = AV0AM007.AV0AMCL1; /* map color code to*/
                                  /* orders rec color code*/
      OSFREC.XDMCD = "00"; /* dimension code to*/
                                  /* orders rec dimension code*/
      COMMAREA.CATOAP = "OP0L";
      COMMAREA.CAITEM = AV0AM007.CAITEM;
      COMMAREA.CAUSERA = OSFREC.OSFGROUP; /* move osfrec to commarea*/
      XSEXIT(); /* transfer*/
       /* if transfer not successful, display error message*/
       /* on first apparel map av0am002*/
      AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      exit stack;
    else /* if invalid product for xfer*/
      converseLib.validationFailed(280); /* product must be quality 01 and*/
                                   /* lifecycle 10*/
      exit stack; /* display message*/
    end
  end

  if (converseVar.eventKey is pf13)
    AV0A200(); /* blank style display process*/
  end

   /* if request xfer to substitutions applications:*/
  if (converseVar.eventKey is pf14)
    AV0A016(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT(); /* transfer*/
     /* if transfer not successful, display error message*/
     /* on first apparel map av0am002*/
    AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    exit stack;
  end

  if (converseVar.eventKey is enter)
    if (AV0AM007.CATOAP > " ")
      if (AV0AM007.CATOAP == "OP0L") /* if request xfer to orders system*/
        converseLib.validationFailed(282); /* fastpath to op0l not allowed*/
        AV0AM007.CATOAP = " ";
        exit stack;
      end
       /* if request xfer to substitutions applications:*/
      if (AV0AM007.CATOAP == "AV0K") /* criteria search*/
        set AVWREC empty; /* don't move key fields*/
        COMMAREA.CAUSERA = " ";
      end
      if (AV0AM007.CATOAP == "AV0J") /* subs table maintenance*/
        AV0A016(); /* move key fields for xfer*/
      end
      COMMAREA.CATOAP = AV0AM007.CATOAP;
      COMMAREA.CAITEM = AV0AM007.CAITEM;
      XSEXIT(); /* transfer*/
       /* if transfer not successful, display error message*/
       /* on first apparel map av0am002*/
      AV0AM002.CATOAP = AV0AM007.CATOAP; /* move option to map 1*/
      set AV0AM002.CATOAP cursor, modified, bold;
      AV0AM007.CATOAP = " "; /* clear map2 option*/
      AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      exit stack;
    else
      if (AV0AW01.AV0AWX3 >= AV0AW01.AV0AWX2)
        converseLib.validationFailed(016);
        exit stack;
      else
        AV0ASAA();
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf3)
    exit stack;
  end

  converseLib.validationFailed(015);

end // end AV0A017

// PREPROCESS FOR FOOTWEAR
Function AV0A020()
  AV0AW01.AV0AWX3 = 0;

  AV0ASJA();

end // end AV0A020

// CONVERSE MAP 3 OF APPAREL
Function AV0A025()
  AV0AM004.XXXCURDT = VGVar.currentShortGregorianDate;

  if (AV0AM001.XGPCD != "03") /* if not an apparel style process*/
    set AV0AM004.AV0AM-MAP-PF13 invisible; /* do not show blank display option*/
  end

  set AV0AM004.CATOAP cursor;

  converse AV0AM004 ;

  if (converseVar.eventKey is pf10)
    exit stack;
  end

  AV0AW01.AV0AWFF = "N";

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0AM004.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf13)
    AV0A200(); /* blank style display process*/
  end

   /* if request xfer to substitutions criteria select application*/
  if (converseVar.eventKey is pf14)
    AV0A016(); /* move fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer not successful, display error message*/
     /* on first apparel map av0am002*/
    AV0AM004.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    exit program;
  end

  if (converseVar.eventKey is pa1)
    exit program;
  end

  if (converseVar.eventKey is pf5)
    if (AV0AW01.AV0AWX3 > 4)
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1;
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 / 4;
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1;
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1;
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 * 4;
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 4;
      if (AV0AW01.AV0AWX3 <= 0)
        AV0AW01.AV0AWX3 = 00;
        converseLib.validationFailed(010);
        AV0ASAA();
        exit stack;
      else
        AV0ASAA();
        exit stack;
      end
    else
      AV0AW01.AV0AWFF = "Y";
      converseLib.validationFailed(17);
      exit stack;
    end
  end

  if (converseVar.eventKey is pf6) /* if request xfer to orders app op0l*/
    if (AV7REC.XQACD == "01" /* if product is first quality*/
     && AV7REC.XLCCD == "10") /* and active lifecycle, xfer is valid*/
      OSFREC.OSFGROUP = " "; /* clear orders xfer record*/
      OSFREC.XGPCD = COMMAREA.XGPCD; /* move commarea product class*/
                                  /* to orders rec product class*/
      OSFREC.SY1STNBR = AV0AM004.AV0AMST1; /* move map style nbr*/
                                  /* to orders rec style nbr*/
      OSFREC.SY2CLRID = AV0AM004.AV0AMCL1; /* move map color code*/
                                  /* to orders rec color code*/
      OSFREC.XDMCD = "00"; /* move map dimension code*/
                                  /* to orders rec dimension code*/
      COMMAREA.CATOAP = "OP0L";
      COMMAREA.CAITEM = AV0AM004.CAITEM;
      COMMAREA.CAUSERA = OSFREC.OSFGROUP; /* move osfrec to commarea*/
      XSEXIT(); /* xfer module*/
       /* if xfer not successful, display error message*/
       /* on first apparel map av0am002*/
      AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      exit stack;
    else /* if invalid product*/
      converseLib.validationFailed(280); /* product must have quality 01 and*/
                                   /* lifecycle 10*/
      exit stack; /* exit to display message*/
    end
  end


  if (converseVar.eventKey is enter)
    if (AV0AM004.CATOAP > " ")
      if (AV0AM004.CATOAP == "OP0L") /* if request xfer to orders app*/
        converseLib.validationFailed(282); /* fastpath to op0l not allowed*/
        AV0AM004.CATOAP = " ";
        exit stack;
      end
      /* if request xfer to substitutions applications:*/
      if (AV0AM004.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move fields*/
        COMMAREA.CAUSERA = " ";
      end
      if (AV0AM004.CATOAP == "AV0J") /* subs table maintenance*/
        AV0A016(); /* move fields for xfer*/
      end
      COMMAREA.CATOAP = AV0AM004.CATOAP;
      COMMAREA.CAITEM = AV0AM004.CAITEM;
      XSEXIT();
       /* if xfer not successful, display error message*/
       /* on first apparel map av0am002*/
      AV0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      AV0AM002.CATOAP = AV0AM004.CATOAP;
      AV0AM004.CATOAP = " "; /* clear map 3 option*/
      set AV0AM002.CATOAP cursor, modified, bold;
      exit stack;
    else
      if (AV0AW01.AV0AWX3 >= AV0AW01.AV0AWX2)
        AV0AW01.AV0AWFF = "Y";
        converseLib.validationFailed(016);
        exit stack;
      else
        AV0ASAA();
        exit stack;
      end
    end
  end

  converseLib.validationFailed(015);

end // end AV0A025

// CONVERSE MAP 1 footwear
Function AV0A030()
  AV0AM003.XXXCURDT = VGVar.currentShortGregorianDate;
  converse AV0AM003 ;

  AV0AW01.AV0AWFF = "N";

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3)
    exit stack;
  end

  if (converseVar.eventKey is pf5) /* previous product requested*/
    if (AV0AM001.XWHCD <= " ") /* wildcarded warehouse*/
      /* IF AV0AW04.AV0AW-EQMT-FL EQ 'Y';/* equipment product*/
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1; /* go back 1 in array*/
        /* this sets the index back to the current product*/
      if (AV0AW01.AV0AWX3 <= 0) /* already at top of array*/
        converseLib.validationFailed(17); /* first selected style displayed*/
        AV0AW01.AV0AWX3 = 0; /* set index at top*/
        AV0ASJA(); /* set up 3 footwear screens*/
        exit stack;
      else
        AV0AW01.AV0AW-SAME-PROD = "Y";
                                   /* same product, different whse*/
        while (AV0AW01.AV0AW-SAME-PROD == "Y"
         && AV0AW01.AV0AWX3 > 0)
          AV0AS-SAME-PRODUCT(); /* check if still same product*/
          if (AV0AW01.AV0AW-SAME-PROD == "Y")
            AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1; /* go back 1 in array*/
          else
            AV0AS-FIND-FIRST(); /* get first record of prev product*/
          end
        end
        if (AV0AW01.AV0AWX3 <= 0) /* already at top of array*/
          converseLib.validationFailed(17); /* first selected style displayed*/
          AV0AW01.AV0AWX3 = 0;
          AV0ASJA();
          exit stack;
        else
          AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1; /* go back 1 in array*/
          AV0ASJA();
          exit stack;
        end
      end
    else
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 2;
      if (AV0AW01.AV0AWX3 <= 0)
        AV0AW01.AV0AWX3 = 0;
        converseLib.validationFailed(17);
        AV0ASJA();
        exit stack;
      else
        AV0ASJA();
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf6) /* if request xfer to orders app 'op0l'*/
    if (AV7REC.XQACD == "01" /* if product is first quality*/
     && AV7REC.XLCCD == "10") /* and active lifecycle, xfer is valid*/
      OSFREC.OSFGROUP = " "; /* clear orders xfer record*/
      OSFREC.XGPCD = COMMAREA.XGPCD; /* commarea gen product class*/
                                  /* to orders rec gen product class*/
      OSFREC.SY1STNBR = AV0AM003.SY1STNBR; /* move map style nbr*/
                                  /* to orders rec style nbr*/
      OSFREC.SY2CLRID = AV0AM003.SY2CLRID; /* move map color code*/
                                  /* to orders rec color code*/
      OSFREC.XDMCD = AV0AM003.XDMCD; /* move map dimension code*/
                                  /* to orders rec dimension code*/
      COMMAREA.CATOAP = "OP0L";
      COMMAREA.CAITEM = AV0AM003.CAITEM;
      COMMAREA.CAUSERA = OSFREC.OSFGROUP; /* move osfrec to commarea*/

      XSEXIT(); /* xfer module*/
       /* if xfer not successful, display error message*/
      AV0AM003.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      exit stack;
    else /* if invalid product*/
      converseLib.validationFailed(280); /* product quality must be 01 and*/
                                   /* lifecycle 10*/
      exit stack; /* exit to display message*/
    end
  end

   /* if request xfer to substitutions criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0A031(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    COMMAREA.CAITEM = AV0AM003.CAITEM;
    XSEXIT(); /* xfer module*/
     /* if xfer not successful, display error message*/
    AV0AM003.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    exit stack;
  end

  if (converseVar.eventKey is enter)
    if (AV0AM003.CATOAP > " ")
      if (AV0AM003.CATOAP == "OP0L") /* if request xfer to orders app*/
        converseLib.validationFailed(282); /* fastpath to op0l not allowed*/
        AV0AM003.CATOAP = " ";
        exit stack;
      end
       /* if request xfer to substitutions applications:*/
      if (AV0AM003.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      if (AV0AM003.CATOAP == "AV0J") /* substitutions table maintenance*/
        AV0A031(); /* move key fields for xfer*/
      end
      COMMAREA.CATOAP = AV0AM003.CATOAP;
      COMMAREA.CAITEM = AV0AM003.CAITEM;
      XSEXIT(); /* xfer module*/
       /* if xfer not successful*/
      AV0AM003.VAGen_EZEMSG = COMMAREA.CAMSG;
      set AV0AM003.CATOAP cursor, modified, bold;
      exit stack;
    else
      if (AV0AW01.AV0AWX3 >= AV0AW01.AV0AWX2)
        converseLib.validationFailed(016);
        exit stack;
      else
        AV0ASJA();
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf8)
    exit stack;
  end

  converseLib.validationFailed(015);

end // end AV0A030

// move fields for xfer to subs
Function AV0A031()
   /* ------------------------- av0a031 --------------------------*/

      /* move key fields to avwrec and xfer to substitutions*/
                            /* av0am003*/

   /* ------------------------------------------------------------*/

   /* the first style/color on the map is moved*/

  set AVWREC empty; /* clear format rec*/

   /* there is no gpc on av0am003 so gpc from av0am001 is used*/
  AVWREC.XGPCD = AV0AM001.XGPCD; /* gpc code to format*/
  AVWREC.SY1STNBR = AV0AM003.SY1STNBR; /* style nbr*/
  AVWREC.SY2CLRID[1] = AV0AM003.SY2CLRID; /* color id*/
  AVWREC.XDMCD = AV0AM003.XDMCD; /* dimension code*/

   /* warehouse designated on map1 is used;  If blank, will be*/
   /* wildcarded in av0l.*/
  AVWREC.XWHCD[1] = AV0AM001.XWHCD;

  AVWREC.AVWNWPRD = "Y"; /* set new product flag to yes*/

   /* move key fields to commarea for xfer*/
  COMMAREA.CAUSERA = AVWREC.CAUSERA;

   /* ------------------------- av0a031 --------------------------*/
end // end AV0A031

// CONVERSE MAP 2 footwear
Function AV0A035()
  AV0AM005.XXXCURDT = VGVar.currentShortGregorianDate;
  converse AV0AM005 ;

  AV0AW01.AV0AWFF = "N";

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0AM005.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0AM005.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3)
    exit stack;
  end

  if (converseVar.eventKey is pf5)
    if (AV0AM001.XWHCD <= " ")
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1;
                                   /* set index back to current prod*/
      if (AV0AW01.AV0AWX3 <= 0)
        converseLib.validationFailed(17); /* at first selected product*/
        AV0AW01.AV0AWX3 = 0; /* set index to top of array*/
        AV0ASJA(); /* set up 3 footwear maps*/
        exit stack;
      else
        AV0AW01.AV0AW-SAME-PROD = "Y";
        while (AV0AW01.AV0AW-SAME-PROD == "Y"
         && AV0AW01.AV0AWX3 > 0)
          AV0AS-SAME-PRODUCT(); /* check if still same product*/
          if (AV0AW01.AV0AW-SAME-PROD == "Y")
            AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1; /* set index back 1*/
          else
            AV0AS-FIND-FIRST(); /* find 1st occurance of prev product*/
          end
        end
        if (AV0AW01.AV0AWX3 <= 0)
          converseLib.validationFailed(17); /* at first selected product*/
          AV0AW01.AV0AWX3 = 0; /* set index to top of array*/
          AV0ASJA(); /* set up 3 footwear maps*/
          exit stack;
        else
          AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1; /* set index back 1*/
          AV0ASJA(); /* set up 3 footwear maps*/
          exit stack;
        end
      end
    else
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 2;
      if (AV0AW01.AV0AWX3 <= 0)
        AV0AW01.AV0AWX3 = 0;
        converseLib.validationFailed(17);
        AV0ASJA();
        exit stack;
      else
        AV0ASJA();
        exit stack;
      end
    end
  end


  if (converseVar.eventKey is pf7)
    exit stack;
  end

  if (converseVar.eventKey is pf6) /* if request xfer to orders app 'op0l'*/
    if (AV7REC.XQACD == "01" /* if product is first quality*/
     && AV7REC.XLCCD == "10") /* and active lifecycle, xfer is valid*/
      OSFREC.OSFGROUP = " "; /* clear orders xfer record*/
      OSFREC.XGPCD = COMMAREA.XGPCD; /* move commearea gen prod class*/
                                  /* to orders rec gen product class*/
      OSFREC.SY1STNBR = AV0AM005.SY1STNBR; /* move map style nbr*/
                                  /* to orders rec style nbr*/
      OSFREC.SY2CLRID = AV0AM005.SY2CLRID; /* move map color code*/
                                  /* to orders rec color code*/
       /* there is no dimension code on this map, so dimension of*/
       /* av0am003 is used*/
      OSFREC.XDMCD = AV0AM003.XDMCD; /* move map dimension code*/
                                  /* to orders rec dimension code*/
      COMMAREA.CATOAP = "OP0L";
      COMMAREA.CAUSERA = OSFREC.OSFGROUP; /* move osfrec to commarea*/
      COMMAREA.CAITEM = AV0AM005.CAITEM;
      XSEXIT(); /* xfer module*/
       /* if xfer not successful, display error message*/
       /* on first footwear map av0am003*/
      AV0AM003.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      exit stack;
    else
      converseLib.validationFailed(280); /* product must first quality and active*/
                                   /* lifecycle*/
      exit stack; /* exit to display message*/
    end
  end

   /* if request xfer to substitutions criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0A031(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    COMMAREA.CAITEM = AV0AM005.CAITEM;
    XSEXIT(); /* xfer module*/
     /* if xfer not successful, display error message*/
     /* on first footwear map av0am003*/
    AV0AM003.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    exit stack;
  end


  if (converseVar.eventKey is enter)
    if (AV0AM005.CATOAP > " ")
      if (AV0AM005.CATOAP == "OP0L") /* if request xfer to orders app*/
        converseLib.validationFailed(282); /* fastpath to op0l not allowed*/
        AV0AM005.CATOAP = " ";
        exit stack;
      end
       /* if request xfer to substitutions applications:*/
      if (AV0AM005.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      if (AV0AM005.CATOAP == "AV0J") /* subs table maintenance*/
        AV0A031(); /* move key fields for xfer*/
      end
      COMMAREA.CATOAP = AV0AM005.CATOAP;
      COMMAREA.CAITEM = AV0AM005.CAITEM;
      XSEXIT(); /* xfer module*/
       /* if xfer not successful, display error message*/
       /* on first footwear map av0am003*/
      AV0AM003.VAGen_EZEMSG = COMMAREA.CAMSG;
      AV0AM003.CATOAP = AV0AM005.CATOAP; /* move option to map1*/
      AV0AM005.CATOAP = " "; /* clear map 2 option*/
      set AV0AM003.CATOAP cursor, modified, bold;
      exit stack;
    else
      if (AV0AW01.AV0AWX3 >= AV0AW01.AV0AWX2)
        AV0AW01.AV0AWFF = "Y";
        converseLib.validationFailed(016);
        exit stack;
      else
        AV0ASJA();
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf8)
    exit stack;
  end

  converseLib.validationFailed(015);

end // end AV0A035

// CONVERSE MAP 3 footwear
Function AV0A040()
  AV0AM006.XXXCURDT = VGVar.currentShortGregorianDate;
  converse AV0AM006 ;

  AV0AW01.AV0AWFF = "N";

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0AM006.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0AM006.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3)
    exit stack;
  end

  if (converseVar.eventKey is pf5)
    if (AV0AM001.XWHCD <= " ")
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1;
                                   /* set index back to current prod*/
      if (AV0AW01.AV0AWX3 <= 0)
        converseLib.validationFailed(17); /* at first product*/
        AV0AW01.AV0AWX3 = 0; /* set index at top of array*/
        AV0ASJA();
        exit stack;
      else
        AV0AW01.AV0AW-SAME-PROD = "Y";
        while (AV0AW01.AV0AW-SAME-PROD == "Y"
         && AV0AW01.AV0AWX3 > 0)
          AV0AS-SAME-PRODUCT();
          if (AV0AW01.AV0AW-SAME-PROD == "Y")
            AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1;
          else
            AV0AS-FIND-FIRST();
          end
        end
        if (AV0AW01.AV0AWX3 <= 0)
          converseLib.validationFailed(17); /* at first product*/
          AV0AW01.AV0AWX3 = 0; /* set index at top of array*/
          AV0ASJA();
          exit stack;
        else
          AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1;
          AV0ASJA();
          exit stack;
        end
      end
    else
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 2;
      if (AV0AW01.AV0AWX3 <= 0)
        AV0AW01.AV0AWX3 = 0;
        converseLib.validationFailed(17);
        AV0ASJA();
        exit stack;
      else
        AV0ASJA();
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf6) /* if request to xfer to orders app*/
                                   /* 'op0l'*/
    if (AV7REC.XQACD == "01" /* if product is first quality*/
     && AV7REC.XLCCD == "10") /* and active lifecycle, xfer is valid*/
      OSFREC.OSFGROUP = " "; /* clear orders xfer record*/
      OSFREC.XGPCD = COMMAREA.XGPCD; /* move commearea gen prod class*/
                                  /* to orders rec gen product class*/
      OSFREC.SY1STNBR = AV0AM006.SY1STNBR; /* move map style nbr*/
                                  /* to orders rec style nbr*/
      OSFREC.SY2CLRID = AV0AM006.SY2CLRID; /* move map color cd*/
                                  /* to orders rec color code*/
       /* there is not dimension code on this map so dimension from*/
       /* av0am003 is used*/
      OSFREC.XDMCD = AV0AM003.XDMCD; /* move map dimension code*/
                                  /* to orders rec dimension code*/
      COMMAREA.CATOAP = "OP0L";
      COMMAREA.CAITEM = AV0AM006.CAITEM;
      COMMAREA.CAUSERA = OSFREC.OSFGROUP; /* move osfrec to commarea*/
      XSEXIT(); /* xfer module*/
       /* if xfer not successful, display error message*/
       /* on first footwear map av0am003*/
      AV0AM003.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      exit stack;
    else /* if invalid product*/
      converseLib.validationFailed(280); /* product must be quality 01 and*/
                                   /* lifecycle 10*/
      exit stack; /* exit to display message*/
    end
  end


   /* if request xfer to substitutions criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0A031(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    COMMAREA.CAITEM = AV0AM006.CAITEM;
    XSEXIT(); /* xfer module*/
     /* if xfer not successful, display error message*/
     /* on first footwear map av0am003*/
    AV0AM003.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    exit stack;
  end


  if (converseVar.eventKey is enter)
    if (AV0AM006.CATOAP > " ")
      if (COMMAREA.CATOAP == "OP0L") /* if request xfer to orders app*/
        converseLib.validationFailed(282); /* fastpath to op0l not allowed*/
        AV0AM006.CATOAP = " ";
        exit stack;
      end
       /* if request xfer to substitutions applications:*/
      if (AV0AM006.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      if (AV0AM006.CATOAP == "AV0J") /* subs table maintenance*/
        AV0A031(); /* move key fields for xfer*/
      end
      COMMAREA.CATOAP = AV0AM006.CATOAP;
      COMMAREA.CAITEM = AV0AM006.CAITEM;
      XSEXIT();
       /* if xfer not successful, display error message*/
       /* on first footwear map av0am003*/
      AV0AM003.VAGen_EZEMSG = COMMAREA.CAMSG;
      AV0AM003.CATOAP = AV0AM006.CATOAP; /* move option to map1*/
      AV0AM006.CATOAP = " "; /* clear map3 option*/
      set AV0AM003.CATOAP cursor, modified, bold;
      exit stack;
    else
      if (AV0AW01.AV0AWX3 >= AV0AW01.AV0AWX2)
        AV0AW01.AV0AWFF = "Y";
        converseLib.validationFailed(016);
        exit stack;
      else
        AV0ASJA();
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf8)
    exit stack;
  end

  if (converseVar.eventKey is pf7)
    exit stack;
  end

  converseLib.validationFailed(015);

end // end AV0A040

// get wildcard style data
Function AV0A080()
                        /* av0a080*/
            /* get style data for wildcarded whse*/


  AV0A081(); /* load av5rec from map for select set*/
  AV0AW01.AV0AWHIT = "N"; /* move no to style found flag*/
  AV0A082(); /* select set from davail.vavhdr01 for whse 2,4,7*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if select set successful*/
    AV0AW01.AV0AWEOC = "N"; /* set end of cursor flag to no*/

    while (AV0AW01.AV0AWEOC == "N" /* until end of cursor*/
     && AV0AW01.AV0AWX2 <= 99) /* or display-data-rec not full*/
      AV0A083(); /* load av0aw07 rec with style data for*/
                                   /* whse 2,4,7*/
    end
  end

  AV0A089(); /* close davail.vavhdr01 cursor*/

end // end AV0A080

// get wildcard style data
Function AV0A080-CAN()
                        /* AV0A080-CAN */
            /* get style data for wildcarded whse*/


  AV0A081(); /* load av5rec from map for select set*/
  AV0AW01.AV0AWHIT = "N"; /* move no to style found flag*/
  AV0A082-CAN(); /* select set from davail.vavhdr01 for whse 2,4,7*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if select set successful*/
    AV0AW01.AV0AWEOC = "N"; /* set end of cursor flag to no*/

    while (AV0AW01.AV0AWEOC == "N" /* until end of cursor*/
     && AV0AW01.AV0AWX2 <= 99) /* or display-data-rec not full*/
      AV0A083-CAN(); /* load av0aw07 rec with style data for*/
                                   /* whse 2,4,7*/
    end
  end

  AV0A089-CAN(); /* close davail.vavhdr01 cursor*/

end // end AV0A080-CAN

// load av5rec from map data
Function AV0A081()
                        /* av0a081*/
    /* load av5rec from map style data for wildcard select set*/
    /* from davail.vavhdr01*/


  set AV5REC empty;

  AV5REC.XWHCD = "**"; /* WAREHOUSE*/

  AV5REC.XGPCD = AV0AM001.XGPCD; /* general product class*/

  if (AV0AM001.XQACD > " ")
    AV5REC.XQACD = AV0AM001.XQACD;
  else
    AV5REC.XQACD = "01";
  end

  if (AV0AM001.XOWCD > " ") /* owner group*/
    AV0AW01.XOWCD = AV0AM001.XOWCD;
    AV5REC.XOWCD = AV0AM001.XOWCD;
  else
    if (AV0AM001.XGPCD == "03")
      if (AV0AM001.XWHCD == "  " 
       || AV0AM001.XWHCD == "51" /* US Apparel*/
       /* change begins*/
       /* OR AV0AM001.XWHCD = '25'     /* US*/
       /* Apparel*/
       /* change ends*/
       /* change begins - 01/31/01*/
       /* OR AV0AM001.XWHCD = '27'     /* US*/
       /* Victory Crestor*/
       /* change ends   - 01/31/01*/
       || AV0AM001.XWHCD == "41" /* Canada*/
       || AV0AM001.XWHCD == "42") /* Canada*/
        AV5REC.XOWCD = "**";
      else
        AV5REC.XOWCD = "00";
        AV0AW01.XOWCD = "00";
      end
    else
      AV5REC.XOWCD = "00";
      AV0AW01.XOWCD = "00";
    end
  end

  AV5REC.XUMCD = AV0AM001.XUMCD[AV0AWX1];

  AV5REC.AV4PRDBD = 0;

  if (AV0AM001.XLCCD > " ")
    AV5REC.XLCCD = AV0AM001.XLCCD;
  else
    AV5REC.XLCCD = "10";
    AV0AM001.XLCCD = "10";
  end

  AV5REC.SY1STNBR = AV0AM001.SY1STNBR[AV0AWX1];

  if (AV0AM001.SY2CLRID[AV0AWX1] > "   ")
    AV5REC.SY2CLRID = AV0AM001.SY2CLRID[AV0AWX1];
  else
    AV5REC.SY2CLRID = "***";
  end

  if (AV0AM001.XDMCD[AV0AWX1] <= " ")
    AV5REC.XDMCD = "**";
  else
    AV5REC.XDMCD = AV0AM001.XDMCD[AV0AWX1];
  end

  if (AV0AM001.PC2INSEG[AV0AWX1] <= " ")
    AV5REC.XSDCD = "000";
  else
    AV5REC.XSDCD = AV0AM001.PC2INSEG[AV0AWX1];
  end

  if (AV0AM001.XSACD[AV0AWX1] > " ")
    AV5REC.XSACD = AV0AM001.XSACD[AV0AWX1];
  else
    AV5REC.XSACD = "000";
  end

  if (AV0AM001.XPGCD[AV0AWX1] <= " ")
    AV5REC.XPGCD = "00";
  else
    AV5REC.XPGCD = AV0AM001.XPGCD[AV0AWX1];
  end

end // end AV0A081

// declare cursor davail.vavhdr01
Function AV0A082()
   /* -------------------------av0a082----------------------------*/
                 /* select set davail.vavhdr01 data*/
   /* -------------------------av0a082----------------------------*/


  try
    call "IO2310" ("S2", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "082"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0a082----------------------------*/
end // end AV0A082

// declare cursor davail.vavhdr01
Function AV0A082-CAN()
   /* -------------------------AV0A082-CAN----------------------------*/
                 /* select set davail.vavhdr01 data*/
   /* -------------------------AV0A082-CAN----------------------------*/


  try
    call "IO2310" ("S9", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "082"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------AV0A082-CAN----------------------------*/
end // end AV0A082-CAN

// select & move data to av0aw05
Function AV0A083()
                        /* av0a083*/
    /* select next of select set and perform move to display rec*/

  AV0A084(); /* select next davail.vavhdr01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
    AV0AW01.AV0AWHIT = "Y"; /* move yes to style found flag*/
    AV0A085();
                                   /* select from vavqty02 and move to save*/
  else
    AV0AW01.AV0AWEOC = "Y"; /* move yes to end of cursor flag*/
  end
end // end AV0A083

// select & move data to av0aw05
Function AV0A083-CAN()
                        /* AV0A083-CAN*/
    /* select next of select set and perform move to display rec*/

  AV0A084-CAN(); /* select next davail.vavhdr01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
    AV0AW01.AV0AWHIT = "Y"; /* move yes to style found flag*/
    AV0A085-CAN();
                                   /* select from vavqty02 and move to save*/
  else
    AV0AW01.AV0AWEOC = "Y"; /* move yes to end of cursor flag*/
  end
end // end AV0A083-CAN

// fetch row davail.vavhdr01
Function AV0A084()
   /* -------------------------av0a084----------------------------*/
              /* fetch next row of davail.vavhdr01 data*/
   /* -------------------------av0a084----------------------------*/


  try
    call "IO2310" ("N2", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "084"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0a084----------------------------*/
end // end AV0A084

// fetch row davail.vavhdr01
Function AV0A084-CAN()
   /* -------------------------AV0A084-CAN----------------------------*/
              /* fetch next row of davail.vavhdr01 data*/
   /* -------------------------AV0A084-CAN----------------------------*/


  try
    call "IO2310" ("N9", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "084"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------AV0A084-CAN----------------------------*/
end // end AV0A084-CAN

// move data for each warehouse
Function AV0A085()
                        /* av0a085*/
        /* select data for each warehouse and move to save*/

  if (AV0AW01.AV0AWX2 < 100) /* if save record not full*/
    AV0AW01.AV0AWWH = "07"; /* set select warehouse*/
    AV0A086(); /* load key, select and move to save*/
  end

  if (AV0AW01.AV0AWX2 < 100) /* if save record not full*/
    AV0AW01.AV0AWWH = "04"; /* set select warehouse*/
    AV0A086(); /* load key, select and move to save*/
  end

  if (AV0AW01.AV0AWX2 < 100) /* if save record not full*/
    AV0AW01.AV0AWWH = "02"; /* set select warehouse*/
    AV0A086(); /* load key, select and move to save*/
  end

  if (AV0AW01.AV0AWX2 < 100) /* if save record not full*/
    AV0AW01.AV0AWWH = "51"; /* set select warehouse*/
    AV0A086(); /* load key, select and move to save*/
  end

end // end AV0A085

// move data for each warehouse
Function AV0A085-CAN()
                        /* av0a085-can*/
        /* select data for each warehouse and move to save*/


  if (AV0AW01.AV0AWX2 < 100) /* if save record not full*/
    AV0AW01.AV0AWWH = "42"; /* set select warehouse*/
    AV0A086(); /* load key, select and move to save*/
  end

  if (AV0AW01.AV0AWX2 < 100) /* if save record not full*/
    AV0AW01.AV0AWWH = "41"; /* set select warehouse*/
    AV0A086(); /* load key, select and move to save*/
  end

   /* test*/
  if (AV0AW01.AV0AWX2 < 100) /* if save record not full*/
    AV0AW01.AV0AWWH = "43"; /* set select warehouse*/
    AV0A086(); /* load key, select and move to save*/
  end
   /* test*/
end // end AV0A085-CAN

// move data for each warehouse
Function AV0A086()
                        /* av0a086*/
        /* select and move detail data for each warehouse*/


  AV0A087(); /* load davail.vavqty02 key from*/
                                   /* vavhdr01 key*/
  AV0A088(); /* select row from davail.vavqty02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    AV0AS75(); /* move av7rec (davail.vavqty02 row) to*/
                                   /* save rec*/
  end

end // end AV0A086

// set up key for vavqty02 call
Function AV0A087()
                        /* av0a087*/
    /* set up key for call to davail.vavqty02 with key from*/
    /* select next call from davail.vavhdr01.*/


  set AV7REC empty;

  AV7REC.XWHCD = AV0AW01.AV0AWWH;
  AV7REC.XGPCD = AV5REC.XGPCD;
  AV7REC.SY1STNBR = AV5REC.SY1STNBR;
  AV7REC.SY2CLRID = AV5REC.SY2CLRID;
  AV7REC.XDMCD = AV5REC.XDMCD;
  AV7REC.XQACD = AV5REC.XQACD;
  AV7REC.XOWCD = AV5REC.XOWCD;
  AV7REC.XSDCD = AV5REC.XSDCD;
  AV7REC.XSACD = AV5REC.XSACD;
  AV7REC.XPGCD = AV5REC.XPGCD;
  AV7REC.XUMCD = AV5REC.XUMCD;
  AV7REC.XLCCD = AV5REC.XLCCD;

end // end AV0A087

// select row davail.vavqty02
Function AV0A088()
   /* -------------------------av0a088----------------------------*/
              /* fetch a row of davail.vavqty02 data*/
   /* -------------------------av0a088----------------------------*/


  try
    call "IO2370" ("S ", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "088"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY02"; /* Table view name*/
  TA1REC.TA1TBLKE = AV7REC.AV7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0a084----------------------------*/
end // end AV0A088

// close cursor davail.vavhdr01
Function AV0A089()
   /* -------------------------av0a089----------------------------*/
              /* close cursor for davail.vavhdr01 data*/
   /* -------------------------av0a089----------------------------*/


  try
    call "IO2310" ("C2", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "089"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0as18----------------------------*/
end // end AV0A089

// close cursor davail.vavhdr01
Function AV0A089-CAN()
   /* -------------------------AV0A089-CAN----------------------------*/
              /* close cursor for davail.vavhdr01 data*/
   /* -------------------------AV0A089-CAN----------------------------*/


  try
    call "IO2310" ("C9", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "089"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0a089-CAN------------------------*/
end // end AV0A089-CAN

// display blank style avail
Function AV0A200()
   /* This process will get the blank style product availability*/
   /* for the currently displayed screened styles.*/

   /* clear blank style maps:*/

  set AV0AM009 initial;
  set AV0AM010 initial;
  set AV0AM011 initial;

   /* get blank style availability info:*/
  AV0A210();

   /* format blank style maps*/
  AV0A220();

   /* converse blank style maps*/
  AV0A270();


end // end AV0A200

// set up av7rec for blank style
Function AV0A210()
   /* this module will get blank style availability information*/
   /* for the map items that are screened styles.  if the map*/
   /* style is not a screened style the blank style information*/
   /* will be left blank.*/

  AV0AW01.AV0AWX11 = 1; /* set index to blank style work rec*/

  while (AV0AW01.AV0AWX11 <= 4)
    if (AV0AW11.PG2SCRFL[AV0AWX11] == "U" /* if uncrested style*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "B" /* or blank for screened style*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "I") /* or interim for screened style*/
      AV0A211(); /* set up av7rec to select blank style*/
                                   /* info*/
      AV0A212(); /* call io2370 (davail.vavqty02)*/
    end
    if (converseVar.validationMsgNum != 0) /* if error occurred in selects*/
      return; /* return to display error msg*/
    end
    AV0A213(); /* move info to av0aw11*/
    AV0AW01.AV0AWX11 = AV0AW01.AV0AWX11 + 1; /* increment record index*/
  end

end // end AV0A210

// set up av7rec for blank style
Function AV0A211()
    /* SETUP db2 record for blank style select*/

  set AV7REC empty;

  AV7REC.XWHCD = AV0AW11.XWHCD[AV0AWX11];
  AV7REC.XGPCD = AV0AW11.XGPCD[AV0AWX11];
  AV7REC.SY1STNBR = AV0AW11.SY1BSTNB[AV0AWX11];
  AV7REC.SY2CLRID = AV0AW11.SY2BCLCD[AV0AWX11];

  AV7REC.XDMCD = AV0AW11.XDMCD[AV0AWX11];
  AV7REC.XQACD = AV0AW11.XQACD[AV0AWX11];
  AV7REC.XUMCD = AV0AW11.XUMCD[AV0AWX11];
  AV7REC.XOWCD = AV0AW11.XOWCD[AV0AWX11];

  AV7REC.XSDCD = AV0AW11.PC2INSEG[AV0AWX11];
  AV7REC.XSACD = AV0AW11.XSACD[AV0AWX11];
  AV7REC.XPGCD = AV0AW11.XPGCD[AV0AWX11];
  AV7REC.AV4PRDBD = AV0AW11.AV4PRDBD[AV0AWX11];

end // end AV0A211

// call io2370 - davail.vavqty02
Function AV0A212()

  call "IO2370" ("S ", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  converseLib.validationFailed(76); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY02"; /* Table view name*/
  TA1REC.TA1TBLKE = AV7REC.AV7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* Exit to display map with error message*/

end // end AV0A212

// move blank avail to av0aw11
Function AV0A213()
   /* format blank style message:*/

  AV0AW01.AV0AWMSG = " "; /* clear blank style message work field*/

  if (AV0AW11.PG2SCRFL[AV0AWX11] == "R") /* if product has no blank style#*/
    AV0AW11.AV0AWMSG[AV0AWX11] = "NOT A SCREENED STYLE";
    return; /* return to calling process*/
  end

  if (AV0AW11.PG2SCRFL[AV0AWX11] == "X")
    AV0AW11.AV0AWMSG[AV0AWX11] = "CRESTED STYLE BLANK";
    return; /* return to calling process*/
  end

   /* if product has blank style and the blank is in the*/
   /* availability table, move condition codes and quantities to ws*/
   /* and format message:*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if blank style available*/
    AV0AW11.AV0AWCD[AV0AWX11] = AV7REC.AV7RCD; /* cond cds 1-40*/
    AV0AW11.AV0AWQT[AV0AWX11] = AV7REC.AV7RQT; /* qtys 1-40*/
    AV0AW11.AV0AWDT[AV0AWX11] = AV7REC.AV7RDT; /* cond dates 1-40*/

     /* format message:*/
    if (AV0AW11.PG2SCRFL[AV0AWX11] == "U") /* if product is uncrested style*/
      AV0AW01.AV0AWMS1 = "USES UNCRESTED STYLE"; /* message*/
    else
    /* if product is blank or interim for screened style:*/
      if (AV0AW11.PG2SCRFL[AV0AWX11] == "B"
       || AV0AW11.PG2SCRFL[AV0AWX11] == "I")
        AV0AW01.AV0AWMS1 = "USES BLANK STYLE"; /* message*/
      end
    end
    AV0AW01.AV0AWMS2 = AV0AW11.SY1BSTNB[AV0AWX11];
                                   /* blank style nbr*/
    AV0AW01.AV0AWMS3 = AV0AW11.SY2BCLCD[AV0AWX11];
                                   /* blank color code*/
    AV0AW01.AV0AWMS4 = AV0AW11.XDMCD[AV0AWX11];
                                   /* blank dimension code*/
      /* move formatted message:*/
    AV0AW11.AV0AWMSG[AV0AWX11] = AV0AW01.AV0AWMSG;
  end

  if (SQLCA.VAGen_SQLCODE == 100 /* if blank style not available*/
   || AV0AW11.PG2SCRFL[AV0AWX11] == " ") /* not a valid blank style*/
    /* format message:*/
    AV0AW01.AV0AWMS1 = "NO BLANK AVAIL   "; /* message field #1*/
    AV0AW01.AV0AWMS2 = AV0AW11.SY1BSTNB[AV0AWX11];
    AV0AW01.AV0AWMS3 = AV0AW11.SY2BCLCD[AV0AWX11];
    AV0AW01.AV0AWMS4 = AV0AW11.XDMCD[AV0AWX11];
    /* move formatted message:*/
    AV0AW11.AV0AWMSG[AV0AWX11] = AV0AW01.AV0AWMSG;
    /* indicate not further data selection on this style by setting*/
    /* screened style indicator to spaces*/
    AV0AW11.PG2SCRFL[AV0AWX11] = " ";
  end

end // end AV0A213

// format blank style avail maps
Function AV0A220()

    /* SET UP THREE blank style maps:*/

  if (converseVar.validationMsgNum != 0) /* if error in data base select*/
    return; /* exit to display error message*/
  end

  AV0AW01.AV0AWX11 = 1; /* initialize wrk rec index*/

  AV0A230(); /* load map style #1*/

  AV0AW01.AV0AWX11 = AV0AW01.AV0AWX11 + 1;

  AV0A240(); /* load map style #2*/

  AV0AW01.AV0AWX11 = AV0AW01.AV0AWX11 + 1;

  AV0A250(); /* load map style #3*/

  AV0AW01.AV0AWX11 = AV0AW01.AV0AWX11 + 1;

  AV0A260(); /* load map style #4*/

end // end AV0A220

// setup blank map style #1
Function AV0A230()

  if (AV0AM002.AV0AMST1 > " ") /* if map filled in*/
     /* move screened style #1 info to blanks maps*/
    AV0A231();

    if (AV0AW11.PG2SCRFL[AV0AWX11] == "U" /* if uncrested style avail*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "B" /* or blank style available*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "I") /* or blank style available*/
       /* break out blank style quantities and condition codes*/
      AV0A235();
       /* move blank style#1 size info, quantities and codes to maps*/
      AV0A236();
    end

     /* move in style#1 blank style message*/
    AV0AM009.AV0AMMS1 = AV0AW11.AV0AWMSG[AV0AWX11];
  end
end // end AV0A230

// move screened style#1 info
Function AV0A231()
   /* move screened style #1 info to blanks map av0am009*/
  AV0A232();

   /* move screened style #1 info to blanks map av0am010*/
  AV0A233();

   /* move screened style #1 info to blanks map av0am011*/
  AV0A234();

end // end AV0A231

// move style#1 to av0am009
Function AV0A232()
   /* move screened style #1 info to blanks map*/

  AV0AM009.AV0AMST1 = AV0AM002.AV0AMST1; /* style number*/
  AV0AM009.AV0AMNM1 = AV0AM002.AV0AMNM1; /* group of style info*/
  AV0AM009.AV0AMUM1 = AV0AM002.AV0AMUM1; /* group of style info*/
  AV0AM009.AV0AMCL1 = AV0AM002.AV0AMCL1; /* color id*/
  AV0AM009.AV0AMCD1 = AV0AM002.AV0AMCD1; /* color description*/
  AV0AM009.AV0AM-MAP-XOWCD1 = AV0AM002.AV0AM-MAP-XOWCD1;
                                                             /* owner group*/
  AV0AM009.AV0AM-MAP-XOWABR1 = AV0AM002.AV0AM-MAP-XOWABR1;
                                                               /* ownr abrv*/
  AV0AM009.AV0AMCP1 = AV0AM002.AV0AMCP1; /* current price*/
  AV0AM009.AV0AMCE1 = AV0AM002.AV0AMCE1; /* price effective date*/
  AV0AM009.AV0AMPD1 = AV0AM002.AV0AMPD1; /* percent difference*/
  AV0AM009.AV0AMPP1 = AV0AM002.AV0AMPP1; /* previous price*/
  AV0AM009.AV0AMPR1 = AV0AM002.AV0AMPR1; /* retail price or cost*/
  AV0AM009.AV0AMWH1 = AV0AM002.AV0AMWH1; /* warehouse code*/
  AV0AM009.AV0AMCM1 = AV0AM002.AV0AMCM1; /* product comment*/

end // end AV0A232

// move style#1 info to av0am010
Function AV0A233()
   /* move screened style #1 info to blanks map av0am010*/

  AV0AM010.AV0AMST1 = AV0AM007.AV0AMST1; /* style number*/
  AV0AM010.AV0AMSD1 = AV0AM007.AV0AMSD1; /* style description*/
  AV0AM010.AV0AMCL1 = AV0AM007.AV0AMCL1; /* color id*/
  AV0AM010.AV0AMCD1 = AV0AM007.AV0AMCD1; /* color description*/
  AV0AM010.AV0AM-MAP-XOWCD1 = AV0AM007.AV0AM-MAP-XOWCD1;
                                   /* owner code*/
  AV0AM010.AV0AM-MAP-XOWABR1 = AV0AM007.AV0AM-MAP-XOWABR1; /**/
                                   /* owner abreviation*/
  AV0AM010.AV0AMCP1 = AV0AM007.AV0AMCP1; /* current price*/
  AV0AM010.AV0AMWH1 = AV0AM007.AV0AMWH1; /* warehouse code*/

end // end AV0A233

// move style#1 info to av0am011
Function AV0A234()
   /* move screened style #1 info to blanks map*/

  AV0AM011.AV0AMST1 = AV0AM004.AV0AMST1; /* style number*/
  AV0AM011.AV0AMSD1 = AV0AM004.AV0AMSD1; /* style description*/
  AV0AM011.AV0AMCL1 = AV0AM004.AV0AMCL1; /* color id*/
  AV0AM011.AV0AMCD1 = AV0AM004.AV0AMCD1; /* color description*/
  AV0AM011.AV0AM-MAP-XOWCD1 = AV0AM004.AV0AM-MAP-XOWCD1;
                                   /* owner code*/
  AV0AM011.AV0AM-MAP-XOWABR1 = AV0AM004.AV0AM-MAP-XOWABR1; /**/
                                   /* owner abreviation*/
  AV0AM011.AV0AMCP1 = AV0AM004.AV0AMCP1; /* current price*/
  AV0AM011.AV0AMWH1 = AV0AM004.AV0AMWH1; /* warehouse code*/

end // end AV0A234

// breakout codes & qtys
Function AV0A235()
    /* move blank style group level quantities,*/
    /* condition codes, condition code dates and*/
    /* change flags to items 1 thru 40.*/


  AV0AW01.AV0AWQT = AV0AW11.AV0AWQT[AV0AWX11]; /* quantities*/

  AV0AW01.AV0AWCD = AV0AW11.AV0AWCD[AV0AWX11]; /* condition codes*/

  AV0AW01.AV0AWDT = AV0AW11.AV0AWDT[AV0AWX11]; /* code dates*/

  AV0AW01.AV0AWGF = AV0AW11.AV0AWGF[AV0AWX11]; /* change flag*/

end // end AV0A235

// move style#1 qtys & codes
Function AV0A236()
   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  if (AV0AW11.SY1BSTNB[AV0AWX11] == PG3REC.SY1STNBR
   && AV0AW11.SY2BCLCD[AV0AWX11] == PG3REC.SY2CLRID
   && AV0AW11.XDMCD[AV0AWX11] == PG3REC.XDMCD
   && AV0AW11.XQACD[AV0AWX11] == PG3REC.XQACD)
    /* NEXT SENTENCE*/
  else
    AV0A237(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];
      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 5)
        AV0AM009.AV0AMSZ1[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM009.AV0AMQT1[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM009.AV0AMIN1[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];

        AV0A238(); /* setup total quantity and condition code*/

      else

      end
      if (AV0AW01.AV0AWX4 == 5)
        AV0AM009.AV0AMS01 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM009.AV0AMQ01 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM009.AV0AMIN1[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];

        AV0A238(); /* setup total quantity and condition code*/

      end

      if (AV0AW01.AV0AWX4 > 5
       && AV0AW01.AV0AWX4 < 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM010.AV0AMSZ1[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM010.AV0AMQT1[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM010.AV0AMIN1[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A238(); /* setup total quantity*/
      end

      if (AV0AW01.AV0AWX4 == 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM010.AV0AMS01 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM010.AV0AMQ01 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM010.AV0AMIN1[6] = AV0AW01.AV1CHGFL[AV0AWX1];

        AV0A238(); /* setup total quantity and condition code*/

      end

      if (AV0AW01.AV0AWX4 > 11
       && AV0AW01.AV0AWX4 < 16)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 11;
        AV0AM011.AV0AMSZ1[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM011.AV0AMQT1[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM011.AV0AMIN1[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];

        AV0A238(); /* setup total quantity and condition code*/

      end

    end

    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM011.AV0AMQ01 = AV0AW01.AV0AWTQY;
  end

end // end AV0A236

// get valid sizes for blanks
Function AV0A237()
    /* CALL TO PG1050 TO GET EXTERNAL SIZES*/

  set PG3REC empty;

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)
    AV0AW01.SY5SZID[sysVar.arrayIndex] = 0;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  PG3REC.XGPCD = AV0AW11.XGPCD[AV0AWX11];
  PG3REC.SY1STNBR = AV0AW11.SY1BSTNB[AV0AWX11];
  PG3REC.SY2CLRID = AV0AW11.SY2BCLCD[AV0AWX11];
  PG3REC.XDMCD = AV0AW11.XDMCD[AV0AWX11];
  PG3REC.XQACD = AV0AW11.XQACD[AV0AWX11];
  PG3REC.PG3RETCD = 0;

  AV0AW01.AV0AWX6 = AV0AW01.AV0AWX11;

  while (AV0AW01.AV0AWX6 <= 4
   && AV0AW11.SY1BSTNB[AV0AWX6] == PG3REC.SY1STNBR
   && AV0AW11.SY2BCLCD[AV0AWX6] == PG3REC.SY2CLRID
   && AV0AW11.XDMCD[AV0AWX6] == PG3REC.XDMCD
   && AV0AW11.XQACD[AV0AWX6] == PG3REC.XQACD)
    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex <= 40)
      if (AV0AW01.XCDCD[sysVar.arrayIndex] > " ")
        AV0AW01.SY5SZID[sysVar.arrayIndex] = 1;
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
    AV0AW01.AV0AWX6 = AV0AW01.AV0AWX6 + 1;
  end

  sysVar.arrayIndex = 1;
  AV0AW01.AV0AWX5 = 0;

  while (sysVar.arrayIndex <= 40)
    if (AV0AW01.SY5SZID[sysVar.arrayIndex] > 0)
      AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 + 1;
      PG3REC.SY5SZID[AV0AWX5] = sysVar.arrayIndex;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  PG3REC.PG3FUNCD = "IE";
  PG3REC.PG3DATFM = "C";

  call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "PRODUCT";
    TA1REC.TA1LOCAT[3] = "AV0A237";
    TA1REC.TA1LOCAT[4] = "PG1050";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

    /* RETURN TO CALLING APP*/

end // end AV0A237

// set up qtys and cond codes
Function AV0A238()
    /* Setup totals and condition codes on av0am009*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 4)
    AV0AM009.AV0AMS01 = "*TOTAL*";
    AV0AM009.AV0AMCN1[5] = "*A/O*";
    AV0AM009.AV0AMQ01 = AV0AW01.AV0AWTQY;
  end
  if (AV0AW01.AV0AWX4 > 4
   && AV0AW01.AV0AWX4 < 11)
    AV0AM007.AV0AMS01 = "*TOTAL*";
    AV0AM007.AV0AMCN1[6] = "*A/O*";
    AV0AM007.AV0AMQ01 = AV0AW01.AV0AWTQY;
  end

  if (AV0AW01.AV0AWX4 <= 5)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM009.AV0AMCN1[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM007.AV0AMCN1[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 11)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM004.AV0AMCN1[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 5)
      AV0AM009.AV0AMCN1[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 5
     && AV0AW01.AV0AWX4 < 12)
      AV0AM007.AV0AMCN1[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 11)
      AV0AM011.AV0AMCN1[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    end
  end

  if (AV0AW01.AV0AWX4 <= 5)
    AV0AM009.AV0AMCN1[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    AV0AM010.AV0AMCN1[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM004.AV0AMCN1[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

end // end AV0A238

// setup blank maps style#2
Function AV0A240()

  if (AV0AM002.AV0AMST2 > " ")
     /* move screened style #2 info to blanks map*/
    AV0A241();

    if (AV0AW11.PG2SCRFL[AV0AWX11] == "U" /* if uncrested style avail*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "B" /* if blank style available*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "I") /* if interim style avail*/
       /* break out blank style quantities and condition codes*/
      AV0A235();

       /* move blank style#2 size info, quantities and codes to maps*/
      AV0A246();
    end
   /* move style #2 blank style message*/
    AV0AM009.AV0AMMS2 = AV0AW11.AV0AWMSG[AV0AWX11];
  end

end // end AV0A240

// move style#2 info to av0am010
Function AV0A241()
   /* move screened style #2 info to blanks map av0am009*/
  AV0A242();

   /* move screened style #2 info to blanks map av0am010*/
  AV0A243();

   /* move screened style #2 info to blanks map av0am011*/
  AV0A244();

end // end AV0A241

// move style#2 info to av0am009
Function AV0A242()
   /* move screened style #2 info to blanks map*/

  AV0AM009.AV0AMST2 = AV0AM002.AV0AMST2; /* style number*/
  AV0AM009.AV0AMNM2 = AV0AM002.AV0AMNM2; /* group of style info*/
  AV0AM009.AV0AMUM2 = AV0AM002.AV0AMUM2; /* group of style info*/
  AV0AM009.AV0AMCL2 = AV0AM002.AV0AMCL2; /* color id*/
  AV0AM009.AV0AMCD2 = AV0AM002.AV0AMCD2; /* color description*/
  AV0AM009.AV0AM-MAP-XOWCD2 = AV0AM002.AV0AM-MAP-XOWCD2;
                                                             /* owner group*/
  AV0AM009.AV0AM-MAP-XOWABR2 = AV0AM002.AV0AM-MAP-XOWABR2;
                                                              /* owner name*/
  AV0AM009.AV0AMCP2 = AV0AM002.AV0AMCP2; /* current price*/
  AV0AM009.AV0AMCE2 = AV0AM002.AV0AMCE2; /* price effective date*/
  AV0AM009.AV0AMPD2 = AV0AM002.AV0AMPD2; /* percent difference*/
  AV0AM009.AV0AMPP2 = AV0AM002.AV0AMPP2; /* previous price*/
  AV0AM009.AV0AMPR2 = AV0AM002.AV0AMPR2; /* retail price or cost*/
  AV0AM009.AV0AMWH2 = AV0AM002.AV0AMWH2; /* warehouse code*/
  AV0AM009.AV0AMCM2 = AV0AM002.AV0AMCM2; /* product comment*/

end // end AV0A242

// move style#2 info to av0am010
Function AV0A243()
   /* move screened style #2 info to blanks map*/

  AV0AM010.AV0AMST2 = AV0AM007.AV0AMST2; /* style number*/
  AV0AM010.AV0AMSD2 = AV0AM007.AV0AMSD2; /* style description*/
  AV0AM010.AV0AMCL2 = AV0AM007.AV0AMCL2; /* color id*/
  AV0AM010.AV0AMCD2 = AV0AM007.AV0AMCD2; /* color description*/
  AV0AM010.AV0AM-MAP-XOWCD2 = AV0AM007.AV0AM-MAP-XOWCD2;
                                   /* owner code*/
  AV0AM010.AV0AM-MAP-XOWABR2 = AV0AM007.AV0AM-MAP-XOWABR2;
                                   /* owner abreviation*/
  AV0AM010.AV0AMCP2 = AV0AM007.AV0AMCP2; /* current price*/
  AV0AM010.AV0AMWH2 = AV0AM007.AV0AMWH2; /* warehouse code*/

end // end AV0A243

// move style#2 info to av0am011
Function AV0A244()
   /* move screened style #2 info to blanks map*/

  AV0AM011.AV0AMST2 = AV0AM004.AV0AMST2; /* style number*/
  AV0AM011.AV0AMSD2 = AV0AM004.AV0AMSD2; /* style description*/
  AV0AM011.AV0AMCL2 = AV0AM004.AV0AMCL2; /* color id*/
  AV0AM011.AV0AMCD2 = AV0AM004.AV0AMCD2; /* color description*/
  AV0AM011.AV0AM-MAP-XOWCD2 = AV0AM004.AV0AM-MAP-XOWCD2;
                                   /* owner code*/
  AV0AM011.AV0AM-MAP-XOWABR2 = AV0AM004.AV0AM-MAP-XOWABR2;
                                   /* owner abrv*/
  AV0AM011.AV0AMCP2 = AV0AM004.AV0AMCP2; /* current price*/
  AV0AM011.AV0AMWH2 = AV0AM004.AV0AMWH2; /* warehouse code*/

end // end AV0A244

// move style#2 qtys & codes
Function AV0A246()
   /* Move style#2 sizes, quantities, and condition codes to maps*/

  if (AV0AW11.SY1BSTNB[AV0AWX11] == PG3REC.SY1STNBR
   && AV0AW11.SY2BCLCD[AV0AWX11] == PG3REC.SY2CLRID
   && AV0AW11.XDMCD[AV0AWX11] == PG3REC.XDMCD
   && AV0AW11.XQACD[AV0AWX11] == PG3REC.XQACD)
    /* NEXT SENTENCE*/
  else
    AV0A237(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 5)
        AV0AM009.AV0AMSZ2[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM009.AV0AMQT2[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM009.AV0AMIN2[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A248(); /* setup condition codes & move total to maps*/
      else

      end
      if (AV0AW01.AV0AWX4 == 5)
        AV0AM009.AV0AMS02 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM009.AV0AMQ02 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM009.AV0AMIN2[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A248(); /* set up condition codes and move total to maps*/
      end

      if (AV0AW01.AV0AWX4 > 5
       && AV0AW01.AV0AWX4 < 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM010.AV0AMSZ2[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM010.AV0AMQT2[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM010.AV0AMIN2[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A248(); /* set up condition codes and move total to maps*/
      end

      if (AV0AW01.AV0AWX4 == 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM010.AV0AMS02 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM010.AV0AMQ02 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM010.AV0AMIN2[6] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A248(); /* set up condition codes and move total to maps*/
      end

      if (AV0AW01.AV0AWX4 > 11
       && AV0AW01.AV0AWX4 < 16)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 11;
        AV0AM011.AV0AMSZ2[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM011.AV0AMQT2[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM011.AV0AMIN2[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A248(); /* set up condition codes and move total to maps*/
      end
    end
    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM011.AV0AMQ02 = AV0AW01.AV0AWTQY;
  end

end // end AV0A246

// setup totals & cond codes
Function AV0A248()
    /* Set up condition codes for style#2 and move quantity*/
    /* total to map*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 4)
    AV0AM009.AV0AMS02 = "*TOTAL*";
    AV0AM009.AV0AMCN2[5] = "*A/O*";
    AV0AM009.AV0AMQ02 = AV0AW01.AV0AWTQY;
  end
  if (AV0AW01.AV0AWX4 > 4
   && AV0AW01.AV0AWX4 < 11)
    AV0AM010.AV0AMS02 = "*TOTAL*";
    AV0AM010.AV0AMCN2[6] = "*A/O*";
    AV0AM010.AV0AMQ02 = AV0AW01.AV0AWTQY;
  end

  if (AV0AW01.AV0AWX4 <= 5)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM009.AV0AMCN2[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM010.AV0AMCN2[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 11)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM011.AV0AMCN2[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 5)
      AV0AM009.AV0AMCN2[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 5
     && AV0AW01.AV0AWX4 < 12)
      AV0AM010.AV0AMCN2[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 11)
      AV0AM011.AV0AMCN2[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    end
  end

  if (AV0AW01.AV0AWX4 <= 5)
    AV0AM009.AV0AMCN2[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    AV0AM010.AV0AMCN2[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM011.AV0AMCN2[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

end // end AV0A248

// setup blank map style #3
Function AV0A250()

  if (AV0AM002.AV0AMST3 > " ") /* if map field filled in*/
     /* move screened style #3 info to blanks map*/
    AV0A251();

    if (AV0AW11.PG2SCRFL[AV0AWX11] == "U" /* if uncrested style avail*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "B" /* or blank style available*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "I") /* or interim style available*/
       /* break out blank style quantities and condition codes*/
      AV0A235();
       /* move blank style#3 sizes info, quantities and codes to maps*/
      AV0A256();
    end
     /* move style #3 blank style message*/
    AV0AM009.AV0AMMS3 = AV0AW11.AV0AWMSG[AV0AWX11];
  end

end // end AV0A250

// move screened style#3 info
Function AV0A251()
   /* move screened style #3 info to blanks map av0am009*/
  AV0A252();

   /* move screened style #3 info to blanks map av0am010*/
  AV0A253();

   /* move screened style #3 info to blanks map av0am011*/
  AV0A254();

end // end AV0A251

// move style#3 info to av0am009
Function AV0A252()
   /* move screened style #3 info to blanks map av0a009*/

  AV0AM009.AV0AMST3 = AV0AM002.AV0AMST3; /* style number*/
  AV0AM009.AV0AMNM3 = AV0AM002.AV0AMNM3; /* group of style info*/
  AV0AM009.AV0AMUM3 = AV0AM002.AV0AMUM3; /* group of style info*/
  AV0AM009.AV0AMCL3 = AV0AM002.AV0AMCL3; /* color id*/
  AV0AM009.AV0AMCD3 = AV0AM002.AV0AMCD3; /* color description*/
  AV0AM009.AV0AM-MAP-XOWCD3 = AV0AM002.AV0AM-MAP-XOWCD3;
                                   /* owner group*/
  AV0AM009.AV0AM-MAP-XOWABR3 = AV0AM002.AV0AM-MAP-XOWABR3;
                                   /* owner name*/
  AV0AM009.AV0AMCP3 = AV0AM002.AV0AMCP3; /* current price*/
  AV0AM009.AV0AMCE3 = AV0AM002.AV0AMCE3; /* price effective date*/
  AV0AM009.AV0AMPD3 = AV0AM002.AV0AMPD3; /* percent difference*/
  AV0AM009.AV0AMPP3 = AV0AM002.AV0AMPP3; /* previous price*/
  AV0AM009.AV0AMPR3 = AV0AM002.AV0AMPR3; /* retail price or cost*/
  AV0AM009.AV0AMWH3 = AV0AM002.AV0AMWH3; /* warehouse code*/
  AV0AM009.AV0AMCM3 = AV0AM002.AV0AMCM3; /* product comment*/

end // end AV0A252

// move style#3 info to av0am010
Function AV0A253()
   /* move screened style #3 info to blanks map av0am010*/

  AV0AM010.AV0AMST3 = AV0AM004.AV0AMST3; /* style number*/
  AV0AM010.AV0AMSD3 = AV0AM004.AV0AMSD3; /* style description*/
  AV0AM010.AV0AMCL3 = AV0AM004.AV0AMCL3; /* color id*/
  AV0AM010.AV0AMCD3 = AV0AM004.AV0AMCD3; /* color description*/
  AV0AM010.AV0AM-MAP-XOWCD3 = AV0AM004.AV0AM-MAP-XOWCD3;
                                   /* owner code*/
  AV0AM010.AV0AM-MAP-XOWABR3 = AV0AM004.AV0AM-MAP-XOWABR3;
                                   /* owner abrv*/
  AV0AM010.AV0AMCP3 = AV0AM004.AV0AMCP3; /* current price*/
  AV0AM010.AV0AMWH3 = AV0AM004.AV0AMWH3; /* warehouse code*/

end // end AV0A253

// move style#3 info to av0am011
Function AV0A254()
   /* move screened style #3 info to blanks map av0am011*/

  AV0AM011.AV0AMST3 = AV0AM004.AV0AMST3; /* style number*/
  AV0AM011.AV0AMSD3 = AV0AM004.AV0AMSD3; /* style description*/
  AV0AM011.AV0AMCL3 = AV0AM004.AV0AMCL3; /* color id*/
  AV0AM011.AV0AMCD3 = AV0AM004.AV0AMCD3; /* color description*/
  AV0AM011.AV0AM-MAP-XOWCD3 = AV0AM004.AV0AM-MAP-XOWCD3;
                                                              /* owner code*/
  AV0AM011.AV0AM-MAP-XOWABR3 = AV0AM004.AV0AM-MAP-XOWABR3;
                                                              /* owner abrv*/
  AV0AM011.AV0AMCP3 = AV0AM004.AV0AMCP3; /* current price*/
  AV0AM011.AV0AMWH3 = AV0AM004.AV0AMWH3; /* warehouse code*/

end // end AV0A254

// move style#3 sizes, qtys, cds
Function AV0A256()
   /* MOVE STYLE#3 SIZES, QUANTITIES AND CONDITION CODES TO MAPS*/


  if (AV0AW11.SY1BSTNB[AV0AWX11] == PG3REC.SY1STNBR
   && AV0AW11.SY2BCLCD[AV0AWX11] == PG3REC.SY2CLRID
   && AV0AW11.XDMCD[AV0AWX11] == PG3REC.XDMCD
   && AV0AW11.XQACD[AV0AWX11] == PG3REC.XQACD)
    /* NEXT SENTENCE*/
  else
    AV0A237(); /* get valid sizes for blank style*/
  end

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 5)
        AV0AM009.AV0AMSZ3[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM009.AV0AMQT3[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM009.AV0AMIN3[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A258(); /* move condition code and qty total to maps*/
      end

      if (AV0AW01.AV0AWX4 == 5)
        AV0AM009.AV0AMS03 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM009.AV0AMQ03 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM009.AV0AMIN3[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A258(); /* move condition codes and qty total to maps*/
      end

      if (AV0AW01.AV0AWX4 > 5
       && AV0AW01.AV0AWX4 < 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM010.AV0AMSZ3[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM010.AV0AMQT3[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM010.AV0AMIN3[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A258(); /* move condition codes and qty total to maps*/
      end

      if (AV0AW01.AV0AWX4 == 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM010.AV0AMS03 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM010.AV0AMQ03 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM010.AV0AMIN3[6] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A258(); /* move condition code and qty total to maps*/
      end

      if (AV0AW01.AV0AWX4 > 11
       && AV0AW01.AV0AWX4 < 16)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 11;
        AV0AM011.AV0AMSZ3[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM011.AV0AMQT3[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM011.AV0AMIN3[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A258(); /* move condition code and qty total to maps*/
      end
    end
    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM011.AV0AMQ03 = AV0AW01.AV0AWTQY;
  end

end // end AV0A256

// move style#3 cond cds & total
Function AV0A258()
    /* SET UP condition codes for style#3 and move total to maps*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 4)
    AV0AM009.AV0AMS03 = "*TOTAL*";
    AV0AM009.AV0AMCN3[5] = "*A/O*";
    AV0AM009.AV0AMQ03 = AV0AW01.AV0AWTQY;
  end
  if (AV0AW01.AV0AWX4 > 4
   && AV0AW01.AV0AWX4 < 11)
    AV0AM010.AV0AMS03 = "*TOTAL*";
    AV0AM010.AV0AMCN3[6] = "*A/O*";
    AV0AM010.AV0AMQ03 = AV0AW01.AV0AWTQY;
  end

  if (AV0AW01.AV0AWX4 <= 5)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM009.AV0AMCN3[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM010.AV0AMCN3[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 11)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM011.AV0AMCN3[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 5)
      AV0AM009.AV0AMCN3[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 5
     && AV0AW01.AV0AWX4 < 12)
      AV0AM010.AV0AMCN3[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 11)
      AV0AM011.AV0AMCN3[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    end
  end

  if (AV0AW01.AV0AWX4 <= 5)
    AV0AM009.AV0AMCN3[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    AV0AM010.AV0AMCN3[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM011.AV0AMCN3[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

end // end AV0A258

// setup blank map style #4
Function AV0A260()

  if (AV0AM002.AV0AMST4 > " ") /* if map field filled in*/
     /* move screened style #4 info to blanks map*/
    AV0A261();
    if (AV0AW11.PG2SCRFL[AV0AWX11] == "U" /* if uncrested style available*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "B" /* or blank style available*/
     || AV0AW11.PG2SCRFL[AV0AWX11] == "I") /* or interim style available*/
       /* break out blank style quantities and condition codes*/
      AV0A235();
       /* move blank style#4 sizes info, quantities and codes to maps*/
      AV0A266();
    end
     /* move style #4 blank style message*/
    AV0AM009.AV0AMMS4 = AV0AW11.AV0AWMSG[AV0AWX11];
  end
end // end AV0A260

// move screened style#4 info
Function AV0A261()
   /* move screened style #4 info to blanks map av0am009*/
  AV0A262();

   /* move screened style #4 info to blanks map av0am010*/
  AV0A263();

   /* move screened style #4 info to blanks map av0am011*/
  AV0A264();

end // end AV0A261

// move style#4 info to av0am009
Function AV0A262()
   /* move screened style #4 info to blanks map av0a009*/

  AV0AM009.AV0AMST4 = AV0AM002.AV0AMST4; /* style number*/
  AV0AM009.AV0AMNM4 = AV0AM002.AV0AMNM4; /* group of style info*/
  AV0AM009.AV0AMUM4 = AV0AM002.AV0AMUM4; /* group of style info*/
  AV0AM009.AV0AMCL4 = AV0AM002.AV0AMCL4; /* color id*/
  AV0AM009.AV0AMCD4 = AV0AM002.AV0AMCD4; /* color description*/
  AV0AM009.AV0AM-MAP-XOWCD4 = AV0AM002.AV0AM-MAP-XOWCD4;
                                   /* owner group*/
  AV0AM009.AV0AM-MAP-XOWABR4 = AV0AM002.AV0AM-MAP-XOWABR4;
                                   /* owner name*/
  AV0AM009.AV0AMCP4 = AV0AM002.AV0AMCP4; /* current price*/
  AV0AM009.AV0AMCE4 = AV0AM002.AV0AMCE4; /* price effective date*/
  AV0AM009.AV0AMPD4 = AV0AM002.AV0AMPD4; /* percent difference*/
  AV0AM009.AV0AMPP4 = AV0AM002.AV0AMPP4; /* previous price*/
  AV0AM009.AV0AMPR4 = AV0AM002.AV0AMPR4; /* retail price or cost*/
  AV0AM009.AV0AMWH4 = AV0AM002.AV0AMWH4; /* warehouse code*/
  AV0AM009.AV0AMCM4 = AV0AM002.AV0AMCM4; /* product comment*/

end // end AV0A262

// move style#4 info to av0am010
Function AV0A263()
   /* move screened style #4 info to blanks map*/

  AV0AM010.AV0AMST4 = AV0AM007.AV0AMST4; /* style number*/
  AV0AM010.AV0AMSD4 = AV0AM007.AV0AMSD4; /* style description*/
  AV0AM010.AV0AMCL4 = AV0AM007.AV0AMCL4; /* color id*/
  AV0AM010.AV0AMCD4 = AV0AM007.AV0AMCD4; /* color description*/
  AV0AM010.AV0AM-MAP-XOWCD4 = AV0AM007.AV0AM-MAP-XOWCD4;
                                   /* owner code*/
  AV0AM010.AV0AM-MAP-XOWABR4 = AV0AM007.AV0AM-MAP-XOWABR4;
                                   /* owner abrv*/
  AV0AM010.AV0AMCP4 = AV0AM007.AV0AMCP4; /* current price*/
  AV0AM010.AV0AMWH4 = AV0AM007.AV0AMWH4; /* warehouse code*/

end // end AV0A263

// move style#4 info to av0am011
Function AV0A264()
   /* move screened style #4 info to blanks map*/

  AV0AM011.AV0AMST4 = AV0AM004.AV0AMST4; /* style number*/
  AV0AM011.AV0AMSD4 = AV0AM004.AV0AMSD4; /* style description*/
  AV0AM011.AV0AMCL4 = AV0AM004.AV0AMCL4; /* color id*/
  AV0AM011.AV0AMCD4 = AV0AM004.AV0AMCD4; /* color description*/
  AV0AM011.AV0AM-MAP-XOWCD4 = AV0AM004.AV0AM-MAP-XOWCD4;
                                   /* owner code*/
  AV0AM011.AV0AM-MAP-XOWABR4 = AV0AM004.AV0AM-MAP-XOWABR4;
                                   /* owner abrv*/
  AV0AM011.AV0AMCP4 = AV0AM004.AV0AMCP4; /* current price*/
  AV0AM011.AV0AMWH4 = AV0AM004.AV0AMWH4; /* warehouse code*/

end // end AV0A264

// move style#4 sizes, qtys, cds
Function AV0A266()
   /* MOVE SIZES, QUANTITIES AND CONDITION CODES FOR*/
   /* BLANK STYLE#4*/


  if (AV0AW11.SY1BSTNB[AV0AWX11] == PG3REC.SY1STNBR
   && AV0AW11.SY2BCLCD[AV0AWX11] == PG3REC.SY2CLRID
   && AV0AW11.XDMCD[AV0AWX11] == PG3REC.XDMCD
   && AV0AW11.XQACD[AV0AWX11] == PG3REC.XQACD)
     /* NEXT SENTENCE*/
  else
    AV0A237(); /* get valid sizes for blank style#4*/
  end

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")
      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 5)
        AV0AM009.AV0AMSZ4[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM009.AV0AMQT4[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM009.AV0AMIN4[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A268(); /* move condition code and qty total to maps*/
      end

      if (AV0AW01.AV0AWX4 == 5)
        AV0AM009.AV0AMS04 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM009.AV0AMQ04 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM009.AV0AMIN4[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A268(); /* move condition code and qty total to maps*/
      end

      if (AV0AW01.AV0AWX4 > 5
       && AV0AW01.AV0AWX4 < 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM010.AV0AMSZ4[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM010.AV0AMQT4[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM010.AV0AMIN4[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A268(); /* move condition code and qty total to maps*/
      end

      if (AV0AW01.AV0AWX4 == 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM010.AV0AMS04 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM010.AV0AMQ04 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM010.AV0AMIN4[6] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A268(); /* move condition code and qty total to maps*/
      end

      if (AV0AW01.AV0AWX4 > 11
       && AV0AW01.AV0AWX4 < 16)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 11;
        AV0AM011.AV0AMSZ4[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM011.AV0AMQT4[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM011.AV0AMIN4[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0A268(); /* move condition code and qty total to maps*/
      end
    end
    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM011.AV0AMQ04 = AV0AW01.AV0AWTQY;
  end

end // end AV0A266

// move style#4 cond cds & total
Function AV0A268()
   /* Set up condition codes for style#4 and move quantity*/
   /* total to maps*/


  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 4)
    AV0AM009.AV0AMS04 = "*TOTAL*";
    AV0AM009.AV0AMCN4[5] = "*A/O*";
    AV0AM009.AV0AMQ04 = AV0AW01.AV0AWTQY;
  end
  if (AV0AW01.AV0AWX4 > 4
   && AV0AW01.AV0AWX4 < 11)
    AV0AM010.AV0AMS04 = "*TOTAL*";
    AV0AM010.AV0AMCN4[6] = "*A/O*";
    AV0AM010.AV0AMQ04 = AV0AW01.AV0AWTQY;
  end

  if (AV0AW01.AV0AWX4 <= 5)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM009.AV0AMCN4[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM010.AV0AMCN4[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 11)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM011.AV0AMCN4[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 5)
      AV0AM009.AV0AMCN4[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 5
     && AV0AW01.AV0AWX4 < 12)
      AV0AM010.AV0AMCN4[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 11)
      AV0AM011.AV0AMCN4[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    end
  end

  if (AV0AW01.AV0AWX4 <= 5)
    AV0AM009.AV0AMCN4[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    AV0AM010.AV0AMCN4[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM011.AV0AMCN4[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

end // end AV0A268

// converse map1 of aprl blanks
Function AV0A270()
  AV0AM009.XXXCURDT = VGVar.currentShortGregorianDate;

  if (converseVar.validationMsgNum == 0)
     /* if blank style info to show*/
    AV0AM009.XXXERRID = "AV0A270";
    if (AV0AW11.SY1BSTNB[1] > " "
     || AV0AW11.SY1BSTNB[2] > " "
     || AV0AW11.SY1BSTNB[3] > " "
     || AV0AW11.SY1BSTNB[4] > " ")
      /* display blank quantities message*/
    else
      set AV0AM009.AV0AMMSG invisible; /* clear message*/
    end
  else
    set AV0AM009.AV0AMMSG invisible; /* clear message*/
  end

  converse AV0AM009 ;
  if (converseVar.eventKey is pf3)
    exit stack;
  end

  if (converseVar.eventKey is pf11) /* scroll to left*/
    AV0A275(); /* display av0am010*/
  end

  if (converseVar.eventKey is pf13) /* reset to screen style qtys*/
    AV0A015(); /* display av0am002*/
    while (converseVar.validationMsgNum != 0) /* if error continue to display error*/
                                   /* message*/
      AV0A015(); /* display map with error message*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* if error*/
    /* display error message*/
  else
    converseLib.validationFailed(15); /* invalid pfkey*/
    set AV0AM009.AV0AMMSG invisible; /* remove blank quantites message*/
  end

  AV0A270(); /* converse map with error msg*/

end // end AV0A270

// display map2 of aprl blanks
Function AV0A275()
  AV0AM010.XXXCURDT = VGVar.currentShortGregorianDate;

  if (converseVar.validationMsgNum == 0) /* if no previous message*/
   /* if blank style info to show:*/
    if (AV0AW11.SY1BSTNB[1] > " "
     || AV0AW11.SY1BSTNB[2] > " "
     || AV0AW11.SY1BSTNB[3] > " "
     || AV0AW11.SY1BSTNB[4] > " ")
     /* display blank quantities message*/
    else
      set AV0AM010.AV0AMMSG invisible;
    end
  else
    set AV0AM010.AV0AMMSG invisible;
  end

  converse AV0AM010 ;

  if (converseVar.eventKey is pf3) /* exit to 1st map*/
    exit stack;
  end

  if (converseVar.eventKey is pf10) /* scroll left*/
    AV0A270(); /* display av0am009*/
  end

  if (converseVar.eventKey is pf11) /* scroll right*/
    AV0A280(); /* display av0am011*/
  end

  if (converseVar.eventKey is pf13) /* reset*/
    AV0A025(); /* redisplay screened style info*/
    while (converseVar.validationMsgNum != 0) /* if error*/
      AV0A025(); /* display map with error message*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* if error*/
     /* display error message*/
  else
    converseLib.validationFailed(15); /* invalid pfkey*/
    set AV0AM010.AV0AMMSG invisible;
                                   /* REMOVE BLANK QUANTITIES MESSAGE*/
  end

  AV0A275(); /* converse map with error message*/

end // end AV0A275

// display map3 of aprl blanks
Function AV0A280()
  AV0AM011.XXXCURDT = VGVar.currentShortGregorianDate;

  if (converseVar.validationMsgNum == 0)
   /* if blank style info to show:*/
    if (AV0AW11.SY1BSTNB[1] > " "
     || AV0AW11.SY1BSTNB[2] > " "
     || AV0AW11.SY1BSTNB[3] > " "
     || AV0AW11.SY1BSTNB[4] > " ")
       /* display blank quantites message*/
    else
      set AV0AM011.AV0AMMSG invisible;
    end
  else
    set AV0AM011.AV0AMMSG invisible;
  end

  converse AV0AM011 ;

  if (converseVar.eventKey is pf3) /* exit to 1st map*/
    exit stack;
  end

  if (converseVar.eventKey is pf10) /* scroll left*/
    AV0A275(); /* converse av0am010*/
  end

  if (converseVar.eventKey is pf13) /* reset*/
    AV0A017(); /* redisplay screened style info av0am002*/
    while (converseVar.validationMsgNum != 0) /* if error*/
      AV0A017(); /* display map with error message*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* if error*/
     /* display error message*/
  else
    converseLib.validationFailed(15); /* invalid pfkey msg*/
    set AV0AM011.AV0AMMSG invisible; /* remove blank quantities message*/
  end

  AV0A280(); /* display map with error message*/
end // end AV0A280

// check if equipment product
Function AV0AS-CHECK-EQMT()
   /* --------------------- av0as-check-eqmt ---------------------------*/

   /* determine whether or not this is an equipment product*/

  set WEU0100 empty; /* initialize the passing record*/
  set SQLCA empty; /* initialize sqlca record*/

  WEU0100.WEU0100-EQUIP-PROD-FL = "N";
  AV0AW04.AV0AW-EQMT-FL = "N";
  WEU0100.WEU0100-CALLING-APPL = "AV0A";
  WEU0100.SQLCAREC = SQLCA.SQLCAREC;

  WEU0100.XGPCD = AV0AW04.XGPCD;
  WEU0100.SY1STNBR = AV0AW04.SY1STNBR;
  WEU0100.SY2CLRID = AV0AW04.SY2CLRID;
  WEU0100.XDMCD = AV0AW04.XDMCD;

  if (AV0AW04.SY2CLRID != " ")
    if (AV0AW04.XDMCD == " ")
      WEU0100.XDMCD = "00";
    end
  end

  if (AV0AW04.SY2CLRID == " ")
    AV0AS-EU0100-SS(); /* select set*/
    if (WEU0100.WEU0100-RETURN-CODE == 0) /* good return*/
      AV0AS-EU0100-SN(); /* select next - get the first record*/
      if (WEU0100.WEU0100-RETURN-CODE == 0) /* good return*/
        if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y") /* if equipment prod*/
          AV0AW04.AV0AW-EQMT-FL = "Y";
                                   /* set equipment flag to 'yes'*/
        end
      end
    end
    AV0AS-EU0100-CS(); /* close set*/
  else
    AV0AS-EU0100-SU(); /* select unique*/
    if (WEU0100.WEU0100-RETURN-CODE == 0) /* good return*/
      if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y") /* if equipment product*/
        AV0AW04.AV0AW-EQMT-FL = "Y";
      end
    end
  end

  AV0AW04.XPCCD = WEU0100.XPCCD;

end // end AV0AS-CHECK-EQMT

// PERFORM AVAIL D.B. CALL
Function AV0AS-EQMT-AVAIL()

    /* PERFORM D.B. CALL TO AVAIL*/

  if (AV7REC.SY2CLRID <= " ")
    AV7REC.SY2CLRID = "***";
  end

  call "IO2370" ("SA", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* declare/open cursor*/

  AV0AW01.AV0AWFT = "Y"; /* set first time flag*/

  if (AV0AM001.XLCCD == "  ")
    AV0AM001.XLCCD = "10";
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && AV0AW01.AV0AWX2 < 50)
    AV0AS65-EQMT(); /* select next*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (AV7REC.XLCCD == "10")
        AV0AW01.AV0AWFLG = "Y"; /* active life cycle y or n*/
      end
      if (AV7REC.XLCCD == AV0AM001.XLCCD)
        AV0AS-SAVE-EQMT(); /* check and move data to working*/
                                   /* storage*/
      end
    end
  end

  call "IO2370" ("CA", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* close eqmt cursor*/


  if (AV0AM001.XWHCD != " ")
    if (AV0AM001.XLCCD == "10")
      if (AV0AW01.AV0AWFLG == "N") /* active life cycle flag*/
        converseLib.validationFailed(167); /* product not in avail. w/l.c. = 10*/
        set AV0AM001.SY1STNBR[AV0AWX1] cursor, modified, bold;
        exit stack;
      else
        set AV0AM001.SY1STNBR[AV0AWX1] normal;
      end
    end
  end

  if (AV0AW01.AV0AWFT == "Y") /* first time flag*/
    AV0AW01.XQACD = "01";
    AV0AW01.XSNYR = AV0AW01.AV0AWL1;
    AV0AW01.AV0AWSR = 1;
   /* test ****/
   /* AV0AS75;                       /* move av7rec to save*/
   /* test ****/
  end

  if (AV0AW01.AV0AWX2 >= 50)
    exit stack;
  end

end // end AV0AS-EQMT-AVAIL

// EU0100 close cursor
Function AV0AS-EU0100-CS()
   /* ------------------- av0as-eu0100-cs -------------------------*/

  WEU0100.WEU0100-TASK = "CS";
  WEU0100.WEU0100-CALLER-LOCATION = "AV0AS-EU0100-CS";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to av0as-check-eqmt*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "AV0AS-EU0100-CS"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- av0as-eu0100-cs -------------------------*/
end // end AV0AS-EU0100-CS

// EU0100 select next
Function AV0AS-EU0100-SN()
   /* ------------------- av0as-eu0100-sn -------------------------*/

  WEU0100.WEU0100-TASK = "SN";
  WEU0100.WEU0100-CALLER-LOCATION = "AV0AS-EU0100-SN";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select next*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to av0as-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "AV0AS-EU0100-SN"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- av0as-eu0100-sn -------------------------*/
end // end AV0AS-EU0100-SN

// EU0100 select set cursor
Function AV0AS-EU0100-SS()
   /* ------------------- av0as-eu0100-ss -------------------------*/

  WEU0100.WEU0100-TASK = "SS";
  WEU0100.WEU0100-CALLER-LOCATION = "AV0AS-EU0100-SS";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select set*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to av0as-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "AV0AS-EU0100-SS"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- av0as-eu0100-ss -------------------------*/
end // end AV0AS-EU0100-SS

// EU0100 select unique
Function AV0AS-EU0100-SU()
   /* ------------------- av0as-eu0100-su -------------------------*/

  WEU0100.WEU0100-TASK = "SU";
  WEU0100.WEU0100-CALLER-LOCATION = "AV0AS-EU0100-SU";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select unique*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to av0as-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "AV0AS-EU0100-SU"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- av0as-eu0100-su -------------------------*/
end // end AV0AS-EU0100-SU

// Check if same prod, diff whse
Function AV0AS-FIND-FIRST()
    /* CHECK IF THIS IS THE SAME PRODUCT IN A DIFFERENT WAREHOUSE*/
    /* This is similar to, but not the same as, AV0AS-SAME-PRODUCT.*/

  AV0AW01.AV0AWX7 = AV0AW01.AV0AWX3 - 1;
  AV0AW01.AV0AW-SAME-PROD = "Y";

  while (AV0AW01.AV0AWX7 > 0
   && AV0AW01.AV0AW-SAME-PROD == "Y")
    if (AV0AW05.SY1STNBR[AV0AWX7] == AV0AW05.SY1STNBR[AV0AWX3]
     && AV0AW05.SY2CLRID[AV0AWX7] == AV0AW05.SY2CLRID[AV0AWX3]
     && AV0AW05.XDMCD[AV0AWX7] == AV0AW05.XDMCD[AV0AWX3]
     && AV0AW05.XUMCD[AV0AWX7] == AV0AW05.XUMCD[AV0AWX3]
     && AV0AW05.PC2INSEG[AV0AWX7] == AV0AW05.PC2INSEG[AV0AWX3]
     && AV0AW05.XSACD[AV0AWX7] == AV0AW05.XSACD[AV0AWX3]
     && AV0AW05.XPGCD[AV0AWX7] == AV0AW05.XPGCD[AV0AWX3])

      AV0AW01.AV0AW-SAME-PROD = "Y"; /* same product flag*/
      AV0AW01.AV0AWX7 = AV0AW01.AV0AWX7 - 1;
    else
      AV0AW01.AV0AW-SAME-PROD = "N"; /* same product flag*/
    end
  end

  if (AV0AW01.AV0AW-SAME-PROD == "N")
    AV0AW01.AV0AWX3 = AV0AW01.AV0AWX7 + 1;
  else
    AV0AW01.AV0AWX3 = 0;
  end

end // end AV0AS-FIND-FIRST

// GET blank style key
Function AV0AS-GETBLANK()
   /* move key info for getting blank style availability*/

  AV0AW01.AV0AWX11 = AV0AW01.AV0AWX11 + 1;

   /* If the style is a screened style, find out if it is a crested*/
   /* style by looking up the blank in the product file.*/
   /* If the blank is a blank for a crested style (pg2scrfl = 'u')*/
   /* the key will be loaded. Otherwise the work record key will be left*/
   /* blank, only the screened style flag will be loaded.*/

  if (PG2REC.PG2SCRFL == "S")
    AV0AW11.XGPCD[AV0AWX11] = PG2REC.XGPCD;
    AV0AW11.SY1BSTNB[AV0AWX11] = PG2REC.SY1BSTNB;
    AV0AW11.SY2BCLCD[AV0AWX11] = PG2REC.SY2BCLCD;
    AV0AW11.XDMCD[AV0AWX11] = PG2REC.XDMCD;

    set PG2REC empty; /* clear pg2rec to select blank style*/

     /* set up blank style key:*/
    PG2REC.XGPCD = AV0AW11.XGPCD[AV0AWX11];
    PG2REC.SY1STNBR = AV0AW11.SY1BSTNB[AV0AWX11];
    PG2REC.SY2CLRID = AV0AW11.SY2BCLCD[AV0AWX11];
    PG2REC.XDMCD = AV0AW11.XDMCD[AV0AWX11];

    AV0AS-VSYCLR01(); /* call style-color rec for blank;*/

    /* if the blank style is a blank for a crested product,*/
     /* load the rest of the record:*/
    if (PG2REC.PG2SCRFL == "U"
     || PG2REC.PG2SCRFL == "B"
     || PG2REC.PG2SCRFL == "I")
      AV0AW11.XWHCD[AV0AWX11] = AV0AW05.XWHCD[AV0AWX3];
      AV0AW11.SY1STNBR[AV0AWX11] = AV0AW05.SY1STNBR[AV0AWX3];
      AV0AW11.SY2CLRID[AV0AWX11] = AV0AW05.SY2CLRID[AV0AWX3];
      AV0AW11.XQACD[AV0AWX11] = AV0AW05.XQACD[AV0AWX3];
      AV0AW11.XOWCD[AV0AWX11] = AV0AW05.XOWCD[AV0AWX3];
      AV0AW11.PC2INSEG[AV0AWX11] = AV0AW05.PC2INSEG[AV0AWX3];
      AV0AW11.XSACD[AV0AWX11] = AV0AW05.XSACD[AV0AWX3];
      AV0AW11.XPGCD[AV0AWX11] = AV0AW05.XPGCD[AV0AWX3];
      AV0AW11.XUMCD[AV0AWX11] = AV0AW05.XUMCD[AV0AWX3];
      AV0AW11.AV4PRDBD[AV0AWX11] = AV0AW05.AV4PRDBD[AV0AWX3];

    else /* clear the key*/
      AV0AW11.XGPCD[AV0AWX11] = " ";
      AV0AW11.SY1BSTNB[AV0AWX11] = " ";
      AV0AW11.SY2BCLCD[AV0AWX11] = " ";
      AV0AW11.XDMCD[AV0AWX11] = " ";
    end
  else
    if (PG2REC.PG2SCRFL == "U") /* if product is a blank for a crested*/
                                   /* style*/
      AV0AW11.PG2SCRFL[AV0AWX11] = "X"; /* indicate it*/
    end
  end

  if (AV0AW11.PG2SCRFL[AV0AWX11] != "X")
    AV0AW11.PG2SCRFL[AV0AWX11] = PG2REC.PG2SCRFL;
  end

end // end AV0AS-GETBLANK

// Check if same prod, diff whse
Function AV0AS-SAME-PRODUCT()
    /* CHECK IF THIS IS THE SAME PRODUCT IN A DIFFERENT WAREHOUSE*/

  if (AV0AW05.SY1STNBR[AV0AWX3] == AV0AM003.SY1STNBR /* style number*/
   && AV0AW05.SY2CLRID[AV0AWX3] == AV0AM003.SY2CLRID /* color id*/
   && AV0AW05.XDMCD[AV0AWX3] == AV0AM003.XDMCD       /* dimension*/
   && AV0AW05.PC2INSEG[AV0AWX3] == AV0AM003.PC2INSEG /* inventory segment*/
   && AV0AW05.XPGCD[AV0AWX3] == AV0AM003.XPGCD       /* package type*/
   && AV0AW05.XUMCD[AV0AWX3] == AV0AM003.XUMCD)      /* unit of measure*/

    AV0AW01.AV0AW-SAME-PROD = "Y"; /* same product flag*/
  else
    AV0AW01.AV0AW-SAME-PROD = "N"; /* same product flag*/
  end

end // end AV0AS-SAME-PRODUCT

// PERFORM AVAIL D.B. CALL
Function AV0AS-SAVE-EQMT()
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* Check the user sales office and whether or not the warehouse was*/
   /* wildcarded.  If it was, default Canadian equipment to Canadian*/
   /* warehouse(s) and US equipment to US warehouse(s).  Otherwise, save*/
   /* only the requested warehouse data.*/
   /*  */
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (AV0AM001.XWHCD > "  ") /* warehouse specified*/
    if (AV7REC.XWHCD == AV0AM001.XWHCD) /* retrieved warehouse matches map*/
      AV0ASSAVDATA(); /* check and move data to working*/
                                   /* storage*/
    end /**/
  else /* warehouse was wildcarded*/
    if (AV0AW01.AV0AW-CAN-SO == "Y") /* Canadian SO*/
      if (AV7REC.XWHCD == "42") /* Canadian warehouse*/
        AV0ASSAVDATA(); /* check and move data to working*/
                                   /* storage*/
      end
    else /* not Canadian SO*/
      if (AV7REC.XWHCD == "09" /* Promo warehouse*/
       || AV7REC.XWHCD == "12" /* International Promo warehouse*/
       || AV7REC.XWHCD == "42") /* Canadian warehouse*/
                                  /* don't save this record*/
      else /* warehouse was wildcarded*/
        AV0ASSAVDATA(); /* check and move data to working*/
                                   /* storage*/
      end
    end
  end

end // end AV0AS-SAVE-EQMT

// get allow new ordrs from dprod
Function AV0AS-SY2ALNOR()
   /* get allow new orders flag from dprod.vcolor01*/

  set SY2REC empty;

  SY2REC.XGPCD = AV0AM001.XGPCD; /* general product class*/
  SY2REC.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3]; /* style number*/
  SY2REC.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3]; /* color id*/
  SY2REC.XDMCD = AV0AW05.XDMCD[AV0AWX3]; /* dimension code*/
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[1] = "AV0AS-SY";
    TA1REC.TA1LOCAT[2] = "2ALNOR  ";
    TA1REC.TA1LOCAT[3] = "IO0130  ";
    TA1REC.TA1LOCAT[4] = "        ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0AM003.SY2ALNOR = SY2REC.SY2ALNOR;

    /* FORMAT FUTURE OFFER DATE*/

  if (SY2REC.SY2FOFBD > 0)
    AV0AW01.AV0AW-DATE-WORK = SY2REC.SY2FOFBD;
    AV0AW01.AV0AW-FORMAT-YY = AV0AW01.AV0AW-DATE-YY;
    AV0AW01.AV0AW-FORMAT-MM = AV0AW01.AV0AW-DATE-MM;
    AV0AW01.AV0AW-FORMAT-DD = AV0AW01.AV0AW-DATE-DD;
    AV0AW01.AV0AW-FORMAT-DASH1 = "-";
    AV0AW01.AV0AW-FORMAT-DASH2 = "-";
    AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3] = AV0AW01.AV0AW-FORMAT-DATE;
  else
    AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3] = " ";
  end

   /* TEST ****/

  if (AV0AW05.AV0AW-EQMT-FL[AV0AWX3] <= " ") /* haven't chked eqmt?*/
    AV0AW05.AV0AW-EQMT-FL[AV0AWX3] = "N";
    AV0AW04.XGPCD = AV0AM001.XGPCD; /* general product class*/
    AV0AW04.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3]; /* style number*/
    AV0AW04.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3]; /* color id*/
    AV0AW04.XDMCD = AV0AW05.XDMCD[AV0AWX3]; /* dimension code*/
    AV0AS-CHECK-EQMT(); /* determine if equipment product*/
    AV0AW05.AV0AW-EQMT-FL[AV0AWX3] = AV0AW04.AV0AW-EQMT-FL;
                                   /* set array equipment flag 'y'es*/
  end

   /* IF AV0AW01.AV0AW-EQMT-FL EQ 'Y'; /* equipment product*/
    /* MOVE 'Y' TO AV0AW05.AV0AW-EQMT-FL(AV0AWX3);*/
   /* ELSE;*/
    /* MOVE 'N' TO AV0AW05.AV0AW-EQMT-FL(AV0AWX3);*/
   /* END;*/

   /* TEST ****/

    /* GET SEASON CODE CARRY OVER FLAG*/

  AV0AW05.AV0AW-OFFER-DT-FLD[AV0AWX3] = "  ";
  if (SY2REC.XSECD > " ") /* Season code exists*/
    if (SY2REC.XSECD in XSETBL.XSECD /* Code in table*/
     && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      if (XSETBL.XSECOVFL[sysVar.arrayIndex] == "Y")
        AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3] = "  ";
      else
        if (SY2REC.SY2FOFBD > 0)
          AV0AW05.AV0AW-OFFER-DT-FLD[AV0AWX3] = "1ST OFFER DT:";
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* use Canadian overrides*/
   /* ------------------------------------------------------------*/
  if (AV0AW01.AV0AW-CAN-SO == "Y") /* Canadian Sales Office*/
    if (AV0AW05.AV0AW-CAN-OVRRD-FND[AV0AWX3] == "Y") /* overrides found*/
      /* check allow new order flag*/
      if (AV0AW05.SY2ALNOR[AV0AWX3] != SY2REC.SY2ALNOR)
        AV0AM003.SY2ALNOR = AV0AW05.SY2ALNOR[AV0AWX3];
      end
      /* check future offer beginning date*/
      if (AV0AW05.SY2FOFBD[AV0AWX3] > 0)
        AV0AW01.AV0AW-DATE-WORK = AV0AW05.SY2FOFBD[AV0AWX3];
        AV0AW01.AV0AW-FORMAT-YY = AV0AW01.AV0AW-DATE-YY;
        AV0AW01.AV0AW-FORMAT-MM = AV0AW01.AV0AW-DATE-MM;
        AV0AW01.AV0AW-FORMAT-DD = AV0AW01.AV0AW-DATE-DD;
        AV0AW01.AV0AW-FORMAT-DASH1 = "-";
        AV0AW01.AV0AW-FORMAT-DASH2 = "-";
        AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3] = AV0AW01.AV0AW-FORMAT-DATE;
      end
      /* check season code*/
      AV0AW05.AV0AW-OFFER-DT-FLD[AV0AWX3] = "  ";
      if (AV0AW05.XSECD[AV0AWX3] > " ") /* Season code override exists*/
        if (AV0AW05.XSECD[AV0AWX3] in XSETBL.XSECD /* Code in table*/
         && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          if (XSETBL.XSECOVFL[sysVar.arrayIndex] == "Y")
            AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3] = "  ";
          else
            if (AV0AW05.SY2FOFBD[AV0AWX3] > 0)
              AV0AW05.AV0AW-OFFER-DT-FLD[AV0AWX3] = "1ST OFFER DT:";
            end
          end
        else
          AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3] = "  ";
        end
      else
        AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3] = "  ";
      end
    else
      AV0AW05.SY2ALNOR[AV0AWX3] = SY2REC.SY2ALNOR;
      AV0AW05.OPZHMIND[AV0AWX3] = SY2REC.OPZHMIND;
    end
  else
    AV0AW05.SY2ALNOR[AV0AWX3] = SY2REC.SY2ALNOR;
    AV0AW05.OPZHMIND[AV0AWX3] = SY2REC.OPZHMIND;
  end

end // end AV0AS-SY2ALNOR

// GET info from product file
Function AV0AS-VSYCLR01()
   /* ------------------------------------------------------------*/
   /* Get the dprodg.vsyclr01 record*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, continue*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
         /* continue*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYCLR01";
      TA1REC.TA1TBLKE = PG2REC.PG2KEY;
      TA1REC.TA1LOCAT[3] = "AV0AS-GETBLANK";
      TA1REC.TA1LOCAT[4] = "IO3120 ";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();
    end
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "VSYCLR01";
    TA1REC.TA1LOCAT[3] = "AV0AS-VSYCLR01";
    TA1REC.TA1LOCAT[4] = "IO3120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

end // end AV0AS-VSYCLR01

// PREEDIT ENTERED DATA
Function AV0AS01()
   /* STATEMENT GROUP FOR FIELD EDITING OF MAP AV0AM001*/

   /* the following moves save map fields and are*/
   /* filled in by program when av0am001 is reconversed*/
   /* this is so users will not have to reenter these*/
   /* fields during a session.*/

  AV0AW01.AV0AWZG = AV0AM001.XGPCD; /* save gpc*/
  AV0AW01.AV0AWZA = AV0AM001.XWHCD; /* save warehouse*/
  AV0AW01.AV0AWZD = AV0AM001.XOWCD; /* save owner code*/
  AV0AW01.AV0AWZE = AV0AM001.XQACD; /* save quality code*/
  AV0AW01.AV0AWZF = AV0AM001.XLCCD; /* save lifecycle cd*/

  AV0AW01.AV0AWFF = "N";

  if (AV0AM001.XGPCD <= " ")
    set AV0AM001.XGPCD cursor, bold;
    AV0AW01.AV0AWFF = "Y";
    converseLib.validationFailed(20); /* enter gpc code*/
    exit stack;
  end

  if (AV0AM001.XGPCD in XGPTBL.XGPCD) /* SEARCH FOR GPC IN TABLE*/
    AV0AM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* SEARCH WAS SUCCESSFUL*/
    set AV0AM001.XGPCD normal;
  else
    set AV0AM001.XGPCD cursor, modified, bold;
    AV0AW01.AV0AWFF = "Y";
    converseLib.validationFailed(002); /* invalid code*/
    AV0AM001.XGPDESC = " ";
    exit stack;
  end

  if (AV0AW01.AV0AW-CAN-SO == "Y") /* if Canadian sales office*/
    if (AV0AM001.XWHCD == "  ") /* warehouse wildcarded*/
      AV0AM001.XWHCD = "42"; /* default to warehouse 42*/
    end
  end

  if (AV0AM001.XLCCD in XLCTBL.XLCCD)
    AV0AM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
  end

  if (AV0AM001.XQACD in XQATBL.XQACD)
    AV0AM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  end

  if (AV0AM001.SY1STNBR[1] > " "
   || AV0AM001.SY1STNBR[2] > " "
   || AV0AM001.SY1STNBR[3] > " "
   || AV0AM001.SY1STNBR[4] > " "
   || AV0AM001.SY1STNBR[5] > " "
   || AV0AM001.SY1STNBR[6] > " "
   || AV0AM001.SY1STNBR[7] > " "
   || AV0AM001.SY1STNBR[8] > " "
   || AV0AM001.SY1STNBR[9] > " "
   || AV0AM001.SY1STNBR[10] > " ")
     /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(19); /* enter style number*/
    AV0AW01.AV0AWFF = "Y";
    set AV0AM001.SY1STNBR[1] cursor, modified, bold;
    exit stack;
  end

  AV0AM001.XWHABRV = " ";
  AV0AM001.XOWDESC = " ";

  set AV0AW04 empty; /* clear Equipment product check working*/
                                   /* storage*/

  AV0AW01.AV0AWX1 = 10;
  while (AV0AW01.AV0AWX1 >= 1)
    AV0AM001.SY1SSTNM[AV0AWX1] = " ";
    AV0AM001.SY2CLRAB[AV0AWX1] = " ";
    AV0AM001.XDMABRV[AV0AWX1] = " ";
    AV0AM001.XUMDESC[AV0AWX1] = " ";
    if (AV0AM001.SY1STNBR[AV0AWX1] > " ")
      if (AV0AM001.XUMCD[AV0AWX1] > " ")
        set AV0AM001.XUMCD[AV0AWX1] normal;
        AV0AW01.AV0AWX2 = AV0AW01.AV0AWX1;
        AV0AS30(); /* get unit of measure descript*/
      else
         /* NEXT SENTENCE*/
      end
    end

    if (AV0AM001.SY1STNBR[AV0AWX1] > " ")
      if (AV0AM001.XDMCD[AV0AWX1] > " ")
        set AV0AM001.XDMCD[AV0AWX1] normal;
        AV0AW01.AV0AWX2 = AV0AW01.AV0AWX1;
        AV0AS35(); /* get dimension code descript*/
      else
         /* NEXT SENTENCE*/
      end
    end

    if (AV0AM001.SY1STNBR[AV0AWX1] > " ")
      if (AV0AM001.SY2CLRID[AV0AWX1] > " ")
        set AV0AM001.SY2CLRID[AV0AWX1] normal;
      else
         /* NEXT SENTENCE*/
      end
    end

    if (AV0AM001.SY1STNBR[AV0AWX1] > " ")
      if (AV0AM001.SY1STNBR[AV0AWX1] != AV0AW04.SY1STNBR /* different style*/
       || AV0AM001.SY2CLRID[AV0AWX1] != AV0AW04.SY2CLRID)
                                   /* different color*/
        AV0AW04.XGPCD = AV0AM001.XGPCD;
        AV0AW04.SY1STNBR = AV0AM001.SY1STNBR[AV0AWX1];
        AV0AW04.SY2CLRID = AV0AM001.SY2CLRID[AV0AWX1];
        AV0AW04.XDMCD = AV0AM001.XDMCD[AV0AWX1];
        AV0AM001.AV0AM-EQMT-FL[AV0AWX1] = "N"; /* init map eqmt fl*/
        AV0AS-CHECK-EQMT(); /* check if Equipment product*/
      end
      AV0AM001.AV0AM-EQMT-FL[AV0AWX1] = AV0AW04.AV0AW-EQMT-FL; /**/
    else
         /* NEXT SENTENCE*/
    end

    AV0AW01.AV0AWX1 = AV0AW01.AV0AWX1 - 1;
  end

   /* verify owner and get descrption:*/
  if (AV0AM001.XGPCD == "03")
    if (AV0AW01.AV0AW-CAN-SO == "Y") /* if Canadian sales office*/
      AV0ASOWNR-CAN();
    else
      AV0ASOWNR();
    end
  else
    AV0ASOWNR02();
  end

  if (AV0AM001.XWHCD <= " ")
    set AV0AM001.XWHCD normal;
  end

  if (AV0AM001.XGPCD != "02"
   && AV0AM001.XGPCD != "03"
   && AV0AM001.XWHCD <= "  ")
    AV0AW01.AV0AWFF = "Y";
    converseLib.validationFailed(14); /* required field*/
    AV0AM001.XWHABRV = " ";
    set AV0AM001.XWHCD cursor, modified, bold;
    set AV0AM001.XOWCD bold;
  end

  if (AV0AM001.XWHCD > "  ")
    if (AV0AM001.XWHCD in XWHTBL.XWHCD)
      AV0AM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      set AV0AM001.XWHCD normal;
      if (AV0AW01.AV0AW-CAN-SO == "Y") /* if Canadian sales office*/
        if (AV0AM001.XWHCD != "42") /* warehouse not of Canada*/
          AV0AW01.AV0AWFF = "Y";
          converseLib.validationFailed(058); /* invalid warehouse*/
          AV0AM001.XWHABRV = " ";
          set AV0AM001.XWHCD cursor, modified, bold;
        end
      else /* sales office of USA*/
        if (AV0AW01.AV0AW-EQMT-SO == "Y") /* equipment sales office*/
           /* any warehouse is valid*/
        else /* sales office of USA*/
          if (AV0AM001.XWHCD == "42"
           || AV0AM001.XWHCD == "25") /* warehouse of Canada*/
            AV0AW01.AV0AWFF = "Y";
            converseLib.validationFailed(058); /* invalid warehouse*/
            AV0AM001.XWHABRV = " ";
            set AV0AM001.XWHCD cursor, modified, bold;
          end
        end
      end

      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == AV0AM001.XGPCD
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == AV0AM001.XGPCD
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == AV0AM001.XGPCD
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == AV0AM001.XGPCD
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == AV0AM001.XGPCD
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == AV0AM001.XGPCD
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == AV0AM001.XGPCD
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == AV0AM001.XGPCD)
         /* NEXT SENTENCE*/
      else
        converseLib.validationFailed(021); /* warehouse not valid for this gpc*/
        AV0AW01.AV0AWFF = "Y";
        set AV0AM001.XWHCD cursor, bold;
      end

    else
      AV0AW01.AV0AWFF = "Y";
      converseLib.validationFailed(003); /* invalid warehouse*/
      AV0AM001.XWHABRV = " ";
      set AV0AM001.XWHCD cursor, modified, bold;
    end
  end

end // end AV0AS01

// GET DESCRIPTIONS FROM PRODUCT
Function AV0AS05()

   /* GET DESCRIPTIONS FOR STYLE/COLOR/DIMENSION/UOM/WHSE/OWNER*/

  AV0AW01.AV0AWX2 = 10;
  while (AV0AW01.AV0AWX2 >= 01)

    if (AV0AM001.SY1STNBR[AV0AWX2] > " ")
      AV0AS10(); /* style description, dprod.vstyle01*/
      AV0AS15(); /* color description, dprod.vcolor01*/
    end

    AV0AW01.AV0AWX2 = AV0AW01.AV0AWX2 - 1;

  end
end // end AV0AS05

// GET STYLE DESCRIPTION
Function AV0AS10()

   /* GET DESCRIPTIONS FOR STYLE*/

  if (AV0AM001.SY1STNBR[AV0AWX2] > " ")
    SY1REC.SY1STNBR = AV0AM001.SY1STNBR[AV0AWX2];
    SY1REC.XGPCD = AV0AM001.XGPCD;
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes}; /* INQUIRY ONLY*/
  else
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    set AV0AM001.SY1STNBR[AV0AWX2] cursor, modified, bold;
    AV0AW01.AV0AWFF = "Y";
    converseLib.validationFailed(006);
    AV0AM001.SY1SSTNM[AV0AWX2] = " ";
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPROD   "; /* DATA BASE NAME*/
      TA1REC.TA1TBLVU = "VSTYLE01"; /* TABLE NAME*/
      TA1REC.TA1LOCAT[3] = "AV0AS10 "; /* STATEMENT GROUP*/
      TA1REC.TA1LOCAT[4] = "IO0120  "; /* I/O MOD NAME*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* CALL ABEND FORMATTER*/
      COMMAREA.CAUSERA = " "; /* CLEAR USER COMMAREA*/
      XSPF4();
    else
      if (AV0AM001.XUMCD[AV0AWX2] == " ")
        AV0AM001.XUMCD[AV0AWX2] = SY1REC.XUMCD;
        AV0AM001.SY1SSTNM[AV0AWX2] = SY1REC.SY1SSTNM;
        AV0AS30();
        set AV0AM001.SY1STNBR[AV0AWX2] normal;
      else
        if (AV0AM001.XUMCD[AV0AWX2] > " ")
          AV0AM001.SY1SSTNM[AV0AWX2] = SY1REC.SY1SSTNM;
          set AV0AM001.SY1STNBR[AV0AWX2] normal;
          AV0AS30();
        end
      end
    end
  end
end // end AV0AS10

// GET COLOR DESCRIPTION
Function AV0AS15()

    /* GET THE COLOR ID*/

  if (AV0AM001.XDMCD[AV0AWX2] > " ")
    SY2REC.XDMCD = AV0AM001.XDMCD[AV0AWX2];
    AV0AS35(); /* get dimension code description*/
  else
    SY2REC.XDMCD = "**";
  end

  if (AV0AM001.SY1STNBR[AV0AWX2] > " "
   && AV0AM001.SY1SSTNM[AV0AWX2] > " "
   && AV0AM001.SY2CLRID[AV0AWX2] > " ")
    SY2REC.SY1STNBR = AV0AM001.SY1STNBR[AV0AWX2];
    SY2REC.XGPCD = AV0AM001.XGPCD;
    SY2REC.SY2CLRID = AV0AM001.SY2CLRID[AV0AWX2];
    AV0AS16(); /* open the cursor for dprod.vcolor01*/

  else
    set AV0AM001.SY2CLRID[AV0AWX2] normal;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    AV0AS17(); /* fetch a row from vcolor01*/
  else
    AV0AS18(); /* close cursor*/
    return;
  end

   /* MOVE 'N' TO AV0AM001.AV0AM-EQMT-FL(AV0AWX2);*/
                                  /* set equipment flag default 'no'*/
  if (SQLCA.VAGen_SQLCODE == 0)
    AV0AM001.SY2CLRAB[AV0AWX2] = SY2REC.SY2CLRAB;
    /* AV0AS-CHECK-EQMT;              /* determine if equipment product*/
    /* IF AV0AW01.AV0AW-EQMT-FL EQ 'Y';/* equipment product*/
      /* MOVE 'Y' TO AV0AM001.AV0AM-EQMT-FL(AV0AWX2);*/
    /* END;*/
    AV0AS20(); /* get current life cycle*/
    if (SY2REC.XGPCD == "03" /* if apparel product*/
     && AV0AW01.AV4PRDBD == 0) /* and season begin date = 0*/
      AV0AW01.XSNYR = SY2REC.XSNYR; /* move colr sesn year to map*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set AV0AM001.SY2CLRID[AV0AWX2] cursor, modified, bold;
      converseLib.validationFailed(007);
      AV0AW01.AV0AWFF = "Y";
      AV0AM001.SY2CLRAB[AV0AWX2] = " ";
    end
  end

  AV0AS18(); /* close cursor*/
end // end AV0AS15

// open cursor for dprod.vcolor01
Function AV0AS16()
   /* -------------------------av0as16----------------------------*/
                 /* select set dprod.vcolor01 data*/
   /* -------------------------av0as16----------------------------*/


  try
    call "IO0130" ("S2", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S16"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0as16----------------------------*/
end // end AV0AS16

// fetch a row for dprod.vcolor01
Function AV0AS17()
   /* -------------------------av0as17----------------------------*/
              /* fetch next row of dprod.vcolor01 data*/
   /* -------------------------av0as17----------------------------*/


  try
    call "IO0130" ("N2", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S17"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0as17----------------------------*/
end // end AV0AS17

// clse cursor for dprod.vcolor01
Function AV0AS18()
   /* -------------------------av0as18----------------------------*/
              /* close cyrsor for dprod.vcolor01 data*/
   /* -------------------------av0as18----------------------------*/


  try
    call "IO0130" ("C2", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S18"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0as18----------------------------*/
end // end AV0AS18

// GET CURRENT LIFECYCLE
Function AV0AS20()

    /* GET CURRENT LIFE CYCLE*/
  return;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
     /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "TA0040";
    TA1REC.TA1TBLKE = TA2REC.TA2DTOPT;
    TA1REC.TA1LOCAT[1] = "AV0AS20";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  AV0AW01.AV0AWTD = TA2REC.TA2GRGGN;

  if (AV0AW01.AV0AWTD >= SY2REC.SY2CEDT1)
    if (SY2REC.XLCCD1 == "10")
      set AV0AM001.SY2CLRID[AV0AWX2] normal;
      return;
    else
      set AV0AM001.SY2CLRID[AV0AWX2] cursor, modified, bold;
      AV0AW01.AV0AWFF = "Y";
      converseLib.validationFailed(013);
      return;
    end
  end

  if (AV0AW01.AV0AWTD >= SY2REC.SY2CEDT2)
    if (SY2REC.XLCCD2 == "10")
      set AV0AM001.SY2CLRID[AV0AWX2] normal;
      return;
    else
      set AV0AM001.SY2CLRID[AV0AWX2] cursor, modified, bold;
      AV0AW01.AV0AWFF = "Y";
      converseLib.validationFailed(013);
      return;
    end
  end

  if (AV0AW01.AV0AWTD >= SY2REC.SY2CEDT3)
    if (SY2REC.XLCCD3 == "10")
      set AV0AM001.SY2CLRID[AV0AWX2] normal;
      return;
    else
      set AV0AM001.SY2CLRID[AV0AWX2] cursor, modified, bold;
      AV0AW01.AV0AWFF = "Y";
      converseLib.validationFailed(013);
      return;
    end
  end

  if (AV0AW01.AV0AWTD >= SY2REC.SY2CEDT4)
    if (SY2REC.XLCCD4 == "10")
      set AV0AM001.SY2CLRID[AV0AWX2] normal;
      return;
    else
      set AV0AM001.SY2CLRID[AV0AWX2] cursor, modified, bold;
      AV0AW01.AV0AWFF = "Y";
      converseLib.validationFailed(013);
      return;
    end
  end
end // end AV0AS20

// GET DESC FOR UNIT OF MEASURE
Function AV0AS30()

     /* GET DESCRIPTION FOR UNIT OF MEASURE*/

  if (AV0AM001.XUMCD[AV0AWX2] in XUMTBL.XUMCD)
    AV0AM001.XUMDESC[AV0AWX2] = XUMTBL.XUMDESC[sysVar.arrayIndex];
    set AV0AM001.XUMCD[AV0AWX2] normal;
  else
    AV0AW01.AV0AWFF = "Y";
    converseLib.validationFailed(2);
    set AV0AM001.XUMCD[AV0AWX2] cursor, bold;
    AV0AM001.XUMDESC[AV0AWX2] = " ";
  end
end // end AV0AS30

// GET DESC FOR DIMENSION CODE
Function AV0AS35()

   /* GET DIMENSION DESCRIPTION*/

  if (AV0AM001.XDMCD[AV0AWX2] in XDMTBL.XDMCD)
    AV0AM001.XDMABRV[AV0AWX2] = XDMTBL.XDMABRV[sysVar.arrayIndex];
    set AV0AM001.XDMCD[AV0AWX2] normal;
  else
    AV0AW01.AV0AWFF = "Y";
    converseLib.validationFailed(2);
    set AV0AM001.XDMCD[AV0AWX2] cursor, modified, bold;
    AV0AM001.XDMABRV[AV0AWX2] = " ";
  end
end // end AV0AS35

// GET KEYS FROM AVAIL DB
Function AV0AS45()

   /* SET UP PROCESS TO GET AVAIL KEYS FROM D.B.*/

  AV0AW01.AV0AWX2 = 0;

  if (AV0AM001.XGPCD == "03")
    if (AV0AM001.XWHCD > " ")
      AV0AW01.AV0AWWH = AV0AM001.XWHCD;
      AV0AS55();
    else
      AV0AW01.AV0AWWH = "**";
      AV0AS55();
    end
  end

  if (AV0AM001.XGPCD == "02")
    if (AV0AM001.XWHCD > " ")
      AV0AW01.AV0AWWH = AV0AM001.XWHCD;
      AV0AS55();
    else
      AV0AS50();
    end
  end

  if (AV0AM001.XGPCD != "02"
   && AV0AM001.XGPCD != "03")
    if (AV0AM001.XWHCD > " ")
      AV0AW01.AV0AWWH = AV0AM001.XWHCD;
      AV0AS55();
    else
      AV0AW01.AV0AWWH = "**";
      AV0AS55();
    end
  end

  AV0AS70();

end // end AV0AS45

// SETUP ALL 3 FOOTWEAR WHSE
Function AV0AS50()

    /* SET UP for select for three footwear warehouse*/

  AV0AW01.AV0AWX1 = 1;
  AV0AW01.AV0AWX2 = 0;

  while (AV0AW01.AV0AWX1 <= 10)

    if (AV0AM001.SY1STNBR[AV0AWX1] <= " ")
      set AV0AM001.SY1STNBR[AV0AWX1] normal;
      set AV0AM001.SY2CLRID[AV0AWX1] normal;
      set AV0AM001.XDMCD[AV0AWX1] normal;
      set AV0AM001.PC2INSEG[AV0AWX1] normal;
      set AV0AM001.XSACD[AV0AWX1] normal;
      set AV0AM001.XPGCD[AV0AWX1] normal;
      set AV0AM001.XUMCD[AV0AWX1] normal;
    else
      if (AV0AW01.AV0AW-CAN-SO == "Y") /* Canadian Sales Office*/
        AV0A080-CAN();
      else
        if (AV0AW01.AV0AW-EQMT-SO == "Y") /* Equipment Sales Office*/
          AV0A-0802();
        else
          AV0A080();
        end
      end

      if (AV0AW01.AV0AWHIT == "N") /* style not found*/
        if (AV0AW01.AV0AWX2 >= 100) /* if working storage is full*/
          converseLib.validationFailed(321); /* working storage overflow-too may*/
                                   /* prods*/
          set AV0AM001.SY1STNBR[AV0AWX1] cursor, modified, bold;
          set AV0AM001.SY2CLRID[AV0AWX1] modified, bold;
          set AV0AM001.XDMCD[AV0AWX1] modified, bold;
          set AV0AM001.PC2INSEG[AV0AWX1] modified, bold;
             /* SET AV0AM001.XSACD(AV0AWX1) MODIFIED,BRIGHT;*/
          set AV0AM001.XPGCD[AV0AWX1] modified, bold;
          set AV0AM001.XUMCD[AV0AWX1] modified, bold;
          exit stack;
        else
          converseLib.validationFailed(18); /* style not found in availability*/
          set AV0AM001.SY1STNBR[AV0AWX1] cursor, modified, bold;
          set AV0AM001.SY2CLRID[AV0AWX1] modified, bold;
          set AV0AM001.XDMCD[AV0AWX1] modified, bold;
          set AV0AM001.PC2INSEG[AV0AWX1] modified, bold;
             /* SET AV0AM001.XSACD(AV0AWX1) MODIFIED,BRIGHT;*/
          set AV0AM001.XPGCD[AV0AWX1] modified, bold;
          set AV0AM001.XUMCD[AV0AWX1] modified, bold;
          exit stack;
        end
      end
    end

    AV0AW01.AV0AWX1 = AV0AW01.AV0AWX1 + 1;

  end

   /* AV0AS70 ;  move style info to sort rec*/

end // end AV0AS50

// SETUP KEYS FOR D.B. CALL
Function AV0AS55()

    /* GET DATA SETUP FOR SELECTS*/

  AV0AW01.AV0AWX1 = 1;

  while (AV0AW01.AV0AWX1 <= 10)
    AV0AW01.AV0AWHIT = "N";
    set AV7REC empty;
    SQLCA.VAGen_SQLCODE = 0;

    if (AV0AM001.XLCCD > " ")
      AV7REC.XLCCD = AV0AM001.XLCCD;
    else
      AV7REC.XLCCD = "10";
      AV0AM001.XLCCD = "10";
    end

    if (AV0AM001.XQACD > " ")
      AV7REC.XQACD = AV0AM001.XQACD;
    else
      AV7REC.XQACD = "01";
      AV0AM001.XQACD = "01";
    end

    if (AV0AM001.XOWCD > " ")
      AV0AW01.XOWCD = AV0AM001.XOWCD;
      AV7REC.XOWCD = AV0AM001.XOWCD;
    else
      if (AV0AM001.XGPCD == "03")
        if (AV0AM001.XWHCD == "  " 
         || AV0AM001.XWHCD == "51" /* US Apparel*/
         /* change begin for whse 25*/
         /* OR AV0AM001.XWHCD = '25'     /* US Apparel*/
         /* change end for whse 25*/
         /* change begins - 01/31/01*/
         /* OR AV0AM001.XWHCD = '27'     /* US Victory Crestor*/
         /* change ends   - 01/31/01*/
         || AV0AM001.XWHCD == "41" /* Canada*/
         || AV0AM001.XWHCD == "42") /* Canada*/
          AV7REC.XOWCD = "**";
        else
          AV7REC.XOWCD = "00";
          AV0AW01.XOWCD = "00";
        end
      else
        AV7REC.XOWCD = "00";
        AV0AW01.XOWCD = "00";
      end
    end

    AV7REC.XWHCD = AV0AW01.AV0AWWH;
    AV7REC.XGPCD = AV0AM001.XGPCD;
    AV7REC.AV4PRDBD = 0;

    if (AV0AM001.SY1STNBR[AV0AWX1] > " ")
      AV7REC.SY1STNBR = AV0AM001.SY1STNBR[AV0AWX1];
      AV7REC.SY2CLRID = AV0AM001.SY2CLRID[AV0AWX1];
      if (AV0AM001.XDMCD[AV0AWX1] > " ")
        AV7REC.XDMCD = AV0AM001.XDMCD[AV0AWX1];
      else
        AV7REC.XDMCD = "**";
      end
      AV7REC.XUMCD = AV0AM001.XUMCD[AV0AWX1];
      if (AV0AM001.PC2INSEG[AV0AWX1] > " ")
        AV7REC.XSDCD = AV0AM001.PC2INSEG[AV0AWX1];
      else
        AV7REC.XSDCD = "000";
      end

      if (AV0AM001.XSACD[AV0AWX1] > " ")
        AV7REC.XSACD = AV0AM001.XSACD[AV0AWX1];
      else
        AV7REC.XSACD = "000";
      end

      if (AV0AM001.XPGCD[AV0AWX1] > " ")
        AV7REC.XPGCD = AV0AM001.XPGCD[AV0AWX1];
      else
        AV7REC.XPGCD = "00";
      end

      AV0AW01.AV0AWFLG = "N"; /* initialize l.c. 10 flag*/

      if (AV0AW01.AV0AW-CAN-SO == "Y") /* if Canadian Sales Office*/
        AV0AS60-CAN();
      else
        if (AV0AW01.AV0AW-EQMT-SO == "Y") /* Equipment Sales Office*/
          if (AV0AM001.AV0AM-EQMT-FL[AV0AWX1] == "Y") /* equipment product*/
            AV7REC.XWHCD = "**";
            AV0AS-EQMT-AVAIL();
          else
            AV0AS60();
          end
        else
          AV0AS60();
        end
      end
    end

    if (AV0AW01.AV0AWX2 == 0
     || AV0AW01.AV0AWHIT == "N") /* style-found flag*/
      if (AV0AM001.SY1STNBR[AV0AWX1] > " ")
        converseLib.validationFailed(18);
        set AV0AM001.SY1STNBR[AV0AWX1] cursor, modified, bold;
        set AV0AM001.SY2CLRID[AV0AWX1] bold;
        exit stack;
      else
        AV0AW01.AV0AWHIT = "Y";
      end
    end

    AV0AW01.AV0AWX1 = AV0AW01.AV0AWX1 + 1;
  end

end // end AV0AS55

// PERFORM AVAIL D.B. CALL
Function AV0AS60()

    /* PERFORM D.B. CALL TO AVAIL*/

  if (AV7REC.SY2CLRID <= " ")
    AV7REC.SY2CLRID = "***";
  end

  if (AV7REC.XGPCD == "03")
    if (AV0AW01.AV0AWWH == "**")
      if (AV0AM001.XQACD == "02" /* b-grades & closeouts use select 's3'*/
       || AV0AM001.XLCCD == "20")
        call "IO2370" ("S3", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* declare/open cursor*/
      else
        call "IO2370" ("S2", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* declare/open cursor*/
      end
    else
      call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* declare/open cursor*/
    end
  else
    call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* declare/open cursor*/
  end

  AV0AW01.AV0AWFT = "Y"; /* set first time flag*/

  if (AV0AM001.XLCCD == "  ")
    AV0AM001.XLCCD = "10";
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && AV0AW01.AV0AWX2 < 50)
    AV0AS65(); /* select next*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (AV7REC.XLCCD == "10")
        AV0AW01.AV0AWFLG = "Y"; /* active life cycle y or n*/
      end
      if (AV7REC.XLCCD == AV0AM001.XLCCD)
        AV0ASSAVDATA(); /* check and move data to working*/
                                   /* storage*/
      end
    end
  end


  if (AV7REC.XGPCD == "03")
    if (AV0AW01.AV0AWWH == "**")
      if (AV0AM001.XQACD == "02" /* b-grades & closeouts use close 's3'*/
       || AV0AM001.XLCCD == "20")
        call "IO2370" ("C3", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
      else
        call "IO2370" ("C2", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
      end
    else
      call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
    end
  else
    call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  end


  if (AV0AM001.XWHCD != " ")
    if (AV0AM001.XLCCD == "10")
      if (AV0AW01.AV0AWFLG == "N") /* active life cycle flag*/
        converseLib.validationFailed(167); /* product not in avail. w/l.c. = 10*/
        set AV0AM001.SY1STNBR[AV0AWX1] cursor, modified, bold;
        exit stack;
      else
        set AV0AM001.SY1STNBR[AV0AWX1] normal;
      end
    end
  end

  if (AV0AW01.AV0AWFT == "Y") /* first time flag*/
    AV0AW01.XQACD = "01";
    AV0AW01.XSNYR = AV0AW01.AV0AWL1;
    AV0AW01.AV0AWSR = 1;
    AV0AS75();
  end

  if (AV0AW01.AV0AWX2 >= 50)
    AV0AS70();
  end

end // end AV0AS60

// PERFORM AVAIL D.B. CALL
Function AV0AS60-CAN()

    /* PERFORM D.B. CALL TO AVAIL*/

  if (AV7REC.SY2CLRID <= " ")
    AV7REC.SY2CLRID = "***";
  end

  if (AV7REC.XGPCD == "03")
    if (AV0AW01.AV0AWWH == "**")
      if (AV0AM001.XQACD == "02" /* b-grades & closeouts use select 's3'*/
       || AV0AM001.XLCCD == "20")
        call "IO2370" ("S9", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* declare/open cursor*/
      else
        call "IO2370" ("S8", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* declare/open cursor*/
      end
    else
      call "IO2370" ("S7", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* declare/open cursor*/
    end
  else
    call "IO2370" ("S7", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* declare/open cursor*/
  end

  AV0AW01.AV0AWFT = "Y"; /* set first time flag*/

  if (AV0AM001.XLCCD == "  ")
    AV0AM001.XLCCD = "10";
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && AV0AW01.AV0AWX2 < 50)
    AV0AS65-CAN(); /* select next*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (AV7REC.XLCCD == "10")
        AV0AW01.AV0AWFLG = "Y"; /* active life cycle y or n*/
      end
      if (AV7REC.XLCCD == AV0AM001.XLCCD)
        AV0ASSAVDATA(); /* check and move data to working*/
                                   /* storage*/
      end
    end
  end


  if (AV7REC.XGPCD == "03")
    if (AV0AW01.AV0AWWH == "**")
      if (AV0AM001.XQACD == "02" /* b-grades & closeouts use close 's3'*/
       || AV0AM001.XLCCD == "20")
        call "IO2370" ("C9", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
      else
        call "IO2370" ("C8", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
      end
    else
      call "IO2370" ("C7", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
    end
  else
    call "IO2370" ("C7", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  end


  if (AV0AM001.XWHCD != " ")
    if (AV0AM001.XLCCD == "10")
      if (AV0AW01.AV0AWFLG == "N") /* active life cycle flag*/
        converseLib.validationFailed(167); /* product not in avail. w/l.c. = 10*/
        set AV0AM001.SY1STNBR[AV0AWX1] cursor, modified, bold;
        exit stack;
      else
        set AV0AM001.SY1STNBR[AV0AWX1] normal;
      end
    end
  end

  if (AV0AW01.AV0AWFT == "Y") /* first time flag*/
    AV0AW01.XQACD = "01";
    AV0AW01.XSNYR = AV0AW01.AV0AWL1;
    AV0AW01.AV0AWSR = 1;
    AV0AS75();
  end

  if (AV0AW01.AV0AWX2 >= 50)
    AV0AS70();
  end

end // end AV0AS60-CAN

// CALL IO2370
Function AV0AS65()

   /* CALL IO2370*/

  if (AV7REC.XGPCD == "03")
    if (AV0AW01.AV0AWWH == "**")
      if (AV0AM001.XQACD == "02"
       || AV0AM001.XLCCD == "20")
        call "IO2370" ("N3", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
      else
        call "IO2370" ("N2", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
      end
    else
      call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
  end
  AV0AM001.XXXMSG = " ";
  if (SQLCA.VAGen_SQLCODE == 0)
    AV0AW01.AV0AWFT = "N";
     /* MOVE 'Y' TO AV0AW01.AV0AWHIT;*/
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VITEM001";
      TA1REC.TA1LOCAT[3] = "AV0AS65";
      TA1REC.TA1LOCAT[3] = "IO2370";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();
    end
  end

end // end AV0AS65

// CALL IO2370
Function AV0AS65-CAN()

   /* CALL IO2370*/

  if (AV7REC.XGPCD == "03")
    if (AV0AW01.AV0AWWH == "**")
      if (AV0AM001.XQACD == "02"
       || AV0AM001.XLCCD == "20")
        call "IO2370" ("N9", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
      else
        call "IO2370" ("N8", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
      end
    else
      call "IO2370" ("N7", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    call "IO2370" ("N7", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
  end
  AV0AM001.XXXMSG = " ";
  if (SQLCA.VAGen_SQLCODE == 0)
    AV0AW01.AV0AWFT = "N";
     /* MOVE 'Y' TO AV0AW01.AV0AWHIT;*/
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VITEM001";
      TA1REC.TA1LOCAT[3] = "AV0AS65-CAN";
      TA1REC.TA1LOCAT[3] = "IO2370";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();
    end
  end

end // end AV0AS65-CAN

// CALL IO2370 - Get Next avqty02
Function AV0AS65-EQMT()

   /* CALL IO2370 - get next davail.vavqty02*/

  call "IO2370" ("NA", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  AV0AM001.XXXMSG = " ";
  if (SQLCA.VAGen_SQLCODE == 0)
    AV0AW01.AV0AWFT = "N"; /* turn off first time flag*/
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VAVQTY02";
      TA1REC.TA1LOCAT[3] = "AV0AS65-EQMT";
      TA1REC.TA1LOCAT[3] = "IO2370";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();
    end
  end

end // end AV0AS65-EQMT

// PERFORM SORT/TRANSFER
Function AV0AS70()


    /* THIS IS A DUMMY PARAGRAPH WHICH WILL NOT BE USEDUNLESS*/
     /* USERS DECIDE THAT THEY WANT TO HAVE THEIR RECS SORTED*/

  exit stack;

   /* MOVE 1 TO AV0AW01.AV0AWX3       ; init sub*/

      /* check to see if only 1 element*/

   /* IF AV0AW01.AV0AWX2 LT 2;*/
    /* MOVE 9999 TO AV0AW01.AV0AWX3  ; set max to get out*/
   /* END ;*/

   /* WHILE AV0AW01.AV0AWX3 LT AV0AW01.AV0AWX2;*/

   /* AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1;*/
   /* MOVE AV0AW01.AV0AWX3 TO AV0AW01.AV0AWX4;*/
   /* WHILE AV0AW01.AV0AWX4 GE 2;*/
    /* AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4 - 1;*/
    /* ;*/
    /* IF AV0AW05.AV0AWSK(AV0AWX4) GE AV0AW05.AV0AWSK(AV0AWX5);*/
      /* MOVE 0 TO AV0AW01.AV0AWX4 ;  TERMINATE THIS LOOP*/
    /* ELSE ;*/
      /* ; SWAP ELEMENTS*/
      /* MOVE AV0AW05.AV0AWKE(AV0AWX4) TO AV0AW05.AV0AWAV;*/
    /* MOVE AV0AW05.AV0AWKE(AV0AWX5) TO AV0AW05.AV0AWKE(AV0AWX4);*/
      /* MOVE AV0AW05.AV0AWAV TO AV0AW05.AV0AWKE(AV0AWX5);*/
      /* AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 - 1;*/
    /* END ;*/
   /* END ;*/
   /* END ;*/

   /* EZEFLO;*/


end // end AV0AS70

// move av7rec to save
Function AV0AS75()
   /* MOVE AV7REC TO AV0AW05*/

  AV0AW01.AV0AWX2 = AV0AW01.AV0AWX2 + 1;

  AV0AW05.XWHCD[AV0AWX2] = AV7REC.XWHCD;
  AV0AW05.XGPCD[AV0AWX2] = AV7REC.XGPCD;
  AV0AW05.SY1STNBR[AV0AWX2] = AV7REC.SY1STNBR;
  AV0AW05.SY2CLRID[AV0AWX2] = AV7REC.SY2CLRID;
  AV0AW05.XDMCD[AV0AWX2] = AV7REC.XDMCD;
  AV0AW05.AV4PRDBD[AV0AWX2] = AV7REC.AV4PRDBD;

  AV0AW05.XOWCD[AV0AWX2] = AV7REC.XOWCD;
  AV0AW05.XQACD[AV0AWX2] = AV7REC.XQACD;
  AV0AW05.PC2INSEG[AV0AWX2] = AV7REC.XSDCD;
  AV0AW05.XSACD[AV0AWX2] = AV7REC.XSACD;
  AV0AW05.XPGCD[AV0AWX2] = AV7REC.XPGCD;
  AV0AW05.XUMCD[AV0AWX2] = AV7REC.XUMCD;
  AV0AW05.XLCCD[AV0AWX2] = AV7REC.XLCCD;
  AV0AW05.AV1CUPRC[AV0AWX2] = AV7REC.AV1CUPRC;
  AV0AW05.AV1CUEDT[AV0AWX2] = AV7REC.AV1CUEDT;
  AV0AW05.AV1PRPRC[AV0AWX2] = AV7REC.AV1PRPRC;
  AV0AW05.AV1CUCST[AV0AWX2] = AV7REC.AV1CUCST;
  AV0AW05.AV5SGPRC[AV0AWX2] = AV7REC.AV5SGPRC;
  AV0AW05.AV0AWCD[AV0AWX2] = AV7REC.AV7RCD;
  AV0AW05.AV0AWQT[AV0AWX2] = AV7REC.AV7RQT;
  AV0AW05.AV0AWDT[AV0AWX2] = AV7REC.AV7RDT;
  AV0AW05.AV0AWCMT[AV0AWX2] = AV7REC.AV2CMNT;
  AV0AW05.AV0AW-EQMT-FL[AV0AWX2] = AV0AM001.AV0AM-EQMT-FL[AV0AWX1];
  AV0AW05.AV0AW-CAN-OVRRD-FND[AV0AWX2] = "N";
                                  /* SY2000 overrides found for CAN*/

  if (AV0AW01.AV0AW-CAN-SO == "Y") /* Canadian Sales Office*/
    AV0AS75-CAN(); /* get Canadian overrides*/
  end
end // end AV0AS75

// get Canadian overrides 4 save
Function AV0AS75-CAN()
   /* MOVE AV7REC key fields TO WSY2000 key fields*/

  set WSY2000 empty;
  set SQLCA empty;

  WSY2000.XGP-GPC-CD = AV7REC.XGPCD; /* general product code*/
  WSY2000.SY-STY-NBR = AV7REC.SY1STNBR; /* style number*/
  WSY2000.SY-COLR-CD-ID = AV7REC.SY2CLRID; /* color*/
  WSY2000.XDM-DIM-CD = AV7REC.XDMCD; /* dimension*/
  WSY2000.XDR-PROD-REG-CD = "05"; /* Canadian region*/
  WSY2000.WSY2000-SUB-OPTION-CODE = "O"; /* old-format record*/
  WSY2000.WSY2000-OPTION-CODE = "S "; /* select unique*/

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == 00)
    AV0AW05.AV0AW-CAN-OVRRD-FND[AV0AWX2] = "Y"; /* SY2000 ovrrds fnd*/
    AV0AW05.XSECD[AV0AWX2] = WSY2000.XSE-SESN-CD; /* season code*/
    AV0AW05.XSNYR[AV0AWX2] = WSY2000.XSN-SESN-YR-RNG; /* sesn yr rng*/
    AV0AW05.XDR-PROD-REG-CD[AV0AWX2] = WSY2000.XDR-PROD-REG-CD; /**/
    AV0AW05.XPRCD[AV0AWX2] = WSY2000.XPR-PROD-TYP-CD; /* prod type*/
    AV0AW05.XPLCD[AV0AWX2] = WSY2000.XPL-PROD-LN-CD; /* prod line*/
    AV0AW05.XPCCD[AV0AWX2] = WSY2000.XPC-PROD-CAT-CD; /* prod cat*/
    AV0AW05.XLCCD1[AV0AWX2] = WSY2000.XLC-LIFE-CYC-CD[1]; /**/
    AV0AW05.XLCCD2[AV0AWX2] = WSY2000.XLC-LIFE-CYC-CD[2]; /**/
    AV0AW05.XLCCD3[AV0AWX2] = WSY2000.XLC-LIFE-CYC-CD[3]; /**/
    AV0AW05.XLCCD4[AV0AWX2] = WSY2000.XLC-LIFE-CYC-CD[4]; /**/
    AV0AW05.SY2CEDT1[AV0AWX2] = WSY2000.SY-LIFE-CYC-EDT[1]; /**/
    AV0AW05.SY2CEDT2[AV0AWX2] = WSY2000.SY-LIFE-CYC-EDT[2]; /**/
    AV0AW05.SY2CEDT3[AV0AWX2] = WSY2000.SY-LIFE-CYC-EDT[3]; /**/
    AV0AW05.SY2CEDT4[AV0AWX2] = WSY2000.SY-LIFE-CYC-EDT[4]; /**/
    AV0AW05.SY2POFBD[AV0AWX2] = WSY2000.SY-PROP-OFFER-BDT;
    AV0AW05.SY2FOFBD[AV0AWX2] = WSY2000.SY-FUTR-OFFER-BDT;
    AV0AW05.OPZHMIND[AV0AWX2] = WSY2000.OP-HMDL-HOT-FL; /* hot model*/
    AV0AW05.SY2ALNOR[AV0AWX2] = WSY2000.SY-ALW-NEW-ORD-FL; /* alw new*/
  else
    if (WSY2000.WSY2000-RETURN-CODE == 01 /* end of scan*/
     || WSY2000.WSY2000-RETURN-CODE == 02) /* not found*/
      /* no overrides*/
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSYREG02";
      TA1REC.TA1TBLKE = WSY2000.WSY2000-KEY-INFO;
      TA1REC.TA1LOC = "AV0AS75-CAN";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sqlcarec*/
      TAEREC.TAEDESC1 = "BAD RETURN FROM SY2000 AT AV0AS75-CAN";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
    end
  end
end // end AV0AS75-CAN

// READ AND SETUP SCREEN DATA 1
Function AV0ASAA()

    /* SET UP THREE SCREEN RECORDS*/

  if (AV0AW01.AV0AWX3 >= AV0AW01.AV0AWX2)
    converseLib.validationFailed(016);
    exit stack;
  end

  set AV0AW02 empty;
  set AV0AM002 initial;
  set AV0AM007 initial;
  set AV0AM004 initial;

  AV0AM002.AV0AMHD1 = AV0AM001.XGPDESC;
  AV0AM007.AV0AMHD1 = AV0AM001.XGPDESC;
  AV0AM004.AV0AMHD1 = AV0AM001.XGPDESC;


  AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1;

  if (AV0AW01.AV0AWX2 >= AV0AW01.AV0AWX3)
    AV0ASBA(); /* READ DATA BASE FILE UNTIL SQLCODE = 100*/
  else
    converseLib.validationFailed(16);
    exit stack;
  end

  AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1;

  if (AV0AW01.AV0AWX2 >= AV0AW01.AV0AWX3)
    AV0ASCA(); /* READ DATA BASE FILE INTIL SQLCODE = 100*/
  else
    converseLib.validationFailed(16);
    exit stack;
  end

  AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1;

  if (AV0AW01.AV0AWX2 >= AV0AW01.AV0AWX3)
    AV0ASDA(); /* READ DATA BASE FILE INTIL SQLCODE = 100*/
  else
    converseLib.validationFailed(16);
    exit stack;
  end

  AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1;

  if (AV0AW01.AV0AWX2 >= AV0AW01.AV0AWX3)
    AV0ASEA(); /* READ DATA BASE FILE INTIL SQLCODE = 100*/
  else
    converseLib.validationFailed(16);
    exit stack;
  end

end // end AV0ASAA

// READ AND SETUP apprl map 1
Function AV0ASBA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0AW01.AV0AWFT = "Y";
  AV0ASBB(); /* ZERO OUT QTY FIELDS IN AV0AW01*/
  AV0AM002.AV0AMST1 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM007.AV0AMST1 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM004.AV0AMST1 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM002.AV0AMCL1 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM007.AV0AMCL1 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM004.AV0AMCL1 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM002.AV0AM-MAP-XOWCD1 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM007.AV0AM-MAP-XOWCD1 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM004.AV0AM-MAP-XOWCD1 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM002.AV0AMWH1 = AV0AW05.XWHCD[AV0AWX3];
  AV0AM007.AV0AMWH1 = AV0AW05.XWHCD[AV0AWX3];
  AV0AM004.AV0AMWH1 = AV0AW05.XWHCD[AV0AWX3];
  AV0AW01.AV0AWSD = AV0AW05.XSECD[AV0AWX3];
  AV0AW01.AV0AWNR = AV0AW05.XSNYR[AV0AWX3];
  AV0AM002.AV0AMUM1 = AV0AW05.XUMCD[AV0AWX3];
  AV0AM002.AV0AMCM1 = AV0AW05.AV0AWCMT[AV0AWX3];
  AV0AW01.AV1CUPRC = AV0AW05.AV1CUPRC[AV0AWX3]; /* wholesale price*/
  AV0AW01.AV1CUEDT = AV0AW05.AV1CUEDT[AV0AWX3]; /* price effective dt*/
  AV0AW01.AV1PRPRC = AV0AW05.AV1PRPRC[AV0AWX3]; /* prior whlsl price*/
  AV0AW01.AV1CUCST = AV0AW05.AV1CUCST[AV0AWX3]; /* cost*/
  AV0AW01.AV5SGPRC = AV0AW05.AV5SGPRC[AV0AWX3]; /* sugg retail price*/
  AV0AW01.AV0AWFT = "N";
  AV0ASBC(); /* roll available at once quantities together*/

  AV0ASBD(); /* get nonsize data definitions*/

  AV0AM002.AV0AM-OFFER-DT-FLD[1] = AV0AW05.AV0AW-OFFER-DT-FLD[AV0AWX3];
  AV0AM002.AV0AM-OFFER-DT[1] = AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3];

end // end AV0ASBA

// zero out av0aw01 size qtys
Function AV0ASBB()

    /* THIS WILL SET UP THE ACCUMULATOR TO ZERO BEFORE*/
    /* PROCESSING DETAIL RECORDS*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 40)

    AV0AW01.AV1AVQTY[sysVar.arrayIndex] = 0;

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

end // end AV0ASBB

// Set up totals for product scrn
Function AV0ASBC()

    /* THIS IS THE AREA WHERE THE TOTALS FOR 1 PRODUCT*/
    /* WILL BE ACCUMULATED*/


  AV0AW01.AV0AWCD = AV0AW05.AV0AWCD[AV0AWX3];

  AV0AW01.AV0AWQT = AV0AW05.AV0AWQT[AV0AWX3];

  AV0AW01.AV0AWDT = AV0AW05.AV0AWDT[AV0AWX3];

  AV0AW01.AV0AWGF = AV0AW05.AV0AWGF[AV0AWX3];



end // end AV0ASBC

// GET info from product file
Function AV0ASBD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

   /* ------------------------------------------------------------*/
   /* Get the product style/color record*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = AV0AM001.XGPCD;
  PG2REC.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];
  PG2REC.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];
  PG2REC.XDMCD = AV0AW05.XDMCD[AV0AWX3];

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, continue*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
         /* continue*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYCLR01";
      TA1REC.TA1LOCAT[3] = "AV0ASBD";
      TA1REC.TA1LOCAT[4] = "IO3120 ";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();
    end
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "VSYCLR01";
    TA1REC.TA1LOCAT[3] = "AV0ASBD";
    TA1REC.TA1LOCAT[4] = "IO3120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

  AV0AW02.SY1SSTNM[1] = PG2REC.SY1SSTNM;
  AV0AM002.AV0AMNM1 = PG2REC.SY1STYNM;
  AV0AM007.AV0AMSD1 = PG2REC.SY1SSTNM;
  AV0AM004.AV0AMSD1 = PG2REC.SY1SSTNM;

  AV0AM002.AV0AMCD1 = PG2REC.SY2CLRAB;
  AV0AM007.AV0AMCD1 = PG2REC.SY2CLRAB;
  AV0AM004.AV0AMCD1 = PG2REC.SY2CLRAB;

  AV0AS-SY2ALNOR(); /* get allow new orders flag*/
  AV0AM002.SY2ALNOR[1] = AV0AW05.SY2ALNOR[AV0AWX3];

   /* get owner code abreviation:*/
  XOWREC.XWHCD = AV0AW05.XWHCD[AV0AWX3]; /* move actual whse*/
  XOWREC.XOWCD = AV0AW05.XOWCD[AV0AWX3]; /* format key*/
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    AV0AM002.AV0AM-MAP-XOWABR1 = XOWTBL.XOWABRV[sysVar.arrayIndex];
  end

   /* move owner abreviation to maps:*/
  AV0AM004.AV0AM-MAP-XOWABR1 = AV0AM002.AV0AM-MAP-XOWABR1;
  AV0AM007.AV0AM-MAP-XOWABR1 = AV0AM002.AV0AM-MAP-XOWABR1;

  if (PG2REC.XGACD in XGATBL.XGACD)
    AV0AW02.XGAABRV[1] = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  if (PG2REC.XSPCD in XSPTBL.XSPCD)
    AV0AW02.XSPABRV[1] = XSPTBL.XSPABRV[sysVar.arrayIndex];
  end

  if (AV0AW01.AV0AWFT != "Y")
    AV0AW01.AV0AREM = AV0AW01.AV1CUPRC - AV0AW01.AV1PRPRC;

    if (AV0AW01.AV0AREM > 0)
      AV0AM002.AV0AMPD1 = AV0AW01.AV0AREM * 100 / AV0AW01.AV1CUPRC;
    else
      if (AV0AW01.AV0AREM < 0)
        AV0AM002.AV0AMPD1 = AV0AW01.AV0AREM * 100 / AV0AW01.AV1PRPRC;
      else
        AV0AM002.AV0AMPD1 = 0;
      end
    end

    AV0AM002.AV0AMCP1 = AV0AW01.AV1CUPRC;
    AV0AM007.AV0AMCP1 = AV0AW01.AV1CUPRC;
    AV0AM004.AV0AMCP1 = AV0AW01.AV1CUPRC;
    AV0AM002.AV0AMCE1 = AV0AW01.AV1CUEDT;
    AV0AM002.AV0AMPP1 = AV0AW01.AV1PRPRC;

    if (COMMAREA.CAILVL[1] == "Y")
      AV0AM002.AV0AMPR1 = AV0AW01.AV1CUCST; /* current cost*/
    else
      AV0AM002.AV0AMPR1 = AV0AW01.AV5SGPRC; /* sugg retail price*/
    end

    AV0ASBE(); /* WRITE SIZE RELATED DATA*/

  end

  set AV0AW11 empty; /* initialize blank style work record*/
  AV0AW01.AV0AWX11 = 0; /* initialize work record index*/

  AV0AS-GETBLANK(); /* get blank style nbr for crested style*/

end // end AV0ASBD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ASBE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  if (AV0AW05.SY1STNBR[AV0AWX3] == PG3REC.SY1STNBR)
    /* NEXT SENTENCE*/
  else
    AV0ASBF(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 5)
        AV0AM002.AV0AMSZ1[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM002.AV0AMQT1[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM002.AV0AMIN1[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASBG();
      else

      end
      if (AV0AW01.AV0AWX4 == 5)
        AV0AM002.AV0AMS01 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM002.AV0AMQ01 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM002.AV0AMIN1[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASBG();
      else
      end

      if (AV0AW01.AV0AWX4 > 5
       && AV0AW01.AV0AWX4 < 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM007.AV0AMSZ1[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM007.AV0AMQT1[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM007.AV0AMIN1[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASBG();
      else
      end

      if (AV0AW01.AV0AWX4 == 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM007.AV0AMS01 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM007.AV0AMQ01 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM007.AV0AMIN1[6] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASBG();
      else
      end

      if (AV0AW01.AV0AWX4 > 11
       && AV0AW01.AV0AWX4 < 16)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 11;
        AV0AM004.AV0AMSZ1[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM004.AV0AMQT1[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM004.AV0AMIN1[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASBG();

      end

    end

    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM004.AV0AMQ01 = AV0AW01.AV0AWTQY;
  end

end // end AV0ASBE

// get size translation
Function AV0ASBF()

    /* CALL TO PG1050 TO GET EXTERNAL SIZES*/

  set PG3REC empty;

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)
    AV0AW01.SY5SZID[sysVar.arrayIndex] = 0;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  PG3REC.XGPCD = AV0AW05.XGPCD[AV0AWX3];
  PG3REC.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];
  PG3REC.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];
  PG3REC.XDMCD = AV0AW05.XDMCD[AV0AWX3];
  PG3REC.XQACD = AV0AW05.XQACD[AV0AWX3];
  PG3REC.PG3RETCD = 0;


  AV0AW01.AV0AWX6 = AV0AW01.AV0AWX3;

  while (AV0AW01.AV0AWX6 <= 50
   && AV0AW05.SY1STNBR[AV0AWX6] == PG3REC.SY1STNBR)

    AV0AW01.AV0AWK1 = AV0AW05.AV0AWCD[AV0AWX6];

    sysVar.arrayIndex = 1;

    while (sysVar.arrayIndex <= 40)

      if (AV0AW01.AV0AWK2[sysVar.arrayIndex] > " ")
        AV0AW01.SY5SZID[sysVar.arrayIndex] = 1;

      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1;

    end
    AV0AW01.AV0AWX6 = AV0AW01.AV0AWX6 + 1;
  end
  sysVar.arrayIndex = 1;
  AV0AW01.AV0AWX5 = 0;

  while (sysVar.arrayIndex <= 40)

    if (AV0AW01.SY5SZID[sysVar.arrayIndex] > 0)
      AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 + 1;
      PG3REC.SY5SZID[AV0AWX5] = sysVar.arrayIndex;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  PG3REC.PG3FUNCD = "IE";
  PG3REC.PG3DATFM = "C";

  call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "PRODUCT";
    TA1REC.TA1LOCAT[3] = "AV0ASBF";
    TA1REC.TA1LOCAT[4] = "PG1050";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

    /* RETURN TO CALLING APP*/

end // end AV0ASBF

// get condition code desc
Function AV0ASBG()

    /* SET UP TOTALING ON AV0AM002*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 4)
    AV0AM002.AV0AMS01 = "*TOTAL*";
    AV0AM002.AV0AMCN1[5] = "*A/O*";
    AV0AM002.AV0AMQ01 = AV0AW01.AV0AWTQY;
  end
  if (AV0AW01.AV0AWX4 > 4
   && AV0AW01.AV0AWX4 < 11)
    AV0AM007.AV0AMS01 = "*TOTAL*";
    AV0AM007.AV0AMCN1[6] = "*A/O*";
    AV0AM007.AV0AMQ01 = AV0AW01.AV0AWTQY;
  end

  if (AV0AW01.AV0AWX4 <= 5)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM002.AV0AMCN1[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM007.AV0AMCN1[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 11)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM004.AV0AMCN1[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 5)
      AV0AM002.AV0AMCN1[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 5
     && AV0AW01.AV0AWX4 < 12)
      AV0AM007.AV0AMCN1[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 11)
      AV0AM004.AV0AMCN1[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    end
  end

  if (AV0AW01.AV0AWX4 <= 5)
    AV0AM002.AV0AMCN1[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    AV0AM007.AV0AMCN1[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM004.AV0AMCN1[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

end // end AV0ASBG

// READ AND SETUP aprl map 2
Function AV0ASCA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0AW01.AV0AWFT = "Y";
  AV0ASBB(); /* ZERO OUT QTY FIELDS IN AV0AW01*/
  AV0AM002.AV0AMST2 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM007.AV0AMST2 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM004.AV0AMST2 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM002.AV0AMCL2 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM007.AV0AMCL2 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM004.AV0AMCL2 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM002.AV0AM-MAP-XOWCD2 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM007.AV0AM-MAP-XOWCD2 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM004.AV0AM-MAP-XOWCD2 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM002.AV0AMWH2 = AV0AW05.XWHCD[AV0AWX3];
  AV0AM007.AV0AMWH2 = AV0AW05.XWHCD[AV0AWX3];
  AV0AM004.AV0AMWH2 = AV0AW05.XWHCD[AV0AWX3];
  AV0AW01.AV0AWSD = AV0AW05.XSECD[AV0AWX3];
  AV0AW01.AV0AWNR = AV0AW05.XSNYR[AV0AWX3];
  AV0AM002.AV0AMCM2 = AV0AW05.AV0AWCMT[AV0AWX3];
  AV0AM002.AV0AMUM2 = AV0AW05.XUMCD[AV0AWX3];
  AV0AW01.AV1CUPRC = AV0AW05.AV1CUPRC[AV0AWX3];
  AV0AW01.AV1CUEDT = AV0AW05.AV1CUEDT[AV0AWX3];
  AV0AW01.AV1PRPRC = AV0AW05.AV1PRPRC[AV0AWX3];
  AV0AW01.AV1CUCST = AV0AW05.AV1CUCST[AV0AWX3]; /* cost*/
  AV0AW01.AV5SGPRC = AV0AW05.AV5SGPRC[AV0AWX3]; /* sugg retail price*/
  AV0AW01.AV0AWFT = "N";
  AV0ASBC(); /* roll available at once quantities*/

  AV0ASCD(); /* get non size data definitions*/

  AV0AM002.AV0AM-OFFER-DT-FLD[2] = AV0AW05.AV0AW-OFFER-DT-FLD[AV0AWX3];
  AV0AM002.AV0AM-OFFER-DT[2] = AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3];

end // end AV0ASCA

// GET Info from product file
Function AV0ASCD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  PG2REC.XGPCD = AV0AM001.XGPCD;
  PG2REC.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];
  PG2REC.XDMCD = AV0AW05.XDMCD[AV0AWX3];
  PG2REC.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];

  call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------------------*/
   /* If the call was successful, continue*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
         /* continue*/
    else

      converseLib.validationFailed(76);
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYCLR01";
      TA1REC.TA1LOCAT[3] = "AV0ASCD";
      TA1REC.TA1LOCAT[4] = "IO3120 ";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();

    end
  else
    converseLib.validationFailed(76);
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "VSYCLR01";
    TA1REC.TA1LOCAT[3] = "AV0ASBD";
    TA1REC.TA1LOCAT[4] = "IO3120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0AW02.SY1SSTNM[2] = PG2REC.SY1SSTNM;
  AV0AM002.AV0AMNM2 = PG2REC.SY1STYNM;
  AV0AM007.AV0AMSD2 = PG2REC.SY1SSTNM;
  AV0AM004.AV0AMSD2 = PG2REC.SY1SSTNM;

  AV0AM002.AV0AMCD2 = PG2REC.SY2CLRAB;
  AV0AM007.AV0AMCD2 = PG2REC.SY2CLRAB;
  AV0AM004.AV0AMCD2 = PG2REC.SY2CLRAB;

  AV0AS-SY2ALNOR(); /* get allow new orders flag*/
  AV0AM002.SY2ALNOR[2] = AV0AW05.SY2ALNOR[AV0AWX3];

  XOWREC.XWHCD = AV0AW05.XWHCD[AV0AWX3]; /* move actual whse*/
  XOWREC.XOWCD = AV0AW05.XOWCD[AV0AWX3]; /* format key*/
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    AV0AM002.AV0AM-MAP-XOWABR2 = XOWTBL.XOWABRV[sysVar.arrayIndex];
  end

   /* move owner abreviation to maps:*/
  AV0AM004.AV0AM-MAP-XOWABR2 = AV0AM002.AV0AM-MAP-XOWABR2;
  AV0AM007.AV0AM-MAP-XOWABR2 = AV0AM002.AV0AM-MAP-XOWABR2;

  if (PG2REC.XGACD in XGATBL.XGACD)
    AV0AW02.XGAABRV[1] = XGATBL.XGAABRV[sysVar.arrayIndex];
  end


  if (PG2REC.XGACD in XGATBL.XGACD)
    AV0AW02.XGAABRV[2] = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  if (PG2REC.XSPCD in XSPTBL.XSPCD)
    AV0AW02.XSPABRV[2] = XSPTBL.XSPABRV[sysVar.arrayIndex];
  end

  if (AV0AW01.AV0AWFT != "Y")
    AV0AW01.AV0AREM = AV0AW01.AV1CUPRC - AV0AW01.AV1PRPRC;

    if (AV0AW01.AV0AREM > 0)
      AV0AM002.AV0AMPD2 = AV0AW01.AV0AREM * 100 / AV0AW01.AV1CUPRC;
    else
      if (AV0AW01.AV0AREM < 0)
        AV0AM002.AV0AMPD2 = AV0AW01.AV0AREM * 100 / AV0AW01.AV1PRPRC;
      else
        AV0AM002.AV0AMPD2 = 0;
      end
    end

    AV0AM002.AV0AMCP2 = AV0AW01.AV1CUPRC;
    AV0AM007.AV0AMCP2 = AV0AW01.AV1CUPRC;
    AV0AM004.AV0AMCP2 = AV0AW01.AV1CUPRC;
    AV0AM002.AV0AMCE2 = AV0AW01.AV1CUEDT;
    AV0AM002.AV0AMPP2 = AV0AW01.AV1PRPRC;

    if (COMMAREA.CAILVL[1] == "Y")
      AV0AM002.AV0AMPR2 = AV0AW01.AV1CUCST; /* current cost*/
    else
      AV0AM002.AV0AMPR2 = AV0AW01.AV5SGPRC; /* sugg retail price*/
    end

    AV0ASCE(); /* WRITE SIZE RELATED DATA*/

  end

  AV0AS-GETBLANK(); /* get blank style nbr for crested*/
                                   /* styles*/

end // end AV0ASCD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ASCE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  if (AV0AW05.SY1STNBR[AV0AWX3] == PG3REC.SY1STNBR)
    /* NEXT SENTENCE*/
  else
    AV0ASBF(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 5)
        AV0AM002.AV0AMSZ2[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM002.AV0AMQT2[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM002.AV0AMIN2[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASCG();
      else

      end
      if (AV0AW01.AV0AWX4 == 5)
        AV0AM002.AV0AMS02 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM002.AV0AMQ02 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM002.AV0AMIN2[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASCG();
      else
      end

      if (AV0AW01.AV0AWX4 > 5
       && AV0AW01.AV0AWX4 < 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM007.AV0AMSZ2[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM007.AV0AMQT2[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM007.AV0AMIN2[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASCG();
      else
      end

      if (AV0AW01.AV0AWX4 == 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM007.AV0AMS02 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM007.AV0AMQ02 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM007.AV0AMIN2[6] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASCG();
      else
      end

      if (AV0AW01.AV0AWX4 > 11
       && AV0AW01.AV0AWX4 < 16)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 11;
        AV0AM004.AV0AMSZ2[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM004.AV0AMQT2[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM004.AV0AMIN2[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASCG();

      end

    end

    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;

  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM004.AV0AMQ02 = AV0AW01.AV0AWTQY;
  end

end // end AV0ASCE

// get condition code desc
Function AV0ASCG()

    /* SET UP TOTALING ON AV0AM002*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 4)
    AV0AM002.AV0AMS02 = "*TOTAL*";
    AV0AM002.AV0AMCN2[5] = "*A/O*";
    AV0AM002.AV0AMQ02 = AV0AW01.AV0AWTQY;
  end
  if (AV0AW01.AV0AWX4 > 4
   && AV0AW01.AV0AWX4 < 11)
    AV0AM007.AV0AMS02 = "*TOTAL*";
    AV0AM007.AV0AMCN2[6] = "*A/O*";
    AV0AM007.AV0AMQ02 = AV0AW01.AV0AWTQY;
  end

  if (AV0AW01.AV0AWX4 <= 5)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM002.AV0AMCN2[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM007.AV0AMCN2[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 11)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM004.AV0AMCN2[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 5)
      AV0AM002.AV0AMCN2[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 5
     && AV0AW01.AV0AWX4 < 12)
      AV0AM007.AV0AMCN2[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 11)
      AV0AM004.AV0AMCN2[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    end
  end

  if (AV0AW01.AV0AWX4 <= 5)
    AV0AM002.AV0AMCN2[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    AV0AM007.AV0AMCN2[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM004.AV0AMCN2[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

end // end AV0ASCG

// READ AND SETUP aprl map 3
Function AV0ASDA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0AW01.AV0AWFT = "Y";
  AV0ASBB(); /* ZERO OUT QTY FIELDS IN AV0AW01*/
  AV0AM002.AV0AMST3 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM007.AV0AMST3 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM004.AV0AMST3 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM002.AV0AMCL3 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM007.AV0AMCL3 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM004.AV0AMCL3 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM002.AV0AM-MAP-XOWCD3 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM007.AV0AM-MAP-XOWCD3 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM004.AV0AM-MAP-XOWCD3 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM002.AV0AMWH3 = AV0AW05.XWHCD[AV0AWX3];
  AV0AM007.AV0AMWH3 = AV0AW05.XWHCD[AV0AWX3];
  AV0AM004.AV0AMWH3 = AV0AW05.XWHCD[AV0AWX3];
  AV0AW01.AV0AWSD = AV0AW05.XSECD[AV0AWX3];
  AV0AW01.AV0AWNR = AV0AW05.XSNYR[AV0AWX3];
  AV0AM002.AV0AMUM3 = AV0AW05.XUMCD[AV0AWX3];
  AV0AM002.AV0AMCM3 = AV0AW05.AV0AWCMT[AV0AWX3];
  AV0AW01.AV1CUPRC = AV0AW05.AV1CUPRC[AV0AWX3];
  AV0AW01.AV1CUEDT = AV0AW05.AV1CUEDT[AV0AWX3];
  AV0AW01.AV1PRPRC = AV0AW05.AV1PRPRC[AV0AWX3];
  AV0AW01.AV1CUCST = AV0AW05.AV1CUCST[AV0AWX3]; /* cost*/
  AV0AW01.AV5SGPRC = AV0AW05.AV5SGPRC[AV0AWX3]; /* sugg retail price*/
  AV0AW01.AV0AWFT = "N";

  AV0ASBC(); /* roll at avialable at once quantities together*/

  AV0ASDD();

  AV0AM002.AV0AM-OFFER-DT-FLD[3] = AV0AW05.AV0AW-OFFER-DT-FLD[AV0AWX3];
  AV0AM002.AV0AM-OFFER-DT[3] = AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3];

end // end AV0ASDA

// GET Info from product file
Function AV0ASDD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  PG2REC.XGPCD = AV0AM001.XGPCD;
  PG2REC.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];
  PG2REC.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];
  PG2REC.XDMCD = AV0AW05.XDMCD[AV0AWX3];

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, continue*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
         /* continue*/
    else

      converseLib.validationFailed(76);
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYCLR01";
      TA1REC.TA1LOCAT[3] = "AV0ASDD";
      TA1REC.TA1LOCAT[4] = "IO3120 ";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();

    end
  else
    converseLib.validationFailed(76);
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "VSYCLR01";
    TA1REC.TA1LOCAT[3] = "AV0ASDD";
    TA1REC.TA1LOCAT[4] = "IO3120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0AW02.SY1SSTNM[3] = PG2REC.SY1SSTNM;
  AV0AM002.AV0AMNM3 = PG2REC.SY1STYNM;
  AV0AM007.AV0AMSD3 = PG2REC.SY1SSTNM;
  AV0AM004.AV0AMSD3 = PG2REC.SY1SSTNM;

  AV0AM002.AV0AMCD3 = PG2REC.SY2CLRAB;
  AV0AM007.AV0AMCD3 = PG2REC.SY2CLRAB;
  AV0AM004.AV0AMCD3 = PG2REC.SY2CLRAB;

  AV0AS-SY2ALNOR(); /* get allow new orders flag*/
  AV0AM002.SY2ALNOR[3] = AV0AW05.SY2ALNOR[AV0AWX3];

   /* get owner code abreviation:*/
  XOWREC.XWHCD = AV0AW05.XWHCD[AV0AWX3]; /* move actual whse*/
  XOWREC.XOWCD = AV0AW05.XOWCD[AV0AWX3]; /* format key*/
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    AV0AM002.AV0AM-MAP-XOWABR3 = XOWTBL.XOWABRV[sysVar.arrayIndex];
  end

   /* move owner abreviation to maps:*/
  AV0AM004.AV0AM-MAP-XOWABR3 = AV0AM002.AV0AM-MAP-XOWABR3;
  AV0AM007.AV0AM-MAP-XOWABR3 = AV0AM002.AV0AM-MAP-XOWABR3;

  if (PG2REC.XGACD in XGATBL.XGACD)
    AV0AW02.XGAABRV[1] = XGATBL.XGAABRV[sysVar.arrayIndex];
  end


  if (PG2REC.XGACD in XGATBL.XGACD)
    AV0AW02.XGAABRV[3] = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  if (PG2REC.XSPCD in XSPTBL.XSPCD)
    AV0AW02.XSPABRV[3] = XSPTBL.XSPABRV[sysVar.arrayIndex];
  end

  if (AV0AW01.AV0AWFT != "Y")
    AV0AW01.AV0AREM = AV0AW01.AV1CUPRC - AV0AW01.AV1PRPRC;

    if (AV0AW01.AV0AREM > 0)
      AV0AM002.AV0AMPD3 = AV0AW01.AV0AREM * 100 / AV0AW01.AV1CUPRC;
    else
      if (AV0AW01.AV0AREM < 0)
        AV0AM002.AV0AMPD3 = AV0AW01.AV0AREM * 100 / AV0AW01.AV1PRPRC;
      else
        AV0AM002.AV0AMPD3 = 0;
      end
    end

    AV0AM002.AV0AMCP3 = AV0AW01.AV1CUPRC;
    AV0AM007.AV0AMCP3 = AV0AW01.AV1CUPRC;
    AV0AM004.AV0AMCP3 = AV0AW01.AV1CUPRC;
    AV0AM002.AV0AMCE3 = AV0AW01.AV1CUEDT;
    AV0AM002.AV0AMPP3 = AV0AW01.AV1PRPRC;

    if (COMMAREA.CAILVL[1] == "Y")
      AV0AM002.AV0AMPR3 = AV0AW01.AV1CUCST; /* current cost*/
    else
      AV0AM002.AV0AMPR3 = AV0AW01.AV5SGPRC; /* sugg retail price*/
    end

    AV0ASDE(); /* WRITE SIZE RELATED DATA*/

  end

  AV0AS-GETBLANK(); /* get blank style nbr for crested style*/

end // end AV0ASDD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ASDE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  if (AV0AW05.SY1STNBR[AV0AWX3] == PG3REC.SY1STNBR)
    /* NEXT SENTENCE*/
  else
    AV0ASBF(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 5)
        AV0AM002.AV0AMSZ3[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM002.AV0AMQT3[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM002.AV0AMIN3[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASDG();
      else

      end
      if (AV0AW01.AV0AWX4 == 5)
        AV0AM002.AV0AMS03 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM002.AV0AMQ03 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM002.AV0AMIN3[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASDG();
      else
      end

      if (AV0AW01.AV0AWX4 > 5
       && AV0AW01.AV0AWX4 < 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM007.AV0AMSZ3[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM007.AV0AMQT3[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM007.AV0AMIN3[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASDG();
      else
      end

      if (AV0AW01.AV0AWX4 == 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM007.AV0AMS03 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM007.AV0AMQ03 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM007.AV0AMIN3[6] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASDG();
      else
      end

      if (AV0AW01.AV0AWX4 > 11
       && AV0AW01.AV0AWX4 < 16)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 11;
        AV0AM004.AV0AMSZ3[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM004.AV0AMQT3[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM004.AV0AMIN3[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASDG();

      end

    end

    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;

  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM004.AV0AMQ03 = AV0AW01.AV0AWTQY;
  end

end // end AV0ASDE

// get condition code desc
Function AV0ASDG()

    /* SET UP TOTALING ON AV0AM002*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 4)
    AV0AM002.AV0AMS03 = "*TOTAL*";
    AV0AM002.AV0AMCN3[5] = "*A/O*";
    AV0AM002.AV0AMQ03 = AV0AW01.AV0AWTQY;
  end
  if (AV0AW01.AV0AWX4 > 4
   && AV0AW01.AV0AWX4 < 11)
    AV0AM007.AV0AMS03 = "*TOTAL*";
    AV0AM007.AV0AMCN3[6] = "*A/O*";
    AV0AM007.AV0AMQ03 = AV0AW01.AV0AWTQY;
  end

  if (AV0AW01.AV0AWX4 <= 5)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM002.AV0AMCN3[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM007.AV0AMCN3[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 11)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM004.AV0AMCN3[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 5)
      AV0AM002.AV0AMCN3[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 5
     && AV0AW01.AV0AWX4 < 12)
      AV0AM007.AV0AMCN3[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 11)
      AV0AM004.AV0AMCN3[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    end
  end

  if (AV0AW01.AV0AWX4 <= 5)
    AV0AM002.AV0AMCN3[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    AV0AM007.AV0AMCN3[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM004.AV0AMCN3[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

end // end AV0ASDG

// READ AND SETUP SCREEN DATA 1A
Function AV0ASEA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0AW01.AV0AWFT = "Y";
  AV0ASBB(); /* ZERO OUT QTY FIELDS IN AV0AW01*/
  AV0AM002.AV0AMST4 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM007.AV0AMST4 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM004.AV0AMST4 = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM002.AV0AMCL4 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM007.AV0AMCL4 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM004.AV0AMCL4 = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM002.AV0AM-MAP-XOWCD4 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM007.AV0AM-MAP-XOWCD4 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM004.AV0AM-MAP-XOWCD4 = AV0AW05.XOWCD[AV0AWX3];
  AV0AM002.AV0AMWH4 = AV0AW05.XWHCD[AV0AWX3];
  AV0AM007.AV0AMWH4 = AV0AW05.XWHCD[AV0AWX3];
  AV0AM004.AV0AMWH4 = AV0AW05.XWHCD[AV0AWX3];
  AV0AW01.AV0AWSD = AV0AW05.XSECD[AV0AWX3];
  AV0AW01.AV0AWNR = AV0AW05.XSNYR[AV0AWX3];
  AV0AM002.AV0AMUM4 = AV0AW05.XUMCD[AV0AWX3];
  AV0AM002.AV0AMCM4 = AV0AW05.AV0AWCMT[AV0AWX3];
  AV0AW01.AV1CUPRC = AV0AW05.AV1CUPRC[AV0AWX3];
  AV0AW01.AV1CUEDT = AV0AW05.AV1CUEDT[AV0AWX3];
  AV0AW01.AV1PRPRC = AV0AW05.AV1PRPRC[AV0AWX3];
  AV0AW01.AV1CUCST = AV0AW05.AV1CUCST[AV0AWX3]; /* cost*/
  AV0AW01.AV5SGPRC = AV0AW05.AV5SGPRC[AV0AWX3]; /* sugg retail price*/
  AV0AW01.AV0AWFT = "N";

  AV0ASBC(); /* roll available at once quqntities together*/

  AV0ASED();

  AV0AM002.AV0AM-OFFER-DT-FLD[4] = AV0AW05.AV0AW-OFFER-DT-FLD[AV0AWX3];
  AV0AM002.AV0AM-OFFER-DT[4] = AV0AW05.AV0AW-FUTR-OFFER-BDT[AV0AWX3];

end // end AV0ASEA

// get info from product file
Function AV0ASED()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  PG2REC.XGPCD = AV0AM001.XGPCD;
  PG2REC.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];
  PG2REC.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];
  PG2REC.XDMCD = AV0AW05.XDMCD[AV0AWX3];

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, continue*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
         /* continue*/
    else

      converseLib.validationFailed(76);
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYCLR01";
      TA1REC.TA1LOCAT[3] = "AV0ASED";
      TA1REC.TA1LOCAT[4] = "IO3120 ";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();

    end
  else
    converseLib.validationFailed(76);
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "VSYCLR01";
    TA1REC.TA1LOCAT[3] = "AV0ASED";
    TA1REC.TA1LOCAT[4] = "IO3120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0AW02.SY1SSTNM[4] = PG2REC.SY1SSTNM;
  AV0AM002.AV0AMNM4 = PG2REC.SY1STYNM;
  AV0AM007.AV0AMSD4 = PG2REC.SY1SSTNM;
  AV0AM004.AV0AMSD4 = PG2REC.SY1SSTNM;

  AV0AM002.AV0AMCD4 = PG2REC.SY2CLRAB;
  AV0AM007.AV0AMCD4 = PG2REC.SY2CLRAB;
  AV0AM004.AV0AMCD4 = PG2REC.SY2CLRAB;

  AV0AS-SY2ALNOR();
  AV0AM002.SY2ALNOR[4] = AV0AW05.SY2ALNOR[AV0AWX3];

  XOWREC.XWHCD = AV0AW05.XWHCD[AV0AWX3]; /* move actual whse*/
  XOWREC.XOWCD = AV0AW05.XOWCD[AV0AWX3]; /* format key*/
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    AV0AM002.AV0AM-MAP-XOWABR4 = XOWTBL.XOWABRV[sysVar.arrayIndex];
  end

   /* move owner abreviation to maps:*/
  AV0AM004.AV0AM-MAP-XOWABR4 = AV0AM002.AV0AM-MAP-XOWABR4;
  AV0AM007.AV0AM-MAP-XOWABR4 = AV0AM002.AV0AM-MAP-XOWABR4;

  if (PG2REC.XGACD in XGATBL.XGACD)
    AV0AW02.XGAABRV[1] = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  if (PG2REC.XGACD in XGATBL.XGACD)
    AV0AW02.XGAABRV[4] = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  if (PG2REC.XSPCD in XSPTBL.XSPCD)
    AV0AW02.XSPABRV[4] = XSPTBL.XSPABRV[sysVar.arrayIndex];
  end

  if (AV0AW01.AV0AWFT != "Y")
    AV0AW01.AV0AREM = AV0AW01.AV1CUPRC - AV0AW01.AV1PRPRC;

    if (AV0AW01.AV0AREM > 0)
      AV0AM002.AV0AMPD4 = AV0AW01.AV0AREM * 100 / AV0AW01.AV1CUPRC;
    else
      if (AV0AW01.AV0AREM < 0)
        AV0AM002.AV0AMPD4 = AV0AW01.AV0AREM * 100 / AV0AW01.AV1PRPRC;
      else
        AV0AM002.AV0AMPD4 = 0;
      end
    end

    AV0AM002.AV0AMCP4 = AV0AW01.AV1CUPRC;
    AV0AM007.AV0AMCP4 = AV0AW01.AV1CUPRC;
    AV0AM004.AV0AMCP4 = AV0AW01.AV1CUPRC;
    AV0AM002.AV0AMCE4 = AV0AW01.AV1CUEDT;
    AV0AM002.AV0AMPP4 = AV0AW01.AV1PRPRC;

    if (COMMAREA.CAILVL[1] == "Y")
      AV0AM002.AV0AMPR4 = AV0AW01.AV1CUCST; /* current cost*/
    else
      AV0AM002.AV0AMPR4 = AV0AW01.AV5SGPRC; /* sugg retail price*/
    end

    AV0ASEE(); /* WRITE SIZE RELATED DATA*/

  end

  AV0AS-GETBLANK(); /* get blank style nbr for crested style*/

end // end AV0ASED

// SET SIZE RELATED FIELDS FOR 1
Function AV0ASEE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  if (AV0AW05.SY1STNBR[AV0AWX3] == PG3REC.SY1STNBR)
     /* NEXT SENTENCE*/
  else
    AV0ASBF(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 5)
        AV0AM002.AV0AMSZ4[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM002.AV0AMQT4[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM002.AV0AMIN4[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASEG();
      else

      end
      if (AV0AW01.AV0AWX4 == 5)
        AV0AM002.AV0AMS04 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM002.AV0AMQ04 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM002.AV0AMIN4[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASEG();
      else
      end

      if (AV0AW01.AV0AWX4 > 5
       && AV0AW01.AV0AWX4 < 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM007.AV0AMSZ4[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM007.AV0AMQT4[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM007.AV0AMIN4[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASEG();
      else
      end

      if (AV0AW01.AV0AWX4 == 11)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 5;
        AV0AM007.AV0AMS04 = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM007.AV0AMQ04 = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM007.AV0AMIN4[6] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASEG();
      else
      end

      if (AV0AW01.AV0AWX4 > 11
       && AV0AW01.AV0AWX4 < 16)
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
        AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 11;
        AV0AM004.AV0AMSZ4[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM004.AV0AMQT4[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM004.AV0AMIN4[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASEG();

      end

    end

    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;

  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM004.AV0AMQ04 = AV0AW01.AV0AWTQY;
  end

end // end AV0ASEE

// get condition code desc
Function AV0ASEG()

    /* SET UP TOTALING ON AV0AM002*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 4)
    AV0AM002.AV0AMS04 = "*TOTAL*";
    AV0AM002.AV0AMCN4[5] = "*A/O*";
    AV0AM002.AV0AMQ04 = AV0AW01.AV0AWTQY;
  end
  if (AV0AW01.AV0AWX4 > 4
   && AV0AW01.AV0AWX4 < 11)
    AV0AM007.AV0AMS04 = "*TOTAL*";
    AV0AM007.AV0AMCN4[6] = "*A/O*";
    AV0AM007.AV0AMQ04 = AV0AW01.AV0AWTQY;
  end

  if (AV0AW01.AV0AWX4 <= 5)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM002.AV0AMCN4[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM007.AV0AMCN4[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 11)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM004.AV0AMCN4[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 5)
      AV0AM002.AV0AMCN4[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 5
     && AV0AW01.AV0AWX4 < 12)
      AV0AM007.AV0AMCN4[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
    end
    if (AV0AW01.AV0AWX4 > 11)
      AV0AM004.AV0AMCN4[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    end
  end

  if (AV0AW01.AV0AWX4 <= 5)
    AV0AM002.AV0AMCN4[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 5
   && AV0AW01.AV0AWX4 < 12)
    AV0AM007.AV0AMCN4[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

  if (AV0AW01.AV0AWX4 > 11)
    AV0AM004.AV0AMCN4[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
  end

end // end AV0ASEG

// setup three footwear maps
Function AV0ASJA()
    /* SET UP ONE TO THREE FOOTWEAR RECORDS*/

  if (AV0AW01.AV0AWX3 >= AV0AW01.AV0AWX2)
    converseLib.validationFailed(016); /* last product*/
    exit stack;
  end

  set AV0AM003 initial;
  set AV0AM005 initial;
  set AV0AM006 initial;

  AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1;

  if (AV0AW01.AV0AWX2 >= AV0AW01.AV0AWX3)
    AV0ASKA(); /* READ DATA BASE FILE UNTIL SQLCODE =*/
                                   /* 100*/
  else
    converseLib.validationFailed(016); /* last product*/
    exit stack;
  end

  if (AV0AM001.XWHCD > "  ") /* warehouse not wildcarded*/
    exit stack; /* exit to display map*/
  else
    AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1;
  end

  if (AV0AW01.AV0AWX2 >= AV0AW01.AV0AWX3) /* continue to fill in map*/
    AV0AS-SAME-PRODUCT();
    if (AV0AW01.AV0AW-SAME-PROD == "Y") /* same product, different warehouse*/
      AV0ASLA();
    else
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1; /* reset so we don't skip prod*/
      exit stack; /* exit to display map*/
    end
  else
    converseLib.validationFailed(016); /* last product*/
    exit stack;
  end

  AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 + 1;

  if (AV0AW01.AV0AWX2 >= AV0AW01.AV0AWX3)
    AV0AS-SAME-PRODUCT();
    if (AV0AW01.AV0AW-SAME-PROD == "Y") /* same product, different warehouse*/
      AV0ASMA();
    else
      AV0AW01.AV0AWX3 = AV0AW01.AV0AWX3 - 1; /* reset so we don't skip prod*/
      exit stack; /* exit to display map*/
    end
  else
    converseLib.validationFailed(016); /* last product*/
    exit stack;
  end

  if (AV0AW01.AV0AWX2 > AV0AW01.AV0AWX3) /* if a product has more than 3 whse*/
    converseLib.validationFailed(361); /* the user gets a msg*/
    exit stack;
  end

end // end AV0ASJA

// READ AND SETUP FTWR DATA 1A
Function AV0ASKA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0AW01.AV0AWFT = "Y";
  AV0ASBB(); /* ZERO OUT QTY FIELDS IN AV0AW01*/
  AV0AM003.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3]; /* style number*/
  AV0AM005.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];
  AV0AM006.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];

  AV0AM003.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3]; /* color id*/
  AV0AM005.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];
  AV0AM006.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];

  AV0AM003.XDMCD = AV0AW05.XDMCD[AV0AWX3]; /* dimension*/
  AV0AM005.XDMCD = AV0AW05.XDMCD[AV0AWX3];
  AV0AM006.XDMCD = AV0AW05.XDMCD[AV0AWX3];

  AV0AM003.PC2INSEG = AV0AW05.PC2INSEG[AV0AWX3]; /* inventory segment*/
  AV0AM005.PC2INSEG = AV0AW05.PC2INSEG[AV0AWX3];
  AV0AM006.PC2INSEG = AV0AW05.PC2INSEG[AV0AWX3];

  AV0AM003.XPGCD = AV0AW05.XPGCD[AV0AWX3]; /* package type*/
  AV0AM005.XPGCD = AV0AW05.XUMCD[AV0AWX3];
  AV0AM006.XPGCD = AV0AW05.XUMCD[AV0AWX3];

  AV0AM003.XUMCD = AV0AW05.XUMCD[AV0AWX3]; /* unit of measure*/
  AV0AM005.XUMCD = AV0AW05.XUMCD[AV0AWX3];
  AV0AM006.XUMCD = AV0AW05.XUMCD[AV0AWX3];

   /* test ****/

  AV0AM003.SY2ALNOR = AV0AW05.SY2ALNOR[AV0AWX3]; /* allow new ord fl*/

   /* test ****/

  AV0AW01.AV1CUPRC = AV0AW05.AV1CUPRC[AV0AWX3]; /* wholesale price*/
  AV0AW01.AV1CUEDT = AV0AW05.AV1CUEDT[AV0AWX3]; /* price effectv date*/
  AV0AW01.AV1PRPRC = AV0AW05.AV1PRPRC[AV0AWX3]; /* prior whlsl price*/
  AV0AW01.AV1CUCST = AV0AW05.AV1CUCST[AV0AWX3]; /* cost*/
  AV0AW01.AV5SGPRC = AV0AW05.AV5SGPRC[AV0AWX3]; /* sugg retail price*/

  AV0AW01.AV0AWFT = "N";
  AV0ASBC();
  AV0ASKD();
end // end AV0ASKA

// GET IDS AND SET FTWR 1 FIELDS
Function AV0ASKD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3]; /* style number*/
  SY1REC.XGPCD = AV0AM001.XGPCD; /* general product class*/
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ASKD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  if (SY1REC.SY1PRCZS == "Z")
    converseLib.validationFailed(9);
  end

  AV0AM003.SY1STYNM = SY1REC.SY1STYNM; /* style name*/
  AV0AM005.SY1SSTNM = SY1REC.SY1SSTNM; /* short style name*/
  AV0AM006.SY1SSTNM = SY1REC.SY1SSTNM;

  if (AV0AW05.SY2CLRID[AV0AWX3] <= " ") /* color id*/
     /* NEXT SENTENCE*/
  else
    SY2REC.XGPCD = AV0AM001.XGPCD; /* general product class*/
    SY2REC.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3]; /* style number*/
    SY2REC.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3]; /* color id*/
    SY2REC.XDMCD = AV0AW05.XDMCD[AV0AWX3]; /* dimension code*/
    SY2REC.SY2CLRDS = " "; /* color description*/
    SY2REC.SY2CLRAB = " "; /* color abrev*/
    call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1REC.TA1LOCAT[3] = "AV0ASKD";
      TA1REC.TA1LOCAT[4] = "IO0130 ";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();

    end

    if (AV0AW05.SY2CLRID[AV0AWX3] <= " ") /* color id*/
      /* NEXT SENTENCE*/
    else
      if (AV0AW05.AV0AW-EQMT-FL[AV0AWX3] <= " ") /* haven't checked eqmt?*/
        AV0AW05.AV0AW-EQMT-FL[AV0AWX3] = "N"; /* set array flag no*/
        AV0AW04.XGPCD = AV0AM001.XGPCD; /* general product class*/
        AV0AW04.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3]; /* style number*/
        AV0AW04.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3]; /* color id*/
        AV0AW04.XDMCD = AV0AW05.XDMCD[AV0AWX3]; /* dimension code*/
        AV0AS-CHECK-EQMT(); /* determine if equipment product*/
        AV0AW05.AV0AW-EQMT-FL[AV0AWX3] = AV0AW04.AV0AW-EQMT-FL;
                                   /* set array flag yes*/
      end
    end

    AV0AM003.SY2CLRDS = SY2REC.SY2CLRDS; /* color description*/
    AV0AM005.SY2CLRAB = SY2REC.SY2CLRAB; /* color abreviation*/
    AV0AM006.SY2CLRAB = SY2REC.SY2CLRAB;

    if (AV0AW01.AV0AW-CAN-SO == "Y") /* Canadian Sales Office*/
      if (AV0AW05.AV0AW-CAN-OVRRD-FND[AV0AWX3] == "Y") /* Canadian override*/
        /* next sentence*/
      else
        AV0AW05.SY2ALNOR[AV0AWX3] = SY2REC.SY2ALNOR;
        AV0AW05.OPZHMIND[AV0AWX3] = SY2REC.OPZHMIND;
      end
    else
      AV0AW05.SY2ALNOR[AV0AWX3] = SY2REC.SY2ALNOR;
      AV0AW05.OPZHMIND[AV0AWX3] = SY2REC.OPZHMIND;
    end

    AV0AM003.SY2ALNOR = AV0AW05.SY2ALNOR[AV0AWX3];

    if (AV0AW05.OPZHMIND[AV0AWX3] == "Y") /* if style is a hot model*/
      set AV0AM003.AV0AMHMI initialAttributes; /* set map hot model literal blinking*/
      set AV0AM005.AV0AMHMI initialAttributes;
      set AV0AM006.AV0AMHMI initialAttributes;
    else
      set AV0AM003.AV0AMHMI invisible; /* set map hot model fields dark*/
      set AV0AM005.AV0AMHMI invisible;
      set AV0AM006.AV0AMHMI invisible;
    end
  end

  AV0AM003.AV0AMCM1 = AV0AW05.AV0AWCMT[AV0AWX3]; /* avail comment*/

  if (AV0AW05.XWHCD[AV0AWX3] in XWHTBL.XWHCD)
    AV0AM003.AV0AMWH1 = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* warehouse*/
    AV0AM005.AV0AMWH1 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0AM006.AV0AMWH1 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end


  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0AM003.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* gender age abrev*/
    AV0AM005.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* gender age abrev*/
    AV0AM006.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* gender age abrev*/
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0AM003.XSPDESC = XSPTBL.XSPDESC[sysVar.arrayIndex];
                                   /* sport activity abrev*/
    AV0AM005.XSPABRV = XSPTBL.XSPABRV[sysVar.arrayIndex];
                                   /* sport activity abrev*/
    AV0AM006.XSPABRV = XSPTBL.XSPABRV[sysVar.arrayIndex];
                                   /* sport activity abrev*/
  end

  if (AV0AW01.AV0AWFT != "Y")
    AV0AW01.AV0AREM = AV0AW01.AV1CUPRC - AV0AW01.AV1PRPRC;
    if (AV0AW01.AV0AREM > 0)
      AV0AM003.AV0AMPCT = AV0AW01.AV0AREM * 100 / AV0AW01.AV1CUPRC;
    else
      if (AV0AW01.AV0AREM < 0)
        AV0AM003.AV0AMPCT = AV0AW01.AV0AREM * 100 / AV0AW01.AV1PRPRC;
      else
        AV0AM003.AV0AMPCT = 0;
      end
    end

    AV0AM003.AV1CUPRC = AV0AW01.AV1CUPRC;
    AV0AM005.AV1CUPRC = AV0AW01.AV1CUPRC;
    AV0AM006.AV1CUPRC = AV0AW01.AV1CUPRC;
    AV0AM003.AV1CUEDT = AV0AW01.AV1CUEDT;
    AV0AM003.AV1PRPRC = AV0AW01.AV1PRPRC;

    if (COMMAREA.CAILVL[1] == "Y")
      AV0AM003.AV0AMPRN = "      COST:"; /* price name*/
      AV0AM003.AV0AMPRC = AV0AW01.AV1CUCST; /* current cost*/
      AV0AM005.AV0AMPRN = "      COST:";
      AV0AM005.AV0AMPRC = AV0AW01.AV1CUCST;
      AV0AM006.AV0AMPRN = "      COST:";
      AV0AM006.AV0AMPRC = AV0AW01.AV1CUCST;
    else
      AV0AM003.AV0AMPRN = "RETL PRICE:"; /* price name*/
      AV0AM003.AV0AMPRC = AV0AW01.AV5SGPRC; /* sugg retail price*/
      AV0AM005.AV0AMPRN = "RETL PRICE:";
      AV0AM005.AV0AMPRC = AV0AW01.AV5SGPRC;
      AV0AM006.AV0AMPRN = "RETL PRICE:";
      AV0AM006.AV0AMPRC = AV0AW01.AV5SGPRC;
    end

    AV0ASKE(); /* WRITE SIZE RELATED DATA*/

  end

end // end AV0ASKD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ASKE()

   /* SET SIZE RELATED DATA FOR FOOTWEAR PRD 1*/

  AV0ASKF(); /* CALL SIZE CONVERSION PG1050*/

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 13)
        AV0AM003.AV0AMSZ1[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM003.AV0AMQT1[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM003.AV0AMIN1[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASKG();
      else
        if (AV0AW01.AV0AWX4 == 13)
          AV0AM003.AV0AMSZ1[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
          AV0AM003.AV0AMQ01 = AV0AW01.AV1AVQTY[AV0AWX1];
          AV0AM003.AV0AMIN1[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
          AV0ASKG();
        else
          if (AV0AW01.AV0AWX4 < 29)
            AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
            AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 13;
            AV0AM005.AV0AMSZ1[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
            AV0AM005.AV0AMQT1[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
            AV0AM005.AV0AMIN1[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
            AV0ASKG();
          else
            if (AV0AW01.AV0AWX4 == 29)
              AV0AM005.AV0AMSZ1[16] = PG3REC.SY4IDDSC[AV0AWX4];
              AV0AM005.AV0AMQ01 = AV0AW01.AV1AVQTY[AV0AWX1];
              AV0AM005.AV0AMIN1[1] = AV0AW01.AV1CHGFL[AV0AWX1];
              AV0ASKG();
            else
              AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
              AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 29;
              AV0AM006.AV0AMSZ1[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
              AV0AM006.AV0AMQT1[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
              AV0AM006.AV0AMIN1[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
              AV0ASKG();

            end
          end
        end
      end

    end

    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;

  end

  if (AV0AW01.AV0AWX4 > 29)
    AV0AM006.AV0AMQ01 = AV0AW01.AV0AWTQY;
  else
    if (AV0AW01.AV0AWX4 > 13)
      AV0AM005.AV0AMQ01 = AV0AW01.AV0AWTQY;
    end
  end

end // end AV0ASKE

// get size translation
Function AV0ASKF()

    /* CALL TO PG1050 TO GET EXTERNAL SIZES*/

  set PG3REC empty;
  PG3REC.XGPCD = AV0AW05.XGPCD[AV0AWX3];
  PG3REC.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];
  PG3REC.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];
  PG3REC.XDMCD = AV0AW05.XDMCD[AV0AWX3];
  PG3REC.XQACD = AV0AW05.XQACD[AV0AWX3];
  PG3REC.PG3RETCD = 0;

  sysVar.arrayIndex = 1;
  AV0AW01.AV0AWX5 = 0;

  while (sysVar.arrayIndex <= 40)

    if (AV0AW01.XCDCD[sysVar.arrayIndex] > " ")
      AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 + 1;
      PG3REC.SY5SZID[AV0AWX5] = sysVar.arrayIndex;

    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

  PG3REC.PG3FUNCD = "IE";
  PG3REC.PG3DATFM = "C";

  call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRDOG";
    TA1REC.TA1TBLVU = "PRODUCT";
    TA1REC.TA1LOCAT[3] = "AV0ASKF";
    TA1REC.TA1LOCAT[4] = "PG1050";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

    /* RETURN TO CALLING APP*/

end // end AV0ASKF

// get condition code desc
Function AV0ASKG()

    /* SET UP TOTALING ON AV0AM003*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 12)
    AV0AM003.AV0AMSZ1[13] = "TOTAL";
    AV0AM003.AV0AMCN1[13] = "*A/O*";
    AV0AM003.AV0AMQ01 = AV0AW01.AV0AWTQY;
  else

    if (AV0AW01.AV0AWX4 <= 28)
      AV0AM005.AV0AMSZ1[16] = "TOTAL";
      AV0AM005.AV0AMCN1[16] = "*A/O*";
      AV0AM005.AV0AMQ01 = AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 13)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM003.AV0AMCN1[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end
  if (AV0AW01.AV0AWX4 <= 29)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM005.AV0AMCN1[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 29)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM006.AV0AMCN1[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 13)
      AV0AM003.AV0AMCN1[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
      if (AV0AW01.AV0AWX4 == 29)
        AV0AM005.AV0AMCN1[16] = XCDTBL.XCDABRV[sysVar.arrayIndex];
        return;
      else
        if (AV0AW01.AV0AWX4 <= 29)
          AV0AM005.AV0AMCN1[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
          return;
        else
          AV0AM006.AV0AMCN1[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
          return;
        end
      end
    end
  end

  if (AV0AW01.AV0AWX4 <= 13)
    AV0AM003.AV0AMCN1[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  else
    if (AV0AW01.AV0AWX4 <= 29)
      AV0AM005.AV0AMCN1[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
    else
      AV0AM006.AV0AMCN1[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
    end
  end

end // end AV0ASKG

// READ AND SETUP FTWR DATA 2
Function AV0ASLA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0AW01.AV0AWFT = "Y";
  AV0ASBB(); /* ZERO OUT QTY FIELDS IN AV0AW01*/

   /* following statement is for wildcarded whse with a 1 whse*/
   /* product.*/

  if (AV0AM001.XWHCD == " "
   && AV0AW05.AV1CUPRC[AV0AWX3] > 0)
    AV0AM003.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3]; /* style code*/
    AV0AM005.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];
    AV0AM006.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];

    AV0AM003.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3]; /* color code*/
    AV0AM005.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];
    AV0AM006.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];

    AV0AM003.XUMCD = AV0AW05.XDMCD[AV0AWX3]; /* unit of measure*/
    AV0AM005.XUMCD = AV0AW05.XDMCD[AV0AWX3];
    AV0AM006.XUMCD = AV0AW05.XDMCD[AV0AWX3];

    AV0AM003.PC2INSEG = AV0AW05.PC2INSEG[AV0AWX3]; /* style code*/
    AV0AM005.PC2INSEG = AV0AW05.PC2INSEG[AV0AWX3];
    AV0AM006.PC2INSEG = AV0AW05.PC2INSEG[AV0AWX3];

    AV0AM003.XPGCD = AV0AW05.XPGCD[AV0AWX3]; /* unit of measure*/
    AV0AM005.XPGCD = AV0AW05.XPGCD[AV0AWX3];
    AV0AM006.XPGCD = AV0AW05.XPGCD[AV0AWX3];

    AV0AM003.XUMCD = AV0AW05.XUMCD[AV0AWX3]; /* unit of measure*/
    AV0AM005.XUMCD = AV0AW05.XUMCD[AV0AWX3];
    AV0AM006.XUMCD = AV0AW05.XUMCD[AV0AWX3];

    AV0AW01.AV1CUPRC = AV0AW05.AV1CUPRC[AV0AWX3]; /* wholesale price*/
    AV0AW01.AV1CUEDT = AV0AW05.AV1CUEDT[AV0AWX3]; /* price effective date*/
    AV0AW01.AV1PRPRC = AV0AW05.AV1PRPRC[AV0AWX3]; /* prior whlsl price*/
    AV0AW01.AV1CUCST = AV0AW05.AV1CUCST[AV0AWX3]; /* cost*/
    AV0AW01.AV5SGPRC = AV0AW05.AV5SGPRC[AV0AWX3]; /* sugg retail price*/
  end

  AV0AW01.AV0AWFT = "N";
  AV0ASBC();
  AV0ASLD();
end // end AV0ASLA

// GET IDS AND SET FTWR 2 FIELDS
Function AV0ASLD()

  AV0AM003.AV0AMCM2 = AV0AW05.AV0AWCMT[AV0AWX3]; /* product comment*/

  if (AV0AW05.XWHCD[AV0AWX3] in XWHTBL.XWHCD) /* warehouse abbreviation*/
    AV0AM003.AV0AMWH2 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0AM005.AV0AMWH2 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0AM006.AV0AMWH2 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

  AV0AW01.AV0AREM = AV0AW01.AV1CUPRC - AV0AW01.AV1PRPRC;
  if (AV0AW01.AV0AREM > 0)
    AV0AM003.AV0AMPCT = AV0AW01.AV0AREM * 100 / AV0AW01.AV1CUPRC;
  else
    if (AV0AW01.AV0AREM < 0)
      AV0AM003.AV0AMPCT = AV0AW01.AV0AREM * 100 / AV0AW01.AV1PRPRC;
    else
      AV0AM003.AV0AMPCT = 0;
    end
  end

  AV0AM003.AV1CUPRC = AV0AW01.AV1CUPRC;
  AV0AM005.AV1CUPRC = AV0AW01.AV1CUPRC;
  AV0AM006.AV1CUPRC = AV0AW01.AV1CUPRC;
  AV0AM003.AV1CUEDT = AV0AW01.AV1CUEDT;
  AV0AM003.AV1PRPRC = AV0AW01.AV1PRPRC;

  if (COMMAREA.CAILVL[1] == "Y")
    AV0AM003.AV0AMPRN = "      COST:"; /* price name*/
    AV0AM003.AV0AMPRC = AV0AW01.AV1CUCST; /* current cost*/
    AV0AM005.AV0AMPRN = "      COST:";
    AV0AM005.AV0AMPRC = AV0AW01.AV1CUCST;
    AV0AM006.AV0AMPRN = "      COST:";
    AV0AM006.AV0AMPRC = AV0AW01.AV1CUCST;
  else
    AV0AM003.AV0AMPRN = "RETL PRICE:"; /* price name*/
    AV0AM003.AV0AMPRC = AV0AW01.AV5SGPRC; /* sugg retail price*/
    AV0AM005.AV0AMPRN = "RETL PRICE:";
    AV0AM005.AV0AMPRC = AV0AW01.AV5SGPRC;
    AV0AM006.AV0AMPRN = "RETL PRICE:";
    AV0AM006.AV0AMPRC = AV0AW01.AV5SGPRC;
  end

  AV0ASLE(); /* WRITE SIZE RELATED DATA*/

   /* END ;*/

end // end AV0ASLD

// SET SIZE RELATED FIELDS FOR 2
Function AV0ASLE()

   /* SET SIZE RELATED DATA FOR FOOTWEAR PRD 1*/

  AV0ASKF(); /* CALL SIZE CONVERSION PG1050*/

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 13)
        AV0AM003.AV0AMSZ2[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM003.AV0AMQT2[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM003.AV0AMIN2[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASLG();
      else
        if (AV0AW01.AV0AWX4 == 13)
          AV0AM003.AV0AMSZ2[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
          AV0AM003.AV0AMQ02 = AV0AW01.AV1AVQTY[AV0AWX1];
          AV0AM003.AV0AMIN2[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
          AV0ASLG();
        else
          if (AV0AW01.AV0AWX4 < 29)
            AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
            AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 13;
            AV0AM005.AV0AMSZ2[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
            AV0AM005.AV0AMQT2[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
            AV0AM005.AV0AMIN2[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
            AV0ASLG();
          else
            if (AV0AW01.AV0AWX4 == 29)
              AV0AM005.AV0AMSZ2[16] = PG3REC.SY4IDDSC[AV0AWX4];
              AV0AM005.AV0AMQ02 = AV0AW01.AV1AVQTY[AV0AWX1];
              AV0AM005.AV0AMIN2[16] = AV0AW01.AV1CHGFL[AV0AWX1];
              AV0ASLG();
            else
              AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
              AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 29;
              AV0AM006.AV0AMSZ2[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
              AV0AM006.AV0AMQT2[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
              AV0AM006.AV0AMIN2[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
              AV0ASLG();

            end
          end
        end
      end

    end

    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;

  end

  if (AV0AW01.AV0AWX4 > 29)
    AV0AM006.AV0AMQ02 = AV0AW01.AV0AWTQY;
  else
    if (AV0AW01.AV0AWX4 > 13)
      AV0AM005.AV0AMQ02 = AV0AW01.AV0AWTQY;
    end
  end

end // end AV0ASLE

// get condition code desc
Function AV0ASLG()

    /* SET UP TOTALING ON AV0AM003*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 12)
    AV0AM003.AV0AMSZ2[13] = "TOTAL";
    AV0AM003.AV0AMCN2[13] = "*A/O*";
    AV0AM003.AV0AMQ02 = AV0AW01.AV0AWTQY;
  else

    if (AV0AW01.AV0AWX4 <= 28)
      AV0AM005.AV0AMSZ2[16] = "TOTAL";
      AV0AM005.AV0AMCN2[16] = "*A/O*";
      AV0AM005.AV0AMQ02 = AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 13)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM003.AV0AMCN2[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end
  if (AV0AW01.AV0AWX4 <= 29)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM005.AV0AMCN2[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 29)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM006.AV0AMCN2[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 13)
      AV0AM003.AV0AMCN2[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
      if (AV0AW01.AV0AWX4 == 29)
        AV0AM005.AV0AMCN2[16] = XCDTBL.XCDABRV[sysVar.arrayIndex];
        return;
      else
        if (AV0AW01.AV0AWX4 <= 29)
          AV0AM005.AV0AMCN2[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
          return;
        else
          AV0AM006.AV0AMCN2[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
          return;
        end
      end
    end
  end

  if (AV0AW01.AV0AWX4 <= 13)
    AV0AM003.AV0AMCN2[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  else
    if (AV0AW01.AV0AWX4 <= 29)
      AV0AM005.AV0AMCN2[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
    else
      AV0AM006.AV0AMCN2[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
    end
  end

end // end AV0ASLG

// READ AND SETUP FTWR DATA 3
Function AV0ASMA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0AW01.AV0AWFT = "Y";
  AV0ASBB(); /* ZERO OUT QTY FIELDS IN AV0AW01*/

  if (AV0AM001.XWHCD > " ")
    AV0AW01.AV1CUPRC = AV0AW05.AV1CUPRC[AV0AWX3]; /* curr price*/
    AV0AW01.AV1CUEDT = AV0AW05.AV1CUEDT[AV0AWX3]; /* curr price eff dt*/
    AV0AW01.AV1PRPRC = AV0AW05.AV1PRPRC[AV0AWX3]; /* prior price*/
    AV0AW01.AV1CUCST = AV0AW05.AV1CUCST[AV0AWX3]; /* current cost*/
    AV0AW01.AV5SGPRC = AV0AW05.AV5SGPRC[AV0AWX3]; /* sugg retail price*/
    AV0AW01.AV0AWFT = "N";
  end

   /* following statement is for wildcarded whse with 1*/
   /* whse product.*/


  if (AV0AM001.XWHCD == " ")
    if (AV0AW05.AV1CUPRC[AV0AWX3] > 0)
      AV0AM003.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3]; /* style code*/
      AV0AM005.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];
      AV0AM006.SY1STNBR = AV0AW05.SY1STNBR[AV0AWX3];

      AV0AM003.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3]; /* color code*/
      AV0AM005.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];
      AV0AM006.SY2CLRID = AV0AW05.SY2CLRID[AV0AWX3];

      AV0AM003.XDMCD = AV0AW05.XDMCD[AV0AWX3]; /* dimension code*/
      AV0AM005.XDMCD = AV0AW05.XDMCD[AV0AWX3];
      AV0AM006.XDMCD = AV0AW05.XDMCD[AV0AWX3];

      AV0AM003.PC2INSEG = AV0AW05.PC2INSEG[AV0AWX3]; /* inventory segmnt*/
      AV0AM005.PC2INSEG = AV0AW05.PC2INSEG[AV0AWX3];
      AV0AM006.PC2INSEG = AV0AW05.PC2INSEG[AV0AWX3];

      AV0AM003.XPGCD = AV0AW05.XPGCD[AV0AWX3]; /* unit of measure*/
      AV0AM005.XPGCD = AV0AW05.XPGCD[AV0AWX3];
      AV0AM006.XPGCD = AV0AW05.XPGCD[AV0AWX3];

      AV0AM003.XUMCD = AV0AW05.XUMCD[AV0AWX3]; /* unit of measure*/
      AV0AM005.XUMCD = AV0AW05.XUMCD[AV0AWX3];
      AV0AM006.XUMCD = AV0AW05.XUMCD[AV0AWX3];

      AV0AW01.AV1CUPRC = AV0AW05.AV1CUPRC[AV0AWX3]; /* curr price*/
      AV0AW01.AV1CUEDT = AV0AW05.AV1CUEDT[AV0AWX3]; /* cur price eff dt*/
      AV0AW01.AV1PRPRC = AV0AW05.AV1PRPRC[AV0AWX3]; /* prior price*/
      AV0AW01.AV1CUCST = AV0AW05.AV1CUCST[AV0AWX3]; /* cost*/
      AV0AW01.AV5SGPRC = AV0AW05.AV5SGPRC[AV0AWX3]; /* sugg retail price*/
      AV0AW01.AV0AWFT = "N";
    end
  end

  AV0ASBC();
  AV0ASMD();
end // end AV0ASMA

// GET IDS AND SET FTWR 3 FIELDS
Function AV0ASMD()

  AV0AM003.AV0AMCM3 = AV0AW05.AV0AWCMT[AV0AWX3]; /* product comment*/

  if (AV0AW05.XWHCD[AV0AWX3] in XWHTBL.XWHCD)
    AV0AM003.AV0AMWH3 = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* warehouse abbrev*/
    AV0AM005.AV0AMWH3 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0AM006.AV0AMWH3 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

  AV0AW01.AV0AREM = AV0AW01.AV1CUPRC - AV0AW01.AV1PRPRC;
  if (AV0AW01.AV0AREM > 0)
    AV0AM003.AV0AMPCT = AV0AW01.AV0AREM * 100 / AV0AW01.AV1CUPRC;
  else
    if (AV0AW01.AV0AREM < 0)
      AV0AM003.AV0AMPCT = AV0AW01.AV0AREM * 100 / AV0AW01.AV1PRPRC;
    else
      AV0AM003.AV0AMPCT = 0;
    end
  end

  AV0AM003.AV1CUPRC = AV0AW01.AV1CUPRC;
  AV0AM005.AV1CUPRC = AV0AW01.AV1CUPRC;
  AV0AM006.AV1CUPRC = AV0AW01.AV1CUPRC;
  AV0AM003.AV1CUEDT = AV0AW01.AV1CUEDT;
  AV0AM003.AV1PRPRC = AV0AW01.AV1PRPRC;

  if (COMMAREA.CAILVL[1] == "Y")
    AV0AM003.AV0AMPRN = "      COST:"; /* price name*/
    AV0AM003.AV0AMPRC = AV0AW01.AV1CUCST; /* current cost*/
    AV0AM005.AV0AMPRN = "      COST:";
    AV0AM005.AV0AMPRC = AV0AW01.AV1CUCST;
    AV0AM006.AV0AMPRN = "      COST:";
    AV0AM006.AV0AMPRC = AV0AW01.AV1CUCST;
  else
    AV0AM003.AV0AMPRN = "RETL PRICE:"; /* price name*/
    AV0AM003.AV0AMPRC = AV0AW01.AV5SGPRC; /* sugg retail price*/
    AV0AM005.AV0AMPRN = "RETL PRICE:";
    AV0AM005.AV0AMPRC = AV0AW01.AV5SGPRC;
    AV0AM006.AV0AMPRN = "RETL PRICE:";
    AV0AM006.AV0AMPRC = AV0AW01.AV5SGPRC;
  end

  AV0ASME(); /* WRITE SIZE RELATED DATA*/

end // end AV0ASMD

// SET SIZE RELATED FIELDS FOR 3
Function AV0ASME()

   /* SET SIZE RELATED DATA FOR FOOTWEAR PRD 1*/

  AV0ASKF(); /* CALL SIZE CONVERSION PG1050*/

  AV0AW01.AV0AWTQY = 0;
  AV0AW01.AV0AWX4 = 1;

  while (AV0AW01.AV0AWX4 <= 40)
    if (PG3REC.SY4IDDSC[AV0AWX4] > " ")

      AV0AW01.AV0AWX1 = PG3REC.SY5SZID[AV0AWX4];

      if (AV0AW01.AV1AVQTY[AV0AWX1] < 0)
        AV0AW01.AV1AVQTY[AV0AWX1] = 0;
      end

      if (AV0AW01.AV1CHGFL[AV0AWX1] == "Y")
        AV0AW01.AV1CHGFL[AV0AWX1] = ">";
      else
        AV0AW01.AV1CHGFL[AV0AWX1] = " ";
      end

      if (AV0AW01.AV0AWX4 < 13)
        AV0AM003.AV0AMSZ3[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
        AV0AM003.AV0AMQT3[AV0AWX4] = AV0AW01.AV1AVQTY[AV0AWX1];
        AV0AM003.AV0AMIN3[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
        AV0ASMG();
      else
        if (AV0AW01.AV0AWX4 == 13)
          AV0AM003.AV0AMSZ3[AV0AWX4] = PG3REC.SY4IDDSC[AV0AWX4];
          AV0AM003.AV0AMQ03 = AV0AW01.AV1AVQTY[AV0AWX1];
          AV0AM003.AV0AMIN3[AV0AWX4] = AV0AW01.AV1CHGFL[AV0AWX1];
          AV0ASMG();
        else
          if (AV0AW01.AV0AWX4 < 29)
            AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
            AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 13;
            AV0AM005.AV0AMSZ3[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
            AV0AM005.AV0AMQT3[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
            AV0AM005.AV0AMIN3[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
            AV0ASMG();
          else
            if (AV0AW01.AV0AWX4 == 29)
              AV0AM005.AV0AMSZ3[16] = PG3REC.SY4IDDSC[AV0AWX4];
              AV0AM005.AV0AMQ03 = AV0AW01.AV1AVQTY[AV0AWX1];
              AV0AM005.AV0AMIN3[16] = AV0AW01.AV1CHGFL[AV0AWX1];
              AV0ASMG();
            else
              AV0AW01.AV0AWX5 = AV0AW01.AV0AWX4;
              AV0AW01.AV0AWX5 = AV0AW01.AV0AWX5 - 29;
              AV0AM006.AV0AMSZ3[AV0AWX5] = PG3REC.SY4IDDSC[AV0AWX4];
              AV0AM006.AV0AMQT3[AV0AWX5] = AV0AW01.AV1AVQTY[AV0AWX1];
              AV0AM006.AV0AMIN3[AV0AWX5] = AV0AW01.AV1CHGFL[AV0AWX1];
              AV0ASMG();

            end
          end
        end
      end

    end

    AV0AW01.AV0AWX4 = AV0AW01.AV0AWX4 + 1;

  end

  if (AV0AW01.AV0AWX4 > 29)
    AV0AM006.AV0AMQ03 = AV0AW01.AV0AWTQY;
  else
    if (AV0AW01.AV0AWX4 > 13)
      AV0AM005.AV0AMQ03 = AV0AW01.AV0AWTQY;
    end
  end

end // end AV0ASME

// get condition code desc
Function AV0ASMG()

    /* SET UP TOTALING ON AV0AM003*/

  if (AV0AW01.XCDCD[AV0AWX1] == "01")
    if (AV0AW01.AV1AVQTY[AV0AWX1] > 0)
      AV0AW01.AV0AWTQY = AV0AW01.AV1AVQTY[AV0AWX1] + AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 12)
    AV0AM003.AV0AMSZ3[13] = "TOTAL";
    AV0AM003.AV0AMCN3[13] = "*A/O*";
    AV0AM003.AV0AMQ03 = AV0AW01.AV0AWTQY;
  else

    if (AV0AW01.AV0AWX4 <= 28)
      AV0AM005.AV0AMSZ3[16] = "TOTAL";
      AV0AM005.AV0AMCN3[16] = "*A/O*";
      AV0AM005.AV0AMQ03 = AV0AW01.AV0AWTQY;
    end
  end

  if (AV0AW01.AV0AWX4 <= 13)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM003.AV0AMCN3[AV0AWX4] = AV0AW01.AV0AWFL;
      return;
    end
  end
  if (AV0AW01.AV0AWX4 <= 29)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM005.AV0AMCN3[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.AV0AWX4 > 29)
    if (AV0AW01.XCDCD[AV0AWX1] == "02"
     || AV0AW01.XCDCD[AV0AWX1] == "04")
      AV0AW01.AV0ADT = AV0AW01.AV1AVDT[AV0AWX1];
      AV0AW01.AV0AWF1 = AV0AW01.AV0ADT2;
      AV0AW01.AV0AWF3 = AV0AW01.AV0ADT3;
      AV0AW01.AV0AWF2 = "/";
      AV0AM006.AV0AMCN3[AV0AWX5] = AV0AW01.AV0AWFL;
      return;
    end
  end

  if (AV0AW01.XCDCD[AV0AWX1] in XCDTBL.XCDCD)
    if (AV0AW01.AV0AWX4 <= 13)
      AV0AM003.AV0AMCN3[AV0AWX4] = XCDTBL.XCDABRV[sysVar.arrayIndex];
      return;
    else
      if (AV0AW01.AV0AWX4 == 29)
        AV0AM005.AV0AMCN3[16] = XCDTBL.XCDABRV[sysVar.arrayIndex];
        return;
      else
        if (AV0AW01.AV0AWX4 <= 29)
          AV0AM005.AV0AMCN3[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
          return;
        else
          AV0AM006.AV0AMCN3[AV0AWX5] = XCDTBL.XCDABRV[sysVar.arrayIndex];
          return;
        end
      end
    end
  end

  if (AV0AW01.AV0AWX4 <= 13)
    AV0AM003.AV0AMCN3[AV0AWX4] = AV0AW01.XCDCD[AV0AWX1];
  else
    if (AV0AW01.AV0AWX4 <= 29)
      AV0AM005.AV0AMCN3[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
    else
      AV0AM006.AV0AMCN3[AV0AWX5] = AV0AW01.XCDCD[AV0AWX1];
    end
  end

end // end AV0ASMG

// get owner desc gpc EQ 03
Function AV0ASOWNR()
  set AV0AM001.XOWCD normal;
  AV0AM001.XOWDESC = " ";

  if (AV0AM001.XOWCD > "  ")
    if (AV0AM001.XWHCD == "  ")
  /* change for whse 25*/
  /* MOVE '25' TO XOWREC.XWHCD;   /*  US Apparel*/
  /* MOVE AV0AM001.XOWCD TO XOWREC.XOWCD;/* format key*/
  /* RETR XOWREC.XOWKEY XOWTBL.XOWKEY AV0AM001.XOWDESC XOWDESC;*/
  /* IF EZETST EQ 0;              /* Table entry not found*/
  /* change end*/
      XOWREC.XWHCD = "51"; /* US Apparel*/
      XOWREC.XOWCD = AV0AM001.XOWCD; /* format key*/
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        AV0AM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
  /* change begins - 01/31/01*/
  /* IF EZETST EQ 0;            /* Table entry not found*/
  /* MOVE '27' TO XOWREC.XWHCD;/*  US Victory Crestor*/
  /* MOVE AV0AM001.XOWCD TO XOWREC.XOWCD;/* format key*/
  /* RETR XOWREC.XOWKEY XOWTBL.XOWKEY AV0AM001.XOWDESC XOWDESC;*/
  /* change ends   - 01/31/01*/
      if (sysVar.arrayIndex == 0)
        AV0AW01.AV0AWFF = "Y";
        converseLib.validationFailed(81); /* Indicate owner code*/
        set AV0AM001.XOWCD cursor, modified, bold;
        AV0AM001.XOWDESC = " ";
        return; /* Return to caller*/
      end
  /* END;*/
  /* END;*/
    else
      XOWREC.XWHCD = AV0AM001.XWHCD;
      XOWREC.XOWCD = AV0AM001.XOWCD;
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        AV0AM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        AV0AW01.AV0AWFF = "Y";
        converseLib.validationFailed(81); /* Indicate owner code invalid*/
        set AV0AM001.XOWCD cursor, modified, bold;
        AV0AM001.XOWDESC = " ";
        return; /* Return to caller*/
      end
    end
  else
    return;
  end

  if (XOWTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not owner code*/
    AV0AW01.AV0AWFF = "Y";
    AV0AM001.XOWDESC = " "; /* Clear owner code abrv*/
    set AV0AM001.XOWCD cursor, modified, bold;
    converseLib.validationFailed(82); /* Indicate owner code not active*/
    return; /* Return to caller*/
  else
    set AV0AM001.XOWCD initialAttributes;
  end

end // end AV0ASOWNR

// get owner desc gpc EQ 03
Function AV0ASOWNR-CAN()
  set AV0AM001.XOWCD normal;
  AV0AM001.XOWDESC = " ";

  if (AV0AM001.XOWCD > "  ")
    if (AV0AM001.XWHCD == "  ")
      XOWREC.XWHCD = "41"; /* whse*/
      XOWREC.XOWCD = AV0AM001.XOWCD; /* format key*/
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        AV0AM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0) /* Table entry not found*/
        XOWREC.XWHCD = "42"; /* WHSE*/
        XOWREC.XOWCD = AV0AM001.XOWCD; /* format key*/
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          AV0AM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          AV0AW01.AV0AWFF = "Y";
          converseLib.validationFailed(81); /* Indicate owner code*/
          set AV0AM001.XOWCD cursor, modified, bold;
          AV0AM001.XOWDESC = " ";
          return; /* Return to caller*/
        end
      end
    else
      XOWREC.XWHCD = AV0AM001.XWHCD;
      XOWREC.XOWCD = AV0AM001.XOWCD;
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        AV0AM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        AV0AW01.AV0AWFF = "Y";
        converseLib.validationFailed(81); /* Indicate owner code invalid*/
        set AV0AM001.XOWCD cursor, modified, bold;
        AV0AM001.XOWDESC = " ";
        return; /* Return to caller*/
      end
    end
  else
    return;
  end

  if (XOWTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not owner code*/
    AV0AW01.AV0AWFF = "Y";
    AV0AM001.XOWDESC = " "; /* Clear owner code abrv*/
    set AV0AM001.XOWCD cursor, modified, bold;
    converseLib.validationFailed(82); /* Indicate owner code not active*/
    return; /* Return to caller*/
  else
    set AV0AM001.XOWCD initialAttributes;
  end

end // end AV0ASOWNR-CAN

// get ownr group desc gpc NOT 03
Function AV0ASOWNR02()
   /* ------------------------------------------------------------*/
   /* validate owner group for GPC not 03*/
   /* ------------------------------------------------------------*/

  set AV0AM001.XOWCD normal;
  AV0AM001.XOWDESC = " ";

  if (AV0AM001.XOWCD == "  ")
    AV0AM001.XOWCD = "00";
  end

  XOWREC.XOWCD = AV0AM001.XOWCD;

  if (AV0AM001.XGPCD == "02") /* if gpc 02*/
    if (XOWREC.XOWCD in XOWTBL.XOWCD)
      AV0AM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0) /* not found*/
      AV0AW01.AV0AWFF = "Y"; /* error flag*/
      converseLib.validationFailed(81); /* Invalid owner code*/
      set AV0AM001.XOWCD cursor, modified, bold;
      AV0AM001.XOWDESC = " ";
      return; /* Return to caller*/
    end
  end

  if (AV0AM001.XGPCD == "01") /* if gpc 01 and whse 04*/
    if (AV0AM001.XWHCD == "04") /* search tbl only for xowcd*/
      if (XOWREC.XOWCD in XOWTBL.XOWCD)
        AV0AM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0) /* not found*/
        AV0AW01.AV0AWFF = "Y"; /* error flag*/
        converseLib.validationFailed(81); /* Invalid owner code*/
        set AV0AM001.XOWCD cursor, modified, bold;
        AV0AM001.XOWDESC = " ";
        return; /* Return to caller*/
      end
    else
      XOWREC.XWHCD = AV0AM001.XWHCD;
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        AV0AM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0) /* Table entry not found*/
        AV0AW01.AV0AWFF = "Y"; /* error flag*/
        converseLib.validationFailed(81); /* Invalid owner code*/
        set AV0AM001.XOWCD cursor, modified, bold;
        AV0AM001.XOWDESC = " ";
        return; /* Return to caller*/
      end
    end
  end


  if (XOWTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not owner code*/
    AV0AW01.AV0AWFF = "Y"; /* error flag*/
    AV0AM001.XOWDESC = " "; /* Clear owner code abrv*/
    set AV0AM001.XOWCD cursor, modified, bold;
    converseLib.validationFailed(82); /* Indicate owner code not active*/
    return; /* Return to caller*/
  else
    set AV0AM001.XOWCD initialAttributes;
  end

end // end AV0ASOWNR02

// move avail data to ws
Function AV0ASSAVDATA()
   /* MOVE DATA TO WORKING STORAGE:*/


   /* Bypass Mailer Reserve owner groups if not specifically entered:*/
  if (AV7REC.XOWCD == "MR"
   || AV7REC.XOWCD == "SM")
    if (AV7REC.XOWCD != AV0AM001.XOWCD)
      AV0AW01.AV0AWFLG = "N"; /* active life cycle y or n*/
      return;
    end
  end

   /* Move availability record to working storage:*/
  if (AV7REC.XLCCD == AV0AM001.XLCCD)
    AV0AW01.AV0AWHIT = "Y"; /* set was there a hit flag*/
    AV0AW01.XGPCD = AV7REC.XGPCD;
    AV0AW01.SY1STNBR = AV7REC.SY1STNBR;
    AV0AW01.SY2CLRID = AV7REC.SY2CLRID;
    AV0AW01.XUMCD = AV7REC.XUMCD;
    AV0AW01.XDMCD = AV7REC.XDMCD;
             /* MOVE AV7REC.XSECD TO AV0AW01.XSECD;*/
             /* MOVE AV7REC.XSNYR TO AV0AW01.XSNYR;*/
    AV0AW01.XWHCD = AV7REC.XWHCD;
    AV0AW01.XOWCD = AV7REC.XOWCD;
    AV0AS75(); /* Load av7rec to av0aw05*/
  end

end // end AV0ASSAVDATA

//*** RECORD=AV0AW01 ****
// working storage record for map 1 and main process
// ***********************
Record AV0AW01 type basicRecord
  10 AV0AWX1 AV0AWX1 ; 
  10 AV0AWX2 AV0AWX2 ; 
  10 AV0AWX3 AV0AWX3 ; 
  10 AV0AWX4 AV0AWX4 ; 
  10 AV0AWX5 AV0AWX5 ; 
  10 AV0AWX6 AV0AWX6 ; 
  10 AV0AWX7 AV0AWX7 ; 
  10 AV0AWX11 AV0AWX11 ; 
  10 AV0AWIX1 AV0AWIX1 ; 
  10 AV0AWFF AV0AWFF ; 
  10 AV0AWFLG AV0AWFLG ; 
  10 AV0AWFZ AV0AWFZ ; 
  10 AV0AWKE AV0AWKE ; 
    15 XWHCD XWHCD ; 
    15 AV0AWSK AV0AWSK ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 XSECD XSECD ; 
      20 XSNYR XSNYR ; 
      20 XOWCD XOWCD ; 
      20 XQACD XQACD ; 
      20 XUMCD XUMCD ; 
      20 AV0AWSR AV0AWSR ; 
  10 AV0AWL1 AV0AWL1 ; 
  10 AV0AWL2 AV0AWL2 ; 
    15 AV0AWSC AV0AWSC ; 
    15 AV0AWSZ AV0AWSZ ; 
  10 AV0AWTD AV0AWTD ; 
  10 AV0AWFT AV0AWFT ; 
  10 AV0AWWH AV0AWWH ; 
  10 AV0AWSY AV0AWSY ; 
    15 AV0AWSD AV0AWSD ; 
    15 AV0AWNR AV0AWNR ; 
  10 AV0AREM AV0AREM ; 
  10 AV1CUPRC AV1CUPRC ; 
  10 AV1CUEDT AV1CUEDT ; 
  10 AV1PRPRC AV1PRPRC ; 
  10 AV1CUCST AV1CUCST ; 
  10 AV5SGPRC AV5SGPRC ; 
  10 AV0AW1R AV0AW1R ; 
  10 AV0AWCD AV0AWCD ; 
    15 XCDCD XCDCD [40] ; 
  10 AV0AWQT AV0AWQT ; 
    15 AV1AVQTY AV1AVQTY [40] ; 
  10 AV0AWDT AV0AWDT ; 
    15 AV1AVDT AV1AVDT [40] ; 
  10 AV0AWGF AV0AWGF ; 
    15 AV1CHGFL AV1CHGFL [40] ; 
  10 AV0AQTY AV0AQTY ; 
  10 AV0AWTQY AV0AWTQY ; 
  10 AV0ADT AV0ADT ; 
    15 AV0ADT1 AV0ADT1 ; 
    15 AV0ADT2 AV0ADT2 ; 
    15 AV0ADT3 AV0ADT3 ; 
  10 AV0AWFL AV0AWFL ; 
    15 AV0AWF1 AV0AWF1 ; 
    15 AV0AWF2 AV0AWF2 ; 
    15 AV0AWF3 AV0AWF3 ; 
  10 AV0AWZA AV0AWZA ; 
  10 AV0AWZB AV0AWZB ; 
  10 AV0AWZC AV0AWZC ; 
  10 AV0AWZD AV0AWZD ; 
  10 AV0AWZE AV0AWZE ; 
  10 AV0AWZF AV0AWZF ; 
  10 AV0AWZG AV0AWZG ; 
  10 AV0AWFG AV0AWFG ; 
  10 AV0AWHIT AV0AWHIT ; 
  10 AV0AWMT AV0AWMT ; 
    15 AV0AWM1 AV0AWM1 ; 
    15 AV0AWM2 AV0AWM2 ; 
  10 AV0AWBA AV0AWBA ; 
    15 AV0AWBB AV0AWBB ; 
    15 AV0AWBC AV0AWBC ; 
  10 SY5SZID SY5SZID [40] ; 
  10 AV0AWK1 AV0AWK1 ; 
    15 AV0AWK2 AV0AWK2 [40] ; 
  10 AV4PRDBD AV4PRDBD ; 
  10 AV0AWEOC AV0AWEOC ; 
  10 AV0AWMSG AV0AWMSG ; 
    15 AV0AWMS1 AV0AWMS1 ; 
    15 * char(1) ; 
    15 AV0AWMS2 AV0AWMS2 ; 
    15 * char(1) ; 
    15 AV0AWMS3 AV0AWMS3 ; 
    15 * char(1) ; 
    15 AV0AWMS4 AV0AWMS4 ; 
  10 AV0AWSFL AV0AWSFL ; 
  10 AV0AW-DATE-WORK AV0AW-DATE-WORK ; 
    15 AV0AW-DATE-FILLER AV0AW-DATE-FILLER ; 
    15 AV0AW-DATE-CC AV0AW-DATE-CC ; 
    15 AV0AW-DATE-YY AV0AW-DATE-YY ; 
    15 AV0AW-DATE-MM AV0AW-DATE-MM ; 
    15 AV0AW-DATE-DD AV0AW-DATE-DD ; 
  10 AV0AW-FORMAT-DATE AV0AW-FORMAT-DATE ; 
    15 AV0AW-FORMAT-MM AV0AW-FORMAT-MM ; 
    15 AV0AW-FORMAT-DASH1 AV0AW-FORMAT-DASH1 ; 
    15 AV0AW-FORMAT-DD AV0AW-FORMAT-DD ; 
    15 AV0AW-FORMAT-DASH2 AV0AW-FORMAT-DASH2 ; 
    15 AV0AW-FORMAT-YY AV0AW-FORMAT-YY ; 
  10 * char(1) ; 
  10 AV0AW-AVXSO-FOUND AV0AW-AVXSO-FOUND ; 
  10 AV0AW-CAN-SO AV0AW-CAN-SO ; 
  10 AV0AW-EQMT-SO AV0AW-EQMT-SO ; 
  10 AV0AW-SAME-PROD AV0AW-SAME-PROD ; 
end // end AV0AW01

//*** RECORD=AV0AW02 ****
// working storage record for map 1 and main process
// ***********************
Record AV0AW02 type basicRecord
  10 AV0AWNM AV0AWNM [4] ; 
    15 SY1SSTNM SY1SSTNM ; 
    15 AV0AWFL1 AV0AWFL1 ; 
    15 XGAABRV XGAABRV ; 
    15 AV0AWFL2 AV0AWFL2 ; 
    15 XSPABRV XSPABRV ; 
end // end AV0AW02

//*** RECORD=AV0AW04 ****
// ;/* AV0AW04 - WS for Equipment Product check
// ***********************
Record AV0AW04 type basicRecord
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 AV0AW-EQMT-FL AV0AW-EQMT-FL ; 
  10 XPCCD XPCCD ; 
end // end AV0AW04

Record AV0AW05 type basicRecord
  5 AV0AWTA AV0AWTA [100] ; 
    10 XWHCD XWHCD ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XSACD XSACD ; 
    10 XPGCD XPGCD ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 XOWCD XOWCD ; 
    10 XQACD XQACD ; 
    10 XUMCD XUMCD ; 
    10 AV4PRDBD AV4PRDBD ; 
    10 XLCCD XLCCD ; 
    10 AV1CUPRC AV1CUPRC ; 
    10 AV1CUEDT AV1CUEDT ; 
    10 AV1PRPRC AV1PRPRC ; 
    10 AV1CUCST AV1CUCST ; 
    10 AV5SGPRC AV5SGPRC ; 
    10 AV0AWCD AV0AWCD ; 
    10 AV0AWQT AV0AWQT ; 
    10 AV0AWDT AV0AWDT ; 
    10 AV0AWGF AV0AWGF ; 
    10 AV0AWCMT AV0AWCMT ; 
    10 AV0AW-OFFER-DT-FLD AV0AW-OFFER-DT-FLD ; 
    10 AV0AW-FUTR-OFFER-BDT AV0AW-FUTR-OFFER-BDT ; 
    10 AV0AW-CAN-OVRRD-FND AV0AW-CAN-OVRRD-FND ; 
    10 XLCCD1 XLCCD1 ; 
    10 XLCCD2 XLCCD2 ; 
    10 XLCCD3 XLCCD3 ; 
    10 XLCCD4 XLCCD4 ; 
    10 SY2CEDT1 SY2CEDT1 ; 
    10 SY2CEDT2 SY2CEDT2 ; 
    10 SY2CEDT3 SY2CEDT3 ; 
    10 SY2CEDT4 SY2CEDT4 ; 
    10 OPZHMIND OPZHMIND ; 
    10 SY2ALNOR SY2ALNOR ; 
    10 SY2POFBD SY2POFBD ; 
    10 SY2FOFBD SY2FOFBD ; 
    10 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 XPLCD XPLCD ; 
    10 AV0AW-EQMT-FL AV0AW-EQMT-FL ; 
end // end AV0AW05

Record AV0AW11 type basicRecord
  5 AV0AWGP AV0AWGP [4] ; 
    10 PG2SCRFL PG2SCRFL ; 
    10 XWHCD XWHCD ; 
    10 XGPCD XGPCD ; 
    10 SY1BSTNB SY1BSTNB ; 
    10 SY2BCLCD SY2BCLCD ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XSACD XSACD ; 
    10 XPGCD XPGCD ; 
    10 AV4PRDBD AV4PRDBD ; 
    10 AV0AWCD AV0AWCD ; 
    10 AV0AWQT AV0AWQT ; 
    10 AV0AWDT AV0AWDT ; 
    10 AV0AWGF AV0AWGF ; 
    10 AV0AWMSG AV0AWMSG ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
end // end AV0AW11

// hold field
DataItem AV0ADT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold field 1
DataItem AV0ADT1 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD FIELD 2
DataItem AV0ADT2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD FIELD 3
DataItem AV0ADT3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// USED IN QUANTITY CALC
DataItem AV0AQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REMANIDER AREA FOR PERCENT
DataItem AV0AREM decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AV Sales Office tbl match flag
DataItem AV0AW-AVXSO-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY2000 overrides found for CAN
DataItem AV0AW-CAN-OVRRD-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Canadian Sales Office flag
DataItem AV0AW-CAN-SO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0AW-DATE-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0AW-DATE-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0AW-DATE-FILLER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0AW-DATE-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date work area
DataItem AV0AW-DATE-WORK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0AW-DATE-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// equipment product flag
DataItem AV0AW-EQMT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Equipment Sales Office flag
DataItem AV0AW-EQMT-SO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0AW-FORMAT-DASH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0AW-FORMAT-DASH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format date work area
DataItem AV0AW-FORMAT-DATE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0AW-FORMAT-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0AW-FORMAT-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0AW-FORMAT-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted future offer date
DataItem AV0AW-FUTR-OFFER-BDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// future offer date desc field
DataItem AV0AW-OFFER-DT-FLD char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Same product flag
DataItem AV0AW-SAME-PROD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORKING STORAGE ACCUMULATOR
DataItem AV0AW1R char(440)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORKING STORAGE FOR XOWKEY
DataItem AV0AWBA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORKING STORAGE FOR XWHCD
DataItem AV0AWBB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORKING STORAGE FOR XOWCD
DataItem AV0AWBC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP CONDITIO CODE
DataItem AV0AWCD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COMMENT
DataItem AV0AWCMT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP AVAILABLE DATE
DataItem AV0AWDT char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor flag
DataItem AV0AWEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER HOLD FIELD 1
DataItem AV0AWF1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER HOLD FIELD 1
DataItem AV0AWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER HOLD FIELD 3
DataItem AV0AWF3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR FLAG INDICATOR
DataItem AV0AWFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER FLAG
DataItem AV0AWFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER HOLD FIELD
DataItem AV0AWFL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FILLER MUST INITIALIZE
DataItem AV0AWFL1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  FILLER MUST INITIALIZE
DataItem AV0AWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// active life cycle indicator
DataItem AV0AWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST TIME FLAG
DataItem AV0AWFT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR FLAG INDICATOR
DataItem AV0AWFZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP CHANGE FLAG
DataItem AV0AWGF char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0AWGP char(517)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WAS THERE A HIT FLAG
DataItem AV0AWHIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX USED w/AV0AW03,AV0AW04
DataItem AV0AWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GROUP CONDITIO CODE
DataItem AV0AWK1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition code
DataItem AV0AWK2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KEY FOR SEARCHING AV0AW05
DataItem AV0AWKE char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEAR CCYYBINARY
DataItem AV0AWL1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SEASON YEAR CCYY  DISPLAY
DataItem AV0AWL2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc desc
DataItem AV0AWM1 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// steady part of heading
DataItem AV0AWM2 char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message field#1
DataItem AV0AWMS1 char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank style nbr
DataItem AV0AWMS2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank style color
DataItem AV0AWMS3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank style dimension
DataItem AV0AWMS4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank style message
DataItem AV0AWMSG char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading storage
DataItem AV0AWMT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0AWNM char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORK SEASON YEAR
DataItem AV0AWNR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GROUP AVAIL QUANTITY
DataItem AV0AWQT char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CENTURY PREFIX
DataItem AV0AWSC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK SEASON CODE
DataItem AV0AWSD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0AWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SORT KEY
DataItem AV0AWSK char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SORT SEQUENCE FOR DUPS
DataItem AV0AWSR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK AREA FOR SEASON/YEAR
DataItem AV0AWSY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEAR
DataItem AV0AWSZ num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data group, entire row
DataItem AV0AWTA char(595)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TODAYS DATE IN CCYYMMDD
DataItem AV0AWTD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL A/O
DataItem AV0AWTQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD AREA FOR WHSE
DataItem AV0AWWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0AWX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED with av0aw11
DataItem AV0AWX11 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0AWX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED with av0aw05
DataItem AV0AWX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0AWX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0AWX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0AWX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index used w/av0aw05 compare
DataItem AV0AWX7 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD WHSE
DataItem AV0AWZA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// HOLD SEASON CODE
DataItem AV0AWZB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HOLD SEASON YEAR
DataItem AV0AWZC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD OWNER
DataItem AV0AWZD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HOLD QUALITY
DataItem AV0AWZE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HOLD LIFE CYCLE
DataItem AV0AWZF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold gpc code
DataItem AV0AWZG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

