package av0i;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AV0I ****
// ;       THIS APPLICATION RETRIEVES DATA FROM
// ;       DB2 TO REPORT AVAILABILITY FOR SPECIAL
// ;       SALES AVAILABILITY, THAT IS AVAILABILITY
// ;       FOR PRODUCTS WHICH ARE B-GRADE CLOSEOUT
// ;       OR ACTIVE AND NOT ON THE CONTROL FILE
// ;       FOR AVAILABILITY CALCULATION
// ;
// ;*******************************************************
// ; MAINTENANCE HISTORY
// ;
// ; DATE      NAME     DESCRIPTION
// ;-----     ----     -----------
// ; 121086   SAC      CREATION
// ; 051187   SAC      ADD THIRD APPAREL SCREEN
// ; 121588   jbw      added NONCSP option to calls
// ; 121588   jbw      added XSSEGTR logic
// ; 121588   jbw      added XSSEGTR logic
// ; 051689 mblail     changed xsncd to xsecd and xwhparnt
// ;                   to xwhcd because of table changes.
// ; 091990 mgatre     wildcard xdmcd and change call to io0130
// ;                   to select set and fetch (s15, s16, s17,
// ;                   s18).
// ;                   leave xdmcd and sy2clrid blank on screen
// ;                   if not entered.
// ; 101090 dbruih     removed wildcards in loading
// ;                   davail.vavqty02 record.
// ; 102490 dbruih     modified to display product by inventory
// ;                   segment code and package type when
// ;                   entered and default to zeros when not
// ;                   entered.
// ; 010491 bantho     changes to support warehouse #51
// ; 031891 dbruih     changed to use warehouse from map1
// ;                   when transferring key to av0k
// ;                  (substitutions)
// ; 101591 dbruih     added maps and logic to display whse 15
// ;                  (korea)
// ; 061092 dbruih     removed hardcode warehouse description
// ;                   of whse 15.  whse 15 added to xwhtbl
// ;                   in db2 table changes.
// ; 020993 dbruih     removed hardcode of warehouse '51' for
// ;                   select from davail.vavhdr01 (av0is01)
// ; 061793 MSMIT2     REPLACE CALL TO SY1120 WITH PG1050
// ; 070699 RRENUK     Included whse 51 to process ftwr and
// ;                   equipment products - multi gpc
// ; 032901 SPITCH     Removed all the references for ware
// ;                   house 25
// ;*******************************************************
// ;
// DESCRIPTION:
//   THE PurPOSE OF THIS APPLICATION IS TO REPORT
// SPECIAL SALES AVAILABILITY.  THE USER ENTERES THE
// GPC WHSE AND AT LEAST ONE STYLE NUMBER AND THE PROGRAM
// RETURNS THE CURRENT AVAILABILITY RECORD IN A FORMATTED
// MANNER WHICH CAN COVER MULTIPLE SCREENS
// *********************
Program AV0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV0IW01 AV0IW01; // record
  AV0IW05 AV0IW05; // record
  AV0IW09 AV0IW09; // record
  AV0IW10 AV0IW10; // record
  AV5REC AV5REC; // record
  AV7REC AV7REC; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  PC2REC PC2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XCDTBL {deleteAfterUse = yes}; // table
  use AV0IM.AV0IM001,  // forms
      AV0IM.AV0IM002, 
      AV0IM.AV0IM003, 
      AV0IM.AV0IM004, 
      AV0IM.AV0IM005, 
      AV0IM.AV0IM006, 
      AV0IM.AV0IM007, 
      AV0IM.AV0IM008, 
      AV0IM.AV0IM009, 
      AV0IM.AV0IM010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AV0I001: AV0I001();
    goto AV0I002;
    AV0I002: AV0I002();
    goto AV0I005;
    AV0I005: AV0I005();
    if (AV0IW01.AV0IWFZ == "N")
      if (AV0IM001.XGPCD == "02")
        goto AV0I020;
      else
        goto AV0I010;
      end
    end

    if (AV0IW01.AV0IWFF == "Y")
      goto AV0I005;
    end

    if (converseVar.eventKey is pf12)
      goto AV0I005;
    end

    if (converseVar.eventKey is enter)
      if (AV0IW01.AV0IWHIT == "N")
        converseLib.validationFailed(18);
      else
        if (AV0IM001.XGPCD == "02")
          goto AV0I020;
        else
          goto AV0I010;
        end
      end
    end

    goto AV0I005;
    AV0I010: AV0I010();

    goto AV0I015;

    AV0I015: AV0I015();
    if (converseVar.eventKey is pf11)
      goto AV0I017;
    end

    if (converseVar.eventKey is pf3)
      goto AV0I002;
    end

    if (converseVar.eventKey is pa1)
      exit program;
    end

    goto AV0I015;
    AV0I017: AV0I017();
    if (converseVar.eventKey is pf3)
      goto AV0I002;
    end

    if (converseVar.eventKey is enter)
      if (AV0IW01.AV0IWFF == "Y")
        goto AV0I017;
      else
        goto AV0I015;
      end
    end

    if (converseVar.eventKey is pf10)
      goto AV0I015;
    end

    if (converseVar.eventKey is pf11)
      goto AV0I025;
    end

    if (converseVar.eventKey is pf5)
      if (AV0IW01.AV0IWFF == "Y")
        goto AV0I017;
      else
        goto AV0I015;
      end
    end


    goto AV0I017;

    AV0I020: AV0I020();

    goto AV0I030; /* converse av0im003*/

    AV0I025: AV0I025();
    if (converseVar.eventKey is pf3)
      goto AV0I002;
    end

    if (converseVar.eventKey is pf10)
      goto AV0I017;
    end

    if (converseVar.eventKey is enter)
      if (AV0IW01.AV0IWFF == "Y")
        goto AV0I025;
      else
        goto AV0I015;
      end
    end

    if (converseVar.eventKey is pf5)
      if (AV0IW01.AV0IWFF == "Y")
        goto AV0I025;
      else
        goto AV0I015;
      end
    end

    goto AV0I025;
    AV0I030: AV0I030();
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4)
      goto AV0I002;
    end

    if (converseVar.eventKey is pf5
     || converseVar.eventKey is enter)
      goto AV0I030;
    end
    AV0I035: AV0I035();
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4)
      goto AV0I002;
    end
    AV0I040: AV0I040();
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4)
      goto AV0I002;
    end
    AV0I041: AV0I041();
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4)
      goto AV0I002;
    end

    if (converseVar.eventKey is pf5
     || converseVar.eventKey is enter)
      goto AV0I030;
    end

    AV0I042: AV0I042();
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4)
      goto AV0I002;
    end
    AV0I043: AV0I043();
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4)
      goto AV0I002;
    end
  end // end main
end // end AV0I

// PREPROCESS INTO AVAILABILITY
Function AV0I001()
    /* *********************************************************/
    /* * THE PURPOSE OF THIS PROCESS IS TO INITIALLY SETUP THE**/
    /* * VARIABLES ON THE MAP AV0IM001, WHICH ARE KNOWN TO    **/
    /* * APPLICATION AT THIS TIME.  ALSO THERE WILL BE A SECUR**/
    /* * CHECK PERFORMED BEFORE THE APPLICATION WILL CONTINUE **/
    /* *********************************************************/



  XSENTRY(); /* CHECK FOR SECURITY VIOLATION*/


  XSSEGTR(); /* set segmented transaction id*/

  set AV0IM001 initial; /* INITIALIZE SCREEN*/
  set SQLCA empty; /* initialize sqlca*/
  set AV0IW01 empty; /* initialize ws*/
end // end AV0I001

// PREPROCESS INTO AVAILABILITY
Function AV0I002()
    /* *********************************************************/
    /* * THE PURPOSE OF THIS PROCESS IS TO INITIALLY SETUP THE**/
    /* * VARIABLES ON THE MAP AV0IM001, WHICH ARE KNOWN TO    **/
    /* * APPLICATION AT THIS TIME.  ALSO THERE WILL BE A SECUR**/
    /* * CHECK PERFORMED BEFORE THE APPLICATION WILL CONTINUE **/
    /* *********************************************************/

  set AV0IM001 initial; /* initialize map*/
  AV0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* MOVE SYSTEM DATE TO MAP*/

  AV0IM001.XGPCD = COMMAREA.XGPCD;


  if (AV0IW01.AV0IWZA <= " "
   && AV0IW01.AV0IWZD <= " "
   && AV0IM001.XGPCD <= " ")
     /* NEXT SENTENCE*/
  else
    set AV0IM001.SY1STNBR[1] cursor, normal;
    AV0IM001.XWHCD = AV0IW01.AV0IWZA;
    AV0IM001.XOWCD = AV0IW01.AV0IWZD;

  end


  if (AV0IM001.XGPCD in XGPTBL.XGPCD) /* SEARCH FOR GPC DESCRIPTION*/
    AV0IM001.XGPDESC = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* FOUND IT*/
  else
     /* NEXT SENTENCE; DID NOT FIND IT*/
  end

  set AV0IW01 empty;

  set AV0IW05 empty;

  AV0IM001.AV0IOPT = 1;

end // end AV0I002

// SUB MENU INTO SPECIAL SALES
Function AV0I005()
  if (AV0IW01.AV0IWFZ == "N")
    exit stack;
  end

  set AV0IW05 empty;

  converse AV0IM001 ;
  AV0IW01.AV0IWFF = "N";

  if (converseVar.eventKey is pf14)
    converseLib.validationFailed(15); /* invalid pfkey*/
    exit stack;
  end

  if (converseVar.eventKey is pa1)
    exit program;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "AV0M";
    XSEXIT();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is enter)
    if (AV0IM001.CATOAP > " ")
      if (AV0IM001.CATOAP == "AV0K") /* xfer to subs criteria search*/
        set AVWREC empty; /* clear commarea*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM001.CATOAP;
      COMMAREA.CAITEM = AV0IM001.CAITEM;
      XSEXIT();
      AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf12
   || converseVar.eventKey is enter)
    AV0IS01(); /* VALIDATE STATEMENT GROUP*/
  end

  if (AV0IW01.AV0IWFF == "Y")
    exit stack;
  end

  COMMAREA.XGPCD = AV0IM001.XGPCD;

  if (converseVar.eventKey is pf12
   || converseVar.eventKey is enter)
    AV0IS05();
  end

  if (AV0IW01.AV0IWFF != "Y")
    if (converseVar.eventKey is enter)
      AV0IS45();
    end
  end
end // end AV0I005

// SET UP VARIABLES
Function AV0I010()
   /* BUILD SCREENS FOR ALL GPC'S EXCEPT '02'*/

  AV0IW01.AV0IWX3 = 0;

  converseLib.validationFailed(17);
  AV0ISAA();

end // end AV0I010

// CONVERSE MAP 1 OF APPAREL
Function AV0I015()
  AV0IM002.XXXCURDT = VGVar.currentShortGregorianDate;
  if (AV0IM001.XGPCD in XGPTBL.XGPCD)
    AV0IM002.AV0IMHD1 = XGPTBL.XGPDESC[sysVar.arrayIndex];
    AV0IM004.AV0IMHD1 = XGPTBL.XGPDESC[sysVar.arrayIndex];
    AV0IM007.AV0IMHD1 = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

  converse AV0IM002 ;
  if (converseVar.eventKey is pf11)
    exit stack;
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0IM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0IM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf5)
    if (AV0IW01.AV0IWX3 <= 4)
      converseLib.validationFailed(17);
      exit stack;
    else
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 / 4;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1; /* RELATIVE PAGE NO*/
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1; /* PAGE NUMBER TO GO TO*/
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 * 4; /* LAST LINE FOR PREVIOUS PAGE*/
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 4;
                                   /* STARTING LINE NUMBER FOR av0iSAA*/
      if (AV0IW01.AV0IWX3 <= 0)
        AV0IW01.AV0IWX3 = 0;
        converseLib.validationFailed(017);
        AV0ISAA();
        exit stack;
      else

        AV0ISAA();
        exit stack;
      end
    end
  end

   /* if request xfer to substitutions criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0I016(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0IM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack; /* exit to display error message*/
  end

  if (converseVar.eventKey is enter)
    if (AV0IM002.CATOAP > " ")
      if (AV0IM002.CATOAP == "AV0J") /* subs table maintenance*/
        AV0I016(); /* move key fields for xfer*/
      end
      if (AV0IM002.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM002.CATOAP;
      COMMAREA.CAITEM = AV0IM002.CAITEM;
      XSEXIT();
       /* if xfer fails:*/
      AV0IM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      set AV0IM002.CATOAP cursor, modified, bold;
      exit stack; /* exit to display error message*/
    else
      if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
        converseLib.validationFailed(016);
        exit stack;
      else
        AV0ISAA();
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf3)
    exit stack;
  end

  converseLib.validationFailed(015);

end // end AV0I015

// move fields for xfer to subs
Function AV0I016()
   /* ------------------------- av0i016 --------------------------*/

      /* move key fields to avwrec and xfer to substitutions*/
                            /* av0im002*/

   /* ------------------------------------------------------------*/

   /* the first style/color on the map is moved*/

  set AVWREC empty; /* clear format rec*/

   /* there is no gpc on av0im002 so gpc from av0im001 is used*/
  AVWREC.XGPCD = AV0IM001.XGPCD; /* gpc code to format*/
  AVWREC.SY1STNBR = AV0IM002.AV0IMST1; /* style nbr*/

  if (AV0IM001.XGPCD == "02") /* if footwear product*/
    AVWREC.SY2CLRID[1] = "00"; /* color id is 0*/
  else /* if other gpc product, color id should*/
                                   /* be present*/
    AVWREC.SY2CLRID[1] = AV0IM002.AV0IMCL1; /* color id*/
  end

  AVWREC.XDMCD = AV0IM002.AV0IMDM1; /* dimension code*/
  AVWREC.AVWNWPRD = "Y"; /* set new product flag to yes*/

  AVWREC.XWHCD[1] = AV0IM001.XWHCD;

   /* move key fields to commarea for xfer*/
  COMMAREA.CAUSERA = AVWREC.CAUSERA;

   /* ------------------------- av0i016 --------------------------*/
end // end AV0I016

// CONVERSE MAP 2 OF APPAREL
Function AV0I017()
  AV0IM007.XXXCURDT = VGVar.currentShortGregorianDate;
  converse AV0IM007 ;

  if (converseVar.eventKey is pf10)
    exit stack;
  end


  if (converseVar.eventKey is pf11)
    exit stack;
  end

  AV0IW01.AV0IWFF = "N";

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0IM007.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  end

   /* if request xfer to substitution criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0I016(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0IM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack; /* exit to display error message*/
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    exit program;
  end

  if (converseVar.eventKey is pa1)
    exit program;
  end

  if (converseVar.eventKey is pf5)
    if (AV0IW01.AV0IWX3 > 4)
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 / 4;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 * 4;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 4;
      if (AV0IW01.AV0IWX3 <= 0)
        AV0IW01.AV0IWX3 = 00;
        converseLib.validationFailed(010);
        AV0ISAA();
        exit stack;
      else
        AV0ISAA();
        exit stack;
      end
    else
      AV0IW01.AV0IWFF = "Y";
      converseLib.validationFailed(17);
      exit stack;
    end
  end

  if (converseVar.eventKey is enter)
    if (AV0IM007.CATOAP > " ")
       /* if request xfer to substitutions applications:*/
      if (AV0IM007.CATOAP == "AV0J") /* subs table maintenance*/
        AV0I016(); /* move key fields for xfer*/
      end
      if (AV0IM007.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM007.CATOAP;
      COMMAREA.CAITEM = AV0IM007.CAITEM;
      XSEXIT();
       /* if xfer fails:*/
      AV0IM007.VAGen_EZEMSG = COMMAREA.CAMSG;
      set AV0IM007.CATOAP cursor, modified, bold;
      exit stack; /* exit to display error message*/
    else
      if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
        AV0IW01.AV0IWFF = "Y";
        converseLib.validationFailed(016);
        exit stack;
      else
        AV0ISAA();
        exit stack;
      end
    end
  end

  converseLib.validationFailed(015);

end // end AV0I017

// SET UP VARIABLES
Function AV0I020()

  AV0IW01.AV0IWX3 = 0;
  AV0ISJA();

end // end AV0I020

// CONVERSE MAP 3 OF APPAREL
Function AV0I025()
  AV0IM004.XXXCURDT = VGVar.currentShortGregorianDate;
  converse AV0IM004 ;

  if (converseVar.eventKey is pf10)
    exit stack;
  end

  AV0IW01.AV0IWFF = "N";

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0IM004.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  end

   /* if request xfer to substitutions criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0I016(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0IM004.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack; /* exit to display error message*/
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    exit program;
  end

  if (converseVar.eventKey is pa1)
    exit program;
  end

  if (converseVar.eventKey is pf5)
    if (AV0IW01.AV0IWX3 > 4)
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 / 4;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 * 4;
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 4;
      if (AV0IW01.AV0IWX3 <= 0)
        AV0IW01.AV0IWX3 = 00;
        converseLib.validationFailed(010);
        AV0ISAA();
        exit stack;
      else
        AV0ISAA();
        exit stack;
      end
    else
      AV0IW01.AV0IWFF = "Y";
      converseLib.validationFailed(17);
      exit stack;
    end
  end

  if (converseVar.eventKey is enter)
    if (AV0IM004.CATOAP > " ")
      if (AV0IM004.CATOAP == "AV0J") /* subs table maintenance*/
        AV0I016(); /* move key fields for xfer*/
      end
      if (AV0IM004.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM004.CATOAP;
      COMMAREA.CAITEM = AV0IM004.CAITEM;
      XSEXIT();
       /* if xfer fails:*/
      AV0IM004.VAGen_EZEMSG = COMMAREA.CAMSG;
      set AV0IM004.CATOAP cursor, modified, bold;
      exit stack; /* exit to display error message*/
    else
      if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
        AV0IW01.AV0IWFF = "Y";
        converseLib.validationFailed(016);
        exit stack;
      else
        AV0ISAA();
        exit stack;
      end
    end
  end

  converseLib.validationFailed(015);

end // end AV0I025

// CONVERSE MAP 1 OF FOOTWEAR
Function AV0I030()
  AV0IM003.XXXCURDT = VGVar.currentShortGregorianDate;

   /* AV0IS31;                         /* load line totals*/

  converse AV0IM003 ;
  AV0IW01.AV0IWFF = "N";

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3)
    exit stack;
  end

  if (converseVar.eventKey is pf5)
    if (AV0IM001.XWHCD <= " ")
      if (AV0IW01.AV0IWX3 >= 4)
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 / 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 * 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 4;
        if (AV0IW01.AV0IWX3 <= 0)
          AV0IW01.AV0IWX3 = 0;
          converseLib.validationFailed(17);
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        else
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        end
      end
    else
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 3;
      if (AV0IW01.AV0IWX3 <= 0)
        AV0IW01.AV0IWX3 = 0;
        converseLib.validationFailed(17);
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is enter)
    if (AV0IM003.CATOAP > " ")
      if (AV0IM003.CATOAP == "AV0J") /* subs table maintenance*/
        AV0I031(); /* move key fields for xfer*/
      end
      if (AV0IM003.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM003.CATOAP;
      COMMAREA.CAITEM = AV0IM003.CAITEM;
      XSEXIT();
       /* if xfer fails:*/
      AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      AV0IM003.CATOAP = " ";
      AV0I030(); /* converse av0im003*/
    else
      if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
        converseLib.validationFailed(16);
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is pf8) /* scroll to view additional size data*/
    AV0I035(); /* converse av0im005*/
  end

  if (converseVar.eventKey is pf11) /* scroll to view additional warehouse*/
                                   /* data*/
    AV0I041(); /* converse av0im008*/
  end

   /* if request xfer to substitutions criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0I031(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    AV0I030(); /* converse av0im003*/
  end

  converseLib.validationFailed(15);
  AV0I030(); /* converse av0im003*/

end // end AV0I030

// move fields for xfer to subs
Function AV0I031()
   /* ------------------------- av0i031 --------------------------*/

      /* move key fields to avwrec and xfer to substitutions*/
                            /* av0im003*/

   /* ------------------------------------------------------------*/

   /* the first style/color on the map is moved*/

  set AVWREC empty; /* clear format rec*/

   /* there is no gpc on av0im003 so gpc from av0im001 is used*/
  AVWREC.XGPCD = AV0IM001.XGPCD; /* gpc code to format*/
  AVWREC.SY1STNBR = AV0IM003.AV0IMSTY; /* style nbr*/
  AVWREC.SY2CLRID[1] = AV0IM003.AV0IMCLR; /* color id*/
  AVWREC.XDMCD = SY2REC.XDMCD; /* dimension code*/

   /* warehouse designated on map1 is used;  If blank, will*/
   /* be wildcarded in av0l*/
  AVWREC.XWHCD[1] = AV0IM001.XWHCD;

  AVWREC.AVWNWPRD = "Y"; /* set new product flag to yes*/

   /* move key fields to commarea for xfer*/
  COMMAREA.CAUSERA = AVWREC.CAUSERA;

   /* ------------------------- av0i031 --------------------------*/
end // end AV0I031

// CONVERSE MAP 2 OF FOOTWEAR
Function AV0I035()
  AV0IM005.XXXCURDT = VGVar.currentShortGregorianDate;

   /* AV0IS34;                          /* load line totals*/

  converse AV0IM005 ;
  AV0IW01.AV0IWFF = "N";

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3)
    exit stack;
  end

  if (converseVar.eventKey is pf5)
    if (AV0IM001.XWHCD <= " ")
      if (AV0IW01.AV0IWX3 >= 4)
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 / 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 * 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 4;
        if (AV0IW01.AV0IWX3 <= 0)
          AV0IW01.AV0IWX3 = 0;
          converseLib.validationFailed(17);
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        else
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        end
      end
    else
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 3;
      if (AV0IW01.AV0IWX3 <= 0)
        AV0IW01.AV0IWX3 = 0;
        converseLib.validationFailed(17);
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is enter)
    if (AV0IM005.CATOAP > " ")
       /* if request xfer to substitutions applications:*/
      if (AV0IM005.CATOAP == "AV0J") /* subs table maintenance*/
        AV0I031(); /* move key fields for xfer*/
      end
      if (AV0IM005.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM005.CATOAP;
      COMMAREA.CAITEM = AV0IM005.CAITEM;
      XSEXIT();
       /* if xfer fails:*/
      AV0IM005.VAGen_EZEMSG = COMMAREA.CAMSG;
      AV0IM005.CATOAP = " ";
      AV0I035(); /* converse av0im005*/
    else
      if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
        converseLib.validationFailed(16);
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is pf7) /* scroll to view previous size data*/
    AV0I030(); /* converse av0im003*/
  end


  if (converseVar.eventKey is pf8) /* scroll to view additional size data*/
    AV0I040(); /* converse av0im006*/
  end


  if (converseVar.eventKey is pf11) /* scroll to view additional warehouse*/
                                   /* data*/
    AV0I042(); /* converse av0im009*/
  end

   /* if request xfer to substitutions criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0I031(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0IM005.VAGen_EZEMSG = COMMAREA.CAMSG;
    AV0I035(); /* converse av0im005*/
  end

  converseLib.validationFailed(15);
  AV0I035(); /* converse av0im005*/

end // end AV0I035

// CONVERSE MAP 3 OF FOOTWEAR
Function AV0I040()
  AV0IM006.XXXCURDT = VGVar.currentShortGregorianDate;

   /* AV0IS39;                          /* load line totals*/

  converse AV0IM006 ;
  AV0IW01.AV0IWFF = "N";

  if (converseVar.eventKey is pf1)
    XSPF1();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3)
    exit stack;
  end

  if (converseVar.eventKey is pf5)
    if (AV0IM001.XWHCD <= " ")
      if (AV0IW01.AV0IWX3 >= 4)
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 / 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 * 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 4;
        if (AV0IW01.AV0IWX3 <= 0)
          AV0IW01.AV0IWX3 = 0;
          converseLib.validationFailed(17);
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        else
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        end
      end
    else
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 3;
      if (AV0IW01.AV0IWX3 <= 0)
        AV0IW01.AV0IWX3 = 0;
        converseLib.validationFailed(17);
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is enter)
    if (AV0IM006.CATOAP > " ")
       /* if request xfer to substitutions applications:*/
      if (AV0IM006.CATOAP == "AV0J") /* subs table maintenance*/
        AV0I031(); /* move key fields for xfer*/
      end
      if (AV0IM006.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM006.CATOAP;
      COMMAREA.CAITEM = AV0IM006.CAITEM;
      XSEXIT();
       /* if xfer fails:*/
      AV0IM006.VAGen_EZEMSG = COMMAREA.CAMSG;
      AV0IM006.CATOAP = " ";
      AV0I040(); /* converse av0im006*/
      exit stack;
    else
      if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
        converseLib.validationFailed(16);
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is pf7) /* scroll to view previously viewed size*/
                                   /* data*/
    AV0I035(); /* converse av0im005*/
  end

  if (converseVar.eventKey is pf11) /* scroll to view additional warehouse*/
                                   /* data*/
    AV0I043(); /* converse av0im010*/
  end

  if (converseVar.eventKey is pf14)
    AV0I031(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0IM006.VAGen_EZEMSG = COMMAREA.CAMSG;
    AV0I040(); /* converse av0im006*/
    exit stack;
  end

  converseLib.validationFailed(15);
  AV0I040(); /* converse av0im006*/

end // end AV0I040

// CONVERSE MAP 4 OF FOOTWEAR
Function AV0I041()
  AV0IM008.XXXCURDT = VGVar.currentShortGregorianDate;

   /* aV0IS31;                         /* load line totals*/

  converse AV0IM008 ;
  AV0IW01.AV0IWFF = "N";

  if (converseVar.eventKey is pf1) /* request help screen*/
    XSPF1();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4) /* request main menu*/
    XSPF4();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3) /* exit to data entry map*/
    exit stack;
  end

  if (converseVar.eventKey is pf5) /* request previously viewed product*/
    if (AV0IM001.XWHCD <= " ")
      if (AV0IW01.AV0IWX3 >= 4)
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 / 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 * 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 4;
        if (AV0IW01.AV0IWX3 <= 0)
          AV0IW01.AV0IWX3 = 0;
          converseLib.validationFailed(17);
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        else
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        end
      end
    else
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 3;
      if (AV0IW01.AV0IWX3 <= 0)
        AV0IW01.AV0IWX3 = 0;
        converseLib.validationFailed(17);
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is enter)
    if (AV0IM008.CATOAP > " ")
      if (AV0IM008.CATOAP == "AV0J") /* subs table maintenance*/
        AV0I031(); /* move key fields for xfer*/
      end
      if (AV0IM008.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM008.CATOAP;
      COMMAREA.CAITEM = AV0IM008.CAITEM;
      XSEXIT();
       /* if xfer fails:*/
      AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      AV0IM008.CATOAP = " ";
      AV0I041(); /* converse av0im008*/
    else
      if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
        converseLib.validationFailed(16);
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is pf8) /* scroll to view additional size data*/
    AV0I042(); /* converse av0im009*/
  end

  if (converseVar.eventKey is pf10) /* scroll to previously viewed warehouse*/
                                   /* data*/
    AV0I030(); /* converse av0im003*/
  end

   /* if request xfer to substitutions criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0I031(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    AV0I041(); /* converse av0im008*/
  end

  converseLib.validationFailed(15);
  AV0I041(); /* converse av0im008*/

end // end AV0I041

// CONVERSE MAP 5 OF FOOTWEAR
Function AV0I042()
  AV0IM009.XXXCURDT = VGVar.currentShortGregorianDate;

   /* AV0IS34;                          /* load line totals*/

  converse AV0IM009 ;
  AV0IW01.AV0IWFF = "N";

  if (converseVar.eventKey is pf1) /* request help screen*/
    XSPF1();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4) /* request main menu*/
    XSPF4();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3) /* exit to data entry map*/
    exit stack;
  end

  if (converseVar.eventKey is pf5) /* request previous product*/
    if (AV0IM001.XWHCD <= " ")
      if (AV0IW01.AV0IWX3 >= 4)
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 / 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 * 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 4;
        if (AV0IW01.AV0IWX3 <= 0)
          AV0IW01.AV0IWX3 = 0;
          converseLib.validationFailed(17);
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        else
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        end
      end
    else
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 3;
      if (AV0IW01.AV0IWX3 <= 0)
        AV0IW01.AV0IWX3 = 0;
        converseLib.validationFailed(17);
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is enter)
    if (AV0IM009.CATOAP > " ")
       /* if request xfer to substitutions applications:*/
      if (AV0IM009.CATOAP == "AV0J") /* subs table maintenance*/
        AV0I031(); /* move key fields for xfer*/
      end
      if (AV0IM009.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM009.CATOAP;
      COMMAREA.CAITEM = AV0IM009.CAITEM;
      XSEXIT();
       /* if xfer fails:*/
      AV0IM009.VAGen_EZEMSG = COMMAREA.CAMSG;
      AV0IM009.CATOAP = " ";
      AV0I042(); /* converse av0im009*/
    else
      if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
        converseLib.validationFailed(16);
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is pf7) /* scroll to view previously viewed size*/
                                   /* data*/
    AV0I041(); /* converse av0im008*/
  end

  if (converseVar.eventKey is pf8) /* scroll to view additional size data*/
    AV0I043(); /* converse av0im010*/
  end

  if (converseVar.eventKey is pf10) /* scroll to view previously viewed*/
                                   /* warehouse data*/
    AV0I035(); /* converse av0im005*/
  end

   /* if request xfer to substitutions criteria select:*/
  if (converseVar.eventKey is pf14)
    AV0I031(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0IM009.VAGen_EZEMSG = COMMAREA.CAMSG;
    AV0I042(); /* converse av0im009*/
  end

  converseLib.validationFailed(15);
  AV0I042(); /* converse av0im009*/

end // end AV0I042

// CONVERSE MAP 6 OF FOOTWEAR
Function AV0I043()
  AV0IM010.XXXCURDT = VGVar.currentShortGregorianDate;

   /* AV0IS39;                          /* load line totals*/

  converse AV0IM010 ;
  AV0IW01.AV0IWFF = "N";

  if (converseVar.eventKey is pf1) /* request help map*/
    XSPF1();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf4) /* request main menu*/
    XSPF4();
    AV0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    exit stack;
  end

  if (converseVar.eventKey is pf3) /* exit to data entry map*/
    exit stack;
  end

  if (converseVar.eventKey is pf5) /* request previous viewed product*/
    if (AV0IM001.XWHCD <= " ")
      if (AV0IW01.AV0IWX3 >= 4)
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 / 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 1;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 * 4;
        AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 4;
        if (AV0IW01.AV0IWX3 <= 0)
          AV0IW01.AV0IWX3 = 0;
          converseLib.validationFailed(17);
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        else
          AV0ISJA();
          AV0I030(); /* converse av0im003*/
        end
      end
    else
      AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 - 3;
      if (AV0IW01.AV0IWX3 <= 0)
        AV0IW01.AV0IWX3 = 0;
        converseLib.validationFailed(17);
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is enter)
    if (AV0IM010.CATOAP > " ")
       /* if request xfer to substitutions applications:*/
      if (AV0IM010.CATOAP == "AV0J") /* subs table maintenance*/
        AV0I031(); /* move key fields for xfer*/
      end
      if (AV0IM010.CATOAP == "AV0K") /* subs criteria search*/
        set AVWREC empty; /* don't move key*/
        COMMAREA.CAUSERA = " ";
      end
      COMMAREA.CATOAP = AV0IM010.CATOAP;
      COMMAREA.CAITEM = AV0IM010.CAITEM;
      XSEXIT();
       /* if xfer fails:*/
      AV0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      AV0IM010.CATOAP = " ";
      AV0I043(); /* converse av0im010*/
    else
      if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
        converseLib.validationFailed(16);
        AV0I030(); /* converse av0im003*/
      else
        AV0ISJA();
        AV0I030(); /* converse av0im003*/
      end
    end
  end

  if (converseVar.eventKey is pf7) /* scroll to view previously viewed size*/
                                   /* data*/
    AV0I042(); /* converse av0im009*/
  end

  if (converseVar.eventKey is pf10) /* scroll to view previously viewed*/
                                   /* warehouse data*/
    AV0I040(); /* converse av0im006*/
  end

  if (converseVar.eventKey is pf14)
    AV0I031(); /* move key fields for xfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT();
     /* if xfer fails:*/
    AV0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    AV0I043(); /* converse av0im010*/
  end

  converseLib.validationFailed(15);
  AV0I043(); /* converse av0im010*/

end // end AV0I043

// get wildcard style data
Function AV0I080()
                        /* av0i080*/
            /* get style data for wildcarded whse*/


  AV0I081(); /* load av5rec from map for select set*/
  AV0IW01.AV0IWHIT = "N"; /* move no to style found flag*/
  AV0I082(); /* select set from davail.vavhdr01 for whse 2,4,7*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if select set successful*/
    AV0IW01.AV0IWEOC = "N"; /* set end of cursor flag to no*/

    while (AV0IW01.AV0IWEOC == "N" /* until end of cursor*/
     && AV0IW01.AV0IWX2 <= 49) /* or display-data-rec not full*/
      AV0I083(); /* load av0iw07 rec with style data for*/
                                   /* whse 2,4,7*/
    end
  end

  AV0I089(); /* close davail.vavhdr01 cursor*/

end // end AV0I080

// load av5rec from map data
Function AV0I081()
                        /* av0a081*/
    /* load av5rec from map style data for wildcard select set*/
    /* from davail.vavhdr01*/


  set AV5REC empty;

  AV5REC.XGPCD = AV0IM001.XGPCD; /* general product class*/

  if (AV0IM001.AV0IOPT == "1"
   || AV0IM001.AV0IOPT == "4")
    AV5REC.XQACD = "**";
  else
    if (AV0IM001.AV0IOPT == "2"
     || AV0IM001.AV0IOPT == "5")
      AV5REC.XQACD = "02";
    else
      if (AV0IM001.AV0IOPT == "3")
        AV5REC.XQACD = "01";
      end
    end
  end

  if (AV0IM001.AV0IOPT == "1"
   || AV0IM001.AV0IOPT == "2")
    AV5REC.XLCCD = "**";
  else
    if (AV0IM001.AV0IOPT == "3"
     || AV0IM001.AV0IOPT == "4")
      AV5REC.XLCCD = "20";
    else
      if (AV0IM001.AV0IOPT == "5")
        AV5REC.XLCCD = "10";
      end
    end
  end

  if (AV0IM001.XOWCD > " ") /* owner group*/
    AV5REC.XOWCD = AV0IM001.XOWCD;
    AV0IW01.XOWCD = AV0IM001.XOWCD;
  else
    AV5REC.XOWCD = "**";
    AV0IW01.XOWCD = "**";
  end

  AV5REC.XUMCD = AV0IM001.XUMCD[AV0IWX1];

  AV5REC.AV4PRDBD = 0;

  AV5REC.SY1STNBR = AV0IM001.SY1STNBR[AV0IWX1];

  if (AV0IM001.SY2CLRID[AV0IWX1] > "   ")
    AV5REC.SY2CLRID = AV0IM001.SY2CLRID[AV0IWX1];
  else
    AV5REC.SY2CLRID = "***";
  end

  if (AV0IM001.XDMCD[AV0IWX1] <= " ")
    AV5REC.XDMCD = "**";
  else
    AV5REC.XDMCD = AV0IM001.XDMCD[AV0IWX1];
  end

  if (AV0IM001.PC2INSEG[AV0IWX1] <= " ")
    AV5REC.XSDCD = "000";
  else
    AV5REC.XSDCD = AV0IM001.PC2INSEG[AV0IWX1];
  end

  if (AV0IM001.XSACD[AV0IWX1] > " ")
    AV5REC.XSACD = AV0IM001.XSACD[AV0IWX1];
  else
    AV5REC.XSACD = "000";
  end

  if (AV0IM001.XPGCD[AV0IWX1] <= " ")
    AV5REC.XPGCD = "00";
  else
    AV5REC.XPGCD = AV0IM001.XPGCD[AV0IWX1];
  end

end // end AV0I081

// declare cursor davail.vavhdr01
Function AV0I082()
   /* -------------------------av0i082----------------------------*/
                 /* select set davail.vavhdr01 data*/
   /* -------------------------av0i082----------------------------*/


  try
    call "IO2310" ("S5", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "082"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0i082----------------------------*/
end // end AV0I082

// select & move data to av0aw05
Function AV0I083()
                        /* av0i083*/
    /* select next of select set and perform move to display-rec*/

  AV0I084(); /* select next davail.vavhdr01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
    AV0I085();
                                   /* select from vavqty02 and move to save*/
  else
    AV0IW01.AV0IWEOC = "Y"; /* move yes to end of cursor flag*/
  end
end // end AV0I083

// fetch row davail.vavhdr01
Function AV0I084()
   /* -------------------------av0i084----------------------------*/
              /* fetch next row of davail.vavhdr01 data*/
   /* -------------------------av0i084----------------------------*/


  try
    call "IO2310" ("N5", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "084"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0i084----------------------------*/
end // end AV0I084

// move data for each warehouse
Function AV0I085()
                        /* av0i085*/
        /* select data for each warehouse and move to save*/

  if (AV0IW01.AV0IWX2 < 50) /* if save record not full*/
    AV0IW01.XWHCD = "07"; /* set select warehouse*/
    AV0I086(); /* load key, select and move to save*/
  end

  if (AV0IW01.AV0IWX2 < 50) /* if save record not full*/
    AV0IW01.XWHCD = "04"; /* set select warehouse*/
    AV0I086(); /* load key, select and move to save*/
  end

  if (AV0IW01.AV0IWX2 < 50) /* if save record not full*/
    AV0IW01.XWHCD = "02"; /* set select warehouse*/
    AV0I086(); /* load key, select and move to save*/
  end

  if (AV0IW01.AV0IWX2 < 50) /* if save record not full*/
    AV0IW01.XWHCD = "15"; /* set select warehouse*/
    AV0I086(); /* load key, select and move to save*/
  end

  if (AV0IW01.AV0IWX2 < 50) /* if save record not full*/
    AV0IW01.XWHCD = "51"; /* set select warehouse*/
    AV0I086(); /* load key, select and move to save*/
  end

end // end AV0I085

// move data for each warehouse
Function AV0I086()
                        /* av0i086*/
        /* select and move detail data for each warehouse*/


  AV0I087(); /* load davail.vavqty02 key from vavhdr01 key*/
  AV0I088(); /* select row from davail.vavqty02*/

  if (AV0IM001.AV0IOPT == 1)
    if (AV7REC.XLCCD == "20")
      AV0IW01.AV0IWHIT = "Y";
    end
    if (AV7REC.XQACD == "02"
     && AV7REC.XLCCD == "10")
      AV0IW01.AV0IWHIT = "Y";
    end
    AV0IS61();
  else
    if (AV0IM001.AV0IOPT == 2)
      if (AV7REC.XQACD == "02")
        AV0IW01.AV0IWHIT = "Y";
        AV0IS61();
      end
    else
      if (AV0IM001.AV0IOPT == 3)
        if (AV7REC.XLCCD == "20"
         && AV7REC.XQACD == "01")
          AV0IW01.AV0IWHIT = "Y";
          AV0IS61();
        end
      else
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWHIT = "Y";
            AV0IS61();
          end
        else
          if (AV0IM001.AV0IOPT == 5)
            if (AV7REC.XLCCD == "10"
             && AV7REC.XQACD == "02")
              AV0IW01.AV0IWHIT = "Y";
              AV0IS61();
            end
          end
        end
      end
    end
  end

end // end AV0I086

// set up key for vavqty02 call
Function AV0I087()
                        /* av0i087*/
    /* set up key for call to davail.vavqty02 with key from*/
    /* select next call from davail.vavhdr01.*/


  set AV7REC empty;

  AV7REC.XWHCD = AV0IW01.XWHCD;
  AV7REC.XGPCD = AV5REC.XGPCD;
  AV7REC.SY1STNBR = AV5REC.SY1STNBR;
  AV7REC.SY2CLRID = AV5REC.SY2CLRID;
  AV7REC.XDMCD = AV5REC.XDMCD;
  AV7REC.XQACD = AV5REC.XQACD;
  AV7REC.XOWCD = AV5REC.XOWCD;
  AV7REC.XSDCD = AV5REC.XSDCD;
  AV7REC.XSACD = AV5REC.XSACD;
  AV7REC.XPGCD = AV5REC.XPGCD;
  AV7REC.XUMCD = AV5REC.XUMCD;
  AV7REC.XLCCD = AV5REC.XLCCD;

end // end AV0I087

// select row davail.vavqty02
Function AV0I088()
   /* -------------------------av0i088----------------------------*/
              /* fetch a row of davail.vavqty02 data*/
   /* -------------------------av0i088----------------------------*/


  try
    call "IO2370" ("S ", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "088"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY02"; /* Table view name*/
  TA1REC.TA1TBLKE = AV7REC.AV7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0i084----------------------------*/
end // end AV0I088

// close cursor davail.vavhdr01
Function AV0I089()
   /* -------------------------av0i089----------------------------*/
              /* close cursor for davail.vavhdr01 data*/
   /* -------------------------av0i089----------------------------*/


  try
    call "IO2310" ("C5", SQLCA, AV5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "089"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV5REC.AV5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0is18----------------------------*/
end // end AV0I089

// declare cursor davail.vavqty02
Function AV0I091()
   /* -------------------------av0i091----------------------------*/
                 /* select set davail.vavqty02 data*/
   /* -------------------------av0i091----------------------------*/


  if (AV0IW01.XGPCD == "03" /* IF GPC CODE = 03*/
   && AV0IM001.XWHCD == "  ") /* AND WAREHOUSE CODE = spaces*/
    try
      call "IO2370" ("S2", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select table set*/
  else
    try
      call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select table set*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "091"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY02"; /* Table view name*/
  TA1REC.TA1TBLKE = AV7REC.AV7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0i091----------------------------*/
end // end AV0I091

// fetch row davail.vavhdr01
Function AV0I092()
   /* -------------------------av0i092----------------------------*/
              /* fetch next row of davail.vavqty02 data*/
   /* -------------------------av0i092----------------------------*/

  if (AV0IW01.XGPCD == "03" /* IF GPC CODE = 03*/
   && AV0IM001.XWHCD == "  ") /* AND WAREHOUSE = spaces*/
    try
      call "IO2370" ("N2", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select table set*/
  else
    try
      call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select table set*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "092"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY02"; /* Table view name*/
  TA1REC.TA1TBLKE = AV7REC.AV7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0i092----------------------------*/
end // end AV0I092

// close cursor davail.vavhdr01
Function AV0I093()
   /* -------------------------av0i093----------------------------*/
              /* close cursor for davail.vavqty02 data*/
   /* -------------------------av0i093----------------------------*/

  if (AV0IW01.XGPCD == "03" /* IF GPC CODE = 03*/
   && AV0IM001.XWHCD == "  ") /* AND WAREHOUSE = spaces*/
    try
      call "IO2370" ("C2", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select table set*/
  else
    try
      call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select table set*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "093"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY02"; /* Table view name*/
  TA1REC.TA1TBLKE = AV7REC.AV7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;
   /* -------------------------av0i093----------------------------*/
end // end AV0I093

// PREEDIT ENTERED DATA
Function AV0IS01()
   /* STATEMENT GROUP FOR FIELD EDITING OF MAP AV0AM001*/

  AV0IW01.AV0IWZA = AV0IM001.XWHCD;
  AV0IW01.AV0IWZD = AV0IM001.XOWCD;

  AV0IW01.AV0IWFF = "N";

  if (AV0IM001.XGPCD <= " ")
    set AV0IM001.XGPCD cursor, bold;
    AV0IW01.AV0IWFF = "Y";
    converseLib.validationFailed(20);
    exit stack;
  end

  if (AV0IM001.AV0IOPT > 5
   || AV0IM001.AV0IOPT < 1)
    set AV0IM001.AV0IOPT cursor, bold;
    AV0IW01.AV0IWFF = "Y";
    converseLib.validationFailed(2);
    exit stack;
  end

  if (AV0IM001.XGPCD in XGPTBL.XGPCD) /* SEARCH FOR GPC IN TABLE*/
    AV0IM001.XGPDESC = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* SEARCH WAS SUCCESSFUL*/
    AV0IM002.AV0IMHD1 = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* SEARCH WAS SUCCESSFUL*/
    AV0IM004.AV0IMHD1 = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* SEARCH WAS SUCCESSFUL*/
    set AV0IM001.XGPCD normal;
  else
    set AV0IM001.XGPCD cursor, modified, bold;
    AV0IW01.AV0IWFF = "Y";
    converseLib.validationFailed(002);
    AV0IM001.XGPDESC = " ";
    exit stack;
  end

  if (AV0IM001.SY1STNBR[1] > " "
   || AV0IM001.SY1STNBR[2] > " "
   || AV0IM001.SY1STNBR[3] > " "
   || AV0IM001.SY1STNBR[4] > " "
   || AV0IM001.SY1STNBR[5] > " "
   || AV0IM001.SY1STNBR[6] > " "
   || AV0IM001.SY1STNBR[7] > " "
   || AV0IM001.SY1STNBR[8] > " "
   || AV0IM001.SY1STNBR[9] > " "
   || AV0IM001.SY1STNBR[10] > " ")
     /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(19);
    AV0IW01.AV0IWFF = "Y";
    set AV0IM001.SY1STNBR[1] cursor, modified, bold;
    exit stack;
  end

  AV0IM001.XWHABRV = " ";
  AV0IM001.XOWDESC = " ";

  AV0IW01.AV0IWX1 = 10;
  while (AV0IW01.AV0IWX1 >= 1)
    AV0IM001.SY1SSTNM[AV0IWX1] = " ";
    AV0IM001.SY2CLRAB[AV0IWX1] = " ";
    AV0IM001.XDMABRV[AV0IWX1] = " ";
    AV0IM001.XUMDESC[AV0IWX1] = " ";
    if (AV0IM001.SY1STNBR[AV0IWX1] > " ")
      if (AV0IM001.XPGCD[AV0IWX1] > " ")
        set AV0IM001.XPGCD[AV0IWX1] normal;
        AV0IW01.AV0IWX2 = AV0IW01.AV0IWX1;
        AV0IS29(); /* validate package*/
      end
    end


    if (AV0IM001.XSACD[AV0IWX1] > " ")
      set AV0IM001.XSACD[AV0IWX1] normal;
      AV0IW01.AV0IWX2 = AV0IW01.AV0IWX1;
      AV0IS28(); /* validate shade*/
    end

    if (AV0IM001.PC2INSEG[AV0IWX1] > " ")
      set AV0IM001.PC2INSEG[AV0IWX1] normal;
      AV0IW01.AV0IWX2 = AV0IW01.AV0IWX1;
      AV0IS27(); /* validate inventory segment code*/
    end

    if (AV0IM001.XUMCD[AV0IWX1] > " ")
      set AV0IM001.XUMCD[AV0IWX1] normal;
      AV0IW01.AV0IWX2 = AV0IW01.AV0IWX1;
      AV0IS30(); /* validate unit of measure*/
    end

    if (AV0IM001.XDMCD[AV0IWX1] > " ")
      if (AV0IM001.SY1STNBR[AV0IWX1] > " ")
        set AV0IM001.XDMCD[AV0IWX1] normal;
        AV0IW01.AV0IWX2 = AV0IW01.AV0IWX1;
        AV0IS35(); /* validate dimension*/
      end
    end

    if (AV0IM001.SY1STNBR[AV0IWX1] > " ")
      if (AV0IM001.SY2CLRID[AV0IWX1] > " ")
        set AV0IM001.SY2CLRID[AV0IWX1] normal;
      end
    end
    AV0IW01.AV0IWX1 = AV0IW01.AV0IWX1 - 1;
  end

  if (AV0IM001.XOWCD > " ")
    if (AV0IM001.XWHCD == "03"
     || AV0IM001.XWHCD == "09"
     || AV0IM001.XWHCD == "12"
     /* change begins*/
     /* OR AV0IM001.XWHCD EQ '25'*/
     /* change end*/
     || AV0IM001.XWHCD == "51")
      AV0IW01.AV0IWBB = AV0IM001.XWHCD;
      AV0IW01.AV0IWBC = AV0IM001.XOWCD;
      if (AV0IW01.AV0IWBA in XOWTBL.XOWKEY)
        AV0IM001.XOWDESC = XOWTBL.XOWABRV[sysVar.arrayIndex];
        set AV0IM001.XOWCD normal;
      else
        AV0IW01.AV0IWFF = "Y";
        set AV0IM001.XOWCD cursor, modified, bold;
        AV0IM001.XOWDESC = " ";
        converseLib.validationFailed(2);
      end
    else
      AV0IW01.AV0IWFF = "Y";
      set AV0IM001.XOWCD cursor, modified, bold;
      AV0IM001.XOWDESC = " ";
      converseLib.validationFailed(5);
    end
  else
    set AV0IM001.XOWCD normal;
    AV0IM001.XOWDESC = " ";
  end

  if (AV0IM001.XWHCD <= " ")
    set AV0IM001.XWHCD normal;
  end

  if (AV0IM001.XGPCD != "02"
   && AV0IM001.XGPCD != "03"
   && AV0IM001.XWHCD <= "  ")
    AV0IW01.AV0IWFF = "Y";
    converseLib.validationFailed(14);
    AV0IM001.XWHABRV = " ";
    set AV0IM001.XWHCD cursor, modified, bold;
    set AV0IM001.XOWCD bold;
  end

  if (AV0IM001.XWHCD > "  ")
    if (AV0IM001.XWHCD in XWHTBL.XWHCD)
      AV0IM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      set AV0IM001.XWHCD normal;
      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == AV0IM001.XGPCD
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == AV0IM001.XGPCD
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == AV0IM001.XGPCD
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == AV0IM001.XGPCD
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == AV0IM001.XGPCD
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == AV0IM001.XGPCD
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == AV0IM001.XGPCD
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == AV0IM001.XGPCD)
          /* NEXT SENTENCE*/
      else
        converseLib.validationFailed(021);
        AV0IW01.AV0IWFF = "Y";
        set AV0IM001.XWHCD cursor, bold;
      end
    else
      AV0IW01.AV0IWFF = "Y";
      converseLib.validationFailed(003);
      AV0IM001.XWHABRV = " ";
      set AV0IM001.XWHCD cursor, modified, bold;
    end
  end

end // end AV0IS01

// GET DESCRITIONS FROM PRODUCT
Function AV0IS05()

   /* GET DESCRIPTIONS FOR STYLE/COLOR/DIMENSION/UOM/WHSE/OWNER*/

  AV0IW01.AV0IWX2 = 10;
  while (AV0IW01.AV0IWX2 >= 01)
    AV0IS10();
    AV0IS15();

    AV0IW01.AV0IWX2 = AV0IW01.AV0IWX2 - 1;

  end
end // end AV0IS05

// GET STYLE DESCRIPTION
Function AV0IS10()

   /* GET DESCRIPTIONS FOR STYLE*/

  if (AV0IM001.SY1STNBR[AV0IWX2] > " ")
    SY1REC.SY1STNBR = AV0IM001.SY1STNBR[AV0IWX2];
    SY1REC.XGPCD = AV0IM001.XGPCD;
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes}; /* INQUIRY ONLY*/
  else
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    set AV0IM001.SY1STNBR[AV0IWX2] cursor, modified, bold;
    AV0IW01.AV0IWFF = "Y";
    converseLib.validationFailed(006);
    AV0IM001.SY1SSTNM[AV0IWX2] = " ";
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPROD   "; /* DATA BASE NAME*/
      TA1REC.TA1TBLVU = "VSTYLE01"; /* TABLE NAME*/
      TA1REC.TA1LOCAT[3] = "AV0IS10 "; /* STATEMENT GROUP*/
      TA1REC.TA1LOCAT[4] = "IO0120  "; /* I/O MOD NAME*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* CALL ABEND FORMATTER*/
      COMMAREA.CAUSERA = " "; /* CLEAR USER COMMAREA*/
      XSPF4();
    else
      if (AV0IM001.XUMCD[AV0IWX2] == " ")
        AV0IM001.XUMCD[AV0IWX2] = SY1REC.XUMCD;
        AV0IM001.SY1SSTNM[AV0IWX2] = SY1REC.SY1SSTNM;
        AV0IS30();
        set AV0IM001.SY1STNBR[AV0IWX2] normal;
      else
        if (AV0IM001.XUMCD[AV0IWX2] > " ")
          AV0IM001.SY1SSTNM[AV0IWX2] = SY1REC.SY1SSTNM;
          set AV0IM001.SY1STNBR[AV0IWX2] normal;
          AV0IS30();
        end
      end
    end
  end
end // end AV0IS10

// GET COLOR DESCRIPTION
Function AV0IS15()

    /* GET THE COLOR ID*/

  if (AV0IM001.XDMCD[AV0IWX2] > " ")
    SY2REC.XDMCD = AV0IM001.XDMCD[AV0IWX2];
    AV0IS35();
  else
    SY2REC.XDMCD = "**"; /* SETUP WILD CARD IF NOT SPECIFIED*/
  end

  if (AV0IM001.SY2CLRID[AV0IWX2] > " ")
    SY2REC.SY2CLRID = AV0IM001.SY2CLRID[AV0IWX2];
  else
    SY2REC.SY2CLRID = "***"; /* SETUP WILD CARD IF NOT SPECIFIED*/
  end


  if (AV0IM001.SY1STNBR[AV0IWX2] > " "
   && AV0IM001.SY1SSTNM[AV0IWX2] > " ")
     /* AND AV0IM001.SY2CLRID(AV0IWX2) GT ' ';*/
    SY2REC.SY1STNBR = AV0IM001.SY1STNBR[AV0IWX2];
    SY2REC.XGPCD = AV0IM001.XGPCD;
     /* MOVE AV0IM001.SY2CLRID(AV0IWX2) TO SY2REC.SY2CLRID;*/

    AV0IS16(); /* open color cursor*/

  else
    set AV0IM001.SY2CLRID[AV0IWX2] normal;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    AV0IS17(); /* fetch color row*/
  else
    AV0IS18(); /* close color cursor*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    AV0IM001.SY2CLRAB[AV0IWX2] = SY2REC.SY2CLRAB;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set AV0IM001.SY2CLRID[AV0IWX2] cursor, modified, bold;
      converseLib.validationFailed(007);
      AV0IW01.AV0IWFF = "Y";
      AV0IM001.SY2CLRAB[AV0IWX2] = " ";
    end
  end

  AV0IS18(); /* close color cursor*/
end // end AV0IS15

// open color cursor
Function AV0IS16()
   /* -------------------------av0is16----------------------------*/
                 /* select set dprod.vcolor01 data*/
   /* -------------------------av0is16----------------------------*/


  try
    call "IO0130" ("S2", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S16"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0is16----------------------------*/
end // end AV0IS16

// fetch next color row
Function AV0IS17()
   /* -------------------------av0is17----------------------------*/
              /* fetch next row of dprod.vcolor01 data*/
   /* -------------------------av0is17----------------------------*/


  try
    call "IO0130" ("N2", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S17"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0is17----------------------------*/
end // end AV0IS17

// close color cursor
Function AV0IS18()
   /* -------------------------av0is18----------------------------*/
              /* close cyrsor for dprod.vcolor01 data*/
   /* -------------------------av0is18----------------------------*/


  try
    call "IO0130" ("C2", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S18"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0is18----------------------------*/
end // end AV0IS18

// validate spec
Function AV0IS27()
   /* -------------------- av0is27 -------------------------------*/
                   /* validate spec code*/

   /* ------------------------------------------------------------*/

  set PC2REC empty;
  PC2REC.XGPCD = AV0IM001.XGPCD; /* gpc code*/
  PC2REC.PC2INSEG = AV0IM001.PC2INSEG[AV0IWX2]; /* cust segment code*/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    set AV0IM001.PC2INSEG[AV0IWX2] initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      AV0IW01.AV0IWFF = "Y";
      set AV0IM001.PC2INSEG[AV0IWX2] cursor, modified, bold;
      converseLib.validationFailed(41); /* invalid code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "AV0I";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0IS27";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLVU = "VPRDCU01"; /* table view*/
        TA1REC.TA1TBLKE = AV0IM001.PC2INSEG[AV0IWX2]; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(75);
        converseLib.clearScreen();
        
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "AV0G";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0IM001";
        TA1REC.TA1DBASE = "DPRODC"; /* table name*/
        TA1REC.TA1TBLVU = "VPRDCU01"; /* table view*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.clearScreen();
        
        converseLib.validationFailed(76); /* fatal error*/
        exit stack;
      end
    end
  end


    /* -------------  end of process av0g010  ------------------*/
end // end AV0IS27

// validate shade
Function AV0IS28()

     /* validate shade*/

  if (AV0IM001.XSACD[AV0IWX2] in XSATBL.XSACD)
    set AV0IM001.XSACD[AV0IWX2] normal;
  else
    AV0IW01.AV0IWFF = "Y";
    converseLib.validationFailed(130); /* invalid shade*/
    set AV0IM001.XSACD[AV0IWX2] cursor, bold;
  end
end // end AV0IS28

// validate package
Function AV0IS29()

     /* validate package*/

  if (AV0IM001.XPGCD[AV0IWX2] in XPGTBL.XPGCD)
    set AV0IM001.XPGCD[AV0IWX2] normal;
  else
    AV0IW01.AV0IWFF = "Y";
    converseLib.validationFailed(31); /* invalid package*/
    set AV0IM001.XPGCD[AV0IWX2] cursor, bold;
  end
end // end AV0IS29

// GET DESC FOR UNIT OF MEASURE
Function AV0IS30()

     /* GET DESCRIPTION FOR UNIT OF MEASURE*/

  if (AV0IM001.XUMCD[AV0IWX2] in XUMTBL.XUMCD)
    AV0IM001.XUMDESC[AV0IWX2] = XUMTBL.XUMDESC[sysVar.arrayIndex];
    set AV0IM001.XUMCD[AV0IWX2] normal;
  else
    AV0IW01.AV0IWFF = "Y";
    converseLib.validationFailed(2);
    set AV0IM001.XUMCD[AV0IWX2] cursor, bold;
    AV0IM001.XUMDESC[AV0IWX2] = " ";
  end
end // end AV0IS30

// load line totals
Function AV0IS31()

     /* load line totals for quality map 3*/


  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 12)
    if (AV0IM003.AV0IMSIZ[sysVar.arrayIndex] != " " || 
    AV0IM008.AV0IMSIZ[sysVar.arrayIndex] != " ")
      AV0IW09.AV0IW1Q1 = AV0IM003.AV0IMQ11[sysVar.arrayIndex];
      AV0IW09.AV0IW3Q1 = AV0IM003.AV0IMQ21[sysVar.arrayIndex];
      AV0IW09.AV0IW5Q1 = AV0IM003.AV0IMQ31[sysVar.arrayIndex];
      AV0IW09.AV0IW9Q1 = AV0IM008.AV0IMQ21[sysVar.arrayIndex];

      AV0IW09.AV0IW-11Q1 = AV0IM008.AV0IMQ31[sysVar.arrayIndex];

      AV0IW09.AV0IWTQL = AV0IW09.AV0IW1Q1 + AV0IW09.AV0IW3Q1;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW5Q1;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW9Q1;

      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW-11Q1;

      AV0IM003.AV0IMSCP[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;
      AV0IM008.AV0IMSCP[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;

      AV0IW09.AV0IW2Q2 = AV0IM003.AV0IMQ12[sysVar.arrayIndex];
      AV0IW09.AV0IW4Q2 = AV0IM003.AV0IMQ22[sysVar.arrayIndex];
      AV0IW09.AV0IW6Q2 = AV0IM003.AV0IMQ32[sysVar.arrayIndex];
      AV0IW09.AV0IW-10Q2 = AV0IM008.AV0IMQ22[sysVar.arrayIndex];

      AV0IW09.AV0IW-12Q2 = AV0IM008.AV0IMQ32[sysVar.arrayIndex];

      AV0IW09.AV0IWTQL = AV0IW09.AV0IW2Q2 + AV0IW09.AV0IW4Q2;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW6Q2;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW-10Q2;

      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW-12Q2;

      AV0IM003.AV0IMSPE[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;
      AV0IM008.AV0IMSPE[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end
end // end AV0IS31

// load line totals
Function AV0IS34()

     /* load line totals for quality map 5*/


  sysVar.arrayIndex = 1;


  while (sysVar.arrayIndex <= 15)
    if (AV0IM005.AV0IMSIZ[sysVar.arrayIndex] != " " || 
    AV0IM009.AV0IMSIZ[sysVar.arrayIndex] != " ")
      AV0IW09.AV0IW1Q1 = AV0IM005.AV0IMQ11[sysVar.arrayIndex];
      AV0IW09.AV0IW3Q1 = AV0IM005.AV0IMQ21[sysVar.arrayIndex];
      AV0IW09.AV0IW5Q1 = AV0IM005.AV0IMQ31[sysVar.arrayIndex];
      AV0IW09.AV0IW9Q1 = AV0IM009.AV0IMQ21[sysVar.arrayIndex];

      AV0IW09.AV0IW-11Q1 = AV0IM009.AV0IMQ31[sysVar.arrayIndex];

      AV0IW09.AV0IWTQL = AV0IW09.AV0IW1Q1 + AV0IW09.AV0IW3Q1;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW5Q1;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW9Q1;

      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW-11Q1;

      AV0IM005.AV0IMSCP[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;
      AV0IM009.AV0IMSCP[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;

      AV0IW09.AV0IW2Q2 = AV0IM005.AV0IMQ12[sysVar.arrayIndex];
      AV0IW09.AV0IW4Q2 = AV0IM005.AV0IMQ22[sysVar.arrayIndex];
      AV0IW09.AV0IW6Q2 = AV0IM005.AV0IMQ32[sysVar.arrayIndex];
      AV0IW09.AV0IW-10Q2 = AV0IM009.AV0IMQ22[sysVar.arrayIndex];

      AV0IW09.AV0IW-12Q2 = AV0IM009.AV0IMQ32[sysVar.arrayIndex];

      AV0IW09.AV0IWTQL = AV0IW09.AV0IW2Q2 + AV0IW09.AV0IW4Q2;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW6Q2;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW-10Q2;

      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW-12Q2;

      AV0IM005.AV0IMSPE[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;
      AV0IM009.AV0IMSPE[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end
end // end AV0IS34

// GET DESC FOR DIMENSION CODE
Function AV0IS35()

   /* GET DIMENSION DESCRIPTION*/

  if (AV0IM001.XDMCD[AV0IWX2] in XDMTBL.XDMCD)
    AV0IM001.XDMABRV[AV0IWX2] = XDMTBL.XDMABRV[sysVar.arrayIndex];
    set AV0IM001.XDMCD[AV0IWX2] normal;
  else
    AV0IW01.AV0IWFF = "Y";
    converseLib.validationFailed(2);
    set AV0IM001.XDMCD[AV0IWX2] cursor, modified, bold;
    AV0IM001.XDMABRV[AV0IWX2] = " ";
  end
end // end AV0IS35

// load line totals
Function AV0IS39()

     /* load line totals for quality map 6*/


  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 14)
    if (AV0IM006.AV0IMSIZ[sysVar.arrayIndex] != " " || 
    AV0IM010.AV0IMSIZ[sysVar.arrayIndex] != " ")
      AV0IW09.AV0IW1Q1 = AV0IM006.AV0IMQ11[sysVar.arrayIndex];
      AV0IW09.AV0IW3Q1 = AV0IM006.AV0IMQ21[sysVar.arrayIndex];
      AV0IW09.AV0IW5Q1 = AV0IM006.AV0IMQ31[sysVar.arrayIndex];
      AV0IW09.AV0IW9Q1 = AV0IM010.AV0IMQ21[sysVar.arrayIndex];

      AV0IW09.AV0IW-11Q1 = AV0IM010.AV0IMQ31[sysVar.arrayIndex];

      AV0IW09.AV0IWTQL = AV0IW09.AV0IW1Q1 + AV0IW09.AV0IW3Q1;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW5Q1;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW9Q1;

      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW-11Q1;

      AV0IM006.AV0IMSCP[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;
      AV0IM010.AV0IMSCP[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;

      AV0IW09.AV0IW2Q2 = AV0IM006.AV0IMQ12[sysVar.arrayIndex];
      AV0IW09.AV0IW4Q2 = AV0IM006.AV0IMQ22[sysVar.arrayIndex];
      AV0IW09.AV0IW6Q2 = AV0IM006.AV0IMQ32[sysVar.arrayIndex];
      AV0IW09.AV0IW-10Q2 = AV0IM010.AV0IMQ22[sysVar.arrayIndex];

      AV0IW09.AV0IW-12Q2 = AV0IM010.AV0IMQ32[sysVar.arrayIndex];

      AV0IW09.AV0IWTQL = AV0IW09.AV0IW2Q2 + AV0IW09.AV0IW4Q2;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW6Q2;
      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW-10Q2;

      AV0IW09.AV0IWTQL = AV0IW09.AV0IWTQL + AV0IW09.AV0IW-12Q2;

      AV0IM006.AV0IMSPE[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;
      AV0IM010.AV0IMSPE[sysVar.arrayIndex] = AV0IW09.AV0IWTQL;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end
end // end AV0IS39

// GET KEYS FROM AVAIL DB
Function AV0IS45()

   /* SET UP PROCESS TO GET AVAIL KEYS FROM D.B.*/

  AV0IW01.AV0IWX2 = 0;

  if (AV0IM001.XGPCD == "03")
    if (AV0IM001.XWHCD > " ")
      AV0IW01.XWHCD = AV0IM001.XWHCD;
    else
      AV0IW01.XWHCD = "**";
    end
    AV0IS55();
  end

  if (AV0IM001.XGPCD == "02")
    if (AV0IM001.XWHCD > " ")
      AV0IW01.XWHCD = AV0IM001.XWHCD;
      AV0IS55();
    else
      AV0IS50();
    end
  end

  if (AV0IM001.XGPCD != "02"
   && AV0IM001.XGPCD != "03")
    if (AV0IM001.XWHCD > " ")
      AV0IW01.XWHCD = AV0IM001.XWHCD;
    else
      AV0IW01.XWHCD = "**";
    end
    AV0IS55();
  end

   /* AV0IS70;*/

end // end AV0IS45

// SETUP ALL 3 FOOTWEAR WHSE
Function AV0IS50()

    /* SET UP for select for three footwear warehouse*/

  AV0IW01.AV0IWX1 = 1;
  AV0IW01.AV0IWX2 = 0;

  while (AV0IW01.AV0IWX1 <= 10)

    if (AV0IM001.SY1STNBR[AV0IWX1] <= " ")
      set AV0IM001.SY1STNBR[AV0IWX1] normal;
      set AV0IM001.SY2CLRID[AV0IWX1] normal;
      set AV0IM001.XDMCD[AV0IWX1] normal;
      set AV0IM001.PC2INSEG[AV0IWX1] normal;
      set AV0IM001.XSACD[AV0IWX1] normal;
      set AV0IM001.XPGCD[AV0IWX1] normal;
      AV0IW01.AV0IWHIT = " ";
    else
      AV0I080();
    end

    if (AV0IW01.AV0IWHIT == "N") /* style not found*/
      converseLib.validationFailed(18); /* style not found in availability*/
      set AV0IM001.SY1STNBR[AV0IWX1] cursor, modified, bold;
      set AV0IM001.SY2CLRID[AV0IWX1] modified, bold;
      set AV0IM001.XDMCD[AV0IWX1] modified, bold;
         /* SET av0iM001.PC2INSEG(av0iWX1) MODIFIED,BRIGHT;*/
         /* SET av0iM001.XSACD(av0iWX1) MODIFIED,BRIGHT;*/
         /* SET av0iM001.XPGCD(av0iWX1) MODIFIED,BRIGHT;*/
         /* SET av0iM001.XUMCD(av0iWX1) MODIFIED,BRIGHT;*/
      exit stack;
    end

    AV0IW01.AV0IWX1 = AV0IW01.AV0IWX1 + 1;

  end

   /* av0iS70 ;  move style info to sort rec*/

end // end AV0IS50

// SETUP KEYS FOR D.B. CALL
Function AV0IS55()

    /* GET DATA SETUP FOR SELECTS*/

  AV0IW01.AV0IWX1 = 1;
  AV0IW01.AV0IWX2 = 0;

  while (AV0IW01.AV0IWX1 <= 10)
    if (AV0IM001.SY1STNBR[AV0IWX1] <= " ")
      set AV0IM001.SY1STNBR[AV0IWX1] normal;
      set AV0IM001.SY2CLRID[AV0IWX1] normal;
      set AV0IM001.XDMCD[AV0IWX1] normal;
      set AV0IM001.PC2INSEG[AV0IWX1] normal;
      set AV0IM001.XSACD[AV0IWX1] normal;
      set AV0IM001.XPGCD[AV0IWX1] normal;
      AV0IW01.AV0IWHIT = " ";
    else
      if (AV0IM001.SY1STNBR[AV0IWX1] > " ")
                                   /* set up avqty02 rec for select*/
        set AV7REC empty;
        AV7REC.XQACD = "**";
        AV7REC.SY1STNBR = AV0IM001.SY1STNBR[AV0IWX1];
        AV7REC.SY2CLRID = AV0IM001.SY2CLRID[AV0IWX1];
        AV7REC.XDMCD = AV0IM001.XDMCD[AV0IWX1];
        AV7REC.XSDCD = AV0IM001.PC2INSEG[AV0IWX1];
        AV7REC.XPGCD = AV0IM001.XPGCD[AV0IWX1];
        AV7REC.XUMCD = AV0IM001.XUMCD[AV0IWX1];

        if (AV0IM001.XOWCD > " ")
          AV0IW01.XOWCD = AV0IM001.XOWCD;
          AV7REC.XOWCD = AV0IM001.XOWCD;
        else
          AV7REC.XOWCD = "**";
          AV0IW01.XOWCD = "**";
        end
      end

      AV7REC.XWHCD = AV0IW01.XWHCD;
      AV7REC.XGPCD = AV0IM001.XGPCD;
      AV0IW01.XGPCD = AV0IM001.XGPCD;
      AV7REC.AV4PRDBD = -1;
      AV0IS60();

      if (AV0IW01.AV0IWHIT == "N") /* style not found*/
        converseLib.validationFailed(18); /* style not found in availability*/
        set AV0IM001.SY1STNBR[AV0IWX1] cursor, modified, bold;
        set AV0IM001.SY2CLRID[AV0IWX1] modified, bold;
        set AV0IM001.XDMCD[AV0IWX1] modified, bold;
           /* SET av0iM001.PC2INSEG(av0iWX1) MODIFIED,BRIGHT;*/
           /* SET av0iM001.XSACD(av0iWX1) MODIFIED,BRIGHT;*/
           /* SET av0iM001.XPGCD(av0iWX1) MODIFIED,BRIGHT;*/
           /* SET av0iM001.XUMCD(av0iWX1) MODIFIED,BRIGHT;*/
        exit stack;
      end
    end

    AV0IW01.AV0IWX1 = AV0IW01.AV0IWX1 + 1;

  end

end // end AV0IS55

// PERFORM AVAIL D.B. CALL
Function AV0IS60()

    /* PERFORM D.B. CALL TO AVAIL*/

  if (AV7REC.SY2CLRID <= " ")
    AV7REC.SY2CLRID = "***";
  end

  if (AV7REC.XDMCD <= " ")
    AV7REC.XDMCD = "**";
  end

  if (AV7REC.XSDCD <= " ")
    AV7REC.XSDCD = "000";
  end

  if (AV7REC.XSACD <= " ")
    AV7REC.XSACD = "000";
  end

  if (AV7REC.XPGCD <= " ")
    AV7REC.XPGCD = "00";
  end

  if (AV7REC.XGPCD == "03"
   && AV0IM001.XWHCD == "  ")
    AV7REC.XWHCD = "**";
  else
    AV7REC.XWHCD = AV0IW01.XWHCD;
  end

  AV0I091(); /* select set from avhdr01*/

  AV0IW01.AV0IWHIT = "N"; /* valid product found flag*/
  AV0IW01.AV0IWEOC = "N"; /* end of cursor flag*/

  while (SQLCA.VAGen_SQLCODE == 0
   && AV0IW01.AV0IWX2 < 198
   && AV0IW01.AV0IWEOC == "N") /* until end of cursor*/

    AV0I092(); /* select next*/

    if (SQLCA.VAGen_SQLCODE == 100) /* if end of cursor*/
      AV0IW01.AV0IWEOC = "Y";
    end

    if (SQLCA.VAGen_SQLCODE == 0)
      if (AV0IM001.AV0IOPT == 1)
        if (AV7REC.XLCCD == "20"
         || AV7REC.XQACD == "02")
          AV0IW01.AV0IWHIT = "Y"; /* valid product found*/
          AV0IS61();
        end
      end
      if (AV0IM001.AV0IOPT == 2)
        if (AV7REC.XQACD == "02")
          AV0IW01.AV0IWHIT = "Y";
          AV0IS61();
        end
      end
      if (AV0IM001.AV0IOPT == 3)
        if (AV7REC.XLCCD == "20"
         && AV7REC.XQACD == "01")
          AV0IW01.AV0IWHIT = "Y";
          AV0IS61();
        end
      end
      if (AV0IM001.AV0IOPT == 4)
        if (AV7REC.XLCCD == "20")
          AV0IW01.AV0IWHIT = "Y";
          AV0IS61();
        end
      end
      if (AV0IM001.AV0IOPT == 5)
        if (AV7REC.XLCCD == "10"
         && AV7REC.XQACD == "02")
          AV0IW01.AV0IWHIT = "Y";
          AV0IS61();
        end
      end
    end
  end


  AV0I093(); /* close set avqty02*/

   /* IF AV0IW01.AV0IWX2 GE 198;*/
    /* AV0IS70;*/
   /* END ;*/

end // end AV0IS60

// PERFORM AVAIL D.B. CALL
Function AV0IS61()

    /* MOVE FIELDS FOR VALID HIT*/

  AV0IW01.XGPCD = AV7REC.XGPCD;
  AV0IW01.SY1STNBR = AV7REC.SY1STNBR;
  AV0IW01.SY2CLRID = AV7REC.SY2CLRID;
  AV0IW01.XUMCD = AV7REC.XUMCD;
  AV0IW01.XDMCD = AV7REC.XDMCD;
  AV0IW01.PC2INSEG = AV7REC.XSDCD;
  AV0IW01.XSACD = AV7REC.XSACD;
  AV0IW01.XPGCD = AV7REC.XPGCD;
  AV0IW01.AV4PRDBD = AV7REC.AV4PRDBD;
  AV0IW01.XWHCD = AV7REC.XWHCD;
  AV0IW01.XOWCD = AV7REC.XOWCD;
  AV0IS75();

end // end AV0IS61

// CHECK TO SEE IF RECORD ALREADY
Function AV0IS75()

   /* CHECK TO SEE IF RECORD HAS ALREADY BEEN WRITTEN*/


  AV0IW01.AV0IWSR = 0;

  if (AV0IM001.XOWCD <= " ")
    AV0IW01.XOWCD = "**";
  end

  if (AV0IM001.XGPCD == "02")
    AV0IW01.AV4PRDBD = -1;
  end

  if (AV0IW01.XWHCD == "07")
    AV0IW01.AV0IWSR = 1;
    if (AV0IW01.AV0IWKE in AV0IW05.AV0IWKE)
         /* NEXT SENTENCE*/
    else
      AV0IW01.AV0IWX2 = AV0IW01.AV0IWX2 + 1;
      AV0IW05.AV0IWKE[AV0IWX2] = AV0IW01.AV0IWKE;
    end
  else
    if (AV0IW01.XWHCD == "04")
      AV0IW01.AV0IWSR = 2;
      if (AV0IW01.AV0IWKE in AV0IW05.AV0IWKE)
          /* NEXT SENTENCE*/
      else
        AV0IW01.AV0IWX2 = AV0IW01.AV0IWX2 + 1;
        AV0IW05.AV0IWKE[AV0IWX2] = AV0IW01.AV0IWKE;
      end
    else
      if (AV0IW01.XWHCD == "02")
        AV0IW01.AV0IWSR = 3;
        if (AV0IW01.AV0IWKE in AV0IW05.AV0IWKE)
             /* NEXT SENTENCE*/
        else
          AV0IW01.AV0IWX2 = AV0IW01.AV0IWX2 + 1;
          AV0IW05.AV0IWKE[AV0IWX2] = AV0IW01.AV0IWKE;
        end
      else
        if (AV0IW01.XWHCD == "15")
          AV0IW01.AV0IWSR = 4;
          if (AV0IW01.AV0IWKE in AV0IW05.AV0IWKE)
             /* NEXT SENTENCE*/
          else
            AV0IW01.AV0IWX2 = AV0IW01.AV0IWX2 + 1;
            AV0IW05.AV0IWKE[AV0IWX2] = AV0IW01.AV0IWKE;
          end
        else
          if (AV0IW01.XWHCD == "51")
            AV0IW01.AV0IWSR = 5;
            if (AV0IW01.AV0IWKE in AV0IW05.AV0IWKE)
               /* NEXT SENTENCE*/
            else
              AV0IW01.AV0IWX2 = AV0IW01.AV0IWX2 + 1;
              AV0IW05.AV0IWKE[AV0IWX2] = AV0IW01.AV0IWKE;
            end
          else
            if (AV0IW01.AV0IWKE in AV0IW05.AV0IWKE)
               /* NEXT SENTENCE*/
            else
              AV0IW01.AV0IWX2 = AV0IW01.AV0IWX2 + 1;
              AV0IW05.AV0IWKE[AV0IWX2] = AV0IW01.AV0IWKE;
            end
          end
        end
      end
    end
  end


end // end AV0IS75

// READ AND SETUP SCREEN DATA 1
Function AV0ISAA()

    /* SET UP FOUR  SCREEN RECORDS*/

  if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
    converseLib.validationFailed(016);
    exit stack;
  end

  set AV0IM002 initial;
  set AV0IM007 initial;
  set AV0IM004 initial;



  AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

  if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
    AV0ISBA(); /* READ DATA BASE FILE UNTIL SQLCODE = 100*/
  else
    converseLib.validationFailed(16);
    exit stack;
  end

  AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

  if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
    AV0ISCA(); /* READ DATA BASE FILE INTIL SQLCODE = 100*/
  else
    converseLib.validationFailed(16);
      /* EZEFLO;*/
  end

  AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

  if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
    AV0ISDA(); /* READ DATA BASE FILE INTIL SQLCODE = 100*/
  else
    converseLib.validationFailed(16);
    exit stack;
  end

  AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

  if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
    AV0ISEA(); /* READ DATA BASE FILE INTIL SQLCODE = 100*/
  else
    converseLib.validationFailed(16);
    exit stack;
  end

end // end AV0ISAA

// READ AND SETUP SCREEN DATA 1A
Function AV0ISBA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0IW01.AV0IWFT = "Y";

  AV7REC.XWHCD = AV0IW05.XWHCD[AV0IWX3];
  AV7REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];
  AV7REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM002.AV0IMST1 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM004.AV0IMST1 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM007.AV0IMST1 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM002.AV0IMCL1 = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM004.AV0IMCL1 = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM007.AV0IMCL1 = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  AV0IM002.AV0IMDM1 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM004.AV0IMDM1 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM007.AV0IMDM1 = AV0IW05.XDMCD[AV0IWX3];
  AV7REC.XSDCD = AV0IW05.PC2INSEG[AV0IWX3];
  AV7REC.XSACD = AV0IW05.XSACD[AV0IWX3];
  AV7REC.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV7REC.AV4PRDBD = -1;
  AV7REC.XOWCD = AV0IW05.XOWCD[AV0IWX3];
  AV7REC.XQACD = "**";
  AV7REC.XUMCD = AV0IW05.XUMCD[AV0IWX3];
  AV0IM002.AV0IMUM1 = AV0IW05.XUMCD[AV0IWX3];
  AV0IM004.AV0IMUM1 = AV0IW05.XUMCD[AV0IWX3];
  AV0IM007.AV0IMUM1 = AV0IW05.XUMCD[AV0IWX3];

  set AV0IW10 empty;

  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  while (SQLCA.VAGen_SQLCODE == 0)

    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

    if (VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      if (VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[3] = "AV0ISBA";
        TA1REC.TA1LOCAT[4] = "IO2370";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else

        AV0IM002.AV0IMWH1 = AV7REC.XWHCD;
        AV0IM004.AV0IMWH1 = AV7REC.XWHCD;
        AV0IM007.AV0IMWH1 = AV7REC.XWHCD;

        if (AV7REC.XQACD == "01")
          AV0IM002.AV0IMC11 = AV7REC.AV1CUPRC;
          AV0IM004.AV0IMC11 = AV7REC.AV1CUPRC;
          AV0IM007.AV0IMC11 = AV7REC.AV1CUPRC;
          AV0IM002.AV0IMS11 = 0;
          AV0IM002.AV0IML11 = AV7REC.AV1PRPRC;
          AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
          AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
          AV0ISZA();
          AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
          if (AV0IW01.AV0IWREM > 0)
            AV0IM002.AV0IMP11 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
          else
            if (AV0IW01.AV0IWREM < 0)
              AV0IM002.AV0IMP11 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
            else
              AV0IM002.AV0IMP11 = 0;
            end
          end
        end
        if (AV0IM001.AV0IOPT == 1)
          if (AV7REC.XLCCD == "20"
           || AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISBB();
          end
        end
        if (AV0IM001.AV0IOPT == 2)
          if (AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISBB();
          end
        end
        if (AV0IM001.AV0IOPT == 3)
          if (AV7REC.XLCCD == "20"
           && AV7REC.XQACD == "01")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISBB();
          end
        end
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISBB();
          end
        end
        if (AV0IM001.AV0IOPT == 5)
          if (AV7REC.XLCCD == "10"
           && AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISBB();
          end
        end
      end
    end
  end

  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (AV0IW01.AV0IWFT == "Y")
    AV0IM002.AV0IMTL1 = "*TOTAL*";
    AV0IM002.AV0IMT11 = 0;
    AV0IM002.AV0IMT21 = 0;
  else
    if (COMMAREA.CAILVL[1] == "Y")
      if (AV0IW10.AV0IWCQ1 > 0)
        AV0IM002.AV0IMS11 = AV0IW10.AV0IWCQ1;
        AV0IM002.AV0IMGM1 = AV0IW10.AV0IWGM1;
        AV0IM004.AV0IMGM1 = AV0IW10.AV0IWGM1;
        AV0IM007.AV0IMGM1 = AV0IW10.AV0IWGM1;
      else
        AV0IM002.AV0IMGM1 = AV0IW10.AV0IWGM2;
      end

      AV0IM004.AV0IMGM2 = AV0IW10.AV0IWGM2;
      AV0IM007.AV0IMGM2 = AV0IW10.AV0IWGM2;
      AV0IM002.AV0IMS21 = AV0IW10.AV0IWCQ2;
    end

     /* HERE WE WILL SETUP THE VARYABLE SCREEN FIELDS*/
     /* AND GET ALL THE DEFINITIONS FROM THE DIFFERENT TABLES*/
    AV0ISBD();
  end
end // end AV0ISBA

// READ AND SETUP SCREEN DATA 1A
Function AV0ISBB()

    /* PROCESS PRICE AND PERCENT DIFFERENCE*/

  if (AV7REC.XQACD == "01")
    AV0ISBC();
  else
    AV0IM004.AV0IMC21 = AV7REC.AV1CUPRC;
    AV0IM002.AV0IMC21 = AV7REC.AV1CUPRC;
    AV0IM002.AV0IML21 = AV7REC.AV1PRPRC;
    AV0IM002.AV0IMS21 = 0;
    AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
    AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
    AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
    if (AV0IW01.AV0IWREM > 0)
      AV0IM002.AV0IMP21 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
    else
      if (AV0IW01.AV0IWREM < 0)
        AV0IM002.AV0IMP21 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
      else
        AV0IM002.AV0IMP21 = 0;
      end
    end
    AV0IW01.AV0IWFT = "N";
    AV0ISBC();
  end

  if (AV7REC.XQACD == "02")
    AV0IM002.AV0IMCM1 = AV7REC.AV2CMNT;
  else
    AV0IM002.AV0IMCM1 = " ";
  end

end // end AV0ISBB

// SETUP TOTALS FOR APPAREL SCREE
Function AV0ISBC()

    /* THIS IS THE AREA WHERE THE TOTALS FOR 1 APPAREL*/
    /* WILL BE ACCUMULATED*/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (AV7REC.XQACD == "01"
     && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
      AV0IW01.AV0IWQTY = AV0IW10.AV0IW1T[sysVar.arrayIndex];
      AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
      AV0IW10.AV0IW1T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

    else
      if (AV7REC.XQACD == "02"
       && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
        AV0IW01.AV0IWQTY = AV0IW10.AV0IW2T[sysVar.arrayIndex];
        AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
        AV0IW10.AV0IW2T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;


  end
end // end AV0ISBC

// GET IDS AND SET APRL 1 FIELDS
Function AV0ISBD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY1REC.XGPCD = AV0IM001.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM002.AV0IMSD1 = SY1REC.SY1SSTNM;
  AV0IM004.AV0IMSD1 = SY1REC.SY1SSTNM;
  AV0IM007.AV0IMSD1 = SY1REC.SY1SSTNM;

  SY2REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  SY2REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY2REC.XGPCD = AV0IM001.XGPCD;
  SY2REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  SY2REC.SY2CLRAB = " ";
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0130 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM002.AV0IMCD1 = SY2REC.SY2CLRAB;
  AV0IM004.AV0IMCD1 = SY2REC.SY2CLRAB;
  AV0IM007.AV0IMCD1 = SY2REC.SY2CLRAB;

  AV0IM002.AV0IMDM1 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM004.AV0IMDM1 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM007.AV0IMDM1 = AV0IW05.XDMCD[AV0IWX3];

  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0IM002.AV0IMGD1 = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0IM002.AV0IMSP1 = XSPTBL.XSPABRV[sysVar.arrayIndex];
  end


  AV0ISBE(); /* WRITE SIZE RELATED DATA*/


end // end AV0ISBD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ISBE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  AV0ISBF(); /* CALL SIZE CONVERSION PG1050*/

  AV0IW01.AV0IWTQ1 = 0;
  AV0IW01.AV0IWTQ2 = 0;
  AV0IW01.AV0IWX4 = 1;

  while (AV0IW01.AV0IWX4 <= 16
   && PG3REC.SY4IDDSC[AV0IWX4] > " ")

    AV0IW01.AV0IWX1 = PG3REC.SY5SZID[AV0IWX4];

    if (AV0IW01.AV0IWX4 < 5)
      AV0IM002.AV0IMSZ1[AV0IWX4] = PG3REC.SY4IDDSC[AV0IWX4];
      AV0IM002.AV0IMQ11[AV0IWX4] = AV0IW10.AV0IW1T[AV0IWX1];
      AV0IM002.AV0IMQ21[AV0IWX4] = AV0IW10.AV0IW2T[AV0IWX1];
      AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
      AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
    else
      if (AV0IW01.AV0IWX4 == 5)
        AV0IM002.AV0IMTL1 = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM002.AV0IMT11 = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM002.AV0IMT21 = AV0IW10.AV0IW2T[AV0IWX1];
        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
      else
        if (AV0IW01.AV0IWX4 > 5
         && AV0IW01.AV0IWX4 < 11)
          AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
          AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 5;
          AV0IM007.AV0IMSZ1[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
          AV0IM007.AV0IMQ11[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
          AV0IM007.AV0IMQ21[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
          AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
          AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

        else
          if (AV0IW01.AV0IWX4 == 11)
            AV0IM007.AV0IMTL1 = PG3REC.SY4IDDSC[AV0IWX4];
            AV0IM007.AV0IMT11 = AV0IW10.AV0IW1T[AV0IWX1];
            AV0IM007.AV0IMT21 = AV0IW10.AV0IW2T[AV0IWX1];
            AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
            AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

          else
            AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
            AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 11;
            AV0IM004.AV0IMSZ1[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
            AV0IM004.AV0IMQ11[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
            AV0IM004.AV0IMQ21[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
            AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
            AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

          end

        end
      end
    end

    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;

  end

  if (AV0IW01.AV0IWX4 > 11)
    AV0IM004.AV0IMT11 = AV0IW01.AV0IWTQ1;
    AV0IM004.AV0IMT21 = AV0IW01.AV0IWTQ2;
  else
    if (AV0IW01.AV0IWX4 > 5)
      AV0IM007.AV0IMT11 = AV0IW01.AV0IWTQ1;
      AV0IM007.AV0IMT21 = AV0IW01.AV0IWTQ2;
      AV0IM007.AV0IMTL1 = "*TOTAL*";

    else
      AV0IM002.AV0IMT11 = AV0IW01.AV0IWTQ1;
      AV0IM002.AV0IMT21 = AV0IW01.AV0IWTQ2;
      AV0IM002.AV0IMTL1 = "*TOTAL*";
    end
  end
end // end AV0ISBE

// get size translation
Function AV0ISBF()

    /* CALL TO AV1120 TO GET EXTERNAL SIZES*/

  PG3REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];
  PG3REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  PG3REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  PG3REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  PG3REC.XQACD = "02";
  PG3REC.PG3RETCD = 0;

  sysVar.arrayIndex = 1;
  AV0IW01.AV0IWX5 = 0;

  while (sysVar.arrayIndex <= 40)
    PG3REC.SY5SZID[sysVar.arrayIndex] = 0;
    PG3REC.SY4IDDSC[sysVar.arrayIndex] = " ";
    PG3REC.PG3SIZRC[sysVar.arrayIndex] = 0;

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (AV0IW01.XCDCD[sysVar.arrayIndex] > " ")
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 + 1;
      PG3REC.SY5SZID[AV0IWX5] = sysVar.arrayIndex;

    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "C";

  call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "PRODUCT";
    TA1REC.TA1LOCAT[3] = "AV0ISBF";
    TA1REC.TA1LOCAT[4] = "PG1050";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

    /* RETURN TO CALLING APP*/

end // end AV0ISBF

// READ AND SETUP SCREEN DATA 1A
Function AV0ISCA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0IW01.AV0IWFT = "Y";

  AV7REC.XWHCD = AV0IW05.XWHCD[AV0IWX3];
  AV7REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];
  AV7REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM002.AV0IMST2 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM004.AV0IMST2 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM007.AV0IMST2 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM002.AV0IMCL2 = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM004.AV0IMCL2 = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM007.AV0IMCL2 = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  AV0IM002.AV0IMDM2 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM004.AV0IMDM2 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM007.AV0IMDM2 = AV0IW05.XDMCD[AV0IWX3];
  AV7REC.XSDCD = AV0IW05.PC2INSEG[AV0IWX3];
  AV7REC.XSACD = AV0IW05.XSACD[AV0IWX3];
  AV7REC.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV7REC.AV4PRDBD = -1;
  AV7REC.XOWCD = AV0IW05.XOWCD[AV0IWX3];
  AV7REC.XQACD = "**";
  AV7REC.XUMCD = AV0IW05.XUMCD[AV0IWX3];
  AV0IM002.AV0IMUM2 = AV0IW05.XUMCD[AV0IWX3];
  AV0IM004.AV0IMUM2 = AV0IW05.XUMCD[AV0IWX3];
  AV0IM007.AV0IMUM2 = AV0IW05.XUMCD[AV0IWX3];

  set AV0IW10 empty;

  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  while (SQLCA.VAGen_SQLCODE == 0)

    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

    if (VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      if (VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[3] = "AV0ISCA";
        TA1REC.TA1LOCAT[4] = "IO2370";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else

        AV0IM002.AV0IMWH2 = AV7REC.XWHCD;
        AV0IM004.AV0IMWH2 = AV7REC.XWHCD;
        AV0IM007.AV0IMWH2 = AV7REC.XWHCD;

        if (AV7REC.XQACD == "01")
          AV0IM002.AV0IMC12 = AV7REC.AV1CUPRC;
          AV0IM004.AV0IMC12 = AV7REC.AV1CUPRC;
          AV0IM007.AV0IMC12 = AV7REC.AV1CUPRC;
          AV0IM002.AV0IMS12 = 0;
          AV0IM002.AV0IML12 = AV7REC.AV1PRPRC;
          AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
          AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
          AV0ISZA();
          AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
          if (AV0IW01.AV0IWREM > 0)
            AV0IM002.AV0IMP12 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
          else
            if (AV0IW01.AV0IWREM < 0)
              AV0IM002.AV0IMP12 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
            else
              AV0IM002.AV0IMP12 = 0;
            end
          end
        end
        if (AV0IM001.AV0IOPT == 1)
          if (AV7REC.XLCCD == "20"
           || AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISCB();
          end
        end
        if (AV0IM001.AV0IOPT == 2)
          if (AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISCB();
          end
        end
        if (AV0IM001.AV0IOPT == 3)
          if (AV7REC.XLCCD == "20"
           && AV7REC.XQACD == "01")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISCB();
          end
        end
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISCB();
          end
        end
        if (AV0IM001.AV0IOPT == 5)
          if (AV7REC.XLCCD == "10"
           && AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISCB();
          end
        end
      end
    end
  end

  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (AV0IW01.AV0IWFT == "Y")
    AV0IM002.AV0IMTL2 = "*TOTAL*";
    AV0IM002.AV0IMT12 = 0;
    AV0IM002.AV0IMT22 = 0;
  else
    if (COMMAREA.CAILVL[1] == "Y")
      if (AV0IW10.AV0IWCQ1 > 0)
        AV0IM002.AV0IMS12 = AV0IW10.AV0IWCQ1;
        AV0IM002.AV0IMGM2 = AV0IW10.AV0IWGM1;
        AV0IM004.AV0IMGM3 = AV0IW10.AV0IWGM1;
        AV0IM007.AV0IMGM3 = AV0IW10.AV0IWGM1;
      else
        AV0IM002.AV0IMGM2 = AV0IW10.AV0IWGM2;
      end

      AV0IM004.AV0IMGM4 = AV0IW10.AV0IWGM2;
      AV0IM007.AV0IMGM4 = AV0IW10.AV0IWGM2;
      AV0IM002.AV0IMS22 = AV0IW10.AV0IWCQ2;
    end

     /* HERE WE WILL SETUP THE VARYABLE SCREEN FIELDS*/
     /* AND GET ALL THE DEFINITIONS FROM THE DIFFERENT TABLES*/
    AV0ISCD();
  end
end // end AV0ISCA

// READ AND SETUP SCREEN DATA 1A
Function AV0ISCB()

    /* PROCESS PRICE AND PERCENT DIFFERENCE*/

  if (AV7REC.XQACD == "01")
    AV0ISCC();
  else
    AV0IM004.AV0IMC22 = AV7REC.AV1CUPRC;
    AV0IM002.AV0IMC22 = AV7REC.AV1CUPRC;
    AV0IM002.AV0IML22 = AV7REC.AV1PRPRC;
    AV0IM002.AV0IMS22 = 0;
    AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
    AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
    AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
    if (AV0IW01.AV0IWREM > 0)
      AV0IM002.AV0IMP22 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
    else
      if (AV0IW01.AV0IWREM < 0)
        AV0IM002.AV0IMP22 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
      else
        AV0IM002.AV0IMP22 = 0;
      end
    end
    AV0IW01.AV0IWFT = "N";
    AV0ISCC();
  end

  if (AV7REC.XQACD == "02")
    AV0IM002.AV0IMCM2 = AV7REC.AV2CMNT;
  else
    AV0IM002.AV0IMCM2 = " ";
  end
end // end AV0ISCB

// SETUP TOTALS FOR APPAREL SCREE
Function AV0ISCC()

    /* THIS IS THE AREA WHERE THE TOTALS FOR 1 APPAREL*/
    /* WILL BE ACCUMULATED*/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (AV7REC.XQACD == "01"
     && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
      AV0IW01.AV0IWQTY = AV0IW10.AV0IW1T[sysVar.arrayIndex];
      AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
      AV0IW10.AV0IW1T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

    else
      if (AV7REC.XQACD == "02"
       && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
        AV0IW01.AV0IWQTY = AV0IW10.AV0IW2T[sysVar.arrayIndex];
        AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
        AV0IW10.AV0IW2T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;


  end
end // end AV0ISCC

// GET IDS AND SET APRL 1 FIELDS
Function AV0ISCD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY1REC.XGPCD = AV0IM001.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM002.AV0IMSD2 = SY1REC.SY1SSTNM;
  AV0IM004.AV0IMSD2 = SY1REC.SY1SSTNM;
  AV0IM007.AV0IMSD2 = SY1REC.SY1SSTNM;

  SY2REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  SY2REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY2REC.XGPCD = AV0IM001.XGPCD;
  SY2REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  SY2REC.SY2CLRAB = " ";
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0130 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM002.AV0IMCD2 = SY2REC.SY2CLRAB;
  AV0IM004.AV0IMCD2 = SY2REC.SY2CLRAB;
  AV0IM007.AV0IMCD2 = SY2REC.SY2CLRAB;

  AV0IM002.AV0IMDM2 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM004.AV0IMDM2 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM007.AV0IMDM2 = AV0IW05.XDMCD[AV0IWX3];

  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0IM002.AV0IMGD2 = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0IM002.AV0IMSP2 = XSPTBL.XSPABRV[sysVar.arrayIndex];
  end


  AV0ISCE(); /* WRITE SIZE RELATED DATA*/


end // end AV0ISCD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ISCE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  AV0ISBF(); /* CALL SIZE CONVERSION PG1050*/

  AV0IW01.AV0IWTQ1 = 0;
  AV0IW01.AV0IWTQ2 = 0;
  AV0IW01.AV0IWX4 = 1;

  while (AV0IW01.AV0IWX4 <= 16
   && PG3REC.SY4IDDSC[AV0IWX4] > " ")

    AV0IW01.AV0IWX1 = PG3REC.SY5SZID[AV0IWX4];

    if (AV0IW01.AV0IWX4 < 5)
      AV0IM002.AV0IMSZ2[AV0IWX4] = PG3REC.SY4IDDSC[AV0IWX4];
      AV0IM002.AV0IMQ12[AV0IWX4] = AV0IW10.AV0IW1T[AV0IWX1];
      AV0IM002.AV0IMQ22[AV0IWX4] = AV0IW10.AV0IW2T[AV0IWX1];
      AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
      AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
    else
      if (AV0IW01.AV0IWX4 == 5)
        AV0IM002.AV0IMTL2 = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM002.AV0IMT12 = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM002.AV0IMT22 = AV0IW10.AV0IW2T[AV0IWX1];
        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
      else
        if (AV0IW01.AV0IWX4 > 5
         && AV0IW01.AV0IWX4 < 11)
          AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
          AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 5;
          AV0IM007.AV0IMSZ2[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
          AV0IM007.AV0IMQ12[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
          AV0IM007.AV0IMQ22[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
          AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
          AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
        else
          if (AV0IW01.AV0IWX4 == 11)
            AV0IM007.AV0IMTL1 = PG3REC.SY4IDDSC[AV0IWX4];
            AV0IM007.AV0IMT12 = AV0IW10.AV0IW1T[AV0IWX1];
            AV0IM007.AV0IMT22 = AV0IW10.AV0IW2T[AV0IWX1];
            AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
            AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
          else
            AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
            AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 11;
            AV0IM004.AV0IMSZ2[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
            AV0IM004.AV0IMQ12[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
            AV0IM004.AV0IMQ22[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
            AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
            AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

          end
        end
      end

    end

    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;

  end

  if (AV0IW01.AV0IWX4 > 11)
    AV0IM004.AV0IMT12 = AV0IW01.AV0IWTQ1;
    AV0IM004.AV0IMT22 = AV0IW01.AV0IWTQ2;
  else
    if (AV0IW01.AV0IWX4 > 5)
      AV0IM007.AV0IMT12 = AV0IW01.AV0IWTQ1;
      AV0IM007.AV0IMT22 = AV0IW01.AV0IWTQ2;
      AV0IM007.AV0IMTL2 = "*TOTAL*";
    else
      AV0IM002.AV0IMT12 = AV0IW01.AV0IWTQ1;
      AV0IM002.AV0IMT22 = AV0IW01.AV0IWTQ2;
      AV0IM002.AV0IMTL2 = "*TOTAL*";
    end
  end

end // end AV0ISCE

// READ AND SETUP SCREEN DATA 1A
Function AV0ISDA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0IW01.AV0IWFT = "Y";

  AV7REC.XWHCD = AV0IW05.XWHCD[AV0IWX3];
  AV7REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];
  AV7REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM002.AV0IMST3 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM004.AV0IMST3 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM007.AV0IMST3 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM002.AV0IMCL3 = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM004.AV0IMCL3 = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM007.AV0IMCL3 = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  AV0IM002.AV0IMDM3 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM004.AV0IMDM3 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM007.AV0IMDM3 = AV0IW05.XDMCD[AV0IWX3];
  AV7REC.XSDCD = AV0IW05.PC2INSEG[AV0IWX3];
  AV7REC.XSACD = AV0IW05.XSACD[AV0IWX3];
  AV7REC.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV7REC.AV4PRDBD = -1;
  AV7REC.XOWCD = AV0IW05.XOWCD[AV0IWX3];
  AV7REC.XQACD = "**";
  AV7REC.XUMCD = AV0IW05.XUMCD[AV0IWX3];
  AV0IM002.AV0IMUM3 = AV0IW05.XUMCD[AV0IWX3];
  AV0IM004.AV0IMUM3 = AV0IW05.XUMCD[AV0IWX3];
  AV0IM007.AV0IMUM3 = AV0IW05.XUMCD[AV0IWX3];

  set AV0IW10 empty;

  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  while (SQLCA.VAGen_SQLCODE == 0)

    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

    if (VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      if (VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[3] = "AV0ISBA";
        TA1REC.TA1LOCAT[4] = "IO2370";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else

        AV0IM002.AV0IMWH3 = AV7REC.XWHCD;
        AV0IM004.AV0IMWH3 = AV7REC.XWHCD;
        AV0IM007.AV0IMWH3 = AV7REC.XWHCD;

        if (AV7REC.XQACD == "01")
          AV0IM002.AV0IMC13 = AV7REC.AV1CUPRC;
          AV0IM004.AV0IMC13 = AV7REC.AV1CUPRC;
          AV0IM007.AV0IMC13 = AV7REC.AV1CUPRC;
          AV0IM002.AV0IMS13 = 0;
          AV0IM002.AV0IML13 = AV7REC.AV1PRPRC;
          AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
          AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
          AV0ISZA();
          AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
          if (AV0IW01.AV0IWREM > 0)
            AV0IM002.AV0IMP13 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
          else
            if (AV0IW01.AV0IWREM < 0)
              AV0IM002.AV0IMP13 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
            else
              AV0IM002.AV0IMP13 = 0;
            end
          end
        end
        if (AV0IM001.AV0IOPT == 1)
          if (AV7REC.XLCCD == "20"
           || AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISDB();
          end
        end
        if (AV0IM001.AV0IOPT == 2)
          if (AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISDB();
          end
        end
        if (AV0IM001.AV0IOPT == 3)
          if (AV7REC.XLCCD == "20"
           && AV7REC.XQACD == "01")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISDB();
          end
        end
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISDB();
          end
        end
        if (AV0IM001.AV0IOPT == 5)
          if (AV7REC.XLCCD == "10"
           && AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISDB();
          end
        end
      end
    end
  end

  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (AV0IW01.AV0IWFT == "Y")
    AV0IM002.AV0IMTL3 = "*TOTAL*";
    AV0IM002.AV0IMT13 = 0;
    AV0IM002.AV0IMT23 = 0;
  else
    if (COMMAREA.CAILVL[1] == "Y")
      if (AV0IW10.AV0IWCQ1 > 0)
        AV0IM002.AV0IMS13 = AV0IW10.AV0IWCQ1;
        AV0IM002.AV0IMGM3 = AV0IW10.AV0IWGM1;
        AV0IM004.AV0IMGM6 = AV0IW10.AV0IWGM1;
        AV0IM007.AV0IMGM6 = AV0IW10.AV0IWGM1;
      else
        AV0IM002.AV0IMGM3 = AV0IW10.AV0IWGM2;
      end

      AV0IM004.AV0IMGM7 = AV0IW10.AV0IWGM2;
      AV0IM007.AV0IMGM7 = AV0IW10.AV0IWGM2;
      AV0IM002.AV0IMS23 = AV0IW10.AV0IWCQ2;
    end

     /* HERE WE WILL SETUP THE VARYABLE SCREEN FIELDS*/
     /* AND GET ALL THE DEFINITIONS FROM THE DIFFERENT TABLES*/
    AV0ISDD();
  end
end // end AV0ISDA

// READ AND SETUP SCREEN DATA 1A
Function AV0ISDB()

    /* PROCESS PRICE AND PERCENT DIFFERENCE*/

  if (AV7REC.XQACD == "01")
    AV0ISDC();
  else
    AV0IM004.AV0IMC23 = AV7REC.AV1CUPRC;
    AV0IM002.AV0IMC23 = AV7REC.AV1CUPRC;
    AV0IM002.AV0IML23 = AV7REC.AV1PRPRC;
    AV0IM002.AV0IMS23 = 0;
    AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
    AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
    AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
    if (AV0IW01.AV0IWREM > 0)
      AV0IM002.AV0IMP23 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
    else
      if (AV0IW01.AV0IWREM < 0)
        AV0IM002.AV0IMP23 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
      else
        AV0IM002.AV0IMP23 = 0;
      end
    end
    AV0IW01.AV0IWFT = "N";
    AV0ISDC();
  end

  if (AV7REC.XQACD == "02")
    AV0IM002.AV0IMCM3 = AV7REC.AV2CMNT;
  else
    AV0IM002.AV0IMCM3 = " ";
  end
end // end AV0ISDB

// SETUP TOTALS FOR APPAREL SCREE
Function AV0ISDC()

    /* THIS IS THE AREA WHERE THE TOTALS FOR 1 APPAREL*/
    /* WILL BE ACCUMULATED*/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (AV7REC.XQACD == "01"
     && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
      AV0IW01.AV0IWQTY = AV0IW10.AV0IW1T[sysVar.arrayIndex];
      AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
      AV0IW10.AV0IW1T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

    else
      if (AV7REC.XQACD == "02"
       && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
        AV0IW01.AV0IWQTY = AV0IW10.AV0IW2T[sysVar.arrayIndex];
        AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
        AV0IW10.AV0IW2T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;


  end
end // end AV0ISDC

// GET IDS AND SET APRL 1 FIELDS
Function AV0ISDD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY1REC.XGPCD = AV0IM001.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM002.AV0IMSD3 = SY1REC.SY1SSTNM;
  AV0IM004.AV0IMSD3 = SY1REC.SY1SSTNM;
  AV0IM007.AV0IMSD3 = SY1REC.SY1SSTNM;

  SY2REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  SY2REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY2REC.XGPCD = AV0IM001.XGPCD;
  SY2REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  SY2REC.SY2CLRAB = " ";
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0130 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM002.AV0IMCD3 = SY2REC.SY2CLRAB;
  AV0IM004.AV0IMCD3 = SY2REC.SY2CLRAB;
  AV0IM007.AV0IMCD3 = SY2REC.SY2CLRAB;

  AV0IM002.AV0IMDM3 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM004.AV0IMDM3 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM007.AV0IMDM3 = AV0IW05.XDMCD[AV0IWX3];

  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0IM002.AV0IMGD3 = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0IM002.AV0IMSP3 = XSPTBL.XSPABRV[sysVar.arrayIndex];
  end


  AV0ISDE(); /* WRITE SIZE RELATED DATA*/


end // end AV0ISDD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ISDE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  AV0ISBF(); /* CALL SIZE CONVERSION PG1050*/

  AV0IW01.AV0IWTQ1 = 0;
  AV0IW01.AV0IWTQ2 = 0;
  AV0IW01.AV0IWX4 = 1;

  while (AV0IW01.AV0IWX4 <= 16
   && PG3REC.SY4IDDSC[AV0IWX4] > " ")

    AV0IW01.AV0IWX1 = PG3REC.SY5SZID[AV0IWX4];

    if (AV0IW01.AV0IWX4 < 5)
      AV0IM002.AV0IMSZ3[AV0IWX4] = PG3REC.SY4IDDSC[AV0IWX4];
      AV0IM002.AV0IMQ13[AV0IWX4] = AV0IW10.AV0IW1T[AV0IWX1];
      AV0IM002.AV0IMQ23[AV0IWX4] = AV0IW10.AV0IW2T[AV0IWX1];
      AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
      AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
    else
      if (AV0IW01.AV0IWX4 == 5)
        AV0IM002.AV0IMTL3 = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM002.AV0IMT13 = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM002.AV0IMT23 = AV0IW10.AV0IW2T[AV0IWX1];
        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
      else
        if (AV0IW01.AV0IWX4 > 5
         && AV0IW01.AV0IWX4 < 11)
          AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
          AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 5;
          AV0IM007.AV0IMSZ3[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
          AV0IM007.AV0IMQ13[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
          AV0IM007.AV0IMQ23[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
          AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
          AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
        else
          if (AV0IW01.AV0IWX4 == 11)
            AV0IM007.AV0IMTL3 = PG3REC.SY4IDDSC[AV0IWX4];
            AV0IM007.AV0IMT13 = AV0IW10.AV0IW1T[AV0IWX1];
            AV0IM007.AV0IMT23 = AV0IW10.AV0IW2T[AV0IWX1];
            AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
            AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
          else
            AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
            AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 11;
            AV0IM004.AV0IMSZ3[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
            AV0IM004.AV0IMQ13[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
            AV0IM004.AV0IMQ23[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
            AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
            AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

          end
        end
      end

    end

    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;

  end

  if (AV0IW01.AV0IWX4 > 11)
    AV0IM004.AV0IMT13 = AV0IW01.AV0IWTQ1;
    AV0IM004.AV0IMT23 = AV0IW01.AV0IWTQ2;
  else
    if (AV0IW01.AV0IWX4 > 5)
      AV0IM007.AV0IMT13 = AV0IW01.AV0IWTQ1;
      AV0IM007.AV0IMT23 = AV0IW01.AV0IWTQ2;
    else
      AV0IM002.AV0IMT13 = AV0IW01.AV0IWTQ1;
      AV0IM002.AV0IMT23 = AV0IW01.AV0IWTQ2;
      AV0IM002.AV0IMTL3 = "*TOTAL*";
    end
  end

end // end AV0ISDE

// READ AND SETUP SCREEN DATA 1A
Function AV0ISEA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0IW01.AV0IWFT = "Y";

  AV7REC.XWHCD = AV0IW05.XWHCD[AV0IWX3];
  AV7REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];
  AV7REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM002.AV0IMST4 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM004.AV0IMST4 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM007.AV0IMST4 = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM002.AV0IMCL4 = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM004.AV0IMCL4 = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM007.AV0IMCL4 = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  AV7REC.XSDCD = AV0IW05.PC2INSEG[AV0IWX3];
  AV7REC.XSACD = AV0IW05.XSACD[AV0IWX3];
  AV7REC.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV7REC.AV4PRDBD = -1;
  AV7REC.XOWCD = AV0IW05.XOWCD[AV0IWX3];
  AV7REC.XQACD = "**";
  AV7REC.XUMCD = AV0IW05.XUMCD[AV0IWX3];
  AV0IM002.AV0IMUM4 = AV0IW05.XUMCD[AV0IWX3];
  AV0IM004.AV0IMUM4 = AV0IW05.XUMCD[AV0IWX3];
  AV0IM007.AV0IMUM4 = AV0IW05.XUMCD[AV0IWX3];

  set AV0IW10 empty;

  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  while (SQLCA.VAGen_SQLCODE == 0)

    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

    if (VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      if (VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[3] = "AV0ISBA";
        TA1REC.TA1LOCAT[4] = "IO2370";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else

        AV0IM002.AV0IMWH4 = AV7REC.XWHCD;
        AV0IM004.AV0IMWH4 = AV7REC.XWHCD;
        AV0IM007.AV0IMWH4 = AV7REC.XWHCD;

        if (AV7REC.XQACD == "01")
          AV0IM002.AV0IMC14 = AV7REC.AV1CUPRC;
          AV0IM004.AV0IMC14 = AV7REC.AV1CUPRC;
          AV0IM007.AV0IMC14 = AV7REC.AV1CUPRC;
          AV0IM002.AV0IMS14 = 0;
          AV0IM002.AV0IML14 = AV7REC.AV1PRPRC;
          AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
          AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
          AV0ISZA();
          AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
          if (AV0IW01.AV0IWREM > 0)
            AV0IM002.AV0IMP14 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
          else
            if (AV0IW01.AV0IWREM < 0)
              AV0IM002.AV0IMP14 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
            else
              AV0IM002.AV0IMP14 = 0;
            end
          end
        end
        if (AV0IM001.AV0IOPT == 1)
          if (AV7REC.XLCCD == "20"
           || AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISEB();
          end
        end
        if (AV0IM001.AV0IOPT == 2)
          if (AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISEB();
          end
        end
        if (AV0IM001.AV0IOPT == 3)
          if (AV7REC.XLCCD == "20"
           && AV7REC.XQACD == "01")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISEB();
          end
        end
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISEB();
          end
        end
        if (AV0IM001.AV0IOPT == 5)
          if (AV7REC.XLCCD == "10"
           && AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISEB();
          end
        end
      end
    end
  end

  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (AV0IW01.AV0IWFT == "Y")
    AV0IM002.AV0IMTL4 = "*TOTAL*";
    AV0IM002.AV0IMT14 = 0;
    AV0IM002.AV0IMT24 = 0;
  else
    if (COMMAREA.CAILVL[1] == "Y")
      if (AV0IW10.AV0IWCQ1 > 0)
        AV0IM002.AV0IMS14 = AV0IW10.AV0IWCQ1;
        AV0IM002.AV0IMGM4 = AV0IW10.AV0IWGM1;
        AV0IM004.AV0IMGM8 = AV0IW10.AV0IWGM1;
        AV0IM007.AV0IMGM8 = AV0IW10.AV0IWGM1;
      else
        AV0IM002.AV0IMGM4 = AV0IW10.AV0IWGM2;
      end

      AV0IM004.AV0IMGM9 = AV0IW10.AV0IWGM2;
      AV0IM007.AV0IMGM9 = AV0IW10.AV0IWGM2;
      AV0IM002.AV0IMS24 = AV0IW10.AV0IWCQ2;
    end

     /* HERE WE WILL SETUP THE VARYABLE SCREEN FIELDS*/
     /* AND GET ALL THE DEFINITIONS FROM THE DIFFERENT TABLES*/
    AV0ISED();
  end
end // end AV0ISEA

// READ AND SETUP SCREEN DATA 1A
Function AV0ISEB()

    /* PROCESS PRICE AND PERCENT DIFFERENCE*/

  if (AV7REC.XQACD == "01")
    AV0ISEC();
  else
    AV0IM004.AV0IMC24 = AV7REC.AV1CUPRC;
    AV0IM002.AV0IMC24 = AV7REC.AV1CUPRC;
    AV0IM002.AV0IML24 = AV7REC.AV1PRPRC;
    AV0IM002.AV0IMS24 = 0;
    AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
    AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
    AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
    if (AV0IW01.AV0IWREM > 0)
      AV0IM002.AV0IMP24 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
    else
      if (AV0IW01.AV0IWREM < 0)
        AV0IM002.AV0IMP24 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
      else
        AV0IM002.AV0IMP24 = 0;
      end
    end
    AV0IW01.AV0IWFT = "N";
    AV0ISEC();
  end

  if (AV7REC.XQACD == "02")
    AV0IM002.AV0IMCM4 = AV7REC.AV2CMNT;
  else
    AV0IM002.AV0IMCM4 = " ";
  end
end // end AV0ISEB

// SETUP TOTALS FOR APPAREL SCREE
Function AV0ISEC()

    /* THIS IS THE AREA WHERE THE TOTALS FOR 1 APPAREL*/
    /* WILL BE ACCUMULATED*/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (AV7REC.XQACD == "01"
     && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
      AV0IW01.AV0IWQTY = AV0IW10.AV0IW1T[sysVar.arrayIndex];
      AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
      AV0IW10.AV0IW1T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

    else
      if (AV7REC.XQACD == "02"
       && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
        AV0IW01.AV0IWQTY = AV0IW10.AV0IW2T[sysVar.arrayIndex];
        AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
        AV0IW10.AV0IW2T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;


  end
end // end AV0ISEC

// GET IDS AND SET APRL 1 FIELDS
Function AV0ISED()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY1REC.XGPCD = AV0IM001.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM002.AV0IMSD4 = SY1REC.SY1SSTNM;
  AV0IM004.AV0IMSD4 = SY1REC.SY1SSTNM;
  AV0IM007.AV0IMSD4 = SY1REC.SY1SSTNM;

  SY2REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  SY2REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY2REC.XGPCD = AV0IM001.XGPCD;
  SY2REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  SY2REC.SY2CLRAB = " ";
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0130 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM002.AV0IMCD4 = SY2REC.SY2CLRAB;
  AV0IM004.AV0IMCD4 = SY2REC.SY2CLRAB;
  AV0IM007.AV0IMCD4 = SY2REC.SY2CLRAB;

  AV0IM002.AV0IMDM4 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM004.AV0IMDM4 = AV0IW05.XDMCD[AV0IWX3];
  AV0IM007.AV0IMDM4 = AV0IW05.XDMCD[AV0IWX3];

  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0IM002.AV0IMGD4 = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0IM002.AV0IMSP4 = XSPTBL.XSPABRV[sysVar.arrayIndex];
  end


  AV0ISEE(); /* WRITE SIZE RELATED DATA*/


end // end AV0ISED

// SET SIZE RELATED FIELDS FOR 1
Function AV0ISEE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  AV0ISBF(); /* CALL SIZE CONVERSION PG1050*/

  AV0IW01.AV0IWTQ1 = 0;
  AV0IW01.AV0IWTQ2 = 0;
  AV0IW01.AV0IWX4 = 1;

  while (AV0IW01.AV0IWX4 <= 16
   && PG3REC.SY4IDDSC[AV0IWX4] > " ")

    AV0IW01.AV0IWX1 = PG3REC.SY5SZID[AV0IWX4];

    if (AV0IW01.AV0IWX4 < 5)
      AV0IM002.AV0IMSZ4[AV0IWX4] = PG3REC.SY4IDDSC[AV0IWX4];
      AV0IM002.AV0IMQ14[AV0IWX4] = AV0IW10.AV0IW1T[AV0IWX1];
      AV0IM002.AV0IMQ24[AV0IWX4] = AV0IW10.AV0IW2T[AV0IWX1];
      AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
      AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
    else
      if (AV0IW01.AV0IWX4 == 5)
        AV0IM002.AV0IMTL4 = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM002.AV0IMT14 = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM002.AV0IMT24 = AV0IW10.AV0IW2T[AV0IWX1];
        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
      else
        if (AV0IW01.AV0IWX4 > 5
         && AV0IW01.AV0IWX4 < 11)
          AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
          AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 5;
          AV0IM007.AV0IMSZ4[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
          AV0IM007.AV0IMQ14[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
          AV0IM007.AV0IMQ24[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
          AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
          AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
        else
          if (AV0IW01.AV0IWX4 == 11)
            AV0IM007.AV0IMTL4 = PG3REC.SY4IDDSC[AV0IWX4];
            AV0IM007.AV0IMT14 = AV0IW10.AV0IW1T[AV0IWX1];
            AV0IM007.AV0IMT24 = AV0IW10.AV0IW2T[AV0IWX1];
            AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
            AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

          else
            AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
            AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 11;
            AV0IM004.AV0IMSZ4[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
            AV0IM004.AV0IMQ14[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
            AV0IM004.AV0IMQ24[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
            AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
            AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

          end
        end
      end

    end

    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;

  end

  if (AV0IW01.AV0IWX4 > 11)
    AV0IM004.AV0IMT14 = AV0IW01.AV0IWTQ1;
    AV0IM004.AV0IMT24 = AV0IW01.AV0IWTQ2;
  else

    if (AV0IW01.AV0IWX4 > 5)
      AV0IM007.AV0IMT14 = AV0IW01.AV0IWTQ1;
      AV0IM007.AV0IMT24 = AV0IW01.AV0IWTQ2;
    else
      AV0IM002.AV0IMT14 = AV0IW01.AV0IWTQ1;
      AV0IM002.AV0IMT24 = AV0IW01.AV0IWTQ2;
    end
  end

end // end AV0ISEE

// READ AND SETUP SCREEN DATA 1
Function AV0ISJA()

    /* SET UP THREE SCREEN RECORDS*/

  if (AV0IW01.AV0IWX3 >= AV0IW01.AV0IWX2)
    converseLib.validationFailed(011);
    exit stack;
  end

  set AV0IM003 initial;
  set AV0IM005 initial;
  set AV0IM006 initial;
  set AV0IM008 initial;
  set AV0IM009 initial;
  set AV0IM010 initial;

  AV0IM003.AV0IMCP1 = 0;
  AV0IM003.AV0IMEP1 = 0;
  AV0IM003.AV0IMPP1 = 0;
  AV0IM003.AV0IMPD1 = 0;
  AV0IM003.AV0IMCC1 = 0;
  AV0IM003.AV0IMGM1 = 0;
  AV0IM003.AV0IMCP2 = 0;
  AV0IM003.AV0IMEP2 = 0;
  AV0IM003.AV0IMPP2 = 0;
  AV0IM003.AV0IMPD2 = 0;
  AV0IM003.AV0IMCC2 = 0;
  AV0IM003.AV0IMGM2 = 0;

  if (AV0IM001.XWHCD <= " ")

    AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

    if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
      AV0ISKA(); /* READ DATA BASE FILE UNTIL SQLCODE =*/
                                   /* 100*/
    else
      /* AV0IS31;*/
      /* AV0IS34;*/
      /* AV0IS39;*/
      converseLib.validationFailed(11);
      exit stack;
    end

    AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

    if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
      AV0ISLA();
    else
      /* AV0IS31;*/
      /* AV0IS34;*/
      /* AV0IS39;*/
      converseLib.validationFailed(11);
      exit stack;
    end

    AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

    if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
      AV0ISMA();
    else
      /* AV0IS31;*/
      /* AV0IS34;*/
      /* AV0IS39;*/
      converseLib.validationFailed(11);
      exit stack;
    end

    AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

    if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
      AV0ISNA(); /* load maps 8,9,10 from maps 3,5,6*/
    else
      /* AV0IS31;*/
      /* AV0IS34;*/
      /* AV0IS39;*/
      converseLib.validationFailed(11);
      exit stack;
    end


    if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
      AV0ISOA();
      /* AV0IS31;*/
      /* AV0IS34;*/
      /* AV0IS39;*/
    else
      converseLib.validationFailed(11);
      exit stack;
    end

    AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

    if (AV0IW01.AV0IWX2 >= AV0IW01.AV0IWX3)
      AV0ISPA(); /* load last warehouse (whse 51) from ws*/
      AV0IS31();
      AV0IS34();
      AV0IS39();
    else
      converseLib.validationFailed(11);
      exit stack;
    end

  else
    AV0IW01.AV0IWX3 = AV0IW01.AV0IWX3 + 1;

    if (AV0IW01.AV0IWX2 >= AV0IWX3)
      AV0ISKA();
      AV0IS31();
      AV0IS34();
      AV0IS39();
    else
      converseLib.validationFailed(11);
      exit stack;
    end
  end

end // end AV0ISJA

// READ AND SETUP SCREEN DATA 1A
Function AV0ISKA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0IW01.AV0IWFT = "Y";

  AV7REC.XWHCD = AV0IW05.XWHCD[AV0IWX3];
  AV7REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];

  AV7REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM003.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM005.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM006.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];

  AV0IM003.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM005.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM006.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];

  AV7REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];

  AV7REC.XSDCD = AV0IW05.PC2INSEG[AV0IWX3];
  AV0IM003.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3]; /* inventory segment*/
  AV0IM005.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3];
  AV0IM006.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3];

  AV7REC.XSACD = AV0IW05.XSACD[AV0IWX3];

  AV7REC.XPGCD = AV0IW05.XPGCD[AV0IWX3]; /* package type*/
  AV0IM003.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV0IM005.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV0IM006.XPGCD = AV0IW05.XPGCD[AV0IWX3];

  AV7REC.AV4PRDBD = -1;
  AV7REC.XOWCD = AV0IW05.XOWCD[AV0IWX3];
  AV7REC.XQACD = "**";
  AV7REC.XUMCD = AV0IW05.XUMCD[AV0IWX3];

  if (AV0IW05.XWHCD[AV0IWX3] in XWHTBL.XWHCD)
    AV0IM003.AV0IMRG1 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM005.AV0IMRG1 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM006.AV0IMRG1 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XDMCD[AV0IWX3] in XDMTBL.XDMCD)
    AV0IM003.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM005.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM006.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XUMCD[AV0IWX3] in XUMTBL.XUMCD)
    AV0IM003.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM005.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM006.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  set AV0IW10 empty;

  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  while (SQLCA.VAGen_SQLCODE == 0)

    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

    if (VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      if (VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[3] = "AV0ISKA";
        TA1REC.TA1LOCAT[4] = "IO2370";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else
        if (AV7REC.XQACD == "01")
          AV0IM003.AV0IMCP1 = AV7REC.AV1CUPRC;
          AV0IM003.AV0IMEP1 = AV7REC.AV1CUEDT;
          AV0IM003.AV0IMPP1 = AV7REC.AV1PRPRC;
          AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
          AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
          AV0ISZA();
          AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
          if (AV0IW01.AV0IWREM > 0)
            AV0IM003.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
          else
            if (AV0IW01.AV0IWREM < 0)
              AV0IM003.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
            else
              AV0IM003.AV0IMPD1 = 0;
            end
          end
        end
        if (AV0IM001.AV0IOPT == 1)
          if (AV7REC.XLCCD == "20"
           || AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISKB();
          end
        end
        if (AV0IM001.AV0IOPT == 2)
          if (AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISKB();
          end
        end
        if (AV0IM001.AV0IOPT == 3)
          if (AV7REC.XLCCD == "20"
           && AV7REC.XQACD == "01")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISKB();
          end
        end
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISKB();
          end
        end
        if (AV0IM001.AV0IOPT == 5)
          if (AV7REC.XLCCD == "10"
           && AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISKB();
          end
        end
      end
    end
  end

  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (AV0IW01.AV0IWFT == "Y")
      /* NEXT SENTENCE*/
  else
    if (AV7REC.XLCCD == "20")
      AV0IM003.AV0IMLCD = "CLSOUT";
    else
      AV0IM003.AV0IMLCD = "ACTIVE";
    end

     /* HERE WE WILL SETUP THE VARYABLE SCREEN FIELDS*/
     /* AND GET ALL THE DEFINITIONS FROM THE DIFFERENT TABLES*/
    AV0ISKD();
  end
end // end AV0ISKA

// READ AND SETUP SCREEN DATA 1A
Function AV0ISKB()

    /* PROCESS PRICE AND PERCENT DIFFERENCE*/

  if (AV7REC.XQACD == "01")
    AV0ISKC();
  else
    AV0IM003.AV0IMCP2 = AV7REC.AV1CUPRC;
    AV0IM003.AV0IMPP2 = AV7REC.AV1PRPRC;
    AV0IM003.AV0IMEP2 = AV7REC.AV1CUEDT;
    AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
    AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
    AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
    if (AV0IW01.AV0IWREM > 0)
      AV0IM003.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
    else
      if (AV0IW01.AV0IWREM < 0)
        AV0IM003.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
      else
        AV0IM003.AV0IMPD2 = 0;
      end
    end
    AV0IW01.AV0IWFT = "N";
    AV0ISKC();
  end

  if (AV7REC.XQACD == "02")
    AV0IM003.AV0IMCM1 = AV7REC.AV2CMNT;
  else
    AV0IM003.AV0IMCM1 = " ";
  end

end // end AV0ISKB

// SETUP TOTALS FOR APPAREL SCREE
Function AV0ISKC()

    /* THIS IS THE AREA WHERE THE TOTALS FOR 1 APPAREL*/
    /* WILL BE ACCUMULATED*/

  set AV0IW09 empty;


  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (AV7REC.XQACD == "01"
     && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
      AV0IW01.AV0IWQTY = AV0IW10.AV0IW1T[sysVar.arrayIndex];
      AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
      AV0IW10.AV0IW1T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

    else
      if (AV7REC.XQACD == "02"
       && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
        AV0IW01.AV0IWQTY = AV0IW10.AV0IW2T[sysVar.arrayIndex];
        AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
        AV0IW10.AV0IW2T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;


  end
end // end AV0ISKC

// GET IDS AND SET APRL 1 FIELDS
Function AV0ISKD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY1REC.XGPCD = AV0IM001.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM003.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM005.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM006.AV0IMSTD = SY1REC.SY1SSTNM;

  SY2REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  SY2REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY2REC.XGPCD = AV0IM001.XGPCD;
  SY2REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  SY2REC.SY2CLRAB = " ";
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0130 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM003.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM005.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM006.AV0IMCLD = SY2REC.SY2CLRAB;


  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0IM003.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* gender age*/
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0IM003.XSPABRV = XSPTBL.XSPABRV[sysVar.arrayIndex]; /* sport activity*/
  end


  AV0ISKE(); /* WRITE SIZE RELATED DATA*/


end // end AV0ISKD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ISKE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  if (AV0IW05.XGPCD[AV0IWX3] == PG3REC.XGPCD
   && AV0IW05.SY1STNBR[AV0IWX3] == PG3REC.SY1STNBR
   && AV0IW05.SY2CLRID[AV0IWX3] == PG3REC.SY2CLRID
   && AV0IW05.XDMCD[AV0IWX3] == PG3REC.XDMCD)
    /* next sentence*/
  else
    AV0ISBF(); /* CALL SIZE CONVERSION PG1050*/
  end


  AV0IW01.AV0IWTQ1 = 0;
  AV0IW01.AV0IWTQ2 = 0;
  AV0IW01.AV0IWX4 = 1;

  while (AV0IW01.AV0IWX4 <= 40
   && PG3REC.SY4IDDSC[AV0IWX4] > " ")

    AV0IW01.AV0IWX1 = PG3REC.SY5SZID[AV0IWX4];

    if (AV0IW01.AV0IWX4 < 13)
      AV0IM003.AV0IMSIZ[AV0IWX4] = PG3REC.SY4IDDSC[AV0IWX4];
      AV0IM003.AV0IMQ11[AV0IWX4] = AV0IW10.AV0IW1T[AV0IWX1];
      AV0IM003.AV0IMQ12[AV0IWX4] = AV0IW10.AV0IW2T[AV0IWX1];
      if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
        AV0IM003.AV0IMIN1[AV0IWX4] = ">";
      end

      if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
        AV0IM003.AV0IMIN2[AV0IWX4] = ">";
      end

      AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
      AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
    else
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 12;
      if (AV0IW01.AV0IWX5 < 16)
        AV0IM005.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM005.AV0IMQ11[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM005.AV0IMQ12[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM005.AV0IMIN1[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM005.AV0IMIN2[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
      else
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 27;
        AV0IM006.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM006.AV0IMQ11[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM006.AV0IMQ12[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM006.AV0IMIN1[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM006.AV0IMIN2[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

      end

    end

    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;

  end

  if (AV0IW01.AV0IWX4 > 26)
    AV0IM006.AV0IMT11 = AV0IW01.AV0IWTQ1;
    AV0IM006.AV0IMT21 = AV0IW01.AV0IWTQ2;
  else
    if (AV0IW01.AV0IWX4 > 11)
      AV0IM005.AV0IMQ11[15] = AV0IW01.AV0IWTQ1;
      AV0IM005.AV0IMQ12[15] = AV0IW01.AV0IWTQ2;
      AV0IM005.AV0IMSIZ[15] = "TOTAL";
    else
      if (AV0IW01.AV0IWX4 < 12)
        AV0IM003.AV0IMQ11[12] = AV0IW01.AV0IWTQ1;
        AV0IM003.AV0IMQ12[12] = AV0IW01.AV0IWTQ2;
        AV0IM003.AV0IMSIZ[12] = "TOTAL";
      end
    end
  end

end // end AV0ISKE

// READ AND SETUP SCREEN DATA 1A
Function AV0ISLA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0IW01.AV0IWFT = "Y";

  AV7REC.XWHCD = AV0IW05.XWHCD[AV0IWX3];
  AV7REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];

  AV7REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM003.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM005.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM006.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];

  AV7REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM003.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM005.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM006.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];

  AV7REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  AV7REC.XSDCD = AV0IW05.PC2INSEG[AV0IWX3];
  AV7REC.XSACD = AV0IW05.XSACD[AV0IWX3];
  AV7REC.XPGCD = AV0IW05.XPGCD[AV0IWX3];

  AV7REC.AV4PRDBD = -1;
  AV7REC.XOWCD = AV0IW05.XOWCD[AV0IWX3];
  AV7REC.XQACD = "**";
  AV7REC.XUMCD = AV0IW05.XUMCD[AV0IWX3];

  if (AV0IW05.XWHCD[AV0IWX3] in XWHTBL.XWHCD)
    AV0IM003.AV0IMRG2 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM005.AV0IMRG2 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM006.AV0IMRG2 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XDMCD[AV0IWX3] in XDMTBL.XDMCD)
    AV0IM003.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM005.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM006.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XUMCD[AV0IWX3] in XUMTBL.XUMCD)
    AV0IM003.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM005.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM006.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  set AV0IW10 empty;

  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  while (SQLCA.VAGen_SQLCODE == 0)

    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

    if (VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      if (VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[3] = "AV0ISLA";
        TA1REC.TA1LOCAT[4] = "IO2370";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else
        if (AV7REC.XQACD == "01")
          AV0IM003.AV0IMCP1 = AV7REC.AV1CUPRC;
          AV0IM003.AV0IMEP1 = AV7REC.AV1CUEDT;
          AV0IM003.AV0IMPP1 = AV7REC.AV1PRPRC;
          AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
          AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
          AV0ISZA();
          AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
          if (AV0IW01.AV0IWREM > 0)
            AV0IM003.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
          else
            if (AV0IW01.AV0IWREM < 0)
              AV0IM003.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
            else
              AV0IM003.AV0IMPD1 = 0;
            end
          end
        end
        if (AV0IM001.AV0IOPT == 1)
          if (AV7REC.XLCCD == "20"
           || AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISLB();
          end
        end
        if (AV0IM001.AV0IOPT == 2)
          if (AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISLB();
          end
        end
        if (AV0IM001.AV0IOPT == 3)
          if (AV7REC.XLCCD == "20"
           && AV7REC.XQACD == "01")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISLB();
          end
        end
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISLB();
          end
        end
        if (AV0IM001.AV0IOPT == 5)
          if (AV7REC.XLCCD == "10"
           && AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISLB();
          end
        end
      end
    end
  end

  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (AV0IW01.AV0IWFT == "Y")
     /* NEXT SENTENCE*/
  else
    if (AV7REC.XLCCD == "20")
      AV0IM003.AV0IMLCD = "CLSOUT";
    else
      AV0IM003.AV0IMLCD = "ACTIVE";
    end

     /* HERE WE WILL SETUP THE VARYABLE SCREEN FIELDS*/
     /* AND GET ALL THE DEFINITIONS FROM THE DIFFERENT TABLES*/
    AV0ISLD();
  end
end // end AV0ISLA

// READ AND SETUP SCREEN DATA 1A
Function AV0ISLB()

    /* PROCESS PRICE AND PERCENT DIFFERENCE*/

  if (AV7REC.XQACD == "01")
    AV0ISLC();
  else
    AV0IM003.AV0IMCP2 = AV7REC.AV1CUPRC;
    AV0IM003.AV0IMPP2 = AV7REC.AV1PRPRC;
    AV0IM003.AV0IMEP2 = AV7REC.AV1CUEDT;
    AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
    AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
    AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
    if (AV0IW01.AV0IWREM > 0)
      AV0IM003.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
    else
      if (AV0IW01.AV0IWREM < 0)
        AV0IM003.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
      else
        AV0IM003.AV0IMPD2 = 0;
      end
    end
    AV0IW01.AV0IWFT = "N";
    AV0ISLC();
  end

  if (AV7REC.XQACD == "02")
    AV0IM003.AV0IMCM2 = AV7REC.AV2CMNT;
  else
    AV0IM003.AV0IMCM2 = " ";
  end
end // end AV0ISLB

// SETUP TOTALS FOR APPAREL SCREE
Function AV0ISLC()

    /* THIS IS THE AREA WHERE THE TOTALS FOR 1 APPAREL*/
    /* WILL BE ACCUMULATED*/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (AV7REC.XQACD == "01"
     && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
      AV0IW01.AV0IWQTY = AV0IW10.AV0IW1T[sysVar.arrayIndex];
      AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
      AV0IW10.AV0IW1T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

    else
      if (AV7REC.XQACD == "02"
       && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
        AV0IW01.AV0IWQTY = AV0IW10.AV0IW2T[sysVar.arrayIndex];
        AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
        AV0IW10.AV0IW2T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;


  end
end // end AV0ISLC

// GET IDS AND SET APRL 1 FIELDS
Function AV0ISLD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY1REC.XGPCD = AV0IM001.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM003.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM005.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM006.AV0IMSTD = SY1REC.SY1SSTNM;

  SY2REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  SY2REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY2REC.XGPCD = AV0IM001.XGPCD;
  SY2REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  SY2REC.SY2CLRAB = " ";
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0130 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM003.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM005.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM006.AV0IMCLD = SY2REC.SY2CLRAB;


  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0IM003.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* gender age abrev*/
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0IM003.XSPABRV = XSPTBL.XSPABRV[sysVar.arrayIndex]; /* sport activity*/
  end


  AV0ISLE(); /* WRITE SIZE RELATED DATA*/


end // end AV0ISLD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ISLE()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/

  if (AV0IW05.XGPCD[AV0IWX3] == PG3REC.XGPCD
   && AV0IW05.SY1STNBR[AV0IWX3] == PG3REC.SY1STNBR
   && AV0IW05.SY2CLRID[AV0IWX3] == PG3REC.SY2CLRID
   && AV0IW05.XDMCD[AV0IWX3] == PG3REC.XDMCD)
    /* next sentence*/
  else
    AV0ISBF(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0IW01.AV0IWTQ1 = 0;
  AV0IW01.AV0IWTQ2 = 0;
  AV0IW01.AV0IWX4 = 1;

  while (AV0IW01.AV0IWX4 <= 40
   && PG3REC.SY4IDDSC[AV0IWX4] > " ")

    AV0IW01.AV0IWX1 = PG3REC.SY5SZID[AV0IWX4];

    if (AV0IW01.AV0IWX4 < 13)
      AV0IM003.AV0IMSIZ[AV0IWX4] = PG3REC.SY4IDDSC[AV0IWX4];
      AV0IM003.AV0IMQ21[AV0IWX4] = AV0IW10.AV0IW1T[AV0IWX1];
      AV0IM003.AV0IMQ22[AV0IWX4] = AV0IW10.AV0IW2T[AV0IWX1];
      if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
        AV0IM003.AV0IMIN3[AV0IWX4] = ">";
      end

      if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
        AV0IM003.AV0IMIN4[AV0IWX4] = ">";
      end

      AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
      AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
    else
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 12;
      if (AV0IW01.AV0IWX5 < 16)
        AV0IM005.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM005.AV0IMQ21[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM005.AV0IMQ22[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM005.AV0IMIN3[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM005.AV0IMIN4[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
      else
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 27;
        AV0IM006.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM006.AV0IMQ21[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM006.AV0IMQ22[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM006.AV0IMIN3[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM006.AV0IMIN4[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

      end

    end

    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;

  end

  if (AV0IW01.AV0IWX4 > 26)
    AV0IM006.AV0IMT12 = AV0IW01.AV0IWTQ1;
    AV0IM006.AV0IMT22 = AV0IW01.AV0IWTQ2;
  else
    if (AV0IW01.AV0IWX4 > 11)
      AV0IM005.AV0IMQ21[15] = AV0IW01.AV0IWTQ1;
      AV0IM005.AV0IMQ22[15] = AV0IW01.AV0IWTQ2;
      AV0IM005.AV0IMSIZ[15] = "TOTAL";
    else
      if (AV0IW01.AV0IWX4 < 12)
        AV0IM003.AV0IMQ21[12] = AV0IW01.AV0IWTQ1;
        AV0IM003.AV0IMQ22[12] = AV0IW01.AV0IWTQ2;
        AV0IM003.AV0IMSIZ[12] = "TOTAL";
      end
    end
  end

end // end AV0ISLE

// READ AND SETUP SCREEN DATA 1A
Function AV0ISMA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0IW01.AV0IWFT = "Y";

  AV7REC.XWHCD = AV0IW05.XWHCD[AV0IWX3];
  AV7REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];

  AV7REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM003.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM005.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM006.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];

  AV7REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM003.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM005.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM006.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];

  AV7REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];

  AV7REC.XSDCD = AV0IW05.PC2INSEG[AV0IWX3]; /* inventory segment*/
  AV0IM003.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3];
  AV0IM005.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3];
  AV0IM006.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3];

  AV7REC.XSACD = AV0IW05.XSACD[AV0IWX3];

  AV7REC.XPGCD = AV0IW05.XPGCD[AV0IWX3]; /* package type*/
  AV0IM003.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV0IM005.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV0IM006.XPGCD = AV0IW05.XPGCD[AV0IWX3];

  AV7REC.AV4PRDBD = -1;
  AV7REC.XOWCD = AV0IW05.XOWCD[AV0IWX3];
  AV7REC.XQACD = "**";
  AV7REC.XUMCD = AV0IW05.XUMCD[AV0IWX3];

  if (AV0IW05.XWHCD[AV0IWX3] in XWHTBL.XWHCD)
    AV0IM003.AV0IMRG3 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM005.AV0IMRG3 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM006.AV0IMRG3 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XDMCD[AV0IWX3] in XDMTBL.XDMCD)
    AV0IM003.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM005.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM006.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XUMCD[AV0IWX3] in XUMTBL.XUMCD)
    AV0IM003.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM005.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM006.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  set AV0IW10 empty;

  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  while (SQLCA.VAGen_SQLCODE == 0)

    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

    if (VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      if (VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[3] = "AV0ISMA";
        TA1REC.TA1LOCAT[4] = "IO2370";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else
        if (AV7REC.XQACD == "01")
          AV0IM003.AV0IMCP1 = AV7REC.AV1CUPRC;
          AV0IM003.AV0IMEP1 = AV7REC.AV1CUEDT;
          AV0IM003.AV0IMPP1 = AV7REC.AV1PRPRC;
          AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
          AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
          AV0ISZA();
          AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
          if (AV0IW01.AV0IWREM > 0)
            AV0IM003.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
          else
            if (AV0IW01.AV0IWREM < 0)
              AV0IM003.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
            else
              AV0IM003.AV0IMPD1 = 0;
            end
          end
        end
        if (AV0IM001.AV0IOPT == 1)
          if (AV7REC.XLCCD == "20"
           || AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISMB();
          end
        end
        if (AV0IM001.AV0IOPT == 2)
          if (AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISMB();
          end
        end
        if (AV0IM001.AV0IOPT == 3)
          if (AV7REC.XLCCD == "20"
           && AV7REC.XQACD == "01")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISMB();
          end
        end
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISMB();
          end
        end
        if (AV0IM001.AV0IOPT == 5)
          if (AV7REC.XLCCD == "10"
           && AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZA();
            AV0ISMB();
          end
        end
      end
    end
  end

  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (AV0IW01.AV0IWFT == "Y")
     /* NEXT SENTENCE*/
  else
    if (AV7REC.XLCCD == "20")
      AV0IM003.AV0IMLCD = "CLSOUT";
    else
      AV0IM003.AV0IMLCD = "ACTIVE";
    end

     /* HERE WE WILL SETUP THE VARYABLE SCREEN FIELDS*/
     /* AND GET ALL THE DEFINITIONS FROM THE DIFFERENT TABLES*/
    AV0ISMD();
  end
end // end AV0ISMA

// READ AND SETUP SCREEN DATA 1A
Function AV0ISMB()

    /* PROCESS PRICE AND PERCENT DIFFERENCE*/

  if (AV7REC.XQACD == "01")
    AV0ISMC();
  else
    AV0IM003.AV0IMCP2 = AV7REC.AV1CUPRC;
    AV0IM003.AV0IMPP2 = AV7REC.AV1PRPRC;
    AV0IM003.AV0IMEP2 = AV7REC.AV1CUEDT;
    AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
    AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
    AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
    if (AV0IW01.AV0IWREM > 0)
      AV0IM003.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
    else
      if (AV0IW01.AV0IWREM < 0)
        AV0IM003.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
      else
        AV0IM003.AV0IMPD2 = 0;
      end
    end
    AV0IW01.AV0IWFT = "N";
    AV0ISMC();
  end

  if (AV7REC.XQACD == "02")
    AV0IM003.AV0IMCM3 = AV7REC.AV2CMNT;
  else
    AV0IM003.AV0IMCM3 = " ";
  end
end // end AV0ISMB

// SETUP TOTALS FOR APPAREL SCREE
Function AV0ISMC()

    /* THIS IS THE AREA WHERE THE TOTALS FOR 1 APPAREL*/
    /* WILL BE ACCUMULATED*/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (AV7REC.XQACD == "01"
     && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
      AV0IW01.AV0IWQTY = AV0IW10.AV0IW1T[sysVar.arrayIndex];
      AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
      AV0IW10.AV0IW1T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

    else
      if (AV7REC.XQACD == "02"
       && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
        AV0IW01.AV0IWQTY = AV0IW10.AV0IW2T[sysVar.arrayIndex];
        AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
        AV0IW10.AV0IW2T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;


  end
end // end AV0ISMC

// GET IDS AND SET APRL 1 FIELDS
Function AV0ISMD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY1REC.XGPCD = AV0IM001.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM003.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM005.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM006.AV0IMSTD = SY1REC.SY1SSTNM;

  SY2REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  SY2REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY2REC.XGPCD = AV0IM001.XGPCD;
  SY2REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  SY2REC.SY2CLRAB = " ";
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[3] = "AV0ISBD";
    TA1REC.TA1LOCAT[4] = "IO0130 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM003.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM005.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM006.AV0IMCLD = SY2REC.SY2CLRAB;


  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0IM003.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* gender age abrev*/
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0IM003.XSPABRV = XSPTBL.XSPABRV[sysVar.arrayIndex]; /* sport activity*/
  end


  AV0ISME(); /* WRITE SIZE RELATED DATA*/


end // end AV0ISMD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ISME()

   /* SET SIZE RELATED DATA FOR APPAREL SCREEN PRD 1*/


  if (AV0IW05.XGPCD[AV0IWX3] == PG3REC.XGPCD
   && AV0IW05.SY1STNBR[AV0IWX3] == PG3REC.SY1STNBR
   && AV0IW05.SY2CLRID[AV0IWX3] == PG3REC.SY2CLRID
   && AV0IW05.XDMCD[AV0IWX3] == PG3REC.XDMCD)
    /* next sentence*/
  else
    AV0ISBF(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0IW01.AV0IWTQ1 = 0;
  AV0IW01.AV0IWTQ2 = 0;
  AV0IW01.AV0IWX4 = 1;

  while (AV0IW01.AV0IWX4 <= 40
   && PG3REC.SY4IDDSC[AV0IWX4] > " ")

    AV0IW01.AV0IWX1 = PG3REC.SY5SZID[AV0IWX4];

    if (AV0IW01.AV0IWX4 < 13)
      AV0IM003.AV0IMSIZ[AV0IWX4] = PG3REC.SY4IDDSC[AV0IWX4];
      AV0IM003.AV0IMQ31[AV0IWX4] = AV0IW10.AV0IW1T[AV0IWX1];
      AV0IM003.AV0IMQ32[AV0IWX4] = AV0IW10.AV0IW2T[AV0IWX1];
      if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
        AV0IM003.AV0IMIN5[AV0IWX4] = ">";
      end

      if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
        AV0IM003.AV0IMIN6[AV0IWX4] = ">";
      end

      AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
      AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
    else
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 12;
      if (AV0IW01.AV0IWX5 < 16)
        AV0IM005.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM005.AV0IMQ31[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM005.AV0IMQ32[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM005.AV0IMIN5[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM005.AV0IMIN6[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
      else
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 27;
        AV0IM006.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM006.AV0IMQ31[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM006.AV0IMQ32[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM006.AV0IMIN5[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM006.AV0IMIN6[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

      end

    end

    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;

  end

  if (AV0IW01.AV0IWX4 > 26)
    AV0IM006.AV0IMT13 = AV0IW01.AV0IWTQ1;
    AV0IM006.AV0IMT23 = AV0IW01.AV0IWTQ2;
  else
    if (AV0IW01.AV0IWX4 > 11)
      AV0IM005.AV0IMQ31[15] = AV0IW01.AV0IWTQ1;
      AV0IM005.AV0IMQ32[15] = AV0IW01.AV0IWTQ2;
      AV0IM005.AV0IMSIZ[15] = "TOTAL";
    else
      if (AV0IW01.AV0IWX4 < 12)
        AV0IM003.AV0IMQ31[12] = AV0IW01.AV0IWTQ1;
        AV0IM003.AV0IMQ32[12] = AV0IW01.AV0IWTQ2;
        AV0IM003.AV0IMSIZ[12] = "TOTAL";
      end
    end
  end

end // end AV0ISME

// move maps 3,5,6 to maps 8,9,10
Function AV0ISNA()

   /* This module moves warehouse #1 from maps 3,5,and 6 to*/
   /* to warehouse #1 on maps 8,9 and 10.  This is done to*/
   /* display all the b-grade information together on one map.*/

  AV0ISNB(); /* move map style information*/

  AV0IW01.AV0IWX4 = 1;

   /* move size quantity information:*/
  while (AV0IW01.AV0IWX4 <= 40)
    if (AV0IW01.AV0IWX4 < 13)
      if (AV0IM003.AV0IMSIZ[AV0IWX4] > " ")
        AV0IM008.AV0IMSIZ[AV0IWX4] = AV0IM003.AV0IMSIZ[AV0IWX4];
        AV0IM008.AV0IMQ11[AV0IWX4] = AV0IM003.AV0IMQ11[AV0IWX4];
        AV0IM008.AV0IMQ12[AV0IWX4] = AV0IM003.AV0IMQ12[AV0IWX4];

        AV0IM008.AV0IMIN1[AV0IWX4] = AV0IM003.AV0IMIN1[AV0IWX4];
        AV0IM008.AV0IMIN2[AV0IWX4] = AV0IM003.AV0IMIN2[AV0IWX4];
      end
    else
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;

      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 12;
      if (AV0IW01.AV0IWX5 < 16)
        if (AV0IM005.AV0IMSIZ[AV0IWX5] > " ")
          AV0IM009.AV0IMSIZ[AV0IWX5] = AV0IM005.AV0IMSIZ[AV0IWX5];
          AV0IM009.AV0IMQ11[AV0IWX5] = AV0IM005.AV0IMQ11[AV0IWX5];
          AV0IM009.AV0IMQ12[AV0IWX5] = AV0IM005.AV0IMQ12[AV0IWX5];

          AV0IM009.AV0IMIN1[AV0IWX5] = AV0IM005.AV0IMIN1[AV0IWX5];
          AV0IM009.AV0IMIN2[AV0IWX5] = AV0IM005.AV0IMIN2[AV0IWX5];
        end

      else
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 27;
        if (AV0IM006.AV0IMSIZ[AV0IWX5] > " ")
          AV0IM010.AV0IMSIZ[AV0IWX5] = AV0IM006.AV0IMSIZ[AV0IWX5];
          AV0IM010.AV0IMQ11[AV0IWX5] = AV0IM006.AV0IMQ11[AV0IWX5];
          AV0IM010.AV0IMQ12[AV0IWX5] = AV0IM006.AV0IMQ12[AV0IWX5];

          AV0IM010.AV0IMIN1[AV0IWX5] = AV0IM006.AV0IMIN1[AV0IWX5];
          AV0IM010.AV0IMIN2[AV0IWX5] = AV0IM006.AV0IMIN2[AV0IWX5];
        end
      end
    end
    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;
  end

   /* load total by whse fields:*/
  if (AV0IM006.AV0IMT11 > 0)
    AV0IM010.AV0IMT11 = AV0IM006.AV0IMT11;
  end

end // end AV0ISNA

// move style info fields to map
Function AV0ISNB()

   /* move style information fields:*/

  AV0IM008.AV0IMSTY = AV0IM003.AV0IMSTY; /* style*/
  AV0IM009.AV0IMSTY = AV0IM005.AV0IMSTY;
  AV0IM010.AV0IMSTY = AV0IM006.AV0IMSTY;

  AV0IM008.AV0IMSTD = AV0IM003.AV0IMSTD; /* style description*/
  AV0IM009.AV0IMSTD = AV0IM005.AV0IMSTD;
  AV0IM010.AV0IMSTD = AV0IM006.AV0IMSTD;

  AV0IM008.AV0IMCLR = AV0IM003.AV0IMCLR; /* color*/
  AV0IM009.AV0IMCLR = AV0IM005.AV0IMCLR;
  AV0IM010.AV0IMCLR = AV0IM006.AV0IMCLR;

  AV0IM008.AV0IMCLD = AV0IM003.AV0IMCLD; /* color description*/
  AV0IM009.AV0IMCLD = AV0IM005.AV0IMCLD;
  AV0IM010.AV0IMCLD = AV0IM006.AV0IMCLD;

  AV0IM008.PC2INSEG = AV0IM003.PC2INSEG; /* inventory segment code*/
  AV0IM009.PC2INSEG = AV0IM005.PC2INSEG;
  AV0IM010.PC2INSEG = AV0IM006.PC2INSEG;

  AV0IM008.AV0IMDMD = AV0IM003.AV0IMDMD; /* dimension description*/
  AV0IM009.AV0IMDMD = AV0IM005.AV0IMDMD;
  AV0IM010.AV0IMDMD = AV0IM006.AV0IMDMD;

   /* unit of measure description*/
  AV0IM008.AV0IMUMD = AV0IM003.AV0IMUMD;
  AV0IM009.AV0IMUMD = AV0IM005.AV0IMUMD;
  AV0IM010.AV0IMUMD = AV0IM006.AV0IMUMD;

  AV0IM008.XPGCD = AV0IM003.XPGCD; /* package type code*/
  AV0IM009.XPGCD = AV0IM005.XPGCD;
  AV0IM010.XPGCD = AV0IM006.XPGCD;

  AV0IM008.AV0IMLCD = AV0IM003.AV0IMLCD; /* life cycle code*/
  AV0IM008.AV0IMELD = AV0IM003.AV0IMELD; /* life cycle effective date*/

  AV0IM008.XGAABRV = AV0IM003.XGAABRV; /* gender age description*/
  AV0IM008.XSPABRV = AV0IM003.XSPABRV;

   /* first quality:*/
  AV0IM008.AV0IMCP1 = AV0IM003.AV0IMCP1; /* current price*/
  AV0IM008.AV0IMEP1 = AV0IM003.AV0IMEP1; /* price effective date*/
  AV0IM008.AV0IMPP1 = AV0IM003.AV0IMPP1; /* previous price*/
  AV0IM008.AV0IMPD1 = AV0IM003.AV0IMPD1; /* price effective date*/
  AV0IM008.AV0IMCC1 = AV0IM003.AV0IMCC1;
  AV0IM008.AV0IMGM1 = AV0IM003.AV0IMGM1;

   /* second quality:*/
  AV0IM008.AV0IMCP2 = AV0IM003.AV0IMCP2; /* current price*/
  AV0IM008.AV0IMEP2 = AV0IM003.AV0IMEP2; /* price effective date*/
  AV0IM008.AV0IMPP2 = AV0IM003.AV0IMPP2; /* previous price*/
  AV0IM008.AV0IMPD2 = AV0IM003.AV0IMPD2;
  AV0IM008.AV0IMCC2 = AV0IM003.AV0IMCC2;
  AV0IM008.AV0IMGM2 = AV0IM003.AV0IMGM2;

  AV0IM008.AV0IMRG1 = AV0IM003.AV0IMRG1; /* warehouse name*/
  AV0IM009.AV0IMRG1 = AV0IM005.AV0IMRG1; /* warehouse name*/
  AV0IM010.AV0IMRG1 = AV0IM006.AV0IMRG1; /* warehouse name*/

  AV0IM008.AV0IMCM1 = AV0IM003.AV0IMCM1; /* comment*/

end // end AV0ISNB

// load av0im010 map DATA
Function AV0ISOA()

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0IW01.AV0IWFT = "Y";

  AV7REC.XWHCD = AV0IW05.XWHCD[AV0IWX3];
  AV7REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];

  AV7REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM008.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM009.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM010.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];

  AV0IM008.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM009.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM010.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];

  AV7REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];

  AV7REC.XSDCD = AV0IW05.PC2INSEG[AV0IWX3];
  AV0IM008.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3]; /* inventory segment*/
  AV0IM009.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3];
  AV0IM010.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3];

  AV7REC.XSACD = AV0IW05.XSACD[AV0IWX3];

  AV7REC.XPGCD = AV0IW05.XPGCD[AV0IWX3]; /* package type*/
  AV0IM008.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV0IM009.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV0IM010.XPGCD = AV0IW05.XPGCD[AV0IWX3];

  AV7REC.AV4PRDBD = -1;
  AV7REC.XOWCD = AV0IW05.XOWCD[AV0IWX3];
  AV7REC.XQACD = "**";
  AV7REC.XUMCD = AV0IW05.XUMCD[AV0IWX3];

  if (AV0IW05.XWHCD[AV0IWX3] in XWHTBL.XWHCD)
    AV0IM008.AV0IMRG2 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM009.AV0IMRG2 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM010.AV0IMRG2 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XDMCD[AV0IWX3] in XDMTBL.XDMCD)
    AV0IM008.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM009.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM010.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XUMCD[AV0IWX3] in XUMTBL.XUMCD)
    AV0IM008.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM009.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM010.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  set AV0IW10 empty;

  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  while (SQLCA.VAGen_SQLCODE == 0)

    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

    if (VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      if (VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[3] = "AV0ISOA";
        TA1REC.TA1LOCAT[4] = "IO2370";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else
        if (AV7REC.XQACD == "01")
          AV0IM008.AV0IMCP1 = AV7REC.AV1CUPRC;
          AV0IM008.AV0IMEP1 = AV7REC.AV1CUEDT;
          AV0IM008.AV0IMPP1 = AV7REC.AV1PRPRC;
          AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
          AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
          AV0ISZB();
          AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
          if (AV0IW01.AV0IWREM > 0)
            AV0IM008.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
          else
            if (AV0IW01.AV0IWREM < 0)
              AV0IM008.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
            else
              AV0IM008.AV0IMPD1 = 0;
            end
          end
        end
        if (AV0IM001.AV0IOPT == 1)
          if (AV7REC.XLCCD == "20"
           || AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISOB();
          end
        end
        if (AV0IM001.AV0IOPT == 2)
          if (AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISOB();
          end
        end
        if (AV0IM001.AV0IOPT == 3)
          if (AV7REC.XLCCD == "20"
           && AV7REC.XQACD == "01")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISOB();
          end
        end
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISOB();
          end
        end
        if (AV0IM001.AV0IOPT == 5)
          if (AV7REC.XLCCD == "10"
           && AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISOB();
          end
        end
      end
    end
  end

  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (AV0IW01.AV0IWFT == "Y")
      /* NEXT SENTENCE*/
  else
    if (AV7REC.XLCCD == "20")
      AV0IM008.AV0IMLCD = "CLSOUT";
    else
      AV0IM008.AV0IMLCD = "ACTIVE";
    end

     /* HERE WE WILL SETUP THE VARYABLE SCREEN FIELDS*/
     /* AND GET ALL THE DEFINITIONS FROM THE DIFFERENT TABLES*/
    AV0ISOD();
  end
end // end AV0ISOA

// get price percent difference
Function AV0ISOB()

    /* PROCESS PRICE AND PERCENT DIFFERENCE*/

  if (AV7REC.XQACD == "01")
    AV0ISOC();
  else
    AV0IM008.AV0IMCP2 = AV7REC.AV1CUPRC;
    AV0IM008.AV0IMPP2 = AV7REC.AV1PRPRC;
    AV0IM008.AV0IMEP2 = AV7REC.AV1CUEDT;
    AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
    AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
    AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
    if (AV0IW01.AV0IWREM > 0)
      AV0IM008.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
    else
      if (AV0IW01.AV0IWREM < 0)
        AV0IM008.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
      else
        AV0IM008.AV0IMPD2 = 0;
      end
    end
    AV0IW01.AV0IWFT = "N";
    AV0ISOC();
  end

  if (AV7REC.XQACD == "02")
    AV0IM008.AV0IMCM2 = AV7REC.AV2CMNT;
  else
    AV0IM008.AV0IMCM2 = " ";
  end
end // end AV0ISOB

// SETUP TOTALS FOotwear SCREEn
Function AV0ISOC()

    /* THIS IS THE AREA WHERE THE TOTALS FOR 1 APPAREL*/
    /* WILL BE ACCUMULATED*/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (AV7REC.XQACD == "01"
     && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
      AV0IW01.AV0IWQTY = AV0IW10.AV0IW1T[sysVar.arrayIndex];
      AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
      AV0IW10.AV0IW1T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

    else
      if (AV7REC.XQACD == "02"
       && AV7REC.XCDCD[sysVar.arrayIndex] == "01")
        AV0IW01.AV0IWQTY = AV0IW10.AV0IW2T[sysVar.arrayIndex];
        AV0IW01.AV0IWQTY = AV0IW01.AV0IWQTY + AV7REC.AV1AVQTY[sysVar.arrayIndex];
        AV0IW10.AV0IW2T[sysVar.arrayIndex] = AV0IW01.AV0IWQTY;

      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;


  end
end // end AV0ISOC

// GET IDS AND SET APRL 1 FIELDS
Function AV0ISOD()

    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY1REC.XGPCD = AV0IM001.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ISOD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM008.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM009.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM010.AV0IMSTD = SY1REC.SY1SSTNM;

  SY2REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  SY2REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY2REC.XGPCD = AV0IM001.XGPCD;
  SY2REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  SY2REC.SY2CLRAB = " ";
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[3] = "AV0ISOD";
    TA1REC.TA1LOCAT[4] = "IO0130 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM008.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM009.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM010.AV0IMCLD = SY2REC.SY2CLRAB;


  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0IM008.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* gender age*/
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0IM008.XSPABRV = XSPTBL.XSPABRV[sysVar.arrayIndex]; /* sport activity*/
  end


  AV0ISOE(); /* WRITE SIZE RELATED DATA*/


end // end AV0ISOD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ISOE()

   /* SET SIZE RELATED DATA FOR footwear screen whse #2*/

  if (AV0IW05.XGPCD[AV0IWX3] == PG3REC.XGPCD
   && AV0IW05.SY1STNBR[AV0IWX3] == PG3REC.SY1STNBR
   && AV0IW05.SY2CLRID[AV0IWX3] == PG3REC.SY2CLRID
   && AV0IW05.XDMCD[AV0IWX3] == PG3REC.XDMCD)
   /* next sentence*/
  else
    AV0ISBF(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0IW01.AV0IWTQ1 = 0;
  AV0IW01.AV0IWTQ2 = 0;
  AV0IW01.AV0IWX4 = 1;

  while (AV0IW01.AV0IWX4 <= 40
   && PG3REC.SY4IDDSC[AV0IWX4] > " ")

    AV0IW01.AV0IWX1 = PG3REC.SY5SZID[AV0IWX4];

    if (AV0IW01.AV0IWX4 < 13)
      AV0IM008.AV0IMSIZ[AV0IWX4] = PG3REC.SY4IDDSC[AV0IWX4];
      AV0IM008.AV0IMQ21[AV0IWX4] = AV0IW10.AV0IW1T[AV0IWX1];
      AV0IM008.AV0IMQ22[AV0IWX4] = AV0IW10.AV0IW2T[AV0IWX1];
      if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
        AV0IM008.AV0IMIN3[AV0IWX4] = ">";
      end

      if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
        AV0IM008.AV0IMIN4[AV0IWX4] = ">";
      end

      AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
      AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
    else
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 12;
      if (AV0IW01.AV0IWX5 < 16)
        AV0IM009.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM009.AV0IMQ21[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM009.AV0IMQ22[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM009.AV0IMIN3[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM009.AV0IMIN4[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
      else
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 27;
        AV0IM010.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM010.AV0IMQ21[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM010.AV0IMQ22[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM010.AV0IMIN3[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM010.AV0IMIN4[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

      end

    end

    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;

  end

  if (AV0IW01.AV0IWX4 > 26)
    AV0IM010.AV0IMT12 = AV0IW01.AV0IWTQ1;
    AV0IM010.AV0IMT22 = AV0IW01.AV0IWTQ2;
  else
    if (AV0IW01.AV0IWX4 > 11)
      AV0IM009.AV0IMQ21[15] = AV0IW01.AV0IWTQ1;
      AV0IM009.AV0IMQ22[15] = AV0IW01.AV0IWTQ2;
      AV0IM009.AV0IMSIZ[15] = "TOTAL";
    else
      if (AV0IW01.AV0IWX4 < 12)
        AV0IM008.AV0IMQ21[12] = AV0IW01.AV0IWTQ1;
        AV0IM008.AV0IMQ22[12] = AV0IW01.AV0IWTQ2;
        AV0IM008.AV0IMSIZ[12] = "TOTAL";
      end
    end
  end

end // end AV0ISOE

// load av0im010 map DATA
Function AV0ISPA()
   /* **** this is a new sgrp added to populate whse 51 data in the*/
   /* AV0IM008,AV0IM009,AV0IM010 map*/

    /* READ WORKING STORAGE KEY AND PROCESS RECORDS*/

  AV0IW01.AV0IWFT = "Y";

  AV7REC.XWHCD = AV0IW05.XWHCD[AV0IWX3];
  AV7REC.XGPCD = AV0IW05.XGPCD[AV0IWX3];

  AV7REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM008.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM009.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];
  AV0IM010.AV0IMSTY = AV0IW05.SY1STNBR[AV0IWX3];

  AV0IM008.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM009.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV0IM010.AV0IMCLR = AV0IW05.SY2CLRID[AV0IWX3];
  AV7REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];

  AV7REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];

  AV7REC.XSDCD = AV0IW05.PC2INSEG[AV0IWX3];
  AV0IM008.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3]; /* inventory segment*/
  AV0IM009.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3];
  AV0IM010.PC2INSEG = AV0IW05.PC2INSEG[AV0IWX3];

  AV7REC.XSACD = AV0IW05.XSACD[AV0IWX3];

  AV7REC.XPGCD = AV0IW05.XPGCD[AV0IWX3]; /* package type*/
  AV0IM008.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV0IM009.XPGCD = AV0IW05.XPGCD[AV0IWX3];
  AV0IM010.XPGCD = AV0IW05.XPGCD[AV0IWX3];

  AV7REC.AV4PRDBD = -1;
  AV7REC.XOWCD = AV0IW05.XOWCD[AV0IWX3];
  AV7REC.XQACD = "**";
  AV7REC.XUMCD = AV0IW05.XUMCD[AV0IWX3];

  if (AV0IW05.XWHCD[AV0IWX3] in XWHTBL.XWHCD)
    AV0IM008.AV0IMRG3 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM009.AV0IMRG3 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    AV0IM010.AV0IMRG3 = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XDMCD[AV0IWX3] in XDMTBL.XDMCD)
    AV0IM008.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM009.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
    AV0IM010.AV0IMDMD = XDMTBL.XDMABRV[sysVar.arrayIndex];
  end

  if (AV0IW05.XUMCD[AV0IWX3] in XUMTBL.XUMCD)
    AV0IM008.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM009.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
    AV0IM010.AV0IMUMD = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  set AV0IW10 empty;

  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  while (SQLCA.VAGen_SQLCODE == 0)

    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

    if (VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      if (VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[3] = "AV0ISOA";
        TA1REC.TA1LOCAT[4] = "IO2370";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else
        if (AV7REC.XQACD == "01")
          AV0IM008.AV0IMCP1 = AV7REC.AV1CUPRC;
          AV0IM008.AV0IMEP1 = AV7REC.AV1CUEDT;
          AV0IM008.AV0IMPP1 = AV7REC.AV1PRPRC;
          AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
          AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
          AV0ISZB();
          AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
          if (AV0IW01.AV0IWREM > 0)
            AV0IM008.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
          else
            if (AV0IW01.AV0IWREM < 0)
              AV0IM008.AV0IMPD1 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
            else
              AV0IM008.AV0IMPD1 = 0;
            end
          end
        end
        if (AV0IM001.AV0IOPT == 1)
          if (AV7REC.XLCCD == "20"
           || AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISPB();
          end
        end
        if (AV0IM001.AV0IOPT == 2)
          if (AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISPB();
          end
        end
        if (AV0IM001.AV0IOPT == 3)
          if (AV7REC.XLCCD == "20"
           && AV7REC.XQACD == "01")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISKB();
          end
        end
        if (AV0IM001.AV0IOPT == 4)
          if (AV7REC.XLCCD == "20")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISPB();
          end
        end
        if (AV0IM001.AV0IOPT == 5)
          if (AV7REC.XLCCD == "10"
           && AV7REC.XQACD == "02")
            AV0IW01.AV0IWFT = "N";
            AV0ISZB();
            AV0ISPB();
          end
        end
      end
    end
  end

  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (AV0IW01.AV0IWFT == "Y")
      /* NEXT SENTENCE*/
  else
    if (AV7REC.XLCCD == "20")
      AV0IM008.AV0IMLCD = "CLSOUT";
    else
      AV0IM008.AV0IMLCD = "ACTIVE";
    end

     /* HERE WE WILL SETUP THE VARYABLE SCREEN FIELDS*/
     /* AND GET ALL THE DEFINITIONS FROM THE DIFFERENT TABLES*/
    AV0ISPD();
  end
end // end AV0ISPA

// get price percent difference
Function AV0ISPB()
   /* *** this is a new sgrp that is added to populate whse 51 data ****/
    /* PROCESS PRICE AND PERCENT DIFFERENCE*/

  if (AV7REC.XQACD == "01")
    AV0ISOC(); /* same sgrp used with whse#4 can be*/
                                   /* used here also*/
  else
    AV0IM008.AV0IMCP2 = AV7REC.AV1CUPRC;
    AV0IM008.AV0IMPP2 = AV7REC.AV1PRPRC;
    AV0IM008.AV0IMEP2 = AV7REC.AV1CUEDT;
    AV0IW01.AV1CUPRC = AV7REC.AV1CUPRC;
    AV0IW01.AV1PRPRC = AV7REC.AV1PRPRC;
    AV0IW01.AV0IWREM = AV0IW01.AV1CUPRC - AV0IW01.AV1PRPRC;
    if (AV0IW01.AV0IWREM > 0)
      AV0IM008.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1CUPRC;
    else
      if (AV0IW01.AV0IWREM < 0)
        AV0IM008.AV0IMPD2 = AV0IW01.AV0IWREM * 100 / AV0IW01.AV1PRPRC;
      else
        AV0IM008.AV0IMPD2 = 0;
      end
    end
    AV0IW01.AV0IWFT = "N";
    AV0ISOC();
  end

  if (AV7REC.XQACD == "02")
    AV0IM008.AV0IMCM2 = AV7REC.AV2CMNT;
  else
    AV0IM008.AV0IMCM2 = " ";
  end
end // end AV0ISPB

// GET IDS AND SET APRL 1 FIELDS
Function AV0ISPD()
   /* *** This is a new sgrp added to populate whse51 data ****/
    /* FIRST WE WILL GET ALL THE DEFINITIONS FOR NON SIZE DATA*/

  SY1REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY1REC.XGPCD = AV0IM001.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[3] = "AV0ISPD";
    TA1REC.TA1LOCAT[4] = "IO0120 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM008.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM009.AV0IMSTD = SY1REC.SY1SSTNM;
  AV0IM010.AV0IMSTD = SY1REC.SY1SSTNM;

  SY2REC.XDMCD = AV0IW05.XDMCD[AV0IWX3];
  SY2REC.SY1STNBR = AV0IW05.SY1STNBR[AV0IWX3];
  SY2REC.XGPCD = AV0IM001.XGPCD;
  SY2REC.SY2CLRID = AV0IW05.SY2CLRID[AV0IWX3];
  SY2REC.SY2CLRAB = " ";
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[3] = "AV0ISPD";
    TA1REC.TA1LOCAT[4] = "IO0130 ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    XSPF4();

  end

  AV0IM008.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM009.AV0IMCLD = SY2REC.SY2CLRAB;
  AV0IM010.AV0IMCLD = SY2REC.SY2CLRAB;


  if (SY1REC.XGACD in XGATBL.XGACD)
    AV0IM008.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* gender age*/
  end

  if (SY1REC.XSPCD in XSPTBL.XSPCD)
    AV0IM008.XSPABRV = XSPTBL.XSPABRV[sysVar.arrayIndex]; /* sport activity*/
  end


  AV0ISPE(); /* WRITE SIZE RELATED DATA*/


end // end AV0ISPD

// SET SIZE RELATED FIELDS FOR 1
Function AV0ISPE()
   /* *** This is a new sgrp added to populate the size data for whse 51*/
       /* Multi GPC Project*/
   /* SET SIZE RELATED DATA FOR footwear screen whse #3*/

  if (AV0IW05.XGPCD[AV0IWX3] == PG3REC.XGPCD
   && AV0IW05.SY1STNBR[AV0IWX3] == PG3REC.SY1STNBR
   && AV0IW05.SY2CLRID[AV0IWX3] == PG3REC.SY2CLRID
   && AV0IW05.XDMCD[AV0IWX3] == PG3REC.XDMCD)
   /* next sentence*/
  else
    AV0ISBF(); /* CALL SIZE CONVERSION PG1050*/
  end

  AV0IW01.AV0IWTQ1 = 0;
  AV0IW01.AV0IWTQ2 = 0;
  AV0IW01.AV0IWX4 = 1;

  while (AV0IW01.AV0IWX4 <= 40
   && PG3REC.SY4IDDSC[AV0IWX4] > " ")

    AV0IW01.AV0IWX1 = PG3REC.SY5SZID[AV0IWX4];

    if (AV0IW01.AV0IWX4 < 13)
      AV0IM008.AV0IMSIZ[AV0IWX4] = PG3REC.SY4IDDSC[AV0IWX4];
      AV0IM008.AV0IMQ31[AV0IWX4] = AV0IW10.AV0IW1T[AV0IWX1];
      AV0IM008.AV0IMQ32[AV0IWX4] = AV0IW10.AV0IW2T[AV0IWX1];
      if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
        AV0IM008.AV0IMIN5[AV0IWX4] = ">";
      end

      if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
        AV0IM008.AV0IMIN6[AV0IWX4] = ">";
      end

      AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
      AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
    else
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
      AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 12;
      if (AV0IW01.AV0IWX5 < 16)
        AV0IM009.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM009.AV0IMQ31[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM009.AV0IMQ32[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM009.AV0IMIN5[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM009.AV0IMIN6[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;
      else
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX4;
        AV0IW01.AV0IWX5 = AV0IW01.AV0IWX5 - 27;
        AV0IM010.AV0IMSIZ[AV0IWX5] = PG3REC.SY4IDDSC[AV0IWX4];
        AV0IM010.AV0IMQ31[AV0IWX5] = AV0IW10.AV0IW1T[AV0IWX1];
        AV0IM010.AV0IMQ32[AV0IWX5] = AV0IW10.AV0IW2T[AV0IWX1];
        if (AV0IW10.AV0IWCH1[AV0IWX1] == "Y")
          AV0IM010.AV0IMIN5[AV0IWX5] = ">";
        end

        if (AV0IW10.AV0IWCH2[AV0IWX1] == "Y")
          AV0IM010.AV0IMIN6[AV0IWX5] = ">";
        end

        AV0IW01.AV0IWTQ1 = AV0IW10.AV0IW1T[AV0IWX1] + AV0IW01.AV0IWTQ1;
        AV0IW01.AV0IWTQ2 = AV0IW10.AV0IW2T[AV0IWX1] + AV0IW01.AV0IWTQ2;

      end

    end

    AV0IW01.AV0IWX4 = AV0IW01.AV0IWX4 + 1;

  end

  if (AV0IW01.AV0IWX4 > 26)
    AV0IM010.AV0IMT13 = AV0IW01.AV0IWTQ1;
    AV0IM010.AV0IMT23 = AV0IW01.AV0IWTQ2;
  else
    if (AV0IW01.AV0IWX4 > 11)
      AV0IM009.AV0IMQ31[15] = AV0IW01.AV0IWTQ1;
      AV0IM009.AV0IMQ32[15] = AV0IW01.AV0IWTQ2;
      AV0IM009.AV0IMSIZ[15] = "TOTAL";
    else
      if (AV0IW01.AV0IWX4 < 12)
        AV0IM008.AV0IMQ31[12] = AV0IW01.AV0IWTQ1;
        AV0IM008.AV0IMQ32[12] = AV0IW01.AV0IWTQ2;
        AV0IM008.AV0IMSIZ[12] = "TOTAL";
      end
    end
  end

end // end AV0ISPE

// CALCULATE GROSS MARGIN
Function AV0ISZA()

  if (AV7REC.AV1CUPRC == 0)
    if (COMMAREA.CAILVL[1] == "Y")
      AV0IM003.AV0IMGM2 = AV0IW10.AV0IWGM2;
      AV0IM003.AV0IMCC2 = AV7REC.AV1CUCST;
      AV0IW10.AV0IWCQ2 = AV7REC.AV1CUCST;
    end
  else

    if (AV7REC.XQACD == "01")
      if (AV7REC.AV1CUCST > 0)
        AV0IW01.AV0IWREM = AV7REC.AV1CUPRC - AV7REC.AV1CUCST;
        AV0IW10.AV0IWGM1 = AV0IW01.AV0IWREM * 100 / AV7REC.AV1CUPRC;
      end

      if (COMMAREA.CAILVL[1] == "Y")
        AV0IM003.AV0IMGM1 = AV0IW10.AV0IWGM1;
        AV0IM003.AV0IMCC1 = AV7REC.AV1CUCST;
        AV0IW10.AV0IWCQ1 = AV7REC.AV1CUCST;
      end
    else
      if (AV7REC.AV1CUCST > 0)
        AV0IW01.AV0IWREM = AV7REC.AV1CUPRC - AV7REC.AV1CUCST;
        AV0IW10.AV0IWGM2 = AV0IW01.AV0IWREM * 100 / AV7REC.AV1CUPRC;
      end

      if (COMMAREA.CAILVL[1] == "Y")
        AV0IM003.AV0IMGM2 = AV0IW10.AV0IWGM2;
        AV0IM003.AV0IMCC2 = AV7REC.AV1CUCST;
        AV0IW10.AV0IWCQ2 = AV7REC.AV1CUCST;

      end
    end
  end
end // end AV0ISZA

// CALCULATE GROSS MARGIN
Function AV0ISZB()
   /* *** This is a new sgrp added for populating the AV0IM008 screen ****/

  if (AV7REC.AV1CUPRC == 0)
    if (COMMAREA.CAILVL[1] == "Y")
      AV0IM008.AV0IMGM2 = AV0IW10.AV0IWGM2;
      AV0IM008.AV0IMCC2 = AV7REC.AV1CUCST;
      AV0IW10.AV0IWCQ2 = AV7REC.AV1CUCST;
    end
  else

    if (AV7REC.XQACD == "01")
      if (AV7REC.AV1CUCST > 0)
        AV0IW01.AV0IWREM = AV7REC.AV1CUPRC - AV7REC.AV1CUCST;
        AV0IW10.AV0IWGM1 = AV0IW01.AV0IWREM * 100 / AV7REC.AV1CUPRC;
      end

      if (COMMAREA.CAILVL[1] == "Y")
        AV0IM008.AV0IMGM1 = AV0IW10.AV0IWGM1;
        AV0IM008.AV0IMCC1 = AV7REC.AV1CUCST;
        AV0IW10.AV0IWCQ1 = AV7REC.AV1CUCST;
      end
    else
      if (AV7REC.AV1CUCST > 0)
        AV0IW01.AV0IWREM = AV7REC.AV1CUPRC - AV7REC.AV1CUCST;
        AV0IW10.AV0IWGM2 = AV0IW01.AV0IWREM * 100 / AV7REC.AV1CUPRC;
      end

      if (COMMAREA.CAILVL[1] == "Y")
        AV0IM008.AV0IMGM2 = AV0IW10.AV0IWGM2;
        AV0IM008.AV0IMCC2 = AV7REC.AV1CUCST;
        AV0IW10.AV0IWCQ2 = AV7REC.AV1CUCST;

      end
    end
  end
end // end AV0ISZB

Record AV0IW01 type basicRecord
  10 AV0IWX1 AV0IWX1 ; 
  10 AV0IWX2 AV0IWX2 ; 
  10 AV0IWX3 AV0IWX3 ; 
  10 AV0IWX4 AV0IWX4 ; 
  10 AV0IWX5 AV0IWX5 ; 
  10 AV0IWFF AV0IWFF ; 
  10 AV0IWKE AV0IWKE ; 
    15 XWHCD XWHCD ; 
    15 AV0IWSK AV0IWSK ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 AV4PRDBD AV4PRDBD ; 
      20 XOWCD XOWCD ; 
      20 XUMCD XUMCD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XSACD XSACD ; 
      20 XPGCD XPGCD ; 
      20 AV0IWSR AV0IWSR ; 
  10 AV0IWL1 AV0IWL1 ; 
  10 AV0IWL2 AV0IWL2 ; 
    15 AV0IWSC AV0IWSC ; 
    15 AV0IWSZ AV0IWSZ ; 
  10 AV0IWTD AV0IWTD ; 
  10 AV0IWFT AV0IWFT ; 
  10 AV0IWWH AV0IWWH ; 
  10 AV0IWSY AV0IWSY ; 
    15 AV0IWSD AV0IWSD ; 
    15 AV0IWNR AV0IWNR ; 
  10 AV1CUPRC AV1CUPRC ; 
  10 AV1CUEDT AV1CUEDT ; 
  10 AV1PRPRC AV1PRPRC ; 
  10 AV0IW1R AV0IW1R ; 
    15 XCDCD XCDCD [40] ; 
    15 AV1AVQTY AV1AVQTY [40] ; 
    15 AV1AVDT AV1AVDT [40] ; 
    15 AV1CHGFL AV1CHGFL [40] ; 
  10 AV0IWQTY AV0IWQTY ; 
  10 AV0IWTQ1 AV0IWTQ1 ; 
  10 AV0IWTQ2 AV0IWTQ2 ; 
  10 AV0IWFL AV0IWFL ; 
    15 AV0IWF1 AV0IWF1 ; 
    15 AV0IWF2 AV0IWF2 ; 
    15 AV0IWF3 AV0IWF3 ; 
  10 AV0IWZA AV0IWZA ; 
  10 AV0IWZB AV0IWZB ; 
  10 AV0IWZC AV0IWZC ; 
  10 AV0IWZD AV0IWZD ; 
  10 AV0IWFG AV0IWFG ; 
  10 AV0IWMT AV0IWMT ; 
    15 AV0IWM1 AV0IWM1 ; 
    15 AV0IWM2 AV0IWM2 ; 
  10 AV0IWBA AV0IWBA ; 
    15 AV0IWBB AV0IWBB ; 
    15 AV0IWBC AV0IWBC ; 
  10 AV0IWREM AV0IWREM ; 
  10 AV0IWFZ AV0IWFZ ; 
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
  10 AV0IWHIT AV0IWHIT ; 
  10 AV0IWEOC AV0IWEOC ; 
end // end AV0IW01

Record AV0IW05 type basicRecord
  10 AV0IWAV AV0IWAV ; 
  10 AV0IWKE AV0IWKE [198] ; 
    15 XWHCD XWHCD ; 
    15 AV0IWSK AV0IWSK ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 AV4PRDBD AV4PRDBD ; 
      20 XOWCD XOWCD ; 
      20 XUMCD XUMCD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XSACD XSACD ; 
      20 XPGCD XPGCD ; 
      20 AV0IWSR AV0IWSR ; 
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
end // end AV0IW05

Record AV0IW09 type basicRecord
  10 AV0IW1Q1 AV0IW1Q1 ; 
  10 AV0IW2Q2 AV0IW2Q2 ; 
  10 AV0IW3Q1 AV0IW3Q1 ; 
  10 AV0IW4Q2 AV0IW4Q2 ; 
  10 AV0IW5Q1 AV0IW5Q1 ; 
  10 AV0IW6Q2 AV0IW6Q2 ; 
  10 AV0IW9Q1 AV0IW9Q1 ; 
  10 AV0IW-10Q2 AV0IW-10Q2 ; 
  10 AV0IW-11Q1 AV0IW-11Q1 ; 
  10 AV0IW-12Q2 AV0IW-12Q2 ; 
  10 AV0IWTQL AV0IWTQL ; 
end // end AV0IW09

Record AV0IW10 type basicRecord
  10 AV0IW1T AV0IW1T [40] ; 
  10 AV0IW2T AV0IW2T [40] ; 
  10 AV0IWCH1 AV0IWCH1 [40] ; 
  10 AV0IWCH2 AV0IWCH2 [40] ; 
  10 AV0IWGM1 AV0IWGM1 ; 
  10 AV0IWGM2 AV0IWGM2 ; 
  10 AV0IWCQ1 AV0IWCQ1 ; 
  10 AV0IWCQ2 AV0IWCQ2 ; 
  10 AV0IW1A AV0IW1A ; 
    12 AV0IW1B AV0IW1B [50] ; 
      15 XWHCD XWHCD ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 XOWCD XOWCD ; 
      15 XQACD XQACD ; 
      15 XUMCD XUMCD ; 
end // end AV0IW10

// SECOND QUAL amt col 6
DataItem AV0IW-10Q2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FIRST  QUAL amt col 9
DataItem AV0IW-11Q1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SECOND QUAL amt col 10
DataItem AV0IW-12Q2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIGH LEVEL FIELD
DataItem AV0IW1A char(1250)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HIGH LEVEL FIELD
DataItem AV0IW1B char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST QUAL amt col 1
DataItem AV0IW1Q1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORKING STORAGE ACCUMULATOR
DataItem AV0IW1R char(440)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST QUAL TOTALS
DataItem AV0IW1T int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SECOND QUAL amt col 2
DataItem AV0IW2Q2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SECOND QUAL TOTALS
DataItem AV0IW2T int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FIRST QUAL amt col 3
DataItem AV0IW3Q1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SECOND QUAL amt col 4
DataItem AV0IW4Q2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FIRST QUAL amt col 5
DataItem AV0IW5Q1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SECOND QUAL amt col 6
DataItem AV0IW6Q2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SECOND QUAL amt col 6
DataItem AV0IW9Q1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SAVE AREA FOR BUBBLE SORT
DataItem AV0IWAV char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORKING STORAGE FOR XOWKEY
DataItem AV0IWBA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORKING STORAGE FOR XWHCD
DataItem AV0IWBB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORKING STORAGE FOR XOWCD
DataItem AV0IWBC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CHANGE FLAG
DataItem AV0IWCH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CHANGE FLAG
DataItem AV0IWCH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST QUAL COST
DataItem AV0IWCQ1 bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SECND QUAL COST
DataItem AV0IWCQ2 bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of cursor flag
DataItem AV0IWEOC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER HOLD FIELD 1
DataItem AV0IWF1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER HOLD FIELD 2
DataItem AV0IWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER HOLD FIELD 3
DataItem AV0IWF3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR FLAG INDICATOR
DataItem AV0IWFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER FLAG
DataItem AV0IWFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ANOTHER HOLD FIELD
DataItem AV0IWFL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST TIME FLAG
DataItem AV0IWFT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// another flag (FOR AV0D)
DataItem AV0IWFZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST QUAL GROSS MARGIN
DataItem AV0IWGM1 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SECND QUAL GROSS MARGIN
DataItem AV0IWGM2 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style found flag
DataItem AV0IWHIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KEY FOR SEARCHING AV0AW05
DataItem AV0IWKE char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEAR CCYYBINARY
DataItem AV0IWL1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SEASON YEAR CCYY  DISPLAY
DataItem AV0IWL2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc desc
DataItem AV0IWM1 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// steady part of heading
DataItem AV0IWM2 char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading storage
DataItem AV0IWMT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORK SEASON YEAR
DataItem AV0IWNR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// USED IN QUANTITY CALC
DataItem AV0IWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORKAREA TO CAL PCD
DataItem AV0IWREM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CENTURY PREFIX
DataItem AV0IWSC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK SEASON CODE
DataItem AV0IWSD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SORT KEY
DataItem AV0IWSK char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SORT SEQUENCE FOR DUPS
DataItem AV0IWSR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK AREA FOR SEASON/YEAR
DataItem AV0IWSY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEAR
DataItem AV0IWSZ num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TODAYS DATE IN CCYYMMDD
DataItem AV0IWTD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL A/O
DataItem AV0IWTQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL A/O
DataItem AV0IWTQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total line quality
DataItem AV0IWTQL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD AREA FOR WHSE
DataItem AV0IWWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0IWX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0IWX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0IWX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0IWX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED IN AV0A
DataItem AV0IWX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD WHSE
DataItem AV0IWZA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HOLD SEASON CODE
DataItem AV0IWZB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HOLD SEASON YEAR
DataItem AV0IWZC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD OWNER
DataItem AV0IWZD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

