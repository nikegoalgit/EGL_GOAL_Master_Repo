package av0q;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AV0Q ****
// this application is entered from av0l.  it displays
// size quantity data for up to 14 styles which have been
// selected as a possible substitute for a customer requested
// style that orders has found unavailable.
// 
// the substitute style keys and information about the original
// requested style are transferred to this application
// through the commarea and avwrec.
// 
// the user may view selected substitute style detail info
// and select a warehouse style.  when a selection has been
// entered, the original style and selected substitute style
// data is transferred to the orders system application
// through the commarea and the osgrec.
// 
// if the user fastpaths to av0k (sustitution criteria search)
// the avwrec information is transferred through the commarea.
// --------  ------  ------------------------------------------
// Date      Name    Description of change
// --------  ------  ------------------------------------------
// 08/21/90  MADAMS  Now may not select more than one warehouse
//                   when processing a request to return to
//                   order processing.
// 08/22/90  dbruih  corrected obtaining of wholesale and
//                   retail prices
// 09/25/90  madams  will now display warehouses in a specific
//                   order: wilson, memphis, greenland (the
//                   same as av0a).  also will display a
//                   product message above each warehouse and
//                   it will blink.
// 10/24/90  madams  removed catalog lookup.  will now use what
//                   is passed to it from AV0L.
// 12/17/90  dbruih  added dimension code and description to
//                   map.
// 02/25/91  RHETRI  Changed length of style and color names.
// 04/30/97  IDICKI  Changed AV0Q211 - If user is Canadian,
//                   display only warehouse 42 information.
// *********************
Program AV0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV0QW01 AV0QW01; // record
  AV0QW02 AV0QW02; // record
  AV7REC AV7REC; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  OSGREC OSGREC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY5REC SY5REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AV01TBL {deleteAfterUse = yes}; // table
  use XWHTBL; // table
  use XCDTBL; // table
  use XOTTBL; // table
  use XDMTBL; // table
  use AV0QM.AV0QM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AV0Q100: AV0Q100();
    goto AV0Q200;
    AV0Q200: AV0Q200();
    goto AV0Q200;
  end // end main
end // end AV0Q

// application entry
Function AV0Q100()
   /* --------------------------- av0q100 ------------------------*/

                         /* application entry*/

   /* --------------------------- av0q100 ------------------------*/

  if (COMMAREA.CAFROMAP != "AV0L") /* if not from substitution list*/
    set AVWREC empty; /* clear av system record*/
    COMMAREA.CATOAP = "AV0K";
                                   /* go to substitution criteria app*/
    XPAV002(); /* exit to av0k*/
  end

  AV0QM001.XXXMODID = "100";

  XPAV001(); /* appl entry routine*/
                            /* ; moves xferred data from commarea*/

  AV0Q110(); /* initialize program work fields*/
  AV0Q120(); /* get program dates*/

   /* save original external & internal sizes*/

  if (AVWREC.AVWOREXF > " ")
    AV0QW01.AV0QWSZF = AVWREC.AVWRQSZF;
    AV0QW01.AV0QWSZL = AVWREC.AVWRQSZL;
    AV0QW01.AV0QWORF = AVWREC.AVWOREXF;
    AV0QW01.AV0QWORL = AVWREC.AVWOREXL;
  else
    AV0QW01.AV0QWSZF = AVWREC.OPWRQSZF;
    AV0QW01.AV0QWSZL = AVWREC.OPWRQSZL;
    AV0QW01.AV0QWORF = AVWREC.AVWSZFD;
    AV0QW01.AV0QWORL = AVWREC.AVWSZLD;
  end

  VGVar.handleHardIOErrors = 1; /* return all file errors*/
  converseVar.commitOnConverse = 1; /* commit on every converse*/

  AV0QW02.AV0QWIX4 = 0; /* set substitute styles index*/
  AV0QW02.AV0QWSW4 = "N"; /* no to selected style found switch*/

  while (AV0QW02.AV0QWSW4 == "N" /* or a selected product is found*/
   && AV0QW02.AV0QWIX4 <= 14) /* search until index eq 14*/
    AV0Q282(); /* search for 1st selected style*/
  end

  AV0QW01.AV0QWDFL = "Y"; /* yes to request data flag*/

   /* if search thru avwrec and no selected product found:*/
  if (AV0QW02.AV0QWSW4 == "N")
    converseLib.validationFailed(140); /* no selected products found*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display message*/
  end


   /* --------------------------- av0q100 ------------------------*/
end // end AV0Q100

// initialize program records
Function AV0Q110()
   /* --------------------------- av0q110 ------------------------*/
                    /* initialize program work fields*/
   /* ------------------------------------------------------------*/

  set AV0QW01 empty; /* clear av0q working storage*/
  set AV0QW02 empty; /* clear avwrec index and switch*/

  set SQLCA empty; /* db2 error handling work record*/
  set TAEREC empty; /* error diagnosis record*/
  set TA1REC empty; /* error diagnosis record*/

   /* ------------------------------------------------------------*/
end // end AV0Q110

// get program dates
Function AV0Q120()
   /* --------------------------- av0q120 ------------------------*/

                          /* get program dates*/

   /* --------------------------- av0q120 ------------------------*/


  XX0XS01(); /* convert system date and time*/
  AV0QW02.AV0QWDT1 = XX0XW01.XX0XWDAT; /* formatted system date*/

  AV0Q121(); /* get 30 days out date*/

   /* --------------------------- av0q120 ------------------------*/
end // end AV0Q120

// get current +30 days date
Function AV0Q121()
   /* ----------------------av0q121----------------------------*/
   /* Get the date 30 working days out for a six day work week*/
                  /* used for footwear and promo*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* Clear row storage area*/

  TA9REC.TA9BEGCC = AV0QW02.AV0QWDC1; /* century to ta9rec*/
  TA9REC.TA9BEGYY = AV0QW02.AV0QWDY1; /* Year to ta9rec*/
  TA9REC.TA9BEGMM = AV0QW02.AV0QWDM1; /* Month to ta9rec*/
  TA9REC.TA9BEGDD = AV0QW02.AV0QWDD1; /* Day to ta9rec*/

  TA9REC.TA9ENDDT = 000000000; /* Set end date to 0*/
  TA9REC.TA9OFSET = +30; /* date + 30 days*/

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Call date routine*/

   /* ------------------------------------------------------------*/
   /* If the call was not successful, return error message.*/
     /* Else move date + 30 days to working storage area.*/
   /* ------------------------------------------------------------*/

  if (TA9REC.TA9RTNFL != 0)
    AV0QM001.XXXMODID = "121";
    converseLib.validationFailed(112); /* problem with ta0190*/
    return;
  else
     /* date + 30 days is moved to working storage area (ccyymmdd)*/
    AV0QW02.AV0QWDT2 = TA9REC.TA9RTNDT; /* today's date + 30 days*/
  end


end // end AV0Q121

// main process module
Function AV0Q200()
   /* ------------------------------------------------------------*/
                            /* av0q200*/
                          /* main process*/
   /* ------------------------------------------------------------*/

  if (AV0QW01.AV0QWDFL == "Y") /* if request data flag = yes*/
    AV0Q210(); /* get avail data and size descs*/
    AV0Q220(); /* get size range to display*/
    set AV0QM001 initial; /* clear map*/

     /* move original request style info and system date to map*/
    AV0Q230();

    if (converseVar.validationMsgNum == 0) /* if no errors*/
      AV0Q240(); /* get style name/color abbrev*/
    end

    AV0QW01.AV0QWCPN = AVWREC.AVWCATLG[AV0QWIX4]; /* catalog id*/

    if (converseVar.validationMsgNum == 0)
      while (AV0QW01.AV0QWSW1 == "N") /* until end of cursor*/
        AV0Q260(); /* format the map with avail whse recs*/
        AV0Q212(); /* select next avail record*/
      end
      if (AV0QW01.AV0QWSW1 == "Y") /* if end of avqty02 cursor*/
        AV0Q213(); /* close cursor*/
      end
    end
  end

  AV0Q270(); /* converse map*/

  AV0Q275(); /* check pf keys and transfers*/

  AV0Q280(); /* verify selection indicators*/

  AV0Q290(); /* reset hilited fields*/

end // end AV0Q200

// get qtys, cond cds, size descs
Function AV0Q210()
   /* -------------------------av0q210----------------------------*/
                 /* get avail code qty and size info*/
   /* -------------------------av0q210----------------------------*/

  AV0Q211(); /* select set davail.vavqty02*/
  if (converseVar.validationMsgNum != 0) /* if error in data select*/
    AV0Q213(); /* close cursor*/
    AV0QW01.AV0QWDFL = "N"; /* move no to request data flag*/
    exit stack; /* exit to display error message*/
  end

  AV0QW01.AV0QWSW1 = "N"; /* move no to end of cursor switch*/
  AV0Q212(); /* select first davail.vavqty02*/

  if (converseVar.validationMsgNum == 75) /* if data in use data select*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data*/
    AV0QW01.AV0QWERR = "Y"; /* yes to data in use flag*/
    return;
  end

  if (AV0QW01.AV0QWSW1 == "Y") /* if end of cursor*/
    converseLib.validationFailed(259); /* product not found message*/
     /* move style info to map & hilite*/
    AV0QM001.AV0QMSTA = AVWREC.OP2SSTYN[AV0QWIX4];
    set AV0QM001.AV0QMSTA bold;
    AV0Q213(); /* close cursor*/
    exit stack; /* exit to display error message*/
  end

  if (converseVar.validationMsgNum != 0) /* if system error*/
    AV0Q213(); /* close cursor*/
    AV0QW01.AV0QWDFL = "N"; /* move no to request data flag*/
    exit stack; /* exit to display error*/
  end

   /* -------------------------av0q210----------------------------*/
end // end AV0Q210

// select set from availability
Function AV0Q211()
   /* -------------------------av0q210----------------------------*/
                 /* select set davail.vavqty02 data*/
   /* -------------------------av0q210----------------------------*/

  set AV7REC empty; /* Clear row storage area*/

  AV7REC.XWHCD = "**"; /* default whse to USA (see IO2370)*/
  sysVar.arrayIndex = 1; /* initialize ezetst subscript to 1*/
  if (COMMAREA.XSOCD != "  ") /* logon sales office not blank*/
    while (AV01TBL.XSOCD[sysVar.arrayIndex] != "99" /* not end of table*/
     && AV7REC.XWHCD != "42") /* exit 'WHILE' if Canadian logon found*/
      if (COMMAREA.XSOCD == AV01TBL.XSOCD[sysVar.arrayIndex]) /* logon SO = table SO*/
        AV7REC.XWHCD = "42"; /* Canadian logon - use whse 42*/
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment subscript*/
    end
  end
   /* MOVE '**' TO AV7REC.XWHCD;        /* WHSE (replaced by above code)*/
  AV7REC.XGPCD = AVWREC.XGPCD; /* GPC*/
  AV7REC.SY1STNBR = AVWREC.OP2SSTYN[AV0QWIX4]; /* Style*/
  AV7REC.SY2CLRID = AVWREC.OP2SCLCD[AV0QWIX4]; /* Color*/
  AV7REC.XDMCD = AVWREC.OP2SDMCD[AV0QWIX4]; /* Dim*/
  AV7REC.XQACD = AVWREC.XQACD; /* Qual*/
  AV7REC.XOWCD = AVWREC.XOWCD; /* Owner grp*/
  AV7REC.XSDCD = AVWREC.XSDCD; /* Spec*/
  AV7REC.XSACD = AVWREC.XSACD; /* Shade*/
  AV7REC.XPGCD = AVWREC.XPGCD; /* Pkg. type*/

  if (AVWREC.XUMCD[2] != " ") /* if override uom present*/
    AV7REC.XUMCD = AVWREC.XUMCD[2]; /* use override uom*/
  else
    AV7REC.XUMCD = AVWREC.XUMCD[1]; /* use first UOM*/
  end

  AV7REC.AV6RECTY = "F"; /* Rec type*/
  AV7REC.AV4PRDBD = -1; /* Period begin date*/

  try
    call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  AVWREC.XXXMODID = "211"; /* Module identification*/
  AV0QM001.XXXMODID = "AV0Q211"; /* map module id*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY02"; /* Table view name*/
  TA1REC.TA1TBLKE = AV7REC.AV7GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* -------------------------av0q211----------------------------*/
end // end AV0Q211

// Fetch next row of availability
Function AV0Q212()
   /* -------------------------av0q211----------------------------*/
               /* fetch next row from davail.vavqty02*/
   /* ------------------------------------------------------------*/

  try
    call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == +100) /* End of selected set*/
      AV0QW01.AV0QWSW1 = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  AVWREC.XXXMODID = "212"; /* Module identification*/
  AV0QM001.XXXMODID = "AV0Q212"; /* map module id*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY02"; /* Table view name*/
  TA1REC.TA1TBLKE = AV7REC.AV7GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end AV0Q212

// close availability cursor
Function AV0Q213()
   /* -------------------------av0q213----------------------------*/
                /* close dprod.vcolor02 cursor*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows. (davail.vavqty02)*/
   /* ------------------------------------------------------------*/

  try
    call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "213"; /* Module identification*/
  AV0QM001.XXXMODID = "AV0Q213"; /* map error id*/
  converseLib.validationFailed(76); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVQTY02"; /* Table view name*/
  TA1REC.TA1TBLKE = AV7REC.AV7GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end AV0Q213

// get size range to display
Function AV0Q220()
   /* ---------------------------------------------------------*/
     /* we're here to get the beginning and ending sizes, both*/
     /* internal and external. we will take the ones that*/
     /* are closest to the parameters given.*/
   /* ---------------------------------------------------------*/

  set PG3REC empty;
  PG3REC.XQACD = "**"; /* Use first quality*/
  PG3REC.PG3FUNCD = "PC"; /* All valid sizes*/
  PG3REC.PG3DATFM = "N"; /* Compressed sizes*/
  PG3REC.XGPCD = AVWREC.XGPCD; /* GPC*/
  PG3REC.SY1STNBR = AVWREC.OP2SSTYN[AV0QWIX4]; /* Style*/
  PG3REC.SY2CLRID = AVWREC.OP2SCLCD[AV0QWIX4]; /* Color*/
  PG3REC.XDMCD = AVWREC.OP2SDMCD[AV0QWIX4]; /* Dim*/

   /* ---------------------------------------------------------*/
   /* call pg1050*/
   /* ---------------------------------------------------------*/

  try
    call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};
  end /* get size record*/

  if (sysVar.errorCode == "00000000" /* if no errors found*/
   && PG3REC.PG3RETCD == "00")      

    if (PG3REC.XGPCD == "02")

      AV0Q221(); /* footwear*/

    else

      AV0Q222(); /* apparel*/

    end

    return; /* Return to calling process*/

  else

    /* ------------------------------------------------------------*/
     /* If data not available, post an error message and return.*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && PG3REC.PG3RETCD == "09")       /* and resource not available*/

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
      TA1REC.TA1LOC = "AV0Q220";
      TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && PG3REC.PG3RETCD == "99")       /* and negative SQL error*/

        TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
        TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
        TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/
        TA1REC.TA1LOC = "AV0Q220";

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      else

        TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
        TAEREC.TAEDESC2 = PG3REC.PG3GROUP; /* Subroutine parameters*/

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "AV0Q220";

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

    end
  end

end // end AV0Q220

// find footwear sizes
Function AV0Q221()
   /* for footwear - if the either size is in the array, use it.*/
   /* if not in the array, we need to convert the*/
   /* size wanted to numeric to compare with the*/
   /* array size.*/
   /* - for the beginning size, start from the beginning*/
   /* of the array. for the ending size, start from*/
   /* the end.*/


      /* beginning size*/


  if (AV0QW01.AV0QWORF in PG3REC.SY4IDDSC)
    AVWREC.AVWRQSZF = PG3REC.SY5SZID[sysVar.arrayIndex]; /* use it if there*/
    AV0QW01.AV0QWFSZ = PG3REC.SY5SZID[sysVar.arrayIndex];
    AV0QW01.AV0QWORF = PG3REC.SY4IDDSC[sysVar.arrayIndex];
  else
    AV0QW01.AV0QW-CHAR-FLD = AV0QW01.AV0QWORF; /* convert size*/
    AV0Q223(); /* wanted, then*/
    AV0QW01.AV0QW-COMP-FLD = AV0QW01.AV0QW-NUM-FLD; /* save*/
    AV0QW01.AV0QWIX6 = 1;
    while (AV0QW01.AV0QWIX6 <= 40)
      AV0QW01.AV0QW-CHAR-FLD = PG3REC.SY4IDDSC[AV0QWIX6]; /* convert*/
      AV0Q223(); /* to num*/
      if (AV0QW01.AV0QW-COMP-FLD <= AV0QW01.AV0QW-NUM-FLD) /* if this is*/
        AVWREC.AVWRQSZF = PG3REC.SY5SZID[AV0QWIX6]; /* the one, save*/
        AV0QW01.AV0QWFSZ = PG3REC.SY5SZID[AV0QWIX6];
        AV0QW01.AV0QWORF = PG3REC.SY4IDDSC[AV0QWIX6];
        AV0QW01.AV0QWIX6 = 41; /* end loop*/
      else
        AV0QW01.AV0QWIX6 = AV0QW01.AV0QWIX6 + 1; /* increment subscript*/
      end
    end
  end


      /* ending size*/

  if (AV0QW01.AV0QWORL in PG3REC.SY4IDDSC)
    AVWREC.AVWRQSZL = PG3REC.SY5SZID[sysVar.arrayIndex]; /* use it if there*/
    AV0QW01.AV0QWLSZ = PG3REC.SY5SZID[sysVar.arrayIndex];
    AV0QW01.AV0QWORL = PG3REC.SY4IDDSC[sysVar.arrayIndex];
  else
    AV0QW01.AV0QW-CHAR-FLD = AV0QW01.AV0QWORL; /* convert size*/
    AV0Q223(); /* wanted, then*/
    AV0QW01.AV0QW-COMP-FLD = AV0QW01.AV0QW-NUM-FLD; /* save*/
    AV0QW01.AV0QWIX6 = 40;
    while (AV0QW01.AV0QWIX6 >= 1)
      if (PG3REC.SY4IDDSC[AV0QWIX6] > " ")
        AV0QW01.AV0QW-CHAR-FLD = PG3REC.SY4IDDSC[AV0QWIX6]; /* convert*/
        AV0Q223(); /* to num*/
        if (AV0QW01.AV0QW-COMP-FLD >= AV0QW01.AV0QW-NUM-FLD) /* if this is*/
          AVWREC.AVWRQSZL = PG3REC.SY5SZID[AV0QWIX6]; /* the one, save*/
          AV0QW01.AV0QWLSZ = PG3REC.SY5SZID[AV0QWIX6];
          AV0QW01.AV0QWORL = PG3REC.SY4IDDSC[AV0QWIX6];
          AV0QW01.AV0QWIX6 = 0; /* end loop*/
        else
          AV0QW01.AV0QWIX6 = AV0QW01.AV0QWIX6 - 1; /* increment subscript*/
        end
      else
        AV0QW01.AV0QWIX6 = AV0QW01.AV0QWIX6 - 1; /* increment subscript*/
      end
    end
  end

  return; /* Return to previous process*/
end // end AV0Q221

// find apparel sizes
Function AV0Q222()
   /* for apparel - if the beginning size is in the array, use it.*/
   /* and others    if not in the array, use the first one.*/
                   /* - if the ending size is in the array, use it.*/
                     /* if not in the array, use the last one that's*/
                     /* not zeros.*/


      /* beginning size*/


  if (AV0QW01.AV0QWORF in PG3REC.SY4IDDSC)
    AVWREC.AVWRQSZF = PG3REC.SY5SZID[sysVar.arrayIndex]; /* use it if there*/
  else
    AVWREC.AVWRQSZF = PG3REC.SY5SZID[1]; /* use first one if not*/
  end


      /* ending size*/

  if (AV0QW01.AV0QWORL in PG3REC.SY4IDDSC)
    AVWREC.AVWRQSZL = PG3REC.SY5SZID[sysVar.arrayIndex]; /* use it if there*/
  else

    AV0QW01.AV0QWIX5 = 40; /* find ending size*/

    while (AV0QW01.AV0QWIX5 >= 1) /* While in range*/

      if (PG3REC.SY5SZID[AV0QWIX5] == 0) /* if end of valid sizes*/

        AV0QW01.AV0QWIX5 = AV0QW01.AV0QWIX5 - 1; /* decrement subscript*/

      else

        AVWREC.AVWRQSZL = PG3REC.SY5SZID[AV0QWIX5]; /* Last valid sz.*/

        AV0QW01.AV0QWIX5 = 0; /* Set end of routine*/

      end

    end

  end

  return; /* Return to previous process*/

end // end AV0Q222

// reformat size range
Function AV0Q223()
   /* ------------------------------------------------------------*/
   /* this routine reformats the external size range to a numeric*/
   /* field for comparison purposes.*/
   /* ------------------------------------------------------------*/

  if (AV0QW01.AV0QW-CHAR-BYTE[4] == ".")
    AV0QW01.AV0QW-NUM-BYTE[5] = AV0QW01.AV0QW-CHAR-BYTE[5];
    if (AV0QW01.AV0QW-CHAR-BYTE[3] == " ")
      AV0QW01.AV0QW-NUM-BYTE[4] = "0";
    else
      AV0QW01.AV0QW-NUM-BYTE[4] = AV0QW01.AV0QW-CHAR-BYTE[3];
    end
    if (AV0QW01.AV0QW-CHAR-BYTE[2] == " ")
      AV0QW01.AV0QW-NUM-BYTE[3] = "0";
    else
      AV0QW01.AV0QW-NUM-BYTE[3] = AV0QW01.AV0QW-CHAR-BYTE[2];
    end
    AV0QW01.AV0QW-NUM-BYTE[2] = "0";
    AV0QW01.AV0QW-NUM-BYTE[1] = "0";
  else
    AV0QW01.AV0QW-NUM-BYTE[5] = "0";
    AV0QW01.AV0QW-NUM-BYTE[4] = AV0QW01.AV0QW-CHAR-BYTE[5];
    if (AV0QW01.AV0QW-CHAR-BYTE[4] == " ")
      AV0QW01.AV0QW-NUM-BYTE[3] = "0";
    else
      AV0QW01.AV0QW-NUM-BYTE[3] = AV0QW01.AV0QW-CHAR-BYTE[4];
    end
    AV0QW01.AV0QW-NUM-BYTE[2] = "0";
    AV0QW01.AV0QW-NUM-BYTE[1] = "0";
  end
end // end AV0Q223

// move orig style info to map
Function AV0Q230()
   /* ------------------------------------------------------------*/
                         /* av0q230*/
   /* ------------------------------------------------------------*/
   /* - format map with info on style originally requested from*/
     /* order entry*/
   /* - move system date and map info*/
   /* ------------------------------------------------------------*/

   /* Set map fields dark*/
  AV0Q231();

   /* ------------------------------------------------------------*/
   /* load avwrec original style info to map fields*/
   /* ------------------------------------------------------------*/

  AV0QM001.OP1ORDBY = AVWREC.OP1ORDBY; /* customer contact*/
  AV0QM001.KUMSTRNM = AVWREC.KUMSTRNM; /* customer store name*/
  AV0QM001.KUMCITYS = AVWREC.KUMCITYS; /* customer store city*/
  AV0QM001.KUMXSTCD = AVWREC.KUMXSTCD; /* customer store state*/

  AV0QM001.SY1STNBR = AVWREC.SY1STNBR; /* orig requested style*/
  AV0QM001.SY1SSTNM = AVWREC.SY1SSTNM; /* orig requested style*/

  if (AVWREC.XQACD[2] != " ") /* if override quality present*/
    AV0QM001.XQACD = AVWREC.XQACD[2]; /* override quality to map*/
  else
    AV0QM001.XQACD = AVWREC.XQACD[1]; /* original quality to map*/
  end

  AV0QM001.AV1CUPRC = AVWREC.AVWWSP; /* current wholesale price*/
  AV0QM001.AV5SGPRC = AVWREC.AVWRTL; /* suggest retail price*/

  if (AVWREC.SY2CLRID[2] != " ") /* if override color present*/
    AV0QM001.SY2CLRID = AVWREC.SY2CLRID[2]; /* use override color*/
  else
    AV0QM001.SY2CLRID = AVWREC.SY2CLRID[1]; /* use orig requested color*/
  end

  if (AVWREC.SY2CLRID[1] == "*" /* if color wildcarded*/
   || AVWREC.SY2CLRID[2] == "*") /* if color wildcarded*/
    AV0QM001.SY2CLRAB = "**** ALL ****";
  else
    AV0QM001.SY2CLRAB = AVWREC.SY2CLRAB; /* color description*/
  end

  if (AVWREC.XDMCD[2] != " ") /* if override dimension present*/
    AV0QM001.XDMCD = AVWREC.XDMCD[2]; /* use override dimension*/
  else
    AV0QM001.XDMCD = AVWREC.XDMCD[1]; /* use orig requested dimension*/
  end


   /* first requested size of size range*/
  AV0QM001.OPWRGSZF = AVWREC.AVWSZFD;

   /* last requested size of size range*/
  AV0QM001.OPWRGSZL = AVWREC.AVWSZLD;

  AV0QM001.XGACD = AVWREC.XGACD; /* gender age code*/
  AV0QM001.XPCCD = AVWREC.XPCCD; /* category code*/

   /* ------------------------------------------------------------*/
   /* load map constant fields:*/
   /* ------------------------------------------------------------*/

  AV0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move current date to map*/

   /* ------------------------------------------------------------*/
end // end AV0Q230

// set map fields dark
Function AV0Q231()
   /* ------------------------------------------------------------*/
                         /* av0q231*/
   /* ------------------------------------------------------------*/

   /* if program was entered from Orders System,*/
   /* may only return to Order System*/
  if (AVWREC.AVWORDFL == "Y") /* if xferred from orders,*/
    set AV0QM001.CATOAP skip, invisible; /* make field unenterable*/
    set AV0QM001.CAITEM skip, invisible;
    set AV0QM001.CATOAPNM skip, invisible;
    set AV0QM001.CAITEMNM skip, invisible;
    set AV0QM001.PF4NAME skip, invisible; /* may only xfer to order entry*/
    set AV0QM001.AV0QMSEA cursor; /* place cursor on 1st select field*/
  else
     /* if not from order entry, transfer to order entry invalid*/
    set AV0QM001.AV0QMSEA skip; /* make selection fields unenterable*/
    set AV0QM001.AV0QMSEB skip;
    set AV0QM001.AV0QMSEC skip;
    set AV0QM001.PF6NAME skip, invisible;
    set AV0QM001.CATOAP cursor, initialAttributes; /* place cursor on fastpath*/
  end

  if (COMMAREA.CAFROMAP != "AV0L") /* if not from substitution list app*/
    set AV0QM001.PF9NAME skip, invisible; /* may not go to av0l*/
  end

   /* ------------------------------------------------------------*/
end // end AV0Q231

// get style/color descriptions
Function AV0Q240()
   /* ------------------------------------------------------------*/
                         /* av0q240*/
      /* Get the substitute product style/color descriptions*/
   /* ------------------------------------------------------------*/

  set SYCREC empty; /* Clear row storage area*/

  SYCREC.XGPCD = AVWREC.XGPCD; /* GPC code*/
  SYCREC.SY1STNBR = AVWREC.OP2SSTYN[AV0QWIX4]; /* Style code*/
  SYCREC.SY2CLRID = AVWREC.OP2SCLCD[AV0QWIX4]; /* Color code*/
  SYCREC.XDMCD = AVWREC.XDMCD; /* Dim code*/

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous precess.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user*/
   /* otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "240"; /* Module identification*/
  AV0QM001.XXXMODID = "240"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    AV0QW01.AV0QWERR = "Y"; /* yes to data in use*/
  else
    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV0Q240

// Format map with whse data
Function AV0Q260()
   /* ------------------------------------------------------------*/
                         /* av0q260*/
   /* ------------------------------------------------------------*/

   /* - format map with availability data for all selected*/
     /* warehouses*/
   /* - select next availability warehouse record*/
   /* ------------------------------------------------------------*/


  if (AV7REC.XWHCD == "07" ||  /* if wilsonville warehouse*/
  AV7REC.XWHCD == "42")        /* user is Canadian*/
    AV0Q261(); /* format 1st whse area on map*/
  else
    if (AV7REC.XWHCD == "04") /* if memphis warehouse*/
      AV0Q262(); /* format 2nd whse area on map*/
    else
      if (AV7REC.XWHCD == "02") /* if greenland warehouse*/
        AV0Q263(); /* format 3rd whse area on map*/
      end
    end
  end
end // end AV0Q260

// Format whse 1 data
Function AV0Q261()
   /* ------------------------------------------------------------*/
                         /* av0q261*/
   /* ------------------------------------------------------------*/
     /* Format 1st warehouse data in 1st warehouse area on map:*/
     /* 1. warehouse description*/
     /* 3. wholesale retail prices*/
     /* 5. size quantity data*/
   /* ------------------------------------------------------------*/

  AV0Q267(); /* get warehouse short abbrev*/

  if (converseVar.validationMsgNum == 0) /* if no error*/
    AV0QM001.AV0QMWAA = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* whse short abrev*/
  else
    AV0QM001.AV0QMWAA = "NF"; /* not found to map whse abrev*/
  end

  AV0QM001.AV0QMSTA = AVWREC.OP2SSTYN[AV0QWIX4]; /* subs style nbr*/
  AV0QM001.AV0QMSDA = SYCREC.SY1STYNM; /* style name*/
  AV0QM001.AV0QMCLA = AVWREC.OP2SCLCD[AV0QWIX4]; /* subs color id*/
  AV0QM001.AV0QMCAA = SYCREC.SY2CLRDS; /* color abreviation*/
  AV0QM001.AV0QMCMA = AVWREC.AVWCLMI[AV0QWIX4]; /* color match ind*/
  set AV0QM001.AV0QMCMA initialAttributes;

  AV0QM001.AV0QMDMA = AV7REC.XDMCD; /* dimension code*/

  if (AV7REC.XDMCD in XDMTBL.XDMCD) /* if dim cd in dim cd table*/
    AV0QM001.AV0QMDDA = XDMTBL.XDMDESC[sysVar.arrayIndex]; /* move description to map*/
  end

  AV0QM001.AV0QMCPA = AV0QW01.AV0QWCPN; /* catalogue page nbr*/
  AV0QM001.AV0QMCOA = AV7REC.AV2CMNT; /* style comment*/

   /* move first size to display to avail size code index*/
  AV0QW01.AV0QWIX1 = AV0QW01.AV0QWFSZ;
  AV0QW01.AV0QWIX2 = 1; /* set map index to 1*/

   /* display availability quantities and size descriptions*/
   /* for requested sizes:*/

  while (AV0QW01.AV0QWIX1 <= AV0QW01.AV0QWLSZ /* until index = last size*/
   && AV0QW01.AV0QWIX1 <= 40) /* or max nbr of size buckets*/
    AV0Q264();
                                   /* move avail qtys and size descs to map*/
  end

  AV0Q268(); /* get wholesale & retail price*/

  AV0QM001.AV0QMWPA = AV0QW01.AV0QWWPC; /* whole sale price to map*/
  AV0QM001.AV0QMRPA = AV0QW01.AV0QWRPC; /* retail price to map*/

   /* ------------------------------------------------------------*/
end // end AV0Q261

// Format whse 2 data
Function AV0Q262()
   /* ------------------------------------------------------------*/
                         /* av0q262*/
   /* ------------------------------------------------------------*/
     /* Format 2nd warehouse data in 2nd warehouse area on map:*/
     /* 1. warehouse description*/
     /* 3. wholesale retail prices*/
     /* 5. size quantity data*/
   /* ------------------------------------------------------------*/

  AV0Q267(); /* get warehouse short abbrev*/

  if (converseVar.validationMsgNum == 0) /* if no error*/
    AV0QM001.AV0QMWAB = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* whse short abrev*/
  else
    AV0QM001.AV0QMWAB = "NF"; /* not found to whse abrev*/
  end

  AV0QM001.AV0QMSTA = AVWREC.OP2SSTYN[AV0QWIX4]; /* subs style nbr*/
  AV0QM001.AV0QMSDA = SYCREC.SY1STYNM; /* style name*/
  AV0QM001.AV0QMCLA = AVWREC.OP2SCLCD[AV0QWIX4]; /* subs color id*/
  AV0QM001.AV0QMCAA = SYCREC.SY2CLRDS; /* color abreviation*/
  AV0QM001.AV0QMCMA = AVWREC.AVWCLMI[AV0QWIX4]; /* color match ind*/
  set AV0QM001.AV0QMCMA initialAttributes;

  AV0QM001.AV0QMDMA = AV7REC.XDMCD; /* dimension code*/

  if (AV7REC.XDMCD in XDMTBL.XDMCD) /* if dim cd in dim cd table*/
    AV0QM001.AV0QMDDA = XDMTBL.XDMABRV[sysVar.arrayIndex]; /* move description to map*/
  end

  AV0QM001.AV0QMCPA = AV0QW01.AV0QWCPN; /* catalogue page nbr*/
  AV0QM001.AV0QMCOB = AV7REC.AV2CMNT; /* style comment*/

   /* move first size to display to avail size code index*/
  AV0QW01.AV0QWIX1 = AV0QW01.AV0QWFSZ;
  AV0QW01.AV0QWIX2 = 1; /* set map index to 1*/

   /* display availability quantities and size descriptions*/
   /* for requested sizes:*/

  while (AV0QW01.AV0QWIX1 <= AV0QW01.AV0QWLSZ
   && AV0QW01.AV0QWIX1 <= 40)
    AV0Q265();
                                   /* move avail qtys and size descs to map*/
  end

  AV0Q268(); /* get wholesale & retail price*/

  AV0QM001.AV0QMWPA = AV0QW01.AV0QWWPC; /* whole sale price to map*/
  AV0QM001.AV0QMRPA = AV0QW01.AV0QWRPC; /* retail price to map*/

   /* ------------------------------------------------------------*/
end // end AV0Q262

// Format whse 3 data
Function AV0Q263()
   /* ------------------------------------------------------------*/
                         /* av0q263*/
   /* ------------------------------------------------------------*/
     /* Format 3rd warehouse data in 3rd warehouse area on map:*/
     /* 1. warehouse description*/
     /* 3. wholesale retail prices*/
     /* 5. size quantity data*/
   /* ------------------------------------------------------------*/

  AV0Q267(); /* get warehouse short abbrev*/

  if (converseVar.validationMsgNum == 0) /* if no error*/
    AV0QM001.AV0QMWAC = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* whse short abrev*/
  else
    AV0QM001.AV0QMWAC = "NF"; /* not found to whse abrev*/
  end

  AV0QM001.AV0QMSTA = AVWREC.OP2SSTYN[AV0QWIX4]; /* subs style nbr*/
  AV0QM001.AV0QMSDA = SYCREC.SY1STYNM; /* style name*/
  AV0QM001.AV0QMCLA = AVWREC.OP2SCLCD[AV0QWIX4]; /* subs color id*/
  AV0QM001.AV0QMCAA = SYCREC.SY2CLRDS; /* color abreviation*/
  AV0QM001.AV0QMCMA = AVWREC.AVWCLMI[AV0QWIX4]; /* color match ind*/
  set AV0QM001.AV0QMCMA initialAttributes;

  AV0QM001.AV0QMDMA = AV7REC.XDMCD; /* dimension code*/

  if (AV7REC.XDMCD in XDMTBL.XDMCD) /* if dim cd in dim cd table*/
    AV0QM001.AV0QMDDA = XDMTBL.XDMDESC[sysVar.arrayIndex]; /* move description to map*/
  else
    AV0QM001.AV0QMDDA = "NF"; /* not found to dim abrv*/
  end

  AV0QM001.AV0QMCPA = AV0QW01.AV0QWCPN; /* catalogue page nbr*/
  AV0QM001.AV0QMCOC = AV7REC.AV2CMNT; /* style comment*/

   /* move first size to display to avail size code index*/
  AV0QW01.AV0QWIX1 = AV0QW01.AV0QWFSZ;
  AV0QW01.AV0QWIX2 = 1; /* set map index to 1*/

   /* display availability quantities and size descriptions*/
   /* for requested sizes:*/

  while (AV0QW01.AV0QWIX1 <= AV0QW01.AV0QWLSZ /* until index = last size*/
   && AV0QW01.AV0QWIX1 <= 40) /* or max nbr of size buckets*/
    AV0Q266();
                                   /* move avail qtys and size descs to map*/
  end

  AV0Q268(); /* get wholesale & retail price*/

  AV0QM001.AV0QMWPA = AV0QW01.AV0QWWPC; /* whole sale price to map*/
  AV0QM001.AV0QMRPA = AV0QW01.AV0QWRPC; /* retail price to map*/

   /* ------------------------------------------------------------*/
end // end AV0Q263

// move qtys/sizes to map area A
Function AV0Q264()
   /* ------------------------------------------------------------*/
                            /* av0q264*/
     /* Move size descriptions and avail qtys to map area A*/
     /* 1. check condition codes*/
     /* 2. validate code dates*/
     /* 3. get date parameter for obtaining prices*/
   /* ------------------------------------------------------------*/

   /* show only valid sizes:*/
  if (PG3REC.SY4IDDSC[AV0QWIX1] == " ") /* if size description blank*/
    AV0QW01.AV0QWIX1 = AV0QW01.AV0QWIX1 + 1; /* increment 40 buckets index*/
    return; /* return to check next position*/
  end

   /* move size description to map:*/
  AV0QM001.AV0QMSZA[AV0QWIX2] = PG3REC.SY4IDDSC[AV0QWIX1];

   /* initialize quantity formatting fields:*/
  AV0QW01.AV0QWWRK = 0;
  AV0QW01.AV0QWZED = " ";

   /* check condition codes:*/

   /* if condition code is sold out or unavailable,*/
   /* move the code description to the map quantity area*/

  if (AV7REC.XCDCD[AV0QWIX1] == "03" /* sold out*/
   || AV7REC.XCDCD[AV0QWIX1] == "05") /* unavailable*/
      /* IF CODE IS IN THE CONDITION CODE TABLE*/
    if (AV7REC.XCDCD[AV0QWIX1] in XCDTBL.XCDCD)
       /* move code abreviation to map quantity field*/
      AV0QM001.AV0QMQTA[AV0QWIX2] = XCDTBL.XCDABRV[sysVar.arrayIndex];
    else
      AV0QM001.AV0QMQTA[AV0QWIX2] = "NF"; /* move not found to qty*/
    end
  end

   /* highlight at once quantities on map*/
  if (AV7REC.XCDCD[AV0QWIX1] == "01") /* if at-once quantity*/
     /* move binary qty to non binary numeric*/
    AV0QW01.AV0QWWRK = AV7REC.AV1AVQTY[AV0QWIX1];
     /* move numeric to alpha*/
    AV0QW01.AV0QWZED = AV0QW01.AV0QWWRK;
    AV0QW01.AV0QWIX0 = 1; /* initialize work field index*/
    while (AV0QWIX0 <= 3)
      AV0Q300(); /* zero edit field*/
    end
    AV0QM001.AV0QMQTA[AV0QWIX2] = AV0QW01.AV0QWZED;
     /* move alpha qty to alpha map field*/
    set AV0QM001.AV0QMSZA[AV0QWIX2] protect, bold;
    set AV0QM001.AV0QMQTA[AV0QWIX2] protect, bold;
  end

   /* If book date or open book quantity, check if date is in*/
   /* 30 day range.*/

  if (AV7REC.XCDCD[AV0QWIX1] == "02" /* book-date code*/
   || AV7REC.XCDCD[AV0QWIX1] == "04") /* open book code*/
     /* code date equal or greater than today's date*/
    if (AV7REC.AV5CDDT[AV0QWIX1] >= AV0QW02.AV0QWDT1
     /* and code date is equal to or less than 30 days from today*/
     && AV7REC.AV5CDDT[AV0QWIX1] <= AV0QW02.AV0QWDT2)
       /* convert the quantity and move to the map:*/

       /* move binary qty to non binary numeric*/
      AV0QW01.AV0QWWRK = AV7REC.AV1AVQTY[AV0QWIX1];
       /* move numeric to alpha*/
      AV0QW01.AV0QWZED = AV0QW01.AV0QWWRK;
      AV0QW01.AV0QWIX0 = 1; /* initialize work field index*/
      while (AV0QWIX0 <= 3)
        AV0Q300(); /* zero edit field*/
      end
       /* move alpha qty to alpha map field*/
      AV0QM001.AV0QMQTA[AV0QWIX2] = AV0QW01.AV0QWZED;
    else
       /* if date out of range, show 0 quantity for the size*/
      AV0QM001.AV0QMQTA[AV0QWIX2] = "0";
    end
  end

  AV0QW01.AV0QWIX1 = AV0QW01.AV0QWIX1 + 1; /* increment 40 buckets index*/
  AV0QW01.AV0QWIX2 = AV0QW01.AV0QWIX2 + 1; /* increment map index*/

  if (AV0QW01.AV0QWIX2 > 22) /* if map index exceeds nbr of map buckets*/
    AV0QW01.AV0QWIX1 = 41; /* force end of process*/
  end

   /* ------------------------------------------------------------*/
end // end AV0Q264

// move qtys/sizes to map area b
Function AV0Q265()
   /* ------------------------------------------------------------*/
                            /* av0q265*/
     /* Move size descriptions and avail qtys to map area 5*/
     /* 1. check condtion codes*/
     /* 2. validate code dates*/
     /* 3. get date parameter for obtaining prices*/
   /* ------------------------------------------------------------*/

   /* show only valid sizes:*/
  if (AV7REC.XCDCD[AV0QWIX1] == "  ") /* if condition code is blank*/
    AV0QW01.AV0QWIX1 = AV0QW01.AV0QWIX1 + 1; /* increment 40 buckets index*/
    return; /* return to check next position*/
  end

   /* move size description to map*/
  AV0QM001.AV0QMSZB[AV0QWIX2] = PG3REC.SY4IDDSC[AV0QWIX1];

   /* initialize quantity formatting fields:*/
  AV0QW01.AV0QWWRK = 0;
  AV0QW01.AV0QWZED = " ";

   /* check condition codes:*/

   /* if condition code is sold out or unavailable,*/
   /* move the code description to the map quantity area*/

  if (AV7REC.XCDCD[AV0QWIX1] == "03" /* sold out*/
   || AV7REC.XCDCD[AV0QWIX1] == "05") /* unavailable*/
      /* IF CODE IS IN THE CONDITION CODE TABLE*/
    if (AV7REC.XCDCD[AV0QWIX1] in XCDTBL.XCDCD)
       /* move code abreviation to map quantity field*/
      AV0QM001.AV0QMQTB[AV0QWIX2] = XCDTBL.XCDABRV[sysVar.arrayIndex];
    else
      AV0QM001.AV0QMQTB[AV0QWIX2] = "NF"; /* move not found to qty*/
    end
  end

   /* highlight at once quantities on map*/
  if (AV7REC.XCDCD[AV0QWIX1] == "01") /* if at-once quantity*/
     /* move binary qty to non binary numeric*/
    AV0QW01.AV0QWWRK = AV7REC.AV1AVQTY[AV0QWIX1];
     /* move numeric to alpha*/
    AV0QW01.AV0QWZED = AV0QW01.AV0QWWRK;
    AV0QW01.AV0QWIX0 = 1; /* initialize work field index*/
    while (AV0QWIX0 <= 3)
      AV0Q300(); /* zero edit field*/
    end
    AV0QM001.AV0QMQTB[AV0QWIX2] = AV0QW01.AV0QWZED;
     /* move alpha qty to alpha map field*/
    set AV0QM001.AV0QMSZB[AV0QWIX2] protect, bold;
    set AV0QM001.AV0QMQTB[AV0QWIX2] protect, bold;
  end

   /* If book date or open book quantity, check if date is in*/
   /* 30 day range.*/

  if (AV7REC.XCDCD[AV0QWIX1] == "02" /* book-date code*/
   || AV7REC.XCDCD[AV0QWIX1] == "04") /* open book code*/
     /* code date equal or greater than today's date*/
    if (AV7REC.AV5CDDT[AV0QWIX1] >= AV0QW02.AV0QWDT1
     /* and code date is equal to or less than 30 days from today*/
     && AV7REC.AV5CDDT[AV0QWIX1] <= AV0QW02.AV0QWDT2)
       /* convert the quantity and move to the map:*/
       /* move binary qty to non binary numeric*/
      AV0QW01.AV0QWWRK = AV7REC.AV1AVQTY[AV0QWIX1];
       /* move numeric to alpha*/
      AV0QW01.AV0QWZED = AV0QW01.AV0QWWRK;
      AV0QW01.AV0QWIX0 = 1; /* initialize work field index*/
      while (AV0QWIX0 <= 3)
        AV0Q300(); /* zero edit field*/
      end
       /* move alpha qty to alpha map field*/
      AV0QM001.AV0QMQTB[AV0QWIX2] = AV0QW01.AV0QWZED;
    else
       /* if date out of range, show 0 quantity for the size*/
      AV0QM001.AV0QMQTB[AV0QWIX2] = "0";
    end
  end

  AV0QW01.AV0QWIX1 = AV0QW01.AV0QWIX1 + 1; /* increment 40 buckets index*/
  AV0QW01.AV0QWIX2 = AV0QW01.AV0QWIX2 + 1; /* increment map index*/

  if (AV0QW01.AV0QWIX2 > 22) /* if map index exceeds nbr of map buckets*/
    AV0QW01.AV0QWIX1 = 41; /* force end of process*/
  end

   /* ------------------------------------------------------------*/
end // end AV0Q265

// move qtys/sizes to map area c
Function AV0Q266()
   /* ------------------------------------------------------------*/
                            /* av0q266*/
     /* Move size descriptions and avail qtys to map area c*/
     /* 1. check condition codes*/
     /* 2. validate code dates*/
     /* 3. surpress leading zeros in quantities*/
   /* ------------------------------------------------------------*/

   /* show only valid sizes:*/
  if (AV7REC.XCDCD[AV0QWIX1] == "  ") /* if condition code is blank*/
    AV0QW01.AV0QWIX1 = AV0QW01.AV0QWIX1 + 1; /* increment 40 buckets index*/
    return; /* increment index and check next position*/
  end

   /* move size description to map*/
  AV0QM001.AV0QMSZC[AV0QWIX2] = PG3REC.SY4IDDSC[AV0QWIX1];

   /* initialize quantity formatting fields:*/
  AV0QW01.AV0QWWRK = 0;
  AV0QW01.AV0QWZED = " ";

   /* check condition codes:*/

   /* if condition code is sold out or unavailable,*/
   /* move the code description to the map quantity area*/

  if (AV7REC.XCDCD[AV0QWIX1] == "03" /* sold out*/
   || AV7REC.XCDCD[AV0QWIX1] == "05") /* unavailable*/
      /* IF CODE IS IN THE CONDITION CODE TABLE*/
    if (AV7REC.XCDCD[AV0QWIX1] in XCDTBL.XCDCD)
       /* move code abreviation to map quantity field*/
      AV0QM001.AV0QMQTC[AV0QWIX2] = XCDTBL.XCDABRV[sysVar.arrayIndex];
    else
      AV0QM001.AV0QMQTC[AV0QWIX2] = "NF"; /* move not found to qty*/
    end
  end

   /* highlight at once quantities on map*/
  if (AV7REC.XCDCD[AV0QWIX1] == "01") /* if at-once quantity*/
     /* move binary qty to non binary numeric*/
    AV0QW01.AV0QWWRK = AV7REC.AV1AVQTY[AV0QWIX1];
     /* move numeric to alpha*/
    AV0QW01.AV0QWZED = AV0QW01.AV0QWWRK;
    AV0QW01.AV0QWIX0 = 1; /* initialize work field index*/
    while (AV0QWIX0 <= 3)
      AV0Q300(); /* zero edit field*/
    end
    AV0QM001.AV0QMQTC[AV0QWIX2] = AV0QW01.AV0QWZED;
     /* move alpha qty to alpha map field*/
    set AV0QM001.AV0QMSZC[AV0QWIX2] protect, bold;
    set AV0QM001.AV0QMQTC[AV0QWIX2] protect, bold;
  end

   /* If book date or open book quantity, check if date is in*/
   /* 30 day range.*/

  if (AV7REC.XCDCD[AV0QWIX1] == "02" /* book-date code*/
   || AV7REC.XCDCD[AV0QWIX1] == "04") /* open book code*/
     /* code date equal or greater than today's date*/
    if (AV7REC.AV5CDDT[AV0QWIX1] >= AV0QW02.AV0QWDT1
     /* and code date is equal to or less than 30 days from today*/
     && AV7REC.AV5CDDT[AV0QWIX1] <= AV0QW02.AV0QWDT2)
       /* convert the quantity and move to the map:*/

       /* move binary qty to non binary numeric*/
      AV0QW01.AV0QWWRK = AV7REC.AV1AVQTY[AV0QWIX1];
       /* move numeric to alpha*/
      AV0QW01.AV0QWZED = AV0QW01.AV0QWWRK;
      AV0QW01.AV0QWIX0 = 1; /* initialize work field index*/
      while (AV0QWIX0 <= 3)
        AV0Q300(); /* zero edit field*/
      end
       /* move alpha qty to alpha map field*/
      AV0QM001.AV0QMQTC[AV0QWIX2] = AV0QW01.AV0QWZED;
    else
       /* if date out of range, show 0 quantity for the size*/
      AV0QM001.AV0QMQTC[AV0QWIX2] = "0";
    end
  end

  AV0QW01.AV0QWIX1 = AV0QW01.AV0QWIX1 + 1; /* increment 40 buckets index*/
  AV0QW01.AV0QWIX2 = AV0QW01.AV0QWIX2 + 1; /* increment map index*/

  if (AV0QW01.AV0QWIX2 > 22) /* if map index exceeds nbr of map buckets*/
    AV0QW01.AV0QWIX1 = 41; /* force end of process*/
  end

   /* ------------------------------------------------------------*/
end // end AV0Q266

// get warehouse description
Function AV0Q267()
   /* ------------------------------------------------------------*/
                         /* av0q267*/
            /* get warehouse short abbreviation*/
   /* ------------------------------------------------------------*/

  if (AV7REC.XWHCD in XWHTBL.XWHCD /* if warehouse code in whse table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
                                   /* and warehouse is active status*/
    return; /* return to calling process*/
  else
    converseLib.validationFailed(260); /* invalid warehouse*/
  end
end // end AV0Q267

// get wholesale/retail prices
Function AV0Q268()
   /* --------------------------------------------------------*/
                         /* av0q268*/
    /* determine price effective date*/
    /* get wholesale and retail prices from dprod.vprice01*/
   /* --------------------------------------------------------*/

  AV0QW01.AV0QWPCI = " "; /* clear override price by indicator*/

   /* --------------------------*/
   /* Get price effective date*/
   /* --------------------------*/

  AV0QW01.AV0QWDT3 = 0; /* initialize price effective date*/
  AV0QW01.AV0QWWPC = 0; /* init wholesale price*/
  AV0QW01.AV0QWRPC = 0; /* init retail price*/

  if (AVWREC.XOTCD in XOTTBL.XOTCD /* order type code*/
   && XOTTBL.XOTPRCDT[sysVar.arrayIndex] == "B") /* order type date*/
     /* current date to price effective date*/
    AV0QW01.AV0QWDT3 = AV0QW02.AV0QWDT1;
  else
     /* orders need date to price effective date*/
    AV0QW01.AV0QWDT3 = AVWREC.OP1CUNDT;
  end

   /* ----------------------*/
   /* Get wholesale price*/
   /* ----------------------*/

  set SY5REC empty; /* set record clear*/

  SY5REC.XPYCD = "01"; /* wholesale price indicator*/
  AV0QW01.AV0QWSW3 = "N"; /* set price found switch to no*/

  AV0Q269(); /* Get dprod.vprice01*/

  if (converseVar.validationMsgNum != 0) /* if error occurred*/
    if (converseVar.validationMsgNum == 75) /* if data in use*/
      AV0QW01.AV0QWERR = "Y"; /* yes to data in use flag*/
    end
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display error*/
  end

  if (AV0QW01.AV0QWSW3 == "N" /* Price row NOT found*/
   && SYCREC.SY1PRCZS == "C") /* if price by color*/
    AV0QW01.AV0QWPCI = "S"; /* move price by style to override ind*/
    AV0Q269(); /* Get dprod.vprice01*/
  end

  if (converseVar.validationMsgNum != 0) /* if error occurred*/
    if (converseVar.validationMsgNum == 75) /* if data in use*/
      AV0QW01.AV0QWERR = "Y"; /* yes to data in use flag*/
    end
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display error*/
  end

  AV0QW01.AV0QWIX3 = 1; /* Set price field index*/

  if (AV0QW01.AV0QWSW3 == "N") /* Price row NOT found*/
    AV0QW01.AV0QWWPC = 000000000; /* zero Wholesale price*/
  else /* Price row found*/
    AV0QW01.AV0QWSW3 = "N"; /* set price found switch to no*/
    while (AV0QW01.AV0QWIX3 <= 6         
     /* Check all price fields w/price eff dt*/
     && SY5REC.SY5PCEDT[AV0QWIX3] > 0 /* date greater than zero*/
     && AV0QW01.AV0QWSW3 == "N") /* date found switch = no*/
      /* if vprice01 date less or equal to latest av7rec code date*/
      if (SY5REC.SY5PCEDT[AV0QWIX3] <= AV0QW01.AV0QWDT3)
        AV0QW01.AV0QWWPC = SY5REC.SY5PRCUN[AV0QWIX3]; /* wholesale price*/
        AV0QW01.AV0QWSW3 = "Y"; /* yes to price found switch*/
      end
      AV0QW01.AV0QWIX3 = AV0QW01.AV0QWIX3 + 1; /* increment index*/
    end
  end


   /* ------------------*/
   /* Get retail price*/
   /* ------------------*/

  set SY5REC empty; /* set record clear*/
  SY5REC.XPYCD = "02"; /* retail price indicator*/
  AV0QW01.AV0QWSW3 = "N"; /* set price found switch = no*/

  AV0Q269(); /* Get dprod.vprice01*/

  if (converseVar.validationMsgNum != 0) /* if error occurred*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display error*/
  end

  AV0QW01.AV0QWIX3 = 1; /* Set price field index*/

  if (AV0QW01.AV0QWSW3 == "N") /* Price row NOT found*/
    AV0QW01.AV0QWRPC = 000000000; /* Retail price*/
  else /* Price row found*/
    AV0QW01.AV0QWSW3 = "N"; /* set price found switch = no*/
    while (AV0QW01.AV0QWIX3 <= 6 /* Check all price fields w/code date*/
     && SY5REC.SY5PCEDT[AV0QWIX3] > 0) /* date greater than zero*/
      /* if vprice01 date less or equal to latest av7rec code date*/
      if (SY5REC.SY5PCEDT[AV0QWIX3] <= AV0QW01.AV0QWDT3)
        AV0QW01.AV0QWRPC = SY5REC.SY5PRCUN[AV0QWIX3]; /* Retail price*/
      end
      AV0QW01.AV0QWIX3 = AV0QW01.AV0QWIX3 + 1; /* increment index*/
    end
  end



end // end AV0Q268

// call dprod.vprice01
Function AV0Q269()
   /* --------------------------------------------------------*/
                         /* av0q269*/
                /* get data from dprod.vprice01*/
   /* --------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Get the product wholesale or retail price*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If logon is Canadian, get Canadian VPRICE01 record*/
   /* ------------------------------------------------------------*/

  if (AV7REC.XWHCD == "42") /* Canadian warehouse*/
    SY5REC.XCT-CTRY-CD = "CANA";
    SY5REC.ZFC-CRCY-CD = "CAD";
  end
  if (SYCREC.SY1PRCZS == "S" /* Price by style indicator*/
   || AV0QW01.AV0QWPCI == "S") /* override price by indicator*/
    SY5REC.SY2CLRID = "***"; /* wildcard  color code*/
    SY5REC.XDMCD = "**"; /* wildcard dim code*/
  else
    if (SYCREC.SY1PRCZS == "C") /* Price at colr/dim level*/
       /* load sy5rec key with current substitute style key*/
      SY5REC.SY2CLRID = AV7REC.SY2CLRID; /* Color code*/
      SY5REC.XDMCD = AV7REC.XDMCD; /* Dim code*/
    end
  end

  SY5REC.XGPCD = AV7REC.XGPCD; /* GPC code*/
  SY5REC.SY1STNBR = AV7REC.SY1STNBR; /* Style code*/
  SY5REC.SY5SZID = 0; /* Size id*/
  SY5REC.XQACD = AV7REC.XQACD; /* Quality*/

   /* price type code (SY5REC.XPYCD) is moved in  AV0q268*/

  try
    call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous precess.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AV0QW01.AV0QWSW3 = "Y"; /* Row found switch = yes*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if no data returned and price by color, try getting price*/
   /* data by style.*/
   /* ------------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE == 100) /* if no data found*/
    if (SYCREC.SY1PRCZS == "C") /* Price at colr/dim level*/
      SY5REC.SY2CLRID = "***"; /* wildcard  color code*/
      SY5REC.XDMCD = "**"; /* wildcard dim code*/

      try
        call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
      end /* Select row*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
          AV0QW01.AV0QWSW3 = "Y"; /* Row found switch = yes*/
          return; /* Return to previous process*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user*/
   /* otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "269"; /* Module identification*/
  AV0QM001.XXXMODID = "AV0Q269"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == +100)   /* row not found*/
      return;
    else
      converseLib.validationFailed(76); /* Unexpected error occurred*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRICE01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY5REC.SY5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

   /* ------------------------------------------------------------*/
end // end AV0Q269

// converse av0qm001
Function AV0Q270()


  converse AV0QM001 ;
end // end AV0Q270

// Check attention identifier
Function AV0Q275()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  AV0QM001.XXXMODID = "275"; /* Module identification*/

  if (AV0QM001.CAITEM != " " /* if data in fastpath to option*/
   && AV0QM001.CATOAP == " ") /* and the application is blank*/
    set AV0QM001.CATOAP cursor, bold;
    converseLib.validationFailed(115); /* 'enter to application' msg*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* flow to display map*/
  end

  if (AV0QM001.CATOAP > " ") /* FAST PATH was requested*/
    AV0QW01.AV0QWSYS = AV0QM001.CATOAP; /* move toap to system breakout*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (AV0QW01.AV0QWSYS != "OP") /* if path to order entry requested*/
        if (AVWREC.AVWORDFL == "Y") /* if path to order entry requested*/
          converseLib.validationFailed(257); /* may only return to order entry*/
          AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
          exit stack; /* exit to display error*/
        end
      end

      if (AV0QW01.AV0QWSYS == "OP") /* if path to order entry requested*/
        converseLib.validationFailed(261); /* must press pf6 to transfer to orders*/
        AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
        exit stack; /* exit to display error*/
      end

      if (AV0QM001.CATOAP == "AV0K") /* if request to xfer to subs*/
         /* restore original external size ranges*/
        AVWREC.AVWRQSZF = AV0QW01.AV0QWSZF;
        AVWREC.AVWRQSZL = AV0QW01.AV0QWSZL;

        COMMAREA.CAUSERA = AVWREC.CAUSERA; /* send avwrec info*/
      else
        set AVWREC empty; /* clear avwrec*/
      end

      if (AV0QM001.CATOAP == "AV0L") /* if request to xfer to subs*/
        if (COMMAREA.CAFROMAP != "AV0L") /* not from av0l*/
          set AV0QM001.CATOAP cursor, bold; /* hilite to application*/
          AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
          converseLib.validationFailed(15); /* invalid option*/
          exit stack; /* exit to display error*/
        end
      end

      COMMAREA.CAFROMAP = "AV0Q"; /* set up commarea for transfer*/
      COMMAREA.CATOAP = AV0QM001.CATOAP;
      COMMAREA.CAITEM = AV0QM001.CAITEM;
      XPAV002(); /* Exit to another application*/
       /* if exit not successful*/
      AV0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      set AV0QM001.CATOAP cursor, bold; /* Highlight*/
      AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
      exit stack; /* Exit to display map*/
    else
      converseLib.validationFailed(15); /* Indicate PF key not valid*/
      AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
      exit stack; /* Exit to display map*/
    end
  end


  if (converseVar.eventKey is pf6) /* if request xfer to orders entry*/
    if (AVWREC.AVWORDFL != "Y") /* if not from order entry*/
      converseLib.validationFailed(15); /* invalid option*/
      AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
      exit stack; /* exit to display message*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* request help screen*/
   || converseVar.eventKey is pf4) /* or exit to system main menu*/
    if (AVWREC.AVWORDFL == "Y") /* if from order entry*/
      converseLib.validationFailed(15); /* invalid option*/
      AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
      exit stack; /* exit to display error*/
    end
    COMMAREA.CAFROMAP = "AV0Q"; /* set up commarea for transfer*/
    XPAV002(); /* Exit to another application*/

     /* if exit not successful*/
    AV0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf5) /* if request to xfer to subs*/

    if (AVWREC.XLTCD[1] == "  ") /* If no last code*/
      AVWREC.XLTCD[1] = "* "; /* Wildcard last code*/
    end

     /* restore original external size ranges*/
    AVWREC.AVWRQSZF = AV0QW01.AV0QWSZF;
    AVWREC.AVWRQSZL = AV0QW01.AV0QWSZL;

    COMMAREA.CAUSERA = AVWREC.CAUSERA; /* send avwrec info*/
    COMMAREA.CAFROMAP = "AV0Q"; /* set up commarea for transfer*/
    COMMAREA.CATOAP = "AV0K";

    XPAV002(); /* Exit to another application*/

     /* if exit not successful*/

    AV0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    set AV0QM001.CATOAP cursor, bold; /* Highlight*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/

    exit stack; /* Exit to display map*/

  end


  if (converseVar.eventKey is pf3) /* if request to xfer to subs list*/
     /* restore original external size ranges*/
    AVWREC.AVWRQSZF = AV0QW01.AV0QWSZF;
    AVWREC.AVWRQSZL = AV0QW01.AV0QWSZL;

    COMMAREA.CAUSERA = AVWREC.CAUSERA; /* send avwrec info*/
    COMMAREA.CAFROMAP = "AV0Q"; /* set up commarea for transfer*/
    COMMAREA.CATOAP = "AV0L";
    XSEXIT(); /* Exit to list screen*/
     /* if exit not successful*/
    AV0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    set AV0QM001.CATOAP cursor, bold; /* Highlight*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* if request scroll back*/
   || converseVar.eventKey is pf8 /* if request scroll frwd*/
   || converseVar.eventKey is pf6 /* or xfer to orders*/
   || converseVar.eventKey is enter) /* or continue processing:*/
  else
    converseLib.validationFailed(15); /* 'invalid option' msg*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display map*/
  end


end // end AV0Q275

// Exit to order entry
Function AV0Q276()
   /* *************************************************************/
      /* this is a clone of xsexit without the call to mn0s,*/
       /* because security not set up for op0h in &op.*/
   /* *************************************************************/

  if (COMMAREA.CACURSYS == COMMAREA.CATOSYS)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = COMMAREA.CATOAP;
    COMMAREA.CATOAP = " ";
    sysVar.transferName = COMMAREA.CACURRAP;
    transfer to program sysVar.transferName passing COMMAREA;
  else
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = COMMAREA.CATOAP;
    COMMAREA.CATOAP = " ";
    sysVar.transferName = COMMAREA.CACURRAP;
    transfer to transaction sysVar.transferName passing COMMAREA;
  end


end // end AV0Q276

// verify data selection
Function AV0Q280()
   /* ------------------------------------------------------------*/
                            /* av0q280*/
                 /* verify and process selection*/
   /* ------------------------------------------------------------*/

  if (AV0QW01.AV0QWERR == "Y") /* if database in use*/
    AV0QWDFL = "Y"; /* move yes to request data flag*/
    AV0QWERR = "N"; /* move no to data in use*/
    exit stack; /* exit to restart processing*/
  end

  if (AV0QM001.AV0QMSEA != " "
   && AV0QM001.AV0QMSEA != "S")
    set AV0QM001.AV0QMSEA cursor, bold;
    converseLib.validationFailed(262); /* enter 's' to make a selection*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display error*/
  end

  if (AV0QM001.AV0QMSEB != " "
   && AV0QM001.AV0QMSEB != "S")
    set AV0QM001.AV0QMSEB cursor, bold;
    converseLib.validationFailed(262); /* enter 's' to make a selection*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display error*/
  end

  if (AV0QM001.AV0QMSEC != " "
   && AV0QM001.AV0QMSEC != "S")
    set AV0QM001.AV0QMSEC cursor, bold;
    converseLib.validationFailed(262); /* enter 's' to make a selection*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display error*/
  end

  if (AV0QM001.AV0QMSEA != " " /* if a selection made*/
   || AV0QM001.AV0QMSEB != " " 
   || AV0QM001.AV0QMSEC != " ")
    if (converseVar.eventKey is pf6) /* if pf6 pressed, valid*/
    else /* ;*/
      converseLib.validationFailed(261); /* enter pf6 to transfer to op0i*/
      AV0QW01.AV0QWDFL = "N"; /* move 'n' to request data flag*/
      exit stack; /* exit to display error*/
    end
  end

  if (converseVar.eventKey is pf6) /* if transfer to orders requested*/
    if (AV0QM001.AV0QMSEA != "S" /* whse 1 not selected*/
     && AV0QM001.AV0QMSEB != "S" /* whse 2 not selected*/
     && AV0QM001.AV0QMSEC != "S") /* whse 3 not selected*/
      AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
      converseLib.validationFailed(262); /* enter 's' to make selection*/
      exit stack; /* exit to display error*/
    end
  end

  if (converseVar.eventKey is pf6) /* if transfer to orders requested*/
    if (AV0QM001.AV0QMSEA == "S" /* whse 1 selected*/
     && AV0QM001.AV0QMSEB == "S") /* and whse 2 selected*/
      AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
      converseLib.validationFailed(268); /* may only select one warehouse*/
      exit stack; /* exit to display error*/
    end
    if (AV0QM001.AV0QMSEA == "S" /* whse 1 selected*/
     && AV0QM001.AV0QMSEC == "S") /* and whse 3 selected*/
      AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
      converseLib.validationFailed(268); /* may only select one warehouse*/
      exit stack; /* exit to display error*/
    end
    if (AV0QM001.AV0QMSEB == "S" /* whse 2 selected*/
     && AV0QM001.AV0QMSEC == "S") /* and whse 3 selected*/
      AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
      converseLib.validationFailed(268); /* may only select one warehouse*/
      exit stack; /* exit to display error*/
    end
  end

  if (converseVar.eventKey is pf6)
    if (AV0QM001.AV0QMSEA == "S"
     || AV0QM001.AV0QMSEB == "S"
     || AV0QM001.AV0QMSEC == "S")
      AV0Q281(); /* move fields to orders record*/
      COMMAREA.CAUSERA = OSGREC.OSGGROUP;
      COMMAREA.CATOAP = AVWREC.XSRSYSID;
      COMMAREA.CAFROMAP = "AV0Q";
      AV0Q276(); /* exit to order entry*/
       /* if xfer fails:*/
      AV0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* error message to map*/
      AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
      exit stack; /* exit to display error*/
    end
  end

  if (converseVar.eventKey is enter /* scroll forward*/
   || converseVar.eventKey is pf8)  /* scroll forward*/
    AV0QW02.AV0QWSW4 = "N"; /* move no to product found switch*/
    while (AV0QW02.AV0QWSW4 == "N") /* while selected product not found*/
      AV0Q282(); /* search for next selected style*/
    end
  end

  if (converseVar.eventKey is pf7) /* if scroll back requested*/
    AV0QW02.AV0QWSW4 = "N"; /* move no to product found switch*/
    while (AV0QW02.AV0QWSW4 == "N") /* while selected product not found*/
      AV0Q283(); /* search for previous selected style*/
    end
  end

  set AV0QW01 empty; /* clear work fields*/

  if (AVWREC.AVWOREXF > " ") /* if something in ovrd first size*/
    AV0QW01.AV0QWORF = AVWREC.AVWOREXF; /* restore it*/
  end

  if (AVWREC.AVWOREXL > " ") /* if something in ovrd last size*/
    AV0QW01.AV0QWORL = AVWREC.AVWOREXL; /* restore it*/
  end

  AV0QW01.AV0QWDFL = "Y"; /* move yes to request data flag*/

end // end AV0Q280

// move avwrec data to osgrec
Function AV0Q281()
   /* ------------------------------------------------------------*/
                         /* av0q281*/
               /* move avwrec data to osgrec*/
   /* ------------------------------------------------------------*/

  set OSGREC empty; /* clear data transfer record*/

  OSGREC.XSRSYSID = AVWREC.XSRSYSID; /* XSR-SCRPD-OWN-ID*/
  OSGREC.XSRSUBID = AVWREC.XSRSUBID; /* XSR-SCRPD-SUB-ID*/
  OSGREC.XSRSQNBR = AVWREC.XSRSQNBR; /* XSR-SCRPD-SEQ-NBR*/
  OSGREC.OSGPRSUB = AVWREC.OSGPRSUB; /* OPWREC pointer*/
  OSGREC.KUCCOID = AVWREC.KUCCOID; /* Company id*/
  OSGREC.KUMSTRID = AVWREC.KUMSTRID; /* Store id*/
  OSGREC.XNXCD = AVWREC.XNXCD; /* Nike dept code*/
  OSGREC.OP1ORDBY = AVWREC.OP1ORDBY; /* OP_ORDERED_BY*/
  OSGREC.XGPCD = AVWREC.XGPCD; /* GPC*/
  OSGREC.SY1STNBR = AVWREC.SY1STNBR; /* Style*/
  OSGREC.SY2CLRID = AVWREC.SY2CLRID[1]; /* Color*/
  OSGREC.XDMCD = AVWREC.XDMCD; /* Dim*/
  OSGREC.XOWCD = AVWREC.XOWCD; /* Owner group*/
  OSGREC.XSDCD = AVWREC.XSDCD; /* Spec difference*/
  OSGREC.XSACD = AVWREC.XSACD; /* Shade*/
  OSGREC.XPGCD = AVWREC.XPGCD; /* Pkg. type*/
  OSGREC.XUMCD = AVWREC.XUMCD[1]; /* UOM*/
  OSGREC.XLCCD = AVWREC.XLCCD[1]; /* Life cycle*/
  OSGREC.XQACD = AVWREC.XQACD[1]; /* Quality*/
  OSGREC.XOTCD = AVWREC.XOTCD; /* Order type*/
  OSGREC.OP1CUNDT = AVWREC.OP1CUNDT; /* Cust need date*/

  if (converseVar.eventKey is pf6) /* to order entry with subs*/
    AV0Q285(); /* get warehouse code*/
  end

  if (converseVar.eventKey is pf3) /* to order entry with subs*/
    AV0Q286(); /* get warehouse code*/
  end

  OSGREC.OPWRQSZF = AVWREC.OPWRQSZF; /* Request first size*/
  OSGREC.OPWRQSZL = AVWREC.OPWRQSZL; /* Request last size*/

  if (converseVar.eventKey is pf6) /* if substitute selected*/
    OSGREC.OP2SSTYN = AVWREC.OP2SSTYN[AV0QWIX4]; /* Sub style*/
    OSGREC.OP2SCLCD = AVWREC.OP2SCLCD[AV0QWIX4]; /* Sub color*/
    OSGREC.OP2SDMCD = AVWREC.OP2SDMCD[AV0QWIX4]; /* Dim*/
  end

   /* ------------------------------------------------------------*/
end // end AV0Q281

// search forward for subs style
Function AV0Q282()
   /* ------------------------------------------------------------*/
                            /* av0q282*/
          /* search for selected substitute style in avwrec*/
                        /* scroll forward*/
   /* ------------------------------------------------------------*/

   /* increment substitute style index :*/
  AV0QW02.AV0QWIX4 = AV0QW02.AV0QWIX4 + 1;

   /* subs style index value is greater than 14:*/
  if (AV0QW02.AV0QWIX4 > 14)
    AV0QW02.AV0QWIX4 = 14; /* reset index to in bounds*/
    converseLib.validationFailed(140); /* end of substitute products list*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display message*/
  end

  if (AVWREC.OP2SSTYN[AV0QWIX4] == " ") /* if no more products*/
    converseLib.validationFailed(140); /* end of products list*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display error*/
  end

  if (AVWREC.AVWSEL[AV0QWIX4] == "S" /* if selected sub style*/
   || AVWREC.AVWSEL[AV0QWIX4] == "V")
                                   /* or selected style already viewed*/
    AVWREC.AVWSEL[AV0QWIX4] = "V"; /* mark style as viewed*/
    AV0QW02.AV0QWSW4 = "Y"; /* yes to selected style found sw*/
  end

end // end AV0Q282

// search back for subs style
Function AV0Q283()
   /* ------------------------------------------------------------*/
                            /* av0q283*/
          /* search for selected substitute style in avwrec*/
                          /* scroll back*/
   /* ------------------------------------------------------------*/

   /* decrement substitute style index :*/
  AV0QW02.AV0QWIX4 = AV0QW02.AV0QWIX4 - 1;

   /* subs style index value is equal 0:*/
  if (AV0QW02.AV0QWIX4 < 1)
    AV0QW02.AV0QWIX4 = 1; /* reset index to in bounds*/
    converseLib.validationFailed(141); /* no more products to scroll back*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display message*/
  end

  if (AVWREC.OP2SSTYN[AV0QWIX4] == " ") /* if no more products*/
    converseLib.validationFailed(141); /* end of products list*/
    AV0QW01.AV0QWDFL = "N"; /* no to request data flag*/
    exit stack; /* exit to display error*/
  end

  if (AVWREC.AVWSEL[AV0QWIX4] == "S" /* if selected sub style*/
   || AVWREC.AVWSEL[AV0QWIX4] == "V")
                                   /* or selected style already viewed*/
    AVWREC.AVWSEL[AV0QWIX4] = "V"; /* mark style as viewed*/
    AV0QW02.AV0QWSW4 = "Y"; /* yes to selected style found sw*/
  end

end // end AV0Q283

// convert whse abrev to code
Function AV0Q285()
   /* ------------------------------------------------------------*/
                         /* av0q265*/
            /* get warehouse short abbreviation*/
   /* ------------------------------------------------------------*/

  if (AV0QM001.AV0QMSEA == "S") /* if whse a selected*/
    if (AV0QM001.AV0QMWAA in XWHTBL.XWHSABRV) /* if whse abrev in whse tbl*/
      OSGREC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
                                   /* move whse code to osgrec*/
    end
  end

  if (AV0QM001.AV0QMSEB == "S") /* if whse a selected*/
    if (AV0QM001.AV0QMWAB in XWHTBL.XWHSABRV) /* if whse abrev in whse table*/
      OSGREC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex]; /* whse code to osgrec*/
    end
  end

  if (AV0QM001.AV0QMSEC == "S") /* if whse a selected*/
    if (AV0QM001.AV0QMWAC in XWHTBL.XWHSABRV) /* if whse abrev in whse table*/
      OSGREC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex]; /* whse code to osgrec*/
    end
  end

end // end AV0Q285

// get whse abrev to code
Function AV0Q286()
   /* ------------------------------------------------------------*/
                         /* av0q276*/
                  /* get warehouse code*/
   /* ------------------------------------------------------------*/

  if (AVWREC.XWHCD[2] != " ")
    if (AVWREC.XWHCD[2] == "*")
      OSGREC.XWHCD = "07";
    else
      OSGREC.XWHCD = AVWREC.XWHCD[2];
    end
  else
    if (AVWREC.XWHCD[1] == "*")
      OSGREC.XWHCD = "07";
    else
      OSGREC.XWHCD = AVWREC.XWHCD[1];
    end
  end



end // end AV0Q286

// reset hilighted fields
Function AV0Q290()
   /* ------------------------------------------------------------*/
                            /* av0q290*/
            /* reset hilited fields on av0qm001*/
   /* ------------------------------------------------------------*/

   /* clear 1st warehouse area (area a):*/

  set AV0QM001.AV0QMSTA initialAttributes; /* style number*/
  set AV0QM001.AV0QMSEA initialAttributes; /* selection indicator*/

  AV0QW01.AV0QWIX2 = 1; /* move 1 to map index*/

  while (AV0QW01.AV0QWIX2 <= 20) /* for each size qty position*/
    set AV0QMSZA initialAttributes; /* turn off size field hilite*/
    set AV0QMQTA initialAttributes; /* turn off quantity field hilite*/
    AV0QW01.AV0QWIX2 = AV0QW01.AV0QWIX2 + 1; /* increment map index*/
  end

   /* clear 2nd warehouse area (area b):*/

  set AV0QM001.AV0QMSEB initialAttributes; /* selection indicator*/
  AV0QW01.AV0QWIX2 = 1; /* move 1 to map index*/

  while (AV0QW01.AV0QWIX2 <= 20) /* for each size qty position*/
    set AV0QMSZB initialAttributes; /* turn off size field hilite*/
    set AV0QMQTB initialAttributes; /* turn off quantity field hilite*/
    AV0QW01.AV0QWIX2 = AV0QW01.AV0QWIX2 + 1; /* increment map index*/
  end

   /* clear 3rd warehouse area (area c):*/

  set AV0QM001.AV0QMSEC initialAttributes; /* selection indicator*/
  AV0QW01.AV0QWIX2 = 1; /* move 1 to map index*/

  while (AV0QW01.AV0QWIX2 <= 20) /* for each size qty position*/
    set AV0QMSZC initialAttributes; /* turn off size field hilite*/
    set AV0QMQTC initialAttributes; /* turn off quantity field hilite*/
    AV0QW01.AV0QWIX2 = AV0QW01.AV0QWIX2 + 1; /* increment map index*/
  end

end // end AV0Q290

// zero edit quantity field
Function AV0Q300()
   /* ------------------------------------------------------------*/
                            /* av0q300*/
       /* Replace leading zeros with spaces in quantity field*/
   /* ------------------------------------------------------------*/

  if (AV0QW01.AV0QWED0[AV0QWIX0] != "0" /* if end of leading zeros*/
   && AV0QW01.AV0QWED0[AV0QWIX0] != " ")
    AV0QW01.AV0QWIX0 = 4; /* force end of edit routine*/
    return; /* return to calling process*/
  end

  if (AV0QW01.AV0QWED0[AV0QWIX0] == "0")
    AV0QW01.AV0QWED0[AV0QWIX0] = " ";
  end

  AV0QW01.AV0QWIX0 = AV0QW01.AV0QWIX0 + 1; /* increment index*/
   /* ------------------------------------------------------------*/
end // end AV0Q300

//*** RECORD=AV0QW01 ****
//                        av0qw01
// this record holds indexes, work dates, workfields, counters
// flags and other miscellaneous program related data
// ***********************
Record AV0QW01 type basicRecord
  5 AV0QWDFL AV0QWDFL ; 
  5 AV0QWERR AV0QWERR ; 
  5 AV0QWDT3 AV0QWDT3 ; 
  5 AV0QWIX0 AV0QWIX0 ; 
  5 AV0QWIX1 AV0QWIX1 ; 
  5 AV0QWIX2 AV0QWIX2 ; 
  5 AV0QWIX3 AV0QWIX3 ; 
  5 AV0QWIX5 AV0QWIX5 ; 
  5 AV0QWIX6 AV0QWIX6 ; 
  5 AV0QWSW1 AV0QWSW1 ; 
  5 AV0QWSW3 AV0QWSW3 ; 
  5 AV0QWFSZ AV0QWFSZ ; 
  5 AV0QWLSZ AV0QWLSZ ; 
  5 AV0QWCPN AV0QWCPN ; 
    10 AV0QWCID AV0QWCID ; 
    10 AV0QWPNB AV0QWPNB ; 
  5 AV0QWWPC AV0QWWPC ; 
  5 AV0QWRPC AV0QWRPC ; 
  5 AV0QWTAP AV0QWTAP ; 
    10 AV0QWSYS AV0QWSYS ; 
    10 AV0QWAID AV0QWAID ; 
  5 AV0QWZED AV0QWZED ; 
    10 AV0QWED0 AV0QWED0 [4] ; 
  5 AV0QWWRK AV0QWWRK ; 
  5 AV0QWPCI AV0QWPCI ; 
  5 AV0QWORF AV0QWORF ; 
  5 AV0QWORL AV0QWORL ; 
  5 AV0QWSZF AV0QWSZF ; 
  5 AV0QWSZL AV0QWSZL ; 
  5 AV0QW-CHAR-FLD AV0QW-CHAR-FLD ; 
    10 AV0QW-CHAR-BYTE AV0QW-CHAR-BYTE [5] ; 
  5 AV0QW-NUM-FLD AV0QW-NUM-FLD ; 
    10 AV0QW-NUM-BYTE AV0QW-NUM-BYTE [5] ; 
  5 AV0QW-COMP-FLD AV0QW-COMP-FLD ; 
end // end AV0QW01

//*** RECORD=AV0QW02 ****
//                        av0qw02
// this record holds the index to the up to 14 substitute
// style, color, dimension fields and selection fields.
// only those styles marked with an 's' in the selection
// fields will be processed for displaying on the map.
// ***********************
Record AV0QW02 type basicRecord
  10 AV0QWIX4 AV0QWIX4 ; 
  10 AV0QWSW4 AV0QWSW4 ; 
  10 AV0QWDT1 AV0QWDT1 ; 
    15 AV0QWDC1 AV0QWDC1 ; 
    15 AV0QWDY1 AV0QWDY1 ; 
    15 AV0QWDM1 AV0QWDM1 ; 
    15 AV0QWDD1 AV0QWDD1 ; 
  10 AV0QWDT2 AV0QWDT2 ; 
end // end AV0QW02

// work field
DataItem AV0QW-CHAR-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem AV0QW-CHAR-FLD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem AV0QW-COMP-FLD num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem AV0QW-NUM-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem AV0QW-NUM-FLD num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// application id
DataItem AV0QWAID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// catalogue id
DataItem AV0QWCID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// catalogue id and page
DataItem AV0QWCPN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem AV0QWDC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem AV0QWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request data flag
DataItem AV0QWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem AV0QWDM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// todays date(ccyymmdd)
DataItem AV0QWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// today + 30 days date(ccyymmdd)
DataItem AV0QWDT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work price effect dt(ccyymmdd)
DataItem AV0QWDT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AV0QWDY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work sub field
DataItem AV0QWED0 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data in use flag
DataItem AV0QWERR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first size to display
DataItem AV0QWFSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zero edit work field index
DataItem AV0QWIX0 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 40 buckets index
DataItem AV0QWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map size qty index
DataItem AV0QWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price effective date index
DataItem AV0QWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// substitution styles index
DataItem AV0QWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem AV0QWIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem AV0QWIX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last size to display
DataItem AV0QWLSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// orig ext size range first
DataItem AV0QWORF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orig ext size range last
DataItem AV0QWORL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price-by indicator
DataItem AV0QWPCI char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// catalogue page number
DataItem AV0QWPNB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subs product retail price
DataItem AV0QWRPC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of avqty02 cursor
DataItem AV0QWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price found switch
DataItem AV0QWSW3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected style found switch
DataItem AV0QWSW4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system to xfer to
DataItem AV0QWSYS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orig int size range first
DataItem AV0QWSZF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// orig int size range last
DataItem AV0QWSZL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wrk to application
DataItem AV0QWTAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subs product wholesale price
DataItem AV0QWWPC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work field
DataItem AV0QWWRK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zero edit work field
DataItem AV0QWZED char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

