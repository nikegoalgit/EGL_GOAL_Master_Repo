package av0v;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AV0V ****
// ;----------------------- av0v ------------------------------
// ;
// ;             availability select
// ;
// ;-----------------------------------------------------------
// ;
// ; maintenance history:
// ; --------------------
// ;
// ;  date      name   description
// ;  ----      ----   ----------------------------------------
// ;12-15-88   JWOOD   ADDED NONCSP OPTION TO CALLS
// ;12-15-88   JWOOD   ADDED XSSEGTR LOGIC
// ;05-16-89   mblail  changed xsncd to xsecd because of
// ;                   table changes.
// ;06-28-91   madams  increased avail keys occurs from 200
// ;                   to 500 and all supporting code.
// ;10-22-93   MSMIT2  PF8 NOT SHOWING NO MORE PAGES WITH NO
// ;                   INFO.
// ;09-24-97   SREDDY  Size of AV0VW01 is chaned to 530.
// ;10-17-97   SATINA  The field WHSE is introduced in the map
// ;                   AV0VM010,code changes done to process
// ;                   the entered warehouse.
// ;05-07-98   SATINA  GPC description & Style description
// ;                   were made appear in the screen AV0VM010.
// ;06-19-01   kkarla  comented out the call to process avov255
// ;                   as xsntbl is not being used in the appln
// ;
// ; description:
// ; ------------
// ; the purpose of this application is to allow the user to
// ; call up all 'varieties' of a product given the style
// ; number and gpc. it will list all the products in all
// ; warehouse that the given gpc is valid for. for each pro-
// ; duct the total at once quantity is shown. the user may
// ; then select up to 50 products and when enter is hit the
// ; user is transferred to the application av0p (phased
// ; availability) where the products may be examined in more
// ; detail.
// ;
// ;-----------------------------------------------------------
// *********************
Program AV0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV0VW01 AV0VW01; // record
  AV0VW02 AV0VW02; // record
  AV0VW04 AV0VW04; // record
  AV7REC AV7REC; // record
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use AV0VM.AV0VM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AV0V010: AV0V010();
    goto AV0V020;
    AV0V020: AV0V020();
    if (converseVar.eventKey is pa2)
      goto AV0V010; /* initialization*/
    else
      goto AV0V020; /* main process*/
    end
  end // end main
end // end AV0V

// validate whse code entered
Function AV0V-1001()
   /* --------------------- av0v-101 --------------------------------*/
   /* validate whse code*/
   /* --------------------- av0v-101 --------------------------------*/


  sysVar.arrayIndex = 0; /* initialize  ezetst*/

  if (AV0VM010.XWHCOD != "**") /* whse code   entered*/
    if (AV0VM010.XWHCOD in XWHTBL.XWHCD) /* validate whse code*/
    end

    if (sysVar.arrayIndex == 0) /* not in table*/
      converseLib.validationFailed(58); /* display error msg*/
      set AV0VW01 empty;
      AV0V210(); /* clear map*/
      set AV0VM010.XWHCOD cursor, modified, bold; /* highlight the field*/
      exit stack;
    end
  end


  COMMAREA.XWHCD = AV0VM010.XWHCOD;
   /* --------------------- av0v-101 --------------------------------*/
end // end AV0V-1001

// process entered whse
Function AV0V-2001()
   /* --------------------- av0v-2001 -----------------------------**/
   /* proces the entered whse                            **/
   /* ------------------------------- -----------------------------**/


  AV0V230(); /* ss on av7rec*/
  AV0V240(); /* sn on av7rec*/

  if (VAGen_SQLCODE == 100)
    AV0V270(); /* sc on av7rec*/
  else
    if (VAGen_SQLCODE == 0)
      AV0VW04.AV0VWFL2 = "Y";
      AV0VW04.AV0VWSET = sysVar.arrayIndex; /* save ezetst*/
      while (AV0VW04.AV0VWFL2 == "Y")
        AV0V250(); /* save all record*/
      end
      sysVar.arrayIndex = AV0VW04.AV0VWSET;
    end
  end

  if (AV0VW04.AV0VWSX1 > 0)
    set AV0VM010.AV0VMSEL[1] cursor;
  else
    set AV0VM010.SY1STNBR cursor, modified, bold;
    converseLib.validationFailed(18); /* no avail rec for this prd*/
  end



   /* -------------------- av0v-2001 ------------------------------*/
end // end AV0V-2001

// process all whse
Function AV0V-2002()
   /* *----------------------- av0v-2002 ----------------------------*/
   /* *                    process all whse*/
   /* *----------------------- av0v-2002 ----------------------------*/


  while (XWHTBL.XWHCD[sysVar.arrayIndex] != "99")

    if (XWHTBL.XGPCD1[sysVar.arrayIndex] == AV0VM010.XGPCD
     || XWHTBL.XGPCD2[sysVar.arrayIndex] == AV0VM010.XGPCD
     || XWHTBL.XGPCD3[sysVar.arrayIndex] == AV0VM010.XGPCD
     || XWHTBL.XGPCD4[sysVar.arrayIndex] == AV0VM010.XGPCD
     || XWHTBL.XGPCD5[sysVar.arrayIndex] == AV0VM010.XGPCD
     || XWHTBL.XGPCD6[sysVar.arrayIndex] == AV0VM010.XGPCD
     || XWHTBL.XGPCD7[sysVar.arrayIndex] == AV0VM010.XGPCD
     || XWHTBL.XGPCD8[sysVar.arrayIndex] == AV0VM010.XGPCD)
      AV0V230(); /* ss on av7rec*/
      AV0V240(); /* sn on av7rec*/
      if (VAGen_SQLCODE == 100)
        AV0V270(); /* cs on av7rec*/
      else
        if (VAGen_SQLCODE == 0)
          AV0VW04.AV0VWFL2 = "Y";
          AV0VW04.AV0VWSET = sysVar.arrayIndex; /* save ezetst*/
          while (AV0VW04.AV0VWFL2 == "Y")
            AV0V250(); /* save all record keys*/
          end
          sysVar.arrayIndex = AV0VW04.AV0VWSET;
        end
      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  if (AV0VW04.AV0VWSX1 > 0)
    set AV0VM010.AV0VMSEL[1] cursor;
  else
    set AV0VM010.SY1STNBR cursor, modified, bold;
    converseLib.validationFailed(18); /* no avail records for this prd*/
  end

   /* ------------------------- av0v-2002 ----------------------*/
end // end AV0V-2002

// initialization
Function AV0V010()
   /* --------------------------- av0v010 ------------------------*/

                         /* application entry*/

   /* --------------------------- av0v010 ------------------------*/

  XSENTRY(); /* appl entry validation*/


  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/

  set AV0VW01 empty;

  set SQLCA empty;

  set AV0VM010 initial;

  AV0VM010.XWHCOD = "**"; /* defauld value*/

  set SQLCA empty;

  AV0VW04.AV0VWFL1 = "Y"; /* 1st time thru applic flag*/

  AV0VM010.XXXCURDT = VGVar.currentShortGregorianDate;
  AV0VM010.XXXRVNBR = "00";
  AV0VM010.XXXMAPNM = "AV0VM010";
  AV0VM010.XXXERRID = "AV0V020";
  VGVar.handleHardIOErrors = 1; /* return all file errors*/
  converseVar.commitOnConverse = 1; /* commit on every converse*/

   /* --------------------------- av0v010 ------------------------*/
end // end AV0V010

// main process
Function AV0V020()
   /* --------------------------- av0v020 ------------------------*/

                            /* main process*/

   /* --------------------------- av0v020 ------------------------*/

  if (AV0VW04.AV0VWFL1 == "Y") /* 1st time thru applic flag*/
    AV0V040(); /* set up map defaults*/
    AV0VW04.AV0VWFL1 = "N"; /* no longer 1st time thru application*/
  end

  AV0V060(); /* converse av0vm010*/

  AV0VM010.VAGen_EZEMSG = " ";

  AV0V070(); /* check for pf key xfers*/

  AV0V100(); /* mod flags,edits (gpc and style)*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  if (AV0VM010.XGPCD is modified
   || AV0VM010.SY1STNBR is modified
   || AV0VM010.XWHCOD is modified)
    AV0V200(); /* if new gpc/sytle/whse get keys*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  if (AV0VM010.XGPCD is modified
   || AV0VM010.SY1STNBR is modified
   || AV0VM010.XWHCOD is modified
   || AV0VW04.AV0VWFL5 == "Y")
    AV0V300(); /* initial map load*/
    exit stack;
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is enter)
    AV0V350(); /* selection edit*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    AV0V400(); /* pf7/pf8 control*/
  end

  if (converseVar.eventKey is enter)
    AV0V500(); /* ezeaid is enter*/
  end



   /* --------------------------- av0v020 ------------------------*/
end // end AV0V020

// entry screen setup
Function AV0V040()
   /* ------------------------- av0v040 --------------------------*/

                   /* first time in appl, screen setup*/

   /* ------------------------- av0v040 --------------------------*/


  AV0VW04.AV0VWFPD = 1;
  AV0VW04.AV0VWLPD = 1;

  AV0VW04.AV0VWIX1 = 1;

  while (AV0VW04.AV0VWIX1 <= 15)

    set AV0VM010.AV0VMSEL[AV0VWIX1] protect, invisible;
    AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 + 1;
  end

  if (COMMAREA.CAFROMAP == "AV0P"
   && COMMAREA.CAUSERA != " ")
    AV0VW02.AV0VWGR2 = COMMAREA.CAUSERA;
    AV0VM010.XGPCD = AV0VW02.XGPCD[1];
    AV0VM010.SY1STNBR = AV0VW02.SY1STNBR[1];

    if (AV0VW02.XWHCD[1] == " ")
      AV0VM010.XWHCOD = "**";
    else
      AV0VM010.XWHCOD = AV0VW02.XWHCD[1];
    end

    set AV0VM010.SY1STNBR modified;
    set AV0VM010.XGPCD modified;
    set AV0VM010.XWHCOD modified;
    set AV0VW02 empty;
    COMMAREA.CAUSERA = " ";
  end


   /* ------------------------- av0v040 --------------------------*/
end // end AV0V040

// converse av0vm010
Function AV0V060()
  converse AV0VM010 ;
end // end AV0V060

// pf key xfers/fast path
Function AV0V070()
   /* ------------------------- av0v070 --------------------------*/

                   /* pf key xfers/fast path control*/

   /* ------------------------- av0v070 --------------------------*/


  if (AV0VM010.CAITEM != " "
   && AV0VM010.CATOAP == " ")
    converseLib.validationFailed(115); /* enter to application*/
    set AV0VM010.CATOAP cursor, modified, bold;
    exit stack;
  end


  if (AV0VM010.CATOAP is modified
   && AV0VM010.CATOAP != " ")
    COMMAREA.CAUSERA = " ";
    COMMAREA.CAFROMAP = "AV0V";
    COMMAREA.CATOAP = AV0VM010.CATOAP;
    COMMAREA.CAITEM = AV0VM010.CAITEM;
    XSEXIT();
    AV0VM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set AV0VM010.CATOAP cursor, modified, bold;
    exit stack;
  end

  set AV0VM010.CATOAP normal;
  set AV0VM010.CAITEM normal;



  if (converseVar.eventKey is pf1)
    COMMAREA.CAUSERA = " ";
    XSPF1(); /* to help*/
    AV0VM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CAFROMAP = "AV0V";
      COMMAREA.CATOAP = "AV0M"; /* back to avail menu*/
      XSEXIT();
      AV0VM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      exit stack;
    else
      if (converseVar.eventKey is pf4)
        COMMAREA.CAUSERA = " ";
        XSPF4(); /* to goal menu*/
        AV0VM010.VAGen_EZEMSG = COMMAREA.CAMSG;
        exit stack;
      else
        if (converseVar.eventKey is pf7)
           /* next sentence*/
        else
          if (converseVar.eventKey is pf8)
             /* next sentence*/
          else
            if (converseVar.eventKey is enter)
               /* next sentence*/
            else
              if (converseVar.eventKey is pa2)
                COMMAREA.CAUSERA = " ";
                 /* next sentence*/
              else
                converseLib.validationFailed(15); /* invalid pf key*/
              end
            end
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
  end

  if (AV0VM010.VAGen_EZEMSG != " "
   || converseVar.validationMsgNum != 0
   || converseVar.eventKey is pa2)
    exit stack;
  end


   /* ------------------------- av0v070 --------------------------*/
end // end AV0V070

// edit gpc/style/whse code
Function AV0V100()
   /* ------------------------- av0v100 --------------------------*/

                      /* edit gpc and style*/

   /* ------------------------- av0v100 --------------------------*/

   /* set select fields modified if they were modified*/

  AV0VW04.AV0VWFL5 = "N";

  AV0VW04.AV0VWIX1 = 15;

  while (AV0VW04.AV0VWIX1 >= 1)

    if (AV0VM010.AV0VMSEL[AV0VWIX1] is modified)
      set AV0VM010.AV0VMSEL[AV0VWIX1] modified;
    end

    AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 - 1;
  end



  if (AV0VM010.XGPCD is modified)
    AV0VW04.AV0VWFL5 = "Y";
    set AV0VM010.XGPCD modified;
  end

  if (AV0VM010.SY1STNBR is modified)
    AV0VW04.AV0VWFL5 = "Y";
    set AV0VM010.SY1STNBR modified;
  end


  if (AV0VM010.XGPCD is modified)
    AV0V110(); /* validate gpc cd*/
  end

   /* since gpc cd is part of the key to the style tbl if its not*/
   /* correct no sense in going on.*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (AV0VM010.XWHCOD is modified)
    AV0VW04.AV0VWFL5 = "Y";
    set AV0VM010.XWHCOD modified;
  end

  if (AV0VM010.XWHCOD is modified)
    AV0V-1001(); /* validate whsc code*/
  end


  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (AV0VM010.SY1STNBR is modified)
    AV0V120(); /* read style01 table*/
  end


   /* ------------------------- av0v100 --------------------------*/
end // end AV0V100

// Validate gpc
Function AV0V110()
   /* ---------------------- av0v110 -----------------------------*/

                      /* validate gpc cd*/

   /* ---------------------- av0v110 -----------------------------*/


  sysVar.arrayIndex = 0; /* Initialize ezetst*/

  if (AV0VM010.XGPCD in XGPTBL.XGPCD) /* Check valid gpc*/
  end

  if (sysVar.arrayIndex == 0) /* Not in table*/
    converseLib.validationFailed(71); /* Display error message*/
    AV0VM010.XGPDESC = " ";
    set AV0VW01 empty;
    AV0V210(); /* clear map*/
    set AV0VM010.XGPCD cursor, modified, bold; /* highlight field*/
    exit stack;
  else /* Move description to table*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Check active gpc*/
      AV0VM010.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      set AV0VM010.XGPCD normal;
    else
      converseLib.validationFailed(72); /* inactive gpc cd*/
      AV0VM010.XGPDESC = " ";
      set AV0VW01 empty;
      AV0V210(); /* clear map*/
      set AV0VM010.XGPCD cursor, modified, bold; /* highlight field*/
      exit stack;
    end
  end


  COMMAREA.XGPCD = AV0VM010.XGPCD;

   /* ---------------------- av0v110 -----------------------------*/
end // end AV0V110

// get sy1rec
Function AV0V120()
   /* --------------------------- av0v120 ------------------------*/

                       /* get sy1rec for style short name*/
                       /* and to validate sy1stnbr*/

   /* --------------------------- av0v120 ------------------------*/

  AV0VM010.XXXERRID = "AV0V110";
  set SY1REC empty;
  set SQLCA empty;


  SY1REC.XGPCD = AV0VM010.XGPCD;
  SY1REC.SY1STNBR = AV0VM010.SY1STNBR;

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    AV0VM010.SY1STYNM = SY1REC.SY1STYNM;
    set AV0VM010.SY1STNBR normal;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(6); /* style record not found*/
      set AV0VW01 empty;
      AV0V210(); /* clear map*/
      set AV0VM010.SY1STNBR cursor, modified, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "AV0V";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0V110";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VSTYLE01"; /* table view*/
        TA1REC.TA1TBLKE = AV0VM010.SY1STNBR; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        set AV0VW01 empty;
        AV0V210(); /* clear map*/
        set AV0VM010.SY1STNBR modified;
        converseLib.clearScreen();
        
        converseLib.validationFailed(75); /* db contention*/
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "AV0V";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0VM010";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VSTYLE01"; /* table view*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.clearScreen();
        
        set AV0VW01 empty;
        AV0V210(); /* clear map*/
        set AV0VM010.SY1STNBR modified;
        converseLib.validationFailed(76); /* fatal error*/
        exit stack;
      end
    end
  end


   /* --------------------------- av0v120 ------------------------*/
end // end AV0V120

// new gpc/style process
Function AV0V200()
   /* ------------------------- av0v200 --------------------------*/

                     /* new gpc cd or style number?*/

   /* ------------------------- av0v200 --------------------------*/

  set AV0VW01 empty;

  AV0V210(); /* clear map and av0vw01*/

   /* get all valid records for this gpc (which includes all*/
   /* valid whses for the gpc) from the qty01 table. save them*/
   /* in av0vw01.*/


  sysVar.arrayIndex = 1;
  AV0VW04.AV0VWIX1 = 0;
  AV0VW04.AV0VWSX1 = 0; /* number of prds in w01*/
  AV0VW04.AV0VWSET = 0; /* save ezetst*/


  if (AV0VM010.XWHCOD != "**") /* whse entered*/
    AV0V-2001(); /* process given whse*/
  else
    AV0V-2002(); /* process all whse*/
  end


   /* ------------------------- av0v200 --------------------------*/
end // end AV0V200

// clear map and w-s of keys
Function AV0V210()
   /* ------------------------- av0v210 --------------------------*/

                     /* clear map and w-s of keys*/

   /* ------------------------- av0v210 --------------------------*/


  AV0VW04.XGPCD = AV0VM010.XGPCD;
  AV0VW04.XGPDESC = AV0VM010.XGPDESC;
  AV0VW04.SY1STNBR = AV0VM010.SY1STNBR;
  AV0VW04.SY1STYNM = AV0VM010.SY1STYNM;
  AV0VW04.XWHCD = AV0VM010.XWHCOD;

  set AV0VM010 initial;

  AV0VM010.XGPCD = AV0VW04.XGPCD;
  AV0VM010.XGPDESC = AV0VW04.XGPDESC;
  AV0VM010.SY1STNBR = AV0VW04.SY1STNBR;
  AV0VM010.SY1STYNM = AV0VW04.SY1STYNM;
  AV0VM010.XWHCOD = AV0VW04.XWHCD;
  AV0VM010.XXXCURDT = VGVar.currentShortGregorianDate;
  AV0VM010.XXXRVNBR = "00";
  AV0VM010.XXXERRID = "AV0V020";
  AV0VM010.XXXMAPNM = "AV0VM010";



  AV0VW04.AV0VWIX1 = 1;

  while (AV0VW04.AV0VWIX1 <= 15)
    set AV0VM010.AV0VMSEL[AV0VWIX1] protect, invisible;
    AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 + 1;
  end



   /* ------------------------- av0v210 --------------------------*/
end // end AV0V210

// ss on qty01
Function AV0V230()
   /* ------------------------- av0v230 --------------------------*/

               /* set up keys for ss on av7rec*/

   /* ------------------------- av0v230 --------------------------*/



  AV0VM010.XXXERRID = "AV0V230";
  set AV7REC empty;
  set SQLCA empty;


  if (AV0VM010.XWHCOD != "**") /* warehouse is entered*/
    AV7REC.XWHCD = AV0VM010.XWHCOD;
  else
    AV7REC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
  end
  AV7REC.XGPCD = AV0VM010.XGPCD;
  AV7REC.SY1STNBR = AV0VM010.SY1STNBR;

  AV7REC.SY2CLRID = "***";

  AV7REC.XDMCD = "**";

  AV7REC.XQACD = "01";

  AV7REC.XOWCD = "**";

  AV7REC.XSDCD = "***";

  AV7REC.XSACD = "***";

  AV7REC.XPGCD = "**";

  AV7REC.XUMCD = "**";

  AV7REC.AV6RECTY = "N";

  AV7REC.AV4PRDBD = -1;


  call "IO2370" ("SS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "AV0V";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0V230";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "AV7REC"; /* table view*/
        TA1REC.TA1TBLKE = AV0VM010.SY1STNBR; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        set AV0VM010.SY1STNBR modified;
        converseLib.clearScreen();
        
        converseLib.validationFailed(75);
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "AV0V";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0VM010";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "AV7REC"; /* table view*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.clearScreen();
        
        AV0VW04.AV0VWFL1 = "N";
        set AV0VM010.SY1STNBR modified;
        converseLib.validationFailed(76); /* fatal error*/
        exit stack;
      end
    end
  end



   /* ------------------------- av0v230 --------------------------*/
end // end AV0V230

// sn on qty01 table
Function AV0V240()
   /* ------------------------- av0v240 --------------------------*/

                         /* sn on qty01 table*/

   /* ------------------------- av0v240 --------------------------*/


  AV0VM010.XXXERRID = "AV0V240";
  set SQLCA empty;


  call "IO2370" ("SN", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "AV0V";
      TA1REC.TA1LOCAT = "SELECT ";
      TA1REC.TA1MAP = "AV0VM010";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "AV7REC"; /* table view*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.clearScreen();
      
      set AV0VM010.SY1STNBR modified;
      AV0VW04.AV0VWFL1 = "N";
      converseLib.validationFailed(76); /* fatal error*/
      exit stack;
    end
  end


   /* ------------------------- av0v240 --------------------------*/
end // end AV0V240

// save all qty01 record keys
Function AV0V250()
   /* ------------------------- av0v250 --------------------------*/

               /* sn on set obtained from ss in av0v240*/

   /* ------------------------- av0v250 --------------------------*/

  VAGen_SQLCODE = 0;
  AV0VW04.AV0VWFL3 = "Y";
  AV0VW04.AV0VWIX1 = AV0VW04.AV0VWSX1 + 1;

  if (AV0VW04.AV0VWIX1 > 500) /* More than 500 products*/
    AV0VW04.AV0VWFL3 = "N"; /* end while stmt*/
    AV0VW04.AV0VWFL2 = "N"; /* av0v200*/
    AV0VW04.AV0VWSX1 = AV0VW04.AV0VWIX1; /* save nbr of prds*/
    AV0V270(); /* cs on qty01*/
  end

  while (AV0VW04.AV0VWFL3 == "Y")

    /* av0v255 gets the season cd/yr and xsnbdt and moves it*/
    /* to av0vw01.*/

  /* PERFORM AV0V255;*/

    AV0VW01.XGPCD[AV0VWIX1] = AV7REC.XGPCD;
    AV0VW01.XWHCD[AV0VWIX1] = AV7REC.XWHCD;
    AV0VW01.XOWCD[AV0VWIX1] = AV7REC.XOWCD;
    AV0VW01.SY1STNBR[AV0VWIX1] = AV7REC.SY1STNBR;
    AV0VW01.SY2CLRID[AV0VWIX1] = AV7REC.SY2CLRID;
    AV0VW01.SY2CLRAB[AV0VWIX1] = " ";
    AV0VW01.XDMCD[AV0VWIX1] = AV7REC.XDMCD;
    AV0VW01.XLCCD[AV0VWIX1] = AV7REC.XLCCD;
    AV0VW01.XSDCD[AV0VWIX1] = AV7REC.XSDCD;
    AV0VW01.XPGCD[AV0VWIX1] = AV7REC.XPGCD;
    AV0VW01.XQACD[AV0VWIX1] = AV7REC.XQACD;
    AV0VW01.XSACD[AV0VWIX1] = AV7REC.XSACD;
    AV0VW01.XUMCD[AV0VWIX1] = AV7REC.XUMCD;

    AV0V260(); /* total a/o qtys,move in*/

    AV0V280(); /* get color abreviation*/

    AV0V240(); /* sn on av7rec*/

    if (VAGen_SQLCODE == 100)
      AV0VW04.AV0VWFL3 = "N"; /* end while stmt*/
      AV0VW04.AV0VWFL2 = "N"; /* av0v200*/
      AV0VW04.AV0VWSX1 = AV0VW04.AV0VWIX1; /* save nbr of prds*/
      AV0V270(); /* cs on qty01*/
    else
      AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 + 1;
      if (AV0VW04.AV0VWIX1 > 500) /* More than 500 products*/
        AV0VW04.AV0VWFL3 = "N"; /* end while stmt*/
        AV0VW04.AV0VWFL2 = "N"; /* av0v200*/
        AV0VW04.AV0VWSX1 = AV0VW04.AV0VWIX1; /* save nbr of prds*/
        AV0V270(); /* cs on qty01*/
      end
    end
  end

   /* ------------------------- av0v250 --------------------------*/
end // end AV0V250

// total up at once qtys
Function AV0V260()
   /* ------------------------- av0v260 --------------------------*/

            /* total up at once qty's from the qty01 record*/

   /* ------------------------- av0v260 --------------------------*/

  AV0VW04.AV0VWIX2 = 1;
  AV0VW04.AV0VWTAO = 0;


  while (AV0VW04.AV0VWIX2 <= 40)

    if (AV7REC.XCDCD[AV0VWIX2] == "01") /* at once*/
      AV0VW04.AV0VWTAO = AV0VW04.AV0VWTAO + AV7REC.AV1AVQTY[AV0VWIX2];
    end
    AV0VW04.AV0VWIX2 = AV0VW04.AV0VWIX2 + 1;

  end

  AV0VW01.AV0VWAOT[AV0VWIX1] = AV0VW04.AV0VWTAO;

   /* ------------------------- av0v260 --------------------------*/
end // end AV0V260

// cs on qty01
Function AV0V270()
   /* ------------------------- av0v270 --------------------------*/

                        /* close set on qty01*/

   /* ------------------------- av0v270 --------------------------*/


  AV0VM010.XXXERRID = "AV0V270";
  set AV7REC empty;
  set SQLCA empty;


  call "IO2370" ("CS", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "AV0V";
    TA1REC.TA1LOCAT = "CS     ";
    TA1REC.TA1MAP = "AV0VM010";
    TA1REC.TA1DBASE = "DAVAIL";
    TA1REC.TA1TBLVU = "AV7REC"; /* table view*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.clearScreen();
    
    AV0VW04.AV0VWFL1 = "N";
    converseLib.validationFailed(76); /* fatal error*/
    exit stack;
  end


   /* ------------------------- av0v270 --------------------------*/
end // end AV0V270

// get sy2rec
Function AV0V280()
   /* --------------------------- av0v280 ------------------------*/

                       /* get sy2rec for color desc*/

   /* --------------------------- av0v280 ------------------------*/

  AV0VM010.XXXERRID = "AV0V290";
  set SY2REC empty;
  set SQLCA empty;


  SY2REC.XGPCD = AV0VM010.XGPCD;
  SY2REC.SY1STNBR = AV0VM010.SY1STNBR;
  SY2REC.SY2CLRID = AV0VW01.SY2CLRID[AV0VWIX1];
  SY2REC.XDMCD = AV0VW01.XDMCD[AV0VWIX1];

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
     /* move in the color descriptions*/
    AV0VW01.SY2CLRAB[AV0VWIX1] = SY2REC.SY2CLRAB;

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      AV0VW01.SY2CLRAB[AV0VWIX1] = " ";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "AV0V";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0V290";
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
        TA1REC.TA1TBLKE = AV0VM010.SY1STNBR; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.clearScreen();
        
        converseLib.validationFailed(75);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "AV0V";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "AV0VM010";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.clearScreen();
        
        converseLib.validationFailed(76); /* fatal error*/
        exit stack;
      end
    end
  end



   /* --------------------------- av0v280 ------------------------*/
end // end AV0V280

// load map if new gpc/style
Function AV0V300()
   /* ------------------------- av0v300 --------------------------*/

              /* initial load of map for new gpc/style*/

   /* ------------------------- av0v300 --------------------------*/



  AV0VW04.AV0VWIX1 = 1;
  AV0VW04.AV0VWFPD = 1;

  while (AV0VW04.AV0VWIX1 <= 15)

    if (AV0VW01.XWHCD[AV0VWIX1] != " ")
      AV0VM010.AV0VMSEL[AV0VWIX1] = " ";
      set AV0VM010.AV0VMSEL[AV0VWIX1] normal;
      AV0VM010.XWHCD[AV0VWIX1] = AV0VW01.XWHCD[AV0VWIX1];
      AV0VM010.XOWCD[AV0VWIX1] = AV0VW01.XOWCD[AV0VWIX1];
      AV0VM010.SY2CLRID[AV0VWIX1] = AV0VW01.SY2CLRID[AV0VWIX1];
      AV0VM010.SY2CLRAB[AV0VWIX1] = AV0VW01.SY2CLRAB[AV0VWIX1];
      AV0VM010.XDMCD[AV0VWIX1] = AV0VW01.XDMCD[AV0VWIX1];
      AV0VM010.XLCCD[AV0VWIX1] = AV0VW01.XLCCD[AV0VWIX1];
      AV0VM010.XSDCD[AV0VWIX1] = AV0VW01.XSDCD[AV0VWIX1];
      AV0VM010.XPGCD[AV0VWIX1] = AV0VW01.XPGCD[AV0VWIX1];
      AV0VM010.XQACD[AV0VWIX1] = AV0VW01.XQACD[AV0VWIX1];
      AV0VM010.XUMCD[AV0VWIX1] = AV0VW01.XUMCD[AV0VWIX1];
      AV0VM010.AV0VMAOT[AV0VWIX1] = AV0VW01.AV0VWAOT[AV0VWIX1];

      AV0VW04.AV0VWLPD = AV0VW04.AV0VWIX1; /* save last prd displayed*/
      AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 + 1;
    else
      set AV0VM010.AV0VMSEL[AV0VWIX1] protect, invisible;
      AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 + 1;
    end
  end


  if (AV0VW04.AV0VWSX1 > 500) /* Saved number of products*/
    converseLib.validationFailed(360); /* Only 500 rows are displayed*/
  end


   /* ------------------------- av0v300 --------------------------*/
end // end AV0V300

// selection edit
Function AV0V350()
   /* ------------------------- av0v350 --------------------------*/

                        /* selection edits*/

   /* ------------------------- av0v350 --------------------------*/



  AV0VW04.AV0VWIX1 = AV0VW04.AV0VWLPD - AV0VW04.AV0VWFPD;
  AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 + 1;
  AV0VW04.AV0VWIX5 = AV0VW04.AV0VWLPD;

  while (AV0VW04.AV0VWIX1 >= 1)

    if (AV0VM010.AV0VMSEL[AV0VWIX1] == "S")
      AV0VW01.AV0VWSEL[AV0VWIX5] = "S";
    else
      if (AV0VM010.AV0VMSEL[AV0VWIX1] == " ")
        AV0VW01.AV0VWSEL[AV0VWIX5] = " ";
      else
        set AV0VM010.AV0VMSEL[AV0VWIX1] cursor, modified, bold;
        converseLib.validationFailed(144); /* select field must be 's'*/
      end
    end
    AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 - 1;
    AV0VW04.AV0VWIX5 = AV0VW04.AV0VWIX5 - 1;
  end

  if (converseVar.validationMsgNum == 0)
    set AV0VM010.AV0VMSEL[1] cursor;
  end

   /* ------------------------- av0v350 --------------------------*/
end // end AV0V350

// pf7/pf8 control
Function AV0V400()
   /* ------------------------- av0v400 --------------------------*/

                        /* pf7/pf8 control*/

   /* ------------------------- av0v400 --------------------------*/

   /* av0vwfpd = index into w01 of first prd displayed on map*/
   /* av0vwlpd = index into w01 of last prd displayed on map*/
   /* av0vwsx1 = number of prds in w01*/



  if (converseVar.eventKey is pf8)
    if (AV0VW04.AV0VWLPD == AV0VW04.AV0VWSX1
     || AV0VW04.AV0VWSX1 == 0)
      set AV0VM010.AV0VMSEL[1] cursor;
      converseLib.validationFailed(140); /* no more prds to page fwrd to*/
      return;
    else
      AV0V210(); /* clear map*/
      AV0VW04.AV0VWIX1 = AV0VW04.AV0VWLPD;
      AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 + 1;
      if (AV0VW04.AV0VWIX1 == AV0VW04.AV0VWSX1)
        set AV0VM010.AV0VMSEL[1] cursor;
        converseLib.validationFailed(140); /* no more prds to page fwrd to*/
        return;
      end
      AV0VW04.AV0VWFPD = AV0VW04.AV0VWIX1;
      AV0V420(); /* load map*/
      set AV0VM010.AV0VMSEL[1] cursor;
      return;
    end
  end

  if (converseVar.eventKey is pf7)
    if (AV0VW04.AV0VWFPD == 1)
      set AV0VM010.AV0VMSEL[1] cursor;
      converseLib.validationFailed(141); /* no more prds to page back to*/
      return;
    else
      AV0V210(); /* clear map*/
      AV0VW04.AV0VWIX1 = AV0VW04.AV0VWFPD;
      AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 - 15;
      AV0VW04.AV0VWFPD = AV0VW04.AV0VWIX1;
      AV0V420(); /* load map*/
      set AV0VM010.AV0VMSEL[1] cursor;
      return;
    end
  end

   /* ------------------------- av0v400 --------------------------*/
end // end AV0V400

// load map if paging
Function AV0V420()
   /* ------------------------- av0v420 --------------------------*/

                      /* load of map if paging*/

   /* ------------------------- av0v420 --------------------------*/



  AV0VW04.AV0VWIX4 = 1;

  while (AV0VW04.AV0VWIX4 <= 15)

    if (AV0VW01.XWHCD[AV0VWIX1] != " ")
      AV0VM010.AV0VMSEL[AV0VWIX4] = AV0VW01.AV0VWSEL[AV0VWIX1];
      set AV0VM010.AV0VMSEL[AV0VWIX4] normal;
      AV0VM010.XWHCD[AV0VWIX4] = AV0VW01.XWHCD[AV0VWIX1];
      AV0VM010.XOWCD[AV0VWIX4] = AV0VW01.XOWCD[AV0VWIX1];
      AV0VM010.SY2CLRID[AV0VWIX4] = AV0VW01.SY2CLRID[AV0VWIX1];
      AV0VM010.SY2CLRAB[AV0VWIX4] = AV0VW01.SY2CLRAB[AV0VWIX1];
      AV0VM010.XDMCD[AV0VWIX4] = AV0VW01.XDMCD[AV0VWIX1];
      AV0VM010.XLCCD[AV0VWIX4] = AV0VW01.XLCCD[AV0VWIX1];
      AV0VM010.XSDCD[AV0VWIX4] = AV0VW01.XSDCD[AV0VWIX1];
      AV0VM010.XPGCD[AV0VWIX4] = AV0VW01.XPGCD[AV0VWIX1];
      AV0VM010.XQACD[AV0VWIX4] = AV0VW01.XQACD[AV0VWIX1];
      AV0VM010.XUMCD[AV0VWIX4] = AV0VW01.XUMCD[AV0VWIX1];
      AV0VM010.AV0VMAOT[AV0VWIX4] = AV0VW01.AV0VWAOT[AV0VWIX1];

      AV0VW04.AV0VWLPD = AV0VW04.AV0VWIX1; /* save last prd displayed*/
      AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 + 1;
      AV0VW04.AV0VWIX4 = AV0VW04.AV0VWIX4 + 1;
    else
      set AV0VM010.AV0VMSEL[AV0VWIX4] protect, invisible;
      AV0VW04.AV0VWIX4 = AV0VW04.AV0VWIX4 + 1;
    end
  end


  if (AV0VW04.AV0VWSX1 > 500)
    converseLib.validationFailed(360);
  end


   /* ------------------------- av0v420 --------------------------*/
end // end AV0V420

// ezeaid is enter control
Function AV0V500()
   /* ------------------------- av0v500 --------------------------*/

                        /* ezeaid is enter*/
                        /* save selected keys to commarea*/
                        /* transfer to av0p*/

   /* ------------------------- av0v500 --------------------------*/

  set AV0VW02 empty;


  COMMAREA.CAUSERA = " ";

  AV0VW04.AV0VWIX1 = 1;
  AV0VW04.AV0VWIX5 = 1;
  AV0VW04.AV0VWFL4 = "N"; /* has a prd been selected?*/

  while (AV0VW04.AV0VWIX1 <= 500)

    if (AV0VW01.AV0VWSEL[AV0VWIX1] == "S")
      AV0VW04.AV0VWFL4 = "Y"; /* at least one prd selected*/
      AV0VW02.XGPCD[AV0VWIX5] = AV0VW01.XGPCD[AV0VWIX1];
      AV0VW02.XWHCD[AV0VWIX5] = AV0VW01.XWHCD[AV0VWIX1];
      AV0VW02.XOWCD[AV0VWIX5] = AV0VW01.XOWCD[AV0VWIX1];
      AV0VW02.SY1STNBR[AV0VWIX5] = AV0VW01.SY1STNBR[AV0VWIX1];
      AV0VW02.SY2CLRID[AV0VWIX5] = AV0VW01.SY2CLRID[AV0VWIX1];
      AV0VW02.SY2CLRAB[AV0VWIX5] = AV0VW01.SY2CLRAB[AV0VWIX1];
      AV0VW02.XDMCD[AV0VWIX5] = AV0VW01.XDMCD[AV0VWIX1];
  /* MOVE AV0VW01.XSECD(AV0VWIX1) TO AV0VW02.XSECD(AV0VWIX5);*/
  /* MOVE AV0VW01.XSNYR(AV0VWIX1) TO AV0VW02.XSNYR(AV0VWIX5);*/
  /* MOVE AV0VW01.AV4PRDBD(AV0VWIX1) TO AV0VW02.AV4PRDBD(AV0VWIX5);*/
      AV0VW02.XLCCD[AV0VWIX5] = AV0VW01.XLCCD[AV0VWIX1];
      AV0VW02.XSDCD[AV0VWIX5] = AV0VW01.XSDCD[AV0VWIX1];
      AV0VW02.XPGCD[AV0VWIX5] = AV0VW01.XPGCD[AV0VWIX1];
      AV0VW02.XQACD[AV0VWIX5] = AV0VW01.XQACD[AV0VWIX1];
      AV0VW02.XSACD[AV0VWIX5] = AV0VW01.XSACD[AV0VWIX1];
      AV0VW02.XUMCD[AV0VWIX5] = AV0VW01.XUMCD[AV0VWIX1];
      AV0VW04.AV0VWIX5 = AV0VW04.AV0VWIX5 + 1;
      if (AV0VW04.AV0VWIX5 == 30) /* 30 prd max selected*/
        AV0VW04.AV0VWIX1 = 501; /* end while*/
      end
    end

    AV0VW04.AV0VWIX1 = AV0VW04.AV0VWIX1 + 1;
  end

  if (AV0VW04.AV0VWFL4 != "Y") /* no products selected*/
    return;
  end

  COMMAREA.CAUSERA = AV0VW02.AV0VWGR2;

  COMMAREA.CAFROMAP = "AV0V";
  COMMAREA.CATOAP = "AV0P";

  XSEXIT();

  AV0VM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  set AV0VM010.SY1STNBR cursor, modified;

  exit stack;

   /* ------------------------- av0v500 --------------------------*/
end // end AV0V500

//*** RECORD=AV0VW01 ****
// *****************  availability work record ****************
// ;
// ;               this record holds the keys selected
// ;               for a product in all whses the gpc
// ;               is valid for.
// ;
// ; Date       Name    Description
// ; ----       ----    ---------------------------------------
// ; 09-24-97   SREDDY  Size of AV0VW01 is chaned to 530.
// ************************************************************
// ***********************
Record AV0VW01 type basicRecord
  5 AV0VWGR1 AV0VWGR1 ; 
    10 AV0VWSEL AV0VWSEL [530] ; 
    10 XGPCD XGPCD [530] ; 
    10 XWHCD XWHCD [530] ; 
    10 XOWCD XOWCD [530] ; 
    10 SY1STNBR SY1STNBR [530] ; 
    10 SY2CLRID SY2CLRID [530] ; 
    10 SY2CLRAB SY2CLRAB [530] ; 
    10 XDMCD XDMCD [530] ; 
    10 XSECD XSECD [530] ; 
    10 XSNYR XSNYR [530] ; 
    10 AV4PRDBD AV4PRDBD [530] ; 
    10 XLCCD XLCCD [530] ; 
    10 XSDCD XSDCD [530] ; 
    10 XPGCD XPGCD [530] ; 
    10 XQACD XQACD [530] ; 
    10 XSACD XSACD [530] ; 
    10 XUMCD XUMCD [530] ; 
    10 AV0VWAOT AV0VWAOT [530] ; 
end // end AV0VW01

//*** RECORD=AV0VW02 ****
// *****************  availability work record ****************
// ;
// ;               this record holds selected keys which
// ;               will be passed to av0p.
// ;               the limit is 50.
// ;
// ************************************************************
// ***********************
Record AV0VW02 type basicRecord
  5 AV0VWGR2 AV0VWGR2 ; 
    10 XGPCD XGPCD [30] ; 
    10 XWHCD XWHCD [30] ; 
    10 XOWCD XOWCD [30] ; 
    10 SY1STNBR SY1STNBR [30] ; 
    10 SY2CLRID SY2CLRID [30] ; 
    10 SY2CLRAB SY2CLRAB [30] ; 
    10 XDMCD XDMCD [30] ; 
    10 XSECD XSECD [30] ; 
    10 XSNYR XSNYR [30] ; 
    10 AV4PRDBD AV4PRDBD [30] ; 
    10 XLCCD XLCCD [30] ; 
    10 XSDCD XSDCD [30] ; 
    10 XPGCD XPGCD [30] ; 
    10 XQACD XQACD [30] ; 
    10 XSACD XSACD [30] ; 
    10 XUMCD XUMCD [30] ; 
end // end AV0VW02

//*** RECORD=AV0VW04 ****
// *****************  availability work record ****************
// ;
// ;                    micell work record
// ;
// ;*---------------- maintenance log -------------------------
// ref #      date    usrid      discription
// ;*----------------------------------------------------------
// AV1419   10/17/97  SATINA     added XWHCD for processing a
//                               whse code entered in AV0M010.
// AV1607   05/08/98  SATINA     added SY1STYNM and XGPDESC
//                               fields.
// ************************************XGPDESC  ***************
// ***********************
Record AV0VW04 type basicRecord
  5 AV0VWGR4 AV0VWGR4 ; 
    10 AV0VWFL1 AV0VWFL1 ; 
    10 AV0VWFL2 AV0VWFL2 ; 
    10 AV0VWFL3 AV0VWFL3 ; 
    10 AV0VWFL4 AV0VWFL4 ; 
    10 AV0VWFL5 AV0VWFL5 ; 
    10 AV0VWIX1 AV0VWIX1 ; 
    10 AV0VWIX2 AV0VWIX2 ; 
    10 AV0VWIX3 AV0VWIX3 ; 
    10 AV0VWIX4 AV0VWIX4 ; 
    10 AV0VWIX5 AV0VWIX5 ; 
    10 AV0VWSX1 AV0VWSX1 ; 
    10 AV0VWSET AV0VWSET ; 
    10 AV0VWLPD AV0VWLPD ; 
    10 AV0VWFPD AV0VWFPD ; 
    10 AV0VWTAO AV0VWTAO ; 
    10 AV0VWCNT AV0VWCNT ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY1STYNM SY1STYNM ; 
    10 XGPCD XGPCD ; 
    10 XGPDESC XGPDESC ; 
    10 XWHCD XWHCD ; 
end // end AV0VW04

// at once total
DataItem AV0VWAOT bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection counter
DataItem AV0VWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time in appl
DataItem AV0VWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// eof on av7 ss
DataItem AV0VWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end while in av0v250
DataItem AV0VWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prd selected flag
DataItem AV0VWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpcand/or style mod flag
DataItem AV0VWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first prd displayed
DataItem AV0VWFPD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data group, entire row
DataItem AV0VWGR1 char(32330)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0VWGR2 char(1560)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data group, entire row
DataItem AV0VWGR4 char(107)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index 1
DataItem AV0VWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 2
DataItem AV0VWIX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 3
DataItem AV0VWIX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 4
DataItem AV0VWIX4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 5
DataItem AV0VWIX5 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last prd displayed
DataItem AV0VWLPD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select
DataItem AV0VWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save ezetst
DataItem AV0VWSET num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved nbr of prds
DataItem AV0VWSX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AVAILABLE QUANTITY
DataItem AV0VWTAO bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

