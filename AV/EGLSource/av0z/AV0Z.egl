package av0z;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AV0Z ****
// This application displays calculated smart reserve size
// quantities for a specified product, calculation date,
// display date and percentage.
// 
// Program procedure:
// The entered data is verified.
// The calcuation is performed by the cics program av1860 which
// is executed when the pf16 key is pressed.
// The calculated data is placed in temporary storage by av1860
// It is then read into this program and displayed by supply
// date/size.
// The user may change the quantities.  When the map data is
// changed the working storage will be updated.
// When a new warehouse is display, temporary storage for the
// current warehouse is updated.
// The enter key will proceed to display the next warehouse in
// succession or the user may enter the warehouse.
// The user may print the displayed warehouse data by pressing
// the pf6 key.
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      04/09/92  dbruih  New application.
// av9999   08/1/92   dbruih  changed format of calc bottom
//                            line date from mmddyy to yymm.
// av9999   08/24/92  dbruih  fixed av0z-300 xfer to another
//                            application logic.
// av9999   09/10/92  dbruih  Fixed to display first whse with
//                            data on 00 whse processing.
//                            Fixed to display only div 01
//                            sizes.
// av9999   01/08/93  dbruih  Fixed print routine to include
//                            causerid to enable report routing
//                            by Bundle
//          06/18/93  MSMIT2  REPLACE CALL TO SY1120 WITH
//                            PG1050.
// av9999   07/01/93  dbruih  replace reference to next
//                            processing date with current date
//                            to keep in sync with
//                            Davail.vavsdq01 data.
// AV0206   02/07/94  dhuffm  Fixed to display total when 11
//                            sizes for style.
//          12/07/94  dbruih  Fixed pf7 scroll index.
// AV0196   03/29/97  mchow   Changed program to be more
//                            generic, to allow equipment as
//                            well as footwear.  Also removed
//                            any code pertaining to 'pairage'.
//                            (Per Diane Bruihl 4/4/97)
//                            Changes made to XPAV001 flow,
//                            AV0Z-100, AV0Z-200, AV0Z-201,
//                            AV0Z-210, AV0Z-215, AV0Z-230,
//                            AV0Z-300, AV0Z-400, AV0Z-500,
//                            AV0Z-503, AV0Z-504, AV0Z-505,
//                            AV0Z-506, AV0Z-507, AV0Z-600,
//                            AV0Z-6001, AV0Z-601, AV0Z-603,
//                            AV0Z-606, AV0Z-607, AV0Z-610,
//                            AV0Z-611, AV0Z-630, AV0Z-631,
//                            AV0Z-640, AV0Z-641, AV0Z-656,
//                            AV0Z-660, AV0Z-661, AV0Z-662,
//                            AV0Z-663, AV0Z-664, AV0Z-675,
//                            AV0Z-680, AV0Z-690, AV0Z-691,
//                            AV0Z-697, AV0Z-704, AV0ZM001,
//                            AV0ZW01, AV0ZW02, AV0ZW10,
//                            AV0ZW11 and AV0ZW12.
//                            Added AV0Z-510, AV0Z-515, AV0ZW14
//                            (Added AV0Z-511, but not used
//                             currently).
// y2kfix  11-11-97   pharwo  changes to av0z-505, av0z-506,
//                            av0z-11months and map av0zm001
//                            for year 2000 compliance.
// *********************
Program AV0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV0ZW01 AV0ZW01; // record
  AV0ZW02 AV0ZW02; // record
  AV0ZW03 AV0ZW03; // record
  AV0ZW04 AV0ZW04; // record
  AV0ZW07 AV0ZW07; // record
  AV0ZW08 AV0ZW08; // record
  AV0ZW09 AV0ZW09; // record
  AV0ZW10 AV0ZW10; // record
  AV0ZW11 AV0ZW11; // record
  AV0ZW12 AV0ZW12; // record
  AV0ZW14 AV0ZW14; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use XWHTBL; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use AV0ZT01; // table
  use AV0ZT02; // table
  use AV0ZT03; // table
  use AV0ZT04; // table
  use AV01TBL {deleteAfterUse = yes}; // table
  use AV0ZM.AV0ZM001,  // forms
      AV0ZM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAV001: XPAV001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.XGPCD == " ") /* if user xgp is blank*/
      COMMAREA.XGPCD = "02";
    end

     /* set map empty*/
    set AV0ZM001 initial;
    set AV0ZW01 empty;
    AV0ZW01.AV0ZW-GETDATA = "Y"; /* no to get data flag*/
    AV0ZW01.AV0ZW-VERIFIED = "N"; /* data verified flag*/
    AV0ZW01.AV0ZW-FORMATMAP = "N"; /* yes to format the map flag*/
    AV0ZW01.AV0ZW-FIRSTIME = "Y"; /* yes to firstime flag*/

    set AV0ZW14 empty; /**/
    AV0ZW14.AV0ZW-AVXSO-FOUND = "N"; /* init SO found flag to no*/
    AV0ZW14.AV0ZW-CAN-SO = "N"; /* init Canadian SO flag to no*/
    AV0ZW14.AV0ZW-EQMT-SO = "N"; /* init Equipment SO flag to no*/
    sysVar.arrayIndex = 1; /* init subscript to 1*/

     /* Determine if logon id is for Canadian and/or Equipment user*/

    if (COMMAREA.XSOCD != "  ") /* logon sales office not blank*/
      while (AV01TBL.XSOCD[sysVar.arrayIndex] != "99" /* not end of table marker*/
       && AV0ZW14.AV0ZW-AVXSO-FOUND == "N") /* and found flag is no*/
        if (COMMAREA.XSOCD == AV01TBL.XSOCD[sysVar.arrayIndex] /* logon SO = table SO*/
         && AV01TBL.XXXSTAT == "A")                            /* and table SO status active*/
          AV0ZW14.AV0ZW-AVXSO-FOUND = "Y"; /* set SO found flag yes*/
          AV0ZW14.AV0ZW-CAN-SO = AV01TBL.AV-CAN-SO-FL[sysVar.arrayIndex];
          AV0ZW14.AV0ZW-EQMT-SO = AV01TBL.AV-EQMT-SO-FL[sysVar.arrayIndex];
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment ezetst subscript*/
      end
    else
      if (COMMAREA.XSOCD == "  " /* logon sales office is blank*/
       && COMMAREA.XNDCD == "EQMT") /* logon sales office is blank*/
        AV0ZW14.AV0ZW-EQMT-SO = "Y"; /* set Equipment SO flag yes*/
      end
    end

    set AV0ZW02 empty;
    set AV0ZW03 empty;
    set AV0ZW04 empty;
    set AV0ZW07 empty;
    set AV0ZW08 empty;
    set AV0ZW09 empty;
    set AV0ZW10 empty;
    set AV0ZW11 empty;
    set AV0ZW12 empty;
    set SY1REC empty;
    set SY2REC empty;
    set PG2REC empty;
    set PG3REC empty;
    set XX0XW01 empty;
    set SQLCA empty;
    set TA1REC empty;
    set TA3REC empty;
    set TA5REC empty;
    set TA6REC empty;
    set TA9REC empty;
    set TAEREC empty;
    set TAEREC empty;

     /* set defaults*/
    AV0ZM001.XUMCD = "01"; /* unit of measure*/
    AV0ZM001.XDMCD = "00"; /* dimension*/
    AV0ZM001.AV0ZM-MAP-PCTADJ = 80; /* percent to adjust qtys*/
    AV0ZM001.XWHCD = "00"; /* all warehouses*/
    AV0ZM001.XGPCD = COMMAREA.XGPCD; /* default gpc to '02'*/

    set AV0ZM001.AV0ZM-MAP-TITLELIT invisible; /* print title info*/
    set AV0ZM001.AV0ZM-MAP-TITLEMSG protect, invisible;

    set AV0ZM001.SY1STNBR cursor; /* place cursor on map style number*/

     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AV0Z-001; /* Converse the main process*/

    AV0Z-001: AV0Z-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AV0Z-001; /* Converse the main process*/

  end // end main
end // end AV0Z

// Main process to display a map
Function AV0Z-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AV0Z-100(); /* Obtain the data to display*/

  AV0Z-200(); /* Format and display the map*/

  AV0Z-300(); /* Check attention identifier*/

  AV0Z-400(); /* Reset fields to normal intensity*/

  AV0Z-500(); /* Verify the data that was entered*/

  AV0Z-600(); /* Process valid input request*/


end // end AV0Z-001

// Obtain the data to display
Function AV0Z-100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (AV0ZW01.AV0ZW-GETDATA == "N"
   || converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Obtain product information:*/
   /* ------------------------------------------------------------*/

  if (AV0ZM001.AV0ZM-MAP-PCTADJ == 0)
    converseLib.validationFailed(324); /* please enter percent to adjust*/
    set AV0ZM001.AV0ZM-MAP-PCTADJ cursor, bold;
  end

  if (AV0ZM001.AV0ZM-MAP-SHPMM == 00
   && AV0ZM001.AV0ZM-MAP-SHPDD == 00
   && AV0ZM001.AV0ZM-MAP-SHPYY == 00)
    converseLib.validationFailed(325); /* Please enter ship thru mmddyy format*/
    set AV0ZM001.AV0ZM-MAP-SHPMM cursor, bold;
    set AV0ZM001.AV0ZM-MAP-SHPDD bold;
    set AV0ZM001.AV0ZM-MAP-SHPYY bold;
  end

  if (AV0ZM001.AV0ZM-MAP-SHPMM == 00
   || AV0ZM001.AV0ZM-MAP-SHPDD == 00)
    converseLib.validationFailed(325); /* Please enter ship thru mmddyy format*/
    set AV0ZM001.AV0ZM-MAP-SHPMM cursor, bold;
    set AV0ZM001.AV0ZM-MAP-SHPDD bold;
    set AV0ZM001.AV0ZM-MAP-SHPYY bold;
  end

  if (AV0ZM001.AV0ZM-MAP-BLMM == 00
   && AV0ZM001.AV0ZM-MAP-BLYY == 00)
    converseLib.validationFailed(356); /* Please enter bottom line yymm format*/
    set AV0ZM001.AV0ZM-MAP-BLYY cursor, bold;
    set AV0ZM001.AV0ZM-MAP-BLMM bold;
  end

  if (AV0ZM001.AV0ZM-MAP-BLMM == 00)
    converseLib.validationFailed(356); /* Please enter bottom line yymm format*/
    set AV0ZM001.AV0ZM-MAP-BLYY cursor, bold;
    set AV0ZM001.AV0ZM-MAP-BLMM bold;
  end

  if (AV0ZM001.XGPCD == "00"
   || AV0ZM001.XGPCD == "  ") /* if no valid gpc code entered*/
    converseLib.validationFailed(73); /* gpc code required*/
    set AV0ZM001.XGPCD cursor, bold;
  end

  if (AV0ZM001.XWHCD == " ") /* if warehouse code not entered*/
    converseLib.validationFailed(56); /* enter warehouse code msg*/
    set AV0ZM001.XWHCD cursor, bold;
  end

  if (AV0ZM001.XDMCD == " ") /* if dimension code not entered*/
    converseLib.validationFailed(82); /* enter dimension code msg*/
    set AV0ZM001.XDMCD cursor, bold;
  end

  if (AV0ZM001.SY2CLRID == " ") /* if color id not entered*/
    converseLib.validationFailed(111); /* enter color id msg*/
    set AV0ZM001.SY2CLRID cursor, bold;
  end /* ;*/

  if (AV0ZM001.SY1STNBR == " ") /* if style number not entered*/
    converseLib.validationFailed(63); /* please enter style number msg*/
    set AV0ZM001.SY1STNBR cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    AV0ZW01.AV0ZW-GETDATA = "N"; /* set get data flag to no*/
    AV0ZW01.AV0ZW-VERIFIED = "N"; /* * set data verified flag to no*/
  end

end // end AV0Z-100

// converse av0zm av0zm001
Function AV0Z-200()
  if (converseVar.validationMsgNum == 0
   && AV0ZW01.AV0ZW-GETDATA == "N"
   && AV0ZW01.AV0ZW-VERIFIED == "N")
    return;
  end

  if (converseVar.validationMsgNum != 0) /* Error was found/msg to display*/
    AVWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  AV0Z-201(); /* clear map & set fields dark*/

  if (AV0ZW01.AV0ZW-FORMATMAP == "Y") /* Map must be formatted*/
    AV0Z-210(); /* load map with ws-data*/
  end

  AV0ZW01.AV0ZW-SIZIX = 1;
  while (AV0ZW01.AV0ZW-SIZIX <= 11)
    AV0Z-230(); /* set unused map field attributes*/
  end


  converse AV0ZM001 ;
end // end AV0Z-200

// set map fields dark
Function AV0Z-201()

  if (AV0ZW01.AV0ZW-SY1STYSAV > " ")
    set AV0ZM001 initial;

    AV0ZM001.SY1STNBR = AV0ZW01.AV0ZW-SY1STYSAV;
    AV0ZM001.SY1SSTNM = AV0ZW01.AV0ZW-SY1SSTNMSAV;
    AV0ZM001.SY2CLRID = AV0ZW01.AV0ZW-SY2CLRSAV;
    AV0ZM001.SY2CLRAB = AV0ZW01.AV0ZW-SY2CLRABSAV;
    AV0ZM001.XDMCD = AV0ZW01.AV0ZW-XDMSAV;
    AV0ZM001.XDMABRV = AV0ZW01.AV0ZW-XDMABRVSAV;
    AV0ZM001.XUMCD = AV0ZW01.AV0ZW-XUMSAV;
    AV0ZM001.XUMDESC = AV0ZW01.AV0ZW-XUMDESCSAV;
    AV0ZM001.AV0ZM-MAP-BLYY = AV0ZW01.AV0ZW-BLYYSAV;
    AV0ZM001.AV0ZM-MAP-BLMM = AV0ZW01.AV0ZW-BLMMSAV;
    AV0ZM001.AV0ZM-MAP-SHPYY = AV0ZW01.AV0ZW-SHPYY;
    AV0ZM001.AV0ZM-MAP-SHPMM = AV0ZW01.AV0ZW-SHPMM;
    AV0ZM001.AV0ZM-MAP-SHPDD = AV0ZW01.AV0ZW-SHPDD;
    AV0ZM001.XGPCD = AV0ZW01.AV0ZW-XGPSAV;
    AV0ZM001.XWHCD = AV0ZW01.XWHCD;
    AV0ZM001.XWHABRV = AV0ZW01.AV0ZW-XWHABRVSAV;
    AV0ZM001.AV0ZM-MAP-PCTADJ = AV0ZW01.AV0ZW-PCTSAV;
  end

  AV0ZM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (AV0ZW01.AV0ZW-SY1STYSAV == " ")
    AV0ZM001.XUMCD = "01";
    AV0ZM001.XDMCD = "00";
    AV0ZM001.XWHCD = "00";
    AV0ZM001.XWHABRV = " ";
    if (AV0ZW01.AV0ZW-XGPSAV == " ")
      AV0ZM001.XGPCD = COMMAREA.XGPCD;
    else
      AV0ZM001.XGPCD = AV0ZW01.AV0ZW-XGPSAV;
    end

    AV0ZM001.AV0ZM-MAP-PCTADJ = 80;

    AV0ZW01.AV0ZW-DATIX = 1;
    while (AV0ZW01.AV0ZW-DATIX <= 8)
      set AV0ZM001.AV0ZM-MAP-DATE[AV0ZW-DATIX] invisible, protect;
      AV0ZW01.AV0ZW-DATIX = AV0ZW01.AV0ZW-DATIX + 1;
    end
  end

  AV0ZW01.AV0ZW-SIZIX = 1;
  while (AV0ZW01.AV0ZW-SIZIX <= 12)
    set AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] invisible, protect;
    set AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] invisible, protect;
    set AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] invisible, protect;
    set AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] invisible, protect;
    set AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] invisible, protect;
    set AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] invisible, protect;
    set AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] invisible, protect;
    set AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] invisible, protect;
    AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
  end

  set AV0ZM001.AV0ZM-MAP-SIZELIT invisible;

  if (converseVar.eventKey is pf6
   || AVWREC.XXXMSGNO == 331) /* enter print title*/
    set AV0ZM001.AV0ZM-MAP-TITLELIT bold;
    set AV0ZM001.AV0ZM-MAP-TITLEMSG cursor, bold;
  else
    set AV0ZM001.AV0ZM-MAP-TITLELIT invisible;
    set AV0ZM001.AV0ZM-MAP-TITLEMSG protect, invisible;
  end

end // end AV0Z-201

// load map with ws data
Function AV0Z-210()

  AV0ZW01.AV0ZW-DATIX = 1; /* map column index*/
   /* quantity index set in av0z600*/
  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-SAVQIX; /* * set qty index*/
  AV0ZW01.AV0ZW-STARTQIX = AV0ZW01.AV0ZW-QIX; /* set start ix*/
   /* working storage rec index set in av0z600*/
  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-SAVWSIX; /* set ws index*/

  set AV0ZM001.AV0ZM-MAP-SIZELIT initialAttributes;

  if (AV0ZW01.AV0ZW-WSREC == 1)
    while (AV0ZW01.AV0ZW-DATIX <= 8)
      AV0Z-211(); /* load map from av0zw03;*/
    end
  end

  if (AV0ZW01.AV0ZW-WSREC == 2)
    while (AV0ZW01.AV0ZW-DATIX <= 8)
      AV0Z-212(); /* load map from av0zw04;*/
    end
  end

  AV0ZW01.AV0ZW-ENDQIX = AV0ZW01.AV0ZW-QIX; /* save end qty index*/

  if (converseVar.eventKey is pf6
   || AVWREC.XXXMSGNO == 331) /* enter print title*/
    set AV0ZM001.AV0ZM-MAP-TITLELIT bold;
    set AV0ZM001.AV0ZM-MAP-TITLEMSG cursor, bold;
  else
    set AV0ZM001.AV0ZM-MAP-TITLELIT invisible;
    set AV0ZM001.AV0ZM-MAP-TITLEMSG protect, invisible;
    if (AV0ZM001.AV0ZM-MAP-DATE[1] == "AT ONCE"
     && AV0ZM001.AV0ZM-MAP-DATE[2] > " ")
      set AV0ZM001.AV0ZM-MAP-QTY2[1] cursor;
    else
      set AV0ZM001.AV0ZM-MAP-QTY1[1] cursor;
    end
  end

end // end AV0Z-210

// load map with av0zw03 data
Function AV0Z-211()

  if (AV0ZW01.AV0ZW-DATIX <= 7)
    if (AV0ZW03.AV0ZW-DT[AV0ZW-WSIX] > 0)
      set AV0ZM001.AV0ZM-MAP-DATE[AV0ZW-DATIX] initialAttributes;
      AV0Z-213(); /* set qtys defined*/
    /* format date for the map:*/
      if (AV0ZW03.AV0ZW-DT[AV0ZW-WSIX] == 99999999)
        AV0ZM001.AV0ZM-MAP-DATE[AV0ZW-DATIX] = "AT ONCE ";
      else
        AV0ZW01.AV0ZW-FORMATDT = AV0ZW03.AV0ZW-DT[AV0ZW-WSIX];
        AV0ZW01.AV0ZW-MAPMM = AV0ZW01.AV0ZW-FORMATMM;
        AV0ZW01.AV0ZW-MAPSLASH = "/";
        AV0ZW01.AV0ZW-MAPDD = AV0ZW01.AV0ZW-FORMATDD;
        AV0ZM001.AV0ZM-MAP-DATE[AV0ZW-DATIX] = AV0ZW01.AV0ZW-MAPDT;
      end
    end
  else
    AV0ZM001.AV0ZM-MAP-DATE[AV0ZW-DATIX] = "TOTAL";
    set AV0ZM001.AV0ZM-MAP-DATE[8] initialAttributes;
    AV0ZW01.AV0ZW-SIZIX = 1;
    while (AV0ZW01.AV0ZW-SIZIX <= 11)
      set AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] initialAttributes;
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
    if (AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] initialAttributes;
    end
  end

  set AV0ZW08 empty;
    /* move quantity group to quantity breakout:*/
  AV0ZW08.AV0ZW-QTYS = AV0ZW03.AV0ZW-QTYS[AV0ZW-WSIX];

  AV0ZW01.AV0ZW-SIZIX = 1;
  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-STARTQIX;

  while (AV0ZW01.AV0ZW-SIZIX <= 11
   && AV0ZW01.AV0ZW-QIX <= AV0ZW01.AV0ZW-TOTALIX)
    AV0Z-215(); /* load size quantities to map*/
  end

  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-WSIX + 1; /* increment ws record ix*/
  AV0ZW01.AV0ZW-DATIX = AV0ZW-DATIX + 1; /* increment map index*/

end // end AV0Z-211

// load map with av0zw04 data
Function AV0Z-212()

  if (AV0ZW01.AV0ZW-DATIX <= 7)
    if (AV0ZW04.AV0ZW-DT[AV0ZW-WSIX] > 0)
      AV0ZW-SAVWSIX = AV0ZW01.AV0ZW-WSIX; /* save column index*/
      set AV0ZM001.AV0ZM-MAP-DATE[AV0ZW-DATIX] initialAttributes;
      AV0Z-213(); /* set qtys defined*/
    /* format date for the map:*/
      AV0ZW01.AV0ZW-FORMATDT = AV0ZW04.AV0ZW-DT[AV0ZW-WSIX];
      AV0ZW01.AV0ZW-MAPMM = AV0ZW01.AV0ZW-FORMATMM;
      AV0ZW01.AV0ZW-MAPSLASH = "/";
      AV0ZW01.AV0ZW-MAPDD = AV0ZW01.AV0ZW-FORMATDD;
      AV0ZM001.AV0ZM-MAP-DATE[AV0ZW-DATIX] = AV0ZW01.AV0ZW-MAPDT;
    end
  else
    AV0ZM001.AV0ZM-MAP-DATE[AV0ZW-DATIX] = "TOTAL";
    set AV0ZM001.AV0ZM-MAP-DATE[8] initialAttributes;
    AV0ZW01.AV0ZW-SIZIX = 1;
    while (AV0ZW01.AV0ZW-SIZIX <= 11)
      set AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] initialAttributes;
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
    if (AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] initialAttributes;
    end
  end

  set AV0ZW08 empty;
    /* move quantity group to quantity breakout:*/
  AV0ZW08.AV0ZW-QTYS = AV0ZW04.AV0ZW-QTYS[AV0ZW-WSIX];

  AV0ZW01.AV0ZW-SIZIX = 1;
  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-STARTQIX;

  while (AV0ZW01.AV0ZW-SIZIX <= 11
   && AV0ZW01.AV0ZW-QIX <= AV0ZW01.AV0ZW-TOTALIX)
    AV0Z-215(); /* load size quantities to map*/
  end

  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-WSIX + 1; /* increment ws record ix*/
  AV0ZW01.AV0ZW-DATIX = AV0ZW-DATIX + 1; /* increment map index*/
end // end AV0Z-212

// load map qtys & size descripts
Function AV0Z-213()

  if (AV0ZW01.AV0ZW-DATIX == 1) /* indentify which map quantity to load*/
    AV0ZW01.AV0ZW-SIZIX = 1;
    while (AV0ZW01.AV0ZW-SIZIX <= 11)
      set AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] initialAttributes;
      set AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] initialAttributes;
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 2) /* indentify which map quantity to load*/
    AV0ZW01.AV0ZW-SIZIX = 1;
    while (AV0ZW01.AV0ZW-SIZIX <= 11)
      set AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] initialAttributes;
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 3) /* indentify which map quantity to load*/
    AV0ZW01.AV0ZW-SIZIX = 1;
    while (AV0ZW01.AV0ZW-SIZIX <= 11)
      set AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] initialAttributes;
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 4) /* indentify which map quantity to load*/
    AV0ZW01.AV0ZW-SIZIX = 1;
    while (AV0ZW01.AV0ZW-SIZIX <= 11)
      set AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] initialAttributes;
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 5) /* indentify which map quantity to load*/
    AV0ZW01.AV0ZW-SIZIX = 1;
    while (AV0ZW01.AV0ZW-SIZIX <= 11)
      set AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] initialAttributes;
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 6) /* indentify which map quantity to load*/
    AV0ZW01.AV0ZW-SIZIX = 1;
    while (AV0ZW01.AV0ZW-SIZIX <= 11)
      set AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] initialAttributes;
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 7) /* indentify which map quantity to load*/
    AV0ZW01.AV0ZW-SIZIX = 1;
    while (AV0ZW01.AV0ZW-SIZIX <= 11)
      set AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] initialAttributes;
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
  end

end // end AV0Z-213

// load map qtys & size descripts
Function AV0Z-215()

  if (AV0ZW01.AV0ZW-DATIX == 1) /* indentify which map quantity to load*/
    /* only load quantities for valid sizes:*/
    /* if last valid size + 1, move total quantity for that date to map:*/
    if (AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
      AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] = "TOTAL";
      AV0Z-216(); /* load date total qty to map qty1*/
    else
      /* otherwise move size description and size quantity to map*/
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " " /* if valid size*/
       && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
        AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] = PG3REC.SY4IDDSC[AV0ZW-QIX];
        AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] = AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX - 1;
        if (AV0ZW01.AV0ZW-SIZIX == 11
         && AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
          AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
          AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] = "TOTAL";
          AV0Z-216(); /* load date total qty to map qty1*/
        end
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX + 1;
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 2)
    if (AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
      AV0Z-216(); /* load date total qty to map.*/
    else
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " " /* valid size*/
       && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
        AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] = AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX - 1;
        if (AV0ZW01.AV0ZW-SIZIX == 11
         && AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
          AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
          AV0Z-216(); /* load date total qty to map qty1*/
        end
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX + 1;
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 3)
    if (AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
      AV0Z-216(); /* load date total qty to map.*/
    else
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " "
       && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
        AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] = AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX - 1;
        if (AV0ZW01.AV0ZW-SIZIX == 11
         && AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
          AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
          AV0Z-216(); /* load date total qty to map qty1*/
        end
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX + 1;
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 4)
    if (AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
      AV0Z-216(); /* load date total qty to map.*/
    else
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " " /* valid size*/
       && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
        AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] = AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX - 1;
        if (AV0ZW01.AV0ZW-SIZIX == 11
         && AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
          AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
          AV0Z-216(); /* load date total qty to map qty1*/
        end
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX + 1;
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 5)
    if (AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
      AV0Z-216(); /* load date total qty to map.*/
    else
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " " /* valid size*/
       && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
        AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] = AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX - 1;
        if (AV0ZW01.AV0ZW-SIZIX == 11
         && AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
          AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
          AV0Z-216(); /* load date total qty to map qty1*/
        end
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX + 1;
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 6)
    if (AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
      AV0Z-216(); /* load date total qty to map.*/
    else
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " " /* valid size*/
       && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
        AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] = AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX - 1;
        if (AV0ZW01.AV0ZW-SIZIX == 11
         && AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
          AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
          AV0Z-216(); /* load date total qty to map qty1*/
        end
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX + 1;
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 7)
    if (AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
      AV0Z-216(); /* load date total qty to map.*/
    else
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " " /* valid size*/
       && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
        AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] = AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX - 1;
        if (AV0ZW01.AV0ZW-SIZIX == 11
         && AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
          AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
          AV0Z-216(); /* load date total qty to map qty1*/
        end
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX + 1;
      end
    end
  end

   /* load total quantity for each size to every map:*/
  if (AV0ZW01.AV0ZW-DATIX == 8)
    if (AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
      AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] = AV0ZW09.AV0ZW-GRANDTOT;
    else
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " " /* valid size*/
       && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
        AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] = AV0ZW09.AV0ZW-SIZTOT[AV0ZW-QIX];
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX - 1;
        if (AV0ZW01.AV0ZW-SIZIX == 11
         && AV0ZW01.AV0ZW-QIX == AV0ZW01.AV0ZW-TOTALIX)
          AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
          AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] = AV0ZW09.AV0ZW-GRANDTOT;
          set AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] initialAttributes;
        end
        AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-TOTALIX + 1;
      end
    end
  end

   /* increment map size index if valid size quantity was loaded:*/
  if (AV0ZW01.AV0ZW-QIX < 41)
    if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " " /* valid size*/
     && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
      AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
    end
  end

  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-QIX + 1;

end // end AV0Z-215

// load date tot qty to map qty1
Function AV0Z-216()

   /* identify working storage record and move respective total to*/
   /* map date quantity 1:*/

  if (AV0ZW01.AV0ZW-WSREC == 1)
    AV0Z-217(); /* load date total from av0zw03*/
  end

  if (AV0ZW01.AV0ZW-WSREC == 2)
    AV0Z-218(); /* load date total from av0zw04*/
  end

end // end AV0Z-216

// load date tot qty from av0zw03
Function AV0Z-217()

   /* identify working storage record and move respective total to*/
   /* map date quantity.*/

  if (AV0ZW01.AV0ZW-DATIX == 1)
    AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] = AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 2)
    AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] = AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 3)
    AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] = AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 4)
    AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] = AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 5)
    AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] = AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 6)
    AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] = AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 7)
    AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] = AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] invisible, protect;
    end
  end

end // end AV0Z-217

// load date tot qty from av0zw04
Function AV0Z-218()

   /* identify working storage record and move respective total to*/
   /* map date quantity.*/

  if (AV0ZW01.AV0ZW-DATIX == 1)
    AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] = AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 2)
    AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] = AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 3)
    AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] = AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 4)
    AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] = AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 5)
    AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] = AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 6)
    AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] = AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] invisible, protect;
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 7)
    AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] = AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX];
    if (AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] > 0)
      set AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] protect;
    else
      set AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] invisible, protect;
    end
  end

end // end AV0Z-218

// load map qtys & size descripts
Function AV0Z-230()

  if (AV0ZM001.AV0ZM-MAP-DATE[1] > " ") /* if data loaded to column*/
    if (AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] == " ")
      set AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] invisible, protect;
    end
  else
    set AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] invisible, protect;
  end

  if (AV0ZM001.AV0ZM-MAP-DATE[2] > " ") /* if data loaded to column*/
    if (AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] == " ")
      set AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] invisible, protect;
    end
  else
    set AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] invisible, protect;
  end

  if (AV0ZM001.AV0ZM-MAP-DATE[3] > " ") /* if data loaded to column*/
    if (AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] == " ")
      set AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] invisible, protect;
    end
  else
    set AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] invisible, protect;
  end

  if (AV0ZM001.AV0ZM-MAP-DATE[4] > " ") /* if data loaded to column*/
    if (AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] == " ")
      set AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] invisible, protect;
    end
  else
    set AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] invisible, protect;
  end

  if (AV0ZM001.AV0ZM-MAP-DATE[5] > " ") /* if data loaded to column*/
    if (AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] == " ")
      set AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] invisible, protect;
    end
  else
    set AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] invisible, protect;
  end

  if (AV0ZM001.AV0ZM-MAP-DATE[6] > " ") /* if data loaded to column*/
    if (AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] == " ")
      set AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] invisible, protect;
    end
  else
    set AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] invisible, protect;
  end

  if (AV0ZM001.AV0ZM-MAP-DATE[7] > " ") /* if data loaded to column*/
    if (AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] == " ")
      set AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] invisible, protect;
    end
  else
    set AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] invisible, protect;
  end

  if (AV0ZM001.AV0ZM-MAP-DATE[8] > " ") /* if data loaded to column*/
    if (AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] == " ")
      set AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] invisible, protect;
    end
  else
    set AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] invisible, protect;
  end

  AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
end // end AV0Z-230

// Check attention identifier
Function AV0Z-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AV0ZW01 empty; /* clear working storage records*/
    set AV0ZW02 empty;
    set AV0ZW03 empty;
    set AV0ZW04 empty;
    set AV0ZW07 empty;
    set AV0ZW08 empty;
    set AV0ZW09 empty;
    set AV0ZW10 empty;
    set AV0ZW11 empty;
    set AV0ZW12 empty;
    set AV0ZM001 initial;
    AV0ZW01.AV0ZW-FIRSTIME = "Y"; /* set request data switch to no*/
    AV0ZW01.AV0ZW-GETDATA = "Y"; /* set request data switch to yes*/
    AV0ZW01.AV0ZW-FORMATMAP = "N"; /* set format map flag to no*/
    AV0ZW01.AV0ZW-VERIFIED = "N"; /* set data verified flag to no*/
    AV0ZW01.AV0ZW-USERWHSEFL = "N"; /* set user entered whse flag no*/
    AV0ZM001.XUMCD = "01"; /* default unit of measure*/
    AV0ZM001.XDMCD = "00"; /* default dimension*/
    AV0ZM001.XWHCD = "00"; /* default warehouse cd*/
    AV0ZM001.XWHCD = COMMAREA.XGPCD; /* default gpc cd*/
    AV0ZM001.AV0ZM-MAP-PCTADJ = 80; /* default percent adjust*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (AV0ZM001.CATOAP != " ") /* if to application filled in*/
    if (converseVar.eventKey is enter)
      COMMAREA.CAFROMAP = "AV0Z"; /* set up commarea for xfer*/
      COMMAREA.CATOAP = AV0ZM001.CATOAP;
      COMMAREA.CAITEM = AV0ZM001.CAITEM;
      AV0Z-690(); /* purge temporary storage*/
      XPAV002(); /* perform xfer to program*/
      set AV0ZM001.CATOAP cursor, bold; /* Highlight*/
      AV0ZM001.VAGen_EZEMSG = COMMAREA.CAMSG;
                                   /* if xfer failed, move error msg*/
      exit stack; /* exit to display map*/
    else
      AVWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(15); /* 'invalid pf key' msg*/
      exit stack; /* exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf4)
    AV0Z-690(); /* delete temporary storages*/
    XPAV002(); /* Exit to another application*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   /* OR EZEAID IS PF9;*/
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf16
   || converseVar.eventKey is enter)
    return;
  end

   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = "300"; /* Module identification*/
  converseLib.validationFailed(15); /* PA/PF key pressed is not valid*/
  exit stack; /* Exit to display map*/

end // end AV0Z-300

// Reset highlighted fields
Function AV0Z-400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

   /* reset style key:*/
  set AV0ZM001.XGPCD initialAttributes; /* gpc code*/
  set AV0ZM001.SY1STNBR initialAttributes; /* style number*/
  set AV0ZM001.SY2CLRID initialAttributes; /* color id*/
  set AV0ZM001.XDMCD initialAttributes; /* dimension code*/
  set AV0ZM001.XUMCD initialAttributes; /* unit of measure code*/

   /* reset stockpile bottomline calculation date fields:*/
  set AV0ZM001.AV0ZM-MAP-BLYY initialAttributes;
  set AV0ZM001.AV0ZM-MAP-BLMM initialAttributes;

   /* reset calculation target date fields:*/
  set AV0ZM001.AV0ZM-MAP-SHPMM initialAttributes;
  set AV0ZM001.AV0ZM-MAP-SHPDD initialAttributes;
  set AV0ZM001.AV0ZM-MAP-SHPYY initialAttributes;

  set AV0ZM001.XWHCD initialAttributes;

   /* reset percent to adjust quantities*/
  set AV0ZM001.AV0ZM-MAP-PCTADJ initialAttributes;

  if (converseVar.eventKey is pf6 /* if print report requested*/
   || AVWREC.XXXMSGNO == 331)     /* please complete report title*/
    set AV0ZM001.AV0ZM-MAP-TITLELIT initialAttributes; /* allow to display*/
    set AV0ZM001.AV0ZM-MAP-TITLEMSG initialAttributes;
  else
    set AV0ZM001.AV0ZM-MAP-TITLELIT invisible; /* set fields to not display*/
    set AV0ZM001.AV0ZM-MAP-TITLEMSG protect, invisible;
  end

  AV0ZW01.AV0ZW-SIZIX = 1;
  while (AV0ZW01.AV0ZW-SIZIX <= 11)
    set AV0ZM001.SY4IDDSC[AV0ZW-SIZIX] initialAttributes;
    set AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] initialAttributes;
    set AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] initialAttributes;
    set AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] initialAttributes;
    set AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] initialAttributes;
    set AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] initialAttributes;
    set AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] initialAttributes;
    set AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] initialAttributes;
    set AV0ZM001.AV0ZM-MAP-QTY8[AV0ZW-SIZIX] initialAttributes;
    AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
  end

  set AV0ZM001.AV0ZM-MAP-SIZELIT initialAttributes;

  set AV0ZM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set AV0ZM001.CAITEM initialAttributes; /* FAST PATH application data*/

end // end AV0Z-400

// Verify data that was entered
Function AV0Z-500()
  if (AV0ZW01.AV0ZW-GETDATA == "Y"
   || AV0ZW01.AV0ZW-VERIFIED == "Y"
   || converseVar.validationMsgNum != 0)
    return;
  end

  AVWREC.XXXMODID = "500"; /* Module identification*/

  if (AV0ZM001.XGPCD == "  "
   || AV0ZM001.XGPCD == "00")
    set AV0ZM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(64); /* please enter gpc code*/
  else
    if (AV0ZM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    /* code is valid*/
    else
      set AV0ZM001.XGPCD cursor, bold; /* Highlight*/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* code not active*/
        converseLib.validationFailed(72); /* inactive gpc cd*/
      else
        converseLib.validationFailed(71); /* invalid whse cd*/
      end
    end
  end

  if (AV0ZM001.XWHCD == "00")
     /* next sentence*/
  else
    if (AV0ZM001.XWHCD > " ") /* whse code not blank*/
      if (AV0ZM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        /* code is valid*/
        AV0ZM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      else
        AV0ZM001.XWHABRV = " "; /* clear out whse abrev.*/
      end
    else
      set AV0ZM001.XWHCD cursor, bold; /* Highlight*/
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* code not active*/
        converseLib.validationFailed(57); /* inactive whse cd*/
      else
        converseLib.validationFailed(58); /* invalid whse cd*/
      end
    end
  end

  if (AV0ZM001.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    /* code is valid*/
    AV0ZM001.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
  else
    set AV0ZM001.XDMCD cursor, bold; /* Highlight*/
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* code not active*/
      converseLib.validationFailed(83); /* inactive dimension cd*/
    else
      converseLib.validationFailed(84); /* invalid dimension cd*/
    end
  end

  AV0Z-503(); /* validate style*/

  if (VAGen_SQLCODE == 0) /* if product found*/
    AV0Z-504(); /* validate color*/
  end

  if (AV0ZM001.XUMCD in XUMTBL.XUMCD /* Code in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    /* code is valid*/
    AV0ZM001.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  else
    set AV0ZM001.XUMCD cursor, bold; /* Highlight*/
    if (XUMTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* code not active*/
      converseLib.validationFailed(78); /* inactive unit of measure cd*/
    else
      converseLib.validationFailed(124); /* invalid unit of measure cd*/
    end
  end

  AV0Z-505(); /* validate bottom line date*/

  AV0Z-506(); /* validate ship date*/

  if (AV0ZW01.AV0ZW-SHPDATE > AV0ZW01.AV0ZW-BLDATE)
    set AV0ZM001.AV0ZM-MAP-BLYY cursor, bold;
    set AV0ZM001.AV0ZM-MAP-BLMM bold;
    set AV0ZM001.AV0ZM-MAP-SHPMM bold;
    set AV0ZM001.AV0ZM-MAP-SHPDD bold;
    set AV0ZM001.AV0ZM-MAP-SHPYY bold;
    converseLib.validationFailed(342); /* bottom line date may not be less than*/
                                   /* ship date*/
  end

  if (converseVar.validationMsgNum == 0) /* no errors so far*/
    if (AV0ZM001.XWHCD == "00") /* map warehouse wildcarded*/
      AV0ZW01.AV0ZW-WILDCARD = "Y"; /* set whse wildcard fl to yes*/
    else
      AV0ZW01.AV0ZW-WILDCARD = "N"; /* set whse wildcard fl to no*/
    end
    AV0Z-510(); /* get all whses valid for user/prod*/
  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  else
    AV0ZW01.AV0ZW-VERIFIED = "Y"; /* data verified flag = yes*/
    AV0Z-507(); /* move fields to save*/
    converseLib.validationFailed(332); /* data verified - press pf16 to*/
                                   /* calculate*/
    exit stack;
  end

end // end AV0Z-500

// verify style number
Function AV0Z-503()
   /* GET DESCRIPTION FOR STYLE*/

  set SY1REC empty;
  set SQLCA empty;

  SY1REC.SY1STNBR = AV0ZM001.SY1STNBR;
  SY1REC.XGPCD = AV0ZM001.XGPCD;

  try
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == +0)     /* and normal return code*/
    AV0ZM001.SY1SSTNM = SY1REC.SY1SSTNM; /* short style name*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == +100)   /* and return code = not found*/
    set AV0ZM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(6); /* 'style not found' msg*/
    return;
  end

   /* if table row in use (not available) return an error message*/
   /* to the user.  otherwise indicate that a system error has*/
   /* occurred.*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(75); /* 'data in use by another applc' msg*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else
    converseLib.validationFailed(76); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1LOCAT = "SELECT STYLE ";
  AV0ZM001.XXXMODID = "503";
  TA1REC.TA1PGMNO = AV0ZM001.XXXMODID; /* program mod number*/
  TA1REC.TA1DBASE = "DPROD"; /* database name*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* table view*/
  TA1REC.TA1TBLKE = AV0ZM001.SY1STNBR; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  exit stack;

end // end AV0Z-503

// validate color code
Function AV0Z-504()
   /* --------------------------- av0z504 ------------------------*/
                      /* select dprod.vsyclr01*/
                  /* select for and color description*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;
  set PG2REC empty;

  PG2REC.XGPCD = AV0ZM001.XGPCD;
  PG2REC.SY1STNBR = AV0ZM001.SY1STNBR;
  PG2REC.SY2CLRID = AV0ZM001.SY2CLRID;
  PG2REC.XDMCD = AV0ZM001.XDMCD;

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == +0)     /* and normal return code*/
    set AV0ZM001.SY2CLRID normal;
    AV0ZM001.SY2CLRAB = PG2REC.SY2CLRAB; /* move color desc to map1*/
    AV0ZM001.XUMCD = PG2REC.XUMCD; /* move unit of measure cd to map1*/
    AV0ZW01.AV0ZW-XUMSAV = PG2REC.XUMCD; /* move uom cd to save*/
    return;
  end

   /* if table row in use (not available) return an error message*/
   /* to the user.  otherwise indicate that a system error has*/
   /* occurred.*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == +100)   /* and return code = not found*/
    set AV0ZM001.SY1STNBR cursor, bold;
    set AV0ZM001.SY2CLRID bold;
    set AV0ZM001.XDMCD bold;
    converseLib.validationFailed(85); /* 'color not found' msg*/
    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(75); /* 'data in use by another applc' msg*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else
    converseLib.validationFailed(76); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1LOCAT = "S STYLE COLOR";
  AV0ZM001.XXXMODID = "504";
  TA1REC.TA1PGMNO = AV0ZM001.XXXMODID; /* program mod number*/
  TA1REC.TA1DBASE = "DPROD"; /* database name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* table view*/
  TA1REC.TA1TBLKE = AV0ZM001.SY1STNBR; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  exit stack;

end // end AV0Z-504

// validate calculation date
Function AV0Z-505()
   /* EDIT BOTTOM LINE - END CALCULATION DATE:*/

  XX0XS01(); /* format current date to ccyymmdd*/

  AV0ZW01.AV0ZW-BLYY = AV0ZM001.AV0ZM-MAP-BLYY;
  AV0ZW01.AV0ZW-BLMM = AV0ZM001.AV0ZM-MAP-BLMM;
  AV0ZW01.AV0ZW-BLDD = 31;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE XX0XW01.XX0XW19 TO AV0ZW01.AV0ZW-BLCC;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AV0ZW01.AV0ZW-BLYY > 60)
    AV0ZW01.AV0ZW-BLCC = 19;
  else
    AV0ZW01.AV0ZW-BLCC = 20;
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

  AV0ZS-11MONTHS(); /* get current date + 11 months*/

  if (AV0ZW01.AV0ZW-BLDATE < XX0XW01.XX0XWDAT)
    set AV0ZM001.AV0ZM-MAP-BLMM cursor, bold;
    set AV0ZM001.AV0ZM-MAP-BLYY bold;
    converseLib.validationFailed(347); /* date may not be less than current*/
                                   /* date*/
  end

  if (AV0ZW01.AV0ZW-BLDATE > AV0ZW01.AV0ZW-11MONTHS)
    set AV0ZM001.AV0ZM-MAP-BLYY cursor, bold;
    set AV0ZM001.AV0ZM-MAP-BLMM bold;
    converseLib.validationFailed(334); /* date must be less than curr date + 11*/
                                   /* months*/
  end

  if (AV0ZW01.AV0ZW-BLMM < 1
   || AV0ZW01.AV0ZW-BLMM > 12)
    set AV0ZM001.AV0ZM-MAP-BLMM cursor, bold;
    converseLib.validationFailed(94); /* invalid month*/
  end

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF AV0ZW01.AV0ZW-BLYY LT 92*/
   /* AND XX0XW01.XX0XW19 LT 20;     /* new millenium logic*/
   /* SET AV0ZM001.AV0ZM-MAP-BLYY CURSOR,BRIGHT;*/
   /* MOVE 96 TO EZEMNO;             /* invalid Year*/
   /* END;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AV0ZW01.AV0ZW-BLYY < 92
   && AV0ZW01.AV0ZW-BLCC < 20) /* new millenium logic*/
    set AV0ZM001.AV0ZM-MAP-BLYY cursor, bold;
    converseLib.validationFailed(96); /* invalid Year*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

  return;
end // end AV0Z-505

// validate estimated ship date
Function AV0Z-506()
   /* EDIT ship date  -  calculation target date:*/

  AV0ZW01.AV0ZW-SHPMM = AV0ZM001.AV0ZM-MAP-SHPMM;
  AV0ZW01.AV0ZW-SHPDD = AV0ZM001.AV0ZM-MAP-SHPDD;
  AV0ZW01.AV0ZW-SHPYY = AV0ZM001.AV0ZM-MAP-SHPYY;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE XX0XW01.XX0XW19 TO AV0ZW01.AV0ZW-SHPCC;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AV0ZW01.AV0ZW-SHPYY > 60)
    AV0ZW01.AV0ZW-SHPCC = 19;
  else
    AV0ZW01.AV0ZW-SHPCC = 20;
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

  if (AV0ZW01.AV0ZW-SHPDATE < XX0XW01.XX0XWDAT)
    set AV0ZM001.AV0ZM-MAP-SHPMM cursor, bold;
    set AV0ZM001.AV0ZM-MAP-SHPDD bold;
    set AV0ZM001.AV0ZM-MAP-SHPYY bold;
    converseLib.validationFailed(347); /* date may not be less than current*/
                                   /* date*/
  end

  if (AV0ZW01.AV0ZW-SHPDATE > AV0ZW01.AV0ZW-11MONTHS)
    set AV0ZM001.AV0ZM-MAP-SHPMM cursor, bold;
    set AV0ZM001.AV0ZM-MAP-SHPDD bold;
    set AV0ZM001.AV0ZM-MAP-SHPYY bold;
    converseLib.validationFailed(334); /* date must be less than curr date + 11*/
                                   /* months*/
  end

  if (AV0ZW01.AV0ZW-SHPDD < 1
   || AV0ZW01.AV0ZW-SHPDD > 31)
    set AV0ZM001.AV0ZM-MAP-SHPDD cursor, bold;
    converseLib.validationFailed(95); /* invalid day*/
  end

  if (AV0ZW01.AV0ZW-SHPMM < 1
   || AV0ZW01.AV0ZW-SHPMM > 12)
    set AV0ZM001.AV0ZM-MAP-SHPMM cursor, bold;
    converseLib.validationFailed(94); /* invalid month*/
  end

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF AV0ZW01.AV0ZW-SHPMM GT 0*/
   /* AND AV0ZW01.AV0ZW-SHPYY LT 92*/
   /* AND XX0XW01.XX0XW19 LT 20;     /* new millenium logoc*/
   /* SET AV0ZM001.AV0ZM-MAP-SHPYY CURSOR,BRIGHT;*/
   /* MOVE 96 TO EZEMNO;             /* invalid year*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AV0ZW01.AV0ZW-SHPMM > 0
   && AV0ZW01.AV0ZW-SHPYY < 92
   && AV0ZW01.AV0ZW-SHPCC < 20)
    set AV0ZM001.AV0ZM-MAP-SHPYY cursor, bold;
    converseLib.validationFailed(96); /* invalid year*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

  return;
end // end AV0Z-506

// move map fields to save
Function AV0Z-507()
  AV0ZW01.AV0ZW-PCTSAV = AV0ZM001.AV0ZM-MAP-PCTADJ;

  AV0ZW01.AV0ZW-SHPMMSAV = AV0ZM001.AV0ZM-MAP-SHPMM;
  AV0ZW01.AV0ZW-SHPDDSAV = AV0ZM001.AV0ZM-MAP-SHPDD;
  AV0ZW01.AV0ZW-SHPYYSAV = AV0ZM001.AV0ZM-MAP-SHPYY;

  AV0ZW01.AV0ZW-BLYYSAV = AV0ZM001.AV0ZM-MAP-BLYY;
  AV0ZW01.AV0ZW-BLMMSAV = AV0ZM001.AV0ZM-MAP-BLMM;
  AV0ZW01.AV0ZW-BLDDSAV = 31;

  AV0ZW01.AV0ZW-XGPSAV = AV0ZM001.XGPCD;
  AV0ZW01.XWHCD = AV0ZM001.XWHCD;
  AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZM001.XWHABRV;
  AV0ZW01.AV0ZW-XDMSAV = AV0ZM001.XDMCD;
  AV0ZW01.AV0ZW-XDMABRVSAV = AV0ZM001.XDMABRV;
  AV0ZW01.AV0ZW-XUMSAV = AV0ZM001.XUMCD;
  AV0ZW01.AV0ZW-XUMDESCSAV = AV0ZM001.XUMDESC;
  AV0ZW01.AV0ZW-SY2CLRSAV = AV0ZM001.SY2CLRID;
  AV0ZW01.AV0ZW-SY2CLRABSAV = AV0ZM001.SY2CLRAB;
  AV0ZW01.AV0ZW-SY1STYSAV = AV0ZM001.SY1STNBR;
  AV0ZW01.AV0ZW-SY1SSTNMSAV = AV0ZM001.SY1SSTNM;

end // end AV0Z-507

// check distinct whse return
Function AV0Z-510()
  set AV0ZW02 empty; /* init passing record*/
  set AV0ZW12 empty; /* init return whse info record*/

  AV0ZW02.XGPCD = AV0ZM001.XGPCD;
  AV0ZW02.SY1STNBR = AV0ZM001.SY1STNBR;
  AV0ZW02.SY2CLRID = AV0ZM001.SY2CLRID;
  AV0ZW02.XDMCD = AV0ZM001.XDMCD;
  AV0ZW02.XUMCD = AV0ZM001.XUMCD;
  AV0ZW02.AV0ZW-CANADIAN-USER = AV0ZW14.AV0ZW-CAN-SO;
  AV0ZW02.AV0ZW-EQUIPMENT-USER = AV0ZW14.AV0ZW-EQMT-SO;
  AV0ZW02.AV0ZW-SEARCH-TYP-IND = "1"; /* select distinct request*/
  AV0ZW02.XXXTSLEN = 1176;

  AV0Z-515(); /* call av1860 to get valid warehouses*/

  if (AV0ZW02.AV0ZW-NBR-WHSES-FOUND > 0)
    AV0ZW12.AV0ZW-XWHCD1 = AV0ZW02.AV0ZW-XWHCD1;
    AV0ZW12.AV0ZW-XWHCD2 = AV0ZW02.AV0ZW-XWHCD2;
    AV0ZW12.AV0ZW-XWHCD3 = AV0ZW02.AV0ZW-XWHCD3;
    AV0ZW12.AV0ZW-NBR-WHSES-FOUND = AV0ZW02.AV0ZW-NBR-WHSES-FOUND;
  else
    converseLib.validationFailed(194); /* There is no data to display*/
    return;
  end

  if (AV0ZW12.AV0ZW-XWHCD1 > " "           /* found whse1 not blank*/
   && AV0ZW12.AV0ZW-XWHCD1 in XWHTBL.XWHCD /* and whse cd in whse tbl*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and whse cd active*/
    AV0ZW12.AV0ZW-XWHABRV1 = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* move to ws*/
  end

  if (AV0ZW12.AV0ZW-XWHCD2 > " "           /* found whse3 not blank*/
   && AV0ZW12.AV0ZW-XWHCD2 in XWHTBL.XWHCD /* and whse cd in whse tbl*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and whse cd active*/
    AV0ZW12.AV0ZW-XWHABRV2 = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* move to ws*/
  end

  if (AV0ZW12.AV0ZW-XWHCD3 > " "           /* found whse3 not blank*/
   && AV0ZW12.AV0ZW-XWHCD3 in XWHTBL.XWHCD /* and whse cd in whse tbl*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and whse cd active*/
    AV0ZW12.AV0ZW-XWHABRV3 = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* move to ws*/
  end
end // end AV0Z-510

// select distinct call to AV1860
Function AV0Z-515()
   /* call subprogram to get all warehouses valid for this product*/

  try
    call "AV1860" (AV0ZW02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ---------------------------------------------------------------*/
   /* If normal return codes, return to the previous process*/
   /* ---------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (AV0ZW02.AV0ZW-RETURNCD == 0) /* successful execution*/
      return;
    end
  end

  AV0ZM001.XXXMODID = "515";
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/

  converseLib.validationFailed(76); /* unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* termination function*/

  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "SELECT DISTINCT CALL AV1860 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* additional information is posted in AV1860 execution via TA0020*/
   /* exit to display map with error message*/

  exit stack;

end // end AV0Z-515

// Process valid input request
Function AV0Z-600()

  if (converseVar.validationMsgNum != 0
   || AV0ZW01.AV0ZW-GETDATA == "Y"
   || AV0ZW01.AV0ZW-VERIFIED == "N")
    return;
  end

  AV0Z-606(); /* compare map fields to save*/

  if (converseVar.validationMsgNum != 0) /* error message*/
    if (converseVar.validationMsgNum != 331 /* print message displayed*/
     && converseVar.validationMsgNum != 332) /* press pf16 to calculate*/
      exit stack;
    end
  end

  if (AV0ZW01.XWHCD != "00" /* if data is displayed*/
   || AV0ZW03.AV0ZW-DT[1] > 0)
    /* move map data to working storage rec and update totals*/
    AV0ZW01.AV0ZW-UPDATEFL = "N"; /* initialize update flag*/
    AV0Z-650(); /* load ws with map data*/
    if (AV0ZW01.AV0ZW-UPDATEFL == "Y")
      AV0ZW01.AV0ZW-SAVQIX = AV0ZW01.AV0ZW-STARTQIX; /* set ix*/
      return;
    end
  end

  if (converseVar.eventKey not pf16 /* if key other than calculate key*/
   && AV0ZW03.AV0ZW-DT[1] == 0)     /* and no display data obtain*/
    converseLib.validationFailed(332); /* move message to press pf16 key to*/
                                   /* calculate*/
    return;
  end

  AV0ZW01.AV0ZW-FORMATMAP = "Y";
  AV0ZW01.AV0ZW-FIRSTIME = "N";

  if (converseVar.eventKey is pf6 /* if print requested*/
   || converseVar.eventKey is enter)
    if (AVWREC.XXXMSGNO == 331) /* if print message has been displayed*/
      if (AV0ZM001.AV0ZM-MAP-TITLEMSG > " ") /* if title message entered*/
        AV0Z-700(); /* move displayed info & submit print*/
                                   /* job*/
        exit stack;
      else
        converseLib.validationFailed(331); /* enter title message*/
        exit stack;
      end
    else
      if (converseVar.eventKey is pf6) /* if print requested*/
        converseLib.validationFailed(331); /* enter title message*/
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf16) /* calculation requested*/
    AV0Z-690(); /* delete temporary storage*/
    AV0Z-601(); /* calculate smart reserve qtys*/
  end

  if (AV0ZW02.SY1STNBR != PG3REC.SY1STNBR)
    if (AV0ZM001.SY1STNBR != PG3REC.SY1STNBR
     || AV0ZM001.SY2CLRID != PG3REC.SY2CLRID
     || AV0ZM001.XDMCD != PG3REC.XDMCD
     || AV0ZM001.XGPCD != PG3REC.XGPCD)
      AV0Z-602(); /* get valid sizes for product*/
    end
  end

  if (converseVar.eventKey is pf16
   || converseVar.eventKey is enter)
    if (AV0ZW03.AV0ZW-DT != 0) /* if not first time thru*/
      AV0Z-660(); /* update temporary storage*/
    end

    AV0ZW01.AV0ZW-TSPAGES = 1; /* set update ts pages to 1*/

    if (AV0ZW01.AV0ZW-USERWHSEFL != "Y") /* user didn't change whse*/
      AV0ZW01.AV0ZW-XWHSAV = AV0ZW01.XWHCD; /* save previous whse*/
    end

    if (AV0ZM001.XWHCD == "00")
      AV0Z-6001(); /* select each whse until whse with data*/
                                   /* found*/
    else
      if (AV0ZM001.XWHCD == AV0ZW12.AV0ZW-XWHCD1)
        if (AV0ZW01.AV0ZW-USERWHSEFL == "Y" /* USER CHANGED WAREHOUSE*/
         || AV0ZW01.AV0ZW-WILDCARD == "N")  /* OR WAREHOUSE NOT WILDCARDED*/
          AV0ZW01.AV0ZW-USERWHSEFL = "N";
          AV0Z-610(); /* load working storage for 1st whse*/
        else
          if (AV0ZW12.AV0ZW-NBR-WHSES-FOUND > 1) /* more than 1 whse found*/
            AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD2; /* process 2nd whse*/
            AV0Z-630(); /* load working storage for 2nd whse*/
          else
            converseLib.validationFailed(358); /* no more data to display*/
          end
        end
      else
        if (AV0ZM001.XWHCD == AV0ZW12.AV0ZW-XWHCD2)
          if (AV0ZW01.AV0ZW-USERWHSEFL == "Y" /* USER CHANGED WAREHOUSE*/
           || AV0ZW01.AV0ZW-WILDCARD == "N") 
                                   /* OR WAREHOUSE NOT WILDCARDED*/
            AV0ZW01.AV0ZW-USERWHSEFL = "N";
            AV0Z-630(); /* load working storage for 2nd whse*/
          else
            if (AV0ZW12.AV0ZW-NBR-WHSES-FOUND > 2) /* more than 2 whses found*/
              AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD3;
                                   /* process 3rd whse*/
              AV0Z-640(); /* load working storage for 3rd whse*/
            else
              converseLib.validationFailed(358); /* no more data to display*/
            end
          end
        else
          if (AV0ZM001.XWHCD == AV0ZW12.AV0ZW-XWHCD3)
            if (AV0ZW01.AV0ZW-USERWHSEFL == "Y" /* USER CHANGED WAREHOUSE*/
             || AV0ZW01.AV0ZW-WILDCARD == "N") 
                                   /* OR WAREHOUSE NOT WILDCARDED*/
              AV0ZW01.AV0ZW-USERWHSEFL = "N";
              AV0Z-640(); /* load working storage for 3rd whse*/
            else
              AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD1;
                                   /* process 1st whse*/
              AV0Z-610(); /* load working storage for 1st whse*/
            end
          else
            AV0ZW01.AV0ZW-VERIFIED = "N";
            set AV0ZM001.XWHCD cursor, bold;
            AV0ZW01.XWHCD = AV0ZM001.XWHCD;
            converseLib.validationFailed(58); /* invalid whse code*/
            return;
          end
        end
      end
    end

    AV0ZW01.AV0ZW-SAVQIX = AV0ZW01.AV0ZW-FIRSTSIZE;
    AV0ZW01.AV0ZW-SAVWSIX = 1;

    if (AV0ZW01.XWHCD != " " /* whse not blank*/
     && AV0ZW01.XWHCD in XWHTBL.XWHCD) /* and it's in the whse tbl*/
      AV0ZW01.AV0ZW-XWHABRVSAV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      AV0ZW01.AV0ZW-XWHABRVSAV = " ";
    end
  end

  if (converseVar.eventKey is pf7) /* if scroll back is requested*/
    if (AV0ZW01.AV0ZW-STARTQIX <= AV0ZW01.AV0ZW-FIRSTSIZE)
      converseLib.validationFailed(10); /* no more sizes to scroll back*/
    else
      AV0Z-692(); /* search valid sizes for next index*/
      if (AV0ZW01.AV0ZW-QTYCOUNT == 0)
        converseLib.validationFailed(10); /* no more sizes to scroll back*/
      else
        AV0ZW01.AV0ZW-SAVQIX = AV0ZW01.AV0ZW-QIX;
      end
    end
    return;
  end

  if (converseVar.eventKey is pf8) /* if scroll forward size qtys*/
    if (AV0ZW01.AV0ZW-ENDQIX > AV0ZW01.AV0ZW-LASTSIZE)
      converseLib.validationFailed(11); /* no more sizes to scroll forward*/
    else
      AV0Z-694(); /* search valid sizes for next index*/
      if (AV0ZW01.AV0ZW-QTYCOUNT == 0)
        converseLib.validationFailed(11); /* no more sizes to scroll forward*/
      else
        AV0ZW01.AV0ZW-SAVQIX = AV0ZW01.AV0ZW-ENDQIX;
      end
    end
    return; /* index is set to loadmap*/
  end

  if (converseVar.eventKey is pf9) /* if update & redisplay map*/
    AV0ZW01.AV0ZW-SAVQIX = AV0ZW01.AV0ZW-STARTQIX; /* set ix*/
    return;
  end

  if (converseVar.eventKey is pf10) /* if scroll left is requested*/
    AV0ZW-SAVQIX = AV0ZW01.AV0ZW-STARTQIX; /* set qty index*/
    AV0ZW01.AV0ZW-SAVWSIX = AV0ZW01.AV0ZW-SAVWSIX - 7; /* set ws ix back*/
    if (AV0ZW01.AV0ZW-SAVWSIX < 1)
      if (AV0ZW01.AV0ZW-WSREC == 1)
        AV0ZW01.AV0ZW-SAVWSIX = 1;
        converseLib.validationFailed(302); /* no columns to the left to display*/
      else
        AV0ZW01.AV0ZW-SAVWSIX = 177;
        AV0ZW01.AV0ZW-WSREC = 1;
      end
    end
    return;
  end

  if (converseVar.eventKey is pf11) /* if scroll right is requested*/
    AV0ZW-SAVQIX = AV0ZW01.AV0ZW-STARTQIX; /* reset qty ix*/
    /* add nbr of columns to scroll*/
    AV0ZW01.AV0ZW-SAVWSIX = AV0ZW01.AV0ZW-SAVWSIX + 7;
    AV0Z-696(); /* determine if columns to scroll*/
    if (converseVar.validationMsgNum == 0) /* if columns to scroll*/
      AV0Z-697(); /* calc pages to update*/
    end
    return;
  end

  if (converseVar.eventKey is pf12) /* if previous warehouse is requested*/
    AV0Z-675(); /* load previous warehouse*/
  end
end // end AV0Z-600

// Process valid input request
Function AV0Z-6001()
  if (AV0ZW02.AV0ZW-TSQ01PAGES > 0)
    AV0ZW01.XWHCD = AV0ZW02.AV0ZW-XWHCD1;
    AV0ZW12.AV0ZW-XWHCD1 = AV0ZW02.AV0ZW-XWHCD1;
    AV0Z-610(); /* Load working storage for whse 1*/
    return;
  end

  if (AV0ZW02.AV0ZW-TSQ02PAGES > 0)
    converseLib.validationFailed(0);
    AV0ZW01.XWHCD = AV0ZW02.AV0ZW-XWHCD2;
    AV0ZW12.AV0ZW-XWHCD2 = AV0ZW02.AV0ZW-XWHCD2;
    AV0Z-630(); /* Load working storage for whse 2*/
    return;
  end

  if (AV0ZW02.AV0ZW-TSQ03PAGES > 0)
    converseLib.validationFailed(0);
    AV0ZW01.XWHCD = AV0ZW02.AV0ZW-XWHCD3;
    AV0ZW12.AV0ZW-XWHCD3 = AV0ZW02.AV0ZW-XWHCD3;
    AV0Z-640(); /* load working storage for whse 3*/
    return;
  end

  converseLib.validationFailed(337); /* No data to display*/
  AV0ZW01.AV0ZW-FORMATMAP = "N";

end // end AV0Z-6001

// call av1860 calc prgm
Function AV0Z-601()

  set AV0ZW02 empty; /* clear io work record*/

   /* set up cics linkage record:*/

  AV0ZW02.XGPCD = AV0ZM001.XGPCD;
  AV0ZW02.SY1STNBR = AV0ZM001.SY1STNBR;
  AV0ZW02.SY2CLRID = AV0ZM001.SY2CLRID;
  AV0ZW02.XDMCD = AV0ZM001.XDMCD;
  AV0ZW02.XUMCD = AV0ZM001.XUMCD;
  AV0ZW02.AV0ZW-BLDATE = AV0ZW01.AV0ZW-BLDATE;
  AV0ZW02.AV0ZW-SHPDATE = AV0ZW01.AV0ZW-SHPDATE;
  AV0ZW02.AV0ZW-PCTADJ = AV0ZM001.AV0ZM-MAP-PCTADJ;
  AV0ZW02.AV0ZW-CANADIAN-USER = AV0ZW14.AV0ZW-CAN-SO;
  AV0ZW02.AV0ZW-EQUIPMENT-USER = AV0ZW14.AV0ZW-EQMT-SO;
  AV0ZW02.AV0ZW-PROCESSDATE = XX0XW01.XX0XWDAT;

  AV0ZW02.AV0ZW-XWHCD1 = AV0ZW12.AV0ZW-XWHCD1;
  AV0ZW02.AV0ZW-XWHCD2 = AV0ZW12.AV0ZW-XWHCD2;
  AV0ZW02.AV0ZW-XWHCD3 = AV0ZW12.AV0ZW-XWHCD3;
  AV0ZW02.AV0ZW-TSQ01APP = "AVZ1";
  AV0ZW02.AV0ZW-TSQ02APP = "AVZ2";
  AV0ZW02.AV0ZW-TSQ03APP = "AVZ3";
  AV0ZW02.AV0ZW-SEARCH-TYP-IND = " "; /* retrieve data request*/
  AV0ZW02.XXXTSLEN = 1176;

   /* call subprogram to calculate smart reserve quantities for*/
   /* whses*/

  try
    call "AV1860" (AV0ZW02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If normal return codes, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (AV0ZW02.AV0ZW-RETURNCD == 0) /* successful execution*/
      return; /* exit to continue*/
    end
  end

  AV0ZM001.XXXMODID = "601";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  converseLib.validationFailed(76); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "CALL AV1860 CALC PGM ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* additional information is posted in av1860 execution via ta0020*/

   /* Exit to display map with error message*/

  exit stack;
end // end AV0Z-601

// get valid sizes for style
Function AV0Z-602()
   /* get valid sizes for style:*/
  AV0Z-603();

   /* get first and last sizes in product size range:*/
  AV0Z-604();

end // end AV0Z-602

// get valid sizes for style
Function AV0Z-603()
   /* CALL TO PG1050 TO GET VALID SIZES FOR PRODUCT*/

  set PG3REC empty;

  PG3REC.XGPCD = AV0ZW02.XGPCD;
  PG3REC.SY1STNBR = AV0ZW02.SY1STNBR;
  PG3REC.SY2CLRID = AV0ZW02.SY2CLRID;
  PG3REC.XDMCD = AV0ZW02.XDMCD;
  PG3REC.XQACD = "01";
  PG3REC.PG3RETCD = 0;

  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  try
    call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    AV0ZM001.XXXMODID = "603";
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1LOC = "SELECT SIZE IDS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
    TA1REC.TA1PGMNO = AV0ZM001.XXXMODID;
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "PRODUCT";
    TA1REC.TA1LOCAT[4] = "PG1050";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " ";
    converseLib.validationFailed(76); /* unexpected error*/
    exit stack;
  end

end // end AV0Z-603

// get first & last size in range
Function AV0Z-604()

  AV0ZW01.AV0ZW-QIX = 1; /* initialize index*/
  AV0ZW01.AV0ZW-FIRSTSZFL = "N";
  while (AV0ZW01.AV0ZW-QIX <= 40)
    AV0Z-605(); /* scan size range array*/
  end

   /* compute index to indicate loading period totals:*/
  AV0ZW01.AV0ZW-TOTALIX = AV0ZW01.AV0ZW-LASTSIZE + 1;
end // end AV0Z-604

// get first & last size in range
Function AV0Z-605()

  if (PG3REC.SY5SZID[AV0ZW-QIX] > 0 /* valid size*/
   && PG3REC.XDVCD[AV0ZW-QIX] == "01") /* and inline size*/
    if (AV0ZW01.AV0ZW-FIRSTSZFL == "N")
      AV0ZW01.AV0ZW-FIRSTSIZE = PG3REC.SY5SZID[AV0ZW-QIX];
      AV0ZW01.AV0ZW-FIRSTSZFL = "Y";
    end
    AV0ZW01.AV0ZW-LASTSIZE = PG3REC.SY5SZID[AV0ZW-QIX];
  end

  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-QIX + 1;

end // end AV0Z-605

// compare map fields to save
Function AV0Z-606()
  if (AV0ZM001.XWHCD == AV0ZW01.XWHCD) /* map whse = last process whse*/
    if (AV0ZW01.AV0ZW-FIRSTIME == "Y"
     && AV0ZW01.XWHCD != "00")
      AV0ZW01.AV0ZW-USERWHSEFL = "Y"; /* move yes to user changed whse*/
      AV0ZW01.XWHCD = AV0ZM001.XWHCD;
      AV0ZW01.AV0ZW-XWHSAV = "00"; /* move wildcard ind to saved*/
    else
      if (converseVar.eventKey is enter)
        AV0ZW01.AV0ZW-USERWHSEFL = "N";
                                   /* move no to user changed whse*/
      end
    end
  else /* map whse not = last process whse*/
    if (AV0ZM001.XWHCD == "  ") /* warehouse blanked out*/
      AV0ZW01.AV0ZW-VERIFIED = "N";
      set AV0ZM001.XWHCD cursor, bold;
      converseLib.validationFailed(58);
      return;
    else
      if (converseVar.eventKey is pf16) /* calculate requested*/
        converseLib.validationFailed(275); /* can't change display with function*/
        AV0ZW01.AV0ZW-VERIFIED = "N";
      end
    end
    AV0ZW01.AV0ZW-USERWHSEFL = "Y"; /* move yes to user changed whse*/
    AV0ZW01.AV0ZW-XWHSAV = AV0ZW01.XWHCD;
    AV0ZW01.XWHCD = AV0ZM001.XWHCD;
  end

  if (converseVar.validationMsgNum != 0   /**/
   && converseVar.validationMsgNum != 331 /* print message*/
   && converseVar.validationMsgNum != 332) /* calculate requested*/
    AV0Z-607(); /* clear working storage*/
    AV0ZM001.XWHABRV = " "; /* clear out whse abrev.*/
    AV0ZW01.AV0ZW-VERIFIED = "N";
    return;
  end

  if (AV0ZM001.AV0ZM-MAP-PCTADJ != AV0ZW01.AV0ZW-PCTSAV
   || AV0ZM001.AV0ZM-MAP-SHPMM != AV0ZW01.AV0ZW-SHPMMSAV
   || AV0ZM001.AV0ZM-MAP-SHPDD != AV0ZW01.AV0ZW-SHPDDSAV
   || AV0ZM001.AV0ZM-MAP-SHPYY != AV0ZW01.AV0ZW-SHPYYSAV
   || AV0ZM001.AV0ZM-MAP-BLYY != AV0ZW01.AV0ZW-BLYYSAV
   || AV0ZM001.AV0ZM-MAP-BLMM != AV0ZW01.AV0ZW-BLMMSAV
   || AV0ZM001.XDMCD != AV0ZW01.AV0ZW-XDMSAV
   || AV0ZM001.SY2CLRID != AV0ZW01.AV0ZW-SY2CLRSAV
   || AV0ZM001.SY1STNBR != AV0ZW01.AV0ZW-SY1STYSAV
   || AV0ZM001.XGPCD != AV0ZW01.AV0ZW-XGPSAV)
    AV0Z-607(); /* clear working storage*/
    AV0ZM001.XWHABRV = " "; /* clear out whse abrev.*/
    AV0ZW01.AV0ZW-VERIFIED = "N";
    exit stack;
  else
    AV0ZW01.AV0ZW-WILDCARD = "Y"; /* set wildcard flag to yes*/
  end

end // end AV0Z-606

// Clear working storage fields
Function AV0Z-607()
  if (AV0ZW01.AV0ZW-USERWHSEFL == "Y")
    AV0ZW14.AV0ZW-USERWHSESAV = "Y";
  else
    AV0ZW14.AV0ZW-USERWHSESAV = "N";
  end

  set AV0ZW01 empty; /* clear working storage records*/
  set AV0ZW02 empty;
  set AV0ZW03 empty;
  set AV0ZW04 empty;
  set AV0ZW07 empty;
  set AV0ZW08 empty;
  set AV0ZW09 empty;
  set AV0ZW10 empty;
  set AV0ZW11 empty;
  set AV0ZW12 empty;
  set PG3REC empty;
  AV0ZW01.AV0ZW-FIRSTIME = "Y"; /* set request data flag to no*/
  AV0ZW01.AV0ZW-GETDATA = "N"; /* set request data flag to no*/
  AV0ZW01.AV0ZW-VERIFIED = "N"; /* set data verified flag to no*/
  AV0ZW01.AV0ZW-FORMATMAP = "N"; /* set format map flag to no*/
  AV0ZW01.AV0ZW-USERWHSEFL = "N"; /* set user entered whse flag no*/

  if (AV0ZW14.AV0ZW-USERWHSESAV == "N")
    AV0ZM001.XWHCD = "00";
    AV0ZM001.XWHABRV = " ";
  end
end // end AV0Z-607

// load working storage whse 1
Function AV0Z-610()
   /* this module will load up to 366 smart reserve supply dates*/
   /* to working storage records:*/

  if (AV0ZW02.AV0ZW-TSQ01PAGES == 0)
    converseLib.validationFailed(337); /* no data to display*/
    AV0ZW01.AV0ZW-FORMATMAP = "N";
    return;
  end

   /* initialize working storage records:*/
  set AV0ZW03 empty;
  set AV0ZW04 empty;
  set AV0ZW09 empty;

  AV0Z-611(); /* set temporary storage for read*/

  AV0ZW01.AV0ZW-WSREC = 1; /* initialize working storage rec count*/
  AV0ZW01.AV0ZW-WSIX = 1; /* set working storage index*/

   /* while temp stor pages less than total nbr of ts pages for whse1*/
  while (TA5REC.TA5TSQIX < AV0ZW02.AV0ZW-TSQ01PAGES
   && AV0ZW01.AV0ZW-WSIX <= 183) /* number of records in working storage*/
    AV0Z-613(); /* move data to av0zw03*/
  end

  if (TA5REC.TA5TSQIX < AV0ZW02.AV0ZW-TSQ01PAGES)
    /* add 1 to working storage record count:*/
    AV0ZW01.AV0ZW-WSREC = AV0ZW01.AV0ZW-WSREC + 1;
    AV0ZW01.AV0ZW-WSIX = 1; /* set working storage index*/

   /* while temp stor pages less than number of ts pgs for whse1*/
    while (TA5REC.TA5TSQIX < AV0ZW02.AV0ZW-TSQ01PAGES
     && AV0ZW01.AV0ZW-WSIX <= 183) /* number of records in working storage*/
      AV0Z-615(); /* move data to av0zw04*/
    end
  end

  AV0ZW01.AV0ZW-QIX = 1; /* set quantity index*/
end // end AV0Z-610

// setup temp stor rec for whse 1
Function AV0Z-611()
   /* set up to call temporary storage program:*/

  set TA5REC empty; /* clear temporary storage record*/

  TA5REC.TA5APPID = AV0ZW02.AV0ZW-TSQ01APP; /* application id*/
  TA5REC.TA5TSQIX = 0; /* initialize temp storage page nbr*/
  TA5REC.TA5FNCCD = "R"; /* 'read' function code*/

end // end AV0Z-611

// call temp stor pgm for read
Function AV0Z-612()

  set AV0ZW07 empty;
  AV0ZW07.XXXTSLEN = AV0ZW02.XXXTSLEN; /* set temp stor page length*/

  TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1; /* add 1 to page to get*/

  try
    call "TA0050" (AV0ZW07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage program*/

   /* -------------------------------------------------------*/
   /* if successful return to continue main process*/
   /* -------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA5REC.TA5RTNCD == 0)          /* normal ta0050 return code*/
    return; /* return to continue processing*/
  end

   /* -------------------------------------------------------*/
   /* otherwise, indicate that a system error has occurred*/
   /* -------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
  converseLib.validationFailed(76); /* 'system error' msg*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "CALL TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "612"; /* program number*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/

end // end AV0Z-612

// load av0zw03 from temp stor
Function AV0Z-613()
  AV0Z-612(); /* read temp storage*/

  AV0ZW01.AV0ZW-TSIX = 1; /* set temp storage index*/

  while (AV0ZW01.AV0ZW-TSIX <= 7) /* number of records in temp storage rec*/
    AV0Z-614(); /* move data to av0zw03*/
  end
end // end AV0Z-613

// move data to av0zw03
Function AV0Z-614()
  AV0ZW03.AV0ZW-DT[AV0ZW-WSIX] = AV0ZW07.AV0ZW-DT[AV0ZW-TSIX];
  AV0ZW03.AV0ZW-QTYS[AV0ZW-WSIX] = AV0ZW07.AV0ZW-QTYS[AV0ZW-TSIX];

   /* move quantity array to quantity breakout*/
  AV0ZW08.AV0ZW-QTYS = AV0ZW03.AV0ZW-QTYS[AV0ZW-WSIX];
  AV0Z-625(); /* calculate size and period totals*/

  AV0ZW01.AV0ZW-TSIX = AV0ZW01.AV0ZW-TSIX + 1; /* increment temp stor ix*/
  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-WSIX + 1; /* increment work stor ix*/
end // end AV0Z-614

// load av0zw04 from temp stor
Function AV0Z-615()
  AV0Z-612(); /* read temp storage*/

  AV0ZW01.AV0ZW-TSIX = 1; /* set temp storage index*/

  while (AV0ZW01.AV0ZW-TSIX <= 7) /* number of records in temp storage rec*/
    AV0Z-616(); /* move data to av0zw04*/
  end
end // end AV0Z-615

// move data to av0zw04
Function AV0Z-616()
  AV0ZW04.AV0ZW-DT[AV0ZW-WSIX] = AV0ZW07.AV0ZW-DT[AV0ZW-TSIX];
  AV0ZW04.AV0ZW-QTYS[AV0ZW-WSIX] = AV0ZW07.AV0ZW-QTYS[AV0ZW-TSIX];

   /* move quantity array to quantity breakout*/
  AV0ZW08.AV0ZW-QTYS = AV0ZW04.AV0ZW-QTYS[AV0ZW-WSIX];
  AV0Z-625(); /* calculate size and period totals*/

  AV0ZW01.AV0ZW-TSIX = AV0ZW01.AV0ZW-TSIX + 1; /* increment temp stor ix*/
  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-WSIX + 1; /* increment work stor ix*/
end // end AV0Z-616

// calc size & period totals
Function AV0Z-625()

   /* calculate period quantity totals:*/

  AV0ZW01.AV0ZW-QIX = 1; /* set quantity index*/
  while (AV0ZW01.AV0ZW-QIX <= 40) /* for each size*/
    AV0Z-626(); /* calc period quantity total*/
  end

   /* calculate size quantity totals (will total for all periods)*/
  AV0ZW01.AV0ZW-QIX = 1;
  while (AV0ZW01.AV0ZW-QIX <= 40)
    AV0Z-627(); /* calc size quantity totals*/
  end

end // end AV0Z-625

// calc period quantity total
Function AV0Z-626()
   /* period quantity total = all size quantities summed together:*/

  if (AV0ZW01.AV0ZW-WSREC == 1) /* working storage record id*/
    AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX] = AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX]     + AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
  end

  if (AV0ZW01.AV0ZW-WSREC == 2)
    AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX] = AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX]     + AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
  end

  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-QIX + 1;

end // end AV0Z-626

// calc size quantity totals
Function AV0Z-627()

  AV0ZW09.AV0ZW-SIZTOT[AV0ZW-QIX] = AV0ZW-SIZTOT[AV0ZW-QIX] +   AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];

  AV0ZW09.AV0ZW-GRANDTOT = AV0ZW09.AV0ZW-GRANDTOT +   AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];

  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-QIX + 1;

end // end AV0Z-627

// load working storage whse 2
Function AV0Z-630()
   /* this module will load up to 366 smart reserve supply dates*/
   /* to working storage records:*/

  if (AV0ZW02.AV0ZW-TSQ02PAGES == 0)
    converseLib.validationFailed(337); /* no data to display*/
    AV0ZW01.AV0ZW-FORMATMAP = "N";
    return;
  end

   /* initialize working storage records:*/
  set AV0ZW03 empty;
  set AV0ZW04 empty;
  set AV0ZW09 empty;

  AV0Z-631(); /* setup temp storage for read*/

  AV0ZW01.AV0ZW-WSREC = 1; /* initialize working storage rec count*/
  AV0ZW01.AV0ZW-WSIX = 1; /* set working storage index*/

   /* while temp stor pages less than total number of ts pgs for whse2*/
  while (TA5REC.TA5TSQIX < AV0ZW02.AV0ZW-TSQ02PAGES
   && AV0ZW01.AV0ZW-WSIX <= 183) /* number of records in working storage*/
    AV0Z-613(); /* move data to av0zw03*/
  end

   /* if temp stor pages less than total number of ts pages for whse2*/
  if (TA5REC.TA5TSQIX < AV0ZW02.AV0ZW-TSQ02PAGES)
    /* increment working storage record count:*/
    AV0ZW01.AV0ZW-WSREC = AV0ZW01.AV0ZW-WSREC + 1;
    AV0ZW01.AV0ZW-WSIX = 1; /* set working storage index*/

   /* while temp stor pages less than total number of ts pgs for whse2*/
    while (TA5REC.TA5TSQIX < AV0ZW02.AV0ZW-TSQ02PAGES
     && AV0ZW01.AV0ZW-WSIX <= 183) /* number of records in working storage*/
      AV0Z-615(); /* move data to av0zw04*/
    end
  end

end // end AV0Z-630

// setup temp stor rec for whse 2
Function AV0Z-631()
   /* set up to call temporary storage program:*/

  set TA5REC empty; /* clear temporary storage record*/

  TA5REC.TA5APPID = AV0ZW02.AV0ZW-TSQ02APP; /* application id*/
  TA5REC.TA5TSQIX = 0; /* initialize temp storage page nbr*/
  TA5REC.TA5FNCCD = "R"; /* 'read' function code*/

end // end AV0Z-631

// load working storage whse 3
Function AV0Z-640()
   /* this module will load up to 366 smart reserve supply dates*/
   /* to working storage records:*/

  if (AV0ZW02.AV0ZW-TSQ03PAGES == 0)
    converseLib.validationFailed(337); /* no data to display*/
    /* MOVE 'Y' TO AV0ZW01.AV0ZW-FIRSTIME;*/
    AV0ZW01.AV0ZW-FORMATMAP = "N";
    return;
  end

   /* initialize working storage records:*/
  set AV0ZW03 empty;
  set AV0ZW04 empty;
  set AV0ZW09 empty;

  AV0Z-641(); /* setup temp storage for read*/

  AV0ZW01.AV0ZW-WSREC = 1; /* initialize working storage rec count*/
  AV0ZW01.AV0ZW-WSIX = 1; /* set working storage index*/

   /* while temp stor pages less than total number of ts pgs for whse3*/
  while (TA5REC.TA5TSQIX < AV0ZW02.AV0ZW-TSQ03PAGES
   && AV0ZW01.AV0ZW-WSIX <= 183) /* number of records in working storage*/
    AV0Z-613(); /* move data to av0zw03*/
  end

   /* if temp stor pages less than total number of ts pgs for whse3*/
  if (TA5REC.TA5TSQIX < AV0ZW02.AV0ZW-TSQ03PAGES)
    /* increment working storage record count:*/
    AV0ZW01.AV0ZW-WSREC = AV0ZW01.AV0ZW-WSREC + 1;
    AV0ZW01.AV0ZW-WSIX = 1; /* set working storage index*/

   /* while temp stor pages less than total number of ts pgs for whse3*/
    while (TA5REC.TA5TSQIX < AV0ZW02.AV0ZW-TSQ03PAGES
     && AV0ZW01.AV0ZW-WSIX <= 183) /* number of records in working storage*/
      AV0Z-615(); /* move data to av0zw04*/
    end
  end

end // end AV0Z-640

// setup temp stor rec for whse 3
Function AV0Z-641()
   /* set up to call temporary storage program:*/

  set TA5REC empty; /* clear temporary storage record*/

  TA5REC.TA5APPID = AV0ZW02.AV0ZW-TSQ03APP; /* application id*/
  TA5REC.TA5TSQIX = 0; /* initialize temp storage page nbr*/
  TA5REC.TA5FNCCD = "R"; /* 'read' function code*/

end // end AV0Z-641

// load ws with map data
Function AV0Z-650()

  AV0ZW01.AV0ZW-DATIX = 1; /* set map period ix*/
  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-SAVWSIX; /* set ws ix*/
  AV0ZW-QIX = AV0ZW01.AV0ZW-STARTQIX; /* set qty ix*/

  if (AV0ZW01.AV0ZW-WSREC == 1)
    while (AV0ZW01.AV0ZW-DATIX <= 7)
      AV0Z-651(); /* load av0zw03 from map*/
    end
  end

  if (AV0ZW01.AV0ZW-WSREC == 2)
    while (AV0ZW01.AV0ZW-DATIX <= 7)
      AV0Z-652(); /* load av0zw04 from map*/
    end
  end

end // end AV0Z-650

// load av0zw03 with map data
Function AV0Z-651()

  set AV0ZW08 empty; /* clear quantities format rec*/
  AV0ZW08.AV0ZW-QTYS = AV0ZW03.AV0ZW-QTYS[AV0ZW-WSIX];

  AV0ZW01.AV0ZW-SIZIX = 1;
  while (AV0ZW01.AV0ZW-SIZIX <= 11
   && AV0ZW01.AV0ZW-QIX <= AV0ZW01.AV0ZW-LASTSIZE)
    AV0Z-655(); /* load ws size quantities from map*/
  end

  AV0ZW03.AV0ZW-QTYS[AV0ZW-WSIX] = AV0ZW08.AV0ZW-QTYS;

  AV0ZW01.AV0ZW-DATIX = AV0ZW01.AV0ZW-DATIX + 1; /* map period ix*/
  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-WSIX + 1; /* ws period ix*/
  AV0ZW-QIX = AV0ZW01.AV0ZW-STARTQIX; /* set quantity index*/
end // end AV0Z-651

// load av0zw04 with map data
Function AV0Z-652()

  set AV0ZW08 empty; /* clear quantities format rec*/
  AV0ZW08.AV0ZW-QTYS = AV0ZW04.AV0ZW-QTYS[AV0ZW-WSIX];

  AV0ZW01.AV0ZW-SIZIX = 1;
  while (AV0ZW01.AV0ZW-SIZIX <= 11
   && AV0ZW01.AV0ZW-QIX <= AV0ZW01.AV0ZW-LASTSIZE)
    AV0Z-655(); /* load ws size quantities from map*/
  end

  AV0ZW04.AV0ZW-QTYS[AV0ZW-WSIX] = AV0ZW08.AV0ZW-QTYS;

  AV0ZW01.AV0ZW-DATIX = AV0ZW01.AV0ZW-DATIX + 1; /* map period ix*/
  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-WSIX + 1; /* ws record ix*/
end // end AV0Z-652

// update ws rec w map size qtys
Function AV0Z-655()

  if (AV0ZW01.AV0ZW-DATIX == 1)
    if (AV0ZM001.AV0ZM-MAP-DATE[1] > " ")
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " "
       && PG3REC.XDVCD[AV0ZW-QIX] == "01")
        if (AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX] != 
        AV0ZW08.AV0ZW-QTY[AV0ZW-QIX])
          AV0ZW01.AV0ZW-UPDATEFL = "Y";
          AV0ZW01.AV0ZW-WRKQTY = AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX];
          AV0Z-656(); /* update period and size quantity*/
                                   /* totals*/
          AV0ZW08.AV0ZW-QTY[AV0ZW-QIX] = AV0ZM001.AV0ZM-MAP-QTY1[AV0ZW-SIZIX];
        end
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 2)
    if (AV0ZM001.AV0ZM-MAP-DATE[2] > " ")
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " "
       && PG3REC.XDVCD[AV0ZW-QIX] == "01")
        if (AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX] != 
        AV0ZW08.AV0ZW-QTY[AV0ZW-QIX])
          AV0ZW01.AV0ZW-UPDATEFL = "Y";
          AV0ZW01.AV0ZW-WRKQTY = AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX];
          AV0Z-656(); /* update period and size quantity*/
                                   /* totals*/
          AV0ZW08.AV0ZW-QTY[AV0ZW-QIX] = AV0ZM001.AV0ZM-MAP-QTY2[AV0ZW-SIZIX];
        end
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 3)
    if (AV0ZM001.AV0ZM-MAP-DATE[3] > " ")
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " "
       && PG3REC.XDVCD[AV0ZW-QIX] == "01")
        if (AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX] != 
        AV0ZW08.AV0ZW-QTY[AV0ZW-QIX])
          AV0ZW01.AV0ZW-UPDATEFL = "Y";
          AV0ZW01.AV0ZW-WRKQTY = AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX];
          AV0Z-656(); /* update period and size quantity*/
                                   /* totals*/
          AV0ZW08.AV0ZW-QTY[AV0ZW-QIX] = AV0ZM001.AV0ZM-MAP-QTY3[AV0ZW-SIZIX];
        end
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 4)
    if (AV0ZM001.AV0ZM-MAP-DATE[4] > " ")
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " "
       && PG3REC.XDVCD[AV0ZW-QIX] == "01")
        if (AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX] != 
        AV0ZW08.AV0ZW-QTY[AV0ZW-QIX])
          AV0ZW01.AV0ZW-UPDATEFL = "Y";
          AV0ZW01.AV0ZW-WRKQTY = AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX];
          AV0Z-656(); /* update period and size quantity*/
                                   /* totals*/
          AV0ZW08.AV0ZW-QTY[AV0ZW-QIX] = AV0ZM001.AV0ZM-MAP-QTY4[AV0ZW-SIZIX];
        end
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 5)
    if (AV0ZM001.AV0ZM-MAP-DATE[5] > " ")
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " "
       && PG3REC.XDVCD[AV0ZW-QIX] == "01")
        if (AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX] != 
        AV0ZW08.AV0ZW-QTY[AV0ZW-QIX])
          AV0ZW01.AV0ZW-UPDATEFL = "Y";
          AV0ZW01.AV0ZW-WRKQTY = AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX];
          AV0Z-656(); /* update period and size quantity*/
                                   /* totals*/
          AV0ZW08.AV0ZW-QTY[AV0ZW-QIX] = AV0ZM001.AV0ZM-MAP-QTY5[AV0ZW-SIZIX];
        end
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 6)
    if (AV0ZM001.AV0ZM-MAP-DATE[6] > " ")
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " "
       && PG3REC.XDVCD[AV0ZW-QIX] == "01")
        if (AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX] != 
        AV0ZW08.AV0ZW-QTY[AV0ZW-QIX])
          AV0ZW01.AV0ZW-UPDATEFL = "Y";
          AV0ZW01.AV0ZW-WRKQTY = AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX];
          AV0Z-656(); /* update period and size quantity*/
                                   /* totals*/
          AV0ZW08.AV0ZW-QTY[AV0ZW-QIX] = AV0ZM001.AV0ZM-MAP-QTY6[AV0ZW-SIZIX];
        end
      end
    end
  end

  if (AV0ZW01.AV0ZW-DATIX == 7)
    if (AV0ZM001.AV0ZM-MAP-DATE[7] > " ")
      if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " "
       && PG3REC.XDVCD[AV0ZW-QIX] == "01")
        if (AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX] != 
        AV0ZW08.AV0ZW-QTY[AV0ZW-QIX])
          AV0ZW01.AV0ZW-UPDATEFL = "Y";
          AV0ZW01.AV0ZW-WRKQTY = AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX];
          AV0Z-656(); /* update period and size quantity*/
                                   /* totals*/
          AV0ZW08.AV0ZW-QTY[AV0ZW-QIX] = AV0ZM001.AV0ZM-MAP-QTY7[AV0ZW-SIZIX];
        end
      end
    end
  end

  if (PG3REC.SY4IDDSC[AV0ZW-QIX] > " "
   && PG3REC.XDVCD[AV0ZW-QIX] == "01")
    AV0ZW01.AV0ZW-SIZIX = AV0ZW01.AV0ZW-SIZIX + 1;
  end

  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-QIX + 1;

end // end AV0Z-655

// update period and size totals
Function AV0Z-656()
   /* **************************************************************/
   /* subtract map size qty from working storage size quantity:*/
   /* **************************************************************/
  AV0ZW01.AV0ZW-WRKQTY = AV0ZW01.AV0ZW-WRKQTY -   AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];

   /* **************************************************************/
   /* update date/period total with difference:*/
   /* **************************************************************/

  if (AV0ZW01.AV0ZW-WSREC == 1) /* identify working storage record*/
    AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX] = AV0ZW03.AV0ZW-DATETOT[AV0ZW-WSIX]     + AV0ZW01.AV0ZW-WRKQTY;
  end

  if (AV0ZW01.AV0ZW-WSREC == 2) /* identify working storage record*/
    AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX] = AV0ZW04.AV0ZW-DATETOT[AV0ZW-WSIX]     + AV0ZW01.AV0ZW-WRKQTY;
  end

   /* ****************************************************************/
   /* update size total with difference:*/
   /* ****************************************************************/

  AV0ZW09.AV0ZW-SIZTOT[AV0ZW-QIX] = AV0ZW09.AV0ZW-SIZTOT[AV0ZW-QIX] +   AV0ZW01.AV0ZW-WRKQTY;

  AV0ZW09.AV0ZW-GRANDTOT = AV0ZW09.AV0ZW-GRANDTOT +   AV0ZW01.AV0ZW-WRKQTY;

end // end AV0Z-656

// update temporary storage
Function AV0Z-660()

   /* setup temporary storage parameter record for current warehouse:*/

  if (AV0ZW01.AV0ZW-USERWHSEFL == "Y")
    if (AV0ZW01.AV0ZW-XWHSAV == AV0ZW02.AV0ZW-XWHCD1)
      if (AV0ZW02.AV0ZW-TSQ01PAGES > 0)
        AV0Z-661();
      else
        return;
      end
    else
      if (AV0ZW01.AV0ZW-XWHSAV == AV0ZW02.AV0ZW-XWHCD2)
        if (AV0ZW02.AV0ZW-TSQ02PAGES > 0)
          AV0Z-662();
        else
          return;
        end
      else
        if (AV0ZW01.AV0ZW-XWHSAV == AV0ZW02.AV0ZW-XWHCD3)
          if (AV0ZW02.AV0ZW-TSQ03PAGES > 0)
            AV0Z-663();
          else
            return;
          end
        end
      end
    end
  end

  if (AV0ZW01.AV0ZW-USERWHSEFL != "Y") /* map whse unchanged*/
    if (AV0ZM001.XWHCD == AV0ZW02.AV0ZW-XWHCD1)
      if (AV0ZW02.AV0ZW-TSQ01PAGES > 0)
        AV0Z-661();
      else
        return;
      end
    else
      if (AV0ZM001.XWHCD == AV0ZW02.AV0ZW-XWHCD2)
        if (AV0ZW02.AV0ZW-TSQ02PAGES > 0)
          AV0Z-662();
        else
          return;
        end
      else
        if (AV0ZM001.XWHCD == AV0ZW02.AV0ZW-XWHCD3)
          if (AV0ZW02.AV0ZW-TSQ03PAGES > 0)
            AV0Z-663();
          else
            return;
          end
        end
      end
    end
  end

   /* load temporary storage work rec and update temp storage:*/
  AV0Z-664();
end // end AV0Z-660

// setup temp stor rec for whse 1
Function AV0Z-661()
   /* set up to call temporary storage program:*/

  set TA5REC empty; /* clear temporary storage record*/

  TA5REC.TA5APPID = AV0ZW02.AV0ZW-TSQ01APP; /* application id*/
  TA5REC.TA5TSQIX = 0; /* initialize temp storage page nbr*/
  TA5REC.TA5FNCCD = "U"; /* 'update function code*/

end // end AV0Z-661

// setup temp stor rec for whse 2
Function AV0Z-662()
   /* set up to call temporary storage program:*/

  set TA5REC empty; /* clear temporary storage record*/

  TA5REC.TA5APPID = AV0ZW02.AV0ZW-TSQ02APP; /* application id*/
  TA5REC.TA5TSQIX = 0; /* initialize temp storage page nbr*/
  TA5REC.TA5FNCCD = "U"; /* 'update function code*/

end // end AV0Z-662

// setup temp stor rec for whse 3
Function AV0Z-663()
   /* set up to call temporary storage program:*/

  set TA5REC empty; /* clear temporary storage record*/

  TA5REC.TA5APPID = AV0ZW02.AV0ZW-TSQ03APP; /* application id*/
  TA5REC.TA5TSQIX = 0; /* initialize temp storage page nbr*/
  TA5REC.TA5FNCCD = "U"; /* 'update function code*/

end // end AV0Z-663

// update temp storage w map data
Function AV0Z-664()
   /* this module will load up to 366 smart reserve supply dates*/
   /* to temporary storage records and update temporary storage.*/

  AV0ZW01.AV0ZW-WSIX = 1; /* set working storage index*/
   /* while temp stor pages less than total nbr of ts pages to update:*/
  while (TA5REC.TA5TSQIX < AV0ZW01.AV0ZW-TSPAGES
   /* nbr of pages displayed*/
   && AV0ZW01.AV0ZW-WSIX <= 183) /* number of records in working storage*/
    AV0Z-665(); /* move data from av0zw03 to av0zw07*/
  end

  if (TA5REC.TA5TSQIX < AV0ZW01.AV0ZW-TSPAGES) /* index less than total pgs*/
    AV0ZW01.AV0ZW-WSIX = 1; /* set working storage index*/

   /* while temp stor pages less than number of ts pgs to update:*/
    while (TA5REC.TA5TSQIX < AV0ZW01.AV0ZW-TSPAGES
     && AV0ZW01.AV0ZW-WSIX <= 183) /* number of records in working storage*/
      AV0Z-668(); /* move data from av0zw04 to av0zw07*/
    end
  end

end // end AV0Z-664

// load av0zw03 from temp stor
Function AV0Z-665()

  AV0ZW01.AV0ZW-TSIX = 1; /* set temp storage index*/

  while (AV0ZW01.AV0ZW-TSIX <= 7) /* number of records in temp storage rec*/
    AV0Z-666(); /* move from av0zw03 to av0zw07*/
  end

  AV0Z-667(); /* update temp storage*/
end // end AV0Z-665

// move from av0zw03 to av0zw07
Function AV0Z-666()
  AV0ZW07.AV0ZW-DT[AV0ZW-TSIX] = AV0ZW03.AV0ZW-DT[AV0ZW-WSIX];
  AV0ZW07.AV0ZW-QTYS[AV0ZW-TSIX] = AV0ZW03.AV0ZW-QTYS[AV0ZW-WSIX];

  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-WSIX + 1; /* increment work stor ix*/
  AV0ZW01.AV0ZW-TSIX = AV0ZW01.AV0ZW-TSIX + 1; /* increment temp stor ix*/
end // end AV0Z-666

// call temp stor pgm for update
Function AV0Z-667()

  AV0ZW08.AV0ZW-QTYS = AV0ZW07.AV0ZW-QTYS[1];

  AV0ZW07.XXXTSLEN = AV0ZW02.XXXTSLEN; /* set temp stor page length*/

  TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1; /* add 1 to page to get*/

  try
    call "TA0050" (AV0ZW07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage program*/

   /* -------------------------------------------------------*/
   /* if successful return to continue main process*/
   /* -------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA5REC.TA5RTNCD == 0)          /* normal ta0050 return code*/
    set AV0ZW07 empty; /* clear temp storage work rec*/
    return; /* return to continue processing*/
  end

   /* -------------------------------------------------------*/
   /* otherwise, indicate that a system error has occurred*/
   /* -------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
  converseLib.validationFailed(76); /* 'system error' msg*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "CALL TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "666"; /* program number*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/

end // end AV0Z-667

// load av0zw07 from av0zw04
Function AV0Z-668()

  AV0ZW01.AV0ZW-TSIX = 1; /* set temp storage index*/

  while (AV0ZW01.AV0ZW-TSIX <= 7) /* number of records in temp storage rec*/
    AV0Z-669(); /* move data from av0zw04 to av0zw07*/
  end

  AV0Z-667(); /* update temp storage*/
end // end AV0Z-668

// move data to av0zw04
Function AV0Z-669()
  AV0ZW07.AV0ZW-DT[AV0ZW-TSIX] = AV0ZW04.AV0ZW-DT[AV0ZW-WSIX];
  AV0ZW07.AV0ZW-QTYS[AV0ZW-TSIX] = AV0ZW04.AV0ZW-QTYS[AV0ZW-WSIX];

  AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-TSIX + 1; /* increment temp stor ix*/
  AV0ZW01.AV0ZW-TSIX = AV0ZW01.AV0ZW-WSIX + 1; /* increment work stor ix*/
end // end AV0Z-669

// get previously displayed whse
Function AV0Z-675()

  if (AV0ZW01.AV0ZW-USERWHSEFL == "Y")
    converseLib.validationFailed(340); /* may not change whse & request*/
                                   /* previous whse*/
    exit stack;
  end

  AV0Z-660(); /* update temporary storage*/

  AV0ZW01.AV0ZW-TSPAGES = 1; /* set update ts pages to 1*/

  if (AV0ZW12.AV0ZW-NBR-WHSES-FOUND == 3)

    if (AV0ZW01.AV0ZW-XWHSAV == AV0ZW12.AV0ZW-XWHCD1) /* saved whse = whse 1*/
      if (AV0ZW01.AV0ZW-XWHSAV != AV0ZW01.XWHCD) /* saved whse not = current*/
        AV0ZW01.AV0ZW-XWHSAV = AV0ZW01.XWHCD; /* save previous whse*/
        AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD1;
                                   /* load whse 1 to current*/
        AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV1;
        AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV1;
        AV0Z-610(); /* Load working storage for whse 1*/
      else
        AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD3;
                                   /* load whse 3 to current*/
        AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV3;
        AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV3;
        AV0Z-640(); /* Load working storage for whse 3*/
      end
    else
      if (AV0ZW01.AV0ZW-XWHSAV == AV0ZW12.AV0ZW-XWHCD2)
                                   /* saved whse = whse 2*/
        if (AV0ZW01.AV0ZW-XWHSAV != AV0ZW01.XWHCD)
                                   /* saved whse not = current*/
          AV0ZW01.AV0ZW-XWHSAV = AV0ZW01.XWHCD; /* save previous whse*/
          AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD2;
                                   /* load whse 2 to current*/
          AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV2;
          AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV2;
          AV0Z-630(); /* load working storage for whse 2*/
        else
          AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD1;
                                   /* load whse 1 to current*/
          AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV1;
          AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV1;
          AV0Z-610(); /* Load working storage for whse 1*/
        end
      else
        if (AV0ZW01.AV0ZW-XWHSAV == AV0ZW12.AV0ZW-XWHCD3)
                                   /* saved whse = whse 3*/
          if (AV0ZW01.AV0ZW-XWHSAV != AV0ZW01.XWHCD)
                                   /* saved whse not = current*/
            AV0ZW01.AV0ZW-XWHSAV = AV0ZW01.XWHCD;
                                   /* save previous whse*/
            AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD3;
                                   /* load process whse 3*/
            AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV3;
            AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV3;
            AV0Z-640(); /* Load working storage for whse 3*/
          else
            AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD2;
                                   /* load whse 2 to current*/
            AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV2;
            AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV2;
            AV0Z-630(); /* Load working storage for whse 2*/
          end
        else
          converseLib.validationFailed(358); /* no more data to display msg*/
          exit stack;
        end
      end
    end
  end

  if (AV0ZW12.AV0ZW-NBR-WHSES-FOUND == 2)

    if (AV0ZW01.AV0ZW-XWHSAV == AV0ZW12.AV0ZW-XWHCD1) /* saved whse = whse 1*/
      if (AV0ZW01.AV0ZW-XWHSAV != AV0ZW01.XWHCD) /* saved whse not = current*/
        AV0ZW01.AV0ZW-XWHSAV = AV0ZW01.XWHCD; /* save previous whse*/
        AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD1;
                                   /* load whse 1 to current*/
        AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV1;
        AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV1;
        AV0Z-610(); /* Load working storage for whse 1*/
      else
        AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD2;
                                   /* load whse 2 to current*/
        AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV2;
        AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV2;
        AV0Z-630(); /* Load working storage for whse 2*/
      end
    else
      if (AV0ZW01.AV0ZW-XWHSAV == AV0ZW12.AV0ZW-XWHCD2)
                                   /* saved whse = whse 2*/
        if (AV0ZW01.AV0ZW-XWHSAV != AV0ZW01.XWHCD)
                                   /* saved whse not = current*/
          AV0ZW01.AV0ZW-XWHSAV = AV0ZW01.XWHCD; /* save previous whse*/
          AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD2;
                                   /* load whse 2 to current*/
          AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV2;
          AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV2;
          AV0Z-630(); /* load working storage for whse 2*/
        else
          AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD1;
                                   /* load whse 1 to current*/
          AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV1;
          AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV1;
          AV0Z-610(); /* Load working storage for whse 1*/
        end
      else
        converseLib.validationFailed(358); /* no more data to display msg*/
        exit stack;
      end
    end
  end

  if (AV0ZW12.AV0ZW-NBR-WHSES-FOUND < 2) /* either only 1 whse found*/
                                       /* or specific whse requested*/
    if (AV0ZW01.AV0ZW-XWHSAV == AV0ZW12.AV0ZW-XWHCD1) /* saved whse = whse 1*/
      if (AV0ZW01.AV0ZW-XWHSAV != AV0ZW01.XWHCD) /* saved whse not = current*/
        AV0ZW01.AV0ZW-XWHSAV = AV0ZW01.XWHCD; /* save previous whse*/
        AV0ZW01.XWHCD = AV0ZW12.AV0ZW-XWHCD1; /* load process whse 1*/
        AV0ZW01.XWHABRV = AV0ZW12.AV0ZW-XWHABRV1;
        AV0ZW01.AV0ZW-XWHABRVSAV = AV0ZW12.AV0ZW-XWHABRV1;
        AV0Z-610(); /* Load working storage for whse 1*/
      else
        converseLib.validationFailed(358); /* no more data to display msg*/
        exit stack;
      end
    else
      converseLib.validationFailed(358); /* no more data to display msg*/
      exit stack;
    end
  end

end // end AV0Z-675

// Purge av0z temporary storage
Function AV0Z-690()
   /* purge av0z temporary storages*/

   /* Initialize the storage areas and indicators to be used.*/

  if (TA5REC.TA5FNCCD == "P" /* if last ta0050 call was to purge*/
   && TA5REC.TA5APPID == "AVZ1") /* and purge was av0z 1st whse data*/
  else
    TA5REC.TA5APPID = "AVZ1";
    AV0Z-691(); /* perform delete avz1 temp storage*/
  end

  if (TA5REC.TA5FNCCD == "P" /* if last ta0050 call was to purge*/
   && TA5REC.TA5APPID == "AVZ2") /* and purge was av0z 2nd whse data*/
  else
    TA5REC.TA5APPID = "AVZ2";
    AV0Z-691(); /* perform delete avz2 temp storage*/
  end

  if (TA5REC.TA5FNCCD == "P" /* if last ta0050 call was to purge*/
   && TA5REC.TA5APPID == "AVZ3") /* and purge was av0z 3rd whse data*/
  else
    TA5REC.TA5APPID = "AVZ3";
    AV0Z-691(); /* perform delete avz3 temp storage*/
  end

end // end AV0Z-690

// Purge av0z temporary storage
Function AV0Z-691()
   /* purge temporary storage*/
   /* Initialize the storage areas and indicators to be used.*/

  set AV0ZW07 empty; /* clear display storage rec*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (AV0ZW07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(76); /* 'system error'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = TA5REC.TA5APPID; /* Program application*/
  TA1REC.TA1PGMNO = "691"; /* PROGRAM NUMBER*/
  TA1REC.TA1MAPAP = TA5REC.TA5APPID; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/

end // end AV0Z-691

// get pf7 scroll index
Function AV0Z-692()

  AV0ZW01.AV0ZW-QTYCOUNT = 0;
  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-STARTQIX - 1;

  while (AV0ZW01.AV0ZW-QIX > AV0ZW01.AV0ZW-FIRSTSIZE
   && AV0ZW01.AV0ZW-QTYCOUNT <= 11)
    AV0Z-693(); /* scan size range array backwards*/
  end

end // end AV0Z-692

// count nbr of valid sizes
Function AV0Z-693()

  if (PG3REC.SY5SZID[AV0ZW-QIX] > 0
   && PG3REC.XDVCD[AV0ZW-QIX] == "01")
    AV0ZW01.AV0ZW-QTYCOUNT = AV0ZW01.AV0ZW-QTYCOUNT + 1;
  end

  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-QIX - 1;

end // end AV0Z-693

// get pf8 scroll index
Function AV0Z-694()

  AV0ZW01.AV0ZW-QTYCOUNT = 0;
  AV0ZW-QIX = AV0ZW01.AV0ZW-ENDQIX;

  while (AV0ZW01.AV0ZW-QIX <= AV0ZW01.AV0ZW-LASTSIZE
   && AV0ZW01.AV0ZW-QTYCOUNT <= 11)
    AV0Z-695(); /* scan size range array forwards*/
  end

end // end AV0Z-694

// count nbr of valid sizes
Function AV0Z-695()

  if (PG3REC.SY5SZID[AV0ZW-QIX] > 0
   && PG3REC.XDVCD[AV0ZW-QIX] == "01")
    AV0ZW01.AV0ZW-QTYCOUNT = AV0ZW01.AV0ZW-QTYCOUNT + 1;
  end

  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-QIX + 1;

end // end AV0Z-695

// calc pf11 scroll
Function AV0Z-696()

  if (AV0ZW01.AV0ZW-SAVWSIX > 183)
    if (AV0ZW01.AV0ZW-WSREC == 2) /* max number of ws recs*/
    /* reset nbr of temp storage pages to update*/
      AV0ZW01.AV0ZW-SAVWSIX = AV0ZW01.AV0ZW-SAVWSIX - 7; /* reset ws ix*/
      converseLib.validationFailed(301); /* no more columns to the right*/
    else
      if (AV0ZW04.AV0ZW-DT[1] > 0)
        AV0ZW01.AV0ZW-SAVWSIX = 1; /* set ws rec index*/
        AV0ZW01.AV0ZW-WSREC = 2; /* * set ws rec nbr*/
      else
        AV0ZW01.AV0ZW-SAVWSIX = AV0ZW01.AV0ZW-SAVWSIX - 7; /* reset ws ix*/
        converseLib.validationFailed(301); /* no more columns to the right*/
      end
    end
    return;
  end

  if (AV0ZW01.AV0ZW-SAVWSIX <= 183)
    if (AV0ZW01.AV0ZW-WSREC == 1)
      if (AV0ZW03.AV0ZW-DT[AV0ZW-SAVWSIX] == 0)
        AV0ZW01.AV0ZW-SAVWSIX = AV0ZW01.AV0ZW-SAVWSIX - 7; /* reset ws ix*/
        converseLib.validationFailed(301); /* no more columns to the right*/
      end
    else
      if (AV0ZW01.AV0ZW-WSREC == 2)
        if (AV0ZW04.AV0ZW-DT[AV0ZW-SAVWSIX] == 0)
          AV0ZW01.AV0ZW-SAVWSIX = AV0ZW01.AV0ZW-SAVWSIX - 7; /* reset ws ix*/
          converseLib.validationFailed(301); /* no more columns to the right*/
        end
      end
    end
  end

end // end AV0Z-696

// calc nbr of pages to update
Function AV0Z-697()

  if (AV0ZM001.XWHCD == AV0ZW12.AV0ZW-XWHCD1)
    if (AV0ZW01.AV0ZW-TSPAGES < AV0ZW02.AV0ZW-TSQ01PAGES)
      AV0ZW01.AV0ZW-TSPAGES = AV0ZW01.AV0ZW-TSPAGES + 1;
    end
  else
    if (AV0ZM001.XWHCD == AV0ZW12.AV0ZW-XWHCD2)
      if (AV0ZW01.AV0ZW-TSPAGES < AV0ZW02.AV0ZW-TSQ02PAGES)
        AV0ZW01.AV0ZW-TSPAGES = AV0ZW01.AV0ZW-TSPAGES + 1;
      end
    else
      if (AV0ZM001.XWHCD == AV0ZW12.AV0ZW-XWHCD3)
        if (AV0ZW01.AV0ZW-TSPAGES < AV0ZW02.AV0ZW-TSQ03PAGES)
          AV0ZW01.AV0ZW-TSPAGES = AV0ZW01.AV0ZW-TSPAGES + 1;
        end
      end
    end
  end

end // end AV0Z-697

// move info & submit print job
Function AV0Z-700()
   /* intialize working storage and variables:*/
  AV0Z-702();

   /* call subroutine to obtain or display output destination:*/
  AV0Z-703();

  AV0Z-704(); /* format data to load to jcl*/

   /* format and submit the jcl:*/
  AV0Z-709();

end // end AV0Z-700

// initialize working storage
Function AV0Z-702()
   /* intialize working storage and variables:*/

  set TAEREC empty;
  set TA1REC empty;
  set TA6REC empty;

  set TA0PM001 initial;

   /* indicate output destination must be obtained:*/
  TA6REC.TA6SUBSW = "N";

end // end AV0Z-702

// obtain the output destination
Function AV0Z-703()

   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA6REC.TA6RTNCD == "0") /* Normal return*/
      TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      return; /* Return to previous process*/
    end
  end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

  if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/
    converseLib.validationFailed(338); /* Indicate function cancelled*/
    exit stack; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = "703"; /* Module identification*/
  converseLib.validationFailed(76); /* Unexpected error occurred*/
  exit stack;


end // end AV0Z-703

// load data for print
Function AV0Z-704()
   /* this module will load style information and up to 384 date-quantity*/
   /* data lines to a working storage record.  This record will then be*/
   /* loaded to the ta6rec.tarjcl and submitted for print.*/

  set AV0ZW11 empty; /* initialize jcl parameter record:*/

  AV0ZW01.AV0ZW-11IX = 1; /* output record index*/
   /* move style info from map:*/
  AV0ZW11.CAUSERID = COMMAREA.CAUSERID;
  AV0ZW11.XGPCD = AV0ZM001.XGPCD;
  AV0ZW11.XWHCD = AV0ZM001.XWHCD;
  AV0ZW11.XWHABRV = AV0ZM001.XWHABRV;
  AV0ZW11.SY1STNBR = AV0ZM001.SY1STNBR;
  AV0ZW11.SY1SSTNM = AV0ZM001.SY1SSTNM;
  AV0ZW11.SY2CLRID = AV0ZM001.SY2CLRID;
  AV0ZW11.SY2CLRAB = AV0ZM001.SY2CLRAB;
  AV0ZW11.XDMCD = AV0ZM001.XDMCD;
  AV0ZW11.XDMABRV = AV0ZM001.XDMABRV;
  AV0ZW11.AV0ZW-TITLEMSG = AV0ZM001.AV0ZM-MAP-TITLEMSG;

  AV0ZW01.AV0ZW-WSIX = 1; /* working storage record index*/
  AV0ZW01.AV0ZW-PERFORMFL = "Y"; /* set perform flag*/

   /* while output rec index less than total nbr of lines in record:*/
   /* and ws rec index less than total nbr of lines in record:*/
  while (AV0ZW01.AV0ZW-PERFORMFL == "Y"
   && AV0ZW01.AV0ZW-WSIX <= 183)
    AV0Z-705(); /* move data from av0zw03 to av0zw11*/
  end

   /* check for more data to move if output record is full*/
  if (AV0ZW01.AV0ZW-11IX == 383
   && AV0ZW03.AV0ZW-DT[AV0ZW-WSIX] > 0)
    AV0ZW11.AV0ZW-DATAPARM = "Y";
    return;
  end

  if (AV0ZW04.AV0ZW-DT[1] == 0) /* no more data to move*/
    AV0ZW11.AV0ZW-DATAPARM = "N"; /* set parm to indicate no more data*/
    AV0ZW11.AV0ZW-DATAOCCURS = AV0ZW01.AV0ZW-11IX;
    return;
  end

   /* if index less than total nbr of lines possible:*/
  if (AV0ZW01.AV0ZW-11IX < 383)
   /* set working storage data rec ix*/
    AV0ZW01.AV0ZW-WSIX = 1;
   /* while output rec index less than total nbr of possible lines*/
    /* and ws rec index less than total nbr of possible lines:*/
    while (AV0ZW01.AV0ZW-PERFORMFL == "Y"
     && AV0ZW01.AV0ZW-WSIX <= 183)
      AV0Z-708(); /* move data to av0zw04 to av0zw11*/
    end
    if (AV0ZW04.AV0ZW-DT[AV0ZW-WSIX] > " ") /* if more data in record*/
    /* set parm for batch print program*/
      AV0ZW11.AV0ZW-DATAPARM = "Y";
    else
      AV0ZW11.AV0ZW-DATAPARM = "N";
    end
  end

  AV0ZW11.AV0ZW-DATAOCCURS = AV0ZW01.AV0ZW-11IX;

end // end AV0Z-704

// move from av0zw03 to av0zw11
Function AV0Z-705()

  if (AV0ZW03.AV0ZW-DT[AV0ZW-WSIX] > 0)
    /* breakout quantity group to common quantity group:*/
    AV0ZW08.AV0ZW-QTYS = AV0ZW03.AV0ZW-QTYS[AV0ZW-WSIX];
  else
    AV0ZW01.AV0ZW-PERFORMFL = "Y";
  end

   /* if output record index is close to maximum, count the quantities*/
   /* to determine if a full size run can be moved to output:*/

  if (AV0ZW01.AV0ZW-11IX > 378) /* idx to allow ouput of 40 qtys*/
    AV0Z-717(); /* count the potential output rows*/
    /* if not enough room to move all quantities, none are moved:*/
    if (AV0ZW01.AV0ZW-PERFORMFL == "N") /* end perform loop*/
      return;
    end
  end

  if (AV0ZW03.AV0ZW-DT[AV0ZW-WSIX] == 99999999)
    AV0ZW01.AV0ZW-RPTDT = 0; /* represent at once date w zeros*/
  else /* move date field to common date field:*/
    AV0ZW01.AV0ZW-FORMATDT = AV0ZW03.AV0ZW-DT[AV0ZW-WSIX];
    AV0ZW01.AV0ZW-RPTDT = AV0ZW01.AV0ZW-FORMATMMDD;
  end

  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-FIRSTSIZE;

   /* while qty index is less than nbr of valid sizes*/
   /* and maximum nbr of output records not reached:*/

  while (AV0ZW01.AV0ZW-QIX <= AV0ZW01.AV0ZW-LASTSIZE
   && AV0ZW01.AV0ZW-PERFORMFL == "Y")
    AV0Z-706(); /* load quantities and indexes*/
  end

  if (AV0ZW01.AV0ZW-WSIX < 183) /* nbr of working storage recs*/
    /* increment working storage data records index:*/
    AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-WSIX + 1;

    if (AV0ZW03.AV0ZW-DT[AV0ZW-WSIX] == 0 /* if end of ws data*/
     || AV0ZW01.AV0ZW-11IX == 383)       
      AV0ZW01.AV0ZW-PERFORMFL = "N"; /* end perform loop*/
      return;
    end
  end

end // end AV0Z-705

// move ws rec to output
Function AV0Z-706()

  AV0ZW01.AV0ZW-10IX = 0; /* initialize format record index*/

  while (AV0ZW01.AV0ZW-QIX <= AV0ZW01.AV0ZW-LASTSIZE
   && AV0ZW01.AV0ZW-11IX <= 382) /* nbr of recs in output*/
    set AV0ZW10 empty; /* set format data record empty*/
    AV0ZW01.AV0ZW-10IX = 1; /* set format record index*/

    while (AV0ZW01.AV0ZW-QIX <= AV0ZW01.AV0ZW-LASTSIZE
     && AV0ZW01.AV0ZW-10IX <= 13) /* nbr of qtys in output rec*/
      AV0Z-707(); /* load quantities to ouput*/
    end

    /* move date to every record:*/
    AV0ZW10.AV0ZW-DATE = AV0ZW01.AV0ZW-RPTDT;
    /* increment ouput record index:*/
    AV0ZW01.AV0ZW-11IX = AV0ZW01.AV0ZW-11IX + 1;
    /* move formatted record to output record:*/
    AV0ZW11.AV0ZW-DATEGRP[AV0ZW-11IX] = AV0ZW10.AV0ZW-DATEGRP;
  end

end // end AV0Z-706

// format quantities in av0zw10
Function AV0Z-707()

   /* load only qtys that are not equal to zero:*/
  if (AV0ZW08.AV0ZW-QTY[AV0ZW-QIX] != 0)
    /* move the index:*/
    AV0ZW10.AV0ZW-QTYINDEX[AV0ZW-10IX] = AV0ZW01.AV0ZW-QIX;
    /* move the quantity*/
    AV0ZW10.AV0ZW-QTY[AV0ZW-10IX] = AV0ZW08.AV0ZW-QTY[AV0ZW-QIX];
    /* increment jcl paramter record index:*/
    AV0ZW01.AV0ZW-10IX = AV0ZW01.AV0ZW-10IX + 1;
  end

   /* increment working storage data record:*/
  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-QIX + 1;

end // end AV0Z-707

// move from av0zw04 to av0zw11
Function AV0Z-708()

  if (AV0ZW04.AV0ZW-DT[AV0ZW-WSIX] > 0)
    /* breakout quantity group to common quantity group:*/
    AV0ZW08.AV0ZW-QTYS = AV0ZW04.AV0ZW-QTYS[AV0ZW-WSIX];
  end

   /* if output record index is close to maximum, count the quantities*/
   /* to determine if a full size run can be moved to output:*/

  if (AV0ZW01.AV0ZW-11IX > 378) /* idx to allow ouput of 40 qtys*/
    AV0Z-717(); /* count the potential output rows*/
    /* if not enough room to move all quantities, none are moved:*/
    if (AV0ZW01.AV0ZW-PERFORMFL == "N") /* end perform loop*/
      return;
    end
  end

  if (AV0ZW04.AV0ZW-DT[AV0ZW-WSIX] == "AT ONCE")
    AV0ZW01.AV0ZW-RPTDT = 0; /* set date field to indicate 'at once'*/
  else /* move date field to common date field:*/
    AV0ZW10.AV0ZW-DATE = AV0ZW04.AV0ZW-DT[AV0ZW-WSIX];
  end

  AV0ZW01.AV0ZW-QIX = 1; /* set quantity array index*/

  while (AV0ZW01.AV0ZW-QIX <= 40 /* nbr of quantities*/
   && AV0ZW01.AV0ZW-11IX <= 382) /* nbr of possible ouput recs*/
    AV0Z-706(); /* load quantities and indexes*/
  end

  if (AV0ZW01.AV0ZW-WSIX < 183) /* nbr of working storage recs*/
    /* increment working storage data records index:*/
    AV0ZW01.AV0ZW-WSIX = AV0ZW01.AV0ZW-WSIX + 1;

    if (AV0ZW04.AV0ZW-DT[AV0ZW-WSIX] == " " /* if end of ws data*/
     || AV0ZW01.AV0ZW-11IX == 382)         
      AV0ZW01.AV0ZW-PERFORMFL = "N"; /* end perform loop*/
      return;
    end
  end

end // end AV0Z-708

// format and submit print jcl
Function AV0Z-709()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

   /* call subroutine to determine execution environment:*/
  AV0Z-710();

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  AV0ZW01.AV0ZW-TBLIX = 1; /* variable input index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* determine if lazer or remote printer selected:*/
  AV0ZW01.AV0ZW-PRNTDEST = TA6REC.XRODESC;

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    if (AV0ZW01.AV0ZW-PRNTDEST == "XEROX") /* if lazer print requested*/
      AV0Z-711(); /* format production jcl lazer print*/
    else
      AV0Z-713(); /* format production jcl remote print*/
    end
  else /* if in test environment*/
    if (AV0ZW01.AV0ZW-PRNTDEST == "XEROX") /* if lazer print requested*/
      AV0Z-714(); /* format test jcl lazer print*/
    else
      AV0Z-715(); /* format test jcl remote print*/
    end
  end

   /* Submit the JCL and parameters for batch execution.*/
  AV0Z-716(); /* Submit the JCL*/

   /* Display results of print request.*/
  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     
    AV0ZM001.XXXMODID = "AV0Z709"; /* Process name*/
    AV0ZM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
  end

end // end AV0Z-709

// determine print environment
Function AV0Z-710()
   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    return;
  else
    AV0ZM001.XXXMODID = "AV0Z710"; /* module identification*/
    converseLib.validationFailed(341); /* Error encountered with print request*/
    exit stack;
  end

end // end AV0Z-710

// format production jcl lazer
Function AV0Z-711()
   /* Format JCL and parameters into the subroutine work area.*/

  while (AV0ZW01.AV0ZW-TBLIX > 0) /* Until end of table*/
    if (AV0ZT01.TARTYPE[AV0ZW-TBLIX] == "P") /* Parameters statement*/
       /* move style information line to jcl:*/
      TA6REC.TARJCL[TA6INDEX] = AV0ZW11.AV0ZW-STYLEINFO;
      AV0ZW01.AV0ZW-11IX = 2; /* set date/quantity line index*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;

      while (AV0ZW01.AV0ZW-11IX <= AV0ZW11.AV0ZW-DATAOCCURS)
        AV0Z-712(); /* move data from av0zw11 to tarjcl:*/
      end
    else
       /* Format the Job Control Language statement from the table.*/
      TA6REC.TARJCL[TA6INDEX] = AV0ZT01.TARJCL[AV0ZW-TBLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AV0ZT01.TARTYPE[AV0ZW-TBLIX]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
     /* If not end of table, increment the table index.*/
    if (AV0ZT01.TARJCL[AV0ZW-TBLIX] == "/*EOF") /* End of table*/
      AV0ZW01.AV0ZW-TBLIX = 0; /* Indicate end of table*/
    else
      AV0ZW01.AV0ZW-TBLIX = AV0ZW01.AV0ZW-TBLIX + 1; /* Increment table ix*/
    end
  end

end // end AV0Z-711

// format jcl parameters
Function AV0Z-712()

  if (AV0ZW01.AV0ZW-11IX <= AV0ZW11.AV0ZW-DATAOCCURS)
    TA6REC.TARJCL[TA6INDEX] = AV0ZW11.AV0ZW-DATEGRP[AV0ZW-11IX];
    TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

    AV0ZW01.AV0ZW-11IX = AV0ZW01.AV0ZW-11IX + 1; /* increment parm rec ix*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment jcl index*/
  end

end // end AV0Z-712

// format production jcl remote
Function AV0Z-713()
   /* Format JCL and parameters into the subroutine work area.*/

  while (AV0ZW01.AV0ZW-TBLIX > 0) /* Until end of table*/
    if (AV0ZT02.TARTYPE[AV0ZW-TBLIX] == "P") /* Parameters statement*/
      AV0ZW01.AV0ZW-11IX = 1; /* set date/quantity line index*/
       /* move style information line to jcl:*/
      TA6REC.TARJCL[TA6INDEX] = AV0ZW11.AV0ZW-STYLEINFO;
      AV0ZW01.AV0ZW-11IX = AV0ZW01.AV0ZW-11IX + 1;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;

      while (AV0ZW01.AV0ZW-11IX <= AV0ZW11.AV0ZW-DATAOCCURS)
        AV0Z-712(); /* move data from av0zw11 to tarjcl:*/
      end
    else
       /* Format the Job Control Language statement from the table.*/
      TA6REC.TARJCL[TA6INDEX] = AV0ZT02.TARJCL[AV0ZW-TBLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AV0ZT02.TARTYPE[AV0ZW-TBLIX]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
     /* If not end of table, increment the table index.*/
    if (AV0ZT02.TARJCL[AV0ZW-TBLIX] == "/*EOF") /* End of table*/
      AV0ZW01.AV0ZW-TBLIX = 0; /* Indicate end of table*/
    else
      AV0ZW01.AV0ZW-TBLIX = AV0ZW01.AV0ZW-TBLIX + 1; /* Increment table ix*/
    end
  end

end // end AV0Z-713

// format test jcl lazer
Function AV0Z-714()
   /* Format JCL and parameters into the subroutine work area.*/

  while (AV0ZW01.AV0ZW-TBLIX > 0) /* Until end of table*/
    if (AV0ZT03.TARTYPE[AV0ZW-TBLIX] == "P") /* Parameters statement*/
      AV0ZW01.AV0ZW-11IX = 1; /* set date/quantity line index*/
       /* move style information line to jcl:*/
      TA6REC.TARJCL[TA6INDEX] = AV0ZW11.AV0ZW-STYLEINFO;
      AV0ZW01.AV0ZW-11IX = AV0ZW01.AV0ZW-11IX + 1;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;

      while (AV0ZW01.AV0ZW-11IX <= AV0ZW11.AV0ZW-DATAOCCURS)
        AV0Z-712(); /* move data from av0zw11 to tarjcl:*/
      end
    else
       /* Format the Job Control Language statement from the table.*/
      TA6REC.TARJCL[TA6INDEX] = AV0ZT03.TARJCL[AV0ZW-TBLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AV0ZT03.TARTYPE[AV0ZW-TBLIX]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
     /* If not end of table, increment the table index.*/
    if (AV0ZT03.TARJCL[AV0ZW-TBLIX] == "/*EOF") /* End of table*/
      AV0ZW01.AV0ZW-TBLIX = 0; /* Indicate end of table*/
    else
      AV0ZW01.AV0ZW-TBLIX = AV0ZW01.AV0ZW-TBLIX + 1; /* Increment table ix*/
    end
  end

end // end AV0Z-714

// format test jcl remote
Function AV0Z-715()
   /* Format JCL and parameters into the subroutine work area.*/

  while (AV0ZW01.AV0ZW-TBLIX > 0) /* Until end of table*/
    if (AV0ZT04.TARTYPE[AV0ZW-TBLIX] == "P") /* Parameters statement*/
      AV0ZW01.AV0ZW-11IX = 1; /* set date/quantity line index*/
       /* move style information line to jcl:*/
      TA6REC.TARJCL[TA6INDEX] = AV0ZW11.AV0ZW-STYLEINFO;
      AV0ZW01.AV0ZW-11IX = AV0ZW01.AV0ZW-11IX + 1;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;

      while (AV0ZW01.AV0ZW-11IX <= AV0ZW11.AV0ZW-DATAOCCURS)
        AV0Z-712(); /* move data from av0zw11 to tarjcl:*/
      end
    else
       /* Format the Job Control Language statement from the table.*/
      TA6REC.TARJCL[TA6INDEX] = AV0ZT04.TARJCL[AV0ZW-TBLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AV0ZT04.TARTYPE[AV0ZW-TBLIX]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
     /* If not end of table, increment the table index.*/
    if (AV0ZT04.TARJCL[AV0ZW-TBLIX] == "/*EOF") /* End of table*/
      AV0ZW01.AV0ZW-TBLIX = 0; /* Indicate end of table*/
    else
      AV0ZW01.AV0ZW-TBLIX = AV0ZW01.AV0ZW-TBLIX + 1; /* Increment table ix*/
    end
  end

end // end AV0Z-715

// PROCESS THE TEST JCL
Function AV0Z-716()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/

  XPTA0P(); /* Print Request Subroutine*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(339); /* print rquest submitted*/
    AV0ZM001.XXXMODID = "716"; /* Process name*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    converseLib.validationFailed(338); /* Indicate user cancelled*/
    AV0ZM001.XXXMODID = "716"; /* Process name*/
  else
    converseLib.validationFailed(76); /* Indicate system error*/
    AV0ZM001.XXXMODID = "716"; /* Process name*/
  end

  exit stack; /* Exit to display map*/


end // end AV0Z-716

// count potential ouput rows
Function AV0Z-717()

   /* This module counts the number of quantities to be moved to*/
   /* output. This is to determine whether the whole size*/
   /* run may be moved to output.*/

  AV0ZW01.AV0ZW-QTYCOUNT = 0;
  AV0ZW01.AV0ZW-QIX = 1;
  while (AV0ZW01.AV0ZW-QIX <= 40)
    AV0Z-718(); /* count quantities.*/
  end

   /* add the number of quntity output lines to output record index:*/
  AV0ZW01.AV0ZW-11IX = AV0ZW01.AV0ZW-11IX + AV0ZW01.AV0ZW-QTYCOUNT;

  if (AV0ZW01.AV0ZW-11IX > 382)
    AV0ZW01.AV0ZW-PERFORMFL = "N"; /* set perform flag to no*/
  end

   /* reset output record index:*/
  AV0ZW01.AV0ZW-11IX = AV0ZW01.AV0ZW-11IX - AV0ZW01.AV0ZW-QTYCOUNT;

end // end AV0Z-717

// count quantities to move
Function AV0Z-718()

   /* load only qtys that are not equal to zero:*/
  if (AV0ZW08.AV0ZW-QTY[AV0ZW-QIX] != 0)
    /* count the quantity*/
    AV0ZW01.AV0ZW-QTYCOUNT = AV0ZW01.AV0ZW-QTYCOUNT + 1;
  end
   /* increment working storage data record:*/
  AV0ZW01.AV0ZW-QIX = AV0ZW01.AV0ZW-QIX + 1;

end // end AV0Z-718

// get next process date + 11 mos
Function AV0ZS-11MONTHS()
   /* get next processing day + 11 months*/
   /* used for editing calc end date (bottom line date*/
   /* stored in av0zw01.av0zw-11months*/

  AV0ZW01.AV0ZW-11MONTHS = XX0XW01.XX0XWDAT;

  AV0ZW01.AV0ZW-11MOSMM = AV0ZW01.AV0ZW-11MOSMM - 1;

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF AV0ZW01.AV0ZW-11MOSMM LT 1;*/
   /* AV0ZW01.AV0ZW-11MOSYY = AV0ZW01.AV0ZW-11MOSYY - 1;*/
   /* AV0ZW01.AV0ZW-11MOSMM = AV0ZW01.AV0ZW-11MOSMM + 12;*/
   /* END;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AV0ZW01.AV0ZW-11MOSMM < 1)
    AV0ZW01.AV0ZW-11MOSCCYY = AV0ZW01.AV0ZW-11MOSCCYY - 1;
    AV0ZW01.AV0ZW-11MOSMM = AV0ZW01.AV0ZW-11MOSMM + 12;
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

   /* add 1 year to next processing day*/
  AV0ZW01.AV0ZW-11MONTHS = AV0ZW01.AV0ZW-11MONTHS + 10000;

   /* move zero to day in order to push edit date to previous*/
   /* month*/
  AV0ZW01.AV0ZW-11MOSDD = 00;

end // end AV0ZS-11MONTHS

//*** RECORD=AV0ZW01 ****
// -------------------------------
// av0zw01 holds av0z work fields
// -------------------------------
// ***********************
Record AV0ZW01 type basicRecord
  10 AV0ZW-FIRSTIME AV0ZW-FIRSTIME ; 
  10 AV0ZW-GETDATA AV0ZW-GETDATA ; 
  10 AV0ZW-FORMATMAP AV0ZW-FORMATMAP ; 
  10 AV0ZW-VERIFIED AV0ZW-VERIFIED ; 
  10 AV0ZW-USERWHSEFL AV0ZW-USERWHSEFL ; 
  10 AV0ZW-UPDATEFL AV0ZW-UPDATEFL ; 
  10 AV0ZW-WILDCARD AV0ZW-WILDCARD ; 
  10 AV0ZW-WSREC AV0ZW-WSREC ; 
  10 AV0ZW-11MONTHS AV0ZW-11MONTHS ; 
    15 AV0ZW-11MOSCCYY AV0ZW-11MOSCCYY ; 
      20 AV0ZW-11MOSCC AV0ZW-11MOSCC ; 
      20 AV0ZW-11MOSYY AV0ZW-11MOSYY ; 
    15 AV0ZW-11MOSMM AV0ZW-11MOSMM ; 
    15 AV0ZW-11MOSDD AV0ZW-11MOSDD ; 
  10 AV0ZW-WSIX AV0ZW-WSIX ; 
  10 AV0ZW-SAVWSIX AV0ZW-SAVWSIX ; 
  10 AV0ZW-TSIX AV0ZW-TSIX ; 
  10 AV0ZW-DATIX AV0ZW-DATIX ; 
  10 AV0ZW-SIZIX AV0ZW-SIZIX ; 
  10 AV0ZW-QIX AV0ZW-QIX ; 
  10 AV0ZW-STARTQIX AV0ZW-STARTQIX ; 
  10 AV0ZW-ENDQIX AV0ZW-ENDQIX ; 
  10 AV0ZW-SAVQIX AV0ZW-SAVQIX ; 
  10 AV0ZW-TOTALIX AV0ZW-TOTALIX ; 
  10 AV0ZW-10IX AV0ZW-10IX ; 
  10 AV0ZW-11IX AV0ZW-11IX ; 
  10 AV0ZW-TBLIX AV0ZW-TBLIX ; 
  10 AV0ZW-QTYCOUNT AV0ZW-QTYCOUNT ; 
  10 AV0ZW-FORMATDT AV0ZW-FORMATDT ; 
    15 AV0ZW-FORMATCCYY AV0ZW-FORMATCCYY ; 
    15 AV0ZW-FORMATMMDD AV0ZW-FORMATMMDD ; 
      20 AV0ZW-FORMATMM AV0ZW-FORMATMM ; 
      20 AV0ZW-FORMATDD AV0ZW-FORMATDD ; 
  10 AV0ZW-MAPDT AV0ZW-MAPDT ; 
    15 AV0ZW-MAPMM AV0ZW-MAPMM ; 
    15 AV0ZW-MAPSLASH AV0ZW-MAPSLASH ; 
    15 AV0ZW-MAPDD AV0ZW-MAPDD ; 
  10 AV0ZW-RPTDT AV0ZW-RPTDT ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 AV0ZW-PCTSAV AV0ZW-PCTSAV ; 
  10 AV0ZW-SHPMMSAV AV0ZW-SHPMMSAV ; 
  10 AV0ZW-SHPDDSAV AV0ZW-SHPDDSAV ; 
  10 AV0ZW-SHPYYSAV AV0ZW-SHPYYSAV ; 
  10 AV0ZW-BLMMSAV AV0ZW-BLMMSAV ; 
  10 AV0ZW-BLDDSAV AV0ZW-BLDDSAV ; 
  10 AV0ZW-BLYYSAV AV0ZW-BLYYSAV ; 
  10 AV0ZW-XWHSAV AV0ZW-XWHSAV ; 
  10 AV0ZW-XWHABRVSAV AV0ZW-XWHABRVSAV ; 
  10 AV0ZW-XGPSAV AV0ZW-XGPSAV ; 
  10 AV0ZW-XDMSAV AV0ZW-XDMSAV ; 
  10 AV0ZW-XDMABRVSAV AV0ZW-XDMABRVSAV ; 
  10 AV0ZW-XUMSAV AV0ZW-XUMSAV ; 
  10 AV0ZW-XUMDESCSAV AV0ZW-XUMDESCSAV ; 
  10 AV0ZW-SY2CLRSAV AV0ZW-SY2CLRSAV ; 
  10 AV0ZW-SY2CLRABSAV AV0ZW-SY2CLRABSAV ; 
  10 AV0ZW-SY1STYSAV AV0ZW-SY1STYSAV ; 
  10 AV0ZW-SY1SSTNMSAV AV0ZW-SY1SSTNMSAV ; 
  10 AV0ZW-TSPAGES AV0ZW-TSPAGES ; 
  10 AV0ZW-FIRSTSZFL AV0ZW-FIRSTSZFL ; 
  10 AV0ZW-FIRSTSIZE AV0ZW-FIRSTSIZE ; 
  10 AV0ZW-LASTSIZE AV0ZW-LASTSIZE ; 
  10 AV0ZW-WRKQTY AV0ZW-WRKQTY ; 
  10 AV0ZW-DATEREDEF AV0ZW-DATEREDEF ; 
  10 AV0ZW-PERFORMFL AV0ZW-PERFORMFL ; 
  10 AV0ZW-PRNTDEST AV0ZW-PRNTDEST ; 
  10 AV0ZW-BLDATE AV0ZW-BLDATE ; 
    15 AV0ZW-BLCC AV0ZW-BLCC ; 
    15 AV0ZW-BLYY AV0ZW-BLYY ; 
    15 AV0ZW-BLMM AV0ZW-BLMM ; 
    15 AV0ZW-BLDD AV0ZW-BLDD ; 
  10 AV0ZW-SHPDATE AV0ZW-SHPDATE ; 
    15 AV0ZW-SHPCC AV0ZW-SHPCC ; 
    15 AV0ZW-SHPYY AV0ZW-SHPYY ; 
    15 AV0ZW-SHPMM AV0ZW-SHPMM ; 
    15 AV0ZW-SHPDD AV0ZW-SHPDD ; 
  10 AV0ZW-CAN-WHSE AV0ZW-CAN-WHSE ; 
  10 AV0ZW-EQMT-WHSE AV0ZW-EQMT-WHSE ; 
  10 AV0ZW-FTWR-WHSE AV0ZW-FTWR-WHSE ; 
end // end AV0ZW01

//*** RECORD=AV0ZW02 ****
// av0zw02 holds information used by av0z and cics program
// av1860, which performs the calculation of smart reserve
// quantities.
// ***********************
Record AV0ZW02 type basicRecord
  10 AV0ZW02-GRP AV0ZW02-GRP ; 
    15 AV0ZW02-KEY AV0ZW02-KEY ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 XUMCD XUMCD ; 
    15 AV0ZW-BLDATE AV0ZW-BLDATE ; 
      20 AV0ZW-BLCC AV0ZW-BLCC ; 
      20 AV0ZW-BLYY AV0ZW-BLYY ; 
      20 AV0ZW-BLMM AV0ZW-BLMM ; 
      20 AV0ZW-BLDD AV0ZW-BLDD ; 
    15 AV0ZW-SHPDATE AV0ZW-SHPDATE ; 
      20 AV0ZW-SHPCC AV0ZW-SHPCC ; 
      20 AV0ZW-SHPYY AV0ZW-SHPYY ; 
      20 AV0ZW-SHPMM AV0ZW-SHPMM ; 
      20 AV0ZW-SHPDD AV0ZW-SHPDD ; 
    15 AV0ZW-PCTADJ AV0ZW-PCTADJ ; 
    15 AV0ZW-PROCESSDATE AV0ZW-PROCESSDATE ; 
      20 AV0ZW-PROCESSCC AV0ZW-PROCESSCC ; 
      20 AV0ZW-PROCESSYY AV0ZW-PROCESSYY ; 
      20 AV0ZW-PROCESSMM AV0ZW-PROCESSMM ; 
      20 AV0ZW-PROCESSDD AV0ZW-PROCESSDD ; 
    15 AV0ZW-RETURNCD AV0ZW-RETURNCD ; 
    15 AV0ZW-SEARCH-TYP-IND AV0ZW-SEARCH-TYP-IND ; 
    15 AV0ZW-CANADIAN-USER AV0ZW-CANADIAN-USER ; 
    15 AV0ZW-EQUIPMENT-USER AV0ZW-EQUIPMENT-USER ; 
    15 AV0ZW-WHSE-OVERFLOW-SW AV0ZW-WHSE-OVERFLOW-SW ; 
    15 AV0ZW-NBR-WHSES-FOUND AV0ZW-NBR-WHSES-FOUND ; 
    15 AV0ZW-XWHCD1 AV0ZW-XWHCD1 ; 
    15 AV0ZW-XWHCD2 AV0ZW-XWHCD2 ; 
    15 AV0ZW-XWHCD3 AV0ZW-XWHCD3 ; 
    15 AV0ZW-TSQ01APP AV0ZW-TSQ01APP ; 
    15 AV0ZW-TSQ01PAGES AV0ZW-TSQ01PAGES ; 
    15 AV0ZW-TSQ02APP AV0ZW-TSQ02APP ; 
    15 AV0ZW-TSQ02PAGES AV0ZW-TSQ02PAGES ; 
    15 AV0ZW-TSQ03APP AV0ZW-TSQ03APP ; 
    15 AV0ZW-TSQ03PAGES AV0ZW-TSQ03PAGES ; 
    15 XXXTSLEN XXXTSLEN ; 
end // end AV0ZW02

//*** RECORD=AV0ZW03 ****
// One of a set of 4 working storage records to hold
// temp storage data.  All working storage records combined
// may hold 366 smart reserve supply dates and quantity arrays.
// ***********************
Record AV0ZW03 type basicRecord
  10 AV0ZW03-GRP AV0ZW03-GRP ; 
    15 AV0ZW-DT AV0ZW-DT [183] ; 
    15 AV0ZW-DATETOT AV0ZW-DATETOT [183] ; 
    15 AV0ZW-QTYS AV0ZW-QTYS [183] ; 
end // end AV0ZW03

//*** RECORD=AV0ZW04 ****
// One of a set of 4 working storage record to hold
// temp storage data.  All working storage records combined
// may hold 366 smart reserve dates and quantity arrays.
// ***********************
Record AV0ZW04 type basicRecord
  10 AV0ZW04-GRP AV0ZW04-GRP ; 
    15 AV0ZW-DT AV0ZW-DT [183] ; 
    15 AV0ZW-DATETOT AV0ZW-DATETOT [183] ; 
    15 AV0ZW-QTYS AV0ZW-QTYS [183] ; 
end // end AV0ZW04

//*** RECORD=AV0ZW07 ****
// temporary storage work record - used to get data from ta0050
// ***********************
Record AV0ZW07 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 * char(1176) ; 
    15 AV0ZW-DT AV0ZW-DT [7] ; 
    15 AV0ZW-QTYS AV0ZW-QTYS [7] ; 
end // end AV0ZW07

//*** RECORD=AV0ZW08 ****
// load map work record - used to format quantities array
// ***********************
Record AV0ZW08 type basicRecord
  10 AV0ZW-QTYS AV0ZW-QTYS ; 
    15 AV0ZW-QTY AV0ZW-QTY [40] ; 
end // end AV0ZW08

//*** RECORD=AV0ZW09 ****
// This record holds total quantities for each smart reserve
// size.  It holds the total of each size for all smart reserve
// supply dates.
// ***********************
Record AV0ZW09 type basicRecord
  10 AV0ZW09-GRP AV0ZW09-GRP ; 
    15 AV0ZW-GRANDTOT AV0ZW-GRANDTOT ; 
    15 AV0ZW-SIZTOT AV0ZW-SIZTOT [40] ; 
end // end AV0ZW09

//*** RECORD=AV0ZW10 ****
// This record formats dates and quantities to be moved to
// av0zw11 date group line.
// ***********************
Record AV0ZW10 type basicRecord
  10 AV0ZW10-GRP AV0ZW10-GRP ; 
    15 AV0ZW-DATEGRP AV0ZW-DATEGRP ; 
      20 AV0ZW-DATE AV0ZW-DATE ; 
      20 AV0ZW-QTYGRP AV0ZW-QTYGRP [13] ; 
        25 AV0ZW-QTYINDEX AV0ZW-QTYINDEX ; 
        25 AV0ZW-QTY AV0ZW-QTY ; 
end // end AV0ZW10

//*** RECORD=AV0ZW11 ****
// This record holds data to be moved to the jcl for print
// via the batch program av1880.  It contains the style
// identifying info, quantity indexes and respective quantities
// if the quantity is greater than zero.
// ***********************
Record AV0ZW11 type basicRecord
  10 AV0ZW11-GRP AV0ZW11-GRP ; 
    15 AV0ZW-STYLEINFO AV0ZW-STYLEINFO ; 
      20 CAUSERID CAUSERID ; 
      20 XGPCD XGPCD ; 
      20 XWHCD XWHCD ; 
      20 XWHABRV XWHABRV ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY1SSTNM SY1SSTNM ; 
      20 SY2CLRID SY2CLRID ; 
      20 SY2CLRAB SY2CLRAB ; 
      20 XDMCD XDMCD ; 
      20 XDMABRV XDMABRV ; 
      20 AV0ZW-TITLEMSG AV0ZW-TITLEMSG ; 
      20 AV0ZW-DATAPARM AV0ZW-DATAPARM ; 
      20 * char(1) ; 
      20 AV0ZW-DATAOCCURS AV0ZW-DATAOCCURS ; 
    15 AV0ZW-DATEGRP AV0ZW-DATEGRP [382] ; 
end // end AV0ZW11

//*** RECORD=AV0ZW12 ****
// --------------------------------------------------------
// av0zw12 holds av0z work fields to keep track of wildcard
// warehouses found.
// --------------------------------------------------------
// ***********************
Record AV0ZW12 type basicRecord
  10 AV0ZW-XWHCD1 AV0ZW-XWHCD1 ; 
  10 AV0ZW-XWHCD2 AV0ZW-XWHCD2 ; 
  10 AV0ZW-XWHCD3 AV0ZW-XWHCD3 ; 
  10 AV0ZW-XWHABRV1 AV0ZW-XWHABRV1 ; 
  10 AV0ZW-XWHABRV2 AV0ZW-XWHABRV2 ; 
  10 AV0ZW-XWHABRV3 AV0ZW-XWHABRV3 ; 
  10 AV0ZW-NBR-WHSES-FOUND AV0ZW-NBR-WHSES-FOUND ; 
end // end AV0ZW12

//*** RECORD=AV0ZW14 ****
// av0zw14 holds information used by av0z which is fairly
// stable.  It should not be set empty except upon initial
// entry to the application.
// ***********************
Record AV0ZW14 type basicRecord
  10 AV0ZW-USERWHSESAV AV0ZW-USERWHSESAV ; 
  10 AV0ZW-AVXSO-FOUND AV0ZW-AVXSO-FOUND ; 
  10 AV0ZW-CAN-SO AV0ZW-CAN-SO ; 
  10 AV0ZW-EQMT-SO AV0ZW-EQMT-SO ; 
end // end AV0ZW14

DataItem AV0ZW-10IX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-11IX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-11MONTHS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-11MOSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-11MOSCCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-11MOSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-11MOSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-11MOSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid Sales Office found
DataItem AV0ZW-AVXSO-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-BLCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-BLDATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-BLDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-BLDDSAV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-BLMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-BLMMSAV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-BLYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-BLYYSAV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Canadian Sales Office
DataItem AV0ZW-CAN-SO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Canadian Warehouse
DataItem AV0ZW-CAN-WHSE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Canadian user indicator
DataItem AV0ZW-CANADIAN-USER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-DATAOCCURS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-DATAPARM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-DATE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-DATEGRP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-DATEREDEF num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-DATETOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-DATIX num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-ENDQIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Equipment Sales Office
DataItem AV0ZW-EQMT-SO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Equipment Warehouse
DataItem AV0ZW-EQMT-WHSE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Equipment user indicator
DataItem AV0ZW-EQUIPMENT-USER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-FIRSTIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-FIRSTSIZE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-FIRSTSZFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-FORMATCCYY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-FORMATDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-FORMATDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_ABRV
DataItem AV0ZW-FORMATMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-FORMATMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-FORMATMMDD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Footwear Warehouse
DataItem AV0ZW-FTWR-WHSE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem AV0ZW-GETDATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-GRANDTOT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-LASTSIZE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-MAPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-MAPDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-MAPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-MAPSLASH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of valid distinct whses
DataItem AV0ZW-NBR-WHSES-FOUND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-PCTADJ num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-PCTSAV num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-PERFORMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-PRNTDEST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-PROCESSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-PROCESSDATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-PROCESSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-PROCESSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-PROCESSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-QIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-QTYCOUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem AV0ZW-QTYGRP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem AV0ZW-QTYINDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-QTYS char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-RETURNCD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-RPTDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SAVQIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SAVWSIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AV1860 search type indicator
DataItem AV0ZW-SEARCH-TYP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-SHPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SHPDATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SHPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SHPDDSAV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SHPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SHPMMSAV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SHPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SHPYYSAV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SIZIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-SIZTOT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-STARTQIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-STYLEINFO char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_SHORT_STY_NM
DataItem AV0ZW-SY1SSTNMSAV char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-SY1STYSAV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_COLR_ABRV
DataItem AV0ZW-SY2CLRABSAV char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-SY2CLRSAV char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-TBLIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-TITLEMSG char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-TOTALIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-TSIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-TSPAGES num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-TSQ01APP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-TSQ01PAGES num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-TSQ02APP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-TSQ02PAGES num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-TSQ03APP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-TSQ03PAGES num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-UPDATEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user changed whse on map
DataItem AV0ZW-USERWHSEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-USERWHSESAV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-VERIFIED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ovrflo if too many whses fnd
DataItem AV0ZW-WHSE-OVERFLOW-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse wildcarded
DataItem AV0ZW-WILDCARD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-WRKQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-WSIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AV0ZW-WSREC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XDM_DIM_ABRV
DataItem AV0ZW-XDMABRVSAV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-XDMSAV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved style gpc code
DataItem AV0ZW-XGPSAV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xum_uom_desc
DataItem AV0ZW-XUMDESCSAV char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-XUMSAV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse 1 abreviation
DataItem AV0ZW-XWHABRV1 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse 2 abreviation
DataItem AV0ZW-XWHABRV2 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse 3 abreviation
DataItem AV0ZW-XWHABRV3 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved XWH_WHSE_ABRV
DataItem AV0ZW-XWHABRVSAV char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first  warehouse code
DataItem AV0ZW-XWHCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second warehouse code
DataItem AV0ZW-XWHCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// third  warehouse code
DataItem AV0ZW-XWHCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW-XWHSAV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW02-GRP char(84)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW02-KEY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW03-GRP char(31476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW04-GRP char(31476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW09-GRP char(287)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW10-GRP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AV0ZW11-GRP char(30640)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

