package av02;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=AV02 ****
// This application displays all the products associated with a
// particular program (owner group) code.  This code must be
// entered by the user.  With security clearance, the user may
// add or delete products.  If no data was found, he will
// receive blank lines so that he can add products.  Without
// security clearance, the user will see any existing products
// or if there is no data, he will receive a message that 'no
// products were found'.  With or without security clearance,
// the user may select any existing product and transfer to
// AV03 to see more information concerning the product.
// 
// The user must press PF9 to allow add or delete of products.
// He may scroll forward and backward to view all products by
// pressing PF7 and PF8.  He may exit to any allowed applica-
// tion, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/10/90  RHETRI  New application.
//          02/18/91  RHETRI  Look at SYCLR: SY_SCN_STY_IND
//                            rather than family code = '21'
//          02/25/91  RHETRI  Chg "*" to "V" for display
//          04/07/92  SCOCHR  GET RID OF BALNK DIMENSION
//          05/28/92  MSMIT2  ALLOW THE PROGRAM CODE TO BE
//                            CHANGED IF ALL SELECTION FIELDS
//                            ARE EITHER ' ' OR 'V'.
//                            (SEE PA02521).
//          10/31/97  MBURLE  Y2KFIX: regenerated for latest
//                            version of XX0XS01.
// *********************
Program AV02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV02W00 AV02W00; // record
  AV02W01 AV02W01; // record
  AVGREC AVGREC; // record
  AVHREC AVHREC; // record
  AVIREC AVIREC; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XDMREC XDMREC; // record
  XOWREC XOWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use XOWTBL; // table
  use AV02M.AV02M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAV001: XPAV001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set AV02M001 initial; /* M001 input/output*/
    set AV02W00 empty; /* Working storage*/
    set AV02W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    AV02W00.AV02WSWF = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* Set up defaults.*/
     /* ------------------------------------------------------------*/

    AV02W00.XGPCD = "03"; /* Default GPC code*/
    AV02W00.XWHCD = "51"; /* Default warehouse code*/

     /* ------------------------------------------------------------*/
     /* If owner group code is present request data.  If coming*/
     /* from AV03, set switches.*/
     /* ------------------------------------------------------------*/

    AV02W00.AV02WSWR = "N"; /* Default Request for data switch*/

    if (COMMAREA.CAFROMAP == "AV03") /* If coming from AV03*/

      AV02W00.AV02WDSW = "Y"; /* Data found switch*/
      AV02W00.XXXTSLEN = 795; /* TSQ length*/

      /* ------------------------------------------------------------*/
       /* You saved the page numbers here, before you left for AV03,*/
       /* so that you can bring up the same page you were displaying.*/
      /* ------------------------------------------------------------*/
      AV02W00.XXXTSPAG = AVWREC.AVWCURPG[2]; /* Current page nbr*/
      AV02W00.TA5TSQIX = AVWREC.AVWMAXPG[2]; /* Max page nbr*/

    else
      if (AVWREC.XOWCD > " ") /* owner group code exists*/
        AV02W00.AV02WSWR = "Y"; /* No data requested*/
      end

    end

     /* ------------------------------------------------------------*/
     /* If user has security clearance, set security-switch.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAADDFL == "Y" /* If add clearance exists*/
     && COMMAREA.CADELFL == "Y") /* If delete clearance exists*/

      AV02W00.AV02WSSW = "Y"; /* Security switch*/
    else

      AV02W00.AV02WSSW = "N"; /* Security switch*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AV02001; /* Converse the main process*/


    AV02001: AV02001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AV02001; /* Converse the main process*/


  end // end main
end // end AV02

// Main process to display a map
Function AV02001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AV02100(); /* Obtain the data to display*/

  AV02200(); /* Format and display the map*/

  AV02300(); /* Check attention identifier*/

  AV02400(); /* Reset fields to normal intensity*/

  AV02500(); /* Verify the entered data*/

  AV02600(); /* Process valid input request*/


end // end AV02001

// Obtain the data to display
Function AV02100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (AV02W00.AV02WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  AV02W00.XXXTSLEN = 795; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  AV02S01(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Obtain data for lines.*/
   /* ------------------------------------------------------------*/

  AV02110(); /* Open BLNKS*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  AV02W00.AV02WBSW = "Y"; /* Blank page switch*/
  while (AV02W00.AV02WSWC == "N") /* Until end of cursor*/

    AV02120(); /* Fetch BLNKS*/

    if (AV02W00.AV02WSWC == "N") /* If row was found*/

      AV02130(); /* Obtain and process products*/

      /* ------------------------------------------------------------*/
       /* Save data in display storage.*/
      /* ------------------------------------------------------------*/

      AV02140(); /* Save data*/

      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/

      if (AV02W00.AV02WIXM > 15) /* Page is full*/
        AV02150(); /* Add page to temporary storage*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for DAVAIL.VBLNKS01.*/
   /* ------------------------------------------------------------*/

  AV02160(); /* Close BLNKS*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (AV02W00.AV02WIXM > 1) /* Page was formatted*/
    AV02150(); /* Add page to temporary storage*/
    AV02W00.AV02WBSW = "N"; /* Blank page switch*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (AV02W00.TA5TSQIX == 0) /* No pages formatted*/

    if (AV02W00.AV02WSSW != "Y") /* No security clearance*/
      AVWREC.XXXMODID = "100"; /* Module identification*/
      AVWREC.XXXMSGNO = 194; /* Indicate no data to display*/

    else
      AV02W00.XXXTSPAG = 0; /* Desired page number*/
      AV02W00.TA5TSQIX = 0; /* Highest page number*/

    end

  else
    /* ------------------------------------------------------------*/
     /* Data was found, check conditions for adding blank page.*/
    /* ------------------------------------------------------------*/
    AV02W00.XXXTSPAG = 1; /* Desired page number*/

    if (AV02W00.AV02WBSW == "Y" /* If blank page required*/
     && AV02W00.AV02WSSW == "Y") /* Security clearance*/
      AV02150(); /* Add page to temporary storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  AV02W00.AV02WSWR = "N"; /* Request for data switch*/


end // end AV02100

// Open BLNKS
Function AV02110()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVHREC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  AVHREC.XOWCD = AVWREC.XOWCD; /* Owner group*/

   /* ------------------------------------------------------------*/
   /* Open cursor for BLNKS.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5470" ("S1", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    AV02W00.AV02WIXM = 1; /* Display line index*/
    AV02W00.AV02WSWC = "N"; /* End of cursor switch*/
    AV02W00.AV02WDSW = "N"; /* Data found switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02110

// Fetch BLNKS
Function AV02120()
   /* ------------------------------------------------------------*/
   /* Fetch BLNKS.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5470" ("N1", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row found, set switch.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
        AV02W00.AV02WDSW = "Y"; /* Data found switch*/
      end

      /* ------------------------------------------------------------*/
       /* If end of selected set, indicate end of cursor.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        AV02W00.AV02WSWC = "Y"; /* Indicate end of cursor*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02120

// Select SYCLR
Function AV02130()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  PG2REC.SY1STNBR = AVHREC.SY1BSTNB; /* style nbr*/
  PG2REC.SY2CLRID = AVHREC.SY2BCLCD; /* color cd*/
  PG2REC.XDMCD = "00"; /* dim cd*/
  PG2REC.XGPCD = AV02W00.XGPCD; /* GPC cd*/

   /* ------------------------------------------------------------*/
   /* Select SYCLR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02130

// Save data in display storage
Function AV02140()
   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (AV02W00.AV02WSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  AV02W01.AV02WPSW[AV02WIXM] = "Y"; /* Prod in BLNKS*/

  AV02W01.SY1BSTNB[AV02WIXM] = AVHREC.SY1BSTNB; /* Style*/
  AV02W01.SY2BCLCD[AV02WIXM] = AVHREC.SY2BCLCD; /* Color*/

  AV02W01.SY1SSTNM[AV02WIXM] = PG2REC.SY1SSTNM; /* Style name*/
  AV02W01.SY2CLRAB[AV02WIXM] = PG2REC.SY2CLRAB; /* Color abrv*/

   /* MOVE PG2REC.XDMCD TO XDMREC.XDMCD;       /* Dim desc*/
   /* RETR XDMREC.XDMCD XDMTBL.XDMCD AV02W01.XDMDESC(AV02WIXM) XDMDESC;*/

   /* ------------------------------------------------------------*/
   /* Add to line loop counter.*/
   /* ------------------------------------------------------------*/
  AV02W00.AV02WIXM = AV02W00.AV02WIXM + 1; /* Increment line index*/


end // end AV02140

// Add page to temporary storage
Function AV02150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AV02W01.XXXTSLEN = AV02W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (AV02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set AV02W01 empty; /* M001 display storage*/

    AV02W00.AV02WIXM = 1; /* Display line index*/

    AV02W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  AVWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02150

// Close BLNKS
Function AV02160()
   /* ------------------------------------------------------------*/
   /* Close BLNKS.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5470" ("C1", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02160

// Format and converse the map
Function AV02200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    AVWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (AV02W00.AV02WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (AV02W00.AV02WSWF == "Y") /* Map must be formatted*/
      AV02210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AV02M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AV02M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AV02M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AVWREC.XXXMSGNO != 0) /* Message to display*/

    AV02M001.XXXMODID = AVWREC.XXXMODID; /* Module identification*/
    if (AVWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AVWREC.XXXMSGNO);
    end /* Message number*/

    set AV02M001 alarm; /* Indicate sound alarm*/

  end

  converse AV02M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = " "; /* Module identification*/
  AVWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = AV02M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = AV02M001.CAITEM; /* Application data*/


end // end AV02200

// Format the display data
Function AV02210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set AV02M001 initial; /* M001 input/output area*/

  AV02W00.AV02WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (AV02W00.TA5TSQIX > 0 /* Pages were formatted*/
   && AV02W00.AV02WDSW == "Y") /* and data was found*/

    if (AV02W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is less or equal the highest*/
       /* page in storage, obtain temporary storage.*/
      /* ------------------------------------------------------------*/
      if (AV02W00.XXXTSPAG > AV02W00.TA5TSQIX) /* Desired greater highest*/
        AV02W00.XXXTSPAG = AV02W00.TA5TSQIX;
      end

      AV02211(); /* Obtain temporary storage page*/

    end
    /* ------------------------------------------------------------*/
     /* Format the page information on the screen.*/
    /* ------------------------------------------------------------*/
    AV02M001.XXXTSPAG = AV02W00.XXXTSPAG; /* Current page*/
    AV02M001.TA5TSQIX = AV02W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the key to the map from the display storage.*/
   /* ------------------------------------------------------------*/

  AV02M001.XOWCD = AVWREC.XOWCD; /* Owner group code*/
  AV02M001.XOWDESC = AVWREC.XOWDESC; /* Owner group desc*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (AV02M001.XOWCD > " ") /* If owner grp entered*/
    set AV02M001.AV02MSEL[1] cursor; /* Place cursor*/
  end

   /* ------------------------------------------------------------*/
   /* Load the styles from BLNKS (stored in W01) to screen.*/
   /* ------------------------------------------------------------*/
  AV02W00.AV02WIXM = 1; /* Initialize line index*/

  while (AV02W00.AV02WIXM <= 15) /* Until screen is full*/

    AV02M001.AV02WPSW[AV02WIXM] = AV02W01.AV02WPSW[AV02WIXM];
    AV02M001.AV02MSEL[AV02WIXM] = AV02W01.AV02MSEL[AV02WIXM];

    AV02M001.SY1BSTNB[AV02WIXM] = AV02W01.SY1BSTNB[AV02WIXM];
    AV02M001.SY2BCLCD[AV02WIXM] = AV02W01.SY2BCLCD[AV02WIXM];

    AV02M001.SY1SSTNM[AV02WIXM] = AV02W01.SY1SSTNM[AV02WIXM];
    AV02M001.SY2CLRAB[AV02WIXM] = AV02W01.SY2CLRAB[AV02WIXM];

    if (AV02W01.AV02WPSW[AV02WIXM] != "Y" /* if from D/B*/
     && AV02W00.AV02WSSW == "Y")          /* and security exists*/
      set AV02M001.SY1BSTNB[AV02WIXM] normal; /* make field enterable*/
      set AV02M001.SY2BCLCD[AV02WIXM] normal; /* make field enterable*/
    end

    AV02W00.AV02WIXM = AV02W00.AV02WIXM + 1; /* Increment line index*/

  end


end // end AV02210

// Obtain TSQ Record
Function AV02211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  AV02W01.XXXTSLEN = AV02W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = AV02W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (AV02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  AVWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02211

// Check attention identifier
Function AV02300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (AV02W00.AV02WSWR == "Y") /* Request for data*/
      set AV02W01 empty; /* M001 display storage*/
    end

    AV02W00.AV02WSWF = "Y"; /* Format the map switch*/
    AV02W00.AV02WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (AV02M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (COMMAREA.CATOAP == "AV03") /* If trying to go to AV03*/

        AVWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(298); /* Indicate cannot go this way*/

      else

        if (AVWREC.AVWMODSW == "Y") /* if data mod sw 'y'*/
           /* next sentence*/
        else
          AV02S01(); /* Purge temporary storage*/
        end

        if (AVWREC.AVWMODSW == "Y" /* if data mod sw 'y'*/
         || COMMAREA.CATOAP == "AV01") /* If returning to AV01*/
           /* next sentence*/
        else
          AV02S02(); /* Purge temp storage for AV01*/
        end

        XPAV003(); /* Exit to another application*/

        set AV02M001.CATOAP cursor, bold; /* Highlight*/

      end

    else
      AVWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(23); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AV02M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AV01"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AV0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AV0S"; /* TO application*/
    end

    if (AVWREC.AVWMODSW == "Y" /* if data mod sw 'y'*/
     || COMMAREA.CATOAP == "AV03") /* or going to AV03*/
       /* next sentence*/
    else
      AV02S01(); /* Purge temporary storage*/
    end

    if (AVWREC.AVWMODSW == "Y"    /* if data mod sw 'y'*/
     || COMMAREA.CATOAP == "AV01" /* If returning to AV01*/
     || COMMAREA.CATOAP == "AV03") /* or going to AV03*/
       /* next sentence*/
    else
      AV02S02(); /* Purge temp storage for AV01*/
    end

    XPAV003(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9)  /* and PF9 was not pressed*/

    AVWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(279); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end AV02300

// Reset highlighted fields
Function AV02400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AV02M001.XOWCD initialAttributes; /* program code*/

  AV02W00.AV02WIXM = 1; /* Initialize line index*/

  while (AV02W00.AV02WIXM <= 15) /* Until end of lines*/

    set AV02M001.AV02MSEL[AV02WIXM] normal; /* Reset select flag*/

    if (AV02W01.AV02WPSW[AV02WIXM] != "Y" /* If not from D/B*/
     && AV02W00.AV02WSSW == "Y")          /* and security clearance*/
      set AV02M001.SY1BSTNB[AV02WIXM] normal; /* Reset field*/
      set AV02M001.SY2BCLCD[AV02WIXM] normal; /* Reset field*/
    end

    AV02W00.AV02WIXM = AV02W00.AV02WIXM + 1; /* Increment line index*/

  end

  set AV02M001.CATOAP initialAttributes; /* TO application*/
  set AV02M001.CAITEM initialAttributes; /* Application data*/


end // end AV02400

// Verify the entered data
Function AV02500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (AV02M001.CAITEM > " ") /* Application data was entered*/

    AVWREC.XXXMODID = "500"; /* Module identification*/
    set AV02M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(274); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    AV02510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/

    if (AV02M001.XOWCD != AVWREC.XOWCD /* Owner code changed*/
     || AV02M001.XOWCD == " ")         /* or code missing*/

      AV02520(); /* Verify the key fields*/

    else

      /* ------------------------------------------------------------*/
       /* Otherwise, if page was formatted, verify selections.*/
      /* ------------------------------------------------------------*/
      AV02W00.AV02WIXM = 15; /* Initialize line index*/
      while (AV02W00.AV02WIXM > 0) /* Until end of lines*/

        /* ------------------------------------------------------------*/
         /* If any style/color/dim was added:*/
        /* ------------------------------------------------------------*/
        if (AV02M001.SY2BCLCD[AV02WIXM] != AV02W01.SY2BCLCD[AV02WIXM]
         || AV02M001.SY1BSTNB[AV02WIXM] != AV02W01.SY1BSTNB[AV02WIXM])

          AV02530(); /* Verify style/color/dim*/
        end

        /* ------------------------------------------------------------*/
         /* If any selection made:*/
        /* ------------------------------------------------------------*/
        if (AV02M001.AV02MSEL[AV02WIXM] > " ") /* Selection was entered*/
          AV02540(); /* Verify selections*/
        end

        /* ------------------------------------------------------------*/
         /* Subtract from loop counter.*/
        /* ------------------------------------------------------------*/
        AV02W00.AV02WIXM = AV02W00.AV02WIXM - 1; /* Decrement line number*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/

  else
    /* ------------------------------------------------------------*/
     /* If 'a' or 'd' entered, ask user to comfirm selection.*/
    /* ------------------------------------------------------------*/
    if ("D" in AV02M001.AV02MSEL /* If any 'd' entered*/
     || "A" in AV02M001.AV02MSEL) /* If any 'a' entered*/

      if (AV02W00.AV02WSSW == "Y") /* If security clearance*/

        AVWREC.XXXMODID = "500"; /* Module identification*/
        AVWREC.XXXMSGNO = 289; /* Indicate please confirm*/

      end

    end
  end


end // end AV02500

// Verify scroll request
Function AV02510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && AV02W00.XXXTSPAG < 2)       /* And no previous pages*/

    AVWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(10); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AV02W00.XXXTSPAG >= AV02W00.TA5TSQIX) /* and no more pages*/

    AVWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(11); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  AV02511(); /* Highlight any selection*/

   /* ------------------------------------------------------------*/
   /* Highlight key field if it was changed.*/
   /* ------------------------------------------------------------*/

  if (AV02M001.XOWCD != AVWREC.XOWCD) /* Owner group code*/

    AVWREC.XXXMODID = "510"; /* Module identification*/
    set AV02M001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(275); /* Modifications not allowed*/

  end


end // end AV02510

// Highlight any selection
Function AV02511()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/

  AV02W00.AV02WIXM = 15; /* Initialize line index*/

  while (AV02W00.AV02WIXM > 0) /* Until end of lines*/

    if (AV02M001.AV02MSEL[AV02WIXM] > " " /* Selection entered*/
     && AV02M001.AV02MSEL[AV02WIXM] != "V") /* and not equal 'V'*/

      AVWREC.XXXMODID = "511"; /* Module identification*/
      set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(275); /* Modifications not allowed*/

    end

    AV02W00.AV02WIXM = AV02W00.AV02WIXM - 1; /* Decrement line number*/

  end


end // end AV02511

// Verify the key fields
Function AV02520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  AV02521(); /* Highlight any selection*/

   /* ------------------------------------------------------------*/
   /* Verify owner group code valid.*/
   /* ------------------------------------------------------------*/
  XOWREC.XOWCD = AV02M001.XOWCD; /* Format key*/
  XOWREC.XWHCD = AV02W00.XWHCD; /* Format key*/

  if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    AV02M001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex]; /* Abrv*/

    /* --------------------------------------------------------*/
     /* Verify owner group in BLNKP.*/
    /* --------------------------------------------------------*/
    AV02522(); /* Select BLNKP*/
    AV02523(); /* Check BLNKP return*/

  else

    /* --------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* --------------------------------------------------------*/
    AV02M001.XOWDESC = " "; /* Abbreviation*/

    AVWREC.XXXMODID = "520"; /* Module identification*/
    set AV02M001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(286); /* Indicate missing or invalid*/

  end


end // end AV02520

// Highlight any selection
Function AV02521()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/

  AV02W00.AV02WIXM = 15; /* Initialize line index*/

  while (AV02W00.AV02WIXM > 0) /* Until end of lines*/

    if (AV02M001.AV02MSEL[AV02WIXM] > " "  /* Selection entered*/
     && AV02M001.AV02MSEL[AV02WIXM] != "*" /* and not equal '*'*/
     && AV02M001.AV02MSEL[AV02WIXM] != "V") /* AND NOT VIEWED*/

      AVWREC.XXXMODID = "521"; /* Module identification*/
      set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(276); /* Modifications not allowed*/

    end


    AV02W00.AV02WIXM = AV02W00.AV02WIXM - 1; /* Decrement line number*/

  end


end // end AV02521

// Select BLNKP
Function AV02522()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVGREC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  AVGREC.XOWCD = AV02M001.XOWCD; /* Owner group*/

   /* ------------------------------------------------------------*/
   /* Select BLNKP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5480" ("S ", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "522"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02522

// Check BLNKP return code
Function AV02523()
   /* ------------------------------------------------------------*/
   /* Check BLNKP return code.  If row found, check status.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   && AVGREC.XXXSTAT == "A")   /* and row active*/

    AVWREC.AVGBPIND = AVGREC.AVGBPIND; /* Save program indicator*/

  else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    AV02M001.XOWDESC = " "; /* Abbreviation*/

    AVWREC.XXXMODID = "523"; /* Module identification*/
    set AV02M001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(286); /* Indicate missing or invalid*/

  end


end // end AV02523

// Verify style/color/dim
Function AV02530()
   /* ------------------------------------------------------------*/
   /* If dimension not entered, default it to '00'. If style or*/
   /* color is missing when 'a' is selected, indicate error.*/
   /* ------------------------------------------------------------*/


  if (AV02M001.SY2BCLCD[AV02WIXM] != " ") /* If color entered*/
    if (AV02M001.AV02MSEL[AV02WIXM] != "A") /* If not 'a' entered*/

      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV02M001.SY2BCLCD[AV02WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Indicate missing*/

    end
  end

  if (AV02M001.SY1BSTNB[AV02WIXM] != " ") /* If style entered*/
    if (AV02M001.AV02MSEL[AV02WIXM] != "A") /* If not 'a' entered*/

      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV02M001.SY1BSTNB[AV02WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(63); /* Indicate missing*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify style/color/dim is a valid product.*/
   /* ------------------------------------------------------------*/
  if (AV02M001.SY2BCLCD[AV02WIXM] != " " /* If color entered*/
   || AV02M001.SY1BSTNB[AV02WIXM] != " ") /* or style entered*/

    AV02531(); /* Select SYCLR*/

    /* ------------------------------------------------------------*/
     /* If style found in SYCLR and style indicator is I or B:*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
      if (PG2REC.PG2SCRFL == "I" /* if style ind = 'I'*/
       || PG2REC.PG2SCRFL == "B") /* or style ind = 'B'*/

        AV02M001.SY1SSTNM[AV02WIXM] = PG2REC.SY1SSTNM;
        AV02M001.SY2CLRAB[AV02WIXM] = PG2REC.SY2CLRAB;


      else
        AVWREC.XXXMODID = "530"; /* Module identification*/
        set AV02M001.SY1BSTNB[AV02WIXM] cursor, bold; /* Highlight*/
        set AV02M001.SY2BCLCD[AV02WIXM] bold; /* Highlight*/
        converseLib.validationFailed(259); /* Indicate product not in avail*/

      end
    else
      AVWREC.XXXMODID = "530"; /* Module identification*/
      set AV02M001.SY1BSTNB[AV02WIXM] cursor, bold; /* Highlight*/
      set AV02M001.SY2BCLCD[AV02WIXM] bold; /* Highlight*/
      converseLib.validationFailed(205); /* Indicate product not found*/

    end
  end


end // end AV02530

// Select SYCLR
Function AV02531()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  PG2REC.SY1STNBR = AV02M001.SY1BSTNB[AV02WIXM]; /* style nbr*/
  PG2REC.SY2CLRID = AV02M001.SY2BCLCD[AV02WIXM]; /* color cd*/
  PG2REC.XDMCD = "00"; /* DIMENSION*/
  PG2REC.XGPCD = AV02W00.XGPCD; /* GPC cd*/

   /* ------------------------------------------------------------*/
   /* Select MLTYP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "531"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02531

// Verify selection
Function AV02540()
   /* ------------------------------------------------------------*/
   /* Verify only 's', 'a', 'd', or 'V' entered.*/
   /* ------------------------------------------------------------*/
  if (AV02M001.AV02MSEL[AV02WIXM] != "S" /* Valid selection character*/
   && AV02M001.AV02MSEL[AV02WIXM] != "A" /* Valid selection character*/
   && AV02M001.AV02MSEL[AV02WIXM] != "D" /* Valid selection character*/
   && AV02M001.AV02MSEL[AV02WIXM] != "V") /* Valid selection character*/

    AVWREC.XXXMODID = "540"; /* Module identification*/
    set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(116); /* Indicate invalid option selected*/

  else
    /* ------------------------------------------------------------*/
     /* Verify if 's' entered, that product exists.*/
    /* ------------------------------------------------------------*/

    if (AV02M001.AV02MSEL[AV02WIXM] == "S") /* If 's' entered*/

      if (AV02M001.AV02WPSW[AV02WIXM] != "Y") /* If product not from D/B*/
        AVWREC.XXXMODID = "540"; /* Module identification*/
        set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(297); /* Indicate product not there*/
      else

        /* ------------------------------------------------------------*/
         /* If Blank Program indicator is equal to 'b' or 'm', give er-*/
         /* ror message indicating 'No finished style for program type'*/
        /* ------------------------------------------------------------*/
        if (AVWREC.AVGBPIND == "B" /* If program indicator = 'b'*/
         || AVWREC.AVGBPIND == "M") /* Or pgm indicator = 'm'*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(292); /* Indicate no finished products*/
        end

      end

      /* ------------------------------------------------------------*/
       /* Verify only one 's' can be entered at a time.*/
      /* ------------------------------------------------------------*/
      AV02W00.AV02WIX2 = AV02W00.AV02WIXM - 1; /* Set counter*/

      while (AV02W00.AV02WIX2 > 0) /* While counter greater than 0*/

        if (AV02M001.AV02MSEL[AV02WIX2] == "S") /* If any other 'S'*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(277); /* More than one selection*/
        end

        AV02W00.AV02WIX2 = AV02W00.AV02WIX2 - 1; /* Decrement counter*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Verify if 'a' or 'd' entered, that security exists:*/
    /* ------------------------------------------------------------*/
    if ("D" in AV02M001.AV02MSEL /* If any 'd' entered*/
     || "A" in AV02M001.AV02MSEL) /* Or any 'a' entered*/

      if (AV02W00.AV02WSSW != "Y") /* If no security clearance*/
        AVWREC.XXXMODID = "540"; /* Module identification*/
        set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(278); /* Indicate no security clearance*/

        return;

      else
        AVWREC.AVWMODSW = "Y"; /* Modified data switch*/

      end

      /* ------------------------------------------------------------*/
       /* Verify no 's' was entered with 'a' or 'd'.*/
      /* ------------------------------------------------------------*/
      if ("S" in AV02M001.AV02MSEL) /* If any 's' entered*/
        AVWREC.XXXMODID = "540"; /* Module identification*/
        set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(277); /* Indicate too many selections*/

      end

      /* ------------------------------------------------------------*/
       /* Verify if 'a' entered, that style number and color entered.*/
      /* ------------------------------------------------------------*/
      if (AV02M001.AV02MSEL[AV02WIXM] == "A") /* If 'a' entered*/

        if (AV02M001.SY2BCLCD[AV02WIXM] == " ") /* If color missing*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV02M001.SY2BCLCD[AV02WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(111); /* Indicate missing*/
        end

        if (AV02M001.SY1BSTNB[AV02WIXM] == " ") /* If style missing*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV02M001.SY1BSTNB[AV02WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(63); /* Indicate missing*/
        end

        /* ------------------------------------------------------------*/
         /* Verify if 'a' entered, that this is not a protected line.*/
         /* (If protected, this product exists on D/B.)*/
        /* ------------------------------------------------------------*/
        if (AV02M001.AV02WPSW[AV02WIXM] == "Y") /* If style already existing*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(287); /* Indicate product already exists*/
        else

          /* ------------------------------------------------------------*/
           /* Otherwise check BLNKS for style.  (It could be on different*/
           /* line other than the one where 'a' is entered.)*/
          /* ------------------------------------------------------------*/
          AV02541(); /* Select BLNKS*/

          if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
            AVWREC.XXXMODID = "540"; /* Module identification*/
            set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(287); /* Indicate product already exists*/
          end
        end

      end

      /* ------------------------------------------------------------*/
       /* Verify if 'd' entered, that product exists.*/
      /* ------------------------------------------------------------*/
      if (AV02M001.AV02MSEL[AV02WIXM] == "D") /* If 'D' entered*/

        if (AV02M001.AV02WPSW[AV02WIXM] != "Y") /* If product not from D/B*/
          AVWREC.XXXMODID = "540"; /* Module identification*/
          set AV02M001.AV02MSEL[AV02WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(288); /* Indicate product not there*/
        end

      end
    end
  end


end // end AV02540

// Select BLNKS
Function AV02541()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVHREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  AVHREC.XOWCD = AVWREC.XOWCD; /* Owner grp*/
  AVHREC.SY1BSTNB = AV02M001.SY1BSTNB[AV02WIXM]; /* style nbr*/
  AVHREC.SY2BCLCD = AV02M001.SY2BCLCD[AV02WIXM]; /* color cd*/

   /* ------------------------------------------------------------*/
   /* Select BLNKS.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5470" ("SE", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "541"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02541

// Process valid input request
Function AV02600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  AV02W00.AV02WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the key was changed, update AVWREC, and request data.*/
   /* ------------------------------------------------------------*/
  if (AV02M001.XOWCD != AVWREC.XOWCD) /* Owner group code*/

    AVWREC.XOWCD = AV02M001.XOWCD; /* Owner group code*/
    AVWREC.XOWDESC = AV02M001.XOWDESC; /* Owner group name*/
    AV02W00.AV02WSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    AV02W00.XXXTSPAG = AV02W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    AV02W00.XXXTSPAG = AV02W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If line was selected, transfer to display finished styles.*/
   /* ------------------------------------------------------------*/
  if ("S" in AV02M001.AV02MSEL) /* Style selected*/

    AVWREC.SY1BSTNB = AV02W01.SY1BSTNB[sysVar.arrayIndex]; /* Move style nbr*/
    AVWREC.SY1SSTNM = AV02W01.SY1SSTNM[sysVar.arrayIndex]; /* Move style name*/
    AVWREC.SY2BCLCD = AV02W01.SY2BCLCD[sysVar.arrayIndex]; /* Move color*/
    AVWREC.SY2CLRAB = AV02W01.SY2CLRAB[sysVar.arrayIndex]; /* Move color name*/

    AVWREC.AVWCURPG[2] = AV02W00.XXXTSPAG; /* Save curr page*/
    AVWREC.AVWMAXPG[2] = AV02W00.TA5TSQIX; /* Save max page*/

    AV02W01.AV02MSEL[sysVar.arrayIndex] = "V";

    COMMAREA.CATOAP = "AV03"; /* TO application*/

    AV02610(); /* Update display storage*/
    AV02620(); /* Transfer to AV03*/

  end

   /* ------------------------------------------------------------*/
   /* If PF9 comfire pressed, process adds and deletes.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9) /* If PF9 was presses*/

    AVWREC.XXXMSGNO = " "; /* Clear message out*/
    AVWREC.AVWMODSW = "N"; /* Clear modified data switch*/
    /* ------------------------------------------------------------*/
     /* If products added on screen, insert in BLNKS.*/
    /* ------------------------------------------------------------*/
    if ("A" in AV02M001.AV02MSEL) /* Style(s) to be inserted*/

      AV02W00.AV02WIXM = 1; /* Initialize line index*/

      while (AV02W00.AV02WIXM <= 15) /* Until screen is full*/
        if (AV02M001.AV02MSEL[AV02WIXM] == "A") /* and line added*/

          AV02630(); /* Select BLNKS*/

          if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
            AV02640(); /* Insert BLNKS*/
          end
        end

        AV02W00.AV02WIXM = AV02W00.AV02WIXM + 1; /* Increment line index*/

      end
      AV02W00.AV02WSWR = "Y"; /* Request for data switch*/
    end

    /* ------------------------------------------------------------*/
     /* If products marked deleted on screen, delete from BLNKS.*/
    /* ------------------------------------------------------------*/
    if ("D" in AV02M001.AV02MSEL) /* Style(s) to be deleted*/

      AV02W00.AV02WIXM = 1; /* Initialize line index*/

      while (AV02W00.AV02WIXM <= 15) /* Until screen is full*/
        if (AV02M001.AV02MSEL[AV02WIXM] == "D") /* and line deleted*/

          AV02650(); /* Delete BLNKS*/
        end

        AV02W00.AV02WIXM = AV02W00.AV02WIXM + 1; /* Increment line index*/

      end
      AV02W00.AV02WSWR = "Y"; /* Request for data switch*/
    end

  else
    /* ------------------------------------------------------------*/
     /* Load the map into storage.*/
    /* ------------------------------------------------------------*/
    AV02W00.AV02WIXM = 1; /* Initialize line index*/

    while (AV02W00.AV02WIXM <= 15) /* Until screen is full*/

      AV02660(); /* Load map to W01*/

      AV02W00.AV02WIXM = AV02W00.AV02WIXM + 1; /* Increment line index*/

    end
  end


end // end AV02600

// Update temporary storage
Function AV02610()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  AV02W01.XXXTSLEN = AV02W00.XXXTSLEN; /* page length*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (AV02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  AVWREC.XXXMODID = "610"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02610

// Transfer to AV03
Function AV02620()
   /* ------------------------------------------------------------*/
   /* Transfer control to AV03.*/
   /* ------------------------------------------------------------*/

  XPAV003(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/

  exit stack; /* Exit to display map*/


end // end AV02620

// Select BLNKS
Function AV02630()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVHREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  AVHREC.XOWCD = AVWREC.XOWCD; /* Owner grp*/
  AVHREC.SY1STNBR = AV02M001.SY1BSTNB[AV02WIXM]; /* style nbr*/
  AVHREC.SY2CLRID = AV02M001.SY2BCLCD[AV02WIXM]; /* color cd*/

   /* ------------------------------------------------------------*/
   /* Select BLNKS.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5470" ("SE", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "630"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02630

// Insert BLNKS
Function AV02640()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVHREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  AVHREC.XOWCD = AVWREC.XOWCD; /* Owner grp*/
  AVHREC.SY1BSTNB = AV02M001.SY1BSTNB[AV02WIXM]; /* blk style nbr*/
  AVHREC.SY2BCLCD = AV02M001.SY2BCLCD[AV02WIXM]; /* blk color cd*/
  AVHREC.SY1STNBR = AV02M001.SY1BSTNB[AV02WIXM]; /* style nbr*/
  AVHREC.SY2CLRID = AV02M001.SY2BCLCD[AV02WIXM]; /* color cd*/
  AVHREC.XDMCD = "00"; /* dim cd*/

  AVHREC.AVHBLKFL = "N"; /* Bulk Only flag*/
  AVHREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/

   /* ------------------------------------------------------------*/
   /* Insert DAVAIL.VBLNKS01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5470" ("A ", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AVWREC.XXXMODID = "640"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02640

// Delete BLNKS
Function AV02650()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVHREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  AVHREC.XOWCD = AVWREC.XOWCD; /* Owner grp*/
  AVHREC.SY1BSTNB = AV02M001.SY1BSTNB[AV02WIXM]; /* style nbr*/
  AVHREC.SY2BCLCD = AV02M001.SY2BCLCD[AV02WIXM]; /* color cd*/

   /* ------------------------------------------------------------*/
   /* Delete BLNKS.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5470" ("D2", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "650"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(264); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBLNKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02650

// Save map in working storage
Function AV02660()
   /* ------------------------------------------------------------*/
   /* Load the styles from screen to storage (W01).*/
   /* ------------------------------------------------------------*/

  AV02W01.AV02WPSW[AV02WIXM] = AV02M001.AV02WPSW[AV02WIXM];
  AV02W01.AV02MSEL[AV02WIXM] = AV02M001.AV02MSEL[AV02WIXM];

  AV02W01.SY1BSTNB[AV02WIXM] = AV02M001.SY1BSTNB[AV02WIXM];
  AV02W01.SY2BCLCD[AV02WIXM] = AV02M001.SY2BCLCD[AV02WIXM];

  AV02W01.SY1SSTNM[AV02WIXM] = AV02M001.SY1SSTNM[AV02WIXM];
  AV02W01.SY2CLRAB[AV02WIXM] = AV02M001.SY2CLRAB[AV02WIXM];


end // end AV02660

// Purge temporary storage
Function AV02S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set AV02W01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (AV02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  AVWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02S01

// Purge temp storage for AV01
Function AV02S02()
   /* ------------------------------------------------------------*/
   /* Initialize indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for AV01.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "AV01"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (AV02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  AVWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(279); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE TEMPORARY STORAGE FOR AV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV02S02

//*** RECORD=AV02W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AV02W00 type basicRecord
  10 AV02WIXM AV02WIXM ; 
  10 AV02WIX2 AV02WIX2 ; 
  10 AV02WSWC AV02WSWC ; 
  10 AV02WSWF AV02WSWF ; 
  10 AV02WSWR AV02WSWR ; 
  10 AV02WSSW AV02WSSW ; 
  10 AV02WBSW AV02WBSW ; 
  10 AV02WDSW AV02WDSW ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 XGPCD XGPCD ; 
  10 XWHCD XWHCD ; 
  10 * num(1) ; 
end // end AV02W00

//*** RECORD=AV02W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record AV02W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(795) ; 
    10 AV02WPSW AV02WPSW [15] ; 
    10 AV02MSEL AV02MSEL [15] ; 
    10 SY1BSTNB SY1BSTNB [15] ; 
    10 SY2BCLCD SY2BCLCD [15] ; 
    10 SY1SSTNM SY1SSTNM [15] ; 
    10 SY2CLRAB SY2CLRAB [15] ; 
    10 AVHBXDM AVHBXDM [15] ; 
    10 XDMDESC XDMDESC [15] ; 
end // end AV02W01

// Selection field (a/d/s/*)
DataItem AV02MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Blank page switch
DataItem AV02WBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data found switch
DataItem AV02WDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem AV02WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem AV02WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Product from D/B switch
DataItem AV02WPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Security switch
DataItem AV02WSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem AV02WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem AV02WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem AV02WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank dimension code
DataItem AVHBXDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

