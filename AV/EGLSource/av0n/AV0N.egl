package av0n;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=AV0N ****
// This application displays products resulting from a search
// of DPRODG.VSYCLR01 using a partial style and/or color
// description.  Once products are displayed, the user may
// then select a product and transfer that key to either AV0A,
// AV0P or AV0I to view detail information on the product.
// CONTROL DATE ChG  CHANGEE REASON
// ------- --------  ------- ----------------------------------
// y2kfix  11-07-97  pharwo  changes to AV0N151 for year 2000
//                           compliance.
// av999   06-12-01   kkarla made changes to use appropriate
//                           sesn-yr-rng fields for apparel and
//                           non aprl products-av0n151,av0n152.
// *********************
Program AV0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV0NW01 AV0NW01; // record
  AV0NW02 AV0NW02; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SYNREC SYNREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL; // table
  use XLCTBL; // table
  use XSNTBL; // table
  use XGATBL; // table
  use AV0NM.AV0NM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAV001: XPAV001();
    AV0NW01.AV0NWFL1 = "Y"; /* set first time in application to yes*/

    AV0NM001.XGPCD = COMMAREA.XGPCD; /* move product class*/
    AV0N001: AV0N001();
     /* restart display logic*/
    goto AV0N001;
  end // end main
end // end AV0N

// MAIN PROCESS
Function AV0N001()
   /* ******************************************************/
    /* THIS PROCESS WILL DO THE FOLLOWING*/
   /* -----------------------------------------------------*/
   /* 010 - Edit enterable map fields, initialize work fields,*/
         /* delete temp storage*/
   /* ------------------------------------------------------*/
   /* 100 - Select data to display*/
         /* Build temp storage with selected data*/
         /* (not exceeding 200 records total)*/
   /* ------------------------------------------------------*/
   /* 200 - Initialize map fields*/
         /* Read temporary storage*/
         /* Move temporary storage data to map*/
   /* ------------------------------------------------------*/
   /* 300 - Display map*/
   /* ------------------------------------------------------*/
   /* 400 - Check attention identifier*/
   /* ------------------------------------------------------*/
   /* 500 - Check for selected product*/
         /* If valid selection, transfer to requested application*/
   /* ------------------------------------------------------*/
   /* 600 - Reset hilited fields*/
   /* ------------------------------------------------------*/

  if (AV0NW01.AV0NWFL1 == "Y"         /* if first time in application*/
   || AV0NM001.XGPCD != AV0NW01.XGPCD /* or search field not = saved*/
   || AV0NM001.AV0NMSSD != AV0NW01.AV0NWSSD
   || AV0NM001.AV0NMCSD != AV0NW01.AV0NWCSD
   || AV0NM001.AV0NMXLC != AV0NW01.XLCCD
   || AV0NM001.AV0NMGAB != AV0NW01.AV0NMGAB)
     /* edit map, delete temp storage, init wrk fields,*/
     /* reformat ezedte:*/
    AV0N010();
    if (converseVar.validationMsgNum == 0) /* if no errors*/
      AV0NW01.AV0NWDFL = "Y"; /* move yes to request data flag*/
      AV0NW01.AV0NWFL1 = "N"; /* move no to first time flag*/
    end
  end

  if (AV0NW01.AV0NWDFL == "Y") /* if request data*/
    if (converseVar.validationMsgNum != 0) /* if error has occurred*/
       /* by pass processing to display error*/
    else
      AV0N100(); /* BUILD DATA in temp storage*/
      if (converseVar.validationMsgNum == 0)
        AV0NW01.AV0NWDFL = "N"; /* set request data flag to no*/
        AV0NW01.XXXTSPAG = 1; /* initialize temp storage page*/
      end
    end
  end

  if (converseVar.validationMsgNum == 0)
    AV0N200(); /* format map with temp stor data*/
  end

  AV0N300(); /* converse map*/

  AV0N400(); /* check attention identifiers*/

  if (converseVar.validationMsgNum == 0 /* if no errors*/
   && AV0NW01.AV0NWFL1 != "Y")          /* and not first time thru application*/
    AV0N500(); /* check for selected record & xfer*/
  end

  if (converseVar.validationMsgNum == 0) /* if no errors*/
    AV0N600(); /* reset hilited fields*/
  end

end // end AV0N001

// initial routine
Function AV0N010()
   /* ******************************************************/
    /* THIS PROCESS WILL DO THE FOLLOWING*/
   /* -----------------------------------------------------*/
    /* 1. Edit map selection fields and move to save fields*/
    /* 2. Initialize program work fields*/
    /* 3. Delete temporary storage*/
    /* 4. If first time in application, reformat current date*/
       /* to ccyymmdd and move to save field.*/

   /* ******************************************************/

  if (converseVar.validationMsgNum == 279) /* if invalid pfkey*/
    return; /* exit to display message*/
  end

  if (AV0NW01.AV0NWFL1 == "Y") /* if first time in application*/
    set XX0XW01 empty; /* clear data/time work rec*/
    XX0XS01(); /* reformat ezedte to ccyymmdd*/
  end

  AV0N014(); /* set map fields*/

  AV0N011(); /* initialize work records*/

  AV0N012(); /* edit map selection fields & move to save*/
  if (converseVar.validationMsgNum != 0) /* if error in edits*/
    return; /* exit to display error*/
  end

  AV0N013(); /* delete temp storage*/
  if (converseVar.validationMsgNum != 0) /* if error*/
    return; /* exit to display error*/
  end


end // end AV0N010

// initialize program records
Function AV0N011()
  set AV0NW01 empty; /* clear av0n display storage*/
  set AV0NW02 empty; /* clear av0n work fields*/

  set SQLCA empty; /* db2 error handling work record*/
  set TAEREC empty; /* error diagnosis record*/
  set TA1REC empty; /* error diagnosis record*/
  set TA5REC empty; /* temporary storage record*/

end // end AV0N011

// edit map selection fields
Function AV0N012()
   /* ******************************************************/
    /* this process verifies that the map search fields*/
    /* have been entered properly*/
   /* -----------------------------------------------------*/

  AVWREC.XXXMODID = "011"; /* set module errid*/

  if (AV0NM001.XGPCD == " ") /* if gpc has not been entered*/
    set AV0NM001.XGPCD cursor, bold; /* hilite map field*/
    converseLib.validationFailed(64); /* please enter gpc code msg*/
    AV0NW01.AV0NWFL1 = "Y"; /* reset first time flag*/
    return; /* return to display map & message*/
  end

  if (AV0NM001.XGPCD in XGPTBL.XGPCD) /* product class is valid*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and code is active*/
      /* next sentence*/
    else
      set AV0NM001.XGPCD cursor, bold; /* hilite map field*/
      converseLib.validationFailed(72); /* inactive gpc code message*/
      return; /* return to display map & msg*/
    end
  else
    set AV0NM001.XGPCD cursor, bold; /* hilite map field*/
    converseLib.validationFailed(71); /* invalid gpc code message*/
  end

  if (AV0NM001.AV0NMSSD == " " /* if style search description not*/
   /* entered*/
   && AV0NM001.AV0NMCSD == " ") /* and color search descript not enterd*/
    set AV0NM001.AV0NMSSD cursor, bold; /* hilite map field*/
    set AV0NM001.AV0NMCSD bold; /* hilite map field*/
    converseLib.validationFailed(299); /* please enter style and/or color search field*/
     /* MOVE 'y' TO AV0NW01.AV0NWfl1 ; reset first time flag*/
  end

  if (AV0NM001.AV0NMXLC > " ") /* search lifecycle entered*/
    if (AV0NM001.AV0NMXLC in XLCTBL.XLCCD) /* if lifecycle in corp table*/
       /* valid lifecycle code*/
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if lifecycle code not active*/
        set AV0NM001.AV0NMXLC cursor, bold; /* hilite map field*/
        converseLib.validationFailed(48); /* inactive lifecycle code message*/
      else
         /* valid lifecycle code*/
      end
    else
      set AV0NM001.AV0NMXLC cursor, bold; /* hilite map field*/
      converseLib.validationFailed(47); /* invalid lifecycle code message*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* if error in edits*/
    AV0NW01.AV0NWFL1 = "Y"; /* set 1st time flag to yes*/
  end

   /* if all search field edits are passed, map search fields are*/
   /* moved to save fields.*/

  AV0NW01.XGPCD = AV0NM001.XGPCD; /* product class*/
  COMMAREA.XGPCD = AV0NM001.XGPCD; /* move gpc to commarea*/
  AV0NW01.AV0NWSSD = AV0NM001.AV0NMSSD; /* style search descript*/
  AV0NW01.AV0NWCSD = AV0NM001.AV0NMCSD; /* color search descript*/
  AV0NW01.XLCCD = AV0NM001.AV0NMXLC; /* search lifecycle code*/
  AV0NW01.AV0NMGAB = AV0NM001.AV0NMGAB; /* GENDER AGE TEXT*/

end // end AV0N012

// delete temporary storage
Function AV0N013()
   /* -------------------------------------------*/
    /* PURGE ANY TEMPORARY STORAGE*/
   /* -------------------------------------------*/

  TA5REC.TA5APPID = "AV0N"; /* APPL ID*/
  TA5REC.TA5FNCCD = "P"; /* SET FUNSTION CODE*/

  call "TA0050" (AV0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* CALL TEMP STORAGE ROUTINE*/

   /* -------------------------------------------*/
    /* IF SUCCESSFUL RETURN TO CALLING ROUTINE*/
   /* -------------------------------------------*/
  if (TA5REC.TA5RTNCD == 0) /* NORMAL RETURN*/
    return;
  end

   /* -------------------------------------------*/
    /* OTHERWISE POST A MESSAGE AND RETURN*/
   /* -------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode;
  TA1REC.TA1FUNC = "POST";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1PGMAP = "AV0N";
  TA1REC.TA1PGMNO = "AV0N013";
  AVWREC.XXXMODID = "013";
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1MAP = "AV0NM001";
  SQLCA.SQLCAREC = TA5REC.TA5DATA;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};

  converseLib.validationFailed(76);
  return; /* exit to display error message*/

end // end AV0N013

// initialize map
Function AV0N014()
   /* ------------------------------------------------------*/
    /* 1. Load constant map data*/
    /* 2. Set map selection fields dark*/
   /* ------------------------------------------------------*/

  AVWREC.XXXMODID = "014"; /* module id*/

   /* save map search fields:*/
  AV0NW01.XGPCD = AV0NM001.XGPCD; /* product class*/
  AV0NW01.AV0NWSSD = AV0NM001.AV0NMSSD; /* style desc*/
  AV0NW01.AV0NWCSD = AV0NM001.AV0NMCSD; /* color desc*/
  AV0NW01.XLCCD = AV0NM001.AV0NMXLC; /* lifecycle cd*/
  AV0NW01.AV0NMGAB = AV0NM001.AV0NMGAB; /* GENDER AGE SEARCH TEXT*/

  set AV0NM001 empty;

   /* move search fields back to map:*/
  AV0NM001.XGPCD = AV0NW01.XGPCD; /* product class*/
  AV0NM001.AV0NMSSD = AV0NW01.AV0NWSSD; /* style desc*/
  AV0NM001.AV0NMCSD = AV0NW01.AV0NWCSD; /* color desc*/
  AV0NM001.AV0NMXLC = AV0NW01.XLCCD; /* lifecycle cd*/
  AV0NM001.AV0NMGAB = AV0NW01.AV0NMGAB; /* GENDER AGE SEARCH TEXT*/

   /* move to map:*/
  AV0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  AV0NM001.XXXMAPNM = "AV0NM001"; /* map name*/

   /* Set map selection fields dark:*/
   /* This field will be set defined as temp storage data*/
   /* is moved in.*/

  AV0NW01.AV0NWIX1 = 1; /* set index to 1*/

   /* WHILE AV0NW01.AV0NWIX1 LE 13    ; until end of map lines*/
    /* SET AV0NM001.AV0NMSEL(AV0NWIX1) DARK ;*/
   /* AV0NW01.AV0NWIX1 = AV0NW01.AV0NWIX1 + 1;*/
   /* END ;*/

end // end AV0N014

// BUILD DATA TO DISPLAY
Function AV0N100()
   /* **********************************************************/
   /* BUILD DATA TO DISPLAY*/
   /* ---------------------------------------------------------*/
   /* 1. Set up pg2rec fields for select from dprodg.vsyclr01*/
   /* 2. Select set of data from dprodg.vsyclr01*/
   /* **********************************************************/

  AVWREC.XXXMODID = "100"; /* module id*/

   /* set up select fields in IO3120 work record:*/
  AV0N110();

   /* select set and write selected records to temp storage*/
  AV0N120();

  AV0N129(); /* close dprodg.vsyclr01 cursor*/

  if (AV0NW01.TA5TSQIX == 0) /* if no products written to temp*/
                                   /* storage*/
    converseLib.validationFailed(194); /* no data to display msg*/
    set AV0NM001.AV0NMSSD cursor; /* set map cursor*/
  end

end // end AV0N100

// format data for pg2rec
Function AV0N110()
   /* **********************************************************/
   /* format data for 'like' clause in io3120*/
   /* **********************************************************/

  AVWREC.XXXMODID = "110"; /* set module id*/

  set PG2REC empty; /* clear io3120 work record*/

   /* set up select fields in IO3120 work record:*/
  PG2REC.XGPCD = AV0NM001.XGPCD; /* product class*/

   /* set up search fields for select:*/
  AV0NW01.AV0NWSA = " "; /* clear work field*/

   /* style search field to work search field*/
  AV0NW01.AV0NWSA = AV0NM001.AV0NMSSD;
  AV0N111(); /* format style search field*/

   /* move formatted style field to iomod work rec*/
  PG2REC.SY1STYNM = AV0NW01.AV0NWSB;

  AV0NW01.AV0NWSA = " "; /* clear work field*/
   /* color search field to work search field*/
  AV0NW01.AV0NWSA = AV0NM001.AV0NMCSD;
  AV0N111(); /* format color search field*/

   /* move formatted color field to iomod work rec*/
  PG2REC.SY2CLRDS = AV0NW01.AV0NWSB;

end // end AV0N110

// enclose field with %%
Function AV0N111()
   /* ------------------------------------------------------------*/
   /* Format the color description search field so it may be used*/
   /* by the iomod in a 'like' statement.*/
   /* find the last char of the search stmt passed to this pgm.*/
   /* then move only that portion to the second work field,*/
   /* leaving room at the front and rear of it for the % signs.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = "111"; /* set module id*/

  AV0NW01.AV0NWSB = "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";
  AV0NW01.AV0NWIXY = 30;

  while (AV0NW01.AV0NWIXY >= 1) /* look backwards thru field*/
    if (AV0NW01.AV0NWSAE[AV0NWIXY] == " ") /* last char not found yet*/
      AV0NW01.AV0NWIXY = AV0NW01.AV0NWIXY - 1; /* decrement*/
    else
       /* last char found.  set second work field index to 1 greater*/
       /* than the first work index to make room for the first %.*/
      AV0NW01.AV0NWIXZ = AV0NW01.AV0NWIXY + 1; /* set second work index*/

      while (AV0NW01.AV0NWIXY >= 1) /* still have chars to move*/
        AV0NW01.AV0NWSBE[AV0NWIXZ] = AV0NW01.AV0NWSAE[AV0NWIXY];
        AV0NW01.AV0NWIXY = AV0NW01.AV0NWIXY - 1; /* decrement index*/
        AV0NW01.AV0NWIXZ = AV0NW01.AV0NWIXZ - 1; /* decrement index*/
      end
      AV0NW01.AV0NWSBE[1] = "%"; /* ensure first char is %*/
    end
  end

end // end AV0N111

// select & write dprodg.vsyclr01
Function AV0N120()

  AVWREC.XXXMODID = "120"; /* set module id*/

  AV0N121(); /* select set from dprodg.vsyclr01*/

  AV0N122(); /* fetch first record of select set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if select set successful*/
    AV0NW01.AV0NWEOC = "N"; /* set end of cursor flag to no*/

    while (AV0NW01.AV0NWEOC == "N") /* until end of cursor*/
      AV0N124(); /* load av0nw02 rec with style data*/

      if (AV0NW01.AV0NWFL2 == "Y") /* if valid record to write*/
        if (AV0NW01.AV0NWIX1 == 13) /* if working storage record full*/
          AV0N130(); /* add temporary storage page*/
        end
      end

      if (AV0NW01.AV0NWCTR <= 199) /* if under the maximum recs to process*/
        AV0N122(); /* fetch next dprodg.vsyclr01 rec*/
      end

      if (AV0NW01.AV0NWCTR == 200) /* if maximum records written*/
        AV0NW01.AV0NWEOC = "Y"; /* force end of vsyclr01 cursor*/
      end
    end
  end

   /* add final page to temporary storage:*/
  if (AV0NW01.AV0NWIX1 > 0) /* if partial page formatted*/
    AV0N130(); /* add page to temp storage*/
  end

end // end AV0N120

// declare cursor dprodg.vsyclr01
Function AV0N121()

  AVWREC.XXXMODID = "121"; /* module id*/

   /* call io mod for dprodg.vsyclr01:*/
  try
    call "IO3120" ("S3", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "121"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(75); /* database in use messge*/
  else
    converseLib.validationFailed(76); /* system error message*/
  end

  exit stack; /* exit to display message*/

end // end AV0N121

// select & move data to av0nw02
Function AV0N122()
                        /* av0n122*/
  AVWREC.XXXMODID = "122"; /* module id*/

    /* select next of select set and perform move to display rec*/

  AV0N123(); /* select next dprodg.vsyclr01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
    return; /* return to load data to av0nw02 rec*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* if no more data*/
    AV0NW01.AV0NWEOC = "Y"; /* move yes to end of cursor flag*/
  end
end // end AV0N122

// fetch row dprodg.vsyclr01
Function AV0N123()
   /* ****************************************/
   /* fetch record from dprodg.vsyclr01*/
   /* ****************************************/

  AVWREC.XXXMODID = "123"; /* module id*/

  try
    call "IO3120" ("N3", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "123"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(75); /* database in use message*/
  else
    converseLib.validationFailed(76); /* system error message*/
  end

  exit stack; /* exit to display message*/

end // end AV0N123

// BUILD TEMP STORAGE
Function AV0N124()
   /* ***************************************************/
   /* BUILD TEMP STORAGE FOR DISPLAY*/
   /* ***************************************************/

  AVWREC.XXXMODID = "124"; /* module id*/

  AV0NW01.AV0NWFL2 = "N"; /* set valid product flag to no*/

   /* SET WORKING STORAGE REC INDEX AND TOTAL RECORDS COUNTER*/
  AV0NW01.AV0NWIX1 = AV0NW01.AV0NWIX1 + 1; /* working storage index*/

  AV0N140(); /* get lifecycle code*/

  if (AV0NW01.AV0NWFL2 == "N") /* if valid lifecycle not found*/
    AV0NW01.AV0NWIX1 = AV0NW01.AV0NWIX1 - 1; /* reset index*/
    return; /* do not write rec for display*/
  end

  if (PG2REC.XGACD in XGATBL.XGACD) /* gender age cd*/
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and code is active*/
      AV0NW02.XGAABRV[AV0NWIX1] = XGATBL.XGAABRV[sysVar.arrayIndex];
    else
      AV0NW02.XGAABRV[AV0NWIX1] = "INVALID";
    end
  else
    AV0NW02.XGAABRV[AV0NWIX1] = "INVALID";
  end

  if (AV0NM001.AV0NMGAB > "      ")
    if (XGATBL.XGAABRV[sysVar.arrayIndex] != AV0NM001.AV0NMGAB)
      AV0NW01.AV0NWFL2 = "N";
      AV0NW02.XGAABRV[AV0NWIX1] = "       ";
      AV0NW01.AV0NWIX1 = AV0NW01.AV0NWIX1 - 1; /* reset index*/
      return; /* do not write rec for display*/
    end
  end

  AV0NW02.SY1STNBR[AV0NWIX1] = PG2REC.SY1STNBR; /* style nbr*/
  AV0NW02.SY2CLRID[AV0NWIX1] = PG2REC.SY2CLRID; /* color id*/
  AV0NW02.XDMCD[AV0NWIX1] = PG2REC.XDMCD; /* dim cd*/
  AV0NW02.AV0NWSTD[AV0NWIX1] = PG2REC.SY1SSTNM; /* style desc*/
  AV0NW02.AV0NWCLD[AV0NWIX1] = PG2REC.SY2CLRAB; /* color desc*/

  AV0N150(); /* GET catalogue and page number*/

  AV0NW01.AV0NWCTR = AV0NW01.AV0NWCTR + 1; /* total recs counter*/

end // end AV0N124

// close cursor dprodg.vsyclr01
Function AV0N129()
   /* *************************************************************/
   /* close cursor for dprodg.vsyclr01 data*/
   /* *************************************************************/

  AVWREC.XXXMODID = "129"; /* module id*/

  try
    call "IO3120" ("C3", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "129"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(76); /* system error message*/
  exit stack;

end // end AV0N129

// Add page temp storage
Function AV0N130()
   /* ***********************************************************/
    /* SETUP TO WRITE TEMP STORAGE PAGE*/
   /* ----------------------------------------------------------*/

  AVWREC.XXXMODID = "130"; /* module id*/

  AV0NW02.XXXTSLEN = 958; /* TEMP STORAGE LENGTH*/
  TA5REC.TA5APPID = "AV0N"; /* SET APPLICATION ID*/

  if (AV0NW01.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/
  end

  AV0N131(); /* ADD TEMP STORAGE PAGE*/

  AV0NW01.TA5TSQIX = TA5REC.TA5TSQIX; /* MAX PAGES WRITTEN*/

  AV0NW01.AV0NWIX1 = 0; /* RESET INDEX*/
  set AV0NW02 empty;

end // end AV0N130

// Add page to temp storage
Function AV0N131()

  AVWREC.XXXMODID = "131"; /* module id*/

  try
    call "TA0050" (AV0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* continue processing*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(76); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "131"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end AV0N131

// get lifecycle code
Function AV0N140()
   /* ***************************************************/
    /* GET LIFECYCLE CODE FOR DISPLAY*/
   /* ***************************************************/
    /* If search lifecycle is not specified,*/
    /* the style lifecycle is verified to be effective*/
    /* by date.*/

    /* If search lifecycle is specified the style lifecycle*/
    /* is verified to be effective by date and equal to the*/
    /* specified lifecycle.*/

    /* lifecycle effective verification is as follows:*/
    /* if lifecycle effective date is equal to or less*/
    /* than the current date the color is valid and*/
    /* valid lifecycle flag is set*/
   /* **************************************************/

  AVWREC.XXXMODID = "140"; /* module id*/

  if (AV0NM001.AV0NMXLC == "  ") /* if lifecycle not specified on map*/
    if (PG2REC.SY2CEDT1 <= XX0XW01.XX0XWDAT /* lifecyc dt less or = todays*/
     && PG2REC.SY2CEDT1 != 0)               /* and date not equal 0*/
      AV0NW02.XLCCD[AV0NWIX1] = PG2REC.XLCCD1; /* valid lifecycle*/
      AV0NW01.AV0NWFL2 = "Y"; /* yes to valid lifecycle*/
      return;
    end

    if (PG2REC.SY2CEDT2 <= XX0XW01.XX0XWDAT
     && PG2REC.SY2CEDT2 != 0)
      AV0NW02.XLCCD[AV0NWIX1] = PG2REC.XLCCD2; /* valid lifecycle*/
      AV0NW01.AV0NWFL2 = "Y"; /* yes to valid lifecycle*/
      return;
    end

    if (PG2REC.SY2CEDT3 <= XX0XW01.XX0XWDAT
     && PG2REC.SY2CEDT3 != 0)
      AV0NW02.XLCCD[AV0NWIX1] = PG2REC.XLCCD3; /* valid lifecycle*/
      AV0NW01.AV0NWFL2 = "Y"; /* yes to valid lifecycle*/
      return;
    end

    if (PG2REC.SY2CEDT4 <= XX0XW01.XX0XWDAT
     && PG2REC.SY2CEDT4 != 0)
      AV0NW02.XLCCD[AV0NWIX1] = PG2REC.XLCCD4; /* valid lifecycle*/
      AV0NW01.AV0NWFL2 = "Y"; /* yes to valid lifecycle*/
      return;
    end
  end

   /* if search lifecycle not specified and effective lifecycle*/
   /* not found, return to calling process:*/
  if (AV0NM001.AV0NMXLC == "  ")
    return;
  end

   /* if lifecycle is specified on map:*/
  if (PG2REC.SY2CEDT1 <= XX0XW01.XX0XWDAT /* lifecyc date less or = todays*/
   && PG2REC.SY2CEDT1 != 0)               /* and date not equal 0*/
    if (PG2REC.XLCCD1 == AV0NM001.AV0NMXLC) /* if lifecycle = specified lifecyc*/
      AV0NW02.XLCCD[AV0NWIX1] = PG2REC.XLCCD1; /* move to work rec*/
      AV0NW01.AV0NWFL2 = "Y";
                                   /* move yes to valid lifecyc flag*/
      return;
    else
      return;
    end
  end

  if (PG2REC.SY2CEDT2 <= XX0XW01.XX0XWDAT
   && PG2REC.SY2CEDT2 != 0)
    if (PG2REC.XLCCD2 == AV0NM001.AV0NMXLC) /* if lifecycle = specified lifecyc*/
      AV0NW02.XLCCD[AV0NWIX1] = PG2REC.XLCCD2; /* move to work rec*/
      AV0NW01.AV0NWFL2 = "Y";
                                   /* move yes to valid lifecyc flag*/
      return;
    else
      return;
    end
  end

  if (PG2REC.SY2CEDT3 <= XX0XW01.XX0XWDAT
   && PG2REC.SY2CEDT3 != 0)
    if (PG2REC.XLCCD3 == AV0NM001.AV0NMXLC) /* if lifecycle = specified lifecyc*/
      AV0NW02.XLCCD[AV0NWIX1] = PG2REC.XLCCD3; /* move to work rec*/
      AV0NW01.AV0NWFL2 = "Y";
                                   /* move yes to valid lifecyc flag*/
      return;
    else
      return;
    end
  end

  if (PG2REC.SY2CEDT4 <= XX0XW01.XX0XWDAT
   && PG2REC.SY2CEDT4 != 0)
    if (PG2REC.XLCCD4 == AV0NM001.AV0NMXLC) /* if lifecycle = specified lifecyc*/
      AV0NW02.XLCCD[AV0NWIX1] = PG2REC.XLCCD4; /* move to work rec*/
      AV0NW01.AV0NWFL2 = "Y";
                                   /* move yes to valid lifecyc flag*/
      return;
    else
      return;
    end
  end

end // end AV0N140

// get catalog and page nbr
Function AV0N150()
   /* get catalogue and page where product is listed*/

  AVWREC.XXXMODID = "150"; /* module id*/

  AV0N151(); /* get current season*/

  set SYNREC empty; /* clear iomod record*/

   /* set up work record for io4480 - catalog page lookup*/
  SYNREC.XGPCD = PG2REC.XGPCD;
  SYNREC.SY1STNBR = PG2REC.SY1STNBR;
  SYNREC.SY2CLRID = PG2REC.SY2CLRID;
  SYNREC.XDMCD = PG2REC.XDMCD;

  AV0N153(); /* set cursor for catalog and page*/

  AV0N154(); /* fetch and process catalog info for style*/

  AV0N156(); /* close catalog page cursor*/

end // end AV0N150

// find current & future season
Function AV0N151()
   /* -------------------- av0n151 -------------------------------*/

   /* find current season code and date in season table:*/
  if (AV0NW01.XGPCD == "02" || 
  AV0NW01.XGPCD == "03")

    AVWREC.XXXMODID = "151"; /* module id*/

    /* move current date to season lookup work date:*/
    AV0NW01.AV0NWDT2 = XX0XW01.XX0XWDAT;

    AV0N152(); /* season lookup from season table*/

    /* move current season to catalog id current season:*/
    AV0NW01.AV0NWCCS = XSNTBL.XSECD[sysVar.arrayIndex];

    /* move current season year to work format year:*/
    AV0NW01.AV0NWWYR = XSNTBL.XSNYR[sysVar.arrayIndex];

    /* move work year yy to current season catalog id season year:*/
    AV0NW01.AV0NWCCY = AV0NW01.AV0NWWYY;


    /* calculate future season for next season catalog id*/

    /* add six months to current month:*/
    AV0NWDT1 = XX0XW01.XX0XWDAT;
                                   /* move current date to nxt sesn wrk dt*/
    AV0NW01.AV0NWDM1 = AV0NW01.AV0NWDM1 + 6;
                                   /* add six months to current month*/

    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* IF AV0NW01.AV0NWDM1 > 12;        /* if year change*/
    /* AV0NW01.AV0NWDY1 = AV0NW01.AV0NWDY1 + 1;/* set future season year*/
    /* AV0NW01.AV0NWDM1 = AV0NW01.AV0NWDM1 - 12;/* calculate month*/
    /* END;*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    if (AV0NW01.AV0NWDM1 > 12) /* if year change*/
      AV0NW01.AV0NWDCY = AV0NW01.AV0NWDCY + 1; /* set future season year*/
      AV0NW01.AV0NWDM1 = AV0NW01.AV0NWDM1 - 12; /* calculate month*/
    end
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/

    if (AV0NW01.AV0NWDD1 > 28)
                                   /* NOT ALL MONTHS HAVE MORE THAN 28 DAYS*/
      AV0NW01.AV0NWDD1 = 28;
    end

    move AV0NWDT1 to AV0NWDT2 withV60Compat; /* move current date + 6 months to work*/
                                   /* date*/

    AV0N152(); /* season lookup in xsntbl*/

    /* move next season code to catalog id season:*/
    AV0NW01.AV0NWNCS = XSNTBL.XSECD[sysVar.arrayIndex];

    /* move next season year to work format year:*/
    AV0NW01.AV0NWWYR = XSNTBL.XSNYR[sysVar.arrayIndex];

    /* move work year yy to next season catalog id season year*/
    AV0NW01.AV0NWNCY = AV0NW01.AV0NWWYY;

  end

    /* -------------  end of process av0n151  ------------------*/
end // end AV0N151

// season lookup from xsntbl
Function AV0N152()
   /* -------------------- av0n152 -------------------------------*/

  AVWREC.XXXMODID = "152"; /* module id*/

  AV0NW01.AV0NWFL3 = "N"; /* season found flag*/
  if (AV0NW01.XGPCD == "02")
    sysVar.arrayIndex = 1;

    while (XSNTBL.XSECD[sysVar.arrayIndex] != "99" /* search until end of table*/
     && AV0NW01.AV0NWFL3 == "N") /* or date match found*/

      /* if current date greater or equal table season begin date*/
      if (AV0NW01.AV0NWDT2 >= XSNTBL.XSNFSBDT[sysVar.arrayIndex]
       /* and current date less or equal table*/
       /* season end date*/
       && AV0NW01.AV0NWDT2 <= XSNTBL.XSNFSXDT[sysVar.arrayIndex])
        AV0NW01.AV0NWFL3 = "Y"; /* valid season found*/
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    end

  else
    sysVar.arrayIndex = 1;

    while (XSNTBL.XSECD[sysVar.arrayIndex] != "99" /* search until end of table*/
     && AV0NW01.AV0NWFL3 == "N") /* or date match found*/

      /* if current date greater or equal table season begin date*/
      if (AV0NW01.AV0NWDT2 >= XSNTBL.XSNBDT[sysVar.arrayIndex]
       /* and current date less or equal table*/
       /* season end date*/
       && AV0NW01.AV0NWDT2 <= XSNTBL.XSNXDT[sysVar.arrayIndex])
        AV0NW01.AV0NWFL3 = "Y"; /* valid season found*/
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    end
  end

  if (AV0NW01.AV0NWFL3 == "N") /* IF FOUND FLAG = NO*/
    converseLib.validationFailed(12); /* 'season not found' msg*/
    exit stack; /* exit to display map - restart from*/
                                   /* top*/
  else /* if season found*/
    return; /* ; return with valid season info*/
  end

    /* -------------  end of process av0n152  ------------------*/
end // end AV0N152

// set catalog/page cursor
Function AV0N153()
   /* ------------------------------------------------------------*/
   /* Set the cursor for catalog page number (dprod.vcatlg01)*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = "151"; /* Module identification*/

  try
    call "IO4880" ("S1", SQLCA, SYNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "AV0N153";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCATLG01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYNREC.SYNDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV0N153

// get catalog/page process
Function AV0N154()
   /* ------------------------------------------------------------*/
   /* Calculate the catalog seasons and years.*/
   /* ------------------------------------------------------------*/
   /* Use the available catalog information as follows:*/
     /* 1.  Use the current season catalog (if available)*/
     /* 2.  otherwise, use the next season catalog (if available)*/
     /* 3.  otherwise, use the first catalog found (if present)*/
     /* 4.  otherwise, move 'n/a' (not applicable) to catalog.*/
   /* To accomplish this move the default (#4) to the catalog*/
   /* field then loop through the catalog entries once, until*/
   /* the end of them or the current season catalog is found.*/
   /* While we are looping fill the fields with the catalog data*/
   /* found, overlaying only if the data is higher on the list.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = "154"; /* module id*/

  AV0NW01.AV0NWSW1 = "N"; /* Init end of cursor flag*/
  AV0NW02.AV0NWCPN[AV0NWIX1] = "N/A"; /* Default to this*/

  AV0N155(); /* fetch first catalog/pg row*/
  if (AV0NW01.AV0NWSW1 != "Y") /* first one found*/
     /* move to temp storage rec*/
    AV0NW02.AV0NWCID[AV0NWIX1] = SYNREC.SYRCATID; /* Catalog identifier*/
    AV0NW02.AV0NWPNB[AV0NWIX1] = SYNREC.SYNCTPGN; /* Catalog page number*/
  end

  while (AV0NW01.AV0NWSW1 != "Y")
    AV0NW01.AV0NWCWA = SYNREC.SYRCATID; /* move cat info to wrk area*/
    if (AV0NW01.AV0NWCW2 == AV0NW01.AV0NWCCT) /* current sesn cat sesn yr*/
       /* move to temp storage rec*/
      AV0NW02.AV0NWCID[AV0NWIX1] = SYNREC.SYRCATID; /* Catalog id*/
      AV0NW02.AV0NWPNB[AV0NWIX1] = SYNREC.SYNCTPGN; /* Cat page nbr*/
      AV0NW01.AV0NWSW1 = "Y"; /* stop loop*/
    else
      if (AV0NW01.AV0NWCW2 == AV0NW01.AV0NWNCT) /* next sesn cat sesn yr*/
         /* move to temp storage rec*/
        AV0NW02.AV0NWCID[AV0NWIX1] = SYNREC.SYRCATID; /* Cat id*/
        AV0NW02.AV0NWPNB[AV0NWIX1] = SYNREC.SYNCTPGN; /* Cat page nbr*/
      end
    end
    AV0N155(); /* fetch next catalog/page row*/
  end

end // end AV0N154

// fetch catalog/page row
Function AV0N155()
   /* ------------------------------------------------------------*/
   /* Fetch catalog row.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = "155"; /* module id*/

  try
    call "IO4880" ("N1", SQLCA, SYNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If not found, indicate n/a.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AV0NW01.AV0NWSW1 = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "AV0N155";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCATLG01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYNREC.SYNDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV0N155

// close catalog/page cursor
Function AV0N156()
   /* ------------------------------------------------------------*/
   /* close catalog cursor.*/
   /* ------------------------------------------------------------*/

   /* MOVE '156' TO AVWREC.XXXMODID   ; Module identification*/

  try
    call "IO4880" ("C1", SQLCA, SYNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "AV0N156";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCATLG01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYNREC.SYNDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV0N156

// BUILD MAP ONE BODY
Function AV0N200()
   /* *******************************************************/
   /* INITIALIZE MAP FIELDS*/
   /* ------------------------------------------------------*/
   /* READ A PAGE FROM TEMP STORAGE*/
   /* ------------------------------------------------------*/
   /* MOVE TEMP STORAGE FIELDS TO MAP*/
   /* *******************************************************/

  AVWREC.XXXMODID = "200"; /* module id*/

  AV0N210(); /* initialize map fields*/

  AV0N220(); /* read a temp storage page*/

  AV0NW01.AV0NWIX1 = 1; /* set map index to 1*/

  while (AV0NW01.AV0NWIX1 <= 13) /* load each map line*/
    AV0N230(); /* with data from temp storage*/
  end

end // end AV0N200

// initialize map
Function AV0N210()
   /* ------------------------------------------------------*/
    /* 1. Clear map*/
    /* 2. Load constant map data*/
    /* 3. Move saved map fields to map*/
    /* 4. Set variable map fields dark*/
   /* ------------------------------------------------------*/

  AVWREC.XXXMODID = "210"; /* module id*/

  set AV0NM001 initial; /* clear map*/

   /* ------------------------------------------------------------*/
   /* load map constant fields:*/
   /* ------------------------------------------------------------*/
   /* move to map:*/
  AV0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  AV0NM001.XXXMAPNM = "AV0NM001"; /* map name*/

   /* move temporary storage pages to map:*/
  AV0NM001.AV0NMCPG = AV0NW01.XXXTSPAG; /* move current page to map*/
  AV0NM001.AV0NMTPG = AV0NW01.TA5TSQIX; /* move total pages to map*/

   /* move saved search fields to map:*/
  AV0NM001.XGPCD = AV0NW01.XGPCD; /* gpc*/
  AV0NM001.AV0NMSSD = AV0NW01.AV0NWSSD; /* style search description*/
  AV0NM001.AV0NMCSD = AV0NW01.AV0NWCSD; /* color description search*/
  AV0NM001.AV0NMXLC = AV0NW01.XLCCD; /* lifecycle search field*/
  AV0NM001.AV0NMGAB = AV0NW01.AV0NMGAB; /* GENDER TEXT*/


   /* The select option is now disabled by user request*/
   /* code to set it defined is disabled. Code and documentation*/
   /* are being left in place in case it is decided to enable the*/
   /* option.*/

   /* n/a This field is set defined as temp storage data*/
   /* n/a is moved in.*/

   /* Set map selection fields dark:*/
   /* MOVE 1 TO AV0NW01.AV0NWIX1      ; set index to 1*/

   /* WHILE AV0NW01.AV0NWIX1 LE 13    ; until end of map lines*/
    /* SET AV0NM001.AV0NMSEL(AV0NWIX1) DARK ;*/
    /* AV0NW01.AV0NWIX1 = AV0NW01.AV0NWIX1 + 1;*/
   /* END ;*/

end // end AV0N210

// read temporary storage
Function AV0N220()
   /* ------------------------------------------------------*/
               /* read av0n temporary storage*/
   /* ------------------------------------------------------*/

  AVWREC.XXXMODID = "220"; /* module number*/

   /* set up to call temporary storage program:*/

  set AV0NW02 empty; /* clear display storage rec*/
  set TA5REC empty; /* clear temporary storage rec*/

   /* set up temp storage record:*/
  AV0NW02.XXXTSLEN = 958; /* page length*/
  TA5REC.TA5TSQIX = AV0NW01.XXXTSPAG; /* desired page nbr*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* application id*/
  TA5REC.TA5FNCCD = "R"; /* 'read' function code*/

  try
    call "TA0050" (AV0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage program*/

   /* -------------------------------------------------------*/
   /* if successful return to continue main process*/
   /* -------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA5REC.TA5RTNCD == 0)          /* normal ta0050 return code*/
    return; /* return to continue processing*/
  end

   /* -------------------------------------------------------*/
   /* otherwise, indicate that a system error has occurred*/
   /* -------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
  converseLib.validationFailed(76); /* 'system error' msg*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "220"; /* module number*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/
  exit stack; /* exit to display map*/

end // end AV0N220

// Format the display data
Function AV0N230()
   /* **********************************************************/
   /* MOVE TEMPORARY STORAGE PAGE FIELDS TO MAP*/
   /* **********************************************************/

  AVWREC.XXXMODID = "230"; /* module id*/

  if (AV0NW02.SY1STNBR[AV0NWIX1] > "  ") /* if data in record*/
     /* IF AV0NW01.AV0NWIX1 EQ 1      ; First select field*/
       /* SET AV0NM001.AV0NMSEL(AV0NWIX1) CURSOR; Position cursor*/
     /* END ;*/

     /* SET AV0NM001.AV0NMSEL(AV0NWIX1) DEFINED;*/
    AV0NM001.SY1STNBR[AV0NWIX1] = AV0NW02.SY1STNBR[AV0NWIX1];
    AV0NM001.SY2CLRID[AV0NWIX1] = AV0NW02.SY2CLRID[AV0NWIX1];
    AV0NM001.XDMCD[AV0NWIX1] = AV0NW02.XDMCD[AV0NWIX1];
    AV0NM001.AV0NMSTD[AV0NWIX1] = AV0NW02.AV0NWSTD[AV0NWIX1];
    AV0NM001.AV0NMCLD[AV0NWIX1] = AV0NW02.AV0NWCLD[AV0NWIX1];
    AV0NM001.AV0NMCPN[AV0NWIX1] = AV0NW02.AV0NWCPN[AV0NWIX1];
    AV0NM001.XLCCD[AV0NWIX1] = AV0NW02.XLCCD[AV0NWIX1];
    AV0NM001.XGAABRV[AV0NWIX1] = AV0NW02.XGAABRV[AV0NWIX1];

  end

  AV0NW01.AV0NWIX1 = AV0NW01.AV0NWIX1 + 1; /* Increment line index*/

end // end AV0N230

// DISPLAY MAP ONE
Function AV0N300()
   /* IF AVWREC.XXXMSGNO GT 0*/
     /* AND EZEMNO = 0;*/
     /* MOVE AVWREC.XXXMSGNO TO EZEMNO;*/
   /* END;*/

  AV0NM001.XXXMODID = AVWREC.XXXMODID;
  converse AV0NM001 ;

  AVWREC.XXXMODID = " "; /* Module identification*/
  AVWREC.XXXMSGNO = 0; /* Message number*/


end // end AV0N300

// Check attention identifier
Function AV0N400()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = "400"; /* Module identification*/

  if (AV0NM001.CAITEM != " " /* if data in fastpath to option*/
   && AV0NM001.CATOAP == " ") /* and the application is blank*/
    set AV0NM001.CATOAP cursor, bold;
    converseLib.validationFailed(115); /* 'enter to application' msg*/
    exit stack; /* flow to display map*/
  end


  if (AV0NM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
         /* IF AV0NM001.CATOAP EQ 'AV0P'  ; if path avail inquiries*/
       /* continue processing*/
         /* ELSE ;*/
      COMMAREA.CAFROMAP = "AV0N"; /* set up commarea for transfer*/
      COMMAREA.CATOAP = AV0NM001.CATOAP;
      COMMAREA.CAITEM = AV0NM001.CAITEM;
      AV0N013(); /* Purge temporary storage*/
      XPAV002(); /* Exit to another application*/
       /* if exit not successful*/
      AV0NM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      set AV0NM001.CATOAP cursor, bold; /* Highlight*/
      exit stack; /* Exit to display map*/
         /* END ;*/
    else
      converseLib.validationFailed(279); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "AV0M"; /* TO application*/
    end

    AV0N013(); /* Purge temporary storage*/
    COMMAREA.CAFROMAP = "AV0N"; /* set up commarea for transfer*/
    XPAV002(); /* Exit to another application*/

     /* if exit not successful*/
    AV0NM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    set AV0NM001.CATOAP cursor, bold; /* Highlight*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* if valid pf key pressed*/
   || converseVar.eventKey is pf8 
   /* OR EZEAID IS PF12;*/
   || converseVar.eventKey is enter)
                                     /* continue processing*/
  else
    converseLib.validationFailed(279); /* 'invalid option' msg*/
    exit stack; /* exit to display map*/
  end


end // end AV0N400

// edit selections & xfer
Function AV0N500()
   /* ------------------------------------------------------------*/
   /* 1. Edit for a selected product*/
   /* 2. Edit for valid pfkey used with product selection*/
   /* 3. Calculate page backward.*/
   /* 4. Calculate page forward.*/
   /* 5. load commarea to application for transfer, depending*/
      /* on pfkey pressed.*/
   /* 6. Transfer applications.  If transfer not successful*/
      /* error message is displayed*/
   /* 7. If enter key is pressed and map 'to application' is not*/
      /* entered and no product is selected, the data last*/
      /* displayed will be redisplayed.*/

   /* NOTE: The option to select a product and transfer to av0p*/
         /* with the key is disabled.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = "500"; /* move module id*/

   /* PERFORM AV0N510                 ; edit for selected product*/
   /* IF EZEMNO NE 0                  ; if error found*/
    /* EZERTN                     ; exit to display error message*/
   /* END ;*/

   /* IF EZEAID IS ENTER              ; ENTER was pressed*/
    /* IF AV0NM001.CATOAP EQ ' '  ; if no application to xfer to*/
      /* IF AV0NW01.AV0NWIX2 GT 0    ; if product is selected*/
   /* MOVE 115 TO EZEMNO   ; 'enter xfer application' msg*/
   /* EZERTN               ; exit to display error message*/
     /* ELSE ;*/
       /* EZERTN            ; exit to display data last displayed*/
     /* END ;*/
   /* END ;*/
   /* END ;*/

   /* IF AV0NW01.AV0NWIX2 GT 0     ; if selected product index set*/
   /* IF EZEAID IS ENTER          ; xfer to requested application*/
    /* OR EZEAID IS PF12           ; xfer to av0p requested*/
    /* PERFORM AV0N520             ; move selected product key*/
   /* ELSE ;*/
    /* MOVE 116 TO EZEMNO          ; invalid option msg*/
    /* EZERTN                      ; exit to display error msg*/
   /* END ;*/
   /* END ;*/


  if (converseVar.eventKey is pf7) /* page back*/
    AV0NW01.XXXTSPAG = AV0NW01.XXXTSPAG - 1; /* current page minus 1*/

     /* if requested page less than 1*/
     /* move no more data message and exit to display map*/
    if (AV0NW01.XXXTSPAG < 1)
      converseLib.validationFailed(141); /* 'no more products to page forward to' msg*/
       /* MOVE 'N' TO AV0nW01.AV0nWFFL  ; move no to format map flag*/
      AV0NW01.XXXTSPAG = 1; /* reset requested page*/
    end
    return; /* return to display map*/
  end


  if (converseVar.eventKey is pf8) /* page forward*/
    AV0NW01.XXXTSPAG = AV0NW01.XXXTSPAG + 1; /* current page + 1*/

     /* if requested page greater than temp storage highest page*/
     /* move no data message and exit to display map*/
    if (AV0NW01.XXXTSPAG > AV0NW01.TA5TSQIX)
      converseLib.validationFailed(140); /* 'no products to page forward to' msg*/
       /* MOVE 'N' TO AV0nW01.AV0nWFFL  ; move no to format map flag*/
      AV0NW01.XXXTSPAG = AV0NW01.TA5TSQIX; /* reset requested page*/
    end
    return;
  end


   /* load transfer application to commarea record:*/
   /* IF EZEAID IS PF12;*/
    /* MOVE 'AV0P' TO COMMAREA.CATOAP;*/
   /* END ;*/

  if (converseVar.eventKey is enter /* if enter is pressed*/
   && AV0NM001.CATOAP > " ")        /* and map to application entered*/
    COMMAREA.CATOAP = AV0NM001.CATOAP;
  else
    return;
  end

   /* the only option left at this point is transfer.*/
   /* the transfer to application is filled in above.*/

  COMMAREA.CAFROMAP = "AV0N"; /* set up commarea for transfer*/
  COMMAREA.CAITEM = AV0NM001.CAITEM;
  AV0N013(); /* Purge temporary storage*/
  XPAV002(); /* Exit to another application*/
   /* if exit not successful*/
  AV0NM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  set AV0NM001.CATOAP cursor, bold; /* Highlight*/
  exit stack; /* Exit to display map*/

end // end AV0N500

// reset hilited fields
Function AV0N600()

  AVWREC.XXXMODID = "600"; /* module id*/

  set AV0NM001.XGPCD initialAttributes; /* product class*/
  set AV0NM001.AV0NMSSD cursor, normal;
                                   /* style search description field*/
  set AV0NM001.AV0NMCSD initialAttributes; /* color search descripiton field*/
  set AV0NM001.AV0NMXLC initialAttributes; /* lifecycle search field*/
  set AV0NM001.AV0NMGAB initialAttributes; /* GENDER AGE DEFINITION*/

   /* MOVE 1 TO AV0NW01.AV0NWIX1      ; set map index to 1*/

   /* WHILE AV0NW01.AV0NWIX1 LE 13 ; for each product select field*/
    /* SET AV0NM001.AV0NMSEL(AV0NWIX1) DEFINED;*/
    /* AV0NW01.AV0NWIX1 = AV0NW01.AV0NWIX1 + 1;add to mapindex*/
   /* END ;*/

  set AV0NM001.CATOAP initialAttributes; /* transfer to application*/
  set AV0NM001.CAITEM initialAttributes; /* transfer to item*/

end // end AV0N600

//*** RECORD=AV0NW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AV0NW01 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 AV0NWDFL AV0NWDFL ; 
  10 AV0NWFL1 AV0NWFL1 ; 
  10 AV0NWFL2 AV0NWFL2 ; 
  10 AV0NWFL3 AV0NWFL3 ; 
  10 AV0NWEOC AV0NWEOC ; 
  10 AV0NWSW1 AV0NWSW1 ; 
  10 AV0NWSAV AV0NWSAV ; 
    15 XGPCD XGPCD ; 
    15 AV0NWSSD AV0NWSSD ; 
    15 AV0NWCSD AV0NWCSD ; 
    15 XLCCD XLCCD ; 
    15 AV0NMGAB AV0NMGAB ; 
  10 AV0NWSA AV0NWSA ; 
    15 AV0NWSAE AV0NWSAE [30] ; 
  10 AV0NWSB AV0NWSB ; 
    15 AV0NWSBE AV0NWSBE [30] ; 
  10 AV0NWIX1 AV0NWIX1 ; 
  10 AV0NWIX2 AV0NWIX2 ; 
  10 AV0NWIXY AV0NWIXY ; 
  10 AV0NWIXZ AV0NWIXZ ; 
  10 AV0NWCTR AV0NWCTR ; 
  10 AV0NWDT1 AV0NWDT1 ; 
    15 AV0NWDCY AV0NWDCY ; 
      20 AV0NWDC1 AV0NWDC1 ; 
      20 AV0NWDY1 AV0NWDY1 ; 
    15 AV0NWDM1 AV0NWDM1 ; 
    15 AV0NWDD1 AV0NWDD1 ; 
  10 AV0NWDT2 AV0NWDT2 ; 
  10 AV0NWWYR AV0NWWYR ; 
    15 AV0NWWCC AV0NWWCC ; 
    15 AV0NWWYY AV0NWWYY ; 
  10 AV0NWCCT AV0NWCCT ; 
    15 AV0NWCCS AV0NWCCS ; 
    15 AV0NWCCY AV0NWCCY ; 
  10 AV0NWNCT AV0NWNCT ; 
    15 AV0NWNCS AV0NWNCS ; 
    15 AV0NWNCY AV0NWNCY ; 
  10 AV0NWCWA AV0NWCWA ; 
    15 AV0NWCW1 AV0NWCW1 ; 
    15 AV0NWCW2 AV0NWCW2 ; 
end // end AV0NW01

//*** RECORD=AV0NW02 ****
//                        av0nw02
// 
// This record is a temporary storage work record.
// 
// It holds up to 13 rows of data which is the result
// of a select set from the dprodg.vsyclr01 table using
// gpc and a like clause search on style name and/or
// color description as selection criteria.
// ***********************
Record AV0NW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(954) ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR [13] ; 
    10 SY2CLRID SY2CLRID [13] ; 
    10 XDMCD XDMCD [13] ; 
    10 AV0NWSTD AV0NWSTD [13] ; 
    10 AV0NWCLD AV0NWCLD [13] ; 
    10 AV0NWCPN AV0NWCPN [13] ; 
      15 AV0NWCID AV0NWCID ; 
      15 AV0NWPNB AV0NWPNB ; 
    10 XLCCD XLCCD [15] ; 
    10 XGAABRV XGAABRV [15] ; 
end // end AV0NW02

// GENDER SEARCH TEXT
DataItem AV0NMGAB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wrk area for cat current sesn
DataItem AV0NWCCS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// catalog current season/year
DataItem AV0NWCCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wrk area for cat current year
DataItem AV0NWCCY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Catalog Identifier
DataItem AV0NWCID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color description
DataItem AV0NWCLD char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// catalog id & page nbr
DataItem AV0NWCPN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save color search desc
DataItem AV0NWCSD char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total selected records counter
DataItem AV0NWCTR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Catalog Id - first 2 bytes
DataItem AV0NWCW1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Catalog Id - season/year
DataItem AV0NWCW2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Catalog Identifier - work area
DataItem AV0NWCWA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work century
DataItem AV0NWDC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem AV0NWDCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem AV0NWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// request data flag
DataItem AV0NWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work month
DataItem AV0NWDM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work date ccyymmdd
DataItem AV0NWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// season table lookup date
DataItem AV0NWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work year
DataItem AV0NWDY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dprodg.vsyclr01 cursor sw
DataItem AV0NWEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem AV0NWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid life cycle flag
DataItem AV0NWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season found flag
DataItem AV0NWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map & temp storage index
DataItem AV0NWIX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save index of selected prod
DataItem AV0NWIX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format search field index1
DataItem AV0NWIXY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format search field index2
DataItem AV0NWIXZ num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wrk area for cat next sesn
DataItem AV0NWNCS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// catalog next sesn/year
DataItem AV0NWNCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wrk area for cat next year
DataItem AV0NWNCY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Catalog Page Number
DataItem AV0NWPNB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// search format field
DataItem AV0NWSA char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search format char
DataItem AV0NWSAE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save map search fields
DataItem AV0NWSAV char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted search field
DataItem AV0NWSB char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted search char
DataItem AV0NWSBE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save style search desc
DataItem AV0NWSSD char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style description
DataItem AV0NWSTD char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// catalog cursor sw
DataItem AV0NWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work century
DataItem AV0NWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century year
DataItem AV0NWWYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem AV0NWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

