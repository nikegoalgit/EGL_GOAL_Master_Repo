package av0w;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=AV0W ****
// ;**********************************************************
// This application displays product keys of products that have
// become unavailable during the business day.  The user may
// then indicate which products for which he/she wants to view
// size detail.  The selected product keys may then be
// transferred to application av0x for record display and
// maintenance.
// ;
// ;**********************************************************
// MAINTENANCE HISTORY:
// 
//  DATE       USER        DESCRIPTION
//  10/02/91   dbruih
//  10/22/91   bantho   chd screen, added pop-up windows
//  10/02/91   dbruih   remove seasonality
//  06/10/93   dbruih   added filler to av0ww04 rec to match
//                      receiving record description in AV0X.
// *********************
Program AV0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV0WW01 AV0WW01; // record
  AV0WW02 AV0WW02; // record
  AV0WW03 AV0WW03; // record
  AV0WW04 AV0WW04; // record
  AV8REC AV8REC; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLCTBL; // table
  use XOWTBL; // table
  use XQATBL; // table
  use AV0WM.AV0WM010,  // forms
      AV0WM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AV0W100: AV0W100();
    goto AV0W200;
    AV0W200: AV0W200();
    goto AV0W200;
  end // end main
end // end AV0W

// application entry
Function AV0W100()
   /* --------------------------- av0w100 ------------------------*/

                         /* application entry*/

   /* --------------------------- av0w100 ------------------------*/


  XPAV001(); /* appl entry routine*/
                            /* ; moves xferred data from commarea*/

  AV0W110(); /* initialize program work fields*/

  VGVar.handleHardIOErrors = 1; /* return all file errors*/
  converseVar.commitOnConverse = 1; /* commit on every converse*/

   /* --------------------------- av0w100 ------------------------*/
end // end AV0W100

// initialize program work fields
Function AV0W110()
   /* --------------------------- av0w110 ------------------------*/

                    /* initialize program work fields*/

   /* --------------------------- av0w110 ------------------------*/


  AV0W111(); /* clear work records*/

   /* set defaults*/

  AV0WW02.AV0WW-LIFE-CYCLE-CD = "10";
  if (AV0WW02.AV0WW-LIFE-CYCLE-CD in XLCTBL.XLCCD)
    AV0WW02.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
  end
  AV0WW02.AV0WW-QUALITY-CD = "01";
  if (AV0WW02.AV0WW-QUALITY-CD in XQATBL.XQACD)
    AV0WW02.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  end
  AV0WW02.AV0WW-OWNER-CD = "00";

  AV0W220(); /* format map*/

  AV0W112(); /* set flags*/

   /* --------------------------- av0w110 ------------------------*/
end // end AV0W110

// initialize program records
Function AV0W111()
   /* --------------------------- av0w111 ------------------------*/

                    /* initialize program work fields*/

   /* --------------------------- av0w111 ------------------------*/

  set AV0WW01 empty; /* clear av0w display storage*/
  set AV0WW02 empty; /* clear av0w work fields*/
  set AV0WW03 empty; /* clear av0x display storage rec*/
  set AV0WW04 empty; /* clear av0x work fields rec*/

  set SQLCA empty; /* db2 error handling work record*/
  set TAEREC empty; /* error diagnosis record*/
  set TA1REC empty; /* error diagnosis record*/
  set TA5REC empty; /* temporary storage record*/

   /* --------------------------- av0w111 ------------------------*/
end // end AV0W111

// initialize program flags
Function AV0W112()
   /* --------------------------- av0w112 ------------------------*/
                          /* set program flags*/
   /* --------------------------- av0w112 ------------------------*/

  AV0WW02.AV0WWDFL = "N"; /* no to request data flag*/
  AV0WW02.AV0WWFFL = "N"; /* no to format map flag*/
  AV0WW02.AV0WWIFL = "Y"; /* yes to intialize flag*/

   /* --------------------------- av0w112 ------------------------*/
end // end AV0W112

// main process module
Function AV0W200()
   /* ------------------------------------------------------------*/
                            /* av0w200*/
                           /* main process*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors*/
    if (AV0WW02.AV0WWIFL == "Y") /* if initialize flag = yes*/
      AV0W201(); /* get program initial data*/
    end
  end

  if (converseVar.validationMsgNum == 0) /* if no errors*/
    if (AV0WW02.AV0WWDFL == "Y") /* if request data flag = yes*/
      AV0W210(); /* get data to display*/
      AV0WW02.AV0WWDFL = "N"; /* move no to request data flag*/
    end
  end

  if (converseVar.validationMsgNum == 0) /* if no errors*/
    if (AV0WW02.AV0WWFFL == "Y") /* if format map flag = yes*/
      AV0W220(); /* format the map with the data*/
      AV0WW02.AV0WWFFL = "N"; /* move no to request data flag*/
    end
  end

  AV0W230(); /* converse map*/

  AV0W240(); /* check pf keys and transfers*/

  AV0W250(); /* reset hilited fields*/

  AV0W260(); /* verify selection indicators*/

   /* -----------------------------------------------------------*/
   /* if no errors have been found, move the data to temp storage*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* if error has occurred*/
    exit stack; /* go to restart main process*/
  end

  AV0W270(); /* process selections*/


end // end AV0W200

// get initial data routines
Function AV0W201()
   /* --------------------------- av0w201 ------------------------*/
                         /* application entry*/
   /* --------------------------- av0w201 ------------------------*/

  if (AV0WM010.XGPCD == " "           /* if gpc not filled in*/
   || AV0WM010.XGPCD != AV0WW02.XGPCD /* of gpc not equal save*/
   || AV0WM010.XGPABRV == " ")        /* or gpc descript not filled in*/
    AV0W202(); /* get gpc code and description*/
  end

  if (converseVar.validationMsgNum != 0) /* if error in routine*/
    return; /* exit to display map*/
  end


   /* if gpc is apparel, the style range option is not functional*/

  if (AV0WM010.XGPCD == "03") /* if apparel product class requested*/
    if (AV0WM010.AV0WMLST != " " /* and a style range entered*/
     || AV0WM010.AV0WMHST != " ")
       /* move 'style range option invalid for gpc '03' msg*/
      converseLib.validationFailed(198);
      set AV0WM010.AV0WMLST cursor, bold;
      set AV0WM010.AV0WMHST bold;
      return;
    end
  end


   /* if gpc is footwear a low - high style range must be entered:*/

  if (AV0WM010.XGPCD == "02") /* if gpc equal footwear*/
    if (AV0WM010.AV0WMLST == " " /* if map low style = spaces*/
     || AV0WM010.AV0WMHST == " ") /* OR MAP HIGH STYLE = SPACES*/
      AV0W204(); /* get style range*/
    else
      if (AV0WM010.AV0WMLST != AV0WW02.AV0WWLST /* if low style ne save*/
       || AV0WM010.AV0WMHST != AV0WW02.AV0WWHST) /* if high style ne save*/
        AV0W204(); /* get style range*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* if error in routine*/
    return; /* exit to display map*/
  end


  if (AV0WM010.AV0WM-LIFE-CYCLE-CD != AV0WW02.AV0WW-LIFE-CYCLE-CD)
    AV0W205(); /* get life cycle code*/
  end

  if (converseVar.validationMsgNum != 0) /* if error in routine*/
    return; /* exit to display map*/
  end

  if (AV0WM010.AV0WM-QUALITY-CD != AV0WW02.AV0WW-QUALITY-CD)
    AV0W206(); /* get quality code*/
  end

  if (converseVar.validationMsgNum != 0) /* if error in routine*/
    return; /* exit to display map*/
  end

  if (AV0WM010.AV0WM-OWNER-CD != AV0WW02.AV0WW-OWNER-CD)
    AV0W207(); /* get owner code*/
  end

  if (converseVar.validationMsgNum != 0) /* if error in routine*/
    return; /* exit to display map*/
  end


   /* ------------------------------------------------------------*/
         /* move davail.vuatag01 data to temporary storage*/
   /* ------------------------------------------------------------*/

  AV0W290(); /* get davail.vuatag01 data*/

   /* ------------------------------------------------------------*/
   /* set up for read of 1st temporary storage page*/
   /* ------------------------------------------------------------*/

  if (AV0WW02.TA5TSQIX > 0)
    AV0WW02.XXXTSPAG = 1; /* move 1 to temp storage request page*/
    AV0WW02.AV0WWDFL = "Y"; /* move yes to request data flag*/
    AV0WW02.AV0WWFFL = "Y"; /* move yes to format map flag*/
    AV0WW02.AV0WWIFL = "N"; /* move no to initialize flag*/
  end



   /* --------------------------- av0w201 ------------------------*/
end // end AV0W201

// get gpc code and description
Function AV0W202()
   /* --------------------------- av0w202 ------------------------*/
                    /* get gpc code and descripition*/
   /* --------------------------- av0w202 ------------------------*/

  if (COMMAREA.XGPCD > "  ") /* if commearea gpc cd not blank*/
    AV0WW02.XGPCD = COMMAREA.XGPCD;
                                   /* move gpc to display storage gpc*/
    AV0WM010.XGPCD = COMMAREA.XGPCD; /* move gpc to map gpc code*/
  end

  if (AV0WM010.XGPCD == "  ") /* if gpc not entered*/
    converseLib.validationFailed(64); /* 'enter gpc' msg*/
    set AV0WM010.XGPCD cursor, bold;
    return; /* flow to display map*/
  else
    AV0W203(); /* get gpc code description*/
    if (converseVar.validationMsgNum != 0) /* if error occurred*/
      set AV0WM010.XGPCD cursor, bold;
      return; /* flow to display map*/
    end
  end

  if (COMMAREA.XGPCD == "  ")
    COMMAREA.XGPCD = AV0WM010.XGPCD; /* move map gpc cd to commarea*/
  end
  AV0WW02.XGPCD = AV0WM010.XGPCD; /* move gpc to save*/
  AV0WW02.XGPABRV = AV0WM010.XGPABRV; /* move gpc description to save*/

   /* --------------------------- av0w202 ------------------------*/
end // end AV0W202

// Obtain gpc cd/abrv
Function AV0W203()
   /* -------------------- av0w203 -------------------------------*/
                /* get gpc cd description*/
   /* ------------------------------------------------------------*/


  if (AV0WM010.XGPCD in XGPTBL.XGPCD)
    AV0WM010.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    converseLib.validationFailed(71); /* Invalid gpc code*/
    set AV0WM010.XGPCD cursor, modified, bold;
    return; /* Return to caller*/
  end

  if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not gpc type*/
    AV0WM010.XGPABRV = " "; /* Clear gpc abrv*/
    set AV0WM010.XGPCD cursor, modified, bold;
    converseLib.validationFailed(72); /* Inactive gpc code*/
    return; /* Return to caller*/
  end

    /* -------------  end of process av0w203  ------------------*/
end // end AV0W203

// get style range
Function AV0W204()
   /* --------------------------- av0w204 ------------------------*/
                         /* get style range*/
   /* --------------------------- av0w204 ------------------------*/

  if (AV0WM010.AV0WMLST == " " /* if low style nbr blank*/
   && AV0WM010.AV0WMHST == " ") /* and high style nbr blank*/
    set AV0WM010.AV0WMLST cursor, bold;
    set AV0WM010.AV0WMHST bold;
    converseLib.validationFailed(195); /* 'enter style range' msg*/
    return; /* flow to display map with error*/
  else
    if (AV0WM010.AV0WMLST == " ") /* if low style blank*/
      set AV0WM010.AV0WMLST cursor, bold;
      converseLib.validationFailed(49); /* 'enter low style nbr' msg*/
      return; /* flow to display map with error*/
    else
      if (AV0WM010.AV0WMHST == " ") /* if high style blank*/
        set AV0WM010.AV0WMHST cursor, bold;
        converseLib.validationFailed(50); /* 'enter high style nbr' msg*/
        return; /* flow to display map with error*/
      else
         /* if low style nbr greater than high style nbr*/
        if (AV0WM010.AV0WMLST > AV0WM010.AV0WMHST)
          set AV0WM010.AV0WMLST cursor, bold;
          converseLib.validationFailed(144); /* 'low style must not be greater' msg*/
          return; /* flow to display map with error*/
        end
      end
    end
  end

  AV0WW02.AV0WWLST = AV0WM010.AV0WMLST; /* move map low style to*/
                                             /* save field*/
  AV0WW02.AV0WWHST = AV0WM010.AV0WMHST; /* move map high style to*/


   /* --------------------------- av0w204 ------------------------*/
end // end AV0W204

// valid life cycle code
Function AV0W205()
   /* --------------------------- av0w205 ------------------------*/
                    /* validate life cycle code*/
   /* --------------------------- av0w205 ------------------------*/

  if (AV0WM010.AV0WM-LIFE-CYCLE-CD == "  ") /* if life cycle wild carded*/
    AV0WM010.XLCABRV = "ALL   "; /* set abrv to all*/
    AV0WW02.XLCABRV = "ALL   "; /* save abrv in storage*/
  else
    if (AV0WM010.AV0WM-LIFE-CYCLE-CD in XLCTBL.XLCCD) /* in life cycle table?*/
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* inactive life cycle code*/
        AV0WM010.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
        AV0WW02.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
      else
        set AV0WM010.AV0WM-LIFE-CYCLE-CD cursor, bold;
        converseLib.validationFailed(48); /* Inactive life cycle code*/
        return; /* Return to caller*/
      end
    else
      set AV0WM010.AV0WM-LIFE-CYCLE-CD cursor, bold;
      converseLib.validationFailed(47); /* Invalid life cycle code*/
      return; /* Return to caller*/
    end
  end

  set AV0WM010.AV0WM-LIFE-CYCLE-CD initialAttributes;

  AV0WW02.AV0WW-LIFE-CYCLE-CD = AV0WM010.AV0WM-LIFE-CYCLE-CD; /* save life cycle*/

   /* --------------------------- av0w205 ------------------------*/
end // end AV0W205

// valid quality code
Function AV0W206()
   /* --------------------------- av0w206 ------------------------*/
                    /* validate quality code*/
   /* --------------------------- av0w206 ------------------------*/

  if (AV0WM010.AV0WM-QUALITY-CD == "  ") /* if quality wild carded*/
    AV0WM010.XQAABRV = "ALL   "; /* set abrv to all*/
    AV0WW02.XQAABRV = "ALL   "; /* save in storage*/
  else
    if (AV0WM010.AV0WM-QUALITY-CD in XQATBL.XQACD) /* in life cycle table?*/
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active?*/
        AV0WM010.XLCABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
        AV0WW02.XLCABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
      else
        set AV0WM010.AV0WM-QUALITY-CD cursor, bold;
        converseLib.validationFailed(45); /* Inactive quality code*/
        return; /* Return to caller*/
      end
    else
      set AV0WM010.AV0WM-QUALITY-CD cursor, bold;
      converseLib.validationFailed(44); /* Invalid quality code*/
      return; /* Return to caller*/
    end
  end

  set AV0WM010.AV0WM-QUALITY-CD initialAttributes;

  AV0WW02.AV0WW-QUALITY-CD = AV0WM010.AV0WM-QUALITY-CD; /* save quality*/

   /* --------------------------- av0w206 ------------------------*/
end // end AV0W206

// valid owner group code
Function AV0W207()
   /* --------------------------- av0w207 ------------------------*/
                    /* validate owner code*/
   /* --------------------------- av0w207 ------------------------*/

  if (AV0WM010.AV0WM-OWNER-CD == "  ") /* if owner wild carded*/
     /* next sentence*/
  else
    if (AV0WM010.AV0WM-OWNER-CD in XOWTBL.XOWCD) /* in owner table?*/
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active?*/
         /* next sentence*/
      else
        set AV0WM010.AV0WM-OWNER-CD cursor, bold;
        converseLib.validationFailed(80); /* Inactive owner code*/
        return; /* Return to caller*/
      end
    else
      set AV0WM010.AV0WM-OWNER-CD cursor, bold;
      converseLib.validationFailed(81); /* Invalid owner code*/
      return; /* Return to caller*/
    end
  end

  set AV0WM010.AV0WM-OWNER-CD initialAttributes;

  AV0WW02.AV0WW-OWNER-CD = AV0WM010.AV0WM-OWNER-CD; /* save owner*/

   /* --------------------------- av0w207 ------------------------*/
end // end AV0W207

// read temporary storage
Function AV0W210()
   /* ------------------------------------------------------*/
                       /* av0w210*/
               /* read av0w temporary storage*/
   /* ------------------------------------------------------*/

   /* if requested page less than 1*/
   /* move no more data message and exit to display map*/

  if (AV0WW02.XXXTSPAG < 1)
    converseLib.validationFailed(141); /* 'no more products to page forward'*/
                                   /* msg*/
    AV0WW02.AV0WWFFL = "N"; /* move no to format map flag*/
    AV0WW02.XXXTSPAG = 1; /* reset requested page*/
    return; /* return to display map*/
  end

   /* if requested page greater than temp storage highest page*/
   /* move no data message and exit to display map*/

  if (AV0WW02.XXXTSPAG > AV0WW02.TA5TSQIX)
    converseLib.validationFailed(140); /* 'no products to page forward to' msg*/
    AV0WW02.AV0WWFFL = "N"; /* move no to format map flag*/
    AV0WW02.XXXTSPAG = AV0WW02.TA5TSQIX; /* reset requested page*/
    return;
  end

   /* --------------------------------------------------------*/
    /* read temporary storage*/
   /* --------------------------------------------------------*/

   /* set up to call temporary storage program:*/

  set AV0WW01 empty; /* clear display storage rec*/
   /* move temp storage page length to display storage rec*/
  AV0WW01.XXXTSLEN = AV0WW02.XXXTSLEN;

  set TA5REC empty; /* clear temporary storage rec*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* application id*/
  TA5REC.TA5TSQIX = AV0WW02.XXXTSPAG; /* desired page nbr*/
  TA5REC.TA5FNCCD = "R"; /* 'read' function code*/

  try
    call "TA0050" (AV0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage program*/

   /* -------------------------------------------------------*/
   /* if successful return to continue main process*/
   /* -------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA5REC.TA5RTNCD == 0)          /* normal ta0050 return code*/
    return; /* return to continue processing*/
  end

   /* -------------------------------------------------------*/
   /* otherwise, indicate that a system error has occurred*/
   /* -------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
  converseLib.validationFailed(76); /* 'system error' msg*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "210"; /* program number*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

  return; /* exit to display map*/
end // end AV0W210

// Format the display data
Function AV0W220()
   /* ------------------------------------------------------------*/
                         /* av0w220*/
       /* Clear the map and load with temp storage data*/
   /* ------------------------------------------------------------*/

  set AV0WM010 initial; /* clear map*/

   /* ------------------------------------------------------------*/
   /* load map constant fields:*/
   /* ------------------------------------------------------------*/

  AV0WM010.XXXCURDT = VGVar.currentShortGregorianDate; /* move current date to map*/
  AV0WM010.XXXRVNBR = "00"; /* move revision nbr to map*/
  AV0WM010.XXXMAPNM = "AV0WM010"; /* move map name to map*/
  AV0WM010.XGPCD = AV0WW02.XGPCD; /* move save gpc to map*/
  AV0WM010.XGPABRV = AV0WW02.XGPABRV; /* move save gpc description*/
                                  /* to map*/
  AV0WM010.AV0WMLST = AV0WW02.AV0WWLST; /* move save low style to map*/
  AV0WM010.AV0WMHST = AV0WW02.AV0WWHST; /* move save hi style to map*/
  AV0WM010.AV0WM-LIFE-CYCLE-CD = AV0WW02.AV0WW-LIFE-CYCLE-CD;
  AV0WM010.XLCABRV = AV0WW02.XLCABRV;
  AV0WM010.AV0WM-QUALITY-CD = AV0WW02.AV0WW-QUALITY-CD;
  AV0WM010.XQAABRV = AV0WW02.XQAABRV;
  AV0WM010.AV0WM-OWNER-CD = AV0WW02.AV0WW-OWNER-CD;

   /* ------------------------------------------------------------*/
   /* load display storage to map fields*/
   /* ------------------------------------------------------------*/

  AV0WW02.AV0WWIX1 = 1; /* set index to 1*/

  if (AV0WW01.XWHCD[1] > " ") /* if data in record*/
    while (AV0WW02.AV0WWIX1 <= 15 /* Until screen is full*/
     && AV0WW01.XWHCD[AV0WWIX1] > " ") /* and data present*/

      if (AV0WW02.AV0WWIX1 == 1) /* First select field*/
        set AV0WM010.AV0WMSEL[AV0WWIX1] cursor; /* Position cursor*/
      end

      AV0WM010.AV0WMSEL[AV0WWIX1] = AV0WW01.AV0WWSEL[AV0WWIX1];
      AV0WM010.SY1STNBR[AV0WWIX1] = AV0WW01.SY1STNBR[AV0WWIX1];
      AV0WM010.SY2CLRID[AV0WWIX1] = AV0WW01.SY2CLRID[AV0WWIX1];
      AV0WM010.XWHCD[AV0WWIX1] = AV0WW01.XWHCD[AV0WWIX1];
      AV0WM010.XLCCD[AV0WWIX1] = AV0WW01.XLCCD[AV0WWIX1];
      AV0WM010.XQACD[AV0WWIX1] = AV0WW01.XQACD[AV0WWIX1];
      AV0WM010.XOWCD[AV0WWIX1] = AV0WW01.XOWCD[AV0WWIX1];

      AV0W222(); /* get style name*/
      AV0W223(); /* get color description*/

      AV0WW02.AV0WWIX1 = AV0WW02.AV0WWIX1 + 1; /* Increment line index*/
    end
  end


   /* set selection field dark for empty map lines:*/

  while (AV0WW02.AV0WWIX1 <= 15) /* until end of map lines*/
    if (AV0WW01.XWHCD[AV0WWIX1] == " ") /* if map data line blank*/
      set AV0WM010.AV0WMSEL[AV0WWIX1] invisible; /* set the selection field dark*/
      AV0WW02.AV0WWIX1 = AV0WW02.AV0WWIX1 + 1; /* increment map index*/
    end
  end
end // end AV0W220

// select style01 rec
Function AV0W222()
   /* --------------------------- av0w222 ------------------------*/
          /* select dprod.vstyle01 - select for style name*/
   /* --------------------------- av0w222 ------------------------*/

  AV0WM010.XXXERRID = "AV0W222";
  set SQLCA empty;
  set SY1REC empty;

  SY1REC.XGPCD = AV0WW01.XGPCD;
  SY1REC.SY1STNBR = AV0WW01.SY1STNBR[AV0WWIX1];


  try
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == +0)     /* and normal return code*/
     /* move style name to map*/
    AV0WM010.SY1STYNM[AV0WWIX1] = SY1REC.SY1STYNM;
    return;
  end


   /* if record not found, move error message and continue*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == +100)   /* and return code = not found*/
    set AV0WM010.SY1STNBR[AV0WWIX1] protect, bold; /* hilite errored field*/
    converseLib.validationFailed(196); /* 'error in input data' msg*/
    return;
  end

   /* if table row in use (not available) return an error message*/
   /* to the user.  otherwise indicate that a system error has*/
   /* occurred.*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(75); /* 'data in use by another applc' msg*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else
    converseLib.validationFailed(76); /* 'system error' msg*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1LOCAT = "S STYNM";
  TA1REC.TA1PGMNO = AV0WM010.XXXERRID; /* program mod number*/
  TA1REC.TA1DBASE = "DPROD"; /* database name*/
  TA1REC.TA1TBLVU = "VSYSTY01"; /* table view*/
  TA1REC.TA1TBLKE = AV0WM010.SY1STNBR[AV0WWIX1]; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  return;


   /* --------------------------- av0w922 ------------------------*/
end // end AV0W222

// select color01 rec
Function AV0W223()
   /* --------------------------- av0w223 ------------------------*/
                      /* select dprod.vcolor01*/
                   /* select for color description*/
   /* --------------------------- av0w223 ------------------------*/


  AV0WM010.XXXERRID = "AV0W223";
  set SQLCA empty;
  set SY2REC empty;

   /* set up color record key:*/

  SY2REC.XGPCD = AV0WW01.XGPCD;
  SY2REC.SY1STNBR = AV0WW01.SY1STNBR[AV0WWIX1];
  SY2REC.SY2CLRID = AV0WW01.SY2CLRID[AV0WWIX1];
  SY2REC.XDMCD = AV0WW01.XDMCD[AV0WWIX1];


  try
    call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == +0)     /* and normal return code*/
     /* move color description to map*/
    AV0WM010.SY2CLRAB[AV0WWIX1] = SY2REC.SY2CLRAB;
    return;
  end


   /* if record not found, move error message and continue*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == +100)   /* and return code = not found*/
    set AV0WM010.SY2CLRID[AV0WWIX1] protect, bold; /* hilite errored field*/
    converseLib.validationFailed(196); /* 'error in input data' msg*/
    return;
  end

   /* if table row in use (not available) return an error message*/
   /* to the user.  otherwise indicate that a system error has*/
   /* occurred.*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(75); /* 'data in use by another applc' msg*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else
    converseLib.validationFailed(76); /* 'system error' msg*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback any database changes*/

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1LOCAT = "S COLRDS";
  TA1REC.TA1PGMNO = AV0WM010.XXXERRID; /* program mod number*/
  TA1REC.TA1DBASE = "DPROD"; /* database name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
  TA1REC.TA1TBLKE = AV0WM010.SY1STNBR[AV0WWIX1]; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  return;


   /* --------------------------- av0w223 ------------------------*/
end // end AV0W223

// converse av0wm010
Function AV0W230()

  AV0WM010.XXXERRID = "AV0W230";

  converse AV0WM010 ;
end // end AV0W230

// Check attention identifier
Function AV0W240()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    AV0W110(); /* initialize program fields*/
    exit stack; /* exit to resart main process*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.CAITEM != " " /* if data in fastpath to option*/
   && AV0WM010.CATOAP == " ") /* and the application is blank*/
    set AV0WM010.CATOAP cursor, bold;
    converseLib.validationFailed(115); /* 'enter to application' msg*/
    exit stack; /* flow to display map*/
  end


  if (AV0WM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (AV0WM010.CATOAP == "AV0X") /* if path not to av0x*/
         /* continue processing*/
      else
        COMMAREA.CAFROMAP = "AV0W"; /* set up commarea for transfer*/
        COMMAREA.CATOAP = AV0WM010.CATOAP;
        COMMAREA.CAITEM = AV0WM010.CAITEM;
        AV0W204(); /* Purge temporary storage*/
        XPAV002(); /* Exit to another application*/
         /* if exit not successful*/
        AV0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
        set AV0WM010.CATOAP cursor, bold; /* Highlight*/
        exit stack; /* Exit to display map*/
      end
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    AV0W204(); /* Purge temporary storage*/
    COMMAREA.CAFROMAP = "AV0W"; /* set up commarea for transfer*/
    XPAV002(); /* Exit to another application*/

     /* if exit not successful*/
    AV0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set AV0WM010.CATOAP cursor, bold; /* Highlight*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* if PF7 was pressed*/
   || converseVar.eventKey is pf8  /* or PF8 was pressed*/
   || converseVar.eventKey is pf12 /* or pf12 was pressed*/
   || converseVar.eventKey is enter) /* or enter was pressed*/
                                     /* continue processing*/
  else
    AV0WM010.XXXERRID = "AV0W130"; /* Module identification*/
    converseLib.validationFailed(15); /* 'invalid option' msg*/
    exit stack; /* exit to display map*/
  end


end // end AV0W240

// Reset highlighted fields
Function AV0W250()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AV0WM010.XGPCD initialAttributes; /* GPC code*/
  set AV0WM010.AV0WMLST initialAttributes; /* low style nbr*/
  set AV0WM010.AV0WMHST initialAttributes; /* high style nbr*/

  AV0WW02.AV0WWIX1 = 1; /* Initialize line index*/

  while (AV0WW02.AV0WWIX1 <= 15 /* Until end of lines*/
   && AV0WM010.XWHCD[AV0WWIX1] > " ") /* or end of display*/

    set AV0WM010.AV0WMSEL[AV0WWIX1] initialAttributes; /* Reset select field*/
    set AV0WM010.SY1STNBR[AV0WWIX1] initialAttributes; /* reset style nbr*/
    set AV0WM010.SY2CLRID[AV0WWIX1] initialAttributes; /* reset color cd id*/
    set AV0WM010.XWHCD[AV0WWIX1] initialAttributes; /* reset warehouse code*/
    set AV0WM010.XLCCD[AV0WWIX1] initialAttributes; /* reset life cycle code*/
    set AV0WM010.XQACD[AV0WWIX1] initialAttributes; /* reset quality code*/
    set AV0WM010.XOWCD[AV0WWIX1] initialAttributes; /* reset owner code*/

    AV0WW02.AV0WWIX1 = AV0WW02.AV0WWIX1 + 1; /* Increment line index*/

  end

  set AV0WM010.CATOAP initialAttributes; /* TO application*/
  set AV0WM010.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.XGPCD == "?"               /* if any lists requested*/
   || AV0WM010.AV0WM-LIFE-CYCLE-CD == "?" /* fall through*/
   || AV0WM010.AV0WM-QUALITY-CD == "?")  
     /* next sentence*/
  else
    return; /* else return*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of gpc codes.*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.XGPCD == "?") /* gpc list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "GENERAL PRODUCT CLASS CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0WM010.XGPCD = AV0WW02.XGPCD; /* restore prior code*/

    else
      AV0WM010.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move to screen*/
      COMMAREA.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* put in commarea*/

    end

    set AV0WM010.XGPCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of life cycle codes.*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.AV0WM-LIFE-CYCLE-CD == "?") /* life cycle list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  LIFE CYCLE CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXLC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0WM010.AV0WM-LIFE-CYCLE-CD = AV0WW02.AV0WW-LIFE-CYCLE-CD;

    else
      AV0WM010.AV0WM-LIFE-CYCLE-CD = XLCTBL.XLCCD[XX0XWPIX]; /* move to screen*/
      AV0WM010.XLCABRV = XLCTBL.XLCABRV[XX0XWPIX]; /* abrv to screen*/

    end

    set AV0WM010.AV0WM-LIFE-CYCLE-CD cursor; /* Establish cursor*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of quality codes.*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.AV0WM-QUALITY-CD == "?") /* quality list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  QUALITY CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0WM010.AV0WM-QUALITY-CD = AV0WW02.AV0WW-QUALITY-CD;

    else
      AV0WM010.AV0WM-QUALITY-CD = XQATBL.XQACD[XX0XWPIX]; /* move to screen*/
      AV0WM010.XQAABRV = XQATBL.XQAABRV[XX0XWPIX]; /* abrv to screen*/

    end

    set AV0WM010.AV0WM-QUALITY-CD cursor; /* Establish cursor position*/

  end

  converseLib.clearScreen();

  converseLib.validationFailed(209);

  return;

end // end AV0W250

// Verify the entered data
Function AV0W260()

   /* ------------------------------------------------------------*/
                        /* av0w260*/
                   /* verify entered data*/
   /* -----------------------------------------------------------*/
   /* check for General Product Class code entered or changed*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.XGPCD == " " /* if gpc not filled in*/
   || AV0WM010.XGPCD != AV0WW02.XGPCD) /* or gpc cd not = save*/
    COMMAREA.XGPCD = "  "; /* clear commarea gpc*/
    AV0WM010.XGPABRV = " "; /* clear gpc description*/
    AV0W112(); /* initialize flags*/
    exit stack; /* exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* check for style range entered for gpc 03*/
   /* ------------------------------------------------------------*/
   /* style range not functional for gpc 03, apparel*/

  if (AV0WM010.XGPCD == "03") /* if apparel gpc entered*/
    if (AV0WM010.AV0WMLST != " " /* and low style range entered*/
     || AV0WM010.AV0WMHST != " ") /* or high style range entered*/
      converseLib.validationFailed(198); /* 'style range not functional' msg*/
      set AV0WM010.AV0WMLST cursor, bold;
      set AV0WM010.AV0WMHST bold;
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* check for style range entered or changed*/
   /* ------------------------------------------------------------*/

   /* if map gpc = '02' footwear and map low & high style nbrs*/
   /* are blank or map low style number not equal save low*/
   /* style number or map high style nbr not equal save high*/
   /* style number, reinitialize program and restart main process*/

  if (AV0WM010.XGPCD == "02")
    if (AV0WM010.AV0WMLST == " " /* if map low style not entered*/
     || AV0WM010.AV0WMHST == " ") /* or map high style not entered*/
      AV0W261(); /* clear bottom of screen*/
      AV0W112(); /* initialize flags*/
      exit stack; /* exit to begin main process*/
    else
       /* if map low style not = save low style*/
       /* or map high style not = save high style*/
      if (AV0WM010.AV0WMLST != AV0WW02.AV0WWLST
       || AV0WM010.AV0WMHST != AV0WW02.AV0WWHST)
        AV0W261(); /* clear bottom of screen*/
        AV0W112(); /* initialize flags*/
        exit stack; /* exit to begin main process*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* check for life cycle code changed*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.AV0WM-LIFE-CYCLE-CD != AV0WW02.AV0WW-LIFE-CYCLE-CD)
    AV0W261(); /* clear bottom of screen*/
    AV0W112(); /* initialize flags*/
    exit stack; /* exit to begin main process*/
  end

  set AV0WM010.AV0WM-LIFE-CYCLE-CD initialAttributes; /* reset attribute*/

   /* ------------------------------------------------------------*/
   /* check for quality code changed*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.AV0WM-QUALITY-CD != AV0WW02.AV0WW-QUALITY-CD)
    AV0W261(); /* clear bottom of screen*/
    AV0W112(); /* initialize flags*/
    exit stack; /* exit to begin main process*/
  end

  set AV0WM010.AV0WM-QUALITY-CD initialAttributes; /* reset attribute*/

   /* ------------------------------------------------------------*/
   /* check for owner code changed*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.AV0WM-OWNER-CD != AV0WW02.AV0WW-OWNER-CD)
    AV0W261(); /* clear bottom of screen*/
    AV0W112(); /* initialize flags*/
    exit stack; /* exit to begin main process*/
  end

  set AV0WM010.AV0WM-OWNER-CD initialAttributes; /* reset attribute*/

   /* ------------------------------------------------------------*/
   /* verify correct selection indicator*/
   /* ------------------------------------------------------------*/

  AV0WW02.AV0WWIX1 = 15; /* Initialize line index*/
  AV0WW02.AV0WWUFL = "N"; /* move 'n' to update flag*/

  if (converseVar.eventKey is enter /* if update requested*/
   || converseVar.eventKey is pf12)
    while (AV0WW02.AV0WWIX1 > 0) /* Until end of lines*/
      AV0W262(); /* Verify selection indicator*/
      AV0WW02.AV0WWIX1 = AV0WW02.AV0WWIX1 - 1; /* Decrement line number*/
    end
  end


end // end AV0W260

// clear selection fields
Function AV0W261()
   /* ------------------------------------------------------------*/
   /* clear all screen detail lines*/
   /* ------------------------------------------------------------*/

  AV0WW02.AV0WWIX1 = 1; /* Initialize line index*/

  while (AV0WW02.AV0WWIX1 <= 15) /* Until end of lines*/

    AV0WMSEL[AV0WWIX1] = " ";
    set AV0WM010.AV0WMSEL[AV0WWIX1] invisible; /* Reset select field*/
    AV0WM010.SY1STNBR[AV0WWIX1] = " ";
    set AV0WM010.SY1STNBR[AV0WWIX1] invisible; /* reset style number*/
    AV0WM010.SY2CLRID[AV0WWIX1] = " ";
    set AV0WM010.SY2CLRID[AV0WWIX1] invisible; /* reset color cd id*/
    AV0WM010.XWHCD[AV0WWIX1] = " ";
    set AV0WM010.XWHCD[AV0WWIX1] invisible; /* reset warehouse code*/
    AV0WM010.XLCCD[AV0WWIX1] = " ";
    set AV0WM010.XLCCD[AV0WWIX1] invisible; /* reset life cycle code*/
    AV0WM010.XQACD[AV0WWIX1] = " ";
    set AV0WM010.XQACD[AV0WWIX1] invisible; /* reset quality code*/
    AV0WM010.XOWCD[AV0WWIX1] = " ";
    set AV0WM010.XOWCD[AV0WWIX1] invisible; /* reset owner code*/
    AV0WM010.SY1STYNM[AV0WWIX1] = " ";
    set AV0WM010.SY1STYNM[AV0WWIX1] invisible; /* reset style name*/
    AV0WM010.SY2CLRAB[AV0WWIX1] = " ";
    set AV0WM010.SY2CLRAB[AV0WWIX1] invisible; /* reset color abrv*/

    AV0WW02.AV0WWIX1 = AV0WW02.AV0WWIX1 + 1; /* Increment line index*/

  end

end // end AV0W261

// Verify data in the line
Function AV0W262()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (AV0WM010.AV0WMSEL[AV0WWIX1] != " " /* if select field not blank*/
   && AV0WM010.AV0WMSEL[AV0WWIX1] != "S") /* and is not an "S"*/

    AV0WM010.XXXERRID = "AV0W262"; /* Module identification*/
    set AV0WM010.AV0WMSEL[AV0WWIX1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(197);
                                   /* 'enter 's' for product selection' msg*/
  else
    if (AV0WM010.AV0WMSEL[AV0WWIX1] == "S") /* if product selected*/
      AV0WW02.AV0WWUFL = "Y"; /* move 'yes' to update flag*/

    end
  end


end // end AV0W262

// process valid data
Function AV0W270()
   /* ---------------------------------------------------------*/
                         /* av0w270*/
                     /* process valid data*/
   /* ---------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* if user request update*/
    if (AV0WM010.CATOAP != "AV0X") /* if user not requested transfer*/
      if (AV0WW02.AV0WWUFL == "Y") /* if update flag is yes*/
        AV0W271(); /* move map data to display storage*/
        AV0W272(); /* update temp storage*/
        converseLib.validationFailed(191); /* 'records updated' msg*/
      end
      exit stack; /* exit to begin main process*/
    end
  end


  if (converseVar.eventKey is pf7) /* if user request scroll backward*/
     /* decrement temp storage page*/
    AV0WW02.XXXTSPAG = AV0WW02.XXXTSPAG - 1;
     /* set up for display data*/
    AV0WW02.AV0WWDFL = "Y"; /* move yes to request data flag*/
    AV0WW02.AV0WWFFL = "Y"; /* move yes to format map flag*/
    exit stack; /* exit to begin main process*/
  end


  if (converseVar.eventKey is pf8) /* if user request scroll forward*/
     /* increment temp storage page*/
    AV0WW02.XXXTSPAG = AV0WW02.XXXTSPAG + 1;
    AV0WW02.AV0WWDFL = "Y"; /* move yes to request data flag*/
    AV0WW02.AV0WWFFL = "Y"; /* move yes to format map flag*/
    exit stack;
  end


  if (converseVar.eventKey is pf12 /* if user request transfer to av0x*/
   || AV0WM010.CATOAP == "AV0X")  
    AV0W273(); /* exit to av0x routine*/
  end

end // end AV0W270

// move map data to display
Function AV0W271()
   /* ------------------------------------------------------------*/
                         /* av0w271*/
           /* load display storage with map field*/
   /* ------------------------------------------------------------*/

  AV0WW02.AV0WWIX1 = 1;

  while (AV0WW02.AV0WWIX1 <= 15 /* Until screen is full*/
   && AV0WW01.XWHCD[AV0WWIX1] > " ") /* or end of data*/

    AV0WW01.AV0WWSEL[AV0WWIX1] = AV0WM010.AV0WMSEL[AV0WWIX1];
    AV0WW02.AV0WWIX1 = AV0WW02.AV0WWIX1 + 1; /* Increment line index*/

  end


end // end AV0W271

// update av0w temp storage page
Function AV0W272()
   /* ------------------------------------------------------------*/
                          /* av0w272*/
                /* update av0w temporary storage page*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (AV0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(76); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "272"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV0W272

// transfer selected products
Function AV0W273()
   /* ---------------------------------------------------------*/
                         /* av0w273*/
                     /* exit to av0x process*/
   /* ---------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* if selections made, update av0w temporary storage page*/
   /* ------------------------------------------------------------*/
  if (AV0WW02.AV0WWUFL == "Y") /* if a selection made*/
    AV0W271(); /* move map data to display storage*/
    AV0W272(); /* update temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* purge av0x temporary storage*/
   /* ------------------------------------------------------------*/
  AV0WW04.XXXTSLEN = 582; /* move av0x record length to ws length*/

  AV0W274();

   /* ------------------------------------------------------------*/
   /* move av0w temp storage to av0x temp storage*/
   /* ------------------------------------------------------------*/
  AV0WW02.XXXTSPAG = 1; /* set av0w temp storage page to 1*/
  AV0WW04.TA5TSQIX = 0; /* set av0x wrk temp storge pages 0*/
  AV0WW02.AV0WWIX1 = 1; /* set av0w display storage to 1*/
  AV0WW04.AV0WWIX3 = 1; /* set av0x display storage to 1*/


   /* load av0x temp storage until av0w temp storage highest page*/
  while (AV0WW02.XXXTSPAG <= AV0WW02.TA5TSQIX)
    AV0W275(); /* build av0x temp storage*/
  end

   /* if av0x temp storage page index greater than 1*/
   /* and less than 21, add page to av0x temp storage*/

  if (AV0WW04.AV0WWIX3 > 1 /* and partial page formatted*/
   && AV0WW04.AV0WWIX3 <= 20)
    AV0W276(); /* add page to av0x temp storage*/
  end


   /* ------------------------------------------------------------*/
   /* purge av0w temporary storage*/
   /* ------------------------------------------------------------*/

  AV0W204();


   /* ------------------------------------------------------------*/
   /* set up commarea to transfer to av0x*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAUSERA = " "; /* move spaces to commarea rec*/

   /* if any products were selected to send to av0x*/
   /* move the highest temp storage page to commarea for transfer*/

   /* move highest page and page length to xfer to commarea record*/
  AVWREC.CAUSERA = AV0WW04.AV0WWGR1;


  COMMAREA.CAFROMAP = "AV0W"; /* set up commarea application fields*/
  COMMAREA.CATOAP = "AV0X";

  XPAV002(); /* perform av exit program*/
end // end AV0W273

// Purge av0x temporary storage
Function AV0W274()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  AV0WW04.TA5TSQIX = 0; /* Highest page number*/
  set AV0WW03 empty; /* clear temp storage work rec*/
  set TA5REC empty; /* clear ta0050 rec*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "AV0X"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* 'purge' function code*/

  try
    call "TA0050" (AV0WW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(76); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "274"; /* PROGRAM NUMBER*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/


end // end AV0W274

// build av0x temporary storage
Function AV0W275()
   /* ---------------------------------------------------*/
                       /* av0w275*/
    /* move selected data items to av0x temporary storage*/
   /* ---------------------------------------------------*/

  AV0W210(); /* read av0w temp storage page*/

  while (AV0WW02.AV0WWIX1 <= 15 /* until end of page*/
   && AV0WW01.XWHCD[AV0WWIX1] > " ") /* or end of data*/

    if (AV0WW01.AV0WWSEL[AV0WWIX1] == "S") /* if the product selected*/

       /* move selected product key fields to av0x temp storage*/
       /* transfer record:*/
       /* warehouse*/
       /* general product class code*/
      AV0WW03.XGPCD = AV0WW01.XGPCD;
       /* warehouse code*/
      AV0WW03.XWHCD[AV0WWIX3] = AV0WW01.XWHCD[AV0WWIX1];
       /* style number*/
      AV0WW03.SY1STNBR[AV0WWIX3] = AV0WW01.SY1STNBR[AV0WWIX1];
       /* color id*/
      AV0WW03.SY2CLRID[AV0WWIX3] = AV0WW01.SY2CLRID[AV0WWIX1];
       /* dimension cd*/
      AV0WW03.XDMCD[AV0WWIX3] = AV0WW01.XDMCD[AV0WWIX1];
       /* quality cd*/
      AV0WW03.XQACD[AV0WWIX3] = AV0WW01.XQACD[AV0WWIX1];
       /* life cycle code*/
      AV0WW03.XLCCD[AV0WWIX3] = AV0WW01.XLCCD[AV0WWIX1];
       /* owner group cd*/
      AV0WW03.XOWCD[AV0WWIX3] = AV0WW01.XOWCD[AV0WWIX1];
       /* spec diff cd*/
      AV0WW03.PC2INSEG[AV0WWIX3] = AV0WW01.PC2INSEG[AV0WWIX1];
       /* shade cd*/
      AV0WW03.XEGCD[AV0WWIX3] = AV0WW01.XEGCD[AV0WWIX1];
       /* package type cd*/
      AV0WW03.XPGCD[AV0WWIX3] = AV0WW01.XPGCD[AV0WWIX1];
       /* unit of measure cd*/
      AV0WW03.XUMCD[AV0WWIX3] = AV0WW01.XUMCD[AV0WWIX1];

       /* increment av0x storage rec index*/
      AV0WW04.AV0WWIX3 = AV0WW04.AV0WWIX3 + 1;

    end

    if (AV0WW04.AV0WWIX3 > 20) /* if av0x index greater than 20*/
      AV0W276(); /* add page to av0x temp storage*/
    end

     /* increment av0w display storage index*/
    AV0WW02.AV0WWIX1 = AV0WW02.AV0WWIX1 + 1;
  end

   /* add 1 to av0w temp storage page*/
  AV0WW02.XXXTSPAG = AV0WW02.XXXTSPAG + 1;

   /* reset av0w display storage index to 1*/
  AV0WW02.AV0WWIX1 = 1;
end // end AV0W275

// Add page to av0x temp storage
Function AV0W276()
   /* ------------------------------------------------------------*/
                         /* av0w276*/
               /* Add page to av0x temporary storage.*/
   /* ------------------------------------------------------------*/

  AV0WW03.XXXTSLEN = AV0WW04.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = "AV0X"; /* Application identification*/

  if (AV0WW04.TA5TSQIX == 0) /* No pages are formatted*/
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* 'add' function code*/
  end

  try
    call "TA0050" (AV0WW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    AV0WW04.TA5TSQIX = TA5REC.TA5TSQIX; /* av0x highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    set AV0WW03 empty; /* clear av0x work temp storage*/
    AV0WW04.AV0WWIX3 = 1; /* reset display rec index to 1*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(76); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "276"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end AV0W276

// get davail.vuatag01 data
Function AV0W290()
   /* --------------------------- av0w290 ------------------------*/
         /* move davail.vuatag01 data to temporary storage*/
   /* ----------------------------av0w290-------------------------*/

   /* establish the temporary storage queue page length*/

  AV0WW02.XXXTSLEN = 452; /* temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* purge temporary storage*/
   /* ------------------------------------------------------------*/

  AV0W291();

   /* ------------------------------------------------------------*/
   /* select and open the cursor to load temporary storage pages*/
   /* ------------------------------------------------------------*/

  AV0W292(); /* open cursor and select set*/
                                   /* davail.vuatag01 data*/

   /* ------------------------------------------------------------*/
   /* fetch and format the data until end of cursor*/
   /* ------------------------------------------------------------*/

  AV0WW02.AV0WWIX1 = 1; /* move 1 to display storage idx*/
  AV0WW02.AV0WWEOC = "N"; /* move no to end of cursor sw*/

  while (AV0WW02.AV0WWEOC == "N") /* until end of cursor*/
    AV0W293(); /* fetch uatag data and format*/
                                /* ; display storage pages.*/
    if (AV0WW02.AV0WWIX1 > 15) /* if display storage page is full*/
      AV0W295(); /* add page to temporary storage*/
    end
  end

   /* add final page to temporary storage*/
  if (AV0WW02.AV0WWIX1 > 1) /* if display storage page partially*/
                                   /* full*/
    AV0W295(); /* add page to temporary storage*/
  end

   /* close the cursor for the selected set*/
  AV0W296(); /* close the select set cursor*/

   /* if no pages formatted - indicate no data to display*/

  if (AV0WW02.TA5TSQIX == 0) /* no pages formatted*/
    converseLib.validationFailed(194); /* 'no data to display' msg*/
    return; /* exit to display msg*/
  end


   /* --------------------------- av0w290 ------------------------*/
end // end AV0W290

// Purge av0w temporary storage
Function AV0W291()
   /* ------------------------av0w291-----------------------------*/
                  /* purge av0w temporary storage*/
   /* ------------------------av0w291-----------------------------*/

   /* Initialize the storage areas and indicators to be used.*/

  if (TA5REC.TA5FNCCD == "P" /* if last ta0050 call was to purge*/
   && TA5REC.TA5APPID == "AV0W") /* and purge was av0w data*/
    return; /* return to calling process*/
  end

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  AV0WW02.TA5TSQIX = 0; /* Highest page number*/

  set AV0WW01 empty; /* clear display storage rec*/
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (AV0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(76); /* 'system error'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "291"; /* PROGRAM NUMBER*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  return; /* Exit to display map*/


   /* ------------------------av0w291-----------------------------*/
end // end AV0W291

// Select set and open cursor
Function AV0W292()
   /* -------------------------av0w292----------------------------*/
                 /* select set davail.vuatag01 data*/
   /* -------------------------av0w292----------------------------*/

   /* Initialize the storage areas and indicators to be used.*/

  set AV8REC empty; /* Clear row storage area*/

  AV8REC.XGPCD = AV0WM010.XGPCD; /* GPC*/

  if (AV0WM010.AV0WM-QUALITY-CD == "  ") /* If quality wild carded*/
    AV8REC.XQACD = "* "; /* send wild card character*/
  else
    AV8REC.XQACD = AV0WM010.AV0WM-QUALITY-CD; /* quality*/
  end

  if (AV0WM010.AV0WM-LIFE-CYCLE-CD == "  ") /* if life cycle wild carded*/
    AV8REC.XLCCD = "* "; /* send wild card character*/
  else
    AV8REC.XLCCD = AV0WM010.AV0WM-LIFE-CYCLE-CD; /* life cycle*/
  end

  if (AV0WM010.AV0WM-OWNER-CD == "  ") /* if owner wild carded*/
    AV8REC.XOWCD = "* "; /* send wild card character*/
  else
    AV8REC.XOWCD = AV0WM010.AV0WM-OWNER-CD; /* owner code*/
  end

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1940" ("SS", SQLCA, AV8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == +100)   /* and no data returned*/
    converseLib.validationFailed(194); /* 'no data to display' msg*/
    set AV0WM010.XGPCD bold;

    return; /* ; exit to display msg*/
  end


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "292"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VUATAG01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV8REC.AV8GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


   /* -------------------------av0w292----------------------------*/
end // end AV0W292

// Fetch next row in the cursor
Function AV0W293()
   /* -------------------------av0w293----------------------------*/
                     /* fetch and format data*/
   /* -------------------------av0w293----------------------------*/

   /* Fetch the next row to display from the table.*/

  try
    call "IO1940" ("SN", SQLCA, AV8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
   /* if gpc is footwear and the selected style number is*/
   /* equal or greater than map low style nbr and*/
   /* equal or less than map high style nbr*/
   /* move data to display storage*/

   /* for all other gpcs, move each selected style to display*/
   /* storage*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (AV0WM010.XGPCD == "02") /* if gpc is footwear*/
        if (AV8REC.SY1STNBR >= AV0WM010.AV0WMLST
         && AV8REC.SY1STNBR <= AV0WM010.AV0WMHST)
          AV0W294(); /* Save in display storage*/
          return; /* Return to select again*/
        else
             /* if selected style greater than map high style nbr*/
             /* move yes to end of cursor switch*/
          if (AV8REC.SY1STNBR > AV0WM010.AV0WMHST)
            AV0WW02.AV0WWEOC = "Y";
            return; /* return to exit routine*/
          else
            return; /* Return to select again*/
          end
        end
      else /* for other gpcs move every style to display*/
        AV0W294(); /* Save in display storage*/
        return; /* Return to select again*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AV0WW02.AV0WWEOC = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "293"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL"; /* Data base name*/
  TA1REC.TA1TBLVU = "VUATAG01"; /* Table view name*/
  TA1REC.TA1TBLKE = AV8REC.AV8GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0W293

// save data in display storage
Function AV0W294()
   /* -----------------------av0w294--------------------------*/
   /* save the davail.vuatag01 data in display storage record*/
   /* -----------------------av0w294--------------------------*/

  AV0WW01.XGPCD = AV8REC.XGPCD; /* gen product class cd*/
  AV0WW01.XWHCD[AV0WWIX1] = AV8REC.XWHCD; /* warehouse code*/
  AV0WW01.SY1STNBR[AV0WWIX1] = AV8REC.SY1STNBR; /* style number*/
  AV0WW01.SY2CLRID[AV0WWIX1] = AV8REC.SY2CLRID; /* color code id*/
  AV0WW01.XDMCD[AV0WWIX1] = AV8REC.XDMCD; /* dimension code*/
  AV0WW01.XQACD[AV0WWIX1] = AV8REC.XQACD; /* quality code*/
  AV0WW01.XOWCD[AV0WWIX1] = AV8REC.XOWCD; /* owner group code*/
  AV0WW01.PC2INSEG[AV0WWIX1] = AV8REC.PC2INSEG; /* spec diff code*/
  AV0WW01.XEGCD[AV0WWIX1] = AV8REC.XEGCD; /* shade code*/
  AV0WW01.XPGCD[AV0WWIX1] = AV8REC.XPGCD; /* package type code*/
  AV0WW01.XUMCD[AV0WWIX1] = AV8REC.XUMCD; /* unit of measure code*/
  AV0WW01.XLCCD[AV0WWIX1] = AV8REC.XLCCD; /* life cycle*/

  AV0WW02.AV0WWIX1 = AV0WW02.AV0WWIX1 + 1; /* increment display index*/

   /* -----------------------av0w294--------------------------*/
end // end AV0W294

// Add page to av0w temp storage
Function AV0W295()
   /* -------------------------av0w295----------------------------*/
            /* Add the next page to temporary storage*/
   /* -------------------------av0w295----------------------------*/

  AV0WW01.XXXTSLEN = AV0WW02.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (AV0WW02.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/
  end


  try
    call "TA0050" (AV0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set AV0WW01 empty; /* M001 display storage*/
    AV0WW02.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    AV0WW02.AV0WWIX1 = 1; /* Display line number*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(76); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "295"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* -------------------------av0w295----------------------------*/
end // end AV0W295

// Close selected set cursor
Function AV0W296()
   /* --------------------------av0w296---------------------------*/
          /* Close the davail.vuatag01 set of table rows*/
   /* --------------------------av0w296---------------------------*/

  try
    call "IO1940" ("CS", SQLCA, AV8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(76); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "296"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VUATAG01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

   /* --------------------------av0w296---------------------------*/
end // end AV0W296

//*** RECORD=AV0WW01 ****
//                        av0ww01
// this record holds up to 15 rows of data from the
// davail.vuatag01 table and a selection indicator.
// the davail.vuatag01 table contains the style key of
// all products that have become unavailable during the current
// processing day.
// ***********************
Record AV0WW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(452) ; 
    10 XGPCD XGPCD ; 
    10 AV0WWSEL AV0WWSEL [15] ; 
    10 XWHCD XWHCD [15] ; 
    10 SY1STNBR SY1STNBR [15] ; 
    10 SY2CLRID SY2CLRID [15] ; 
    10 XDMCD XDMCD [15] ; 
    10 XQACD XQACD [15] ; 
    10 XOWCD XOWCD [15] ; 
    10 PC2INSEG PC2INSEG [15] ; 
    10 XEGCD XEGCD [15] ; 
    10 XPGCD XPGCD [15] ; 
    10 XUMCD XUMCD [15] ; 
    10 XLCCD XLCCD [15] ; 
end // end AV0WW01

//*** RECORD=AV0WW02 ****
//                        av0ww02
// this record holds indexes, save fields, temp storage page
// counts and other miscellaneous program data.
// ***********************
Record AV0WW02 type basicRecord
  5 AV0WWDFL AV0WWDFL ; 
  5 AV0WWFFL AV0WWFFL ; 
  5 AV0WWIFL AV0WWIFL ; 
  5 AV0WWUFL AV0WWUFL ; 
  5 AV0WWFL1 AV0WWFL1 ; 
  5 XGPCD XGPCD ; 
  5 XGPABRV XGPABRV ; 
  5 AV0WW-LIFE-CYCLE-CD AV0WW-LIFE-CYCLE-CD ; 
  5 XLCABRV XLCABRV ; 
  5 AV0WW-QUALITY-CD AV0WW-QUALITY-CD ; 
  5 XQAABRV XQAABRV ; 
  5 AV0WW-OWNER-CD AV0WW-OWNER-CD ; 
  5 AV0WWLST AV0WWLST ; 
  5 AV0WWHST AV0WWHST ; 
  5 AV0WWEOC AV0WWEOC ; 
  5 AV0WWIX1 AV0WWIX1 ; 
  5 TA5TSQIX TA5TSQIX ; 
  5 XXXTSLEN XXXTSLEN ; 
  5 XXXTSPAG XXXTSPAG ; 
  5 AV0WWFDT AV0WWFDT ; 
    10 AV0WWDCC AV0WWDCC ; 
    10 AV0WWDYY AV0WWDYY ; 
end // end AV0WW02

//*** RECORD=AV0WW03 ****
//                        av0ww03
// this record holds up to 15 rows of data from the
// davail.vuatag01 table and a selection indicator.
// the davail.vuatag01 table contains the style key of
// all products that have become unavailable during the current
// processing day.
// ***********************
Record AV0WW03 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(582) ; 
    10 XGPCD XGPCD ; 
    10 XWHCD XWHCD [20] ; 
    10 SY1STNBR SY1STNBR [20] ; 
    10 SY2CLRID SY2CLRID [20] ; 
    10 XDMCD XDMCD [20] ; 
    10 XQACD XQACD [20] ; 
    10 XOWCD XOWCD [20] ; 
    10 PC2INSEG PC2INSEG [20] ; 
    10 XEGCD XEGCD [20] ; 
    10 XPGCD XPGCD [20] ; 
    10 XUMCD XUMCD [20] ; 
    10 XLCCD XLCCD [20] ; 
end // end AV0WW03

//*** RECORD=AV0WW04 ****
//                        av0ww04
// this record holds indexes, and temp storage page
// counts for av0x temporary storage.
// ***********************
Record AV0WW04 type basicRecord
  5 AV0WWIX3 AV0WWIX3 ; 
  5 AV0WWGR1 AV0WWGR1 ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 * num(6) ; 
end // end AV0WW04

//*** RECORD=AV8REC ****
// *****************  availability header table ***************
// 
// db2 table:         davail.vuatag01
// 
// copylib member:    dcl00202
// iomod:             io1940
// 
// key to db2 table:  xwhcd
//                    xgpcd
//                    sy1stnbr
//                    sy2clrid
//                    xdmcd
//                    xqacd
//                    xowcd
//                    xsdcd
//                    xsacd
//                    xpgcd
//                    xumcd
//                    av4prdbd
// 
// 
// date created:      01-19-89
// 
// maintenance log:
// date        init      comments
// --------    ------    --------------------------------------
// 01-19-89    dbruih    created csp record
// ************************************************************
// **********************
Record AV8REC type basicRecord
  5 AV8GRP AV8GRP ; 
    10 XWHCD XWHCD ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 AV4PRDBD AV4PRDBD ; 
    10 XLCCD XLCCD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
end // end AV8REC

// XLC_LIFE_CYC_CD
DataItem AV0WW-LIFE-CYCLE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem AV0WW-OWNER-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem AV0WW-QUALITY-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date century
DataItem AV0WWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request data flag
DataItem AV0WWDFL char(510)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date year
DataItem AV0WWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of cursor flag
DataItem AV0WWEOC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format date
DataItem AV0WWFDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format map flag
DataItem AV0WWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season found flag
DataItem AV0WWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage xfer info
DataItem AV0WWGR1 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save high style range number
DataItem AV0WWHST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// initialize flag
DataItem AV0WWIFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// av0w display storage map/idx
DataItem AV0WWIX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// av0x display storage index
DataItem AV0WWIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save low style range number
DataItem AV0WWLST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rec selection indicator
DataItem AV0WWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag
DataItem AV0WWUFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vuatag01 group item
DataItem AV8GRP char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

