package av0k;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AV0K ****
//                        AV0K
// This application allows a user to override the recommended
// selection criteria for product substitution.  Control to
// this application can either come from AV0M (Availability
// Main Menu) or OP0I via AV0L (Order Entry).  If control comes
// from order entry, the selection criteria will already have
// values.  These may then be overridden before returning to
// AV0L or OP0I.  If control came from AV0M, then a GPC, Style,
// and Color code will be prompted for.  The selection criteria
// are then determined and displayed on the left side of the
// screen.  Each criterion may be overridden so as to alter
// the selection for substition when control is passed to AV0L.
// 
// The user may will exit (pf3) to AV0M if AV0K was invoked by
// Availability.  If this application was invoked by Order
// Entry, then a PF3 will return control to OP0I.
// 
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/20/89  RCORON  New application.
//          08/15/90  MADAMS  Color description for wildcard.
//          08/23/90  MADAMS  Reset original color description
//                            when returning from another scrn.
//          08/24/90  MADAMS  If substitution subsystem was
//                            entered from AV0A, AV0I, or AV0P
//                            then PF3 will return to the one
//                            it came from.
//          12/18/90  dbruih  added dimension code to map
//                            added popup window for
//                            valid colors for product and
//                            dimension codes av0k400.
//          01/04/91  bantho  added popup window for valid
//                            colors and life cycle codes
//                            on left side of screen
//          12/10/91  madams  removed season from the program.
//          07/27/98  csawki  Y2KFIX - Regenned to pick up
//                            Y2K compliant version of XX0XS01.
// *********************
Program AV0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV0KW00 AV0KW00; // record
  AV0KW01 AV0KW01; // record
  AV0KW02 AV0KW02; // record
  AVWREC AVWREC; // record
  COMMAREA COMMAREA ; // record
  OSGREC OSGREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XP0BW01 XP0BW01; // record
  XP0BW02 XP0BW02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XLTTBL {deleteAfterUse = yes}; // table
  use XMLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YCQTBL {deleteAfterUse = yes}; // table
  use AV0KM.AV0KM001,  // forms
      AV0KM.XP0BM001, 
      AV0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAV001: XPAV001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set AV0KM001 initial; /* M001 input/output*/
    set AV0KW00 empty; /* Working storage*/
    set AV0KW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    AV0KW00.AV0KWSWR = "Y"; /* Request for data switch*/
    AVWREC.AVWNWPRD = "N"; /* Reset new product flag*/

    if (COMMAREA.CAFROMAP == "AV0L" /* Same application system*/
     || COMMAREA.CAFROMAP == "AV0K" /* Same application system*/
     || COMMAREA.CAFROMAP == "AV0Q" /* Same application system*/
     || COMMAREA.CAFROMAP == "AV0R" /* Same application system*/
     || COMMAREA.CAFRMSYS == "OP")  /* order processing system*/
      AVWREC.CAUSERA = COMMAREA.CAUSERA;
    else
      set AVWREC empty; /* Initialize work record area*/
    end

    if (AVWREC.XGPCD > " "    /* gpc valued*/
     || AVWREC.SY1STNBR > " " /* style number valued*/
     || AVWREC.SY2CLRID > " ") /* color id valued*/
       /* next sentence*/
    else
      set AVWREC empty; /* init avwrec*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AV0K001; /* Converse the main process*/


    AV0K001: AV0K001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AV0K001; /* Converse the main process*/


  end // end main
end // end AV0K

// Substitution criteria main rtn
Function AV0K001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AV0K100(); /* Obtain the data to display*/

  AV0K200(); /* Format and display the map*/

  AV0K300(); /* Check attention identifier*/

  AV0K400(); /* Reset fields to normal intensity*/

  AV0K500(); /* Verify the entered data*/

  AV0K600(); /* Process valid input request*/


end // end AV0K001

// Obtain data and desc to disp
Function AV0K100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (AV0KW00.AV0KWSWR == "N" /* Data description was not requested*/
   || converseVar.validationMsgNum > 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  AV0K130(); /* load the map from avwrec*/

  AV0KS01(); /* initialize the map attributes*/

   /* ------------------------------------------------------------*/
   /* Obtain the descriptions to be displayed.*/
   /* ------------------------------------------------------------*/

  AV0K110(); /* Obtain the current criteria desc*/
  AV0K120(); /* Obtain the override criteria desc*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data description is complete.*/
   /* ------------------------------------------------------------*/

  AV0KW00.AV0KWSWR = "N"; /* Request for data desc switch*/


end // end AV0K100

// Get curr criteria desc
Function AV0K110()
   /* ------------------------------------------------------------*/
   /* Get the current product criteria descriptions*/
   /* ------------------------------------------------------------*/

   /* dimension code*/

  if (AVWREC.XDMCD[1] == "*") /* dimension code wildcarded*/
    AV0KM001.XDMDESC = "***   A L L   ***";
  else
    if (AVWREC.XDMCD[1] > " ") /* dimension cd is valued*/
      if (AVWREC.XDMCD[1] in XDMTBL.XDMCD /* code found*/
       && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
      else
        AV0KM001.XDMDESC = "*** INVALID CODE ***";
        set AV0KM001.XDMCD cursor, bold;
      end
    else
      AV0KM001.XDMDESC = " ";
    end
  end

   /* product line*/

  if (AVWREC.XPLCD[1] > " ") /* product line is valued*/
    if (AVWREC.XPLCD[1] in XPLTBL.XPLCD /* code found*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.XPLDESC = XPLTBL.XPLSDESC[sysVar.arrayIndex];
    else
      AV0KM001.XPLDESC = "*** INVALID CODE ***";
      set AV0KM001.XPLCD cursor, bold;
    end
  else
    AV0KM001.XPLDESC = " ";
  end

   /* product category*/

  if (AVWREC.XPCCD[1] == "*") /* product cat is wild*/
    AV0KM001.XPCDESC = "***   A L L   ***";
  else
    if (AVWREC.XPCCD[1] > " ") /* product cat is valued*/
      AV0KW00.AV0KWCD1 = AVWREC.XPCCD[1];
      AV0KW00.AV0KWCD2 = AVWREC.XGPCD;
      if (AV0KW00.AV0KWKEY in XPCTBL.XPCKEY /* code found*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XPCDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
      else
        AV0KM001.XPCDESC = "*** INVALID CODE ***";
        set AV0KM001.XPCCD cursor, bold;
      end
    else
      AV0KM001.XPCDESC = " ";
    end
  end

   /* first and last size*/

  AV0KM001.AV0KMSZ1 = " ";
  AV0KM001.AV0KMSZ2 = " ";

  SY4REC.SY4SZSCL = AVWREC.SY4SZSCL; /* set size scale key*/
  AV0KS02(); /* get size scale record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* scale record found*/
    if (AVWREC.OPWRQSZF > 0 /* first size is within*/
     && AVWREC.OPWRQSZF <= 40) /* the 40 size bucket*/
      AV0KW00.AV0KWSB1 = AVWREC.OPWRQSZF;
      AV0KM001.AV0KMSZ1 = SY4REC.SY4IDDSC[AV0KWSB1];
    end
    if (AVWREC.OPWRQSZL > 0 /* last size is within*/
     && AVWREC.OPWRQSZL <= 40) /* the 40 size bucket*/
      AV0KW00.AV0KWSB1 = AVWREC.OPWRQSZL;
      AV0KM001.AV0KMSZ2 = SY4REC.SY4IDDSC[AV0KWSB1];
    end
  end

   /* warehouse*/

  if (AVWREC.XWHCD[1] == "*") /* warehouse is wild*/
    AV0KM001.XWHABRV = "*** ALL ***";
  else
    if (AVWREC.XWHCD[1] > " ") /* warehouse is valued*/
      if (AVWREC.XWHCD[1] in XWHTBL.XWHCD /* code found*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      else
        AV0KM001.XWHABRV = "*** INVALID CODE ***";
        set AV0KM001.XWHCD cursor, bold;
      end
    else
      AV0KM001.XWHABRV = " ";
    end
  end

   /* gender age*/

  if (AVWREC.XGACD[1] == "*") /* gender age is wild*/
    AV0KM001.XGADESC = "***   A L L   ***";
  else
    if (AVWREC.XGACD[1] > " ") /* gender age is valued*/
      AV0KW00.AV0KWCD1 = AVWREC.XGACD[1];
      AV0KW00.AV0KWCD2 = AVWREC.XGPCD;
      if (AV0KW00.AV0KWKEY in XGATBL.XGAKEY /* code found*/
       && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
      else
        AV0KM001.XGADESC = "*** INVALID CODE ***";
        set AV0KM001.XGACD cursor, bold;
      end
    else
      AV0KM001.XGADESC = " ";
    end
  end

   /* silhouette group*/

  if (AVWREC.YSMXSU[1] > " ") /* xsu grp is valued*/
    YSMREC.YSMTBLPF = "XSU"; /* ysm table prefix*/
    YSMREC.YSMSYSPF = "AV"; /* ysm system prefix*/
    YSMREC.YSMSUMID = 1; /* ysm sum id*/
    YSMREC.YSMSUMCD = AVWREC.YSMXSU[1]; /* ysm sum cd (xsu grp)*/

    if (AVWREC.XSUCD == "*")
      YSMREC.YSMSRCVL = "****"; /* wild ysm key value (xsucd)*/
      AV0KS10(); /* declare ysm cursor*/

      if (SQLCA.VAGen_SQLCODE == 0) /* no db2 errors*/
        AV0KS11(); /* fetch next xsu grp rec*/
        if (SQLCA.VAGen_SQLCODE == 0) /* a ysm grp rec was found*/
          AV0KM001.AVWSHGD = YSMREC.YSMSMDSC;
        else
          AV0KM001.AVWSHGD = "*** INVALID CODE ***";
          set AV0KM001.AV0KMYSM cursor, bold;
        end
        AV0KS12(); /* close ysm cursor*/
      end

    else
      YSMREC.YSMSRCVL = AVWREC.XSUCD; /* ysm key value (xsucd)*/
      AV0KS03(); /* get ysm table record*/

      if (SQLCA.VAGen_SQLCODE == 0) /* xsu gp record found*/
        AV0KM001.AVWSHGD = YSMREC.YSMSMDSC;
      else
        AV0KM001.AVWSHGD = "*** INVALID CODE ***";
        set AV0KM001.AV0KMYSM cursor, bold;
      end
    end
  else
    AV0KM001.AVWSHGD = " ";
  end

   /* silhouette code*/

  if (AVWREC.XSUCD[1] == "*") /* silhouette cd is wild*/
    AV0KM001.XSUDESC = "***   A L L   ***";
  else
    if (AVWREC.XSUCD[1] > " ") /* silhouette cd is valued*/
      AV0KW00.AV0KWCD1 = AVWREC.XSUCD[1];
      AV0KW00.AV0KWCD2 = AVWREC.XGPCD;
      if (AV0KW00.AV0KWKEY in XSUTBL.XSUKEY /* code found*/
       && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XSUDESC = XSUTBL.XSUABRV[sysVar.arrayIndex];
      else
        AV0KM001.XSUDESC = "*** INVALID CODE ***";
        set AV0KM001.XSUCD cursor, bold;
      end
    else
      AV0KM001.XSUDESC = " ";
    end
  end

   /* collection code*/

  if (AVWREC.YCQCD[1] == "*") /* coll code is wild*/
    AV0KM001.YCQDESC = "***   A L L   ***";
  else
    if (AVWREC.YCQCD[1] > " ") /* coll code is valued*/
      if (AVWREC.YCQCD[1] in YCQTBL.YCQCD /* code found*/
       && YCQTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.YCQDESC = YCQTBL.YCQDESC[sysVar.arrayIndex];
      else
        AV0KM001.YCQDESC = "*** INVALID CODE ***";
        set AV0KM001.YCQCD cursor, bold;
      end
    else
      AV0KM001.YCQDESC = " ";
    end
  end

   /* life cycle code*/

  if (AVWREC.XLCCD[1] > " ") /* life cyc is valued*/
    if (AVWREC.XLCCD[1] in XLCTBL.XLCCD /* code found*/
     && XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.XLCDESC = XLCTBL.XLCDESC[sysVar.arrayIndex];
    else
      AV0KM001.XLCDESC = "*** INVALID CODE ***";
      set AV0KM001.XLCCD cursor, bold;
    end
  else
    AV0KM001.XLCDESC = " ";
  end

                                          /* quality code*/

  if (AVWREC.XQACD[1] > " ") /* quality is valued*/
    if (AVWREC.XQACD[1] in XQATBL.XQACD /* code found*/
     && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    else
      AV0KM001.XQADESC = "*** INVALID CODE ***";
      set AV0KM001.XQACD cursor, bold;
    end
  else
    AV0KM001.XQADESC = " ";
  end

   /* last type code*/

  if (AVWREC.XLTCD[1] == "*") /* xltcd is wild*/
    AV0KM001.XLTDESC = "***   A L L   ***";
  else
    if (AVWREC.XLTCD[1] > " ") /* xltcd is valued*/
      if (AVWREC.XLTCD[1] in XLTTBL.XLTCD /* code found*/
       && XLTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XLTDESC = XLTTBL.XLTDESC[sysVar.arrayIndex];
      else
        AV0KM001.XLTDESC = "*** INVALID CODE ***";
        set AV0KM001.XLTCD cursor, bold;
      end
    else
      AV0KM001.XLTDESC = " ";
    end
  end

   /* unit of measure code*/

  if (AVWREC.XUMCD[1] > " ") /* xumcd is valued*/
    if (AVWREC.XUMCD[1] in XUMTBL.XUMCD /* code found*/
     && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    else
      AV0KM001.XUMDESC = "*** INVALID CODE ***";
      set AV0KM001.XUMCD cursor, bold;
    end
  else
    AV0KM001.XUMDESC = " ";
  end

   /* color description*/

  if (AVWREC.SY2CLRID[1] > "  ")
    PG2REC.XGPCD = AVWREC.XGPCD; /* gpc cd*/
    PG2REC.SY1STNBR = AVWREC.SY1STNBR; /* style number*/
    PG2REC.SY2CLRID = AVWREC.SY2CLRID[1]; /* color code id*/
    PG2REC.XDMCD = AVWREC.XDMCD[1]; /* dim code*/
    AV0KS04(); /* get color cd record*/

    if (SQLCA.VAGen_SQLCODE == 0) /* color record found*/
      AV0KM001.SY2CLRAB = PG2REC.SY2CLRAB;
    else
      AV0KM001.SY2CLRAB = "*** INVALID CODE ***";
      converseLib.validationFailed(085); /* color record not found*/
      set AV0KM001.SY2CLRID cursor, bold;
    end
  end
end // end AV0K110

// Get ovrd criteria desc
Function AV0K120()
   /* ------------------------------------------------------------*/
   /* Get the override product criteria descriptions*/
   /* ------------------------------------------------------------*/

   /* unit of measure code*/

  if (AV0KM001.AV0KMXUM > " ") /* xumcd is valued*/
    if (AV0KM001.AV0KMXUM in XUMTBL.XUMCD /* code found*/
     && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.XUMDESC2 = XUMTBL.XUMDESC[sysVar.arrayIndex];
    else
      AV0KM001.XUMDESC2 = "*** INVALID CODE ***";
      set AV0KM001.AV0KMXUM cursor, bold;
    end
  else
    AV0KM001.XUMDESC2 = " ";
  end

   /* last type code*/

  if (AV0KM001.AV0KMXLT == "*") /* xltcd is wild*/
    AV0KM001.XLTDESC2 = "***   A L L   ***";
  else
    if (AV0KM001.AV0KMXLT > " ") /* xltcd is valued*/
      if (AV0KM001.AV0KMXLT in XLTTBL.XLTCD /* code found*/
       && XLTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XLTDESC2 = XLTTBL.XLTDESC[sysVar.arrayIndex];
      else
        AV0KM001.XLTDESC2 = "*** INVALID CODE ***";
        set AV0KM001.AV0KMXLT cursor, bold;
      end
    else
      AV0KM001.XLTDESC2 = " ";
    end
  end

   /* quality code*/

  if (AV0KM001.AV0KMXQA > " ") /* quality is valued*/
    if (AV0KM001.AV0KMXQA in XQATBL.XQACD /* code found*/
     && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.XQADESC2 = XQATBL.XQADESC[sysVar.arrayIndex];
    else
      AV0KM001.XQADESC2 = "*** INVALID CODE ***";
      set AV0KM001.AV0KMXQA cursor, bold;
    end
  else
    AV0KM001.XQADESC2 = " ";
  end

   /* life cycle code*/

  if (AV0KM001.AV0KMXLC > " ") /* life cyc is valued*/
    if (AV0KM001.AV0KMXLC in XLCTBL.XLCCD /* code found*/
     && XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.XLCDESC2 = XLCTBL.XLCDESC[sysVar.arrayIndex];
    else
      AV0KM001.XLCDESC2 = "*** INVALID CODE ***";
      set AV0KM001.AV0KMXLC cursor, bold;
    end
  else
    AV0KM001.XLCDESC2 = " ";
  end

   /* collection code*/

  if (AV0KM001.AV0KMYCQ == "*") /* coll code is wild*/
    AV0KM001.YCQDESC2 = "***   A L L   ***";
  else
    if (AV0KM001.AV0KMYCQ > " ") /* coll code is valued*/
      if (AV0KM001.AV0KMYCQ in YCQTBL.YCQCD /* code found*/
       && YCQTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.YCQDESC2 = YCQTBL.YCQDESC[sysVar.arrayIndex];
      else
        AV0KM001.YCQDESC2 = "*** INVALID CODE ***";
        set AV0KM001.AV0KMYCQ cursor, bold;
      end
    else
      AV0KM001.YCQDESC2 = " ";
    end
  end

   /* silhouette code*/

  if (AV0KM001.AV0KMXSU == "*") /* silhouette cd is wild*/
    AV0KM001.XSUDESC2 = "***   A L L   ***";
  else
    if (AV0KM001.AV0KMXSU > " ") /* silhouette cd is valued*/
      AV0KW00.AV0KWCD1 = AV0KM001.AV0KMXSU;
      AV0KW00.AV0KWCD2 = AV0KM001.XGPCD;
      if (AV0KW00.AV0KWKEY in XSUTBL.XSUKEY /* code found*/
       && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XSUDESC2 = XSUTBL.XSUABRV[sysVar.arrayIndex];
      else
        AV0KM001.XSUDESC2 = "*** INVALID CODE ***";
        set AV0KM001.AV0KMXSU cursor, bold;
      end
    else
      AV0KM001.XSUDESC2 = " ";
    end
  end

   /* silhouette group*/

  if (AV0KM001.AV0KMYSM > " ") /* ovrd xsu grp is valued*/
    YSMREC.YSMTBLPF = "XSU"; /* ysm table prefix*/
    YSMREC.YSMSYSPF = "AV"; /* ysm system prefix*/
    YSMREC.YSMSUMID = 1; /* ysm sum id*/
    YSMREC.YSMSUMCD = AV0KM001.AV0KMYSM; /* ysm sum cd (xsu grp)*/

    if (AV0KM001.AV0KMXSU == "*")
      YSMREC.YSMSRCVL = "****"; /* wild ysm key value (xsucd)*/
      AV0KS10(); /* declare ysm cursor*/

      if (SQLCA.VAGen_SQLCODE == 0) /* no db2 errors*/
        AV0KS11(); /* fetch next xsu grp rec*/
        if (SQLCA.VAGen_SQLCODE == 0) /* a ysm grp rec was found*/
          AV0KM001.AVWSHGD2 = YSMREC.YSMSMDSC;
        else
          AV0KM001.AVWSHGD2 = "*** INVALID CODE ***";
          set AV0KM001.AV0KMYSM cursor, bold;
        end
        AV0KS12(); /* close ysm cursor*/
      end

    else
      YSMREC.YSMSRCVL = AV0KM001.AV0KMXSU; /* ysm key value (xsucd)*/
      AV0KS03(); /* get ysm table record*/

      if (SQLCA.VAGen_SQLCODE == 0) /* xsu gp record found*/
        AV0KM001.AVWSHGD2 = YSMREC.YSMSMDSC;
      else
        AV0KM001.AVWSHGD2 = "*** INVALID CODE ***";
        set AV0KM001.AV0KMYSM cursor, bold;
      end
    end
  else
    AV0KM001.AVWSHGD2 = " ";
  end

   /* gender age*/

  if (AV0KM001.AV0KMXGA == "*") /* gender age is wild*/
    AV0KM001.XGADESC2 = "***   A L L   ***";
  else
    if (AV0KM001.AV0KMXGA > " ") /* gender age is valued*/
      AV0KW00.AV0KWCD1 = AV0KM001.AV0KMXGA;
      AV0KW00.AV0KWCD2 = AV0KM001.XGPCD;
      if (AV0KW00.AV0KWKEY in XGATBL.XGAKEY /* code found*/
       && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XGADESC2 = XGATBL.XGADESC[sysVar.arrayIndex];
      else
        AV0KM001.XGADESC2 = "*** INVALID CODE ***";
        set AV0KM001.AV0KMXGA cursor, bold;
      end
    else
      AV0KM001.XGADESC2 = " ";
    end
  end

   /* ovrd 1st and last sz*/

  AV0KM001.AV0KMSZ3 = " ";
  AV0KM001.AV0KMSZ4 = " ";

  if (COMMAREA.CAFROMAP == "AV0Q"
   || COMMAREA.CAFROMAP == "AV0L")
    AV0KM001.AV0KMSZ3 = AVWREC.AVWOREXF;
    AV0KM001.AV0KMSZ4 = AVWREC.AVWOREXL;
  else
    SY4REC.SY4SZSCL = AVWREC.SY4SZSCL; /* set size scale key*/
    AV0KS02(); /* get size scale record*/

    if (SQLCA.VAGen_SQLCODE == 0) /* scale record found*/
      if (AVWREC.AVWRQSZF > 0 /* first size is within*/
       && AVWREC.AVWRQSZF <= 40) /* the 40 size bucket*/
        AV0KW00.AV0KWSB1 = AVWREC.AVWRQSZF;
        AV0KM001.AV0KMSZ3 = SY4REC.SY4IDDSC[AV0KWSB1];
      end
      if (AVWREC.AVWRQSZL > 0 /* last size is within*/
       && AVWREC.AVWRQSZL <= 40) /* the 40 size bucket*/
        AV0KW00.AV0KWSB1 = AVWREC.AVWRQSZL;
        AV0KM001.AV0KMSZ4 = SY4REC.SY4IDDSC[AV0KWSB1];
      end
    end
  end

   /* product category*/

  if (AV0KM001.AV0KMXPC == "*") /* product cat is wild*/
    AV0KM001.XPCDESC2 = "***   A L L   ***";
  else
    if (AV0KM001.AV0KMXPC > " ") /* product cat is valued*/
      AV0KW00.AV0KWCD1 = AV0KM001.AV0KMXPC;
      AV0KW00.AV0KWCD2 = AV0KM001.XGPCD;
      if (AV0KW00.AV0KWKEY in XPCTBL.XPCKEY /* code found*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XPCDESC2 = XPCTBL.XPCSDESC[sysVar.arrayIndex];
      else
        AV0KM001.XPCDESC2 = "*** INVALID CODE ***";
        set AV0KM001.AV0KMXPC cursor, bold;
      end
    else
      AV0KM001.XPCDESC2 = " ";
    end
  end

   /* product line*/

  if (AV0KM001.AV0KMXPL > " ") /* product line is valued*/
    if (AV0KM001.AV0KMXPL in XPLTBL.XPLCD /* code found*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.XPLDESC2 = XPLTBL.XPLSDESC[sysVar.arrayIndex];
    else
      AV0KM001.XPLDESC2 = "*** INVALID CODE ***";
      set AV0KM001.AV0KMXPL cursor, bold;
    end
  else
    AV0KM001.XPLDESC2 = " ";
  end

   /* dimension code*/

  if (AV0KM001.AV0KMDM2 > " ") /* dimension is valued*/
    if (AV0KM001.AV0KMDM2 in XDMTBL.XDMCD /* code found*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.AV0KMDS2 = XDMTBL.XDMDESC[sysVar.arrayIndex];
    else
      AV0KM001.AV0KMDS2 = "*** INVALID CODE ***";
      set AV0KM001.AV0KMDM2 cursor, bold;
    end
  else
    AV0KM001.AV0KMDS2 = " ";
  end

   /* color description*/

  if (AV0KM001.AV0KMCLI > " ") /* ovrd color id is valued*/
    if (AV0KM001.AV0KMCLI == "*") /* ovrd color id wildcard*/
      AV0KM001.AV0KMCLA = "***  A L L  ***";
    else
      PG2REC.XGPCD = AVWREC.XGPCD; /* gpc cd*/
      PG2REC.SY1STNBR = AVWREC.SY1STNBR; /* style number*/
      PG2REC.SY2CLRID = AV0KM001.AV0KMCLI; /* color code id*/
      PG2REC.XDMCD = AVWREC.XDMCD[2]; /* dim code*/
      AV0KS04(); /* get color cd record*/

      if (SQLCA.VAGen_SQLCODE == 0) /* color record found*/
        AV0KM001.AV0KMCLA = PG2REC.SY2CLRAB;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* color record not found*/
          AV0KM001.AV0KMCLA = "DESCRIPTION N/A";
        end
      end
    end
  else
    AV0KM001.AV0KMCLA = " ";
  end
end // end AV0K120

// load av0km001 from avwrec
Function AV0K130()
   /* ------------------------------------------------------------*/
   /* load map (AV0KM001) from AVWREC*/
   /* ------------------------------------------------------------*/


  AV0KM001.OP1ORDBY = AVWREC.OP1ORDBY;
  AV0KM001.KUMSTRNM = AVWREC.KUMSTRNM;
  AV0KM001.KUMCITYS = AVWREC.KUMCITYS;
  AV0KM001.KUMXSTCD = AVWREC.KUMXSTCD;


  AV0KM001.XGPCD = AVWREC.XGPCD; /* source gpc cd*/
  AV0KM001.SY1STNBR = AVWREC.SY1STNBR; /* source style id*/
  AV0KM001.SY1SSTNM = AVWREC.SY1SSTNM; /* source style name*/
  AV0KM001.SY2CLRID = AVWREC.SY2CLRID[1]; /* source color code*/
  AV0KM001.XDMCD = AVWREC.XDMCD[1]; /* dimension code*/
  AV0KM001.SY2CLRAB = AVWREC.SY2CLRAB; /* source color abrev*/


  AV0KM001.XPLCD = AVWREC.XPLCD[1]; /* source product line*/
  AV0KM001.XPCCD = AVWREC.XPCCD[1]; /* source product category*/
  AV0KM001.AVWWSP = AVWREC.AVWWSP; /* source wholesale price*/
  AV0KM001.AVWRTL = AVWREC.AVWRTL; /* source retail price*/
  AV0KM001.XWHCD = AVWREC.XWHCD[1]; /* source warehouse code*/
  AV0KM001.XGACD = AVWREC.XGACD[1]; /* gender age code*/
  AV0KM001.YSMXSU = AVWREC.YSMXSU[1]; /* silhouette group*/
  AV0KM001.XSUCD = AVWREC.XSUCD[1]; /* silhouette code*/
  AV0KM001.YCQCD = AVWREC.YCQCD[1]; /* collection code*/
  AV0KM001.XLCCD = AVWREC.XLCCD[1]; /* life cycle*/
  AV0KM001.XQACD = AVWREC.XQACD[1]; /* quality code*/
  AV0KM001.XLTCD = AVWREC.XLTCD[1]; /* last type*/
  AV0KM001.XUMCD = AVWREC.XUMCD[1]; /* unit of measure*/


  AV0KM001.AV0KMCLI = AVWREC.SY2CLRID[2]; /* product color*/
  AV0KM001.AV0KMDM2 = AVWREC.XDMCD[2]; /* dimension code*/
  AV0KM001.AV0KMCSE = AVWREC.AVWWCSE; /* color search*/
  AV0KM001.AV0KMXPL = AVWREC.XPLCD[2]; /* source product line*/
  AV0KM001.AV0KMXPC = AVWREC.XPCCD[2]; /* product category*/
  AV0KM001.AVWPLO = AVWREC.AVWPLO; /* min wholesale price*/
  AV0KM001.AVWPHI = AVWREC.AVWPHI; /* max wholesale price*/
  AV0KM001.AV0KMXWH = AVWREC.XWHCD[2]; /* warehouse code*/
  AV0KM001.AVWMNQTY = AVWREC.AVWMNQTY; /* minimum quantity*/
  AV0KM001.AV0KMXGA = AVWREC.XGACD[2]; /* gender age code*/
  AV0KM001.AV0KMYSM = AVWREC.YSMXSU[2]; /* silhouette group*/
  AV0KM001.AV0KMXSU = AVWREC.XSUCD[2]; /* silhouette code*/
  AV0KM001.AV0KMYCQ = AVWREC.YCQCD[2]; /* collection code*/
  AV0KM001.AV0KMXLC = AVWREC.XLCCD[2]; /* life cycle*/
  AV0KM001.AV0KMXQA = AVWREC.XQACD[2]; /* quality code*/
  AV0KM001.AV0KMXLT = AVWREC.XLTCD[2]; /* last type*/
  AV0KM001.AV0KMXUM = AVWREC.XUMCD[2]; /* unit of measure*/

end // end AV0K130

// Format and converse the map
Function AV0K200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AVWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AV0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  AV0KM001.XXXRVNBR = "200"; /* Module id*/

  AV0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AV0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AVWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (AVWREC.XXXMSGNO != 0) /* Message to display*/

      if (AVWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(AVWREC.XXXMSGNO);
      end /* Message number*/
    else
      AV0KM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    if (AVWREC.XXXMODID > " ")
      AV0KM001.XXXRVNBR = AVWREC.XXXMODID; /* Module identification*/
    end

    set AV0KM001 alarm; /* Indicate sound alarm*/

  end

  converse AV0KM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AVWREC.XXXMODID = " "; /* Module identification*/
  AVWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = AV0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = AV0KM001.CAITEM; /* Application data*/


end // end AV0K200

// Check attention identifier
Function AV0K300()
   /* ------------------------------------------------------------*/
   /* Depending on from which system this application was invoked*/
   /* , certain function keys are disabled to maintain the flow*/
   /* and data integrity of order entry.*/
   /* ------------------------------------------------------------*/

  if (AVWREC.AVWORDFL == "Y") /* order entry mode (no exists)*/
    if (converseVar.eventKey is enter /* enter was pressed*/
     || converseVar.eventKey is pf3   /* return to op0i*/
     || converseVar.eventKey is pf12  /* edit fields*/
     || converseVar.eventKey is pa2)  /* refresh screen*/
       /* next sentence*/
    else
      converseLib.validationFailed(15); /* invalid pf key*/
      exit stack;
    end
  else /* availability mode (exits allowed)*/
    if (converseVar.eventKey is enter /* enter was pressed*/
     || converseVar.eventKey is pf1   /* goal help screen*/
     || converseVar.eventKey is pf3   /* return to av0m*/
     || converseVar.eventKey is pf4   /* return to master menu*/
     || converseVar.eventKey is pf5   /* clear screen*/
     || converseVar.eventKey is pf12  /* edit fields*/
     || converseVar.eventKey is pa2)  /* refresh screen*/
       /* next sentence*/
    else
      converseLib.validationFailed(15); /* invalid pfkey*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If CLEAR was requested, clear avwrec and redisplay empty.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* pf5 was pressed -- clear screen*/

    set AVWREC empty; /* clear all incoming data*/
    AV0KW00.AV0KWSWR = "Y"; /* Request for data from avwrec*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If REFRESH was requested, reload the map fields from avwrec*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed -- refresh screen*/

    AV0KW00.AV0KWSWR = "Y"; /* Request for data from avwrec*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XPAV002(); /* Exit to another application*/

      set AV0KM001.CATOAP cursor, bold; /* Highlight*/

    else

      AVWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(23); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  else
    if (AV0KM001.CAITEM > " ") /* FAST PATH item but no option*/

      AVWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(28); /* Indicate option required*/
      set AV0KM001.CAITEM cursor, bold;

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AV0KM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      /* ------------------------------------------------------------*/
        /* return to either OP0I or AV0A or AV0I or AV0P*/
      /* ------------------------------------------------------------*/
      if (AVWREC.AVWORDFL == "Y") /* invoked by order entry*/
        OSGREC.OSGGROUP = AVWREC.OSGGROUP; /* reset osgrec values*/
        COMMAREA.CATOAP = OSGREC.XSRSYSID;
        OSGREC.OP2SSTYN = " "; /* reset subs style cd*/
        OSGREC.OP2SCLCD = " "; /* reset subs color cd*/
        OSGREC.OP2SDMCD = " "; /* reset subs dim cd*/
        COMMAREA.CAUSERA = OSGREC.OSGGROUP; /* save user area*/

        AV0KS09(); /* Exit to order entry*/

      else /* invoked from availability*/
        if (AVWREC.XSRSYSID > "    ") /* Got appl. to retn. to*/

          COMMAREA.CATOAP = AVWREC.XSRSYSID; /* Go to orig. appl.*/
          COMMAREA.CAUSERA = AVWREC.CAUSERA; /* Move avwrec to comm*/

          AV0KS13(); /* Exit to either av0a,av0i,av0p*/

        else

          set AVWREC empty; /* reset avwrec*/
          COMMAREA.CATOAP = "AV0M"; /* TO application*/
        end
      end
    end

    XPAV002(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end
end // end AV0K300

// Reset highlighted fields
Function AV0K400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to default values.*/
   /* ------------------------------------------------------------*/

  AV0KS01(); /* set initial attributes*/

   /* ------------------------------------------------------------*/
   /* verify the gpc,style,color & dimension*/
   /* if invalid, return error message*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.XGPCD > " " /* all key fields filled*/
   && AV0KM001.SY1STNBR > " "
   && AV0KM001.SY2CLRID > " "
   && AV0KM001.XDMCD > " ")
    if (AV0KM001.SY2CLRID != "?" /* no lists requested*/
     && AV0KM001.XDMCD != "?")  
      PG2REC.XGPCD = AV0KM001.XGPCD;
      PG2REC.SY1STNBR = AV0KM001.SY1STNBR;
      PG2REC.SY2CLRID = AV0KM001.SY2CLRID;
      PG2REC.XDMCD = AV0KM001.XDMCD;
      AV0KS04();

      if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
        converseLib.validationFailed(7); /* set message number*/
        set AV0KM001.SY2CLRID cursor, bold; /* hilite fields*/
        set AV0KM001.XDMCD bold; /* hilite fields*/
        exit stack; /* send screen*/
      end
    else
      XP0BW01.XGPCD = AV0KM001.XGPCD;
      XP0BW01.SY1STNBR = AV0KM001.SY1STNBR;
      XP0BW01.SY2CLRID = AV0KM001.SY2CLRID;
      XP0BW01.XDMCD = "00";
    end
  else
    if (AV0KM001.XGPCD == " ") /* no gpc code entered*/
      converseLib.validationFailed(20); /* set message number*/
      set AV0KM001.XGPCD cursor, bold; /* hilite fields*/
      exit stack; /* send screen*/
    else
      XP0BW01.XGPCD = AV0KM001.XGPCD;
    end
    if (AV0KM001.SY1STNBR == " ")
      converseLib.validationFailed(19); /* set message number*/
      set AV0KM001.SY1STNBR cursor, bold; /* hilite fields*/
      exit stack; /* send screen*/
    else
      XP0BW01.SY1STNBR = AV0KM001.SY1STNBR;
    end

    if (AV0KM001.SY2CLRID == " "   /* if nothing entered or*/
     || AV0KM001.SY2CLRID == "0  " /* if any invalid entries*/
     || AV0KM001.SY2CLRID == " 0 " 
     || AV0KM001.SY2CLRID == "  0" 
     || AV0KM001.SY2CLRID == " 00")
      if (AV0KM001.XGPCD != "02" /* if gpc not = 02 and*/
       && AV0KM001.XGPCD != "03") /* gpc not = 03*/
        AV0KM001.SY2CLRID = "000"; /* set color to zeros*/
      else
        AV0KM001.SY2CLRID = "?"; /* set for pop-up*/
      end
    else
      XP0BW01.SY2CLRID = AV0KM001.SY2CLRID;
    end

    if (AV0KM001.XDMCD == " ") /* if dimension not entered*/
      AV0KM001.XDMCD = "00"; /* set to zeros*/
      XP0BW01.XDMCD = "00";
    end
  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.SY2CLRID == "?" /* color code requested (left side)*/
   || AV0KM001.XDMCD == "?"    /* dimension code requested (left side)*/
   || AV0KM001.AV0KMCLI == "?" /* color code override requested*/
   || AV0KM001.AV0KMDM2 == "?" /* dimension code override requested*/
   || AV0KM001.AV0KMXPL == "?" /* product line override requested*/
   || AV0KM001.AV0KMXPC == "?" /* product category ovrd requested*/
   || AV0KM001.AV0KMXGA == "?" /* gender/age ovrd requested*/
   || AV0KM001.AV0KMYSM == "?" /* silhouette group ovrd requested*/
   || AV0KM001.AV0KMXSU == "?" /* silhouette code ovrd requested*/
   || AV0KM001.AV0KMYCQ == "?" /* collection code ovrd requested*/
   || AV0KM001.AV0KMXLC == "?" /* life cycle code ovrd requested*/
   || AV0KM001.AV0KMXQA == "?" /* quality code ovrd requested*/
   || AV0KM001.AV0KMXLT == "?" /* last type code ovrd requested*/
   || AV0KM001.AV0KMXUM == "?") /* unit of measure ovrd requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      AVWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of color codes - left side*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.SY2CLRID == "?") /* color code requested*/
    set XP0BW01 empty; /* clear work table record*/

    XP0BW01.XGPCD = AV0KM001.XGPCD; /* requested gen prod class*/
    XP0BW01.SY1STNBR = AV0KM001.SY1STNBR; /* requested style nbr*/

    XP0BW01.XDMCD = AV0KM001.XDMCD; /* dimension code*/

    XP0BW01.XLCCD[1] = "**"; /* specify lifecycle code*/

    XP0B001(); /* select valid colors and display list*/

    if (XP0BW01.XP0BWERR == "Y") /* if db2 error occurred*/
      if (XP0BW01.XP0BWENR == 1) /* if gpc/style not found*/
        converseLib.validationFailed(6); /* set error number*/
      end
      
      // VAGen Info - map = AV0KM001
      converseLib.clearScreen();
       /* clear map*/
      exit stack; /* exit to display map*/
    end

    if (XP0BW02.XP0BWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMCLI = AVWREC.SY2CLRID[2]; /* Restore prior code*/
    else
      AV0KM001.SY2CLRID = XP0BW01.SY2CLRID[XP0BWPIX]; /* color*/
      AV0KM001.SY2CLRAB = XP0BW01.SY2CLRDS[XP0BWPIX]; /* descr*/
    end

    set AV0KM001.SY2CLRID cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes-left side*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.XDMCD == "?") /* dimension code override requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DIMENSION CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      AV0KM001.XDMCD = AVWREC.XDMCD[1]; /* Restore prior code*/
    else
      AV0KM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      AV0KM001.XDMDESC = XDMTBL.XDMDESC[XX0XWPIX]; /* cd description*/
    end
    set AV0KM001.XDMCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of color codes-override*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMCLI == "?") /* color code override requested*/
    set XP0BW01 empty; /* clear work table record*/

    XP0BW01.XGPCD = AV0KM001.XGPCD; /* requested gen prod class*/
    XP0BW01.SY1STNBR = AV0KM001.SY1STNBR; /* requested style nbr*/

    if (AVWREC.XDMCD[2] > " ")
      XP0BW01.XDMCD = AVWREC.XDMCD[2]; /* requested dimension cd*/
    else
      XP0BW01.XDMCD = AVWREC.XDMCD[1];
    end

    if (AV0KM001.AV0KMXLC > " ")
      XP0BW01.XLCCD = AV0KM001.AV0KMXLC; /* specify lifecycle code*/
    else
      XP0BW01.XLCCD = AVWREC.XLCCD[1];
    end

    XP0B001(); /* select valid colors and display list*/

    if (XP0BW01.XP0BWERR == "Y") /* if db2 error occurred*/
      if (XP0BW01.XP0BWENR == "1") /* if gpc/style not found*/
        converseLib.validationFailed(6); /* set error number*/
      end
      
      // VAGen Info - map = AV0KM001
      converseLib.clearScreen();
       /* clear map*/
      exit stack; /* exit to display map*/
    end

    if (XP0BW02.XP0BWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMCLI = AVWREC.SY2CLRID[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMCLI = XP0BW01.SY2CLRID[XP0BWPIX]; /* color*/
      AV0KM001.AV0KMCLA = XP0BW01.SY2CLRDS[XP0BWPIX]; /* descr*/
    end

    set AV0KM001.AV0KMCLI cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display dimension codes. (override side)*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMDM2 == "?") /* dimension code override requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DIMENSION CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      AV0KM001.AV0KMDM2 = AVWREC.XDMCD[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMDM2 = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      AV0KM001.AV0KMDS2 = XDMTBL.XDMDESC[XX0XWPIX]; /* cd description*/
    end
    set AV0KM001.AV0KMDM2 cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of XPL codes.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMXPL == "?") /* product line override requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  PRODUCT LINE"; /* Heading*/
    XX0XW02.XGPCD = AV0KM001.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMXPL = AVWREC.XPLCD[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMXPL = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      AV0KM001.XPLDESC2 = XPLTBL.XPLDESC[XX0XWPIX]; /* cd description*/

    end

    set AV0KM001.AV0KMXPL cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMXPC == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = AV0KM001.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMXPC = AVWREC.XPCCD[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMXPC = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      AV0KM001.XPCDESC2 = XPCTBL.XPCDESC[XX0XWPIX]; /* Description*/

    end

    set AV0KM001.AV0KMXPC cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of gender/age codes.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMXGA == "?") /* gender/age list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  GENDER/AGE"; /* Heading*/
    XX0XW02.XGPCD = AV0KM001.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMXGA = AVWREC.XGACD[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMXGA = XGATBL.XGACD[XX0XWPIX]; /* Selected code*/
      AV0KM001.XGADESC2 = XGATBL.XGADESC[XX0XWPIX]; /* Description*/

    end

    set AV0KM001.AV0KMXGA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of silhouette group codes.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMYSM == "?") /* silhouette group list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  SILHOUETTE GROUP"; /* Heading*/
    AV0K410(); /* Load xsu grp into work table*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      AV0K420(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMYSM = AVWREC.YSMXSU[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMYSM = AV0KW01.AV0KWKY[XX0XWPIX]; /* Selected code*/
      AV0KM001.AVWSHGD2 = AV0KW01.AV0KWDSC[XX0XWPIX]; /* Description*/

    end

    set AV0KM001.AV0KMYSM cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of silhouette codes.*/
     /* Note:  if the product class is footwear, the xsucd*/
            /* list that will be shown on the pop-up window*/
            /* will come from a csp table (xsutbl).  if the*/
            /* product class is apparel AND the silhouette group*/
            /* on the screen is valued, all valid xsucd's for*/
            /* that silhouette group will be extracted and listed*/
            /* on the pop-up screen.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMXSU == "?") /* silhouette list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  SILHOUETTE CODE"; /* Heading*/

    if (AV0KM001.XGPCD == "03"  /* apparel -- use ysm db2 table*/
     && AV0KM001.AV0KMYSM > " " /* and xsu grp is valued*/
     && AV0KM001.AV0KMYSM != "*") /* and is not wild*/
      AV0K430(); /* Load xsu cd into work table*/

      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        AV0K420(); /* Display the list*/
      end

      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        AV0KM001.AV0KMXSU = AVWREC.XSUCD[2]; /* Restore prior code*/
      else
        AV0KM001.AV0KMXSU = AV0KW01.AV0KWKY[XX0XWPIX]; /* Sel code*/
        AV0KM001.XSUDESC2 = AV0KW01.AV0KWDSC[XX0XWPIX]; /* Descr*/

      end

    else /* footwear, etc... -- use csp tbl*/
      XX0XW02.XGPCD = AV0KM001.XGPCD; /* GPC code*/

      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXSU01(); /* Display the list*/
      end

      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        AV0KM001.AV0KMXSU = AVWREC.XSUCD[2]; /* Restore prior code*/
      else
        AV0KM001.AV0KMXSU = XSUTBL.XSUCD[XX0XWPIX]; /* Selected code*/
        AV0KM001.XSUDESC2 = XSUTBL.XSUDESC[XX0XWPIX]; /* Description*/

      end
    end

    set AV0KM001.AV0KMXSU cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of collection codes.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMYCQ == "?") /* collection list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  COLLECTION CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYCQ01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMYCQ = AVWREC.YCQCD[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMYCQ = YCQTBL.YCQCD[XX0XWPIX]; /* Selected code*/
      AV0KM001.YCQDESC2 = YCQTBL.YCQDESC[XX0XWPIX]; /* Description*/

    end

    set AV0KM001.AV0KMYCQ cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of life cycle codes.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMXLC == "?") /* life cycle list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  LIFE CYCLE CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXLC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMXLC = AVWREC.XLCCD[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMXLC = XLCTBL.XLCCD[XX0XWPIX]; /* Selected code*/
      AV0KM001.XLCDESC2 = XLCTBL.XLCDESC[XX0XWPIX]; /* Description*/

    end

    set AV0KM001.AV0KMXLC cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of quality codes.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMXQA == "?") /* quality list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  QUALITY CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMXQA = AVWREC.XQACD[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMXQA = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
      AV0KM001.XQADESC2 = XQATBL.XQADESC[XX0XWPIX]; /* Description*/

    end

    set AV0KM001.AV0KMXQA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of last type codes.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMXLT == "?") /* last type list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  LAST TYPE CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXLT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMXLT = AVWREC.XLTCD[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMXLT = XLTTBL.XLTCD[XX0XWPIX]; /* Selected code*/
      AV0KM001.XLTDESC2 = XLTTBL.XLTDESC[XX0XWPIX]; /* Description*/

    end

    set AV0KM001.AV0KMXLT cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of unit of measure codes.*/
   /* ------------------------------------------------------------*/

  if (AV0KM001.AV0KMXUM == "?") /* unit of measure list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  UNIT OF MEASURE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXUM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      AV0KM001.AV0KMXUM = AVWREC.XUMCD[2]; /* Restore prior code*/
    else
      AV0KM001.AV0KMXUM = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
      AV0KM001.XUMDESC2 = XUMTBL.XUMDESC[XX0XWPIX]; /* Description*/

    end

    set AV0KM001.AV0KMXUM cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  // VAGen Info - map = AV0KM001
  converseLib.clearScreen();
   /* Clear screen before display*/

  AVWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(209); /* Indicate press ENTER*/
   /* MOVE 'Y' TO AV0KW00.AV0KWSWR    ; Request for description*/

  exit stack; /* Exit to display map*/

end // end AV0K400

// Load xsu grp into temp table
Function AV0K410()
   /* ------------------------------------------------------------*/
    /* Load silhouette group codes and descriptions into a temp-*/
    /* porary working storage table (AV0KW01) for pop-up screen*/
    /* processing.*/
   /* ------------------------------------------------------------*/

  AV0KW00.AV0KWSB3 = 1; /* init subscript*/
  while (AV0KWSB3 < 51) /* init temp table*/
    AV0KW01.AV0KWKY[AV0KWSB3] = " ";
    AV0KW01.AV0KWDSC[AV0KWSB3] = " ";
    AV0KWSB3 = AV0KWSB3 + 1;
  end


  set YSMREC empty; /* Clear ysm area*/
  YSMREC.YSMTBLPF = "XSU"; /* ysm table prefix*/
  YSMREC.YSMSYSPF = "AV"; /* ysm system prefix*/
  YSMREC.YSMSUMID = 1; /* ysm sum id*/
  YSMREC.YSMSUMCD = "**"; /* ysm sum cd (xsu grp)*/
  YSMREC.YSMSRCVL = "****"; /* ysm key value (xsucd)*/
  AV0KS05(); /* sel xsu grp record*/


  if (SQLCA.VAGen_SQLCODE != 0) /* error in db2 select*/
    AV0KW01.AV0KWKY[1] = "99";
    return; /* return with empty temp table*/
  end


  AV0KW00.AV0KWSB3 = 1; /* init subscript*/
  AV0KW01.AV0KWSVK = "  "; /* init save key*/
  SQLCA.VAGen_SQLCODE = 0; /* init status code*/

  while (AV0KWSB3 < 50 /* load temp table*/
   && SQLCA.VAGen_SQLCODE == 0)
    AV0KS06(); /* fetch next xsu grp*/
    if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
      if (YSMREC.YSMSUMCD != AV0KW01.AV0KWSVK) /* change in key*/
        AV0KW01.AV0KWSVK = YSMREC.YSMSUMCD;
        AV0KW01.AV0KWKY[AV0KWSB3] = YSMREC.YSMSUMCD;
        AV0KW01.AV0KWDSC[AV0KWSB3] = YSMREC.YSMSMDSC;
        AV0KWSB3 = AV0KWSB3 + 1;
      end
    else
      AV0KW01.AV0KWKY[AV0KWSB3] = "99";
    end
  end

  if (AV0KWSB3 == 50) /* table size may not be enough*/
    AV0KW01.AV0KWKY[AV0KWSB3] = "99";
  end


  AV0KS07(); /* close xsu grp cursor*/


end // end AV0K410

// converse AV0K temp tbl window
Function AV0K420()
   /* ------------------------------------------------------------*/

    /* CONVERSE POP UP WINDOW FOR SILHOUETTE GROUP db2 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

      /* Note that the values for the pop-up screen will come*/
       /* from a temporary working storage table and not from*/
       /* a CSP table as normally would be.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && AV0KW01.AV0KWKY[XX0XWCT1] != "99") /* Or end of data*/
        XX0XM001.XX0XMCD[XX0XWCT2] = AV0KW01.AV0KWKY[XX0XWCT1];
        XX0XM001.XX0XMDES[XX0XWCT2] = AV0KW01.AV0KWDSC[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
        if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
          XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
        end
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        XX0XM001.XX0XMCD[XX0XWCT2] = AV0KW01.AV0KWKY[XX0XWCT1];
        XX0XM001.XX0XMDES[XX0XWCT2] = AV0KW01.AV0KWDSC[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && AV0KW01.AV0KWKY[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end AV0K420

// Load xsu cd into temp table
Function AV0K430()
   /* ------------------------------------------------------------*/
    /* Load silhouette codes and descriptions into a temp-*/
    /* porary working storage table (AV0KW01) for pop-up screen*/
    /* processing.*/
   /* ------------------------------------------------------------*/

  AV0KW00.AV0KWSB3 = 1; /* init subscript*/
  while (AV0KWSB3 < 51) /* init temp table*/
    AV0KW01.AV0KWKY[AV0KWSB3] = " ";
    AV0KW01.AV0KWDSC[AV0KWSB3] = " ";
    AV0KWSB3 = AV0KWSB3 + 1;
  end


  set YSMREC empty; /* Clear ysm area*/
  YSMREC.YSMTBLPF = "XSU"; /* ysm table prefix*/
  YSMREC.YSMSYSPF = "AV"; /* ysm system prefix*/
  YSMREC.YSMSUMID = 1; /* ysm sum id*/
  YSMREC.YSMSUMCD = AV0KM001.AV0KMYSM; /* ysm sum cd (xsu grp)*/
  YSMREC.YSMSRCVL = "****"; /* ysm key value (xsucd)*/
  AV0KS05(); /* sel xsu cd record*/


  if (SQLCA.VAGen_SQLCODE != 0) /* error in db2 select*/
    AV0KW01.AV0KWKY[1] = "99";
    return; /* return with empty temp table*/
  end


  AV0KW00.AV0KWSB3 = 1; /* init subscript*/
  AV0KW01.AV0KWSVK = "  "; /* init save key*/
  SQLCA.VAGen_SQLCODE = 0; /* init status code*/

  while (AV0KWSB3 < 50 /* load temp table*/
   && SQLCA.VAGen_SQLCODE == 0)
    AV0KS06(); /* fetch next xsu cd*/
    if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
      AV0KW01.AV0KWKY[AV0KWSB3] = YSMREC.YSMSRCVL;
      AV0KW01.AV0KWDSC[AV0KWSB3] = YSMREC.YSMSMDSC;
      AV0KWSB3 = AV0KWSB3 + 1;
    else
      AV0KW01.AV0KWKY[AV0KWSB3] = "99";
    end
  end

  if (AV0KWSB3 == 50) /* table size may not be enough*/
    AV0KW01.AV0KWKY[AV0KWSB3] = "99";
  end


  AV0KS07(); /* close xsu cd cursor*/


end // end AV0K430

// Verify data that was entered
Function AV0K500()
   /* ------------------------------------------------------------*/
   /* If this application originally was called from the avail-*/
   /* ability system, validate the source gpc/style/color codes*/
   /* because this can be changed on the screen.  If this appli-*/
   /* cation was called through the order entry system, the ori-*/
   /* ginal product id will be protected and cannot change.*/

   /* The override selection criteria fields will be validated*/
   /* everytime except when the source (original) product id*/
   /* was changed.  In this case, the new product id is validated*/
   /* and then control is passed on back to AV0L to get a new set*/
   /* of original selection criteria.*/
   /* ------------------------------------------------------------*/


  if (AVWREC.AVWORDFL != "Y") /* Not order entry mode*/

    AV0K510(); /* Validate orig prod id*/

    if (converseVar.validationMsgNum == 0 /* No errors found*/
     && AVWREC.AVWNWPRD == "N")           /* source prod id did not change*/

      AV0K520(); /* Validate override fields*/

    end

  else /* Order entry mode*/

    AV0K520(); /* Validate override fields*/

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If EDIT was requested, indicate press enter to update.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* EDIT was requested*/

    AVWREC.XXXMODID = "500"; /* Module identification*/
    AVWREC.XXXMSGNO = 209; /* Press enter to continue*/

    exit stack; /* Exit to display map*/

  end


end // end AV0K500

// Validate original prod id
Function AV0K510()
   /* ------------------------------------------------------------*/
   /* Validate original/source GPC, STYLE, and COLOR ID*/
   /* ------------------------------------------------------------*/

   /* validate style/color*/

  set PG2REC empty; /* clear style/color rec*/
  PG2REC.XGPCD = AV0KM001.XGPCD; /* gpc cd*/
  PG2REC.SY1STNBR = AV0KM001.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = AV0KM001.SY2CLRID; /* color code id*/
  PG2REC.XDMCD = AV0KM001.XDMCD; /* dim code*/
  AV0KS04(); /* get color cd record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* color record found*/
    AV0KM001.SY2CLRAB = PG2REC.SY2CLRAB;
  else /* color record not found*/
    AV0KM001.SY2CLRAB = "*** INVALID CODE ***";
    converseLib.validationFailed(007);
                                   /* color/dimension does not exist*/
    set AV0KM001.XGPCD bold;
    set AV0KM001.SY1STNBR bold;
    set AV0KM001.SY2CLRID cursor, bold;
    set AV0KM001.XDMCD bold;
  end

   /* validate gpc/style*/

  SY1REC.XGPCD = AV0KM001.XGPCD; /* gpc cd*/
  SY1REC.SY1STNBR = AV0KM001.SY1STNBR; /* style number*/
  AV0KS08(); /* get style/color rec*/

  if (SQLCA.VAGen_SQLCODE == 0) /* style record found*/
    AV0KM001.SY1SSTNM = SY1REC.SY1SSTNM;
  else /* color record not found*/
    AV0KM001.SY1SSTNM = "*** INVALID CODE ***";
    converseLib.validationFailed(006); /* Invalid product id*/
    set AV0KM001.XGPCD bold;
    set AV0KM001.SY1STNBR cursor, bold;
  end

   /* validate gpc*/

  if (AV0KM001.XGPCD > " ") /* valued gpc*/
    if (AV0KM001.XGPCD in XGPTBL.XGPCD /* code found*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
       /* next sentence*/
    else
      converseLib.validationFailed(071); /* Invalid gpc code*/
      set AV0KM001.XGPCD cursor, bold;
    end
  else
    converseLib.validationFailed(064); /* Please enter gpc code*/
    set AV0KM001.XGPCD cursor, bold;
  end

  if (converseVar.validationMsgNum > 0) /* Errors found*/
    AVWREC.XXXMODID = "510"; /* Module identification*/
  else
    if (AV0KM001.XGPCD != AVWREC.XGPCD          /* gpc changed*/
     || AV0KM001.SY1STNBR != AVWREC.SY1STNBR    /* style changed*/
     || AV0KM001.SY2CLRID != AVWREC.SY2CLRID[1] /* color changed*/
     || AV0KM001.XDMCD != AVWREC.XDMCD[1])      /* dimension changed*/

      AVWREC.AVWNWPRD = "Y"; /* Changed flag*/
      AVWREC.SY1SSTNM = SY1REC.SY1SSTNM;
      AVWREC.SY2CLRAB = PG2REC.SY2CLRAB;
    else
      AVWREC.AVWNWPRD = "N"; /* key not changed*/
    end
  end


end // end AV0K510

// Validate override fields (main
Function AV0K520()
   /* ------------------------------------------------------------*/
   /* validate the override product criteria fields*/
   /* ------------------------------------------------------------*/

   /* ============================================================*/
                                     /* : season code*/
                                     /* : unit of measure code*/
                /* V A L I D A T E      : last type code*/
                                     /* : quality code*/
                                     /* : life cycle code*/
  AV0K521();

   /* ============================================================*/
                                     /* : collection code*/
                /* V A L I D A T E      : silhouette code*/
                                     /* : silhouette group*/
  AV0K522();

   /* ============================================================*/
                                     /* : gender age*/
                /* V A L I D A T E      : minimum quantity*/
                                     /* : warehouse codes*/
  AV0K523();

   /* ============================================================*/
                                     /* : size range*/
                                     /* : wholesale price range*/
                /* V A L I D A T E      : product category*/
                                     /* : product line*/
                                     /* : color description*/
  AV0K524(); /* dimension code*/

end // end AV0K520

// Validate override fields 1
Function AV0K521()
   /* ------------------------------------------------------------*/
   /* validate the override product criteria fields*/
   /* ------------------------------------------------------------*/

                                          /* unit of measure code*/

  if (AV0KM001.AV0KMXUM == " ") /* xumcd is not overridden*/
    AV0KM001.AV0KMXUM = AV0KM001.XUMCD;
  end

  if (AV0KM001.AV0KMXUM in XUMTBL.XUMCD /* code found*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    AV0KM001.XUMDESC2 = XUMTBL.XUMDESC[sysVar.arrayIndex];
  else
    AV0KM001.XUMDESC2 = "*** INVALID CODE ***";
    converseLib.validationFailed(124); /* invalid unit of measure*/
    set AV0KM001.AV0KMXUM cursor, bold;
  end

                                          /* last type code*/

  if (AV0KM001.AV0KMXLT == " " /* xltcd is not overridden*/
   && AV0KM001.XGPCD == "02")  /* and product is footwear*/
    AV0KM001.AV0KMXLT = AV0KM001.XLTCD;
  end

  if (AV0KM001.XGPCD == "02") /* footwear*/
    if (AV0KM001.AV0KMXLT != "*") /* xltcd is not wild*/
      if (AV0KM001.AV0KMXLT in XLTTBL.XLTCD /* code found*/
       && XLTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XLTDESC2 = XLTTBL.XLTDESC[sysVar.arrayIndex];
      else
        AV0KM001.XLTDESC2 = "*** INVALID CODE ***";
        converseLib.validationFailed(242); /* invalid last type code*/
        set AV0KM001.AV0KMXLT cursor, bold;
      end
    else
      AV0KM001.XLTDESC2 = "***   A L L   ***";
    end
  else /* apparel, etc ...*/
    if (AV0KM001.AV0KMXLT > " ") /* cannot have last type for aprl*/
      AV0KM001.XLTDESC2 = "*** INVALID CODE ***";
      converseLib.validationFailed(242); /* invalid last type code*/
      set AV0KM001.AV0KMXLT cursor, bold;
    end
  end

                                          /* quality code*/

  if (AV0KM001.AV0KMXQA == " ") /* xqacd is not overridden*/
    AV0KM001.AV0KMXQA = AV0KM001.XQACD;
  end

  if (AV0KM001.AV0KMXQA in XQATBL.XQACD /* code found*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    AV0KM001.XQADESC2 = XQATBL.XQADESC[sysVar.arrayIndex];
  else
    AV0KM001.XQADESC2 = "*** INVALID CODE ***";
    converseLib.validationFailed(044); /* invalid quality code*/
    set AV0KM001.AV0KMXQA cursor, bold;
  end

                                          /* life cycle code*/

  if (AV0KM001.AV0KMXLC == " ") /* xlccd is not overridden*/
    AV0KM001.AV0KMXLC = AV0KM001.XLCCD;
  end

  if (AV0KM001.AV0KMXLC in XLCTBL.XLCCD /* code found*/
   && XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    AV0KM001.XLCDESC2 = XLCTBL.XLCDESC[sysVar.arrayIndex];
  else
    AV0KM001.XLCDESC2 = "*** INVALID CODE ***";
    converseLib.validationFailed(047); /* invalid life cycle code*/
    set AV0KM001.AV0KMXLC cursor, bold;
  end
end // end AV0K521

// Validate override fields 2
Function AV0K522()
   /* ------------------------------------------------------------*/
   /* validate the override product criteria fields*/
   /* ------------------------------------------------------------*/

                                          /* collection code*/

  if (AV0KM001.AV0KMYCQ == " ") /* ycqcd is not overridden*/
    AV0KM001.AV0KMYCQ = AV0KM001.YCQCD;
  end

  if (AV0KM001.AV0KMYCQ != "*") /* collection code not wild*/
    if (AV0KM001.AV0KMYCQ in YCQTBL.YCQCD /* code found*/
     && YCQTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.YCQDESC2 = YCQTBL.YCQDESC[sysVar.arrayIndex];
    else
      AV0KM001.YCQDESC2 = "*** INVALID CODE ***";
      converseLib.validationFailed(245); /* invalid collection code*/
      set AV0KM001.AV0KMYCQ cursor, bold;
    end
  else /* collection code is wild*/
    AV0KM001.YCQDESC2 = "***   A L L   ***";
  end

                                          /* silhouette code*/

  if (AV0KM001.AV0KMXSU == " ") /* xsucd is not overridden*/
    AV0KM001.AV0KMXSU = AV0KM001.XSUCD;
  end

  if (AV0KM001.AV0KMXSU != "*") /* silhouette cd is not wild*/
    AV0KW00.AV0KWCD1 = AV0KM001.AV0KMXSU;
    AV0KW00.AV0KWCD2 = AV0KM001.XGPCD;
    if (AV0KW00.AV0KWKEY in XSUTBL.XSUKEY /* code found*/
     && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      AV0KM001.XSUDESC2 = XSUTBL.XSUABRV[sysVar.arrayIndex];
    else
      AV0KM001.XSUDESC2 = "*** INVALID CODE ***";
      converseLib.validationFailed(248); /* invalid silhouette code*/
      set AV0KM001.AV0KMXSU cursor, bold;
    end
  else
    AV0KM001.XSUDESC2 = "***   A L L   ***";
  end

                                          /* silhouette group*/

  if (AV0KM001.AV0KMYSM == " " /* xsu group cd not overridden*/
   && AV0KM001.XGPCD == "03")  /* and product is apparel*/
    AV0KM001.AV0KMYSM = AV0KM001.YSMXSU;
  end

  if (AV0KM001.XGPCD == "03") /* apparel*/
    if (AV0KM001.AV0KMYSM == " ") /* must have xsu gp for aprl*/
      AV0KM001.AVWSHGD2 = "*** INVALID CODE ***";
      converseLib.validationFailed(250); /* please enter xsu group code*/
      set AV0KM001.AV0KMYSM cursor, bold;
    else
      YSMREC.YSMTBLPF = "XSU"; /* ysm table prefix*/
      YSMREC.YSMSYSPF = "AV";
                                   /* ysm system prefix*/
      YSMREC.YSMSUMID = 1; /* ysm sum id*/
      YSMREC.YSMSUMCD = AV0KM001.AV0KMYSM; /* ysm sum cd (xsu grp)*/

      if (AV0KM001.AV0KMXSU == "*")
        YSMREC.YSMSRCVL = "****"; /* wild ysm key value (xsucd)*/
        AV0KS10(); /* declare ysm cursor*/

        if (SQLCA.VAGen_SQLCODE == 0) /* no db2 errors*/
          AV0KS11(); /* fetch next xsu grp rec*/
          if (SQLCA.VAGen_SQLCODE == 0) /* a ysm grp rec was found*/
            AV0KM001.AVWSHGD2 = YSMREC.YSMSMDSC;
          else
            AV0KM001.AVWSHGD2 = "*** INVALID CODE ***";
            set AV0KM001.AV0KMYSM cursor, bold;
            converseLib.validationFailed(250); /* please enter xsu group code*/
          end
          AV0KS12(); /* close ysm cursor*/
        end

      else
        YSMREC.YSMSRCVL = AV0KM001.AV0KMXSU;
                                   /* ysm key value (xsucd)*/
        AV0KS03(); /* get ysm table record*/

        if (SQLCA.VAGen_SQLCODE == 0) /* xsu gp record found*/
          AV0KM001.AVWSHGD2 = YSMREC.YSMSMDSC;
        else
          AV0KM001.AVWSHGD2 = "*** INVALID CODE ***";
          converseLib.validationFailed(251); /* invalid xsu group code*/
          set AV0KM001.AV0KMYSM cursor, bold;
          set AV0KM001.AV0KMXSU bold;
        end
      end
    end
  else /* footwear, etc...*/
    if (AV0KM001.AV0KMYSM > " ") /* cannot have xsu group for ftwr*/
      AV0KM001.XSUDESC2 = "*** INVALID CODE ***";
      converseLib.validationFailed(251); /* invalid xsu group code*/
      set AV0KM001.AV0KMYSM cursor, bold;
    end
  end
end // end AV0K522

// Validate override fields 3
Function AV0K523()
   /* ------------------------------------------------------------*/
   /* validate the override product criteria fields*/
   /* ------------------------------------------------------------*/

                                          /* gender age*/

  if (AV0KM001.AV0KMXGA == " ") /* xgacd is not overridden*/
    AV0KM001.AV0KMXGA = AV0KM001.XGACD;
  end

  if (AV0KM001.XGPCD == "03") /* apparel*/
    if (AV0KM001.AV0KMXGA != "*") /* gender age cd is not wild*/
      AV0KW00.AV0KWCD1 = AV0KM001.AV0KMXGA;
      AV0KW00.AV0KWCD2 = AV0KM001.XGPCD;
      if (AV0KW00.AV0KWKEY in XGATBL.XGAKEY /* code found*/
       && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XGADESC2 = XGATBL.XGADESC[sysVar.arrayIndex];
      else
        AV0KM001.XGADESC2 = "*** INVALID CODE ***";
        converseLib.validationFailed(054); /* invalid gender age code*/
        set AV0KM001.AV0KMXGA cursor, bold;
      end
    else /* gender age is wild*/
      if (AV0KM001.AV0KMXPC > " " /* product category is provided*/
       && AV0KM001.AV0KMXPC != "*") /* and is not wild*/
        AV0KM001.XGADESC2 = "***   A L L   ***";
      else /* prod category not provided*/
        AV0KM001.XGADESC2 = "*** INVALID CODE ***";
        converseLib.validationFailed(053); /* please enter gender age code*/
        set AV0KM001.AV0KMXGA cursor, bold;
      end
    end
  else /* footwear, etc...*/
    if (AV0KM001.AV0KMXGA != "*") /* gender age is not wild*/
      AV0KW00.AV0KWCD1 = AV0KM001.AV0KMXGA;
      AV0KW00.AV0KWCD2 = AV0KM001.XGPCD;
      if (AV0KW00.AV0KWKEY in XGATBL.XGAKEY /* code found*/
       && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XGADESC2 = XGATBL.XGADESC[sysVar.arrayIndex];
      else
        AV0KM001.XGADESC2 = "*** INVALID CODE ***";
        converseLib.validationFailed(054); /* invalid gender age code*/
        set AV0KM001.AV0KMXGA cursor, bold;
      end
    else
      AV0KM001.XGADESC2 = "*** INVALID CODE ***";
      converseLib.validationFailed(053); /* please enter gender age code*/
      set AV0KM001.AV0KMXGA cursor, bold;
    end
  end

                                          /* minimum quantity*/

  if (AV0KM001.AVWMNQTY == 0)
    AV0KM001.AVWMNQTY = 1; /* set default to 1*/
  else
    if (AV0KM001.AVWMNQTY < 0)
      converseLib.validationFailed(253); /* invalid minimum quantity*/
      set AV0KM001.AVWMNQTY cursor, bold;
    end
  end

                                          /* warehouse codes*/

  if (AV0KM001.AV0KMXWH == " ") /* xwhcd is not overridden*/
    AV0KM001.AV0KMXWH = AV0KM001.XWHCD;
  end

  if (AV0KM001.AV0KMXWH != "*") /* warehouse cd is not wild*/
    if (AV0KM001.AV0KMXWH in XWHTBL.XWHCD /* code found*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      if (AV0KM001.XGPCD == XWHTBL.XGPCD1[sysVar.arrayIndex]
       || AV0KM001.XGPCD == XWHTBL.XGPCD2[sysVar.arrayIndex]
       || AV0KM001.XGPCD == XWHTBL.XGPCD3[sysVar.arrayIndex]
       || AV0KM001.XGPCD == XWHTBL.XGPCD4[sysVar.arrayIndex]
       || AV0KM001.XGPCD == XWHTBL.XGPCD5[sysVar.arrayIndex]
       || AV0KM001.XGPCD == XWHTBL.XGPCD6[sysVar.arrayIndex]
       || AV0KM001.XGPCD == XWHTBL.XGPCD7[sysVar.arrayIndex]
       || AV0KM001.XGPCD == XWHTBL.XGPCD8[sysVar.arrayIndex])
         /* next sentence*/
      else
        converseLib.validationFailed(021); /* whse invalid for gpc*/
        set AV0KM001.AV0KMXWH cursor, bold;
      end
    else
      converseLib.validationFailed(058); /* invalid warehouse code*/
      set AV0KM001.AV0KMXWH cursor, bold;
    end
  else /* warehouse cd is wild*/
     /* next sentence*/
  end
end // end AV0K523

// Validate override fields 4
Function AV0K524()
   /* ------------------------------------------------------------*/
   /* validate the override product criteria fields*/
   /* ------------------------------------------------------------*/

                                          /* size range*/

  if (AV0KM001.AV0KMSZ3 == " " /* first size and last size were*/
   && AV0KM001.AV0KMSZ4 == " ") /* not overridden,  then*/
    AV0KM001.AV0KMSZ3 = AV0KM001.AV0KMSZ1; /* default to original*/
    AV0KM001.AV0KMSZ4 = AV0KM001.AV0KMSZ2; /* size ranges*/
  else
    if (AV0KM001.AV0KMSZ3 == " " /* first size not changed but*/
     && AV0KM001.AV0KMSZ4 != " ") /* last size was,  default first*/
      AV0KM001.AV0KMSZ3 = AV0KM001.AV0KMSZ4; /* size to last's*/
    else
      if (AV0KM001.AV0KMSZ3 != " " /* first size changed but last*/
       && AV0KM001.AV0KMSZ4 == " ") /* size wasn't,  default last*/
        AV0KM001.AV0KMSZ4 = AV0KM001.AV0KMSZ3; /* size to first's*/
      end
    end
  end

  AV0KW00.AV0KWORF = AV0KM001.AV0KMSZ3;
  AV0KW00.AV0KWORL = AV0KM001.AV0KMSZ4;

  SY4REC.SY4SZSCL = AVWREC.SY4SZSCL; /* set size scale key*/
  AV0KS02(); /* get size scale record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* scale record found*/
    if (AV0KM001.AV0KMSZ3 in SY4REC.SY4IDDSC)
      AV0KW00.AV0KWSZF = sysVar.arrayIndex; /* save first size position*/
    else
      converseLib.validationFailed(212); /* invalid size range*/
      set AV0KM001.AV0KMSZ3 cursor, bold;
    end

    if (AV0KM001.AV0KMSZ4 in SY4REC.SY4IDDSC)
      AV0KW00.AV0KWSZL = sysVar.arrayIndex; /* save last size position*/
    else
      converseLib.validationFailed(212); /* invalid size range*/
      set AV0KM001.AV0KMSZ4 cursor, bold;
    end

    if (AV0KW00.AV0KWSZF > AV0KW00.AV0KWSZL) /* 1st size gt last size*/
      converseLib.validationFailed(212); /* invalid size range*/
      set AV0KM001.AV0KMSZ3 cursor, bold;
      set AV0KM001.AV0KMSZ4 bold;
    end

  end

                                         /* wholesale price range*/

  if (AV0KM001.AVWPLO < 0) /* lower wholesale price range*/
    AV0KM001.AVWPLO = 0.00; /* set default to zero*/
  end
  if (AV0KM001.AVWPHI <= 0) /* higher wsp range are zeros*/
    AV0KM001.AVWPHI = 99999.99; /* set default to 99999.99*/
  end

  if (AV0KM001.AVWPLO > AV0KM001.AVWPHI)
    converseLib.validationFailed(254); /* invalid price range*/
    set AV0KM001.AVWPLO cursor, bold;
    set AV0KM001.AVWPHI bold;
  end

                                          /* product category*/

  if (AV0KM001.AV0KMXPC == " ") /* xpccd was not overridden*/
    AV0KM001.AV0KMXPC = AV0KM001.XPCCD;
  end

  if (AV0KM001.XGPCD == "03") /* apparel*/
    if (AV0KM001.AV0KMXPC != "*") /* prod category cd is not wild*/
      AV0KW00.AV0KWCD1 = AV0KM001.AV0KMXPC;
      AV0KW00.AV0KWCD2 = AV0KM001.XGPCD;
      if (AV0KW00.AV0KWKEY in XPCTBL.XPCKEY /* code found*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XPCDESC2 = XPCTBL.XPCDESC[sysVar.arrayIndex];
      else
        AV0KM001.XPCDESC2 = "*** INVALID CODE ***";
        converseLib.validationFailed(051); /* invalid product cat*/
        set AV0KM001.AV0KMXPC cursor, bold;
      end
    else /* prod category is wild*/
      if (AV0KM001.AV0KMXGA > " " /* gender/age is provided*/
       && AV0KM001.AV0KMXGA != "*") /* and is not wild*/
        AV0KM001.XPCDESC2 = "***   A L L   ***";
      else /* gender/age not provided*/
        AV0KM001.XPCDESC2 = "*** INVALID CODE ***";
        converseLib.validationFailed(052); /* please enter prod cat code*/
        set AV0KM001.AV0KMXPC cursor, bold;
      end
    end
  else /* footwear, etc...*/
    if (AV0KM001.AV0KMXPC != "*") /* prod category cd is not wild*/
      AV0KW00.AV0KWCD1 = AV0KM001.AV0KMXPC;
      AV0KW00.AV0KWCD2 = AV0KM001.XGPCD;
      if (AV0KW00.AV0KWKEY in XPCTBL.XPCKEY /* code found*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
        AV0KM001.XPCDESC2 = XPCTBL.XPCDESC[sysVar.arrayIndex];
      else
        AV0KM001.XPCDESC2 = "*** INVALID CODE ***";
        converseLib.validationFailed(051); /* invalid product cat*/
        set AV0KM001.AV0KMXPC cursor, bold;
      end
    else /* prod category is wild*/
      AV0KM001.XPCDESC2 = "***   A L L   ***";
    end
  end

                                          /* product line*/

  if (AV0KM001.AV0KMXPL == " ") /* xplcd was not overridden*/
    AV0KM001.AV0KMXPL = AV0KM001.XPLCD;
  end

  if (AV0KM001.AV0KMXPL in XPLTBL.XPLCD /* code found*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    AV0KM001.XPLDESC2 = XPLTBL.XPLSDESC[sysVar.arrayIndex];
  else
    AV0KM001.XPLDESC2 = "*** INVALID CODE ***";
    converseLib.validationFailed(210); /* invalid product line*/
    set AV0KM001.AV0KMXPL cursor, bold;
  end

   /* dimension code - right side*/

  if (AV0KM001.AV0KMDM2 == " ") /* dimension not overridden*/
    AV0KM001.AV0KMDM2 = AV0KM001.XDMCD; /* code found*/
  end

  if (AV0KM001.AV0KMDM2 in XDMTBL.XDMCD /* code found*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    AV0KM001.AV0KMDS2 = XDMTBL.XDMDESC[sysVar.arrayIndex];
  else
    AV0KM001.AV0KMDS2 = "*** INVALID CODE ***";
    converseLib.validationFailed(84); /* invalid dimension code*/
    set AV0KM001.AV0KMDM2 cursor, bold;
  end

                                          /* color description*/

  if (AV0KM001.AV0KMCLI == " ") /* color id was not overridden*/
    AV0KM001.AV0KMCLI = AV0KM001.SY2CLRID;
  end

  if (AV0KM001.AV0KMCLI != "*") /* color id is not wild*/
    SY2REC.XGPCD = AVWREC.XGPCD; /* gpc cd*/
    SY2REC.SY1STNBR = AVWREC.SY1STNBR; /* style number*/
    SY2REC.SY2CLRID = AV0KM001.AV0KMCLI; /* color code id*/
    SY2REC.XDMCD = AV0KM001.AV0KMDM2; /* dim code*/
    AV0KS04(); /* get color cd record*/

    if (SQLCA.VAGen_SQLCODE == 0) /* color record found*/
      AV0KM001.AV0KMCLA = SY2REC.SY2CLRAB;
    else
      AV0KM001.AV0KMCLA = "DESCRIPTION N/A";
    end
  else /* color id is wild*/
    AV0KM001.AV0KMCLA = "***  A L L  ***";
  end
end // end AV0K524

// Process valid input request
Function AV0K600()
   /* ------------------------------------------------------------*/
   /* At this point, all fields on the map are valid entries.*/
   /* If this application was called from availability, (non-*/
   /* order entry mode) and the source gpc, style and color*/
   /* changed, control is passed on to AV0L using the avwrec*/
   /* with the selection and substitution criteria fields ini-*/
   /* tialized (zapped).  If the source gpc, style and color did*/
   /* not change, the map field values are transfered on to*/
   /* avwrec and control is transferred to AV0L.  For order entry*/
   /* mode, the source gpc, style and color never changes and is*/
   /* handled similarly.*/
   /* ------------------------------------------------------------*/

  if (AVWREC.AVWNWPRD == "Y") /* the source prod id changed*/
    AV0K610(); /* init passed criteria*/

  else
    AV0K620(); /* set up avwrec*/

  end


   /* ------------------------------------------------------------*/
   /* transfer control back to AV0L with AVWREC*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "AV0L"; /* TO Application*/

  XPAV002(); /* Exit to specified application*/

  exit stack;

end // end AV0K600

// Initialize AVWREC
Function AV0K610()
   /* ------------------------------------------------------------*/
   /* initialize avwrec before passing control to AV0L*/
   /* ------------------------------------------------------------*/

  set AVWREC empty;

  AVWREC.XGPCD = AV0KM001.XGPCD;
  AVWREC.SY1STNBR = AV0KM001.SY1STNBR;
  AVWREC.SY2CLRID[1] = AV0KM001.SY2CLRID;
  AVWREC.XDMCD[1] = AV0KM001.XDMCD;
  AVWREC.AVWNWPRD = "Y";
  AVWREC.AVWORDFL = "N";

  AVWREC.AVWMNQTY = 1; /* Set minimum qty. to default of 1*/


end // end AV0K610

// Set-up AVWREC
Function AV0K620()
   /* ------------------------------------------------------------*/
   /* set-up avwrec before passing control to AV0L*/
   /* ------------------------------------------------------------*/

  AVWREC.SY2CLRID[2] = AV0KM001.AV0KMCLI; /* product color*/
  AVWREC.XDMCD[2] = AV0KM001.AV0KMDM2; /* dimension code*/
  AVWREC.AVWWCSE = AV0KM001.AV0KMCSE;
  AVWREC.XPLCD[2] = AV0KM001.AV0KMXPL; /* product line*/
  AVWREC.XPCCD[2] = AV0KM001.AV0KMXPC; /* product category*/
  AVWREC.AVWPLO = AV0KM001.AVWPLO; /* min wholesale price*/
  AVWREC.AVWPHI = AV0KM001.AVWPHI; /* max wholesale price*/
  AVWREC.AVWRQSZF = AV0KW00.AV0KWSZF; /* first int size (1 to 40)*/
  AVWREC.AVWRQSZL = AV0KW00.AV0KWSZL; /* last int size (1 to 40)*/
  AVWREC.AVWOREXF = AV0KW00.AV0KWORF; /* first ext size (1 to 40)*/
  AVWREC.AVWOREXL = AV0KW00.AV0KWORL; /* last ext size (1 to 40)*/
  AVWREC.XWHCD[2] = AV0KM001.AV0KMXWH; /* warehouse code*/
  AVWREC.AVWMNQTY = AV0KM001.AVWMNQTY; /* minimum quantity*/
  AVWREC.XGACD[2] = AV0KM001.AV0KMXGA; /* gender age code*/
  AVWREC.YSMXSU[2] = AV0KM001.AV0KMYSM; /* silhouette group*/
  AVWREC.XSUCD[2] = AV0KM001.AV0KMXSU; /* silhouette code*/
  AVWREC.YCQCD[2] = AV0KM001.AV0KMYCQ; /* collection code*/
  AVWREC.XLCCD[2] = AV0KM001.AV0KMXLC; /* life cycle*/
  AVWREC.XQACD[2] = AV0KM001.AV0KMXQA; /* quality code*/
  AVWREC.XLTCD[2] = AV0KM001.AV0KMXLT; /* last type*/
  AVWREC.XUMCD[2] = AV0KM001.AV0KMXUM; /* unit of measure*/

end // end AV0K620

// set initial attributes
Function AV0KS01()
   /* ------------------------------------------------------------*/
   /* Depending on where this application is called from, the*/
   /* map fields available for entry will vary.  if this appli-*/
   /* cation is called from order entry, the commarea (also in*/
   /* avwrec) will have a complete set of values and thus is*/
   /* initialized with the map already filled. if this applica-*/
   /* tion is called from availability (main menu), it will have*/
   /* to prompt for an initial value and therefore will be ini-*/
   /* tially empty.*/
   /* ------------------------------------------------------------*/

  if (AVWREC.XGPCD > " "    /* GPC was passed*/
   && AVWREC.SY1STNBR > " " /* and style was passed*/
   && AVWREC.SY2CLRID[1] > " ") /* and color was passed*/

    if (AVWREC.AVWORDFL == "Y") /* called by order entry*/
      set AV0KM001.XGPCD skip;
      set AV0KM001.SY1STNBR skip;
      set AV0KM001.SY2CLRID skip;
      set AV0KM001.XDMCD skip;
      set AV0KM001.AV0KMCLI cursor, initialAttributes;
      set AV0KM001.AV0KMXPL initialAttributes;
      set AV0KM001.AV0KMCSE initialAttributes;
      set AV0KM001.AV0KMDM2 initialAttributes;
      set AV0KM001.AV0KMXPC initialAttributes;
      set AV0KM001.AVWPLO initialAttributes;
      set AV0KM001.AVWPHI initialAttributes;
      set AV0KM001.AV0KMSZ3 initialAttributes;
      set AV0KM001.AV0KMSZ4 initialAttributes;
      set AV0KM001.AV0KMXWH initialAttributes;
      set AV0KM001.AVWMNQTY initialAttributes;
      set AV0KM001.AV0KMXGA initialAttributes;
      set AV0KM001.AV0KMXSU initialAttributes;
      set AV0KM001.AV0KMYCQ initialAttributes;
      set AV0KM001.AV0KMXLC protect;
      set AV0KM001.AV0KMXQA protect;
      set AV0KM001.AV0KMXUM initialAttributes;
      set AV0KM001.AV0KMPF1 protect, invisible;
      set AV0KM001.AV0KMPF4 protect, invisible;
      set AV0KM001.AV0KMPF5 protect, invisible;
      set AV0KM001.AV0KMOPT protect, invisible;
      set AV0KM001.CATOAP protect, invisible;
      set AV0KM001.AV0KMITM protect, invisible;
      set AV0KM001.CAITEM protect, invisible;
    else /* called by availability et al*/
      set AV0KM001.XGPCD cursor, initialAttributes;
      set AV0KM001.SY1STNBR initialAttributes;
      set AV0KM001.SY2CLRID initialAttributes;
      set AV0KM001.XDMCD initialAttributes;
      set AV0KM001.AV0KMCLI initialAttributes;
      set AV0KM001.AV0KMXPL initialAttributes;
      set AV0KM001.AV0KMCSE initialAttributes;
      set AV0KM001.AV0KMDM2 initialAttributes;
      set AV0KM001.AV0KMXPC initialAttributes;
      set AV0KM001.AVWPLO initialAttributes;
      set AV0KM001.AVWPHI initialAttributes;
      set AV0KM001.AV0KMSZ3 initialAttributes;
      set AV0KM001.AV0KMSZ4 initialAttributes;
      set AV0KM001.AV0KMXWH initialAttributes;
      set AV0KM001.AVWMNQTY initialAttributes;
      set AV0KM001.AV0KMXGA initialAttributes;
      set AV0KM001.AV0KMYSM initialAttributes;
      set AV0KM001.AV0KMXSU initialAttributes;
      set AV0KM001.AV0KMYCQ initialAttributes;
      set AV0KM001.AV0KMXLC initialAttributes;
      set AV0KM001.AV0KMXQA initialAttributes;
      set AV0KM001.AV0KMXUM initialAttributes;
      set AV0KM001.AV0KMPF1 initialAttributes;
      set AV0KM001.AV0KMPF4 initialAttributes;
      set AV0KM001.AV0KMPF5 initialAttributes;
      set AV0KM001.AV0KMOPT initialAttributes;
      set AV0KM001.CATOAP initialAttributes;
      set AV0KM001.AV0KMITM initialAttributes;
      set AV0KM001.CAITEM initialAttributes;
    end

    if (AVWREC.XGPCD == "02") /* GPC passed is footwear*/
      set AV0KM001.AV0KMCLI initialAttributes;
      set AV0KM001.AV0KMYSM protect;
      set AV0KM001.AV0KMXLT initialAttributes;
    else
      if (AVWREC.XGPCD == "03") /* GPC passed is apparel*/
        set AV0KM001.AV0KMYSM initialAttributes;
        set AV0KM001.AV0KMXLT protect;
      else
        set AV0KM001.AV0KMYSM protect;
        set AV0KM001.AV0KMYSM protect;
        set AV0KM001.AV0KMXLT protect;
      end
    end
    /* MOVE 'Y' TO AV0KW00.AV0KWSWR  ; request for data desc sw*/

  else /* no product-id was passed to this application*/

    set AV0KM001.XGPCD cursor, initialAttributes;
    set AV0KM001.SY1STNBR initialAttributes;
    set AV0KM001.SY2CLRID initialAttributes;
    set AV0KM001.XDMCD initialAttributes;
    set AV0KM001.AV0KMCLI skip;
    set AV0KM001.AV0KMXPL skip;
    set AV0KM001.AV0KMCSE skip;
    set AV0KM001.AV0KMDM2 skip;
    set AV0KM001.AV0KMXPC skip;
    set AV0KM001.AVWPLO skip;
    set AV0KM001.AVWPHI skip;
    set AV0KM001.AV0KMSZ3 skip;
    set AV0KM001.AV0KMSZ4 skip;
    set AV0KM001.AV0KMXWH skip;
    set AV0KM001.AVWMNQTY skip;
    set AV0KM001.AV0KMXGA skip;
    set AV0KM001.AV0KMYSM skip;
    set AV0KM001.AV0KMXSU skip;
    set AV0KM001.AV0KMYCQ skip;
    set AV0KM001.AV0KMXLC skip;
    set AV0KM001.AV0KMXQA skip;
    set AV0KM001.AV0KMXLT skip;
    set AV0KM001.AV0KMXUM skip;
    set AV0KM001.AV0KMPF1 initialAttributes;
    set AV0KM001.AV0KMPF4 initialAttributes;
    set AV0KM001.AV0KMPF5 initialAttributes;
    set AV0KM001.AV0KMOPT initialAttributes;
    set AV0KM001.CATOAP initialAttributes;
    set AV0KM001.AV0KMITM initialAttributes;
    set AV0KM001.CAITEM initialAttributes;

    AVWREC.XXXMSGNO = 232; /* please enter source gpc, style and*/
                                   /* color*/

  end

end // end AV0KS01

// get sy4rec (size scale rec)
Function AV0KS02()
   /* ------------------------------------------------------------*/
   /* Get the size scale record*/
   /* ------------------------------------------------------------*/


  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCALE01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY4REC.SY4SZSCL; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS02

// get ysmrec (xsu grp rec)
Function AV0KS03()
   /* ------------------------------------------------------------*/
   /* Get the silhouette group record*/
   /* ------------------------------------------------------------*/


  try
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS03

// get sy2rec (prod color rec)
Function AV0KS04()
   /* ------------------------------------------------------------*/
   /* Get the product style/color record*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS04

// declare cursor for ysmrec
Function AV0KS05()
   /* ------------------------------------------------------------*/
   /* declare cursor for ysmrec*/
   /* ------------------------------------------------------------*/


  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS05

// fetch ysmrec
Function AV0KS06()
   /* ------------------------------------------------------------*/
   /* Get the next ysmrec*/
   /* ------------------------------------------------------------*/


  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS06

// close cursor for ysmrec
Function AV0KS07()
   /* ------------------------------------------------------------*/
   /* close cursor for ysmrec*/
   /* ------------------------------------------------------------*/


  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS07

// get sy1rec (prod style rec)
Function AV0KS08()
   /* ------------------------------------------------------------*/
   /* Get the product style record*/
   /* ------------------------------------------------------------*/


  try
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY4REC.SY4SZSCL; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS08

// transfer to the requested appl
Function AV0KS09()
   /* *************************************************************/
      /* this is a clone of xsexit without the call to mn0s,*/
       /* because security not set up for op0h in &op.*/
   /* *************************************************************/

  if (COMMAREA.CACURSYS == COMMAREA.CATOSYS)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = COMMAREA.CATOAP;
    COMMAREA.CATOAP = " ";
    sysVar.transferName = COMMAREA.CACURRAP;
    transfer to program sysVar.transferName passing COMMAREA;
  else
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = COMMAREA.CATOAP;
    COMMAREA.CATOAP = " ";
    sysVar.transferName = COMMAREA.CACURRAP;
    transfer to transaction sysVar.transferName passing COMMAREA;
  end


end // end AV0KS09

// declare ysmrec cursor
Function AV0KS10()
   /* ------------------------------------------------------------*/
   /* Declare cursor for the silhouette group record*/
   /* ------------------------------------------------------------*/


  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS10

// fetch next ysm record
Function AV0KS11()
   /* ------------------------------------------------------------*/
   /* Fetch next silhouette group record*/
   /* ------------------------------------------------------------*/


  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS11

// close ysmrec cursor
Function AV0KS12()
   /* ------------------------------------------------------------*/
   /* Close the silhouette group cursor*/
   /* ------------------------------------------------------------*/


  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  AVWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = AV0KM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AVWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end AV0KS12

// transfer to the requested appl
Function AV0KS13()
   /* *************************************************************/
      /* this is a clone of xsexit without the call to mn0s.*/
   /* *************************************************************/

  if (COMMAREA.CACURSYS == COMMAREA.CATOSYS)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = COMMAREA.CATOAP;
    COMMAREA.CATOAP = " ";
    sysVar.transferName = COMMAREA.CACURRAP;
    transfer to program sysVar.transferName passing COMMAREA;
  else
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = COMMAREA.CATOAP;
    COMMAREA.CATOAP = " ";
    sysVar.transferName = COMMAREA.CACURRAP;
    transfer to transaction sysVar.transferName passing COMMAREA;
  end
end // end AV0KS13

// get valid colors for a product
Function XP0B001()
   /* *************************************************************/
    /* ***  THE FOLLOWING MUST BE ADDED TO THE HOST APPLICATION*/
    /* ***  FOR THIS MODULE TO EXECUTE SUCCESSFULLY*/
           /* ADD TO RECORDS LIST:*/
               /* pg2rec*/
               /* XP0Bw01*/
               /* XP0Bw02*/
           /* ADD TO MAP GROUP:*/
               /* XP0BM001*/
   /* *************************************************************/

    /* PROCESS SYNOPSIS:*/
    /* 1. select and load table with valid colors for style.*/
    /* 2. move table values to popup window map and converse*/
       /* popup window map.*/
   /* ------------------------------------------------------------*/

  XP0B003(); /* popup window initialization*/
  XP0BW01.XP0BWHD1 = "    COLOR & DESC"; /* popup window heading*/
  XP0BW01.XP0BWHD2 = "LIFE CYCLE & DESC"; /* popup window heading*/

  XP0BW01.XP0BWERR = "N"; /* set db2 error flag to no*/
  XP0BS01(); /* select set and load table with valid colors*/

  if (XP0BW01.XP0BWERR == "Y") /* if db2 error*/
    return;
  end

  while (XP0BW02.XP0BWEND == "N") /* until end of request*/
    XP0B002(); /* display table values on popup map*/
  end

end // end XP0B001

// converse popup valid colors
Function XP0B002()
   /* ------------------------------------------------------------*/

    /* CONVERSE POP UP WINDOW FOR valid style colors*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

      /* Note that the values for the pop-up screen will come*/
       /* from a temporary working storage table and not from*/
       /* a CSP table as normally would be.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XP0BW02.XP0BWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XP0BW02.XP0BWFFL == "N") /* if not the first time through*/
      XP0BW02.XP0BWCT1 = XP0BW02.XP0BWINX[10] + 1; /* set up scroll pf8*/
    end

    set XP0BM001 initial; /* Clear map output area*/
    XP0BM001.XP0BMHDR = XP0BW01.XP0BWHDR; /* Place heading on map*/
    XP0BM001.XP0BMTR1 = "              SELECT & ENTER          ";
    XP0BM001.XP0BMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XP0BW02.XP0BWFFL == "Y")    /* Or it is the first time thru*/
      XP0BW02.XP0BWCT2 = 1; /* Set up screen index*/
      while (XP0BW02.XP0BWCT2 <= 10 /* Until end of screen lines*/
       && XP0BW01.SY2CLRID[XP0BWCT1] != "99") /* Or end of data*/
        XP0BM001.SY2CLRID[XP0BWCT2] = XP0BW01.SY2CLRID[XP0BWCT1];
        XP0BM001.XP0BMDES[XP0BWCT2] = XP0BW01.SY2CLRDS[XP0BWCT1];
        XP0BM001.XLCCD[XP0BWCT2] = XP0BW01.XLCCD[XP0BWCT1];
        XP0BM001.XLCDESC[XP0BWCT2] = XP0BW01.XLCDESC[XP0BWCT1];
        XP0BW02.XP0BWINX[XP0BWCT2] = XP0BW02.XP0BWCT1; /* Save array*/
        if (XP0BW02.XP0BWFFL == "Y") /* If first time thru*/
          XP0BW02.XP0BWSIX = XP0BW02.XP0BWCT1; /* Save last index*/
        end
        set XP0BM001.XP0BMSEL[XP0BWCT2] normal; /* Set selects to normal*/
        XP0BW02.XP0BWCT2 = XP0BW02.XP0BWCT2 + 1; /* Increment screen index*/
        XP0BW02.XP0BWCT1 = XP0BW02.XP0BWCT1 + 1; /* Increment table index*/
      end
      XP0BW02.XP0BWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XP0BW02.XP0BWCT1 = XP0BW02.XP0BWINX[1] - 1; /* Set up table index*/
      XP0BW02.XP0BWCT2 = 10; /* Set up screen index*/
      while (XP0BW02.XP0BWCT2 >= 1) /* Load from the bottom up*/
        XP0BM001.SY2CLRID[XP0BWCT2] = XP0BW01.SY2CLRID[XP0BWCT1];
        XP0BM001.XP0BMDES[XP0BWCT2] = XP0BW01.SY2CLRDS[XP0BWCT1];
        XP0BM001.XLCCD[XP0BWCT2] = XP0BW01.XLCCD[XP0BWCT1];
        XP0BM001.XLCDESC[XP0BWCT2] = XP0BW01.XLCDESC[XP0BWCT1];
        XP0BW02.XP0BWINX[XP0BWCT2] = XP0BW02.XP0BWCT1; /* Save array*/
        set XP0BM001.XP0BMSEL[XP0BWCT2] normal; /* Set select visible*/
        XP0BW02.XP0BWCT2 = XP0BW02.XP0BWCT2 - 1; /* Decrement screen index*/
        XP0BW02.XP0BWCT1 = XP0BW02.XP0BWCT1 - 1; /* Decrement table index*/
      end
      if (XP0BW02.XP0BWCT1 < 1) /* If the table index was decremented*/
        XP0BW02.XP0BWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end

  converse XP0BM001 ;
  XP0BW02.XP0BWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XP0BW02.XP0BWCT2 = 1; /* Screen index*/
  while (XP0BW02.XP0BWCT2 <= 10 /* Set all fields with data to normal*/
   && XP0BM001.SY2CLRID[XP0BWCT2] != " ")
    set XP0BM001.XP0BMSEL[XP0BWCT2] normal;
    XP0BW02.XP0BWCT2 = XP0BW02.XP0BWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XP0BW01.SY2CLRID[XP0BWCT1] == "99") /* And end of table*/
    XP0BW02.XP0BWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XP0BW02.XP0BWINX[1] <= XP0BW02.XP0BWSIX)
      XP0BW02.XP0BWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XP0BW02.XP0BWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XP0BW02.XP0BWCT2 = 1; /* Screen index*/
        while (XP0BW02.XP0BWCT2 <= 10) /* Until end of screen data*/
          if (XP0BM001.XP0BMSEL[XP0BWCT2] == "S") /* Check for selection*/
            XP0BW02.XP0BWPIX = XP0BW02.XP0BWINX[XP0BWCT2];
            XP0BW02.XP0BWCT2 = 11; /* End loop*/
          end
          XP0BW02.XP0BWCT2 = XP0BW02.XP0BWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XP0BW02.XP0BWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XP0B002

// Initialization - pop up window
Function XP0B003()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set XP0BM001 initial; /* Clear the map area*/
  set XP0BW02 empty; /* clear working storage*/
  XP0BW02.XP0BWCT1 = 1; /* Table index*/
  XP0BW02.XP0BWCT2 = 1; /* Screen index*/
  XP0BW02.XP0BWSIX = 0; /* End of first page save index*/
  XP0BW02.XP0BWPIX = 0; /* Initialize pass index to zero*/
  XP0BW02.XP0BWFFL = "Y"; /* first time thru flag*/
  XP0BW02.XP0BWERR = "N"; /* Scroll error flag to no*/
  XP0BW02.XP0BWEND = "N"; /* End of pop up window session flag*/

end // end XP0B003

// select & load valid colors
Function XP0BS01()
   /* ------------------------------------------------------------*/
    /* 1. format current date for lifecycle effective date*/
       /* compare.*/
    /* 2. initialize work table*/
    /* 3. select set of valid colors for specified product gpc,*/
       /* style and dimension.*/
    /* 4. check for valid lifecycle*/
    /* 5. load valid color codes and description to table*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* format ezedate*/

  XP0BW01.XP0BWIX1 = 1; /* init table index*/
  while (XP0BWIX1 <= 200) /* init table fields*/
    XP0BW01.SY2CLRID[XP0BWIX1] = " ";
    XP0BW01.SY2CLRDS[XP0BWIX1] = " ";
    XP0BW01.XLCCD[XP0BWIX1] = " ";
    XP0BW01.XLCDESC[XP0BWIX1] = " ";
    XP0BWIX1 = XP0BWIX1 + 1; /* increment index*/
  end


  set PG2REC empty; /* Clear dprodg.vsyclr01 record*/

  PG2REC.XGPCD = XP0BW01.XGPCD; /* load gpc code*/
  PG2REC.SY1STNBR = XP0BW01.SY1STNBR; /* load style number*/
  PG2REC.SY2CLRID = "***"; /* wild card color*/
  PG2REC.XDMCD = XP0BW01.XDMCD; /* load dimension code*/

  XP0BS02(); /* select set of dprodg.vsyclr01 recs*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error in db2 select*/
    return; /* return*/
  end

  XP0BW01.XP0BWIX1 = 1; /* init subscript*/
  SQLCA.VAGen_SQLCODE = 0; /* init status code*/

  while (XP0BWIX1 <= 200 /* load temp table*/
   && SQLCA.VAGen_SQLCODE == 0)
    XP0BS03(); /* fetch next color record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
      if (PG2REC.XDMCD == XP0BW01.XDMCD) /* same dimension code ?*/
        XP0BS04(); /* validate lifecycle*/

         /* move color code and description to work table*/
         /* retrieve life cycle description to work table*/

        XP0BW01.SY2CLRID[XP0BWIX1] = PG2REC.SY2CLRID;
        XP0BW01.SY2CLRDS[XP0BWIX1] = PG2REC.SY2CLRDS;
        if (XP0BW01.XLCCD[XP0BWIX1] in XLCTBL.XLCCD)
          XP0BW01.XLCDESC[XP0BWIX1] = XLCTBL.XLCDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          XP0BW01.XLCDESC[XP0BWIX1] = "DESCR NOT FOUND";
        end
      else
           /* Else, not same dimension code - set the index down*/
           /* by 1 because it will be increased at the end of*/
           /* the routine and we do not want to skip an entry*/
           /* in the xppg table.*/
        XP0BWIX1 = XP0BWIX1 - 1; /* decrement table index*/
      end

    else
      if (XP0BW01.XP0BWIX1 == 1) /* if first read*/
        XP0BW01.XP0BWERR = "Y"; /* set error flag to 'Y'es*/
        XP0BW01.XP0BWENR = 1; /* set error number*/
        return;
      end
      XP0BW01.SY2CLRID[XP0BWIX1] = "99";
    end
    XP0BWIX1 = XP0BWIX1 + 1; /* increment table index*/
  end

  if (XP0BWIX1 > 200) /* table size may not be enough*/
    XP0BW01.SY2CLRID[200] = "99";
  end

  XP0BS05(); /* close dprodg.vsyclr01 cursor*/


end // end XP0BS01

// declare cursor for ysmrec
Function XP0BS02()
   /* ------------------------------------------------------------*/
   /* declare cursor for syclr01 rec*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    XP0BW01.XP0BWERR = "Y"; /* indicate db2 error has occurred*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XSPGS02"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0BW01.XP0BWGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end XP0BS02

// fetch ysmrec
Function XP0BS03()
   /* ------------------------------------------------------------*/
   /* Get the next dprodg.vsyclr01 rec*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    XP0BW01.XP0BWERR = "Y"; /* indicated db2 error has occurred*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XSPGS03"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0BW01.XP0BWGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end XP0BS03

// validate color lifecycle
Function XP0BS04()
   /* **************************************************/
    /* if lifecycle is equal to requested lifecycle*/
    /* and lifecycle effective date is equal to or less*/
    /* than the current date the color is valid and*/
    /* valid lifecycle flag is set*/
   /* **************************************************/

  if (PG2REC.SY2CEDT1 <= XX0XW01.XX0XWDAT)
    XP0BW01.XLCCD[XP0BWIX1] = PG2REC.XLCCD1;
    return;
  end

  if (PG2REC.SY2CEDT2 <= XX0XW01.XX0XWDAT)
    XP0BW01.XLCCD[XP0BWIX1] = PG2REC.XLCCD2;
    return;
  end

  if (PG2REC.SY2CEDT3 <= XX0XW01.XX0XWDAT)
    XP0BW01.XLCCD[XP0BWIX1] = PG2REC.XLCCD3;
    return;
  end

  if (PG2REC.SY2CEDT4 <= XX0XW01.XX0XWDAT)
    XP0BW01.XLCCD[XP0BWIX1] = PG2REC.XLCCD4;
    return;
  end
end // end XP0BS04

// close cursor for ysmrec
Function XP0BS05()
   /* ------------------------------------------------------------*/
   /* close cursor for ysmrec*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, XP0BW01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    XP0BW01.XP0BWERR = "Y"; /* indicate db2 error has occurred*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XSPGS05"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0BW01.XP0BWGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end XP0BS05

// converse XLTTBL pop up window
Function XPXLT01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR LAST TYPE TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XLTTBL.XLTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XLTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLTTBL.XLTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLTTBL.XLTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XLTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLTTBL.XLTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLTTBL.XLTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XLTTBL.XLTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXLT01

// converse YCQTBL pop up window
Function XPYCQ01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR COLLECTIONS TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCQTBL.YCQCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YCQTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCQTBL.YCQCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCQTBL.YCQDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YCQTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCQTBL.YCQCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCQTBL.YCQDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCQTBL.YCQCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYCQ01

//*** RECORD=AV0KW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AV0KW00 type basicRecord
  10 AV0KWSWF AV0KWSWF ; 
  10 AV0KWSWR AV0KWSWR ; 
  10 AV0KWSB1 AV0KWSB1 ; 
  10 AV0KWSB2 AV0KWSB2 ; 
  10 AV0KWSB3 AV0KWSB3 ; 
  10 AV0KWSZF AV0KWSZF ; 
  10 AV0KWSZL AV0KWSZL ; 
  10 AV0KWKEY AV0KWKEY ; 
    15 AV0KWCD1 AV0KWCD1 ; 
    15 AV0KWCD2 AV0KWCD2 ; 
  10 AV0KWORF AV0KWORF ; 
  10 AV0KWORL AV0KWORL ; 
end // end AV0KW00

//*** RECORD=AV0KW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record AV0KW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 AV0KWTBL AV0KWTBL [50] ; 
    15 AV0KWKY AV0KWKY ; 
    15 AV0KWDSC AV0KWDSC ; 
  10 AV0KWSVK AV0KWSVK ; 
end // end AV0KW01

Record AV0KW02 type basicRecord
  10 AV0KWGRP AV0KWGRP ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 XDMCD XDMCD ; 
  10 AV0KWHDR AV0KWHDR ; 
    15 AV0KWHD1 AV0KWHD1 ; 
    15 AV0KWHD2 AV0KWHD2 ; 
  10 AV0KWERR AV0KWERR ; 
  10 AV0KWIX1 AV0KWIX1 ; 
  10 AV0KWTB AV0KWTB [50] ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY2CLRDS SY2CLRDS ; 
    15 XLCCD XLCCD ; 
    15 XLCDESC XLCDESC ; 
end // end AV0KW02

//*** RECORD=XP0BW01 ****
// OVERVIEW:
// 
// 
//            This record is the working record used by the
//            color/life cycle pop-up window process(XPPG003).
// 
// SPECIAL CONSIDERATIONS:
// 
//      The field XPPGWERR is used to indicate any errors in
// the routine. Used in conjunction with this field is the
// field XPPGWENR, which contains an error number that can be
// checked in the calling module. Each application should
// interrogate XPPGWENR when returning from XPPG003.
// 
//     Valid values are:
//                       1 - GPC/STYLE does not exist
//                   2 - ? - open for use
// 
// 
// MAINTENANCE HISTORY:
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/04/91  BANTHO  CREATED
// 
// ***********************
Record XP0BW01 type basicRecord
  10 XP0BWGRP XP0BWGRP ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 XDMCD XDMCD ; 
  10 XP0BWHDR XP0BWHDR ; 
    15 XP0BWHD1 XP0BWHD1 ; 
    15 XP0BWHD2 XP0BWHD2 ; 
  10 XP0BWERR XP0BWERR ; 
  10 XP0BWENR XP0BWENR ; 
  10 XP0BWIX1 XP0BWIX1 ; 
  10 XP0BWTB XP0BWTB [200] ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY2CLRDS SY2CLRDS ; 
    15 XLCCD XLCCD ; 
    15 XLCDESC XLCDESC ; 
end // end XP0BW01

//*** RECORD=XP0BW02 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx001
//            and xp???01. ( Where ??? is the table name
//            associated with the pop-up window process.)
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03-25-88  CEPPLE  Created
//          03-30-89  jvande  replaced xtvcd with xgpcd.
//          07-25-89  mchris  added xwhcd.
//          08/01/89  SPOPA   Added YPGFFFL field.
// ************************************************************
// ***********************
Record XP0BW02 type basicRecord
  10 XP0BWCT1 XP0BWCT1 ; 
  10 XP0BWCT2 XP0BWCT2 ; 
  10 XP0BWSIX XP0BWSIX ; 
  10 XP0BWPIX XP0BWPIX ; 
  10 XP0BWINX XP0BWINX [10] ; 
  10 XP0BWEND XP0BWEND ; 
  10 XP0BWFFL XP0BWFFL ; 
  10 XP0BWERR XP0BWERR ; 
  10 XP0BWHDR XP0BWHDR ; 
  10 XGPCD XGPCD ; 
  10 XP0BWNUM XP0BWNUM ; 
    15 XP0BWCHA XP0BWCHA ; 
  10 XWHCD XWHCD ; 
  10 YPGFFFL YPGFFFL ; 
  10 YESCDIND YESCDIND ; 
end // end XP0BW02

// table row key field 1
DataItem AV0KWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table row key field 2
DataItem AV0KWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// temporary description area
DataItem AV0KWDSC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DB2 error flag
DataItem AV0KWERR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record key
DataItem AV0KWGRP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map header part 1
DataItem AV0KWHD1 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map header part 2
DataItem AV0KWHD2 char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pop-up map header
DataItem AV0KWHDR char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem AV0KWIX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Table row key field
DataItem AV0KWKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temporary key area
DataItem AV0KWKY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// override first size
DataItem AV0KWORF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// override last size
DataItem AV0KWORL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// av0k work subscript 1
DataItem AV0KWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// av0k work subscript 2
DataItem AV0KWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// av0k work subscript 3
DataItem AV0KWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temporary key save area
DataItem AV0KWSVK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format map flag
DataItem AV0KWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data flag
DataItem AV0KWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save first size position
DataItem AV0KWSZF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save last size position
DataItem AV0KWSZL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temporary table desc area
DataItem AV0KWTB char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temporary table desc area
DataItem AV0KWTBL char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num-to-cha conversion
DataItem XP0BWCHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table counter
DataItem XP0BWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen counter
DataItem XP0BWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// flag
DataItem XP0BWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error number
DataItem XP0BWENR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 error flag
DataItem XP0BWERR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem XP0BWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record key
DataItem XP0BWGRP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map header part 1
DataItem XP0BWHD1 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map header part 2
DataItem XP0BWHD2 char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pop-up map header
DataItem XP0BWHDR char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// counter link screen/table
DataItem XP0BWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem XP0BWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bin-to-num conversion
DataItem XP0BWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passed index table location
DataItem XP0BWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem XP0BWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temporary table desc area
DataItem XP0BWTB char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

