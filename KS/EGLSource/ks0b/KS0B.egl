package ks0b;

import corpcom2.XX0XW01;
import corpcom3.XPKS-00001;
import corpcom4.XSKS-S0001;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx2.XXXUSRID;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ks.common.KS-NATL-IMP-SPCLT;
import ks.common.KS-TEAM-CD;
import ks.common.KS-TEAM-DESC;
import ks.common.KS-TEAM-SDESC;
import ks.common.KSWREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VCTEAM01;
//*** PROGRAM=KS0B ****
// This application will display the US Customs Team DB2 Table
// for the user to View and/or maintain.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// The user may change, if authorized, the detail information
// for a team by selecting the team and pressing PF14.
// 
// New teams may be added by pressing PF13 without selecting
// any lines.
// 
// A team may not be deleted from the table, but team status
// may be changed to inactivate a team which can no longer be
// used.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/27/91  SMACMI  New application.
// KS9999   01/15/93  KKYLE   Fix screen display / cursor bugs
// KS9999   09/21/93  KKYLE   mod for 4.1 conversion
// y2kfix   11-04-97  oricha  y2k modifications:  regen to pick
//                            up xx0xs01 century adjustment.
// *********************
Program KS0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KS0BW00 KS0BW00; // record
  KS0BW01 KS0BW01; // record
  KS0BW02 KS0BW02; // record
  KSWREC KSWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCTEAM01 VCTEAM01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KS0BM.KS0BM001,  // forms
      KS0BM.KS0BM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0BM001 initial; /* M001 input/output*/
    set KS0BM002 initial; /* M002 input/output*/
    set KS0BW00 empty; /* Working storage*/
    set KS0BW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    KS0BW00.KS0BW-SWD = "1"; /* Map to be displayed switch*/
    KS0BW00.KS0BW-SWF = "Y"; /* Format the map switch*/
    KS0BW00.KS0BW-SWR = "Y"; /* Request for data switch*/
    KS0BM001.KS0BM-STAT = "A"; /* active status to start*/
    ;
    /* ------------------------------------------------------------*/
    /* If data was passed in the COMMAREA, use as the initial key.*/
    /* ------------------------------------------------------------*/
    ;
    if (COMMAREA.CAITEM > " ") /* Data was passed*/
      ;
      COMMAREA.CAITEM = " "; /* Clear passed data*/
      ;
      KS0BW00.KS0BW-SWR = "Y"; /* Request for data switch*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0B-00000; /* Converse the main process*/
    ;
    ;
    KS0B-00000: KS0B-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0B-00000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end KS0B

// Main process to display a map
Function KS0B-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) If specified, display the first map.*/
  /* 2) Otherwise, if specified, display the second map, depending*/
  /* on function = add or change*/
  /* 3) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.KS0BW-SWD == "1") /* Map 1 was requested*/
    ;
    KS0B-10000(); /* Display map 1*/
    ;
  else
    ;
    if (KS0BW00.KS0BW-SWD == "2" /* Map 2 was requested*/
     && KS0BW00.KS0BW-SFN == "A") /* and function = ADD*/
      ;
      KS0B-20000(); /* Display map 2*/
      ;
    else
      ;
      if (KS0BW00.KS0BW-SWD == "2" /* Map 2 was requested*/
       && KS0BW00.KS0BW-SFN == "C" /* and function = CHANGE*/
      )                           
        KS0B-30000(); /* Display map 2*/
        ;
      else
        ;
      /* ------------------------------------------------------------*/
      /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
        ;
        KSWREC.XXXPRCNM = "00000"; /* Module identification*/
        KSWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
        TA1REC.TA1MAPNO = KS0BW00.KS0BW-SWD; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      /* ------------------------------------------------------------*/
      /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
        ;
        COMMAREA.CATOAP = "KS0A"; /* TO application*/
        ;
        XSKS-S0001(); /* Exit to another application*/
        ;
      /* ------------------------------------------------------------*/
      /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
        ;
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end KS0B-00000

// List the rows in the table
Function KS0B-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0B-11000(); /* Obtain the data to display*/
  ;
  KS0B-12000(); /* Format and display the map*/
  ;
  KS0B-13000(); /* Check attention identifier*/
  ;
  KS0B-14000(); /* Reset fields to normal intensity*/
  ;
  KS0B-15000(); /* Verify the entered data*/
  ;
  KS0B-16000(); /* Process valid input request*/
  ;
  ;
end // end KS0B-10000

// Obtain the data to display
Function KS0B-11000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.KS0BW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BW00.XXXTSLEN = 1288; /* temp storage page length*/
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.XXXTSPAG == 0) /* no pages established*/
    KS0BW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage and save key fields.*/
  /* ------------------------------------------------------------*/
  ;
  KS0B-11100(); /* Purge any temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0B-11300(); /* Select set and open cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BW00.KS0BW-IXM = 1; /* Display line index*/
  KS0BW00.KS0BW-SWC = "N"; /* End of cursor switch*/
  ;
  while (KS0BW00.KS0BW-SWC == "N") /* Until end of cursor*/
    ;
    KS0B-11400(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0BW00.KS0BW-SWC == "N") /* Not end of cursor*/
      KS0B-11500(); /* Save data in display storage*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0BW00.KS0BW-IXM > 14) /* Page is full*/
      ;
      KS0B-11600(); /* Add page to temporary storage*/
      ;
      KS0BW00.KS0BW-IXM = 1; /* Display line index*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.KS0BW-IXM > 1) /* Page was formatted*/
    KS0B-11600(); /* Add page to temporary storage*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  KS0B-11700(); /* Close the selected set cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    KSWREC.XXXPRCNM = "11000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    set KS0BM001.KS0BM-STAT cursor, bold; /* highlight*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BW00.KS0BW-SWR = "N"; /* Request for data switch*/
  ;
  ;
end // end KS0B-11000

// Purge any temporary storage
Function KS0B-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0BW01 empty; /* M001 display storage*/
  ;
  KS0BW00.KS0BW-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0BW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-11100

// Select set and open cursor
Function KS0B-11300()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCTEAM01 empty; /* Clear row storage area*/
  ;
  try
    call "IO6060" ("S1", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.KS-TEAM-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-11300

// Fetch next row in the cursor
Function KS0B-11400()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6060" ("N1", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0BW00.KS0BW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.KS-TEAM-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-11400

// Save data in display storage
Function KS0B-11500()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* Also, if returning from the add screen and a new team was*/
  /* added, find the temp storage page that team is on and save it.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BM001.KS0BM-STAT == " ") /* no status requested*/
                                   /* get all rows*/
    KS0BW01.KS0BW01-GROUP[KS0BW-IXM] = VCTEAM01.VCTEAM01-GROUP;
    KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXM + 1; /* Increment line index*/
    ;
    if (KS0BW00.KS0BW-SFN == "A" /* returning from add screen*/
     && KS0BW00.KS0BW-LAST-TEAM != " ") /* and a team was added*/
      ;
      if (KS0BW00.KS0BW-LAST-TEAM == VCTEAM01.KS-TEAM-CD) /* save page nbr*/
        KS0BW00.KS0BW-SAVE-PAGE = KS0BW00.TA5TSQIX + 1;
      end
    end
    ;
  else
    if (KS0BM001.KS0BM-STAT == VCTEAM01.XXXSTAT) /* status = requested stat*/
      KS0BW01.KS0BW01-GROUP[KS0BW-IXM] = VCTEAM01.VCTEAM01-GROUP;
      KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXM + 1; /* Increment line index*/
      ;
      if (KS0BW00.KS0BW-SFN == "A" /* returning from add screen*/
       && KS0BW00.KS0BW-LAST-TEAM != " ") /* and a team was added*/
        ;
        if (KS0BW00.KS0BW-LAST-TEAM == VCTEAM01.KS-TEAM-CD) /* save page nbr*/
          KS0BW00.KS0BW-SAVE-PAGE = KS0BW00.TA5TSQIX + 1;
                                   /* the team's on*/
        end
      end
      ;
    end
  end
  ;
  KS0BW00.KS0BW-STAT = KS0BM001.KS0BM-STAT; /* save status*/
  ;
end // end KS0B-11500

// Add page to temporary storage
Function KS0B-11600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BW01.XXXTSLEN = KS0BW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set KS0BW01 empty; /* M001 display storage*/
    ;
    KS0BW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-11600

// Close selected set cursor
Function KS0B-11700()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6060" ("C1", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-11700

// Format and converse the map
Function KS0B-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum > 0 /* error found*/
   && KS0BW00.KS0BW-STAT != KS0BM001.KS0BM-STAT) /* status has changed*/
    KS0BW00.KS0BW-IXM = 1; /* set index to 1*/
    while (KS0BW00.KS0BW-IXM <= 14)
      KS0BM001.KS0BM-STAT-DESC = " "; /* clear display*/
      KS0BM001.KS0BM-SEL[KS0BW-IXM] = " ";
      set KS0BM001.KS0BM-SEL[KS0BW-IXM] invisible, skip;
      KS0BM001.KS0BM-DTL-TEAM-NBR[KS0BW-IXM] = " ";
      KS0BM001.KS0BM-DTL-TEAM-DESC[KS0BW-IXM] = " ";
      KS0BM001.KS0BM-DTL-TEAM-SDESC[KS0BW-IXM] = " ";
      KS0BM001.KS0BM-DTL-NATL-IMP-SPCLT[KS0BW-IXM] = " ";
      KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXM + 1; /* set index up by 1*/
      KS0BW00.KS0BW-SWR = "Y";
    end
    set KS0BM001.XXXLITPG invisible, skip; /* 'page' literal*/
    set KS0BM001.XXXLITOF invisible, skip; /* 'of' literal*/
    set KS0BM001.XXXTSPAG invisible, skip; /* first page*/
    set KS0BM001.TA5TSQIX invisible, skip; /* last page*/
  end
  ;
  if (KS0BW00.KS0BW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* No error found*/
    ;
    if (KS0BW00.KS0BW-SWF == "Y") /* Map must be formatted*/
      ;
      KS0B-12100(); /* Format the data on the map*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0BM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0BM001.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0BM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0BM001 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  KS0BW00.KS0BW-SFN = " "; /* reset function switch*/
   /* reset saved page*/
  KS0BW00.KS0BW-SAVE-PAGE = 0;
  COMMAREA.CATOAP = KS0BM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0BM001.CAITEM; /* Application data*/
end // end KS0B-12000

// Format the display data
Function KS0B-12100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0BM001 initial; /* M001 input/output area*/
  ;
  KS0BW00.KS0BW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* Set attributes for add and change options depending on security*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAADDFL == "Y") /* adds allowed*/
    set KS0BM001.KS0BM-PF13 skip; /* display option on map*/
  end
  ;
  if (COMMAREA.CACHGFL == "Y") /* changes allowed*/
    set KS0BM001.KS0BM-PF14 skip; /* display option on map*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a team was added, get the page from temp storage that the*/
  /* team's on and display it.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.KS0BW-SFN == "A" /* add function and a page was*/
   && KS0BW00.KS0BW-SAVE-PAGE != 0) /* saved off*/
    ;
    KS0BW00.XXXTSPAG = KS0BW-SAVE-PAGE; /* use saved page*/
    ;
    KS0B-12110(); /* Obtain temporary storage page*/
    ;
    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0BM001.XXXLITPG skip; /* "PAGE" literal*/
    KS0BM001.XXXTSPAG = KS0BW00.XXXTSPAG; /* Current page*/
    set KS0BM001.XXXLITOF skip; /* "OF" literal*/
    KS0BM001.TA5TSQIX = KS0BW00.TA5TSQIX; /* Highest page*/
    ;
    ;
  /* ------------------------------------------------------------*/
  /* If the page in storage is not the page to be displayed,*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/
    ;
  else
    if (KS0BW00.TA5TSQIX > 0) /* Pages were formatted*/
      ;
      if (KS0BW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
        ;
        /* ------------------------------------------------------------*/
        /* If the current page has been changed, update the page in*/
        /* storage before obtaining the next one to display.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0BW00.KS0BW-SWU == "Y") /* Current page was changed*/
          ;
          KS0B-12120(); /* Update temporary storage page*/
          ;
          KS0BW00.KS0BW-SWU = "N"; /* Storage update switch*/
          ;
        end
        ;
        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0BW00.XXXTSPAG > KS0BW00.TA5TSQIX) /* Desired greater highest*/
          KS0BW00.XXXTSPAG = KS0BW00.TA5TSQIX; /* Default to highest*/
        end
        ;
        KS0B-12110(); /* Obtain temporary storage page*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/
      ;
      set KS0BM001.XXXLITPG skip; /* "PAGE" literal*/
      KS0BM001.XXXTSPAG = KS0BW00.XXXTSPAG; /* Current page*/
      set KS0BM001.XXXLITOF skip; /* "OF" literal*/
      KS0BM001.TA5TSQIX = KS0BW00.TA5TSQIX; /* Highest page*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BM001.KS0BM-STAT = KS0BW00.KS0BW-STAT; /* move status*/
  ;
  if (KS0BM001.KS0BM-STAT == "A") /* show ACTIVE*/
    KS0BM001.KS0BM-STAT-DESC = "ACTIVE";
  else
    if (KS0BM001.KS0BM-STAT == "I") /* show INACTIVE*/
      KS0BM001.KS0BM-STAT-DESC = "INACTIVE";
    else
      if (KS0BM001.KS0BM-STAT == " ") /* show ALL*/
        KS0BM001.KS0BM-STAT-DESC = "ALL";
      end
    end
  end
  ;
  ;
  KS0BW00.KS0BW-IXM = 1; /* Initialize map index*/
  /* SET KS0BM001.KS0BM-SEL(1) CURSOR,NORMAL;/* Position cursor top*/
  ;
  while (KS0BW00.KS0BW-IXM <= 14             /* Until screen is full or*/
   && KS0BW01.KS-TEAM-CD[KS0BW-IXM] > " " /* or end of data*/
  )
    if (KS0BW00.KS0BW-LAST-TEAM == " ") /* no team selected*/
      set KS0BM001.KS0BM-SEL[KS0BW-IXM] normal; /**/
      ;
    else
      ;
      if (KS0BW00.KS0BW-LAST-TEAM ==  /* if last team updated is on*/
      KS0BW01.KS-TEAM-CD[KS0BW-IXM])  /* the screen*/
        set KS0BM001.KS0BM-SEL[KS0BW-IXM] cursor, normal; /* put cursor there*/
        KS0BW00.KS0BW-LAST-TEAM = " "; /* clear working storage*/
      else
        if (KS0BW00.KS0BW-LAST-TEAM >  /* if last team updated is*/
        KS0BW01.KS-TEAM-CD[KS0BW-IXM]) /* greater than current team*/
          set KS0BM001.KS0BM-SEL[KS0BW-IXM] cursor, normal; /* put cursor*/
        else
          set KS0BM001.KS0BM-SEL[KS0BW-IXM] normal; /**/
        end
      end
    end
    ;
   /* /*team number*/
    KS0BM001.KS0BM-DTL-TEAM-NBR[KS0BW-IXM] = KS0BW01.KS-TEAM-CD[KS0BW-IXM];
   /* team description*/
    KS0BM001.KS0BM-DTL-TEAM-DESC[KS0BW-IXM] = KS0BW01.KS-TEAM-DESC[KS0BW-IXM];
   /* team short description*/
    KS0BM001.KS0BM-DTL-TEAM-SDESC[KS0BW-IXM] = KS0BW01.KS-TEAM-SDESC[KS0BW-IXM];
   /* nat'l import specialist*/
    KS0BM001.KS0BM-DTL-NATL-IMP-SPCLT[KS0BW-IXM] = KS0BW01.KS-NATL-IMP-SPCLT[KS0BW-IXM];
    ;
    KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXM + 1; /* Increment map index*/
    ;
  end
  ;
  KS0BW00.KS0BW-LAST-TEAM = " "; /* clear working storage*/
  ;
end // end KS0B-12100

// Read temporary storage page
Function KS0B-12110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BW01.XXXTSLEN = KS0BW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0BW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "S0002"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-12110

// Update temporary storage page
Function KS0B-12120()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "S0001"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-12120

// Check attention identifier
Function KS0B-13000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0BW00.KS0BW-SWR == "Y") /* Request for data*/
      set KS0BW01 empty; /* M001 display storage*/
    end
    ;
    KS0BW00.KS0BW-SWF = "Y"; /* Format the map switch*/
    KS0BW00.KS0BW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      KS0B-11100(); /* Purge temporary storage*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
      set KS0BM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0BM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "KS0A"; /* TO application*/
    end
    ;
    KS0B-11100(); /* Purge temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
   /* ------------------------------------------------------------*/
   /* Flag edit if pf13 or pf14 pressed without add/change authority*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13 /* pf13 pressed*/
   && COMMAREA.CAADDFL == "N")     /* and no add authority*/
    KSWREC.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    exit stack; /* Exit to display map*/
  end
  ;
  if (converseVar.eventKey is pf14) /* pf14 pressed*/
    ;
    if (COMMAREA.CACHGFL == "N") /*      /* no change authority*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
      exit stack; /* Exit to display map*/
    else
      ;
      if ("S" in KS0BM001.KS0BM-SEL) /* line was selected*/
        ;
      else /* no line selected*/
        KSWREC.XXXPRCNM = "13000"; /* Module identification*/
        converseLib.validationFailed(43); /* pf14 pressed but nothing*/
                                   /* was selected*/
        exit stack; /* Exit to display map*/
      end
      ;
    end
    ;
  end
  ;
end // end KS0B-13000

// Reset highlighted fields
Function KS0B-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  ;
  KS0BW00.KS0BW-IXM = 1; /* Initialize line index*/
  ;
  while (KS0BW00.KS0BW-IXM <= 14 /* Until end of lines*/
   && KS0BM001.KS0BM-DTL-TEAM-NBR[KS0BW-IXM] > " ") /* or end of display*/
    ;
    set KS0BM001.KS0BM-SEL[KS0BW-IXM] normal; /* Reset select flag*/
    ;
    KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  set KS0BM001.CATOAP initialAttributes; /* TO application*/
  set KS0BM001.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end KS0B-14000

// Verify data that was entered
Function KS0B-15000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BM001.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "15000"; /* Module identification*/
    set KS0BM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    KS0B-15100(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0BW00.TA5TSQIX > 0) /* Page was formatted*/
      ;
      KS0BW00.KS0BW-IXM = 14; /* Initialize line index*/
      ;
      while (KS0BW00.KS0BW-IXM > 0) /* Until end of lines*/
        ;
        KS0B-15200(); /* Verify data in the line*/
        ;
        KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXM - 1; /* Decrement line number*/
        ;
      end
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0B-15000

// Verify scroll request
Function KS0B-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0BW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0BW00.XXXTSPAG >= KS0BW00.TA5TSQIX) /* and no more pages*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate an error for any data that was modified.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BW00.KS0BW-IXM = 14; /* Initialize line index*/
  ;
  while (KS0BW00.KS0BW-IXM > 0) /* Until end of lines*/
    ;
    if (KS0BM001.KS0BM-SEL[KS0BW-IXM] != KS0BW01.KS0BM-SEL[KS0BW-IXM])
      ;
      KSWREC.XXXPRCNM = "15100"; /* Module identification*/
      set KS0BM001.KS0BM-SEL[KS0BW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/
      ;
    end
    ;
    KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXM - 1; /* Decrement line number*/
    ;
  end
  ;
  ;
end // end KS0B-15100

// Verify data in the line
Function KS0B-15200()
  /* ------------------------------------------------------------*/
  /* If selection was entered and is not a "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BM001.KS0BM-SEL[KS0BW-IXM] != KS0BW01.KS0BM-SEL[KS0BW-IXM]
   && KS0BM001.KS0BM-SEL[KS0BW-IXM] != "S") /* and is not a "S"*/
    ;
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    set KS0BM001.KS0BM-SEL[KS0BW-IXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(13); /* Only "S" may be entered*/
    ;
  end
  ;
  if (KS0BM001.KS0BM-SEL[KS0BW-IXM] == "S" /* 's' selected*/
   && converseVar.eventKey not pf14)       /* but not with pf14*/
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    converseLib.validationFailed(88); /* 's' invalid without pf14*/
    set KS0BM001.KS0BM-SEL[KS0BW-IXM] cursor, bold; /* Highlight*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Status must be A, I or blank*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BM001.KS0BM-STAT != "A" /* active status*/
   && KS0BM001.KS0BM-STAT != "I" /* inactive status*/
   && KS0BM001.KS0BM-STAT != " ") /* no status*/
    ;
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    set KS0BM001.KS0BM-STAT cursor, bold; /* Highlight*/
    converseLib.validationFailed(19); /* status invalid*/
  end
  ;
  ;
end // end KS0B-15200

// Process valid input request
Function KS0B-16000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display*/
  /* ------------------------------------------------------------*/
  ;
  KS0BW00.KS0BW-SWF = "Y"; /* format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If search key changed, get new data*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.KS0BW-STAT != KS0BM001.KS0BM-STAT)
    KS0BW00.KS0BW-SWR = "Y"; /* request for data switch*/
    KS0BW00.XXXTSPAG = "0"; /* zero out temp storage*/
    return; /* return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    KS0BW00.XXXTSPAG = KS0BW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    KS0BW00.XXXTSPAG = KS0BW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* enter pressed*/
    ;
    KS0BW00.KS0BW-SWF = "Y"; /* Format the map switch*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the select fields and clear the map input/output area.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BW00.KS0BW-UPDATE-SW = "N"; /* turn off updated switch*/
  ;
  if (converseVar.eventKey is pf13) /* pf13*/
    KS0BW00.KS0BW-SFN = "A"; /* 'add' function*/
    KS0BW00.KS0BW-SWD = "2"; /* Map to be displayed switch*/
    KS0BW00.KS0BW-SWF = "Y"; /* yes format map*/
    ;
  else
    ;
    if (converseVar.eventKey is pf14) /* pf14*/
      ;
      KS0BW00.KS0BW-IXM = 1; /* Initialize line index*/
      KS0BW00.KS0BW-SWU = "N"; /* reset switch*/
      ;
      while (KS0BW00.KS0BW-IXM <= 14 /* Until end of lines*/
       && KS0BW00.KS0BW-SWU != "Y") /* or 'S' is found*/
        ;
        if (KS0BM001.KS0BM-SEL[KS0BW-IXM] != KS0BW01.KS0BM-SEL[KS0BW-IXM])
          ;
          KS0BW00.KS0BW-SWU = "Y"; /* indicate 's' was found*/
          KS0BW00.KS0BW-SFN = "C"; /* 'change' function*/
          KS0BW00.KS0BW-SWF = "Y"; /* yes format map*/
          KS0BW00.KS0BW-SWD = "2"; /* Map to be displayed switch*/
          KS0BW00.KS0BW-IXX = KS0BW00.KS0BW-IXM + 0; /* save index*/
          KS0BW02.KS0BW02-GROUP = KS0BW01.KS0BW01-GROUP[KS0BW-IXM];
          ;
        end
        ;
        KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXM + 1; /* Increment line index*/
        ;
      end
    end
  end
  ;
  ;
end // end KS0B-16000

// Process to add a new row
Function KS0B-20000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0B-22000(); /* Format and display the map*/
  ;
  KS0B-23000(); /* Check attention identifier*/
  ;
  KS0B-24000(); /* Reset fields to normal intensity*/
  ;
  KS0B-25000(); /* Verify the entered data*/
  ;
  KS0B-26000(); /* Process valid input request*/
  ;
  ;
end // end KS0B-20000

// Format and converse the map
Function KS0B-22000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.KS0BW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0BW00.KS0BW-SWF == "Y") /* Map must be formatted*/
      KS0B-22100(); /* Format the data on the map*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0BM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0BM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0BM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0BM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0BM002 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  KS0BW00.KS0BW-UPDATE-SW = "N"; /* reset update-sw*/
  ;
  COMMAREA.CATOAP = KS0BM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0BM002.CAITEM; /* Application data*/
  ;
end // end KS0B-22000

// Format the display data
Function KS0B-22100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0BM002 initial; /* M002 input/output area*/
  ;
  KS0BW00.KS0BW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* Obtain the current date and time*/
  /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* get date and time*/
  KS0BW00.KS0BW-FULLDATE = XX0XW01.XX0XWDAT; /* move to ws*/
  KS0BW00.KS0BW-FORMYY = KS0BW00.KS0BW-FULLYY; /* move year*/
  KS0BW00.KS0BW-FORMMM = KS0BW00.KS0BW-FULLMM; /* move month*/
  KS0BW00.KS0BW-FORMDD = KS0BW00.KS0BW-FULLDD; /* move days*/
  KS0BW00.KS0BW-FORMDSH1 = "-"; /* move dash*/
  KS0BW00.KS0BW-FORMDSH2 = "-"; /* move dash*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BM002.KS0BM-MAP-DESC = "- ADD"; /* title*/
  KS0BM002.KS0BM-STAT = "A"; /* team status*/
  KS0BM002.KS0BM-STAT-DESC = "ACTIVE"; /* team status descrip*/
  KS0BM002.KS0BM-USER = COMMAREA.CAUSERID; /* user-id*/
  KS0BM002.KS0BM-CREATE-DT = KS0BW00.KS0BW-FORMDATE; /* create date*/
  KS0BM002.KS0BM-MOD-DT = KS0BW00.KS0BW-FORMDATE; /* modified date*/
  ;
  if (KS0BW00.KS0BW-UPDATE-SW == "N") /* first time*/
    converseLib.validationFailed(25); /* msg 'enter new team'*/
  end
  ;
end // end KS0B-22100

// Check attention identifier
Function KS0B-23000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0BW00.KS0BW-SWR == "Y") /* Request for data*/
      set KS0BW02 empty; /* M002 display storage*/
    end
    ;
    KS0BW00.KS0BW-SWF = "Y"; /* Format the map switch*/
    KS0BW00.KS0BW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      KS0B-11100(); /* Purge any temporary storage*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
      set KS0BM001.CATOAP cursor, bold; /* Highlight*/
      ;
      KS0BW00.KS0BW-SWD = "1"; /* Map to be displayed switch*/
      ;
    else
      ;
      KSWREC.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0BM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      ;
      KS0BW00.KS0BW-SWD = "1"; /* Map to be displayed switch*/
      KS0BW00.KS0BW-SWF = "Y"; /* Format the map switch*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      ;
      COMMAREA.CATOAP = "KS0A"; /* tran for ks menu screen*/
      KS0B-11100(); /* Purge any temporary storage*/
      XSKS-S0001(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    KS0B-11100(); /* Purge any temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    KS0BW00.KS0BW-SWD = "1"; /* Map to be displayed switch*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    KSWREC.XXXPRCNM = "23000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end KS0B-23000

// Reset highlighted fields
Function KS0B-24000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0BM002.KS0BM-TEAM-NBR initialAttributes; /* team number*/
  set KS0BM002.KS0BM-TEAM-DESC initialAttributes; /* team description*/
  set KS0BM002.KS0BM-TEAM-SDESC initialAttributes; /* team short description*/
  set KS0BM002.KS0BM-STAT initialAttributes; /* team status*/
  ;
  ;
end // end KS0B-24000

// Verify data that was entered
Function KS0B-25000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
    set KS0BM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  else /**/
    KS0B-25200(); /* verify entered data*/
  end
  ;
end // end KS0B-25000

// Verify any changed data
Function KS0B-25200()
    /* ------------------------------------------------------------*/
    /* verify status*/
    /* ------------------------------------------------------------*/
  ;
  if (KS0BM002.KS0BM-STAT == " ") /* status not entered*/
    ;
    KS0BM002.KS0BM-STAT = "A"; /* use 'active' status*/
    ;
  else
    ;
    if (KS0BM002.KS0BM-STAT != "I" /* status not 'inactive'*/
     && KS0BM002.KS0BM-STAT != "A") /* or 'active'*/
      ;
      KSWREC.XXXPRCNM = "25200"; /* module id*/
      set KS0BM002.KS0BM-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(23); /* field missing or invalid*/
      ;
    end
    ;
  end
    /* ------------------------------------------------------------*/
    /* verify short description*/
    /* ------------------------------------------------------------*/
  ;
  if (KS0BM002.KS0BM-TEAM-SDESC == " ") /* short description not entered*/
    ;
    KSWREC.XXXPRCNM = "25200"; /* module id*/
    set KS0BM002.KS0BM-TEAM-SDESC cursor, bold; /* highlight*/
    converseLib.validationFailed(22); /* field missing or invalid*/
    ;
  end
  ;
    /* ------------------------------------------------------------*/
    /* verify description*/
    /* ------------------------------------------------------------*/
  ;
  if (KS0BM002.KS0BM-TEAM-DESC == " ") /* team description not entered*/
    ;
    KSWREC.XXXPRCNM = "25200"; /* module id*/
    set KS0BM002.KS0BM-TEAM-DESC cursor, bold; /* highlight*/
    converseLib.validationFailed(21); /* field missing or invalid*/
    ;
  end
  ;
    /* ------------------------------------------------------------*/
    /* verify team number*/
    /* ------------------------------------------------------------*/
  ;
  if (KS0BM002.KS0BM-TEAM-NBR == " ") /* team number not entered*/
    ;
    KSWREC.XXXPRCNM = "25200"; /* module id*/
    set KS0BM002.KS0BM-TEAM-NBR cursor, bold; /* highlight*/
    converseLib.validationFailed(20); /* field missing or invalid*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0B-25200

// Process valid input request
Function KS0B-26000()
  /* ------------------------------------------------------------*/
  /* if enter was pressed, continue*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* enter not pressed*/
    ;
    KSWREC.XXXPRCNM = "26000"; /* module id*/
    converseLib.validationFailed(4); /* pa/pf key pressed is not valid*/
    exit stack; /* exit to display map*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* Check to see if row exists before adding.*/
    /* ------------------------------------------------------------*/
    ;
    KS0B-26100(); /* select row*/
    ;
    /* ------------------------------------------------------------*/
    /* Add the new data in the table row.*/
    /* ------------------------------------------------------------*/
    ;
    KS0B-26200(); /* add table row*/
    ;
    /* ------------------------------------------------------------*/
    /* Clear the screen before next add.*/
    /* ------------------------------------------------------------*/
    ;
    KS0BW00.KS0BW-LAST-TEAM = KS0BM002.KS0BM-TEAM-NBR; /* save team*/
    KS0BM002.KS0BM-TEAM-NBR = " "; /* Clear team number*/
    KS0BM002.KS0BM-TEAM-DESC = " "; /* Clear team description*/
    KS0BM002.KS0BM-TEAM-SDESC = " "; /* Clear team short desc*/
    KS0BM002.KS0BM-NATL-IMP-SPCLT = " "; /* Clear natl import special*/
    KS0BM002.KS0BM-STAT = "A"; /* reset status*/
    KS0BM002.KS0BM-STAT-DESC = "ACTIVE"; /* and description*/
    ;
    /* ------------------------------------------------------------*/
    /* Indicate that the table add was successfully completed.*/
    /* ------------------------------------------------------------*/
    ;
    KS0BW00.KS0BW-SWR = "Y"; /* Request for data switch*/
    ;
    KSWREC.XXXPRCNM = "26000"; /* Module identification*/
    KSWREC.XXXMSGNO = 1; /* Table update was completed*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Commit all changes made to protected resources.*/
  /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
  ;
end // end KS0B-26000

// Select the row before add
Function KS0B-26100()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCTEAM01 empty; /* Clear row storage area*/
  ;
  VCTEAM01.KS-TEAM-CD = KS0BM002.KS0BM-TEAM-NBR; /* Team code*/
  ;
  try
    call "IO6060" ("S ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Normal return code - not found*/
      return; /* Return to previous process*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/
        KSWREC.XXXPRCNM = "26100"; /* module id*/
        set KS0BM002.KS0BM-TEAM-NBR cursor, bold; /* highlight team*/
        converseLib.validationFailed(24); /* duplicate team number*/
        exit stack; /* Exit to display map*/
        ;
      end
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW BEFORE ADD        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.KS-TEAM-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-26100

// Add the new table row
Function KS0B-26200()
  /* ------------------------------------------------------------*/
  /* Format the data from the map in the table row.*/
  /* ------------------------------------------------------------*/
  ;
   /* move team nbr*/
  VCTEAM01.KS-TEAM-CD = KS0BM002.KS0BM-TEAM-NBR; /**/
   /* move team description*/
  VCTEAM01.KS-TEAM-DESC = KS0BM002.KS0BM-TEAM-DESC; /**/
   /* move team short description*/
  VCTEAM01.KS-TEAM-SDESC = KS0BM002.KS0BM-TEAM-SDESC; /**/
   /* move natl import specialist*/
  VCTEAM01.KS-NATL-IMP-SPCLT = KS0BM002.KS0BM-NATL-IMP-SPCLT;
   /* move team status*/
  VCTEAM01.XXXSTAT = KS0BM002.KS0BM-STAT;
  VCTEAM01.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  VCTEAM01.ZZZSDT = XX0XW01.XX0XWDAT; /* create date*/
  VCTEAM01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* modified date*/
  VCTEAM01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* modified time*/
  ;
  /* ------------------------------------------------------------*/
  /* Add the new row in the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6060" ("A ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      KS0BW00.KS0BW-SWR = "Y"; /* Request for data switch*/
      ;
      KSWREC.XXXPRCNM = "26200"; /* Module identification*/
      KSWREC.XXXMSGNO = 12; /* Data was updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.KS-TEAM-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-26200

// Process to update a row
Function KS0B-30000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0B-32000(); /* Format and display the map*/
  ;
  KS0B-33000(); /* Check attention identifier*/
  ;
  KS0B-34000(); /* Reset fields to normal intensity*/
  ;
  KS0B-35000(); /* Verify the entered data*/
  ;
  KS0B-36000(); /* Process valid input request*/
  ;
  ;
end // end KS0B-30000

// Format and converse the map
Function KS0B-32000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.KS0BW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0BW00.KS0BW-SWF == "Y") /* Map must be formatted*/
      KS0B-32100(); /* Format the data on the map*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0BM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0BM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0BM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0BM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0BM002 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0BM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0BM002.CAITEM; /* Application data*/
  ;
end // end KS0B-32000

// Format the display data
Function KS0B-32100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0BM002 initial; /* M002 input/output area*/
  ;
  KS0BW00.KS0BW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* Obtain the current date and time*/
  /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* get date and time*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0BM002.KS0BM-MAP-DESC = "- CHANGE"; /* title*/
  ;
  KS0BM002.KS0BM-STAT = KS0BW02.XXXSTAT; /* team status*/
  ;
  if (KS0BW02.XXXSTAT == "A") /* active*/
    KS0BM002.KS0BM-STAT-DESC = "ACTIVE"; /* 'active' to map*/
  else /* otherwise*/
    KS0BM002.KS0BM-STAT-DESC = "INACTIVE"; /* 'inactive' to map*/
  end
  ;
  KS0BW00.KS0BW-FULLDATE = KS0BW02.ZZZSDT; /* create date to ws*/
  KS0BW00.KS0BW-FORMYY = KS0BW00.KS0BW-FULLYY; /* year*/
  KS0BW00.KS0BW-FORMMM = KS0BW00.KS0BW-FULLMM; /* month*/
  KS0BW00.KS0BW-FORMDD = KS0BW00.KS0BW-FULLDD; /* days*/
  KS0BW00.KS0BW-FORMDSH1 = "-"; /* dash*/
  KS0BW00.KS0BW-FORMDSH2 = "-"; /* dash*/
  KS0BM002.KS0BM-CREATE-DT = KS0BW00.KS0BW-FORMDATE; /* create date*/
  ;
  KS0BM002.KS0BM-USER = COMMAREA.CAUSERID; /* user-id*/
  ;
  KS0BW00.KS0BW-FULLDATE = KS0BW02.ZZZCHGDT; /* modified date to ws*/
  KS0BW00.KS0BW-FORMYY = KS0BW00.KS0BW-FULLYY; /* year*/
  KS0BW00.KS0BW-FORMMM = KS0BW00.KS0BW-FULLMM; /* month*/
  KS0BW00.KS0BW-FORMDD = KS0BW00.KS0BW-FULLDD; /* days*/
  KS0BW00.KS0BW-FORMDSH1 = "-"; /* dash*/
  KS0BW00.KS0BW-FORMDSH2 = "-"; /* dash*/
  KS0BM002.KS0BM-MOD-DT = KS0BW00.KS0BW-FORMDATE; /* modified date*/
  ;
   /* team number*/
  KS0BM002.KS0BM-TEAM-NBR = KS0BW02.KS-TEAM-CD;
   /* team description*/
  KS0BM002.KS0BM-TEAM-DESC = KS0BW02.KS-TEAM-DESC;
   /* team short desc*/
  KS0BM002.KS0BM-TEAM-SDESC = KS0BW02.KS-TEAM-SDESC;
   /* natl import specialist*/
  KS0BM002.KS0BM-NATL-IMP-SPCLT = KS0BW02.KS-NATL-IMP-SPCLT;
  ;
  KS0BW00.KS0BW-LAST-TEAM = KS0BW02.KS-TEAM-CD; /* \* save team*/
  ;
  /* ------------------------------------------------------------*/
  /* proctect the team number field*/
  /* ------------------------------------------------------------*/
  ;
  set KS0BM002.KS0BM-TEAM-NBR skip; /* skip/protect team number*/
  set KS0BM002.KS0BM-TEAM-DESC cursor; /* set cursor at team descrip*/
  ;
end // end KS0B-32100

// Check attention identifier
Function KS0B-33000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0BW00.KS0BW-SWR == "Y") /* Request for data*/
      set KS0BW02 empty; /* M002 display storage*/
    end
    ;
    KS0BW00.KS0BW-SWF = "Y"; /* Format the map switch*/
    KS0BW00.KS0BW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      KS0B-11100(); /* Purge any temporary storage*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
      set KS0BM001.CATOAP cursor, bold; /* Highlight*/
      ;
      KS0BW00.KS0BW-SWD = "1"; /* Map to be displayed switch*/
      ;
    else
      ;
      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0BM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      ;
      KS0BW00.KS0BW-SWD = "1"; /* Map to be displayed switch*/
      KS0BW00.KS0BW-SWF = "Y"; /* Format the map switch*/
      ;
      if (KS0BW00.KS0BW-UPDATE-SW == "Y") /* anything updated*/
        KS0BW00.KS0BW-SWR = "Y"; /* request new data on map1*/
      end
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      ;
      COMMAREA.CATOAP = "KS0A"; /* tran for ks main menu*/
      KS0B-11100(); /* Purge any temporary storage*/
      XSKS-S0001(); /* Exit to another application*/
      ;
    end
    ;
    KS0B-11100(); /* Purge any temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    KS0BW00.KS0BW-SWD = "1"; /* Map to be displayed switch*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    KSWREC.XXXPRCNM = "33000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end KS0B-33000

// Reset highlighted fields
Function KS0B-34000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0BM002.KS0BM-TEAM-NBR skip; /* team number*/
  set KS0BM002.KS0BM-TEAM-DESC initialAttributes; /* team description*/
  set KS0BM002.KS0BM-TEAM-SDESC initialAttributes; /* team short description*/
  set KS0BM002.KS0BM-STAT initialAttributes; /* team status*/
  set KS0BM002.KS0BM-NATL-IMP-SPCLT initialAttributes; /* natl import specialist*/
  ;
  ;
end // end KS0B-34000

// Verify data that was entered
Function KS0B-35000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "35000"; /* Module identification*/
    set KS0BM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* Otherwise, verify the data.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  else /**/
    KS0B-35200(); /* verify entered data*/
  end
  ;
end // end KS0B-35000

// Verify any changed data
Function KS0B-35200()
    /* ------------------------------------------------------------*/
    /* verify status*/
    /* ------------------------------------------------------------*/
  ;
  if (KS0BM002.KS0BM-STAT == " ") /* status not entered*/
    ;
    KS0BM002.KS0BM-STAT = "A"; /* use 'active' status*/
    ;
  else
    ;
    if (KS0BM002.KS0BM-STAT != "I" /* status not 'inactive'*/
     && KS0BM002.KS0BM-STAT != "A") /* or 'active'*/
      ;
      KSWREC.XXXPRCNM = "35200"; /* module id*/
      set KS0BM002.KS0BM-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(23); /* field missing or invalid*/
      ;
    end
    ;
  end
    /* ------------------------------------------------------------*/
    /* verify short description*/
    /* ------------------------------------------------------------*/
  ;
  if (KS0BM002.KS0BM-TEAM-SDESC == " ") /* short description not entered*/
    ;
    KSWREC.XXXPRCNM = "35200"; /* module id*/
    set KS0BM002.KS0BM-TEAM-SDESC cursor, bold; /* highlight*/
    converseLib.validationFailed(22); /* field missing or invalid*/
    ;
  end
  ;
    /* ------------------------------------------------------------*/
    /* verify description*/
    /* ------------------------------------------------------------*/
  ;
  if (KS0BM002.KS0BM-TEAM-DESC == " ") /* team description not entered*/
    ;
    KSWREC.XXXPRCNM = "35200"; /* module id*/
    set KS0BM002.KS0BM-TEAM-DESC cursor, bold; /* highlight*/
    converseLib.validationFailed(21); /* field missing or invalid*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end KS0B-35200

// Process valid input request
Function KS0B-36000()
  /* ------------------------------------------------------------*/
  /* if enter was pressed, continue*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* enter not pressed*/
    ;
    KSWREC.XXXPRCNM = "36000"; /* module id*/
    converseLib.validationFailed(4); /* pa/pf key pressed is not valid*/
    exit stack; /* exit to display map*/
    ;
  end
  /* ------------------------------------------------------------*/
  /* If nothing changed, don't update the row*/
  /* ------------------------------------------------------------*/
  if (KS0BM002.KS0BM-STAT == KS0BW01.XXXSTAT[KS0BW-IXX]
   && KS0BM002.KS0BM-TEAM-NBR == KS0BW01.KS-TEAM-CD[KS0BW-IXX]
   && KS0BM002.KS0BM-TEAM-DESC == KS0BW01.KS-TEAM-DESC[KS0BW-IXX]
   && KS0BM002.KS0BM-TEAM-SDESC == KS0BW01.KS-TEAM-SDESC[KS0BW-IXX]
   && KS0BM002.KS0BM-NATL-IMP-SPCLT == 
  KS0BW01.KS-NATL-IMP-SPCLT[KS0BW-IXX])
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* Select the row for update*/
    /* ------------------------------------------------------------*/
    ;
    KS0B-36100(); /* select row*/
    ;
    /* ------------------------------------------------------------*/
    /* If record was changed since initial display, flag error*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0BW01.ZZZCHGCT[KS0BW-IXX] != VCTEAM01.ZZZCHGCT) /* count changed*/
      ;
      KSWREC.XXXPRCNM = "36000"; /* module id*/
      converseLib.validationFailed(12); /* row was updated by another*/
                                   /* application*/
      KS0BW00.KS0BW-SWR = "Y"; /* request for data*/
      KS0BW00.KS0BW-SWF = "Y"; /* format a new map*/
   /* move new row to working*/
      KS0BW02.KS0BW02-GROUP = VCTEAM01.VCTEAM01-GROUP; /* storage and display it*/
   /* move change count to working*/
      KS0BW01.ZZZCHGCT[KS0BW-IXX] = VCTEAM01.ZZZCHGCT; /* storage for compare*/
      exit stack; /* exit to display map*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Update the row in the table*/
    /* ------------------------------------------------------------*/
    ;
    KS0B-36200(); /* update table row*/
    ;
    /* ------------------------------------------------------------*/
    /* Indicate that the table update was successfully completed.*/
    /* ------------------------------------------------------------*/
    ;
    KSWREC.XXXPRCNM = "36000"; /* show message*/
    KSWREC.XXXMSGNO = 1; /* Table update was completed*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Search for next selection*/
  /* ------------------------------------------------------------*/
  ;
  KS0B-36300(); /* search for next selection*/
  ;
  /* ------------------------------------------------------------*/
  /* Commit all changes made to protected resources.*/
  /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
  ;
end // end KS0B-36000

// Select row before update
Function KS0B-36100()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCTEAM01 empty; /* Clear row storage area*/
  ;
  VCTEAM01.KS-TEAM-CD = KS0BM002.KS0BM-TEAM-NBR; /* Team code*/
  ;
  try
    call "IO6060" ("S ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW BEFORE UPDATE     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.KS-TEAM-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-36100

// Update the changed table row
Function KS0B-36200()
  /* ------------------------------------------------------------*/
  /* Format the data from the map in the table row.*/
  /* ------------------------------------------------------------*/
  ;
   /* move team nbr*/
  VCTEAM01.KS-TEAM-CD = KS0BM002.KS0BM-TEAM-NBR; /**/
   /* move team description*/
  VCTEAM01.KS-TEAM-DESC = KS0BM002.KS0BM-TEAM-DESC; /**/
   /* move team short description*/
  VCTEAM01.KS-TEAM-SDESC = KS0BM002.KS0BM-TEAM-SDESC; /**/
   /* move natl import specialist*/
  VCTEAM01.KS-NATL-IMP-SPCLT = KS0BM002.KS0BM-NATL-IMP-SPCLT;
   /* move team status*/
  VCTEAM01.XXXSTAT = KS0BM002.KS0BM-STAT;
  VCTEAM01.XXXUSRID = KS0BM002.KS0BM-USER; /* user id*/
  ;
   /* current date to*/
  VCTEAM01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date modified*/
  VCTEAM01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* modified time*/
  ;
  /* ------------------------------------------------------------*/
  /* Update the new row in the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6060" ("U ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      KS0BW00.KS0BW-UPDATE-SW = "Y"; /* update switch*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.KS-TEAM-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0B-36200

// Find next row for update
Function KS0B-36300()
  /* ------------------------------------------------------------*/
  /* Determine if another line was selected for viewing*/
  /* ------------------------------------------------------------*/
  ;
  KS0BW00.KS0BW-SWU = "N"; /**/
  KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXX + 1; /* start 1 row past last*/
                                   /* row found*/
  ;
  while (KS0BW00.KS0BW-IXM <= 14 /* until end of lines*/
   && KS0BW00.KS0BW-SWU == "N") /* or 's' found*/
    ;
    if (KS0BM001.KS0BM-SEL[KS0BW-IXM] == "S" /* line selected*/
    )                                       
  /* ------------------------------------------------------------*/
  /* move working storage to the map*/
  /* ------------------------------------------------------------*/
      ;
   /**/
      KS0BM002.KS0BM-TEAM-NBR = KS0BW01.KS-TEAM-CD[KS0BW-IXM]; /* move team nbr*/
   /**/
      KS0BM002.KS0BM-TEAM-DESC = KS0BW01.KS-TEAM-DESC[KS0BW-IXM]; /* move team description*/
   /**/
      KS0BM002.KS0BM-TEAM-SDESC = KS0BW01.KS-TEAM-SDESC[KS0BW-IXM]; /* move team short description*/
   /**/
      KS0BM002.KS0BM-NATL-IMP-SPCLT = KS0BW01.KS-NATL-IMP-SPCLT[KS0BW-IXM]; /* move natl import specialist*/
   /**/
      KS0BM002.KS0BM-STAT = KS0BW01.XXXSTAT[KS0BW-IXM]; /* move team status*/
   /**/
      KS0BM002.KS0BM-USER = KS0BW01.XXXUSRID[KS0BW-IXM]; /* user id*/
      ;
      KS0BW00.KS0BW-FULLDATE = KS0BW01.ZZZCHGDT; /* date last modified*/
      KS0BW00.KS0BW-FORMYY = KS0BW00.KS0BW-FULLYY; /* year*/
      KS0BW00.KS0BW-FORMMM = KS0BW00.KS0BW-FULLMM; /* month*/
      KS0BW00.KS0BW-FORMDD = KS0BW00.KS0BW-FULLDD; /* days*/
      KS0BW00.KS0BW-FORMDSH1 = "-"; /* dashes*/
      KS0BW00.KS0BW-FORMDSH2 = "-"; /* dashes*/
      KS0BM002.KS0BM-MOD-DT = KS0BW00.KS0BW-FORMDATE; /**/
      ;
      KS0BW00.KS0BW-FULLDATE = KS0BW01.ZZZSDT; /* date created*/
      KS0BW00.KS0BW-FORMYY = KS0BW00.KS0BW-FULLYY; /* year*/
      KS0BW00.KS0BW-FORMMM = KS0BW00.KS0BW-FULLMM; /* month*/
      KS0BW00.KS0BW-FORMDD = KS0BW00.KS0BW-FULLDD; /* days*/
      KS0BM002.KS0BM-CREATE-DT = KS0BW00.KS0BW-FORMDATE; /**/
      ;
      KS0BW00.KS0BW-SWU = "Y"; /* 's' was found*/
      ;
      KS0BW00.KS0BW-IXX = KS0BW00.KS0BW-IXM; /* save index*/
      ;
    end
    ;
    KS0BW00.KS0BW-IXM = KS0BW00.KS0BW-IXM + 1; /* increment index*/
    ;
  end
  ;
   /**/
  KS0BW00.KS0BW-LAST-TEAM = KS0BW01.KS-TEAM-CD[KS0BW-IXX]; /* save team*/
  ;
  /* ------------------------------------------------------------*/
  /* If no more lines selected, go back to inquiry screen. If*/
  /* anything was updated, display that new data on inquiry*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0BW00.KS0BW-SWU == "N") /* if no more selected*/
                                  /* go back to inquiry screen*/
    ;
    KS0BW00.KS0BW-SWD = "1"; /* map to be displayed switch*/
    KS0BW00.KS0BW-SWF = "Y"; /* format the map*/
    ;
    if (KS0BW00.KS0BW-UPDATE-SW == "Y" /* anything updated*/
    )                                 
      KS0BW00.KS0BW-SWR = "Y"; /* request new data on map1*/
      ;
    end
    ;
  end
  ;
end // end KS0B-36300

//*** RECORD=KS0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0BW00 type basicRecord
  10 KS0BW-IXM KS0BW-IXM ; 
  10 KS0BW-IXX KS0BW-IXX ; 
  10 KS0BW-SWC KS0BW-SWC ; 
  10 KS0BW-SWD KS0BW-SWD ; 
  10 KS0BW-SWF KS0BW-SWF ; 
  10 KS0BW-SWR KS0BW-SWR ; 
  10 KS0BW-SWU KS0BW-SWU ; 
  10 KS0BW-SFN KS0BW-SFN ; 
  10 KS0BW-STAT KS0BW-STAT ; 
  10 KS0BW-UPDATE-SW KS0BW-UPDATE-SW ; 
  10 KS0BW-LAST-TEAM KS0BW-LAST-TEAM ; 
  10 KS0BW-SAVE-PAGE KS0BW-SAVE-PAGE ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KS0BW-FULLDATE KS0BW-FULLDATE ; 
    15 KS0BW-FULLCC KS0BW-FULLCC ; 
    15 KS0BW-FULLYY KS0BW-FULLYY ; 
    15 KS0BW-FULLMM KS0BW-FULLMM ; 
    15 KS0BW-FULLDD KS0BW-FULLDD ; 
  10 KS0BW-FORMDATE KS0BW-FORMDATE ; 
    15 KS0BW-FORMMM KS0BW-FORMMM ; 
    15 KS0BW-FORMDSH1 KS0BW-FORMDSH1 ; 
    15 KS0BW-FORMDD KS0BW-FORMDD ; 
    15 KS0BW-FORMDSH2 KS0BW-FORMDSH2 ; 
    15 KS0BW-FORMYY KS0BW-FORMYY ; 
end // end KS0BW00

//*** RECORD=KS0BW01 ****
// /*
// /*      application working storage for map1
// /*
// ***********************
Record KS0BW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1288) ; // Temporary storage page length
    10 KS0BM-SEL KS0BM-SEL [14] ; 
    10 KS0BW01-GROUP KS0BW01-GROUP [14] ; 
      15 KS-TEAM-CD KS-TEAM-CD ; 
      15 KS-TEAM-DESC KS-TEAM-DESC ; 
      15 KS-TEAM-SDESC KS-TEAM-SDESC ; 
      15 KS-NATL-IMP-SPCLT KS-NATL-IMP-SPCLT ; 
      15 XXXSTAT XXXSTAT ; 
      15 XXXUSRID XXXUSRID ; 
      15 ZZZSDT ZZZSDT ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end KS0BW01

//*** RECORD=KS0BW02 ****
// /*
// /*      application working storage for map2
// /*
// ***********************
Record KS0BW02 type basicRecord
  10 KS0BW-STAT KS0BW-STAT ; 
  10 KS0BW02-GROUP KS0BW02-GROUP ; 
    15 KS-TEAM-CD KS-TEAM-CD ; 
    15 KS-TEAM-DESC KS-TEAM-DESC ; 
    15 KS-TEAM-SDESC KS-TEAM-SDESC ; 
    15 KS-NATL-IMP-SPCLT KS-NATL-IMP-SPCLT ; 
    15 XXXSTAT XXXSTAT ; 
    15 XXXUSRID XXXUSRID ; 
    15 ZZZSDT ZZZSDT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end KS0BW02

// Line selection indicator
DataItem KS0BM-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FORMDATE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FORMDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FORMDSH1 char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FORMDSH2 char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FORMMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FORMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FULLCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FULLDATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FULLDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FULLMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0BW-FULLYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0BW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0BW-IXX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem KS0BW-LAST-TEAM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem KS0BW-SAVE-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// function switch
DataItem KS0BW-SFN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem KS0BW-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KS0BW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem KS0BW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KS0BW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0BW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0BW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem KS0BW-UPDATE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCTEAM01 Group Level
DataItem KS0BW01-GROUP char(91)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCTEAM01 Group Level
DataItem KS0BW02-GROUP char(91)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

