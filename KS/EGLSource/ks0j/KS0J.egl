package ks0j;

import corpcom2.XX0XW01;
import corpcom3.XPKS-00001;
import corpcom4.XSKS-S0001;
import corpcom4.XSNOWAY;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpy2.YKSTBL;
import ks.common.*;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VHSCHP01;
import vv.common.VHSHDG01;
import vv.common.VHSNBR01;
import vv.common.VHSSHD01;
//*** PROGRAM=KS0J ****
// This application is designed to aid the user in assigning a
// HS Number to a Customs Product. This program will only be
// entered from KS0I and fastpathing to this application will
// not be possible.
// 
// Product and HS information will be passed from KS0I. The
// product information will be used to display header
// information on each of the screens in this application. The
// HS data passed will be used in determining which map to
// display. The application will show the user what they passed
// and position them in the map where they can continue to
// build on their HS number.
// 
// By pressing PF20 on any screens, the user will indicate that
// they are done with HS Assignment. This will result in the
// passing back of what HS data the user may have selected
// while they were in this application.
// 
// By pressing ENTER on the last screen and selecting a line,
// the selected HS data will be transferred back to KS0I.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW       1/21/92  bantho  New application.
// 000      04/15/92  dhuffm  Add description lines to screens.
// 000      06/08/92  dhuffm  Table changes - KSWREC changes.
// 000      06/25/92  cepple  Add Ftwr Pre-Class Modifications.
// 000      10/27/92  kkyle   Blank out 'page' display when no
//                            data to display.
// C066     12/08/92  dhuffm  Change HS Number format - remove
//                            suffix id.
// 000      04/16/93  dhuffm  Change KS0J-43000 - PF3 backs to
//                            previous screen not KS0I.
// 000      02/21/96  mhuynh  regen due to table change
// fix      04/22/96  eraymo  corrected working storage
//                            structure length error
// *********************
Program KS0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KS0JW00 KS0JW00; // record
  KS0JW01 KS0JW01; // record
  KS0JW02 KS0JW02; // record
  KS0JW03 KS0JW03; // record
  KS0JW04 KS0JW04; // record
  KSWREC KSWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VHSCHP01 VHSCHP01; // record
  VHSHDG01 VHSHDG01; // record
  VHSNBR01 VHSNBR01; // record
  VHSSHD01 VHSSHD01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YKSTBL {deleteAfterUse = yes}; // table
  use KS0JM.KS0JM001,  // forms
      KS0JM.KS0JM002, 
      KS0JM.KS0JM003, 
      KS0JM.KS0JM004
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0JM001 initial; /* M001 input/output*/
    set KS0JM002 initial; /* M002 input/output*/
    set KS0JM003 initial; /* M002 input/output*/
    set KS0JM004 initial; /* M002 input/output*/
    set KS0JW00 empty; /* Working storage*/
    set KS0JW01 empty; /* M001 display storage*/
    set KS0JW02 empty; /* M002 display storage*/
    set KS0JW03 empty; /* M002 display storage*/
    set KS0JW04 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    KS0JW00.KS0JW-SWD = "1"; /* Map to be displayed switch*/
    KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
    KS0JW00.KS0JW-WSR = "Y"; /* Request for data switch*/
    KS0JW00.XXXTSLEN = 840; /* TSQ page length*/
    KS0JW00.KS0JW-SAVE-CPTR-CD = KSWREC.KS-HTS-CPTR-CD; /* Save HS Nbr*/
    KS0JW00.KS0JW-SAVE-HDG-CD = KSWREC.KS-HTS-HDG-CD;
    KS0JW00.KS0JW-SAVE-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
    KS0JW00.KS0JW-SAVE-2ND-SHDG-CD[1] = KSWREC.KS-HTS-2ND-SHDG-CD[1];
    KS0JW00.KS0JW-SAVE-2ND-SHDG-CD[2] = KSWREC.KS-HTS-2ND-SHDG-CD[2];
    KS0JW00.KS0JW-SAVE-STAT-CD = KSWREC.KS-HTS-STAT-CD;
    ;
    /* ------------------------------------------------------------*/
    /* the following code will set the initial map to be displayed.*/
    /* ------------------------------------------------------------*/
    ;
    if (KSWREC.KS-HTS-1ST-SHDG-CD > " "
     && KSWREC.KS-HTS-2ND-SHDG-CD[1] > " ")
      KS0JW00.KS0JW-1ST-DISPLAYED-MAP = "4";
      KS0JW00.KS0JW-SWD = "4";
      if (KSWREC.XGPCD == "02" /* If footwear*/
       && KSWREC.KS-HTS-STAT-CD == "  ")
        KS0JW00.KS0JW-1ST-DISPLAYED-MAP = "3";
        KS0JW00.KS0JW-SWD = "3";
      end
    else
      if (KSWREC.KS-HTS-HDG-CD > " ")
        KS0JW00.KS0JW-1ST-DISPLAYED-MAP = "3";
        KS0JW00.KS0JW-SWD = "3";
      else
        if (KSWREC.KS-HTS-CPTR-CD > " ")
          KS0JW00.KS0JW-1ST-DISPLAYED-MAP = "2";
          KS0JW00.KS0JW-SWD = "2";
        else
          KS0JW00.KS0JW-1ST-DISPLAYED-MAP = "1";
          KS0JW00.KS0JW-SWD = "1";
        end
      end
    end
    ;
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0J-00000; /* Converse the main process*/
    ;
    ;
    KS0J-00000: KS0J-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0J-00000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end KS0J

// Main process to display a map
Function KS0J-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Check FROM application*/
  /* 2) If specified, display the first map.*/
  /* 3) Otherwise, if specified, display the second map.*/
  /* 4) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP != "KS0I") /* if not from KS0I*/
    XSNOWAY();
  end
  ;
  if (KS0JW00.KS0JW-SWD == "1") /* Map 1 was requested*/
    ;
    KS0J-10000(); /* Display map 1*/
    ;
  else
    ;
    if (KS0JW00.KS0JW-SWD == "2") /* Map 2 was requested*/
      ;
      KS0J-20000(); /* Display map 2*/
      ;
    else
      ;
      if (KS0JW00.KS0JW-SWD == "3") /* Map 3 was requested*/
        ;
        KS0J-30000(); /* Display map 3*/
        ;
      else
        ;
        if (KS0JW00.KS0JW-SWD == "4") /* Map 4 was requested*/
          ;
          KS0J-40000(); /* Display map 4*/
          ;
        else
          ;
          /* ------------------------------------------------------------*/
          /* Write the error to the Error Diagnosis Reporting Facility.*/
          /* ------------------------------------------------------------*/
          ;
          KSWREC.XXXPRCNM = "00000"; /* Module identification*/
          KSWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
          ;
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
          TA1REC.TA1MAPNO = KS0JW00.KS0JW-SWD; /* Map number*/
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
          ;
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
          ;
          /* ------------------------------------------------------------*/
          /* Exit to display the application system menu.*/
          /* ------------------------------------------------------------*/
          ;
          COMMAREA.CATOAP = "KS0A"; /* TO application*/
          ;
          XSKS-S0001(); /* Exit to another application*/
          ;
          /* ------------------------------------------------------------*/
          /* Abnormally terminate the transaction if the exit failed.*/
          /* ------------------------------------------------------------*/
          ;
          TA1REC.TA1FUNC = "ABND"; /* Termination function*/
          ;
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
          ;
        end
      end
    end
  end
  ;
  ;
end // end KS0J-00000

// List the rows in the table
Function KS0J-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-11000(); /* Obtain the data to display*/
  ;
  KS0J-12000(); /* Format and display the map*/
  ;
  KS0J-13000(); /* Check attention identifier*/
  ;
  KS0J-14000(); /* Reset fields to normal intensity*/
  ;
  KS0J-15000(); /* Verify the entered data*/
  ;
  KS0J-16000(); /* Process valid input request*/
  ;
end // end KS0J-10000

// Obtain the data to display
Function KS0J-11000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-WSR == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO == 0) /* No message to display*/
    KS0JW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-11100(); /* Purge any temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* clear map 1 working storage*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JW01 empty; /* clear map 1 working storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-11300(); /* Select set and open cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX2 = 1; /* set screen line index*/
  KS0JW00.KS0JW-IXM = 1; /* Display line index*/
  KS0JW00.KS0JW-SWC = "N"; /* End of cursor switch*/
  ;
  while (KS0JW00.KS0JW-SWC == "N") /* Until end of cursor*/
    ;
    KS0J-11400(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.KS0JW-SWC == "N") /* Not end of cursor*/
      KS0J-11500(); /* Save data in display storage*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.KS0JW-IX2 >= 11) /* Page is full*/
      ;
      KS0J-11600(); /* Add page to temporary storage*/
      ;
      KS0JW00.KS0JW-IX2 = 1; /* Display line index*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-IX2 > 1) /* Page was formatted*/
    KS0J-11600(); /* Add page to temporary storage*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-11700(); /* Close the selected set cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.TA5TSQIX == 0) /* No pages formatted*/
    KSWREC.XXXPRCNM = "11000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    KS0JW00.KS0JW-SWF = "N"; /* do not format the map*/
    if (KSWREC.SY1STNBR > " ") /* if present, use it*/
      KS0JM001.KS0JM-STY-NBR = KSWREC.SY1STNBR;
    else /* else use experimental sty nbr*/
      KS0JM001.KS0JM-STY-NBR = KSWREC.KS-XPRMT-STY-NBR;
    end
    KS0JM001.KS0JM-COLR-CD-ID = KSWREC.SY2CLRID;
    KS0JM001.KS0JM-DIM-CD = KSWREC.XDMCD;
    KS0JM001.KS0JM-STY-NM[1] = KSWREC.KS-STY-NM[1];
    KS0JM001.KS0JM-STY-NM[2] = KSWREC.KS-STY-NM[2];
    ;
   /* Format the fabric descriptions differently for gpc's*/
    ;
    if (KSWREC.XGPCD == "02")
      KS0JM001.KS0JM-FABRIC-FIELD = "            MATERIAL INFORMATION";
      KS0JW00.KS0JW-MATERIAL-FIELD = "SHELL  :";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[1];
      KS0JM001.KS0JM-FABRIC-DESC[1] = KS0JW00.KS0JW-MATERIAL-DESC;
      KS0JW00.KS0JW-MATERIAL-FIELD = "OVERLAY:";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[2];
      KS0JM001.KS0JM-FABRIC-DESC[2] = KS0JW00.KS0JW-MATERIAL-DESC;
      KS0JW00.KS0JW-MATERIAL-FIELD = "OUTSOLE:";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[3];
      KS0JM001.KS0JM-FABRIC-DESC[3] = KS0JW00.KS0JW-MATERIAL-DESC;
    else
      KS0JM001.KS0JM-FABRIC-FIELD = "              FABRIC INFORMATION";
      KS0JM001.KS0JM-FABRIC-DESC[1] = KSWREC.KS-TXT[1];
      KS0JM001.KS0JM-FABRIC-DESC[2] = KSWREC.KS-TXT[2];
      KS0JM001.KS0JM-FABRIC-DESC[3] = KSWREC.KS-TXT[3];
    end
    ;
    if (KSWREC.YKS-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD)
      KS0JM001.KS0JM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
    end
    ;
    KS0JM001.KS0JM-HTS-NBR = " ";
    ;
    KS0JW00.KS0JW-IXM = 1; /* initialize index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* clear detail lines*/
      KS0JM001.KS0JMSEL[KS0JW-IXM] = " ";
      set KS0JM001.KS0JMSEL[KS0JW-IXM] invisible, skip;
      KS0JM001.KS0JM-DTL-HTS-NBR[KS0JW-IXM] = " ";
      KS0JM001.KS0JM-DTL-HTS-DESC[KS0JW-IXM] = " ";
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
    end
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-WSR = "N"; /* Request for data switch*/
  ;
end // end KS0J-11000

// Purge any temporary storage
Function KS0J-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0JW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-11100

// Select the heading information
Function KS0J-11300()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSCHP01 empty; /* Clear row storage area*/
  ;
  try
    call "IO6080" ("S1", SQLCA, VHSCHP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSCHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSCHP01.VHSCHP01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0J-11300

// Fetch next row in the cursor
Function KS0J-11400()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSCHP01 empty; /* clear work record*/
  ;
  try
    call "IO6080" ("N1", SQLCA, VHSCHP01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0JW00.KS0JW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSCHP01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-11400

// Save data in display storage
Function KS0J-11500()
  /* -------------------------------------------------------------*/
  /* first, we need to determine if this row is the correct status*/
  /* -------------------------------------------------------------*/
  ;
  if (VHSCHP01.XXXSTAT != "A") /* if this row not active ?*/
    return; /* bypass it*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* next, we need to determine if there is enough room on this*/
  /* page to hold all the description lines in this row.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX1 = 1; /* initialize index*/
  KS0JW00.KS0JW-DESC-CNTR = 0; /* initialize DESC CNTR*/
  ;
  while (KS0JW00.KS0JW-IX1 <= 7)
    if (VHSCHP01.KS-HTS-CPTR-DESC[KS0JW-IX1] > " ") /* something in line?*/
      KS0JW00.KS0JW-DESC-CNTR = KS0JW00.KS0JW-DESC-CNTR + 1; /* count it*/
    end
    KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* set index up by 1*/
  end
  ;
  ;
  /* add desc line cntr to page index*/
  ;
  KS0JW00.KS0JW-DESC-CNTR = KS0JW00.KS0JW-DESC-CNTR + KS0JW00.KS0JW-IX2;
  ;
  if (KS0JW00.KS0JW-DESC-CNTR > 11) /* if it will not fit*/
    KS0J-11600(); /* add page already formatted*/
                                    /* to temp storage*/
    set KS0JW01 empty; /* clear tsq record area*/
    KS0JW00.KS0JW-IX1 = 1; /* reset index*/
    KS0JW00.KS0JW-IX2 = 1; /* reset index*/
  end
  ;
  ;
  /* ------------------------------------------------------------*/
  /* at this point, we know that we can fit this row on the page,*/
  /* so save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX1 = 1; /* initialize desc index*/
  ;
  while (KS0JW00.KS0JW-IX1 <= 7 /* for a max of 5 times*/
   && VHSCHP01.KS-HTS-CPTR-DESC[KS0JW-IX1] > " ") /* if data in desc line*/
    if (KS0JW00.KS0JW-IX1 == 1) /* first desc line for this chapter?*/
      KS0JW01.KS0JW-DTL-HTS-NBR[KS0JW-IX2] = VHSCHP01.KS-HTS-CPTR-CD; /* chapter cd*/
    else
      KS0JW01.KS0JW-DTL-HTS-NBR[KS0JW-IX2] = " "; /* chapter cd*/
    end
    KS0JW01.KS0JW-DTL-DESC[KS0JW-IX2] = VHSCHP01.KS-HTS-CPTR-DESC[KS0JW-IX1]; /* desc line*/
    KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
    KS0JW00.KS0JW-IX2 = KS0JW00.KS0JW-IX2 + 1; /* increment index*/
  end
  ;
  KS0JW00.KS0JW-IX2 = KS0JW00.KS0JW-IX2 + 1; /* increment index to*/
                                          /* to allow for blank line*/
                                          /* between chapters*/
  ;
end // end KS0J-11500

// Add page to temporary storage
Function KS0J-11600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW01.XXXTSLEN = KS0JW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
     /* build table of chapter nbrs and ts page nbrs;*/
    ;
    KS0JW00.KS0JW-IX1 = 1; /* initialize index*/
    if (TA5REC.TA5TSQIX == 1) /* first page written?*/
      KS0JW00.KS0JW-CPTR-TSQ-PAGE-TBL = " "; /* clear table*/
      KS0JW00.KS0JW-IX3 = 1; /* initialize index*/
    end
    ;
    while (KS0JW00.KS0JW-IX1 <= 10) /* for a max of 10 times*/
      if (KS0JW01.KS0JW-DTL-HTS-NBR[KS0JW-IX1] > " ") /* if cptr nbr present*/
        KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3] = KS0JW01.KS0JW-DTL-HTS-NBR[KS0JW-IX1]; /* save cptr nbr*/
        KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3] = TA5REC.TA5TSQIX; /* save page nbr*/
        KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
        KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 + 1; /* increment index*/
      else
        KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
      end
    end
    ;
    if (KS0JW00.KS0JW-IX3 > 100) /* table getting full?*/
      converseLib.validationFailed(84); /* internal table full*/
      KSWREC.XXXPRCNM = "11600"; /* module identification*/
    end
    ;
    set KS0JW01 empty; /* M001 display storage*/
    ;
    KS0JW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0J-11600

// Close selected set cursor
Function KS0J-11700()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6080" ("C1", SQLCA, VHSCHP01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSCHP01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-11700

// Format and converse the map
Function KS0J-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-WSR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0JW00.KS0JW-SWF == "Y") /* Map must be formatted*/
      KS0J-12100(); /* Format the data on the map*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0JM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0JM001.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0JM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0JM001 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
end // end KS0J-12000

// Format the display data
Function KS0J-12100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM001 initial; /* M001 input/output area*/
  ;
  KS0JW00.KS0JW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* if we have just come back from a change and there is no data*/
  /* to display, set the last selected heading field to blanks in*/
  /* order by bypass the setting of the cursor routine which reads*/
  /* the TSQ.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.TA5TSQIX == 0) /* no data read ?*/
    KS0JW00.KS0JW-LAST-CHGD-CPTR = " "; /* bypass reading tsq*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If we have just returned from map 2, we need*/
  /* to position the cursor on the last selection.*/
  /* The following code finds the tsq page that the selection in on.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-LAST-CHGD-CPTR > " ") /* just back from change?*/
    KS0JW00.KS0JW-IX3 = 1; /* initialize index*/
    while (KS0JW-IX3 <= 100)
      if (KS0JW00.KS0JW-LAST-CHGD-CPTR < 
      KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3])
        KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 - 1; /* take prev one*/
        if (KS0JW00.KS0JW-IX3 < 1) /* if index < 1*/
          KS0JW00.KS0JW-IX3 = 1; /* set to 1*/
        end
        KS0JW00.XXXTSPAG = KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3]; /* set ts page nbr*/
        KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3]; /* for the cursor*/
                                          /* positioning routine*/
        KS0JW00.KS0JW-IX3 = 100; /* quit the search*/
      else
        if (KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3] == " ") /* cptr nbr blank?*/
          KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 - 1; /* take prev one*/
          if (KS0JW00.KS0JW-IX3 < 1) /* if index < 1*/
            KS0JW00.KS0JW-IX3 = 1; /* set to 1*/
          end
          KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3]; /* for the cursor*/
                                            /* positioning routine*/
          KS0JW00.XXXTSPAG = KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3]; /* set ts page nbr*/
          KS0JW00.KS0JW-IX3 = 100; /* quit the search*/
        end
      end
      KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 + 1; /* set index up by 1*/
    end
    KS0J-12110(); /* read tsq page*/
    set KS0JM001.XXXLITPG skip; /* "PAGE" literal*/
    KS0JM001.XXXTSPAG = KS0JW00.XXXTSPAG; /* Current page*/
    set KS0JM001.XXXLITOF skip; /* "OF" literal*/
    KS0JM001.TA5TSQIX = KS0JW00.TA5TSQIX; /* Highest page*/
  else
    /* ------------------------------------------------------------*/
    /* If the page in storage is not the page to be displayed,*/
    /* obtain the desired page from temporary storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.TA5TSQIX > 0) /* Pages were formatted*/
      ;
      if (KS0JW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
        ;
        /* ------------------------------------------------------------*/
        /* If the current page has been changed, update the page in*/
        /* storage before obtaining the next one to display.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0JW00.KS0JW-SWU == "Y") /* Current page was changed*/
          ;
          KS0J-12120(); /* Update temporary storage page*/
          ;
          KS0JW00.KS0JW-SWU = "N"; /* Storage update switch*/
          ;
        end
        ;
        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0JW00.XXXTSPAG > KS0JW00.TA5TSQIX) /* Desired greater highest*/
          KS0JW00.XXXTSPAG = KS0JW00.TA5TSQIX; /* Default to highest*/
        end
        ;
        KS0J-12110(); /* Obtain temporary storage page*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/
      ;
      set KS0JM001.XXXLITPG skip; /* "PAGE" literal*/
      KS0JM001.XXXTSPAG = KS0JW00.XXXTSPAG; /* Current page*/
      set KS0JM001.XXXLITOF skip; /* "OF" literal*/
      KS0JM001.TA5TSQIX = KS0JW00.TA5TSQIX; /* Highest page*/
      ;
    else
      ;
      set KS0JM001.XXXLITPG invisible, skip; /* "PAGE" literal*/
      KS0JM001.XXXTSPAG = " "; /* Current page*/
      set KS0JM001.XXXLITOF invisible, skip; /* "OF" literal*/
      KS0JM001.TA5TSQIX = " "; /* Highest page*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.SY1STNBR > " ") /* if present, use it*/
    KS0JM001.KS0JM-STY-NBR = KSWREC.SY1STNBR; /* style number*/
  else
    KS0JM001.KS0JM-STY-NBR = KSWREC.KS-XPRMT-STY-NBR; /* x-style nbr*/
  end
  KS0JM001.KS0JM-COLR-CD-ID = KSWREC.SY2CLRID; /* color cd*/
  KS0JM001.KS0JM-DIM-CD = KSWREC.XDMCD; /* dimension cd*/
  KS0JM001.KS0JM-STY-NM[1] = KSWREC.KS-STY-NM[1]; /* style name 1*/
  KS0JM001.KS0JM-STY-NM[2] = KSWREC.KS-STY-NM[2]; /* style name 2*/
  ;
   /* Format the fabric descriptions differently for gpc's*/
  ;
  if (KSWREC.XGPCD == "02")
    KS0JM001.KS0JM-FABRIC-FIELD = "            MATERIAL INFORMATION";
    KS0JW00.KS0JW-MATERIAL-FIELD = "SHELL  :";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[1];
    KS0JM001.KS0JM-FABRIC-DESC[1] = KS0JW00.KS0JW-MATERIAL-DESC;
    KS0JW00.KS0JW-MATERIAL-FIELD = "OVERLAY:";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[2];
    KS0JM001.KS0JM-FABRIC-DESC[2] = KS0JW00.KS0JW-MATERIAL-DESC;
    KS0JW00.KS0JW-MATERIAL-FIELD = "OUTSOLE:";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[3];
    KS0JM001.KS0JM-FABRIC-DESC[3] = KS0JW00.KS0JW-MATERIAL-DESC;
  else
    KS0JM001.KS0JM-FABRIC-FIELD = "              FABRIC INFORMATION";
    KS0JM001.KS0JM-FABRIC-DESC[1] = KSWREC.KS-TXT[1];
    KS0JM001.KS0JM-FABRIC-DESC[2] = KSWREC.KS-TXT[2];
    KS0JM001.KS0JM-FABRIC-DESC[3] = KSWREC.KS-TXT[3];
  end
  ;
  if (KSWREC.YKS-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD)
    KS0JM001.KS0JM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
  end
  ;
  KS0JM001.KS0JM-HTS-NBR = " "; /* hts number*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* Initialize line index*/
  ;
  while (KS0JW00.KS0JW-IXM <= 10) /* Until screen is full*/
    ;
    KS0JM001.KS0JM-DTL-HTS-NBR[KS0JW-IXM] = KS0JW01.KS0JW-DTL-HTS-NBR[KS0JW-IXM];
    KS0JM001.KS0JM-DTL-HTS-DESC[KS0JW-IXM] = KS0JW01.KS0JW-DTL-DESC[KS0JW-IXM];
    ;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* the default cursor position is the 1st selection position*/
  /* the routine below may change the cursor position.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM001.KS0JMSEL[1] cursor, normal;
  ;
  /* ------------------------------------------------------------*/
  /* if we're returning from a selection, position the cursor*/
  /* on the heading we just finished with.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* initialize index*/
  ;
  while (KS0JW-IXM <= 10) /* until all lines are processed*/
    if (KS0JM001.KS0JM-DTL-HTS-NBR[KS0JW-IXM] > " ") /* cd present?*/
      if (KS0JW00.KS0JW-LAST-CHGD-CPTR > " ")
        if (KS0JW00.KS0JW-LAST-CHGD-CPTR == 
        KS0JM001.KS0JM-DTL-HTS-NBR[KS0JW-IXM])
          set KS0JM001.KS0JMSEL[KS0JW-IXM] cursor, normal;
        else
          set KS0JM001.KS0JMSEL[KS0JW-IXM] normal;
        end
      else
        set KS0JM001.KS0JMSEL[KS0JW-IXM] normal;
      end
    else
      set KS0JM001.KS0JMSEL[KS0JW-IXM] invisible, skip;
    end
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
  end
  ;
  KS0JW00.KS0JW-LAST-CHGD-CPTR = " "; /* clear last cptr*/
  ;
end // end KS0J-12100

// read tsq page
Function KS0J-12110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW01.XXXTSLEN = KS0JW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0JW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-12110

// update tsq page
Function KS0J-12120()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-12120

// Check attention identifier
Function KS0J-13000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pakey) /* PA2 was pressed*/
    ;
    if (KS0JW00.KS0JW-WSR == "Y") /* Request for data*/
      set KS0JW01 empty; /* M001 display storage*/
    end
    ;
    KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
    KS0JW00.KS0JW-WSR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0JM001"; /* application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "KS0I"; /* TO application*/
      KSWREC.KS-HTS-CPTR-CD = KS0JW00.KS0JW-SAVE-CPTR-CD;
      KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-SAVE-HDG-CD;
      KSWREC.KS-HTS-1ST-SHDG-CD = KS0JW00.KS0JW-SAVE-1ST-SHDG-CD;
      KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0JW00.KS0JW-SAVE-2ND-SHDG-CD[1];
      KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0JW00.KS0JW-SAVE-2ND-SHDG-CD[2];
      KSWREC.KS-HTS-STAT-CD = KS0JW00.KS0JW-SAVE-STAT-CD;
    end
    ;
    KS0J-11100(); /* Purge temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end KS0J-13000

// Reset highlighted fields
Function KS0J-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM001.KS0JM-STY-NBR initialAttributes; /* style number*/
  set KS0JM001.KS0JM-COLR-CD-ID initialAttributes; /* color code*/
  set KS0JM001.KS0JM-DIM-CD initialAttributes; /* dimension code*/
  set KS0JM001.KS0JM-STY-NM[1] initialAttributes; /* style name 1*/
  set KS0JM001.KS0JM-STY-NM[2] initialAttributes; /* style name 2*/
  set KS0JM001.KS0JM-FABRIC-DESC[1] initialAttributes; /* fabric desc 1*/
  set KS0JM001.KS0JM-FABRIC-DESC[2] initialAttributes; /* fabric desc 2*/
  set KS0JM001.KS0JM-FABRIC-DESC[3] initialAttributes; /* fabric desc 3*/
  set KS0JM001.KS0JM-STY-TYP-DESC initialAttributes; /* style type desc*/
  set KS0JM001.KS0JM-HTS-NBR initialAttributes; /* HTS number*/
  ;
   /* the attributes for the detail lines are also set in ks0j-12100*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* set index to 1*/
  while (KS0JW00.KS0JW-IXM <= 10) /* for all detail lines*/
    if (KS0JM001.KS0JM-DTL-HTS-NBR[KS0JW-IXM] > " ")
      set KS0JM001.KS0JMSEL[KS0JW-IXM] normal;
    else
      set KS0JM001.KS0JMSEL[KS0JW-IXM] invisible, skip;
    end
    set KS0JM001.KS0JM-DTL-HTS-NBR[KS0JW-IXM] initialAttributes;
    set KS0JM001.KS0JM-DTL-HTS-DESC[KS0JW-IXM] initialAttributes;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
  end
  ;
end // end KS0J-14000

// Verify data that was entered
Function KS0J-15000()
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    KS0J-15100(); /* Verify scroll request*/
    ;
  else
    ;
    KS0J-15200(); /* Verify data in the line*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end KS0J-15000

// Verify scroll request
Function KS0J-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0JW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0JW00.XXXTSPAG >= KS0JW00.TA5TSQIX) /* and no more pages*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate an error for any data that was modified.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 10; /* Initialize line index*/
  ;
  while (KS0JW00.KS0JW-IXM > 0) /* Until end of lines*/
    ;
    if (KS0JM001.KS0JMSEL[KS0JW-IXM] != KS0JW01.KS0JW-SEL[KS0JW-IXM])
      ;
      KSWREC.XXXPRCNM = "15100"; /* Module identification*/
      set KS0JM001.KS0JMSEL[KS0JW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/
      ;
    end
    ;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM - 1; /* Decrement line number*/
    ;
  end
  ;
end // end KS0J-15100

// Verify data in the line
Function KS0J-15200()
  /* ------------------------------------------------------------*/
  /* If selection was entered and is not a "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 10; /* set index*/
  ;
  while (KS0JW00.KS0JW-IXM >= 1)
    if (KS0JM001.KS0JMSEL[KS0JW-IXM] != KS0JW01.KS0JW-SEL[KS0JW-IXM]
     && KS0JM001.KS0JMSEL[KS0JW-IXM] != "S") /* and is not a "S"*/
      ;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0JM001.KS0JMSEL[KS0JW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" may be entered*/
      ;
    end
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM - 1; /* decrement index*/
  end
  ;
end // end KS0J-15200

// Process valid input request
Function KS0J-16000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* if enter was pressed and a selection was made, move that key*/
  /* to kswrec and display map #2.*/
  /*  */
  /* if enter was pressed and a selection was not made, display*/
  /* msg #43.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-NEXT-SEL-CPTR = " "; /* clear selection fld*/
  ;
  if (converseVar.eventKey is enter) /* enter pressed?*/
    ;
    KS0JW00.KS0JW-IXM = 1; /* reset index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
      ;
      if (KS0JM001.KS0JMSEL[KS0JW-IXM] == "S") /* this line selected?*/
        KSWREC.KS-HTS-CPTR-CD = KS0JM001.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* save chapter nbr*/
        KS0JW00.KS0JW-NEXT-SEL-CPTR = KS0JM001.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* save selection*/
        KS0JW00.KS0JW-IXM = 11; /* end loop*/
      end
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
      ;
    end
    ;
    if (KS0JW00.KS0JW-NEXT-SEL-CPTR == " ") /* if none were selected*/
      converseLib.validationFailed(43); /* set error msg nbr*/
      KSWREC.XXXPRCNM = "16000"; /* module identification*/
      KS0JW00.KS0JW-WSR = "N"; /* do not request data*/
      KS0JW00.KS0JW-SWF = "N"; /* do not format map*/
      KS0JW00.KS0JW-SWD = "1"; /* Map to be displayed switch*/
      return; /* return*/
    end
    ;
    KS0JW00.KS0JW-WSR = "Y"; /* do request data*/
    KS0JW00.KS0JW-SWF = "Y"; /* do format map*/
    KS0JW00.KS0JW-SWD = "2"; /* Map to be displayed switch*/
    ;
  end
  ;
  if (converseVar.eventKey is pf20) /* F20 pressed?*/
    ;
    KS0JW00.KS0JW-IXM = 1; /* reset index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
      ;
      if (KS0JM001.KS0JMSEL[KS0JW-IXM] == "S") /* this line selected?*/
        KSWREC.KS-HTS-CPTR-CD = KS0JM001.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* save chapter selected*/
        KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-HTS-HDG-CD; /* heading cd*/
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0JW00.KS0JW-HTS-1ST-SHDG-CD; /* 1st subheading cd*/
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD; /* 2nd subheading cd1*/
        KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD; /* 2nd subheading cd2*/
        KSWREC.KS-HTS-STAT-CD = KS0JW00.KS0JW-HTS-STAT-CD; /* stat cd*/
        ;
        KS0JW00.KS0JW-IXM = 11; /* end loop*/
      end
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
      ;
    end
    ;
    KS0J-11100(); /* clear temp storage*/
    ;
    COMMAREA.CATOAP = "KS0I"; /* set destination application*/
    ;
    XSKS-S0001(); /* exit to another application*/
    ;
    exit stack;
    ;
  end
  ;
end // end KS0J-16000

// Main process to display a map
Function KS0J-20000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-21000(); /* Obtain the data to display*/
  ;
  KS0J-22000(); /* Format and display the map*/
  ;
  KS0J-23000(); /* Check attention identifier*/
  ;
  KS0J-24000(); /* Reset fields to normal intensity*/
  ;
  KS0J-25000(); /* Verify the data that was entered*/
  ;
  KS0J-26000(); /* Process valid input request*/
  ;
end // end KS0J-20000

// Obtain the data to display
Function KS0J-21000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-WSR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO == 0) /* No message to display*/
    KS0JW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-21100(); /* Purge any temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* clear map 2 working storage*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JW02 empty; /* clear working storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-21300(); /* Select set and open cursor*/
  ;
  if (converseVar.validationMsgNum != 0) /* if not successful*/
    return; /* return to prev process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX2 = 1; /* set screen line index*/
  KS0JW00.KS0JW-IXM = 1; /* Display line index*/
  KS0JW00.KS0JW-SWC = "N"; /* End of cursor switch*/
  ;
  while (KS0JW00.KS0JW-SWC == "N") /* Until end of cursor*/
    ;
    KS0J-21400(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.KS0JW-SWC == "N") /* Not end of cursor*/
      KS0J-21500(); /* Save data in display storage*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.KS0JW-IX2 >= 10) /* Page is full*/
      ;
      KS0J-21600(); /* Add page to temporary storage*/
      ;
      KS0JW00.KS0JW-IX2 = 1; /* Display line index*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-IX2 > 1) /* Page was formatted*/
    KS0J-21600(); /* Add page to temporary storage*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-21700(); /* Close the selected set cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.TA5TSQIX == 0) /* No pages formatted*/
    KSWREC.XXXPRCNM = "21000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    KS0JW00.KS0JW-SWF = "N"; /* do not format the map*/
    set KS0JM002.XXXLITPG invisible, skip; /* "PAGE' literal*/
    KS0JM002.XXXTSPAG = " "; /* current page*/
    set KS0JM002.XXXLITOF invisible, skip; /* "OF' literal*/
    KS0JM002.TA5TSQIX = " "; /* highest page*/
    if (KSWREC.SY1STNBR > " ") /* if present, use it*/
      KS0JM002.KS0JM-STY-NBR = KSWREC.SY1STNBR;
    else /* else use experimental*/
      KS0JM002.KS0JM-STY-NBR = KSWREC.KS-XPRMT-STY-NBR;
    end
    KS0JM002.KS0JM-COLR-CD-ID = KSWREC.SY2CLRID;
    KS0JM002.KS0JM-DIM-CD = KSWREC.XDMCD;
    KS0JM002.KS0JM-STY-NM[1] = KSWREC.KS-STY-NM[1];
    KS0JM002.KS0JM-STY-NM[2] = KSWREC.KS-STY-NM[2];
    ;
   /* Format the fabric descriptions differently for gpc's*/
    ;
    if (KSWREC.XGPCD == "02")
      KS0JM002.KS0JM-FABRIC-FIELD = "            MATERIAL INFORMATION";
      KS0JW00.KS0JW-MATERIAL-FIELD = "SHELL  :";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[1];
      KS0JM002.KS0JM-FABRIC-DESC[1] = KS0JW00.KS0JW-MATERIAL-DESC;
      KS0JW00.KS0JW-MATERIAL-FIELD = "OVERLAY:";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[2];
      KS0JM002.KS0JM-FABRIC-DESC[2] = KS0JW00.KS0JW-MATERIAL-DESC;
      KS0JW00.KS0JW-MATERIAL-FIELD = "OUTSOLE:";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[3];
      KS0JM002.KS0JM-FABRIC-DESC[3] = KS0JW00.KS0JW-MATERIAL-DESC;
    else
      KS0JM002.KS0JM-FABRIC-FIELD = "              FABRIC INFORMATION";
      KS0JM002.KS0JM-FABRIC-DESC[1] = KSWREC.KS-TXT[1];
      KS0JM002.KS0JM-FABRIC-DESC[2] = KSWREC.KS-TXT[2];
      KS0JM002.KS0JM-FABRIC-DESC[3] = KSWREC.KS-TXT[3];
    end
    ;
    if (KSWREC.YKS-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD)
      KS0JM002.KS0JM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
    end
    ;
   /* Format the hs number correctly*/
    ;
    KS0JW00.KS0JW-HTS-NBR = " ";
    KS0JW00.KS0JW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    KS0JM002.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR;
    ;
    KS0JW00.KS0JW-IXM = 1; /* initialize index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* clear detail lines*/
      KS0JM002.KS0JMSEL[KS0JW-IXM] = " ";
      set KS0JM002.KS0JMSEL[KS0JW-IXM] invisible, skip;
      KS0JM002.KS0JM-DTL-HTS-NBR[KS0JW-IXM] = " ";
      KS0JM002.KS0JM-DTL-HTS-DESC[KS0JW-IXM] = " ";
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
    end
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-WSR = "N"; /* Request for data switch*/
  ;
end // end KS0J-21000

// purge temporary storage
Function KS0J-21100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0JW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "21100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-21100

// select set and open cursor
Function KS0J-21300()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* Clear row storage area*/
  ;
  /* ------------------------------------------------------------*/
  /* Set the chapter & heading number for the select.*/
  /* ------------------------------------------------------------*/
  ;
  VHSHDG01.KS-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
  ;
  try
    call "IO6100" ("S1", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select SET*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-21300

// fetch next row
Function KS0J-21400()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* clear work record*/
  ;
  try
    call "IO6100" ("N1", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0JW00.KS0JW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  KS0JW00.KS0JW-SWC = "Y"; /* Indicate end of cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-21400

// save data in display storage
Function KS0J-21500()
  /* ------------------------------------------------------------*/
  /* we need to determine if there is enough room on this*/
  /* page to hold all the description lines in this row.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX1 = 1; /* initialize index*/
  KS0JW00.KS0JW-DESC-CNTR = 0; /* initialize DESC CNTR*/
  ;
  while (KS0JW00.KS0JW-IX1 <= 7)
    if (VHSHDG01.KS-HTS-HDG-DESC[KS0JW-IX1] > " ") /* something in line?*/
      KS0JW00.KS0JW-DESC-CNTR = KS0JW00.KS0JW-DESC-CNTR + 1; /* count it*/
    end
    KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* set index up by 1*/
  end
  ;
  ;
  /* add desc line cntr to page index*/
  ;
  KS0JW00.KS0JW-DESC-CNTR = KS0JW00.KS0JW-DESC-CNTR + KS0JW00.KS0JW-IX2;
  ;
  if (KS0JW00.KS0JW-DESC-CNTR > 10) /* if it will not fit*/
    KS0J-21600(); /* add page already formatted*/
                                    /* to temp storage*/
    set KS0JW02 empty; /* clear tsq record area*/
    KS0JW00.KS0JW-IX1 = 1; /* reset index*/
    KS0JW00.KS0JW-IX2 = 1; /* reset index*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* at this point, we know that we can fit this row on the page,*/
  /* so save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX1 = 1; /* initialize desc index*/
  ;
  while (KS0JW00.KS0JW-IX1 <= 7 /* for a max of 5 times*/
   && VHSHDG01.KS-HTS-HDG-DESC[KS0JW-IX1] > " ") /* if data in desc line*/
    if (KS0JW00.KS0JW-IX1 == 1) /* first desc line for this chapter?*/
      KS0JW00.KS0JW-HTS-CPTR-CD = VHSHDG01.KS-HTS-CPTR-CD; /* chapter*/
      KS0JW00.KS0JW-HTS-HDG-CD = VHSHDG01.KS-HTS-HDG-CD; /* heading cd*/
      KS0JW02.KS0JW-DTL-HTS-NBR[KS0JW-IX2] = KS0JW00.KS0JW-HTS-NBR;
    else
      KS0JW02.KS0JW-DTL-HTS-NBR[KS0JW-IX2] = " "; /* heading cd*/
    end
    KS0JW02.KS0JW-DTL-DESC[KS0JW-IX2] = VHSHDG01.KS-HTS-HDG-DESC[KS0JW-IX1]; /* desc line*/
    KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
    KS0JW00.KS0JW-IX2 = KS0JW00.KS0JW-IX2 + 1; /* increment index*/
  end
  ;
  KS0JW00.KS0JW-IX2 = KS0JW00.KS0JW-IX2 + 1; /* increment index to*/
                                          /* to allow for blank line*/
                                          /* between chapters*/
  ;
end // end KS0J-21500

// add page to temp storage
Function KS0J-21600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW02.XXXTSLEN = KS0JW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
     /* build table of chapter nbrs and ts page nbrs;*/
    ;
    KS0JW00.KS0JW-IX1 = 1; /* initialize index*/
    if (TA5REC.TA5TSQIX == 1) /* first page written?*/
      KS0JW00.KS0JW-CPTR-TSQ-PAGE-TBL = " "; /* clear table*/
      KS0JW00.KS0JW-IX3 = 1; /* initialize index*/
    end
    ;
    while (KS0JW00.KS0JW-IX1 <= 10) /* for a max of 10 times*/
      if (KS0JW02.KS0JW-DTL-HTS-NBR[KS0JW-IX1] > " ") /* hdg nbr present*/
        KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3] = KS0JW02.KS0JW-DTL-HTS-NBR[KS0JW-IX1]; /* save hdg nbr*/
        KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3] = TA5REC.TA5TSQIX; /* save page nbr*/
        KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
        KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 + 1; /* increment index*/
      else
        KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
      end
    end
    ;
    if (KS0JW00.KS0JW-IX3 > 100) /* table getting full?*/
      converseLib.validationFailed(84); /* internal table full*/
      KSWREC.XXXPRCNM = "21600"; /* module identification*/
    end
    ;
    set KS0JW02 empty; /* M002 display storage*/
    ;
    KS0JW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "21600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-21600

// close selected set
Function KS0J-21700()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6100" ("C1", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-21700

// Format and converse the map
Function KS0J-22000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-WSR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0JW00.KS0JW-SWF == "Y") /* Map must be formatted*/
      ;
      KS0J-22100(); /* format data on map*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
      ;
    else
      ;
      KS0JM002.XXXPRCNM = COMMAREA.CAMSG; /* message text*/
      ;
    end
    ;
    KS0JM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0JM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0JM002 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
end // end KS0J-22000

// format the display data
Function KS0J-22100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM002 initial; /* M002 input/output area*/
  ;
  KS0JW00.KS0JW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* if we have just come back from map # 3 and there is no data*/
  /* to display, set the last selected field to blanks in*/
  /* order by bypass the setting of the cursor routine which reads*/
  /* the TSQ.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.TA5TSQIX == 0) /* no data read ?*/
    KS0JW00.KS0JW-LAST-CHGD-CPTR = " "; /* bypass reading tsq*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If we have just returned from map # 3, we need*/
  /* to position the cursor on the last selection.*/
  /* The following code finds the tsq page that the selection is on.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-LAST-CHGD-CPTR > " ") /* just back from change?*/
    KS0JW00.KS0JW-IX3 = 1; /* initialize index*/
    while (KS0JW-IX3 <= 100)
      if (KS0JW00.KS0JW-LAST-CHGD-CPTR < 
      KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3])
        KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 - 1; /* take prev one*/
        if (KS0JW00.KS0JW-IX3 < 1) /* if less than 1*/
          KS0JW00.KS0JW-IX3 = 1; /* set to 1*/
        end
        KS0JW00.XXXTSPAG = KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3]; /* set ts page nbr*/
        KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
        KS0JW00.KS0JW-IX3 = 100; /* quit the search*/
      else
        if (KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3] == " ") /* hdg nbr blank?*/
          KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 - 1; /* take prev one*/
          if (KS0JW00.KS0JW-IX3 < 1) /* if less than 1*/
            KS0JW00.KS0JW-IX3 = 1; /* set to 1*/
          end
          KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
          KS0JW00.XXXTSPAG = KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3]; /* set ts page nbr*/
          KS0JW00.KS0JW-IX3 = 100; /* quit the search*/
        end
      end
      KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 + 1; /* set index up by 1*/
    end
    KS0J-22110(); /* read tsq page*/
    set KS0JM002.XXXLITPG skip; /* "PAGE" literal*/
    KS0JM002.XXXTSPAG = KS0JW00.XXXTSPAG; /* Current page*/
    set KS0JM002.XXXLITOF skip; /* "OF" literal*/
    KS0JM002.TA5TSQIX = KS0JW00.TA5TSQIX; /* Highest page*/
  else
    /* ------------------------------------------------------------*/
    /* If the page in storage is not the page to be displayed,*/
    /* obtain the desired page from temporary storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.TA5TSQIX > 0) /* Pages were formatted*/
      ;
      if (KS0JW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
        ;
        /* ------------------------------------------------------------*/
        /* If the current page has been changed, update the page in*/
        /* storage before obtaining the next one to display.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0JW00.KS0JW-SWU == "Y") /* Current page was changed*/
          ;
          KS0J-22120(); /* Update temporary storage page*/
          ;
          KS0JW00.KS0JW-SWU = "N"; /* Storage update switch*/
          ;
        end
        ;
        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0JW00.XXXTSPAG > KS0JW00.TA5TSQIX) /* Desired greater highest*/
          KS0JW00.XXXTSPAG = KS0JW00.TA5TSQIX; /* Default to highest*/
        end
        ;
        KS0J-22110(); /* read tsq page*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/
      ;
      set KS0JM002.XXXLITPG skip; /* "PAGE" literal*/
      KS0JM002.XXXTSPAG = KS0JW00.XXXTSPAG; /* Current page*/
      set KS0JM002.XXXLITOF skip; /* "OF" literal*/
      KS0JM002.TA5TSQIX = KS0JW00.TA5TSQIX; /* Highest page*/
      ;
    else
      ;
      set KS0JM002.XXXLITPG invisible, skip; /* "PAGE" literal*/
      KS0JM002.XXXTSPAG = " "; /* Current page*/
      set KS0JM002.XXXLITOF invisible, skip; /* "OF" literal*/
      KS0JM002.TA5TSQIX = " "; /* Highest page*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.SY1STNBR > " ") /* style number*/
    KS0JM002.KS0JM-STY-NBR = KSWREC.SY1STNBR; /* style number*/
  else
    KS0JM002.KS0JM-STY-NBR = KSWREC.KS-XPRMT-STY-NBR; /* x-style nbr*/
  end
  KS0JM002.KS0JM-COLR-CD-ID = KSWREC.SY2CLRID; /* color cd*/
  KS0JM002.KS0JM-DIM-CD = KSWREC.XDMCD; /* dimension cd*/
  KS0JM002.KS0JM-STY-NM[1] = KSWREC.KS-STY-NM[1]; /* style name 1*/
  KS0JM002.KS0JM-STY-NM[2] = KSWREC.KS-STY-NM[2]; /* style name 2*/
  ;
   /* Format the fabric descriptions differently for gpc's*/
  ;
  if (KSWREC.XGPCD == "02")
    KS0JM002.KS0JM-FABRIC-FIELD = "            MATERIAL INFORMATION";
    KS0JW00.KS0JW-MATERIAL-FIELD = "SHELL  :";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[1];
    KS0JM002.KS0JM-FABRIC-DESC[1] = KS0JW00.KS0JW-MATERIAL-DESC;
    KS0JW00.KS0JW-MATERIAL-FIELD = "OVERLAY:";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[2];
    KS0JM002.KS0JM-FABRIC-DESC[2] = KS0JW00.KS0JW-MATERIAL-DESC;
    KS0JW00.KS0JW-MATERIAL-FIELD = "OUTSOLE:";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[3];
    KS0JM002.KS0JM-FABRIC-DESC[3] = KS0JW00.KS0JW-MATERIAL-DESC;
  else
    KS0JM002.KS0JM-FABRIC-FIELD = "              FABRIC INFORMATION";
    KS0JM002.KS0JM-FABRIC-DESC[1] = KSWREC.KS-TXT[1];
    KS0JM002.KS0JM-FABRIC-DESC[2] = KSWREC.KS-TXT[2];
    KS0JM002.KS0JM-FABRIC-DESC[3] = KSWREC.KS-TXT[3];
  end
  ;
  if (KSWREC.YKS-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD)
    KS0JM002.KS0JM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
  end
  ;
  /* Format the hs number correctly*/
  ;
  KS0JW00.KS0JW-HTS-NBR = " ";
  KS0JW00.KS0JW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
  KS0JM002.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR;
  ;
  ;
  KS0JW00.KS0JW-IXM = 1; /* Initialize line index*/
  ;
  while (KS0JW00.KS0JW-IXM <= 10) /* Until screen is full*/
    ;
    KS0JM002.KS0JM-DTL-HTS-NBR[KS0JW-IXM] = KS0JW02.KS0JW-DTL-HTS-NBR[KS0JW-IXM];
    KS0JM002.KS0JM-DTL-HTS-DESC[KS0JW-IXM] = KS0JW02.KS0JW-DTL-DESC[KS0JW-IXM];
    ;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* the default cursor position is the 1st selection position*/
  /* the routine below may change the cursor position.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM002.KS0JMSEL[1] cursor, normal;
  ;
  /* ------------------------------------------------------------*/
  /* if we're returning from a selection, position the cursor*/
  /* on the heading we just finished with.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* initialize index*/
  ;
  while (KS0JW-IXM <= 10) /* until all lines are processed*/
    if (KS0JM002.KS0JM-DTL-HTS-NBR[KS0JW-IXM] > " ") /* cd present?*/
      if (KS0JW00.KS0JW-LAST-CHGD-CPTR > " ")
        if (KS0JW00.KS0JW-LAST-CHGD-CPTR == 
        KS0JM002.KS0JM-DTL-HTS-NBR[KS0JW-IXM])
          set KS0JM002.KS0JMSEL[KS0JW-IXM] cursor, normal;
        else
          set KS0JM002.KS0JMSEL[KS0JW-IXM] normal;
        end
      else
        set KS0JM002.KS0JMSEL[KS0JW-IXM] normal;
      end
    else
      set KS0JM002.KS0JMSEL[KS0JW-IXM] invisible, skip;
    end
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
  end
  ;
  KS0JW00.KS0JW-LAST-CHGD-CPTR = " "; /* clear last cptr*/
  ;
end // end KS0J-22100

// read tsq page
Function KS0J-22110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW02.XXXTSLEN = KS0JW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0JW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "22110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end KS0J-22110

// update tsq page
Function KS0J-22120()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "22120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end KS0J-22120

// check attention identifier
Function KS0J-23000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pakey) /* PA2 was pressed*/
    ;
    if (KS0JW00.KS0JW-WSR == "Y") /* Request for data*/
      set KS0JW02 empty; /* M002 display storage*/
    end
    ;
    KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
    KS0JW00.KS0JW-WSR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0JM002"; /* application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
      KS0JW00.KS0JW-WSR = "Y"; /* Request for data switch*/
      KS0JW00.KS0JW-SWD = "1"; /* set map # to display*/
      KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JM002.KS0JM-HTS-NBR;
      exit stack; /* Exit to display map*/
    end
    ;
    KS0J-21100(); /* Purge temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "23000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end KS0J-23000

// reset highlighted fields
Function KS0J-24000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM002.KS0JM-STY-NBR initialAttributes; /* style number*/
  set KS0JM002.KS0JM-COLR-CD-ID initialAttributes; /* color code*/
  set KS0JM002.KS0JM-DIM-CD initialAttributes; /* dimension code*/
  set KS0JM002.KS0JM-STY-NM[1] initialAttributes; /* style name 1*/
  set KS0JM002.KS0JM-STY-NM[2] initialAttributes; /* style name 2*/
  set KS0JM002.KS0JM-FABRIC-DESC[1] initialAttributes; /* fabric desc 1*/
  set KS0JM002.KS0JM-FABRIC-DESC[2] initialAttributes; /* fabric desc 2*/
  set KS0JM002.KS0JM-FABRIC-DESC[3] initialAttributes; /* fabric desc 3*/
  set KS0JM002.KS0JM-STY-TYP-DESC initialAttributes; /* style type desc*/
  set KS0JM002.KS0JM-HTS-NBR initialAttributes; /* HTS number*/
  ;
   /* the attributes for the detail lines are also set in ks0j-22100*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* set index to 1*/
  while (KS0JW00.KS0JW-IXM <= 10) /* for all detail lines*/
    if (KS0JM002.KS0JM-DTL-HTS-NBR[KS0JW-IXM] > " ")
      set KS0JM002.KS0JMSEL[KS0JW-IXM] normal;
    else
      set KS0JM002.KS0JMSEL[KS0JW-IXM] invisible, skip;
    end
    set KS0JM002.KS0JM-DTL-HTS-NBR[KS0JW-IXM] initialAttributes;
    set KS0JM002.KS0JM-DTL-HTS-DESC[KS0JW-IXM] initialAttributes;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
  end
  ;
end // end KS0J-24000

// Verify data that was entered
Function KS0J-25000()
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    KS0J-25100(); /* Verify scroll request*/
    ;
  else
    ;
    KS0J-25200(); /* Verify data in the line*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end KS0J-25000

// verify scroll request
Function KS0J-25100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0JW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    KSWREC.XXXPRCNM = "25100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0JW00.XXXTSPAG >= KS0JW00.TA5TSQIX) /* and no more pages*/
    ;
    KSWREC.XXXPRCNM = "25100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate an error for any data that was modified.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 10; /* Initialize line index*/
  ;
  while (KS0JW00.KS0JW-IXM > 0) /* Until end of lines*/
    ;
    if (KS0JM002.KS0JMSEL[KS0JW-IXM] != KS0JW02.KS0JW-SEL[KS0JW-IXM])
      ;
      KSWREC.XXXPRCNM = "25100"; /* Module identification*/
      set KS0JM002.KS0JMSEL[KS0JW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/
      ;
    end
    ;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM - 1; /* Decrement line number*/
    ;
  end
  ;
end // end KS0J-25100

// verify data in the line
Function KS0J-25200()
  /* ------------------------------------------------------------*/
  /* If selection was entered and is not a "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 10; /* set index*/
  ;
  while (KS0JW00.KS0JW-IXM >= 1)
    if (KS0JM001.KS0JMSEL[KS0JW-IXM] != KS0JW01.KS0JW-SEL[KS0JW-IXM]
     && KS0JM001.KS0JMSEL[KS0JW-IXM] != "S") /* and is not a "S"*/
      ;
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0JM001.KS0JMSEL[KS0JW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" may be entered*/
      ;
    end
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM - 1; /* decrement index*/
  end
  ;
end // end KS0J-25200

// Process valid input request
Function KS0J-26000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* if enter was pressed and a selection was made, move selected*/
  /* chapter and heading numbers to kswrec and xfer to KS0i.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* enter pressed?*/
    ;
    KS0JW00.KS0JW-NEXT-SEL-CPTR = " ";
    ;
    KS0JW00.KS0JW-IXM = 1; /* reset index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
      ;
      if (KS0JM002.KS0JMSEL[KS0JW-IXM] == "S") /* this line selected?*/
        ;
        KS0JW00.KS0JW-NEXT-SEL-CPTR = KS0JM002.KS0JM-DTL-HTS-NBR[KS0JW-IXM];
        KS0JW00.KS0JW-HTS-NBR = KS0JM002.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* work area*/
        KSWREC.KS-HTS-CPTR-CD = KS0JW00.KS0JW-HTS-CPTR-CD; /* set up kswrec*/
        KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-HTS-HDG-CD; /* key fields*/
        KS0JW00.KS0JW-IXM = 11;
        ;
      end
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
    end
    ;
    if (KS0JW00.KS0JW-NEXT-SEL-CPTR == " ") /* if nothing selected*/
      converseLib.validationFailed(43); /* please select a line*/
      KSWREC.XXXPRCNM = "26000"; /* module id*/
      KS0JW00.KS0JW-WSR = "N"; /* do not request data*/
      KS0JW00.KS0JW-SWF = "N"; /* do not format map*/
      KS0JW00.KS0JW-SWD = "2"; /* display map # 2*/
      return;
    end
    ;
    KS0JW00.KS0JW-WSR = "Y"; /* do request data*/
    KS0JW00.KS0JW-SWF = "Y"; /* do format map*/
    KS0JW00.KS0JW-SWD = "3"; /* display map # 3*/
    ;
  end
  ;
  if (converseVar.eventKey is pf20) /* F20 pressed?*/
    ;
    KS0JW00.KS0JW-IXM = 1; /* reset index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
      ;
      if (KS0JM002.KS0JMSEL[KS0JW-IXM] == "S") /* this line selected?*/
        ;
        KS0JW00.KS0JW-HTS-NBR = KS0JM002.KS0JM-DTL-HTS-NBR[KS0JW-IXM];
        KSWREC.KS-HTS-CPTR-CD = KS0JW00.KS0JW-HTS-CPTR-CD; /* chapter cd*/
        KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-HTS-HDG-CD; /* heading cd*/
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0JW00.KS0JW-HTS-1ST-SHDG-CD; /* 1st subheading cd*/
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD; /* 2nd subheading cd1*/
        KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD; /* 2nd subheading cd2*/
        KSWREC.KS-HTS-STAT-CD = KS0JW00.KS0JW-HTS-STAT-CD; /* stat cd*/
        ;
        KS0JW00.KS0JW-IXM = 11;
        ;
      end
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
    end
    ;
    KS0J-21100(); /* clear temp storage*/
    ;
    COMMAREA.CATOAP = "KS0I"; /* set destination application*/
    ;
    XSKS-S0001(); /* exit to another application*/
    ;
    exit stack;
    ;
  end
  ;
end // end KS0J-26000

// Main process to display a map
Function KS0J-30000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-31000(); /* Obtain the data to display*/
  ;
  KS0J-32000(); /* Format and display the map*/
  ;
  KS0J-33000(); /* Check attention identifier*/
  ;
  KS0J-34000(); /* Reset fields to normal intensity*/
  ;
  KS0J-35000(); /* Verify the data that was entered*/
  ;
  KS0J-36000(); /* Process valid input request*/
  ;
end // end KS0J-30000

// Obtain the data to display
Function KS0J-31000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-WSR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO == 0) /* No message to display*/
    KS0JW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-31100(); /* Purge any temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* clear map 1 working storage*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JW03 empty; /* clear map 3 working storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-31300(); /* Select set and open cursor*/
  ;
  if (converseVar.validationMsgNum != 0) /* any errors ?*/
    return; /* return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX2 = 1; /* set screen line index*/
  KS0JW00.KS0JW-IXM = 1; /* Display line index*/
  KS0JW00.KS0JW-SWC = "N"; /* End of cursor switch*/
  ;
  while (KS0JW00.KS0JW-SWC == "N") /* Until end of cursor*/
    ;
    KS0J-31400(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.KS0JW-SWC == "N") /* Not end of cursor*/
      KS0J-31500(); /* Save data in display storage*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.KS0JW-IX2 >= 10) /* Page is full*/
      ;
      KS0J-31600(); /* Add page to temporary storage*/
      ;
      KS0JW00.KS0JW-IX2 = 1; /* Display line index*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-IX2 > 1) /* Page was formatted*/
    KS0J-31600(); /* Add page to temporary storage*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-31700(); /* Close the selected set cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.TA5TSQIX == 0) /* No pages formatted*/
    KSWREC.XXXPRCNM = "31000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    KS0JW00.KS0JW-SWF = "N"; /* do not format the map*/
    set KS0JM003.XXXLITPG invisible, skip; /* "PAGE" literal*/
    KS0JM003.XXXTSPAG = " "; /* current page*/
    set KS0JM003.XXXLITOF invisible, skip; /* "OF" literal*/
    KS0JM003.TA5TSQIX = " "; /* highest page*/
    if (KSWREC.SY1STNBR > " ") /* if present, use it*/
      KS0JM003.KS0JM-STY-NBR = KSWREC.SY1STNBR;
    else
      KS0JM003.KS0JM-STY-NBR = KSWREC.KS-XPRMT-STY-NBR;
    end
    KS0JM003.KS0JM-COLR-CD-ID = KSWREC.SY2CLRID;
    KS0JM003.KS0JM-DIM-CD = KSWREC.XDMCD;
    KS0JM003.KS0JM-STY-NM[1] = KSWREC.KS-STY-NM[1];
    KS0JM003.KS0JM-STY-NM[2] = KSWREC.KS-STY-NM[2];
    ;
   /* Format the fabric descriptions differently for gpc's*/
    ;
    if (KSWREC.XGPCD == "02")
      KS0JM003.KS0JM-FABRIC-FIELD = "            MATERIAL INFORMATION";
      KS0JW00.KS0JW-MATERIAL-FIELD = "SHELL  :";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[1];
      KS0JM003.KS0JM-FABRIC-DESC[1] = KS0JW00.KS0JW-MATERIAL-DESC;
      KS0JW00.KS0JW-MATERIAL-FIELD = "OVERLAY:";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[2];
      KS0JM003.KS0JM-FABRIC-DESC[2] = KS0JW00.KS0JW-MATERIAL-DESC;
      KS0JW00.KS0JW-MATERIAL-FIELD = "OUTSOLE:";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[3];
      KS0JM003.KS0JM-FABRIC-DESC[3] = KS0JW00.KS0JW-MATERIAL-DESC;
    else
      KS0JM003.KS0JM-FABRIC-FIELD = "              FABRIC INFORMATION";
      KS0JM003.KS0JM-FABRIC-DESC[1] = KSWREC.KS-TXT[1];
      KS0JM003.KS0JM-FABRIC-DESC[2] = KSWREC.KS-TXT[2];
      KS0JM003.KS0JM-FABRIC-DESC[3] = KSWREC.KS-TXT[3];
    end
    ;
    if (KSWREC.YKS-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD)
      KS0JM003.KS0JM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
    end
    ;
    /* Format the hs number correctly*/
    ;
    if (KSWREC.XGPCD == "02"
     && KSWREC.KS-HTS-2ND-SHDG-CD[2] > "  ")
      KS0JW00.KS0JW-HTS-NBR-ALT = " ";
      KS0JW00.KS0JW-HTS-CPTR-CD-ALT = KSWREC.KS-HTS-CPTR-CD;
      KS0JW00.KS0JW-HTS-HDG-CD-ALT = KSWREC.KS-HTS-HDG-CD;
      KS0JW00.KS0JW-PERIOD1-ALT = ".";
      KS0JW00.KS0JW-HTS-1ST-SHDG-CD-ALT = KSWREC.KS-HTS-1ST-SHDG-CD;
      KS0JW00.KS0JW-PERIOD2-ALT = ".";
      KS0JW00.KS0JW-HTS-2ND-SHDGCD1-ALT = KSWREC.KS-HTS-2ND-SHDG-CD[1];
      KS0JW00.KS0JW-DASH-ALT = "-";
      KS0JW00.KS0JW-HTS-2ND-SHDGCD2-ALT = KSWREC.KS-HTS-2ND-SHDG-CD[2];
      KS0JM003.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR-ALT;
    else
      KS0JW00.KS0JW-HTS-NBR = " ";
      KS0JW00.KS0JW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
      KS0JW00.KS0JW-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
      if (KSWREC.KS-HTS-1ST-SHDG-CD > "  ")
        KS0JW00.KS0JW-PERIOD1 = ".";
        KS0JW00.KS0JW-HTS-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
      end
      if (KSWREC.KS-HTS-2ND-SHDG-CD[1] > "  ")
        KS0JW00.KS0JW-PERIOD2 = ".";
        KS0JW00.KS0JW-HTS-2ND-SHDG-CD = KSWREC.KS-HTS-2ND-SHDG-CD[1];
      end
      KS0JM003.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR;
    end
    ;
    KS0JW00.KS0JW-IXM = 1; /* initialize index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* clear detail lines*/
      KS0JM003.KS0JMSEL[KS0JW-IXM] = " ";
      set KS0JM003.KS0JMSEL[KS0JW-IXM] invisible, skip;
      KS0JM003.KS0JM-DTL-HTS-NBR[KS0JW-IXM] = " ";
      KS0JM003.KS0JM-DTL-HTS-DESC[KS0JW-IXM] = " ";
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
    end
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-WSR = "N"; /* Request for data switch*/
  ;
end // end KS0J-31000

// purge temporary storage
Function KS0J-31100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0JW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "31100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-31100

// select set and open cursor
Function KS0J-31300()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSSHD01 empty; /* Clear row storage area*/
  ;
  /* ------------------------------------------------------------*/
  /* Set the keys for the select.*/
  /* ------------------------------------------------------------*/
  ;
  VHSSHD01.KS-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
  VHSSHD01.KS-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
  ;
  try
    call "IO6110" ("S1", SQLCA, VHSSHD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "31300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSSHD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-31300

// fetch next row
Function KS0J-31400()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSSHD01 empty; /* clear work record*/
  ;
  try
    call "IO6110" ("N1", SQLCA, VHSSHD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0JW00.KS0JW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  KS0JW00.KS0JW-SWC = "Y"; /* Indicate end of cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "31400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSSHD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-31400

// save data in display storage
Function KS0J-31500()
  /* ------------------------------------------------------------*/
  /* We need to determine if there is enough room on this*/
  /* page to hold all the description lines in this row.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX1 = 1; /* initialize index*/
  KS0JW00.KS0JW-DESC-CNTR = 0; /* initialize DESC CNTR*/
  ;
  while (KS0JW00.KS0JW-IX1 <= 7)
    if (VHSSHD01.KS-HTS-SHDG-DESC[KS0JW-IX1] > " ") /* something in line?*/
      KS0JW00.KS0JW-DESC-CNTR = KS0JW00.KS0JW-DESC-CNTR + 1; /* count it*/
    end
    KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* set index up by 1*/
  end
  ;
  ;
  /* add desc line cntr to page index*/
  ;
  KS0JW00.KS0JW-DESC-CNTR = KS0JW00.KS0JW-DESC-CNTR + KS0JW00.KS0JW-IX2;
  ;
  if (KS0JW00.KS0JW-DESC-CNTR > 10) /* if it will not fit*/
    KS0J-31600(); /* add page already formatted*/
                                  /* to temp storage*/
    set KS0JW03 empty; /* clear tsq record area*/
    KS0JW00.KS0JW-IX1 = 1; /* reset index*/
    KS0JW00.KS0JW-IX2 = 1; /* reset index*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* At this point, we know that we can fit this row on the page,*/
  /* so save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX1 = 1; /* initialize desc index*/
  ;
  while (KS0JW00.KS0JW-IX1 <= 7 /* for a max of 7 times*/
   && VHSSHD01.KS-HTS-SHDG-DESC[KS0JW-IX1] > " ") /* if data in desc line*/
    if (KS0JW00.KS0JW-IX1 == 1) /* first desc line for this chapter?*/
      KS0JW00.KS0JW-HTS-CPTR-CD = VHSSHD01.KS-HTS-CPTR-CD; /* chapter*/
      KS0JW00.KS0JW-HTS-HDG-CD = VHSSHD01.KS-HTS-HDG-CD; /* heading cd*/
      KS0JW00.KS0JW-PERIOD1 = ".";
      KS0JW00.KS0JW-HTS-1ST-SHDG-CD = VHSSHD01.KS-HTS-1ST-SHDG-CD; /* sub-heading cd*/
      KS0JW00.KS0JW-PERIOD2 = ".";
      KS0JW00.KS0JW-HTS-2ND-SHDG-CD = VHSSHD01.KS-HTS-2ND-SHDG-CD; /* sub-heading cd*/
      KS0JW03.KS0JW-DTL-HTS-NBR[KS0JW-IX2] = KS0JW00.KS0JW-HTS-NBR; /* dtl hts number*/
      ;
      if (KSWREC.XGPCD == "02") /* Check for Selection setup*/
        if (VHSSHD01.KS-HTS-1ST-SHDG-CD == KSWREC.KS-HTS-1ST-SHDG-CD
         && VHSSHD01.KS-HTS-2ND-SHDG-CD
         == KSWREC.KS-HTS-2ND-SHDG-CD[1])
          KS0JW03.KS0JW-SEL[KS0JW-IX2] = "S";
          KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JW00.KS0JW-HTS-NBR;
        end
        if (VHSSHD01.KS-HTS-1ST-SHDG-CD == KSWREC.KS-HTS-1ST-SHDG-CD
         && VHSSHD01.KS-HTS-2ND-SHDG-CD
         == KSWREC.KS-HTS-2ND-SHDG-CD[2])
          KS0JW03.KS0JW-SEL[KS0JW-IX2] = "S";
        end
      end
      ;
    else
      KS0JW03.KS0JW-DTL-HTS-NBR[KS0JW-IX2] = " "; /* dtl hts number*/
    end
    KS0JW03.KS0JW-DTL-DESC[KS0JW-IX2] = VHSSHD01.KS-HTS-SHDG-DESC[KS0JW-IX1]; /* desc line*/
    KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
    KS0JW00.KS0JW-IX2 = KS0JW00.KS0JW-IX2 + 1; /* increment index*/
  end
  ;
  KS0JW00.KS0JW-IX2 = KS0JW00.KS0JW-IX2 + 1; /* increment index to*/
                                  /* to allow for blank line*/
                                  /* between chapters*/
  ;
end // end KS0J-31500

// add page to temp storage
Function KS0J-31600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW03.XXXTSLEN = KS0JW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
     /* build table of chapter nbrs and ts page nbrs;*/
    ;
    KS0JW00.KS0JW-IX1 = 1; /* initialize index*/
    if (TA5REC.TA5TSQIX == 1) /* first page written?*/
      KS0JW00.KS0JW-CPTR-TSQ-PAGE-TBL = " "; /* clear table*/
      KS0JW00.KS0JW-IX3 = 1; /* initialize index*/
    end
    ;
    while (KS0JW00.KS0JW-IX1 <= 10) /* for a max of 10 times*/
      if (KS0JW03.KS0JW-DTL-HTS-NBR[KS0JW-IX1] > " ")
        KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3] = KS0JW03.KS0JW-DTL-HTS-NBR[KS0JW-IX1]; /* save hts nbr*/
        KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3] = TA5REC.TA5TSQIX; /* save page nbr*/
        KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
        KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 + 1; /* increment index*/
      else
        KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
      end
    end
    ;
    if (KS0JW00.KS0JW-IX3 > 100) /* table getting full?*/
      converseLib.validationFailed(84); /* internal table full*/
      KSWREC.XXXPRCNM = "31600"; /* module id*/
    end
    ;
    set KS0JW03 empty; /* M003 display storage*/
    ;
    KS0JW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "31600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-31600

// close selected set
Function KS0J-31700()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6110" ("C1", SQLCA, VHSSHD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "31700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSSHD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-31700

// Format and converse the map
Function KS0J-32000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-WSR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0JW00.KS0JW-SWF == "Y") /* Map must be formatted*/
      ;
      KS0J-32100(); /* format data on map*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
      ;
    else
      ;
      KS0JM003.XXXPRCNM = COMMAREA.CAMSG; /* message text*/
      ;
    end
    ;
    KS0JM003.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0JM003 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0JM003 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
end // end KS0J-32000

// format the display data
Function KS0J-32100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM003 initial; /* M003 input/output area*/
  ;
  KS0JW00.KS0JW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* if we have just come back from map 4 and there is no data*/
  /* to display, set the last selected sub-hdg field to blanks in*/
  /* order by bypass the setting of the cursor routine which reads*/
  /* the TSQ.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.TA5TSQIX == 0) /* no data read ?*/
    KS0JW00.KS0JW-LAST-CHGD-CPTR = " "; /* bypass reading tsq*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If we have just returned from map 4, we need*/
  /* to position the cursor on the last selection.*/
  /* The following code finds the tsq page that the selection is on.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-LAST-CHGD-CPTR > " ") /* just back from change?*/
    KS0JW00.KS0JW-IX3 = 1; /* initialize index*/
    while (KS0JW-IX3 <= 100)
      if (KS0JW00.KS0JW-LAST-CHGD-CPTR < 
      KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3])
        KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 - 1; /* take prev one*/
        if (KS0JW00.KS0JW-IX3 < 1) /* if index < 1*/
          KS0JW00.KS0JW-IX3 = 1; /* set to 1*/
        end
        KS0JW00.XXXTSPAG = KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3]; /* set ts page nbr*/
        KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
        KS0JW00.KS0JW-IX3 = 100; /* quit the search*/
      else
        if (KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3] == " ") /* cptr nbr blank?*/
          KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 - 1; /* take prev one*/
          if (KS0JW00.KS0JW-IX3 < 1) /* if index < 1*/
            KS0JW00.KS0JW-IX3 = 1; /* set to 1*/
          end
          KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
          KS0JW00.XXXTSPAG = KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3]; /* set ts page nbr*/
          KS0JW00.KS0JW-IX3 = 100; /* quit the search*/
        end
      end
      KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 + 1; /* set index up by 1*/
    end
    KS0J-32110(); /* read tsq page*/
    set KS0JM003.XXXLITPG skip; /* "PAGE" literal*/
    KS0JM003.XXXTSPAG = KS0JW00.XXXTSPAG; /* Current page*/
    set KS0JM003.XXXLITOF skip; /* "OF" literal*/
    KS0JM003.TA5TSQIX = KS0JW00.TA5TSQIX; /* Highest page*/
  else
    /* ------------------------------------------------------------*/
    /* If the page in storage is not the page to be displayed,*/
    /* obtain the desired page from temporary storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.TA5TSQIX > 0) /* Pages were formatted*/
      ;
      if (KS0JW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
        ;
        /* ------------------------------------------------------------*/
        /* If the current page has been changed, update the page in*/
        /* storage before obtaining the next one to display.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0JW00.KS0JW-SWU == "Y") /* Current page was changed*/
          ;
          KS0J-32120(); /* Update temporary storage page*/
          ;
          KS0JW00.KS0JW-SWU = "N"; /* Storage update switch*/
          ;
        end
        ;
        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0JW00.XXXTSPAG > KS0JW00.TA5TSQIX) /* Desired greater highest*/
          KS0JW00.XXXTSPAG = KS0JW00.TA5TSQIX; /* Default to highest*/
        end
        ;
        KS0J-32110(); /* Obtain temporary storage page*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/
      ;
      set KS0JM003.XXXLITPG skip; /* "PAGE" literal*/
      KS0JM003.XXXTSPAG = KS0JW00.XXXTSPAG; /* Current page*/
      set KS0JM003.XXXLITOF skip; /* "OF" literal*/
      KS0JM003.TA5TSQIX = KS0JW00.TA5TSQIX; /* Highest page*/
      ;
    else
      ;
      set KS0JM003.XXXLITPG invisible, skip; /* "PAGE" literal*/
      KS0JM003.XXXTSPAG = " "; /* Current page*/
      set KS0JM003.XXXLITOF invisible, skip; /* "OF" literal*/
      KS0JM003.TA5TSQIX = " "; /* Highest page*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.SY1STNBR > " ") /* if present, use it*/
    KS0JM003.KS0JM-STY-NBR = KSWREC.SY1STNBR; /* style number*/
  else
    KS0JM003.KS0JM-STY-NBR = KSWREC.KS-XPRMT-STY-NBR; /* x-style nbr*/
  end
  KS0JM003.KS0JM-COLR-CD-ID = KSWREC.SY2CLRID; /* color cd*/
  KS0JM003.KS0JM-DIM-CD = KSWREC.XDMCD; /* dimension cd*/
  KS0JM003.KS0JM-STY-NM[1] = KSWREC.KS-STY-NM[1]; /* style name 1*/
  KS0JM003.KS0JM-STY-NM[2] = KSWREC.KS-STY-NM[2]; /* style name 2*/
  ;
   /* Format the fabric descriptions differently for gpc's*/
  ;
  if (KSWREC.XGPCD == "02")
    KS0JM003.KS0JM-FABRIC-FIELD = "            MATERIAL INFORMATION";
    KS0JW00.KS0JW-MATERIAL-FIELD = "SHELL  :";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[1];
    KS0JM003.KS0JM-FABRIC-DESC[1] = KS0JW00.KS0JW-MATERIAL-DESC;
    KS0JW00.KS0JW-MATERIAL-FIELD = "OVERLAY:";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[2];
    KS0JM003.KS0JM-FABRIC-DESC[2] = KS0JW00.KS0JW-MATERIAL-DESC;
    KS0JW00.KS0JW-MATERIAL-FIELD = "OUTSOLE:";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[3];
    KS0JM003.KS0JM-FABRIC-DESC[3] = KS0JW00.KS0JW-MATERIAL-DESC;
  else
    KS0JM003.KS0JM-FABRIC-FIELD = "              FABRIC INFORMATION";
    KS0JM003.KS0JM-FABRIC-DESC[1] = KSWREC.KS-TXT[1];
    KS0JM003.KS0JM-FABRIC-DESC[2] = KSWREC.KS-TXT[2];
    KS0JM003.KS0JM-FABRIC-DESC[3] = KSWREC.KS-TXT[3];
  end
  ;
  if (KSWREC.YKS-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD)
    KS0JM003.KS0JM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
  end
  ;
  /* Format the hs number correctly*/
  ;
  if (KSWREC.XGPCD == "02"
   && KSWREC.KS-HTS-2ND-SHDG-CD[2] > "  ")
    KS0JW00.KS0JW-HTS-NBR-ALT = " ";
    KS0JW00.KS0JW-HTS-CPTR-CD-ALT = KSWREC.KS-HTS-CPTR-CD;
    KS0JW00.KS0JW-HTS-HDG-CD-ALT = KSWREC.KS-HTS-HDG-CD;
    KS0JW00.KS0JW-PERIOD1-ALT = ".";
    KS0JW00.KS0JW-HTS-1ST-SHDG-CD-ALT = KSWREC.KS-HTS-1ST-SHDG-CD;
    KS0JW00.KS0JW-PERIOD2-ALT = ".";
    KS0JW00.KS0JW-HTS-2ND-SHDGCD1-ALT = KSWREC.KS-HTS-2ND-SHDG-CD[1];
    KS0JW00.KS0JW-DASH-ALT = "-";
    KS0JW00.KS0JW-HTS-2ND-SHDGCD2-ALT = KSWREC.KS-HTS-2ND-SHDG-CD[2];
    KS0JM003.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR-ALT;
  else
    KS0JW00.KS0JW-HTS-NBR = " ";
    KS0JW00.KS0JW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    KS0JW00.KS0JW-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
    if (KSWREC.KS-HTS-1ST-SHDG-CD > "  ")
      KS0JW00.KS0JW-PERIOD1 = ".";
      KS0JW00.KS0JW-HTS-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
    end
    if (KSWREC.KS-HTS-2ND-SHDG-CD[1] > "  ")
      KS0JW00.KS0JW-PERIOD2 = ".";
      KS0JW00.KS0JW-HTS-2ND-SHDG-CD = KSWREC.KS-HTS-2ND-SHDG-CD[1];
    end
    KS0JM003.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR;
  end
  ;
  KS0JW00.KS0JW-IXM = 1; /* Initialize line index*/
  while (KS0JW00.KS0JW-IXM <= 10) /* Until screen is full*/
    ;
    KS0JM003.KS0JMSEL[KS0JW-IXM] = KS0JW03.KS0JW-SEL[KS0JW-IXM];
    KS0JM003.KS0JM-DTL-HTS-NBR[KS0JW-IXM] = KS0JW03.KS0JW-DTL-HTS-NBR[KS0JW-IXM];
    KS0JM003.KS0JM-DTL-HTS-DESC[KS0JW-IXM] = KS0JW03.KS0JW-DTL-DESC[KS0JW-IXM];
    ;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* the default cursor position is the 1st selection position*/
  /* the routine below may change the cursor position.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM003.KS0JMSEL[1] cursor, normal;
  ;
  /* ------------------------------------------------------------*/
  /* if we're returning from a selection, position the cursor*/
  /* on the heading we just finished with.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* initialize index*/
  ;
  while (KS0JW-IXM <= 10) /* until all lines are processed*/
    if (KS0JM003.KS0JM-DTL-HTS-NBR[KS0JW-IXM] > " ") /* cd present?*/
      if (KS0JW00.KS0JW-LAST-CHGD-CPTR > " ")
        if (KS0JW00.KS0JW-LAST-CHGD-CPTR == 
        KS0JM003.KS0JM-DTL-HTS-NBR[KS0JW-IXM])
          set KS0JM003.KS0JMSEL[KS0JW-IXM] cursor, normal;
        else
          set KS0JM003.KS0JMSEL[KS0JW-IXM] normal;
        end
      else
        set KS0JM003.KS0JMSEL[KS0JW-IXM] normal;
      end
    else
      set KS0JM003.KS0JMSEL[KS0JW-IXM] invisible, skip;
    end
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
  end
  ;
  KS0JW00.KS0JW-LAST-CHGD-CPTR = " "; /* clear last cptr*/
  ;
end // end KS0J-32100

// read tsq page
Function KS0J-32110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW03.XXXTSLEN = KS0JW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0JW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "32110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end KS0J-32110

// update tsq page
Function KS0J-32120()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "32120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end KS0J-32120

// Check attention identifier
Function KS0J-33000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pakey) /* PA2 was pressed*/
    ;
    if (KS0JW00.KS0JW-WSR == "Y") /* Request for data*/
      set KS0JW03 empty; /* M002 display storage*/
    end
    ;
    KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
    KS0JW00.KS0JW-WSR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0JM003"; /* application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
      KS0JW00.KS0JW-WSR = "Y"; /* Request for data switch*/
      KS0JW00.KS0JW-SWD = "2"; /* set map # to display*/
      KS0JW00.KS0JW-HTS-NBR = KS0JM003.KS0JM-HTS-NBR;
      KS0JW00.KS0JW-PERIOD1 = " ";
      KS0JW00.KS0JW-HTS-1ST-SHDG-CD = " ";
      KS0JW00.KS0JW-PERIOD2 = " ";
      KS0JW00.KS0JW-HTS-2ND-SHDG-CD = " ";
      KS0JW00.KS0JW-HTS-STAT-CD = " ";
      KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JW00.KS0JW-HTS-NBR;
      KS0JW00.KS0JW-HTS-HDG-CD = " ";
      exit stack; /* Exit to display map*/
    end
    ;
    KS0J-31100(); /* Purge temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "33000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end KS0J-33000

// Reset highlighted fields
Function KS0J-34000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM003.KS0JM-STY-NBR initialAttributes; /* style number*/
  set KS0JM003.KS0JM-COLR-CD-ID initialAttributes; /* color code*/
  set KS0JM003.KS0JM-DIM-CD initialAttributes; /* dimension code*/
  set KS0JM003.KS0JM-STY-NM[1] initialAttributes; /* style name 1*/
  set KS0JM003.KS0JM-STY-NM[2] initialAttributes; /* style name 2*/
  set KS0JM003.KS0JM-FABRIC-DESC[1] initialAttributes; /* fabric desc 1*/
  set KS0JM003.KS0JM-FABRIC-DESC[2] initialAttributes; /* fabric desc 2*/
  set KS0JM003.KS0JM-FABRIC-DESC[3] initialAttributes; /* fabric desc 3*/
  set KS0JM003.KS0JM-STY-TYP-DESC initialAttributes; /* style type desc*/
  set KS0JM003.KS0JM-HTS-NBR initialAttributes; /* HTS number*/
  ;
   /* the attributes for the detail lines are also set in ks0j-12100*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* set index to 1*/
  while (KS0JW00.KS0JW-IXM <= 10) /* for all detail lines*/
    if (KS0JM003.KS0JM-DTL-HTS-NBR[KS0JW-IXM] > " ")
      set KS0JM003.KS0JMSEL[KS0JW-IXM] normal;
    else
      set KS0JM003.KS0JMSEL[KS0JW-IXM] invisible, skip;
    end
    set KS0JM003.KS0JM-DTL-HTS-NBR[KS0JW-IXM] initialAttributes;
    set KS0JM003.KS0JM-DTL-HTS-DESC[KS0JW-IXM] initialAttributes;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
  end
  ;
end // end KS0J-34000

// Verify data that was entered
Function KS0J-35000()
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    KS0J-35100(); /* verify scroll request*/
    ;
  else
    ;
    KS0J-35200(); /* verify data in line*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any error was found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end KS0J-35000

// verify scroll request
Function KS0J-35100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0JW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    KSWREC.XXXPRCNM = "35100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0JW00.XXXTSPAG >= KS0JW00.TA5TSQIX) /* and no more pages*/
    ;
    KSWREC.XXXPRCNM = "35100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate an error for any data that was modified.*/
  /* ** Selections are allowed for gpc 02 with scroll request.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XGPCD == "02")
   /* continue on*/
  else
    ;
    KS0JW00.KS0JW-IXM = 10; /* Initialize line index*/
    while (KS0JW00.KS0JW-IXM > 0) /* Until end of lines*/
      ;
      if (KS0JM003.KS0JMSEL[KS0JW-IXM] != KS0JW03.KS0JW-SEL[KS0JW-IXM])
        KSWREC.XXXPRCNM = "35100"; /* Module identification*/
        set KS0JM003.KS0JMSEL[KS0JW-IXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(14); /* Field may not change*/
      end
      ;
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM - 1; /* Decrement line number*/
      ;
    end
    ;
  end
  ;
  ;
end // end KS0J-35100

// verify data in the line
Function KS0J-35200()
  /* ------------------------------------------------------------*/
  /* If selection was entered and is not a "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 10; /* set index*/
  ;
  while (KS0JW00.KS0JW-IXM >= 1)
    if (KS0JM003.KS0JMSEL[KS0JW-IXM] != KS0JW03.KS0JW-SEL[KS0JW-IXM]
     && KS0JM003.KS0JMSEL[KS0JW-IXM] != "S" /* and is not a "S"*/
     && KS0JM003.KS0JMSEL[KS0JW-IXM] != " ") /* and is not a " "*/
      ;
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0JM003.KS0JMSEL[KS0JW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" may be entered*/
      ;
    end
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM - 1; /* decrement index*/
  end
  ;
end // end KS0J-35200

// Process valid input request
Function KS0J-36000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    KS0JW00.KS0JW-IXM = 1; /* reset index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
      ;
      if (KS0JM003.KS0JMSEL[KS0JW-IXM] != KS0JW03.KS0JW-SEL[KS0JW-IXM])
        KS0JW03.KS0JW-SEL[KS0JW-IXM] = KS0JM003.KS0JMSEL[KS0JW-IXM]; /* save the field*/
        KS0JW00.KS0JW-SWU = "Y"; /* ind upd of temp storage*/
      end
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
      ;
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    KS0JW00.KS0JW-IXM = 1; /* reset index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
      ;
      if (KS0JM003.KS0JMSEL[KS0JW-IXM] != KS0JW03.KS0JW-SEL[KS0JW-IXM])
        KS0JW03.KS0JW-SEL[KS0JW-IXM] = KS0JM003.KS0JMSEL[KS0JW-IXM]; /* save the field*/
        KS0JW00.KS0JW-SWU = "Y"; /* ind upd of temp storage*/
      end
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
      ;
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* if enter was pressed and a selection was made, move that key*/
  /* to kswrec and display map #4.*/
  /*  */
  /* if enter was pressed and a selection was not made, display*/
  /* msg #43.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* enter pressed?*/
    ;
    KS0JW00.KS0JW-NEXT-SEL-CPTR = " "; /* clear next selected field*/
    ;
    KS0J-36100(); /* Process selections*/
    ;
    if (KS0JW00.KS0JW-NEXT-SEL-CPTR == " ") /* if none were selected*/
      converseLib.validationFailed(43); /* set error msg nbr*/
      KSWREC.XXXPRCNM = "36000"; /* module id*/
      KS0JW00.KS0JW-WSR = "N"; /* do not request data*/
      KS0JW00.KS0JW-SWF = "N"; /* do not format map*/
      KS0JW00.KS0JW-SWD = "3"; /* Map to be displayed switch*/
      return; /* return*/
    end
    ;
    KS0JW00.KS0JW-WSR = "Y"; /* do request data*/
    KS0JW00.KS0JW-SWF = "Y"; /* do format map*/
    KS0JW00.KS0JW-SWD = "4"; /* Map to be displayed switch*/
    ;
  end
  ;
  if (converseVar.eventKey is pf20) /* F20 pressed?*/
    ;
    KS0J-36200(); /* Process selections*/
    ;
    KS0J-31100(); /* clear temp storage*/
    ;
    COMMAREA.CATOAP = "KS0I"; /* set destination application*/
    ;
    XSKS-S0001(); /* exit to another application*/
    ;
    exit stack;
    ;
  end
  ;
end // end KS0J-36000

// Process Selection for ENTER
Function KS0J-36100()
  /* ----------------------------------------------------------*/
  /* Read thru each temp storage page to determine selections*/
  /* ----------------------------------------------------------*/
  ;
  KSWREC.KS-HTS-2ND-SHDG-CD[1] = "  "; /* Make sure 2nd shdg codes*/
  KSWREC.KS-HTS-2ND-SHDG-CD[2] = "  "; /* are empty.*/
  ;
  KSWREC.KS-HTS-STAT-CD = "  "; /* Make sure stat is empty*/
  ;
  KS0JW00.XXXTSPAG = 1; /* reset current page*/
  while (KS0JW00.XXXTSPAG <= KS0JW00.TA5TSQIX) /* until end of pages*/
    ;
    if (KS0JW00.XXXTSPAG == KS0JM003.XXXTSPAG) /* If current page*/
      ;
      KS0JW00.KS0JW-IXM = 1; /* reset index*/
      while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
        ;
        if (KS0JM003.KS0JMSEL[KS0JW-IXM] == "S") /* this line selected?*/
          ;
          if (KS0JW-NEXT-SEL-CPTR == " ") /* Only save first found*/
            KS0JW00.KS0JW-NEXT-SEL-CPTR = KS0JM003.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* save selection*/
          end
          ;
          KS0JW00.KS0JW-HTS-NBR = KS0JM003.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* move to work area*/
          KSWREC.KS-HTS-CPTR-CD = KS0JW00.KS0JW-HTS-CPTR-CD;
          KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-HTS-HDG-CD;
          KSWREC.KS-HTS-1ST-SHDG-CD = KS0JW00.KS0JW-HTS-1ST-SHDG-CD;
          ;
          if (KSWREC.KS-HTS-2ND-SHDG-CD[1] == "  ") /* If 2nd(1) is empty*/
            KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
          else
            KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
          end
          ;
        end
        KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increm line index*/
      end
      ;
    else
      KS0J-32110(); /* Obtain Temp Storage Page*/
      ;
      KS0JW00.KS0JW-IXM = 1; /* reset index*/
      while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
        ;
        if (KS0JW03.KS0JW-SEL[KS0JW-IXM] == "S") /* this line selected?*/
          ;
          if (KS0JW-NEXT-SEL-CPTR == " ") /* Only save first found*/
            KS0JW00.KS0JW-NEXT-SEL-CPTR = KS0JW03.KS0JW-DTL-HTS-NBR[KS0JW-IXM]; /* save selection*/
          end
          ;
          KS0JW00.KS0JW-HTS-NBR = KS0JW03.KS0JW-DTL-HTS-NBR[KS0JW-IXM]; /* move to work area*/
          KSWREC.KS-HTS-CPTR-CD = KS0JW00.KS0JW-HTS-CPTR-CD;
          KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-HTS-HDG-CD;
          KSWREC.KS-HTS-1ST-SHDG-CD = KS0JW00.KS0JW-HTS-1ST-SHDG-CD;
          ;
          if (KSWREC.KS-HTS-2ND-SHDG-CD[1] == "  ") /* If 2nd(1) is empty*/
            KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
          else
            KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
          end
          ;
        end
        KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increm line index*/
      end
      ;
    end
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG + 1; /* Increm page index*/
    ;
  end
  ;
  ;
end // end KS0J-36100

// Process Selections for PF20
Function KS0J-36200()
  /* ----------------------------------------------------------*/
  /* Read thru each temp storage page to determine selections*/
  /* ----------------------------------------------------------*/
  ;
  KSWREC.KS-HTS-2ND-SHDG-CD[1] = "  "; /* Make sure 2nd shdg codes*/
  KSWREC.KS-HTS-2ND-SHDG-CD[2] = "  "; /* are empty.*/
  ;
  KSWREC.KS-HTS-STAT-CD = "  "; /* Make sure stat is empty*/
  ;
  KS0JW00.XXXTSPAG = 1; /* reset current page*/
  while (KS0JW00.XXXTSPAG <= KS0JW00.TA5TSQIX) /* until end of pages*/
    ;
    if (KS0JW00.XXXTSPAG == KS0JM003.XXXTSPAG) /* If current page*/
      ;
      KS0JW00.KS0JW-IXM = 1; /* reset index*/
      while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
        ;
        if (KS0JM003.KS0JMSEL[KS0JW-IXM] == "S") /* this line selected?*/
          ;
          KS0JW00.KS0JW-HTS-NBR = KS0JM003.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* move to work area*/
          KSWREC.KS-HTS-CPTR-CD = KS0JW00.KS0JW-HTS-CPTR-CD;
          KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-HTS-HDG-CD;
          KSWREC.KS-HTS-1ST-SHDG-CD = KS0JW00.KS0JW-HTS-1ST-SHDG-CD;
          ;
          if (KSWREC.KS-HTS-2ND-SHDG-CD[1] == "  ") /* If 2nd(1) is empty*/
            KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
          else
            KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
          end
          ;
        end
        KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
        ;
      end
      ;
    else
      KS0J-32110(); /* Obtain Temp Storage Page*/
      ;
      KS0JW00.KS0JW-IXM = 1; /* reset index*/
      while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
        ;
        if (KS0JW03.KS0JW-SEL[KS0JW-IXM] == "S") /* this line selected?*/
          ;
          KS0JW00.KS0JW-HTS-NBR = KS0JW03.KS0JW-DTL-HTS-NBR[KS0JW-IXM]; /* move to work area*/
          KSWREC.KS-HTS-CPTR-CD = KS0JW00.KS0JW-HTS-CPTR-CD;
          KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-HTS-HDG-CD;
          KSWREC.KS-HTS-1ST-SHDG-CD = KS0JW00.KS0JW-HTS-1ST-SHDG-CD;
          ;
          if (KSWREC.KS-HTS-2ND-SHDG-CD[1] == "  ") /* If 2nd(1) is empty*/
            KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
          else
            KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
          end
          ;
        end
        KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
        ;
      end
      ;
    end
    ;
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG + 1; /* Increm page index*/
    ;
  end
  ;
  ;
end // end KS0J-36200

// Main process to display a map
Function KS0J-40000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-41000(); /* Obtain the data to display*/
  ;
  KS0J-42000(); /* Format and display the map*/
  ;
  KS0J-43000(); /* Check attention identifier*/
  ;
  KS0J-44000(); /* Reset fields to normal intensity*/
  ;
  KS0J-45000(); /* Verify the data that was entered*/
  ;
  KS0J-46000(); /* Process valid input request*/
  ;
end // end KS0J-40000

// Obtain the data to display
Function KS0J-41000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-WSR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO == 0) /* No message to display*/
    KS0JW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-41100(); /* Purge any temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* clear map 4 working storage*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JW04 empty; /* clear map 4 working storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-41300(); /* Select set and open cursor*/
  ;
  if (converseVar.validationMsgNum != 0) /* any errors ?*/
    return; /* return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX2 = 1; /* set screen line index*/
  KS0JW00.KS0JW-IXM = 1; /* Display line index*/
  KS0JW00.KS0JW-SWC = "N"; /* End of cursor switch*/
  ;
  while (KS0JW00.KS0JW-SWC == "N") /* Until end of cursor*/
    ;
    KS0J-41400(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.KS0JW-SWC == "N") /* Not end of cursor*/
      KS0J-41500(); /* Save data in display storage*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0JW00.KS0JW-IX2 >= 10) /* Page is full*/
      ;
      KS0J-41600(); /* Add page to temporary storage*/
      ;
      KS0JW00.KS0JW-IX2 = 1; /* Display line index*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-IX2 > 1) /* Page was formatted*/
    KS0J-41600(); /* Add page to temporary storage*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  KS0J-41700(); /* Close the selected set cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.TA5TSQIX == 0) /* No pages formatted*/
    KSWREC.XXXPRCNM = "41000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    KS0JW00.KS0JW-SWF = "N"; /* do not format the map*/
    set KS0JM004.XXXLITPG invisible, skip; /* "PAGE" literal*/
    KS0JM004.XXXTSPAG = " "; /* current page*/
    set KS0JM004.XXXLITOF invisible, skip; /* "OF" literal*/
    KS0JM004.TA5TSQIX = " "; /* highest page*/
    if (KSWREC.SY1STNBR > " ") /* if present, use it*/
      KS0JM004.KS0JM-STY-NBR = KSWREC.SY1STNBR; /* style nbr*/
    else
      KS0JM004.KS0JM-STY-NBR = KSWREC.KS-XPRMT-STY-NBR;
    end
    KS0JM004.KS0JM-COLR-CD-ID = KSWREC.SY2CLRID;
    KS0JM004.KS0JM-DIM-CD = KSWREC.XDMCD;
    KS0JM004.KS0JM-STY-NM[1] = KSWREC.KS-STY-NM[1];
    KS0JM004.KS0JM-STY-NM[2] = KSWREC.KS-STY-NM[2];
    ;
   /* Format the fabric descriptions differently for gpc's*/
    ;
    if (KSWREC.XGPCD == "02")
      KS0JM004.KS0JM-FABRIC-FIELD = "            MATERIAL INFORMATION";
      KS0JW00.KS0JW-MATERIAL-FIELD = "SHELL  :";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[1];
      KS0JM004.KS0JM-FABRIC-DESC[1] = KS0JW00.KS0JW-MATERIAL-DESC;
      KS0JW00.KS0JW-MATERIAL-FIELD = "OVERLAY:";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[2];
      KS0JM004.KS0JM-FABRIC-DESC[2] = KS0JW00.KS0JW-MATERIAL-DESC;
      KS0JW00.KS0JW-MATERIAL-FIELD = "OUTSOLE:";
      KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[3];
      KS0JM004.KS0JM-FABRIC-DESC[3] = KS0JW00.KS0JW-MATERIAL-DESC;
    else
      KS0JM004.KS0JM-FABRIC-FIELD = "              FABRIC INFORMATION";
      KS0JM004.KS0JM-FABRIC-DESC[1] = KSWREC.KS-TXT[1];
      KS0JM004.KS0JM-FABRIC-DESC[2] = KSWREC.KS-TXT[2];
      KS0JM004.KS0JM-FABRIC-DESC[3] = KSWREC.KS-TXT[3];
    end
    ;
    if (KSWREC.YKS-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD)
      KS0JM004.KS0JM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
    end
    ;
   /* Format the hs number correctly*/
    ;
    if (KSWREC.XGPCD == "02"
     && KSWREC.KS-HTS-2ND-SHDG-CD[2] > "  ")
      KS0JW00.KS0JW-HTS-NBR-ALT = " ";
      KS0JW00.KS0JW-HTS-CPTR-CD-ALT = KSWREC.KS-HTS-CPTR-CD;
      KS0JW00.KS0JW-HTS-HDG-CD-ALT = KSWREC.KS-HTS-HDG-CD;
      KS0JW00.KS0JW-PERIOD1-ALT = ".";
      KS0JW00.KS0JW-HTS-1ST-SHDG-CD-ALT = KSWREC.KS-HTS-1ST-SHDG-CD;
      KS0JW00.KS0JW-PERIOD2-ALT = ".";
      KS0JW00.KS0JW-HTS-2ND-SHDGCD1-ALT = KSWREC.KS-HTS-2ND-SHDG-CD[1];
      KS0JW00.KS0JW-DASH-ALT = "-";
      KS0JW00.KS0JW-HTS-2ND-SHDGCD2-ALT = KSWREC.KS-HTS-2ND-SHDG-CD[2];
      KS0JM004.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR-ALT;
    else
      KS0JW00.KS0JW-HTS-NBR = " ";
      KS0JW00.KS0JW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
      KS0JW00.KS0JW-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
      KS0JW00.KS0JW-PERIOD1 = ".";
      KS0JW00.KS0JW-HTS-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
      KS0JW00.KS0JW-PERIOD2 = ".";
      KS0JW00.KS0JW-HTS-2ND-SHDG-CD = KSWREC.KS-HTS-2ND-SHDG-CD[1];
      KS0JW00.KS0JW-HTS-STAT-CD = KSWREC.KS-HTS-STAT-CD;
      KS0JM004.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR;
    end
    ;
    ;
    KS0JW00.KS0JW-IXM = 1; /* initialize index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* clear detail lines*/
      KS0JM004.KS0JMSEL[KS0JW-IXM] = " ";
      set KS0JM004.KS0JMSEL[KS0JW-IXM] invisible, skip;
      KS0JM004.KS0JM-DTL-HTS-NBR[KS0JW-IXM] = " ";
      KS0JM004.KS0JM-DTL-HTS-DESC[KS0JW-IXM] = " ";
      KS0JM004.KS0JM-DTL-QOTA-CD[KS0JW-IXM] = " ";
      KS0JM004.KS0JM-DTL-GEN-DTY-RATE[KS0JW-IXM] = " ";
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
    end
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-WSR = "N"; /* Request for data switch*/
  ;
end // end KS0J-41000

// purge temporary storage
Function KS0J-41100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0JW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "41100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M004"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-41100

// select set and open cursor
Function KS0J-41300()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSNBR01 empty;
  ;
  /* ------------------------------------------------------------*/
  /* Set the chapter nbr/hdg/shdg for the select.*/
  /* ------------------------------------------------------------*/
  ;
  VHSNBR01.KS-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
  VHSNBR01.KS-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KSWREC.KS-HTS-2ND-SHDG-CD[1];
  ;
  try
    call "IO6120" ("S1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "41300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-41300

// fetch next row
Function KS0J-41400()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSNBR01 empty; /* clear work record*/
  ;
  try
    call "IO6120" ("N1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0JW00.KS0JW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  KS0JW00.KS0JW-SWC = "Y"; /* Indicate end of cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "41400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-41400

// save data in display storage
Function KS0J-41500()
  /* -------------------------------------------------------------*/
  /* move data to display storage.*/
  /* -------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IX1 = 1; /* Initialize index*/
  KS0JW00.KS0JW-DESC-CNTR = 0; /* Initialize desc counter*/
  ;
  while (KS0JW00.KS0JW-IX1 <= 3)
    if (VHSNBR01.KS-HTS-STAT-DESC[KS0JW-IX1] > " ") /* Desc exists*/
      KS0JW00.KS0JW-DESC-CNTR = KS0JW00.KS0JW-DESC-CNTR + 1; /* Count line*/
    end
    KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* Increment index*/
  end
  ;
  KS0JW00.KS0JW-DESC-CNTR = KS0JW00.KS0JW-DESC-CNTR + KS0JW00.KS0JW-IX2;
  ;
  if (KS0JW00.KS0JW-DESC-CNTR > 10) /* If it will not fit*/
    KS0J-41600(); /* Add page to temp storage*/
    ;
    set KS0JW04 empty; /* clear tsq record area*/
    KS0JW00.KS0JW-IX1 = 1; /* reset index*/
    KS0JW00.KS0JW-IX2 = 1; /* reset index*/
  end
  ;
  KS0JW00.KS0JW-IX1 = 1; /* Initialize desc index*/
  ;
  while (KS0JW00.KS0JW-IX1 <= 3
   && VHSNBR01.KS-HTS-STAT-DESC[KS0JW-IX1] > " ") /* If data in desc*/
    if (KS0JW00.KS0JW-IX1 == 1) /* If first desc line*/
      KS0JW00.KS0JW-HTS-CPTR-CD = VHSNBR01.KS-HTS-CPTR-CD;
      KS0JW00.KS0JW-HTS-HDG-CD = VHSNBR01.KS-HTS-HDG-CD;
      KS0JW00.KS0JW-PERIOD1 = ".";
      KS0JW00.KS0JW-HTS-1ST-SHDG-CD = VHSNBR01.KS-HTS-1ST-SHDG-CD;
      KS0JW00.KS0JW-PERIOD2 = ".";
      KS0JW00.KS0JW-HTS-2ND-SHDG-CD = VHSNBR01.KS-HTS-2ND-SHDG-CD;
      KS0JW00.KS0JW-HTS-STAT-CD = VHSNBR01.KS-HTS-STAT-CD;
      KS0JW04.KS0JW-DTL-HTS-NBR[KS0JW-IX2] = KS0JW00.KS0JW-HTS-NBR;
      KS0JW04.KS0JW-DTL-DESC[KS0JW-IX2] = VHSNBR01.KS-HTS-STAT-DESC[1]; /* status description*/
      KS0JW04.KS0JW-DTL-QOTA-CD[KS0JW-IX2] = VHSNBR01.YQT-QOTA-CAT-CD;
      KS0JW00.KS0JW-GEN-DTY-RATE = VHSNBR01.KS-GEN-DTY-RATE;
      KS0JW00.KS0JW-GEN-DTY-UNT = VHSNBR01.KS-GEN-DTY-UNT;
      KS0JW00.KS0JW-GEN-UOM-ABRV = VHSNBR01.KS-GEN-UOM-ABRV;
      KS0J-41510();
      KS0JW04.KS0JW-DTL-GEN-DTY-RATE[KS0JW-IX2] = KS0JW00.KS0JW-FORMATTED-RATE;
    else
      KS0JW04.KS0JW-DTL-HTS-NBR[KS0JW-IX2] = " "; /* HS number*/
      KS0JW04.KS0JW-DTL-QOTA-CD[KS0JW-IX2] = " "; /* Quota category cd*/
      KS0JW04.KS0JW-DTL-GEN-DTY-RATE[KS0JW-IX2] = " "; /* General dty*/
    end
    ;
    KS0JW04.KS0JW-DTL-DESC[KS0JW-IX2] = VHSNBR01.KS-HTS-STAT-DESC[KS0JW-IX1]; /* status description*/
    KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
    KS0JW00.KS0JW-IX2 = KS0JW00.KS0JW-IX2 + 1; /* increment index*/
  end
  ;
  KS0JW00.KS0JW-IX2 = KS0JW00.KS0JW-IX2 + 1; /* allows for double spacing*/
  ;
end // end KS0J-41500

// format general duty rate
Function KS0J-41510()
  /* ----------------------------------------------------------------------*/
  /* this routine moves the general duty rate, general duty unit and*/
  /* general duty uom abrv to a formatted field suitable for viewing.*/
  /* ----------------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-FORMATTED-RATE = " "; /* spaces to result field*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* initialize index*/
  ;
  if (KS0JW00.KS0JW-GEN-DTY-RATE == 0 /* if both rate & unit are zeros*/
   && KS0JW00.KS0JW-GEN-DTY-UNT == 0)
    return; /* return to previous process*/
  end
  ;
  if (KS0JW00.KS0JW-GEN-DTY-RATE > 0) /* if rate > zeros*/
    if (KS0JW00.KS0JW-RATE-BYTE[1] > "0") /* if 1st byte > zero*/
      KS0JW00.KS0JW-FORMAT-BYTE[1] = KS0JW00.KS0JW-RATE-BYTE[1]; /* move in 1st two bytes*/
      KS0JW00.KS0JW-FORMAT-BYTE[2] = KS0JW00.KS0JW-RATE-BYTE[2];
      KS0JW00.KS0JW-IXM = 3;
    else
      KS0JW00.KS0JW-FORMAT-BYTE[1] = KS0JW00.KS0JW-RATE-BYTE[2];
      KS0JW00.KS0JW-IXM = 2;
    end
    if (KS0JW00.KS0JW-RATE-BYTE[3] == "0" /* if 3rd byte = zero*/
     && KS0JW00.KS0JW-RATE-BYTE[4] == "0" /* & 4th byte = zero*/
     && KS0JW00.KS0JW-RATE-BYTE[5] == "0") /* & 5th byte = zero*/
       /* next sentence*/
    else
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = ".";
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-RATE-BYTE[3]; /* move in 3rd byte*/
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
      if (KS0JW00.KS0JW-RATE-BYTE[5] > "0")
        KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-RATE-BYTE[4]; /* move in 4th byte*/
        KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
        KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-RATE-BYTE[5]; /* move in 5th byte*/
        KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
      else
        if (KS0JW00.KS0JW-RATE-BYTE[4] > "0")
          KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-RATE-BYTE[4]; /* move in 4th byte*/
          KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
        end
      end
    end
    KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = "%";
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
    if (KS0JW00.KS0JW-GEN-DTY-UNT > 0) /* something in unit ?*/
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = " ";
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = "+";
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = " ";
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
    end
  end
  if (KS0JW00.KS0JW-GEN-DTY-UNT > 0) /* something in unit ?*/
    KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = "$";
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
    if (KS0JW00.KS0JW-UNIT-BYTE[1] > "0") /* if 1st byte > zero*/
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UNIT-BYTE[1]; /* move in 1st two bytes*/
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UNIT-BYTE[2];
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
    else
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UNIT-BYTE[2];
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
    end
    if (KS0JW00.KS0JW-UNIT-BYTE[3] == "0" /* if 3rd byte = zero*/
     && KS0JW00.KS0JW-UNIT-BYTE[4] == "0" /* & 4th byte = zero*/
     && KS0JW00.KS0JW-UNIT-BYTE[5] == "0") /* & 5th byte = zero*/
       /* next sentence*/
    else
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = ".";
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
      KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UNIT-BYTE[3]; /* move in 3rd byte*/
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
      if (KS0JW00.KS0JW-UNIT-BYTE[5] > "0")
        KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UNIT-BYTE[4]; /* move in 4th byte*/
        KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
        KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UNIT-BYTE[5]; /* move in 5th byte*/
        KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
      else
        if (KS0JW00.KS0JW-UNIT-BYTE[4] > "0")
          KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UNIT-BYTE[4]; /* move in 4th byte*/
          KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
        end
      end
    end
    KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = "/";
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
    KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UOM-BYTE[1];
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
    KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UOM-BYTE[2];
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1;
    KS0JW00.KS0JW-FORMAT-BYTE[KS0JW-IXM] = KS0JW00.KS0JW-UOM-BYTE[3];
  end
  ;
end // end KS0J-41510

// add page to temp storage
Function KS0J-41600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW04.XXXTSLEN = KS0JW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
     /* build table of hts nbrs and ts page nbrs;*/
    ;
    KS0JW00.KS0JW-IX1 = 1; /* initialize index*/
    if (TA5REC.TA5TSQIX == 1) /* first page written?*/
      KS0JW00.KS0JW-CPTR-TSQ-PAGE-TBL = " "; /* clear table*/
      KS0JW00.KS0JW-IX3 = 1; /* initialize index*/
    end
    ;
    while (KS0JW00.KS0JW-IX1 <= 10) /* for a max of 10 times*/
      if (KS0JW04.KS0JW-DTL-HTS-NBR[KS0JW-IX1] > " ")
        KS0JW00.KS0JW-CPTR-CD[KS0JW-IX3] = KS0JW04.KS0JW-DTL-HTS-NBR[KS0JW-IX1]; /* save hts nbr*/
        KS0JW00.KS0JW-TS-PAGE-NBR[KS0JW-IX3] = TA5REC.TA5TSQIX; /* save page nbr*/
        KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
        KS0JW00.KS0JW-IX3 = KS0JW00.KS0JW-IX3 + 1; /* increment index*/
      else
        KS0JW00.KS0JW-IX1 = KS0JW00.KS0JW-IX1 + 1; /* increment index*/
      end
    end
    ;
    if (KS0JW00.KS0JW-IX3 > 100) /* table getting full?*/
      converseLib.validationFailed(84); /* internal table full*/
    end
    ;
    set KS0JW04 empty; /* M004 display storage*/
    ;
    KS0JW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "41600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M004"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-41600

// close selected set
Function KS0J-41700()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6120" ("C1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "41700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0J-41700

// Format and converse the map
Function KS0J-42000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.KS0JW-WSR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0JW00.KS0JW-SWF == "Y") /* Map must be formatted*/
      ;
      KS0J-42100(); /* format data on map*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
      ;
    else
      ;
      KS0JM004.XXXPRCNM = COMMAREA.CAMSG; /* message text*/
      ;
    end
    ;
    KS0JM004.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0JM004 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0JM004 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
end // end KS0J-42000

// format the display data
Function KS0J-42100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM004 initial; /* M004 input/output area*/
  ;
  KS0JW00.KS0JW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If the page in storage is not the page to be displayed,*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0JW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (KS0JW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (KS0JW00.KS0JW-SWU == "Y") /* Current page was changed*/
        ;
        KS0J-42120(); /* Update temporary storage page*/
        ;
        KS0JW00.KS0JW-SWU = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (KS0JW00.XXXTSPAG > KS0JW00.TA5TSQIX) /* Desired greater highest*/
        KS0JW00.XXXTSPAG = KS0JW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      KS0J-42110(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0JM004.XXXLITPG skip; /* "PAGE" literal*/
    KS0JM004.XXXTSPAG = KS0JW00.XXXTSPAG; /* Current page*/
    set KS0JM004.XXXLITOF skip; /* "OF" literal*/
    KS0JM004.TA5TSQIX = KS0JW00.TA5TSQIX; /* Highest page*/
    ;
  else
    ;
    set KS0JM004.XXXLITPG invisible, skip; /* "PAGE" literal*/
    KS0JM004.XXXTSPAG = " "; /* Current page*/
    set KS0JM004.XXXLITOF invisible, skip; /* "OF" literal*/
    KS0JM004.TA5TSQIX = " "; /* Highest page*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.SY1STNBR > " ") /* style number*/
    KS0JM004.KS0JM-STY-NBR = KSWREC.SY1STNBR; /* style number*/
  else
    KS0JM004.KS0JM-STY-NBR = KSWREC.KS-XPRMT-STY-NBR; /* x-style nbr*/
  end
  KS0JM004.KS0JM-COLR-CD-ID = KSWREC.SY2CLRID; /* color cd*/
  KS0JM004.KS0JM-DIM-CD = KSWREC.XDMCD; /* dimension cd*/
  KS0JM004.KS0JM-STY-NM[1] = KSWREC.KS-STY-NM[1]; /* style name 1*/
  KS0JM004.KS0JM-STY-NM[2] = KSWREC.KS-STY-NM[2]; /* style name 2*/
  ;
   /* Format the fabric descriptions differently for gpc's*/
  ;
  if (KSWREC.XGPCD == "02")
    KS0JM004.KS0JM-FABRIC-FIELD = "            MATERIAL INFORMATION";
    KS0JW00.KS0JW-MATERIAL-FIELD = "SHELL  :";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[1];
    KS0JM004.KS0JM-FABRIC-DESC[1] = KS0JW00.KS0JW-MATERIAL-DESC;
    KS0JW00.KS0JW-MATERIAL-FIELD = "OVERLAY:";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[2];
    KS0JM004.KS0JM-FABRIC-DESC[2] = KS0JW00.KS0JW-MATERIAL-DESC;
    KS0JW00.KS0JW-MATERIAL-FIELD = "OUTSOLE:";
    KS0JW00.KS0JW-MATERIAL-CONTENT = KSWREC.KS-TXT[3];
    KS0JM004.KS0JM-FABRIC-DESC[3] = KS0JW00.KS0JW-MATERIAL-DESC;
  else
    KS0JM004.KS0JM-FABRIC-FIELD = "              FABRIC INFORMATION";
    KS0JM004.KS0JM-FABRIC-DESC[1] = KSWREC.KS-TXT[1];
    KS0JM004.KS0JM-FABRIC-DESC[2] = KSWREC.KS-TXT[2];
    KS0JM004.KS0JM-FABRIC-DESC[3] = KSWREC.KS-TXT[3];
  end
  ;
  if (KSWREC.YKS-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD)
    KS0JM004.KS0JM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
  end
  ;
  /* Format the hs number correctly*/
  ;
  if (KSWREC.XGPCD == "02"
   && KSWREC.KS-HTS-2ND-SHDG-CD[2] > "  ")
    KS0JW00.KS0JW-HTS-NBR-ALT = " ";
    KS0JW00.KS0JW-HTS-CPTR-CD-ALT = KSWREC.KS-HTS-CPTR-CD;
    KS0JW00.KS0JW-HTS-HDG-CD-ALT = KSWREC.KS-HTS-HDG-CD;
    KS0JW00.KS0JW-PERIOD1-ALT = ".";
    KS0JW00.KS0JW-HTS-1ST-SHDG-CD-ALT = KSWREC.KS-HTS-1ST-SHDG-CD;
    KS0JW00.KS0JW-PERIOD2-ALT = ".";
    KS0JW00.KS0JW-HTS-2ND-SHDGCD1-ALT = KSWREC.KS-HTS-2ND-SHDG-CD[1];
    KS0JW00.KS0JW-DASH-ALT = "-";
    KS0JW00.KS0JW-HTS-2ND-SHDGCD2-ALT = KSWREC.KS-HTS-2ND-SHDG-CD[2];
    KS0JM004.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR-ALT;
  else
    KS0JW00.KS0JW-HTS-NBR = " ";
    KS0JW00.KS0JW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    KS0JW00.KS0JW-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
    KS0JW00.KS0JW-PERIOD1 = ".";
    KS0JW00.KS0JW-HTS-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
    KS0JW00.KS0JW-PERIOD2 = ".";
    KS0JW00.KS0JW-HTS-2ND-SHDG-CD = KSWREC.KS-HTS-2ND-SHDG-CD[1];
    KS0JW00.KS0JW-HTS-STAT-CD = KSWREC.KS-HTS-STAT-CD;
    KS0JM004.KS0JM-HTS-NBR = KS0JW00.KS0JW-HTS-NBR;
  end
  ;
  ;
  KS0JW00.KS0JW-IXM = 1; /* Initialize line index*/
  while (KS0JW00.KS0JW-IXM <= 10) /* Until screen is full*/
    ;
    KS0JM004.KS0JM-DTL-HTS-NBR[KS0JW-IXM] = KS0JW04.KS0JW-DTL-HTS-NBR[KS0JW-IXM];
    KS0JM004.KS0JM-DTL-HTS-DESC[KS0JW-IXM] = KS0JW04.KS0JW-DTL-DESC[KS0JW-IXM];
    KS0JM004.KS0JM-DTL-QOTA-CD[KS0JW-IXM] = KS0JW04.KS0JW-DTL-QOTA-CD[KS0JW-IXM];
    KS0JM004.KS0JM-DTL-GEN-DTY-RATE[KS0JW-IXM] = KS0JW04.KS0JW-DTL-GEN-DTY-RATE[KS0JW-IXM];
    ;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* the default cursor position is the 1st selection position*/
  /* the routine below may change the cursor position.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM004.KS0JMSEL[1] cursor, normal;
  ;
  /* ------------------------------------------------------------*/
  /* If we're returning from a selection, position the cursor*/
  /* on the heading we just finished with.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* initialize index*/
  ;
  while (KS0JW-IXM <= 10) /* until all lines are processed*/
    if (KS0JM004.KS0JM-DTL-HTS-NBR[KS0JW-IXM] > " ") /* cd present?*/
      if (KS0JW00.KS0JW-LAST-CHGD-CPTR > " ")
        if (KS0JW00.KS0JW-LAST-CHGD-CPTR == 
        KS0JM004.KS0JM-DTL-HTS-NBR[KS0JW-IXM])
          set KS0JM004.KS0JMSEL[KS0JW-IXM] cursor, normal;
        else
          set KS0JM004.KS0JMSEL[KS0JW-IXM] normal;
        end
      else
        set KS0JM004.KS0JMSEL[KS0JW-IXM] normal;
      end
    else
      set KS0JM004.KS0JMSEL[KS0JW-IXM] invisible, skip;
    end
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
  end
  ;
  KS0JW00.KS0JW-LAST-CHGD-CPTR = " "; /* clear last cptr*/
  ;
end // end KS0J-42100

// read tsq page
Function KS0J-42110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW04.XXXTSLEN = KS0JW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0JW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "42110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M004"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end KS0J-42110

// update tsq page
Function KS0J-42120()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0JW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "42120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M004"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end KS0J-42120

// Check attention identifier
Function KS0J-43000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pakey) /* PA2 was pressed*/
    ;
    if (KS0JW00.KS0JW-WSR == "Y") /* Request for data*/
      set KS0JW04 empty; /* M004 display storage*/
    end
    ;
    KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
    KS0JW00.KS0JW-WSR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0JM004"; /* application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
      KS0JW00.KS0JW-WSR = "Y"; /* Request for data switch*/
      KS0JW00.KS0JW-SWD = "3"; /* set map # to display*/
      KS0JW00.KS0JW-LAST-CHGD-CPTR = KS0JM004.KS0JM-HTS-NBR;
      if (KSWREC.XGPCD == "02"
       && KSWREC.KS-HTS-2ND-SHDG-CD[2] > "  ")
           /* continue on*/
      else
        if (KSWREC.XGPCD == "02")
          KS0JW00.KS0JW-HTS-NBR = KS0JM004.KS0JM-HTS-NBR;
        else
          KS0JW00.KS0JW-HTS-NBR = KS0JM004.KS0JM-HTS-NBR;
          KS0JW00.KS0JW-PERIOD1 = " ";
          KS0JW00.KS0JW-HTS-1ST-SHDG-CD = " ";
          KS0JW00.KS0JW-PERIOD2 = " ";
          KS0JW00.KS0JW-HTS-2ND-SHDG-CD = " ";
        end
      end
      exit stack; /* Exit to display map*/
    end
    ;
    KS0J-41100(); /* Purge temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "43000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end KS0J-43000

// Reset highlighted fields
Function KS0J-44000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0JM004.KS0JM-STY-NBR initialAttributes; /* style number*/
  set KS0JM004.KS0JM-COLR-CD-ID initialAttributes; /* color code*/
  set KS0JM004.KS0JM-DIM-CD initialAttributes; /* dimension code*/
  set KS0JM004.KS0JM-STY-NM[1] initialAttributes; /* style name 1*/
  set KS0JM004.KS0JM-STY-NM[2] initialAttributes; /* style name 2*/
  set KS0JM004.KS0JM-FABRIC-DESC[1] initialAttributes; /* fabric desc 1*/
  set KS0JM004.KS0JM-FABRIC-DESC[2] initialAttributes; /* fabric desc 2*/
  set KS0JM004.KS0JM-FABRIC-DESC[3] initialAttributes; /* fabric desc 3*/
  set KS0JM004.KS0JM-STY-TYP-DESC initialAttributes; /* style type desc*/
  set KS0JM004.KS0JM-HTS-NBR initialAttributes; /* HTS number*/
  ;
   /* the attributes for the detail lines are also set in ks0j-12100*/
  ;
  KS0JW00.KS0JW-IXM = 1; /* set index to 1*/
  while (KS0JW00.KS0JW-IXM <= 10) /* for all detail lines*/
    if (KS0JM004.KS0JM-DTL-HTS-NBR[KS0JW-IXM] > " ")
      set KS0JM004.KS0JMSEL[KS0JW-IXM] normal;
    else
      set KS0JM004.KS0JMSEL[KS0JW-IXM] invisible, skip;
    end
    set KS0JM004.KS0JM-DTL-HTS-NBR[KS0JW-IXM] initialAttributes;
    set KS0JM004.KS0JM-DTL-HTS-DESC[KS0JW-IXM] initialAttributes;
    set KS0JM004.KS0JM-DTL-QOTA-CD[KS0JW-IXM] initialAttributes;
    set KS0JM004.KS0JM-DTL-GEN-DTY-RATE[KS0JW-IXM] initialAttributes;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* set index up by 1*/
  end
  ;
end // end KS0J-44000

// Verify data that was entered
Function KS0J-45000()
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    KS0J-45100(); /* verify scroll request*/
    ;
  else
    ;
    KS0J-45200(); /* verify data in line*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any error was found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end KS0J-45000

// verify scroll request
Function KS0J-45100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0JW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    KSWREC.XXXPRCNM = "45100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0JW00.XXXTSPAG >= KS0JW00.TA5TSQIX) /* and no more pages*/
    ;
    KSWREC.XXXPRCNM = "45100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate an error for any data that was modified.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 10; /* Initialize line index*/
  ;
  while (KS0JW00.KS0JW-IXM > 0) /* Until end of lines*/
    ;
    if (KS0JM004.KS0JMSEL[KS0JW-IXM] != KS0JW04.KS0JW-SEL[KS0JW-IXM])
      ;
      KSWREC.XXXPRCNM = "45100"; /* Module identification*/
      set KS0JM004.KS0JMSEL[KS0JW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/
      ;
    end
    ;
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM - 1; /* Decrement line number*/
    ;
  end
  ;
end // end KS0J-45100

// verify data in the line
Function KS0J-45200()
  /* ------------------------------------------------------------*/
  /* If selection was entered and is not a "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-IXM = 10; /* set index*/
  ;
  while (KS0JW00.KS0JW-IXM >= 1)
    if (KS0JM004.KS0JMSEL[KS0JW-IXM] != KS0JW04.KS0JW-SEL[KS0JW-IXM]
     && KS0JM004.KS0JMSEL[KS0JW-IXM] != "S" /* and is not a "S"*/
     && KS0JM004.KS0JMSEL[KS0JW-IXM] != " ") /* and is not a " "*/
      ;
      KSWREC.XXXPRCNM = "45200"; /* Module identification*/
      set KS0JM004.KS0JMSEL[KS0JW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" may be entered*/
      ;
    end
    KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM - 1; /* decrement index*/
  end
  ;
end // end KS0J-45200

// Process valid input request
Function KS0J-46000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0JW00.KS0JW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    KS0JW00.XXXTSPAG = KS0JW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* if enter was pressed and a selection was made, move that key*/
  /* to kswrec and xfer to KS0I.*/
  /*  */
  /* if enter was pressed and a selection was not made, display*/
  /* msg #43.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* enter pressed?*/
    ;
    KS0JW00.KS0JW-NEXT-SEL-CPTR = " "; /* clear next selected field*/
    ;
    KS0JW00.KS0JW-IXM = 1; /* reset index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
      ;
      if (KS0JM004.KS0JMSEL[KS0JW-IXM] == "S") /* this line selected?*/
        KS0JW00.KS0JW-NEXT-SEL-CPTR = KS0JM004.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* save selection*/
        KS0JW00.KS0JW-HTS-NBR = KS0JM004.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* move to redefine*/
        KSWREC.KSW-HTS-NBR = "  "; /* move to pass record*/
        KSWREC.KS-HTS-CPTR-CD = KS0JW00.KS0JW-HTS-CPTR-CD;
        KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-HTS-HDG-CD;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0JW00.KS0JW-HTS-1ST-SHDG-CD;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
        KSWREC.KS-HTS-STAT-CD = KS0JW00.KS0JW-HTS-STAT-CD;
        KS0JW00.KS0JW-IXM = 11; /* end loop*/
      end
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
      ;
    end
    ;
    if (KS0JW00.KS0JW-NEXT-SEL-CPTR == " ") /* if none were selected*/
      converseLib.validationFailed(43); /* set error msg nbr*/
      KSWREC.XXXPRCNM = "46000"; /* module id*/
      KS0JW00.KS0JW-WSR = "N"; /* do not request data*/
      KS0JW00.KS0JW-SWF = "N"; /* do not format map*/
      KS0JW00.KS0JW-SWD = "4"; /* Map to be displayed switch*/
      return; /* return*/
    end
    ;
    KS0J-41100(); /* clear temp storage*/
    ;
    COMMAREA.CATOAP = "KS0I"; /* set destination application*/
    ;
    XSKS-S0001(); /* exit to another application*/
    ;
    exit stack;
    ;
  end
  ;
  if (converseVar.eventKey is pf20) /* F20 pressed?*/
    ;
    KS0JW00.KS0JW-IXM = 1; /* reset index*/
    while (KS0JW00.KS0JW-IXM <= 10) /* Until end of lines*/
      ;
      if (KS0JM004.KS0JMSEL[KS0JW-IXM] == "S") /* this line selected?*/
        KS0JW00.KS0JW-HTS-NBR = KS0JM004.KS0JM-DTL-HTS-NBR[KS0JW-IXM]; /* move to redefine*/
        KSWREC.KSW-HTS-NBR = "  "; /* move to pass record*/
        KSWREC.KS-HTS-CPTR-CD = KS0JW00.KS0JW-HTS-CPTR-CD;
        KSWREC.KS-HTS-HDG-CD = KS0JW00.KS0JW-HTS-HDG-CD;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0JW00.KS0JW-HTS-1ST-SHDG-CD;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0JW00.KS0JW-HTS-2ND-SHDG-CD;
        KSWREC.KS-HTS-STAT-CD = KS0JW00.KS0JW-HTS-STAT-CD;
        KS0JW00.KS0JW-IXM = 11; /* end loop*/
      end
      KS0JW00.KS0JW-IXM = KS0JW00.KS0JW-IXM + 1; /* Increment line index*/
      ;
    end
    ;
    KS0J-41100(); /* clear temp storage*/
    ;
    COMMAREA.CATOAP = "KS0I"; /* set destination application*/
    ;
    XSKS-S0001(); /* exit to another application*/
    ;
    exit stack;
    ;
  end
  ;
end // end KS0J-46000

//*** RECORD=KS0JW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0JW00 type basicRecord
  10 KS0JW-IXM KS0JW-IXM ; 
  10 KS0JW-IX1 KS0JW-IX1 ; 
  10 KS0JW-IX2 KS0JW-IX2 ; 
  10 KS0JW-IX3 KS0JW-IX3 ; 
  10 KS0JW-DESC-CNTR KS0JW-DESC-CNTR ; 
  10 KS0JW-STAT KS0JW-STAT ; 
  10 KS0JW-DATA-CHGD-SW KS0JW-DATA-CHGD-SW ; 
  10 KS0JW-SAVE-CHG-CNT KS0JW-SAVE-CHG-CNT ; 
  10 KS0JW-SAVE-ADD-CNT KS0JW-SAVE-ADD-CNT ; 
  10 KS0JW-NEXT-SEL-CPTR KS0JW-NEXT-SEL-CPTR ; 
  10 KS0JW-LAST-CHGD-CPTR KS0JW-LAST-CHGD-CPTR ; 
  10 KS0JW-1ST-DISPLAYED-MAP KS0JW-1ST-DISPLAYED-MAP ; 
  10 KS0JW-LINE KS0JW-LINE [7] ; 
  10 KS0JW-SWC KS0JW-SWC ; 
  10 KS0JW-SWD KS0JW-SWD ; 
  10 KS0JW-SWF KS0JW-SWF ; 
  10 KS0JW-WSR KS0JW-WSR ; 
  10 KS0JW-SWU KS0JW-SWU ; 
  10 KS0JW-FNC KS0JW-FNC ; 
  10 KS0JW-FND KS0JW-FND ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KS0JW-HTS-NUMBER KS0JW-HTS-NUMBER ; 
    15 KS0JW-HTS-BYTE KS0JW-HTS-BYTE [14] ; 
  10 * char(1) ; 
  10 KS0JW-MATERIAL-DESC KS0JW-MATERIAL-DESC ; 
    15 KS0JW-MATERIAL-FIELD KS0JW-MATERIAL-FIELD ; 
    15 KS0JW-MATERIAL-CONTENT KS0JW-MATERIAL-CONTENT ; 
  10 * char(1) ; 
  10 KS0JW-HTS-NBR KS0JW-HTS-NBR ; 
    15 KS0JW-HTS-CPTR-CD KS0JW-HTS-CPTR-CD ; 
    15 KS0JW-HTS-HDG-CD KS0JW-HTS-HDG-CD ; 
    15 KS0JW-PERIOD1 char(1) ; // period for formatting
    15 KS0JW-HTS-1ST-SHDG-CD KS0JW-HTS-1ST-SHDG-CD ; 
    15 KS0JW-PERIOD2 char(1) ; // period for formatting
    15 KS0JW-HTS-2ND-SHDG-CD KS0JW-HTS-2ND-SHDG-CD ; 
    15 KS0JW-HTS-STAT-CD KS0JW-HTS-STAT-CD ; 
    15 * char(1) ; // period for formatting
    15 * char(1) ; // suffix
  10 * char(3) ; 
  10 KS0JW-HTS-NBR-ALT KS0JW-HTS-NBR-ALT ; 
    15 KS0JW-HTS-CPTR-CD-ALT KS0JW-HTS-CPTR-CD-ALT ; 
    15 KS0JW-HTS-HDG-CD-ALT KS0JW-HTS-HDG-CD-ALT ; 
    15 KS0JW-PERIOD1-ALT char(1) ; // period for formatting
    15 KS0JW-HTS-1ST-SHDG-CD-ALT KS0JW-HTS-1ST-SHDG-CD-ALT ; 
    15 KS0JW-PERIOD2-ALT char(1) ; // period for formatting
    15 KS0JW-HTS-2ND-SHDGCD1-ALT KS0JW-HTS-2ND-SHDGCD1-ALT ; 
    15 KS0JW-DASH-ALT char(1) ; // dash for formatting
    15 KS0JW-HTS-2ND-SHDGCD2-ALT KS0JW-HTS-2ND-SHDGCD2-ALT ; 
  10 * char(1) ; 
  10 KS0JW-SELECTED-CPTRS KS0JW-SELECTED-CPTRS [15] ; 
  10 KS0JW-SEL-INDEX KS0JW-SEL-INDEX ; 
  10 KS0JW-CPTR-TSQ-PAGE-TBL KS0JW-CPTR-TSQ-PAGE-TBL ; 
    15 KS0JW-CPTR-CD KS0JW-CPTR-CD [100] ; 
    15 KS0JW-TS-PAGE-NBR KS0JW-TS-PAGE-NBR [100] ; 
  10 KS0JW-GEN-DTY-RATE KS0JW-GEN-DTY-RATE ; 
    15 KS0JW-RATE-BYTE KS0JW-RATE-BYTE [5] ; 
  10 KS0JW-GEN-DTY-UNT KS0JW-GEN-DTY-UNT ; 
    15 KS0JW-UNIT-BYTE KS0JW-UNIT-BYTE [5] ; 
  10 KS0JW-GEN-UOM-ABRV KS0JW-GEN-UOM-ABRV ; 
    15 KS0JW-UOM-BYTE KS0JW-UOM-BYTE [3] ; 
  10 KS0JW-FORMATTED-RATE KS0JW-FORMATTED-RATE ; 
    15 KS0JW-FORMAT-BYTE KS0JW-FORMAT-BYTE [21] ; 
  10 KS0JW-SAVE-HTS-NBR KS0JW-SAVE-HTS-NBR ; 
    15 KS0JW-SAVE-CPTR-CD KS0JW-SAVE-CPTR-CD ; 
    15 KS0JW-SAVE-HDG-CD KS0JW-SAVE-HDG-CD ; 
    15 KS0JW-SAVE-1ST-SHDG-CD KS0JW-SAVE-1ST-SHDG-CD ; 
    15 KS0JW-SAVE-2ND-SHDG-CD KS0JW-SAVE-2ND-SHDG-CD [2] ; 
    15 KS0JW-SAVE-STAT-CD KS0JW-SAVE-STAT-CD ; 
end // end KS0JW00

//*** RECORD=KS0JW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record KS0JW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(840) ; 
    10 KS0JW-SEL KS0JW-SEL [10] ; 
    10 KS0JW-DTL-HTS-NBR KS0JW-DTL-HTS-NBR [10] ; 
    10 KS0JW-DTL-DESC KS0JW-DTL-DESC [10] ; 
    10 * char(240) ; 
end // end KS0JW01

//*** RECORD=KS0JW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record KS0JW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(840) ; 
    10 KS0JW-SEL KS0JW-SEL [10] ; 
    10 KS0JW-DTL-HTS-NBR KS0JW-DTL-HTS-NBR [10] ; 
    10 KS0JW-DTL-DESC KS0JW-DTL-DESC [10] ; 
    10 * char(240) ; 
end // end KS0JW02

//*** RECORD=KS0JW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record KS0JW03 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(840) ; 
    10 KS0JW-SEL KS0JW-SEL [10] ; 
    10 KS0JW-DTL-HTS-NBR KS0JW-DTL-HTS-NBR [10] ; 
    10 KS0JW-DTL-DESC KS0JW-DTL-DESC [10] ; 
    10 * char(240) ; 
end // end KS0JW03

//*** RECORD=KS0JW04 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record KS0JW04 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(880) ; 
    10 KS0JW-SEL KS0JW-SEL [10] ; 
    10 KS0JW-DTL-HTS-NBR KS0JW-DTL-HTS-NBR [10] ; 
    10 KS0JW-DTL-DESC KS0JW-DTL-DESC [10] ; 
    10 KS0JW-DTL-QOTA-CD KS0JW-DTL-QOTA-CD [10] ; 
    10 KS0JW-DTL-GEN-DTY-RATE KS0JW-DTL-GEN-DTY-RATE [10] ; 
end // end KS0JW04

// first displayed map
DataItem KS0JW-1ST-DISPLAYED-MAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter number
DataItem KS0JW-CPTR-CD char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter/tsq page table
DataItem KS0JW-CPTR-TSQ-PAGE-TBL char(1800)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data changed switch
DataItem KS0JW-DATA-CHGD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// description line counter
DataItem KS0JW-DESC-CNTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// h.s. chapter description
DataItem KS0JW-DTL-DESC char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0JW-DTL-GEN-DTY-RATE char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line chapter cd
DataItem KS0JW-DTL-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0JW-DTL-QOTA-CD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function switch
DataItem KS0JW-FNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found switch
DataItem KS0JW-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each byte of formatted-field
DataItem KS0JW-FORMAT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted gen duty rate
DataItem KS0JW-FORMATTED-RATE char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general duty rate
DataItem KS0JW-GEN-DTY-RATE num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general duty unit
DataItem KS0JW-GEN-DTY-UNT num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general duty uom abrv
DataItem KS0JW-GEN-UOM-ABRV char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 1
DataItem KS0JW-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 1
DataItem KS0JW-HTS-1ST-SHDG-CD-ALT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 2
DataItem KS0JW-HTS-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 2 (1)
DataItem KS0JW-HTS-2ND-SHDGCD1-ALT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub-heading part 2(2)
DataItem KS0JW-HTS-2ND-SHDGCD2-ALT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number table
DataItem KS0JW-HTS-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter number
DataItem KS0JW-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter number
DataItem KS0JW-HTS-CPTR-CD-ALT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter heading
DataItem KS0JW-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter heading
DataItem KS0JW-HTS-HDG-CD-ALT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number
DataItem KS0JW-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number
DataItem KS0JW-HTS-NBR-ALT char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number
DataItem KS0JW-HTS-NUMBER char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status
DataItem KS0JW-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for description lines
DataItem KS0JW-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for descr lines in tsq
DataItem KS0JW-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for cptr/tsq page table
DataItem KS0JW-IX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0JW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// last changed chapter
DataItem KS0JW-LAST-CHGD-CPTR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map m002 screen line work area
DataItem KS0JW-LINE char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Material description content
DataItem KS0JW-MATERIAL-CONTENT char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Material description
DataItem KS0JW-MATERIAL-DESC char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Material description field
DataItem KS0JW-MATERIAL-FIELD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next selected chapter nbr
DataItem KS0JW-NEXT-SEL-CPTR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each byte of gen dty rate fld
DataItem KS0JW-RATE-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 1
DataItem KS0JW-SAVE-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 2
DataItem KS0JW-SAVE-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save add count
DataItem KS0JW-SAVE-ADD-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save change count
DataItem KS0JW-SAVE-CHG-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// chapter number
DataItem KS0JW-SAVE-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter heading
DataItem KS0JW-SAVE-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number
DataItem KS0JW-SAVE-HTS-NBR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status
DataItem KS0JW-SAVE-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection character
DataItem KS0JW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save index for changes
DataItem KS0JW-SEL-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// chapters selected for changes
DataItem KS0JW-SELECTED-CPTRS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s.heading status
DataItem KS0JW-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KS0JW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem KS0JW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KS0JW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0JW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temporary storage page
DataItem KS0JW-TS-PAGE-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// each byte of gen dty unit fld
DataItem KS0JW-UNIT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each byte of unit of measure
DataItem KS0JW-UOM-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0JW-WSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

