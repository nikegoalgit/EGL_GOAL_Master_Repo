package ks0n;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPKS-00001;
import corpcom4.XSKS-S0001;
import corpcom4.XSPF4;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import ks.common.*;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import ts.common.TSWREC;
import vv.common.VKSFNT01;
import vv.common.VKSORD01;
//*** PROGRAM=KS0N ****
// This programm will display the CVS customs update and
// Maintains tables.  KSORD01 and KSFNT01 table
// are read and the data to be displayed is stored
// in Tempory Storage, one display page contains 28 records.
// The user may scroll forward and backward to view these
// pages.
// 
// The user may change the detail information
// for a HTS nbr by entering the information on a new line
// to add a new HTS nbrs or change a existing number.
// Footnote must be enter first using the pf17 key to access
// the footnote update screen
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 02/27/95   slewis   New application.
// 08/21/96   eraymo   restructure to closer fit business
// 09/10/96   eraymo   made minor fixes in process logic
// 09/12/96   eraymo   fixed to not error on HS subset/superset
//                     if footnote is different.  Also stand-
//                     ardized pfkey defs to Customs.
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  11/13/97 WSQUIR Y2K MODIFICATIONS MADE TO XPKS-00001
//                         KS0N-26155, KS0N-26160, KS0N-26180,
//                         KS0N-26195, KS0N-36110 & KS0N-36130.
// *********************
Program KS0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KS0NW00 KS0NW00; // record
  KS0NW01 KS0NW01; // record
  KS0NW02 KS0NW02; // record
  KS0NW03 KS0NW03; // record
  KS0NW04 KS0NW04; // record
  KSAREC KSAREC; // record
  KSWREC KSWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TSWREC TSWREC; // record
  VKSFNT01 VKSFNT01; // record
  VKSORD01 VKSORD01; // record
  XP0IW01 XP0IW01; // record
  XP0IW02 XP0IW02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KS0NM.KS0NM001,  // forms
      KS0NM.KS0NM002, 
      KS0NM.XP0IM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    set KS0NW00 empty; /* Initialize working storage*/
    set KS0NW01 empty; /* Initialize working storage*/
    set KS0NW02 empty; /* Initialize temporary storage*/
    set KSAREC empty; /* Initialize record storage*/
    set KSWREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set TAEREC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set XP0IW01 empty;
    set XP0IW02 empty;
    set KS0NM001 initial; /* Initialize map1 output area*/
     /* ET KS0NM002 CLEAR;               /* Initialize map2 output area*/
    ;
    /*  */
    /* *************************** Y2K OUT BEGIN ******************************/
    /*  */
    /* MOVE 19 TO KS0NW01.KS0NWCEN;     /* Initialize century*/
    /*  */
    /* *************************** Y2K OUT END ********************************/
    /*  */
    KS0NW00.KS0NW-MAP = "1"; /* Indicate map to be displayed*/
    KS0NW00.KS0NW-FUNCTION = "I"; /* indicate initial function*/
    KS0NW01.KS0NWSWR = "Y"; /* Indicate request for data*/
    KS0NW01.KS0NWSW1 = "Y"; /* Indicate request for data*/
    KS0NW01.KS0NWPSW = "N"; /* Initialize problem switch*/
    KS0NW00.KS0NW-SAVE-PER1 = ".";
    KS0NW00.KS0NW-SAVE-PER2 = ".";
    ;
    if (COMMAREA.CAITEM != " ") /* If fast path item entered*/
      ;
      KS0NW01.KS0NWDSK = COMMAREA.CAITEM; /* Initalize search key*/
      ;
    end
    ;
    COMMAREA.CAITEM = " "; /* Clear common area item*/
    ;
    goto KS0N-00001; /* Converse Location Inquiry/Main.*/
    ;
    ;
    KS0N-00001: KS0N-00001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Counter-veiling Duty process.*/
     /* ------------------------------------------------------------*/
    ;
    goto KS0N-00001; /* Converse CVD Inquiry/Main.*/
    ;
    ;
  end // end main
end // end KS0N

// Cvs Inquiry/Maintenance
Function KS0N-00001()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display maps.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) As specified, display the first map for inquiry or add OR*/
  /* 2) display the second map in inquiry or change mode OR*/
  /* 3) display the third map in inquiry or change mode.*/
  /* 4) Otherwise, indicate error and exit to Master Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0NW00.KS0NW-MAP == "1" /* Map 1 was requested*/
   && KS0NW00.KS0NW-FUNCTION == "I") /* with inquiry function*/
    KS0N-10000(); /* Display map 1- no detail*/
  else
    if (KS0NW00.KS0NW-MAP == "1" /* Map 1 was requested*/
     && KS0NW00.KS0NW-FUNCTION == "A") /* add a new order #*/
      KS0N-10000(); /* Display map 1 in full, upd*/
    else
      if (KS0NW00.KS0NW-MAP == "2" /* Map 1 was requested*/
       && KS0NW00.KS0NW-FUNCTION == "I") /* with inquiry function*/
        KS0N-20000(); /* Display map 1 - with detail*/
      else
        if (KS0NW00.KS0NW-MAP == "2" /* Map 1 was requested*/
         && KS0NW00.KS0NW-FUNCTION == "U") /* with update function*/
          KS0N-20000(); /* Display map 1, w/detail, upd*/
        else
          if (KS0NW00.KS0NW-MAP == "3" /* footnote map requested*/
           && KS0NW00.KS0NW-FUNCTION == "I") /* with inquiry function*/
            KS0N-30000(); /* Display FOOT NOTES Map*/
          else
            if (KS0NW00.KS0NW-MAP == "3" /* footnote map requested*/
             && KS0NW00.KS0NW-FUNCTION == "U") /* with update function*/
              KS0N-30000();
            else
              ;
              TA1REC.TA1TYPE = "APPL"; /* Type of error*/
              TA1REC.TA1FUNC = "RETN"; /* Termination function*/
              TA1REC.TA1PGMNM = "KS0N001 "; /* Process name*/
              TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
              TA1REC.TA1MAP = KS0NW00.KS0NW-MAP; /* Map name*/
              SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
              ;
              call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
              ;
              XSPF4(); /* Exit to Master Menu*/
              ;
            end
          end
        end
      end
    end
    ;
  end
  ;
end // end KS0N-00001

// CVS Inquiry/Maint. Map
Function KS0N-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display the inquiry map.*/
   /* Processing always returns to the top of this process and*/
   /* falls through to subordinate processes until an error is*/
   /* found or a valid request is processed. Sequence is as*/
   /* follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  KS0N-11000(); /* Obtain the data to display*/
  ;
  KS0N-12000(); /* Format and display the map*/
  ;
  KS0N-13000(); /* Check attention identifier*/
  ;
  KS0N-14000(); /* Reset fields to normal intensity*/
  ;
  KS0N-15000(); /* Verify the entered data*/
  ;
  KS0N-16000(); /* Process valid input request*/
  ;
  ;
end // end KS0N-10000

// Obtain the data to display
Function KS0N-11000()
   /* ------------------------------------------------------------*/
   /*  */
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/
  KS0NW01.KS0NWIXM = 1;
  while (KS0NW01.KS0NWIXM <= 28)
    set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] protect, noHighLight;
    set KS0NM001.KS0NM-KS-STATUS[KS0NWIXM] protect, noHighLight;
    set KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] protect, noHighLight;
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1;
  end
  ;
  KS0N-11100(); /* Purge any temporary storage*/
  ;
  ;
  ;
  ;
end // end KS0N-11000

// Purge any temporary storage
Function KS0N-11100()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = "KS0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  call "TA0050" (KS0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "KS0N111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  KS0NW01.KS0NWTSP = 0; /* Reset current page number*/
  KS0NW01.TA5TSQIX = 0; /* Reset highest page number*/
  ;
  ;
end // end KS0N-11100

// Format and display the map
Function KS0N-12000()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || converseVar.validationMsgNum == 6) /* or fastpath error*/
    set KS0NM001 initial; /* Clear map output area*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* error message to display*/
    set KS0NM001 alarm; /* Indicate sound alarm*/
  end
  ;
  if (KS0NW00.KS0NW-MSG-FL == "Y") /* If update message to display*/
    converseLib.validationFailed(44);
    KS0NM001.XXXPRCNM = "12000"; /* Process name*/
    KS0NW00.KS0NW-MSG-FL = "N"; /* Reset message flag*/
  end
  ;
  KS0N-12010(); /* format fields*/
  ;
  converse KS0NM001 ;
  ;
  ;
end // end KS0N-12000

// Format cvd map
Function KS0N-12010()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* hide detail lines.*/
   /* move appropriate screen type to screen header based on*/
   /* function.  indicate whether popup is available for order*/
   /* number field.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  KS0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  if (KS0NW00.KS0NW-FUNCTION == "A")
    KS0NM001.KS0NM-SCREEN = "ADD SCREEN";
    KS0NM001.KS0NM-POPUP-IND = ":";
    set KS0NM001.KS0NM-ADD invisible;
  else
    KS0NM001.KS0NM-SCREEN = " ";
    KS0NM001.KS0NM-POPUP-IND = ";";
  end
  ;
  KS0NW01.KS0NWIXM = 1;
  /* VE KS0NW00.KS0NW-CUST-ORDER-NBR TO KS0NW01.KS0NW-CUST-ORDER-NBR;*/
  /* VE KS0NW00.KS0NW-CUST-ORDER-NBR TO KS0NM001.KS0NM-CUST-ORDER-NBR;*/
  while (KS0NW01.KS0NWIXM <= 28)
    set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] skip, noHighLight;
    set KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] skip, noHighLight;
    set KS0NM001.KS0NM-KS-STATUS[KS0NWIXM] skip, noHighLight;
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1;
  end
  ;
  set KS0NM001.KS0NM-FOOTNOTES invisible;
  set KS0NM001.KS0NM-UPDATE invisible;
  set KS0NM001.KS0NM-DIRECTIVE-STATUS skip, noHighLight;
  ;
end // end KS0N-12010

// Check attention identifier
Function KS0N-13000()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set KS0NM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (KS0NM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      KS0N-11100(); /* Purge temporary storage*/
      COMMAREA.CATOAP = KS0NM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = KS0NM001.CAITEM; /* Application data*/
      XSKS-S0001(); /* Exit to another application*/
      KS0NW01.KS0NWSWR = "Y"; /* Set request for data switch*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set KS0NM001.CATOAP cursor, modified, bold; /* Highlight*/
    KS0NM001.XXXPRCNM = "13000"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    if (KS0NW00.KS0NW-MAP == "1")
      COMMAREA.CATOAP = "KS0A"; /* Set to customs menu*/
      COMMAREA.CAITEM = " "; /* Clear item area*/
    else
      KS0NW00.KS0NW-MAP = "1"; /* get ready to display map 1*/
      KS0NW00.KS0NW-FUNCTION = "I"; /* in inquiry mode*/
      exit stack;
    end
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    /* GET FIX*/
    ;
    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "KS0NM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end
    ;
    KS0N-11100(); /* Purge any temporary storage*/
    XSKS-S0001(); /* Exit to another application*/
    KS0NM001.XXXPRCNM = "13000"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    return;
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/
    ;
    KS0NM001.XXXPRCNM = "13000"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  else
    if (converseVar.eventKey is pf13) /* add order nbr*/
      if (COMMAREA.CAADDFL == "N") /* and user add not authorized*/
        KS0NM001.XXXPRCNM = "13000"; /* Process name*/
        converseLib.validationFailed(4); /* Indicate invalid attention key*/
        exit stack; /* Exit to redisplay map*/
      else
        KS0NW00.KS0NW-LAST-MAP = KS0NW00.KS0NW-MAP;
        KS0NW00.KS0NW-LAST-FUNCTION = KS0NW00.KS0NW-FUNCTION;
        KS0NW00.KS0NW-MAP = "1";
        KS0NW00.KS0NW-FUNCTION = "A";
        exit stack; /* Exit to redisplay map*/
      end
    end
  end
  ;
end // end KS0N-13000

// Reset highlighted fields
Function KS0N-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0NM001.KS0NM-CUST-ORDER-NBR initialAttributes; /* customs order nbr*/
  ;
  ;
end // end KS0N-14000

// Verify the entered data
Function KS0N-15000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (KS0NM001.CAITEM > " ") /* Application data was entered*/
    set KS0NM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    KS0NM001.XXXPRCNM = "KS0N150"; /* Process name*/
  end
  ;
  if (KS0NW00.KS0NW-FUNCTION == "A" /* add function*/
   && KS0NW00.KS0NW-MAP == "1")    
    KS0N-15100(); /* verify any changed data*/
  else
    KS0N-15200(); /* verify any changed data*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
end // end KS0N-15000

// validate new ord nbr
Function KS0N-15100()
  /* *******************************************************************/
  /* Validate entered order number.  If it is blank or already       */
  /* exists, redisplay map with highlighted field and appropriate    */
  /* message.                                                        */
  /* *******************************************************************/
  ;
  if (KS0NM001.KS0NM-CUST-ORDER-NBR == "   ")
    KS0NM001.XXXPRCNM = "15100"; /* Process name*/
    converseLib.validationFailed(146); /* Indicate blank field*/
    return; /* Return to previous process*/
  end
  ;
  ;
  KS0N-21200(); /* select set*/
  KS0N-15110(); /* fetch a row,if end of set,*/
                                /* nbr can be added, else indicate*/
                                /* entered nbr already exists*/
  KS0N-21500(); /* close set*/
  return; /* main process*/
  ;
end // end KS0N-15100

// Fetch next row
Function KS0N-15110()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  call "VKSORD01" ("N1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    return; /* go on to process valid request*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found from fetch*/
      KS0NM001.XXXPRCNM = "15110"; /* Process name*/
      converseLib.validationFailed(145); /* existing nbr - cannot add*/
      set KS0NM001.KS0NM-CUST-ORDER-NBR white, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      KS0NW01.KS0NWSWP = "Y"; /* Indicate problem*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "15110"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      KS0NM001.XXXPRCNM = "15110"; /* Process name*/
      ;
    end
  end
  ;
  return;
end // end KS0N-15110

// Verify any changed data
Function KS0N-15200()
  /* ***********************************************************/
  /* Validate the order nbr entered.  Valid entries are      */
  /* blank, '?', or an existing order nbr.                   */
  /* ***********************************************************/
  if (KS0NM001.KS0NM-CUST-ORDER-NBR == "?"
   || KS0NM001.KS0NM-CUST-ORDER-NBR == " ")
    return;
  else
    KS0N-21200(); /* select order nbr set*/
    KS0N-15210(); /* fetch row*/
                                   /* if found, continue*/
                                   /* else indicate*/
                                   /* ord nbr not found*/
    KS0N-21500(); /* close order nbr set*/
  end
  ;
  return;
  ;
end // end KS0N-15200

// Fetch next row
Function KS0N-15210()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  call "VKSORD01" ("N1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    KS0NM001.XXXPRCNM = "KS0N-15210"; /* Process name*/
    converseLib.validationFailed(147); /* entered nbr doesn't exist*/
    set KS0NM001.KS0NM-CUST-ORDER-NBR bold, white;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found from fetch*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      KS0NW01.KS0NWSWP = "Y"; /* Indicate problem*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "KS0N-15210"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      KS0NM001.XXXPRCNM = "KS0N-15210"; /* Process name*/
      ;
    end
  end
  ;
end // end KS0N-15210

// Process valid request
Function KS0N-16000()
  /* *******************************************************************/
  /* This process will process the valid request based on function.  */
  /* *******************************************************************/
  ;
  if (converseVar.validationMsgNum == 0)
    if (KS0NW-FUNCTION == "A")
      KS0NW00.KS0NW-MAP = "2"; /* request change map*/
      KS0NW00.KS0NW-FUNCTION = "U";
      KS0NW00.KS0NW-LAST-FUNCTION = "A";
      KS0NW00.KS0NW-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
      exit stack; /* main process*/
    else
      KS0N-16200(); /* display popup or go to inquiry screen*/
    end
  else
    exit stack;
  end
  ;
end // end KS0N-16000

// Process valid request
Function KS0N-16200()
  /* ***********************************************************/
  /* check order nbr field for valid request.  If blank or   */
  /* '?', display order nbr popup.   Otherwise, if order nbr */
  /* is changed.                                             */
  /* ***********************************************************/
      /* pop-up window requested*/
  if (KS0NM001.KS0NM-CUST-ORDER-NBR == "?"
   || KS0NM001.KS0NM-CUST-ORDER-NBR == " ")
    XP0I001(); /* pop-up window initialize*/
                                   /* load table for use in pop-up*/
    while (XP0IW02.XP0IWEND == "N") /* until user hits enter*/
      XP0I040(); /* perform ord-nbr window*/
    end
    ;
        /* -----------------------------------------------**/
        /* If the pass index is greater than zero, use  **/
        /* the passed table index 'xp0iwpix' to move the**/
        /* cust-order-nbr to the map.                   **/
        /* -----------------------------------------------**/
    ;
    if (XP0IW02.XP0IWPIX > 0) /* if user selected an ord-nbr*/
      KS0NW00.KS0NW-CUST-ORDER-NBR = XP0IW01.XP0IW-CUST-ORDER-NBR[XP0IWPIX];
  /* MOVE XP0IW01.XP0IW-DIRECTIVE-STATUS(XP0IWPIX)*/
  /* TO KS0NW00.KS0NW-SAVE-DIR-STAT;*/
      KS0NM001.KS0NM-CUST-ORDER-NBR = XP0IW01.XP0IW-CUST-ORDER-NBR[XP0IWPIX];
      KS0NW00.KS0NW-MAP = "2";
      KS0NW00.KS0NW-FUNCTION = "I";
      exit stack;
    else
      KS0NM001.KS0NM-CUST-ORDER-NBR = "  ";
    end
    set KS0NM001.KS0NM-CUST-ORDER-NBR cursor; /* put cursor on ord nbr*/
    XP0IW02.XP0IWEND = "N"; /* reset pop-up flag*/
    ;
    converseLib.clearScreen();
     /* clear map*/
    exit stack; /* redisplay*/
    ;
  else
    ;
    if (KS0NM001.KS0NM-CUST-ORDER-NBR != KS0NW00.KS0NW-CUST-ORDER-NBR)
      KS0NW00.KS0NW-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
      KS0NW00.KS0NW-MSG-FL = "N"; /* Reset message flag*/
      KS0NW00.KS0NW-MAP = "2";
      KS0NW00.KS0NW-FUNCTION = "I";
      KS0NW01.KS0NWSWR = "Y";
      exit stack;
    end
  end
  ;
  return;
end // end KS0N-16200

// CVS Inquiry/Maint. Map
Function KS0N-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display the inquiry map.*/
   /* Processing always returns to the top of this process and*/
   /* falls through to subordinate processes until an error is*/
   /* found or a valid request is processed. Sequence is as*/
   /* follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  KS0N-21000(); /* Obtain the data to display*/
  ;
  KS0N-22000(); /* Format and display the map*/
  ;
  KS0N-23000(); /* Check attention identifier*/
  ;
  KS0N-24000(); /* check  pf7 and pf8*/
  ;
  KS0N-25000(); /* reset highlighted fields*/
  ;
  KS0N-26000(); /* verify the entered data*/
  ;
  KS0N-27000(); /* process valid entries*/
  ;
end // end KS0N-20000

// Obtain the data to display
Function KS0N-21000()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* If no data found, display error message and return to*/
      /* previous process.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
  ;
  if (KS0NW01.KS0NWSWR == "N") /* Data was not requested*/
    return; /* Return to previous process*/
  end
  ;
  KS0N-21100(); /* Purge any temporary storage*/
  ;
  KS0N-21200(); /* Select set and open the cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    set KS0NW02 empty; /* Clear temporary storage record*/
    KS0NW00.KS0NW-SAVE-DIR-STAT = " "; /* Initialize ord nbr status*/
    KS0NW01.KS0NWIXM = 1; /* Initialize display line number*/
    KS0NW01.KS0NWIX2 = 1; /* Initialize display line number*/
    KS0NW01.KS0NWSWC = "N"; /* Initialize end of file switch*/
    KS0NW01.KS0NWSWP = "N"; /* Initialize problem found switch*/
    while (KS0NW01.KS0NWSWC == "N" /* Until end of set or problem found*/
     && KS0NW01.KS0NWSWP == "N") /* or until a problem was found*/
      KS0N-21300(); /* Obtain data and format page*/
      KS0NW01.KS0NWIX2 = KS0NW01.KS0NWIX2 + 1; /* Increment index*/
      if (KS0NW01.KS0NWIXM > 28) /* Page is full*/
        KS0N-21400(); /* Add page to temporary storage*/
      end
      if (KS0NW01.KS0NWSWC == "Y") /* end of set was found*/
        if (KS0NW01.KS0NWIXM >= 1) /* and some of the page was formatted*/
          KS0N-21400(); /* Add page to temporary storage*/
        end
        KS0NW01.KS0NWTSP = 1; /* Initialize page number*/
        KS0NW01.KS0NWSWR = "N"; /* Request for data completed*/
        KS0N-21500(); /* Close the selected set cursor*/
      end
    end
  end
  ;
  KS0NW01.KS0NWSWC = "N";
  KS0NW01.KS0NWSWP = "N";
  if (KS0NW01.KS0NWTSP == 0) /* No data to display*/
    KS0NM001.XXXPRCNM = "KS0N-210"; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    return; /* Return to previous process*/
  end
  ;
end // end KS0N-21000

// Purge any temporary storage
Function KS0N-21100()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = "KS0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  call "TA0050" (KS0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "21100"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  KS0NW01.KS0NWTSP = 0; /* Reset current page number*/
  KS0NW01.TA5TSQIX = 0; /* Reset highest page number*/
  ;
  ;
end // end KS0N-21100

// Select set and open cursor
Function KS0N-21200()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  VKSORD01.KS-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
  ;
  call "VKSORD01" ("S1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "21200"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
    TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0NM001.XXXPRCNM = "21200"; /* Process name*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end KS0N-21200

// Fetch next row and format
Function KS0N-21300()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/
  ;
  call "VKSORD01" ("N1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    KS0NW01.KS0NWSWC = "Y"; /* end of set found*/
    if (KS0NW00.KS0NW-LAST-FUNCTION == "A") /* order was just added*/
      KS0NM001.KS0NM-DIRECTIVE-STATUS = "A";
      KS0NW00.KS0NW-SAVE-DIR-STAT = "A";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found from fetch*/
      KS0NW02.KS0NW-ORDER-GROUP[KS0NWIXM] = VKSORD01.VKSORD01-GROUP;
      if (KS0NW02.KS0NW-STATUS[KS0NWIXM] == "A")
        KS0NW00.KS0NW-SAVE-DIR-STAT = KS0NW02.KS0NW-STATUS[KS0NWIXM];
      else
        if (KS0NW02.KS0NW-STATUS[KS0NWIXM] == "I")
          if (KS0NW00.KS0NW-SAVE-DIR-STAT == " ")
            KS0NW-SAVE-DIR-STAT = KS0NW02.KS0NW-STATUS[KS0NWIXM];
          end
        end
      end
      ;
      KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1; /* Increment line index*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      KS0NW01.KS0NWSWP = "Y"; /* Indicate problem*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "21300"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "21300"; /* Process name*/
      ;
    end
  end
  ;
  ;
  ;
end // end KS0N-21300

// Add page to temporary storage
Function KS0N-21400()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  KS0NW02.KS0NWLEN = 1316; /* Temporary storage length*/
  TA5REC.TA5APPID = "KS0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  call "TA0050" (KS0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/
  ;
  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    KS0NW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    KS0NW01.KS0NWIXM = 1; /* Reset display line number*/
    set KS0NW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "21400"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0NM001.XXXPRCNM = "21400"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    KS0NW01.KS0NWSWP = "Y"; /* indicate that a problem has been*/
                                   /* found*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
end // end KS0N-21400

// Close selected set cursor
Function KS0N-21500()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  call "VKSORD01" ("C1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "21500"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
    TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0NM001.XXXPRCNM = "21500"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
end // end KS0N-21500

// Format and display the map
Function KS0N-22000()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || converseVar.validationMsgNum == 6) /* or fastpath error*/
    if (KS0NW00.KS0NW-FOOTNOTES != "Y")
      KS0NW01.KS0NW-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
      set KS0NM001 initial; /* Clear map output area*/
      KS0NM001.KS0NM-CUST-ORDER-NBR = KS0NW01.KS0NW-CUST-ORDER-NBR;
      KS0NM001.KS0NM-DIRECTIVE-STATUS = KS0NW00.KS0NW-SAVE-DIR-STAT;
      KS0N-22100(); /* Format the selected data*/
    end
  end
  ;
  if (KS0NW00.KS0NW-MSG-FL == "Y") /* If update message to display*/
    converseLib.validationFailed(1);
    KS0NM001.XXXPRCNM = "KS0N-22000"; /* Process name*/
    KS0NW00.KS0NW-MSG-FL = "N"; /* Reset message flag*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* No error message to display*/
    set KS0NM001 alarm; /* Indicate sound alarm*/
  end
  ;
  if (COMMAREA.CAADDFL == "N"
   || COMMAREA.CACHGFL == "N")
    KS0N-22400();
  end
  KS0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  KS0NW01.KS0NWSWR = "Y"; /* move 'y' to request for data*/
  ;
  converse KS0NM001 ;
  ;
  ;
end // end KS0N-22000

// Format the selected data
Function KS0N-22100()
  /* ------------------------------------------------------------*/
  /* Obtain the next page from temporary storage.*/
  /* Format the plan carrier data in the map.*/
  /* ------------------------------------------------------------*/
  ;
  KS0NW01.KS0NWDFL = "N"; /* Initialize change flag*/
  ;
  if (KS0NW01.TA5TSQIX == 0) /* if no data to display*/
    return; /* do not format data*/
  end
  ;
  while (KS0NW01.KS0NWDFL == "N") /* While delete save key not found*/
    KS0N-22200(); /* Obtain temporary storage page*/
    KS0N-22300(); /* Check for key on page*/
  end
  ;
  if (KS0NW01.KS0NWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
    KS0N-22200(); /* Obtain temporary storage page*/
  end
  ;
  set KS0NM001.KS0NMPGL skip; /* Display "PAGE" literal*/
  set KS0NM001.KS0NMOFL skip; /* Display "OF" literal*/
  ;
  KS0NM001.KS0NWTSP = KS0NW01.KS0NWTSP; /* Current page number*/
  KS0NM001.TA5TSQIX = KS0NW01.TA5TSQIX; /* Highest page number*/
  ;
  KS0NW01.KS0NWIXM = 1; /* Initialize line index*/
  ;
  while (KS0NW01.KS0NWIXM <= 28 /* Until end of lines*/
   && KS0NW02.KS0NW-CUST-ORDER-NBR[KS0NWIXM] != " ")
                                   /* Or last line of data*/
    ;
    ;
    KS0NW00.KS0NW-SAVE-CPTR-CD = KS0NW02.KS0NW-HTS-CPTR-CD[KS0NWIXM];
    KS0NW00.KS0NW-SAVE-HDG-CD = KS0NW02.KS0NW-HTS-HDG-CD[KS0NWIXM];
    KS0NW00.KS0NW-SAVE-1ST-SHDG-CD = KS0NW02.KS0NW-HTS-1ST-SHDG-CD[KS0NWIXM];
    KS0NW00.KS0NW-SAVE-2ND-SHDGCD1 = KS0NW02.KS0NW-HTS-2ND-SHDGCD1[KS0NWIXM];
    KS0NW00.KS0NW-SAVE-STAT-CD = KS0NW02.KS0NW-HTS-STAT-CD[KS0NWIXM];
    KS0NW00.KS0NW-HTS-NBR1 = KS0NW00.KS0NW-SAVE-HTS-NBR;
    if (KS0NW00.KS0NW-HTS-BYTE[6] == " ")
      KS0NW00.KS0NW-HTS-BYTE[5] = " ";
    else
      KS0NW00.KS0NW-HTS-BYTE[5] = ".";
    end
    if (KS0NW00.KS0NW-HTS-BYTE[9] == " ")
      KS0NW00.KS0NW-HTS-BYTE[8] = " ";
    else
      KS0NW00.KS0NW-HTS-BYTE[8] = ".";
    end
    ;
    KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] = KS0NW00.KS0NW-HTS-NBR1;
    KS0NM001.KS0NM-KS-STATUS[KS0NWIXM] = KS0NW02.KS0NW-STATUS[KS0NWIXM];
    KS0NW00.KS0NW-CHNG-CNT = KS0NW02.KS0NW-CHNG-CNT[KS0NWIXM];
    KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] = KS0NW02.KS0NW-FOOT-NOTE-NBR[KS0NWIXM];
    ;
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  if (KS0NM001.KS0NM-DIRECTIVE-STATUS == "A")
    KS0NM001.KS0NM-DSTATUS-DESC = "ACTIVE";
  else
    KS0NM001.KS0NM-DSTATUS-DESC = "INACTIVE";
  end
  ;
  if (KS0NW00.KS0NW-FUNCTION == "I")
    KS0NM001.KS0NM-SCREEN = "INQUIRY SCREEN"; /* update screen*/
                                   /* title*/
    KS0N-22110(); /* set fields read-only*/
    KS0NM001.KS0NM-POPUP-IND = ";";
  else
    KS0NM001.KS0NM-SCREEN = "CHANGE SCREEN"; /* update screen*/
                                   /* title*/
    set KS0NM001.KS0NM-UPDATE invisible;
    set KS0NM001.KS0NM-CUST-ORDER-NBR skip, blue, noHighLight;
    KS0NM001.KS0NM-POPUP-IND = ":";
  end
  ;
end // end KS0N-22100

// set map for view-only
Function KS0N-22110()
   /* ------------------------------------------------------------*/
   /* set field attributes for view-only.*/
   /* ------------------------------------------------------------*/
  ;
  KS0NW01.KS0NWIXM = 1;
  ;
  while (KS0NW01.KS0NWIXM <= 28) /* Until end of lines*/
    set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] skip, blue, noHighLight;
    set KS0NM001.KS0NM-KS-STATUS[KS0NWIXM] skip, blue, noHighLight;
    set KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] skip, blue, noHighLight;
    ;
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  set KS0NM001.KS0NM-DIRECTIVE-STATUS skip, blue, noHighLight;
  set KS0NM001.KS0NM-CUST-ORDER-NBR cursor;
  ;
end // end KS0N-22110

// Read temporary storage page
Function KS0N-22200()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  KS0NW02.KS0NWLEN = 1316; /* Temporary storage length*/
  TA5REC.TA5APPID = "KS0N"; /* Application identification*/
  if (KS0NW01.KS0NWTSP >= KS0NW01.TA5TSQIX)
    TA5REC.TA5TSQIX = KS0NW01.TA5TSQIX;
    KS0NW01.KS0NWTSP = KS0NW01.TA5TSQIX;
  else
    TA5REC.TA5TSQIX = KS0NW01.KS0NWTSP; /* Page number*/
  end
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  call "TA0050" (KS0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "22200"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0NM001.XXXPRCNM = "22200"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end KS0N-22200

// Check for key on page
Function KS0N-22300()
   /* ------------------------------------------------------------*/
   /* Check to see if the delete save key is located on this*/
   /* page. If found position cursor on key or position less than*/
   /* the key if not found.*/
   /* ------------------------------------------------------------*/
  ;
  ;
         /* Check for positioning cursor on key with beginning letter*/
         /* to match.*/
  ;
  if (KS0NW01.KS0NWSWR == "N")
    set KS0NM001.KS0NM-KS-HTS-NBR[1] cursor; /* Initial cursor*/
    /* SET KS0NM001.KS0NM-CUST-ORDER-NBR AUTOSKIP;*/
    KS0NW01.KS0NWDFL = "Y"; /* Indicate page was found*/
    return; /* Return to previous process*/
  end
  ;
  KS0NW01.KS0NWIXM = 1;
  if (KS0NW01.KS0NWTSP == KS0NW01.TA5TSQIX) /* Last page*/
    /* OVE 02 TO KS0NW01.KS0NWIXM;   /* Set index to last entry*/
    set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] cursor; /* Initial cursor*/
    KS0NW01.KS0NWDFL = "Y"; /* Indicate page was found*/
  else
    KS0NW01.KS0NWTSP = KS0NW01.KS0NWTSP + 1; /* Increment page*/
  end
  ;
  ;
end // end KS0N-22300

// Set screen to protect for view
Function KS0N-22400()
  /* ***********************************************************/
  /* SET MAP TO VIEW ONLY                                     */
  /* ***********************************************************/
  set KS0NM001.KS0NM-CUST-ORDER-NBR normal;
  KS0NW01.KS0NWIXM = 1;
  while (KS0NW01.KS0NWIXM <= 28)
    set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] protect;
    set KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] protect;
    set KS0NM001.KS0NM-KS-STATUS[KS0NWIXM] protect;
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1;
  end
  set KS0NM001.CATOAP cursor;
  set KS0NM001.KS0NM-ADD invisible, skip;
  ;
end // end KS0N-22400

// Check attention identifier
Function KS0N-23000()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "KS0A"; /* move in map name for help*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (KS0NM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      KS0N-11100(); /* Purge temporary storage*/
      COMMAREA.CATOAP = KS0NM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = KS0NM001.CAITEM; /* Application data*/
      XSKS-S0001(); /* Exit to another application*/
      KS0NW01.KS0NWSWR = "Y"; /* Set request for data switch*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set KS0NM001.CATOAP cursor, modified, bold; /* Highlight*/
    KS0NM001.XXXPRCNM = "KS0N130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    if (KS0NW00.KS0NW-FUNCTION == "I")
      COMMAREA.CATOAP = "KS0A"; /* move in map name for help*/
    else
  /* if footnotes exist for this order, but no hts nbrs*/
  /* don't let that user leave - redisplay map w/message, no info req*/
      KS0N-23100(); /* check if footnotes exists w/o valid*/
      if (converseVar.validationMsgNum == 0)
        KS0NW00.KS0NW-MAP = "2";
        KS0NW00.KS0NW-FUNCTION = "I";
        COMMAREA.CAITEM = " "; /* clear item field*/
      end
      exit stack;
    end
    COMMAREA.CAITEM = " "; /* clear item field*/
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF4 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    /* GET FIX*/
    ;
    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "KS0NM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end
    ;
    KS0N-11100(); /* Purge any temporary storage*/
    XSKS-S0001(); /* Exit to another application*/
    KS0NM001.XXXPRCNM = "KS0N-230"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey is pa2    /* PA2 was pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf17) /* and PF17 was not pressed*/
    ;
    KS0NM001.XXXPRCNM = "KS0N-230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    return;
  end /* ;*/
  ;
  if (converseVar.eventKey is pf14) /* change map requested*/
    if (COMMAREA.CACHGFL == "N" /* and user chg not authorized*/
     || KS0NW00.KS0NW-FUNCTION == "U") /* or currently in chg map*/
      KS0NM001.XXXPRCNM = "KS0N230"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      return; /* Exit to redisplay map*/
    else
      KS0NW00.KS0NW-LAST-MAP = KS0NW00.KS0NW-MAP;
      KS0NW00.KS0NW-LAST-FUNCTION = KS0NW00.KS0NW-FUNCTION;
      KS0NW00.KS0NW-MAP = "2";
      KS0NW00.KS0NW-FUNCTION = "U";
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf13) /* add order nbr*/
    if (COMMAREA.CAADDFL == "N") /* and user add not authorized*/
      KS0NM001.XXXPRCNM = "KS0N230"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    else
      KS0NW00.KS0NW-LAST-MAP = KS0NW00.KS0NW-MAP;
      KS0NW00.KS0NW-LAST-FUNCTION = KS0NW00.KS0NW-FUNCTION;
      KS0NW00.KS0NW-MAP = "1";
      KS0NW00.KS0NW-FUNCTION = "A";
      exit stack; /* Exit to redisplay map*/
    end
  end
  ;
  if (converseVar.eventKey is pf19) /* add order nbr*/
    if (KS0NW00.KS0NW-FUNCTION == "I" || 
    COMMAREA.CAADDFL == "N") /* and user add not authorized*/
      KS0NM001.XXXPRCNM = "KS0N230"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    else
      KS0NW00.KS0NW-LAST-MAP = KS0NW00.KS0NW-MAP;
      KS0NW00.KS0NW-LAST-FUNCTION = KS0NW00.KS0NW-FUNCTION;
      KS0NW00.KS0NW-MAP = "2";
      KS0NW00.KS0NW-FUNCTION = "A";
      exit stack; /* Exit to redisplay map*/
    end
  end
  ;
  if (converseVar.eventKey is pf17) /* PF18 was pressed*/
    KS0NW00.KS0NW-LAST-MAP = KS0NW00.KS0NW-MAP;
    KS0NW00.KS0NW-LAST-FUNCTION = KS0NW00.KS0NW-FUNCTION;
    KS0NW00.KS0NW-MAP = "3";
    KS0NW00.KS0NW-FUNCTION = "I";
    KS0NW00.KS0NW-FOOTNOTES = "Y";
    exit stack; /* Exit to redisplay map*/
  end
  ;
end // end KS0N-23000

// delete ftnts for invalid order
Function KS0N-23100()
  /* *******************************************************************/
  /* Make sure that current order nbr has hts nbrs assigned to it.   */
  /* if not, and footnotes exist for the order, display error msg.   */
  /* *******************************************************************/
  ;
  KS0N-21200(); /* select set*/
  KS0N-23110(); /* fetch a row,if end of set,*/
                                /* no hts nbrs assigned to this order*/
  KS0N-21500(); /* close set*/
  if (KS0NW00.KS0NW-DELETE-FOOTNOTES == "Y")
    KS0N-31200(); /* select vksfnt01 set*/
    KS0NW01.KS0NW-END-OF-FOOTNOTES = "N";
    KS0N-23120(); /* fetch row*/
    if (KS0NW01.KS0NW-END-OF-FOOTNOTES == "N")
      converseLib.validationFailed(151);
      set KS0NM001.KS0NM-KS-HTS-NBR[1] bold, white, cursor;
  /* WHILE KS0NW01.KS0NW-END-OF-FOOTNOTES EQ 'N';*/
  /* PERFORM KS0N-23130;          /* delete it*/
  /* PERFORM KS0N-23120;          /* fetch row*/
    end
    KS0N-31500(); /* close set*/
    ;
  end
  return; /* main process*/
  ;
end // end KS0N-23100

// Fetch next row
Function KS0N-23110()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  call "VKSORD01" ("N1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    KS0NW00.KS0NW-DELETE-FOOTNOTES = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found from fetch*/
      return; /* go on to process valid request*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      KS0NW01.KS0NWSWP = "Y"; /* Indicate problem*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "32110"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      KS0NM001.XXXPRCNM = "32110"; /* Process name*/
      ;
    end
  end
  ;
  return;
end // end KS0N-23110

// Fetch next row
Function KS0N-23120()
  /* ------------------------------------------------------------*/
  /* Fetch the next row from the selected set of rows.*/
  /* If end of file, set end of file switch.*/
  /* If any error, indicate a system error.*/
  /* Format the data in the temporary storage display line.*/
  /* ------------------------------------------------------------*/
  ;
  call "VKSFNT01" ("N1", SQLCA, VKSFNT01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    KS0NW01.KS0NW-END-OF-FOOTNOTES = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found from fetch*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      KS0NW01.KS0NWSWP = "Y"; /* Indicate problem*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "23120"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "23120"; /* Process name*/
      ;
    end
  end
  ;
  ;
  ;
end // end KS0N-23120

// Verify scroll request
Function KS0N-24000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* Determine whether a valid request to scroll was entered.*/
  /* If not a scroll request, verify any changed data.*/
  /* If any errors were found, exit to redisplay the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0NM001.CAITEM > " ") /* Application data was entered*/
    set KS0NM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    KS0NM001.XXXPRCNM = "KS0N240"; /* Process name*/
  end
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    KS0NW01.KS0NWMFL = "N"; /* Clear message flag*/
    KS0N-24100(); /* Verify scroll request*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    KS0NW01.KS0NWSWR = "N"; /* move 'n' to request for data*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  KS0NW01.KS0NWIFL = "N"; /* Initialize inquiry flag*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    KS0NW01.KS0NWTSP = KS0NW01.KS0NWTSP - 1; /* Decrement page number*/
    KS0NW01.KS0NWSWR = "N"; /* move 'n' to request for data*/
    exit stack; /* Return to previous process*/
  end
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    KS0NW01.KS0NWTSP = KS0NW01.KS0NWTSP + 1; /* Increment page number*/
    KS0NW01.KS0NWSWR = "N"; /* move 'n' to request for data*/
    exit stack; /* Return to previous process*/
  end
  ;
  ;
end // end KS0N-24000

// Verify scroll request
Function KS0N-24100()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0NW01.KS0NWTSP == 1)      /* and no previous pages*/
    KS0NM001.XXXPRCNM = "KS0N241"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0NW01.KS0NWTSP >= KS0NW01.TA5TSQIX) /* and no more pages*/
    KS0NM001.XXXPRCNM = "KS0N241"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end
  ;
end // end KS0N-24100

// Reset highlighted fields
Function KS0N-25000()
  /* ***************************************************************/
  /* reset highlighted fields.  if map function is inquiry,      */
  /* only reset order nbr field.  if function is change/update,  */
  /* reset all enterable fields.                                 */
  /* ***************************************************************/
  if (KS0NW00.KS0NW-FUNCTION == "I")
    set KS0NM001.KS0NM-CUST-ORDER-NBR initialAttributes;
  else
    set KS0NM001.KS0NM-CUST-ORDER-NBR initialAttributes;
    KS0NW01.KS0NWIXM = 1;
    while (KS0NW01.KS0NWIXM <= 28)
      set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] initialAttributes;
      set KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] initialAttributes;
      set KS0NM001.KS0NM-KS-STATUS[KS0NWIXM] initialAttributes;
      KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1;
    end
  end
  set KS0NM001.KS0NM-DIRECTIVE-STATUS initialAttributes;
  ;
end // end KS0N-25000

// Verify entered data
Function KS0N-26000()
  /* **************************************************************/
  /* Highlight any application data that was entered.            */
  /* Verify any changed data.                                    */
  /* If any errors were found, exit to redisplay the map.        */
  /* **************************************************************/
  ;
  if (KS0NM001.CAITEM > " ") /* Application data was entered*/
    set KS0NM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    KS0NM001.XXXPRCNM = "KS0N260"; /* Process name*/
  end
  ;
  if (KS0NW00.KS0NW-FUNCTION == "U" /* update function*/
   && KS0NW00.KS0NW-MAP == "2")    
    KS0N-26100(); /* verify any changed data*/
  else
    if (KS0NW00.KS0NW-FUNCTION == "I" /* update function*/
     && KS0NW00.KS0NW-MAP == "2")    
      KS0N-15200(); /* verify any changed data*/
    end
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  ;
end // end KS0N-26000

// verify changed data,process
Function KS0N-26100()
  /* *****************************************************************/
  /* Update or add new hts number depending on where the row was    */
  /* selected and where the row was blank or overwritten old number */
  /* IF update function                                             */
  /* *****************************************************************/
  ;
  KS0NW01.KS0NWIXM = 1;
  KS0NW00.KS0NW-HTS-NBR1 = " ";
  KS0NW00.KS0NW-SAVE-HTS-NBR = " ";
  while (KS0NW01.KS0NWIXM <= 28 /* run through screen*/
   && converseVar.validationMsgNum == 0)
    set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] normal;
    KS0NW00.KS0NW-SAVE-HTS-NBR = " ";
    if (KS0NW02.KS0NW-HTS-NBR[KS0NWIXM] > "  ")
      KS0N-26110(); /* format wkstore hts number*/
    end
    if (KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] !=  /* check number format*/
    KS0NW00.KS0NW-SAVE-HTS-NBR)                
      KS0NW00.KS0NW-HTS-NBR1 = KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM];
      if (KS0NW00.KS0NW-HTS-NBR1 != " ")
        KS0N-26120(); /* check hts number format*/
      end
      if (converseVar.validationMsgNum != 0)
        set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] cursor;
        exit stack;
      end
    end
    KS0NW00.KS0NW-HTS-NBR1 = KS0NW00.KS0NW-SAVE-HTS-NBR;
    if (KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] != 
    KS0NW00.KS0NW-HTS-NBR1 || 
    KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] != 
    KS0NW02.KS0NW-FOOT-NOTE-NBR[KS0NWIXM] || 
    KS0NM001.KS0NM-KS-STATUS[KS0NWIXM] != 
    KS0NW02.KS0NW-STATUS[KS0NWIXM])
      KS0NW00.KS0NW-SAVE-HTS-NBR = KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM];
      KS0NW00.KS0NW-HTS-NBR1 = KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM];
      KS0NW00.KS0NW-SAVE-ZZ-CHNG-CNT = KS0NW02.KS0NW-CHNG-CNT[KS0NWIXM];
      if (KS0NW02.KS0NW-HTS-CPTR-CD[KS0NWIXM] == "  "
       && KS0NW00.KS0NW-SAVE-CPTR-CD != " ")
        if (KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] == " ")
          converseLib.validationFailed(150); /* footnote required*/
          set KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] bold, white, cursor;
          KS0NW01.KS0NWSWR = "N";
        else
          KS0N-26130(); /* chk for dup hts nbr*/
          if (converseVar.validationMsgNum == 0)
            KS0N-26150(); /* check foot-note number*/
            KS0N-26160(); /* add new number*/
            KS0NW00.KS0NW-MSG-FL = "Y"; /* update msg*/
            KS0NW00.KS0NW-FUNCTION = "I"; /* change to inquiry*/
            KS0NW00.KS0NW-MAP = "2"; /* map*/
          end
        end
      else
        if (KS0NW02.KS0NW-HTS-CPTR-CD[KS0NWIXM] != "  "
         && KS0NW00.KS0NW-SAVE-CPTR-CD == " ")
          KS0N-26170(); /* delete old hts number*/
          KS0N-23100(); /* does this leave orphaned footnotes?*/
          if (converseVar.validationMsgNum == 0)
            KS0NW00.KS0NW-MSG-FL = "Y"; /* update msg*/
            KS0NW00.KS0NW-FUNCTION = "I"; /* change to inquiry*/
            KS0NW00.KS0NW-MAP = "2"; /* map*/
          end
        else
          if (KS0NW00.KS0NW-SAVE-CPTR-CD != " ")
            if (KS0NW00.KS0NW-SAVE-CPTR-CD !=  /* compare old and new*/
            KS0NW02.KS0NW-HTS-CPTR-CD[KS0NWIXM]
             /* hts to see if need to be*/
             || KS0NW00.KS0NW-SAVE-HDG-CD !=   /* updated*/
            KS0NW02.KS0NW-HTS-HDG-CD[KS0NWIXM] 
             || KS0NW00.KS0NW-SAVE-1ST-SHDG-CD != 
            KS0NW02.KS0NW-HTS-1ST-SHDG-CD[KS0NWIXM]
             || KS0NW00.KS0NW-SAVE-2ND-SHDGCD1 != 
            KS0NW02.KS0NW-HTS-2ND-SHDGCD1[KS0NWIXM]
             || KS0NW00.KS0NW-SAVE-STAT-CD !=  
            KS0NW02.KS0NW-HTS-STAT-CD[KS0NWIXM])
              KS0N-26130(); /* ck for dup hts nbr*/
              if (KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] == " ")
                converseLib.validationFailed(150); /* footnote required*/
                set KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] bold, white, cursor;
                KS0NW01.KS0NWSWR = "N";
              end
              if (converseVar.validationMsgNum == 0)
                KS0N-26150(); /* check foot-note number*/
                KS0N-26160(); /* add new number*/
                if (SQLCA.VAGen_SQLCODE == 0)
                  KS0N-26170(); /* delete old hts number*/
                  KS0NW00.KS0NW-MSG-FL = "Y"; /* update msg*/
                  KS0NW00.KS0NW-FUNCTION = "I"; /* change to inquiry*/
                  KS0NW00.KS0NW-MAP = "2"; /* map*/
                end
              end
            else
              KS0N-26140(); /* right justify foot-note number*/
              KS0N-26150(); /* check foot-note number*/
              if (KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] > "    " && 
              KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] != 
              KS0NW02.KS0NW-FOOT-NOTE-NBR[KS0NWIXM])
                KS0N-26150(); /* check foot-note number*/
              end
              if (KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] > " "
               && KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] == " ")
                converseLib.validationFailed(150); /* footnote required*/
                set KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] bold, white, cursor;
                KS0NW01.KS0NWSWR = "N";
              else
                KS0N-26180(); /* update status or footnote*/
                KS0NW00.KS0NW-MSG-FL = "Y"; /* update msg*/
                KS0NW00.KS0NW-FUNCTION = "I"; /* change to inquiry*/
                KS0NW00.KS0NW-MAP = "2"; /* map*/
              end
            end
          end
        end
      end
    end
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1;
  end
  ;
  KS0N-26190(); /* check for ord nbr status chg*/

  ;
end // end KS0N-26100

// Format hts number to vksorder
Function KS0N-26110()
  ;
  KS0NW00.KS0NW-SAVE-CPTR-CD = KS0NW02.KS0NW-HTS-CPTR-CD[KS0NWIXM];
  KS0NW00.KS0NW-SAVE-HDG-CD = KS0NW02.KS0NW-HTS-HDG-CD[KS0NWIXM];
  KS0NW00.KS0NW-SAVE-1ST-SHDG-CD = KS0NW02.KS0NW-HTS-1ST-SHDG-CD[KS0NWIXM];
  KS0NW00.KS0NW-SAVE-2ND-SHDGCD1 = KS0NW02.KS0NW-HTS-2ND-SHDGCD1[KS0NWIXM];
  KS0NW00.KS0NW-SAVE-STAT-CD = KS0NW02.KS0NW-HTS-STAT-CD[KS0NWIXM];
  KS0NW00.KS0NW-HTS-NBR1 = KS0NW00.KS0NW-SAVE-HTS-NBR;
  if (KS0NW00.KS0NW-HTS-BYTE[6] == " ")
    KS0NW00.KS0NW-HTS-BYTE[5] = " ";
  else
    KS0NW00.KS0NW-HTS-BYTE[5] = ".";
  end
  if (KS0NW00.KS0NW-HTS-BYTE[9] == " ")
    KS0NW00.KS0NW-HTS-BYTE[8] = " ";
  else
    KS0NW00.KS0NW-HTS-BYTE[8] = ".";
  end
  KS0NW00.KS0NW-SAVE-HTS-NBR = KS0NW00.KS0NW-HTS-NBR1;
  ;
  ;
  ;
end // end KS0N-26110

// verify hts nbr format
Function KS0N-26120()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999  or  9999.99.99-99*/
  /* or  9999.99.99,99*/
  /* this routine verifies that there is a ' ' or '.' in positions*/
  /* 3 and 5 and 8. If any of the other positions contain a '.', it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* no errors found*/
    ;
    KS0NW00.KS0NW-IXM = 1; /* initialize index*/
    ;
    while (KS0NW00.KS0NW-IXM <= 12)
      if (KS0NW00.KS0NW-IXM == 5 /* these 2 positions must be blank or*/
       || KS0NW00.KS0NW-IXM == 8) /* equal '.'. if not, it's in error*/
        if (KS0NW00.KS0NW-HTS-BYTE[KS0NW-IXM] != " ")
          if (KS0NW00.KS0NW-HTS-BYTE[KS0NW-IXM] != ".")
            KSWREC.XXXPRCNM = "360  "; /* Module id*/
            set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
            KS0NW00.KS0NW-HTS-FORMAT-SW = "N"; /* Format invalid*/
          end
        end
      else
        if (KS0NW00.KS0NW-HTS-BYTE[KS0NW-IXM] == "."
         || KS0NW00.KS0NW-HTS-BYTE[KS0NW-IXM] == "-"
         || KS0NW00.KS0NW-HTS-BYTE[KS0NW-IXM] == ",")
          KSWREC.XXXPRCNM = "15309"; /* Module id*/
          set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] cursor, bold;
          converseLib.validationFailed(35); /* Invalid HTS nbr*/
          KS0NW00.KS0NW-HTS-FORMAT-SW = "N"; /* Format invalid*/
        end
      end

      KS0NW00.KS0NW-IXM = KS0NW00.KS0NW-IXM + 1;
    end
    if ((KS0NW00.KS0NW-HTS-BYTE[1] > " "
     && KS0NW00.KS0NW-HTS-BYTE[2] == " ")
     || (KS0NW00.KS0NW-HTS-BYTE[3] > " "
     && KS0NW00.KS0NW-HTS-BYTE[4] == " "))
      KSWREC.XXXPRCNM = "15309"; /* Module id*/
      set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] cursor, bold;
      converseLib.validationFailed(35); /* Invalid HTS nbr*/
      KS0NW00.KS0NW-HTS-FORMAT-SW = "N"; /* Format invalid*/
    end
  end
  ;
end // end KS0N-26120

// chk for dup hts nbr
Function KS0N-26130()
  /* *************************************************************/
  /* check for DUPLICATE hts numbers, OR if the entered hts-nbr */
  /* is a SUBSET of another hts nbr covered by this directive,  */
  /* OR the entered hts nbr is a SUPERSET of another hts nbr    */
  /* covered by this directive.                                 */
  /* *************************************************************/
  ;
  if (KS0NW00.KS0NW-SAVE-HTS-NBR > " ")
    VKSORD01.KS-HTS-CPTR-CD = KS0NW00.KS0NW-SAVE-CPTR-CD;
    VKSORD01.KS-HTS-HDG-CD = KS0NW00.KS0NW-SAVE-HDG-CD;
    VKSORD01.KS-HTS-1ST-SHDG-CD = KS0NW00.KS0NW-SAVE-1ST-SHDG-CD;
    VKSORD01.KS-HTS-2ND-SHDGCD1 = KS0NW00.KS0NW-SAVE-2ND-SHDGCD1;
    VKSORD01.KS-HTS-STAT-CD = KS0NW00.KS0NW-SAVE-STAT-CD;
    KS0N-26132(); /* format order number for select*/
   /* find inactive OR active duplicate*/
    VKSORD01.XXX-STAT = "%";
    KS0N-26134(); /* select set*/
    KS0N-26136(); /* fetch*/
    while (SQLCA.VAGen_SQLCODE != 100 /* not end of set*/
     && converseVar.validationMsgNum == 0) /* and not a subset*/
      if (KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] == 
      VKSORD01.KS-FOOT-NOTE-NBR)
        converseLib.validationFailed(139);
        KS0NW01.KS0NWSWR = "N";
      end
      KS0N-26136(); /* fetch*/
    end
    KS0N-26138(); /* close*/
    ;
    if (converseVar.validationMsgNum == 0) /* not dup or subset*/
      VKSORD01.KS-HTS-CPTR-CD = KS0NW00.KS0NW-SAVE-CPTR-CD;
      if (KS0NW00.KS0NW-SAVE-HDG-CD > " ")
        VKSORD01.KS-HTS-HDG-CD = KS0NW00.KS0NW-SAVE-HDG-CD;
      else
        VKSORD01.KS-HTS-HDG-CD = "%%";
      end
      if (KS0NW00.KS0NW-SAVE-1ST-SHDG-CD > " ")
        VKSORD01.KS-HTS-1ST-SHDG-CD = KS0NW00.KS0NW-SAVE-1ST-SHDG-CD;
      else
        VKSORD01.KS-HTS-1ST-SHDG-CD = "%%";
      end
      if (KS0NW00.KS0NW-SAVE-2ND-SHDGCD1 > " ")
        VKSORD01.KS-HTS-2ND-SHDGCD1 = KS0NW00.KS0NW-SAVE-2ND-SHDGCD1;
      else
        VKSORD01.KS-HTS-2ND-SHDGCD1 = "%%";
      end
      if (KS0NW00.KS0NW-SAVE-STAT-CD > " ")
        VKSORD01.KS-HTS-STAT-CD = KS0NW00.KS0NW-SAVE-STAT-CD;
      else
        VKSORD01.KS-HTS-STAT-CD = "%%";
      end
      VKSORD01.KS-CUST-ORDER-NBR = KS0NW00.KS0NW-CUST-ORDER-WORK;
   /* find inactive OR active subset*/
      VKSORD01.XXX-STAT = "%";
      KS0N-26134(); /* select set*/
      KS0N-26136(); /* fetch*/
      while (SQLCA.VAGen_SQLCODE != 100 /* not end of set*/
       && converseVar.validationMsgNum == 0) /* and not a subset*/
        if (KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] == 
        VKSORD01.KS-FOOT-NOTE-NBR)
          converseLib.validationFailed(149);
          KS0NW01.KS0NWSWR = "N";
        end
        KS0N-26136(); /* fetch*/
      end
      KS0N-26138(); /* close*/
    end
    ;
    if (converseVar.validationMsgNum != 0)
      set KS0NM001.KS0NM-KS-HTS-NBR[KS0NWIXM] cursor, bold;
      return;
    end
  end
  ;
end // end KS0N-26130

// Format ord nbr for select
Function KS0N-26132()
  /* *************************************************************/
  /* format order nbr for select                                */
  /* *************************************************************/
  ;
  KS0NW00.KS0NW-CUST-ORDER-WORK = KS0NM001.KS0NM-CUST-ORDER-NBR;
  if (KS0NM001.KS0NM-CUST-ORDER-NBR > " ")
    KS0NWIXM2 = 1;
    while (KS0NWIXM2 <= 12)
      if (KS0NW00.KS0NW-ORDER-BYTE[KS0NWIXM2] == " ")
        KS0NW00.KS0NW-ORDER-BYTE[KS0NWIXM2] = "_";
      end
      KS0NWIXM2 = KS0NWIXM2 + 1;
    end
  end
  ;
  VKSORD01.KS-CUST-ORDER-NBR = KS0NW00.KS0NW-CUST-ORDER-WORK;
  ;
end // end KS0N-26132

// select vksord01 set
Function KS0N-26134()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  call "VKSORD01" ("S3", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "26134"; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "26134"; /* Process name*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
end // end KS0N-26134

// fetch vksord01
Function KS0N-26136()
  /* ------------------------------------------------------------*/
  /* fetch row*/
  /* If not available, return an error message to the user.*/
  /* If any other, indicate system error.*/
  /* ------------------------------------------------------------*/
  ;
  call "VKSORD01" ("N3", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != 100)
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        ;
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        ;
      else
        ;
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        ;
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "26136"; /* Process name*/
        TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
        TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
        TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
        ;
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
        KS0NM001.XXXPRCNM = "26136"; /* Process name*/
        ;
        return; /* Return to previous process*/
        ;
      end
    end
  end
  ;
  ;
end // end KS0N-26136

// close vksord01
Function KS0N-26138()
  /* ------------------------------------------------------------*/
  /* close set*/
  /* If not available, return an error message to the user.*/
  /* If any other, indicate system error.*/
  /* ------------------------------------------------------------*/
  ;
  call "VKSORD01" ("C3", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "26138"; /* Process name*/
      TA1REC.TA1LOC = "CLOSE SET OF TABLE OWS";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "26138"; /* Process name*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
end // end KS0N-26138

// right justify footnote nbr
Function KS0N-26140()
  /* *************************************************************/
  /* right justify foot note number*/
  /* *************************************************************/


  KS0NW00.KS0NW-FNT-NBR1 = KS0NM001.KS0NM-FOOT-NOTE-NBR;
  if (KS0NM001.KS0NM-FOOT-NOTE-NBR > " ")
    if (KS0NW00.KS0NW-FNT-BYTE[2] == " ") /* right justify foot note nbr*/
      KS0NW-FNT-BYTE[2] = KS0NW00.KS0NW-FNT-BYTE[1];
      KS0NW-FNT-BYTE[1] = " ";
    end
    if (KS0NW00.KS0NW-FNT-BYTE[3] == " ")
      KS0NW-FNT-BYTE[3] = KS0NW00.KS0NW-FNT-BYTE[2];
      KS0NW-FNT-BYTE[2] = KS0NW00.KS0NW-FNT-BYTE[1];
      KS0NW-FNT-BYTE[1] = " ";
      KS0NW-FNT-BYTE[2] = " ";
    end
    if (KS0NW00.KS0NW-FNT-BYTE[4] == " ")
      KS0NW-FNT-BYTE[4] = KS0NW00.KS0NW-FNT-BYTE[3];
      KS0NW-FNT-BYTE[3] = KS0NW00.KS0NW-FNT-BYTE[2];
      KS0NW-FNT-BYTE[2] = KS0NW00.KS0NW-FNT-BYTE[1];
      KS0NW-FNT-BYTE[1] = " ";
      KS0NW-FNT-BYTE[2] = " ";
      KS0NW-FNT-BYTE[3] = " ";
    end
  end
end // end KS0N-26140

// check for footnote
Function KS0N-26150()
  /* **************************************************************/
  /* check if the footnote number exists for this hts nbr.       */
  /* **************************************************************/
  ;
  VKSFNT01.KS-FOOT-NOTE-NBR = KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM];
  VKSFNT01.KS-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
  KS0N-26155(); /* find unique hts foot-note*/
  if (SQLCA.VAGen_SQLCODE != 0)
    converseLib.validationFailed(140);
    set KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] cursor, bold;
    exit stack;
  end
  ;
  ;
end // end KS0N-26150

// select foot-note number
Function KS0N-26155()
  /* ------------------------------------------------------------*/
  /* Select the set of table rows.*/
  /* If not available, return an error message to the user.*/
  /* If any other, indicate system error.*/
  /* ------------------------------------------------------------*/
  ;
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* MOVE KS0NM001.XXXCURDT TO VKSFNT01.ZZ-SDT;*/
  /* MOVE KS0NM001.XXXCURDT TO VKSFNT01.ZZ-CHNG-DT;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
  VKSFNT01.ZZ-SDT = VGVar.currentGregorianDate;
  VKSFNT01.ZZ-CHNG-DT = VGVar.currentGregorianDate;
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
  VKSFNT01.ZZ-CHNG-HHMM = 1200;
  ;
  call "VKSFNT01" ("S ", SQLCA, VKSFNT01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != 100)
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        ;
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        ;
      else
        ;
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        ;
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "KS0N-26155"; /* Process name*/
        TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
        TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
        TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
        ;
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
        KS0NM001.XXXPRCNM = "KS0N-75165"; /* Process name*/
        ;
        return; /* Return to previous process*/
        ;
      end
    end
  end
  ;
  ;
end // end KS0N-26155

// add new hts number
Function KS0N-26160()
  /* **********************************************************/
  /* Add new hts number to order nbr table.                  */
  /* If not available, return an error message to the user.  */
  /* If any other, indicate system error.                    */
  /* **********************************************************/
  ;
  VKSORD01.KS-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
  VKSORD01.KS-HTS-CPTR-CD = KS0NW00.KS0NW-SAVE-CPTR-CD;
  VKSORD01.KS-HTS-HDG-CD = KS0NW00.KS0NW-SAVE-HDG-CD;
  VKSORD01.KS-HTS-1ST-SHDG-CD = KS0NW00.KS0NW-SAVE-1ST-SHDG-CD;
  VKSORD01.KS-HTS-2ND-SHDGCD1 = KS0NW00.KS0NW-SAVE-2ND-SHDGCD1;
  VKSORD01.KS-HTS-STAT-CD = KS0NW00.KS0NW-SAVE-STAT-CD;
  VKSORD01.ZZ-CHNG-CNT = KS0NW00.KS0NW-SAVE-ZZ-CHNG-CNT;
  VKSORD01.XXX-STAT = "A";
  VKSORD01.KS-FOOT-NOTE-NBR = KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM];
  ;
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE KS0NM001.XXXCURDT TO VKSORD01.ZZ-SDT;*/
  /* MOVE KS0NM001.XXXCURDT TO VKSORD01.ZZ-CHNG-DT;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
  VKSORD01.ZZ-SDT = VGVar.currentGregorianDate;
  VKSORD01.ZZ-CHNG-DT = VGVar.currentGregorianDate;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
  VKSORD01.ZZ-CHNG-HHMM = 1200;
  call "VKSORD01" ("A ", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "KS0N-212"; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "KS0N-212"; /* Process name*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
end // end KS0N-26160

// delete old hts number
Function KS0N-26170()
  /* *************************************************************/
  /* Delete old hts number from the order nbr table.            */
  /* If not available, return an error message to the user.     */
  /* If any other, indicate system error.                       */
  /* *************************************************************/
  ;
  VKSORD01.KS-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
  VKSORD01.KS-HTS-CPTR-CD = KS0NW02.KS0NW-HTS-CPTR-CD[KS0NWIXM];
  VKSORD01.KS-HTS-HDG-CD = KS0NW02.KS0NW-HTS-HDG-CD[KS0NWIXM];
  VKSORD01.KS-HTS-1ST-SHDG-CD = KS0NW02.KS0NW-HTS-1ST-SHDG-CD[KS0NWIXM];
  VKSORD01.KS-HTS-2ND-SHDGCD1 = KS0NW02.KS0NW-HTS-2ND-SHDGCD1[KS0NWIXM];
  VKSORD01.KS-HTS-STAT-CD = KS0NW02.KS0NW-HTS-STAT-CD[KS0NWIXM];
  ;
  call "VKSORD01" ("D ", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "KS0N-212"; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "KS0N-451"; /* Process name*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
end // end KS0N-26170

// update hts number
Function KS0N-26180()
  /* ****************************************************************/
  /* Move update fields for updating hts number.                   */
  /* If not available, return an error message to the user.        */
  /* If any other, indicate system error.                          */
  /* ****************************************************************/
  ;
  VKSORD01.KS-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
  VKSORD01.KS-HTS-CPTR-CD = KS0NW00.KS0NW-SAVE-CPTR-CD;
  VKSORD01.KS-HTS-HDG-CD = KS0NW00.KS0NW-SAVE-HDG-CD;
  VKSORD01.KS-HTS-1ST-SHDG-CD = KS0NW00.KS0NW-SAVE-1ST-SHDG-CD;
  VKSORD01.KS-HTS-2ND-SHDGCD1 = KS0NW00.KS0NW-SAVE-2ND-SHDGCD1;
  VKSORD01.ZZ-CHNG-CNT = KS0NW02.KS0NW-CHNG-CNT[KS0NWIXM];
  VKSORD01.KS-HTS-STAT-CD = KS0NW00.KS0NW-SAVE-STAT-CD;
  VKSORD01.XXX-STAT = KS0NM001.KS0NM-KS-STATUS[KS0NWIXM];
  VKSORD01.KS-FOOT-NOTE-NBR = KS0NM001.KS0NM-FOOT-NOTE-NBR[KS0NWIXM];
  ;
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE KS0NM001.XXXCURDT TO VKSORD01.ZZ-CHNG-DT;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
  VKSORD01.ZZ-CHNG-DT = VGVar.currentGregorianDate;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
  VKSORD01.ZZ-CHNG-HHMM = 1200;
  call "VKSORD01" ("U ", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "KS0N-212"; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "KS0N-212"; /* Process name*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
end // end KS0N-26180

// Check for ord nbr status chg
Function KS0N-26190()
  /* ------------------------------------------------------------*/
  /* Determine if the order number's status has been changed.*/
  /* If it has, reflect that change in all hts nbr statuses*/
  /* for that order number.*/
  /* ------------------------------------------------------------*/
  if (KS0NW00.KS0NW-SAVE-DIR-STAT != KS0NM001.KS0NM-DIRECTIVE-STATUS)
    if (KS0NM001.KS0NM-DIRECTIVE-STATUS != "I" && 
    KS0NM001.KS0NM-DIRECTIVE-STATUS != "A")
      converseLib.validationFailed(19); /* invalid status*/
      set KS0NM001.KS0NM-DIRECTIVE-STATUS cursor, bold, white;
    else
      KS0NW01.KS0NWTSP = 1;
      while (KS0NW01.KS0NWTSP <= KS0NW01.TA5TSQIX)
        KS0N-26192(); /* read page and update data*/
        KS0NW01.KS0NWTSP = KS0NW01.KS0NWTSP + 1;
      end
      KS0NW01.KS0NWTSP = KS0NW01.KS0NWTSP + 1;
    end
    ;
    if (KS0NW00.KS0NW-SAVE-DIR-STAT != KS0NM001.KS0NM-DIRECTIVE-STATUS
    )
      if (KS0NM001.KS0NM-DIRECTIVE-STATUS != "I" && 
      KS0NM001.KS0NM-DIRECTIVE-STATUS != "A")
        converseLib.validationFailed(19); /* invalid status*/
        set KS0NM001.KS0NM-DIRECTIVE-STATUS cursor, bold, white;
      else
        KS0NW00.KS0NW-SAVE-DIR-STAT = KS0NM001.KS0NM-DIRECTIVE-STATUS;
      end
    end
    ;
    KS0NW01.KS0NWTSP = 1;
  end
  ;
  return;
  ;
end // end KS0N-26190

// Format the selected data
Function KS0N-26192()
  /* ------------------------------------------------------------*/
  /* Obtain the next page from temporary storage.*/
  /* Format the plan carrier data in the map.*/
  /* ------------------------------------------------------------*/
  KS0N-22200(); /* Obtain temporary storage page*/
  ;
  set KS0NM001.KS0NM-CUST-ORDER-NBR protect;
  KS0NW01.KS0NWIXM = 1; /* Initialize line index*/
  ;
  while (KS0NW01.KS0NWIXM <= 28 /* Until end of lines*/
   && KS0NW02.KS0NW-CUST-ORDER-NBR[KS0NWIXM] != " ")
                                   /* Or last line of data*/
    ;
    if (KS0NW02.KS0NW-HTS-CPTR-CD[KS0NWIXM] > " "
     && converseVar.validationMsgNum == 0
     && KS0NW02.KS0NW-STATUS[KS0NWIXM] != 
    KS0NM001.KS0NM-DIRECTIVE-STATUS)
      set VKSORD01 empty;
      KS0N-26195();
      if (converseVar.validationMsgNum == 0)
        KS0NW00.KS0NW-MSG-FL = "Y"; /* update msg*/
        KS0NW00.KS0NW-FUNCTION = "I"; /* change to inquiry*/
        KS0NW00.KS0NW-MAP = "2"; /* map*/
      else
        KS0NW00.KS0NW-MSG-FL = "N"; /* update msg*/
        KS0NW00.KS0NW-FUNCTION = "U"; /* change to inquiry*/
        KS0NW00.KS0NW-MAP = "2"; /* map*/
        KS0NW01.KS0NWTSP = KS0NW01.TA5TSQIX;
        return;
      end
    end
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
end // end KS0N-26192

// update hts status
Function KS0N-26195()
  /* ****************************************************************/
  /* Move update fields for updating hts number.                   */
  /* If not available, return an error message to the user.        */
  /* If any other, indicate system error.                          */
  /* ****************************************************************/
  ;
  VKSORD01.KS-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
  VKSORD01.XXX-STAT = KS0NM001.KS0NM-DIRECTIVE-STATUS;
  VKSORD01.KS-HTS-CPTR-CD = KS0NW02.KS0NW-HTS-CPTR-CD[KS0NWIXM];
  VKSORD01.KS-HTS-HDG-CD = KS0NW02.KS0NW-HTS-HDG-CD[KS0NWIXM];
  VKSORD01.KS-HTS-1ST-SHDG-CD = KS0NW02.KS0NW-HTS-1ST-SHDG-CD[KS0NWIXM];
  VKSORD01.KS-HTS-2ND-SHDGCD1 = KS0NW02.KS0NW-HTS-2ND-SHDGCD1[KS0NWIXM];
  VKSORD01.KS-HTS-STAT-CD = KS0NW02.KS0NW-HTS-STAT-CD[KS0NWIXM];
  VKSORD01.ZZ-CHNG-CNT = KS0NW02.KS0NW-CHNG-CNT[KS0NWIXM];
  VKSORD01.KS-FOOT-NOTE-NBR = KS0NW02.KS0NW-FOOT-NOTE-NBR[KS0NWIXM];
  ;
  ;
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE KS0NM001.XXXCURDT TO VKSORD01.ZZ-CHNG-DT;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
  VKSORD01.ZZ-CHNG-DT = VGVar.currentGregorianDate;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
  VKSORD01.ZZ-CHNG-HHMM = 1200;
  call "VKSORD01" ("U ", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "KS0N-212"; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = "KS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "KS0N-26190"; /* Process name*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
end // end KS0N-26195

// Process valid entry
Function KS0N-27000()
  /* *******************************************************************/
  /* This process will process the valid request based on function.  */
  /* All updates occurred in the verification step for function=U    */
  /* *******************************************************************/
  ;
  if (converseVar.validationMsgNum == 0)
    KS0N-16200(); /* display popup or go to inquiry screen*/
  else
    exit stack;
  end
  ;
end // end KS0N-27000

// Footnote Inquiry/Change
Function KS0N-30000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display the change map.*/
  /* Processing always returns to the top of this process and*/
  /* falls through subordinate processes until an error is found*/
  /* or a valid request is processed.  Sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Verify scroll request*/
  /* 5) Reset highlighted fields to normal intensity.*/
  /* 6) Verify the data that was entered.*/
  /* 7) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0N-31000(); /* Obtain the data to display*/
  ;
  KS0N-32000(); /* Format and display the map*/
  ;
  KS0N-33000(); /* Check attention identifier*/
  ;
  KS0N-34000(); /* Verify scroll request*/
  ;
  KS0N-35000(); /* Reset highlighted fields*/
  ;
  KS0N-36000(); /* Verify the entered data*/
  ;
  /* RFORM KS0N-66000;              /* Process valid input request*/
  ;
end // end KS0N-30000

// Obtain the data to display
Function KS0N-31000()
  /* ------------------------------------------------------------*/
  /* If data was not requested, return to the previous process.*/
  /* Purge any existing queue in temporary storage.*/
  /* Select and open the cursor for the set to be formatted.*/
  /* Fetch and format the data in the page.*/
  /* If the page is full, add the page to the storage queue.*/
  /* At end of rows, add any partial page to the queue.*/
  /* At end of rows, close the selected set cursor.*/
  /* If no data found, display error message and return to*/
  /* the previous process.*/
  /* Indicate that the request for data was completed.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0NW01.KS0NWSW1 == "N")
    return;
  end
  ;
  KS0NW01.KS0NW-DEFAULT-FOOTNOTE = "N";
  ;
  KS0N-31100(); /* Purge any temporary storage*/
  ;
  KS0N-31200(); /* Select set and open the cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    set KS0NW04 empty; /* Clear temporary storage record*/
    KS0NW01.KS0NWIXM = 1; /* Initialize display line number*/
    KS0NW01.KS0NWIX2 = 1; /* Initialize display line number*/
    KS0NW01.KS0NW-DEFAULT-FOOTNOTE = "Y"; /* request default*/
    KS0NW01.KS0NWSWC = "N"; /* Initialize end of file switch*/
    KS0NW01.KS0NWSWP = "N"; /* Initialize problem found switch*/
    while (KS0NW01.KS0NWSWC == "N" /* Until end of set or problem found*/
     && KS0NW01.KS0NWSWP == "N") /* or until a problem was found*/
      KS0N-31300(); /* Obtain data and format page*/
      if (KS0NW01.KS0NWSWC == "Y")
        if (KS0NW01.KS0NW-DEFAULT-FOOTNOTE == "Y") /* no ftnts for this ord*/
          KS0NW00.KS0NW-FUNCTION = "U";
        end
      end
      KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1; /* Increment index*/
      if (KS0NW01.KS0NWIXM > 3) /* Page is full*/
        KS0N-31400(); /* Add page to temporary storage*/
      end
      if (KS0NW01.KS0NWSWC == "Y") /* end of set was found*/
        if (KS0NW01.KS0NWIXM >= 1) /* and some of the page was formatted*/
          KS0N-31400(); /* Add page to temporary storage*/
        end
        KS0NW01.KS0NWTS1 = 1; /* Initialize page number*/
        KS0NW01.KS0NWSW1 = "N"; /* Request for data completed*/
        KS0N-31500(); /* Close the selected set cursor*/
      end
    end
  end
  ;
  if (KS0NW01.KS0NWTS1 == 0) /* No data to display*/
    KS0NM001.XXXPRCNM = "31000"; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    return; /* Return to previous process*/
  end
  ;
  ;
  ;
end // end KS0N-31000

// Purge any temporary storage
Function KS0N-31100()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = "KS0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  call "TA0050" (KS0NW04, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "31100"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0NM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  KS0NW01.KS0NWTS1 = 0; /* Reset current page number*/
  KS0NW01.KS0NW-QIX = 0; /* Reset highest page number*/
  ;
  ;
end // end KS0N-31100

// Select set and open cursor
Function KS0N-31200()
  /* ------------------------------------------------------------*/
  /* Select the set of table rows.*/
  /* If not available, return an error message to the user.*/
  /* If any other, indicate system error.*/
  /* ------------------------------------------------------------*/
  ;
  VKSFNT01.KS-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
  ;
  call "VKSFNT01" ("S1", SQLCA, VKSFNT01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "31200"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "KS0NM002"; /* Map name*/
    TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0NM001.XXXPRCNM = "31200"; /* Process name*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end KS0N-31200

// Fetch next row and store
Function KS0N-31300()
  /* ------------------------------------------------------------*/
  /* Fetch the next row from the selected set of rows.*/
  /* If end of file, set end of file switch.*/
  /* If any error, indicate a system error.*/
  /* Format the data in the temporary storage display line.*/
  /* ------------------------------------------------------------*/
  ;
  call "VKSFNT01" ("N1", SQLCA, VKSFNT01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    KS0NW01.KS0NWSWC = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found from fetch*/
      KS0NW01.KS0NW-DEFAULT-FOOTNOTE = "N";
      KS0NW04.KS0NW-FTNT-GROUP[KS0NWIXM] = VKSFNT01.VKSFNT01-GROUP;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      KS0NW01.KS0NWSWP = "Y"; /* Indicate problem*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "31300"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "KS0NM002"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM002.XXXPRCNM = "31300"; /* Process name*/
      ;
    end
  end
  ;
  ;
  ;
end // end KS0N-31300

// Add page to temporary storage
Function KS0N-31400()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0NW04.KS0NWLEN = 447; /* Temporary storage length*/
  TA5REC.TA5APPID = "KS0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  call "TA0050" (KS0NW04, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/
  ;
  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    KS0NW01.KS0NW-QIX = TA5REC.TA5TSQIX; /* Highest page number*/
    KS0NW01.KS0NWIXM = 1; /* Reset display line number*/
    set KS0NW04 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "31400"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0NM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0NM001.XXXPRCNM = "31400"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    KS0NW01.KS0NWSWP = "Y"; /* indicate that a problem has been*/
                                   /* found*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
end // end KS0N-31400

// Close selected set cursor
Function KS0N-31500()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* If any error, indicate a system error.*/
  /* ------------------------------------------------------------*/
  ;
  call "VKSFNT01" ("C1", SQLCA, VKSFNT01) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "31500"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "KS0NM002"; /* Map name*/
    TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0NM001.XXXPRCNM = "31500"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
end // end KS0N-31500

// Format and display the map
Function KS0N-32000()
  /* ------------------------------------------------------------*/
  /* Format the map heading.*/
  /* If no error to display, format the selected data.*/
  /* Indicate sound audible alarm for any error.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || converseVar.validationMsgNum == 6) /* or fastpath error*/
    set KS0NM002 initial; /* Clear map output area*/
    KS0NM002.KS0NM-CUST-ORDER-NBR = KS0NM001.KS0NM-CUST-ORDER-NBR;
    KS0NM002.KS0NM-DIRECTIVE-STATUS = KS0NM001.KS0NM-DIRECTIVE-STATUS;
    if (KS0NM001.KS0NM-DIRECTIVE-STATUS == "A")
      KS0NM002.KS0NM-DSTATUS-DESC = "ACTIVE";
    else
      KS0NM002.KS0NM-DSTATUS-DESC = "INACTIVE";
    end
    KS0N-32100(); /* Format the selected data*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* No error message to display*/
    set KS0NM002 alarm; /* Indicate sound alarm*/
  end
  ;
  if (KS0NW01.KS0NWMFL == "Y") /* If update message to display*/
    converseLib.validationFailed(1);
    set KS0NM002 alarm; /* Indicate sound alarm*/
    KS0NM001.XXXPRCNM = "KS0N-32000"; /* Process name*/
    KS0NW01.KS0NWMFL = "N"; /* Reset message flag*/
  end
  ;
  if (COMMAREA.CACHGFL == "N"
   || COMMAREA.CAADDFL == "N")
    KS0N-32130();
  end
  KS0NM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  KS0NW01.KS0NWSW1 = "Y"; /* move 'y' to request for data*/
  ;
  converse KS0NM002 ;
  ;
end // end KS0N-32000

// Format the selected data
Function KS0N-32100()
  /* ------------------------------------------------------------*/
  /* Obtain the next page from temporary storage.*/
  /* Format the plan carrier data in the map.*/
  /* ------------------------------------------------------------*/
  ;
  KS0NW01.KS0NWDFL = "N"; /* Initialize change flag*/
  ;
  if (KS0NW01.KS0NW-QIX == 0) /* if no data to display*/
    return; /* do not format data*/
  end
  ;
  while (KS0NW01.KS0NWDFL == "N") /* While delete save key not found*/
    KS0N-32110(); /* Obtain temporary storage page*/
    KS0N-32120(); /* Check for key on page*/
  end
  ;
  if (KS0NW01.KS0NWTS1 != TA5REC.TA5TSQIX) /* Desired page not current*/
    KS0N-32110(); /* Obtain temporary storage page*/
  end
  set KS0NM002.KS0NMPGL skip; /* Display "PAGE" literal*/
  set KS0NM002.KS0NMOFL skip; /* Display "OF" literal*/
  ;
  KS0NM002.KS0NMTSP = KS0NW01.KS0NWTS1; /* Current page number*/
  KS0NM002.TA5TSQIX = KS0NW01.KS0NW-QIX; /* Highest page number*/
  ;
  KS0NW01.KS0NWIXM = 1; /* Initialize line index*/
  ;
  while (KS0NW01.KS0NWIXM <= 3) /* Until end of lines*/
                                   /* Or last line of data*/

    KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] = KS0NW04.KS0NW-FOOT-NOTE-NBR[KS0NWIXM];
    KS0NM002.KS0NM-FOOT-NOTE-DESC1[KS0NWIXM] = KS0NW04.KS0NW-FOOT-NOTE-DESC1[KS0NWIXM];
    KS0NM002.KS0NM-FOOT-NOTE-DESC2[KS0NWIXM] = KS0NW04.KS0NW-FOOT-NOTE-DESC2[KS0NWIXM];
    KS0NM002.KS0NM-FOOT-NOTE-DESC3[KS0NWIXM] = KS0NW04.KS0NW-FOOT-NOTE-DESC3[KS0NWIXM];
    KS0NM002.KS0NM-PRBM-CD[KS0NWIXM] = KS0NW04.KS0NW-PRBM-CD[KS0NWIXM];
    ;
    ;
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  if (KS0NW01.KS0NW-DEFAULT-FOOTNOTE == "Y")
    KS0NM002.KS0NM-FOOT-NOTE-NBR[1] = "   1";
    KS0NM002.KS0NM-FOOT-NOTE-DESC1[1] = "CVD APPLICABLE";
  end
  ;
  if (KS0NW00.KS0NW-FUNCTION == "I")
    KS0NM002.KS0NM-SCREEN = "INQUIRY SCREEN"; /* update screen*/
                                   /* title*/
    KS0N-32130(); /* set fields read-only*/
  else
    KS0NM002.KS0NM-SCREEN = "CHANGE SCREEN"; /* update screen*/
                                   /* title*/
    set KS0NM002.KS0NM-UPDATE invisible;
  end
  ;
  ;
end // end KS0N-32100

// Read temporary storage page
Function KS0N-32110()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  KS0NW04.KS0NWLEN = 447; /* Temporary storage length*/
  TA5REC.TA5APPID = "KS0N"; /* Application identification*/
  if (KS0NW01.KS0NWTS1 >= KS0NW01.KS0NW-QIX)
    TA5REC.TA5TSQIX = KS0NW01.KS0NW-QIX;
    KS0NW01.KS0NWTS1 = KS0NW01.KS0NW-QIX;
  else
    TA5REC.TA5TSQIX = KS0NW01.KS0NWTS1; /* Page number*/
  end
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  call "TA0050" (KS0NW04, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "KS0N-32110"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0NM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0NM001.XXXPRCNM = "KS0N-321"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end KS0N-32110

// Check for key on page
Function KS0N-32120()
  /* ------------------------------------------------------------*/
  /* Check to see if the delete save key is located on this*/
  /* page. If found position cursor on key or position less than*/
  /* the key if not found.*/
  /* -------------------------------------------------------------*/
  ;
  ;
         /* Check for positioning cursor on key with beginning letter*/
         /* to match.*/
  ;
  if (KS0NW01.KS0NWSW1 == "N")
    set KS0NM002.KS0NM-FOOT-NOTE-NBR cursor; /* Initial cursor*/
    KS0NW01.KS0NWDFL = "Y"; /* Indicate page was found*/
    return; /* Return to previous process*/
  end
  ;
  KS0NW01.KS0NWIXM = 1;
  if (KS0NW01.KS0NWTS1 == KS0NW01.KS0NW-QIX) /* Last page*/
    KS0NW01.KS0NWIXM = 01; /* Set index to last entry*/
    KS0NW01.KS0NWDFL = "Y"; /* Indicate page was found*/
    KS0NW01.KS0NWDSK = " "; /* Reset starting carrier*/
    KS0NW01.KS0NMNCD = " "; /* Reset saved carrier code*/
  else
    KS0NW01.KS0NWTS1 = KS0NW01.KS0NWTS1 + 1; /* Increment page*/
  end
  ;
  ;
end // end KS0N-32120

// set map for view only
Function KS0N-32130()
  /* ------------------------------------------------------------*/
  /* Set fields read-only.*/
  /* ------------------------------------------------------------*/
  ;
  KS0NW01.KS0NWIXM = 1;
  ;
  while (KS0NW01.KS0NWIXM <= 3) /* Until end of lines*/
    set KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] skip, blue, noHighLight;
    set KS0NM002.KS0NM-FOOT-NOTE-DESC1[KS0NWIXM] skip, blue, noHighLight;
    set KS0NM002.KS0NM-FOOT-NOTE-DESC2[KS0NWIXM] skip, blue, noHighLight;
    set KS0NM002.KS0NM-FOOT-NOTE-DESC3[KS0NWIXM] skip, blue, noHighLight;
    set KS0NM002.KS0NM-PRBM-CD[KS0NWIXM] skip, blue, noHighLight;
    ;
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1; /* Increment line index*/
  end
  ;
  set KS0NM002.KS0NM-CUST-ORDER-NBR cursor;
  ;
end // end KS0N-32130

// Check attention identifier
Function KS0N-33000()
  /* ------------------------------------------------------------*/
  /* Check attention identifier used to invoke the transaction.*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* If transfer failed, display returned error message.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    KS0NW00.KS0NW-MAP = "3";
    KS0NW00.KS0NW-FUNCTION = "I";
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (KS0NM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      KS0N-11100(); /* Purge temporary storage*/
      COMMAREA.CATOAP = KS0NM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = KS0NM001.CAITEM; /* Application data*/
      XSKS-S0001(); /* Exit to another application*/
      KS0NW01.KS0NWSWR = "Y"; /* Set request for data switch*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set KS0NM001.CATOAP cursor, modified, bold; /* Highlight*/
    KS0NM001.XXXPRCNM = "KS0N330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    if (KS0NW00.KS0NW-FUNCTION == "U")
      KS0NW00.KS0NW-FUNCTION = "I ";
      KS0NW00.KS0NW-MAP = "3";
    else
      KS0NW00.KS0NW-MAP = KS0NW00.KS0NW-LAST-MAP;
      KS0NW00.KS0NW-FUNCTION = KS0NW00.KS0NW-LAST-FUNCTION;
    end
    COMMAREA.CAITEM = " "; /* clear item field*/
    KS0NW00.KS0NW-FOOTNOTES = "N";
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF4 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    /* GET FIX*/
    ;
    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "KS0NM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end
    ;
    KS0N-11100(); /* Purge any temporary storage*/
    XSKS-S0001(); /* Exit to another application*/
    KS0NM001.XXXPRCNM = "KS0N-330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey is pa2    /* PA2 was pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
  )                                 
    KS0NM001.XXXPRCNM = "KS0N-330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    return;
  end /* ;*/
  ;
  if (converseVar.eventKey is pf14) /* change map requested*/
    if (COMMAREA.CACHGFL == "N" /* and user chg not authorized*/
     || KS0NW00.KS0NW-FUNCTION == "U") /* or currently in chg map*/
      KS0NM001.XXXPRCNM = "KS0N330"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      return; /* Exit to redisplay map*/
    else
      KS0NW00.KS0NW-MAP = "3";
      KS0NW00.KS0NW-FUNCTION = "U";
      exit stack; /* Exit to redisplay map*/
    end
  end
  ;
end // end KS0N-33000

// Verify scroll request
Function KS0N-34000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* Determine whether a valid request to scroll was entered.*/
  /* If not a scroll request, verify any changed data.*/
  /* If any errors were found, exit to redisplay the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0NM001.CAITEM > " ") /* Application data was entered*/
    set KS0NM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    KS0NM001.XXXPRCNM = "KS0N240"; /* Process name*/
  end
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    KS0NW01.KS0NWMFL = "N"; /* Clear message flag*/
    KS0N-34100(); /* Verify scroll request*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    KS0NW01.KS0NWSW1 = "N"; /* move 'no' to request for info switch*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  KS0NW01.KS0NWIFL = "N"; /* Initialize inquiry flag*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    KS0NW01.KS0NWTS1 = KS0NW01.KS0NWTS1 - 1; /* Decrement page number*/
    KS0NW01.KS0NWSW1 = "N"; /* move 'no' to request for info switch*/
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    KS0NW01.KS0NWTS1 = KS0NW01.KS0NWTS1 + 1; /* Increment page number*/
    KS0NW01.KS0NWSW1 = "N"; /* move 'no' to request for info switch*/
    exit stack;
  end
  ;
  ;
end // end KS0N-34000

// Verify scroll request
Function KS0N-34100()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0NW01.KS0NWTS1 == 1)      /* and no previous pages*/
    KS0NM001.XXXPRCNM = "KS0N341"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0NW01.KS0NWTS1 >= KS0NW01.KS0NW-QIX) /* and no more pages*/
    KS0NM001.XXXPRCNM = "KS0N341"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end
  ;
end // end KS0N-34100

// Format the selected data
Function KS0N-35000()
  /* ***************************************************************/
  /* reset highlighted fields.  if map function is inquiry,      */
  /* only reset order nbr field.  if function is change/update,  */
  /* reset all enterable fields.                                 */
  /* ***************************************************************/
  if (KS0NW00.KS0NW-FUNCTION == "I")
    set KS0NM002.KS0NM-CUST-ORDER-NBR initialAttributes;
    KS0N-32130(); /* set fields read-only*/
    set KS0NM002.KS0NM-UPDATE initialAttributes;
  else
    set KS0NM002.KS0NM-CUST-ORDER-NBR initialAttributes;
    KS0NW01.KS0NWIXM = 1;
    ;
    while (KS0NW01.KS0NWIXM <= 3) /* Until end of lines*/
                                   /* Or last line of data*/

      set KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] initialAttributes;
      set KS0NM002.KS0NM-FOOT-NOTE-DESC1[KS0NWIXM] initialAttributes;
      set KS0NM002.KS0NM-FOOT-NOTE-DESC2[KS0NWIXM] initialAttributes;
      set KS0NM002.KS0NM-FOOT-NOTE-DESC3[KS0NWIXM] initialAttributes;
      ;
      KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1; /* Increment line index*/
      ;
    end
    set KS0NM002.KS0NM-UPDATE invisible;
  end
  ;
  ;
end // end KS0N-35000

// Verify changed data,process
Function KS0N-36000()
  /* ------------------------------------------------------------*/
  /* Update or add new ftnt number depending on where the row was*/
  /* selected and where the row was blank or overwritten old number*/
  /* ------------------------------------------------------------*/
  ;
  ;
  KS0NW01.KS0NW-SAVE-FTNT-PAGE = KS0NM002.KS0NMTSP;
  KS0NW01.KS0NWIXM = 1;
  while (KS0NW01.KS0NWIXM <= 3 /* check each line*/
   && converseVar.validationMsgNum == 0) /* unless an error is found*/
    if (KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] != 
    KS0NW04.KS0NW-FOOT-NOTE-NBR[KS0NWIXM] || 
    KS0NM002.KS0NM-FOOT-NOTE-DESC1[KS0NWIXM] != 
    KS0NW04.KS0NW-FOOT-NOTE-DESC1[KS0NWIXM] || 
    KS0NM002.KS0NM-FOOT-NOTE-DESC2[KS0NWIXM] != 
    KS0NW04.KS0NW-FOOT-NOTE-DESC2[KS0NWIXM] || 
    KS0NM002.KS0NM-FOOT-NOTE-DESC3[KS0NWIXM] != 
    KS0NW04.KS0NW-FOOT-NOTE-DESC3[KS0NWIXM] || 
    KS0NM002.KS0NM-PRBM-CD[KS0NWIXM] != 
    KS0NW04.KS0NW-PRBM-CD[KS0NWIXM])
      ;
      KS0NW00.KS0NW-FOOT-NOTE-NBR = KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM];
      KS0NW00.KS0NW-FOOT-NOTE-DESC1 = KS0NM002.KS0NM-FOOT-NOTE-DESC1[KS0NWIXM];
      KS0NW00.KS0NW-FOOT-NOTE-DESC2 = KS0NM002.KS0NM-FOOT-NOTE-DESC2[KS0NWIXM];
      KS0NW00.KS0NW-PRBM-CD = KS0NM002.KS0NM-PRBM-CD[KS0NWIXM];
      KS0NW00.KS0NW-FOOT-NOTE-DESC3 = KS0NM002.KS0NM-FOOT-NOTE-DESC3[KS0NWIXM];
      KS0NW00.KS0NW-SAVE-ZZ-CHNG-CNT = KS0NW04.KS0NW-CHNG-CNT[KS0NWIXM];
      if (KS0NW04.KS0NW-FOOT-NOTE-NBR[KS0NWIXM] == "    "
       && KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] != "    ")
        KS0N-36150(); /* Right justify footnote nbr*/
        KS0N-36140(); /* verify new number*/
        if (converseVar.validationMsgNum == 0)
          KS0N-36110(); /* add new footnote nbr*/
        end
        KS0NW01.KS0NWMFL = "Y"; /* update flag*/
        KS0NW00.KS0NW-MAP = "3"; /* change to inquiry map*/
        KS0NW00.KS0NW-FUNCTION = "I";
      else
        if (KS0NW00.KS0NW-FOOT-NOTE-NBR == "    " && 
        KS0NW04.KS0NW-FOOT-NOTE-NBR[KS0NWIXM] > "    ")

          KS0N-36120(); /* delete old footnote nbr*/
          KS0NW01.KS0NWMFL = "Y"; /* update flag*/
          KS0NW00.KS0NW-MAP = "3"; /* change to inquiry map*/
          KS0NW00.KS0NW-FUNCTION = "I";
        else
          if (KS0NW00.KS0NW-FOOT-NOTE-NBR != "    ")
            if (KS0NW00.KS0NW-FOOT-NOTE-NBR !=  /* new*/
            KS0NW04.KS0NW-FOOT-NOTE-NBR[KS0NWIXM])
              KS0N-36150(); /* Right justify footnote nbr*/
              KS0N-36140(); /* ck for dup footnote nbr*/
              if (converseVar.validationMsgNum == 0)
                KS0N-36110(); /* add new footnote nbr*/
                if (SQLCA.VAGen_SQLCODE == 0)
                  KS0N-36120(); /* delete old footnote nbr*/
                end
                KS0NW01.KS0NWMFL = "Y"; /* update flag*/
                KS0NW00.KS0NW-MAP = "3"; /* change to inquiry map*/
                KS0NW00.KS0NW-FUNCTION = "I";
              end
            else
              KS0N-36130(); /* update footnote description*/
                                   /* AND update feature code*/
              KS0NW01.KS0NWMFL = "Y"; /* update flag*/
              KS0NW00.KS0NW-MAP = "3"; /* change to inquiry map*/
              KS0NW00.KS0NW-FUNCTION = "I";
            end
          end
        end
      end
      KS0NW01.KS0NWSW1 = "Y";
    end
    KS0NW01.KS0NWIXM = KS0NW01.KS0NWIXM + 1;
  end
  ;
  return;
  ;
end // end KS0N-36000

// add new ftnt number
Function KS0N-36110()
  /* ------------------------------------------------------------*/
  /* Select the set of table rows.*/
  /* If not available, return an error message to the user.*/
  /* If any other, indicate system error.*/
  /* ------------------------------------------------------------*/
  VKSFNT01.KS-CUST-ORDER-NBR = KS0NM002.KS0NM-CUST-ORDER-NBR;
  VKSFNT01.KS-FOOT-NOTE-NBR = KS0NW00.KS0NW-FOOT-NOTE-NBR;
  VKSFNT01.KS-FOOT-NOTE-DESC1 = KS0NW00.KS0NW-FOOT-NOTE-DESC1;
  VKSFNT01.KS-FOOT-NOTE-DESC2 = KS0NW00.KS0NW-FOOT-NOTE-DESC2;
  VKSFNT01.KS-FOOT-NOTE-DESC3 = KS0NW00.KS0NW-FOOT-NOTE-DESC3;
  VKSFNT01.YKP-PRBM-CD = KS0NW00.KS0NW-PRBM-CD;
  VKSFNT01.ZZ-CHNG-CNT = KS0NW00.KS0NW-SAVE-ZZ-CHNG-CNT;
  ;
  /*  */
  /* **************************** Y2K OUT BEGIN *****************************/
  /*  */
  /* MOVE KS0NM002.XXXCURDT TO VKSFNT01.ZZ-SDT;*/
  /* MOVE KS0NM002.XXXCURDT TO VKSFNT01.ZZ-CHNG-DT;*/
  /*  */
  /* **************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
  VKSFNT01.ZZ-SDT = VGVar.currentGregorianDate;
  VKSFNT01.ZZ-CHNG-DT = VGVar.currentGregorianDate;
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
  VKSFNT01.ZZ-CHNG-HHMM = 1200;
  call "VKSFNT01" ("A ", SQLCA, VKSFNT01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "36110"; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = "KS0NM002"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "36110"; /* Process name*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
end // end KS0N-36110

// delete old ftnt number
Function KS0N-36120()
  /* ------------------------------------------------------------*/
  /* Select the set of table rows.*/
  /* If not available, return an error message to the user.*/
  /* If any other, indicate system error.*/
  /* ------------------------------------------------------------*/
  VKSFNT01.KS-CUST-ORDER-NBR = KS0NM002.KS0NM-CUST-ORDER-NBR;
  VKSFNT01.KS-FOOT-NOTE-NBR = KS0NW04.KS0NW-FOOT-NOTE-NBR[KS0NWIXM];
  ;
  call "VKSFNT01" ("D ", SQLCA, VKSFNT01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "36120"; /* Process name*/
      TA1REC.TA1LOC = "DELETE A TABLE ROW";
      TA1REC.TA1MAP = "KS0NM002"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM002.XXXPRCNM = "36120"; /* Process name*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
end // end KS0N-36120

// update ftnt number
Function KS0N-36130()
  /* ------------------------------------------------------------*/
  /* Select the set of table rows.*/
  /* If not available, return an error message to the user.*/
  /* If any other, indicate system error.*/
  /* ------------------------------------------------------------*/
  VKSFNT01.KS-CUST-ORDER-NBR = KS0NM002.KS0NM-CUST-ORDER-NBR;
  VKSFNT01.KS-FOOT-NOTE-NBR = KS0NW00.KS0NW-FOOT-NOTE-NBR;
  VKSFNT01.KS-FOOT-NOTE-DESC1 = KS0NW00.KS0NW-FOOT-NOTE-DESC1;
  VKSFNT01.KS-FOOT-NOTE-DESC2 = KS0NW00.KS0NW-FOOT-NOTE-DESC2;
  VKSFNT01.KS-FOOT-NOTE-DESC3 = KS0NW00.KS0NW-FOOT-NOTE-DESC3;
  VKSFNT01.YKP-PRBM-CD = KS0NW00.KS0NW-PRBM-CD;
  VKSFNT01.ZZ-CHNG-CNT = KS0NW04.KS0NW-CHNG-CNT[KS0NWIXM];
  ;
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* MOVE KS0NM002.XXXCURDT TO VKSFNT01.ZZ-CHNG-DT;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
  VKSFNT01.ZZ-CHNG-DT = VGVar.currentGregorianDate;
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
  VKSFNT01.ZZ-CHNG-HHMM = 1200;
  call "VKSFNT01" ("U ", SQLCA, VKSFNT01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "36130"; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = "KS0NM002"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0NM001.XXXPRCNM = "36130"; /* Process name*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
end // end KS0N-36130

// chk for dup footnote nbr
Function KS0N-36140()
  /* ------------------------------------------------------------*/
  /* Determine if the entered footnote number already exists.*/
  /* Check working-storage pages.*/
  /* If it exists, error on duplicate nbr.  Else, continue.*/
  /* ------------------------------------------------------------*/
  KS0NW01.KS0NWTS1 = 1;
  while (KS0NW01.KS0NWTS1 <= KS0NW01.KS0NW-QIX)
    KS0N-36145(); /* read page and update data*/
    KS0NW01.KS0NWTS1 = KS0NW01.KS0NWTS1 + 1;
  end
  ;
  KS0NW01.KS0NWTS1 = KS0NW01.KS0NW-SAVE-FTNT-PAGE; /* ; /* restore previous page*/
  KS0N-32110(); /* Obtain temporary storage page*/
  ;
  ;
end // end KS0N-36140

// Check each page for dup ftnt
Function KS0N-36145()
  /* ------------------------------------------------------------*/
  /* Obtain the next page from temporary storage.*/
  /* Format the plan carrier data in the map.*/
  /* ------------------------------------------------------------*/
  KS0N-32110(); /* Obtain temporary storage page*/
  ;
  KS0NW01.KS0NWIX2 = 1; /* Initialize line index*/
  ;
  while (KS0NW01.KS0NWIX2 <= 3) /* Until end of lines*/
                                   /* Or last line of data*/
    ;
    if (KS0NW04.KS0NW-FOOT-NOTE-NBR[KS0NWIX2] > " "
     && converseVar.validationMsgNum == 0)
      if (KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] == 
      KS0NW04.KS0NW-FOOT-NOTE-NBR[KS0NWIX2])
        ;
        converseLib.validationFailed(148); /* duplicate footnote nbr*/
        set KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] cursor, bold;
        KS0NW01.KS0NWTS1 = KS0NW01.KS0NW-SAVE-FTNT-PAGE; /* ; /* restore previous page*/
        KS0N-32110(); /* Obtain temporary storage page*/
        KS0NW01.KS0NWSW1 = "N";
        exit stack;
      end
    end
    KS0NW01.KS0NWIX2 = KS0NW01.KS0NWIX2 + 1; /* Increment line index*/
    ;
  end
  ;
  ;
end // end KS0N-36145

// Right justify footnote nbr
Function KS0N-36150()
  /* *************************************************************/
  /* right justify foot note number*/
  /* *************************************************************/
  KS0NW00.KS0NW-FNT-NBR1 = KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM];
  if (KS0NM002.KS0NM-FOOT-NOTE-NBR > " ")
    if (KS0NW00.KS0NW-FNT-BYTE[2] == " ") /* right justify foot note nbr*/
      KS0NW-FNT-BYTE[2] = KS0NW00.KS0NW-FNT-BYTE[1];
      KS0NW-FNT-BYTE[1] = " ";
    end
    if (KS0NW00.KS0NW-FNT-BYTE[3] == " ")
      KS0NW-FNT-BYTE[3] = KS0NW00.KS0NW-FNT-BYTE[2];
      KS0NW-FNT-BYTE[2] = KS0NW00.KS0NW-FNT-BYTE[1];
      KS0NW-FNT-BYTE[1] = " ";
      KS0NW-FNT-BYTE[2] = " ";
    end
    if (KS0NW00.KS0NW-FNT-BYTE[4] == " ")
      KS0NW-FNT-BYTE[4] = KS0NW00.KS0NW-FNT-BYTE[3];
      KS0NW-FNT-BYTE[3] = KS0NW00.KS0NW-FNT-BYTE[2];
      KS0NW-FNT-BYTE[2] = KS0NW00.KS0NW-FNT-BYTE[1];
      KS0NW-FNT-BYTE[1] = " ";
      KS0NW-FNT-BYTE[2] = " ";
      KS0NW-FNT-BYTE[3] = " ";
    end
  end
  KS0NM002.KS0NM-FOOT-NOTE-NBR[KS0NWIXM] = KS0NW00.KS0NW-FNT-NBR1;
end // end KS0N-36150

// load table for use in pop-up
Function XP0I001()
  /* -----------------------------------------------------*/
  /* load table for use in pop-up                        */
  /* -----------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
    /* 1. initialize work table*/
   /* ------------------------------------------------------------*/
  ;
  set XP0IW02 empty; /* init working storage*/
  XP0IW02.XP0IWCT1 = 1; /* init index*/
  XP0IW02.XP0IWCT2 = 1; /* init index*/
  XP0IW02.XP0IWSIX = 0; /* init index*/
  XP0IW02.XP0IWPIX = 0; /* init index*/
  XP0IW01.XP0IWIX1 = 1; /* init table index*/
  while (XP0IWIX1 <= 25) /* init table fields*/
  /* MOVE ' ' TO XP0IW01.XP0IWSEL(XP0IWIX1);*/
    XP0IW01.XP0IW-CUST-ORDER-NBR[XP0IWIX1] = " ";
    XP0IW01.XP0IW-DIRECTIVE-STATUS[XP0IWIX1] = " ";
    XP0IWIX1 = XP0IWIX1 + 1; /* increment index*/
  end
  ;
  XP0IW02.XP0IWFFL = "Y"; /* init flag*/
  XP0IW02.XP0IWERR = "N"; /* init flag*/
  XP0IW02.XP0IWEND = "N"; /* init flag*/
  XP0IW01.XP0IWIX1 = 1; /* init subscript*/
  XP0IW01.XP0IW-SAVE-ORDER = " ";
  ;
                       /* MOVE HEADER AND FOOTERS TO WORKING STORAGE*/
  XP0IW01.XP0IWHDR = "      ORDER NBR    STATUS   ";
  XP0IW01.XP0IWTR1 = "         SELECT & ENTER     ";
  XP0IW01.XP0IWTR2 = "  PF7: BACK    PF8: FWRD    ";
  ;
  XP0I010(); /* select set*/
  while (SQLCA.VAGen_SQLCODE == 0 /* fetch successful or select was fine*/
   && XP0IW01.XP0IWIX1 <= 25) /* and not end of order tbl*/
    XP0I020(); /* fetch row and load*/
    XP0IW01.XP0IWIX1 = XP0IW01.XP0IWIX1 + 1; /* * increment tbl index*/
  end
  XP0I030(); /* close cursor*/
end // end XP0I001

// select set of order nbrs
Function XP0I010()
  /* ------------------------------------------------------------*/
  /* declare cursor*/
  /* ------------------------------------------------------------*/
  ;
  set VKSORD01 empty; /* clear work record*/
  ;
  /* ********** select all distinct ord nbrs and their status*/
  try
    call "VKSORD01" ("S2", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end /* select distinct*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
       /* next sentence*/
      return;
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        ;
        converseLib.validationFailed(138); /* set error msg nbr*/
        ;
      end
    end
  else
    ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
    ;
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(11); /* Data in use by another*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Unexpected error occurred*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT HEADING ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "XP0I010"; /* Program number*/
    TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = VKSORD01.VKSORD01-GROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
end // end XP0I010

// fetch ord nbr row
Function XP0I020()
  /* ------------------------------------------------------------*/
  /* fetch a row*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VKSORD01" ("N2", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
                    /* move order nbr and status to temp tbl*/
      if (VKSORD01.KS-CUST-ORDER-NBR != XP0IW01.XP0IW-SAVE-ORDER)
        if (XP0IW01.XP0IW-SAVE-ORDER == " ")
          XP0IW01.XP0IW-SAVE-ORDER = VKSORD01.KS-CUST-ORDER-NBR;
        end
        XP0IW01.XP0IW-CUST-ORDER-NBR[XP0IWIX1] = VKSORD01.KS-CUST-ORDER-NBR;
        XP0IW01.XP0IW-DIRECTIVE-STATUS[XP0IWIX1] = VKSORD01.XXX-STAT;
      else
        XP0IW01.XP0IWIX1 = XP0IW01.XP0IWIX1 - 1;
      end
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        ;
        XP0IW01.XP0IW-CUST-ORDER-NBR[XP0IWIX1] = "99";
                                   /* mark end of tbl*/
        XP0IW01.XP0IWIX1 = 26; /* end of input*/
        ;
      end
    end
  else
    ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(11); /* Data in use by another*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Unexpected error occurred*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "FETCH ROW         ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "XP0I020"; /* Program number*/
    TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = VKSORD01.VKSORD01-GROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  return;
  ;
end // end XP0I020

// close order nbr cursor
Function XP0I030()
  /* ------------------------------------------------------------*/
  /* close cursor*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VKSORD01" ("C2", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* close cursor*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
    end
  else
    ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(11); /* Data in use by another*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Unexpected error occurred*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "CLOSE CURSOR      ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "XP0I030"; /* Program number*/
    TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = VKSORD01.VKSORD01-GROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
end // end XP0I030

// converse pop up window
Function XP0I040()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XP0IW02.XP0IWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XP0IW02.XP0IWFFL == "N") /* if not the first time through*/
      XP0IW02.XP0IWCT1 = XP0IW02.XP0IWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XP0IM001 initial; /* Clear map output area*/
    XP0IM001.XP0IMHDR = XP0IW01.XP0IWHDR; /* Place heading on map*/
    XP0IM001.XP0IMTR1 = XP0IW01.XP0IWTR1;
    XP0IM001.XP0IMTR2 = XP0IW01.XP0IWTR2;
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XP0IW02.XP0IWFFL == "Y")    /* Or it is the first time thru*/
      XP0IW02.XP0IWCT2 = 1; /* Set up screen index*/
      while (XP0IW02.XP0IWCT2 <= 10 /* Until end of screen lines*/
       && XP0IW01.XP0IW-CUST-ORDER-NBR[XP0IWCT1] != "99")
                                   /* Or end of data*/
        XP0IM001.XP0IM-CUST-ORDER-NBR[XP0IWCT2] = XP0IW01.XP0IW-CUST-ORDER-NBR[XP0IWCT1];
        XP0IM001.XP0IM-DIRECTIVE-STATUS[XP0IWCT2] = XP0IW01.XP0IW-DIRECTIVE-STATUS[XP0IWCT1];
        XP0IW02.XP0IWINX[XP0IWCT2] = XP0IW02.XP0IWCT1;
                                   /* Save array*/
        if (XP0IW02.XP0IWFFL == "Y") /* If first time thru*/
          XP0IW02.XP0IWSIX = XP0IW02.XP0IWCT1; /* Save last index*/
        end
        set XP0IM001.XP0IMSEL[XP0IWCT2] normal; /* Set selects to normal*/
        XP0IW02.XP0IWCT2 = XP0IW02.XP0IWCT2 + 1;
                                   /* Increment screen index*/
  /* END;*/
        XP0IW02.XP0IWCT1 = XP0IW02.XP0IWCT1 + 1; /* Increment table index*/
      end
      XP0IW02.XP0IWFFL = "N"; /* Set first time flag to no*/
      while (XP0IW02.XP0IWCT2 <= 10)
        set XP0IM001.XP0IMSEL[XP0IWCT2] invisible, skip;
        XP0IW02.XP0IWCT2 = XP0IW02.XP0IWCT2 + 1;
      end
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XP0IW02.XP0IWCT1 = XP0IW02.XP0IWINX[1] - 1; /* Set up table index*/
      XP0IW02.XP0IWCT2 = 10; /* Set up screen index*/
      while (XP0IW02.XP0IWCT2 >= 1) /* Load from the bottom up*/
        XP0IM001.XP0IM-CUST-ORDER-NBR[XP0IWCT2] = XP0IW01.XP0IW-CUST-ORDER-NBR[XP0IWCT1];
        XP0IM001.XP0IM-DIRECTIVE-STATUS[XP0IWCT2] = XP0IW01.XP0IW-DIRECTIVE-STATUS[XP0IWCT1];
        XP0IW02.XP0IWINX[XP0IWCT2] = XP0IW02.XP0IWCT1;
                                   /* Save array*/
        set XP0IM001.XP0IMSEL[XP0IWCT2] normal; /* Set select visible*/
        XP0IW02.XP0IWCT2 = XP0IW02.XP0IWCT2 - 1;
                                   /* Decrement screen index*/
        XP0IW02.XP0IWCT1 = XP0IW02.XP0IWCT1 - 1; /* Decrement table index*/
      end
      if (XP0IW02.XP0IWCT1 < 1) /* If the table index was decremented*/
        XP0IW02.XP0IWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XP0IM001 ;
  ;
  XP0IW02.XP0IWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XP0IW02.XP0IWCT2 = 1; /* Screen index*/
  while (XP0IW02.XP0IWCT2 <= 10) /* Set all fields with data to normal*/
    if (XP0IM001.XP0IM-CUST-ORDER-NBR[XP0IWCT2] != " ")
      set XP0IM001.XP0IMSEL[XP0IWCT2] normal;
    else
      set XP0IM001.XP0IMSEL[XP0IWCT2] invisible, skip;
    end
    XP0IW02.XP0IWCT2 = XP0IW02.XP0IWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XP0IW01.XP0IW-CUST-ORDER-NBR[XP0IWCT1] == "99")
                               /* And end of table*/
    XP0IW02.XP0IWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XP0IW02.XP0IWINX[1] <= XP0IW02.XP0IWSIX)
      XP0IW02.XP0IWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XP0IW02.XP0IWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XP0IW02.XP0IWCT2 = 1; /* Screen index*/
        while (XP0IW02.XP0IWCT2 <= 10) /* Until end of screen data*/
          if (XP0IM001.XP0IMSEL[XP0IWCT2] == "S") /* Check for selection*/
            XP0IW02.XP0IWPIX = XP0IW02.XP0IWINX[XP0IWCT2];
            XP0IW02.XP0IWCT2 = 11; /* End loop*/
          end
          XP0IW02.XP0IWCT2 = XP0IW02.XP0IWCT2 + 1;
        end
        converseLib.clearScreen();
        
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XP0IW02.XP0IWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
end // end XP0I040

//*** RECORD=KS0NW00 ****
// ----------------------------
// Application working storage. - KS0N
// ----------------------------
// ***********************
Record KS0NW00 type basicRecord
  10 KS0NW-MAP KS0NW-MAP ; 
  10 KS0NW-LAST-MAP KS0NW-LAST-MAP ; 
  10 KS0NW-FUNCTION KS0NW-FUNCTION ; 
  10 KS0NW-LAST-FUNCTION KS0NW-LAST-FUNCTION ; 
  10 KS0NW-MSG-FL KS0NW-MSG-FL ; 
  10 KS0NW-FOOTNOTES KS0NW-FOOTNOTES ; 
  10 KS0NW-DELETE-FOOTNOTES KS0NW-DELETE-FOOTNOTES ; 
  10 KS0NW-IXM KS0NW-IXM ; 
  10 KS0NW-IX1 KS0NW-IX1 ; 
  10 KS0NW-IX2 KS0NW-IX2 ; 
  10 KS0NW-IX3 KS0NW-IX3 ; 
  10 KS0NW-IX4 KS0NW-IX4 ; 
  10 KS0NW-IX5 KS0NW-IX5 ; 
  10 KS0NW-IX6 KS0NW-IX6 ; 
  10 KS0NW-DATE-WORK KS0NW-DATE-WORK ; 
    15 KS0NW-DATE-CENTURY KS0NW-DATE-CENTURY ; 
    15 KS0NW-DATE-YR KS0NW-DATE-YR ; 
    15 KS0NW-DATE-MO KS0NW-DATE-MO ; 
    15 KS0NW-DATE-DAY KS0NW-DATE-DAY ; 
  10 KS0NW-DATE KS0NW-DATE ; 
    15 KS0NW-MM KS0NW-MM ; 
    15 KS0NW-DD KS0NW-DD ; 
    15 KS0NW-YY KS0NW-YY ; 
  10 KS0NW-HTS-FORMAT-SW KS0NW-HTS-FORMAT-SW ; 
  10 KS0NW-SAVE-HTS-NBR KS0NW-SAVE-HTS-NBR ; 
    15 KS0NW-SAVE-CPTR-CD KS0NW-SAVE-CPTR-CD ; 
    15 KS0NW-SAVE-HDG-CD KS0NW-SAVE-HDG-CD ; 
    15 KS0NW-SAVE-PER1 char(1) ; 
    15 KS0NW-SAVE-1ST-SHDG-CD KS0NW-SAVE-1ST-SHDG-CD ; 
    15 KS0NW-SAVE-PER2 char(1) ; 
    15 KS0NW-SAVE-2ND-SHDGCD1 KS0NW-SAVE-2ND-SHDGCD1 ; 
    15 KS0NW-SAVE-STAT-CD KS0NW-SAVE-STAT-CD ; 
  10 KS0NW-SAVE-2ND-SHDGCD2 KS0NW-SAVE-2ND-SHDGCD2 ; 
  10 KS0NW-SAVE-RNG-FL KS0NW-SAVE-RNG-FL ; 
  10 KS0NW-SAVE-STATUS KS0NW-SAVE-STATUS ; 
  10 KS0NW-SAVE-ZZ-SDT KS0NW-SAVE-ZZ-SDT ; 
  10 KS0NW-SAVE-ZZ-CHNG-CNT KS0NW-SAVE-ZZ-CHNG-CNT ; 
  10 KS0NW-SAVE-CHNG-CNT KS0NW-SAVE-CHNG-CNT ; 
  10 KS0NW-CHNG-CNT KS0NW-CHNG-CNT ; 
  10 KS0NW-FOOT-NOTE-NBR KS0NW-FOOT-NOTE-NBR ; 
  10 KS0NW-CUST-ORDER-NBR KS0NW-CUST-ORDER-NBR ; 
  10 KS0NW-CUST-ORDER-WORK KS0NW-CUST-ORDER-WORK ; 
    15 KS0NW-ORDER-BYTE KS0NW-ORDER-BYTE [12] ; 
  10 KS0NW-FOOT-NOTE-DESC1 KS0NW-FOOT-NOTE-DESC1 ; 
  10 KS0NW-FOOT-NOTE-DESC2 KS0NW-FOOT-NOTE-DESC2 ; 
  10 KS0NW-FOOT-NOTE-DESC3 KS0NW-FOOT-NOTE-DESC3 ; 
  10 KS0NW-PRBM-CD KS0NW-PRBM-CD ; 
  10 KS0NW-SAVE-FOOT-NOTE-NBR KS0NW-SAVE-FOOT-NOTE-NBR ; 
  10 KS0NW-SAVE-CUST-ORDER-NBR KS0NW-SAVE-CUST-ORDER-NBR ; 
  10 KS0NW-SAVE-FOOT-NOTE-DESC1 KS0NW-SAVE-FOOT-NOTE-DESC1 ; 
  10 KS0NW-SAVE-FOOT-NOTE-DESC2 KS0NW-SAVE-FOOT-NOTE-DESC2 ; 
  10 KS0NW-SAVE-FOOT-NOTE-DESC3 KS0NW-SAVE-FOOT-NOTE-DESC3 ; 
  10 KS0NW-SAVE-DIR-STAT KS0NW-SAVE-DIR-STAT ; 
  10 KS0NW-KS-HTS-NBR KS0NW-KS-HTS-NBR ; 
  10 KS0NW-HTS-NBR1 KS0NW-HTS-NBR1 ; 
    15 KS0NW-HTS-BYTE KS0NW-HTS-BYTE [12] ; 
  10 KS0NW-HTS-NBR-WORK KS0NW-HTS-NBR-WORK ; 
    15 KS0NW-HTS-CPTR-CD KS0NW-HTS-CPTR-CD ; 
    15 KS0NW-HTS-HDG-CD KS0NW-HTS-HDG-CD ; 
    15 * char(1) ; 
    15 KS0NW-HTS-1ST-SHDG-CD KS0NW-HTS-1ST-SHDG-CD ; 
    15 * char(1) ; 
    15 KS0NW-HTS-2ND-SHDGCD1 KS0NW-HTS-2ND-SHDGCD1 ; 
    15 KS0NW-HTS-STAT-CD KS0NW-HTS-STAT-CD ; 
  10 KS0NW-FNT-NBR1 KS0NW-FNT-NBR1 ; 
    15 KS0NW-FNT-BYTE KS0NW-FNT-BYTE [4] ; 
  10 KS0NW-SESN-YR KS0NW-SESN-YR ; 
    15 KS0NW-SESN-CENT KS0NW-SESN-CENT ; 
    15 KS0NW-SESN-YY KS0NW-SESN-YY ; 
end // end KS0NW00

//*** RECORD=KS0NW01 ****
// Working storage for KS0N - Customs CVS Tables
// ***********************
Record KS0NW01 type basicRecord
  10 KS0NWIXM KS0NWIXM ; 
  10 KS0NWIXM2 KS0NWIXM2 ; 
  10 KS0NWIX2 KS0NWIX2 ; 
  10 KS0NWSWC KS0NWSWC ; 
  10 KS0NWSWR KS0NWSWR ; 
  10 KS0NWSW1 KS0NWSW1 ; 
  10 KS0NWPSW KS0NWPSW ; 
  10 KS0NWTSP KS0NWTSP ; 
  10 KS0NWTS1 KS0NWTS1 ; 
  10 KS0NW-END-OF-ORDER KS0NW-END-OF-ORDER ; 
  10 KS0NW-END-OF-FOOTNOTES KS0NW-END-OF-FOOTNOTES ; 
  10 KS0NW-DEFAULT-FOOTNOTE KS0NW-DEFAULT-FOOTNOTE ; 
  10 KS0NWMAP KS0NWMAP ; 
  10 KS0NWFSW KS0NWFSW ; 
  10 KS0NWDSK KS0NWDSK ; 
    15 KS0NWDS1 KS0NWDS1 ; 
    15 KS0NWDS2 KS0NWDS2 ; 
    15 KS0NWDS3 KS0NWDS3 ; 
    15 KS0NWDS4 KS0NWDS4 ; 
  10 KS0NWMPK KS0NWMPK ; 
    15 KS0NWMP1 KS0NWMP1 ; 
    15 KS0NWMP2 KS0NWMP2 ; 
    15 KS0NWMP3 KS0NWMP3 ; 
    15 KS0NWMP4 KS0NWMP4 ; 
  10 KS0NWDFL KS0NWDFL ; 
  10 KS0NWMFL KS0NWMFL ; 
  10 KS0NWSFL KS0NWSFL ; 
  10 KS0NWIFL KS0NWIFL ; 
  10 KS0NWURF KS0NWURF ; 
  10 KS0NWSWP KS0NWSWP ; 
  10 KS0NWDEF KS0NWDEF ; 
  10 KS0NWFNTS KS0NWFNTS ; 
  10 KS0NMNCD KS0NMNCD ; 
  10 KS0NWDTE KS0NWDTE ; 
    15 KS0NWCEN KS0NWCEN ; 
    15 KS0NWYMD KS0NWYMD ; 
  10 KS0NWTM1 KS0NWTM1 ; 
    15 KS0NWHR1 KS0NWHR1 ; 
    15 KS0NWC1 KS0NWC1 ; 
    15 KS0NWMN1 KS0NWMN1 ; 
    15 KS0NWC2 KS0NWC2 ; 
    15 KS0NWSEC KS0NWSEC ; 
  10 KS0NWTM2 KS0NWTM2 ; 
    15 KS0NWHR2 KS0NWHR2 ; 
    15 KS0NWCOL KS0NWCOL ; 
    15 KS0NWMN2 KS0NWMN2 ; 
  10 KS0NWTM3 KS0NWTM3 ; 
    15 KS0NWHR3 KS0NWHR3 ; 
    15 KS0NWMN3 KS0NWMN3 ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KS0NW-QIX KS0NW-QIX ; 
  10 KS0NW-SAVE-FTNT-PAGE KS0NW-SAVE-FTNT-PAGE ; 
  10 KS0NW-SAVE-HTS-PAGE KS0NW-SAVE-HTS-PAGE ; 
  10 KS0NW-CUST-ORDER-NBR KS0NW-CUST-ORDER-NBR ; 
end // end KS0NW01

//*** RECORD=KS0NW02 ****
// Temporary storage record for TS0O - Location Inquiry/Maint.
// ***********************
Record KS0NW02 type basicRecord
  10 KS0NWLEN KS0NWLEN ; 
  10 KS0NWLIN KS0NWLIN [28] ; 
    15 KS0NW-SEL KS0NW-SEL ; 
    15 KS0NW-ORDER-GROUP KS0NW-ORDER-GROUP ; 
      20 KS0NW-HTS-NBR KS0NW-HTS-NBR ; 
        25 KS0NW-HTS-CPTR-CD KS0NW-HTS-CPTR-CD ; 
        25 KS0NW-HTS-HDG-CD KS0NW-HTS-HDG-CD ; 
        25 KS0NW-HTS-1ST-SHDG-CD KS0NW-HTS-1ST-SHDG-CD ; 
        25 KS0NW-HTS-2ND-SHDGCD1 KS0NW-HTS-2ND-SHDGCD1 ; 
        25 KS0NW-HTS-2ND-SHDGCD2 KS0NW-HTS-2ND-SHDGCD2 ; 
        25 KS0NW-HTS-STAT-CD KS0NW-HTS-STAT-CD ; 
      20 KS0NW-HTS-RNG-FL KS0NW-HTS-RNG-FL ; 
      20 KS0NW-CUST-ORDER-NBR KS0NW-CUST-ORDER-NBR ; 
      20 KS0NW-FOOT-NOTE-NBR KS0NW-FOOT-NOTE-NBR ; 
      20 KS0NW-XCT-CTRY-CD KS0NW-XCT-CTRY-CD ; 
      20 KS0NW-STATUS KS0NW-STATUS ; 
      20 KS0NW-ZZ-SDT KS0NW-ZZ-SDT ; 
      20 KS0NW-CHNG-DT KS0NW-CHNG-DT ; 
      20 KS0NW-CHNG-HHMM KS0NW-CHNG-HHMM ; 
      20 KS0NW-CHNG-CNT KS0NW-CHNG-CNT ; 
end // end KS0NW02

//*** RECORD=KS0NW03 ****
// Temporary storage record for ks0n - ks-hts   Inquiry/Maint.
// ***********************
Record KS0NW03 type basicRecord
  10 KS0NWLEN KS0NWLEN ; 
  10 KS0NWLIN3 KS0NWLIN3 ; 
    15 KS0NW-SEL KS0NW-SEL ; 
    15 KS0NW-ORDER-GROUP3 KS0NW-ORDER-GROUP3 ; 
      20 KS0NW-HTS-NBR3 KS0NW-HTS-NBR3 ; 
        25 KS0NW-HTS-CPTR-CD KS0NW-HTS-CPTR-CD ; 
        25 KS0NW-HTS-HDG-CD KS0NW-HTS-HDG-CD ; 
        25 * char(1) ; 
        25 KS0NW-HTS-1ST-SHDG-CD KS0NW-HTS-1ST-SHDG-CD ; 
        25 * char(1) ; 
        25 KS0NW-HTS-2ND-SHDGCD1 KS0NW-HTS-2ND-SHDGCD1 ; 
        25 KS0NW-HTS-STAT-CD KS0NW-HTS-STAT-CD ; 
      20 KS0NW-CUST-ORDER-NBR KS0NW-CUST-ORDER-NBR ; 
      20 KS0NW-FOOT-NOTE-NBR KS0NW-FOOT-NOTE-NBR ; 
      20 KS0NW-STATUS KS0NW-STATUS ; 
      20 KS0NW-DATES char(16) ; 
end // end KS0NW03

//*** RECORD=KS0NW04 ****
// Temporary storage record for TS0O - Location Inquiry/Maint.
// ***********************
Record KS0NW04 type basicRecord
  10 KS0NWLEN KS0NWLEN ; 
  10 KS0NWRC2 KS0NWRC2 [3] ; 
    15 KS0NW-SEL KS0NW-SEL ; 
    15 KS0NW-FTNT-GROUP KS0NW-FTNT-GROUP ; 
      20 KS0NW-FOOT-NOTE-NBR KS0NW-FOOT-NOTE-NBR ; 
      20 KS0NW-CUST-ORDER-NBR KS0NW-CUST-ORDER-NBR ; 
      20 KS0NW-FOOT-NOTE-DESC1 KS0NW-FOOT-NOTE-DESC1 ; 
      20 KS0NW-FOOT-NOTE-DESC2 KS0NW-FOOT-NOTE-DESC2 ; 
      20 KS0NW-FOOT-NOTE-DESC3 KS0NW-FOOT-NOTE-DESC3 ; 
      20 KS0NW-PRBM-CD KS0NW-PRBM-CD ; 
      20 KS0NW-SDT int ; 
      20 KS0NW-CHNG-DT int ; 
      20 KS0NW-CHNG-HHMM smallint ; 
      20 KS0NW-CHNG-CNT smallint ; 
end // end KS0NW04

//*** RECORD=XP0IW01 ****
// OVERVIEW:
// 
// 
//        This record is the working record used by the
//        order nbr pop-up window process(XP0i001).
// 
// MAINTENANCE HISTORY:
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//  ks113   08/08/95  eraymo  CREATED
// 
// ***********************
Record XP0IW01 type basicRecord
  10 XP0IW-KSORD-TBL XP0IW-KSORD-TBL [25] ; 
    15 XP0IW-CUST-ORDER-NBR XP0IW-CUST-ORDER-NBR ; 
    15 XP0IW-DIRECTIVE-STATUS XP0IW-DIRECTIVE-STATUS ; 
  10 XP0IW-SAVE-ORDER XP0IW-SAVE-ORDER ; 
  10 XP0IWRHT XP0IWRHT ; 
  10 XP0IWLFT XP0IWLFT ; 
  10 XP0IWHDR XP0IWHDR ; 
  10 XP0IWTR1 XP0IWTR1 ; 
  10 XP0IWTR2 XP0IWTR2 ; 
  10 XP0IWIX1 XP0IWIX1 ; 
end // end XP0IW01

//*** RECORD=XP0IW02 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - XP0i001
// 
// Special Considerations:
// 
//            The field XP0iWENR is used in conjunction with
//            the XP0iWERR field to indicate the type of error.
//            When the error flag is 'Y'es, the error number
//            will contain the following values:
//                 0 = Invalid function key pressed
//                 1 = Empty table
//                 2 = Unexpected DB2 error loading vksord.
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/08/95  eraymo  Created
// ************************************************************
// ***********************
Record XP0IW02 type basicRecord
  10 XP0IWCT1 XP0IWCT1 ; 
  10 XP0IWCT2 XP0IWCT2 ; 
  10 XP0IWSIX XP0IWSIX ; 
  10 XP0IWPIX XP0IWPIX ; 
  10 XP0IWINX XP0IWINX [10] ; 
  10 XP0IWEND XP0IWEND ; 
  10 XP0IWFFL XP0IWFFL ; 
  10 XP0IWRFL XP0IWRFL ; 
  10 XP0IWKEY XP0IWKEY ; 
  10 XP0IWERR XP0IWERR ; 
  10 XP0IWENR XP0IWENR ; 
    15 * char(1) ; 
end // end XP0IW02

DataItem KS0NMNCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-CHNG-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0NW-CHNG-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0NW-CHNG-HHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// KS_HTS_STAT_CD
DataItem KS0NW-CUST-ORDER-NBR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_STAT_CD
DataItem KS0NW-CUST-ORDER-WORK char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date working storage
DataItem KS0NW-DATE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date century
DataItem KS0NW-DATE-CENTURY num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date day
DataItem KS0NW-DATE-DAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date month
DataItem KS0NW-DATE-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date working storage
DataItem KS0NW-DATE-WORK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date year
DataItem KS0NW-DATE-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day
DataItem KS0NW-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-DEFAULT-FOOTNOTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-DELETE-FOOTNOTES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-END-OF-FOOTNOTES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-END-OF-ORDER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-FNT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-FNT-NBR1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_SUFX_ID
DataItem KS0NW-FOOT-NOTE-DESC1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_SUFX_ID
DataItem KS0NW-FOOT-NOTE-DESC2 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_SUFX_ID
DataItem KS0NW-FOOT-NOTE-DESC3 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_SUFX_ID
DataItem KS0NW-FOOT-NOTE-NBR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-FOOTNOTES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-FTNT-GROUP char(150)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-FUNCTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD
DataItem KS0NW-HTS-2ND-SHDGCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD
DataItem KS0NW-HTS-2ND-SHDGCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-HTS-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS Number Format flag
DataItem KS0NW-HTS-FORMAT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CARR_NM
DataItem KS0NW-HTS-NBR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS number work area
DataItem KS0NW-HTS-NBR-WORK char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-HTS-NBR1 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CARR_NM
DataItem KS0NW-HTS-NBR3 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-HTS-RNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD
DataItem KS0NW-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0NW-IX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0NW-IX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0NW-IX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0NW-IX4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0NW-IX5 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0NW-IX6 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0NW-IXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TS_CARR_NM
DataItem KS0NW-KS-HTS-NBR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-LAST-FUNCTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-LAST-MAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-MAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem KS0NW-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-MSG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-ORDER-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-ORDER-GROUP char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-ORDER-GROUP3 char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-PRBM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0NW-QIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-2ND-SHDGCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-2ND-SHDGCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save ZZ_SDT
DataItem KS0NW-SAVE-CHNG-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0NW-SAVE-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-CUST-ORDER-NBR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-DIR-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-FOOT-NOTE-DESC1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-FOOT-NOTE-DESC2 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-FOOT-NOTE-DESC3 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-FOOT-NOTE-NBR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0NW-SAVE-FTNT-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save HS number
DataItem KS0NW-SAVE-HTS-NBR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0NW-SAVE-HTS-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Save HS range flag
DataItem KS0NW-SAVE-RNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-SAVE-STATUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save ZZ_SDT
DataItem KS0NW-SAVE-ZZ-CHNG-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save ZZ_SDT
DataItem KS0NW-SAVE-ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line selection tag
DataItem KS0NW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season century
DataItem KS0NW-SESN-CENT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem KS0NW-SESN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season year
DataItem KS0NW-SESN-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-STATUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-XCT-CTRY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem KS0NW-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NW-ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0NWC1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWC2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWCEN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWCOL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWDS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWDS4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWDSK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWDTE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWFNTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWHR1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWHR2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWHR3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWIFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWIX2 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0NWIXM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0NWIXM2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0NWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem KS0NWLIN char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Display Line
DataItem KS0NWLIN3 char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMN1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMN2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMN3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMP4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWMPK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Display Line
DataItem KS0NWRC2 char(151)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWSEC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWTM1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWTM2 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWTM3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWTS1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0NWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0NWURF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0NWYMD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0IW-CUST-ORDER-NBR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0IW-DIRECTIVE-STATUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No NOT display if in this tbl
DataItem XP0IW-KSORD-TBL char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0IW-SAVE-ORDER char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table counter
DataItem XP0IWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen counter
DataItem XP0IWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// flag
DataItem XP0IWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error number
DataItem XP0IWENR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error flag
DataItem XP0IWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem XP0IWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pop-up map header
DataItem XP0IWHDR char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter link screen/table
DataItem XP0IWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem XP0IWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// have syreg key info
DataItem XP0IWKEY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0IWLFT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// passed index table location
DataItem XP0IWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// found syreg flag
DataItem XP0IWRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0IWRHT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem XP0IWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0IWTR1 char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0IWTR2 char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

