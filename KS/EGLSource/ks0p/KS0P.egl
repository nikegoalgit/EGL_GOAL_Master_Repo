package ks0p;

import corpcom1.CEN-WORK;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom4.XSENTRY;
import corpcom4.XSKS-S0001;
import corpcom4.XSNOWAY;
import corpcom5.COMMAREA;
import corpcom5.FCTY-CD;
import corpcom5.HD-BUS-UNIT-CD;
import corpcom5.HD-COLR-CD-ID;
import corpcom5.HD-DIM-CD;
import corpcom5.HD-DLVR-MO;
import corpcom5.HD-FCTY-CD;
import corpcom5.HD-PRDCTN-MO;
import corpcom5.HD-PRDCTN-YR;
import corpcom5.HD-SESN-CD;
import corpcom5.HD-SESN-YR;
import corpcom5.HD-STY-NBR;
import corpcom5.HS-1ST-SHDG-CD;
import corpcom5.HS-2ND-SHDGCD;
import corpcom5.HS-BYTE1;
import corpcom5.HS-BYTE2;
import corpcom5.HS-CPTR-CD;
import corpcom5.HS-HDG-CD;
import corpcom5.HS-NUMBER;
import corpcom5.HS-STAT-CD;
import corpcom6.PO-ID-MO-RNG;
import corpcom6.POID-DISP;
import corpcom6.POID-WK;
import corpcom6.SEASON-CD;
import corpcom6.SESN-CC;
import corpcom6.SESN-CD;
import corpcom6.SESN-CODE;
import corpcom6.SESN-RNG;
import corpcom6.SESN-WORK;
import corpcom6.SESN-YR;
import corpcom6.SESN-YR-WORK;
import corpcom6.SESN-YY;
import corpcom6.SQLCA;
import corpcom6.TO-SZ-DESC;
import corpx1.XGATBL;
import corpx1.XSETBL;
import fy.common.FR-SZ-DESC;
import ks.common.*;
import pc.common.*;
import pg.common.PG3REC;
import sy.common.SY-COLR-CD-ID;
import sy.common.SY-STY-NBR;
import sy.common.SYCOLRCDID;
import sy.common.SYSTYNBR;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VPOHTS01;
import vv.common.VPOITM03;
//*** PROGRAM=KS0P ****
// This application will display a list of footwear products
// Expanded HTS information given user entered parameters. The
// user is required to enter at least the Style or Sesn/Yr to
// view a set of data. Once the minimum amount of selection
// fields are enetered, the user can limit the list even more
// by entering other Header fields.
// This application can be reached in two ways:
// 1. Selecting a style in Customs Product master (KS0I) and
// pressing the key PF21:EXPND
// 2. By selecting option 9 in the CUSTOMS MAIN MENU
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      03/27/00  vkumar  New application.
// *********************
Program KS0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KS0PW01 KS0PW01; // record
  KS0PW02 KS0PW02; // record
  KSWREC KSWREC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOHTS01 VPOHTS01; // record
  VPOITM03 VPOITM03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use KS0PM.KS0PM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KS0P000: KS0P000();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/

    set KS0PM001 initial; /* M001 input/output*/
    set KS0PW01 empty; /* M001 display storage*/
    set VPOHTS01 empty;
    set VPOITM03 empty;
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    KS0PW01.KS0PW-MAX-PAGES = 100; /* Set maximum pages to format*/
    KS0PW01.KS0PWPSW = "N";

    /* ------------------------------------------------------------*/
    /* If data was passed in the COMMAREA, use as the initial key.*/
    /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "KS0I") /* if from KS0I*/
      KS0PW01.KS0PWSWR = "Y"; /* Request for data switch*/
      if (KSWREC.KSW-POIDT == 0)
        KS0PM001.KS0PM-PRDCTN-YR = " "; /* clear map fields*/
        KS0PM001.KS0PM-PRDCTN-MO = " ";
        KS0PM001.KS0PM-DLVR-MO = " ";
        KS0PW01.HD-PRDCTN-YR = " "; /* clear w01 fields*/
        KS0PW01.HD-PRDCTN-MO = " ";
        KS0PW01.HD-DLVR-MO = " ";
      else
        KS0PW01.KS0PW-DATE-WORK = KSWREC.KSW-POIDT;
        KS0PW01.HD-PRDCTN-YR = KS0PW01.KS0PW-YEAR;
        KS0PM001.KS0PM-PRDCTN-YR = KS0PW01.KS0PW-YEAR;
        KS0PW01.HD-PRDCTN-MO = KS0PW01.KS0PW-MONTH;
        KS0PM001.KS0PM-PRDCTN-MO = KS0PW01.KS0PW-MONTH;
        KS0PW01.HD-DLVR-MO = KS0PW01.KS0PW-DAY;
        KS0PM001.KS0PM-DLVR-MO = KS0PW01.KS0PW-DAY;
      end
      KS0PW01.HD-FCTY-CD = KSWREC.KSW-FCTY-CD;
      KS0PM001.KS0PM-FCTY-CD = KSWREC.KSW-FCTY-CD;
      KS0PW01.HD-BUS-UNIT-CD = KSWREC.XGPCD;
      KS0PM001.KS0PM-BUS-UNIT-CD = KSWREC.XGPCD;
      KS0PW01.HD-STY-NBR = KSWREC.SY1STNBR;
      KS0PM001.KS0PM-STY-NBR = KSWREC.SY1STNBR;
      KS0PW01.HD-COLR-CD-ID = KSWREC.SY2CLRID;
      KS0PM001.KS0PM-COLR-CD-ID = KSWREC.SY2CLRID;
      KS0PW01.HD-DIM-CD = KSWREC.XDMCD;
      KS0PM001.KS0PM-DIM-CD = KSWREC.XDMCD;
      KS0PW01.HD-SESN-CD = KSWREC.XSECD;
      KS0PM001.KS0PM-SESN-CD = KSWREC.XSECD;

      if (KSWREC.XSNYR == 0)
        KS0PM001.KS0PM-SESN-YR = " "; /* clear map fields*/
        KS0PW01.HD-SESN-YR = " "; /* clear w01 fields*/
      else
        KS0PW01.SESN-WORK = KSWREC.XSNYR;
        KS0PM001.KS0PM-SESN-YR = KS0PW01.SESN-YR-WORK;
        KS0PW01.HD-SESN-YR = KS0PW01.SESN-YR-WORK;
      end

    else
      KS0PW01.KS0PWSWR = "N"; /* Request for data switch*/
    end

    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto KS0P-000; /* Converse the main process*/


    KS0P-000: KS0P-000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto KS0P001; /* Converse the main process*/


    KS0P001: KS0P001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Shipment Carrier Inquiry.       .*/
     /* ------------------------------------------------------------*/

    goto KS0P001; /* Converse Shipment Carrier Inquiry*/





  end // end main
end // end KS0P

// Main process to display a map
Function KS0P-000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "KS0A" /* From allowed application*/
   || COMMAREA.CAFROMAP == "KS0I" /* From allowed application*/
   || COMMAREA.CAFROMAP == "MN0C" /* From allowed application*/
   || COMMAREA.CAFROMAP == "MN0M") /* From allowed application*/

    /* NEXT SENTENCE*/

  else
    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

   /* ********************** End of KS0P-000 ********************/
end // end KS0P-000

// Application initialization
Function KS0P000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another OR*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "KS0I") /* Came from ks0i*/

    KSWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work recor*/
  else
    set KSWREC empty; /* Initialize work record area*/

  end

end // end KS0P000

Function KS0P001()
  /* -------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) CHECK THE ATTENTION IDENTIFIER USED TO RESPOND.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /* ------------------------------------------------------------*/

  if (KS0PW01.KS0PWSWR == "Y" /* If request for data is yes*/
   && KS0PW01.KS0PWPSW == "N") /* and no errors*/
    KS0P100(); /* Obtain the data to display*/
  end

  KS0P200(); /* Format and display map*/

  KS0P300(); /* Check attention identifier*/

  KS0P400(); /* Reset fields to normal intensity*/

  KS0P500(); /* Verify entered data*/

  if (KS0PW01.KS0PWPSW == "N") /* No errors*/
    KS0P600(); /* Process valid input request*/
  end

end // end KS0P001

// Obtain data to display
Function KS0P100()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Move valid screen parameters to VPOHTS01 fields*/
   /* 2) Select sets and open cursors for DCUSTM.VPOHTS01.*/
   /* 3) Fetch rows from DCUSTM.VPOHTS01 table.*/

   /* ------------------------------------------------------------*/

  VPOHTS01.KS-BUS-UNIT-CD = KS0PM001.KS0PM-BUS-UNIT-CD;
  VPOHTS01.XGP-GPC-CD = KS0PM001.KS0PM-BUS-UNIT-CD;
  VPOITM03.XGPCD = KS0PM001.KS0PM-BUS-UNIT-CD;

  if (KS0PM001.KS0PM-STY-NBR == " ")
    VPOHTS01.SY-STY-NBR = "*";
  else
    VPOHTS01.SY-STY-NBR = KS0PM001.KS0PM-STY-NBR;
  end

  if (KS0PM001.KS0PM-COLR-CD-ID == " ")
    VPOHTS01.SY-COLR-CD-ID = "*";
  else
    VPOHTS01.SY-COLR-CD-ID = KS0PM001.KS0PM-COLR-CD-ID;
  end

  if (KS0PM001.KS0PM-DIM-CD == " ")
    VPOHTS01.XDM-DIM-CD = "*";
  else
    VPOHTS01.XDM-DIM-CD = KS0PM001.KS0PM-DIM-CD;
  end

  if (KS0PM001.KS0PM-SESN-CD == " ")
    VPOHTS01.XSE-SESN-CD = "*";
  else
    VPOHTS01.XSE-SESN-CD = KS0PM001.KS0PM-SESN-CD;
  end

  if (KS0PM001.KS0PM-SESN-YR >= "00" /* if sesn-yr entered*/
   && KS0PM001.KS0PM-SESN-YR <= "99")
    KS0PW01.KS0PW-SESN-YY = KS0PM001.KS0PM-SESN-YR; /* Season year*/
    if (KS0PM001.KS0PM-SESN-YR > "65")
      KS0PW01.KS0PW-SESN-CENT = "19";
    else
      KS0PW01.KS0PW-SESN-CENT = "20";
    end
  else
    KS0PW01.KS0PW-SESN-YR = " "; /* Season year*/
  end

  if (KS0PW01.KS0PW-SESN-YR > " ")
    KS0PW01.KS0PW-SESN-YR-NUM = KS0PW01.KS0PW-SESN-YR;
  else
    KS0PW01.KS0PW-SESN-YR-NUM = 0;
  end

  if (KS0PW01.KS0PW-SESN-YR-NUM == 0)
    VPOHTS01.XSN-SESN-YR-RNG = -1;
  else
    VPOHTS01.XSN-SESN-YR-RNG = KS0PW01.KS0PW-SESN-YR-NUM;
  end

  if (KS0PM001.KS0PM-PO-NBR > " ")
    KS0PW01.KS0PW-PO-NBR-NUM = KS0PM001.KS0PM-PO-NBR;
  else
    KS0PW01.KS0PW-PO-NBR-NUM = 0;
  end

  if (KS0PW01.KS0PW-PO-NBR-NUM > 0)
    VPOHTS01.PC-PO-NBR = KS0PW01.KS0PW-PO-NBR-NUM;
  else
    VPOHTS01.PC-PO-NBR = -1;
  end

  if (KS0PM001.KS0PM-PRDCTN-YR > " ")
    KS0PW01.KS0PW-PRDCTN-YR = KS0PM001.KS0PM-PRDCTN-YR;
    KS0PW01.KS0PW-PRDCTN-MO = KS0PM001.KS0PM-PRDCTN-MO;
    KS0PW01.KS0PW-DLVR-MO = KS0PM001.KS0PM-DLVR-MO;
    if (KS0PM001.KS0PM-PRDCTN-YR > "65")
      KS0PW01.KS0PW-PRDCTN-CEN = "19";
    else
      KS0PW01.KS0PW-PRDCTN-CEN = "20";
    end
  else
    KS0PW01.KS0PW-POIDT = " ";
  end

  if (KS0PW01.KS0PW-POIDT > " ")
    KS0PW01.KS0PW-POIDT-NUM = KS0PW01.KS0PW-POIDT;
  else
    KS0PW01.KS0PW-POIDT-NUM = 0;
  end

  if (KS0PW01.KS0PW-POIDT-NUM > 0)
    VPOHTS01.PC-PO-ID-MO-RNG = KS0PW01.KS0PW-POIDT-NUM;
  else
    VPOHTS01.PC-PO-ID-MO-RNG = -1;
  end

  if (KS0PM001.KS0PM-FCTY-CD > " ")
    VPOHTS01.FY-FCTY-CD = KS0PM001.KS0PM-FCTY-CD;
  else
    VPOHTS01.FY-FCTY-CD = "*";
  end

  if (KS0PM001.KS0PM-PO-STAT == " ")
    VPOITM03.PC6STAT = "*";
  else
    VPOITM03.PC6STAT = KS0PM001.KS0PM-PO-STAT;
  end
  KS0PW01.PCITMSTAT = " ";
  KS0PW01.SESN-CD = " ";
  KS0PW01.SESN-RNG = 0;
  KS0PW01.PO-ID-MO-RNG = 0;
  KS0PW01.FCTY-CD = " ";
  KS0PW01.SYSTYNBR = " ";
  KS0PW01.SYCOLRCDID = " ";
  KS0PW01.GNDR-AGE-CD = " ";
  KS0PW01.HS-CPTR-CD = " ";
  KS0PW01.HS-HDG-CD = " ";
  KS0PW01.HS-1ST-SHDG-CD = " ";
  KS0PW01.HS-2ND-SHDGCD = " ";
  KS0PW01.HS-STAT-CD = " ";

  KS0P110(); /* Purge any temporary storage*/

  KS0P120(); /* Select set, open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
    set KS0PW02 empty; /* Set screen WS empty*/
    KS0PW01.KS0PWSW1 = "N"; /* Set end of selected set switch*/
    KS0PW01.KS0PWIXM = 1; /* Set counter for screen ws*/

    while (KS0PW01.KS0PWSW1 == "N") /* While data exists to fetch*/
      KS0P130(); /* Fetch and process information*/
      if (KS0PW01.KS0PWIXM > 14) /* page is fulll page exists*/
        KS0P140(); /* add that page to temp storage*/

        /* ---------------------------------------------------------------*/
        /* If the number of pages in temp storage is GE the maximum number*/
        /* of pages set in the entry flow to the application, then set the*/
        /* end of cursor flag and give message that max pages were reached*/
        /* ---------------------------------------------------------------*/
        if (KS0PW01.TA5TSQIX >= KS0PW01.KS0PW-MAX-PAGES)
          KS0PW01.KS0PWSW1 = "Y"; /* Endof file*/
          converseLib.validationFailed(128); /* Max pages reached*/
          KS0PM001.KS0PPRCNM = "KS0P100"; /* Process name*/
        end

      end
    end

    if (KS0PW01.KS0PWSW1 == "Y") /* If last fetch of detail done*/
      if (KS0PW01.KS0PWIXM > 1) /* and a partial page exists*/
        KS0P140(); /* add that page to temp storage*/
      end
      KS0PW01.KS0PWTSP = 1; /* initialize page number*/
      KS0PW01.KS0PWSWR = "N"; /* reset request for data switch*/
      KS0P150(); /* Close the shphd selected set*/
    end

  end

  if (KS0PW01.TA5TSQIX == 0) /* No data to display*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    KS0PW01.KS0PWPSW = "Y";
    KS0PM001.KS0PPRCNM = "KS0P100"; /* Process name*/
  end

end // end KS0P100

// Purge any temporary storage
Function KS0P110()
   /* ------------------------------------------------------------*/

              /* PURGE ANY TEMPORARY STORAGE*/

   /* 1) Purge any temporary storage for this application.*/

   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "KS0P"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (KS0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "KS0P110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0PM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  KS0PW01.KS0PWTSP = 0; /* Reset current page number*/
  KS0PW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end KS0P110

// Call KS2000 select
Function KS0P120()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "KS2000" ("S1", SQLCA, VPOHTS01, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Sele*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KS0PM001.KS0PPRCNM = "KS0P120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KS0PM001.KS0PPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0P120

// Fetch  (N1)    DCUSTM.VPOHTS01
Function KS0P130()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VPOHTS01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  try
    call "KS2000" ("N1", SQLCA, VPOHTS01, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* FETCH*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    KS0PW01.KS0PWSW1 = "Y"; /* Set end switch*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      KS0PW01.KS0PWPSW = "Y"; /* Indicate problem*/
      KS0PW01.KS0PWSW1 = "Y"; /* Set end switch*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "KS0P130"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "KS0PM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      KS0PM001.KS0PPRCNM = "KS0P130"; /* Process name*/

    else
      if (VPOITM03.PC6STAT == "CL"
       || VPOITM03.PC6STAT == "NC")

        KS0PW01.PC-ITM-STAT = "CL";

      else
        if (VPOITM03.PC6STAT == "OP"
         || VPOITM03.PC6STAT == "FC")

          KS0PW01.PC-ITM-STAT = "OP";

        else
          KS0PW01.PC-ITM-STAT = VPOITM03.PC6STAT;
        end
      end

      if (KS0PW01.PC-ITM-STAT == KS0PW01.PCITMSTAT
       && VPOHTS01.XSE-SESN-CD == KS0PW01.SESN-CD
       && VPOHTS01.XSN-SESN-YR-RNG == KS0PW01.SESN-RNG
       && VPOHTS01.PC-PO-ID-MO-RNG == KS0PW01.PO-ID-MO-RNG
       && VPOHTS01.FY-FCTY-CD == KS0PW01.FCTY-CD
       && VPOHTS01.SY-STY-NBR == KS0PW01.SYSTYNBR
       && VPOHTS01.SY-COLR-CD-ID == KS0PW01.SYCOLRCDID
       && VPOHTS01.XGA-GNDR-AGE-CD == KS0PW01.GNDR-AGE-CD
       && VPOHTS01.KS-HTS-CPTR-CD == KS0PW01.HS-CPTR-CD
       && VPOHTS01.KS-HTS-HDG-CD == KS0PW01.HS-HDG-CD
       && VPOHTS01.KS-HTS-1ST-SHDG-CD == KS0PW01.HS-1ST-SHDG-CD
       && VPOHTS01.KS-HTS-2ND-SHDGCD1 == KS0PW01.HS-2ND-SHDGCD
       && VPOHTS01.KS-HTS-STAT-CD == KS0PW01.HS-STAT-CD)

         /* Next Sentence*/

      else

        KS0P131();

        KS0PW01.KS0PWIXM = KS0PW01.KS0PWIXM + 1; /* increment counter*/

      end
    end
  end


end // end KS0P130

// MOVE FIELDS
Function KS0P131()

  KS0PW02.PC-STAT[KS0PWIXM] = KS0PW01.PC-ITM-STAT;
  KS0PW01.PCITMSTAT = KS0PW01.PC-ITM-STAT;
  KS0PW01.SESN-RNG = VPOHTS01.XSN-SESN-YR-RNG;
  KS0PW01.SESN-YR = KS0PW01.SESN-YY;
  KS0PW01.SESN-CD = VPOHTS01.XSE-SESN-CD;
  KS0PW02.SESN-CODE[KS0PWIXM] = KS0PW01.SEASON-CD;

  KS0PW01.PO-ID-MO-RNG = VPOHTS01.PC-PO-ID-MO-RNG;
  KS0PW01.POID-WK = KS0PW01.PC-PO-ID-WORK;
  KS0PW01.FCTY-CD = VPOHTS01.FY-FCTY-CD;
  KS0PW02.PC-PO-ID[KS0PWIXM] = KS0PW01.POID-DISP;

  KS0PW02.SY-STY-NBR[KS0PWIXM] = VPOHTS01.SY-STY-NBR;
  KS0PW02.SY-COLR-CD-ID[KS0PWIXM] = VPOHTS01.SY-COLR-CD-ID;
  KS0PW01.SYSTYNBR = VPOHTS01.SY-STY-NBR;
  KS0PW01.SYCOLRCDID = VPOHTS01.SY-COLR-CD-ID;

   /* get Gender desc*/
  KS0PW01.GNDR-AGE-CD = VPOHTS01.XGA-GNDR-AGE-CD; /* Gender age code*/
  if (VPOHTS01.XGA-GNDR-AGE-CD in XGATBL.XGACD /* If code in table*/
   && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    KS0PW02.GNDR-AGE-ABRV[KS0PWIXM] = XGATBL.XGADESC[sysVar.arrayIndex];
  end

  KS0PW01.KS-FOB-PRICE = VPOHTS01.KS-MIN-FOB-PRC;
  KS0PW02.KS-FOB-PRC[KS0PWIXM] = KS0PW01.KS-FOB-PRICE;

  KS0P132(); /* Get size descriptions*/

  KS0P133(); /* Format the HTS*/

end // end KS0P131

// Select the size description
Function KS0P132()
   /* ------------------------------------------------------------*/

             /* SELECT SIZE FROM DPROD.VSCALE01*/

    /* 1) move in the keys*/
    /* 2) select the number*/
   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.PG3FUNCD = "PC"; /* translator function*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  PG3REC.XGPCD = VPOHTS01.XGP-GPC-CD; /* keys*/
  PG3REC.SY1STNBR = VPOHTS01.SY-STY-NBR;
  PG3REC.SY2CLRID = VPOHTS01.SY-COLR-CD-ID;
  PG3REC.XDMCD = VPOHTS01.XDM-DIM-CD;
  PG3REC.XQACD = "**";

  KS0PS01(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                  /* SIZE BREAKS.*/
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

   /* MOVE 114 TO EZEMNO;*/
  end

  if (PG3REC.PG3RETCD == "00") /* If good return code*/
    KS0PW01.KS0PSZID = VPOHTS01.KS-MIN-SZ-ID;
    KS0PW02.FR-SZ-DESC[KS0PWIXM] = PG3REC.SY4IDDSC[KS0PSZID];
    KS0PW01.KS0PSZID = VPOHTS01.KS-MAX-SZ-ID;
    KS0PW02.TO-SZ-DESC[KS0PWIXM] = PG3REC.SY4IDDSC[KS0PSZID];

  else

    if (PG3REC.PG3RETCD != "09") /* or not found*/
      /* ========  NEXT SENTENCE=======>*/
    else

      if (PG3REC.PG3RETCD == "09") /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      KS0PM001.KS0PPRCNM = "KS0P132"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end

end // end KS0P132

// FORMAT HTS
Function KS0P133()

  KS0PW01.HS-CPTR-CD = VPOHTS01.KS-HTS-CPTR-CD;
  KS0PW01.HS-HDG-CD = VPOHTS01.KS-HTS-HDG-CD;
  KS0PW01.HS-BYTE1 = ".";
  KS0PW01.HS-1ST-SHDG-CD = VPOHTS01.KS-HTS-1ST-SHDG-CD;
  KS0PW01.HS-BYTE2 = ".";
  KS0PW01.HS-2ND-SHDGCD = VPOHTS01.KS-HTS-2ND-SHDGCD1;
  KS0PW01.HS-STAT-CD = VPOHTS01.KS-HTS-STAT-CD;

  KS0PW02.HS-NUMBER[KS0PWIXM] = KS0PW01.HS-NUMBER;
end // end KS0P133

// Add page to temporary storage
Function KS0P140()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  KS0PW02.KS0PWLEN = 840; /* Temporary storage length*/
  TA5REC.TA5APPID = "KS0P"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (KS0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "KS0P140"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    KS0PM001.KS0PPRCNM = "KS0P140"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  KS0PW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  KS0PW01.KS0PWIXM = 1; /* Reset display line number*/

  set KS0PW02 empty; /* Clear temporary storage record*/


end // end KS0P140

// CLOSE VPOHTS01
Function KS0P150()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "KS2000" ("C1", SQLCA, VPOHTS01, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KS0PM001.KS0PPRCNM = "KS0P150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KS0PM001.KS0PPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0P150

// Format and display    KS0PM001
Function KS0P200()
   /* ------------------------------------------------------------*/
               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (KS0PW01.KS0PWPSW == "N") /* No errors found*/

    set KS0PM001 initial; /* clear the map*/

  end
       /* Move heading data*/

  KS0PM001.KS0PM-BUS-UNIT-CD = KS0PW01.HD-BUS-UNIT-CD;
  KS0PM001.KS0PM-PRDCTN-YR = KS0PW01.HD-PRDCTN-YR;
  KS0PM001.KS0PM-PRDCTN-MO = KS0PW01.HD-PRDCTN-MO;
  KS0PM001.KS0PM-DLVR-MO = KS0PW01.HD-DLVR-MO;
  KS0PM001.KS0PM-FCTY-CD = KS0PW01.HD-FCTY-CD;
  KS0PM001.KS0PM-PO-NBR = KS0PW01.HD-PO-NBR;
  KS0PM001.KS0PM-STY-NBR = KS0PW01.HD-STY-NBR;
  KS0PM001.KS0PM-COLR-CD-ID = KS0PW01.HD-COLR-CD-ID;
  KS0PM001.KS0PM-DIM-CD = KS0PW01.HD-DIM-CD;
  KS0PM001.KS0PM-SESN-CD = KS0PW01.HD-SESN-CD;
  KS0PM001.KS0PM-SESN-YR = KS0PW01.HD-SESN-YR;
  KS0PM001.KS0PM-PO-STAT = KS0PW01.HD-PO-STAT;


  KS0PM001.KS0PM-BUS-UNIT-CD = "02";
  set KS0PM001.KS0PM-BUS-UNIT-CD protect;

  if (KS0PW01.KS0PWPSW == "N") /* No errors found*/

    KS0P210(); /* Format the data on the page*/

  end

  KS0PM001.KS0PCURDT = VGVar.currentShortGregorianDate; /* Current date*/


  converse KS0PM001 ;

  KS0PW01.KS0PWPSW = "N"; /* reset problem switch*/

end // end KS0P200

// Format the selected data
Function KS0P210()
   /* ------------------------------------------------------------*/
               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (KS0PW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    KS0P211(); /* Obtain temporary storage page*/

    set KS0PM001.KS0PLITPG skip; /* Display "PAGE" literal*/
    set KS0PM001.KS0PLITOF skip; /* Display "OF" literal*/

    KS0PM001.KS0PTSPAG = KS0PW01.KS0PWTSP; /* Current page number*/
    KS0PM001.TA5TSQIX = KS0PW01.TA5TSQIX; /* Highest page number*/

    KS0PW01.KS0PWIXM = 1; /* Initialize line indexes*/

      /* move all lines of screen data*/

    while (KS0PW01.KS0PWIXM <= 14) /* Until end of lines*/
      KS0PM001.KS0PM-DTL-PO-STAT[KS0PWIXM] = KS0PW02.PC-STAT[KS0PWIXM];
      KS0PM001.KS0PM-DTL-SESN[KS0PWIXM] = KS0PW02.SESN-CODE[KS0PWIXM];
      KS0PM001.KS0PM-DTL-POID[KS0PWIXM] = KS0PW02.PC-PO-ID[KS0PWIXM];
      KS0PM001.KS0PM-DTL-STY[KS0PWIXM] = KS0PW02.SY-STY-NBR[KS0PWIXM];
      KS0PM001.KS0PM-DTL-CLR[KS0PWIXM] = KS0PW02.SY-COLR-CD-ID[KS0PWIXM];
      KS0PM001.KS0PM-GNDR[KS0PWIXM] = KS0PW02.GNDR-AGE-ABRV[KS0PWIXM];
      KS0PM001.KS0PM-DTL-FOB[KS0PWIXM] = KS0PW02.KS-FOB-PRC[KS0PWIXM];
      KS0PM001.KS0PM-DTL-FR-SIZE[KS0PWIXM] = KS0PW02.FR-SZ-DESC[KS0PWIXM];
      KS0PM001.KS0PM-DTL-TO-SIZE[KS0PWIXM] = KS0PW02.TO-SZ-DESC[KS0PWIXM];
      KS0PM001.KS0PM-DTL-HTS[KS0PWIXM] = KS0PW02.HS-NUMBER[KS0PWIXM];

      KS0PW01.KS0PWIXM = KS0PW01.KS0PWIXM + 1; /* Increment line indexes*/

    end
  end

end // end KS0P210

// Read temporary storage page
Function KS0P211()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/

   /* 1) Obtain the next page of data to display.*/
   /* 2) If error occurs, indicate system error and exit to*/
      /* redisplay the map.*/

   /* ------------------------------------------------------------*/

  KS0PW02.KS0PWLEN = 840; /* Temporary storage length*/
  TA5REC.TA5APPID = "KS0P"; /* Application identification*/
  TA5REC.TA5TSQIX = KS0PW01.KS0PWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (KS0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "KS0P211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0PM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    KS0PM001.KS0PPRCNM = "KS0P211"; /* Process name*/
    KS0PW01.KS0PWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end


end // end KS0P211

// Check attention identifier
Function KS0P300()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to KS0A or KS0I.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 7) If any AI pressed other than ENTER, PF7, or PF8*/
      /* indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    KS0PW01.KS0PWPSW = "N"; /* Reset problem switch*/
    KS0PW01.KS0PWSWR = "N"; /* Reset request for data*/
    KS0PM001.KS0PPRCNM = "KS0P300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    if (COMMAREA.CAFROMAP == "KS0I")
      COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* set to Carrier app*/
    else
      COMMAREA.CATOAP = "KS0A"; /* set to Carrier app*/
    end
   /* MOVE ' ' TO COMMAREA.CAITEM;    /* clear item field*/
   /* MOVE ' ' TO COMMAREA.CAUSERA;   /* clear user area*/
    KS0P110(); /* purge any temp storage*/
    XSKS-S0001(); /* Exit to another application*/
    KS0PM001.KS0PPRCNM = "KS0P300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (KS0PM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = KS0PM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = KS0PM001.CAITEM; /* Application data*/
      COMMAREA.CAUSERA = " "; /* clear user area*/
      KS0P110(); /* purge any temp storage*/
      XSKS-S0001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      KS0PW01.KS0PWPSW = "Y"; /* Indicate problem*/
    end
    set KS0PM001.CATOAP cursor, modified, bold; /* Highlight*/
    KS0PM001.KS0PPRCNM = "KS0P300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "KS0PM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    COMMAREA.CAUSERA = " "; /* clear user area*/
    KS0P110(); /* purge any temp storage*/
    XSKS-S0001(); /* Exit to another application*/
    KS0PM001.KS0PPRCNM = "KS0P300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not scroll request*/
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf3) 
    KS0PM001.KS0PPRCNM = "KS0P300"; /* Process name*/
    KS0PW01.KS0PWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end KS0P300

Function KS0P400()
   /* ------------------------------------------------------------*/
                /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/
  set KS0PM001.KS0PM-BUS-UNIT-CD initialAttributes;
  set KS0PM001.KS0PM-PRDCTN-YR initialAttributes;
  set KS0PM001.KS0PM-PRDCTN-MO initialAttributes;
  set KS0PM001.KS0PM-DLVR-MO initialAttributes;
  set KS0PM001.KS0PM-FCTY-CD initialAttributes;
  set KS0PM001.KS0PM-PO-NBR initialAttributes;
  set KS0PM001.KS0PM-STY-NBR initialAttributes;
  set KS0PM001.KS0PM-COLR-CD-ID initialAttributes;
  set KS0PM001.KS0PM-DIM-CD initialAttributes;
  set KS0PM001.KS0PM-SESN-CD initialAttributes;
  set KS0PM001.KS0PM-SESN-YR initialAttributes;
  set KS0PM001.KS0PM-PO-STAT initialAttributes;

  set KS0PM001.CATOAP initialAttributes;
  set KS0PM001.CAITEM initialAttributes;

end // end KS0P400

// Verify entered data   KS0PM001
Function KS0P500()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (KS0PM001.CAITEM > " ") /* Application data was entered*/
    set KS0PM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    KS0PW01.KS0PWPSW = "Y"; /* indicate error message*/
    KS0PM001.KS0PPRCNM = "KS0P500"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      KS0P510(); /* Verify scroll request*/
      KS0P520(); /* Do edits*/
    else
      if (KS0PM001.KS0PM-PRDCTN-YR == " " /* If no data entered*/
       && KS0PM001.KS0PM-PRDCTN-MO == " " 
       && KS0PM001.KS0PM-DLVR-MO == " "   
       && KS0PM001.KS0PM-FCTY-CD == " "   
       && KS0PM001.KS0PM-PO-NBR == " "    
       && KS0PM001.KS0PM-STY-NBR == " "   
       && KS0PM001.KS0PM-COLR-CD-ID == " "
       && KS0PM001.KS0PM-DIM-CD == " "    
       && KS0PM001.KS0PM-SESN-CD == " "   
       && KS0PM001.KS0PM-SESN-YR == " "   
       && KS0PM001.KS0PM-PO-STAT == " ") 

        KS0P110(); /* purge temporary storage*/

        set KS0PW02 empty; /* empty screen ws*/

        KS0PW01.HD-PRDCTN-YR = " ";
        KS0PW01.HD-PRDCTN-MO = " ";
        KS0PW01.HD-DLVR-MO = " ";
        KS0PW01.HD-FCTY-CD = " ";
        KS0PW01.HD-PO-NBR = " ";
        KS0PW01.HD-STY-NBR = " ";
        KS0PW01.HD-COLR-CD-ID = " ";
        KS0PW01.HD-DIM-CD = " ";
        KS0PW01.HD-SESN-CD = " ";
        KS0PW01.HD-SESN-YR = " ";
        KS0PW01.HD-PO-STAT = " ";

        set KS0PM001 initial; /* clear map*/
        KS0PW01.KS0PWPSW = "Y"; /* indicate error message*/
        converseLib.validationFailed(161); /* data must be entered*/
        KS0PM001.KS0PPRCNM = "KS0P500"; /* process name*/
      else
        if (KS0PM001.KS0PM-PRDCTN-YR != KS0PW01.HD-PRDCTN-YR
         || KS0PM001.KS0PM-PRDCTN-MO != KS0PW01.HD-PRDCTN-MO
         || KS0PM001.KS0PM-DLVR-MO != KS0PW01.HD-DLVR-MO
         || KS0PM001.KS0PM-FCTY-CD != KS0PW01.HD-FCTY-CD
         || KS0PM001.KS0PM-PO-NBR != KS0PW01.HD-PO-NBR
         || KS0PM001.KS0PM-STY-NBR != KS0PW01.HD-STY-NBR
         || KS0PM001.KS0PM-COLR-CD-ID != KS0PW01.HD-COLR-CD-ID
         || KS0PM001.KS0PM-DIM-CD != KS0PW01.HD-DIM-CD
         || KS0PM001.KS0PM-SESN-CD != KS0PW01.HD-SESN-CD
         || KS0PM001.KS0PM-SESN-YR != KS0PW01.HD-SESN-YR
         || KS0PM001.KS0PM-PO-STAT != KS0PW01.HD-PO-STAT)

          KS0P110(); /* purge temporary storage*/
          set KS0PW02 empty; /* empty screen ws*/

          KS0PW01.HD-BUS-UNIT-CD = KS0PM001.KS0PM-BUS-UNIT-CD;
          KS0PW01.HD-PRDCTN-YR = KS0PM001.KS0PM-PRDCTN-YR;
          KS0PW01.HD-PRDCTN-MO = KS0PM001.KS0PM-PRDCTN-MO;
          KS0PW01.HD-DLVR-MO = KS0PM001.KS0PM-DLVR-MO;
          KS0PW01.HD-FCTY-CD = KS0PM001.KS0PM-FCTY-CD;
          KS0PW01.HD-PO-NBR = KS0PM001.KS0PM-PO-NBR;
          KS0PW01.HD-STY-NBR = KS0PM001.KS0PM-STY-NBR;
          KS0PW01.HD-COLR-CD-ID = KS0PM001.KS0PM-COLR-CD-ID;
          KS0PW01.HD-DIM-CD = KS0PM001.KS0PM-DIM-CD;
          KS0PW01.HD-SESN-CD = KS0PM001.KS0PM-SESN-CD;
          KS0PW01.HD-SESN-YR = KS0PM001.KS0PM-SESN-YR;
          KS0PW01.HD-PO-STAT = KS0PM001.KS0PM-PO-STAT;

          set KS0PM001 initial;

          KS0PM001.KS0PM-BUS-UNIT-CD = KS0PW01.HD-BUS-UNIT-CD;
          KS0PM001.KS0PM-PRDCTN-YR = KS0PW01.HD-PRDCTN-YR;
          KS0PM001.KS0PM-PRDCTN-MO = KS0PW01.HD-PRDCTN-MO;
          KS0PM001.KS0PM-DLVR-MO = KS0PW01.HD-DLVR-MO;
          KS0PM001.KS0PM-FCTY-CD = KS0PW01.HD-FCTY-CD;
          KS0PM001.KS0PM-PO-NBR = KS0PW01.HD-PO-NBR;
          KS0PM001.KS0PM-STY-NBR = KS0PW01.HD-STY-NBR;
          KS0PM001.KS0PM-COLR-CD-ID = KS0PW01.HD-COLR-CD-ID;
          KS0PM001.KS0PM-DIM-CD = KS0PW01.HD-DIM-CD;
          KS0PM001.KS0PM-SESN-CD = KS0PW01.HD-SESN-CD;
          KS0PM001.KS0PM-SESN-YR = KS0PW01.HD-SESN-YR;
          KS0PM001.KS0PM-PO-STAT = KS0PW01.HD-PO-STAT;

          KS0PW01.KS0PWSWR = "Y"; /* set request for data to yes*/

          KS0P520(); /* Verify any changed data*/

        else /* If no data was changed*/

   /* MOVE 'Y' TO KS0PW01.KS0PWSWR;    /* set request for data to yes*/

          KS0P520(); /* Verify selections and other data*/

        end
      end
    end
  end


end // end KS0P500

// Verify scroll request
Function KS0P510()
   /* ------------------------------------------------------------*/

               /* VERIFY SCROLL REQUEST*/

   /* 1) Ensure that pages exist to scroll forward or back.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0PW01.KS0PWTSP < 2)       /* and no previous pages*/
    KS0PW01.KS0PWPSW = "Y"; /* indicate problem*/
    KS0PM001.KS0PPRCNM = "KS0P510"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0PW01.KS0PWTSP >= KS0PW01.TA5TSQIX) /* and no more pages*/
    KS0PW01.KS0PWPSW = "Y"; /* indicate problem*/
    KS0PM001.KS0PPRCNM = "KS0P510"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end


end // end KS0P510

// Verify any changed data
Function KS0P520()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) Verify valid selections.*/
   /* 2) Verify that all dates entered are valid.*/
   /* 3) Verify that all locations entered are valid.*/
   /* 4) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - GPC/STYLE , GPC/SESN/YR*/
  /* ------------------------------------------------------------*/

  if (KS0PM001.KS0PM-STY-NBR == " "
   && KS0PM001.KS0PM-SESN-CD == " ")
    set KS0PM001.KS0PM-STY-NBR cursor, bold;
    KS0PM001.KS0PPRCNM = "KS0P520"; /* Process name*/
    converseLib.validationFailed(161);
    KS0PW01.KS0PWPSW = "Y";
  end

  /* ------------------------------------------------------------*/
  /* Verify the Season Code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0PM001.KS0PM-SESN-CD > " ") /* Season code entered*/
    if (KS0PM001.KS0PM-SESN-CD in XSETBL.XSECD /* Code in table*/
     && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      if (KS0PM001.KS0PM-SESN-YR >= "00"
       && KS0PM001.KS0PM-SESN-YR <= "99")

    /* Next Sentence*/

      else

        KS0PM001.KS0PPRCNM = "KS0P520"; /* Process name*/
        set KS0PM001.KS0PM-SESN-YR cursor, bold; /* Highlight*/
        converseLib.validationFailed(26); /* Field missing or invalid*/
        KS0PW01.KS0PWPSW = "Y";
      end

    else

    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

      KS0PM001.KS0PPRCNM = "KS0P520"; /* Process name*/
      set KS0PM001.KS0PM-SESN-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(27); /* Field missing or invalid*/
      KS0PW01.KS0PWPSW = "Y";

    end
  else
    if (KS0PM001.KS0PM-SESN-YR >= "00"
     && KS0PM001.KS0PM-SESN-YR <= "99")

      KS0PM001.KS0PPRCNM = "KS0P520"; /* Process name*/
      set KS0PM001.KS0PM-SESN-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(27); /* Field missing or invalid*/
      KS0PW01.KS0PWPSW = "Y";
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the PO Status entered.*/
  /* ------------------------------------------------------------*/

  if (KS0PM001.KS0PM-PO-STAT == "OP"
   || KS0PM001.KS0PM-PO-STAT == "CL"
   || KS0PM001.KS0PM-PO-STAT == "CX"
   || KS0PM001.KS0PM-PO-STAT == "  ")

    /* Next Sentence*/

  else

    KS0PM001.KS0PPRCNM = "KS0P520"; /* Process name*/
    set KS0PM001.KS0PM-PO-STAT cursor, bold; /* Highlight*/
    converseLib.validationFailed(162); /* Field missing or invalid*/
    KS0PW01.KS0PWPSW = "Y";
  end

  /* ------------------------------------------------------------*/
  /* Verify the poid entered*/
  /* ------------------------------------------------------------*/

  if (KS0PM001.KS0PM-PRDCTN-YR > " ")
    if (KS0PM001.KS0PM-PRDCTN-MO > " ")
      if (KS0PM001.KS0PM-PRDCTN-MO > "00"
       && KS0PM001.KS0PM-PRDCTN-MO <= "12")
        /* NEXT SENTENCE*/
      else
        KS0PM001.KS0PPRCNM = "KS0P520"; /* Process name*/
        set KS0PM001.KS0PM-PRDCTN-MO cursor, bold; /* Highlight*/
        converseLib.validationFailed(114); /* Field missing or invalid*/
        KS0PW01.KS0PWPSW = "Y";
      end
      if (KS0PM001.KS0PM-DLVR-MO > " ")
        if (KS0PM001.KS0PM-DLVR-MO > "00"
         && KS0PM001.KS0PM-DLVR-MO <= "12")
          /* NEXT SENTENCE*/
        else
          KS0PM001.KS0PPRCNM = "KS0P520"; /* Process name*/
          set KS0PM001.KS0PM-DLVR-MO cursor, bold; /* Highlight*/
          converseLib.validationFailed(114); /* Field missing or invalid*/
          KS0PW01.KS0PWPSW = "Y";
        end
      else
        KS0PM001.KS0PPRCNM = "KS0P520"; /* Process name*/
        set KS0PM001.KS0PM-DLVR-MO cursor, bold; /* Highlight*/
        converseLib.validationFailed(114); /* Field missing or invalid*/
        KS0PW01.KS0PWPSW = "Y";
      end
    else
      KS0PM001.KS0PPRCNM = "KS0P520"; /* Process name*/
      set KS0PM001.KS0PM-PRDCTN-MO cursor, bold; /* Highlight*/
      converseLib.validationFailed(114); /* Field missing or invalid*/
      KS0PW01.KS0PWPSW = "Y";
    end
  end

end // end KS0P520

// Process valid input request
Function KS0P600()
   /* ------------------------------------------------------------*/

              /* PROCESS VALID INPUT REQUESTS*/

     /* 3) If a scroll request, adjust temporary storage page*/
        /* number.*/
     /* 4) Transfer to requested map or application according*/
        /* to PFkey pressed.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* Check for pfkey operations*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    KS0PW01.KS0PWTSP = KS0PW01.KS0PWTSP - 1; /* Decrement page number*/
    KS0PW01.KS0PWSWR = "N"; /* Request for data*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      KS0PW01.KS0PWTSP = KS0PW01.KS0PWTSP + 1; /* Increment page number*/
      KS0PW01.KS0PWSWR = "N"; /* Request for data*/
    else
      if (converseVar.eventKey is enter)
        KS0PW01.KS0PWSWR = "Y"; /* Request for data*/
      end
    end
  end


end // end KS0P600

// Size description translation
Function KS0PS01()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine accesses the Production Style/Color and the*/
   /* Product Scale Tables and returns the Size Identification,*/
   /* Size Description and Division Code for all valid sizes of a*/
   /* GPC/Style/Color/Dimension.*/

   /* *** Code the following before this is executed:         ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3FUNCD: PC = all valid sizes             ****/
   /* ***                    IE = int. sz id to desc.         ****/
   /* ***                    EI = desc. to int. sz id         ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3DATFM: C = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3XDVCD: Highest division code to return. ****/
   /* ***                    Valid codes are '01','02','03'.  ****/
   /* ***                    Blank defaults to all divisions. ****/
   /* ***                                                     ****/
   /* ***   TA1REC.TA1PGMNM: The name of the calling process, ****/
   /* ***                    for Error Diagnosis Reporting.   ****/

   /* This subroutine will return the CSP return code in EZERT8,*/
   /* the Size Translation Subroutine return code in PG3RETCD*/
   /* and, if a normal return, the size information in PG3SIZES.*/

   /* *** Both return codes must indicate normal return.      ****/
   /* ***                                                     ****/
   /* ***   EZERT8                                            ****/
   /* ***   ------                                            ****/
   /* ***   '00000000' = Normal return                        ****/
   /* ***   OTHER      = Unexpected error has occurred        ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3RETCD                                   ****/
   /* ***   ---------------                                   ****/
   /* ***   '00'  = Normal return                             ****/
   /* ***   '09'  = Data in use by another application        ****/
   /* ***   OTHER = Unexpected error has occurred             ****/

   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting to TA0020.  The calling process must check the*/
   /* return codes and take the appropriate action relating to*/
   /* its terminal output.  The calling process does not need to*/
   /* do any Error Diagnosis Reporting.*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Obtain size descriptions from Size Translation Subroutine.*/
   /* ------------------------------------------------------------*/

  try
    call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Size translation*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "00")       /* and normal return*/

    return; /* Return to previous process*/

  end
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

   /* MOVE 114 TO EZEMNO;*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and resource not available*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
    TA1REC.TA1LOC = "XSPG301 DESCRIPTION TRANSLATION";
    TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && PG3REC.PG3RETCD == "99")       /* and negative SQL error*/

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
      TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/
      TA1REC.TA1LOC = "XSPG301 DESCRIPTION TRANSLATION";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    else

      TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
      TAEREC.TAEDESC2 = PG3REC.PG3GROUP; /* Subroutine parameters*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "XSPG301 DESCRIPTION TRANSLATION";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end KS0PS01

//*** RECORD=KS0PW01 ****
// Working storage for KS0P
// ***********************
Record KS0PW01 type basicRecord
  10 KS0PWSWR KS0PWSWR ; 
  10 KS0PWPSW KS0PWPSW ; 
  10 KS0PW-DATE-WORK KS0PW-DATE-WORK ; 
    15 KS0PW-FILLER KS0PW-FILLER ; 
    15 KS0PW-CENTURY KS0PW-CENTURY ; 
    15 KS0PW-YEAR KS0PW-YEAR ; 
    15 KS0PW-MONTH KS0PW-MONTH ; 
    15 KS0PW-DAY KS0PW-DAY ; 
  10 SESN-WORK SESN-WORK ; 
    15 CEN-WORK CEN-WORK ; 
    15 SESN-YR-WORK SESN-YR-WORK ; 
  10 KS0PW-SESN-YR KS0PW-SESN-YR ; 
    15 KS0PW-SESN-CENT KS0PW-SESN-CENT ; 
    15 KS0PW-SESN-YY KS0PW-SESN-YY ; 
  10 KS0PW-SESN-YR-NUM KS0PW-SESN-YR-NUM ; 
  10 KS0PW-PO-NBR-NUM KS0PW-PO-NBR-NUM ; 
  10 KS0PW-POIDT KS0PW-POIDT ; 
    15 KS0PW-PRDCTN-CEN KS0PW-PRDCTN-CEN ; 
    15 KS0PW-PRDCTN-YR KS0PW-PRDCTN-YR ; 
    15 KS0PW-PRDCTN-MO KS0PW-PRDCTN-MO ; 
    15 KS0PW-DLVR-MO KS0PW-DLVR-MO ; 
  10 KS0PW-POIDT-NUM KS0PW-POIDT-NUM ; 
  10 KS0PWSW1 KS0PWSW1 ; 
  10 KS0PWIXM KS0PWIXM ; 
  10 KS0PWTSP KS0PWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SEASON-CD SEASON-CD ; 
    15 SESN-CD SESN-CD ; 
    15 SESN-YR SESN-YR ; 
  10 SESN-RNG SESN-RNG ; 
    15 SESN-CC SESN-CC ; 
    15 SESN-YY SESN-YY ; 
  10 POID-DISP POID-DISP ; 
    15 POID-WK POID-WK ; 
    15 FCTY-CD FCTY-CD ; 
  10 PO-ID-MO-RNG PO-ID-MO-RNG ; 
    15 PC-PO-ID-CC PC-PO-ID-CC ; 
    15 PC-PO-ID-WORK PC-PO-ID-WORK ; 
  10 GNDR-AGE-CD GNDR-AGE-CD ; 
  10 KS-FOB-PRICE KS-FOB-PRICE ; 
  10 KS-FOB-LEAD KS-FOB-LEAD ; 
  10 KS-FOB-TRAIL KS-FOB-TRAIL ; 
  10 KS0PSZID KS0PSZID ; 
  10 HS-NUMBER HS-NUMBER ; 
    15 HS-CPTR-CD HS-CPTR-CD ; 
    15 HS-HDG-CD HS-HDG-CD ; 
    15 HS-BYTE1 HS-BYTE1 ; 
    15 HS-1ST-SHDG-CD HS-1ST-SHDG-CD ; 
    15 HS-BYTE2 HS-BYTE2 ; 
    15 HS-2ND-SHDGCD HS-2ND-SHDGCD ; 
    15 HS-STAT-CD HS-STAT-CD ; 
  10 HD-BUS-UNIT-CD HD-BUS-UNIT-CD ; 
  10 HD-PRDCTN-YR HD-PRDCTN-YR ; 
  10 HD-PRDCTN-MO HD-PRDCTN-MO ; 
  10 HD-DLVR-MO HD-DLVR-MO ; 
  10 HD-FCTY-CD HD-FCTY-CD ; 
  10 HD-PO-NBR HD-PO-NBR ; 
  10 HD-STY-NBR HD-STY-NBR ; 
  10 HD-COLR-CD-ID HD-COLR-CD-ID ; 
  10 HD-DIM-CD HD-DIM-CD ; 
  10 HD-SESN-CD HD-SESN-CD ; 
  10 HD-SESN-YR HD-SESN-YR ; 
  10 HD-PO-STAT HD-PO-STAT ; 
  10 PC-ITM-STAT PC-ITM-STAT ; 
  10 PCITMSTAT PCITMSTAT ; 
  10 SYSTYNBR SYSTYNBR ; 
  10 SYCOLRCDID SYCOLRCDID ; 
  10 KS0PW-MAX-PAGES KS0PW-MAX-PAGES ; 
end // end KS0PW01

//*** RECORD=KS0PW02 ****
// Temporary storage record for KS0P
// ***********************
Record KS0PW02 type basicRecord
  10 KS0PWLEN KS0PWLEN ; 
  10 KS0PWLIN KS0PWLIN [14] ; 
    15 PC-STAT PC-STAT ; 
    15 SESN-CODE SESN-CODE ; 
    15 PC-PO-ID PC-PO-ID ; 
    15 SY-STY-NBR SY-STY-NBR ; 
    15 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    15 GNDR-AGE-ABRV GNDR-AGE-ABRV ; 
    15 KS-FOB-PRC KS-FOB-PRC ; 
    15 FR-SZ-DESC FR-SZ-DESC ; 
    15 TO-SZ-DESC TO-SZ-DESC ; 
    15 HS-NUMBER HS-NUMBER ; 
end // end KS0PW02

// TS_ORIG_LOC_CD
DataItem GNDR-AGE-ABRV char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GNDR-AGE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem HD-PO-NBR char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem HD-PO-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS-FOB-LEAD num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS-FOB-TRAIL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PSZID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-CENTURY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-DATE-WORK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-DAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-DLVR-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0PW-FILLER num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-MAX-PAGES num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-PO-NBR-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-POIDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0PW-POIDT-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-PRDCTN-CEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0PW-PRDCTN-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0PW-PRDCTN-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0PW-SESN-CENT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0PW-SESN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0PW-SESN-YR-NUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0PW-SESN-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0PW-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem KS0PWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem KS0PWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem KS0PWLIN char(58)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem KS0PWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch1
DataItem KS0PWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0PWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem KS0PWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-ITM-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PCITMSTAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

