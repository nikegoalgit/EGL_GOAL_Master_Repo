package ks0k;

import corpcom1.CACHGFL;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPKS-00001;
import corpcom3.XPXCT01;
import corpcom3.XPXDM01;
import corpcom3.XPXGP01;
import corpcom3.XPXMC01;
import corpcom3.XPXND01;
import corpcom3.XPXX001;
import corpcom3.XPYKP01;
import corpcom4.XSKS-S0001;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpcom7.XXXUSER;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XDMTBL;
import corpx1.XDVTBL;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XMCCD;
import corpx1.XMCTBL;
import corpx1.XNDTBL;
import corpx2.XNDCD;
import corpx2.XXXRKNBR;
import corpy2.YKPTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import ks.common.*;
import pc.common.PC3POIDT;
import pc.common.PC6REC;
import pc.common.PCYREC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VCPROB01;
import vv.common.VCPROD01;
import vv.common.VKSCTL01;
//*** PROGRAM=KS0K ****
// This application will allow Customs to inquire on and
// maintain planimeter readings for footwear products. The user
// can bring up a list of planimeter readings and make
// selections from them for maintenance. New planimeter
// readings may also be added.
// 
// Entry into this application can come from two places.
// Customs may select optin 5 from the KS main menu or entry
// can be a transfer from KS0I.
// 
// If entering from KS0I, the list will be pre-selected for the
// user and no new list will be allowed to be selected.
// 
// Security for this application will be inquiry only or
// inquiry/maintenence. The application will check preset flags
// to determine a user's security type.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/03/92  bantho  New application.
//   000    11/17/92  SMARIE  Change add to default DIM-CD of
//                            00 if none is entered.
//   000    11/24/92  DHUFFM  Fix order of actual readings on
//                            Map 2 (change).
//   000    11/30/92  SMARIE  Fix the MAT-CTNT descriptions on
//                            screen 2 to match values read.
//   000    01/04/93  KKYLE   Fix map1 cursor positioning on
//                            error, and clearing of data.
//  c074    02/10/93  DHUFFM  Chg style field to 6 chars.
//   000    06/02/93  DHUFFM  Fix style and color desc problems
// KS9999   09/21/93  KKYLE   MODS FOR 4.1 CONVERSION
// KS0108   01/09/95  DHUFFM  Remove 2nd planimeter percent
//                            validation.
//          06/29/97  RCORLE  Mod for equipment
//          08/05/97  RTANGI  Message table change for 'BU'
//          08/26/97  RTANGI  New messages for 'bu'
//          09/05/97  RTANGI  Factory code changes
// y2kfix   11-05-97  oricha  y2k modifications:  ks0k-22100
//                            adjusted to display 00 year.
// -------  --------  ------  ---------------------------------
// *********************
Program KS0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  KS0KW00 KS0KW00; // record
  KS0KW01 KS0KW01; // record
  KS0KW02 KS0KW02; // record
  KSWREC KSWREC; // record
  PC6REC PC6REC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCPROB01 VCPROB01; // record
  VCPROD01 VCPROD01; // record
  VKSCTL01 VKSCTL01; // record
  VPLNMT01 VPLNMT01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XMCTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use YKPTBL {deleteAfterUse = yes}; // table
  use KS0KM.KS0KM001,  // forms
      KS0KM.KS0KM002,
      KS0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/

    set FY1REC empty; /* factory table record*/
    set KS0KM001 initial; /* M001 input/output*/
    set KS0KM002 initial; /* M002 input/output*/
    set KS0KW00 empty; /* Working storage*/
    set KS0KW01 empty; /* M001 display storage*/
    set KS0KW02 empty; /* M002 display storage*/
    set PC6REC empty; /* PO item table record*/
    set SQLCA empty; /* sql communication area*/
    set TA1REC empty; /* error diagnosis information*/
    set TA2REC empty; /* online date verification routine*/
    set TA5REC empty; /* temperary storage parameters*/
    set VKSCTL01 empty; /* customs control record*/
    set XX0XW01 empty; /* date/time subroutine parameters*/

    if (COMMAREA.CAFROMAP == "KS0I") /* if from KS0I*/
      KS0KW00.KS0KW-SWR = "Y"; /* Request for data switch*/
      if (KSWREC.KSW-POIDT == 0)
        KS0KM001.KS0KM-PRDCTN-YR = " "; /* clear map fields*/
        KS0KM001.KS0KM-PRDCTN-MO = " ";
        KS0KM001.KS0KM-DLVR-MO = " ";
        KS0KW01.KS0KW-PRDCTN-YR = " "; /* clear w01 fields*/
        KS0KW01.KS0KW-PRDCTN-MO = " ";
        KS0KW01.KS0KW-DLVR-MO = " ";
      else
        KS0KW00.KS0KW-DATE-WORK = KSWREC.KSW-POIDT;
        KS0KW01.KS0KW-PRDCTN-YR = KS0KW00.KS0KW-YEAR;
        KS0KM001.KS0KM-PRDCTN-YR = KS0KW00.KS0KW-YEAR;
        KS0KW01.KS0KW-PRDCTN-MO = KS0KW00.KS0KW-MONTH;
        KS0KM001.KS0KM-PRDCTN-MO = KS0KW00.KS0KW-MONTH;
        KS0KW01.KS0KW-DLVR-MO = KS0KW00.KS0KW-DAY;
        KS0KM001.KS0KM-DLVR-MO = KS0KW00.KS0KW-DAY;
      end
      KS0KW01.KS0KW-FCTY-CD = KSWREC.KSW-FCTY-CD;
      KS0KM001.KS0KM-FCTY-CD = KSWREC.KSW-FCTY-CD;
      KS0KW01.KS0KW-GPC-CD = KSWREC.XGPCD;
      KS0KM001.KS0KM-GPC-CD = KSWREC.XGPCD;
      KS0KW01.KS0KW-STY-NBR = KSWREC.SY1STNBR;
      KS0KM001.KS0KM-STY-NBR = KSWREC.SY1STNBR;
      KS0KW01.KS0KW-COLR-CD-ID = KSWREC.SY2CLRID;
      KS0KM001.KS0KM-COLR-CD-ID = KSWREC.SY2CLRID;
      KS0KW01.KS0KW-DIM-CD = KSWREC.XDMCD;
      KS0KM001.KS0KM-DIM-CD = KSWREC.XDMCD;
    else
      KS0KW00.KS0KW-SWR = "N"; /* Request for data switch*/
      KS0KM001.KS0KM-GPC-CD = "02"; /* default gpc cd*/
      KS0KW01.KS0KW-GPC-CD = "02";
      if ("02" in XGPTBL.XGPCD)
        KS0KM001.KS0KM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      end
      if ("02" in XGPTBL.XGPCD)
        KS0KW01.KS0KW-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      end
      set KS0KM001.XXXLITPG invisible, skip;
      set KS0KM001.XXXLITOF invisible, skip;
      set KS0KM001.XXXTSPAG invisible, skip;
      set KS0KM001.TA5TSQIX invisible, skip;
      set KS0KM001.KS0KM-STY-NBR cursor;
    end

    KS0KW00.KS0KW-SWF = "Y"; /* Format the map switch*/
    KS0KW00.KS0KW-SWD = "1"; /* Set to map 1 display*/
    converseLib.validationFailed(0); /* Set message blank*/

    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto KS0K-00000; /* Converse the main process*/

    KS0K-00000: KS0K-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto KS0K-00000; /* Converse the main process*/


  end // end main
end // end KS0K

// Main process to display a map
Function KS0K-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) If specified, display the first map.*/
  /* 2) Otherwise, if specified, display the second map.*/
  /* 3) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-SWD == "1") /* Map 1 was requested*/

    KS0K-10000(); /* Display map 1*/

  else

    if (KS0KW00.KS0KW-SWD == "2") /* Map 2 was requested*/

      KS0K-20000(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
      /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      KSWREC.XXXPRCNM = "00000"; /* Module identification*/
      KSWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = KS0KW00.KS0KW-SWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
      /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "KS0A"; /* TO application*/

      XSKS-S0001(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end
  end


end // end KS0K-00000

// Main process to display a map
Function KS0K-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0K-11000(); /* Obtain the data to display*/

  KS0K-12000(); /* Format and display the map*/

  KS0K-13000(); /* Check attention identifier*/

  KS0K-14000(); /* Reset fields to normal intensity*/

  KS0K-15000(); /* Verify the data that was entered*/

  KS0K-16000(); /* Process valid input request*/


end // end KS0K-10000

// Obtain the data to display
Function KS0K-11000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    if (converseVar.validationMsgNum == 1) /* update successful is ok*/
      /* next sentence*/
    else
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/

  KS0KW00.XXXTSLEN = 1086; /* Temporary storage page length*/

  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO == 0) /* No message to display*/
    KS0KW00.XXXTSPAG = 1; /* Page number to display*/
  end

  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage*/
  /* ------------------------------------------------------------*/

  KS0K-11100(); /* Purge any temporary storage*/

  /* ------------------------------------------------------------*/
  /* clear map 1 working storage*/
  /* ------------------------------------------------------------*/

  set KS0KW01 empty; /* clear map 1 working storage*/

  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/

  KS0K-11200(); /* Select set and open cursor*/

  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-PREV-RANK = 2; /* set prev rank flag*/
  KS0KW00.KS0KW-IX2 = 1; /* set screen line index*/
  KS0KW00.KS0KW-SWC = "N"; /* End of cursor switch*/

  while (KS0KW00.KS0KW-SWC == "N") /* Until end of cursor*/

    KS0K-11300(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (KS0KW00.KS0KW-SWC == "N") /* Not end of cursor*/
      KS0K-11400(); /* Save data in display storage*/
    else
      if (KS0KW00.KS0KW-PREV-RANK == 1)
        KS0K-11410(); /* format the data on screen*/
      end
    end

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (KS0KW00.KS0KW-IX2 >= 11) /* Page is full*/

      KS0K-11500(); /* Add page to temporary storage*/

      KS0KW00.KS0KW-IX2 = 1; /* Display line index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-IX2 > 1) /* Page was formatted*/
    KS0K-11500(); /* Add page to temporary storage*/
  end

  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/

  KS0K-11600(); /* Close the selected set cursor*/

end // end KS0K-11000

// purge temporary storage
Function KS0K-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-SWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0KW00.TA5TSQIX = 0; /* Highest page number*/

  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (KS0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  KSWREC.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-11100

// sel set from dcustm.vplnmt01
Function KS0K-11200()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  set VPLNMT01 empty;

  /* ------------------------------------------------------------*/
  /* Check to see if we are returning from an add or change and*/
  /* if the key fields have been changed.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-LAST-CHGD-ROW > " ")
    if (KS0KM001.KS0KM-DIM-CD > " "
     && KS0KW00.KS0KW-LAST-DIM != KS0KM001.KS0KM-DIM-CD)
      KS0KM001.KS0KM-DIM-CD = KS0KW00.KS0KW-LAST-DIM;
    end
    if (KS0KM001.KS0KM-COLR-CD-ID > " "
     && KS0KW00.KS0KW-LAST-COLOR != KS0KM001.KS0KM-COLR-CD-ID)
      KS0KM001.KS0KM-COLR-CD-ID = KS0KW00.KS0KW-LAST-COLOR;
    end
    if (KS0KM001.KS0KM-STY-NBR > " "
     && KS0KW00.KS0KW-LAST-STYLE != KS0KM001.KS0KM-STY-NBR)
      if (KS0KW00.KS0KW-LAST-STYLE > " ")
        KS0KM001.KS0KM-STY-NBR = KS0KW00.KS0KW-LAST-STYLE;
      else
        if (KS0KW00.KS0KW-LAST-X-STYLE > " "
         && KS0KW00.KS0KW-LAST-X-STYLE != KS0KM001.KS0KM-STY-NBR)
          KS0KM001.KS0KM-STY-NBR = KS0KW00.KS0KW-LAST-X-STYLE;
        end
      end
    else
      if (KS0KM001.KS0KM-STY-NBR == " "
       && KS0KM001.KS0KM-PRDCTN-YR == " "
       && KS0KM001.KS0KM-PRDCTN-MO == " "
       && KS0KM001.KS0KM-DLVR-MO == " ")
        if (KS0KW00.KS0KW-LAST-STYLE > " ")
          KS0KM001.KS0KM-STY-NBR = KS0KW00.KS0KW-LAST-STYLE;
        else
          if (KS0KW00.KS0KW-LAST-X-STYLE > " ")
            KS0KM001.KS0KM-STY-NBR = KS0KW00.KS0KW-LAST-X-STYLE;
          end
        end
      end
    end
  /* check for change in POID*/
    if (KS0KM001.KS0KM-PRDCTN-YR > " "
     && KS0KM001.KS0KM-PRDCTN-MO > " "
     && KS0KM001.KS0KM-DLVR-MO > " "
     && KS0KW00.KS0KW-LAST-PC3POIDT > 0)
      KS0KW00.KS0KW-DATE-WORK = KS0KW00.KS0KW-LAST-PC3POIDT;
      KS0KW00.KS0KW-YEAR-2 = KS0KM001.KS0KM-PRDCTN-YR;
      KS0KW00.KS0KW-MONTH-2 = KS0KM001.KS0KM-PRDCTN-MO;
      KS0KW00.KS0KW-DAY-2 = KS0KM001.KS0KM-DLVR-MO;
      if (KS0KW00.KS0KW-YEAR-2 > 60)
        KS0KW00.KS0KW-CENTURY-2 = 19;
      else
        KS0KW00.KS0KW-CENTURY-2 = 20;
      end
      if (KS0KW00.KS0KW-DATE-WORK != KS0KW00.KS0KW-DATE-WORK-2)
        KS0KM001.KS0KM-PRDCTN-YR = KS0KW00.KS0KW-YEAR;
        KS0KM001.KS0KM-PRDCTN-MO = KS0KW00.KS0KW-MONTH;
        KS0KM001.KS0KM-DLVR-MO = KS0KW00.KS0KW-DAY;
      end
    end
    if (KS0KM001.KS0KM-FCTY-CD > " ")
      if (KS0KM001.KS0KM-FCTY-CD != KS0KW00.KS0KW-LAST-FY1FCTYC)
        KS0KM001.KS0KM-FCTY-CD = KS0KW00.KS0KW-LAST-FY1FCTYC;
      end
    end
  end

  /* -----------------------------------------------------------------*/
  /* Set the gpc/style/x-style/color/dim for the select.*/
  /* -----------------------------------------------------------------*/

  VPLNMT01.XGPCD = KS0KM001.KS0KM-GPC-CD; /* set keys for select*/
  KS0KW01.KS0KW-GPC-CD = KS0KM001.KS0KM-GPC-CD;
  VPLNMT01.SY1STNBR = KS0KM001.KS0KM-STY-NBR;
  KS0KW01.KS0KW-STY-NBR = KS0KM001.KS0KM-STY-NBR;
  VPLNMT01.KS-XPRMT-STY-NBR = KS0KM001.KS0KM-STY-NBR;

  if (COMMAREA.CAFROMAP == "KS0I" /* if from KS0I*/
   && KSWREC.KS-XPRMT-STY-NBR > " ")
    VPLNMT01.KS-XPRMT-STY-NBR = KSWREC.KS-XPRMT-STY-NBR;
  end

  if (KS0KM001.KS0KM-COLR-CD-ID == " ") /* if nothing entered, wildcard it*/
    VPLNMT01.SY2CLRID = "*";
  else
    VPLNMT01.SY2CLRID = KS0KM001.KS0KM-COLR-CD-ID;
    KS0KW01.KS0KW-COLR-CD-ID = KS0KM001.KS0KM-COLR-CD-ID;
  end

  if (KS0KM001.KS0KM-DIM-CD == " ") /* if nothing entered, wildcard it*/
    VPLNMT01.XDMCD = "*";
  else
    VPLNMT01.XDMCD = KS0KM001.KS0KM-DIM-CD;
    KS0KW01.KS0KW-DIM-CD = KS0KM001.KS0KM-DIM-CD;
  end

  VPLNMT01.XNDCD = "*";
  VPLNMT01.XCTCD = "*";

  if (KS0KM001.KS0KM-FCTY-CD == " ") /* if nothing entered, wildcard it*/
    VPLNMT01.FY1FCTYC = "*";
  else
    VPLNMT01.FY1FCTYC = KS0KM001.KS0KM-FCTY-CD;
    KS0KW01.KS0KW-FCTY-CD = KS0KM001.KS0KM-FCTY-CD;
  end

  VPLNMT01.KS-PLANIMETER-DT = -1;
  VPLNMT01.XXXRKNBR = -1;

   /* ------------------------------------------------------------------*/
   /* If po id entered, use S2 selection and fill the style and x-style*/
   /* with '%'. Otherwise, use S1 selection.*/
   /* ------------------------------------------------------------------*/

  if (KS0KM001.KS0KM-PRDCTN-YR > " "
   && KS0KM001.KS0KM-PRDCTN-MO > " "
   && KS0KM001.KS0KM-DLVR-MO > " ")
    KS0KW01.KS0KW-PRDCTN-YR = KS0KM001.KS0KM-PRDCTN-YR;
    KS0KW01.KS0KW-PRDCTN-MO = KS0KM001.KS0KM-PRDCTN-MO;
    KS0KW01.KS0KW-DLVR-MO = KS0KM001.KS0KM-DLVR-MO;
    KS0KW00.KS0KW-YEAR = KS0KM001.KS0KM-PRDCTN-YR;
    if (KS0KW00.KS0KW-YEAR > 90)
      KS0KW00.KS0KW-CENTURY = 19;
    else
      KS0KW00.KS0KW-CENTURY = 20;
    end
    KS0KW00.KS0KW-MONTH = KS0KM001.KS0KM-PRDCTN-MO;
    KS0KW00.KS0KW-DAY = KS0KM001.KS0KM-DLVR-MO;
    VPLNMT01.PC3POIDT = KS0KW00.KS0KW-DATE-WORK;

    KS0KW00.KS0KW-STYLE = KS0KM001.KS0KM-STY-NBR;

    KS0K-11210(); /* wildcard style number*/

    try
      call "IO6380" ("S2", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
    end /* Select set*/

  else

    VPLNMT01.PC3POIDT = -1;

    try
      call "IO6380" ("S1", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
    end /* Select set*/

  end

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "11200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-11200

// set parameters for select
Function KS0K-11210()
  /* -----------------------------------------------------------------*/
  /* Set the style/x-style for the select.*/
  /* -----------------------------------------------------------------*/

  if (KS0KW00.KS0KW-STYLE > " ") /* If style entered*/
    VPLNMT01.SY1STNBR = KS0KW00.KS0KW-STYLE;
    VPLNMT01.KS-XPRMT-STY-NBR = KS0KW00.KS0KW-STYLE;
    if (KS0KW00.KS0KW-STY-CHAR-2 == " ") /* If second char blank*/
      KS0KW00.KS0KW-STY-CHAR-2 = "%"; /* Move in wildcard*/
      KS0KW00.KS0KW-STY-CHAR-3 = "%"; /* Move in wildcard*/
      KS0KW00.KS0KW-STY-CHAR-4 = "%"; /* Move in wildcard*/
      KS0KW00.KS0KW-STY-CHAR-5 = "%"; /* Move in wildcard*/
      KS0KW00.KS0KW-STY-CHAR-6 = "%"; /* Move in wildcard*/
      KS0KW00.KS0KW-STY-CHAR-7 = "%"; /* Move in wildcard*/
      VPLNMT01.SY1STNBR = KS0KW00.KS0KW-STYLE;
      VPLNMT01.KS-XPRMT-STY-NBR = KS0KW00.KS0KW-STYLE;
    else
      if (KS0KW00.KS0KW-STY-CHAR-3 == " ") /* If third char blank*/
        KS0KW00.KS0KW-STY-CHAR-3 = "%"; /* Move in wildcard*/
        KS0KW00.KS0KW-STY-CHAR-4 = "%"; /* Move in wildcard*/
        KS0KW00.KS0KW-STY-CHAR-5 = "%"; /* Move in wildcard*/
        KS0KW00.KS0KW-STY-CHAR-6 = "%"; /* Move in wildcard*/
        KS0KW00.KS0KW-STY-CHAR-7 = "%"; /* Move in wildcard*/
        VPLNMT01.SY1STNBR = KS0KW00.KS0KW-STYLE;
        VPLNMT01.KS-XPRMT-STY-NBR = KS0KW00.KS0KW-STYLE;
      else
        if (KS0KW00.KS0KW-STY-CHAR-4 == " ") /* If fourth char blank*/
          KS0KW00.KS0KW-STY-CHAR-4 = "%"; /* Move in wildcard*/
          KS0KW00.KS0KW-STY-CHAR-5 = "%"; /* Move in wildcard*/
          KS0KW00.KS0KW-STY-CHAR-6 = "%"; /* Move in wildcard*/
          KS0KW00.KS0KW-STY-CHAR-7 = "%"; /* Move in wildcard*/
          VPLNMT01.SY1STNBR = KS0KW00.KS0KW-STYLE;
          VPLNMT01.KS-XPRMT-STY-NBR = KS0KW00.KS0KW-STYLE;
        else
          if (KS0KW00.KS0KW-STY-CHAR-5 == " ") /* If fifth char blank*/
            KS0KW00.KS0KW-STY-CHAR-5 = "%"; /* Move in wildcard*/
            KS0KW00.KS0KW-STY-CHAR-6 = "%"; /* Move in wildcard*/
            KS0KW00.KS0KW-STY-CHAR-7 = "%"; /* Move in wildcard*/
            VPLNMT01.SY1STNBR = KS0KW00.KS0KW-STYLE;
            VPLNMT01.KS-XPRMT-STY-NBR = KS0KW00.KS0KW-STYLE;
          else
            if (KS0KW00.KS0KW-STY-CHAR-6 == " ") /* If sixth char blank*/
              KS0KW00.KS0KW-STY-CHAR-6 = "%"; /* Move in wildcard*/
              KS0KW00.KS0KW-STY-CHAR-7 = "%"; /* Move in wildcard*/
              VPLNMT01.SY1STNBR = KS0KW00.KS0KW-STYLE;
              VPLNMT01.KS-XPRMT-STY-NBR = KS0KW00.KS0KW-STYLE;
            else
              if (KS0KW00.KS0KW-STY-CHAR-7 == " ") /* If seventh char blank*/
                KS0KW00.KS0KW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                VPLNMT01.SY1STNBR = KS0KW00.KS0KW-STYLE;
                VPLNMT01.KS-XPRMT-STY-NBR = KS0KW00.KS0KW-STYLE;
              end
            end
          end
        end
      end
    end
  else
    VPLNMT01.SY1STNBR = "%%%%%%";
    VPLNMT01.KS-XPRMT-STY-NBR = "%%%%%%%";
  end

end // end KS0K-11210

// fetch next row
Function KS0K-11300()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/

  set VPLNMT01 empty; /* clear work record*/

  if (KS0KM001.KS0KM-PRDCTN-YR > " "
   && KS0KM001.KS0KM-PRDCTN-MO > " "
   && KS0KM001.KS0KM-DLVR-MO > " ")

    try
      call "IO6380" ("N2", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
    end

  else

    try
      call "IO6380" ("N1", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
    end

  end

  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      KS0KW00.KS0KW-PREV-ROW-READ = VPLNMT01.VPLNMT01-GROUP;

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      KS0KW00.KS0KW-SWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

  KS0KW00.KS0KW-SWC = "Y"; /* Indicate end of cursor*/

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "11300"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPLNMT01.VPLNMT01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-11300

// save data in display storage
Function KS0K-11400()
  /* -------------------------------------------------------------*/
  /* High level logic to control the formatting of the screen.*/
  /* The rows read are stored in the two save areas until a set*/
  /* is read, then they are formatted into ws. A set could*/
  /* be one OR two rows, depending upon the rank numbers.*/
  /* -------------------------------------------------------------*/

  if (VPLNMT01.XXXRKNBR == 1)
    if (KS0KW00.KS0KW-PREV-RANK == 1)
      KS0K-11410();
      KS0KW00.KS0KW-SAVE-ROW-1 = KS0KW00.KS0KW-PREV-ROW-READ;
      KS0KW00.KS0KW-PREV-RANK = VPLNMT01.XXXRKNBR;
    else
      KS0KW00.KS0KW-SAVE-ROW-1 = KS0KW00.KS0KW-PREV-ROW-READ;
      KS0KW00.KS0KW-PREV-RANK = VPLNMT01.XXXRKNBR;
    end
  else
    KS0KW00.KS0KW-SAVE-ROW-2 = KS0KW00.KS0KW-PREV-ROW-READ;
    KS0KW00.KS0KW-PREV-RANK = VPLNMT01.XXXRKNBR;
    KS0K-11410();
  end

end // end KS0K-11400

// control formatting of map
Function KS0K-11410()
  /* ----------------------------------------------------------------------*/
  /* this routine controls the formatting of the screen data in ws.*/
  /* ----------------------------------------------------------------------*/

  if (KS0KW00.KS0KW-IX2 < 11)
    KS0K-11411(); /* save the data*/
  else
    if (KS0KW00.KS0KW-IX2 == 11
     && KS0KW00.KS0KW-SAVE-ROW-2 == " ")
      KS0K-11411();
    end
    KS0K-11500();

    KS0KW00.KS0KW-IX1 = 1;
    while (KS0KW00.KS0KW-IX1 <= 11) /* clear screen detail lines*/
      KS0KM001.KS0KM-DTL-SEL[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-COLR-CD[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-DIM-CD[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-READ-ABRV[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-READ-DESC[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-PLNMTR-DT[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-RANK-NBR[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-MAT1-PCT[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-MAT2-PCT[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-MAT3-PCT[KS0KW-IX1] = " ";
      KS0KM001.KS0KM-DTL-MAT4-PCT[KS0KW-IX1] = " ";
      KS0KW00.KS0KW-IX1 = KS0KW00.KS0KW-IX1 + 1;
    end

    if (KS0KW00.KS0KW-IX2 > 11)
      KS0KW00.KS0KW-IX2 = 1;
      KS0K-11411();
    else
      KS0KW00.KS0KW-IX2 = 1;
    end
  end

end // end KS0K-11410

// save data in working storage
Function KS0K-11411()
  /* ----------------------------------------------------------------*/
  /* format the screen data in ws.*/
  /* ----------------------------------------------------------------*/

   /* move the data from the save row 1 area to the ks0kw01 fields (ix2)*/

  VPLNMT01.VPLNMT01-GROUP = KS0KW00.KS0KW-SAVE-ROW-1;

  KS0KW01.KS0KW-GPC-CD = VPLNMT01.XGPCD;

  if (VPLNMT01.XGPCD in XGPTBL.XGPCD /* in table*/
   && XGPTBL.XXXSTAT == "A")         /* and active?*/
    KS0KW01.KS0KW-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    if (VPLNMT01.XGPCD == "EQ") /**/
      KS0KW01.KS0KW-GPC-DESC = "EQUIPMENT";
    else
      KS0KW01.KS0KW-GPC-DESC = " ";
    end
  end

  if (KS0KM001.KS0KM-STY-NBR > " ") /* if style number entered*/
    KS0KW01.KS0KW-STY-NBR = KS0KM001.KS0KM-STY-NBR;
    KS0KW01.KS0KW-COLR-CD-ID = KS0KM001.KS0KM-COLR-CD-ID;
    KS0KW01.KS0KW-DIM-CD = KS0KM001.KS0KM-DIM-CD;
    if (PG2REC.SY1STYNM > " ")
      KS0KW01.KS0KW-STY-NM = PG2REC.SY1STYNM;
      KS0KW01.KS0KW-COLR-DESC = PG2REC.SY2CLRDS;
    else
      KS0KW01.KS0KW-STY-NM = PG4REC.SY1STYNM;
    end
  end

  if (KS0KM001.KS0KM-PRDCTN-YR > " " /* if po id entered*/
   && KS0KM001.KS0KM-PRDCTN-MO > " " 
   && KS0KM001.KS0KM-DLVR-MO > " ") 
    KS0KW01.KS0KW-PRDCTN-YR = KS0KM001.KS0KM-PRDCTN-YR;
    KS0KW01.KS0KW-PRDCTN-MO = KS0KM001.KS0KM-PRDCTN-MO;
    KS0KW01.KS0KW-DLVR-MO = KS0KM001.KS0KM-DLVR-MO;
  end

  if (KS0KM001.KS0KM-FCTY-CD > " ") /* FCTY entered*/
    KS0KW01.KS0KW-FCTY-CD = KS0KM001.KS0KM-FCTY-CD;
  end

  KS0KW01.KS0KW-DTL-STY-NBR[KS0KW-IX2] = VPLNMT01.SY1STNBR;
  KS0KW01.KS0KW-DTL-X-STYLE[KS0KW-IX2] = VPLNMT01.KS-XPRMT-STY-NBR;
  KS0KW01.KS0KW-DTL-COLR-CD[KS0KW-IX2] = VPLNMT01.SY2CLRID;
  KS0KW01.KS0KW-DTL-DIM-CD[KS0KW-IX2] = VPLNMT01.XDMCD;
  KS0KW01.KS0KW-DTL-XCTCD[KS0KW-IX2] = VPLNMT01.XCTCD;

  KS0K-11412();

  KS0KW01.KS0KW-DTL-XNDCD[KS0KW-IX2] = VPLNMT01.XNDCD; /* key fmt*/
  KS0KW01.KS0KW-DTL-PC3POIDT[KS0KW-IX2] = VPLNMT01.PC3POIDT;
  KS0KW01.KS0KW-DTL-FY1FCTYC[KS0KW-IX2] = VPLNMT01.FY1FCTYC;
  KS0KW00.KS0KW-DATE-WORK = VPLNMT01.KS-PLANIMETER-DT;
  KS0KW00.KS0KW-RDG-YEAR = KS0KW00.KS0KW-YEAR;
  KS0KW00.KS0KW-RDG-MONTH = KS0KW00.KS0KW-MONTH;
  KS0KW00.KS0KW-RDG-DAY = KS0KW00.KS0KW-DAY;
  KS0KW01.KS0KW-DTL-PLNMTR-DT[KS0KW-IX2] = KS0KW00.KS0KW-RDG-DATE-WORK;

  KS0KW01.KS0KW-DTL-RANK-NBR[KS0KW-IX2] = "1)";

  KS0KW01.KS0KW-MAT-CTNT-1 = VPLNMT01.XMCCD[1];
  KS0KW01.KS0KW-MAT-CTNT-2 = VPLNMT01.XMCCD[2];
  KS0KW01.KS0KW-MAT-CTNT-3 = VPLNMT01.XMCCD[3];
  KS0KW01.KS0KW-MAT-CTNT-4 = VPLNMT01.XMCCD[4];

  if (VPLNMT01.KS-PLANIMETER-PCT[1] > 0)
    KS0KW00.KS0KW-PERCENT = VPLNMT01.KS-PLANIMETER-PCT[1];
    KS0K-11413();
    KS0KW01.KS0KW-DTL-MAT1-PCT[KS0KW-IX2] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
  else
    KS0KW01.KS0KW-DTL-MAT1-PCT[KS0KW-IX2] = "0%    ";
  end

  if (VPLNMT01.KS-PLANIMETER-PCT[2] > 0)
    KS0KW00.KS0KW-PERCENT = VPLNMT01.KS-PLANIMETER-PCT[2];
    KS0K-11413();
    KS0KW01.KS0KW-DTL-MAT2-PCT[KS0KW-IX2] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
  else
    KS0KW01.KS0KW-DTL-MAT2-PCT[KS0KW-IX2] = "0%    ";
  end

  if (VPLNMT01.KS-PLANIMETER-PCT[3] > 0)
    KS0KW00.KS0KW-PERCENT = VPLNMT01.KS-PLANIMETER-PCT[3];
    KS0K-11413();
    KS0KW01.KS0KW-DTL-MAT3-PCT[KS0KW-IX2] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
  else
    KS0KW01.KS0KW-DTL-MAT3-PCT[KS0KW-IX2] = "0%    ";
  end

  if (VPLNMT01.KS-PLANIMETER-PCT[4] > 0)
    KS0KW00.KS0KW-PERCENT = VPLNMT01.KS-PLANIMETER-PCT[4];
    KS0K-11413();
    KS0KW01.KS0KW-DTL-MAT4-PCT[KS0KW-IX2] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
  else
    KS0KW01.KS0KW-DTL-MAT4-PCT[KS0KW-IX2] = "0%    ";
  end

  KS0KW00.KS0KW-IX2 = KS0KW00.KS0KW-IX2 + 1; /* set index up by 1*/

  if (KS0KW00.KS0KW-SAVE-ROW-2 > " ") /* was a row 2 read?*/

     /* move save row 2 data to the screen fields (ix2)*/

    VPLNMT01.VPLNMT01-GROUP = KS0KW00.KS0KW-SAVE-ROW-2;
    KS0KW00.KS0KW-PREV-RANK = VPLNMT01.XXXRKNBR;

    KS0KW01.KS0KW-DTL-RANK-NBR[KS0KW-IX2] = "2)";

    if (VPLNMT01.KS-PLANIMETER-PCT[1] > 0)
      KS0KW00.KS0KW-PERCENT = VPLNMT01.KS-PLANIMETER-PCT[1];
      KS0K-11413();
      KS0KW01.KS0KW-DTL-MAT1-PCT[KS0KW-IX2] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
    else
      KS0KW01.KS0KW-DTL-MAT1-PCT[KS0KW-IX2] = "0%    ";
    end

    if (VPLNMT01.KS-PLANIMETER-PCT[2] > 0)
      KS0KW00.KS0KW-PERCENT = VPLNMT01.KS-PLANIMETER-PCT[2];
      KS0K-11413();
      KS0KW01.KS0KW-DTL-MAT2-PCT[KS0KW-IX2] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
    else
      KS0KW01.KS0KW-DTL-MAT2-PCT[KS0KW-IX2] = "0%    ";
    end

    if (VPLNMT01.KS-PLANIMETER-PCT[3] > 0)
      KS0KW00.KS0KW-PERCENT = VPLNMT01.KS-PLANIMETER-PCT[3];
      KS0K-11413();
      KS0KW01.KS0KW-DTL-MAT3-PCT[KS0KW-IX2] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
    else
      KS0KW01.KS0KW-DTL-MAT3-PCT[KS0KW-IX2] = "0%    ";
    end

    if (VPLNMT01.KS-PLANIMETER-PCT[4] > 0)
      KS0KW00.KS0KW-PERCENT = VPLNMT01.KS-PLANIMETER-PCT[4];
      KS0K-11413();
      KS0KW01.KS0KW-DTL-MAT4-PCT[KS0KW-IX2] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
    else
      KS0KW01.KS0KW-DTL-MAT4-PCT[KS0KW-IX2] = "0%    ";
    end

    KS0KW00.KS0KW-IX2 = KS0KW00.KS0KW-IX2 + 1; /* set index up by 1*/
  end
  KS0KW00.KS0KW-IX2 = KS0KW00.KS0KW-IX2 + 1; /* set index up by 1*/

  KS0KW00.KS0KW-SAVE-ROW-1 = " ";
  KS0KW00.KS0KW-SAVE-ROW-2 = " ";

end // end KS0K-11411

// format rdg % for display
Function KS0K-11412()
  /* ------------------------------------------------------------*/
  /* Format reading-for and dept fields for w01 - display format*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-READING-FOR = " "; /* clear working storage fields*/
  KS0KW00.KS0KW-READING-FOR-B = " ";
  KS0KW00.KS0KW-DATE-WORK = 0;

  if (VPLNMT01.XNDCD > " ") /* if dept present*/
    KS0KW01.KS0KW-DTL-DEPT-ID[KS0KW-IX2] = "DEPT"; /* move it*/
    KS0KW00.KS0KW-READ-DESC = VPLNMT01.XNDCD;
    if (VPLNMT01.PC3POIDT > 0)
      KS0KW00.KS0KW-DATE-WORK = VPLNMT01.PC3POIDT;
      if (KS0KW00.KS0KW-YEAR > " ") /* if year exists*/
        KS0KW00.KS0KW-PRD-YR-B = KS0KW00.KS0KW-YEAR; /* move it*/
      end
      if (KS0KW00.KS0KW-MONTH > " ") /* if month exists*/
        KS0KW00.KS0KW-DASH-1-B = "-"; /* move dash*/
        KS0KW00.KS0KW-PRD-MO-B = KS0KW00.KS0KW-MONTH; /* move month*/
      end
      if (KS0KW00.KS0KW-DAY > " ") /* if day exists*/
        KS0KW00.KS0KW-DASH-2-B = "-"; /* move dash*/
        KS0KW00.KS0KW-DLV-MO-B = KS0KW00.KS0KW-DAY; /* move day*/
      end
      if (VPLNMT01.FY1FCTYC > " ") /* if fcty exists*/
        KS0KW00.KS0KW-DASH-3-B = "-"; /* move dash*/
        KS0KW00.KS0KW-FCTY-CD-B = VPLNMT01.FY1FCTYC; /* move factory*/
      end
    end
   /* move ws area*/
    KS0KW01.KS0KW-DTL-READING-FOR[KS0KW-IX2] = KS0KW00.KS0KW-READING-FOR-B; /* to map area*/
  else
    if (VPLNMT01.XCTCD > " ") /* if cntry code present*/
      KS0KW01.KS0KW-DTL-DEPT-ID[KS0KW-IX2] = "LIAS"; /* move it*/
      KS0KW00.KS0KW-READ-DESC = VPLNMT01.XCTCD;
      if (VPLNMT01.PC3POIDT > 0)
        KS0KW00.KS0KW-DATE-WORK = VPLNMT01.PC3POIDT;
        if (KS0KW00.KS0KW-YEAR > " ")
          KS0KW00.KS0KW-PRD-YR-B = KS0KW00.KS0KW-YEAR;
        end
        if (KS0KW00.KS0KW-MONTH > " ")
          KS0KW00.KS0KW-DASH-1-B = "-";
          KS0KW00.KS0KW-PRD-MO-B = KS0KW00.KS0KW-MONTH;
        end
        if (KS0KW00.KS0KW-DAY > " ")
          KS0KW00.KS0KW-DASH-2-B = "-";
          KS0KW00.KS0KW-DLV-MO-B = KS0KW00.KS0KW-DAY;
        end
        if (VPLNMT01.FY1FCTYC > " ")
          KS0KW00.KS0KW-DASH-3-B = "-";
          KS0KW00.KS0KW-FCTY-CD-B = VPLNMT01.FY1FCTYC;
        end
      end
      KS0KW01.KS0KW-DTL-READING-FOR[KS0KW-IX2] = KS0KW00.KS0KW-READING-FOR-B;
    else
      KS0KW01.KS0KW-DTL-DEPT-ID[KS0KW-IX2] = "FCTY"; /* move factory*/
      KS0KW00.KS0KW-DATE-WORK = VPLNMT01.PC3POIDT;
      KS0KW00.KS0KW-PRD-YR = KS0KW00.KS0KW-YEAR;
      KS0KW00.KS0KW-PRD-MO = KS0KW00.KS0KW-MONTH;
      KS0KW00.KS0KW-DLV-MO = KS0KW00.KS0KW-DAY;
      KS0KW00.KS0KW-FCTY-CD = VPLNMT01.FY1FCTYC;
      KS0KW00.KS0KW-DASH-1 = "-";
      KS0KW00.KS0KW-DASH-2 = "-";
      KS0KW00.KS0KW-DASH-3 = "-";
      KS0KW01.KS0KW-DTL-READING-FOR[KS0KW-IX2] = KS0KW00.KS0KW-READING-FOR;
    end
  end
end // end KS0K-11412

// format planimeter pcts
Function KS0K-11413()
   /* ---------------------------------------------------------------*/
   /* format planimeter percentages for display*/
   /* ---------------------------------------------------------------*/

  KS0KW00.KS0KW-SIX-BYTE-FIELD = " ";

  if (KS0KW00.KS0KW-PCT-BYTE[1] == "0")
    if (KS0KW00.KS0KW-PCT-BYTE[2] == "0")
      if (KS0KW00.KS0KW-PCT-BYTE[3] == "0")
        if (KS0KW00.KS0KW-PCT-BYTE[4] == "0")
          KS0KW00.KS0KW-BYTE-1 = "0";
          KS0KW00.KS0KW-BYTE-2 = "%";
        else
          KS0KW00.KS0KW-BYTE-1 = "0";
          KS0KW00.KS0KW-BYTE-2 = ".";
          KS0KW00.KS0KW-BYTE-3 = KS0KW00.KS0KW-PCT-BYTE[4];
          KS0KW00.KS0KW-BYTE-4 = "%";
        end
      else
        KS0KW00.KS0KW-BYTE-1 = KS0KW00.KS0KW-PCT-BYTE[3];
        if (KS0KW00.KS0KW-PCT-BYTE[4] == "0")
          KS0KW00.KS0KW-BYTE-2 = "%";
        else
          KS0KW00.KS0KW-BYTE-2 = ".";
          KS0KW00.KS0KW-BYTE-3 = KS0KW00.KS0KW-PCT-BYTE[4];
          KS0KW00.KS0KW-BYTE-4 = "%";
        end
      end
    else
      KS0KW00.KS0KW-BYTE-1 = KS0KW00.KS0KW-PCT-BYTE[2];
      KS0KW00.KS0KW-BYTE-2 = KS0KW00.KS0KW-PCT-BYTE[3];
      if (KS0KW00.KS0KW-PCT-BYTE[4] == "0")
        KS0KW00.KS0KW-BYTE-3 = "%";
      else
        KS0KW00.KS0KW-BYTE-3 = ".";
        KS0KW00.KS0KW-BYTE-4 = KS0KW00.KS0KW-PCT-BYTE[4];
        KS0KW00.KS0KW-BYTE-5 = "%";
      end
    end
  else
    KS0KW00.KS0KW-SIX-BYTE-FIELD = "100%  ";
  end

end // end KS0K-11413

// add page to temp storage
Function KS0K-11500()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/

  KS0KW01.XXXTSLEN = KS0KW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (KS0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

     /* build table of dtl keys and ts page nbrs;*/

    KS0KW00.KS0KW-IX1 = 1; /* initialize index*/
    if (TA5REC.TA5TSQIX == 1) /* first page written?*/
      KS0KW00.KS0KW-STAT-TSQ-PAGE-TBL = " "; /* clear table*/
      KS0KW00.KS0KW-IX3 = 1; /* initialize index*/
    end

    while (KS0KW00.KS0KW-IX1 <= 11) /* for a max of 12 times*/
      if (KS0KW01.KS0KW-DTL-ROW-KEY[KS0KW-IX1] > " ")
        KS0KW00.KS0KW-ROW-KEY-DATA[KS0KW-IX3] = KS0KW01.KS0KW-DTL-ROW-KEY[KS0KW-IX1]; /* save row key*/
        KS0KW00.KS0KW-TS-PAGE-NBR[KS0KW-IX3] = TA5REC.TA5TSQIX; /* save page nbr*/
        KS0KW00.KS0KW-IX1 = KS0KW00.KS0KW-IX1 + 1; /* increment index*/
        KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 + 1; /* increment index*/
      else
        KS0KW00.KS0KW-IX1 = KS0KW00.KS0KW-IX1 + 1; /* increment index*/
      end
    end

    if (KS0KW00.KS0KW-IX3 > 100) /* table getting full?*/
      converseLib.validationFailed(84); /* internal table full*/
    end

    set KS0KW01 empty; /* M001 display storage*/

    KS0KW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  KSWREC.XXXPRCNM = "11500"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-11500

// close selected set
Function KS0K-11600()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-PRDCTN-YR > " "
   && KS0KM001.KS0KM-PRDCTN-MO > " "
   && KS0KM001.KS0KM-DLVR-MO > " ")

    try
      call "IO6380" ("C2", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
    end

  else

    try
      call "IO6380" ("C1", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
    end

  end

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "11600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-11600

// Format and converse the map
Function KS0K-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.TA5TSQIX == 0) /* No pages formatted*/
    if (KS0KW00.KS0KW-SWR == "Y") /* only if data was requested*/
      if (KSWREC.XXXMSGNO == 0) /* if error was not found*/
        KSWREC.XXXPRCNM = "12000"; /* Module identification*/
        KSWREC.XXXMSGNO = 18; /* No data was found to display*/
        KS0KW00.KS0KW-SWF = "N"; /* do not format the map*/
  /* MOVE ' ' TO KS0KW01.KS0KW-STY-NBR;*/
  /* MOVE ' ' TO KS0KW01.KS0KW-STY-NM;*/
        set KS0KM001.KS0KM-STY-NBR cursor; /* set cursor on style*/
      end
    end
    if (COMMAREA.CACHGFL == "Y")
      set KS0KM001.KS0KM-PF14 bold, skip;
      set KS0KM001.KS0KM-PF15 bold, skip;
    end
    if (COMMAREA.CAADDFL == "Y")
      set KS0KM001.KS0KM-PF13 bold, skip;
    end
    if (COMMAREA.CAFROMAP == "KS0I") /* If from KS0I*/
      KS0KM001.KS0KM-GPC-CD = KSWREC.XGPCD;
      KS0KW02.KS0KW-GPC-CD = KSWREC.XGPCD;
      KS0KW01.KS0KW-STY-NBR = KSWREC.SY1STNBR;
      KS0KW02.KS0KW-STY-NBR = KSWREC.SY1STNBR;
      if (KSWREC.SY1STNBR > " ")
        KS0KM001.KS0KM-STY-NBR = KSWREC.SY1STNBR;
      else
        KS0KM001.KS0KM-STY-NBR = KSWREC.KS-XPRMT-STY-NBR;
      end
      KS0KM001.KS0KM-COLR-CD-ID = KSWREC.SY2CLRID;
      KS0KW01.KS0KW-COLR-CD-ID = KSWREC.SY2CLRID;
      KS0KW02.KS0KW-COLR-CD-ID = KSWREC.SY2CLRID;
      KS0KM001.KS0KM-DIM-CD = KSWREC.XDMCD;
      KS0KW01.KS0KW-DIM-CD = KSWREC.XDMCD;
      KS0KW02.KS0KW-DIM-CD = KSWREC.XDMCD;
      KS0KW01.KS0KW-X-STY-NBR = KSWREC.KS-XPRMT-STY-NBR;
      KS0KW02.KS0KW-X-STYLE = KSWREC.KS-XPRMT-STY-NBR;

      if (KSWREC.XGPCD in XGPTBL.XGPCD
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KS0KM001.KS0KM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        KS0KW02.KS0KW-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      end
      PG2REC.XGPCD = KSWREC.XGPCD;
      if (KSWREC.SY1STNBR > " ")
        PG2REC.SY1STNBR = KSWREC.SY1STNBR;
      else
        PG2REC.SY1STNBR = KSWREC.KS-XPRMT-STY-NBR;
      end
      PG2REC.SY2CLRID = KSWREC.SY2CLRID;
      PG2REC.XDMCD = KSWREC.XDMCD;

      KS0K-12100(); /* read product row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If record found*/
        KS0KM001.KS0KM-STY-NM = PG2REC.SY1STYNM;
        KS0KW02.KS0KW-STY-NM = PG2REC.SY1STYNM;
        KS0KM001.KS0KM-COLR-DESC = PG2REC.SY2CLRDS;
        KS0KW02.KS0KW-COLR-DESC = PG2REC.SY2CLRDS;
      else
        set PG4REC empty;
        PG4REC.PG4STNBR = KSWREC.KS-XPRMT-STY-NBR;
        KS0K-12200();
        if (SQLCA.VAGen_SQLCODE == 0) /* If record found*/
          KS0KM001.KS0KM-STY-NM = PG4REC.SY1STYNM;
          KS0KW02.KS0KW-STY-NM = PG4REC.SY1STYNM;
          KS0KM001.KS0KM-COLR-DESC = " ";
          KS0KW02.KS0KW-COLR-DESC = " ";
          KS0KW02.KS0KW-STY-NBR = " ";
        end
      end
      set KS0KM001.KS0KM-PRDCTN-YR cursor; /* position cursor*/
    end
    KS0KW00.KS0KW-IXM = 1; /* initialize index*/
    while (KS0KW00.KS0KW-IXM <= 11) /* clear detail lines*/
      KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] = " ";
      set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] invisible, skip;
      KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-COLR-CD[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-DIM-CD[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-READ-ABRV[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-READ-DESC[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-PLNMTR-DT[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-RANK-NBR[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-MAT1-PCT[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-MAT2-PCT[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-MAT3-PCT[KS0KW-IXM] = " ";
      KS0KM001.KS0KM-DTL-MAT4-PCT[KS0KW-IXM] = " ";
      KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* set index up by 1*/
    end
    set KS0KM001.XXXLITPG invisible, skip; /* "PAGE" literal*/
    set KS0KM001.XXXLITOF invisible, skip; /* "OF" literal*/
    set KS0KM001.XXXTSPAG invisible, skip; /* first page*/
    set KS0KM001.TA5TSQIX invisible, skip; /* last page*/
  else

    /* ------------------------------------------------------------*/
    /* If obtain data failed or no error, format data to display.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum > 0) /* error found*/
      if (KS0KM001.KS0KM-GPC-CD != KS0KW01.KS0KW-GPC-CD         /* gpc*/
       || KS0KM001.KS0KM-STY-NBR != KS0KW01.KS0KW-STY-NBR       /* style*/
       || KS0KM001.KS0KM-COLR-CD-ID != KS0KW01.KS0KW-COLR-CD-ID /* color*/
       || KS0KM001.KS0KM-DIM-CD != KS0KW01.KS0KW-DIM-CD         /* dim cd*/
       || KS0KM001.KS0KM-PRDCTN-YR != KS0KW01.KS0KW-PRDCTN-YR   /* prd yr*/
       || KS0KM001.KS0KM-PRDCTN-MO != KS0KW01.KS0KW-PRDCTN-MO   /* prd mo*/
       || KS0KM001.KS0KM-DLVR-MO != KS0KW01.KS0KW-DLVR-MO       /* dlvr mo*/
       || KS0KM001.KS0KM-FCTY-CD != KS0KW01.KS0KW-FCTY-CD)      /* fcty-cd*/
        KS0KW00.KS0KW-IXM = 1; /* initialize index*/
        while (KS0KW00.KS0KW-IXM <= 11) /* clear detail lines*/
          KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] = " ";
          set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] invisible, skip;
          KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-COLR-CD[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-DIM-CD[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-READ-ABRV[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-READ-DESC[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-PLNMTR-DT[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-RANK-NBR[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-MAT1-PCT[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-MAT2-PCT[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-MAT3-PCT[KS0KW-IXM] = " ";
          KS0KM001.KS0KM-DTL-MAT4-PCT[KS0KW-IXM] = " ";
          KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* set index up by 1*/
        end
        set KS0KM001.XXXLITPG invisible, skip; /* "PAGE" literal*/
        set KS0KM001.XXXLITOF invisible, skip; /* "OF" literal*/
        set KS0KM001.XXXTSPAG invisible, skip; /* first page*/
        set KS0KM001.TA5TSQIX invisible, skip; /* last page*/
      end
    end

    if (KS0KW00.KS0KW-SWR == "Y" /* Obtain data failed*/
     || converseVar.validationMsgNum == 0) /* or no error found*/

      if (KS0KW00.KS0KW-SWF == "Y") /* Map must be formatted*/

        KS0K-12300(); /* format data on map*/

      end
    end
  end

  if (COMMAREA.CAFROMAP == "KS0I") /* If from KS0I*/
    set KS0KM001.KS0KM-GPC-CD skip; /* protect gpc*/
    set KS0KM001.KS0KM-STY-NBR skip; /* protect style*/
    set KS0KM001.KS0KM-STY-NM skip; /* protect style name*/
    set KS0KM001.KS0KM-COLR-CD-ID skip; /* protect color*/
    set KS0KM001.KS0KM-COLR-DESC skip; /* protect color descr*/
    set KS0KM001.KS0KM-DIM-CD skip; /* protect dimension*/
    set KS0KM001.KS0KM-OPT-FIELD invisible, skip;
    set KS0KM001.KS0KM-ITEM-FIELD invisible, skip;
    set KS0KM001.CATOAP invisible, skip;
    set KS0KM001.CAITEM invisible, skip;
    set KS0KM001.KS0KM-PF4 invisible, skip;
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KS0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  set KS0KM001.KS0KM-GPC-CD skip; /* protect the field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/

    else

      KS0KM001.XXXPRCNM = COMMAREA.CAMSG; /* message text*/

    end

    KS0KM001.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0KM001 alarm; /* Indicate sound alarm*/

  end

  converse KS0KM001 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = KS0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0KM001.CAITEM; /* Application data*/

end // end KS0K-12000

// read DPRODG.VSYCLR01 row
Function KS0K-12100()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "12100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-12100

// sel set from DPRODG.VSYDVL01
Function KS0K-12200()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "12200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-12200

// format the display data
Function KS0K-12300()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set KS0KM001 initial; /* M001 input/output area*/

  KS0KW00.KS0KW-SWF = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* if we have just come back from a change and there is no data*/
  /* to display, set the last changed field to blanks in*/
  /* order by bypass the setting of the cursor routine which reads*/
  /* the TSQ.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.TA5TSQIX == 0) /* no data read ?*/
    KS0KW00.KS0KW-LAST-CHGD-ROW = " "; /* bypass reading tsq*/
  end

  /* ------------------------------------------------------------*/
  /* If we have just returned from a change, we need*/
  /* to position the cursor on the last row changed.*/
  /* The following code finds the tsq page that the key is on.*/
  /* This is also applicable for adds.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-LAST-CHGD-ROW > " ") /* just back from change?*/
    KS0KW00.KS0KW-IX3 = 1; /* initialize index*/
    while (KS0KW-IX3 <= 100)
      if (KS0KW00.KS0KW-ROW-KEY-DATA[KS0KW-IX3] > " ")
        if (KS0KW00.KS0KW-LAST-STY-CLR-DIM < 
        KS0KW00.KS0KW-ROW-STY-CLR-DIM[KS0KW-IX3])
          KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* take prev one*/
          if (KS0KW00.KS0KW-IX3 < 1) /* if less than 1*/
            KS0KW00.KS0KW-IX3 = 1; /* set to 1*/
          end
          if (KS0KW00.KS0KW-ROW-RANK-NBR[KS0KW-IX3] == "2)")
            KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* take prev one*/
          end
          if (KS0KW00.KS0KW-IX3 < 1) /* if less than 1*/
            KS0KW00.KS0KW-IX3 = 1; /* set to 1*/
          end
          KS0KW00.XXXTSPAG = KS0KW00.KS0KW-TS-PAGE-NBR[KS0KW-IX3]; /* set ts page nbr*/
          KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-ROW-KEY-DATA[KS0KW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
          KS0KW00.KS0KW-IX3 = 100; /* quit the search*/
        else
          if (KS0KW00.KS0KW-LAST-STY-CLR-DIM == 
          KS0KW00.KS0KW-ROW-STY-CLR-DIM[KS0KW-IX3])
            if (KS0KW00.KS0KW-LAST-DATES > 
            KS0KW00.KS0KW-ROW-DATES[KS0KW-IX3])
              KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* take prev one*/
              if (KS0KW00.KS0KW-IX3 < 1) /* if less than 1*/
                KS0KW00.KS0KW-IX3 = 1; /* set to 1*/
              end
              if (KS0KW00.KS0KW-ROW-RANK-NBR[KS0KW-IX3] == "2)")
                KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* take prev one*/
              end
              if (KS0KW00.KS0KW-IX3 < 1) /* if less than 1*/
                KS0KW00.KS0KW-IX3 = 1; /* set to 1*/
              end
              KS0KW00.XXXTSPAG = KS0KW00.KS0KW-TS-PAGE-NBR[KS0KW-IX3]; /* set ts page nbr*/
              KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-ROW-KEY-DATA[KS0KW-IX3]; /* for the cursor*/
                                 /* positioning routine*/
              KS0KW00.KS0KW-IX3 = 100; /* quit the search*/
            else
              if (KS0KW00.KS0KW-LAST-DATES == 
              KS0KW00.KS0KW-ROW-DATES[KS0KW-IX3])
                KS0KW00.XXXTSPAG = KS0KW00.KS0KW-TS-PAGE-NBR[KS0KW-IX3]; /* set ts page nbr*/
                KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-ROW-KEY-DATA[KS0KW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
                KS0KW00.KS0KW-IX3 = 100; /* quit the search*/
              end
            end
          end
        end
      else
        if (KS0KW00.KS0KW-ROW-KEY-DATA[KS0KW-IX3] == " ") /* key blank?*/
          KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* take prev one*/
          if (KS0KW00.KS0KW-IX3 < 1) /* if less than 1*/
            KS0KW00.KS0KW-IX3 = 1; /* set to 1*/
          end
          if (KS0KW00.KS0KW-ROW-RANK-NBR[KS0KW-IX3] == "2)")
            KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* take prev one*/
          end
          if (KS0KW00.KS0KW-IX3 < 1) /* if less than 1*/
            KS0KW00.KS0KW-IX3 = 1; /* set to 1*/
          end
          KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-ROW-KEY-DATA[KS0KW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
          KS0KW00.XXXTSPAG = KS0KW00.KS0KW-TS-PAGE-NBR[KS0KW-IX3]; /* set ts page nbr*/
          KS0KW00.KS0KW-IX3 = 100; /* quit the search*/
        end
      end
      KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 + 1; /* set index up by 1*/
    end
    KS0K-12310(); /* read tsq page*/
    set KS0KM001.XXXLITPG skip; /* "PAGE" literal*/
    KS0KM001.XXXTSPAG = KS0KW00.XXXTSPAG; /* Current page*/
    set KS0KM001.XXXLITOF skip; /* "OF" literal*/
    KS0KM001.TA5TSQIX = KS0KW00.TA5TSQIX; /* Highest page*/
  else
    /* ------------------------------------------------------------*/
    /* If the page in storage is not the page to be displayed,*/
    /* obtain the desired page from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (KS0KW00.TA5TSQIX > 0) /* Pages were formatted*/

      if (KS0KW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/

        if (KS0KW00.XXXTSPAG > KS0KW00.TA5TSQIX) /* Desired greater highest*/
          KS0KW00.XXXTSPAG = KS0KW00.TA5TSQIX; /* Default to highest*/
        end

        KS0K-12310(); /* read tsq page*/

      end

      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/

      set KS0KM001.XXXLITPG skip; /* "PAGE" literal*/
      KS0KM001.XXXTSPAG = KS0KW00.XXXTSPAG; /* Current page*/
      set KS0KM001.XXXLITOF skip; /* "OF" literal*/
      KS0KM001.TA5TSQIX = KS0KW00.TA5TSQIX; /* Highest page*/

    else

      set KS0KM001.XXXLITPG skip; /* "PAGE" literal*/
      KS0KM001.XXXTSPAG = 1; /* Current page*/
      set KS0KM001.XXXLITOF skip; /* "OF" literal*/
      KS0KM001.TA5TSQIX = 1; /* Highest page*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  KS0KM001.KS0KM-GPC-CD = KS0KW01.KS0KW-GPC-CD; /* gpc*/
  KS0KM001.KS0KM-GPC-DESC = KS0KW01.KS0KW-GPC-DESC; /* gpc desc*/
  if (KS0KW01.KS0KW-STY-NBR > " ")
    KS0KM001.KS0KM-STY-NBR = KS0KW01.KS0KW-STY-NBR; /* style*/
  else
    KS0KM001.KS0KM-STY-NBR = KS0KW01.KS0KW-X-STY-NBR; /* style*/
  end
  KS0KM001.KS0KM-STY-NM = KS0KW01.KS0KW-STY-NM; /* style name*/
  KS0KM001.KS0KM-COLR-CD-ID = KS0KW01.KS0KW-COLR-CD-ID; /* color nm*/
  if (KS0KM001.KS0KM-COLR-CD-ID > " ")
    KS0KM001.KS0KM-COLR-DESC = KS0KW01.KS0KW-COLR-DESC; /* color desc*/
  else
    KS0KM001.KS0KM-COLR-DESC = " ";
  end
  KS0KM001.KS0KM-DIM-CD = KS0KW01.KS0KW-DIM-CD; /* dimension*/
  KS0KM001.KS0KM-PRDCTN-YR = KS0KW01.KS0KW-PRDCTN-YR;
  KS0KM001.KS0KM-PRDCTN-MO = KS0KW01.KS0KW-PRDCTN-MO;
  KS0KM001.KS0KM-DLVR-MO = KS0KW01.KS0KW-DLVR-MO;
  KS0KM001.KS0KM-FCTY-CD = KS0KW01.KS0KW-FCTY-CD;

  KS0KW00.KS0KW-IXM = 1; /* Initialize line index*/

  while (KS0KW00.KS0KW-IXM <= 11) /* Until screen is full*/

    KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] = " ";
    if (KS0KW01.KS0KW-DTL-RANK-NBR[KS0KW-IXM] == "1)")

      if (KS0KW01.KS0KW-DTL-STY-NBR[KS0KW-IXM] > " ")
        KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IXM] = KS0KW01.KS0KW-DTL-STY-NBR[KS0KW-IXM];
      else
        KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IXM] = KS0KW01.KS0KW-DTL-X-STYLE[KS0KW-IXM];
      end
      KS0KM001.KS0KM-DTL-COLR-CD[KS0KW-IXM] = KS0KW01.KS0KW-DTL-COLR-CD[KS0KW-IXM];
      KS0KM001.KS0KM-DTL-DIM-CD[KS0KW-IXM] = KS0KW01.KS0KW-DTL-DIM-CD[KS0KW-IXM];
      KS0KW00.KS0KW-DEPT-ID = KS0KW01.KS0KW-DTL-DEPT-ID[KS0KW-IXM];
      KS0KW00.KS0KW-DEPT-COLON = ":";
      KS0KM001.KS0KM-DTL-READ-ABRV[KS0KW-IXM] = KS0KW00.KS0KW-DEPT-WORK;
      KS0KM001.KS0KM-DTL-READ-DESC[KS0KW-IXM] = KS0KW01.KS0KW-DTL-READING-FOR[KS0KW-IXM];

      KS0KM001.KS0KM-DTL-PLNMTR-DT[KS0KW-IXM] = KS0KW01.KS0KW-DTL-PLNMTR-DT[KS0KW-IXM];
      KS0KM001.KS0KM-DTL-RANK-NBR[KS0KW-IXM] = KS0KW01.KS0KW-DTL-RANK-NBR[KS0KW-IXM];
      KS0KM001.KS0KM-DTL-MAT1-PCT[KS0KW-IXM] = KS0KW01.KS0KW-DTL-MAT1-PCT[KS0KW-IXM];
      KS0KM001.KS0KM-DTL-MAT2-PCT[KS0KW-IXM] = KS0KW01.KS0KW-DTL-MAT2-PCT[KS0KW-IXM];
      KS0KM001.KS0KM-DTL-MAT3-PCT[KS0KW-IXM] = KS0KW01.KS0KW-DTL-MAT3-PCT[KS0KW-IXM];
      KS0KM001.KS0KM-DTL-MAT4-PCT[KS0KW-IXM] = KS0KW01.KS0KW-DTL-MAT4-PCT[KS0KW-IXM];
    else
      if (KS0KW01.KS0KW-DTL-RANK-NBR[KS0KW-IXM] == "2)")
        KS0KM001.KS0KM-DTL-RANK-NBR[KS0KW-IXM] = KS0KW01.KS0KW-DTL-RANK-NBR[KS0KW-IXM];
        KS0KM001.KS0KM-DTL-MAT1-PCT[KS0KW-IXM] = KS0KW01.KS0KW-DTL-MAT1-PCT[KS0KW-IXM];
        KS0KM001.KS0KM-DTL-MAT2-PCT[KS0KW-IXM] = KS0KW01.KS0KW-DTL-MAT2-PCT[KS0KW-IXM];
        KS0KM001.KS0KM-DTL-MAT3-PCT[KS0KW-IXM] = KS0KW01.KS0KW-DTL-MAT3-PCT[KS0KW-IXM];
        KS0KM001.KS0KM-DTL-MAT4-PCT[KS0KW-IXM] = KS0KW01.KS0KW-DTL-MAT4-PCT[KS0KW-IXM];
      else
        KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-COLR-CD[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-DIM-CD[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-READ-ABRV[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-READ-DESC[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-PLNMTR-DT[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-RANK-NBR[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-MAT1-PCT[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-MAT2-PCT[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-MAT3-PCT[KS0KW-IXM] = " ";
        KS0KM001.KS0KM-DTL-MAT4-PCT[KS0KW-IXM] = " ";
      end
    end

    KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* Increment line index*/

  end

  /* ------------------------------------------------------------*/
  /* the default cursor position is 1st selection line*/
  /* the routine below may change the cursor position.*/
  /* ------------------------------------------------------------*/

  set KS0KM001.KS0KM-DTL-SEL[1] cursor, normal;

  if (COMMAREA.CAFROMAP == "KS0I") /* If from KS0I*/
    KS0KM001.KS0KM-GPC-CD = KSWREC.XGPCD;
    KS0KW02.KS0KW-GPC-CD = KSWREC.XGPCD;
    KS0KM001.KS0KM-STY-NBR = KSWREC.SY1STNBR;
    KS0KW02.KS0KW-STY-NBR = KSWREC.SY1STNBR;
    KS0KM001.KS0KM-COLR-CD-ID = KSWREC.SY2CLRID;
    KS0KW02.KS0KW-COLR-CD-ID = KSWREC.SY2CLRID;
    KS0KM001.KS0KM-DIM-CD = KSWREC.XDMCD;
    KS0KW02.KS0KW-DIM-CD = KSWREC.XDMCD;
    KS0KW02.KS0KW-X-STYLE = KSWREC.KS-XPRMT-STY-NBR;
    if (KSWREC.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0KM001.KS0KM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      KS0KW02.KS0KW-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
    PG2REC.XGPCD = KSWREC.XGPCD;
    PG2REC.SY1STNBR = KSWREC.SY1STNBR;
    PG2REC.SY2CLRID = KSWREC.SY2CLRID;
    PG2REC.XDMCD = KSWREC.XDMCD;

    KS0K-12100(); /* read product row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      KS0KM001.KS0KM-STY-NM = PG2REC.SY1STYNM;
      KS0KW02.KS0KW-STY-NM = PG2REC.SY1STYNM;
      KS0KM001.KS0KM-COLR-DESC = PG2REC.SY2CLRDS;
      KS0KW02.KS0KW-COLR-DESC = PG2REC.SY2CLRDS;
    else

      set PG4REC empty;
      PG4REC.PG4STNBR = KSWREC.SY1STNBR;
      KS0K-12200();
      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/

        KS0KM001.KS0KM-STY-NM = PG4REC.SY1STYNM;
        KS0KW02.KS0KW-STY-NM = PG4REC.SY1STYNM;
      end

    end

    set KS0KM001.KS0KM-OPT-FIELD invisible, skip;
    set KS0KM001.KS0KM-ITEM-FIELD invisible, skip;
    set KS0KM001.CATOAP invisible, skip;
    set KS0KM001.CAITEM invisible, skip;
    set KS0KM001.KS0KM-GPC-CD skip; /* protect gpc*/
    set KS0KM001.KS0KM-STY-NBR skip; /* protect style*/
    set KS0KM001.KS0KM-STY-NM skip; /* protect style name*/
    set KS0KM001.KS0KM-COLR-CD-ID skip; /* protect color*/
    set KS0KM001.KS0KM-COLR-DESC skip; /* protect color descr*/
    set KS0KM001.KS0KM-DIM-CD skip; /* protect dimension*/
    set KS0KM001.KS0KM-DTL-SEL[1] cursor; /* position cursor*/
  end

  /* ------------------------------------------------------------*/
  /* if we're returning from an add or change, position the cursor*/
  /* on the row we just finished with.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-IXM = 1; /* initialize index*/

  while (KS0KW-IXM <= 11) /* until all lines are processed*/
    if (KS0KW00.KS0KW-LAST-CHGD-ROW > " ")
      KS0KW00.KS0KW-DEPT-ID = KS0KW00.KS0KW-LAST-DEPT;
      KS0KW00.KS0KW-DEPT-COLON = ":";
      if (KS0KW00.KS0KW-LAST-STYLE ==       
      KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IXM] /* same key ?*/
       || KS0KW00.KS0KW-LAST-X-STYLE ==     
      KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IXM]) /* same key ?*/
        if (KS0KW00.KS0KW-LAST-COLOR == 
        KS0KM001.KS0KM-DTL-COLR-CD[KS0KW-IXM]
         && KS0KW00.KS0KW-LAST-DIM == 
        KS0KM001.KS0KM-DTL-DIM-CD[KS0KW-IXM]
         && KS0KW00.KS0KW-DEPT-WORK == 
        KS0KM001.KS0KM-DTL-READ-ABRV[KS0KW-IXM]
         && KS0KW00.KS0KW-LAST-READING-FOR == 
        KS0KM001.KS0KM-DTL-READ-DESC[KS0KW-IXM]
         && KS0KW00.KS0KW-LAST-PLNMT-DT == 
        KS0KM001.KS0KM-DTL-PLNMTR-DT[KS0KW-IXM]
         && "1)" == KS0KM001.KS0KM-DTL-RANK-NBR[KS0KW-IXM])
          set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] cursor, normal;
        else
          set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] normal;
        end
      else
        set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] normal;
      end
    else
      set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] normal;
    end
    KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* set index up by 1*/
  end

  KS0KW00.KS0KW-LAST-CHGD-ROW = " "; /* clear last chgd row*/

  /* ---------------------------------------------------------------------*/
  /* this code clears the selection field if there is no data on the line.*/
  /* ---------------------------------------------------------------------*/

  KS0KW00.KS0KW-IXM = 1; /* initialize index*/

  while (KS0KW-IXM <= 11) /* until all lines are processed*/
    if (KS0KM001.KS0KM-DTL-PLNMTR-DT[KS0KW-IXM] == " ")
      set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] invisible, skip;
    end
    KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* set index up by 1*/
  end

  if (COMMAREA.CACHGFL == "Y")
    set KS0KM001.KS0KM-PF14 bold, skip;
    set KS0KM001.KS0KM-PF15 bold, skip;
  end

  if (COMMAREA.CAADDFL == "Y")
    set KS0KM001.KS0KM-PF13 bold, skip;
  end

end // end KS0K-12300

// read tsq page
Function KS0K-12310()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/

  KS0KW01.XXXTSLEN = KS0KW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0KW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (KS0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  KSWREC.XXXPRCNM = "12310"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end KS0K-12310

// Check attention identifier
Function KS0K-13000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pakey) /* PA was pressed*/

    if (KS0KW00.KS0KW-SWR == "Y") /* Request for data pending*/
      set KS0KW01 empty; /* M001 display storage*/
    end

    KS0KW00.KS0KW-SWF = "N"; /* Format the map switch*/
    KS0KW00.KS0KW-SWR = "Y"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      KS0K-11100(); /* purge temp storage*/

      XSKS-S0001(); /* Exit to another application*/

      set KS0KM001.CATOAP cursor, bold; /* Highlight*/

    else

      KSWREC.XXXPRCNM = "13000"; /* Module ideKSification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end


  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0KM001";
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (COMMAREA.CAFROMAP == "KS0I") /* If from KS0I*/
        COMMAREA.CATOAP = "KS0I"; /* To application*/
      else
        COMMAREA.CATOAP = "KS0A"; /* To application*/
      end
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      if (COMMAREA.CAFROMAP != "KS0I") /* not from ks0i*/
        COMMAREA.CATOAP = "MN0M"; /* TO application*/
      else
        KSWREC.XXXPRCNM = "13000"; /* Module identification*/
        converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
        exit stack; /* exit to display map*/
      end
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "KS0A"; /* TO application*/
    end

    XSKS-S0001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* PF8  was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* PF15 was not pressed*/

    KSWREC.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (COMMAREA.CAADDFL == "N") /* chg flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    end
  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* chg flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    end
  end

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    if (COMMAREA.CAADDFL == "N" /* add flag = no*/
     && COMMAREA.CACHGFL == "N") /* chg flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    end
  end

end // end KS0K-13000

// Reset highlighted fields
Function KS0K-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0KM001.KS0KM-GPC-CD initialAttributes; /* gpc code*/
  set KS0KM001.KS0KM-GPC-DESC initialAttributes; /* gpc desc*/
  set KS0KM001.KS0KM-STY-NBR initialAttributes; /* style number*/
  set KS0KM001.KS0KM-STY-NM initialAttributes; /* style name*/
  set KS0KM001.KS0KM-COLR-CD-ID initialAttributes; /* color*/
  set KS0KM001.KS0KM-DIM-CD initialAttributes; /* dimension*/
  set KS0KM001.KS0KM-PRDCTN-YR initialAttributes; /* production year*/
  set KS0KM001.KS0KM-PRDCTN-MO initialAttributes; /* production month*/
  set KS0KM001.KS0KM-DLVR-MO initialAttributes; /* delivery month*/
  set KS0KM001.KS0KM-FCTY-CD initialAttributes; /* factory month*/

   /* the attributes for the detail lines are also set in ks0k-12100*/

  KS0KW00.KS0KW-IXM = 1; /* set index to 1*/
  while (KS0KW00.KS0KW-IXM <= 11) /* for all detail lines*/
    if (KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IXM] > " ")
      set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] normal;
    else
      set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] initialAttributes;
    end
    set KS0KM001.KS0KM-DTL-STY-NBR[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-COLR-CD[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-DIM-CD[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-READ-ABRV[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-READ-DESC[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-PLNMTR-DT[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-RANK-NBR[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-MAT1-PCT[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-MAT2-PCT[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-MAT3-PCT[KS0KW-IXM] initialAttributes;
    set KS0KM001.KS0KM-DTL-MAT4-PCT[KS0KW-IXM] initialAttributes;
    KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* set index up by 1*/
  end
  set KS0KM001.CATOAP initialAttributes; /* TO application*/
  set KS0KM001.CAITEM initialAttributes; /* Application data*/

   /* check pop-up fields for '?'*/

  if (KS0KM001.KS0KM-GPC-CD == "?"
   || KS0KM001.KS0KM-DIM-CD == "?") /* dimension code requested*/
    if (KS0KM001.KS0KM-GPC-CD == "?")
      XPXX001();
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits ENTER*/
        XPXGP01(); /* pop-up gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0KM001.KS0KM-GPC-CD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        if (KS0KM001.KS0KM-GPC-CD == "EQ") /* clear fields*/
          KS0KM001.KS0KM-GPC-DESC = "EQUIPMENT";
        else
          KS0KM001.KS0KM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
        end
      else
        KS0KM001.KS0KM-GPC-CD = " "; /* clear fields*/
        KS0KM001.KS0KM-GPC-DESC = " ";
      end
      set KS0KM001.KS0KM-GPC-CD cursor; /* Set cursor*/
    end

    /* ------------------------------------------------------------*/
     /* If requested, display the list of dimension codes*/
    /* ------------------------------------------------------------*/

    if (KS0KM001.KS0KM-DIM-CD == "?") /* dimension code override requested*/

      XPXX001(); /* window initialization*/
      XX0XW02.XX0XWHDR = "DIMENSION CODE"; /* Heading*/

      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXDM01(); /* Display the list*/
      end

      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
        KS0KM001.KS0KM-DIM-CD = " "; /* Restore prior code*/
      else
        KS0KM001.KS0KM-DIM-CD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      end
      set KS0KM001.KS0KM-DIM-CD cursor; /* Establish cursor position*/
    end

    KS0KW00.KS0KW-SWR = "N"; /* Reset request for data switch*/
    KS0KW00.KS0KW-SWF = "N"; /* Reset format the map switch*/

    converseLib.clearScreen();
     /* Restore the original map*/

    exit stack; /* Exit to display map*/
  end

end // end KS0K-14000

// Verify data that was entered
Function KS0K-15000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    KSWREC.XXXPRCNM = "15000"; /* Module identification*/
    set KS0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Indicate only with FAST PATH*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    KS0K-15100(); /* verify scroll request*/

  else

    KS0K-15200(); /* verify data in line*/

  end

  /* ------------------------------------------------------------*/
  /* If any error was found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0K-15000

// verify scroll request
Function KS0K-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0KW00.XXXTSPAG < 2)       /* and no previous pages*/

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0KW00.XXXTSPAG >= KS0KW00.TA5TSQIX) /* and no more pages*/

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

  /* ------------------------------------------------------------*/
  /* Indicate an error for any data that was modified.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-IXM = 11; /* Initialize line index*/

  while (KS0KW00.KS0KW-IXM > 0) /* Until end of lines*/

    if (KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] != KS0KW01.KS0KW-SEL[KS0KW-IXM])

      KSWREC.XXXPRCNM = "15100"; /* Module identification*/
      set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/

    end

    KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM - 1; /* Decrement line number*/

  end

  if (COMMAREA.CAFROMAP == "KS0I")
    if (KS0KM001.KS0KM-FCTY-CD != KS0KW01.KS0KW-FCTY-CD     /* factory changed*/
     || KS0KM001.KS0KM-DLVR-MO != KS0KW01.KS0KW-DLVR-MO     /* dlvr mo changed*/
     || KS0KM001.KS0KM-PRDCTN-MO != KS0KW01.KS0KW-PRDCTN-MO /* prod mo chgd*/
     || KS0KM001.KS0KM-PRDCTN-YR != KS0KW01.KS0KW-PRDCTN-YR) /* prod yr chgd*/

      KSWREC.XXXPRCNM = "15100"; /* Module identification*/
      set KS0KM001.KS0KM-PRDCTN-YR cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/

    end
  else

    if (KS0KM001.KS0KM-FCTY-CD != KS0KW01.KS0KW-FCTY-CD       /* factory changed*/
     || KS0KM001.KS0KM-DLVR-MO != KS0KW01.KS0KW-DLVR-MO       /* dlvr mo changed*/
     || KS0KM001.KS0KM-PRDCTN-MO != KS0KW01.KS0KW-PRDCTN-MO   /* prod mo chgd*/
     || KS0KM001.KS0KM-PRDCTN-YR != KS0KW01.KS0KW-PRDCTN-YR   /* prod yr chgd*/
     || KS0KM001.KS0KM-DIM-CD != KS0KW01.KS0KW-DIM-CD         /* dimension changed*/
     || KS0KM001.KS0KM-COLR-CD-ID != KS0KW01.KS0KW-COLR-CD-ID /* color chgd*/
     || KS0KM001.KS0KM-STY-NBR != KS0KW01.KS0KW-STY-NBR       /* style changed*/
     || KS0KM001.KS0KM-GPC-CD != KS0KW01.KS0KW-GPC-CD)        /* gpc changed*/

      KSWREC.XXXPRCNM = "15100"; /* Module identification*/
      set KS0KM001.KS0KM-FCTY-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/

    end
  end

end // end KS0K-15100

// verify data in the line
Function KS0K-15200()
  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - GPC/STYLE  or*/
  /* GPC/PO-MONTH-RNG or*/
  /* GPC/PARTIAL STYLE/PO-MONTH-RNG*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-GPC-CD > " "    /* If GPC entered*/
   && KS0KM001.KS0KM-PRDCTN-YR > " " /* If po id year entered*/
   && KS0KM001.KS0KM-PRDCTN-MO > " " /* If po id month entered*/
   && KS0KM001.KS0KM-DLVR-MO > " ")  /* If dlvr month entered*/
     /* next sentence*/
  else
    if (KS0KM001.KS0KM-GPC-CD > " " /* If GPC entered*/
     && KS0KM001.KS0KM-STY-NBR > " ") /* If STYLE entered*/
       /* next sentence*/
    else
      if (KS0KM001.KS0KM-GPC-CD > " " /* If GPC entered*/
       && converseVar.eventKey is pf13) /* Add request*/
  /* ------------------------------------------------------------*/
  /* Verify the General Product Class code.*/
  /* ------------------------------------------------------------*/

        if (KS0KM001.KS0KM-GPC-CD in XGPTBL.XGPCD /* Code in table*/
         && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          KS0KW01.KS0KW-GPC-CD = KS0KM001.KS0KM-GPC-CD;
          return;
        end
        if (KS0KM001.KS0KM-GPC-CD != "02"
         && KS0KM001.KS0KM-GPC-CD != "03"
         && KS0KM001.KS0KM-GPC-CD != "EQ")
          set KS0KM001.KS0KM-GPC-CD cursor, bold;
          KSWREC.XXXPRCNM = "15200"; /* Module identification*/
          converseLib.validationFailed(157); /* Data is required message*/
        end
      else
        set KS0KM001.KS0KM-STY-NBR cursor, bold;
        set KS0KM001.KS0KM-PRDCTN-YR bold;
        set KS0KM001.KS0KM-PRDCTN-MO bold;
        set KS0KM001.KS0KM-DLVR-MO bold;
        set KS0KM001.KS0KM-FCTY-CD bold;
        KS0KM001.KS0KM-STY-NM = " ";
        KSWREC.XXXPRCNM = "15200"; /* Module identification*/
        converseLib.validationFailed(149); /* Data is required message*/
        return;
      end
    end
  end


  /* ------------------------------------------------------------*/
  /* Verify the factory code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-FCTY-CD > " ")
    set FY1REC empty;
    FY1REC.XGPCD = KS0KM001.KS0KM-GPC-CD;
    FY1REC.FY1FCTYC = KS0KM001.KS0KM-FCTY-CD;
    KS0K-15210(); /* select factory row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
      /* next sentence*/
    else
      set KS0KM001.KS0KM-FCTY-CD cursor, bold;
      converseLib.validationFailed(98);
      KSWREC.XXXPRCNM = "15200";
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the delivery month entered*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-DLVR-MO > " ") /* if entered*/
    if (KS0KM001.KS0KM-DLVR-MO >= "01" /* must be between 1 & 12*/
     && KS0KM001.KS0KM-DLVR-MO <= "12")
       /* next sentence*/
    else
      converseLib.validationFailed(99);
      KSWREC.XXXPRCNM = "15200";
      set KS0KM001.KS0KM-DLVR-MO cursor, bold;
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the production month entered*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-PRDCTN-MO > " ") /* if entered*/
    if (KS0KM001.KS0KM-PRDCTN-MO >= "01" /* must be between 1 & 12*/
     && KS0KM001.KS0KM-PRDCTN-MO <= "12")
       /* next sentence*/
    else
      converseLib.validationFailed(99);
      KSWREC.XXXPRCNM = "15200";
      set KS0KM001.KS0KM-PRDCTN-MO cursor, bold;
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the production year entered*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-PRDCTN-YR > " ") /* if entered*/
    if (KS0KM001.KS0KM-PRDCTN-YR >= "00" /* must be between 0 & 99*/
     && KS0KM001.KS0KM-PRDCTN-YR <= "99")
       /* next sentence*/
    else
      converseLib.validationFailed(26);
      KSWREC.XXXPRCNM = "15200";
      set KS0KM001.KS0KM-PRDCTN-YR cursor, bold;
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify that if any part of the po id is entered, the rest of*/
  /* it is entered also.*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-PRDCTN-YR > " ") /* if entered*/
    if (KS0KM001.KS0KM-PRDCTN-MO == "  " /* if not entered*/
     || KS0KM001.KS0KM-DLVR-MO == "  ")  /* or not entered*/
      converseLib.validationFailed(114);
      KSWREC.XXXPRCNM = "15200";
      set KS0KM001.KS0KM-PRDCTN-YR cursor, bold;
      set KS0KM001.KS0KM-PRDCTN-MO bold;
      set KS0KM001.KS0KM-DLVR-MO bold;
    end
  else
    if (KS0KM001.KS0KM-PRDCTN-MO > "  ") /* if entered*/
      if (KS0KM001.KS0KM-PRDCTN-YR == " " /* if not entered*/
       || KS0KM001.KS0KM-DLVR-MO == "  ") /* or not entered*/
        converseLib.validationFailed(114);
        KSWREC.XXXPRCNM = "15200";
        set KS0KM001.KS0KM-PRDCTN-YR cursor, bold;
        set KS0KM001.KS0KM-PRDCTN-MO bold;
        set KS0KM001.KS0KM-DLVR-MO bold;
      end
    else
      if (KS0KM001.KS0KM-DLVR-MO > "  ") /* if entered*/
        if (KS0KM001.KS0KM-PRDCTN-YR == " " /* if not entered*/
         || KS0KM001.KS0KM-PRDCTN-MO == "  ") /* or not entered*/
          converseLib.validationFailed(114);
          KSWREC.XXXPRCNM = "15200";
          set KS0KM001.KS0KM-PRDCTN-YR cursor, bold;
          set KS0KM001.KS0KM-PRDCTN-MO bold;
          set KS0KM001.KS0KM-DLVR-MO bold;
        end
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the dimension code entered*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-DIM-CD > " ") /* if entered*/
    if (KS0KM001.KS0KM-DIM-CD in XDMTBL.XDMCD /* if in table*/
     && XDMTBL.XXXSTAT == "A")                /* and active*/
       /* next sentence*/
    else
      converseLib.validationFailed(78);
      KSWREC.XXXPRCNM = "15200";
      set KS0KM001.KS0KM-DIM-CD cursor, bold;
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the color only when the prdctn-yr,mo and dlvr-mo*/
  /* are blank.*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-COLR-CD-ID > " ") /* If color entered*/
    if (KS0KM001.KS0KM-PRDCTN-YR == " "
     && KS0KM001.KS0KM-PRDCTN-MO == " "
     && KS0KM001.KS0KM-DLVR-MO == " ")
      set PG2REC empty;
      if (KS0KM001.KS0KM-GPC-CD == "EQ")
        PG2REC.XGPCD = "02";
        KS0KW-SAV-EQUIP-GPC = "02";
      else
        PG2REC.XGPCD = KS0KM001.KS0KM-GPC-CD;
      end
      PG2REC.SY1STNBR = KS0KM001.KS0KM-STY-NBR;

      KS0K-15220(); /* select set to verify*/
                                  /* color*/
      if (SQLCA.VAGen_SQLCODE == 0)

        KS0K-15230(); /* fetch first row*/

        KS0KW00.KS0KW-VALID-COLR-SW = "N";

        while (SQLCA.VAGen_SQLCODE == 0) /* while there are rows*/

          if (KS0KM001.KS0KM-COLR-CD-ID == PG2REC.SY2CLRID)
            KS0KW00.KS0KW-VALID-COLR-SW = "Y";
            SQLCA.VAGen_SQLCODE = 100; /* quit the loop*/
          else
            KS0K-15230(); /* fetch next row*/
          end

        end
        if (KS0KW00.KS0KW-VALID-COLR-SW == "N") /* if invalid?*/
          set PG4REC empty;
          PG4REC.PG4STNBR = KS0KM001.KS0KM-STY-NBR;

          KS0K-12200(); /* select set to verify*/

          KS0KW00.KS0KW-VALID-COLR-SW = "N";

          if (SQLCA.VAGen_SQLCODE == 0)

            KS0KW00.KS0KW-VALID-COLR-SW = "Y";
          end
        end
        if (KS0KW00.KS0KW-VALID-COLR-SW == "N") /* if invalid?*/
          set KS0KM001.KS0KM-COLR-CD-ID cursor, bold;
          KS0KM001.KS0KM-COLR-DESC = " ";
          KSWREC.XXXPRCNM = "15200";
          converseLib.validationFailed(79);
        end
        KS0K-15240(); /* close set*/
      else
        if (KS0KM001.KS0KM-GPC-CD == "EQ")
          PG2REC.XGPCD = "03";
          KS0KW-SAV-EQUIP-GPC = "03";
          KS0K-15220(); /* select set to verify*/
                                  /* color*/
          if (SQLCA.VAGen_SQLCODE == 0)

            KS0K-15230(); /* fetch first row*/

            KS0KW00.KS0KW-VALID-COLR-SW = "N";

            while (SQLCA.VAGen_SQLCODE == 0) /* while there are rows*/

              if (KS0KM001.KS0KM-COLR-CD-ID == PG2REC.SY2CLRID)
                KS0KW00.KS0KW-VALID-COLR-SW = "Y";
                SQLCA.VAGen_SQLCODE = 100; /* quit the loop*/
              else
                KS0K-15230(); /* fetch next row*/
              end

            end
            if (KS0KW00.KS0KW-VALID-COLR-SW == "N") /* if invalid?*/
              set PG4REC empty;
              PG4REC.PG4STNBR = KS0KM001.KS0KM-STY-NBR;

              KS0K-12200(); /* select set to verify*/

              KS0KW00.KS0KW-VALID-COLR-SW = "N";

              if (SQLCA.VAGen_SQLCODE == 0)

                KS0KW00.KS0KW-VALID-COLR-SW = "Y";
              end
            end
            if (KS0KW00.KS0KW-VALID-COLR-SW == "N") /* if invalid?*/
              set KS0KM001.KS0KM-COLR-CD-ID cursor, bold;
              KS0KM001.KS0KM-COLR-DESC = " ";
              KSWREC.XXXPRCNM = "15200";
              converseLib.validationFailed(79);
            end
            KS0K-15240(); /* close set*/

          else
            set KS0KM001.KS0KM-COLR-CD-ID cursor, bold;
            KS0KM001.KS0KM-COLR-DESC = " ";
            KSWREC.XXXPRCNM = "15200";
            converseLib.validationFailed(79);
          end
        end
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the style entered*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-PRDCTN-YR == " " /* If po id year blank*/
   && KS0KM001.KS0KM-PRDCTN-MO == " " /* If po id month blank*/
   && KS0KM001.KS0KM-DLVR-MO == " ")  /* If dlvr month blank*/
    set PG2REC empty;
    if (KS0KM001.KS0KM-GPC-CD == "EQ")
      PG2REC.XGPCD = "02";
      KS0KW-SAV-EQUIP-GPC = "02";
    else
      PG2REC.XGPCD = KS0KM001.KS0KM-GPC-CD;
    end
    PG2REC.SY1STNBR = KS0KM001.KS0KM-STY-NBR;

    KS0K-15220(); /* select set to verify*/
                                  /* style*/
    if (SQLCA.VAGen_SQLCODE == 0)

      KS0K-15230(); /* fetch first row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if one was found, it's ok*/
        /* next sentence*/
      else
        set PG4REC empty;
        PG4REC.PG4STNBR = KS0KM001.KS0KM-STY-NBR;

        KS0K-12200(); /* select set to verify*/

        KS0KW00.KS0KW-VALID-COLR-SW = "N";

        if (SQLCA.VAGen_SQLCODE == 0)
           /* next sentence*/
        else

          set KS0KM001.KS0KM-STY-NBR cursor, bold;
          KS0KM001.KS0KM-STY-NM = " ";
          KSWREC.XXXPRCNM = "15200";
          converseLib.validationFailed(80);
        end

      end
    else
      if (KS0KM001.KS0KM-GPC-CD == "EQ")
        PG2REC.XGPCD = "03";
        KS0KW-SAV-EQUIP-GPC = "03";
        KS0K-15220(); /* select set to verify*/
                                  /* style*/
        if (SQLCA.VAGen_SQLCODE == 0)

          KS0K-15230(); /* fetch first row*/

          if (SQLCA.VAGen_SQLCODE == 0) /* if one was found, it's ok*/
        /* next sentence*/
          else
            set PG4REC empty;
            PG4REC.PG4STNBR = KS0KM001.KS0KM-STY-NBR;

            KS0K-12200(); /* select set to verify*/

            KS0KW00.KS0KW-VALID-COLR-SW = "N";

            if (SQLCA.VAGen_SQLCODE == 0)
           /* next sentence*/
            else

              set KS0KM001.KS0KM-STY-NBR cursor, bold;
              KS0KM001.KS0KM-STY-NM = " ";
              KSWREC.XXXPRCNM = "15200";
              converseLib.validationFailed(80);
            end
          end
      /*  */
        end
      end
      KS0K-15240(); /* close set*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the General Product Class code.*/
  /* ------------------------------------------------------------*/

  if (KS0KM001.KS0KM-GPC-CD in XGPTBL.XGPCD /* Code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    /* NEXT SENTENCE*/

  else
    if (KS0KM001.KS0KM-GPC-CD == "EQ") /* equipment*/
    /* NEXT SENTENCE*/
    else


    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0KM001.KS0KM-GPC-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(147); /* Field missing or invalid*/

    end
  end
  if (KS0KM001.KS0KM-GPC-CD != "02")
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    set KS0KM001.KS0KM-GPC-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(151); /* Field missing or invalid*/
  end

  /* ------------------------------------------------------------*/
  /* If any errors exist, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    set KS0KW01 empty;
    return;
  end

  /* ------------------------------------------------------------*/
  /* If selection was entered and is not a "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-IXM = 11; /* set index*/

  while (KS0KW00.KS0KW-IXM >= 1)
    if (KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] != KS0KW01.KS0KW-SEL[KS0KW-IXM]
     && KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] != "S") /* and is not a "S"*/

      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" may be entered*/

    end
    KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM - 1; /* decrement index*/
  end

end // end KS0K-15200

// select a factory row
Function KS0K-15210()
  /* ------------------------------------------------------------*/
  /* select table row*/
  /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return*/
  /* If data not found, return an error message to the user.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "15210"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-15210

// sel row from dprodg.vsyclr01
Function KS0K-15220()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "15220"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0K-15220

// fetch dprodg.vsyclr01 row
Function KS0K-15230()
  /* ------------------------------------------------------------*/
  /* Fetch the next row from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or last row read*/

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "15230"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0K-15230

// close dprodg.vsyclr01
Function KS0K-15240()
  /* ------------------------------------------------------------*/
  /* Close the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "15240"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0K-15240

// Process valid input request
Function KS0K-16000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-SWF = "Y"; /* Format the map switch*/
  KS0KW00.KS0KW-CSTM-FEAT-SW = "Y"; /* Set feature flag*/

  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    KS0KW00.XXXTSPAG = KS0KW00.XXXTSPAG - 1; /* Decrement page number*/
    KS0KW00.KS0KW-SWR = "N"; /* do not request new data*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    KS0KW00.XXXTSPAG = KS0KW00.XXXTSPAG + 1; /* Increment page number*/
    KS0KW00.KS0KW-SWR = "N"; /* do not request new data*/

    return; /* Return to previous process*/

  end

  /* -------------------------------------------------------------------*/
  /* If an add was requested*/
  /* -------------------------------------------------------------------*/
  if (converseVar.eventKey is pf13) /* F13 pressed?*/
    KS0KW00.KS0KW-NEXT-SEL-ROW = " "; /* clear sel field save*/
    move " " to KS0KW00.KS0KW-SELECTED-ROWS[1] for all; /* clear sel rows*/

    KS0KW00.KS0KW-IXM = 1; /* reset index*/
    while (KS0KW00.KS0KW-IXM <= 11) /* Until end of lines*/

      if (KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] == "S") /* this line selected?*/
        KS0KW00.KS0KW-NEXT-SEL-ROW = KS0KW01.KS0KW-DTL-ROW-KEY[KS0KW-IXM]; /* save selected keys*/
        KS0KW00.KS0KW-IXM = 12; /* end loop*/
      end
      KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* increment index*/
    end

    if (KS0KW00.KS0KW-NEXT-SEL-ROW == " " /* No row selected for add*/
     && COMMAREA.CAFROMAP == "KS0I")      /* And from KS0I*/
      KS0KW00.KS0KW-NEXT-STYLE = KS0KW01.KS0KW-STY-NBR;
      KS0KW00.KS0KW-NEXT-X-STYLE = KS0KW01.KS0KW-X-STY-NBR;
      KS0KW00.KS0KW-NEXT-COLOR = KS0KW01.KS0KW-COLR-CD-ID;
      KS0KW00.KS0KW-NEXT-DIM = KS0KW01.KS0KW-DIM-CD;
      KS0KW00.KS0KW-NEXT-FY1FCTYC = KS0KW01.KS0KW-FCTY-CD;
      if (KS0KW01.KS0KW-PRDCTN-YR > " "
       && KS0KW01.KS0KW-PRDCTN-MO > " "
       && KS0KW01.KS0KW-DLVR-MO > " ")
        KS0KW00.KS0KW-YEAR = KS0KW01.KS0KW-PRDCTN-YR;
        KS0KW00.KS0KW-MONTH = KS0KW01.KS0KW-PRDCTN-MO;
        KS0KW00.KS0KW-DAY = KS0KW01.KS0KW-DLVR-MO;
        if (KS0KW00.KS0KW-YEAR > 60)
          KS0KW00.KS0KW-CENTURY = 19;
        else
          KS0KW00.KS0KW-CENTURY = 20;
        end
        KS0KW00.KS0KW-FILLER = 0;
      else
        KS0KW00.KS0KW-DATE-WORK = 0;
      end
      KS0KW00.KS0KW-NEXT-PC3POIDT = KS0KW00.KS0KW-DATE-WORK;
    end

    KS0KW00.KS0KW-SWF = "Y"; /* format the map*/
    KS0KW00.KS0KW-SWR = "Y"; /* yes, request new data*/
    KS0KW00.KS0KW-SWD = "2"; /* Map to be displayed switch*/
    KS0KW00.KS0KW-FNC = "A"; /* set function switch*/
    KS0KW00.KS0KW-SAVE-ADD-CNT = 0; /* set add cntr to control*/
    return;
  end

  /* ------------------------------------------------------------*/
  /* if enter was pressed and heading data was changed, set request*/
  /* for data switch to 'y'.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter pressed?*/

    if (KS0KM001.KS0KM-GPC-CD != KS0KW01.KS0KW-GPC-CD         /* gpc*/
     || KS0KM001.KS0KM-STY-NBR != KS0KW01.KS0KW-STY-NBR       /* style*/
     || KS0KM001.KS0KM-COLR-CD-ID != KS0KW01.KS0KW-COLR-CD-ID /* color*/
     || KS0KM001.KS0KM-DIM-CD != KS0KW01.KS0KW-DIM-CD         /* dim cd*/
     || KS0KM001.KS0KM-PRDCTN-YR != KS0KW01.KS0KW-PRDCTN-YR   /* prd yr*/
     || KS0KM001.KS0KM-PRDCTN-MO != KS0KW01.KS0KW-PRDCTN-MO   /* prd mo*/
     || KS0KM001.KS0KM-DLVR-MO != KS0KW01.KS0KW-DLVR-MO       /* dlvr mo*/
     || KS0KM001.KS0KM-FCTY-CD != KS0KW01.KS0KW-FCTY-CD)      /* fcty-cd*/
      KS0KW00.KS0KW-SWF = "Y"; /* format the map*/
      KS0KW00.KS0KW-SWR = "Y"; /* yes, request new data*/
      KS0KW00.KS0KW-LAST-CHGD-ROW = " ";
      set KS0KW01 empty; /* clear work area*/
      return; /* return*/
    end
    KS0KW00.KS0KW-SWF = "Y"; /* format the map*/
    KS0KW00.KS0KW-SWR = "Y"; /* yes, request new data*/
    KS0KW00.KS0KW-SWD = "2"; /* set map to be displayed switch*/
    KS0KW00.KS0KW-FNC = "I"; /* set inquiry mode*/

    KS0KW00.KS0KW-NEXT-SEL-ROW = " "; /* clear sel field save*/
    move " " to KS0KW00.KS0KW-SELECTED-ROWS[1] for all; /* clear sel rows*/

    KS0KW00.KS0KW-IXM = 1; /* reset index*/
    while (KS0KW00.KS0KW-IXM <= 11) /* Until end of lines*/

      if (KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] == "S") /* this line selected?*/

        KS0KW00.KS0KW-SELECTED-ROWS[KS0KW-IXM] = KS0KW01.KS0KW-DTL-ROW-KEY[KS0KW-IXM];

        if (KS0KW00.KS0KW-NEXT-SEL-ROW == " ") /* first one blank*/
          KS0KW00.KS0KW-NEXT-SEL-ROW = KS0KW01.KS0KW-DTL-ROW-KEY[KS0KW-IXM]; /* save selected rows*/
          KS0KW00.KS0KW-SEL-INDEX = KS0KW00.KS0KW-IXM; /* selected idx*/
        end
      end
      KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* Increment line index*/
    end
  end

  /* -------------------------------------------------------------------*/
  /* If an Update was requested*/
  /* -------------------------------------------------------------------*/
  if (converseVar.eventKey is pf14) /* F14 pressed?*/
    set KS0KW02 empty; /* clear original storage area*/
    KS0KW00.KS0KW-SWR = "Y"; /* data is requested*/
    KS0KW00.KS0KW-SWD = "2"; /* Map to be displayed switch*/
    KS0KW00.KS0KW-FNC = "C"; /* set function switch*/
    KS0KW00.KS0KW-NEXT-SEL-ROW = " "; /* clear sel field save*/
    move " " to KS0KW00.KS0KW-SELECTED-ROWS[1] for all; /* clear sel rows*/

    KS0KW00.KS0KW-IXM = 1; /* reset index*/
    while (KS0KW00.KS0KW-IXM <= 11) /* Until end of lines*/

      if (KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] == "S") /* this line selected?*/

        KS0KW00.KS0KW-SELECTED-ROWS[KS0KW-IXM] = KS0KW01.KS0KW-DTL-ROW-KEY[KS0KW-IXM];

        if (KS0KW00.KS0KW-NEXT-SEL-ROW == " ") /* first one blank*/
          KS0KW00.KS0KW-NEXT-SEL-ROW = KS0KW01.KS0KW-DTL-ROW-KEY[KS0KW-IXM]; /* save selected rows*/
          KS0KW00.KS0KW-SEL-INDEX = KS0KW00.KS0KW-IXM; /* selected idx*/
        end
      end
      KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* Increment line index*/

    end
  end

  /* ----------------------------------------------------------------------*/
  /* If Delete was requested*/
  /* ----------------------------------------------------------------------*/
  if (converseVar.eventKey is pf15) /* F15 pressed?*/
    set KS0KW02 empty; /* clear original storage area*/
    KS0KW00.KS0KW-SWR = "Y"; /* data is requested*/
    KS0KW00.KS0KW-SWD = "2"; /* Map to be displayed switch*/
    KS0KW00.KS0KW-FNC = "D"; /* set function switch*/
    KS0KW00.KS0KW-NEXT-SEL-ROW = " "; /* clear sel field save*/
    move " " to KS0KW00.KS0KW-SELECTED-ROWS[1] for all; /* clear sel rows*/

    KS0KW00.KS0KW-IXM = 1; /* reset index*/
    while (KS0KW00.KS0KW-IXM <= 11) /* Until end of lines*/

      if (KS0KM001.KS0KM-DTL-SEL[KS0KW-IXM] == "S") /* this line selected?*/

        KS0KW00.KS0KW-SELECTED-ROWS[KS0KW-IXM] = KS0KW01.KS0KW-DTL-ROW-KEY[KS0KW-IXM];

        if (KS0KW00.KS0KW-NEXT-SEL-ROW == " ") /* first one blank*/
          KS0KW00.KS0KW-NEXT-SEL-ROW = KS0KW01.KS0KW-DTL-ROW-KEY[KS0KW-IXM]; /* save selected rows*/
          KS0KW00.KS0KW-SEL-INDEX = KS0KW00.KS0KW-IXM; /* selected idx*/
        end
      end
      KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* Increment line index*/

    end
  end

  /* -----------------------------------------------------------------*/
  /* If no rows were selected*/
  /* -----------------------------------------------------------------*/
  if (KS0KW00.KS0KW-NEXT-SEL-ROW == " ") /* if none were selected*/
    KS0KW00.KS0KW-SWD = "1"; /* Map to be displayed switch*/
    KS0KW00.KS0KW-SWF = "N"; /* do not format map*/
    if (KS0KW00.TA5TSQIX != 0) /* if pages formatted*/
      KS0KW00.KS0KW-SWR = "N"; /* do not request data*/
      converseLib.validationFailed(43); /* set error msg nbr*/
      KSWREC.XXXPRCNM = "16000";
      set KS0KM001.KS0KM-DTL-SEL[1] cursor; /* set cursor*/
      return; /* return*/
    end
  end

end // end KS0K-16000

// display the selected table row
Function KS0K-20000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0K-21000(); /* Obtain the data to display*/

  KS0K-22000(); /* Format and display the map*/

  KS0K-23000(); /* Check attention identifier*/

  KS0K-24000(); /* Reset fields to normal intensity*/

  KS0K-25000(); /* Verify the data that was entered*/

  KS0K-26000(); /* Process valid input request*/

end // end KS0K-20000

// obtain the data to display
Function KS0K-21000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    if (converseVar.validationMsgNum == 1) /* update successful*/
       /* next sentence*/
    else
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Clear the map display storage area.*/
  /* ------------------------------------------------------------*/

  set KS0KW02 empty; /* M002 display storage*/

  /* ------------------------------------------------------------*/
  /* initialize the foxing codes.*/
  /* ------------------------------------------------------------*/

  KS0KW02.KS0KW-CSTM-FOXING[1] = "N";
  KS0KW02.KS0KW-CSTM-FOXING[2] = "N";
  KS0KW02.KS0KW-CSTM-FOXING[3] = "N";

  /* ------------------------------------------------------------*/
  /* initialize the warnings issued switch*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-WARNINGS-ISSUED-SW = "N";

  /* ------------------------------------------------------------*/
  /* Obtain the table row to be displayed.*/
  /* ------------------------------------------------------------*/

  VPLNMT01.XXXRKNBR = 1; /* read for rank #1 row*/

  KS0K-21100(); /* Obtain the table row*/

  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    KS0K-21200(); /* Save in display storage*/

    VPLNMT01.XXXRKNBR = 2; /* read for rank #2 row*/

    KS0K-21100(); /* read for second record*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      KS0K-21300(); /* Save in display storage*/

    end

  else
    if (KS0KW00.KS0KW-FNC == "A") /* if add function ?*/
      if (COMMAREA.CAFROMAP == "KS0I")

        KS0K-21200();

      end
    else

      KSWREC.XXXPRCNM = "21000"; /* Module identification*/
      KSWREC.XXXMSGNO = 18; /* No data was found to display*/

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-SWR = "N"; /* Request for data switch*/

end // end KS0K-21000

// select dcustm.vplnmt01 row
Function KS0K-21100()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Set the keys for the select.*/
  /* ------------------------------------------------------------*/

  VPLNMT01.XGPCD = KS0KW01.KS0KW-GPC-CD; /* gpc code*/
  VPLNMT01.SY1STNBR = KS0KW00.KS0KW-NEXT-STYLE; /* style*/
  VPLNMT01.SY2CLRID = KS0KW00.KS0KW-NEXT-COLOR; /* color*/
  VPLNMT01.XDMCD = KS0KW00.KS0KW-NEXT-DIM; /* dim*/
  VPLNMT01.KS-XPRMT-STY-NBR = KS0KW00.KS0KW-NEXT-X-STYLE;
  VPLNMT01.XNDCD = KS0KW00.KS0KW-NEXT-XNDCD; /* dept*/
  VPLNMT01.XCTCD = KS0KW00.KS0KW-NEXT-XCTCD;
  VPLNMT01.PC3POIDT = KS0KW00.KS0KW-NEXT-PC3POIDT;
  VPLNMT01.FY1FCTYC = KS0KW00.KS0KW-NEXT-FY1FCTYC;
  KS0KW00.KS0KW-RDG-DATE-WORK = KS0KW00.KS0KW-NEXT-PLNMT-DT;
  if (KS0KW00.KS0KW-RDG-YEAR > "90")
    KS0KW00.KS0KW-CENTURY = 19;
  else
    KS0KW00.KS0KW-CENTURY = 20;
  end
  KS0KW00.KS0KW-YEAR = KS0KW00.KS0KW-RDG-YEAR;
  KS0KW00.KS0KW-MONTH = KS0KW00.KS0KW-RDG-MONTH;
  KS0KW00.KS0KW-DAY = KS0KW00.KS0KW-RDG-DAY;
  VPLNMT01.KS-PLANIMETER-DT = KS0KW00.KS0KW-DATE-WORK;

  try
    call "IO6380" ("S ", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "21100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FROM TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end KS0K-21100

// save row 1 data in ws
Function KS0K-21200()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/

  KS0KW02.CACHGFL = "Y"; /* Indicate modifiable data*/

  if (VPLNMT01.XGPCD in XGPTBL.XGPCD /* in table*/
   && XGPTBL.XXXSTAT == "A")         /* and active?*/
    KS0KW02.KS0KW-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    if (VPLNMT01.XGPCD == "EQ")
      KS0KW02.KS0KW-GPC-DESC = "EQUIPMENT ";
    else
      KS0KW02.KS0KW-GPC-DESC = " ";
    end
  end

  set PG2REC empty;

  PG2REC.XGPCD = VPLNMT01.XGPCD;
  PG2REC.SY1STNBR = VPLNMT01.SY1STNBR;
  PG2REC.SY2CLRID = VPLNMT01.SY2CLRID;
  PG2REC.XDMCD = VPLNMT01.XDMCD;

  KS0K-21210(); /* get style name and color desc*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KS0KW02.KS0KW-STY-NM = PG2REC.SY1STYNM;
    KS0KW02.KS0KW-COLR-DESC = PG2REC.SY2CLRDS;
  else
    if (VPLNMT01.KS-XPRMT-STY-NBR > " ")
      set PG4REC empty;
      PG4REC.PG4STNBR = VPLNMT01.KS-XPRMT-STY-NBR;
      KS0K-12200();
      if (SQLCA.VAGen_SQLCODE == 0)
        KS0KW02.KS0KW-STY-NM = PG4REC.SY1STYNM;
        KS0KW02.KS0KW-COLR-DESC = " ";
      else
        KS0KW02.KS0KW-STY-NM = " ";
        KS0KW02.KS0KW-COLR-DESC = " ";
      end
    else
      KS0KW02.KS0KW-STY-NM = " ";
      KS0KW02.KS0KW-COLR-DESC = " ";
    end
  end

  KS0KW02.KS0KW-GPC-CD = VPLNMT01.XGPCD;
  KS0KW02.KS0KW-STY-NBR = VPLNMT01.SY1STNBR;
  KS0KW02.KS0KW-COLR-CD-ID = VPLNMT01.SY2CLRID;
  KS0KW02.KS0KW-DIM-CD = VPLNMT01.XDMCD;
  KS0KW02.KS0KW-X-STYLE = VPLNMT01.KS-XPRMT-STY-NBR;
  KS0KW02.KS0KW-DEPT-ID = VPLNMT01.XNDCD;

  if (VPLNMT01.XNDCD in XNDTBL.XNDCD /* if in table*/
   && XNDTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    KS0KW02.KS0KW-DEPT-DESC = XNDDESC[sysVar.arrayIndex]; /* save descr*/
  end

  KS0KW02.KS0KW-CTRY-CD = VPLNMT01.XCTCD;

  if (KS0KW02.KS0KW-CTRY-CD > " ") /* country code exists*/
    if (KS0KW02.KS0KW-CTRY-CD in XCTTBL.XCTCD) /* code in table*/

      KS0KW02.KS0KW-CTRY-DESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    else

      KS0KW02.KS0KW-CTRY-DESC = " ";
    end
  end

  /* ------------------------------------------------------------*/
  /* the following code is to get the features codes.*/
  /* ------------------------------------------------------------*/

  KS0K-21220();

  /* ------------------------------------------------------------*/
  /* save the po id rng in ws*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-DATE-WORK = VPLNMT01.PC3POIDT;
  if (KS0KW00.KS0KW-MONTH > 0 /* If a valid po id rng exists*/
   || KS0KW00.KS0KW-DAY > 0) 
    KS0KW02.KS0KW-PO-ID-PRD-YR = KS0KW00.KS0KW-YEAR;
    KS0KW02.KS0KW-PO-ID-PRD-MO = KS0KW00.KS0KW-MONTH;
    KS0KW02.KS0KW-PO-ID-DLV-MO = KS0KW00.KS0KW-DAY;
  else
    KS0KW02.KS0KW-PO-ID-PRD-YR = "  ";
    KS0KW02.KS0KW-PO-ID-PRD-MO = "  ";
    KS0KW02.KS0KW-PO-ID-DLV-MO = "  ";
  end

  /* ------------------------------------------------------------*/
  /* save the factory code in ws*/
  /* ------------------------------------------------------------*/

  KS0KW02.KS0KW-FCTY-CD = VPLNMT01.FY1FCTYC;

  /* ------------------------------------------------------------*/
  /* save the planimeter date in ws*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-DATE-WORK = VPLNMT01.KS-PLANIMETER-DT;
  KS0KW00.KS0KW-RDG-YEAR = KS0KW00.KS0KW-YEAR;
  KS0KW00.KS0KW-RDG-MONTH = KS0KW00.KS0KW-MONTH;
  KS0KW00.KS0KW-RDG-DAY = KS0KW00.KS0KW-DAY;
  KS0KW02.KS0KW-READING-DT = KS0KW00.KS0KW-RDG-DATE-WORK;

  /* ------------------------------------------------------------*/
  /* save the material codes in ws*/
  /* ------------------------------------------------------------*/

  KS0KW02.KS0KW-XMCCD[1] = VPLNMT01.XMCCD[1];
  KS0KW02.KS0KW-XMCCD[2] = VPLNMT01.XMCCD[2];
  KS0KW02.KS0KW-XMCCD[3] = VPLNMT01.XMCCD[3];
  KS0KW02.KS0KW-XMCCD[4] = VPLNMT01.XMCCD[4];

  /* ------------------------------------------------------------*/
  /* save the planimeter percents in ws*/
  /* use the first four occurrances for rank 1 row.*/
  /* use the second four occurrances for rank 2 row.*/
  /* ------------------------------------------------------------*/

  KS0KW02.KS0KW-PLNM-PCT-ONE[1] = VPLNMT01.KS-PLANIMETER-PCT[1];
  KS0KW02.KS0KW-PLNM-PCT-ONE[2] = VPLNMT01.KS-PLANIMETER-PCT[2];
  KS0KW02.KS0KW-PLNM-PCT-ONE[3] = VPLNMT01.KS-PLANIMETER-PCT[3];
  KS0KW02.KS0KW-PLNM-PCT-ONE[4] = VPLNMT01.KS-PLANIMETER-PCT[4];

  KS0KW00.KS0KW-SAVE-CHG-CNT-1 = VPLNMT01.ZZZCHGCT; /* save for later*/

end // end KS0K-21200

// get dprodg.vsyclr01 row
Function KS0K-21210()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "21210"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0K-21210

// get feature data
Function KS0K-21220()
  /* ------------------------------------------------------------*/
  /* the following code is to get the features codes.*/
  /* first, select set from vcprod01.*/
  /* second, fetch first row.*/
  /* third, use the problem code in this row to select the*/
  /* vcprob01 set.*/
  /* fourth, fetch the rows and display these problems.*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Reset the feature warning switch since we are reading in a*/
  /* new set of feature codes.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-CSTM-FEAT-WARNING-SW = "N";

  set VCPROD01 empty; /* Clear row storage area*/

  VCPROD01.XGPCD = KS0KW02.KS0KW-GPC-CD; /* GPC*/
  if (KS0KW02.KS0KW-STY-NBR > " ")
    VCPROD01.SY1STNBR = KS0KW02.KS0KW-STY-NBR; /* Style*/
    VCPROD01.KS-XPRMT-STY-NBR = KS0KW02.KS0KW-STY-NBR;
  else
    VCPROD01.SY1STNBR = KS0KW02.KS0KW-X-STYLE; /* Style*/
    VCPROD01.KS-XPRMT-STY-NBR = KS0KW02.KS0KW-X-STYLE;
  end

  VCPROD01.SY2CLRID = KS0KW02.KS0KW-COLR-CD-ID;
  VCPROD01.XDMCD = KS0KW02.KS0KW-DIM-CD;
  VCPROD01.XSNYR = -1; /* Season year range*/
  VCPROD01.XSECD = "*"; /* Season code*/
  VCPROD01.KS-XCT-ORIG-CD = "*"; /* Origin code*/
  VCPROD01.YPR-PROD-STAT-CD = "*"; /* Status code*/
  VCPROD01.KS-RULE-NBR = "*"; /* Ruling number*/
  VCPROD01.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
  VCPROD01.KS-HTS-HDG-CD = "*";
  VCPROD01.KS-HTS-1ST-SHDG-CD = "*";
  VCPROD01.KS-HTS-2ND-SHDG-CD[1] = "*";
  VCPROD01.KS-HTS-2ND-SHDG-CD[2] = "*";
  VCPROD01.KS-HTS-STAT-CD = "*";
  VCPROD01.KS-TEAM-CD = "***";
  VCPROD01.KS-PRBM-NBR = -1;

  KS0K-21230(); /* select vcprod01 rows*/

  KS0KW00.KS0KW-VCPROD01-EOF-SW = "N"; /* set eof sw off*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if set obtained*/
    while (KS0KW00.KS0KW-VCPROD01-EOF-SW == "N") /* until end of set*/
      KS0K-21240(); /* fetch vcprod01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if row obtained and*/
        if (KS0KW02.KS0KW-COLR-CD-ID == VCPROD01.SY2CLRID /* same color*/
         && KS0KW02.KS0KW-DIM-CD == VCPROD01.XDMCD)       /* and dimension*/
          KS0K-21250(); /* get problems for this product*/
          KS0KW00.KS0KW-VCPROD01-EOF-SW = "Y"; /* set eof sw on*/
        end
      end
    end
  end

  KS0K-21260(); /* close vcprod01 cursor*/

end // end KS0K-21220

// select vcprod01 by style
Function KS0K-21230()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6130" ("S1", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "21230"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD01.VCPROD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-21230

// fetch vcprod01 row
Function KS0K-21240()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6130" ("N1", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      KS0KW00.KS0KW-SWC = "Y"; /* Indicate end of cursor*/
      KS0KW00.KS0KW-VCPROD01-EOF-SW = "Y"; /* end of cursor*/

      return; /* Return to previous process*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "21240"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD01.VCPROD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-21240

// obtain feature codes
Function KS0K-21250()
   /* ----------------------------------------------------------------*/
   /* this routine will find the features codes associated with the*/
   /* planimeter row selected.*/
   /* ----------------------------------------------------------------*/

  KS0K-21251(); /* select vcprob01 rows*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if set obtained*/
    KS0KW00.KS0KW-VCPROB01-EOF-SW = "N";
    KS0KW00.KS0KW-CSTM-FEAT-CNT = 1; /* set index for Other Codes*/

    while (KS0KW00.KS0KW-VCPROB01-EOF-SW != "Y") /* Get until end of problems*/
      KS0K-21252(); /* fetch the next row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if set obtained*/

        if (VCPROB01.YKP-PRBM-CD == "FO"
         || VCPROB01.YKP-PRBM-CD == "FS"
         || VCPROB01.YKP-PRBM-CD == "FT")
          KS0K-21253(); /* Process Type code*/
        else
          if (VCPROB01.YKP-PRBM-CD == "F1"
           || VCPROB01.YKP-PRBM-CD == "F2"
           || VCPROB01.YKP-PRBM-CD == "F3"
           || VCPROB01.YKP-PRBM-CD == "F4")
            KS0K-21254(); /* Process Confirmed Features*/
          else
            if (VCPROB01.YKP-PRBM-CD == "F7"
             || VCPROB01.YKP-PRBM-CD == "F8"
             || VCPROB01.YKP-PRBM-CD == "F9")
              KS0K-21255(); /* Process Foxing features*/
            else
              KS0K-21256(); /* Process Other features*/
            end
          end
        end
      else
        KS0KW00.KS0KW-VCPROB01-EOF-SW = "Y";
      end
    end
  end

  KS0K-21257(); /* close vcprob01 cursor*/
end // end KS0K-21250

// select vcprob01 set
Function KS0K-21251()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  set VCPROB01 empty; /* Clear row storage area*/

  VCPROB01.KS-PRBM-NBR = VCPROD01.KS-PRBM-NBR; /* Problem number*/

  try
    call "IO6140" ("S1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "21251"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-21251

// fetch vcprob01 row
Function KS0K-21252()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6140" ("N1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "21252"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-21252

// Process Type Feature Code
Function KS0K-21253()
  /* ---------------------------------------------------------------------*/
  /* Process the Type Code Features*/
  /* ---------------------------------------------------------------------*/

  if (VCPROB01.YKP-PRBM-CD == "FO") /* If Other Footwear*/
    if (KS0KW02.KS0KW-CSTM-TYPE == " " /* If Type not set*/
     || KS0KW02.KS0KW-CSTM-TYPE == "O") /* If Type alredy same*/

      KS0KW02.KS0KW-CSTM-TYPE = "O";

    else
      KS0K-21256(); /* Add to normal feature list*/
    end
  else
    if (VCPROB01.YKP-PRBM-CD == "FS") /* If Sprts/Spike*/
      if (KS0KW02.KS0KW-CSTM-TYPE == " " /* If Type not set*/
       || KS0KW02.KS0KW-CSTM-TYPE == "S") /* If Type alredy same*/

        KS0KW02.KS0KW-CSTM-TYPE = "S";

      else
        KS0K-21256(); /* Add to normal feature list*/
      end
    else
      if (VCPROB01.YKP-PRBM-CD == "FT") /* If Training*/
        if (KS0KW02.KS0KW-CSTM-TYPE == " " /* If Type not set*/
         || KS0KW02.KS0KW-CSTM-TYPE == "T") /* If Type alredy same*/

          KS0KW02.KS0KW-CSTM-TYPE = "T";

        else

          KS0K-21256(); /* Add to normal feature list*/

        end
      end
    end
  end

end // end KS0K-21253

// Process Confirmed Features
Function KS0K-21254()
  /* -------------------------------------------------------------------*/
  /* Process the Confirmed Feature Codes read*/
  /* -------------------------------------------------------------------*/

  if (VCPROB01.YKP-PRBM-CD == "F1") /* If Confirmed*/
    if (KS0KW02.KS0KW-CSTM-CONFIRMED == " " /* Confirmed not set*/
     || KS0KW02.KS0KW-CSTM-CONFIRMED == "**") /* Confirmed already set*/

      KS0KW02.KS0KW-CSTM-CONFIRMED = "**";

    else
      KS0K-21256(); /* Add to normal feature list*/
    end

  else
    if (VCPROB01.YKP-PRBM-CD == "F2") /* If Needs Confirmed*/
      if (KS0KW02.KS0KW-CSTM-CONFIRMED == " " /* Confirmed not set*/
       || KS0KW02.KS0KW-CSTM-CONFIRMED == "--") /* Confirmed already set*/

        KS0KW02.KS0KW-CSTM-CONFIRMED = "--";

      else
        KS0K-21256(); /* Add to normal feature list*/
      end

    else
      if (VCPROB01.YKP-PRBM-CD == "F3") /* If Needs Confirmed*/
        if (KS0KW02.KS0KW-CSTM-CONFIRMED == " " /* Confirmed not set*/
         || KS0KW02.KS0KW-CSTM-CONFIRMED == "$$") /* Confirmed already set*/

          KS0KW02.KS0KW-CSTM-CONFIRMED = "$$";

        else
          KS0K-21256(); /* Add to normal feature list*/
        end

      else
        if (VCPROB01.YKP-PRBM-CD == "F4") /* If Needs Confirmed*/
          if (KS0KW02.KS0KW-CSTM-CONFIRMED == " " /* Confirmed not set*/
           || KS0KW02.KS0KW-CSTM-CONFIRMED == "//")
                                  /* Confirmed already set*/
            KS0KW02.KS0KW-CSTM-CONFIRMED = "//";

          else

            KS0K-21256(); /* Add to normal feature list*/

          end

        end
      end
    end
  end

end // end KS0K-21254

// Process Foxing Codes
Function KS0K-21255()
  /* ---------------------------------------------------------------------*/
  /* Process the Foxing Features*/
  /* ---------------------------------------------------------------------*/

  if (VCPROB01.YKP-PRBM-CD == "F7") /* If Outsol Overlap*/

    KS0KW02.KS0KW-CSTM-FOXING[1] = "Y";

  else
    if (VCPROB01.YKP-PRBM-CD == "F8") /* If Considered Foxing*/

      KS0KW02.KS0KW-CSTM-FOXING[2] = "Y";

    else
      if (VCPROB01.YKP-PRBM-CD == "F9") /* If Requires Statement*/

        KS0KW02.KS0KW-CSTM-FOXING[3] = "Y";

      end
    end
  end

end // end KS0K-21255

// Process Other Feature Codes
Function KS0K-21256()
  /* --------------------------------------------------------------------*/
  /* Process all other feature codes up to a max of 5 to display.*/
  /* --------------------------------------------------------------------*/

  if (KS0KW00.KS0KW-CSTM-FEAT-CNT <= 5)

    KS0KW02.KS0KW-CSTM-FEAT[KS0KW-CSTM-FEAT-CNT] = VCPROB01.YKP-PRBM-CD;
    KS0KW00.KS0KW-CSTM-FEAT-CNT = KS0KW00.KS0KW-CSTM-FEAT-CNT + 1;

  else
    if (KS0KW00.KS0KW-CSTM-FEAT-SW == "Y")

      KS0KW00.KS0KW-CSTM-FEAT-SW = "N";
      converseLib.validationFailed(123);
      KSWREC.XXXPRCNM = "21256";

    end
  end

end // end KS0K-21256

// close vcprob01 cursor
Function KS0K-21257()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6140" ("C1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "21257"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-21257

// close vcprod01 cursor
Function KS0K-21260()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6130" ("C1", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "21260"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-21260

// save row 2 data in ws
Function KS0K-21300()
  /* ------------------------------------------------------------*/
  /* save the planimeter percents in ws*/
  /* use the first four occurrances for rank 1 row.*/
  /* use the second four occurrances for rank 2 row.*/
  /* ------------------------------------------------------------*/

  KS0KW02.KS0KW-PLNM-PCT-TWO[1] = VPLNMT01.KS-PLANIMETER-PCT[1];
  KS0KW02.KS0KW-PLNM-PCT-TWO[2] = VPLNMT01.KS-PLANIMETER-PCT[2];
  KS0KW02.KS0KW-PLNM-PCT-TWO[3] = VPLNMT01.KS-PLANIMETER-PCT[3];
  KS0KW02.KS0KW-PLNM-PCT-TWO[4] = VPLNMT01.KS-PLANIMETER-PCT[4];

  KS0KW00.KS0KW-SAVE-CHG-CNT-2 = VPLNMT01.ZZZCHGCT;

end // end KS0K-21300

// format and converse the map
Function KS0K-22000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* If requested, format data to display.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-SWF == "Y") /* map must be formatted*/
    KS0K-22100(); /* format the data on the map*/
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KS0KM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0KM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0KM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

  if (COMMAREA.CAFROMAP == "KS0I") /* If from KS0I*/
    set KS0KM002.KS0KM-OPT-FIELD invisible, skip;
    set KS0KM002.KS0KM-ITEM-FIELD invisible, skip;
    set KS0KM002.CATOAP invisible, skip;
    set KS0KM002.CAITEM invisible, skip;
    set KS0KM002.KS0KM-GPC-CD skip; /* Protect GPC Code*/
    set KS0KM002.KS0KM-STY-NBR skip; /* Protect Style*/
    set KS0KM002.KS0KM-COLR-CD-ID skip; /* Protect Color*/
    set KS0KM002.KS0KM-DIM-CD skip; /* Protect Dim Code*/
    set KS0KM002.KS0KM-XPRMT-STY-NBR skip; /* Protect Experimental Style*/
    set KS0KM002.KS0KM-PF4-MSTR invisible, skip; /* Protect PF4 key*/
  end

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0KM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0KM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0KM002 alarm; /* Indicate sound alarm*/

  end

  converse KS0KM002 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = KS0KM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0KM002.CAITEM; /* Application data*/

end // end KS0K-22000

// format the display area
Function KS0K-22100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set KS0KM002 initial; /* M002 input/output area*/

  KS0KW00.KS0KW-SWF = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  set KS0KM002.KS0KM-MAP-DESC skip; /* protect map descr*/
  set KS0KM002.KS0KM-GPC-CD skip; /* protect gpc code*/
  set KS0KM002.KS0KM-GPC-DESC skip; /* protect gpc descr*/

  if (KS0KW00.KS0KW-FNC == "A") /* add requested?*/
    KS0KM002.KS0KM-MAP-DESC = "ADD   "; /* title*/
    KS0KM002.KS0KM-GPC-CD = KS0KW01.KS0KW-GPC-CD;
    if (KS0KW01.KS0KW-GPC-CD in XGPTBL.XGPCD)
      KS0KW01.KS0KW-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
    KS0KM002.KS0KM-GPC-DESC = KS0KW01.KS0KW-GPC-DESC;
    set KS0KM002.KS0KM-STY-NBR cursor, initialAttributes; /* allow entry*/

    KS0K-22110(); /* set up features*/

    if (KS0KW00.KS0KW-SAVE-ADD-CNT > 0) /* have we added one before?*/
      KS0KM002.KS0KM-GPC-CD = KS0KW02.KS0KW-GPC-CD;
      KS0KM002.KS0KM-GPC-DESC = KS0KW02.KS0KW-GPC-DESC;
      KS0KM002.KS0KM-STY-NBR = KS0KW02.KS0KW-STY-NBR;
      KS0KM002.KS0KM-STY-NM = KS0KW02.KS0KW-STY-NM;
      KS0KM002.KS0KM-COLR-CD-ID = KS0KW02.KS0KW-COLR-CD-ID;
      KS0KM002.KS0KM-COLR-DESC = KS0KW02.KS0KW-COLR-DESC;
      KS0KM002.KS0KM-DIM-CD = KS0KW02.KS0KW-DIM-CD;
      KS0KM002.KS0KM-XPRMT-STY-NBR = KS0KW02.KS0KW-X-STYLE;
      set KS0KM002.KS0KM-DEPT-ID cursor; /* position cursor*/
    end
    if (KS0KW00.KS0KW-NEXT-SEL-ROW > " " /* was a selection made?*/
     && KS0KW00.KS0KW-SAVE-ADD-CNT == 0) /* and first time thru*/
      KS0KM002.KS0KM-STY-NBR = KS0KW00.KS0KW-NEXT-STYLE;
      KS0KM002.KS0KM-XPRMT-STY-NBR = KS0KW00.KS0KW-NEXT-X-STYLE;
      KS0KM002.KS0KM-COLR-CD-ID = KS0KW00.KS0KW-NEXT-COLOR;
      KS0KM002.KS0KM-DIM-CD = KS0KW00.KS0KW-NEXT-DIM;
      set PG2REC empty;
      PG2REC.XGPCD = KS0KW01.KS0KW-GPC-CD;
      PG2REC.SY1STNBR = KS0KW00.KS0KW-NEXT-STYLE;
      PG2REC.SY2CLRID = KS0KW00.KS0KW-NEXT-COLOR;
      PG2REC.XDMCD = KS0KW00.KS0KW-NEXT-DIM;
      KS0K-12100(); /* get unique on dprodg.vsyclr01*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if successful*/
        KS0KM002.KS0KM-STY-NM = PG2REC.SY1STYNM;
        KS0KM002.KS0KM-COLR-DESC = PG2REC.SY2CLRDS;
      else
        set PG4REC empty;
        PG4REC.PG4STNBR = KS0KW00.KS0KW-NEXT-X-STYLE;
        KS0K-12200();
        if (SQLCA.VAGen_SQLCODE == 0) /* if successful*/
          KS0KM002.KS0KM-STY-NM = PG4REC.SY1STYNM;
        end
      end
      set KS0KM002.KS0KM-DEPT-ID cursor;
    end

    if (COMMAREA.CAFROMAP == "KS0I") /* if from KS0I*/
      set KS0KM002.KS0KM-DEPT-ID cursor; /* position cursor*/
    end

    XX0XS01(); /* get current date*/
    KS0KW00.KS0KW-DATE-WORK-2 = XX0XWDAT;
    KS0KW00.KS0KW-RDG-YEAR = KS0KW00.KS0KW-YEAR-2;
    KS0KW00.KS0KW-RDG-MONTH = KS0KW00.KS0KW-MONTH-2;
    KS0KW00.KS0KW-RDG-DAY = KS0KW00.KS0KW-DAY-2;
    KS0KM002.KS0KM-PLANIMETER-DT = KS0KW00.KS0KW-RDG-DATE-WORK;

    if (KS0KW02.KS0KW-XMCCD[1] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0KM002.KS0KM-MAT-CTNT-SDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      if ("LTR" in XMCTBL.XMCCD
       && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KS0KM002.KS0KM-MAT-CTNT-SDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      end
    end

    if (KS0KW02.KS0KW-XMCCD[2] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0KM002.KS0KM-MAT-CTNT-SDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      if ("R/P" in XMCTBL.XMCCD
       && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KS0KM002.KS0KM-MAT-CTNT-SDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      end
    end

    if (KS0KW02.KS0KW-XMCCD[3] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0KM002.KS0KM-MAT-CTNT-SDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      if ("TEX" in XMCTBL.XMCCD
       && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KS0KM002.KS0KM-MAT-CTNT-SDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      end
    end

    if (KS0KW02.KS0KW-XMCCD[4] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0KM002.KS0KM-MAT-CTNT-SDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      if ("OTH" in XMCTBL.XMCCD
       && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KS0KM002.KS0KM-MAT-CTNT-SDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      end
    end

    if (KS0KW00.KS0KW-SAVE-ADD-CNT > 0) /* if we have added one before ?*/

      converseLib.validationFailed(1); /* update successful*/
    end

    KSWREC.XXXPRCNM = "22100";

  else
    KS0KM002.KS0KM-GPC-CD = KS0KW02.KS0KW-GPC-CD;
    KS0KM002.KS0KM-GPC-DESC = KS0KW02.KS0KW-GPC-DESC;
    KS0KM002.KS0KM-STY-NBR = KS0KW02.KS0KW-STY-NBR;
    KS0KM002.KS0KM-XPRMT-STY-NBR = KS0KW02.KS0KW-X-STYLE;
    KS0KM002.KS0KM-STY-NM = KS0KW02.KS0KW-STY-NM;
    KS0KM002.KS0KM-COLR-CD-ID = KS0KW02.KS0KW-COLR-CD-ID;
    KS0KM002.KS0KM-COLR-DESC = KS0KW02.KS0KW-COLR-DESC;
    KS0KM002.KS0KM-DIM-CD = KS0KW02.KS0KW-DIM-CD;
    KS0KM002.KS0KM-PLANIMETER-DT = KS0KW02.KS0KW-READING-DT;
    KS0KM002.KS0KM-DEPT-ID = KS0KW02.KS0KW-DEPT-ID;
    KS0KM002.KS0KM-DEPT-DESC = KS0KW02.KS0KW-DEPT-DESC;
    KS0KM002.KS0KM-CTRY-CD = KS0KW02.KS0KW-CTRY-CD;
    KS0KM002.KS0KM-CTRY-SDESC = KS0KW02.KS0KW-CTRY-DESC;

   /* ---------------  Y2K OUT BEGIN -----------------*/
   /* IF KS0KW02.KS0KW-PO-ID-PRD-YR EQ '00';*/
     /* MOVE ' ' TO KS0KM002.KS0KM-PRDCTN-YR;*/
   /* ELSE;*/
     /* MOVE KS0KW02.KS0KW-PO-ID-PRD-YR TO KS0KM002.KS0KM-PRDCTN-YR;*/
   /* END;*/
   /* ----------------- Y2K OUT END -----------------*/

   /* ----------------- Y2K IN  begin----------------*/
    if (KS0KW02.KS0KW-PO-ID-PRD-YR < "00"
     || KS0KW02.KS0KW-PO-ID-PRD-YR > "99")
      KS0KM002.KS0KM-PRDCTN-YR = " ";
    else
      KS0KM002.KS0KM-PRDCTN-YR = KS0KW02.KS0KW-PO-ID-PRD-YR;
    end
   /* ----------------- Y2K IN  END -----------------*/

    if (KS0KW02.KS0KW-PO-ID-PRD-MO == "00")
      KS0KM002.KS0KM-PRDCTN-MO = " ";
    else
      KS0KM002.KS0KM-PRDCTN-MO = KS0KW02.KS0KW-PO-ID-PRD-MO;
    end

    if (KS0KW02.KS0KW-PO-ID-DLV-MO == "00")
      KS0KM002.KS0KM-DLVR-MO = " ";
    else
      KS0KM002.KS0KM-DLVR-MO = KS0KW02.KS0KW-PO-ID-DLV-MO;
    end

    KS0KM002.KS0KM-FCTY-CD = KS0KW02.KS0KW-FCTY-CD;

    KS0K-22110();

    if (KS0KW02.KS0KW-XMCCD[1] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0KM002.KS0KM-MAT-CTNT-SDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      if ("LTR" in XMCTBL.XMCCD
       && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KS0KM002.KS0KM-MAT-CTNT-SDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      end
    end

    if (KS0KW02.KS0KW-XMCCD[2] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0KM002.KS0KM-MAT-CTNT-SDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      if ("R/P" in XMCTBL.XMCCD
       && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KS0KM002.KS0KM-MAT-CTNT-SDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      end
    end

    if (KS0KW02.KS0KW-XMCCD[3] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0KM002.KS0KM-MAT-CTNT-SDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      if ("TEX" in XMCTBL.XMCCD
       && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KS0KM002.KS0KM-MAT-CTNT-SDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      end
    end

    if (KS0KW02.KS0KW-XMCCD[4] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0KM002.KS0KM-MAT-CTNT-SDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      if ("OTH" in XMCTBL.XMCCD
       && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KS0KM002.KS0KM-MAT-CTNT-SDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      end
    end
  /* process planimeter percents*/

    KS0KW00.KS0KW-IX5 = 1;
    while (KS0KW00.KS0KW-IX5 <= 4)
      if (KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX5] > 0)
        KS0KW00.KS0KW-PERCENT = KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX5];
        KS0K-22120();
        KS0KM002.KS0KM-PLANIMETER-ONE[KS0KW-IX5] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
      else
        KS0KM002.KS0KM-PLANIMETER-ONE[KS0KW-IX5] = "     ";
      end
      if (KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX5] > 0)
        KS0KW00.KS0KW-PERCENT = KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX5];
        KS0K-22120();
        KS0KM002.KS0KM-PLANIMETER-TWO[KS0KW-IX5] = KS0KW00.KS0KW-SIX-BYTE-FIELD;
      else
        KS0KM002.KS0KM-PLANIMETER-TWO[KS0KW-IX5] = "     ";
      end
      KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1; /* set index up by 1*/
    end

    KS0KM002.KS0KM-MAT-CTNT-CD = " ";

    if (KS0KW02.KS0KW-PLNM-PCT-TWO[1] == 0
     && KS0KW02.KS0KW-PLNM-PCT-TWO[2] == 0
     && KS0KW02.KS0KW-PLNM-PCT-TWO[3] == 0
     && KS0KW02.KS0KW-PLNM-PCT-TWO[4] == 0)
      KS0KM002.KS0KM-PLANIMETER-TWO[1] = " ";
      KS0KM002.KS0KM-PLANIMETER-TWO[2] = " ";
      KS0KM002.KS0KM-PLANIMETER-TWO[3] = " ";
      KS0KM002.KS0KM-PLANIMETER-TWO[4] = " ";
      set KS0KM002.KS0KM-PERCENT-TWO[1] invisible, skip;
      set KS0KM002.KS0KM-PERCENT-TWO[2] invisible, skip;
      set KS0KM002.KS0KM-PERCENT-TWO[3] invisible, skip;
      set KS0KM002.KS0KM-PERCENT-TWO[4] invisible, skip;
    end

    if (KS0KW00.KS0KW-FNC == "C") /* change requested?*/
      KS0KM002.KS0KM-MAP-DESC = "CHANGE"; /* title*/
      set KS0KM002.KS0KM-DEPT-ID cursor; /* cursor position*/
      set KS0KM002.KS0KM-STY-NBR skip;
      set KS0KM002.KS0KM-STY-NM skip;
      set KS0KM002.KS0KM-COLR-CD-ID skip;
      set KS0KM002.KS0KM-COLR-DESC skip;
      set KS0KM002.KS0KM-DIM-CD skip;
      set KS0KM002.KS0KM-XPRMT-STY-NBR skip;

    else
      if (KS0KW00.KS0KW-FNC == "D") /* ; /* delete requested?*/
        KS0KM002.KS0KM-MAP-DESC = "DELETE"; /* title*/
        KSWREC.XXXPRCNM = "22100"; /* Module identification*/
        KSWREC.XXXMSGNO = 121; /* delete message*/
      else
        KS0KM002.KS0KM-MAP-DESC = "INQUIRY"; /* title*/
      end
      if (COMMAREA.CAFROMAP == "KS0I") /* if from KS0I*/
        set KS0KM002.KS0KM-GPC-CD cursor, skip; /* set cursor*/
        set KS0KM002.CATOAP invisible, skip;
      else
        set KS0KM002.CATOAP cursor; /* set cursor*/
        set KS0KM002.KS0KM-GPC-CD skip;
      end
      set KS0KM002.KS0KM-STY-NBR skip;
      set KS0KM002.KS0KM-STY-NM skip;
      set KS0KM002.KS0KM-COLR-CD-ID skip;
      set KS0KM002.KS0KM-COLR-DESC skip;
      set KS0KM002.KS0KM-DIM-CD skip;
      set KS0KM002.KS0KM-XPRMT-STY-NBR skip;
      set KS0KM002.KS0KM-PLANIMETER-DT skip;
      set KS0KM002.KS0KM-DEPT-ID skip;
      set KS0KM002.KS0KM-DEPT-DESC skip;
      set KS0KM002.KS0KM-CTRY-CD skip;
      set KS0KM002.KS0KM-CTRY-SDESC skip;
      set KS0KM002.KS0KM-PRDCTN-YR skip;
      set KS0KM002.KS0KM-PRDCTN-MO skip;
      set KS0KM002.KS0KM-DLVR-MO skip;
      set KS0KM002.KS0KM-FCTY-CD skip;
      set KS0KM002.KS0KM-CSTM-TYPE skip;
      set KS0KM002.KS0KM-CSTM-CONFIRMED skip;
      set KS0KM002.KS0KM-MAT-CTNT-CD skip;
      KS0KW00.KS0KW-IX5 = 1;
      while (KS0KW00.KS0KW-IX5 <= 3)
        set KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX5] skip;
        KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1; /* set index up by 1*/
      end
      KS0KW00.KS0KW-IX5 = 1;
      while (KS0KW00.KS0KW-IX5 <= 5)
        set KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX5] skip;
        KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1; /* set index up by 1*/
      end
      KS0KW00.KS0KW-IX5 = 1;
      while (KS0KW00.KS0KW-IX5 <= 4)
        set KS0KM002.KS0KM-MAT-CTNT-SDESC[KS0KW-IX5] skip;
        set KS0KM002.KS0KM-PLANIMETER-ONE[KS0KW-IX5] skip;
        set KS0KM002.KS0KM-PERCENT-ONE[KS0KW-IX5] skip;
        set KS0KM002.KS0KM-PLANIMETER-TWO[KS0KW-IX5] skip;
        KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1; /* set index up by 1*/
      end
    end
  end

  KS0KM002.XXXCURDT = VGVar.currentShortGregorianDate;

end // end KS0K-22100

// format features for display
Function KS0K-22110()
  /* ---------------------------------------------------------------------*/
  /* Set up Feature codes on map*/
  /* ---------------------------------------------------------------------*/

  KS0KW00.KS0KW-IX5 = 1;

  while (KS0KW00.KS0KW-IX5 <= 5)
                        /* Set up 5 feature codes*/
    KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX5] = KS0KW02.KS0KW-CSTM-FEAT[KS0KW-IX5];
    KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1;
  end

  KS0KW00.KS0KW-IX5 = 1;

  while (KS0KW00.KS0KW-IX5 <= 3)
                         /* Set up 3 Foxing Codes*/
    if (KS0KW02.KS0KW-CSTM-FOXING[KS0KW-IX5] == "Y")
      KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX5] = KS0KW02.KS0KW-CSTM-FOXING[KS0KW-IX5];

    else
      KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX5] = "N";

    end
    KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1;

  end
                        /* Set up Type code*/
  KS0KM002.KS0KM-CSTM-TYPE = KS0KW02.KS0KW-CSTM-TYPE;
                        /* Set up Confirmed Code*/
  KS0KM002.KS0KM-CSTM-CONFIRMED = KS0KW02.KS0KW-CSTM-CONFIRMED;

end // end KS0K-22110

// reformat pcts for display
Function KS0K-22120()
   /* ---------------------------------------------------------------*/
   /* format planimeter percentages for display*/
   /*  */
   /* This routine uses a six byte field as a result field, but*/
   /* the map 2 output field is only 5 bytes. As they are character*/
   /* fields, the last byte will be truncated, as we want when it*/
   /* is moved to the map.*/
   /* ---------------------------------------------------------------*/

  KS0KW00.KS0KW-SIX-BYTE-FIELD = " ";

  if (KS0KW00.KS0KW-PCT-BYTE[1] == "0")
    if (KS0KW00.KS0KW-PCT-BYTE[2] == "0")
      if (KS0KW00.KS0KW-PCT-BYTE[3] == "0")
        if (KS0KW00.KS0KW-PCT-BYTE[4] == "0")
          KS0KW00.KS0KW-BYTE-5 = "0";
        else
          KS0KW00.KS0KW-BYTE-5 = KS0KW00.KS0KW-PCT-BYTE[4];
          KS0KW00.KS0KW-BYTE-4 = ".";
        end
      else
        if (KS0KW00.KS0KW-PCT-BYTE[4] == "0")
          KS0KW00.KS0KW-BYTE-5 = KS0KW00.KS0KW-PCT-BYTE[3];
        else
          KS0KW00.KS0KW-BYTE-5 = KS0KW00.KS0KW-PCT-BYTE[4];
          KS0KW00.KS0KW-BYTE-4 = ".";
          KS0KW00.KS0KW-BYTE-3 = KS0KW00.KS0KW-PCT-BYTE[3];
        end
      end
    else
      if (KS0KW00.KS0KW-PCT-BYTE[4] == "0")
        KS0KW00.KS0KW-BYTE-5 = KS0KW00.KS0KW-PCT-BYTE[3];
        KS0KW00.KS0KW-BYTE-4 = KS0KW00.KS0KW-PCT-BYTE[2];
      else
        KS0KW00.KS0KW-BYTE-5 = KS0KW00.KS0KW-PCT-BYTE[4];
        KS0KW00.KS0KW-BYTE-4 = ".";
        KS0KW00.KS0KW-BYTE-3 = KS0KW00.KS0KW-PCT-BYTE[3];
        KS0KW00.KS0KW-BYTE-2 = KS0KW00.KS0KW-PCT-BYTE[2];
      end
    end
  else
    KS0KW00.KS0KW-SIX-BYTE-FIELD = "  100 ";
  end

end // end KS0K-22120

// check attention identifier
Function KS0K-23000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa1 /* PA1 was pressed or*/
   || converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (KS0KW00.KS0KW-SWR == "Y") /* Request for data*/
      set KS0KW02 empty; /* M002 display storage*/
    end

    KS0KW00.KS0KW-SWF = "Y"; /* Format the map switch*/
    KS0KW00.KS0KW-SWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      KS0K-11100(); /* Purge any temporary storage*/

      XSKS-S0001(); /* Exit to another application*/

      set KS0KM002.CATOAP cursor, bold; /* Highlight*/

      KS0KW00.KS0KW-SWD = "2"; /* Map to be displayed switch*/
      KS0KW00.KS0KW-SWF = "N"; /* do not format the map*/
      KS0KW00.KS0KW-SWF = "N"; /* do not request data*/

    else

      KSWREC.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0DM002";
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      KS0KW00.KS0KW-SWD = "1"; /* Map to be displayed switch*/
      KS0KW00.KS0KW-SWF = "Y"; /* Format the map switch*/
      KS0KW00.KS0KW-SWR = "Y"; /* request for data switch*/
      /* set last changed key for changes and inquiries*/
      /* adds should already be set*/
      if (KS0KW00.KS0KW-FNC == "C" /* if change transaction*/
       || KS0KW00.KS0KW-FNC == "I" /* or inquiry transaction*/
       || KS0KW00.KS0KW-FNC == "D") /* or delete transaction*/
        KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-NEXT-SEL-ROW;
      else
        if (KS0KW00.KS0KW-FNC == "A" /* if add transaction*/
         && KS0KM001.KS0KM-STY-NBR == " ") /* No style on map*/
          if (KS0KW00.KS0KW-LAST-CHGD-ROW > " ") /* Nothing changed*/
             /* next Sentence*/
          else
            KS0KW00.KS0KW-SWR = "N"; /* request for data switch*/
          end
        end
      end

      KS0KW00.KS0KW-IXM = 1; /* clear selected stats*/
      while (KS0KW-IXM <= 11)
        KS0KW00.KS0KW-SELECTED-ROWS = " ";
        KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1;
      end

      exit stack; /* Exit to display map*/

    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      if (COMMAREA.CAFROMAP != "KS0I") /* If not from KS0I*/
        COMMAREA.CATOAP = "MN0M";
      else
        KSWREC.XXXPRCNM = "23000";
        converseLib.validationFailed(4);
        exit stack;
      end
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "KS0A";
    end

    KS0K-11100(); /* Purge any temporary storage*/

    XSKS-S0001(); /* Exit to another application*/

    KS0KW00.KS0KW-SWD = "1"; /* Map to be displayed switch*/
    KS0KW00.KS0KW-SWF = "Y"; /* Format the map switch*/
    KS0KW00.KS0KW-SWR = "Y"; /* request for data switch*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "23000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end

end // end KS0K-23000

// reset highlighted fields
Function KS0K-24000()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0KM002.KS0KM-GPC-CD initialAttributes;
  set KS0KM002.KS0KM-GPC-DESC initialAttributes;
  set KS0KM002.KS0KM-STY-NBR initialAttributes;
  set KS0KM002.KS0KM-STY-NM initialAttributes;
  set KS0KM002.KS0KM-COLR-CD-ID initialAttributes;
  set KS0KM002.KS0KM-COLR-DESC initialAttributes;
  set KS0KM002.KS0KM-DIM-CD initialAttributes;
  set KS0KM002.KS0KM-XPRMT-STY-NBR initialAttributes;
  set KS0KM002.KS0KM-PLANIMETER-DT initialAttributes;
  set KS0KM002.KS0KM-DEPT-ID initialAttributes;
  set KS0KM002.KS0KM-DEPT-DESC initialAttributes;
  set KS0KM002.KS0KM-CTRY-CD initialAttributes;
  set KS0KM002.KS0KM-CTRY-SDESC initialAttributes;
  set KS0KM002.KS0KM-PRDCTN-YR initialAttributes;
  set KS0KM002.KS0KM-PRDCTN-MO initialAttributes;
  set KS0KM002.KS0KM-DLVR-MO initialAttributes;
  set KS0KM002.KS0KM-FCTY-CD initialAttributes;
  set KS0KM002.KS0KM-CSTM-TYPE initialAttributes;
  set KS0KM002.KS0KM-CSTM-CONFIRMED initialAttributes;
  set KS0KM002.KS0KM-PF4-MSTR initialAttributes;

  KS0KW00.KS0KW-IX5 = 1;
  while (KS0KW00.KS0KW-IX5 <= 3)
    set KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX5] initialAttributes;
    KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1;
  end

  KS0KW00.KS0KW-IX5 = 1;
  while (KS0KW00.KS0KW-IX5 <= 5)
    set KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX5] initialAttributes;
    KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1;
  end

  KS0KW00.KS0KW-IX5 = 1;
  while (KS0KW00.KS0KW-IX5 <= 4)
    set KS0KM002.KS0KM-MAT-CTNT-SDESC[KS0KW-IX5] initialAttributes;
    set KS0KM002.KS0KM-PLANIMETER-ONE[KS0KW-IX5] initialAttributes;
    set KS0KM002.KS0KM-PERCENT-ONE[KS0KW-IX5] initialAttributes;
    set KS0KM002.KS0KM-PLANIMETER-TWO[KS0KW-IX5] initialAttributes;
    set KS0KM002.KS0KM-PERCENT-TWO[KS0KW-IX5] initialAttributes;
    KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1;
  end
  set KS0KM002.KS0KM-MAT-CTNT-CD initialAttributes;

  set KS0KM002.CATOAP initialAttributes; /* commarea to application*/
  set KS0KM002.CAITEM initialAttributes; /* commarea application data*/

   /* check pop-up fields for '?'*/

  if (KS0KM002.KS0KM-DIM-CD == "?" /* any pop-ups wanted?*/
   || KS0KM002.KS0KM-DEPT-ID == "?"
   || KS0KM002.KS0KM-CSTM-FEAT[1] == "?"
   || KS0KM002.KS0KM-CSTM-FEAT[2] == "?"
   || KS0KM002.KS0KM-CSTM-FEAT[3] == "?"
   || KS0KM002.KS0KM-CSTM-FEAT[4] == "?"
   || KS0KM002.KS0KM-CSTM-FEAT[5] == "?"
   || KS0KM002.KS0KM-CTRY-CD == "?"
   || KS0KM002.KS0KM-MAT-CTNT-CD == "?")

    if (KS0KM002.KS0KM-DIM-CD == "?") /* dimension wanted?*/

      XPXX001(); /* window initialization*/
      XX0XW02.XX0XWHDR = "DIMENSION CODE"; /* Heading*/

      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXDM01(); /* Display the list*/
      end

      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
        KS0KM002.KS0KM-DIM-CD = " "; /* Restore prior code*/
      else
        KS0KM002.KS0KM-DIM-CD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      end
      set KS0KM002.KS0KM-DIM-CD cursor; /* Establish cursor position*/
    end

    if (KS0KM002.KS0KM-DEPT-ID == "?") /* if ? in Nike department field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                NIKE DEPT"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXND01(); /* perform Nike department window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the department **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0KM002.KS0KM-DEPT-ID = XNDTBL.XNDCD[XX0XWPIX];
        KS0KM002.KS0KM-DEPT-DESC = XNDTBL.XNDDESC[XX0XWPIX];
      else
        KS0KM002.KS0KM-DEPT-ID = " "; /* clear fields*/
        KS0KM002.KS0KM-DEPT-DESC = " ";
      end
    end

    if (KS0KM002.KS0KM-CSTM-FEAT[1] == "?") /* if ? in features 1*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        CUSTOMS FEATURE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0KM002.KS0KM-CSTM-FEAT[1] = YKPTBL.YKP-PRBM-CD[XX0XWPIX]; /* move code*/
      else
        KS0KM002.KS0KM-CSTM-FEAT[1] = " "; /* clear fields*/
      end
      set KS0KM002.KS0KM-CSTM-FEAT[1] cursor; /* Set cursor*/
    end

    if (KS0KM002.KS0KM-CSTM-FEAT[2] == "?") /* if ? in features 1*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        CUSTOMS FEATURE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0KM002.KS0KM-CSTM-FEAT[2] = YKPTBL.YKP-PRBM-CD[XX0XWPIX]; /* move code*/
      else
        KS0KM002.KS0KM-CSTM-FEAT[2] = " "; /* clear fields*/
      end
      set KS0KM002.KS0KM-CSTM-FEAT[2] cursor; /* Set cursor*/
    end

    if (KS0KM002.KS0KM-CSTM-FEAT[3] == "?") /* if ? in features 1*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        CUSTOMS FEATURE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0KM002.KS0KM-CSTM-FEAT[3] = YKPTBL.YKP-PRBM-CD[XX0XWPIX]; /* move code*/
      else
        KS0KM002.KS0KM-CSTM-FEAT[3] = " "; /* clear fields*/
      end
      set KS0KM002.KS0KM-CSTM-FEAT[3] cursor; /* Set cursor*/
    end

    if (KS0KM002.KS0KM-CSTM-FEAT[4] == "?") /* if ? in features 1*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        CUSTOMS FEATURE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0KM002.KS0KM-CSTM-FEAT[4] = YKPTBL.YKP-PRBM-CD[XX0XWPIX]; /* move code*/
      else
        KS0KM002.KS0KM-CSTM-FEAT[4] = " "; /* clear fields*/
      end
      set KS0KM002.KS0KM-CSTM-FEAT[4] cursor; /* Set cursor*/
    end

    if (KS0KM002.KS0KM-CSTM-FEAT[5] == "?") /* if ? in features 1*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        CUSTOMS FEATURE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0KM002.KS0KM-CSTM-FEAT[5] = YKPTBL.YKP-PRBM-CD[XX0XWPIX]; /* move code*/
      else
        KS0KM002.KS0KM-CSTM-FEAT[5] = " "; /* clear fields*/
      end
      set KS0KM002.KS0KM-CSTM-FEAT[5] cursor; /* Set cursor*/
    end

    if (KS0KM002.KS0KM-CTRY-CD == "?") /* if ? in ctry-cd*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "     LIAISON COUNTRY CODE   "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0KM002.KS0KM-CTRY-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        KS0KM002.KS0KM-CTRY-SDESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move desc*/
      else
        KS0KM002.KS0KM-CTRY-CD = " "; /* clear fields*/
        KS0KM002.KS0KM-CTRY-SDESC = " ";
      end
      set KS0KM002.KS0KM-CTRY-CD cursor; /* Set cursor*/
    end

    if (KS0KM002.KS0KM-MAT-CTNT-CD == "?") /* if ? in mat ctnt fld*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "         MATERIAL CONTENT"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXMC01(); /* perform mat ctnt window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the department **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user sks0km-d a code*/
        KS0KM002.KS0KM-MAT-CTNT-CD = XMCTBL.XMCCD[XX0XWPIX];
        KS0KM002.KS0KM-MAT-CTNT-SDESC[4] = XMCTBL.XMCSDESC[XX0XWPIX];
      else
        KS0KM002.KS0KM-MAT-CTNT-CD = " "; /* clear fields*/
      end
    end

    KS0KW00.KS0KW-SWR = "N"; /* Reset request for data switch*/
    KS0KW00.KS0KW-SWF = "N"; /* Reset format the map switch*/

    converseLib.clearScreen();
     /* Restore the original map*/

    exit stack; /* Exit to display map*/
  end

end // end KS0K-24000

// verify data that was entered
Function KS0K-25000()
  /* ------------------------------------------------------------*/
  /* Bypass this module if in INQUIRY mode. - or delete mode.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-FNC == "I" /* if Inquiry mode*/
   || KS0KW00.KS0KW-FNC == "D") /* if delete mode*/
    return;
  end

  /* ------------------------------------------------------------*/
  /* Default DIM-CD if in add mode and not entered.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-FNC == "A") /* if Add mode*/
    if (KS0KM002.KS0KM-DIM-CD == "  ")
      KS0KM002.KS0KM-DIM-CD = "00";
    end
  end

  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
    set KS0KM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  /* ------------------------------------------------------------*/
  /* if no warnings have been issued (ie. have we been thru here*/
  /* before?), then set the data changed switch to 'n'.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-WARNINGS-ISSUED-SW == "N") /* if no warnings issued*/
    KS0KW00.KS0KW-DATA-CHGD-SW = "N"; /* initialize switch*/
  end

  KS0K-25100(); /* verify the gpc/style or gpc/x-style*/

  /* ------------------------------------------------------------*/
  /* If any errors exist, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  /* ------------------------------------------------------------*/
  /* Verify the customs feature codes*/
  /* ------------------------------------------------------------*/

  KS0K-25200(); /* verify the customs features*/

  /* ------------------------------------------------------------*/
  /* If any errors exist, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  /* ------------------------------------------------------------*/
  /* Verify other data*/
  /* ------------------------------------------------------------*/

  KS0K-25300(); /* verify the planimeter percentages*/

  KS0K-25400(); /* verify the optional material entered*/

  KS0K-25500(); /* verify the reading date*/

  KS0K-25600(); /* verify the dept, ctry, po id & fcty*/

  /* ------------------------------------------------------------*/
  /* If any errors exist, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  /* -------------------------------------------------------------*/
  /* Verify the product/POID combination is valid if entered.*/
  /* -------------------------------------------------------------*/

  if (KS0KM002.KS0KM-PRDCTN-YR > " " /* Production Year entered*/
   && KS0KM002.KS0KM-PRDCTN-MO > " " /* Production Month entered*/
   && KS0KM002.KS0KM-DLVR-MO > " "   /* and Deliver Month entered*/
   && KS0KM002.KS0KM-FCTY-CD > " ")  /* and Factory entered*/
    KS0K-25700(); /* Verify Product/POID combination*/
  end

  /* -------------------------------------------------------------*/
  /* if the rank 1 pcts are blank, move the rank two pcts to them.*/
  /* then clear the rank two pcts. Keep screen fields in sync with*/
  /* w02 fields.*/
  /* -------------------------------------------------------------*/

  if (KS0KM002.KS0KM-PLANIMETER-ONE[1] == " "
   && KS0KM002.KS0KM-PLANIMETER-ONE[2] == " "
   && KS0KM002.KS0KM-PLANIMETER-ONE[3] == " "
   && KS0KM002.KS0KM-PLANIMETER-ONE[4] == " ")
    KS0KM002.KS0KM-PLANIMETER-ONE[1] = KS0KM002.KS0KM-PLANIMETER-TWO[1];
    KS0KM002.KS0KM-PLANIMETER-ONE[2] = KS0KM002.KS0KM-PLANIMETER-TWO[2];
    KS0KM002.KS0KM-PLANIMETER-ONE[3] = KS0KM002.KS0KM-PLANIMETER-TWO[3];
    KS0KM002.KS0KM-PLANIMETER-ONE[4] = KS0KM002.KS0KM-PLANIMETER-TWO[4];
    KS0KW02.KS0KW-PLNM-PCT-ONE[1] = KS0KW02.KS0KW-PLNM-PCT-TWO[1];
    KS0KW02.KS0KW-PLNM-PCT-ONE[2] = KS0KW02.KS0KW-PLNM-PCT-TWO[2];
    KS0KW02.KS0KW-PLNM-PCT-ONE[3] = KS0KW02.KS0KW-PLNM-PCT-TWO[3];
    KS0KW02.KS0KW-PLNM-PCT-ONE[4] = KS0KW02.KS0KW-PLNM-PCT-TWO[4];
    KS0KW02.KS0KW-PLNM-PCT-TWO[1] = 0;
    KS0KM002.KS0KM-PLANIMETER-TWO[1] = " ";
    KS0KW02.KS0KW-PLNM-PCT-TWO[2] = 0;
    KS0KM002.KS0KM-PLANIMETER-TWO[2] = " ";
    KS0KW02.KS0KW-PLNM-PCT-TWO[3] = 0;
    KS0KM002.KS0KM-PLANIMETER-TWO[3] = " ";
    KS0KW02.KS0KW-PLNM-PCT-TWO[4] = 0;
    KS0KM002.KS0KM-PLANIMETER-TWO[4] = " ";
    KS0KW00.KS0KW-DATA-CHGD-SW = "Y"; /* indicate data changed*/
  end

  KS0K-25800(); /* check percentages = 100%*/

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

  KS0K-25900(); /* warnings for percentages*/

  /* ------------------------------------------------------------*/
  /* If any warnings were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    KS0KW00.KS0KW-WARNINGS-ISSUED-SW = "Y"; /* warnings being issued*/
    exit stack; /* Exit to display map*/
  else
    KS0KW00.KS0KW-WARNINGS-ISSUED-SW = "N"; /* reset warnings sw*/
  end
end // end KS0K-25000


// verify gpc/style/x-style
Function KS0K-25100()
  /* ----------------------------------------------------------------*/
  /* Verify that GPC/STYLE or X-STYLE exists on DCUSTM.VCPROD01*/
  /* ----------------------------------------------------------------*/

  KS0K-25110(); /* select set*/

  KS0KW00.KS0KW-VCPROD01-EOF-SW = "N"; /* turn off eof-sw*/
  KS0KW00.KS0KW-INVALID-DATA-SW = "Y"; /* turn on invalid data sw*/

  while (KS0KW00.KS0KW-VCPROD01-EOF-SW == "N") /* until end of set*/

    KS0K-25120(); /* fetch cursor*/

    if (KS0KW00.KS0KW-VCPROD01-EOF-SW == "N")
      if (VCPROD01.SY1STNBR == KS0KM002.KS0KM-STY-NBR /* if same product*/
       && VCPROD01.KS-XPRMT-STY-NBR == KS0KM002.KS0KM-XPRMT-STY-NBR
       && VCPROD01.SY2CLRID == KS0KM002.KS0KM-COLR-CD-ID
       && VCPROD01.XDMCD == KS0KM002.KS0KM-DIM-CD)   
        if (VCPROD01.SY1STNBR > " ")
          set PG2REC empty;
          PG2REC.XGPCD = VCPROD01.XGPCD;
          PG2REC.SY1STNBR = VCPROD01.SY1STNBR;
          PG2REC.SY2CLRID = VCPROD01.SY2CLRID;
          PG2REC.XDMCD = VCPROD01.XDMCD;
          KS0K-12100(); /* read for descriptions*/
          KS0KM002.KS0KM-STY-NM = PG2REC.SY1STYNM;
          KS0KM002.KS0KM-COLR-DESC = PG2REC.SY2CLRDS;
        end
        KS0KM002.KS0KM-XPRMT-STY-NBR = VCPROD01.KS-XPRMT-STY-NBR;
        KS0KW00.KS0KW-INVALID-DATA-SW = "N";
        KS0KW00.KS0KW-VCPROD01-EOF-SW = "Y"; /* turn on eof-sw*/
      end
    end
  end

  if (KS0KW00.KS0KW-INVALID-DATA-SW == "Y") /* if correct row not found*/
    if (KS0KM002.KS0KM-XPRMT-STY-NBR > " ") /* if not found*/
      set KS0KM002.KS0KM-XPRMT-STY-NBR cursor, bold;
    else
      set KS0KM002.KS0KM-STY-NBR cursor, bold;
      KS0KM002.KS0KM-STY-NM = " ";
      set KS0KM002.KS0KM-COLR-CD-ID bold;
      KS0KM002.KS0KM-COLR-DESC = " ";
      set KS0KM002.KS0KM-DIM-CD bold;
    end
    converseLib.validationFailed(90);
    KSWREC.XXXPRCNM = "25100";
  end

  KS0K-25130(); /* close cursor*/

end // end KS0K-25100

// sel set from DCUSTM.VCPROD01
Function KS0K-25110()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  set VCPROD01 empty; /* Clear row storage area*/

  VCPROD01.XGPCD = KS0KM002.KS0KM-GPC-CD; /* GPC*/
  VCPROD01.SY1STNBR = KS0KM002.KS0KM-STY-NBR; /* Style*/
  VCPROD01.KS-XPRMT-STY-NBR = KS0KM002.KS0KM-XPRMT-STY-NBR;
  VCPROD01.SY2CLRID = KS0KM002.KS0KM-COLR-CD-ID;
  VCPROD01.XDMCD = KS0KM002.KS0KM-DIM-CD;

  VCPROD01.XSNYR = -1; /* Season year range*/
  VCPROD01.XSECD = "*"; /* Season code*/
  VCPROD01.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
  VCPROD01.YPR-PROD-STAT-CD = "*"; /* Status code*/
  VCPROD01.KS-RULE-NBR = "*"; /* Ruling number*/
  VCPROD01.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
  VCPROD01.KS-HTS-HDG-CD = "*";
  VCPROD01.KS-HTS-1ST-SHDG-CD = "*";
  VCPROD01.KS-HTS-2ND-SHDG-CD[1] = "*";
  VCPROD01.KS-HTS-2ND-SHDG-CD[2] = "*";
  VCPROD01.KS-HTS-STAT-CD = "*";
  VCPROD01.KS-TEAM-CD = "*";
  VCPROD01.KS-PRBM-NBR = -1;

  try
    call "IO6130" ("S1", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD01.VCPROD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25110

// fetch row from DCUSTM.VCPROD01
Function KS0K-25120()
  /* ------------------------------------------------------------*/
  /* fetch row from DCUSTM.VCPROD01*/
  /* ------------------------------------------------------------*/

  set VCPROD01 empty;

  try
    call "IO6130" ("N1", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
        KS0KW00.KS0KW-VCPROD01-EOF-SW = "Y";
        return; /* Return to previous process*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25120

// close DPRODC.VCPROD01 cursor
Function KS0K-25130()
  /* ------------------------------------------------------------*/
  /* close the cursor for DPRODC.VCPROD01*/
  /* ------------------------------------------------------------*/

  set VCPROD01 empty;

  try
    call "IO6130" ("C1", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25130

// customs features warnings
Function KS0K-25200()
  /* -------------------------------------------------------------*/
  /* Verify that the type code is valid.*/
  /* -------------------------------------------------------------*/

  if (KS0KW00.KS0KW-CSTM-FEAT-WARNING-SW == "N")
    KS0KW00.KS0KW-FEAT-CHGD-FLAG = "N"; /* features changed*/
  end

  if (KS0KM002.KS0KM-CSTM-TYPE != KS0KW02.KS0KW-CSTM-TYPE)
    if (KS0KM002.KS0KM-CSTM-TYPE == "O"
     || KS0KM002.KS0KM-CSTM-TYPE == "S"
     || KS0KM002.KS0KM-CSTM-TYPE == "T"
     || KS0KM002.KS0KM-CSTM-TYPE == " ")

      KS0KW00.KS0KW-FEAT-CHGD-FLAG = "Y"; /* features changed*/

    else
      set KS0KM002.KS0KM-CSTM-TYPE cursor, bold;
      converseLib.validationFailed(127);
      KSWREC.XXXPRCNM = "25200";
      exit stack; /* redisplay map*/

    end
  end

  /* -------------------------------------------------------------*/
  /* Verify that the confirmed code is valid.*/
  /* -------------------------------------------------------------*/

  if (KS0KM002.KS0KM-CSTM-CONFIRMED != KS0KW02.KS0KW-CSTM-CONFIRMED)
    if (KS0KM002.KS0KM-CSTM-CONFIRMED == "**"
     || KS0KM002.KS0KM-CSTM-CONFIRMED == "--"
     || KS0KM002.KS0KM-CSTM-CONFIRMED == "$$"
     || KS0KM002.KS0KM-CSTM-CONFIRMED == "//"
     || KS0KM002.KS0KM-CSTM-CONFIRMED == "  ")

      KS0KW00.KS0KW-FEAT-CHGD-FLAG = "Y"; /* features changed*/

    else
      set KS0KM002.KS0KM-CSTM-CONFIRMED cursor, bold;
      converseLib.validationFailed(127);
      KSWREC.XXXPRCNM = "25200";
      exit stack; /* redisplay map*/

    end
  end

  /* -------------------------------------------------------------*/
  /* Verify that the foxing codes are correct.*/
  /* -------------------------------------------------------------*/

  KS0KW00.KS0KW-IX3 = 1; /* initialize index*/

  while (KS0KW00.KS0KW-IX3 <= 3) /* for all 3 features*/
    if (KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX3] == " ")
      KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX3] = "N";
    end

    if (KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX3] != 
    KS0KW02.KS0KW-CSTM-FOXING[KS0KW-IX3])

      if (KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX3] == "Y"
       || KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX3] == "N")

        KS0KW00.KS0KW-FEAT-CHGD-FLAG = "Y"; /* features changed*/

      else
        set KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IX3] cursor, bold;
        converseLib.validationFailed(66);
        KSWREC.XXXPRCNM = "25200";
        exit stack; /* redisplay map*/

      end
    end
    KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 + 1; /* set index up by 1*/

  end

  /* --------------------------------------------------------------*/
  /* Loop to check for mutually exclusive features entered*/
  /* --------------------------------------------------------------*/

  KS0K-25210(); /* Check for mutually exclusive codes*/

  /* -------------------------------------------------------------*/
  /* Verify that the other features exist in ykptbl.*/
  /* ******  This will only warn the user one time *******/
  /* ******  and then will update with the bad code ******/
  /* -------------------------------------------------------------*/

  KS0KW00.KS0KW-IX3 = 1; /* initialize index*/

  while (KS0KW00.KS0KW-IX3 <= 5) /* for all 5 features*/

    if (KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] != 
    KS0KW02.KS0KW-CSTM-FEAT[KS0KW-IX3])

      KS0KW00.KS0KW-FEAT-CHGD-FLAG = "Y"; /* features changed*/

    end

    if (KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] > " ") /* something entered?*/
      if (KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] in YKPTBL.YKP-PRBM-CD
       && YKPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* Next sentence*/
      else
        set KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] cursor, bold;
        if (KS0KW00.KS0KW-CSTM-FEAT-WARNING-SW == "N")
          KS0KW00.KS0KW-CSTM-FEAT-WARNING-SW = "Y";
          converseLib.validationFailed(68);
          KSWREC.XXXPRCNM = "25200";
        end

      end

    end
    KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 + 1; /* set index up by 1*/

  end

  if (converseVar.validationMsgNum != 0) /* if error found*/
    exit stack; /* redisplay map*/
  end

  /* -------------------------------------------------------------*/
  /* If we changed key and not features, get features for this key*/
  /* -------------------------------------------------------------*/
  if (KS0KW00.KS0KW-FEAT-CHGD-FLAG == "N") /* Features not changed*/
    if (KS0KW02.KS0KW-GPC-CD != KS0KM002.KS0KM-GPC-CD
     || KS0KW02.KS0KW-STY-NBR != KS0KM002.KS0KM-STY-NBR
     || KS0KW02.KS0KW-COLR-CD-ID != KS0KM002.KS0KM-COLR-CD-ID
     || KS0KW02.KS0KW-DIM-CD != KS0KM002.KS0KM-DIM-CD)
      KS0KW02.KS0KW-GPC-CD = KS0KM002.KS0KM-GPC-CD;
      KS0KW02.KS0KW-STY-NBR = KS0KM002.KS0KM-STY-NBR;
      KS0KW02.KS0KW-COLR-CD-ID = KS0KM002.KS0KM-COLR-CD-ID;
      KS0KW02.KS0KW-DIM-CD = KS0KM002.KS0KM-DIM-CD;
      KS0KW02.KS0KW-CSTM-FEATURES = " ";
      KS0KW02.KS0KW-CSTM-FOXING[1] = "N";
      KS0KW02.KS0KW-CSTM-FOXING[2] = "N";
      KS0KW02.KS0KW-CSTM-FOXING[3] = "N";
      KS0KW00.KS0KW-CSTM-FEAT-SW = "Y";
      KS0K-21220(); /* Get feature codes*/
      KS0K-22110(); /* Set up on map*/
    end
  end
end // end KS0K-25200

// Check mutually exclusive feats
Function KS0K-25210()
  /* -------------------------------------------------------------*/
  /* Check for mutually exclusive features*/
  /* -------------------------------------------------------------*/
  /* -------------------------------------------------------------*/
  /* check for duplicate type codes.*/
  /* -------------------------------------------------------------*/

  KS0KW00.KS0KW-IX3 = 5; /* initialize index*/
  while (KS0KW00.KS0KW-IX3 > 0) /* for all 5 features*/

    if (KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] == "FO" /* FO entered*/
     || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] == "FS" /* FS entered*/
     || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] == "FT") /* FT entered*/
      if (KS0KM002.KS0KM-CSTM-TYPE == "O" /* Type O code entered*/
       || KS0KM002.KS0KM-CSTM-TYPE == "S" /* Type S code entered*/
       || KS0KM002.KS0KM-CSTM-TYPE == "T") /* Type T code entered*/

        set KS0KM002.KS0KM-CSTM-TYPE cursor, bold;
        set KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] bold;
        converseLib.validationFailed(126);
        KSWREC.XXXPRCNM = "25210";

      else
        KS0KW00.KS0KW-IX2 = KS0KW00.KS0KW-IX3; /* initialize index*/
        while (KS0KW00.KS0KW-IX2 > 0) /* for all 5 features*/

          if (KS0KW00.KS0KW-IX2 != KS0KW00.KS0KW-IX3)
            if (KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX2] == "FO" /* FO entered*/
             || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX2] == "FS" /* FS entered*/
             || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX2] == "FT") /* FT entered*/

              set KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX2] cursor, bold;
              set KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] bold;
              converseLib.validationFailed(126);
              KSWREC.XXXPRCNM = "25210";

            end
          end

          KS0KW00.KS0KW-IX2 = KS0KW00.KS0KW-IX2 - 1; /* decrement by 1*/
        end
      end
    end

    KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* decrement by 1*/
  end

  if (converseVar.validationMsgNum != 0) /* if error found*/
    exit stack; /* redisplay map*/
  end

  /* -------------------------------------------------------------*/
  /* Check for duplicate CF5523 codes.*/
  /* -------------------------------------------------------------*/

  KS0KW00.KS0KW-IX3 = 5; /* initialize index*/
  while (KS0KW00.KS0KW-IX3 > 0) /* for all 5 features*/

    if (KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] == "F1" /* F1 entered*/
     || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] == "F2" /* F2 entered*/
     || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] == "F3" /* F3 entered*/
     || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] == "F4") /* F4 entered*/
      if (KS0KM002.KS0KM-CSTM-CONFIRMED == "**" /* Type ** code entered*/
       || KS0KM002.KS0KM-CSTM-CONFIRMED == "--" /* Type -- code entered*/
       || KS0KM002.KS0KM-CSTM-CONFIRMED == "$$" /* Type $$ code entered*/
       || KS0KM002.KS0KM-CSTM-CONFIRMED == "//") /* Type // code entered*/

        set KS0KM002.KS0KM-CSTM-CONFIRMED cursor, bold;
        set KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] bold;
        converseLib.validationFailed(126);
        KSWREC.XXXPRCNM = "25210";

      else
        KS0KW00.KS0KW-IX2 = KS0KW00.KS0KW-IX3; /* initialize index*/
        while (KS0KW00.KS0KW-IX2 > 0) /* for all 5 features*/

          if (KS0KW00.KS0KW-IX2 != KS0KW00.KS0KW-IX3)
            if (KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX2] == "F1" /* F1 entered*/
             || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX2] == "F2" /* F2 entered*/
             || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX2] == "F3" /* F3 entered*/
             || KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX2] == "F4") /* F4 entered*/

              set KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX2] cursor, bold;
              set KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IX3] bold;
              converseLib.validationFailed(126);
              KSWREC.XXXPRCNM = "25210";

            end
          end

          KS0KW00.KS0KW-IX2 = KS0KW00.KS0KW-IX2 - 1; /* decrement by 1*/
        end
      end
    end

    KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* decrement by 1*/
  end

  if (converseVar.validationMsgNum != 0) /* if error found*/
    exit stack; /* redisplay map*/
  end

end // end KS0K-25210

// verify planimeter percentages
Function KS0K-25300()
  /* ------------------------------------------------------------*/
  /* Verify that there is at least one percentage entered.*/
  /* All the different combinations of percentage entered.*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-PLANIMETER-TWO[1] == " "
   && KS0KM002.KS0KM-PLANIMETER-TWO[2] == " "
   && KS0KM002.KS0KM-PLANIMETER-TWO[3] == " "
   && KS0KM002.KS0KM-PLANIMETER-TWO[4] == " "
   && KS0KM002.KS0KM-PLANIMETER-ONE[1] == " "
   && KS0KM002.KS0KM-PLANIMETER-ONE[2] == " "
   && KS0KM002.KS0KM-PLANIMETER-ONE[3] == " "
   && KS0KM002.KS0KM-PLANIMETER-ONE[4] == " ")
    converseLib.validationFailed(101); /* set error nbr*/
    set KS0KM002.KS0KM-PLANIMETER-ONE[1] cursor, bold;
    set KS0KM002.KS0KM-PLANIMETER-ONE[2] bold;
    set KS0KM002.KS0KM-PLANIMETER-ONE[3] bold;
    set KS0KM002.KS0KM-PLANIMETER-ONE[4] bold;
    set KS0KM002.KS0KM-PLANIMETER-TWO[1] bold;
    set KS0KM002.KS0KM-PLANIMETER-TWO[2] bold;
    set KS0KM002.KS0KM-PLANIMETER-TWO[3] bold;
    set KS0KM002.KS0KM-PLANIMETER-TWO[4] bold;
  end

  /* ------------------------------------------------------------*/
  /* Verify the planimeter percentages entered.*/
  /* Verify that decimals are entered with no more than 1 decimal*/
  /* point. At least one reading must be entered.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-IX3 = 4; /* set index*/

  while (KS0KW00.KS0KW-IX3 >= 1) /* for each four percentages*/
    KS0KW00.KS0KW-SIX-BYTE-FIELD = KS0KM002.KS0KM-PLANIMETER-TWO[KS0KW-IX3];
    KS0K-25310(); /* validate pct*/
    if (KS0KW00.KS0KW-INVALID-DATA-SW == "Y") /* error?*/
      converseLib.validationFailed(101); /* set error nbr*/
      KSWREC.XXXPRCNM = "25300"; /* Module identification*/
      set KS0KM002.KS0KM-PLANIMETER-TWO[KS0KW-IX3] cursor, bold;
    else
      if (KS0KW00.KS0KW-RESULT-FIELD != 
      KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX3])
        KS0KW00.KS0KW-DATA-CHGD-SW = "Y";
      end
      KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX3] = KS0KW00.KS0KW-RESULT-FIELD;
    end
    KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* set index down by 1*/
  end

  KS0KW00.KS0KW-IX3 = 4; /* set index*/

  while (KS0KW00.KS0KW-IX3 >= 1) /* for each four percentages*/
    KS0KW00.KS0KW-SIX-BYTE-FIELD = KS0KM002.KS0KM-PLANIMETER-ONE[KS0KW-IX3];
    KS0K-25310(); /* validate pct*/
    if (KS0KW00.KS0KW-INVALID-DATA-SW == "Y") /* error?*/
      converseLib.validationFailed(101); /* set error nbr*/
      KSWREC.XXXPRCNM = "25300"; /* Module identification*/
      set KS0KM002.KS0KM-PLANIMETER-ONE[KS0KW-IX3] cursor, bold;
    else
      if (KS0KW00.KS0KW-RESULT-FIELD != 
      KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX3])
        KS0KW00.KS0KW-DATA-CHGD-SW = "Y";
      end
      KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX3] = KS0KW00.KS0KW-RESULT-FIELD;
    end
    KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* set index down by 1*/
  end

end // end KS0K-25300

// edit & reformat pct flds
Function KS0K-25310()
  /* ------------------------------------------------------------*/
  /* If nothing was entered in the input field, move zeros to the*/
  /* result field and return.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-INVALID-DATA-SW = "N"; /* initialize switch*/

  if (KS0KW00.KS0KW-SIX-BYTE-FIELD == " ") /* if nothing entered*/
    KS0KW00.KS0KW-RESULT-FIELD = 0;
    return;
  end

  /* ------------------------------------------------------------*/
  /* First, we will check to see if more than 1 character after*/
  /* the decimal point was entered.*/
  /* ------------------------------------------------------------*/

  if (KS0KW00.KS0KW-BYTE-1 == ".") /* 1st byte = '.' ?*/
    if (KS0KW00.KS0KW-BYTE-3 > " " /* 3rd byte > ' ' ?*/
     || KS0KW00.KS0KW-BYTE-4 > " " /* 4th byte > ' ' ?*/
     || KS0KW00.KS0KW-BYTE-5 > " ") /* 5th byte > ' ' ?*/
      KS0KW00.KS0KW-INVALID-DATA-SW = "Y"; /* it's in error*/
    end
  else
    if (KS0KW00.KS0KW-BYTE-2 == ".") /* 2nd byte = '.' ?*/
      if (KS0KW00.KS0KW-BYTE-4 > " " /* 4th byte > ' ' ?*/
       || KS0KW00.KS0KW-BYTE-5 > " ") /* 5th byte > ' ' ?*/
        KS0KW00.KS0KW-INVALID-DATA-SW = "Y"; /* it's in error*/
      end
    else
      if (KS0KW00.KS0KW-BYTE-3 == ".") /* 3rd byte = '.' ?*/
        if (KS0KW00.KS0KW-BYTE-5 > " ") /* 5th byte > ' ' ?*/
          KS0KW00.KS0KW-INVALID-DATA-SW = "Y"; /* it's in error*/
        end
      end
    end
  end

  if (KS0KW00.KS0KW-INVALID-DATA-SW == "Y") /* was an error found?*/
    return;
  end

  /* ------------------------------------------------------------*/
  /* Next, we will move each byte of the input field to a result*/
  /* field so we can align the decimal point if one was entered.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-RESULT-FIELD = 0;

  if (KS0KW00.KS0KW-BYTE-1 == ".") /* 1st byte = '.' ?*/
    KS0KW00.KS0KW-RES-BYTE-1 = "0";
    KS0KW00.KS0KW-RES-BYTE-2 = "0";
    KS0KW00.KS0KW-RES-BYTE-3 = "0";
    KS0KW00.KS0KW-RES-BYTE-4 = "0";
    KS0KW00.KS0KW-RES-BYTE-5 = KS0KW00.KS0KW-BYTE-5;
  else
    if (KS0KW00.KS0KW-BYTE-2 == ".") /* 2nd byte = '.' ?*/
      KS0KW00.KS0KW-RES-BYTE-1 = "0";
      KS0KW00.KS0KW-RES-BYTE-2 = "0";
      KS0KW00.KS0KW-RES-BYTE-3 = "0";
      KS0KW00.KS0KW-RES-BYTE-4 = KS0KW00.KS0KW-BYTE-1;
      KS0KW00.KS0KW-RES-BYTE-5 = KS0KW00.KS0KW-BYTE-3;
    else
      if (KS0KW00.KS0KW-BYTE-3 == ".") /* 3rd byte = '.' ?*/
        KS0KW00.KS0KW-RES-BYTE-1 = "0";
        KS0KW00.KS0KW-RES-BYTE-2 = "0";
        KS0KW00.KS0KW-RES-BYTE-3 = KS0KW00.KS0KW-BYTE-1;
        KS0KW00.KS0KW-RES-BYTE-4 = KS0KW00.KS0KW-BYTE-2;
        KS0KW00.KS0KW-RES-BYTE-5 = KS0KW00.KS0KW-BYTE-4;
      else
        if (KS0KW00.KS0KW-BYTE-4 == ".") /* 4th byte = '.' ?*/
          KS0KW00.KS0KW-RES-BYTE-1 = "0";
          KS0KW00.KS0KW-RES-BYTE-2 = KS0KW00.KS0KW-BYTE-1;
          KS0KW00.KS0KW-RES-BYTE-3 = KS0KW00.KS0KW-BYTE-2;
          KS0KW00.KS0KW-RES-BYTE-4 = KS0KW00.KS0KW-BYTE-3;
          KS0KW00.KS0KW-RES-BYTE-5 = KS0KW00.KS0KW-BYTE-5;
        else
          if (KS0KW00.KS0KW-BYTE-5 == ".") /* 5th byte = '.' ?*/
            KS0KW00.KS0KW-RES-BYTE-1 = KS0KW00.KS0KW-BYTE-1;
            KS0KW00.KS0KW-RES-BYTE-2 = KS0KW00.KS0KW-BYTE-2;
            KS0KW00.KS0KW-RES-BYTE-3 = KS0KW00.KS0KW-BYTE-3;
            KS0KW00.KS0KW-RES-BYTE-4 = KS0KW00.KS0KW-BYTE-4;
            KS0KW00.KS0KW-RES-BYTE-5 = "0";
          else
       /* -------------------------------------------------*/
       /* There are no decimals entered.*/
       /* -------------------------------------------------*/

            KS0KW00.KS0KW-RES-BYTE-5 = "0";

            if (KS0KW00.KS0KW-BYTE-5 > " ")
              KS0KW00.KS0KW-RES-BYTE-4 = KS0KW00.KS0KW-BYTE-5;
              KS0KW00.KS0KW-RES-BYTE-3 = KS0KW00.KS0KW-BYTE-4;
              KS0KW00.KS0KW-RES-BYTE-2 = KS0KW00.KS0KW-BYTE-3;
              KS0KW00.KS0KW-RES-BYTE-1 = KS0KW00.KS0KW-BYTE-2;
            else
              if (KS0KW00.KS0KW-BYTE-4 > " ")
                KS0KW00.KS0KW-RES-BYTE-4 = KS0KW00.KS0KW-BYTE-4;
                KS0KW00.KS0KW-RES-BYTE-3 = KS0KW00.KS0KW-BYTE-3;
                KS0KW00.KS0KW-RES-BYTE-2 = KS0KW00.KS0KW-BYTE-2;
                KS0KW00.KS0KW-RES-BYTE-1 = KS0KW00.KS0KW-BYTE-1;
              else
                if (KS0KW00.KS0KW-BYTE-3 > " ")
                  KS0KW00.KS0KW-RES-BYTE-4 = KS0KW00.KS0KW-BYTE-3;
                  KS0KW00.KS0KW-RES-BYTE-3 = KS0KW00.KS0KW-BYTE-2;
                  KS0KW00.KS0KW-RES-BYTE-2 = KS0KW00.KS0KW-BYTE-1;
                else
                  if (KS0KW00.KS0KW-BYTE-2 > " ")
                    KS0KW00.KS0KW-RES-BYTE-4 = KS0KW00.KS0KW-BYTE-2;
                    KS0KW00.KS0KW-RES-BYTE-3 = KS0KW00.KS0KW-BYTE-1;
                  else
                    if (KS0KW00.KS0KW-BYTE-1 > " ")
                      KS0KW00.KS0KW-RES-BYTE-4 = KS0KW00.KS0KW-BYTE-1;
                    else
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

  /* -------------------------------------------------------------*/
  /* Next, all spaces are converted to zeros and then the byte is*/
  /* checked for anything other than numeric. If so, it's in error.*/
  /* -------------------------------------------------------------*/

  if (KS0KW00.KS0KW-RES-BYTE-1 == " ") /* if blank, make 0*/
    KS0KW00.KS0KW-RES-BYTE-1 = "0";
  else
    if (KS0KW00.KS0KW-RES-BYTE-1 < "0" /* if less than 0*/
     || KS0KW00.KS0KW-RES-BYTE-1 > "9") /* and greater than 9*/
      KS0KW00.KS0KW-INVALID-DATA-SW = "Y"; /* it's in error*/
    end
  end

  if (KS0KW00.KS0KW-RES-BYTE-2 == " ") /* if blank, make 0*/
    KS0KW00.KS0KW-RES-BYTE-2 = "0";
  else
    if (KS0KW00.KS0KW-RES-BYTE-2 < "0" /* if less than 0*/
     || KS0KW00.KS0KW-RES-BYTE-2 > "9") /* and greater than 9*/
      KS0KW00.KS0KW-INVALID-DATA-SW = "Y"; /* it's in error*/
    end
  end

  if (KS0KW00.KS0KW-RES-BYTE-3 == " ") /* if blank, make 0*/
    KS0KW00.KS0KW-RES-BYTE-3 = "0";
  else
    if (KS0KW00.KS0KW-RES-BYTE-3 < "0" /* if less than 0*/
     || KS0KW00.KS0KW-RES-BYTE-3 > "9") /* and greater than 9*/
      KS0KW00.KS0KW-INVALID-DATA-SW = "Y"; /* it's in error*/
    end
  end

  if (KS0KW00.KS0KW-RES-BYTE-4 == " ") /* if blank, make 0*/
    KS0KW00.KS0KW-RES-BYTE-4 = "0";
  else
    if (KS0KW00.KS0KW-RES-BYTE-4 < "0" /* if less than 0*/
     || KS0KW00.KS0KW-RES-BYTE-4 > "9") /* and greater than 9*/
      KS0KW00.KS0KW-INVALID-DATA-SW = "Y"; /* it's in error*/
    end
  end
end // end KS0K-25310

// verify optional material
Function KS0K-25400()
  /* ------------------------------------------------------------*/
  /* If optional material entered, verify against XMCTBL*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-MAT-CTNT-CD > " ") /* if entered*/
    if (KS0KM002.KS0KM-MAT-CTNT-CD in XMCTBL.XMCCD /* if in table*/
     && XMCTBL.XXXSTAT == "A")                     /* and active*/
      if (KS0KM002.KS0KM-MAT-CTNT-CD != KS0KW02.KS0KW-OPT-MAT)
        KS0KM002.KS0KM-MAT-CTNT-SDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        KS0KW00.KS0KW-DATA-CHGD-SW = "Y";
      end
      KS0KW02.KS0KW-OPT-MAT = KS0KM002.KS0KM-MAT-CTNT-CD;
    else
      converseLib.validationFailed(103); /* set msg nbr*/
      KSWREC.XXXPRCNM = "25400"; /* Module identification*/
      set KS0KM002.KS0KM-MAT-CTNT-CD cursor, bold;
    end
  end

end // end KS0K-25400

// verify reading date
Function KS0K-25500()
  /* ------------------------------------------------------------*/
  /* reading date is required.*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-PLANIMETER-DT == " ")
    converseLib.validationFailed(104);
    KSWREC.XXXPRCNM = "25500"; /* Module identification*/
    set KS0KM002.KS0KM-PLANIMETER-DT cursor, bold; /* set cursor*/
  else
  /* ------------------------------------------------------------*/
  /* validate the date entered*/
  /* ------------------------------------------------------------*/
    KS0KW00.KS0KW-RDG-DATE-WORK = KS0KM002.KS0KM-PLANIMETER-DT;
    set TA2REC empty;
    TA2REC.TA2GRGA = KS0KW00.KS0KW-RDG-DATE-WORK;

    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

    if (TA2REC.TA2RTNCD == 0000)
          /* next sentence*/
    else
      converseLib.validationFailed(104);
      KSWREC.XXXPRCNM = "25500"; /* Module identification*/
      set KS0KM002.KS0KM-PLANIMETER-DT cursor, bold; /* set cursor*/
    end
  end

end // end KS0K-25500

// check dept,lias,po id & fcty
Function KS0K-25600()
  /* ------------------------------------------------------------*/
  /* If department, liason and factory are empty, indicate error.*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-DEPT-ID == " " /* if dept empty*/
   && KS0KM002.KS0KM-CTRY-CD == " " /* if country empty*/
   && KS0KM002.KS0KM-FCTY-CD == " ") /* if fcty code empty*/
    KS0KM002.KS0KM-DEPT-DESC = " ";
    KS0KM002.KS0KM-CTRY-SDESC = " ";
    converseLib.validationFailed(107);
    KSWREC.XXXPRCNM = "25600"; /* Module identification*/
    set KS0KM002.KS0KM-DEPT-ID cursor, bold; /* set cursor*/
    set KS0KM002.KS0KM-CTRY-CD bold; /* and highlight fields*/
    set KS0KM002.KS0KM-FCTY-CD bold;
  end

  /* ------------------------------------------------------------*/
  /* If department, ctry and po id are empty, indicate error.*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-DEPT-ID == " "   /* if dept empty*/
   && KS0KM002.KS0KM-CTRY-CD == " "   /* if country empty*/
   && KS0KM002.KS0KM-PRDCTN-YR == " " /* if prod year empty*/
   && KS0KM002.KS0KM-PRDCTN-MO == " " /* if prod month empty*/
   && KS0KM002.KS0KM-DLVR-MO == " "   /* if dlvr month empty*/
   && KS0KM002.KS0KM-FCTY-CD == " ")  /* if fcty code empty*/
    KS0KM002.KS0KM-DEPT-DESC = " ";
    KS0KM002.KS0KM-CTRY-SDESC = " ";
    converseLib.validationFailed(105);
    KSWREC.XXXPRCNM = "25600"; /* Module identification*/
    set KS0KM002.KS0KM-DEPT-ID cursor, bold; /* set cursor*/
    set KS0KM002.KS0KM-CTRY-CD bold; /* and highlight fields*/
    set KS0KM002.KS0KM-PRDCTN-YR bold;
    set KS0KM002.KS0KM-PRDCTN-MO bold;
    set KS0KM002.KS0KM-DLVR-MO bold;
    set KS0KM002.KS0KM-FCTY-CD bold;
  else

    KS0K-25610(); /* verify the factory*/

    KS0K-25620(); /* verify the po id fields*/

    KS0K-25630(); /* verify the department code*/

  end
end // end KS0K-25600

// verify factory code
Function KS0K-25610()
  /* ------------------------------------------------------------*/
  /* Verify the factory code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-FCTY-CD > " ")
    FY1REC.XGPCD = KS0KM002.KS0KM-GPC-CD;
    FY1REC.FY1FCTYC = KS0KM002.KS0KM-FCTY-CD;
    KS0K-15210(); /* select factory row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
      if (KS0KM002.KS0KM-DLVR-MO == "  ") /* if dlvr mo not entered*/
        set KS0KM002.KS0KM-DLVR-MO cursor, bold; /* set cursor*/
        converseLib.validationFailed(110);
        KSWREC.XXXPRCNM = "25610";
      end
      if (KS0KM002.KS0KM-PRDCTN-MO == "  ") /* if prdctn mo not entered*/
        set KS0KM002.KS0KM-PRDCTN-MO cursor, bold; /* and hilite*/
        converseLib.validationFailed(110);
        KSWREC.XXXPRCNM = "25610";
      end
      if (KS0KM002.KS0KM-PRDCTN-YR == "  ") /* if prdctn yr not entered*/
        set KS0KM002.KS0KM-PRDCTN-YR cursor, bold;
        converseLib.validationFailed(110);
        KSWREC.XXXPRCNM = "25610";
      end
    else
      set KS0KM002.KS0KM-FCTY-CD cursor, bold;
      converseLib.validationFailed(98);
      KSWREC.XXXPRCNM = "25610";
    end
  end

end // end KS0K-25610

// verify po id fields
Function KS0K-25620()
  /* ------------------------------------------------------------*/
  /* Verify the delivery month entered*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-PRDCTN-YR == " " /* if entered*/
   && KS0KM002.KS0KM-PRDCTN-MO == " " /* if entered*/
   && KS0KM002.KS0KM-DLVR-MO == " ")  /* if entered*/

  else
    if (KS0KM002.KS0KM-DLVR-MO >= "01" /* must be between 1 & 12*/
     && KS0KM002.KS0KM-DLVR-MO <= "12")
        /* next sentence*/
    else
      converseLib.validationFailed(99);
      KSWREC.XXXPRCNM = "25620";
      set KS0KM002.KS0KM-DLVR-MO cursor, bold;
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the production month entered*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-PRDCTN-YR == " " /* if entered*/
   && KS0KM002.KS0KM-PRDCTN-MO == " " /* if entered*/
   && KS0KM002.KS0KM-DLVR-MO == " ")  /* if entered*/

  else
    if (KS0KM002.KS0KM-PRDCTN-MO >= "01" /* must be between 1 & 12*/
     && KS0KM002.KS0KM-PRDCTN-MO <= "12")
        /* next sentence*/
    else
      converseLib.validationFailed(99);
      KSWREC.XXXPRCNM = "25620";
      set KS0KM002.KS0KM-PRDCTN-MO cursor, bold;
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the production year entered*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-PRDCTN-YR == " " /* if entered*/
   && KS0KM002.KS0KM-PRDCTN-MO == " " /* if entered*/
   && KS0KM002.KS0KM-DLVR-MO == " ")  /* if entered*/

  else
    if (KS0KM002.KS0KM-PRDCTN-YR >= "00" /* must be between 0 & 99*/
     && KS0KM002.KS0KM-PRDCTN-YR <= "99")
        /* next sentence*/
    else
      converseLib.validationFailed(26);
      KSWREC.XXXPRCNM = "25620";
      set KS0KM002.KS0KM-PRDCTN-YR cursor, bold;
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the country code*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-CTRY-CD > " ") /* if ctry not empty*/
    if (KS0KM002.KS0KM-CTRY-CD in XCTTBL.XCTCD /* Code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      KS0KM002.KS0KM-CTRY-SDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];

    else
      KS0KM002.KS0KM-CTRY-SDESC = " ";
      set KS0KM002.KS0KM-CTRY-CD cursor, bold;
      converseLib.validationFailed(70);
      KSWREC.XXXPRCNM = "25620";
    end
  else
    KS0KM002.KS0KM-CTRY-SDESC = " ";
  end
end // end KS0K-25620

// verify department code
Function KS0K-25630()
  /* ------------------------------------------------------------*/
  /* Verify the department code*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-DEPT-ID > " ") /* if dept entered*/
    if (KS0KM002.KS0KM-DEPT-ID in XNDTBL.XNDCD /* if in table*/
     && XNDTBL.XXXSTAT == "A")                 /* and active*/
         /* next sentence*/
    else
      converseLib.validationFailed(107); /* set msg nbr*/
      KSWREC.XXXPRCNM = "25630"; /* Module identification*/
      set KS0KM002.KS0KM-DEPT-ID cursor, bold;
    end
  end

  /* ------------------------------------------------------------*/
  /* If department entered, then ctry and factory must NOT be*/
  /* entered.*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-DEPT-ID > " ") /* if dept entered*/
    if (KS0KM002.KS0KM-CTRY-CD > " ") /* if ctry entered*/
      converseLib.validationFailed(109);
      KSWREC.XXXPRCNM = "25630";
      set KS0KM002.KS0KM-CTRY-CD cursor, bold; /* set xursor*/
      if (KS0KM002.KS0KM-FCTY-CD > " ") /* if fcty code entered*/
        set KS0KM002.KS0KM-FCTY-CD bold; /* set xursor*/
      end
    else
      if (KS0KM002.KS0KM-FCTY-CD > " ") /* if fcty code entered*/
        converseLib.validationFailed(109);
        KSWREC.XXXPRCNM = "25630";
        set KS0KM002.KS0KM-FCTY-CD cursor, bold; /* set xursor*/
      end
    end
  end

end // end KS0K-25630

// verify product/POID combo
Function KS0K-25700()
  /* ----------------------------------------------------------------*/
  /* Verify that the product/POID combination exist on DPRODC.VPOITM01.*/
  /* ----------------------------------------------------------------*/

  if (KS0KM002.KS0KM-STY-NBR > " ") /* If IBM Style number*/

    KS0K-25710(); /* select set*/

    KS0K-25720(); /* fetch cursor*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if correct row not found*/
      set KS0KM002.KS0KM-STY-NBR bold;
      set KS0KM002.KS0KM-COLR-CD-ID bold;
      set KS0KM002.KS0KM-DIM-CD bold;
      set KS0KM002.KS0KM-PRDCTN-YR cursor, bold;
      set KS0KM002.KS0KM-PRDCTN-MO bold;
      set KS0KM002.KS0KM-DLVR-MO bold;
      set KS0KM002.KS0KM-FCTY-CD bold;
      converseLib.validationFailed(124);
      KSWREC.XXXPRCNM = "25700";
    end

    KS0K-25730(); /* close cursor*/

  else
    if (KS0KM002.KS0KM-XPRMT-STY-NBR > " ") /* If XPRMT Style number*/

      set PG4REC empty; /* Clear row storage area*/

      PG4REC.PG4STNBR = KS0KM002.KS0KM-XPRMT-STY-NBR; /* Style*/

      KS0K-12200(); /* select set unique*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if correct row found*/
        KS0KW00.KS0KW-FRST-PRDCTN-YR = KS0KM002.KS0KM-PRDCTN-YR;
        KS0KW00.KS0KW-FRST-DLVR-YR = KS0KM002.KS0KM-PRDCTN-YR;
        KS0KW00.KS0KW-FRST-PRDCTN-MO = KS0KM002.KS0KM-PRDCTN-MO;
        KS0KW00.KS0KW-FRST-DLVR-MO = KS0KM002.KS0KM-DLVR-MO;

        if (KS0KW00.KS0KW-FRST-PRDCTN-YR > 60)
          KS0KW00.KS0KW-FRST-PRDCTN-CC = 19;
          KS0KW00.KS0KW-FRST-DLVR-CC = 19;
        else
          KS0KW00.KS0KW-FRST-PRDCTN-CC = 20;
          KS0KW00.KS0KW-FRST-DLVR-CC = 20;
        end

        if (KS0KW00.KS0KW-FRST-PRDCTN-DT != PG4REC.PG2FPDMO /* PRDCTN/DLVR*/
         || KS0KW00.KS0KW-FRST-DLVR-DT != PG4REC.PG4FDLMO   /* dates diff*/
         || KS0KM002.KS0KM-FCTY-CD != PG4REC.PG4PRFTY)      /* Fcty different*/
          set KS0KM002.KS0KM-XPRMT-STY-NBR bold;
          set KS0KM002.KS0KM-COLR-CD-ID bold;
          set KS0KM002.KS0KM-DIM-CD bold;
          set KS0KM002.KS0KM-PRDCTN-YR cursor, bold;
          set KS0KM002.KS0KM-PRDCTN-MO bold;
          set KS0KM002.KS0KM-DLVR-MO bold;
          set KS0KM002.KS0KM-FCTY-CD bold;
          converseLib.validationFailed(124);
          KSWREC.XXXPRCNM = "25700";
        end

      else
        if (SQLCA.VAGen_SQLCODE == +100) /* if no row found*/
          set KS0KM002.KS0KM-XPRMT-STY-NBR bold;
          set KS0KM002.KS0KM-COLR-CD-ID bold;
          set KS0KM002.KS0KM-DIM-CD bold;
          set KS0KM002.KS0KM-PRDCTN-YR cursor, bold;
          set KS0KM002.KS0KM-PRDCTN-MO bold;
          set KS0KM002.KS0KM-DLVR-MO bold;
          set KS0KM002.KS0KM-FCTY-CD bold;
          converseLib.validationFailed(124);
          KSWREC.XXXPRCNM = "25700";
        end

      end
    end
  end
end // end KS0K-25700

// sel set from DPRODC.VPOITM01
Function KS0K-25710()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear row storage area*/
  set PC6REC empty; /* Clear row storage area*/

  PCYREC.PCYFUNC = "S3"; /* Use S3 function*/

  KS0KW00.KS0KW-FILLER = 0;
  KS0KW00.KS0KW-YEAR = KS0KM002.KS0KM-PRDCTN-YR;
  KS0KW00.KS0KW-MONTH = KS0KM002.KS0KM-PRDCTN-MO;
  KS0KW00.KS0KW-DAY = KS0KM002.KS0KM-DLVR-MO;

  if (KS0KW00.KS0KW-YEAR > 60)
    KS0KW00.KS0KW-CENTURY = 19;
  else
    KS0KW00.KS0KW-CENTURY = 20;
  end

  PCYREC.PCYFRDT = KS0KW00.KS0KW-DATE-WORK;
  PCYREC.PCYTODT = KS0KW00.KS0KW-DATE-WORK;

  PC6REC.XGPCD = KS0KM002.KS0KM-GPC-CD; /* GPC*/
  PC6REC.SY1STNBR = KS0KM002.KS0KM-STY-NBR; /* Style*/
  PC6REC.PC3POIDT = KS0KW00.KS0KW-DATE-WORK;

  PC6REC.PCFSECD = "*";

  PC6REC.FY1FCTYC = KS0KM002.KS0KM-FCTY-CD;

  PC6REC.PC4ORTYP = "*";

  PC6REC.SY2CLRID = KS0KM002.KS0KM-COLR-CD-ID;

  PC6REC.XDMCD = KS0KM002.KS0KM-DIM-CD;

  PC6REC.XQACD = "*";

  PC6REC.XOWCD = "*";

  PC6REC.XPGCD = "*";

  PC6REC.XUMCD = "*";

  PC6REC.XWHCD = "*";

  PC6REC.PC2INSEG = "*";

  PC6REC.PC2CUXID = "*";

  PC6REC.PC6ETSDT = -1;

  PC6REC.YMTCD = "*";

  PC6REC.PC6PLAN = -1;

  PC6REC.XDSCD = "*";

  PC6REC.YSMXDV = "*";

  PC6REC.PC6STAT = "*";

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25710"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25710

// fetch row from DPRODC.VPOITM01
Function KS0K-25720()
  /* ------------------------------------------------------------*/
  /* fetch row from DCUSTM.VCPROD01*/
  /* ------------------------------------------------------------*/

  set PC6REC empty;

  PCYREC.PCYFUNC = "N3";

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
        return; /* Return to previous process*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25720"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25720

// close DPRODC.VPOITM01 cursor
Function KS0K-25730()
  /* ------------------------------------------------------------*/
  /* close the cursor for DPRODC.VCPROD01*/
  /* ------------------------------------------------------------*/

  set PC6REC empty;

  PCYREC.PCYFUNC = "C3";

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* CLOSE set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25730"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25730

// check that pcts = 100%
Function KS0K-25800()
  /* ------------------------------------------------------------*/
  /* Verify that the percentages entered add up to 100% per line.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-NO-PCT-1-SW = "N"; /* initialize switches*/
  KS0KW00.KS0KW-NO-PCT-2-SW = "N";

  if (KS0KW02.KS0KW-PLNM-PCT-TWO[1] > 0
   || KS0KW02.KS0KW-PLNM-PCT-TWO[2] > 0
   || KS0KW02.KS0KW-PLNM-PCT-TWO[3] > 0
   || KS0KW02.KS0KW-PLNM-PCT-TWO[4] > 0)

    KS0KW00.KS0KW-IX4 = 4; /* set index*/
    KS0KW00.KS0KW-TOTAL-FLD = 0; /* clear accumulator*/

    while (KS0KW00.KS0KW-IX4 >= 1) /* for each four percentages*/
      KS0KW00.KS0KW-TOTAL-FLD = KS0KW00.KS0KW-TOTAL-FLD +       KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX4];
      KS0KW00.KS0KW-IX4 = KS0KW00.KS0KW-IX4 - 1; /* set index down by 1*/
    end

   /* Remove the 2nd planimeter percent validation 1/9/95 dhuffm*/
   /* IF KS0KW00.KS0KW-TOTAL-FLD NE 100.00;/* if not = 100%*/
     /* MOVE 102 TO EZEMNO;          /* set error nbr*/
     /* MOVE '25800' TO KSWREC.XXXPRCNM;*/
     /* SET KS0KM002.KS0KM-PLANIMETER-TWO(1) CURSOR,BRIGHT;*/
     /* SET KS0KM002.KS0KM-PLANIMETER-TWO(2) BRIGHT;*/
     /* SET KS0KM002.KS0KM-PLANIMETER-TWO(3) BRIGHT;*/
     /* SET KS0KM002.KS0KM-PLANIMETER-TWO(4) BRIGHT;*/
   /* END;*/
  else
    KS0KW00.KS0KW-NO-PCT-1-SW = "Y"; /* indicate no pct 1's*/
  end

  if (KS0KW02.KS0KW-PLNM-PCT-ONE[1] > 0
   || KS0KW02.KS0KW-PLNM-PCT-ONE[2] > 0
   || KS0KW02.KS0KW-PLNM-PCT-ONE[3] > 0
   || KS0KW02.KS0KW-PLNM-PCT-ONE[4] > 0)

    KS0KW00.KS0KW-IX4 = 4; /* set index*/
    KS0KW00.KS0KW-TOTAL-FLD = 0; /* clear accumulator*/

    while (KS0KW00.KS0KW-IX4 >= 1) /* for each four percentages*/
      KS0KW00.KS0KW-TOTAL-FLD = KS0KW00.KS0KW-TOTAL-FLD +       KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX4];
      KS0KW00.KS0KW-IX4 = KS0KW00.KS0KW-IX4 - 1; /* set index down by 1*/
    end

    if (KS0KW00.KS0KW-TOTAL-FLD != 100.00) /* if not = 100%*/
      converseLib.validationFailed(102); /* set error nbr*/
      KSWREC.XXXPRCNM = "25800";
      set KS0KM002.KS0KM-PLANIMETER-ONE[1] cursor, bold;
      set KS0KM002.KS0KM-PLANIMETER-ONE[2] bold;
      set KS0KM002.KS0KM-PLANIMETER-ONE[3] bold;
      set KS0KM002.KS0KM-PLANIMETER-ONE[4] bold;
    end
  else
    KS0KW00.KS0KW-NO-PCT-2-SW = "Y"; /* indicate no pct 2's*/
  end

  if (KS0KW00.KS0KW-NO-PCT-1-SW == "Y" /* if nothing entered*/
   && KS0KW00.KS0KW-NO-PCT-2-SW == "Y") /* if nothing entered*/
    converseLib.validationFailed(102); /* set error nbr*/
    KSWREC.XXXPRCNM = "25800";
    set KS0KM002.KS0KM-PLANIMETER-ONE[1] cursor, bold;
    set KS0KM002.KS0KM-PLANIMETER-ONE[2] bold;
    set KS0KM002.KS0KM-PLANIMETER-ONE[3] bold;
    set KS0KM002.KS0KM-PLANIMETER-ONE[4] bold;
  end
end // end KS0K-25800

// warnings for percentages
Function KS0K-25900()
  /* ---------------------------------------------------------------*/
  /* compare the entered percents against the latest reading date*/
  /* percents. Issue warnings if there is more than a 2% difference.*/
  /* First, get the latest reading date rank 1 row.*/
  /* ---------------------------------------------------------------*/

  KS0KW00.KS0KW-COMP-ROW-ONE = " ";
  KS0KW00.KS0KW-COMP-ROW-TWO = " ";

  KS0K-25910(); /* select set*/

  KS0KW00.KS0KW-HIGHEST-PLNMT-DT = 0;
  KS0KW00.KS0KW-EOF-SW = "N"; /* initialize end of set flag*/

  while (KS0KW00.KS0KW-EOF-SW == "N") /* until end of set*/
    KS0K-25920(); /* fetch next row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (VPLNMT01.KS-PLANIMETER-DT > KS0KW00.KS0KW-HIGHEST-PLNMT-DT)
        KS0KW00.KS0KW-HIGHEST-PLNMT-DT = VPLNMT01.KS-PLANIMETER-DT;
        KS0KW00.KS0KW-COMP-ROW-ONE = VPLNMT01.VPLNMT01-GROUP;
      end
    end
  end

  KS0K-25930(); /* close cursor*/

  VPLNMT01.VPLNMT01-GROUP = KS0KW00.KS0KW-COMP-ROW-ONE;

  VPLNMT01.XXXRKNBR = 2; /* set rank to '2'*/

  KS0K-25940(); /* get unique rank 2 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
    KS0KW00.KS0KW-COMP-ROW-TWO = VPLNMT01.VPLNMT01-GROUP;
  else
    move 0 to VPLNMT01.KS-PLANIMETER-PCT[1] for all;
    KS0KW00.KS0KW-COMP-ROW-TWO = VPLNMT01.VPLNMT01-GROUP;
  end

  /* ---------------------------------------------------------------*/
  /* The first time thru, we will compare the scr pcts to the comp*/
  /* pcts. Any difference GT 2 will result in a warning and the scr*/
  /* pct is saved. Second time, If the scr pcts have NOT changed,*/
  /* the scr pcts are accepted. If the scr pcts have changed, we*/
  /* have to reload the comp pcts and compare again.*/
  /* ---------------------------------------------------------------*/

  /* ---------------------------------------------------------------*/
  /* compare the pct's for row nbr two if entered.*/
  /* ---------------------------------------------------------------*/

  if (KS0KW00.KS0KW-COMP-ROW-ONE > " ") /* if rank row found*/
    VPLNMT01.VPLNMT01-GROUP = KS0KW00.KS0KW-COMP-ROW-TWO;

    /* ----------------------------------------------------------*/
    /* The first time thru, load the comp pcts into the save pcts*/
    /* for comparison.*/
    /* ----------------------------------------------------------*/

    if (KS0KW00.KS0KW-WARNINGS-ISSUED-SW == "N") /* first time thru?*/
      KS0K-25950(); /* load and compare rank 2 pcts*/
    else
      /* ------------------------------------------------------*/
      /* If the scr pcts have changed, reload the original*/
      /* comp pcts and compare again.*/
      /* If the scr pcts have NOT changed, accept the scr pcts.*/
      /* ------------------------------------------------------*/
      if (KS0KW02.KS0KW-PLNM-PCT-TWO[1] != 
      KS0KW00.KS0KW-SAVE-PCT-TWO[1]
       || KS0KW02.KS0KW-PLNM-PCT-TWO[2] != 
      KS0KW00.KS0KW-SAVE-PCT-TWO[2]
       || KS0KW02.KS0KW-PLNM-PCT-TWO[3] != 
      KS0KW00.KS0KW-SAVE-PCT-TWO[3]
       || KS0KW02.KS0KW-PLNM-PCT-TWO[4] != 
      KS0KW00.KS0KW-SAVE-PCT-TWO[4])
        KS0K-25950(); /* load and compare rank 2 pcts*/
      end
    end
  end

  /* ---------------------------------------------------------------*/
  /* compare the pct's for row nbr one if entered.*/
  /* ---------------------------------------------------------------*/

  if (KS0KW00.KS0KW-COMP-ROW-ONE > " ") /* if rank row found*/
    VPLNMT01.VPLNMT01-GROUP = KS0KW00.KS0KW-COMP-ROW-ONE;

    /* ----------------------------------------------------------*/
    /* The first time thru, load the comp pcts into the save pcts*/
    /* for comparison.*/
    /* ----------------------------------------------------------*/

    if (KS0KW00.KS0KW-WARNINGS-ISSUED-SW == "N") /* first time thru?*/
      KS0K-25960(); /* load and compare rank 1 pcts*/
    else
      /* ------------------------------------------------------*/
      /* If the scr pcts have changed, reload the original*/
      /* comp pcts and compare again.*/
      /* If the scr pcts have NOT changed, accept the scr pcts.*/
      /* ------------------------------------------------------*/
      if (KS0KW02.KS0KW-PLNM-PCT-ONE[1] != 
      KS0KW00.KS0KW-SAVE-PCT-ONE[1]
       || KS0KW02.KS0KW-PLNM-PCT-ONE[2] != 
      KS0KW00.KS0KW-SAVE-PCT-ONE[2]
       || KS0KW02.KS0KW-PLNM-PCT-ONE[3] != 
      KS0KW00.KS0KW-SAVE-PCT-ONE[3]
       || KS0KW02.KS0KW-PLNM-PCT-ONE[4] != 
      KS0KW00.KS0KW-SAVE-PCT-ONE[4])
        KS0K-25960(); /* load and compare rank1 pcts*/
      end
    end
  end

end // end KS0K-25900

// select set dcustm.vplnmt01
Function KS0K-25910()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  set VPLNMT01 empty;

  /* -----------------------------------------------------------------*/
  /* Set the keys for the select.*/
  /* -----------------------------------------------------------------*/

  VPLNMT01.XGPCD = KS0KM002.KS0KM-GPC-CD;

  if (KS0KM002.KS0KM-STY-NBR > " ")
    VPLNMT01.SY1STNBR = KS0KM002.KS0KM-STY-NBR;
    VPLNMT01.KS-XPRMT-STY-NBR = KS0KM002.KS0KM-STY-NBR;
  else
    VPLNMT01.SY1STNBR = KS0KM002.KS0KM-XPRMT-STY-NBR;
    VPLNMT01.KS-XPRMT-STY-NBR = KS0KM002.KS0KM-XPRMT-STY-NBR;
  end

  if (KS0KM002.KS0KM-COLR-CD-ID == " ") /* if nothing entered, wildcard it*/
    VPLNMT01.SY2CLRID = "*";
  else
    VPLNMT01.SY2CLRID = KS0KM002.KS0KM-COLR-CD-ID;
  end

  if (KS0KM002.KS0KM-DIM-CD == " ") /* if nothing entered, wildcard it*/
    VPLNMT01.XDMCD = "*";
  else
    VPLNMT01.XDMCD = KS0KM002.KS0KM-DIM-CD;
  end

  VPLNMT01.XNDCD = "CSTM";
  VPLNMT01.XCTCD = "*";
  VPLNMT01.FY1FCTYC = "*";

  VPLNMT01.KS-PLANIMETER-DT = -1;
  VPLNMT01.XXXRKNBR = -1;

  VPLNMT01.PC3POIDT = -1;

  try
    call "IO6380" ("S1", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25910"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25910

// fetch row from dcustm.vplnmt01
Function KS0K-25920()
  /* ------------------------------------------------------------*/
  /* fetch the next row from the table.*/
  /* ------------------------------------------------------------*/

  set VPLNMT01 empty;

  try
    call "IO6380" ("N1", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* end of data*/
        KS0KW00.KS0KW-EOF-SW = "Y";
        return; /* Return to previous process*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25920"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25920

// close csr for dcustm.vplnmt01
Function KS0K-25930()
  /* ------------------------------------------------------------*/
  /* close the cursor for dcustm.vplnmt01*/
  /* ------------------------------------------------------------*/

  set VPLNMT01 empty;

  try
    call "IO6380" ("C1", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25930"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25930

// get unique dcustm.vplnmt01
Function KS0K-25940()
  /* ------------------------------------------------------------*/
  /* get unique row from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6380" ("S ", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* end of data*/
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25940"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-25940

// load & compare rank 2 pcts
Function KS0K-25950()
  /* ---------------------------------------------------------------*/
  /* compare the entered percents against the latest reading date*/
  /* percents. Issue warnings if there is more than a 2% difference.*/
  /* ---------------------------------------------------------------*/

  /* ---------------------------------------------------------------*/
  /* Load the comp pcts from vplnmt01 to the save area.*/
  /* ---------------------------------------------------------------*/

  KS0KW00.KS0KW-IX5 = 1;

  while (KS0KW00.KS0KW-IX5 <= 4) /* for all 4 pct's*/
    KS0KW00.KS0KW-SAVE-PCT-TWO[KS0KW-IX5] = VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX5];
    KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1; /* set index up by 1*/
  end

  /* ---------------------------------------------------------------*/
  /* Compare each scr pct against the save pcts, which have the comp*/
  /* pcts loaded into them the first time thru. Then save the scr*/
  /* pcts.*/
  /* ---------------------------------------------------------------*/

  KS0KW00.KS0KW-IX3 = 4; /* initialize index*/

  while (KS0KW00.KS0KW-IX3 >= 1) /* for all 4 pct's*/

    if (KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX3] > 
    KS0KW00.KS0KW-SAVE-PCT-TWO[KS0KW-IX3])
      KS0KW00.KS0KW-TOTAL-FLD = KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX3] -       VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX3];
    else
      KS0KW00.KS0KW-TOTAL-FLD = VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX3] -       KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX3];
    end
    if (KS0KW00.KS0KW-TOTAL-FLD > 2)
      converseLib.validationFailed(111); /* set warning nbr*/
      set KS0KM002.KS0KM-PLANIMETER-TWO[KS0KW-IX3] cursor, bold;
      KSWREC.XXXPRCNM = "25950";
    end
    KS0KW00.KS0KW-SAVE-PCT-TWO[KS0KW-IX3] = KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX3];
    KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* decrement index by 1*/
  end
end // end KS0K-25950

// load & compare rank 1 pcts
Function KS0K-25960()
  /* ---------------------------------------------------------------*/
  /* compare the entered percents against the latest reading date*/
  /* percents. Issue warnings if there is more than a 2% difference.*/
  /* ---------------------------------------------------------------*/

  /* ---------------------------------------------------------------*/
  /* Load the comp pcts from vplnmt01 to the save area.*/
  /* ---------------------------------------------------------------*/

  KS0KW00.KS0KW-IX5 = 1;
  while (KS0KW00.KS0KW-IX5 <= 4) /* for all 4 pct's*/
    KS0KW00.KS0KW-SAVE-PCT-ONE[KS0KW-IX5] = VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX5];
    KS0KW00.KS0KW-IX5 = KS0KW00.KS0KW-IX5 + 1; /* set index up by 1*/
  end

  /* ---------------------------------------------------------------*/
  /* Compare each scr pct against the save pcts, which have the comp*/
  /* pcts loaded into them the first time thru. Then save the scr*/
  /* pcts.*/
  /* ---------------------------------------------------------------*/

  KS0KW00.KS0KW-IX3 = 4; /* initialize index*/

  while (KS0KW00.KS0KW-IX3 >= 1) /* for all 4 pct's*/

    if (KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX3] > 
    KS0KW00.KS0KW-SAVE-PCT-ONE[KS0KW-IX3])
      KS0KW00.KS0KW-TOTAL-FLD = KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX3] -       VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX3];
    else
      KS0KW00.KS0KW-TOTAL-FLD = VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX3] -       KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX3];
    end
    if (KS0KW00.KS0KW-TOTAL-FLD > 2)
      converseLib.validationFailed(111); /* set warning nbr*/
      set KS0KM002.KS0KM-PLANIMETER-ONE[KS0KW-IX3] cursor, bold;
      KSWREC.XXXPRCNM = "25960";
    end
    KS0KW00.KS0KW-SAVE-PCT-ONE[KS0KW-IX3] = KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX3];
    KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 - 1; /* decrement index by 1*/
  end
end // end KS0K-25960

// process valid request
Function KS0K-26000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-SWF = "Y"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* Obtain the current date and time.*/
  /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  /* --------------------------------------------------------------*/
  /* The user may add or change from the change screen. If the keys*/
  /* are changed, it causes a delete of the old rows, then adding*/
  /* of the new rows.*/
  /* --------------------------------------------------------------*/

  /* --------------------------------------------------------------*/
  /* If 'INQUIRY' mode, look for next selection and return.*/
  /* --------------------------------------------------------------*/

  if (KS0KW00.KS0KW-FNC == "I")

    KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-NEXT-SEL-ROW;

    KS0K-26100(); /* Search for next selection*/

    return;

  end

  /* --------------------------------------------------------------*/
  /* If 'DELETE' mode, process delete*/
  /* --------------------------------------------------------------*/

  if (KS0KW00.KS0KW-FNC == "D")

    KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-NEXT-SEL-ROW;

    KS0K-26200(); /* delete this planimeter reading*/

    KS0K-26100(); /* Search for next selection*/

    return;

  end

  set VPLNMT01 empty; /* clear record*/

  /* --------------------------------------------------------------*/
  /* Check to see if any of the keys have changed.*/
  /* --------------------------------------------------------------*/

  if (KS0KW00.KS0KW-FNC == "C")
    if (KS0KM002.KS0KM-GPC-CD == KS0KW02.KS0KW-GPC-CD
     && KS0KM002.KS0KM-STY-NBR == KS0KW02.KS0KW-STY-NBR
     && KS0KM002.KS0KM-COLR-CD-ID == KS0KW02.KS0KW-COLR-CD-ID
     && KS0KM002.KS0KM-DIM-CD == KS0KW02.KS0KW-DIM-CD
     && KS0KM002.KS0KM-XPRMT-STY-NBR == KS0KW02.KS0KW-X-STYLE
     && KS0KM002.KS0KM-DEPT-ID == KS0KW02.KS0KW-DEPT-ID
     && KS0KM002.KS0KM-CTRY-CD == KS0KW02.KS0KW-CTRY-CD
     && KS0KM002.KS0KM-PRDCTN-YR == KS0KW02.KS0KW-PO-ID-PRD-YR
     && KS0KM002.KS0KM-PRDCTN-MO == KS0KW02.KS0KW-PO-ID-PRD-MO
     && KS0KM002.KS0KM-DLVR-MO == KS0KW02.KS0KW-PO-ID-DLV-MO
     && KS0KM002.KS0KM-FCTY-CD == KS0KW02.KS0KW-FCTY-CD
     && KS0KM002.KS0KM-PLANIMETER-DT == KS0KW02.KS0KW-READING-DT)

      if (KS0KW00.KS0KW-DATA-CHGD-SW == "Y") /* if any data has changed*/

        KS0K-26300(); /* process same keys*/

      end

    else

      KS0KW00.KS0KW-CSTM-FEAT-SW = "N"; /* Check for too many feats*/
      KS0K-26400(); /* process new keys*/
      KS0K-21220(); /* get features for key*/
      if (KS0KW00.KS0KW-FEAT-CHGD-FLAG == "N")
        KS0K-22110(); /* Set up on map*/
      end

    end

  else

     /* set keys for new row*/

    KS0KW02.KS0KW-GPC-CD = KS0KM002.KS0KM-GPC-CD;
    KS0KW02.KS0KW-STY-NBR = KS0KM002.KS0KM-STY-NBR;
    KS0KW02.KS0KW-COLR-CD-ID = KS0KM002.KS0KM-COLR-CD-ID;
    KS0KW02.KS0KW-DIM-CD = KS0KM002.KS0KM-DIM-CD;
    KS0KW02.KS0KW-X-STYLE = KS0KM002.KS0KM-XPRMT-STY-NBR;
    KS0KW02.KS0KW-DEPT-ID = KS0KM002.KS0KM-DEPT-ID;
    KS0KW02.KS0KW-CTRY-CD = KS0KM002.KS0KM-CTRY-CD;
    KS0KW02.KS0KW-PO-ID-PRD-YR = KS0KM002.KS0KM-PRDCTN-YR;
    KS0KW02.KS0KW-PO-ID-PRD-MO = KS0KM002.KS0KM-PRDCTN-MO;
    KS0KW02.KS0KW-PO-ID-DLV-MO = KS0KM002.KS0KM-DLVR-MO;
    KS0KW02.KS0KW-FCTY-CD = KS0KM002.KS0KM-FCTY-CD;
    KS0KW02.KS0KW-READING-DT = KS0KM002.KS0KM-PLANIMETER-DT;

    KS0K-26400(); /* process new keys*/
    KS0K-21220(); /* get features for key*/
    if (KS0KW00.KS0KW-FEAT-CHGD-FLAG == "N")
      KS0K-22110(); /* Set up on map*/
    end

  end

  if (converseVar.validationMsgNum > 0) /* if any errors*/
    KS0KW00.KS0KW-SWF = "N"; /* do not format the map*/
    return; /* display map*/
  end

  /* -------------------------------------------------------------------*/
  /* If the features flag is set, delete and re-add all of the features*/
  /* for each of the problems in the vcprod01 set. If the features were*/
  /* deleted, we only need to delete features which were on file for*/
  /* this product and set the ks-prbm-nbr in vcprod01 to 0.*/
  /* -------------------------------------------------------------------*/

  KS0KW00.KS0KW-PROBLEMS-ADDED-SW = "N"; /* set switch off*/
  KS0KW00.KS0KW-VCPROD01-EOF-SW = "N"; /* set switch off*/

  if (KS0KW00.KS0KW-FEAT-CHGD-FLAG == "Y") /* and features changed?*/

    set VCPROD01 empty; /* Clear row storage area*/

    VCPROD01.XGPCD = KS0KW02.KS0KW-GPC-CD; /* GPC*/
    if (KS0KW02.KS0KW-STY-NBR > " ")
      VCPROD01.SY1STNBR = KS0KW02.KS0KW-STY-NBR;
      VCPROD01.KS-XPRMT-STY-NBR = KS0KW02.KS0KW-STY-NBR;
    else
      VCPROD01.SY1STNBR = KS0KW02.KS0KW-X-STYLE;
      VCPROD01.KS-XPRMT-STY-NBR = KS0KW02.KS0KW-X-STYLE;
    end

    VCPROD01.SY2CLRID = KS0KW02.KS0KW-COLR-CD-ID;
    VCPROD01.XDMCD = KS0KW02.KS0KW-DIM-CD;
    VCPROD01.XSNYR = -1; /* Season year range*/
    VCPROD01.XSECD = "*"; /* Season code*/
    VCPROD01.KS-XCT-ORIG-CD = "*"; /* Origin code*/
    VCPROD01.YPR-PROD-STAT-CD = "*"; /* Status code*/
    VCPROD01.KS-RULE-NBR = "*"; /* Ruling number*/
    VCPROD01.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
    VCPROD01.KS-HTS-HDG-CD = "*";
    VCPROD01.KS-HTS-1ST-SHDG-CD = "*";
    VCPROD01.KS-HTS-2ND-SHDG-CD[1] = "*";
    VCPROD01.KS-HTS-2ND-SHDG-CD[2] = "*";
    VCPROD01.KS-HTS-STAT-CD = "*";
    VCPROD01.KS-TEAM-CD = "***";
    VCPROD01.KS-PRBM-NBR = -1;

    KS0K-21230(); /* select set from vcprod01*/

    while (KS0KW00.KS0KW-VCPROD01-EOF-SW == "N") /* until end of set*/

      KS0K-21240(); /* fetch next from vcprod01*/

      if (KS0KW00.KS0KW-VCPROD01-EOF-SW == "N") /* if more data?*/

        if (KS0KW02.KS0KW-COLR-CD-ID == VCPROD01.SY2CLRID /* same clr*/
         && KS0KW02.KS0KW-DIM-CD == VCPROD01.XDMCD)       /* and dim*/

          if (VCPROD01.KS-PRBM-NBR == 0) /* if no current problems*/
            if (KS0KM002.KS0KM-CSTM-FEAT[1] == "  "
             /* and no new problem cds*/
             && KS0KM002.KS0KM-CSTM-FEAT[2] == "  "
             && KS0KM002.KS0KM-CSTM-FEAT[3] == "  "
             && KS0KM002.KS0KM-CSTM-FEAT[4] == "  "
             && KS0KM002.KS0KM-CSTM-FEAT[5] == "  "
             && KS0KM002.KS0KM-CSTM-FOXING[1] == "N"
             && KS0KM002.KS0KM-CSTM-FOXING[2] == "N"
             && KS0KM002.KS0KM-CSTM-FOXING[3] == "N"
             && KS0KM002.KS0KM-CSTM-CONFIRMED == "  "
             && KS0KM002.KS0KM-CSTM-TYPE == " ")
              /* next sentence - no action needed*/
            else
              KS0K-26500(); /* get next problem number*/
              VCPROD01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
              VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
              KS0K-26600(); /* update vcprod01 prbm nbr*/
              KS0K-26700(); /* add problem codes*/
              KS0KW00.KS0KW-ADD-UPD-FLAG = "Y"; /* set switch*/
            end
          else

            KS0K-26800(); /* delete problem codes for*/
                                  /* this row*/
            if (KS0KM002.KS0KM-CSTM-FEAT[1] == "  " /* if no new problem cds*/
             && KS0KM002.KS0KM-CSTM-FEAT[2] == "  " 
             && KS0KM002.KS0KM-CSTM-FEAT[3] == "  " 
             && KS0KM002.KS0KM-CSTM-FEAT[4] == "  " 
             && KS0KM002.KS0KM-CSTM-FEAT[5] == "  " 
             && KS0KM002.KS0KM-CSTM-FOXING[1] == "N"
             && KS0KM002.KS0KM-CSTM-FOXING[2] == "N"
             && KS0KM002.KS0KM-CSTM-FOXING[3] == "N"
             && KS0KM002.KS0KM-CSTM-CONFIRMED == "  "
             && KS0KM002.KS0KM-CSTM-TYPE == " ")   
              VCPROD01.KS-PRBM-NBR = 0;
              KS0K-26600(); /* update vcprod01 prbm nbr*/
              KS0KW00.KS0KW-ADD-UPD-FLAG = "Y"; /* set switch*/
            else
              KS0K-26500(); /* get next problem number*/
              VCPROD01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
              VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
              KS0K-26600(); /* update vcprod01 prbm nbr*/
              KS0K-26700(); /* add problem codes*/
              KS0KW00.KS0KW-ADD-UPD-FLAG = "Y"; /* set switch*/
            end
          end
        end
      end
    end
    KS0K-21260(); /* close set for vcprod01*/
  end

  /* --------------------------------------------------------------*/
  /* After a successful add/update, set the last changed row key to*/
  /* the key of the row just added for cursor positioning on map 1.*/
  /* Also, commit all changes.*/
  /* --------------------------------------------------------------*/

  if (KS0KW00.KS0KW-ADD-UPD-FLAG == "Y") /* successfully added/updated?*/
    KS0KW00.KS0KW-ADD-UPD-FLAG = "N"; /* reset flag*/
    KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-NEXT-SEL-ROW;
    converseLib.validationFailed(1); /* update successful message*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
  end

  if (KS0KW00.KS0KW-FNC == "C")

    KS0K-26100(); /* Search for next selection*/

  end
end // end KS0K-26000

// search for next selection
Function KS0K-26100()
  /* ------------------------------------------------------------*/
  /* restore index value of last selected row, which was*/
  /* just changed.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-SEL-INDEX; /* restore index value*/
  KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* set up by 1*/

  /* ------------------------------------------------------------*/
  /* Determine if another line was selected for viewing.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-NEXT-SEL-ROW;

  KS0KW00.KS0KW-NEXT-SEL-ROW = " "; /* clear next selected row*/

  while (KS0KW00.KS0KW-NEXT-SEL-ROW == " " /* until a row is found*/
   && KS0KW00.KS0KW-IXM <= 11) /* and index <= 11*/

    if (KS0KW00.KS0KW-SELECTED-ROWS[KS0KW-IXM] > " ") /* Line selected?*/
      KS0KW00.KS0KW-NEXT-SEL-ROW = KS0KW00.KS0KW-SELECTED-ROWS[KS0KW-IXM]; /* next row to chg*/
      KS0KW00.KS0KW-LAST-CHGD-ROW = KS0KW00.KS0KW-SELECTED-ROWS[KS0KW-IXM]; /* last row changed*/
      KS0KW00.KS0KW-SEL-INDEX = KS0KW00.KS0KW-IXM; /* save index value*/
      KS0KW00.KS0KW-SWR = "Y"; /* Request for data switch*/
      KS0KW00.KS0KW-SWF = "Y"; /* Request format map 2*/
      KS0KW00.KS0KW-SWD = "2"; /* Map to be displayed*/
      return; /* process next row*/
    else
      KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* set up by 1*/
    end
  end

  /* ------------------------------------------------------------*/
  /* clear table of selected rows*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-IXM = 1; /* initialize index*/

  while (KS0KW00.KS0KW-IXM <= 11) /* while index <= 11*/
    KS0KW00.KS0KW-SELECTED-ROWS[KS0KW-IXM] = " "; /* clear field*/
    KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* set up by 1*/
  end

  KS0KW00.KS0KW-SWR = "Y"; /* Request for data switch*/
  KS0KW00.KS0KW-SWF = "Y"; /* format the map*/
  KS0KW00.KS0KW-SWD = "1"; /* Map to be displayed switch*/

  exit stack; /* go display screen #1*/

end // end KS0K-26100

// process valid request logic
Function KS0K-26200()

       /* delete row was requested*/

  VPLNMT01.XGPCD = KS0KW02.KS0KW-GPC-CD;
  VPLNMT01.SY1STNBR = KS0KW02.KS0KW-STY-NBR;
  VPLNMT01.SY2CLRID = KS0KW02.KS0KW-COLR-CD-ID;
  VPLNMT01.XDMCD = KS0KW02.KS0KW-DIM-CD;
  VPLNMT01.KS-XPRMT-STY-NBR = KS0KW02.KS0KW-X-STYLE;
  VPLNMT01.XNDCD = KS0KW02.KS0KW-DEPT-ID;
  VPLNMT01.XCTCD = KS0KW02.KS0KW-CTRY-CD;
  KS0KW00.KS0KW-YEAR = KS0KW02.KS0KW-PO-ID-PRD-YR;
  KS0KW00.KS0KW-MONTH = KS0KW02.KS0KW-PO-ID-PRD-MO;
  KS0KW00.KS0KW-DAY = KS0KW02.KS0KW-PO-ID-DLV-MO;

  if (KS0KW00.KS0KW-MONTH > 0 /* If po month rng gt zero exists*/
   || KS0KW00.KS0KW-DAY > 0) 
    if (KS0KW00.KS0KW-YEAR > 90)
      KS0KW00.KS0KW-CENTURY = 19;
    else
      KS0KW00.KS0KW-CENTURY = 20;
    end
  else
    KS0KW00.KS0KW-CENTURY = 0;
  end

  VPLNMT01.PC3POIDT = KS0KW00.KS0KW-DATE-WORK;
  VPLNMT01.FY1FCTYC = KS0KW02.KS0KW-FCTY-CD;
  KS0KW00.KS0KW-RDG-DATE-WORK = KS0KW02.KS0KW-READING-DT;
  KS0KW00.KS0KW-YEAR = KS0KW00.KS0KW-RDG-YEAR;
  KS0KW00.KS0KW-MONTH = KS0KW00.KS0KW-RDG-MONTH;
  KS0KW00.KS0KW-DAY = KS0KW00.KS0KW-RDG-DAY;

  if (KS0KW00.KS0KW-YEAR > 90)
    KS0KW00.KS0KW-CENTURY = 19;
  else
    KS0KW00.KS0KW-CENTURY = 20;
  end
  VPLNMT01.KS-PLANIMETER-DT = KS0KW00.KS0KW-DATE-WORK;

  VPLNMT01.XXXRKNBR = 1;

  KS0K-26210(); /* delete old rank 1 row*/

  VPLNMT01.XXXRKNBR = 2;

  KS0K-26210(); /* delete old rank 2 row*/

end // end KS0K-26200

// delete dcustm.vplnmt01 row
Function KS0K-26210()
  /* ------------------------------------------------------------*/
  /* Delete the requested row from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6380" ("D ", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26210"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW FROM TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end KS0K-26210

// process valid request logic
Function KS0K-26300()
   /* ---------------------------------------------------------------*/
   /* this is for 'change' transactions*/
   /* keys have not changed*/
   /* move original keys to row*/
   /* ---------------------------------------------------------------*/

  VPLNMT01.XGPCD = KS0KW02.KS0KW-GPC-CD;
  VPLNMT01.SY1STNBR = KS0KW02.KS0KW-STY-NBR;
  VPLNMT01.SY2CLRID = KS0KW02.KS0KW-COLR-CD-ID;
  VPLNMT01.XDMCD = KS0KW02.KS0KW-DIM-CD;
  VPLNMT01.KS-XPRMT-STY-NBR = KS0KW02.KS0KW-X-STYLE;
  VPLNMT01.XNDCD = KS0KW02.KS0KW-DEPT-ID;
  VPLNMT01.XCTCD = KS0KW02.KS0KW-CTRY-CD;
  KS0KW00.KS0KW-YEAR = KS0KW02.KS0KW-PO-ID-PRD-YR;
  KS0KW00.KS0KW-MONTH = KS0KW02.KS0KW-PO-ID-PRD-MO;
  KS0KW00.KS0KW-DAY = KS0KW02.KS0KW-PO-ID-DLV-MO;

  if (KS0KW00.KS0KW-MONTH > 0 /* If po month rng gt zero entered.*/
   || KS0KW00.KS0KW-DAY > 0) 
    if (KS0KW00.KS0KW-YEAR > 90)
      KS0KW00.KS0KW-CENTURY = 19;
    else
      KS0KW00.KS0KW-CENTURY = 20;
    end
  else
    KS0KW00.KS0KW-CENTURY = 0;
  end

  VPLNMT01.PC3POIDT = KS0KW00.KS0KW-DATE-WORK;
  VPLNMT01.FY1FCTYC = KS0KW02.KS0KW-FCTY-CD;
  KS0KW00.KS0KW-RDG-DATE-WORK = KS0KW02.KS0KW-READING-DT;
  KS0KW00.KS0KW-YEAR = KS0KW00.KS0KW-RDG-YEAR;
  KS0KW00.KS0KW-MONTH = KS0KW00.KS0KW-RDG-MONTH;
  KS0KW00.KS0KW-DAY = KS0KW00.KS0KW-RDG-DAY;
  if (KS0KW00.KS0KW-YEAR > 90)
    KS0KW00.KS0KW-CENTURY = 19;
  else
    KS0KW00.KS0KW-CENTURY = 20;
  end
  VPLNMT01.KS-PLANIMETER-DT = KS0KW00.KS0KW-DATE-WORK;

   /* ---------------------------------------------------------------*/
   /* if the rank #2 pcts are zeros, go to check rank #1 pcts. if*/
   /* any pcts values have been entered, process them.*/
   /* ---------------------------------------------------------------*/

  if (KS0KW02.KS0KW-PLNM-PCT-TWO[1] == 0
   && KS0KW02.KS0KW-PLNM-PCT-TWO[2] == 0
   && KS0KW02.KS0KW-PLNM-PCT-TWO[3] == 0
   && KS0KW02.KS0KW-PLNM-PCT-TWO[4] == 0)

    KS0K-26310();

  else

    KS0K-26320();

  end

end // end KS0K-26300

// process valid request logic
Function KS0K-26310()
   /* --------------------------------------------------------------------*/
   /* if rank #1 pcts are zeros, we have no action to take.*/
   /* if rank #1 pcts are not zeros, perform the process which*/
   /* handles them.*/
   /* --------------------------------------------------------------------*/

  if (KS0KW02.KS0KW-PLNM-PCT-ONE[1] == 0
   && KS0KW02.KS0KW-PLNM-PCT-ONE[2] == 0
   && KS0KW02.KS0KW-PLNM-PCT-ONE[3] == 0
   && KS0KW02.KS0KW-PLNM-PCT-ONE[4] == 0)

     /* at this point, both lines of the pct's are zeros*/
     /* this is taken care of in the edits.*/

  else

    KS0K-26311();

  end

end // end KS0K-26310

// process valid request logic
Function KS0K-26311()
   /* -------------------------------------------------------------------*/
   /* we are here because a 'change' transaction has NO pct values in the*/
   /* rank #2 line, but has pct values in the rank #1 line. we need to*/
   /* update the rank #1 row and delete the rank #2 row.*/
   /* -------------------------------------------------------------------*/

  VPLNMT01.XXXRKNBR = 1;

  KS0K-26312(); /* read for rank 1 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
    if (KS0KW00.KS0KW-SAVE-CHG-CNT-1 != VPLNMT01.ZZZCHGCT)
      converseLib.validationFailed(12); /* updated by another*/
      set KS0KM002.KS0KM-GPC-CD cursor, bold;
      return;
    else
      VPLNMT01.XXXRKNBR = 1;
      KS0K-26313(); /* update rank 1 row*/
      KS0KW00.KS0KW-ADD-UPD-FLAG = "Y";
    end
  else
          /* logic error*/
  end

  VPLNMT01.XXXRKNBR = 2;

  KS0K-26312(); /* read for rank 2 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
    if (KS0KW00.KS0KW-SAVE-CHG-CNT-2 != VPLNMT01.ZZZCHGCT)
      converseLib.validationFailed(12); /* updated by another*/
      set KS0KM002.KS0KM-GPC-CD cursor, bold;
      return;
    else
      VPLNMT01.XXXRKNBR = 2;
      KS0K-26210(); /* delete rank 2 row*/
    end
  end

end // end KS0K-26311

// select dcustm.vplnmt01 row
Function KS0K-26312()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6380" ("S ", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26312"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FROM TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end KS0K-26312

// update changed table row
Function KS0K-26313()
  /* ------------------------------------------------------------*/
  /* move in common rank 1 & 2 data*/
  /* ------------------------------------------------------------*/

  VPLNMT01.XMCCD[1] = "LTR";
  VPLNMT01.XMCCD[2] = "R/P";
  VPLNMT01.XMCCD[3] = "TEX";

  if (KS0KM002.KS0KM-MAT-CTNT-CD > " ") /* if entered*/
    VPLNMT01.XMCCD[4] = KS0KM002.KS0KM-MAT-CTNT-CD;
  else
    VPLNMT01.XMCCD[4] = "OTH";
  end

  KS0KW00.KS0KW-IX3 = 1;

  if (VPLNMT01.XXXRKNBR == 1)
    while (KS0KW00.KS0KW-IX3 <= 4)
      VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX3] = KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX3];
      KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 + 1; /* set index up by 1*/
    end
  else
    while (KS0KW00.KS0KW-IX3 <= 4)
      VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX3] = KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX3];
      KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 + 1; /* set index up by 1*/
    end
  end

  VPLNMT01.XXXUSER = COMMAREA.CAUSERID;

  XX0XS01(); /* get date & time*/

  VPLNMT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPLNMT01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  /* ------------------------------------------------------------*/
  /* Update the table row*/
  /* ------------------------------------------------------------*/

  try
    call "IO6380" ("U ", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
  end /* update a row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* row updated?*/
    return; /* return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* If invalid return code, return an error message to the user.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26313"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26313

// process valid request logic
Function KS0K-26320()
   /* ------------------------------------------------------------------*/
   /* we are here because a 'change' transaction has been submitted and*/
   /* there are pct values in the rank #2 line.*/
   /* ------------------------------------------------------------------*/

  if (KS0KW02.KS0KW-PLNM-PCT-ONE[1] == 0
   && KS0KW02.KS0KW-PLNM-PCT-ONE[2] == 0
   && KS0KW02.KS0KW-PLNM-PCT-ONE[3] == 0
   && KS0KW02.KS0KW-PLNM-PCT-ONE[4] == 0)

    KS0K-26321();

  else

    KS0K-26323();

  end
end // end KS0K-26320

// process valid request logic
Function KS0K-26321()
   /* ------------------------------------------------------------------*/
   /* we are here because a 'change' transaction has been submitted and*/
   /* there are pct values in the rank #2 line, but the rank #1 pcts are*/
   /* zeros. we need to delete the rank #1 row, delete the rank #2 row*/
   /* and then add a rank #1 row using the pct values from the rank #2*/
   /* line.*/
   /* ------------------------------------------------------------------*/

  VPLNMT01.XXXRKNBR = 1;

  KS0K-26312(); /* read for rank 1 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
    if (KS0KW00.KS0KW-SAVE-CHG-CNT-1 != VPLNMT01.ZZZCHGCT)
      converseLib.validationFailed(12); /* updated by another*/
      set KS0KM002.KS0KM-GPC-CD cursor, bold;
      return;
    else
      VPLNMT01.XXXRKNBR = 1;
      KS0K-26210(); /* delete rank 1 row*/
    end
  else
          /* logic error - row should be there*/
  end

  VPLNMT01.XXXRKNBR = 2;

  KS0K-26312(); /* read for rank 2 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
    if (KS0KW00.KS0KW-SAVE-CHG-CNT-2 != VPLNMT01.ZZZCHGCT)
      converseLib.validationFailed(12); /* updated by another*/
      set KS0KM002.KS0KM-GPC-CD cursor, bold;
      return;
    else
      VPLNMT01.XXXRKNBR = 2;
      KS0K-26210(); /* delete rank 2 row*/
    end
  else
          /* logic error - row should be there*/
  end

  KS0KW02.KS0KW-PLNM-PCT-ONE[1] = KS0KW02.KS0KW-PLNM-PCT-TWO[1];
  KS0KW02.KS0KW-PLNM-PCT-ONE[2] = KS0KW02.KS0KW-PLNM-PCT-TWO[2];
  KS0KW02.KS0KW-PLNM-PCT-ONE[3] = KS0KW02.KS0KW-PLNM-PCT-TWO[3];
  KS0KW02.KS0KW-PLNM-PCT-ONE[4] = KS0KW02.KS0KW-PLNM-PCT-TWO[4];

  VPLNMT01.XXXRKNBR = 1;

  KS0K-26322(); /* add rank 1 row*/

  KS0KW00.KS0KW-ADD-UPD-FLAG = "Y";

end // end KS0K-26321

// add a dcustm.vplnmt01 row
Function KS0K-26322()
  /* ------------------------------------------------------------*/
  /* Add a row to DCUSTM.VPLNMT01.*/
  /* ------------------------------------------------------------*/

  VPLNMT01.XMCCD[1] = "LTR";
  VPLNMT01.XMCCD[2] = "R/P";
  VPLNMT01.XMCCD[3] = "TEX";

  if (KS0KM002.KS0KM-MAT-CTNT-CD > " ") /* if entered*/
    VPLNMT01.XMCCD[4] = KS0KM002.KS0KM-MAT-CTNT-CD;
  else
    VPLNMT01.XMCCD[4] = "OTH";
  end

  if (VPLNMT01.XXXRKNBR == 1)
    KS0KW00.KS0KW-IX3 = 1;

    while (KS0KW00.KS0KW-IX3 <= 4)
      VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX3] = KS0KW02.KS0KW-PLNM-PCT-ONE[KS0KW-IX3];
      KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 + 1; /* set index up by 1*/
    end
  else
    KS0KW00.KS0KW-IX3 = 1;

    while (KS0KW00.KS0KW-IX3 <= 4)
      VPLNMT01.KS-PLANIMETER-PCT[KS0KW-IX3] = KS0KW02.KS0KW-PLNM-PCT-TWO[KS0KW-IX3];
      KS0KW00.KS0KW-IX3 = KS0KW00.KS0KW-IX3 + 1; /* set index up by 1*/
    end
  end

  VPLNMT01.XXXUSER = COMMAREA.CAUSERID;

  XX0XS01(); /* get date & time*/

  VPLNMT01.ZZZSDT = XX0XW01.XX0XWDAT;
  VPLNMT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPLNMT01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO6380" ("A ", SQLCA, VPLNMT01) {isNoRefresh = yes, isExternal = yes};
  end /* add a row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    KS0KW00.KS0KW-SAVE-ADD-CNT = KS0KW00.KS0KW-SAVE-ADD-CNT + 1;
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* If data not added, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26322"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26322

// process valid request logic
Function KS0K-26323()
   /* --------------------------------------------------------------------*/
   /* we are here because a 'change' transaction has been submitted and*/
   /* there are pct values in the rank #1 and #2 lines. the rank #1 row*/
   /* must be an update of an existing row, but the rank #2 row may be*/
   /* an addition.*/
   /* --------------------------------------------------------------------*/

  VPLNMT01.XXXRKNBR = 2;

  KS0K-26312(); /* read for rank 2 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
    if (KS0KW00.KS0KW-SAVE-CHG-CNT-2 != VPLNMT01.ZZZCHGCT)
      converseLib.validationFailed(12); /* updated by another*/
      set KS0KM002.KS0KM-GPC-CD cursor, bold;
      return;
    else
      VPLNMT01.XXXRKNBR = 2;
      KS0K-26313(); /* update rank 2 row*/
      KS0KW00.KS0KW-ADD-UPD-FLAG = "Y";
    end
  else

    VPLNMT01.XXXRKNBR = 2;

    KS0K-26322(); /* add rank 2 row*/
    KS0KW00.KS0KW-ADD-UPD-FLAG = "Y";

  end

  VPLNMT01.XXXRKNBR = 1;

  KS0K-26312(); /* read for rank 1 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
    if (KS0KW00.KS0KW-SAVE-CHG-CNT-1 != VPLNMT01.ZZZCHGCT)
      converseLib.validationFailed(12); /* updated by another*/
      set KS0KM002.KS0KM-GPC-CD cursor, bold;
      return;
    else
      VPLNMT01.XXXRKNBR = 1;
      KS0K-26313(); /* update rank 1 row*/
      KS0KW00.KS0KW-ADD-UPD-FLAG = "Y";
    end
  end
end // end KS0K-26323

// processing valid request logic
Function KS0K-26400()

     /* keys were changed*/
     /* move new keys to row*/
     /* read vplnmt01 to see if new keys exist*/

  VPLNMT01.XGPCD = KS0KM002.KS0KM-GPC-CD;
  VPLNMT01.SY1STNBR = KS0KM002.KS0KM-STY-NBR;
  VPLNMT01.SY2CLRID = KS0KM002.KS0KM-COLR-CD-ID;
  VPLNMT01.XDMCD = KS0KM002.KS0KM-DIM-CD;
  VPLNMT01.KS-XPRMT-STY-NBR = KS0KM002.KS0KM-XPRMT-STY-NBR;
  VPLNMT01.XNDCD = KS0KM002.KS0KM-DEPT-ID;
  VPLNMT01.XCTCD = KS0KM002.KS0KM-CTRY-CD;
  KS0KW00.KS0KW-YEAR = KS0KM002.KS0KM-PRDCTN-YR;
  KS0KW00.KS0KW-MONTH = KS0KM002.KS0KM-PRDCTN-MO;
  KS0KW00.KS0KW-DAY = KS0KM002.KS0KM-DLVR-MO;

  if (KS0KW00.KS0KW-MONTH > 0 /* If po month rng gt zero entered*/
   || KS0KW00.KS0KW-DAY > 0) 
    if (KS0KW00.KS0KW-YEAR > 90)
      KS0KW00.KS0KW-CENTURY = 19;
    else
      KS0KW00.KS0KW-CENTURY = 20;
    end
  else
    KS0KW00.KS0KW-CENTURY = 0;
  end

  VPLNMT01.PC3POIDT = KS0KW00.KS0KW-DATE-WORK;
  VPLNMT01.FY1FCTYC = KS0KM002.KS0KM-FCTY-CD;
  KS0KW00.KS0KW-RDG-DATE-WORK = KS0KM002.KS0KM-PLANIMETER-DT;
  KS0KW00.KS0KW-YEAR = KS0KW00.KS0KW-RDG-YEAR;
  KS0KW00.KS0KW-MONTH = KS0KW00.KS0KW-RDG-MONTH;
  KS0KW00.KS0KW-DAY = KS0KW00.KS0KW-RDG-DAY;

  if (KS0KW00.KS0KW-YEAR > 90)
    KS0KW00.KS0KW-CENTURY = 19;
  else
    KS0KW00.KS0KW-CENTURY = 20;
  end

  VPLNMT01.KS-PLANIMETER-DT = KS0KW00.KS0KW-DATE-WORK;

  VPLNMT01.XXXRKNBR = 1;

  KS0K-26312(); /* read for rank 1 row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* row does not exist*/

    KS0K-26410();

  else

    KS0K-26420(); /* row exists already - error*/

  end
end // end KS0K-26400

// process valid request logic
Function KS0K-26410()

       /* keys were changed*/
       /* new row does not exist*/
       /* move OLD keys to row*/
       /* delete OLD rows*/

  VPLNMT01.XGPCD = KS0KW02.KS0KW-GPC-CD;
  VPLNMT01.SY1STNBR = KS0KW02.KS0KW-STY-NBR;
  VPLNMT01.SY2CLRID = KS0KW02.KS0KW-COLR-CD-ID;
  VPLNMT01.XDMCD = KS0KW02.KS0KW-DIM-CD;
  VPLNMT01.KS-XPRMT-STY-NBR = KS0KW02.KS0KW-X-STYLE;
  VPLNMT01.XNDCD = KS0KW02.KS0KW-DEPT-ID;
  VPLNMT01.XCTCD = KS0KW02.KS0KW-CTRY-CD;
  KS0KW00.KS0KW-YEAR = KS0KW02.KS0KW-PO-ID-PRD-YR;
  KS0KW00.KS0KW-MONTH = KS0KW02.KS0KW-PO-ID-PRD-MO;
  KS0KW00.KS0KW-DAY = KS0KW02.KS0KW-PO-ID-DLV-MO;

  if (KS0KW00.KS0KW-MONTH > 0 /* If po month rng gt zero exists*/
   || KS0KW00.KS0KW-DAY > 0) 
    if (KS0KW00.KS0KW-YEAR > 90)
      KS0KW00.KS0KW-CENTURY = 19;
    else
      KS0KW00.KS0KW-CENTURY = 20;
    end
  else
    KS0KW00.KS0KW-CENTURY = 0;
  end

  VPLNMT01.PC3POIDT = KS0KW00.KS0KW-DATE-WORK;
  VPLNMT01.FY1FCTYC = KS0KW02.KS0KW-FCTY-CD;
  KS0KW00.KS0KW-RDG-DATE-WORK = KS0KW02.KS0KW-READING-DT;
  KS0KW00.KS0KW-YEAR = KS0KW00.KS0KW-RDG-YEAR;
  KS0KW00.KS0KW-MONTH = KS0KW00.KS0KW-RDG-MONTH;
  KS0KW00.KS0KW-DAY = KS0KW00.KS0KW-RDG-DAY;

  if (KS0KW00.KS0KW-YEAR > 90)
    KS0KW00.KS0KW-CENTURY = 19;
  else
    KS0KW00.KS0KW-CENTURY = 20;
  end
  VPLNMT01.KS-PLANIMETER-DT = KS0KW00.KS0KW-DATE-WORK;

  VPLNMT01.XXXRKNBR = 1;

  KS0K-26210(); /* delete old rank 1 row*/

  VPLNMT01.XXXRKNBR = 2;

  KS0K-26210(); /* delete old rank 2 row*/

       /* move NEW keys to row*/
       /* prepare to add new row(s)*/

  VPLNMT01.XGPCD = KS0KM002.KS0KM-GPC-CD;
  VPLNMT01.SY1STNBR = KS0KM002.KS0KM-STY-NBR;
  VPLNMT01.SY2CLRID = KS0KM002.KS0KM-COLR-CD-ID;
  VPLNMT01.XDMCD = KS0KM002.KS0KM-DIM-CD;
  VPLNMT01.KS-XPRMT-STY-NBR = KS0KM002.KS0KM-XPRMT-STY-NBR;
  VPLNMT01.XNDCD = KS0KM002.KS0KM-DEPT-ID;
  VPLNMT01.XCTCD = KS0KM002.KS0KM-CTRY-CD;
  KS0KW00.KS0KW-YEAR = KS0KM002.KS0KM-PRDCTN-YR;
  KS0KW00.KS0KW-MONTH = KS0KM002.KS0KM-PRDCTN-MO;
  KS0KW00.KS0KW-DAY = KS0KM002.KS0KM-DLVR-MO;

  if (KS0KW00.KS0KW-MONTH > 0 /* If po month rng gt zero exists*/
   || KS0KW00.KS0KW-DAY > 0) 
    if (KS0KW00.KS0KW-YEAR > 90)
      KS0KW00.KS0KW-CENTURY = 19;
    else
      KS0KW00.KS0KW-CENTURY = 20;
    end
  else
    KS0KW00.KS0KW-CENTURY = 0;
  end

  VPLNMT01.PC3POIDT = KS0KW00.KS0KW-DATE-WORK;
  VPLNMT01.FY1FCTYC = KS0KM002.KS0KM-FCTY-CD;
  KS0KW00.KS0KW-RDG-DATE-WORK = KS0KM002.KS0KM-PLANIMETER-DT;
  KS0KW00.KS0KW-YEAR = KS0KW00.KS0KW-RDG-YEAR;
  KS0KW00.KS0KW-MONTH = KS0KW00.KS0KW-RDG-MONTH;
  KS0KW00.KS0KW-DAY = KS0KW00.KS0KW-RDG-DAY;

  if (KS0KW00.KS0KW-YEAR > 90)
    KS0KW00.KS0KW-CENTURY = 19;
  else
    KS0KW00.KS0KW-CENTURY = 20;
  end

  VPLNMT01.KS-PLANIMETER-DT = KS0KW00.KS0KW-DATE-WORK;

      /* if rank #1 pcts are zeros, we will add a rank #1 row*/
      /* using rank #2 pcts. this should not happen here because*/
      /* the edits check for this and move the pct values from*/
      /* the rank #2 line to the rank #1 line.*/

  if (KS0KW02.KS0KW-PLNM-PCT-ONE[1] == 0
   && KS0KW02.KS0KW-PLNM-PCT-ONE[2] == 0
   && KS0KW02.KS0KW-PLNM-PCT-ONE[3] == 0
   && KS0KW02.KS0KW-PLNM-PCT-ONE[4] == 0)

    KS0K-26411(); /* add rank #1 row using*/
                                  /* rank #2 pcts*/
  else

    KS0K-26412();

  end

   /* -------------------------------------------------------------------*/
   /* set the keys for the row just added in next-sel-row for cursor*/
   /* positioning when we return to map #1.*/
   /* -------------------------------------------------------------------*/

  KS0KW00.KS0KW-NEXT-STYLE = KS0KM002.KS0KM-STY-NBR;
  KS0KW00.KS0KW-NEXT-X-STYLE = KS0KM002.KS0KM-XPRMT-STY-NBR;
  KS0KW00.KS0KW-NEXT-COLOR = KS0KM002.KS0KM-COLR-CD-ID;
  KS0KW00.KS0KW-NEXT-DIM = KS0KM002.KS0KM-DIM-CD;
  KS0KW00.KS0KW-NEXT-XNDCD = KS0KM002.KS0KM-DEPT-ID;
  KS0KW00.KS0KW-NEXT-XCTCD = KS0KM002.KS0KM-CTRY-CD;
  KS0KW00.KS0KW-YEAR = KS0KM002.KS0KM-PRDCTN-YR;
  KS0KW00.KS0KW-MONTH = KS0KM002.KS0KM-PRDCTN-MO;
  KS0KW00.KS0KW-DAY = KS0KM002.KS0KM-DLVR-MO;

  if (KS0KW00.KS0KW-MONTH > 0 /* If po month rng gt zero exists*/
   || KS0KW00.KS0KW-DAY > 0) 
    if (KS0KW00.KS0KW-YEAR > 90)
      KS0KW00.KS0KW-CENTURY = 19;
    else
      KS0KW00.KS0KW-CENTURY = 20;
    end
  else
    KS0KW00.KS0KW-CENTURY = 0;
  end

  KS0KW00.KS0KW-NEXT-PC3POIDT = KS0KW00.KS0KW-DATE-WORK;
  KS0KW00.KS0KW-NEXT-FY1FCTYC = KS0KM002.KS0KM-FCTY-CD;
  KS0KW00.KS0KW-NEXT-PLNMT-DT = KS0KM002.KS0KM-PLANIMETER-DT;

  KS0KW00.KS0KW-IX2 = 1;

  KS0K-11412();

  KS0KW00.KS0KW-NEXT-DEPT = KS0KW01.KS0KW-DTL-DEPT-ID[1];
  KS0KW00.KS0KW-NEXT-READING-FOR = KS0KW01.KS0KW-DTL-READING-FOR[1];

  KS0KW00.KS0KW-NEXT-RANK-NBR = "1)";

end // end KS0K-26410

// processing valid request logic
Function KS0K-26411()

   /* if rank #2 pcts are also zeros, there is no action to take*/
   /* this situation should have been caught in the edits.*/

  if (KS0KW02.KS0KW-PLNM-PCT-TWO[1] == 0
   && KS0KW02.KS0KW-PLNM-PCT-TWO[2] == 0
   && KS0KW02.KS0KW-PLNM-PCT-TWO[3] == 0
   && KS0KW02.KS0KW-PLNM-PCT-TWO[4] == 0)

           /* next sentence*/
  else
           /* move rank #2 pcts to rank #1 pcts*/

    KS0KW02.KS0KW-PLNM-PCT-ONE[1] = KS0KW02.KS0KW-PLNM-PCT-TWO[1];
    KS0KW02.KS0KW-PLNM-PCT-ONE[2] = KS0KW02.KS0KW-PLNM-PCT-TWO[2];
    KS0KW02.KS0KW-PLNM-PCT-ONE[3] = KS0KW02.KS0KW-PLNM-PCT-TWO[3];
    KS0KW02.KS0KW-PLNM-PCT-ONE[4] = KS0KW02.KS0KW-PLNM-PCT-TWO[4];

    VPLNMT01.XXXRKNBR = 1;

    KS0K-26322(); /* add rank 1 row*/
    KS0KW00.KS0KW-ADD-UPD-FLAG = "Y";

  end
end // end KS0K-26411

// processing valid request logic
Function KS0K-26412()

   /* add rank #1 row using rank #1 pcts*/

  VPLNMT01.XXXRKNBR = 1;

  KS0K-26322(); /* add rank 1 row*/
  KS0KW00.KS0KW-ADD-UPD-FLAG = "Y";

   /* if rank #2 pcts contain data, add a rank #2 row*/

  if (KS0KW02.KS0KW-PLNM-PCT-TWO[1] > 0
   || KS0KW02.KS0KW-PLNM-PCT-TWO[2] > 0
   || KS0KW02.KS0KW-PLNM-PCT-TWO[3] > 0
   || KS0KW02.KS0KW-PLNM-PCT-TWO[4] > 0)

    VPLNMT01.XXXRKNBR = 2;

    KS0K-26322(); /* add rank 2 row*/
    KS0KW00.KS0KW-ADD-UPD-FLAG = "Y";

  end
end // end KS0K-26412

// sets attributes for map
Function KS0K-26420()
  converseLib.validationFailed(108); /* row already exists*/

  if (COMMAREA.CAFROMAP == "KS0I") /* if from KS0I*/
    set KS0KM002.KS0KM-DEPT-ID cursor, bold; /* hilite key fields*/
    set KS0KM002.KS0KM-CTRY-CD bold;
    set KS0KM002.KS0KM-PRDCTN-YR bold;
    set KS0KM002.KS0KM-PRDCTN-MO bold;
    set KS0KM002.KS0KM-DLVR-MO bold;
    set KS0KM002.KS0KM-FCTY-CD bold;
    set KS0KM002.KS0KM-PLANIMETER-DT bold;
  else
    set KS0KM002.KS0KM-STY-NBR bold; /* hilight key fields*/
    set KS0KM002.KS0KM-XPRMT-STY-NBR cursor, bold;
    set KS0KM002.KS0KM-COLR-CD-ID bold;
    set KS0KM002.KS0KM-DIM-CD bold;
    set KS0KM002.KS0KM-DEPT-ID bold;
    set KS0KM002.KS0KM-CTRY-CD bold;
    set KS0KM002.KS0KM-PRDCTN-YR bold;
    set KS0KM002.KS0KM-PRDCTN-MO bold;
    set KS0KM002.KS0KM-DLVR-MO bold;
    set KS0KM002.KS0KM-FCTY-CD bold;
    set KS0KM002.KS0KM-PLANIMETER-DT bold;
  end

  KSWREC.XXXPRCNM = "26420"; /* module identification*/
end // end KS0K-26420

// get next nbr DCUSTM.VKSCTL01
Function KS0K-26500()
  /* ------------------------------------------------------------*/
  /* Get next text number or problem number from DCUSTM.VKSCTL01.*/
  /* ------------------------------------------------------------*/

  set VKSCTL01 empty;

  XX0XS01(); /* Get system date and time*/

  VKSCTL01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VKSCTL01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO6160" ("G2", SQLCA, VKSCTL01) {isNoRefresh = yes, isExternal = yes};
  end
                                       /* Select table row*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26500"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT PROBLEM NBR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSCTL01.VKSCTL01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26500

// update DCUSTM.VCPROD01
Function KS0K-26600()
  /* ------------------------------------------------------------*/
  /* Update a row to the DCUSTM.VCPROD01 table.*/
  /* ------------------------------------------------------------*/

  XX0XS01(); /* Get system date and time*/

  VCPROD01.XXXUSRID = COMMAREA.CAUSERID; /* Move user id*/
  VCPROD01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
  VCPROD01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/

  try
    call "IO6130" ("U ", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26600"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD01.VCPROD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26600

// add prbm cds - DCUSTM.VCPROB01
Function KS0K-26700()
  /* ------------------------------------------------------------*/
  /* Format the type code and add.*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-CSTM-TYPE > " ") /* If prbm exists*/
    if (KS0KM002.KS0KM-CSTM-TYPE == "O") /* If other*/

      VCPROB01.YKP-PRBM-CD = "FO";
    else
      if (KS0KM002.KS0KM-CSTM-TYPE == "S") /* If sport/spike*/

        VCPROB01.YKP-PRBM-CD = "FS";
      else
        if (KS0KM002.KS0KM-CSTM-TYPE == "T") /* If training*/

          VCPROB01.YKP-PRBM-CD = "FT";
        end
      end
    end
    KS0K-26710(); /* Format and add*/
  end

  /* ------------------------------------------------------------*/
  /* Format the confirmed code and add.*/
  /* ------------------------------------------------------------*/

  if (KS0KM002.KS0KM-CSTM-CONFIRMED > " ") /* If prbm exists*/
    if (KS0KM002.KS0KM-CSTM-CONFIRMED == "**")

      VCPROB01.YKP-PRBM-CD = "F1";
    else
      if (KS0KM002.KS0KM-CSTM-CONFIRMED == "--")

        VCPROB01.YKP-PRBM-CD = "F2";
      else
        if (KS0KM002.KS0KM-CSTM-CONFIRMED == "$$")

          VCPROB01.YKP-PRBM-CD = "F3";
        else
          if (KS0KM002.KS0KM-CSTM-CONFIRMED == "//")

            VCPROB01.YKP-PRBM-CD = "F4";
          end
        end
      end
    end
    KS0K-26710(); /* Add prbm row*/
  end

  /* ------------------------------------------------------------*/
  /* Format the foxing and add rows until end of data.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-IXM = 1; /* Display line index*/

  while (KS0KW00.KS0KW-IXM <= 3) /* Until end of data*/

    if (KS0KM002.KS0KM-CSTM-FOXING[KS0KW-IXM] == "Y") /* If prbm exists*/
      if (KS0KW-IXM == 1)

        VCPROB01.YKP-PRBM-CD = "F7";
      else
        if (KS0KW-IXM == 2)

          VCPROB01.YKP-PRBM-CD = "F8";
        else
          if (KS0KW-IXM == 3)

            VCPROB01.YKP-PRBM-CD = "F9";
          end
        end
      end
      KS0K-26710(); /* Add prbm row*/
    end

    KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* Increment index*/
  end

  /* ------------------------------------------------------------*/
  /* Format the others and add rows until end of data.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-IXM = 1; /* Display line index*/

  while (KS0KW00.KS0KW-IXM <= 5) /* Until end of data*/

    if (KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IXM] > " ") /* If prbm exists*/

      VCPROB01.YKP-PRBM-CD = KS0KM002.KS0KM-CSTM-FEAT[KS0KW-IXM];
      KS0K-26710(); /* Add prbm row*/
    end

    KS0KW00.KS0KW-IXM = KS0KW00.KS0KW-IXM + 1; /* Increment index*/
  end

end // end KS0K-26700

// add problem row if not exist
Function KS0K-26710()
  /* ------------------------------------------------------------*/
  /* Format the prbm info and add.*/
  /* ------------------------------------------------------------*/

  XX0XS01(); /* Get system date,time*/
  VCPROB01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move set up date*/
  VCPROB01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
  VCPROB01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
  VCPROB01.ZZZCHGCT = 0; /* Move chg count*/

  KS0K-26711(); /* Select unique*/
  if (SQLCA.VAGen_SQLCODE == 100) /* If prbm does not already exist*/
    KS0K-26712(); /* Add prbm row*/
  end

end // end KS0K-26710

// select unique DCUSTM.VCPROB01
Function KS0K-26711()

  try
    call "IO6140" ("S ", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or prbm does not exist*/

      return; /* Return to previous process*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26711"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26711

// add row to DCUSTM.VCPROB01
Function KS0K-26712()

  try
    call "IO6140" ("A ", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26712"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A TABLE ROW         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26712

// controls deleting of problems
Function KS0K-26800()
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be deleted.*/
  /* ------------------------------------------------------------*/

  KS0K-26810(); /* Select set and open cursor*/

  /* ------------------------------------------------------------*/
  /* Fetch and delete the data.*/
  /* ------------------------------------------------------------*/

  KS0KW00.KS0KW-VCPROB01-EOF-SW = "N"; /* Problem cursor EOF sw*/

  while (KS0KW00.KS0KW-VCPROB01-EOF-SW == "N") /* Until EOF*/

    KS0K-26820(); /* Fetch next row in the cursor*/

    if (KS0KW00.KS0KW-VCPROB01-EOF-SW == "N") /* If not EOF*/
      KS0K-26830(); /* Delete problem rows*/
    end
  end

  KS0K-26840(); /* Close the selected set cursor*/

end // end KS0K-26800

// sel set from DCUSTM.VCPROB01
Function KS0K-26810()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  set VCPROB01 empty; /* Clear row storage area*/

  VCPROB01.KS-PRBM-NBR = VCPROD01.KS-PRBM-NBR; /* Problem number*/

  try
    call "IO6140" ("S1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26810"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26810

// fetch next row from VCPROB01
Function KS0K-26820()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6140" ("N1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        KS0KW00.KS0KW-VCPROB01-EOF-SW = "Y";

        return;

      end
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26820"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26820

// del row from DCUSTM.VCPROD01
Function KS0K-26830()

  try
    call "IO6140" ("D ", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row already gone*/

      return; /* Return to previous process*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26830"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE A TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26830

// close set DCUSTM.VCPROB01
Function KS0K-26840()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6140" ("C1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26840"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0K-26840

//*** RECORD=KS0KW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0KW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KS0KW-IXM KS0KW-IXM ; 
  10 KS0KW-IX1 KS0KW-IX1 ; 
  10 KS0KW-IX2 KS0KW-IX2 ; 
  10 KS0KW-IX3 KS0KW-IX3 ; 
  10 KS0KW-IX4 KS0KW-IX4 ; 
  10 KS0KW-IX5 KS0KW-IX5 ; 
  10 KS0KW-DATA-CHGD-SW KS0KW-DATA-CHGD-SW ; 
  10 KS0KW-EOF-SW KS0KW-EOF-SW ; 
  10 KS0KW-VCPROD01-EOF-SW KS0KW-VCPROD01-EOF-SW ; 
  10 KS0KW-VCPROB01-EOF-SW KS0KW-VCPROB01-EOF-SW ; 
  10 KS0KW-INVALID-DATA-SW KS0KW-INVALID-DATA-SW ; 
  10 KS0KW-PROBLEMS-ADDED-SW KS0KW-PROBLEMS-ADDED-SW ; 
  10 KS0KW-WARNINGS-ISSUED-SW KS0KW-WARNINGS-ISSUED-SW ; 
  10 KS0KW-NO-PCT-1-SW KS0KW-NO-PCT-1-SW ; 
  10 KS0KW-NO-PCT-2-SW KS0KW-NO-PCT-2-SW ; 
  10 KS0KW-VALID-COLR-SW KS0KW-VALID-COLR-SW ; 
  10 KS0KW-SAVE-CHG-CNT-1 KS0KW-SAVE-CHG-CNT-1 ; 
  10 KS0KW-SAVE-CHG-CNT-2 KS0KW-SAVE-CHG-CNT-2 ; 
  10 KS0KW-SAVE-ADD-CNT KS0KW-SAVE-ADD-CNT ; 
  10 KS0KW-CSTM-FEAT-CNT KS0KW-CSTM-FEAT-CNT ; 
  10 KS0KW-CSTM-FEAT-SW KS0KW-CSTM-FEAT-SW ; 
  10 KS0KW-CSTM-FEAT-WARNING-SW KS0KW-CSTM-FEAT-WARNING-SW ; 
  10 * char(3) ; 
  10 KS0KW-NEXT-SEL-ROW KS0KW-NEXT-SEL-ROW ; 
    12 KS0KW-NEXT-KEY KS0KW-NEXT-KEY ; 
      15 KS0KW-NEXT-STYLE KS0KW-NEXT-STYLE ; 
      15 KS0KW-NEXT-X-STYLE KS0KW-NEXT-X-STYLE ; 
      15 KS0KW-NEXT-COLOR KS0KW-NEXT-COLOR ; 
      15 KS0KW-NEXT-DIM KS0KW-NEXT-DIM ; 
      15 KS0KW-NEXT-XNDCD KS0KW-NEXT-XNDCD ; 
      15 KS0KW-NEXT-FY1FCTYC KS0KW-NEXT-FY1FCTYC ; 
      15 KS0KW-NEXT-XCTCD KS0KW-NEXT-XCTCD ; 
      15 KS0KW-NEXT-PC3POIDT KS0KW-NEXT-PC3POIDT ; 
      15 KS0KW-NEXT-PLNMT-DT KS0KW-NEXT-PLNMT-DT ; 
      15 KS0KW-NEXT-RANK-NBR KS0KW-NEXT-RANK-NBR ; 
      15 * char(1) ; 
    12 KS0KW-NEXT-DATA KS0KW-NEXT-DATA ; 
      15 KS0KW-NEXT-DEPT KS0KW-NEXT-DEPT ; 
      15 KS0KW-NEXT-READING-FOR KS0KW-NEXT-READING-FOR ; 
  10 * char(3) ; 
  10 KS0KW-LAST-CHGD-ROW KS0KW-LAST-CHGD-ROW ; 
    12 KS0KW-LAST-KEY KS0KW-LAST-KEY ; 
      13 KS0KW-LAST-STY-CLR-DIM KS0KW-LAST-STY-CLR-DIM ; 
        15 KS0KW-LAST-STYLE KS0KW-LAST-STYLE ; 
        15 KS0KW-LAST-X-STYLE KS0KW-LAST-X-STYLE ; 
        15 KS0KW-LAST-COLOR KS0KW-LAST-COLOR ; 
        15 KS0KW-LAST-DIM KS0KW-LAST-DIM ; 
        15 KS0KW-LAST-XNDCD KS0KW-LAST-XNDCD ; 
        15 KS0KW-LAST-FY1FCTYC KS0KW-LAST-FY1FCTYC ; 
        15 KS0KW-LAST-XCTCD KS0KW-LAST-XCTCD ; 
      13 KS0KW-LAST-DATES KS0KW-LAST-DATES ; 
        15 KS0KW-LAST-PC3POIDT KS0KW-LAST-PC3POIDT ; 
        15 KS0KW-LAST-PLNMT-DT KS0KW-LAST-PLNMT-DT ; 
      13 KS0KW-LAST-RANK-NBR KS0KW-LAST-RANK-NBR ; 
      13 * char(1) ; 
    12 KS0KW-LAST-DATA KS0KW-LAST-DATA ; 
      15 KS0KW-LAST-DEPT KS0KW-LAST-DEPT ; 
      15 KS0KW-LAST-READING-FOR KS0KW-LAST-READING-FOR ; 
  10 * char(3) ; 
  10 KS0KW-PREV-RANK KS0KW-PREV-RANK ; 
  10 * char(1) ; 
  10 KS0KW-PREV-ROW-READ KS0KW-PREV-ROW-READ ; 
  10 KS0KW-SAVE-ROW-1 KS0KW-SAVE-ROW-1 ; 
  10 KS0KW-SAVE-ROW-2 KS0KW-SAVE-ROW-2 ; 
  10 KS0KW-COMP-ROW-ONE KS0KW-COMP-ROW-ONE ; 
  10 KS0KW-COMP-ROW-TWO KS0KW-COMP-ROW-TWO ; 
  10 KS0KW-STYLE KS0KW-STYLE ; 
    15 KS0KW-STY-CHAR-1 KS0KW-STY-CHAR-1 ; 
    15 KS0KW-STY-CHAR-2 KS0KW-STY-CHAR-2 ; 
    15 KS0KW-STY-CHAR-3 KS0KW-STY-CHAR-3 ; 
    15 KS0KW-STY-CHAR-4 KS0KW-STY-CHAR-4 ; 
    15 KS0KW-STY-CHAR-5 KS0KW-STY-CHAR-5 ; 
    15 KS0KW-STY-CHAR-6 KS0KW-STY-CHAR-6 ; 
    15 KS0KW-STY-CHAR-7 KS0KW-STY-CHAR-7 ; 
  10 KS0KW-SWC KS0KW-SWC ; 
  10 KS0KW-SWD KS0KW-SWD ; 
  10 KS0KW-SWF KS0KW-SWF ; 
  10 KS0KW-SWR KS0KW-SWR ; 
  10 KS0KW-SWU KS0KW-SWU ; 
  10 KS0KW-FNC KS0KW-FNC ; 
  10 KS0KW-READING-FOR KS0KW-READING-FOR ; 
    15 KS0KW-PRD-YR KS0KW-PRD-YR ; 
    15 KS0KW-DASH-1 char(1) ; // dash 1
    15 KS0KW-PRD-MO KS0KW-PRD-MO ; 
    15 KS0KW-DASH-2 KS0KW-DASH-2 ; 
    15 KS0KW-DLV-MO KS0KW-DLV-MO ; 
    15 KS0KW-DASH-3 char(1) ; // dash 3
    15 KS0KW-FCTY-CD KS0KW-FCTY-CD ; 
    15 KS0KW-FCTY-FILLER KS0KW-FCTY-FILLER ; 
  10 KS0KW-READING-FOR-B KS0KW-READING-FOR-B ; 
    15 KS0KW-READ-DESC KS0KW-READ-DESC ; 
    15 KS0KW-READ-FILLER KS0KW-READ-FILLER ; 
    15 KS0KW-PRD-YR-B KS0KW-PRD-YR-B ; 
    15 KS0KW-DASH-1-B char(1) ; // dash 1
    15 KS0KW-PRD-MO-B KS0KW-PRD-MO-B ; 
    15 KS0KW-DASH-2-B KS0KW-DASH-2-B ; 
    15 KS0KW-DLV-MO-B KS0KW-DLV-MO-B ; 
    15 KS0KW-DASH-3-B char(1) ; // dash 3
    15 KS0KW-FCTY-CD-B KS0KW-FCTY-CD-B ; 
  10 * char(1) ; 
  10 KS0KW-SELECTED-ROWS KS0KW-SELECTED-ROWS [11] ; 
  10 * char(3) ; 
  10 KS0KW-SEL-INDEX KS0KW-SEL-INDEX ; 
  10 * char(1) ; 
  10 KS0KW-STAT-TSQ-PAGE-TBL KS0KW-STAT-TSQ-PAGE-TBL ; 
    15 KS0KW-ROW-KEY-DATA KS0KW-ROW-KEY-DATA [100] ; 
      17 KS0KW-ROW-KEY KS0KW-ROW-KEY ; 
        20 KS0KW-ROW-FILLER-1 KS0KW-ROW-FILLER-1 ; 
          22 KS0KW-ROW-STY-CLR-DIM KS0KW-ROW-STY-CLR-DIM ; 
            25 KS0KW-ROW-STYLE KS0KW-ROW-STYLE ; 
            25 KS0KW-ROW-X-STYLE KS0KW-ROW-X-STYLE ; 
            25 KS0KW-ROW-COLOR KS0KW-ROW-COLOR ; 
            25 KS0KW-ROW-DIM KS0KW-ROW-DIM ; 
            25 KS0KW-ROW-XNDCD KS0KW-ROW-XNDCD ; 
            25 KS0KW-ROW-FY1FCTYC KS0KW-ROW-FY1FCTYC ; 
            25 KS0KW-ROW-XCTCD KS0KW-ROW-XCTCD ; 
          22 KS0KW-ROW-DATES KS0KW-ROW-DATES ; 
            25 KS0KW-ROW-PC3POIDT KS0KW-ROW-PC3POIDT ; 
            25 KS0KW-ROW-PLNMT-DT KS0KW-ROW-PLNMT-DT ; 
        20 KS0KW-ROW-RANK-NBR KS0KW-ROW-RANK-NBR ; 
        20 * char(1) ; 
      17 KS0KW-ROW-FILLER-2 KS0KW-ROW-FILLER-2 ; 
    15 KS0KW-TS-PAGE-NBR KS0KW-TS-PAGE-NBR [100] ; 
  10 * char(3) ; 
  10 KS0KW-TOTAL-FLD KS0KW-TOTAL-FLD ; 
  10 KS0KW-PERCENT KS0KW-PERCENT ; 
    15 KS0KW-PCT-BYTE KS0KW-PCT-BYTE [5] ; 
  10 KS0KW-SIX-BYTE-FIELD KS0KW-SIX-BYTE-FIELD ; 
    15 KS0KW-BYTE-1 KS0KW-BYTE-1 ; 
    15 KS0KW-BYTE-2 KS0KW-BYTE-2 ; 
    15 KS0KW-BYTE-3 KS0KW-BYTE-3 ; 
    15 KS0KW-BYTE-4 KS0KW-BYTE-4 ; 
    15 KS0KW-BYTE-5 KS0KW-BYTE-5 ; 
    15 KS0KW-BYTE-6 KS0KW-BYTE-6 ; 
  10 KS0KW-RESULT-FIELD KS0KW-RESULT-FIELD ; 
    15 KS0KW-RES-BYTE-1 KS0KW-RES-BYTE-1 ; 
    15 KS0KW-RES-BYTE-2 KS0KW-RES-BYTE-2 ; 
    15 KS0KW-RES-BYTE-3 KS0KW-RES-BYTE-3 ; 
    15 KS0KW-RES-BYTE-4 KS0KW-RES-BYTE-4 ; 
    15 KS0KW-RES-BYTE-5 KS0KW-RES-BYTE-5 ; 
  10 KS0KW-DATE-WORK KS0KW-DATE-WORK ; 
    15 KS0KW-FILLER KS0KW-FILLER ; 
    15 KS0KW-CENTURY KS0KW-CENTURY ; 
    15 KS0KW-YEAR KS0KW-YEAR ; 
    15 KS0KW-MONTH KS0KW-MONTH ; 
    15 KS0KW-DAY KS0KW-DAY ; 
  10 KS0KW-DATE-WORK-2 KS0KW-DATE-WORK-2 ; 
    15 KS0KW-CENTURY-2 KS0KW-CENTURY-2 ; 
    15 KS0KW-YEAR-2 KS0KW-YEAR-2 ; 
    15 KS0KW-MONTH-2 KS0KW-MONTH-2 ; 
    15 KS0KW-DAY-2 KS0KW-DAY-2 ; 
  10 KS0KW-RDG-DATE-WORK KS0KW-RDG-DATE-WORK ; 
    15 KS0KW-RDG-MONTH KS0KW-RDG-MONTH ; 
    15 KS0KW-RDG-DAY KS0KW-RDG-DAY ; 
    15 KS0KW-RDG-YEAR KS0KW-RDG-YEAR ; 
  10 KS0KW-DEPT-WORK KS0KW-DEPT-WORK ; 
    15 KS0KW-DEPT-ID KS0KW-DEPT-ID ; 
    15 KS0KW-DEPT-COLON KS0KW-DEPT-COLON ; 
  10 KS0KW-HIGHEST-PLNMT-DT KS0KW-HIGHEST-PLNMT-DT ; 
  10 KS0KW-SAVE-PCT-ONE KS0KW-SAVE-PCT-ONE [4] ; 
  10 KS0KW-SAVE-PCT-TWO KS0KW-SAVE-PCT-TWO [4] ; 
  10 KS0KW-SAV-EQUIP-GPC KS0KW-SAV-EQUIP-GPC ; 
  10 KS0KW-ADD-UPD-FLAG KS0KW-ADD-UPD-FLAG ; 
  10 KS0KW-FEAT-CHGD-FLAG KS0KW-FEAT-CHGD-FLAG ; 
  10 KS0KW-FRST-PRDCTN-DT KS0KW-FRST-PRDCTN-DT ; 
    15 KS0KW-FRST-PRDCTN-CC KS0KW-FRST-PRDCTN-CC ; 
    15 KS0KW-FRST-PRDCTN-YR KS0KW-FRST-PRDCTN-YR ; 
    15 KS0KW-FRST-PRDCTN-MO KS0KW-FRST-PRDCTN-MO ; 
  10 KS0KW-FRST-DLVR-DT KS0KW-FRST-DLVR-DT ; 
    15 KS0KW-FRST-DLVR-CC KS0KW-FRST-DLVR-CC ; 
    15 KS0KW-FRST-DLVR-YR KS0KW-FRST-DLVR-YR ; 
    15 KS0KW-FRST-DLVR-MO KS0KW-FRST-DLVR-MO ; 
end // end KS0KW00

//*** RECORD=KS0KW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record KS0KW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1098) ; 
    10 KS0KW-GPC-CD KS0KW-GPC-CD ; 
    10 KS0KW-GPC-DESC KS0KW-GPC-DESC ; 
    10 KS0KW-STY-NBR KS0KW-STY-NBR ; 
    10 KS0KW-STY-NM KS0KW-STY-NM ; 
    10 KS0KW-COLR-CD-ID KS0KW-COLR-CD-ID ; 
    10 KS0KW-COLR-DESC KS0KW-COLR-DESC ; 
    10 KS0KW-DIM-CD KS0KW-DIM-CD ; 
    10 KS0KW-PRDCTN-YR KS0KW-PRDCTN-YR ; 
    10 KS0KW-PRDCTN-MO KS0KW-PRDCTN-MO ; 
    10 KS0KW-DLVR-MO KS0KW-DLVR-MO ; 
    10 KS0KW-FCTY-CD KS0KW-FCTY-CD ; 
    10 KS0KW-X-STY-NBR KS0KW-X-STY-NBR ; 
    10 KS0KW-SEL KS0KW-SEL [11] ; 
    10 KS0KW-DTL-ROW-KEY KS0KW-DTL-ROW-KEY [11] ; 
      12 KS0KW-DTL-KEY KS0KW-DTL-KEY ; 
        15 KS0KW-DTL-STY-NBR KS0KW-DTL-STY-NBR ; 
        15 KS0KW-DTL-X-STYLE KS0KW-DTL-X-STYLE ; 
        15 KS0KW-DTL-COLR-CD KS0KW-DTL-COLR-CD ; 
        15 KS0KW-DTL-DIM-CD KS0KW-DTL-DIM-CD ; 
        15 KS0KW-DTL-XNDCD KS0KW-DTL-XNDCD ; 
        15 KS0KW-DTL-FY1FCTYC KS0KW-DTL-FY1FCTYC ; 
        15 KS0KW-DTL-XCTCD KS0KW-DTL-XCTCD ; 
        15 KS0KW-DTL-PC3POIDT KS0KW-DTL-PC3POIDT ; 
        15 KS0KW-DTL-PLNMTR-DT KS0KW-DTL-PLNMTR-DT ; 
        15 KS0KW-DTL-RANK-NBR KS0KW-DTL-RANK-NBR ; 
        15 * char(1) ; 
      12 KS0KW-DTL-DATA KS0KW-DTL-DATA ; 
        15 KS0KW-DTL-DEPT-ID KS0KW-DTL-DEPT-ID ; 
        15 KS0KW-DTL-READING-FOR KS0KW-DTL-READING-FOR ; 
    10 KS0KW-MAT-CTNT-1 KS0KW-MAT-CTNT-1 ; 
    10 KS0KW-MAT-CTNT-2 KS0KW-MAT-CTNT-2 ; 
    10 KS0KW-MAT-CTNT-3 KS0KW-MAT-CTNT-3 ; 
    10 KS0KW-MAT-CTNT-4 KS0KW-MAT-CTNT-4 ; 
    10 KS0KW-DTL-MAT1-PCT KS0KW-DTL-MAT1-PCT [11] ; 
    10 KS0KW-DTL-MAT2-PCT KS0KW-DTL-MAT2-PCT [11] ; 
    10 KS0KW-DTL-MAT3-PCT KS0KW-DTL-MAT3-PCT [11] ; 
    10 KS0KW-DTL-MAT4-PCT KS0KW-DTL-MAT4-PCT [11] ; 
end // end KS0KW01

//*** RECORD=KS0KW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record KS0KW02 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 KS0KW-GPC-CD KS0KW-GPC-CD ; 
  10 KS0KW-GPC-DESC KS0KW-GPC-DESC ; 
  10 KS0KW-STY-NBR KS0KW-STY-NBR ; 
  10 KS0KW-STY-NM KS0KW-STY-NM ; 
  10 KS0KW-COLR-CD-ID KS0KW-COLR-CD-ID ; 
  10 KS0KW-COLR-DESC KS0KW-COLR-DESC ; 
  10 KS0KW-DIM-CD KS0KW-DIM-CD ; 
  10 KS0KW-X-STYLE KS0KW-X-STYLE ; 
  10 KS0KW-DEPT-ID KS0KW-DEPT-ID ; 
  10 KS0KW-DEPT-DESC KS0KW-DEPT-DESC ; 
  10 KS0KW-CTRY-CD KS0KW-CTRY-CD ; 
  10 KS0KW-CTRY-DESC KS0KW-CTRY-DESC ; 
  10 KS0KW-CSTM-FEATURES KS0KW-CSTM-FEATURES ; 
    15 KS0KW-CSTM-TYPE KS0KW-CSTM-TYPE ; 
    15 KS0KW-CSTM-CONFIRMED KS0KW-CSTM-CONFIRMED ; 
    15 KS0KW-CSTM-FOXING KS0KW-CSTM-FOXING [3] ; 
    15 KS0KW-CSTM-FEAT KS0KW-CSTM-FEAT [5] ; 
  10 KS0KW-PO-ID-PRD-YR KS0KW-PO-ID-PRD-YR ; 
  10 KS0KW-PO-ID-PRD-MO KS0KW-PO-ID-PRD-MO ; 
  10 KS0KW-PO-ID-DLV-MO KS0KW-PO-ID-DLV-MO ; 
  10 KS0KW-FCTY-CD KS0KW-FCTY-CD ; 
  10 KS0KW-READING-DT KS0KW-READING-DT ; 
  10 KS0KW-OPT-MAT KS0KW-OPT-MAT ; 
  10 KS0KW-XMCCD KS0KW-XMCCD [4] ; 
  10 KS0KW-PLNM-PCT-ONE KS0KW-PLNM-PCT-ONE [4] ; 
  10 KS0KW-PLNM-PCT-TWO KS0KW-PLNM-PCT-TWO [4] ; 
end // end KS0KW02

//*** RECORD=VPLNMT01 ****
// *************  CUSTOMER CROSS REFERENCE  *******************
// 
// DB2 TABLE:           DCUSTM.VPLNMT01
// 
// COPYLIB MEMBER:      DCL01055
// 
// I/O MOD:             IO6380
// 
// KEY TO DB2 TABLE:    XGPCD
//                      SY_STY_NBR
//                      SY2CLRID
//                      XDMCD
//                      KS_XPRMT_STY_NBR
//                      XNDCD
//                      FY6FOCD
//                      FY1FCTYC
//                      PC3POIDT
//                      KS_PLANIMETER_DT
//                      XXXRKNBR
// 
// DATE CREATED:        5/28/92
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  ------     ---------------------------------------
// 05/28/92  BANTHO     INITIAL RECORD CREATION
// 
// ************************************************************
// ************************
Record VPLNMT01 type basicRecord
  5 VPLNMT01-GROUP VPLNMT01-GROUP ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 KS-XPRMT-STY-NBR KS-XPRMT-STY-NBR ; 
    10 XNDCD XNDCD ; 
    10 XCTCD XCTCD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC3POIDT PC3POIDT ; 
    10 KS-PLANIMETER-DT KS-PLANIMETER-DT ; 
    10 XXXRKNBR XXXRKNBR ; 
    10 XMCCD XMCCD [4] ; 
    10 KS-PLANIMETER-PCT KS-PLANIMETER-PCT [4] ; 
    10 XXXUSER XXXUSER ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VPLNMT01

// KS_PLANIMETER_DT
DataItem KS-PLANIMETER-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// KS_PLANIMETER_PCT
DataItem KS-PLANIMETER-PCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add/update flag
DataItem KS0KW-ADD-UPD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-BYTE-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-BYTE-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-BYTE-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-BYTE-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-BYTE-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-BYTE-6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem KS0KW-CENTURY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem KS0KW-CENTURY-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// color code
DataItem KS0KW-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color description
DataItem KS0KW-COLR-DESC char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row one comp pct's
DataItem KS0KW-COMP-ROW-ONE char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row two comp pct's
DataItem KS0KW-COMP-ROW-TWO char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// features confirmed code
DataItem KS0KW-CSTM-CONFIRMED char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// features codes 1 - 4
DataItem KS0KW-CSTM-FEAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count of customs features
DataItem KS0KW-CSTM-FEAT-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// more features than displayable
DataItem KS0KW-CSTM-FEAT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Feature warming issued switch
DataItem KS0KW-CSTM-FEAT-WARNING-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// feature codes
DataItem KS0KW-CSTM-FEATURES char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// features foxing codes 1 - 3
DataItem KS0KW-CSTM-FOXING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// features type code
DataItem KS0KW-CSTM-TYPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country
DataItem KS0KW-CTRY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country description
DataItem KS0KW-CTRY-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash 2
DataItem KS0KW-DASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash 2
DataItem KS0KW-DASH-2-B char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data changed switch
DataItem KS0KW-DATA-CHGD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date work area
DataItem KS0KW-DATE-WORK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date work area
DataItem KS0KW-DATE-WORK-2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KS0KW-DAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KS0KW-DAY-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// colon for screen display
DataItem KS0KW-DEPT-COLON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// department description
DataItem KS0KW-DEPT-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// department id
DataItem KS0KW-DEPT-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept work area
DataItem KS0KW-DEPT-WORK char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimension code
DataItem KS0KW-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem KS0KW-DLV-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem KS0KW-DLV-MO-B num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem KS0KW-DLVR-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dtl line color
DataItem KS0KW-DTL-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rank number
DataItem KS0KW-DTL-DATA char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike department id
DataItem KS0KW-DTL-DEPT-ID char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// dtl dimension
DataItem KS0KW-DTL-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory cd, key format
DataItem KS0KW-DTL-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dtl line key
DataItem KS0KW-DTL-KEY char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material percent 1
DataItem KS0KW-DTL-MAT1-PCT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material percent 2
DataItem KS0KW-DTL-MAT2-PCT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material percent 3
DataItem KS0KW-DTL-MAT3-PCT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material percent 4
DataItem KS0KW-DTL-MAT4-PCT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id, key format
DataItem KS0KW-DTL-PC3POIDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// planimeter date
DataItem KS0KW-DTL-PLNMTR-DT char(6)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// rank number
DataItem KS0KW-DTL-RANK-NBR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field for 'reading for'
DataItem KS0KW-DTL-READING-FOR char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dtl line key
DataItem KS0KW-DTL-ROW-KEY char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dtl line style
DataItem KS0KW-DTL-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dtl x-style
DataItem KS0KW-DTL-X-STYLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// field office code
DataItem KS0KW-DTL-XCTCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept id, key format
DataItem KS0KW-DTL-XNDCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of set switch
DataItem KS0KW-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code
DataItem KS0KW-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code
DataItem KS0KW-FCTY-CD-B char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code
DataItem KS0KW-FCTY-FILLER char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// features changed flag
DataItem KS0KW-FEAT-CHGD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler byte
DataItem KS0KW-FILLER num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Function switch
DataItem KS0KW-FNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first dlvr century
DataItem KS0KW-FRST-DLVR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first dlvr date work
DataItem KS0KW-FRST-DLVR-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first dlvr month
DataItem KS0KW-FRST-DLVR-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first dlvr year
DataItem KS0KW-FRST-DLVR-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FIRST PRDCTN CENTURY
DataItem KS0KW-FRST-PRDCTN-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first prdctn date work
DataItem KS0KW-FRST-PRDCTN-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first prdctn month
DataItem KS0KW-FRST-PRDCTN-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first prdctn year
DataItem KS0KW-FRST-PRDCTN-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc code
DataItem KS0KW-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc description
DataItem KS0KW-GPC-DESC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// highest planimeter date
DataItem KS0KW-HIGHEST-PLNMT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invalid data switch
DataItem KS0KW-INVALID-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0KW-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0KW-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0KW-IX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0KW-IX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0KW-IX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0KW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// key of last changed row
DataItem KS0KW-LAST-CHGD-ROW char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last color
DataItem KS0KW-LAST-COLOR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next selected status/suffix cd
DataItem KS0KW-LAST-DATA char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// poid/plnmtr dts
DataItem KS0KW-LAST-DATES char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last dept
DataItem KS0KW-LAST-DEPT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last dim
DataItem KS0KW-LAST-DIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last factory cd, key format
DataItem KS0KW-LAST-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next selected status/suffix cd
DataItem KS0KW-LAST-KEY char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last po id, key format
DataItem KS0KW-LAST-PC3POIDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last planimeter date
DataItem KS0KW-LAST-PLNMT-DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last rank
DataItem KS0KW-LAST-RANK-NBR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last reading for
DataItem KS0KW-LAST-READING-FOR char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last sty/clr/dim section key
DataItem KS0KW-LAST-STY-CLR-DIM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last style
DataItem KS0KW-LAST-STYLE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last x-style
DataItem KS0KW-LAST-X-STYLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last fld-ofc-cd
DataItem KS0KW-LAST-XCTCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last dept id, key format
DataItem KS0KW-LAST-XNDCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material content code 1
DataItem KS0KW-MAT-CTNT-1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material content code 2
DataItem KS0KW-MAT-CTNT-2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material content code 3
DataItem KS0KW-MAT-CTNT-3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material content code 4
DataItem KS0KW-MAT-CTNT-4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KS0KW-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem KS0KW-MONTH-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next color
DataItem KS0KW-NEXT-COLOR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next selected status/suffix cd
DataItem KS0KW-NEXT-DATA char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next dept
DataItem KS0KW-NEXT-DEPT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next dim
DataItem KS0KW-NEXT-DIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next factory cd, key format
DataItem KS0KW-NEXT-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next selected status/suffix cd
DataItem KS0KW-NEXT-KEY char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next po id, key format
DataItem KS0KW-NEXT-PC3POIDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next planimeter date
DataItem KS0KW-NEXT-PLNMT-DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next rank number
DataItem KS0KW-NEXT-RANK-NBR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next reading for
DataItem KS0KW-NEXT-READING-FOR char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next selected status/suffix cd
DataItem KS0KW-NEXT-SEL-ROW char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next style
DataItem KS0KW-NEXT-STYLE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next x-style
DataItem KS0KW-NEXT-X-STYLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next ctry-cd
DataItem KS0KW-NEXT-XCTCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next dept id, key format
DataItem KS0KW-NEXT-XNDCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicates no pct's entered
DataItem KS0KW-NO-PCT-1-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicates no pct's entered
DataItem KS0KW-NO-PCT-2-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// optional material content code
DataItem KS0KW-OPT-MAT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each byte of planimeter pct
DataItem KS0KW-PCT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// planimeter percent
DataItem KS0KW-PERCENT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// planimeter percents (rank 1)
DataItem KS0KW-PLNM-PCT-ONE num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// planimeter percents (rank 2)
DataItem KS0KW-PLNM-PCT-TWO num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id delivery month
DataItem KS0KW-PO-ID-DLV-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem KS0KW-PO-ID-PRD-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production year
DataItem KS0KW-PO-ID-PRD-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// production month
DataItem KS0KW-PRD-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// production month
DataItem KS0KW-PRD-MO-B num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// production year
DataItem KS0KW-PRD-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// production year
DataItem KS0KW-PRD-YR-B num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// production month
DataItem KS0KW-PRDCTN-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// production year
DataItem KS0KW-PRDCTN-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous rank read in
DataItem KS0KW-PREV-RANK num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save area for prev row read
DataItem KS0KW-PREV-ROW-READ char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// problems added switch
DataItem KS0KW-PROBLEMS-ADDED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reading date work
DataItem KS0KW-RDG-DATE-WORK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KS0KW-RDG-DAY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KS0KW-RDG-MONTH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KS0KW-RDG-YEAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field for 'reading for'
DataItem KS0KW-READ-DESC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field for 'reading for'
DataItem KS0KW-READ-FILLER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reading date
DataItem KS0KW-READING-DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field for 'reading for'
DataItem KS0KW-READING-FOR char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field for 'reading for'
DataItem KS0KW-READING-FOR-B char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-RES-BYTE-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-RES-BYTE-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-RES-BYTE-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-RES-BYTE-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0KW-RES-BYTE-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field for map 2 pcts
DataItem KS0KW-RESULT-FIELD num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last color
DataItem KS0KW-ROW-COLOR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// poid/plnmtr dts
DataItem KS0KW-ROW-DATES char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last dim
DataItem KS0KW-ROW-DIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KS0KW-ROW-FILLER-1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KS0KW-ROW-FILLER-2 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last factory cd, key format
DataItem KS0KW-ROW-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row key
DataItem KS0KW-ROW-KEY char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row key & data
DataItem KS0KW-ROW-KEY-DATA char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last po id, key format
DataItem KS0KW-ROW-PC3POIDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last planimeter date
DataItem KS0KW-ROW-PLNMT-DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row rank number
DataItem KS0KW-ROW-RANK-NBR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last sty/clr/dim section key
DataItem KS0KW-ROW-STY-CLR-DIM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last style
DataItem KS0KW-ROW-STYLE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last x-style
DataItem KS0KW-ROW-X-STYLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last fld-ofc-cd
DataItem KS0KW-ROW-XCTCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last dept id, key format
DataItem KS0KW-ROW-XNDCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept work area
DataItem KS0KW-SAV-EQUIP-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save add count
DataItem KS0KW-SAVE-ADD-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save change count
DataItem KS0KW-SAVE-CHG-CNT-1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save change count
DataItem KS0KW-SAVE-CHG-CNT-2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save area for pcts
DataItem KS0KW-SAVE-PCT-ONE num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save area for pcts
DataItem KS0KW-SAVE-PCT-TWO num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save area for row 1 of a set
DataItem KS0KW-SAVE-ROW-1 char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save area for row 2 of a set
DataItem KS0KW-SAVE-ROW-2 char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection character
DataItem KS0KW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save index for changes
DataItem KS0KW-SEL-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// stats selected for changes
DataItem KS0KW-SELECTED-ROWS char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field for map 2 pcts
DataItem KS0KW-SIX-BYTE-FIELD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stat/tsq page table
DataItem KS0KW-STAT-TSQ-PAGE-TBL char(6900)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style 1st character
DataItem KS0KW-STY-CHAR-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style 2nd character
DataItem KS0KW-STY-CHAR-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style 3rd character
DataItem KS0KW-STY-CHAR-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style 4th character
DataItem KS0KW-STY-CHAR-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style 5th character
DataItem KS0KW-STY-CHAR-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style 6th character
DataItem KS0KW-STY-CHAR-6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style 7th character
DataItem KS0KW-STY-CHAR-7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem KS0KW-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style name
DataItem KS0KW-STY-NM char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem KS0KW-STYLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KS0KW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem KS0KW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KS0KW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0KW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0KW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total percent accumulator
DataItem KS0KW-TOTAL-FLD num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temporary storage page
DataItem KS0KW-TS-PAGE-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// valid colr switch
DataItem KS0KW-VALID-COLR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of set for VCPROB01
DataItem KS0KW-VCPROB01-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of set for VCPROD01
DataItem KS0KW-VCPROD01-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warnings issued switch
DataItem KS0KW-WARNINGS-ISSUED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// experimental style number
DataItem KS0KW-X-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// experimental style number
DataItem KS0KW-X-STYLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// material content codes
DataItem KS0KW-XMCCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KS0KW-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem KS0KW-YEAR-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// VPLNMT01 GROUP LEVEL
DataItem VPLNMT01-GROUP char(86)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

