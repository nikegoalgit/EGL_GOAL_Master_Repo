package ks0g;

import corpcom1.CACHGFL;
import corpcom2.XX0XW01;
import corpcom3.XPKS-00001;
import corpcom4.XSKS-S0001;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpy2.YQTTBL;
import ks.common.*;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VCTEAM01;
import vv.common.VHSCHP01;
import vv.common.VHSHDG01;
import vv.common.VHSNBR01;
import vv.common.VHSSHD01;
//*** PROGRAM=KS0G ****
// This application is the last in the HS Maintenance series.
// At this level, the entire HS number, as Customs recognizes
// it, exists. The HS Status and Suffix are available for add
// and maintenance at this level. By entering a status/suffix,
// the user will have their cursor positioned on a particular
// HS number in the list. The user may also enter an entire HS
// number or pieces of one in the HS: field and then press
// ENTER. This will result in a transfer to another level
// at which they can see more information about the HS NBR they
// entered (ie. transfer to KS0E, KS0F OR KS0G).
// 
// By pressing PF13 without selecting any lines, the user will
// be transferred to the HS Chapter Status/Suffix add map. PF13
// will only be visible and useable by those who have that
// authorization.
// 
// By pressing PF14 and selecting any number of lines from the
// current page, the user will be transferred to the HS Chapter
// Status/Suffix Maint map. PF14 will only be visible and
// useable by those who have that authorization.
// 
// By selecting a line and pressing ENTER, the user will be
// automatically transferred to map2 to begin "inquiry only'
// viewing of the row they selected.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      12/18/91  bantho  New application.
// C004     04/13/92  dhuffm  Use 3 existing description lines.
// C014     05/12/92  bantho  chg 'problem code' to 'features'.
// 000      06/08/92  dhuffm  Table changes - KSWREC change.
// C000     08/28/92  SMARIE  Position cursor on first detail
//                            line when coming from KS0F.
// C066     12/07/92  SMARIE  Delete all references to SUFX-ID.
// C072     02/16/93  DHUFFM  Add special duty fields 5,6,7.
// 000      06/15/93  DHUFFM  Table changes - YQTTBL change.
// 000      02/13/95  DHUFFM  Fix line display/delete problem.
// -------  --------  ------  ---------------------------------
//          03/16/98  NGANGO  Y2K MODIFICATION - REGENERATED
//                            TO PICKUP XX0XS01 CHANGES.
// -------  --------  ------  ---------------------------------
// *********************
Program KS0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KS0GW00 KS0GW00; // record
  KS0GW01 KS0GW01; // record
  KS0GW02 KS0GW02; // record
  KS0GW03 KS0GW03; // record
  KS0GW04 KS0GW04; // record
  KSWREC KSWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCTEAM01 VCTEAM01; // record
  VHSCHP01 VHSCHP01; // record
  VHSHDG01 VHSHDG01; // record
  VHSNBR01 VHSNBR01; // record
  VHSSHD01 VHSSHD01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KS0GT01; // table
  use YQTTBL {deleteAfterUse = yes}; // table
  use KS0GM.KS0GM001,  // forms
      KS0GM.KS0GM002, 
      KS0GM.KS0GM003
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/

    set KS0GM001 initial; /* M001 input/output*/
    set KS0GM002 initial; /* M002 input/output*/
    set KS0GM003 initial; /* M003 input/output*/
    set KS0GW00 empty; /* Working storage*/
    set KS0GW01 empty; /* M001 display storage*/
    set KS0GW02 empty; /* M002 display storage*/
    set KS0GW03 empty; /* M003 display storage*/
    set KS0GW04 empty; /* original data storage*/
    set SQLCA empty; /* sql communication area*/
    set TA1REC empty; /* error diagnosis information*/
    set TAEREC empty; /* error diagnosis parameters*/
    set TA5REC empty; /* temperary storage parameters*/
    set XX0XW01 empty; /* date/time subroutine parameters*/

    KS0GW00.KS0GW-SWF = "Y"; /* Format the map switch*/
    KS0GW00.KS0GW-SWR = "Y"; /* Request for data switch*/
    KS0GW00.KS0GW-SWD = "1"; /* Set to map 1 display*/
    converseLib.validationFailed(0); /* Set message blank*/
    KS0GW00.KS0GW-STAT = "A"; /* set default status code*/
    KS0GM001.KS0GM-STAT = "A"; /* set default status code*/

    /* If entire HS # passed, position the cursor on that number.*/

    if (KSWREC.KSW-HTS-NBR == " ") /* if no hts nbr passed in kswrec*/
      KS0GW00.KS0GW-SWF = "N"; /* do not format the map*/
      KS0GW00.KS0GW-SWR = "N"; /* do not request data*/
    else
      if (KSWREC.KSW-HTS-STAT > " ") /* entire # entered ?*/
        KS0GW00.KS0GW-HTS-NBR = KSWREC.KSW-HTS-NBR;
        KS0GW00.KS0GW-CPTR-BKDN = KS0GW00.KS0GW-HTS-CPTR-CD;
        KS0GW00.KS0GW-HDG-BKDN = KS0GW00.KS0GW-HTS-HDG-CD;
        KS0GW00.KS0GW-PERIOD1 = ".";
        KS0GW00.KS0GW-1ST-SHDG-CD = KS0GW00.KS0GW-HTS-1ST-SHDG-CD;
        KS0GW00.KS0GW-PERIOD = ".";
        KS0GW00.KS0GW-2ND-SHDG-CD = KS0GW00.KS0GW-HTS-2ND-SHDG-CD;
        KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
        KS0GW00.KS0GW-STAT-CD = KS0GW00.KS0GW-HTS-STAT-CD;
        KS0GW00.KS0GW-STAT-CD-BKDN = KS0GW00.KS0GW-STAT-BKDN;
        KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;
      end
    end

    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto KS0G-00000; /* Converse the main process*/

    KS0G-00000: KS0G-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto KS0G-00000; /* Converse the main process*/


  end // end main
end // end KS0G

// Main process to display a map
Function KS0G-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) If specified, display the first map.*/
  /* 2) Otherwise, if specified, display the second map.*/
  /* 3) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-SWD == "1") /* Map 1 was requested*/

    KS0G-10000(); /* Display map 1*/

  else

    if (KS0GW00.KS0GW-SWD == "2") /* Map 2 was requested*/

      KS0G-20000(); /* Display map 2*/

    else

      if (KS0GW00.KS0GW-SWD == "3") /* Map 3 was requested*/

        KS0G-30000(); /* Display map 3*/

      else

        /* ------------------------------------------------------------*/
        /* Write the error to the Error Diagnosis Reporting Facility.*/
        /* ------------------------------------------------------------*/

        KSWREC.XXXPRCNM = "00000"; /* Module identification*/
        KSWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
        TA1REC.TA1MAPNO = KS0GW00.KS0GW-SWD; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

        /* ------------------------------------------------------------*/
        /* Exit to display the application system menu.*/
        /* ------------------------------------------------------------*/

        COMMAREA.CATOAP = "KS0A"; /* TO application*/

        XSKS-S0001(); /* Exit to another application*/

        /* ------------------------------------------------------------*/
         /* Abnormally terminate the transaction if the exit failed.*/
        /* ------------------------------------------------------------*/

        TA1REC.TA1FUNC = "ABND"; /* Termination function*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end
    end
  end


end // end KS0G-00000

// Main process to display a map
Function KS0G-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0G-11000(); /* Obtain the data to display*/

  KS0G-12000(); /* Format and display the map*/

  KS0G-13000(); /* Check attention identifier*/

  KS0G-14000(); /* Reset fields to normal intensity*/

  KS0G-15000(); /* Verify the data that was entered*/

  KS0G-16000(); /* Process valid input request*/


end // end KS0G-10000

// Obtain the data to display
Function KS0G-11000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/

  KS0GW00.XXXTSLEN = 1084; /* Temporary storage page length*/

  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO == 0) /* No message to display*/
    KS0GW00.XXXTSPAG = 1; /* Page number to display*/
  end

  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage*/
  /* ------------------------------------------------------------*/

  KS0G-11100(); /* Purge any temporary storage*/

  /* ------------------------------------------------------------*/
  /* clear map 1 working storage*/
  /* ------------------------------------------------------------*/

  set KS0GW01 empty; /* clear map 1 working storage*/

  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/

  KS0G-11300(); /* Select set and open cursor*/

  if (converseVar.validationMsgNum != 0) /* any errors ?*/
    if (converseVar.validationMsgNum == 9999) /* special error nbr ?*/
      converseLib.validationFailed(0);
      KSWREC.XXXMSGNO = 0;
      return;
    else
      return;
    end
  end

  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IX2 = 1; /* set screen line index*/
  KS0GW00.KS0GW-SWC = "N"; /* End of cursor switch*/

  while (KS0GW00.KS0GW-SWC == "N") /* Until end of cursor*/

    KS0G-11400(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (KS0GW00.KS0GW-SWC == "N") /* Not end of cursor*/
      KS0G-11500(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (KS0GW00.KS0GW-IX2 >= 12) /* Page is full*/

      KS0G-11600(); /* Add page to temporary storage*/

      KS0GW00.KS0GW-IX2 = 1; /* Display line index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-IX2 > 1) /* Page was formatted*/
    KS0G-11600(); /* Add page to temporary storage*/
  end

  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/

  KS0G-11700(); /* Close the selected set cursor*/

  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.TA5TSQIX == 0) /* No pages formatted*/
    KSWREC.XXXPRCNM = "11000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    KS0GW00.KS0GW-SWF = "N"; /* do not format the map*/
    if (COMMAREA.CACHGFL == "Y")
      set KS0GM001.KS0GM-PF14 bold, skip;
    end
    if (COMMAREA.CAADDFL == "Y")
      set KS0GM001.KS0GM-PF13 bold, skip;
    end
    set KS0GM001.KS0GM-HTS-CPTR-CD cursor; /* put cursor on cptr cd*/
    KS0GM001.KS0GM-HTS-CPTR-SDESC = KS0GW00.KS0GW-HTS-CPTR-SDESC;
    KS0GM001.KS0GM-HTS-HDG-SDESC = KS0GW00.KS0GW-HTS-HDG-SDESC;
    KS0GM001.KS0GM-HTS-SHDG-SDESC = KS0GW00.KS0GW-HTS-SHDG-SDESC;
    KS0GM001.KS0GM-STAT = KS0GW00.KS0GW-STAT;
    KS0GW00.KS0GW-IXM = 1; /* initialize index*/
    while (KS0GW00.KS0GW-IXM <= 12) /* clear detail lines*/
      KS0GM001.KS0GMSEL[KS0GW-IXM] = " ";
      set KS0GM001.KS0GMSEL[KS0GW-IXM] invisible, skip;
      KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM] = " ";
      KS0GM001.KS0GM-DTL-HTS-STAT-DESC[KS0GW-IXM] = " ";
      KS0GM001.KS0GM-DTL-QOTA-CAT-CD[KS0GW-IXM] = " ";
      KS0GM001.KS0GM-DTL-GEN-DTY-RATE[KS0GW-IXM] = " ";
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
    end
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-SWR = "N"; /* Request for data switch*/

end // end KS0G-11000

// purge temporary storage
Function KS0G-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-SWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0GW00.TA5TSQIX = 0; /* Highest page number*/

  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (KS0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  KSWREC.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-11100

// select set and open cursor
Function KS0G-11300()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty;

  /* ------------------------------------------------------------*/
  /* Set the chapter nbr/hdg/shdg for the select. If we were passed a*/
  /* chapter nbr/hdg/shdg in kswrec, use it. If not, use the one in*/
  /* ks0gw00.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.KS-HTS-CPTR-CD > " ") /* cptr present in pass area ?*/
    KS0GM001.KS0GM-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    KS0GW00.KS0GW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    KS0G-15210(); /* get short chapter description*/
    if (VAGen_SQLCODE == 0) /* if successful*/
      KS0GM001.KS0GM-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC;
      KS0GW00.KS0GW-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC;
      KS0GW01.KS0GW-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC;
      KS0GW02.KS0GW-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC;
      VHSNBR01.KS-HTS-CPTR-CD = VHSCHP01.KS-HTS-CPTR-CD;
    else
      KS0GW01.KS0GW-HTS-CPTR-SDESC = " ";
    end
    if (converseVar.validationMsgNum != 0) /* if not successful*/
      return; /* return to prev process*/
    end
    if (KSWREC.KS-HTS-HDG-CD > " ") /* hdg present in pass area ?*/
      KS0GM001.KS0GM-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
      KS0GW00.KS0GW-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
      KS0G-15220(); /* get short heading description*/
      if (VAGen_SQLCODE == 0) /* if successful*/
        KS0GM001.KS0GM-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC;
        KS0GW00.KS0GW-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC;
        KS0GW01.KS0GW-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC;
        KS0GW02.KS0GW-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC;
        VHSNBR01.KS-HTS-HDG-CD = VHSHDG01.KS-HTS-HDG-CD;
      end
      if (converseVar.validationMsgNum != 0) /* if not successful*/
        return; /* return to prev process*/
      end
      if (KSWREC.KS-HTS-1ST-SHDG-CD > " ") /* sub-hdg present in pass area?*/
        KS0GW00.KS0GW-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
        KS0GW00.KS0GW-HTS-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
        KS0GW00.KS0GW-PERIOD = ".";
        KS0GW00.KS0GW-2ND-SHDG-CD = KSWREC.KS-HTS-2ND-SHDG-CD[1];
        KS0GW00.KS0GW-HTS-2ND-SHDG-CD = KSWREC.KS-HTS-2ND-SHDG-CD[1];
        KS0GM001.KS0GM-HTS-SHDG-CD = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
        KS0G-15230(); /* get short heading description*/
        if (VAGen_SQLCODE == 0) /* if successful*/
          KS0GM001.KS0GM-HTS-SHDG-SDESC = VHSSHD01.KS-HTS-SHDG-SDESC;
          KS0GW00.KS0GW-HTS-SHDG-SDESC = VHSSHD01.KS-HTS-SHDG-SDESC;
          KS0GW01.KS0GW-HTS-SHDG-SDESC = VHSSHD01.KS-HTS-SHDG-SDESC;
          KS0GW02.KS0GW-HTS-SHDG-SDESC = VHSSHD01.KS-HTS-SHDG-SDESC;
          VHSNBR01.KS-HTS-1ST-SHDG-CD = VHSSHD01.KS-HTS-1ST-SHDG-CD;
          VHSNBR01.KS-HTS-2ND-SHDG-CD = VHSSHD01.KS-HTS-2ND-SHDG-CD;
        end
        if (converseVar.validationMsgNum != 0) /* if not successful*/
          return; /* return to prev process*/
        end
      else
        converseLib.validationFailed(); /* special use of the msg nbr fld*/
        KS0GW00.KS0GW-SWF = "N"; /* do not format the map*/
        KS0GW00.KS0GW-SWR = "N"; /* do not request more data*/
        KSWREC.XXXMSGNO = 0; /* turn off msg nbr*/
        set KS0GM001.KS0GM-HTS-SHDG-CD cursor;
        return; /* return to prev process*/
      end
    else
      VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-HTS-CPTR-CD;
      VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HTS-HDG-CD;
      VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-HTS-1ST-SHDG-CD;
      VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-HTS-2ND-SHDG-CD;
    end
  else
    VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-HTS-CPTR-CD;
    VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HTS-HDG-CD;
    VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-HTS-1ST-SHDG-CD;
    VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-HTS-2ND-SHDG-CD;
  end

  try
    call "IO6120" ("S1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "11300"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-11300

// fetch next row
Function KS0G-11400()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty; /* clear work record*/

  try
    call "IO6120" ("N1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      KS0GW00.KS0GW-SWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

  KS0GW00.KS0GW-SWC = "Y"; /* Indicate end of cursor*/

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "11400"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-11400

// save data in display storage
Function KS0G-11500()
  /* -------------------------------------------------------------*/
  /* first, we need to determine if this row is the correct stat*/
  /* -------------------------------------------------------------*/

  if (KS0GW00.KS0GW-HTS-CPTR-CD > " ") /* specific chapter wanted ?*/
    if (VHSNBR01.KS-HTS-CPTR-CD == KS0GW00.KS0GW-HTS-CPTR-CD) /* right cptr ?*/
      if (VHSNBR01.KS-HTS-HDG-CD == KS0GW00.KS0GW-HTS-HDG-CD) /* right hdg ?*/
        if (VHSNBR01.KS-HTS-1ST-SHDG-CD == KS0GW00.KS0GW-HTS-1ST-SHDG-CD
         && VHSNBR01.KS-HTS-2ND-SHDG-CD == KS0GW00.KS0GW-HTS-2ND-SHDG-CD)
          /* next sentence               /* we'll take this one*/
        else
          return; /* bypass this one*/
        end
      else
        return; /* bypass this one*/
      end
    else
      return; /* bypass this one*/
    end
  else
    return; /* bypass this one*/
  end

  /* -------------------------------------------------------------*/
  /* second, we need to determine if this row is the correct status*/
  /* -------------------------------------------------------------*/

  if (KS0GW00.KS0GW-STAT == " ") /* active and inactive wanted?*/
     /* next sentence                /* let's take this one*/
  else
    if (KS0GW00.KS0GW-STAT == "A") /* only active wanted?*/
      if (VHSNBR01.XXXSTAT == "A") /* this row active?*/
         /* next sentence            /* let's take this one*/
      else
        return; /* bypass this one*/
      end
    else
      if (VHSNBR01.XXXSTAT == "I") /* this row inactive?*/
         /* next sentence          /* let's take this one*/
      else
        return; /* bypass this one*/
      end
    end
  end

  /* -------------------------------------------------------------*/
  /* move data to display storage.*/
  /* -------------------------------------------------------------*/

  KS0GW00.KS0GW-IX1 = 1; /* Initialize index*/
  KS0GW00.KS0GW-DESC-CNTR = 0; /* Initialize desc counter*/

  while (KS0GW00.KS0GW-IX1 <= 3)
    if (VHSNBR01.KS-HTS-STAT-DESC[KS0GW-IX1] > " ") /* Desc exists*/
      KS0GW00.KS0GW-DESC-CNTR = KS0GW00.KS0GW-DESC-CNTR + 1; /* Count line*/
    end
    KS0GW00.KS0GW-IX1 = KS0GW00.KS0GW-IX1 + 1; /* Increment index*/
  end

  KS0GW00.KS0GW-DESC-CNTR = KS0GW00.KS0GW-DESC-CNTR + KS0GW00.KS0GW-IX2;

  if (KS0GW00.KS0GW-DESC-CNTR > 12) /* If it will not fit*/
    KS0G-11600(); /* add page to temp storage*/

    set KS0GW01 empty; /* clear tsq record area*/
    KS0GW00.KS0GW-IX1 = 1; /* reset index*/
    KS0GW00.KS0GW-IX2 = 1; /* reset index*/
  end

  KS0GW00.KS0GW-IX1 = 1; /* Initialize desc index*/

  while (KS0GW00.KS0GW-IX1 <= 3
   && VHSNBR01.KS-HTS-STAT-DESC[KS0GW-IX1] > " ") /* If data in desc*/
    if (KS0GW00.KS0GW-IX1 == 1) /* If first desc line*/
      KS0GW01.KS0GW-HTS-CPTR-CD = KS0GW00.KS0GW-HTS-CPTR-CD;
                                   /* cptr cd*/
      KS0GW01.KS0GW-HTS-CPTR-SDESC = KS0GW00.KS0GW-HTS-CPTR-SDESC;
      KS0GW01.KS0GW-HTS-HDG-CD = KS0GW00.KS0GW-HTS-HDG-CD; /* hdg cd*/
      KS0GW01.KS0GW-HTS-HDG-SDESC = KS0GW00.KS0GW-HTS-HDG-SDESC;
      KS0GW01.KS0GW-HTS-SHDG-SDESC = KS0GW00.KS0GW-HTS-SHDG-SDESC;
      KS0GW00.KS0GW-1ST-SHDG-CD = KS0GW00.KS0GW-HTS-1ST-SHDG-CD;
      KS0GW00.KS0GW-2ND-SHDG-CD = KS0GW00.KS0GW-HTS-2ND-SHDG-CD;
      KS0GW00.KS0GW-PERIOD = ".";
      KS0GW01.KS0GW-HTS-SHDG-CD = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
      KS0GW01.KS0GW-STAT = KS0GW00.KS0GW-STAT; /* status code*/

      /* PROJ. ID C015 - save fields in working storage so that when*/
      /* BA 5/11/92    the second and third screens are displayed*/
      /* the information will already be in the fields.*/

      KS0GW02.KS0GW-GEN-DTY-RATE = VHSNBR01.KS-GEN-DTY-RATE;
      KS0GW02.KS0GW-GEN-DTY-UNT = VHSNBR01.KS-GEN-DTY-UNT;
      KS0GW02.KS0GW-GEN-UOM-ABRV = VHSNBR01.KS-GEN-UOM-ABRV;

      KS0GW00.KS0GW-IX5 = 1;
      while (KS0GW00.KS0GW-IX5 <= 7)
        KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IX5] = VHSNBR01.KS-SPCL-DTY-RATE[KS0GW-IX5];
        KS0GW03.KS0GW-SPCL-DTY-UNT[KS0GW-IX5] = VHSNBR01.KS-SPCL-DTY-UNT[KS0GW-IX5];
        KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IX5] = VHSNBR01.KS-SPCL-UOM-ABRV[KS0GW-IX5];
        KS0GW03.KS0GW-SPCL-QLFY[KS0GW-IX5] = VHSNBR01.KS-SPCL-QLFY[KS0GW-IX5];
        KS0GW00.KS0GW-IX5 = KS0GW00.KS0GW-IX5 + 1;
      end

      KS0GW03.KS0GW-COL2-DTY-RATE = VHSNBR01.KS-COL2-DTY-RATE;
      KS0GW03.KS0GW-COL2-DTY-UNT = VHSNBR01.KS-COL2-DTY-UNT;
      KS0GW03.KS0GW-COL2-UOM-ABRV = VHSNBR01.KS-COL2-UOM-ABRV;

      KS0GW01.KS0GW-DTL-CPTR-CD[KS0GW-IX2] = VHSNBR01.KS-HTS-CPTR-CD; /* chapter*/
      KS0GW01.KS0GW-DTL-HDG-CD[KS0GW-IX2] = VHSNBR01.KS-HTS-HDG-CD; /* heading cd*/
      KS0GW01.KS0GW-PERIOD1[KS0GW-IX2] = ".";
      KS0GW01.KS0GW-DTL-1ST-SHDG-CD[KS0GW-IX2] = VHSNBR01.KS-HTS-1ST-SHDG-CD; /* sub-heading cd*/
      KS0GW01.KS0GW-PERIOD2[KS0GW-IX2] = ".";
      KS0GW01.KS0GW-DTL-2ND-SHDG-CD[KS0GW-IX2] = VHSNBR01.KS-HTS-2ND-SHDG-CD; /* sub-heading cd*/
      KS0GW01.KS0GW-DTL-STAT-CD[KS0GW-IX2] = VHSNBR01.KS-HTS-STAT-CD; /* status code*/
      KS0GW01.KS0GW-DTL-QOTA-CD[KS0GW-IX2] = VHSNBR01.YQT-QOTA-CAT-CD;
      KS0GW00.KS0GW-GEN-DTY-RATE = VHSNBR01.KS-GEN-DTY-RATE;
      KS0GW00.KS0GW-GEN-DTY-UNT = VHSNBR01.KS-GEN-DTY-UNT;
      KS0GW00.KS0GW-GEN-UOM-ABRV = VHSNBR01.KS-GEN-UOM-ABRV;
      KS0G-11510();
      KS0GW01.KS0GW-DTL-GEN-DTY-RATE[KS0GW-IX2] = KS0GW00.KS0GW-FORMATTED-RATE;
    else
      KS0GW01.KS0GW-DTL-HTS-NBR[KS0GW-IX2] = " "; /* HS number*/
      KS0GW01.KS0GW-DTL-QOTA-CD[KS0GW-IX2] = " "; /* Quota category cd*/
      KS0GW01.KS0GW-DTL-GEN-DTY-RATE[KS0GW-IX2] = " "; /* General dty*/
    end
    KS0GW01.KS0GW-DTL-STAT-DESC[KS0GW-IX2] = VHSNBR01.KS-HTS-STAT-DESC[KS0GW-IX1]; /* status description*/
    KS0GW00.KS0GW-IX1 = KS0GW00.KS0GW-IX1 + 1; /* increment index*/
    KS0GW00.KS0GW-IX2 = KS0GW00.KS0GW-IX2 + 1; /* increment index*/
  end

  KS0GW00.KS0GW-IX2 = KS0GW00.KS0GW-IX2 + 1; /* allows for blank line*/


end // end KS0G-11500

// format general duty rate
Function KS0G-11510()
  /* ----------------------------------------------------------------------*/
  /* this routine moves the general duty rate, general duty unit and*/
  /* general duty uom abrv to a formatted field suitable for viewing.*/
  /* ----------------------------------------------------------------------*/

  KS0GW00.KS0GW-FORMATTED-RATE = " "; /* spaces to result field*/

  KS0GW00.KS0GW-IXM = 1; /* initialize index*/

  if (KS0GW00.KS0GW-GEN-DTY-RATE == 0 /* if both rate & unit are zeros*/
   && KS0GW00.KS0GW-GEN-DTY-UNT == 0)
    return; /* return to previous process*/
  end

  if (KS0GW00.KS0GW-GEN-DTY-RATE > 0) /* if rate > zeros*/
    if (KS0GW00.KS0GW-RATE-BYTE[1] > "0") /* if 1st byte > zero*/
      KS0GW00.KS0GW-FORMAT-BYTE[1] = KS0GW00.KS0GW-RATE-BYTE[1]; /* move in 1st two bytes*/
      KS0GW00.KS0GW-FORMAT-BYTE[2] = KS0GW00.KS0GW-RATE-BYTE[2];
      KS0GW00.KS0GW-IXM = 3;
    else
      KS0GW00.KS0GW-FORMAT-BYTE[1] = KS0GW00.KS0GW-RATE-BYTE[2];
      KS0GW00.KS0GW-IXM = 2;
    end
    if (KS0GW00.KS0GW-RATE-BYTE[3] == "0" /* if 3rd byte = zero*/
     && KS0GW00.KS0GW-RATE-BYTE[4] == "0" /* & 4th byte = zero*/
     && KS0GW00.KS0GW-RATE-BYTE[5] == "0") /* & 5th byte = zero*/
       /* next sentence*/
    else
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = ".";
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-RATE-BYTE[3]; /* move in 3rd byte*/
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
      if (KS0GW00.KS0GW-RATE-BYTE[5] > "0")
        KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-RATE-BYTE[4]; /* move in 4th byte*/
        KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
        KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-RATE-BYTE[5]; /* move in 5th byte*/
        KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
      else
        if (KS0GW00.KS0GW-RATE-BYTE[4] > "0")
          KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-RATE-BYTE[4]; /* move in 4th byte*/
          KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
        end
      end
    end
    KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = "%";
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
    if (KS0GW00.KS0GW-GEN-DTY-UNT > 0) /* something in unit ?*/
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = " ";
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = "+";
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = " ";
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
    end
  end
  if (KS0GW00.KS0GW-GEN-DTY-UNT > 0) /* something in unit ?*/
    KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = "$";
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
    if (KS0GW00.KS0GW-UNIT-BYTE[1] > "0") /* if 1st byte > zero*/
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UNIT-BYTE[1]; /* move in 1st two bytes*/
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UNIT-BYTE[2];
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
    else
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UNIT-BYTE[2];
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
    end
    if (KS0GW00.KS0GW-UNIT-BYTE[3] == "0" /* if 3rd byte = zero*/
     && KS0GW00.KS0GW-UNIT-BYTE[4] == "0" /* & 4th byte = zero*/
     && KS0GW00.KS0GW-UNIT-BYTE[5] == "0") /* & 5th byte = zero*/
       /* next sentence*/
    else
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = ".";
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
      KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UNIT-BYTE[3]; /* move in 3rd byte*/
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
      if (KS0GW00.KS0GW-UNIT-BYTE[5] > "0")
        KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UNIT-BYTE[4]; /* move in 4th byte*/
        KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
        KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UNIT-BYTE[5]; /* move in 5th byte*/
        KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
      else
        if (KS0GW00.KS0GW-UNIT-BYTE[4] > "0")
          KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UNIT-BYTE[4]; /* move in 4th byte*/
          KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
        end
      end
    end
    KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = "/";
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
    KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UOM-BYTE[1];
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
    KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UOM-BYTE[2];
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
    KS0GW00.KS0GW-FORMAT-BYTE[KS0GW-IXM] = KS0GW00.KS0GW-UOM-BYTE[3];
  end

end // end KS0G-11510

// add page to temp storage
Function KS0G-11600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/

  KS0GW01.XXXTSLEN = KS0GW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (KS0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

     /* build table of hts nbrs and ts page nbrs;*/

    KS0GW00.KS0GW-IX1 = 1; /* initialize index*/
    if (TA5REC.TA5TSQIX == 1) /* first page written?*/
      KS0GW00.KS0GW-STAT-TSQ-PAGE-TBL = " "; /* clear table*/
      KS0GW00.KS0GW-IX3 = 1; /* initialize index*/
    end

    while (KS0GW00.KS0GW-IX1 <= 12) /* for a max of 12 times*/
      if (KS0GW01.KS0GW-DTL-HTS-NBR[KS0GW-IX1] > " ")
        KS0GW00.KS0GW-STAT-CODE[KS0GW-IX3] = KS0GW01.KS0GW-DTL-HTS-NBR[KS0GW-IX1]; /* save hts nbr*/
        KS0GW00.KS0GW-TS-PAGE-NBR[KS0GW-IX3] = TA5REC.TA5TSQIX; /* save page nbr*/
        KS0GW00.KS0GW-IX1 = KS0GW00.KS0GW-IX1 + 1; /* increment index*/
        KS0GW00.KS0GW-IX3 = KS0GW00.KS0GW-IX3 + 1; /* increment index*/
      else
        KS0GW00.KS0GW-IX1 = KS0GW00.KS0GW-IX1 + 1; /* increment index*/
      end
    end

    if (KS0GW00.KS0GW-IX3 > 100) /* table getting full?*/
      converseLib.validationFailed(84); /* internal table full*/
    end

    set KS0GW01 empty; /* M001 display storage*/

    KS0GW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  KSWREC.XXXPRCNM = "11600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-11600

// close selected set
Function KS0G-11700()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6120" ("C1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "11700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-11700

// Format and converse the map
Function KS0G-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (KS0GW00.KS0GW-SWF == "Y") /* Map must be formatted*/

      KS0G-12100(); /* format data on map*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KS0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0GM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0GM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/

    else

      KS0GM001.XXXPRCNM = COMMAREA.CAMSG; /* message text*/

    end

    KS0GM001.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0GM001 alarm; /* Indicate sound alarm*/

  end

  converse KS0GM001 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = KS0GM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0GM001.CAITEM; /* Application data*/

end // end KS0G-12000

// format the display data
Function KS0G-12100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set KS0GM001 initial; /* M001 input/output area*/

  KS0GW00.KS0GW-SWF = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* if we have just come back from a change and there is no data*/
  /* to display, set the last changed stat-sfx field to blanks in*/
  /* order by bypass the setting of the cursor routine which reads*/
  /* the TSQ.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.TA5TSQIX == 0) /* no data read ?*/
    KS0GW00.KS0GW-LAST-CHGD-STAT = " "; /* bypass reading tsq*/
  end

  /* -------------------------------------------------------------*/
  /* if key information is passed in kswrec, use it to position*/
  /* the cursor.  Added 08/27/92  smarie*/
  /* -------------------------------------------------------------*/

  if (KSWREC.KSW-HTS-NBR > " ") /* Something passed?*/
    KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KSWREC.KSW-HTS-NBR;
    KS0GW00.KS0GW-PERIOD1 = ".";
    KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;
  end

  /* ------------------------------------------------------------*/
  /* If we have just returned from changing a stat-sfx, we need*/
  /* to position the cursor on the last stat-sfx changed.*/
  /* The following code finds the tsq page that the stat-sfx is on.*/
  /* This is also applicable for adds.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-LAST-CHGD-STAT > " ") /* just back from change?*/
    KS0GW00.KS0GW-IX3 = 1; /* initialize index*/
    while (KS0GW-IX3 <= 100)
      if (KS0GW00.KS0GW-LAST-CHGD-STAT < 
      KS0GW00.KS0GW-STAT-CODE[KS0GW-IX3])
        KS0GW00.KS0GW-IX3 = KS0GW00.KS0GW-IX3 - 1; /* take prev one*/
        if (KS0GW00.KS0GW-IX3 < 1) /* if less than 1*/
          KS0GW00.KS0GW-IX3 = 1; /* set to 1*/
        end
        KS0GW00.XXXTSPAG = KS0GW00.KS0GW-TS-PAGE-NBR[KS0GW-IX3]; /* set ts page nbr*/
        KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-STAT-CODE[KS0GW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
        KS0GW00.KS0GW-IX3 = 100; /* quit the search*/
      else
        if (KS0GW00.KS0GW-STAT-CODE[KS0GW-IX3] == " ") /* sub-hdg blank?*/
          KS0GW00.KS0GW-IX3 = KS0GW00.KS0GW-IX3 - 1; /* take prev one*/
          if (KS0GW00.KS0GW-IX3 < 1) /* if less than 1*/
            KS0GW00.KS0GW-IX3 = 1; /* set to 1*/
          end
          KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-STAT-CODE[KS0GW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
          KS0GW00.XXXTSPAG = KS0GW00.KS0GW-TS-PAGE-NBR[KS0GW-IX3]; /* set ts page nbr*/
          KS0GW00.KS0GW-IX3 = 100; /* quit the search*/
        end
      end
      KS0GW00.KS0GW-IX3 = KS0GW00.KS0GW-IX3 + 1; /* set index up by 1*/
    end
    KS0G-12110(); /* read tsq page*/
    set KS0GM001.XXXLITPG skip; /* "PAGE" literal*/
    KS0GM001.XXXTSPAG = KS0GW00.XXXTSPAG; /* Current page*/
    set KS0GM001.XXXLITOF skip; /* "OF" literal*/
    KS0GM001.TA5TSQIX = KS0GW00.TA5TSQIX; /* Highest page*/
  else
    /* ------------------------------------------------------------*/
    /* If the page in storage is not the page to be displayed,*/
    /* obtain the desired page from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (KS0GW00.TA5TSQIX > 0) /* Pages were formatted*/

      if (KS0GW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

        /* ------------------------------------------------------------*/
        /* If the current page has been changed, update the page in*/
        /* storage before obtaining the next one to display.*/
        /* ------------------------------------------------------------*/

        if (KS0GW00.KS0GW-SWU == "Y") /* Current page was changed*/

          KS0G-12120(); /* Update temporary storage page*/

          KS0GW00.KS0GW-SWU = "N"; /* Storage update switch*/

        end

        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/

        if (KS0GW00.XXXTSPAG > KS0GW00.TA5TSQIX) /* Desired greater highest*/
          KS0GW00.XXXTSPAG = KS0GW00.TA5TSQIX; /* Default to highest*/
        end

        KS0G-12110(); /* read tsq page*/

      end

      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/

      set KS0GM001.XXXLITPG skip; /* "PAGE" literal*/
      KS0GM001.XXXTSPAG = KS0GW00.XXXTSPAG; /* Current page*/
      set KS0GM001.XXXLITOF skip; /* "OF" literal*/
      KS0GM001.TA5TSQIX = KS0GW00.TA5TSQIX; /* Highest page*/

    else

      set KS0GM001.XXXLITPG skip; /* "PAGE" literal*/
      KS0GM001.XXXTSPAG = 1; /* Current page*/
      set KS0GM001.XXXLITOF skip; /* "OF" literal*/
      KS0GM001.TA5TSQIX = 1; /* Highest page*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  KS0GM001.KS0GM-HTS-CPTR-CD = KS0GW01.KS0GW-HTS-CPTR-CD; /* cptr*/
  KS0GM001.KS0GM-HTS-CPTR-SDESC = KS0GW01.KS0GW-HTS-CPTR-SDESC;
  KS0GM001.KS0GM-HTS-HDG-CD = KS0GW01.KS0GW-HTS-HDG-CD; /* hdg*/
  KS0GM001.KS0GM-HTS-HDG-SDESC = KS0GW01.KS0GW-HTS-HDG-SDESC;
  KS0GM001.KS0GM-HTS-SHDG-CD = KS0GW01.KS0GW-HTS-SHDG-CD;
  KS0GM001.KS0GM-HTS-SHDG-SDESC = KS0GW01.KS0GW-HTS-SHDG-SDESC;
  KS0GM001.KS0GM-STAT = KS0GW01.KS0GW-STAT; /* status code*/

  KS0GW00.KS0GW-IXM = 1; /* Initialize line index*/

  while (KS0GW00.KS0GW-IXM <= 12) /* Until screen is full*/

    KS0GM001.KS0GMSEL[KS0GW-IXM] = " ";
    KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM] = KS0GW01.KS0GW-DTL-HTS-NBR[KS0GW-IXM];
    KS0GM001.KS0GM-DTL-HTS-STAT-DESC[KS0GW-IXM] = KS0GW01.KS0GW-DTL-STAT-DESC[KS0GW-IXM];
    KS0GM001.KS0GM-DTL-QOTA-CAT-CD[KS0GW-IXM] = KS0GW01.KS0GW-DTL-QOTA-CD[KS0GW-IXM];
    KS0GM001.KS0GM-DTL-GEN-DTY-RATE[KS0GW-IXM] = KS0GW01.KS0GW-DTL-GEN-DTY-RATE[KS0GW-IXM];

    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* Increment line index*/

  end

  /* ------------------------------------------------------------*/
  /* the default cursor position is hts nbr.*/
  /* the routine below may change the cursor position.*/
  /* ------------------------------------------------------------*/

  if (KS0GM001.KS0GM-DTL-HTS-CD[1] != " ") /* something in heading*/
    set KS0GM001.KS0GMSEL[1] cursor, normal;
  else
    set KS0GM001.KS0GM-HTS-NBR cursor, normal;
  end

  /* ------------------------------------------------------------*/
  /* if we're returning from an add or change, position the cursor*/
  /* on the chapter we just finished with.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 1; /* initialize index*/

  while (KS0GW-IXM <= 12) /* until all lines are processed*/
    if (KS0GW00.KS0GW-LAST-CHGD-STAT > " ")
      if (KS0GW00.KS0GW-LAST-CHGD-STAT == 
      KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM]) /* same hdg ?*/
        set KS0GM001.KS0GMSEL[KS0GW-IXM] cursor, normal;
      else
        set KS0GM001.KS0GMSEL[KS0GW-IXM] normal;
      end
    else
      set KS0GM001.KS0GMSEL[KS0GW-IXM] normal;
    end
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
  end

  KS0GW00.KS0GW-LAST-CHGD-STAT = " "; /* clear last cptr*/

  /* ---------------------------------------------------------------------*/
  /* this code clears the selection field if there is no data on the line.*/
  /* ---------------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 1; /* initialize index*/

  while (KS0GW-IXM <= 12) /* until all lines are processed*/
    if (KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM] == " ")
      set KS0GM001.KS0GMSEL[KS0GW-IXM] invisible, skip;
    end
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
  end

  if (COMMAREA.CACHGFL == "Y")
    set KS0GM001.KS0GM-PF14 bold, skip;
  end

  if (COMMAREA.CAADDFL == "Y")
    set KS0GM001.KS0GM-PF13 bold, skip;
  end

end // end KS0G-12100

// read tsq page
Function KS0G-12110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/

  KS0GW01.XXXTSLEN = KS0GW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0GW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (KS0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  KSWREC.XXXPRCNM = "12110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end KS0G-12110

// update tsq page
Function KS0G-12120()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (KS0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  KSWREC.XXXPRCNM = "12120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end KS0G-12120

// Check attention identifier
Function KS0G-13000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/

  KSWREC.KSW-HTS-NBR = " ";

  if (converseVar.eventKey is pakey) /* PA was pressed*/

    if (KS0GW00.KS0GW-SWR == "Y") /* Request for data pending*/
      set KS0GW01 empty; /* M001 display storage*/
    end

    KS0GW00.KS0GW-SWF = "N"; /* Format the map switch*/
    KS0GW00.KS0GW-SWR = "Y"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/

  if (KS0GM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      KS0G-11100(); /* purge temp storage*/

      XSKS-S0001(); /* Exit to another application*/

      set KS0GM001.CATOAP cursor, bold; /* Highlight*/

    else

      KSWREC.XXXPRCNM = "13000"; /* Module ideKSification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end


  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0GM001";
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      KSWREC.KS-HTS-CPTR-CD = KS0GM001.KS0GM-HTS-CPTR-CD;
      KSWREC.KS-HTS-HDG-CD = KS0GM001.KS0GM-HTS-HDG-CD;
      KSWREC.KSW-HTS-SHDG-CD = KS0GM001.KS0GM-HTS-SHDG-CD;
      COMMAREA.CATOAP = "KS0F"; /* To application*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "KS0A"; /* TO application*/
    end

    XSKS-S0001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* PF8  was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* PF14 was not pressed*/

    KSWREC.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (COMMAREA.CAADDFL == "N") /* chg flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    end
  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* chg flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    end
  end

end // end KS0G-13000

// Reset highlighted fields
Function KS0G-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0GM001.KS0GM-HTS-NBR initialAttributes; /* HTS number*/
  set KS0GM001.KS0GM-HTS-CPTR-CD initialAttributes; /* Chapter cd*/
  set KS0GM001.KS0GM-HTS-CPTR-SDESC initialAttributes; /* Chapter descr*/
  set KS0GM001.KS0GM-HTS-HDG-CD initialAttributes; /* heading cd*/
  set KS0GM001.KS0GM-HTS-HDG-SDESC initialAttributes; /* heading description*/
  set KS0GM001.KS0GM-HTS-SHDG-CD initialAttributes; /* sub-hdg cd*/
  set KS0GM001.KS0GM-HTS-SHDG-SDESC initialAttributes; /* sub-hdg description*/
  set KS0GM001.KS0GM-STAT initialAttributes; /* Status*/

   /* the attributes for the detail lines are also set in ks0g-12100*/

  KS0GW00.KS0GW-IXM = 1; /* set index to 1*/
  while (KS0GW00.KS0GW-IXM <= 12) /* for all detail lines*/
    if (KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM] > " ")
      set KS0GM001.KS0GMSEL[KS0GW-IXM] normal;
    else
      set KS0GM001.KS0GMSEL[KS0GW-IXM] initialAttributes;
    end
    set KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM] initialAttributes;
    set KS0GM001.KS0GM-DTL-HTS-STAT-DESC[KS0GW-IXM] initialAttributes;
    set KS0GM001.KS0GM-DTL-QOTA-CAT-CD[KS0GW-IXM] initialAttributes;
    set KS0GM001.KS0GM-DTL-GEN-DTY-RATE[KS0GW-IXM] initialAttributes;
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
  end
  set KS0GM001.CATOAP initialAttributes; /* TO application*/
  set KS0GM001.CAITEM initialAttributes; /* Application data*/

end // end KS0G-14000

// Verify data that was entered
Function KS0G-15000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    KSWREC.XXXPRCNM = "15000"; /* Module identification*/
    set KS0GM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Indicate only with FAST PATH*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    KS0G-15100(); /* verify scroll request*/

  else

    KS0G-15200(); /* verify data in line*/

  end

  /* ------------------------------------------------------------*/
  /* If any error was found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0G-15000

// verify scroll request
Function KS0G-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0GW00.XXXTSPAG < 2)       /* and no previous pages*/

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0GW00.XXXTSPAG >= KS0GW00.TA5TSQIX) /* and no more pages*/

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

  /* ------------------------------------------------------------*/
  /* Indicate an error for any data that was modified.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 12; /* Initialize line index*/

  while (KS0GW00.KS0GW-IXM > 0) /* Until end of lines*/

    if (KS0GM001.KS0GMSEL[KS0GW-IXM] != KS0GW01.KS0GW-SEL[KS0GW-IXM])

      KSWREC.XXXPRCNM = "15100"; /* Module identification*/
      set KS0GM001.KS0GMSEL[KS0GW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/

    end

    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM - 1; /* Decrement line number*/

  end

  if (KS0GM001.KS0GM-STAT != KS0GW01.KS0GW-STAT) /* Status changed*/

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0GM001.KS0GM-STAT cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (KS0GM001.KS0GM-HTS-STAT != KS0GW01.KS0GW-HTS-STAT)

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0GM001.KS0GM-HTS-STAT cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (KS0GM001.KS0GM-HTS-SHDG-CD != KS0GW01.KS0GW-HTS-SHDG-CD) /* sub-hdg chg*/

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0GM001.KS0GM-HTS-SHDG-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (KS0GM001.KS0GM-HTS-HDG-CD != KS0GW01.KS0GW-HTS-HDG-CD) /* hdg chgd*/

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0GM001.KS0GM-HTS-HDG-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (KS0GM001.KS0GM-HTS-CPTR-CD != KS0GW01.KS0GW-HTS-CPTR-CD) /* cptr chgd*/

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0GM001.KS0GM-HTS-CPTR-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (KS0GM001.KS0GM-HTS-NBR != KS0GW01.KS0GW-HTS-NBR) /* hts # changed*/

    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0GM001.KS0GM-HTS-NBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

end // end KS0G-15100

// verify data in the line
Function KS0G-15200()
  /* ------------------------------------------------------------*/
  /* if enter was pressed and an HS Numbewr was entered, transfer*/
  /* to the application depending upon the format of the number*/
  /* entered.*/
  /* ------------------------------------------------------------*/

  if (KS0GM001.KS0GM-HTS-NBR > " " /* if hts # entered and*/
   && converseVar.eventKey is enter) /* enter pressed*/

    KS0GW00.KS0GW-HTS-NUMBER = KS0GM001.KS0GM-HTS-NBR;
    KS0G-15240(); /* verify hts number*/

    if (converseVar.validationMsgNum != 0) /* if there were any errors*/
      return; /* return to previous process*/
    end

    KS0GW00.KS0GW-HTS-NBR = KS0GM001.KS0GM-HTS-NBR;

    if (KS0GW00.KS0GW-HTS-2ND-SHDG-CD != " "
     || KS0GW00.KS0GW-HTS-1ST-SHDG-CD != " ")
      COMMAREA.CATOAP = "KS0G"; /* set destination application*/
    else

      if (KS0GW00.KS0GW-HTS-HDG-CD != " ")
        COMMAREA.CATOAP = "KS0F"; /* set destination application*/
      else

        if (KS0GW00.KS0GW-HTS-CPTR-CD != " ")
          COMMAREA.CATOAP = "KS0E"; /* set destination application*/
        end
      end
    end

    KSWREC.KSW-HTS-NBR = KS0GM001.KS0GM-HTS-NBR;

    KS0G-11100(); /* clear temp storage*/

    XSKS-S0001(); /* exit to another application*/

    KS0GW00.KS0GW-SWD = "1"; /* set map to be displayed switch*/

    exit stack;
  end

  /* ------------------------------------------------------------*/
  /* Verify the chapter number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  if (KS0GM001.KS0GM-HTS-CPTR-CD > " ")
    KS0GW00.KS0GW-HTS-CPTR-CD = KS0GM001.KS0GM-HTS-CPTR-CD;
    KS0G-15210(); /* select chapter row*/
    if (converseVar.validationMsgNum == 0) /* if there were no errors*/
      KS0GW02.KS0GW-HTS-CPTR-CD = VHSCHP01.KS-HTS-CPTR-CD; /* cptr cd to map 2 save*/
      KS0GM001.KS0GM-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC; /* short desc to map 1*/
      KS0GW00.KS0GW-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC; /* short desc to save*/
      KS0GW01.KS0GW-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC; /* short desc to map 1 save*/
      KS0GW02.KS0GW-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC; /* short desc to map 2 save*/
    else
      exit stack;
    end
  else
    KS0GM001.KS0GM-HTS-CPTR-SDESC = " ";
    KS0GW01.KS0GW-HTS-CPTR-SDESC = " ";
    KS0GW02.KS0GW-HTS-CPTR-SDESC = " ";
    converseLib.validationFailed(34);
    KSWREC.XXXPRCNM = "15200";
    set KS0GM001.KS0GM-HTS-CPTR-CD cursor, bold;
    exit stack;
  end

  /* ------------------------------------------------------------*/
  /* Verify the heading number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  if (KS0GM001.KS0GM-HTS-HDG-CD > " ")
    KS0GW00.KS0GW-HTS-HDG-CD = KS0GM001.KS0GM-HTS-HDG-CD;
    KS0G-15220(); /* select heading row*/
    if (converseVar.validationMsgNum == 0) /* if there were no errors*/
      KS0GW02.KS0GW-HTS-HDG-CD = VHSHDG01.KS-HTS-HDG-CD; /* hdg cd to map 2 save*/
      KS0GM001.KS0GM-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC; /* short desc to map 1*/
      KS0GW00.KS0GW-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC; /* short desc to save*/
      KS0GW01.KS0GW-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC; /* short desc to map 1 save*/
      KS0GW02.KS0GW-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC; /* short desc to map 2 save*/
    else
      exit stack;
    end
  else
    KS0GM001.KS0GM-HTS-HDG-SDESC = " ";
    KS0GW01.KS0GW-HTS-HDG-SDESC = " ";
    KS0GW02.KS0GW-HTS-HDG-SDESC = " ";
    converseLib.validationFailed(44);
    KSWREC.XXXPRCNM = "15200";
    set KS0GM001.KS0GM-HTS-HDG-CD cursor, bold;
    exit stack;
  end

  /* ------------------------------------------------------------*/
  /* Verify the sub-heading number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  if (KS0GM001.KS0GM-HTS-SHDG-CD > " ")
    KS0G-15230(); /* select sub-heading row*/
    if (converseVar.validationMsgNum == 0) /* if there were no errors*/
      KS0GW02.KS0GW-HTS-1ST-SHDG-CD = VHSSHD01.KS-HTS-1ST-SHDG-CD;
      KS0GW02.KS0GW-HTS-2ND-SHDG-CD = VHSSHD01.KS-HTS-2ND-SHDG-CD;
      KS0GW00.KS0GW-1ST-SHDG-CD = VHSSHD01.KS-HTS-1ST-SHDG-CD;
      KS0GW00.KS0GW-PERIOD = ".";
      KS0GW00.KS0GW-2ND-SHDG-CD = VHSSHD01.KS-HTS-2ND-SHDG-CD;
      KS0GM001.KS0GM-HTS-SHDG-SDESC = VHSSHD01.KS-HTS-SHDG-SDESC; /* short desc to map 1*/
      KS0GW00.KS0GW-HTS-SHDG-SDESC = VHSSHD01.KS-HTS-SHDG-SDESC; /* short desc to save*/
      KS0GW01.KS0GW-HTS-SHDG-SDESC = VHSSHD01.KS-HTS-SHDG-SDESC; /* short desc to map 1 save*/
      KS0GW02.KS0GW-HTS-SHDG-SDESC = VHSSHD01.KS-HTS-SHDG-SDESC; /* short desc to map 2 save*/
    else
      exit stack;
    end
  else
    KS0GM001.KS0GM-HTS-SHDG-SDESC = " ";
    KS0GW01.KS0GW-HTS-SHDG-SDESC = " ";
    KS0GW02.KS0GW-HTS-SHDG-SDESC = " ";
    converseLib.validationFailed(50);
    KSWREC.XXXPRCNM = "15200";
    set KS0GM001.KS0GM-HTS-SHDG-CD cursor, bold;
    exit stack;
  end

  /* ------------------------------------------------------------*/
  /* If status was entered and is not an 'a', 'i' or ' ', then it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/

  if (KS0GM001.KS0GM-STAT == " " /* if status equal space*/
   || KS0GM001.KS0GM-STAT == "A" /* if status equal 'a'*/
   || KS0GM001.KS0GM-STAT == "I") /* if status equal 'i'*/
    KS0GW00.KS0GW-STAT = KS0GM001.KS0GM-STAT;
  else
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    set KS0GM001.KS0GM-STAT cursor, bold; /* Highlight*/
    converseLib.validationFailed(19); /* invalid status code*/
  end

  if (converseVar.validationMsgNum != 0) /* if there were any errors*/
    return; /* return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* If selection was entered and is not a "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 12; /* set index*/

  while (KS0GW00.KS0GW-IXM >= 1)
    if (KS0GM001.KS0GMSEL[KS0GW-IXM] != KS0GW01.KS0GW-SEL[KS0GW-IXM]
     && KS0GM001.KS0GMSEL[KS0GW-IXM] != "S") /* and is not a "S"*/

      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0GM001.KS0GMSEL[KS0GW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" may be entered*/

    end
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM - 1; /* decrement index*/
  end

end // end KS0G-15200

// select a chapter row
Function KS0G-15210()
  /* ------------------------------------------------------------*/
  /* select table row*/
  /* ------------------------------------------------------------*/

  set VHSCHP01 empty; /* clear work record*/

  VHSCHP01.KS-HTS-CPTR-CD = KS0GM001.KS0GM-HTS-CPTR-CD; /* cptr cd*/

  try
    call "IO6080" ("S ", SQLCA, VHSCHP01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return*/
  /* If data not found, return an error message to the user.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(34); /* set error msg*/
        KS0GM001.KS0GM-HTS-CPTR-SDESC = " "; /* clear short desc*/
        KS0GW00.KS0GW-SWR = "N"; /* do not read data*/
        set KS0GM001.KS0GM-HTS-CPTR-CD cursor, bold; /* set cursor*/
        KS0GW00.KS0GW-IXM = 1; /* set index to 1*/
        while (KS0GW00.KS0GW-IXM <= 12) /* for all detail lines*/
          set KS0GM001.KS0GMSEL[KS0GW-IXM] invisible, skip;
          KS0GM001.KS0GMSEL[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-HTS-STAT-DESC[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-QOTA-CAT-CD[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-GEN-DTY-RATE[KS0GW-IXM] = " ";
          KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
        end
        set KS0GW01 empty; /* clear map 1 storage*/
        return; /* Return to previous process*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "15210"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CHAPTER ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSCHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSCHP01.KS-HTS-CPTR-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-15210

// select a heading row
Function KS0G-15220()
  /* ------------------------------------------------------------*/
  /* select table row*/
  /* ------------------------------------------------------------*/

  set VHSHDG01 empty; /* clear work record*/

  VHSHDG01.KS-HTS-CPTR-CD = KS0GM001.KS0GM-HTS-CPTR-CD; /* cptr cd*/
  VHSHDG01.KS-HTS-HDG-CD = KS0GM001.KS0GM-HTS-HDG-CD; /* hdg cd*/

  try
    call "IO6100" ("S ", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return*/
  /* If data not found, return an error message to the user.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(44); /* set error msg*/
        KS0GM001.KS0GM-HTS-HDG-SDESC = " "; /* clear short desc*/
        KS0GW00.KS0GW-SWR = "N"; /* do not read data*/
        set KS0GM001.KS0GM-HTS-HDG-CD cursor, bold; /* set cursor*/
        KS0GW00.KS0GW-IXM = 1; /* set index to 1*/
        while (KS0GW00.KS0GW-IXM <= 12) /* for all detail lines*/
          set KS0GM001.KS0GMSEL[KS0GW-IXM] invisible, skip;
          KS0GM001.KS0GMSEL[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-HTS-STAT-DESC[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-QOTA-CAT-CD[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-GEN-DTY-RATE[KS0GW-IXM] = " ";
          KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
        end
        set KS0GW01 empty; /* clear map 1 storage*/
        return; /* Return to previous process*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "15220"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT HEADING ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSHDG01.VHSHDG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-15220

// select sub-heading row
Function KS0G-15230()
  /* ------------------------------------------------------------*/
  /* select table row*/
  /* ------------------------------------------------------------*/

  set VHSSHD01 empty; /* clear work record*/

  VHSSHD01.KS-HTS-CPTR-CD = KS0GM001.KS0GM-HTS-CPTR-CD; /* cptr cd*/
  VHSSHD01.KS-HTS-HDG-CD = KS0GM001.KS0GM-HTS-HDG-CD; /* hdg cd*/
  KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GM001.KS0GM-HTS-SHDG-CD;
  VHSSHD01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
  VHSSHD01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;

  try
    call "IO6110" ("S ", SQLCA, VHSSHD01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return*/
  /* If data not found, return an error message to the user.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(50); /* set error msg*/
        KS0GM001.KS0GM-HTS-SHDG-SDESC = " "; /* clear short desc*/
        KS0GW00.KS0GW-SWR = "N"; /* do not read data*/
        set KS0GM001.KS0GM-HTS-SHDG-CD cursor, bold; /* set cursor*/
        KS0GW00.KS0GW-IXM = 1; /* set index to 1*/
        while (KS0GW00.KS0GW-IXM <= 12) /* for all detail lines*/
          set KS0GM001.KS0GMSEL[KS0GW-IXM] invisible, skip;
          KS0GM001.KS0GMSEL[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-HTS-STAT-DESC[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-QOTA-CAT-CD[KS0GW-IXM] = " ";
          KS0GM001.KS0GM-DTL-GEN-DTY-RATE[KS0GW-IXM] = " ";
          KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
        end
        set KS0GW01 empty; /* clear map 1 storage*/
        return; /* Return to previous process*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "15230"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT HEADING ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSSHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSSHD01.VHSSHD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-15230

// verify format of hts number
Function KS0G-15240()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999*/
  /* this routine verifies that there is a ' ' or '.' in positions*/
  /* 5 and 8. If any of the other positions contain a '.', it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 1; /* initialize index*/

  while (KS0GW00.KS0GW-IXM <= 14)
    if (KS0GW00.KS0GW-IXM == 5 /* these 3 positions must be blank or*/
     || KS0GW00.KS0GW-IXM == 8 /* equal '.'. if not, it's in error*/
     || KS0GW00.KS0GW-IXM == 14)
      if (KS0GW00.KS0GW-IXM == 5 /* these 3 positions must be blank or*/
       || KS0GW00.KS0GW-IXM == 8) /* equal '.'. if not, it's in error*/
        if (KS0GW00.KS0GW-HTS-BYTE[KS0GW-IXM] != " ")
          if (KS0GW00.KS0GW-HTS-BYTE[KS0GW-IXM] != ".")
            KSWREC.XXXPRCNM = "15240"; /* Module id*/
            set KS0GM001.KS0GM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      else
        if (KS0GW00.KS0GW-IXM == 14)
          if (KS0GW00.KS0GW-HTS-BYTE[KS0GW-IXM] != " ")
            KSWREC.XXXPRCNM = "15240"; /* Module id*/
            set KS0GM001.KS0GM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      end
    else
      if (KS0GW00.KS0GW-HTS-BYTE[KS0GW-IXM] == ".")
        KSWREC.XXXPRCNM = "15240"; /* Module id*/
        set KS0GM001.KS0GM-HTS-NBR cursor, bold;
        converseLib.validationFailed(35); /* Invalid HTS nbr*/
      end
    end
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
  end

end // end KS0G-15240

// Process valid input request
Function KS0G-16000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-SWF = "Y"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    KS0GW00.XXXTSPAG = KS0GW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    KS0GW00.XXXTSPAG = KS0GW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* if enter was pressed and a sub-hdg was entered, find that sub-hdg*/
  /* in the table and position the cursor on that sub-hdg.*/
  /*  */
  /* if enter was pressed and a selection was made, move selected*/
  /* chapter, heading and sub-heading numbers to kswrec and xfer to KS0g.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter pressed?*/

    if (KS0GM001.KS0GM-HTS-CPTR-CD != KS0GW01.KS0GW-HTS-CPTR-CD /* cptr*/
     || KS0GM001.KS0GM-HTS-HDG-CD != KS0GW01.KS0GW-HTS-HDG-CD   /* hdg*/
     || KS0GM001.KS0GM-HTS-SHDG-CD != KS0GW01.KS0GW-HTS-SHDG-CD /* shdg*/
     || KS0GM001.KS0GM-STAT != KS0GW01.KS0GW-STAT)              /* or status changed*/
      KS0GW00.KS0GW-SWF = "Y"; /* format the map*/
      KS0GW00.KS0GW-SWR = "Y"; /* yes, request new data*/
      KS0GW00.KS0GW-HTS-CPTR-CD = KS0GM001.KS0GM-HTS-CPTR-CD;
      KS0GW00.KS0GW-HTS-HDG-CD = KS0GM001.KS0GM-HTS-HDG-CD;
      KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GM001.KS0GM-HTS-SHDG-CD;
      KS0GW00.KS0GW-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
      KS0GW00.KS0GW-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
      KS0GW00.KS0GW-LAST-CHGD-STAT = " ";
      KS0GW00.KS0GW-STAT = KS0GM001.KS0GM-STAT; /* save new status*/
      set KS0GW01 empty; /* clear work area*/
      set KS0GW02 empty; /* clear work area*/
      return; /* return*/
    end
    if (KS0GM001.KS0GM-HTS-STAT > " ") /* stat cd entered?*/
      KS0GW00.KS0GW-CPTR-BKDN = KS0GM001.KS0GM-HTS-CPTR-CD; /* save cptr cd*/
      KS0GW00.KS0GW-HDG-BKDN = KS0GM001.KS0GM-HTS-HDG-CD; /* save hdg cd*/
      KS0GW00.KS0GW-PERIOD1 = ".";
      KS0GW00.KS0GW-SHDG-BKDN = KS0GM001.KS0GM-HTS-SHDG-CD; /* save shdg cd*/
      KS0GW00.KS0GW-STAT-CD-BKDN = KS0GM001.KS0GM-HTS-STAT; /* save stat cd*/
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN; /* save cptr/hdg/sub-hdg/stat cds*/
      KS0GW00.KS0GW-SWR = "Y"; /* yes, request new data*/
      KS0GW00.KS0GW-SWF = "Y"; /* format the map*/
      return; /* return*/
    end

    KS0GW00.KS0GW-SWD = "2"; /* set map to be displayed switch*/
    KS0GW00.KS0GW-SWR = "Y"; /* yes, request new data*/
    KS0GW00.KS0GW-SWF = "Y"; /* format the map*/
    KS0GW00.KS0GW-FNC = "I"; /* set inquiry mode*/

    KS0GW00.KS0GW-NEXT-SEL-STAT = " "; /* clear sel field save*/

    KS0GW00.KS0GW-IXM = 1; /* reset index*/
    while (KS0GW00.KS0GW-IXM <= 12) /* Until end of lines*/

      if (KS0GM001.KS0GMSEL[KS0GW-IXM] == "S") /* this line selected?*/

        if (KS0GW00.KS0GW-NEXT-SEL-STAT == " ") /* first one blank*/
          KS0GW00.KS0GW-SELECTED-STATS[KS0GW-IXM] = KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM]; /* save selected stats*/
          KS0GW00.KS0GW-NEXT-SEL-STAT = KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM]; /* save next sub-hdg to change*/
          KS0GW00.KS0GW-SEL-INDEX = KS0GW00.KS0GW-IXM; /* selected idx*/
        else
          KS0GW00.KS0GW-SELECTED-STATS[KS0GW-IXM] = KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM]; /* save selected stats*/
        end
      end
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* Increment line index*/
    end
    if (KS0GW00.KS0GW-NEXT-SEL-STAT == " ") /* if none were selected*/
      converseLib.validationFailed(43); /* set error msg nbr*/
      KSWREC.XXXPRCNM = "16000";
      KS0GW00.KS0GW-SWR = "N"; /* do not request data*/
      KS0GW00.KS0GW-SWF = "N"; /* do not format map*/
      KS0GW00.KS0GW-SWD = "1"; /* Map to be displayed switch*/
      return; /* return*/
    end

    exit stack;

  end

  if (converseVar.eventKey is pf13) /* F13 pressed?*/
    KS0GW00.KS0GW-SWD = "2"; /* Map to be displayed switch*/
    KS0GW00.KS0GW-FNC = "A"; /* set function switch*/
    KS0GW00.KS0GW-SAVE-ADD-CNT = 0; /* set add cntr to control*/
    return;
  end

  KS0GW00.KS0GW-NEXT-SEL-STAT = " "; /* clear sel field save*/

  if (converseVar.eventKey is pf14) /* F14 pressed?*/
    set KS0GW04 empty; /* clear original storage area*/
    KS0GW00.KS0GW-SWR = "Y"; /* data is requested*/
    KS0GW00.KS0GW-SWD = "2"; /* Map to be displayed switch*/
    KS0GW00.KS0GW-FNC = "C"; /* set function switch*/
    KS0GW00.KS0GW-IXM = 1; /* reset index*/
    while (KS0GW00.KS0GW-IXM <= 12) /* Until end of lines*/

      if (KS0GM001.KS0GMSEL[KS0GW-IXM] == "S") /* this line selected?*/
        if (KS0GW00.KS0GW-NEXT-SEL-STAT == " ") /* first one blank*/
          KS0GW00.KS0GW-SELECTED-STATS[KS0GW-IXM] = KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM]; /* save selected stats*/
          KS0GW00.KS0GW-NEXT-SEL-STAT = KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM]; /* save next sub-hdg to change*/
          KS0GW00.KS0GW-SEL-INDEX = KS0GW00.KS0GW-IXM; /* selected idx*/
        else
          KS0GW00.KS0GW-SELECTED-STATS[KS0GW-IXM] = KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM]; /* save selected stats*/
        end
      end
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* Increment line index*/

    end
    if (KS0GW00.KS0GW-NEXT-SEL-STAT == " ") /* if none were selected*/
      converseLib.validationFailed(43); /* set error msg nbr*/
      KSWREC.XXXPRCNM = "16000";
      KS0GW00.KS0GW-SWR = "N"; /* do not request data*/
      KS0GW00.KS0GW-SWF = "N"; /* do not format map*/
      KS0GW00.KS0GW-SWD = "1"; /* Map to be displayed switch*/
      return; /* return*/
    end
  end

  if (converseVar.eventKey is pf15) /* F15 pressed?*/
    KS0GW00.KS0GW-IXM = 1; /* reset index*/
    while (KS0GW00.KS0GW-IXM <= 12) /* Until end of lines*/

      if (KS0GM001.KS0GMSEL[KS0GW-IXM] == "S") /* this line selected?*/

        KSWREC.KSW-HTS-NBR = KS0GM001.KS0GM-DTL-HTS-CD[KS0GW-IXM];
        KS0GW00.KS0GW-IXM = 13; /* end the search*/

      end
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* Increment line index*/
    end
    KS0G-11100(); /* clear temp storage*/

    COMMAREA.CATOAP = "KS0G"; /* set destination application*/

    XSKS-S0001(); /* exit to another application*/

    KS0GW00.KS0GW-SWD = "1"; /* set map to be displayed switch*/

    exit stack;

  end

  if (converseVar.eventKey is pf21) /* PF21 pressed?*/

    COMMAREA.CATOAP = "KS0A"; /* set destination application*/

    KS0G-11100(); /* clear temp storage*/

    XSKS-S0001(); /* exit to another application*/

    KS0GW00.KS0GW-SWD = "1"; /* set map to be displayed switch*/

    exit stack;
  end
end // end KS0G-16000

// display the selected table row
Function KS0G-20000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0G-21000(); /* Obtain the data to display*/

  KS0G-22000(); /* Format and display the map*/

  KS0G-23000(); /* Check attention identifier*/

  KS0G-24000(); /* Reset fields to normal intensity*/

  KS0G-25000(); /* Verify the data that was entered*/

  KS0G-26000(); /* Process valid input request*/


end // end KS0G-20000

// obtain the data to display
Function KS0G-21000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* if an add function was requested, there will be no data to*/
  /* display, so return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-FNC == "A") /* if add function ?*/
    return;
  end

  /* ------------------------------------------------------------*/
  /* Clear the map display storage area.*/
  /* ------------------------------------------------------------*/

  set KS0GW02 empty; /* M002 display storage*/

  /* ------------------------------------------------------------*/
  /* Obtain the table row to be displayed.*/
  /* ------------------------------------------------------------*/

  KS0G-21100(); /* Obtain the table row*/

  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    KS0G-21200(); /* Save in display storage*/

  else

    KSWREC.XXXPRCNM = "21000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-SWR = "N"; /* Request for data switch*/

end // end KS0G-21000

// select requested table row
Function KS0G-21100()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty; /* Clear row storage area*/

  /* ------------------------------------------------------------*/
  /* Set the chapter nbr/hdg/shdg for the select. If we were passed a*/
  /* key in kswrec, use it. If not, use the one in ks0gw00.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.KSW-HTS-NBR > " ") /* key present in pass area ?*/
    VHSNBR01.KS-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    VHSNBR01.KS-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
    VHSNBR01.KS-HTS-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
    VHSNBR01.KS-HTS-2ND-SHDG-CD = KSWREC.KS-HTS-2ND-SHDG-CD;
    VHSNBR01.KS-HTS-STAT-CD = KSWREC.KS-HTS-STAT-CD;
  else
    KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GW00.KS0GW-NEXT-SEL-STAT;
    VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-CPTR-BKDN;
    VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HDG-BKDN;
    KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GW00.KS0GW-SHDG-BKDN;
    VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
    VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
    KS0GW00.KS0GW-STAT-BKDN = KS0GW00.KS0GW-STAT-CD-BKDN;
    VHSNBR01.KS-HTS-STAT-CD = KS0GW00.KS0GW-STAT-CD;
  end

  try
    call "IO6120" ("S ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "21100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FROM TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end KS0G-21100

// save data in display storage
Function KS0G-21200()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* Also, Save the original data from the table row in ks0gw04.*/
  /* ------------------------------------------------------------*/

  KS0GW02.CACHGFL = "Y"; /* Indicate modifiable data*/

  KS0GW02.KS0GW-HTS-CPTR-SDESC = KS0GW01.KS0GW-HTS-CPTR-SDESC;
  KS0GW02.KS0GW-HTS-HDG-SDESC = KS0GW01.KS0GW-HTS-HDG-SDESC;
  KS0GW02.KS0GW-HTS-SHDG-SDESC = KS0GW01.KS0GW-HTS-SHDG-SDESC;
  KS0GW02.KS0GW-HTS-CPTR-CD = VHSNBR01.KS-HTS-CPTR-CD; /* cptr cd*/
  KS0GW02.KS0GW-HTS-HDG-CD = VHSNBR01.KS-HTS-HDG-CD; /* hdg cd*/
  KS0GW02.KS0GW-HTS-1ST-SHDG-CD = VHSNBR01.KS-HTS-1ST-SHDG-CD;
  KS0GW02.KS0GW-HTS-2ND-SHDG-CD = VHSNBR01.KS-HTS-2ND-SHDG-CD;
  KS0GW02.KS0GW-STAT-CD = VHSNBR01.KS-HTS-STAT-CD;
  KS0GW02.KS0GW-HTS-STAT-DESC[1] = VHSNBR01.KS-HTS-STAT-DESC[1];
  KS0GW04.KS0GW-HTS-STAT-DESC[1] = VHSNBR01.KS-HTS-STAT-DESC[1];
  KS0GW02.KS0GW-HTS-STAT-DESC[2] = VHSNBR01.KS-HTS-STAT-DESC[2];
  KS0GW04.KS0GW-HTS-STAT-DESC[2] = VHSNBR01.KS-HTS-STAT-DESC[2];
  KS0GW02.KS0GW-HTS-STAT-DESC[3] = VHSNBR01.KS-HTS-STAT-DESC[3];
  KS0GW04.KS0GW-HTS-STAT-DESC[3] = VHSNBR01.KS-HTS-STAT-DESC[3];
  KS0GW02.KS0GW-STAT-SDESC = VHSNBR01.KS-HTS-STAT-SDESC;
  KS0GW04.KS0GW-STAT-SDESC = VHSNBR01.KS-HTS-STAT-SDESC;
  KS0GW02.KS0GW-TEAM-CD = VHSNBR01.KS-TEAM-CD;
  KS0GW04.KS0GW-TEAM-CD = VHSNBR01.KS-TEAM-CD;

  if (VHSNBR01.KS-TEAM-CD > " ")
    KS0GM002.KS0GM-TEAM-CD = VHSNBR01.KS-TEAM-CD;
    KS0G-25100();
    KS0GM002.KS0GM-TEAM-SDESC = VCTEAM01.KS-TEAM-SDESC;
    KS0GW02.KS0GW-TEAM-SDESC = VCTEAM01.KS-TEAM-SDESC;
  end

  KS0GW02.KS0GW-QOTA-CAT-CD = VHSNBR01.YQT-QOTA-CAT-CD;
  KS0GW04.KS0GW-QOTA-CAT-CD = VHSNBR01.YQT-QOTA-CAT-CD;

  if (VHSNBR01.YQT-QOTA-CAT-CD > " ")
    if (VHSNBR01.YQT-QOTA-CAT-CD in YQTTBL.YQT-QOTA-CAT-CD)
      KS0GW02.KS0GW-QOTA-FIBR-DESC = YQTTBL.YQT-QOTA-FIBR-DESC[sysVar.arrayIndex];
      KS0GW02.KS0GW-QOTA-CAT-DESC = YQTTBL.YQT-QOTA-CAT-DESC[sysVar.arrayIndex];
    else
      KS0GW02.KS0GW-QOTA-FIBR-DESC = " ";
      KS0GW02.KS0GW-QOTA-CAT-DESC = " ";
    end
  else
    KS0GW02.KS0GW-QOTA-FIBR-DESC = " ";
    KS0GW02.KS0GW-QOTA-CAT-DESC = " ";
  end

  KS0GW02.KS0GW-GEN-DTY-RATE = VHSNBR01.KS-GEN-DTY-RATE;
  KS0GW04.KS0GW-GEN-DTY-RATE = VHSNBR01.KS-GEN-DTY-RATE;
  KS0GW02.KS0GW-GEN-DTY-UNT = VHSNBR01.KS-GEN-DTY-UNT;
  KS0GW04.KS0GW-GEN-DTY-UNT = VHSNBR01.KS-GEN-DTY-UNT;
  KS0GW02.KS0GW-GEN-UOM-ABRV = VHSNBR01.KS-GEN-UOM-ABRV;
  KS0GW04.KS0GW-GEN-UOM-ABRV = VHSNBR01.KS-GEN-UOM-ABRV;
  KS0GW03.KS0GW-SPCL-DTY-RATE[1] = VHSNBR01.KS-SPCL-DTY-RATE[1];
  KS0GW04.KS0GW-SPCL-DTY-RATE[1] = VHSNBR01.KS-SPCL-DTY-RATE[1];
  KS0GW03.KS0GW-SPCL-DTY-RATE[2] = VHSNBR01.KS-SPCL-DTY-RATE[2];
  KS0GW04.KS0GW-SPCL-DTY-RATE[2] = VHSNBR01.KS-SPCL-DTY-RATE[2];
  KS0GW03.KS0GW-SPCL-DTY-RATE[3] = VHSNBR01.KS-SPCL-DTY-RATE[3];
  KS0GW04.KS0GW-SPCL-DTY-RATE[3] = VHSNBR01.KS-SPCL-DTY-RATE[3];
  KS0GW03.KS0GW-SPCL-DTY-RATE[4] = VHSNBR01.KS-SPCL-DTY-RATE[4];
  KS0GW04.KS0GW-SPCL-DTY-RATE[4] = VHSNBR01.KS-SPCL-DTY-RATE[4];
  KS0GW03.KS0GW-SPCL-DTY-RATE[5] = VHSNBR01.KS-SPCL-DTY-RATE[5];
  KS0GW04.KS0GW-SPCL-DTY-RATE[5] = VHSNBR01.KS-SPCL-DTY-RATE[5];
  KS0GW03.KS0GW-SPCL-DTY-RATE[6] = VHSNBR01.KS-SPCL-DTY-RATE[6];
  KS0GW04.KS0GW-SPCL-DTY-RATE[6] = VHSNBR01.KS-SPCL-DTY-RATE[6];
  KS0GW03.KS0GW-SPCL-DTY-RATE[7] = VHSNBR01.KS-SPCL-DTY-RATE[7];
  KS0GW04.KS0GW-SPCL-DTY-RATE[7] = VHSNBR01.KS-SPCL-DTY-RATE[7];
  KS0GW03.KS0GW-SPCL-DTY-UNT[1] = VHSNBR01.KS-SPCL-DTY-UNT[1];
  KS0GW04.KS0GW-SPCL-DTY-UNT[1] = VHSNBR01.KS-SPCL-DTY-UNT[1];
  KS0GW03.KS0GW-SPCL-DTY-UNT[2] = VHSNBR01.KS-SPCL-DTY-UNT[2];
  KS0GW04.KS0GW-SPCL-DTY-UNT[2] = VHSNBR01.KS-SPCL-DTY-UNT[2];
  KS0GW03.KS0GW-SPCL-DTY-UNT[3] = VHSNBR01.KS-SPCL-DTY-UNT[3];
  KS0GW04.KS0GW-SPCL-DTY-UNT[3] = VHSNBR01.KS-SPCL-DTY-UNT[3];
  KS0GW03.KS0GW-SPCL-DTY-UNT[4] = VHSNBR01.KS-SPCL-DTY-UNT[4];
  KS0GW04.KS0GW-SPCL-DTY-UNT[4] = VHSNBR01.KS-SPCL-DTY-UNT[4];
  KS0GW03.KS0GW-SPCL-DTY-UNT[5] = VHSNBR01.KS-SPCL-DTY-UNT[5];
  KS0GW04.KS0GW-SPCL-DTY-UNT[5] = VHSNBR01.KS-SPCL-DTY-UNT[5];
  KS0GW03.KS0GW-SPCL-DTY-UNT[6] = VHSNBR01.KS-SPCL-DTY-UNT[6];
  KS0GW04.KS0GW-SPCL-DTY-UNT[6] = VHSNBR01.KS-SPCL-DTY-UNT[6];
  KS0GW03.KS0GW-SPCL-DTY-UNT[7] = VHSNBR01.KS-SPCL-DTY-UNT[7];
  KS0GW04.KS0GW-SPCL-DTY-UNT[7] = VHSNBR01.KS-SPCL-DTY-UNT[7];
  KS0GW03.KS0GW-SPCL-UOM-ABRV[1] = VHSNBR01.KS-SPCL-UOM-ABRV[1];
  KS0GW04.KS0GW-SPCL-UOM-ABRV[1] = VHSNBR01.KS-SPCL-UOM-ABRV[1];
  KS0GW03.KS0GW-SPCL-UOM-ABRV[2] = VHSNBR01.KS-SPCL-UOM-ABRV[2];
  KS0GW04.KS0GW-SPCL-UOM-ABRV[2] = VHSNBR01.KS-SPCL-UOM-ABRV[2];
  KS0GW03.KS0GW-SPCL-UOM-ABRV[3] = VHSNBR01.KS-SPCL-UOM-ABRV[3];
  KS0GW04.KS0GW-SPCL-UOM-ABRV[3] = VHSNBR01.KS-SPCL-UOM-ABRV[3];
  KS0GW03.KS0GW-SPCL-UOM-ABRV[4] = VHSNBR01.KS-SPCL-UOM-ABRV[4];
  KS0GW04.KS0GW-SPCL-UOM-ABRV[4] = VHSNBR01.KS-SPCL-UOM-ABRV[4];
  KS0GW03.KS0GW-SPCL-UOM-ABRV[5] = VHSNBR01.KS-SPCL-UOM-ABRV[5];
  KS0GW04.KS0GW-SPCL-UOM-ABRV[5] = VHSNBR01.KS-SPCL-UOM-ABRV[5];
  KS0GW03.KS0GW-SPCL-UOM-ABRV[6] = VHSNBR01.KS-SPCL-UOM-ABRV[6];
  KS0GW04.KS0GW-SPCL-UOM-ABRV[6] = VHSNBR01.KS-SPCL-UOM-ABRV[6];
  KS0GW03.KS0GW-SPCL-UOM-ABRV[7] = VHSNBR01.KS-SPCL-UOM-ABRV[7];
  KS0GW04.KS0GW-SPCL-UOM-ABRV[7] = VHSNBR01.KS-SPCL-UOM-ABRV[7];
  KS0GW03.KS0GW-SPCL-QLFY[1] = VHSNBR01.KS-SPCL-QLFY[1];
  KS0GW04.KS0GW-SPCL-QLFY[1] = VHSNBR01.KS-SPCL-QLFY[1];
  KS0GW03.KS0GW-SPCL-QLFY[2] = VHSNBR01.KS-SPCL-QLFY[2];
  KS0GW04.KS0GW-SPCL-QLFY[2] = VHSNBR01.KS-SPCL-QLFY[2];
  KS0GW03.KS0GW-SPCL-QLFY[3] = VHSNBR01.KS-SPCL-QLFY[3];
  KS0GW04.KS0GW-SPCL-QLFY[3] = VHSNBR01.KS-SPCL-QLFY[3];
  KS0GW03.KS0GW-SPCL-QLFY[4] = VHSNBR01.KS-SPCL-QLFY[4];
  KS0GW04.KS0GW-SPCL-QLFY[4] = VHSNBR01.KS-SPCL-QLFY[4];
  KS0GW03.KS0GW-SPCL-QLFY[5] = VHSNBR01.KS-SPCL-QLFY[5];
  KS0GW04.KS0GW-SPCL-QLFY[5] = VHSNBR01.KS-SPCL-QLFY[5];
  KS0GW03.KS0GW-SPCL-QLFY[6] = VHSNBR01.KS-SPCL-QLFY[6];
  KS0GW04.KS0GW-SPCL-QLFY[6] = VHSNBR01.KS-SPCL-QLFY[6];
  KS0GW03.KS0GW-SPCL-QLFY[7] = VHSNBR01.KS-SPCL-QLFY[7];
  KS0GW04.KS0GW-SPCL-QLFY[7] = VHSNBR01.KS-SPCL-QLFY[7];
  KS0GW03.KS0GW-COL2-DTY-RATE = VHSNBR01.KS-COL2-DTY-RATE;
  KS0GW04.KS0GW-COL2-DTY-RATE = VHSNBR01.KS-COL2-DTY-RATE;
  KS0GW03.KS0GW-COL2-DTY-UNT = VHSNBR01.KS-COL2-DTY-UNT;
  KS0GW04.KS0GW-COL2-DTY-UNT = VHSNBR01.KS-COL2-DTY-UNT;
  KS0GW03.KS0GW-COL2-UOM-ABRV = VHSNBR01.KS-COL2-UOM-ABRV;
  KS0GW04.KS0GW-COL2-UOM-ABRV = VHSNBR01.KS-COL2-UOM-ABRV;
  KS0GW02.KS0GW-RPT-UNT1 = VHSNBR01.KS-RPT-UNT[1];
  KS0GW04.KS0GW-RPT-UNT1 = VHSNBR01.KS-RPT-UNT[1];
  KS0GW02.KS0GW-RPT-UNT2 = VHSNBR01.KS-RPT-UNT[2];
  KS0GW04.KS0GW-RPT-UNT2 = VHSNBR01.KS-RPT-UNT[2];
  KS0GW02.KS0GW-STAT = VHSNBR01.XXXSTAT;
  KS0GW04.KS0GW-STAT = VHSNBR01.XXXSTAT;
  KS0GW02.KS0GW-USER = VHSNBR01.XXXUSRID;
  KS0GW02.KS0GW-CREATE-DT = VHSNBR01.ZZZSDT;
  KS0GW02.KS0GW-MOD-DT = VHSNBR01.ZZZCHGDT;
  KS0GW00.KS0GW-SAVE-CHG-CNT = VHSNBR01.ZZZCHGCT; /* save for later*/

end // end KS0G-21200

// format and converse the map
Function KS0G-22000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* If requested, format data to display.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-SWF == "Y") /* map must be formatted*/
    KS0G-22100(); /* format the data on the map*/
  end

  if (KS0GW00.KS0GW-FNC == "A") /* if add function*/
    KS0GM002.KS0GM-STAT = "A"; /* default status to 'a'*/
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KS0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0GM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0GM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0GM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0GM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0GM002 alarm; /* Indicate sound alarm*/

  end

  converse KS0GM002 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = KS0GM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0GM002.CAITEM; /* Application data*/

end // end KS0G-22000

// format the display area
Function KS0G-22100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set KS0GM002 initial; /* M002 input/output area*/

  KS0GW00.KS0GW-SWF = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-FNC == "A") /* add requested?*/
    KS0GM002.KS0GM-MAP-DESC = "ADD   "; /* title*/
    KS0GW00.KS0GW-CPTR-BKDN = KS0GW02.KS0GW-HTS-CPTR-CD;
    KS0GW00.KS0GW-HDG-BKDN = KS0GW02.KS0GW-HTS-HDG-CD;
    KS0GW00.KS0GW-PERIOD1 = ".";
    KS0GW00.KS0GW-1ST-SHDG-CD = KS0GW02.KS0GW-HTS-1ST-SHDG-CD;
    KS0GW00.KS0GW-PERIOD = ".";
    KS0GW00.KS0GW-2ND-SHDG-CD = KS0GW02.KS0GW-HTS-2ND-SHDG-CD;
    KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
    KS0GM002.KS0GM-HTS-SHDG-CD = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;
    set KS0GM002.KS0GM-HTS-SHDG-CD skip; /* protect cptr/hdg/shdg cds*/
    KS0GM002.KS0GM-HTS-CPTR-SDESC = KS0GW02.KS0GW-HTS-CPTR-SDESC;
    KS0GM002.KS0GM-HTS-HDG-SDESC = KS0GW02.KS0GW-HTS-HDG-SDESC;
    KS0GM002.KS0GM-HTS-SHDG-SDESC = KS0GW02.KS0GW-HTS-SHDG-SDESC;
    KS0GW00.KS0GW-GEN-DTY-RATE = KS0GW02.KS0GW-GEN-DTY-RATE;
    KS0G-22110(); /* format display field*/
    KS0GM002.KS0GM-GEN-DTY-RATE = KS0GW00.KS0GW-SIX-BYTE-FIELD;
    KS0GW00.KS0GW-GEN-DTY-RATE = KS0GW02.KS0GW-GEN-DTY-UNT;
    KS0G-22110(); /* format display field*/
    KS0GM002.KS0GM-GEN-DTY-UNT = KS0GW00.KS0GW-SIX-BYTE-FIELD;
    KS0GM002.KS0GM-GEN-UOM-ABRV = KS0GW02.KS0GW-GEN-UOM-ABRV;
    if (KS0GW02.KS0GW-STAT == " ") /* if status blank, default to 'A'*/
      KS0GM002.KS0GM-STAT = "A";
    end
    KS0GM002.KS0GM-CREATE-DT = VGVar.currentShortGregorianDate;
    KS0GM002.KS0GM-MOD-DT = VGVar.currentShortGregorianDate;
    KS0GM002.KS0GM-USER = COMMAREA.CAUSERID;
    if (KS0GW00.KS0GW-SAVE-ADD-CNT > 0) /* if we have added one before ?*/
      converseLib.validationFailed(1); /* update successful*/
    else
      converseLib.validationFailed(63); /* please enter new hs chapter sub-hdg*/
    end
    KSWREC.XXXPRCNM = "22100";
    set KS0GM002.KS0GM-HTS-STAT cursor, initialAttributes; /* allow entry*/
  else
    KS0GW00.KS0GW-CPTR-BKDN = KS0GW00.KS0GW-HTS-CPTR-CD;
    KS0GW00.KS0GW-HDG-BKDN = KS0GW00.KS0GW-HTS-HDG-CD;
    KS0GW00.KS0GW-PERIOD1 = ".";
    KS0GW00.KS0GW-1ST-SHDG-CD = KS0GW00.KS0GW-HTS-1ST-SHDG-CD;
    KS0GW00.KS0GW-PERIOD = ".";
    KS0GW00.KS0GW-2ND-SHDG-CD = KS0GW00.KS0GW-HTS-2ND-SHDG-CD;
    KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
    KS0GW00.KS0GW-STAT-CD = KS0GW02.KS0GW-STAT-CD;
    KS0GM002.KS0GM-HTS-STAT = KS0GW00.KS0GW-STAT-BKDN;
    KS0GM002.KS0GM-HTS-SHDG-CD = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;
    KS0GM002.KS0GM-HTS-CPTR-SDESC = KS0GW02.KS0GW-HTS-CPTR-SDESC;
    KS0GM002.KS0GM-HTS-HDG-SDESC = KS0GW02.KS0GW-HTS-HDG-SDESC;
    KS0GM002.KS0GM-HTS-SHDG-SDESC = KS0GW02.KS0GW-HTS-SHDG-SDESC;
    KS0GM002.KS0GM-HTS-STAT-SDESC = KS0GW02.KS0GW-STAT-SDESC;
    KS0GM002.KS0GM-QOTA-CD = KS0GW02.KS0GW-QOTA-CAT-CD;
    if (KS0GW02.KS0GW-QOTA-CAT-CD > " ")
      if (KS0GW02.KS0GW-QOTA-CAT-CD in YQTTBL.YQT-QOTA-CAT-CD)
        KS0GW02.KS0GW-QOTA-FIBR-DESC = YQTTBL.YQT-QOTA-FIBR-DESC[sysVar.arrayIndex];
        KS0GW02.KS0GW-QOTA-CAT-DESC = YQTTBL.YQT-QOTA-CAT-DESC[sysVar.arrayIndex];
      end
    end
    KS0GM002.KS0GM-QOTA-FIBR-DESC = KS0GW02.KS0GW-QOTA-FIBR-DESC;
    KS0GM002.KS0GM-QOTA-CAT-DESC = KS0GW02.KS0GW-QOTA-CAT-DESC;
    KS0GW00.KS0GW-GEN-DTY-RATE = KS0GW02.KS0GW-GEN-DTY-RATE;
    KS0G-22110(); /* format display field*/
    KS0GM002.KS0GM-GEN-DTY-RATE = KS0GW00.KS0GW-SIX-BYTE-FIELD;
    KS0GW00.KS0GW-GEN-DTY-RATE = KS0GW02.KS0GW-GEN-DTY-UNT;
    KS0G-22110(); /* format display field*/
    KS0GM002.KS0GM-GEN-DTY-UNT = KS0GW00.KS0GW-SIX-BYTE-FIELD;
    KS0GM002.KS0GM-GEN-UOM-ABRV = KS0GW02.KS0GW-GEN-UOM-ABRV;
    KS0GM002.KS0GM-RPT-UNT1 = KS0GW02.KS0GW-RPT-UNT1;
    KS0GM002.KS0GM-RPT-UNT2 = KS0GW02.KS0GW-RPT-UNT2;
    KS0GM002.KS0GM-TEAM-CD = KS0GW02.KS0GW-TEAM-CD;
    KS0GM002.KS0GM-TEAM-SDESC = KS0GW02.KS0GW-TEAM-SDESC;
    KS0GM002.KS0GM-HTS-STAT-DESC[1] = KS0GW02.KS0GW-HTS-STAT-DESC[1];
    KS0GM002.KS0GM-HTS-STAT-DESC[2] = KS0GW02.KS0GW-HTS-STAT-DESC[2];
    KS0GM002.KS0GM-HTS-STAT-DESC[3] = KS0GW02.KS0GW-HTS-STAT-DESC[3];
    KS0GM002.KS0GM-CREATE-DT = KS0GW02.KS0GW-CREATE-DT;
    KS0GM002.KS0GM-MOD-DT = KS0GW02.KS0GW-MOD-DT;
    KS0GM002.KS0GM-USER = KS0GW02.KS0GW-USER;
    KS0GM002.KS0GM-STAT = KS0GW02.KS0GW-STAT;
    if (KS0GW00.KS0GW-FNC == "C") /* change requested?*/
      KS0GM002.KS0GM-MAP-DESC = "CHANGE"; /* title*/
      set KS0GM002.KS0GM-HTS-SHDG-CD skip; /* protect cptr/hdg/shdg cds*/
      set KS0GM002.KS0GM-HTS-STAT skip; /* protect hgd cd*/
      set KS0GM002.KS0GM-HTS-SHDG-SDESC skip; /* protect sub-hdg*/
      set KS0GM002.KS0GM-HTS-STAT-DESC cursor; /* cursor position*/
    else
      KS0GM002.KS0GM-MAP-DESC = "INQUIRY"; /* title*/
      set KS0GM002.KS0GM-HTS-STAT skip; /* set attributes to*/
      set KS0GM002.KS0GM-HTS-STAT-SDESC skip; /* protect*/
      set KS0GM002.KS0GM-QOTA-CD skip;
      set KS0GM002.KS0GM-GEN-DTY-RATE skip;
      set KS0GM002.KS0GM-GEN-DTY-UNT skip;
      set KS0GM002.KS0GM-GEN-UOM-ABRV skip;
      set KS0GM002.KS0GM-RPT-UNT1 skip;
      set KS0GM002.KS0GM-RPT-UNT2 skip;
      set KS0GM002.KS0GM-TEAM-CD skip;
      set KS0GM002.KS0GM-HTS-STAT-DESC[1] skip; /* protect*/
      set KS0GM002.KS0GM-HTS-STAT-DESC[2] skip; /* protect*/
      set KS0GM002.KS0GM-HTS-STAT-DESC[3] skip; /* protect*/
      set KS0GM002.KS0GM-STAT skip; /* protect*/
      set KS0GM002.CATOAP cursor; /* set cursor on option field*/
    end
  end

  KS0GM002.XXXCURDT = VGVar.currentShortGregorianDate;

end // end KS0G-22100

// format display field
Function KS0G-22110()
  /* -----------------------------------------------------------------------*/
  /* This routine reformats a 5 byte numeric field into a 6 byte result*/
  /* field complete with decimal point. Result field is right justified.*/
  /* If there are no significant digits before the decimal point, put a*/
  /* zero in the output field before the decimal point.*/
  /* (ie. 00772 displays as ' 0.772')*/
  /*  */
  /* If there are no significant digits after the decimal point, do NOT*/
  /* display the decimal point in the result.*/
  /* (ie. 01000 displays as '     1')*/
  /* (ie. 10000 displays as '    10')*/
  /*  */
  /* The common input field is ks0gw00.ks0gw-gen-dty-rate, even when the*/
  /* units field is being reformatted.*/
  /* -----------------------------------------------------------------------*/

  if (KS0GW00.KS0GW-GEN-DTY-RATE == 0)
    KS0GW00.KS0GW-SIX-BYTE-FIELD = " ";
    return;
  end

  if (KS0GW00.KS0GW-RATE-BYTE[5] > "0")
    KS0GW00.KS0GW-BYTE-6 = KS0GW00.KS0GW-RATE-BYTE[5];
    KS0GW00.KS0GW-BYTE-5 = KS0GW00.KS0GW-RATE-BYTE[4];
    KS0GW00.KS0GW-BYTE-4 = KS0GW00.KS0GW-RATE-BYTE[3];
    KS0GW00.KS0GW-BYTE-3 = ".";
    KS0GW00.KS0GW-BYTE-2 = KS0GW00.KS0GW-RATE-BYTE[2];
    if (KS0GW00.KS0GW-RATE-BYTE[1] > "0")
      KS0GW00.KS0GW-BYTE-1 = KS0GW00.KS0GW-RATE-BYTE[1];
    else
      KS0GW00.KS0GW-BYTE-1 = " ";
    end
  else
    if (KS0GW00.KS0GW-RATE-BYTE[4] > "0")
      KS0GW00.KS0GW-BYTE-6 = KS0GW00.KS0GW-RATE-BYTE[4];
      KS0GW00.KS0GW-BYTE-5 = KS0GW00.KS0GW-RATE-BYTE[3];
      KS0GW00.KS0GW-BYTE-4 = ".";
      KS0GW00.KS0GW-BYTE-3 = KS0GW00.KS0GW-RATE-BYTE[2];
      if (KS0GW00.KS0GW-RATE-BYTE[1] > "0")
        KS0GW00.KS0GW-BYTE-2 = KS0GW00.KS0GW-RATE-BYTE[1];
      else
        KS0GW00.KS0GW-BYTE-2 = " ";
      end
      KS0GW00.KS0GW-BYTE-1 = " ";
    else
      if (KS0GW00.KS0GW-RATE-BYTE[3] > "0")
        KS0GW00.KS0GW-BYTE-6 = KS0GW00.KS0GW-RATE-BYTE[3];
        KS0GW00.KS0GW-BYTE-5 = ".";
        KS0GW00.KS0GW-BYTE-4 = KS0GW00.KS0GW-RATE-BYTE[2];
        if (KS0GW00.KS0GW-RATE-BYTE[1] > "0")
          KS0GW00.KS0GW-BYTE-3 = KS0GW00.KS0GW-RATE-BYTE[1];
        else
          KS0GW00.KS0GW-BYTE-3 = " ";
        end
        KS0GW00.KS0GW-BYTE-2 = " ";
        KS0GW00.KS0GW-BYTE-1 = " ";
      else
        KS0GW00.KS0GW-BYTE-6 = KS0GW00.KS0GW-RATE-BYTE[2];
        if (KS0GW00.KS0GW-RATE-BYTE[1] > "0")
          KS0GW00.KS0GW-BYTE-5 = KS0GW00.KS0GW-RATE-BYTE[1];
        else
          KS0GW00.KS0GW-BYTE-5 = " ";
        end
        KS0GW00.KS0GW-BYTE-4 = " ";
        KS0GW00.KS0GW-BYTE-3 = " ";
        KS0GW00.KS0GW-BYTE-2 = " ";
        KS0GW00.KS0GW-BYTE-1 = " ";
      end
    end
  end

end // end KS0G-22110

// check attention identifier
Function KS0G-23000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (KS0GW00.KS0GW-SWR == "Y") /* Request for data*/
      set KS0GW02 empty; /* M002 display storage*/
    end

    KS0GW00.KS0GW-SWF = "Y"; /* Format the map switch*/
    KS0GW00.KS0GW-SWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      KS0G-11100(); /* Purge any temporary storage*/

      XSKS-S0001(); /* Exit to another application*/

      set KS0GM002.CATOAP cursor, bold; /* Highlight*/

      KS0GW00.KS0GW-SWD = "2"; /* Map to be displayed switch*/
      KS0GW00.KS0GW-SWF = "N"; /* do not format the map*/
      KS0GW00.KS0GW-SWF = "N"; /* do not request data*/

    else

      KSWREC.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0DM002";
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      KS0GW00.KS0GW-SWD = "1"; /* Map to be displayed switch*/
      KS0GW00.KS0GW-SWF = "Y"; /* Format the map switch*/
      KS0GW00.KS0GW-SWR = "Y"; /* request for data switch*/

      KS0GW00.KS0GW-CPTR-BKDN = VHSNBR01.KS-HTS-CPTR-CD;
      KS0GW00.KS0GW-HDG-BKDN = VHSNBR01.KS-HTS-HDG-CD;
      KS0GW00.KS0GW-PERIOD1 = ".";
      KS0GW00.KS0GW-1ST-SHDG-CD = VHSNBR01.KS-HTS-1ST-SHDG-CD;
      KS0GW00.KS0GW-PERIOD = ".";
      KS0GW00.KS0GW-2ND-SHDG-CD = VHSNBR01.KS-HTS-2ND-SHDG-CD;
      KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
      KS0GW00.KS0GW-STAT-CD = VHSNBR01.KS-HTS-STAT-CD;
      KS0GW00.KS0GW-STAT-CD-BKDN = KS0GW00.KS0GW-STAT-BKDN;
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;

      KS0GW00.KS0GW-IXM = 1; /* clear selected stats*/
      while (KS0GW-IXM <= 10)
        KS0GW00.KS0GW-SELECTED-STATS = " ";
        KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1;
      end

      exit stack; /* Exit to display map*/

    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/

      return; /* return to previous process*/

    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "KS0A";
    end

    KS0G-11100(); /* Purge any temporary storage*/

    XSKS-S0001(); /* Exit to another application*/

    KS0GW00.KS0GW-SWD = "1"; /* Map to be displayed switch*/
    KS0GW00.KS0GW-SWF = "Y"; /* Format the map switch*/
    KS0GW00.KS0GW-SWR = "Y"; /* request for data switch*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "23000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pa2) /* PA2 key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end KS0G-23000

// reset highlighted fields
Function KS0G-24000()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0GM002.KS0GM-MAP-DESC initialAttributes;
  set KS0GM002.KS0GM-HTS-SHDG-CD initialAttributes;
  set KS0GM002.KS0GM-HTS-CPTR-SDESC initialAttributes;
  set KS0GM002.KS0GM-HTS-HDG-SDESC initialAttributes;
  set KS0GM002.KS0GM-HTS-SHDG-SDESC initialAttributes;
  set KS0GM002.KS0GM-HTS-STAT-SDESC initialAttributes;
  set KS0GM002.KS0GM-QOTA-CD initialAttributes;
  set KS0GM002.KS0GM-QOTA-FIBR-DESC initialAttributes;
  set KS0GM002.KS0GM-QOTA-CAT-DESC initialAttributes;
  set KS0GM002.KS0GM-GEN-DTY-RATE initialAttributes;
  set KS0GM002.KS0GM-GEN-DTY-UNT initialAttributes;
  set KS0GM002.KS0GM-GEN-UOM-ABRV initialAttributes;
  set KS0GM002.KS0GM-RPT-UNT1 initialAttributes;
  set KS0GM002.KS0GM-RPT-UNT2 initialAttributes;
  set KS0GM002.KS0GM-TEAM-CD initialAttributes;
  set KS0GM002.KS0GM-TEAM-SDESC initialAttributes;
  set KS0GM002.KS0GM-HTS-STAT-DESC initialAttributes;
  set KS0GM002.KS0GM-STAT initialAttributes;
  set KS0GM002.KS0GM-CREATE-DT initialAttributes;
  set KS0GM002.KS0GM-MOD-DT initialAttributes;
  set KS0GM002.KS0GM-USER initialAttributes;

  set KS0GM002.CATOAP initialAttributes; /* commarea to application*/
  set KS0GM002.CAITEM initialAttributes; /* commarea application data*/

end // end KS0G-24000

// verify data that was entered
Function KS0G-25000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
    set KS0GM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  /* ------------------------------------------------------------*/
  /* If status was changed, verify the entered code.*/
  /* ------------------------------------------------------------*/

  if (KS0GM002.KS0GM-STAT == " ") /* if status not entered*/
    KS0GM002.KS0GM-STAT = "A"; /* default to 'a'*/
  end

  if (KS0GM002.KS0GM-STAT == "A" /* if status equal to 'a' or*/
   || KS0GM002.KS0GM-STAT == "I") /* if status equal to 'i'*/
    KS0GW02.KS0GW-STAT = KS0GM002.KS0GM-STAT;
  else
    set KS0GM002.KS0GM-STAT cursor, bold; /* highlight*/
    converseLib.validationFailed(23); /* set msg nbr*/
    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
  end

  /* ------------------------------------------------------------*/
  /* If team code entered, verify against dcustm.vcteam01*/
  /* ------------------------------------------------------------*/

  if (KS0GM002.KS0GM-TEAM-CD > " ") /* if team code entered*/
    KS0G-25100(); /* verify team code*/
    if (VAGen_SQLCODE == 0) /* data found ok ?*/
      KS0GW02.KS0GW-TEAM-CD = KS0GM002.KS0GM-TEAM-CD;
      KS0GM002.KS0GM-TEAM-SDESC = VCTEAM01.KS-TEAM-SDESC;
      KS0GW02.KS0GW-TEAM-SDESC = VCTEAM01.KS-TEAM-SDESC;
    else
      converseLib.validationFailed(20); /* set msg nbr*/
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-TEAM-CD cursor, bold;
    end
  else
    KS0GW02.KS0GW-TEAM-CD = " ";
    KS0GW02.KS0GW-TEAM-SDESC = " ";
  end

  /* ------------------------------------------------------------*/
  /* If hs reporting units entered, verify against KS0GT01.*/
  /* These fields are NOT required.*/
  /* ------------------------------------------------------------*/

  if (KS0GM002.KS0GM-RPT-UNT1 > " ") /* if rpt units 1 entered ?*/
    if (KS0GM002.KS0GM-RPT-UNT1 in KS0GT01.KS0GT-RPT-UNITS)
                                   /* value in table ?*/
      KS0GW02.KS0GW-RPT-UNT1 = KS0GM002.KS0GM-RPT-UNT1; /* save in ws*/
    else
      converseLib.validationFailed(62);
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-RPT-UNT1 cursor, bold;
    end
  else
    KS0GW02.KS0GW-RPT-UNT1 = " "; /* save in ws*/
  end

  if (KS0GM002.KS0GM-RPT-UNT2 > " ") /* if rpt units 2 entered ?*/
    if (KS0GM002.KS0GM-RPT-UNT2 in KS0GT01.KS0GT-RPT-UNITS)
                                   /* value in table ?*/
      KS0GW02.KS0GW-RPT-UNT2 = KS0GM002.KS0GM-RPT-UNT2; /* save in ws*/
    else
      converseLib.validationFailed(62);
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-RPT-UNT2 cursor, bold;
    end
  else
    KS0GW02.KS0GW-RPT-UNT2 = " "; /* save in ws*/
  end

  /* ------------------------------------------------------------*/
  /* If general duty uom abrv entered, verify against KS0GT01.*/
  /* This field is NOT required, but if entered, the gen dty units*/
  /* field IS required. And vice versa.*/
  /* ------------------------------------------------------------*/

  if (KS0GM002.KS0GM-GEN-UOM-ABRV > " ") /* value entered ?*/
    if (KS0GM002.KS0GM-GEN-UOM-ABRV in KS0GT01.KS0GT-RPT-UNITS) /* in table ?*/
      KS0GW02.KS0GW-GEN-UOM-ABRV = KS0GM002.KS0GM-GEN-UOM-ABRV;
    else
      converseLib.validationFailed(61); /* gen uom abrv invalid*/
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-GEN-UOM-ABRV cursor, bold;
    end
    if (KS0GM002.KS0GM-GEN-DTY-UNT <= " ") /* gen duty units not entered ?*/
      converseLib.validationFailed(60); /* uom abrv & gen dty unit are a pair*/
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-GEN-DTY-UNT cursor, bold;
    end
  else
    KS0GW02.KS0GW-GEN-UOM-ABRV = " ";
  end

  /* ------------------------------------------------------------*/
  /* If general duty units entered, format into a 9 byte field, taking*/
  /* into account the decimal point, if entered.*/
  /* ------------------------------------------------------------*/

  if (KS0GM002.KS0GM-GEN-DTY-UNT > " ") /* gen duty units entered ?*/
    KS0GW00.KS0GW-CHECK-FIELD = KS0GM002.KS0GM-GEN-DTY-UNT;
    KS0G-25200(); /* reformat entered data*/
    if (KS0GW00.KS0GW-INVALID-DATA-SW == "Y") /* was there an error ?*/
      converseLib.validationFailed(60);
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-GEN-DTY-UNT cursor, bold;
    end
    if (KS0GW00.KS0GW-RESULT-FIELD > 99.999) /* beyond limit ?*/
      converseLib.validationFailed(60);
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-GEN-DTY-UNT cursor, bold;
    end
    KS0GW02.KS0GW-GEN-DTY-UNT = KS0GW00.KS0GW-RESULT-FIELD;
    if (KS0GM002.KS0GM-GEN-UOM-ABRV <= " ") /* uom not entered ?*/
      converseLib.validationFailed(61); /* gen uom abrv invalid*/
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-GEN-UOM-ABRV cursor, bold;
    end
  else
    KS0GW02.KS0GW-GEN-DTY-UNT = 0;
  end

  /* ------------------------------------------------------------*/
  /* If general duty rate entered, format into a 5 byte field, taking*/
  /* into account the decimal point, if entered.*/
  /* ------------------------------------------------------------*/

  if (KS0GM002.KS0GM-GEN-DTY-RATE > " ") /* gen duty rate entered ?*/
    KS0GW00.KS0GW-CHECK-FIELD = KS0GM002.KS0GM-GEN-DTY-RATE;
    KS0G-25200(); /* reformat entered data*/
    if (KS0GW00.KS0GW-INVALID-DATA-SW == "Y") /* was there an error ?*/
      converseLib.validationFailed(59);
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-GEN-DTY-RATE cursor, bold;
    end
    if (KS0GW00.KS0GW-RESULT-FIELD > 99.999) /* beyond limit ?*/
      converseLib.validationFailed(59);
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-GEN-DTY-RATE cursor, bold;
    end
    KS0GW02.KS0GW-GEN-DTY-RATE = KS0GW00.KS0GW-RESULT-FIELD;
  else
    KS0GW02.KS0GW-GEN-DTY-RATE = 0;
  end

  /* ------------------------------------------------------------*/
  /* If quota cat. entered, verify against yqttbl and pick up the*/
  /* description if valid.*/
  /* ------------------------------------------------------------*/

  if (KS0GM002.KS0GM-QOTA-CD > " ") /* if cat cd entered ?*/
    if (KS0GM002.KS0GM-QOTA-CD in YQTTBL.YQT-QOTA-CAT-CD)
      KS0GW02.KS0GW-QOTA-FIBR-DESC = YQTTBL.YQT-QOTA-FIBR-DESC[sysVar.arrayIndex];
      KS0GM002.KS0GM-QOTA-FIBR-DESC = YQTTBL.YQT-QOTA-FIBR-DESC[sysVar.arrayIndex];
      KS0GW02.KS0GW-QOTA-CAT-DESC = YQTTBL.YQT-QOTA-CAT-DESC[sysVar.arrayIndex];
      KS0GM002.KS0GM-QOTA-CAT-DESC = YQTTBL.YQT-QOTA-CAT-DESC[sysVar.arrayIndex];
      KS0GW02.KS0GW-QOTA-CAT-CD = KS0GM002.KS0GM-QOTA-CD;
    else
      KS0GM002.KS0GM-QOTA-FIBR-DESC = " ";
      KS0GM002.KS0GM-QOTA-CAT-DESC = " ";
      converseLib.validationFailed(58);
      KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      set KS0GM002.KS0GM-QOTA-CD cursor, bold;
    end
  else
    KS0GW02.KS0GW-QOTA-CAT-CD = " ";
    KS0GW02.KS0GW-QOTA-FIBR-DESC = " ";
    KS0GW02.KS0GW-QOTA-CAT-DESC = " ";
  end

  /* ------------------------------------------------------------*/
  /* if the status short desc is not entered, it's in error*/
  /* ------------------------------------------------------------*/

  if (KS0GM002.KS0GM-HTS-STAT-SDESC == " ") /* if equal spaces*/
    set KS0GM002.KS0GM-HTS-STAT-SDESC cursor, bold; /* highlight*/
    converseLib.validationFailed(57); /* set msg nbr*/
    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
  else
    KS0GW02.KS0GW-STAT-SDESC = KS0GM002.KS0GM-HTS-STAT-SDESC;
  end

  /* ------------------------------------------------------------*/
  /* Description line is required.*/
  /* ------------------------------------------------------------*/

  if (KS0GM002.KS0GM-HTS-STAT-DESC > " ") /* if desc entered ?*/
    KS0GW02.KS0GW-HTS-STAT-DESC[1] = KS0GM002.KS0GM-HTS-STAT-DESC[1];
    KS0GW02.KS0GW-HTS-STAT-DESC[2] = KS0GM002.KS0GM-HTS-STAT-DESC[2];
    KS0GW02.KS0GW-HTS-STAT-DESC[3] = KS0GM002.KS0GM-HTS-STAT-DESC[3];
  else
    set KS0GM002.KS0GM-HTS-STAT-DESC[1] cursor, bold; /* highlight*/
    converseLib.validationFailed(92); /* set msg nbr*/
    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
  end

  /* ------------------------------------------------------------*/
  /* if add requested and the stat number is not entered,*/
  /* indicate error.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-FNC == "A") /* if add requested*/
    if (KS0GM002.KS0GM-HTS-STAT == " ") /* if equal spaces*/
      set KS0GM002.KS0GM-HTS-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(56); /* set msg nbr*/
    else
      KS0GW00.KS0GW-HTS-NUMBER = KS0GM002.KS0GM-HTS-STAT;
      if (KS0GW00.KS0GW-HTS-BYTE[1] == " "
       || KS0GW00.KS0GW-HTS-BYTE[2] == " ")
        set KS0GM002.KS0GM-HTS-STAT cursor, bold; /* highlight*/
        converseLib.validationFailed(56); /* set msg nbr*/
        KSWREC.XXXPRCNM = "25000"; /* Module identification*/
      else
        KS0GW00.KS0GW-STAT-BKDN = KS0GM002.KS0GM-HTS-STAT;
        KS0GW02.KS0GW-STAT-CD = KS0GW00.KS0GW-STAT-CD;
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0G-25000

// verify team code
Function KS0G-25100()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  set VCTEAM01 empty; /* Clear row storage area*/

  VCTEAM01.KS-TEAM-CD = KS0GM002.KS0GM-TEAM-CD; /* set up key*/

  try
    call "IO6060" ("S ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or if not found*/
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "25100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FROM TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end KS0G-25100

// reformat entered field
Function KS0G-25200()
  /* ------------------------------------------------------------*/
  /* First, we will check the input bytes for alpha data. If any*/
  /* non-numeric data was entered, it is in error. Blanks are*/
  /* converted to zeros. If a decimal point is entered, it*/
  /* is ok also. It will be eliminated in the next move.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-INVALID-DATA-SW = "N"; /* set error switch off*/

  KS0GW00.KS0GW-IX1 = 1; /* set index*/

  while (KS0GW00.KS0GW-IX1 <= 6)
    if (KS0GW00.KS0GW-CHECK-BYTE[KS0GW-IX1] == " ") /* if blank, make 0*/
      KS0GW00.KS0GW-CHECK-BYTE[KS0GW-IX1] = "0";
    end
    if (KS0GW00.KS0GW-CHECK-BYTE[KS0GW-IX1] != ".") /* if '.', ignore*/
      if (KS0GW00.KS0GW-CHECK-BYTE[KS0GW-IX1] < "0" /* if not numeric*/
       || KS0GW00.KS0GW-CHECK-BYTE[KS0GW-IX1] > "9")
        KS0GW00.KS0GW-INVALID-DATA-SW = "Y"; /* set error switch on*/
      end
    end
    KS0GW00.KS0GW-IX1 = KS0GW00.KS0GW-IX1 + 1; /* SET INDEX UP BY 1*/
  end

  if (KS0GW00.KS0GW-INVALID-DATA-SW == "Y") /* was an error found ?*/
    return;
  end

  KS0GW00.KS0GW-SIX-BYTE-FIELD = KS0GW00.KS0GW-CHECK-FIELD;

  /* ------------------------------------------------------------*/
  /* Next, we will move each byte of the input field to a result*/
  /* field so we can align the decimal point if one was entered.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-BYTE-1 == ".") /* 1st byte = '.' ?*/
    KS0GW00.KS0GW-RES-BYTE-1 = 0;
    KS0GW00.KS0GW-RES-BYTE-2 = 0;
    KS0GW00.KS0GW-RES-BYTE-3 = 0;
    KS0GW00.KS0GW-RES-BYTE-4 = 0;
    KS0GW00.KS0GW-RES-BYTE-5 = 0;
    KS0GW00.KS0GW-RES-BYTE-6 = 0;
    KS0GW00.KS0GW-RES-BYTE-7 = KS0GW00.KS0GW-BYTE-2;
    KS0GW00.KS0GW-RES-BYTE-8 = KS0GW00.KS0GW-BYTE-3;
    KS0GW00.KS0GW-RES-BYTE-9 = KS0GW00.KS0GW-BYTE-4;
  else
    if (KS0GW00.KS0GW-BYTE-2 == ".") /* 2nd byte = '.' ?*/
      KS0GW00.KS0GW-RES-BYTE-1 = 0;
      KS0GW00.KS0GW-RES-BYTE-2 = 0;
      KS0GW00.KS0GW-RES-BYTE-3 = 0;
      KS0GW00.KS0GW-RES-BYTE-4 = 0;
      KS0GW00.KS0GW-RES-BYTE-5 = 0;
      KS0GW00.KS0GW-RES-BYTE-6 = KS0GW00.KS0GW-BYTE-1;
      KS0GW00.KS0GW-RES-BYTE-7 = KS0GW00.KS0GW-BYTE-3;
      KS0GW00.KS0GW-RES-BYTE-8 = KS0GW00.KS0GW-BYTE-4;
      KS0GW00.KS0GW-RES-BYTE-9 = KS0GW00.KS0GW-BYTE-5;
    else
      if (KS0GW00.KS0GW-BYTE-3 == ".") /* 3rd byte = '.' ?*/
        KS0GW00.KS0GW-RES-BYTE-1 = 0;
        KS0GW00.KS0GW-RES-BYTE-2 = 0;
        KS0GW00.KS0GW-RES-BYTE-3 = 0;
        KS0GW00.KS0GW-RES-BYTE-4 = 0;
        KS0GW00.KS0GW-RES-BYTE-5 = KS0GW00.KS0GW-BYTE-1;
        KS0GW00.KS0GW-RES-BYTE-6 = KS0GW00.KS0GW-BYTE-2;
        KS0GW00.KS0GW-RES-BYTE-7 = KS0GW00.KS0GW-BYTE-4;
        KS0GW00.KS0GW-RES-BYTE-8 = KS0GW00.KS0GW-BYTE-5;
        KS0GW00.KS0GW-RES-BYTE-9 = KS0GW00.KS0GW-BYTE-6;
      else
        if (KS0GW00.KS0GW-BYTE-4 == ".") /* 4th byte = '.' ?*/
          KS0GW00.KS0GW-RES-BYTE-1 = 0;
          KS0GW00.KS0GW-RES-BYTE-2 = 0;
          KS0GW00.KS0GW-RES-BYTE-3 = 0;
          KS0GW00.KS0GW-RES-BYTE-4 = KS0GW00.KS0GW-BYTE-1;
          KS0GW00.KS0GW-RES-BYTE-5 = KS0GW00.KS0GW-BYTE-2;
          KS0GW00.KS0GW-RES-BYTE-6 = KS0GW00.KS0GW-BYTE-3;
          KS0GW00.KS0GW-RES-BYTE-7 = KS0GW00.KS0GW-BYTE-5;
          KS0GW00.KS0GW-RES-BYTE-8 = KS0GW00.KS0GW-BYTE-6;
          KS0GW00.KS0GW-RES-BYTE-9 = 0;
        else
          if (KS0GW00.KS0GW-BYTE-5 == ".") /* 5th byte = '.' ?*/
            KS0GW00.KS0GW-RES-BYTE-1 = 0;
            KS0GW00.KS0GW-RES-BYTE-2 = 0;
            KS0GW00.KS0GW-RES-BYTE-3 = KS0GW00.KS0GW-BYTE-1;
            KS0GW00.KS0GW-RES-BYTE-4 = KS0GW00.KS0GW-BYTE-2;
            KS0GW00.KS0GW-RES-BYTE-5 = KS0GW00.KS0GW-BYTE-3;
            KS0GW00.KS0GW-RES-BYTE-6 = KS0GW00.KS0GW-BYTE-4;
            KS0GW00.KS0GW-RES-BYTE-7 = KS0GW00.KS0GW-BYTE-6;
            KS0GW00.KS0GW-RES-BYTE-8 = 0;
            KS0GW00.KS0GW-RES-BYTE-9 = 0;
          else
            if (KS0GW00.KS0GW-BYTE-6 == ".") /* 6th byte = '.' ?*/
              KS0GW00.KS0GW-RES-BYTE-1 = 0;
              KS0GW00.KS0GW-RES-BYTE-2 = KS0GW00.KS0GW-BYTE-1;
              KS0GW00.KS0GW-RES-BYTE-3 = KS0GW00.KS0GW-BYTE-2;
              KS0GW00.KS0GW-RES-BYTE-4 = KS0GW00.KS0GW-BYTE-3;
              KS0GW00.KS0GW-RES-BYTE-5 = KS0GW00.KS0GW-BYTE-4;
              KS0GW00.KS0GW-RES-BYTE-6 = KS0GW00.KS0GW-BYTE-5;
              KS0GW00.KS0GW-RES-BYTE-7 = 0;
              KS0GW00.KS0GW-RES-BYTE-8 = 0;
              KS0GW00.KS0GW-RES-BYTE-9 = 0;
            else
              KS0GW00.KS0GW-RES-BYTE-1 = KS0GW00.KS0GW-BYTE-1;
              KS0GW00.KS0GW-RES-BYTE-2 = KS0GW00.KS0GW-BYTE-2;
              KS0GW00.KS0GW-RES-BYTE-3 = KS0GW00.KS0GW-BYTE-3;
              KS0GW00.KS0GW-RES-BYTE-4 = KS0GW00.KS0GW-BYTE-4;
              KS0GW00.KS0GW-RES-BYTE-5 = KS0GW00.KS0GW-BYTE-5;
              KS0GW00.KS0GW-RES-BYTE-6 = KS0GW00.KS0GW-BYTE-6;
              KS0GW00.KS0GW-RES-BYTE-7 = 0;
              KS0GW00.KS0GW-RES-BYTE-8 = 0;
              KS0GW00.KS0GW-RES-BYTE-9 = 0;
            end
          end
        end
      end
    end
  end


end // end KS0G-25200

// process valid input request
Function KS0G-26000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-SWF = "Y"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* If PF16 pressed, display screen #3*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16)
    KS0GW00.KS0GW-SWD = "3"; /* set to display map 3*/
    KS0GW00.KS0GW-SWR = "N"; /* do not request data*/
    KS0GW02.KS0GW-HTS-CPTR-SDESC = KS0GM002.KS0GM-HTS-CPTR-SDESC;
    KS0GW02.KS0GW-HTS-HDG-SDESC = KS0GM002.KS0GM-HTS-HDG-SDESC;
    KS0GW02.KS0GW-HTS-SHDG-SDESC = KS0GM002.KS0GM-HTS-SHDG-SDESC;
    KS0GW02.KS0GW-STAT-SDESC = KS0GM002.KS0GM-HTS-STAT-SDESC;
    KS0GW00.KS0GW-STAT-BKDN = KS0GM002.KS0GM-HTS-STAT;
    KS0GW02.KS0GW-STAT-CD = KS0GW00.KS0GW-STAT-CD;
    return;
  end

  /* ------------------------------------------------------------*/
  /* Obtain the current date and time.*/
  /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  /* ------------------------------------------------------------*/
  /* If this is an 'update' function, check for changed fields.*/
  /* If no changes were made, bypass the update.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-FNC == "C") /* is this an change request?*/

    KS0G-26100(); /* update table row*/

    if (KS0GW00.KS0GW-DATA-CHGD-SW == "Y") /* if any data changed*/

      KS0GW00.KS0GW-DATA-CHGD-SW = "N"; /* turn off data chgd sw*/

      /* ------------------------------------------------------------*/
      /* Update the changed data in the table row.*/
      /* ------------------------------------------------------------*/

      KS0G-26200(); /* Update table row*/

      KS0GW00.KS0GW-SWR = "Y"; /* Request for data switch*/

      if (converseVar.validationMsgNum != 0) /* if not successful*/
        KS0GW00.KS0GW-SWD = "2"; /* request map 2*/
        KS0GW00.KS0GW-SWF = "Y"; /* request format map 2*/
        return;
      end
      /* ------------------------------------------------------------*/
      /* Indicate that the table update was successfully completed.*/
      /* ------------------------------------------------------------*/

      KS0GW00.KS0GW-CPTR-BKDN = VHSNBR01.KS-HTS-CPTR-CD;
      KS0GW00.KS0GW-HDG-BKDN = VHSNBR01.KS-HTS-HDG-CD;
      KS0GW00.KS0GW-PERIOD1 = ".";
      KS0GW00.KS0GW-1ST-SHDG-CD = VHSNBR01.KS-HTS-1ST-SHDG-CD;
      KS0GW00.KS0GW-PERIOD = ".";
      KS0GW00.KS0GW-2ND-SHDG-CD = VHSNBR01.KS-HTS-2ND-SHDG-CD;
      KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
      KS0GW00.KS0GW-STAT-CD = VHSNBR01.KS-HTS-STAT-CD;
      KS0GW00.KS0GW-STAT-CD-BKDN = KS0GW00.KS0GW-STAT-BKDN;
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;

      KSWREC.XXXPRCNM = "26000"; /* Module identification*/
      KSWREC.XXXMSGNO = 1; /* Table update was completed*/
    else

      KS0GW00.KS0GW-SWR = "N"; /* do not request data*/
      KS0GW00.KS0GW-SWF = "N"; /* do not format map 2*/
      KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM002.KS0GM-HTS-SHDG-CD;
      KS0GW00.KS0GW-STAT-CD-BKDN = KS0GM002.KS0GM-HTS-STAT;
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;

    end

    KS0G-26300(); /* Search for next selection*/

    /* ------------------------------------------------------------*/
    /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

  else

    if (KS0GW00.KS0GW-FNC == "A") /* is this an add request?*/
      /* ------------------------------------------------------------*/
      /* code following is for adding chapters to the table.*/
      /* ------------------------------------------------------------*/

      KS0G-26400(); /* add row to table*/

      if (converseVar.validationMsgNum != 0) /* if not successful*/
        KS0GW00.KS0GW-SWD = "2"; /* request map 2*/
        KS0GW00.KS0GW-SWF = "N"; /* do not format map 2*/
        KS0GW00.KS0GW-SWR = "N"; /* do not request data*/
        return;
      end

      KS0GW00.KS0GW-CPTR-BKDN = VHSNBR01.KS-HTS-CPTR-CD;
      KS0GW00.KS0GW-HDG-BKDN = VHSNBR01.KS-HTS-HDG-CD;
      KS0GW00.KS0GW-PERIOD1 = ".";
      KS0GW00.KS0GW-1ST-SHDG-CD = VHSNBR01.KS-HTS-1ST-SHDG-CD;
      KS0GW00.KS0GW-PERIOD = ".";
      KS0GW00.KS0GW-2ND-SHDG-CD = VHSNBR01.KS-HTS-2ND-SHDG-CD;
      KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
      KS0GW00.KS0GW-STAT-CD = VHSNBR01.KS-HTS-STAT-CD;
      KS0GW00.KS0GW-STAT-CD-BKDN = KS0GW00.KS0GW-STAT-BKDN;
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;
    else

      KS0GW00.KS0GW-CPTR-BKDN = VHSNBR01.KS-HTS-CPTR-CD;
      KS0GW00.KS0GW-HDG-BKDN = VHSNBR01.KS-HTS-HDG-CD;
      KS0GW00.KS0GW-PERIOD1 = ".";
      KS0GW00.KS0GW-1ST-SHDG-CD = VHSNBR01.KS-HTS-1ST-SHDG-CD;
      KS0GW00.KS0GW-PERIOD = ".";
      KS0GW00.KS0GW-2ND-SHDG-CD = VHSNBR01.KS-HTS-2ND-SHDG-CD;
      KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
      KS0GW00.KS0GW-STAT-CD = VHSNBR01.KS-HTS-STAT-CD;
      KS0GW00.KS0GW-STAT-CD-BKDN = KS0GW00.KS0GW-STAT-BKDN;
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;

      KS0G-26300(); /* Search for next selection*/

    end
  end
end // end KS0G-26000

// check fields for changed data
Function KS0G-26100()
  /* ------------------------------------------------------------*/
  /* check map #2 fields for changes*/
  /* ------------------------------------------------------------*/
  /* ------------------------------------------------------------*/
  /* check status for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-STAT != KS0GW04.KS0GW-STAT) /* if not the same*/
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check description line for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-HTS-STAT-DESC[1] != KS0GW04.KS0GW-HTS-STAT-DESC[1]
   || KS0GW02.KS0GW-HTS-STAT-DESC[2] != KS0GW04.KS0GW-HTS-STAT-DESC[2]
   || KS0GW02.KS0GW-HTS-STAT-DESC[3] != KS0GW04.KS0GW-HTS-STAT-DESC[3])
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check team code for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-TEAM-CD != KS0GW04.KS0GW-TEAM-CD)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check hs reporting units #1 for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-RPT-UNT1 != KS0GW04.KS0GW-RPT-UNT1)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check hs reporting units #2 for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-RPT-UNT2 != KS0GW04.KS0GW-RPT-UNT2)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check general duty uom abrv for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-GEN-UOM-ABRV != KS0GW04.KS0GW-GEN-UOM-ABRV)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check general duty units for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-GEN-DTY-UNT != KS0GW04.KS0GW-GEN-DTY-UNT)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check general duty rate for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-GEN-DTY-RATE != KS0GW04.KS0GW-GEN-DTY-RATE)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check quota category for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-QOTA-CAT-CD != KS0GW04.KS0GW-QOTA-CAT-CD)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check the status-suffix short desc for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW02.KS0GW-STAT-SDESC != KS0GW04.KS0GW-STAT-SDESC)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check map #3 fields for changes*/
  /* ------------------------------------------------------------*/
  /* ------------------------------------------------------------*/
  /* check column 2 duty unit for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW03.KS0GW-COL2-UOM-ABRV != KS0GW04.KS0GW-COL2-UOM-ABRV)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check column 2 duty units for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW03.KS0GW-COL2-DTY-UNT != KS0GW04.KS0GW-COL2-DTY-UNT)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  /* ------------------------------------------------------------*/
  /* check column 2 duty rate for changes*/
  /* ------------------------------------------------------------*/

  if (KS0GW03.KS0GW-COL2-DTY-RATE != KS0GW04.KS0GW-COL2-DTY-RATE)
    KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    return; /* return*/
  end

  KS0GW00.KS0GW-IXM = 1; /* set index*/

  while (KS0GW00.KS0GW-IXM <= 7) /* for all 7 occurrances*/
    if (KS0GW03.KS0GW-SPCL-QLFY[KS0GW-IXM] != 
    KS0GW04.KS0GW-SPCL-QLFY[KS0GW-IXM]
     || KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IXM] != 
    KS0GW04.KS0GW-SPCL-UOM-ABRV[KS0GW-IXM]
     || KS0GW03.KS0GW-SPCL-DTY-UNT[KS0GW-IXM] != 
    KS0GW04.KS0GW-SPCL-DTY-UNT[KS0GW-IXM]
     || KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IXM] != 
    KS0GW04.KS0GW-SPCL-DTY-RATE[KS0GW-IXM])
      KS0GW00.KS0GW-DATA-CHGD-SW = "Y"; /* set switch*/
    end
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set index up by 1*/
  end

end // end KS0G-26100

// update changed table row
Function KS0G-26200()
  /* ------------------------------------------------------------*/
  /* select table row first to see if it exists*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty; /* clear work record*/

  KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM002.KS0GM-HTS-SHDG-CD;
  VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-CPTR-BKDN; /* cptr cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HDG-BKDN; /* hdg cd*/
  KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GW00.KS0GW-SHDG-BKDN;
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
  KS0GW00.KS0GW-STAT-BKDN = KS0GM002.KS0GM-HTS-STAT;
  VHSNBR01.KS-HTS-STAT-CD = KS0GW00.KS0GW-STAT-CD;

  try
    call "IO6120" ("S ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, check change count*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (VHSNBR01.ZZZCHGCT != KS0GW00.KS0GW-SAVE-CHG-CNT) /**/
        converseLib.validationFailed(12); /* set error msg*/
        return; /* Return to previous process*/
      else
         /* next sentence*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the data from the map in the table row.*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* move in second screen info*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM002.KS0GM-HTS-SHDG-CD;
  VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-CPTR-BKDN; /* cptr cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HDG-BKDN; /* hdg cd*/
  KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GW00.KS0GW-SHDG-BKDN;
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
  KS0GW00.KS0GW-STAT-BKDN = KS0GM002.KS0GM-HTS-STAT;
  VHSNBR01.KS-HTS-STAT-CD = KS0GW00.KS0GW-STAT-CD;
  VHSNBR01.KS-HTS-STAT-SDESC = KS0GM002.KS0GM-HTS-STAT-SDESC;
  VHSNBR01.KS-HTS-STAT-DESC[1] = KS0GM002.KS0GM-HTS-STAT-DESC[1];
  VHSNBR01.KS-HTS-STAT-DESC[2] = KS0GM002.KS0GM-HTS-STAT-DESC[2];
  VHSNBR01.KS-HTS-STAT-DESC[3] = KS0GM002.KS0GM-HTS-STAT-DESC[3];
  VHSNBR01.YQT-QOTA-CAT-CD = KS0GM002.KS0GM-QOTA-CD;
  VHSNBR01.KS-GEN-DTY-RATE = KS0GW02.KS0GW-GEN-DTY-RATE;
  VHSNBR01.KS-GEN-DTY-UNT = KS0GW02.KS0GW-GEN-DTY-UNT;
  VHSNBR01.KS-GEN-UOM-ABRV = KS0GM002.KS0GM-GEN-UOM-ABRV;
  VHSNBR01.KS-RPT-UNT[1] = KS0GM002.KS0GM-RPT-UNT1;
  VHSNBR01.KS-RPT-UNT[2] = KS0GM002.KS0GM-RPT-UNT2;
  VHSNBR01.KS-TEAM-CD = KS0GM002.KS0GM-TEAM-CD;
  VHSNBR01.XXXSTAT = KS0GM002.KS0GM-STAT;

  /* ------------------------------------------------------------*/
  /* move in third screen info*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 1;

  while (KS0GW00.KS0GW-IXM <= 7)
    VHSNBR01.KS-SPCL-DTY-RATE[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IXM];
    VHSNBR01.KS-SPCL-DTY-UNT[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-DTY-UNT[KS0GW-IXM];
    VHSNBR01.KS-SPCL-UOM-ABRV[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IXM];
    VHSNBR01.KS-SPCL-QLFY[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-QLFY[KS0GW-IXM];
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* SET INDEX UP BY 1*/
  end

  VHSNBR01.KS-COL2-DTY-RATE = KS0GW03.KS0GW-COL2-DTY-RATE;
  VHSNBR01.KS-COL2-DTY-UNT = KS0GW03.KS0GW-COL2-DTY-UNT;
  VHSNBR01.KS-COL2-UOM-ABRV = KS0GW03.KS0GW-COL2-UOM-ABRV;

  VHSNBR01.XXXUSRID = COMMAREA.CAUSERID;

  VHSNBR01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VHSNBR01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  /* ------------------------------------------------------------*/
  /* Update the changed row in the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6120" ("U ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      KS0GW00.KS0GW-SWR = "Y"; /* Request for data switch*/
      KS0GW00.KS0GW-SWF = "Y"; /* format the map switch*/
      KS0GW00.KS0GW-SWD = "2"; /* display map 2*/

      KSWREC.XXXPRCNM = "26100"; /* Module identification*/
      KSWREC.XXXMSGNO = 12; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-26200

// search for next selection
Function KS0G-26300()
  /* ------------------------------------------------------------*/
  /* restore index value of last selected chapter, which was*/
  /* just changed.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-SEL-INDEX; /* restore index value*/
  KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set up by 1*/

  /* ------------------------------------------------------------*/
  /* Determine if another line was selected for viewing.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-NEXT-SEL-STAT = " "; /* clear next selected sub-hdg*/

  while (KS0GW00.KS0GW-NEXT-SEL-STAT == " " /* until a stat is found*/
   && KS0GW00.KS0GW-IXM <= 12) /* and index <= 12*/

    if (KS0GW00.KS0GW-SELECTED-STATS[KS0GW-IXM] > " ") /* Line selected?*/
      KS0GW00.KS0GW-NEXT-SEL-STAT = KS0GW00.KS0GW-SELECTED-STATS[KS0GW-IXM]; /* next stat-sf to chg*/
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-SELECTED-STATS[KS0GW-IXM]; /* last stat-sf changed*/
      KS0GW00.KS0GW-SEL-INDEX = KS0GW00.KS0GW-IXM; /* save index value*/
      KS0GW00.KS0GW-SWR = "Y"; /* Request for data switch*/
      KS0GW00.KS0GW-SWF = "Y"; /* Request format map 2*/
      KS0GW00.KS0GW-SWD = "2"; /* Map to be displayed*/
      return; /* process next sub-hdg*/
    else
      KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set up by 1*/
    end
  end

  /* ------------------------------------------------------------*/
  /* clear table of selected stat*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 1; /* initialize index*/

  while (KS0GW00.KS0GW-IXM <= 12) /* while index <= 12*/
    KS0GW00.KS0GW-SELECTED-STATS[KS0GW-IXM] = " "; /* clear field*/
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* set up by 1*/
  end

  KS0GW00.KS0GW-SWR = "Y"; /* Request for data switch*/
  KS0GW00.KS0GW-SWF = "Y"; /* format the map*/
  KS0GW00.KS0GW-SWD = "1"; /* Map to be displayed switch*/
  exit stack; /* go display screen #1*/

end // end KS0G-26300

// add a table row
Function KS0G-26400()
  /* ------------------------------------------------------------*/
  /* select table row first to see if it exists*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty; /* clear work record*/

  KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM002.KS0GM-HTS-SHDG-CD;
  VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-CPTR-BKDN; /* cptr cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HDG-BKDN; /* hdg cd*/
  KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GW00.KS0GW-SHDG-BKDN;
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
  KS0GW00.KS0GW-STAT-BKDN = KS0GM002.KS0GM-HTS-STAT;
  VHSNBR01.KS-HTS-STAT-CD = KS0GW00.KS0GW-STAT-CD;

  try
    call "IO6120" ("S ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return with error msg*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      converseLib.validationFailed(53); /* set error msg*/
      KSWREC.XXXPRCNM = "26200";
      set KS0GM002.KS0GM-HTS-STAT cursor, bold; /* set cursor*/
      return; /* Return to previous process*/
    else
       /* next sentence*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the data from the map in the table row.*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty; /* clear work record*/

  KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM002.KS0GM-HTS-SHDG-CD;
  VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-CPTR-BKDN; /* cptr cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HDG-BKDN; /* hdg cd*/
  KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GW00.KS0GW-SHDG-BKDN;
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
  KS0GW00.KS0GW-STAT-BKDN = KS0GM002.KS0GM-HTS-STAT;
  VHSNBR01.KS-HTS-STAT-CD = KS0GW00.KS0GW-STAT-CD;

  /* ------------------------------------------------------------*/
  /* move in first screen info*/
  /* ------------------------------------------------------------*/

  VHSNBR01.KS-HTS-STAT-SDESC = KS0GM002.KS0GM-HTS-STAT-SDESC;
  VHSNBR01.KS-HTS-STAT-DESC[1] = KS0GM002.KS0GM-HTS-STAT-DESC[1];
  VHSNBR01.KS-HTS-STAT-DESC[2] = KS0GM002.KS0GM-HTS-STAT-DESC[2];
  VHSNBR01.KS-HTS-STAT-DESC[3] = KS0GM002.KS0GM-HTS-STAT-DESC[3];
  VHSNBR01.YQT-QOTA-CAT-CD = KS0GM002.KS0GM-QOTA-CD;
  VHSNBR01.KS-GEN-DTY-RATE = KS0GW02.KS0GW-GEN-DTY-RATE;
  VHSNBR01.KS-GEN-DTY-UNT = KS0GW02.KS0GW-GEN-DTY-UNT;
  VHSNBR01.KS-GEN-UOM-ABRV = KS0GM002.KS0GM-GEN-UOM-ABRV;
  VHSNBR01.KS-RPT-UNT[1] = KS0GM002.KS0GM-RPT-UNT1;
  VHSNBR01.KS-RPT-UNT[2] = KS0GM002.KS0GM-RPT-UNT2;
  VHSNBR01.KS-TEAM-CD = KS0GM002.KS0GM-TEAM-CD;
  VHSNBR01.XXXSTAT = KS0GM002.KS0GM-STAT;

  /* ------------------------------------------------------------*/
  /* move in second screen info*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 1;

  while (KS0GW00.KS0GW-IXM <= 7)
    VHSNBR01.KS-SPCL-DTY-RATE[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IXM];
    VHSNBR01.KS-SPCL-DTY-UNT[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-DTY-UNT[KS0GW-IXM];
    VHSNBR01.KS-SPCL-UOM-ABRV[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IXM];
    VHSNBR01.KS-SPCL-QLFY[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-QLFY[KS0GW-IXM];
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* SET INDEX UP BY 1*/
  end

  VHSNBR01.KS-COL2-DTY-RATE = KS0GW03.KS0GW-COL2-DTY-RATE;
  VHSNBR01.KS-COL2-DTY-UNT = KS0GW03.KS0GW-COL2-DTY-UNT;
  VHSNBR01.KS-COL2-UOM-ABRV = KS0GW03.KS0GW-COL2-UOM-ABRV;

  VHSNBR01.XXXUSRID = COMMAREA.CAUSERID;

  VHSNBR01.ZZZSDT = XX0XW01.XX0XWDAT; /* Set-up date*/
  VHSNBR01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  VHSNBR01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

  /* ------------------------------------------------------------*/
  /* add the row in the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6120" ("A ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      KS0GW00.KS0GW-SAVE-ADD-CNT = KS0GW00.KS0GW-SAVE-ADD-CNT + 1;
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not added, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "26200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-26400

// display the selected table row
Function KS0G-30000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0G-31000(); /* Obtain the data to display*/

  KS0G-32000(); /* Format and display the map*/

  KS0G-33000(); /* Check attention identifier*/

  KS0G-34000(); /* Reset fields to normal intensity*/

  KS0G-35000(); /* Verify the data that was entered*/

  KS0G-36000(); /* Process valid input request*/

end // end KS0G-30000

// obtain the data to display
Function KS0G-31000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* The data for this screen was obtained in ks0g-11400*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

end // end KS0G-31000

// format and converse the map
Function KS0G-32000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* If requested, format data to display.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-SWF == "Y") /* map must be formatted*/
    KS0G-32100(); /* format the data on the map*/
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KS0GM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0GM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0GM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0GM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0GM003.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0GM003 alarm; /* Indicate sound alarm*/

  end

  converse KS0GM003 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = KS0GM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0GM003.CAITEM; /* Application data*/

end // end KS0G-32000

// format the display area
Function KS0G-32100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set KS0GM003 initial; /* M003 input/output area*/

  KS0GW00.KS0GW-SWF = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-CPTR-BKDN = KS0GW02.KS0GW-HTS-CPTR-CD;
  KS0GW00.KS0GW-HDG-BKDN = KS0GW02.KS0GW-HTS-HDG-CD;
  KS0GW00.KS0GW-PERIOD1 = ".";
  KS0GW00.KS0GW-1ST-SHDG-CD = KS0GW02.KS0GW-HTS-1ST-SHDG-CD;
  KS0GW00.KS0GW-PERIOD = ".";
  KS0GW00.KS0GW-2ND-SHDG-CD = KS0GW02.KS0GW-HTS-2ND-SHDG-CD;
  KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
  KS0GW00.KS0GW-STAT-CD = KS0GW02.KS0GW-STAT-CD;
  KS0GW00.KS0GW-STAT-CD-BKDN = KS0GW00.KS0GW-STAT-BKDN;
  KS0GM003.KS0GM-HTS-NBR = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;
  KS0GM003.KS0GM-HTS-CPTR-SDESC = KS0GW02.KS0GW-HTS-CPTR-SDESC;
  KS0GM003.KS0GM-HTS-HDG-SDESC = KS0GW02.KS0GW-HTS-HDG-SDESC;
  KS0GM003.KS0GM-HTS-SHDG-SDESC = KS0GW02.KS0GW-HTS-SHDG-SDESC;
  KS0GM003.KS0GM-HTS-STAT-SDESC = KS0GW02.KS0GW-STAT-SDESC;

  KS0GW00.KS0GW-GEN-DTY-RATE = KS0GW03.KS0GW-COL2-DTY-RATE;
  KS0G-22110(); /* reformat data for display*/
  KS0GM003.KS0GM-COL2-DTY-RATE = KS0GW00.KS0GW-SIX-BYTE-FIELD;

  KS0GW00.KS0GW-GEN-DTY-RATE = KS0GW03.KS0GW-COL2-DTY-UNT;
  KS0G-22110(); /* reformat data for display*/
  KS0GM003.KS0GM-COL2-DTY-UNT = KS0GW00.KS0GW-SIX-BYTE-FIELD;
  KS0GM003.KS0GM-COL2-UOM-ABRV = KS0GW03.KS0GW-COL2-UOM-ABRV;

  KS0GW00.KS0GW-IX1 = 7;

  while (KS0GW-IX1 >= 1)
    KS0GM003.KS0GM-SPCL-QLFY[KS0GW-IX1] = KS0GW03.KS0GW-SPCL-QLFY[KS0GW-IX1];
    KS0GM003.KS0GM-SPCL-UOM-ABRV[KS0GW-IX1] = KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IX1];
    KS0GW00.KS0GW-GEN-DTY-RATE = KS0GW03.KS0GW-SPCL-DTY-UNT[KS0GW-IX1];
    KS0G-22110(); /* reformat data for display*/
    KS0GM003.KS0GM-SPCL-DTY-UNT[KS0GW-IX1] = KS0GW00.KS0GW-SIX-BYTE-FIELD;
    if (KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IX1] == 0
     && KS0GW03.KS0GW-SPCL-QLFY[KS0GW-IX1] > " "
     && KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IX1] == " ")
      KS0GM003.KS0GM-SPCL-DTY-RATE[KS0GW-IX1] = "   0.0";
    else
      KS0GW00.KS0GW-GEN-DTY-RATE = KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IX1];
      KS0G-22110(); /* reformat data for display*/
      KS0GM003.KS0GM-SPCL-DTY-RATE[KS0GW-IX1] = KS0GW00.KS0GW-SIX-BYTE-FIELD;
    end
    KS0GW00.KS0GW-IX1 = KS0GW00.KS0GW-IX1 - 1;
  end

  if (KS0GW00.KS0GW-FNC == "A") /* add requested?*/
    KS0GM003.KS0GM-MAP-DESC = "ADD   "; /* title*/
    set KS0GM003.KS0GM-SPCL-DTY-RATE[1] cursor, initialAttributes; /* allow entry*/
  else
    if (KS0GW00.KS0GW-FNC == "C") /* change requested?*/
      KS0GM003.KS0GM-MAP-DESC = "CHANGE"; /* title*/
      set KS0GM003.KS0GM-SPCL-DTY-RATE[1] cursor, initialAttributes; /* allow entry*/
    else
      KS0GM003.KS0GM-MAP-DESC = "INQUIRY"; /* title*/
      set KS0GM003.KS0GM-SPCL-DTY-RATE[1] protect; /* protect entry fields*/
      set KS0GM003.KS0GM-SPCL-DTY-UNT[1] protect;
      set KS0GM003.KS0GM-SPCL-UOM-ABRV[1] protect;
      set KS0GM003.KS0GM-SPCL-QLFY[1] protect;
      set KS0GM003.KS0GM-SPCL-DTY-RATE[2] protect;
      set KS0GM003.KS0GM-SPCL-DTY-UNT[2] protect;
      set KS0GM003.KS0GM-SPCL-UOM-ABRV[2] protect;
      set KS0GM003.KS0GM-SPCL-QLFY[2] protect;
      set KS0GM003.KS0GM-SPCL-DTY-RATE[3] protect;
      set KS0GM003.KS0GM-SPCL-DTY-UNT[3] protect;
      set KS0GM003.KS0GM-SPCL-UOM-ABRV[3] protect;
      set KS0GM003.KS0GM-SPCL-QLFY[3] protect;
      set KS0GM003.KS0GM-SPCL-DTY-RATE[4] protect;
      set KS0GM003.KS0GM-SPCL-DTY-UNT[4] protect;
      set KS0GM003.KS0GM-SPCL-UOM-ABRV[4] protect;
      set KS0GM003.KS0GM-SPCL-QLFY[4] protect;
      set KS0GM003.KS0GM-SPCL-DTY-RATE[5] protect;
      set KS0GM003.KS0GM-SPCL-DTY-UNT[5] protect;
      set KS0GM003.KS0GM-SPCL-UOM-ABRV[5] protect;
      set KS0GM003.KS0GM-SPCL-QLFY[5] protect;
      set KS0GM003.KS0GM-SPCL-DTY-RATE[6] protect;
      set KS0GM003.KS0GM-SPCL-DTY-UNT[6] protect;
      set KS0GM003.KS0GM-SPCL-UOM-ABRV[6] protect;
      set KS0GM003.KS0GM-SPCL-QLFY[6] protect;
      set KS0GM003.KS0GM-SPCL-DTY-RATE[7] protect;
      set KS0GM003.KS0GM-SPCL-DTY-UNT[7] protect;
      set KS0GM003.KS0GM-SPCL-UOM-ABRV[7] protect;
      set KS0GM003.KS0GM-SPCL-QLFY[7] protect;
      set KS0GM003.KS0GM-COL2-DTY-RATE protect;
      set KS0GM003.KS0GM-COL2-DTY-UNT protect;
      set KS0GM003.KS0GM-COL2-UOM-ABRV protect;
      set KS0GM003.CATOAP cursor; /* position cursor*/
    end
  end

  KS0GM003.XXXCURDT = VGVar.currentShortGregorianDate;

end // end KS0G-32100

// check attention identifier
Function KS0G-33000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (KS0GW00.KS0GW-SWR == "Y") /* Request for data*/
      set KS0GW03 empty; /* m003 display storage*/
    end

    KS0GW00.KS0GW-SWF = "Y"; /* Format the map switch*/
    KS0GW00.KS0GW-SWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      KS0G-11100(); /* Purge any temporary storage*/

      XSKS-S0001(); /* Exit to another application*/

      set KS0GM003.CATOAP cursor, bold; /* Highlight*/

      KS0GW00.KS0GW-SWD = "2"; /* Map to be displayed switch*/
      KS0GW00.KS0GW-SWF = "N"; /* do not format the map*/
      KS0GW00.KS0GW-SWF = "N"; /* do not request data*/

    else

      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0DM003";
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      return; /* Exit to display map*/

    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "KS0A";
    end

    KS0G-11100(); /* Purge any temporary storage*/

    XSKS-S0001(); /* Exit to another application*/

    KS0GW00.KS0GW-SWD = "1"; /* Map to be displayed switch*/
    KS0GW00.KS0GW-SWF = "Y"; /* Format the map switch*/
    KS0GW00.KS0GW-SWR = "Y"; /* request for data switch*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "33000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pa2) /* PA2 key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end KS0G-33000

// reset highlighted fields
Function KS0G-34000()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0GM003.KS0GM-MAP-DESC initialAttributes;
  set KS0GM003.KS0GM-HTS-NBR initialAttributes;
  set KS0GM003.KS0GM-HTS-CPTR-SDESC initialAttributes;
  set KS0GM003.KS0GM-HTS-HDG-SDESC initialAttributes;
  set KS0GM003.KS0GM-HTS-SHDG-SDESC initialAttributes;
  set KS0GM003.KS0GM-HTS-STAT-SDESC initialAttributes;

  set KS0GM003.KS0GM-SPCL-DTY-RATE[1] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-UNT[1] initialAttributes;
  set KS0GM003.KS0GM-SPCL-UOM-ABRV[1] initialAttributes;
  set KS0GM003.KS0GM-SPCL-QLFY[1] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-RATE[2] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-UNT[2] initialAttributes;
  set KS0GM003.KS0GM-SPCL-UOM-ABRV[2] initialAttributes;
  set KS0GM003.KS0GM-SPCL-QLFY[2] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-RATE[3] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-UNT[3] initialAttributes;
  set KS0GM003.KS0GM-SPCL-UOM-ABRV[3] initialAttributes;
  set KS0GM003.KS0GM-SPCL-QLFY[3] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-RATE[4] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-UNT[4] initialAttributes;
  set KS0GM003.KS0GM-SPCL-UOM-ABRV[4] initialAttributes;
  set KS0GM003.KS0GM-SPCL-QLFY[4] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-RATE[5] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-UNT[5] initialAttributes;
  set KS0GM003.KS0GM-SPCL-UOM-ABRV[5] initialAttributes;
  set KS0GM003.KS0GM-SPCL-QLFY[5] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-RATE[6] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-UNT[6] initialAttributes;
  set KS0GM003.KS0GM-SPCL-UOM-ABRV[6] initialAttributes;
  set KS0GM003.KS0GM-SPCL-QLFY[6] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-RATE[7] initialAttributes;
  set KS0GM003.KS0GM-SPCL-DTY-UNT[7] initialAttributes;
  set KS0GM003.KS0GM-SPCL-UOM-ABRV[7] initialAttributes;
  set KS0GM003.KS0GM-SPCL-QLFY[7] initialAttributes;
  set KS0GM003.KS0GM-COL2-DTY-RATE initialAttributes;
  set KS0GM003.KS0GM-COL2-DTY-UNT initialAttributes;
  set KS0GM003.KS0GM-COL2-UOM-ABRV initialAttributes;
  set KS0GM003.CATOAP initialAttributes; /* commarea to application*/
  set KS0GM003.CAITEM initialAttributes; /* commarea application data*/

end // end KS0G-34000

// verify data that was entered
Function KS0G-35000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    KSWREC.XXXPRCNM = "35000"; /* Module identification*/
    set KS0GM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  /* ------------------------------------------------------------*/
  /* if this is an inquiry function, bypass edits.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-FNC == "I")
    return;
  end

  /* ------------------------------------------------------------*/
  /* If col2 uom abrv entered, verify against KS0GT01.*/
  /* This field is NOT required, but if entered, the col2 dty units*/
  /* field is required. And vice versa.*/
  /* ------------------------------------------------------------*/

  if (KS0GM003.KS0GM-COL2-UOM-ABRV > " ") /* value entered ?*/
    if (KS0GM003.KS0GM-COL2-UOM-ABRV in KS0GT01.KS0GT-RPT-UNITS)
                                                              /* in table ?*/
      KS0GW03.KS0GW-COL2-UOM-ABRV = KS0GM003.KS0GM-COL2-UOM-ABRV;
    else
      converseLib.validationFailed(61); /* gen uom abrv invalid*/
      KSWREC.XXXPRCNM = "35000"; /* Module identification*/
      set KS0GM003.KS0GM-COL2-UOM-ABRV cursor, bold;
    end
    if (KS0GM003.KS0GM-COL2-DTY-UNT <= " ") /* value entered ?*/
      converseLib.validationFailed(60); /* uom abrv & gen units are a pair*/
      KSWREC.XXXPRCNM = "35000"; /* Module identification*/
      set KS0GM003.KS0GM-COL2-DTY-UNT cursor, bold;
    end
  else
    KS0GW03.KS0GW-COL2-UOM-ABRV = " ";
  end

  /* ------------------------------------------------------------*/
  /* If units entered, format into a 9 byte field, taking*/
  /* into account the decimal point, if entered.*/
  /* ------------------------------------------------------------*/

  if (KS0GM003.KS0GM-COL2-DTY-UNT > " ") /* units entered ?*/
    if (KS0GM003.KS0GM-COL2-UOM-ABRV <= " ") /* uom not entrered ?*/
      converseLib.validationFailed(61); /* gen uom abrv invalid*/
      KSWREC.XXXPRCNM = "35000"; /* Module identification*/
      set KS0GM003.KS0GM-COL2-UOM-ABRV cursor, bold;
    end
    KS0GW00.KS0GW-CHECK-FIELD = KS0GM003.KS0GM-COL2-DTY-UNT;
    KS0G-25200(); /* reformat entered data*/
    if (KS0GW00.KS0GW-INVALID-DATA-SW == "Y") /* was there an error ?*/
      converseLib.validationFailed(60);
      KSWREC.XXXPRCNM = "35000"; /* Module identification*/
      set KS0GM003.KS0GM-COL2-DTY-UNT cursor, bold;
    end
    if (KS0GW00.KS0GW-RESULT-FIELD > 99.999) /* beyond limit ?*/
      converseLib.validationFailed(60);
      KSWREC.XXXPRCNM = "35000"; /* Module identification*/
      set KS0GM003.KS0GM-COL2-DTY-UNT cursor, bold;
    else
      KS0GW03.KS0GW-COL2-DTY-UNT = KS0GW00.KS0GW-RESULT-FIELD;
    end
  else
    KS0GW03.KS0GW-COL2-DTY-UNT = 0;
  end

  /* ------------------------------------------------------------*/
  /* If col2 duty rate entered, format into a 9 byte field, taking*/
  /* into account the decimal point, if entered.*/
  /* ------------------------------------------------------------*/

  if (KS0GM003.KS0GM-COL2-DTY-RATE > " ") /* gen duty rate entered ?*/
    KS0GW00.KS0GW-CHECK-FIELD = KS0GM003.KS0GM-COL2-DTY-RATE;
    KS0G-25200(); /* reformat entered data*/
    if (KS0GW00.KS0GW-INVALID-DATA-SW == "Y") /* was there an error ?*/
      converseLib.validationFailed(59);
      KSWREC.XXXPRCNM = "35000"; /* Module identification*/
      set KS0GM003.KS0GM-COL2-DTY-RATE cursor, bold;
    end
    if (KS0GW00.KS0GW-RESULT-FIELD > 99.999) /* beyond limit ?*/
      converseLib.validationFailed(59);
      KSWREC.XXXPRCNM = "35000"; /* Module identification*/
      set KS0GM003.KS0GM-COL2-DTY-RATE cursor, bold;
    else
      KS0GW03.KS0GW-COL2-DTY-RATE = KS0GW00.KS0GW-RESULT-FIELD;
    end
  else
    KS0GW03.KS0GW-COL2-DTY-RATE = 0;
  end

  /* ----------------------------------------------------------------------*/
  /* The following routine edits the 7 occurrances of gen dty rate, unit*/
  /* and uom.*/
  /* ----------------------------------------------------------------------*/

  KS0GW00.KS0GW-IX2 = 7;

  while (KS0GW00.KS0GW-IX2 >= 1)

    KS0GW03.KS0GW-SPCL-QLFY[KS0GW-IX2] = KS0GM003.KS0GM-SPCL-QLFY[KS0GW-IX2]; /* no edits for spcl qualifier*/

    if (KS0GM003.KS0GM-SPCL-UOM-ABRV[KS0GW-IX2] > " ") /* value entered ?*/
      if (KS0GM003.KS0GM-SPCL-UOM-ABRV[KS0GW-IX2] in KS0GT01.KS0GT-RPT-UNITS
      )
        KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IX2] = KS0GM003.KS0GM-SPCL-UOM-ABRV[KS0GW-IX2];
      else
        converseLib.validationFailed(61); /* gen uom abrv invalid*/
        KSWREC.XXXPRCNM = "35000"; /* Module identification*/
        set KS0GM003.KS0GM-SPCL-UOM-ABRV[KS0GW-IX2] cursor, bold;
      end
      if (KS0GM003.KS0GM-SPCL-DTY-UNT[KS0GW-IX2] <= " ") /* VALUE ENTERED ?*/
        converseLib.validationFailed(60); /* uom abrv & gen units are a pair*/
        KSWREC.XXXPRCNM = "35000"; /* Module identification*/
        set KS0GM003.KS0GM-SPCL-DTY-UNT[KS0GW-IX2] cursor, bold;
      end
    else
      KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IX2] = " ";
    end

    /* ------------------------------------------------------------*/
    /* If units entered, format into a 9 byte field, taking*/
    /* into account the decimal point, if entered.*/
    /* ------------------------------------------------------------*/

    if (KS0GM003.KS0GM-SPCL-DTY-UNT[KS0GW-IX2] > " ") /* units entered ?*/
      if (KS0GM003.KS0GM-SPCL-UOM-ABRV[KS0GW-IX2] <= " ")
                                                       /* uom not entered ?*/
        converseLib.validationFailed(61); /* gen uom abrv invalid*/
        KSWREC.XXXPRCNM = "35000"; /* Module identification*/
        set KS0GM003.KS0GM-SPCL-UOM-ABRV[KS0GW-IX2] cursor, bold;
      end
      KS0GW00.KS0GW-CHECK-FIELD = KS0GM003.KS0GM-SPCL-DTY-UNT[KS0GW-IX2];
      KS0G-25200(); /* reformat entered data*/
      if (KS0GW00.KS0GW-INVALID-DATA-SW == "Y") /* was there an error ?*/
        converseLib.validationFailed(60);
        KSWREC.XXXPRCNM = "35000"; /* Module identification*/
        set KS0GM003.KS0GM-SPCL-DTY-UNT[KS0GW-IX2] cursor, bold;
      end
      if (KS0GW00.KS0GW-RESULT-FIELD > 99.999) /* beyond limit ?*/
        converseLib.validationFailed(60);
        KSWREC.XXXPRCNM = "35000"; /* Module identification*/
        set KS0GM003.KS0GM-SPCL-DTY-UNT[KS0GW-IX2] cursor, bold;
      else
        KS0GW03.KS0GW-SPCL-DTY-UNT[KS0GW-IX2] = KS0GW00.KS0GW-RESULT-FIELD;
      end
    else
      KS0GW03.KS0GW-SPCL-DTY-UNT[KS0GW-IX2] = 0;
    end

    /* ------------------------------------------------------------*/
    /* If spcl duty rate entered, format into a 9 byte field, taking*/
    /* into account the decimal point, if entered.*/
    /* ------------------------------------------------------------*/

    if (KS0GM003.KS0GM-SPCL-DTY-RATE[KS0GW-IX2] > " ") /* rate entered ?*/
      KS0GW00.KS0GW-CHECK-FIELD = KS0GM003.KS0GM-SPCL-DTY-RATE[KS0GW-IX2];
      KS0G-25200(); /* reformat entered data*/
      if (KS0GW00.KS0GW-INVALID-DATA-SW == "Y") /* was there an error ?*/
        converseLib.validationFailed(59);
        KSWREC.XXXPRCNM = "35000"; /* Module identification*/
        set KS0GM003.KS0GM-SPCL-DTY-RATE[KS0GW-IX2] cursor, bold;
      end
      if (KS0GW00.KS0GW-RESULT-FIELD > 99.999) /* beyond limit ?*/
        converseLib.validationFailed(59);
        KSWREC.XXXPRCNM = "35000"; /* Module identification*/
        set KS0GM003.KS0GM-SPCL-DTY-RATE[KS0GW-IX2] cursor, bold;
      else
        KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IX2] = KS0GW00.KS0GW-RESULT-FIELD;
      end
    else
      KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IX2] = 0;
    end
    KS0GW00.KS0GW-IX2 = KS0GW00.KS0GW-IX2 - 1; /* decrement index*/
  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0G-35000

// process valid input request
Function KS0G-36000()
  /* ------------------------------------------------------------*/
  /* If pf3 was pressed, display map #2*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3)
    KS0GW00.KS0GW-SWD = "2";
    KS0GW00.KS0GW-SWF = "N";
    KS0GW00.KS0GW-SWR = "N";
    exit stack;
  end

  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-SWF = "Y"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* Obtain the current date and time.*/
  /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  /* ------------------------------------------------------------*/
  /* If this is an 'update' function, update the table row.*/
  /* ------------------------------------------------------------*/

  if (KS0GW00.KS0GW-FNC == "C") /* is this an change request?*/

    KS0G-26100(); /* check for changes*/

    if (KS0GW00.KS0GW-DATA-CHGD-SW == "Y") /* if any data changed*/

      KS0GW00.KS0GW-DATA-CHGD-SW = "N"; /* turn off data chgd sw*/

      /* ------------------------------------------------------------*/
      /* Update the changed data in the table row.*/
      /* ------------------------------------------------------------*/

      KS0G-36100(); /* Update table row*/

      KS0GW00.KS0GW-SWR = "Y"; /* Request for data switch*/

      if (converseVar.validationMsgNum != 0) /* if not successful*/
        KS0GW00.KS0GW-SWD = "2"; /* request map 2*/
        KS0GW00.KS0GW-SWF = "Y"; /* request format map 2*/
        return;
      end
      /* ------------------------------------------------------------*/
      /* Indicate that the table update was successfully completed.*/
      /* ------------------------------------------------------------*/

      KS0GW00.KS0GW-CPTR-BKDN = VHSNBR01.KS-HTS-CPTR-CD;
      KS0GW00.KS0GW-HDG-BKDN = VHSNBR01.KS-HTS-HDG-CD;
      KS0GW00.KS0GW-PERIOD1 = ".";
      KS0GW00.KS0GW-1ST-SHDG-CD = VHSNBR01.KS-HTS-1ST-SHDG-CD;
      KS0GW00.KS0GW-PERIOD = ".";
      KS0GW00.KS0GW-2ND-SHDG-CD = VHSNBR01.KS-HTS-2ND-SHDG-CD;
      KS0GW00.KS0GW-STAT-CD = VHSNBR01.KS-HTS-STAT-CD;
      KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
      KS0GW00.KS0GW-STAT-CD-BKDN = KS0GW00.KS0GW-STAT-BKDN;
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;

      KSWREC.XXXPRCNM = "36000"; /* Module identification*/
      KSWREC.XXXMSGNO = 1; /* Table update was completed*/
    else

      KS0GW00.KS0GW-SWR = "N"; /* do not request data*/
      KS0GW00.KS0GW-SWF = "N"; /* do not format map 2*/
      KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM003.KS0GM-HTS-NBR;
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;

    end

    KS0G-26300(); /* Search for next selection*/

    /* ------------------------------------------------------------*/
    /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

    set KS0GW01 empty; /* clear working storage*/

  else

    if (KS0GW00.KS0GW-FNC == "A") /* is this an add request?*/

      /* ------------------------------------------------------------*/
      /* code following is for adding chapters to the table.*/
      /* ------------------------------------------------------------*/

      KS0G-36200(); /* add row to table*/

      if (converseVar.validationMsgNum != 0) /* if not successful*/
        KS0GW00.KS0GW-SWD = "2"; /* request map 2*/
        KS0GW00.KS0GW-SWF = "N"; /* do not format map 2*/
        KS0GW00.KS0GW-SWR = "N"; /* do not request data*/
        KSWREC.XXXMSGNO = 1; /* successful update*/
        return;
      end

      KS0GW00.KS0GW-CPTR-BKDN = VHSNBR01.KS-HTS-CPTR-CD;
      KS0GW00.KS0GW-HDG-BKDN = VHSNBR01.KS-HTS-HDG-CD;
      KS0GW00.KS0GW-PERIOD1 = ".";
      KS0GW00.KS0GW-1ST-SHDG-CD = VHSNBR01.KS-HTS-1ST-SHDG-CD;
      KS0GW00.KS0GW-PERIOD = ".";
      KS0GW00.KS0GW-2ND-SHDG-CD = VHSNBR01.KS-HTS-2ND-SHDG-CD;
      KS0GW00.KS0GW-STAT-CD = VHSNBR01.KS-HTS-STAT-CD;
      KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
      KS0GW00.KS0GW-STAT-CD-BKDN = KS0GW00.KS0GW-STAT-BKDN;
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;
      KS0GW00.KS0GW-SWD = "2"; /* request map 2*/
      KS0GW00.KS0GW-SWF = "Y"; /* do format map 2*/
      KS0GW00.KS0GW-SWR = "N"; /* do not request data*/
    else
      KS0GW00.KS0GW-CPTR-BKDN = VHSNBR01.KS-HTS-CPTR-CD;
      KS0GW00.KS0GW-HDG-BKDN = VHSNBR01.KS-HTS-HDG-CD;
      KS0GW00.KS0GW-PERIOD1 = ".";
      KS0GW00.KS0GW-1ST-SHDG-CD = VHSNBR01.KS-HTS-1ST-SHDG-CD;
      KS0GW00.KS0GW-PERIOD = ".";
      KS0GW00.KS0GW-2ND-SHDG-CD = VHSNBR01.KS-HTS-2ND-SHDG-CD;
      KS0GW00.KS0GW-STAT-CD = VHSNBR01.KS-HTS-STAT-CD;
      KS0GW00.KS0GW-SHDG-BKDN = KS0GW00.KS0GW-SHDG-FORMAT-FLD;
      KS0GW00.KS0GW-STAT-CD-BKDN = KS0GW00.KS0GW-STAT-BKDN;
      KS0GW00.KS0GW-LAST-CHGD-STAT = KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN;
      KS0G-26300(); /* search for next selection*/
    end
  end

end // end KS0G-36000

// update changed table row
Function KS0G-36100()
  /* ------------------------------------------------------------*/
  /* select table row first to see if it exists*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty; /* clear work record*/

  KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM003.KS0GM-HTS-NBR;
  VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-CPTR-BKDN; /* cptr cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HDG-BKDN; /* hdg cd*/
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
  KS0GW00.KS0GW-STAT-BKDN = KS0GW00.KS0GW-STAT-CD-BKDN;
  VHSNBR01.KS-HTS-STAT-CD = KS0GW00.KS0GW-STAT-CD;

  try
    call "IO6120" ("S ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, check change count*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (VHSNBR01.ZZZCHGCT != KS0GW00.KS0GW-SAVE-CHG-CNT) /**/
        converseLib.validationFailed(12); /* set error msg*/
        KSWREC.XXXPRCNM = "36100";
        return; /* Return to previous process*/
      else
         /* next sentence*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the data from the map in the table row.*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM003.KS0GM-HTS-NBR;
  VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-CPTR-BKDN; /* cptr cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HDG-BKDN; /* hdg cd*/
  KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GW00.KS0GW-SHDG-BKDN;
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
  KS0GW00.KS0GW-STAT-BKDN = KS0GW00.KS0GW-STAT-CD-BKDN;
  VHSNBR01.KS-HTS-STAT-CD = KS0GW00.KS0GW-STAT-CD;

                /* FROM HERE*/
  /* ------------------------------------------------------------*/
  /* move in second screen info*/
  /* ------------------------------------------------------------*/

  VHSNBR01.KS-HTS-STAT-DESC[1] = KS0GW02.KS0GW-HTS-STAT-DESC[1];
  VHSNBR01.KS-HTS-STAT-DESC[2] = KS0GW02.KS0GW-HTS-STAT-DESC[2];
  VHSNBR01.KS-HTS-STAT-DESC[3] = KS0GW02.KS0GW-HTS-STAT-DESC[3];
  VHSNBR01.KS-HTS-STAT-SDESC = KS0GW02.KS0GW-STAT-SDESC;
  VHSNBR01.KS-TEAM-CD = KS0GW02.KS0GW-TEAM-CD;
  VHSNBR01.YQT-QOTA-CAT-CD = KS0GW02.KS0GW-QOTA-CAT-CD;
  VHSNBR01.KS-GEN-DTY-RATE = KS0GW02.KS0GW-GEN-DTY-RATE;
  VHSNBR01.KS-GEN-DTY-UNT = KS0GW02.KS0GW-GEN-DTY-UNT;
  VHSNBR01.KS-GEN-UOM-ABRV = KS0GW02.KS0GW-GEN-UOM-ABRV;

  /* ------------------------------------------------------------*/
  /* move in third screen info*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 1;

  while (KS0GW00.KS0GW-IXM <= 7)
    VHSNBR01.KS-SPCL-DTY-RATE[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IXM];
    VHSNBR01.KS-SPCL-DTY-UNT[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-DTY-UNT[KS0GW-IXM];
    VHSNBR01.KS-SPCL-UOM-ABRV[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IXM];
    VHSNBR01.KS-SPCL-QLFY[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-QLFY[KS0GW-IXM];
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* SET INDEX UP BY 1*/
  end

  VHSNBR01.KS-COL2-DTY-RATE = KS0GW03.KS0GW-COL2-DTY-RATE;
  VHSNBR01.KS-COL2-DTY-UNT = KS0GW03.KS0GW-COL2-DTY-UNT;
  VHSNBR01.KS-COL2-UOM-ABRV = KS0GW03.KS0GW-COL2-UOM-ABRV;

  VHSNBR01.KS-RPT-UNT[1] = KS0GW02.KS0GW-RPT-UNT1;
  VHSNBR01.KS-RPT-UNT[2] = KS0GW02.KS0GW-RPT-UNT2;
  VHSNBR01.XXXSTAT = KS0GM002.KS0GM-STAT;
  VHSNBR01.XXXUSRID = COMMAREA.CAUSERID;

  VHSNBR01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VHSNBR01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  /* ------------------------------------------------------------*/
  /* Update the changed row in the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6120" ("U ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      KS0GW00.KS0GW-SWR = "Y"; /* Request for data switch*/
      KS0GW00.KS0GW-SWF = "Y"; /* format the map switch*/
      KS0GW00.KS0GW-SWD = "2"; /* display map 2*/

      KSWREC.XXXPRCNM = "26100"; /* Module identification*/
      KSWREC.XXXMSGNO = 12; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "36100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-36100

// add a table row
Function KS0G-36200()
  /* ------------------------------------------------------------*/
  /* select table row first to see if it exists*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty; /* clear work record*/

  KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM003.KS0GM-HTS-NBR;
  VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-CPTR-BKDN; /* cptr cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HDG-BKDN; /* hdg cd*/
  KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GW00.KS0GW-SHDG-BKDN;
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
  KS0GW00.KS0GW-STAT-BKDN = KS0GW00.KS0GW-STAT-CD-BKDN;
  VHSNBR01.KS-HTS-STAT-CD = KS0GW00.KS0GW-STAT-CD;

  try
    call "IO6120" ("S ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return with error msg*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      converseLib.validationFailed(53); /* set error msg*/
      KSWREC.XXXPRCNM = "36200";
      set KS0GM002.KS0GM-HTS-STAT cursor, bold; /* set cursor*/
      return; /* Return to previous process*/
    else
       /* next sentence*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the data from the map in the table row.*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty; /* clear work record*/

  KS0GW00.KS0GW-CPTR-HDG-SHDG-BKDN = KS0GM003.KS0GM-HTS-NBR;
  VHSNBR01.KS-HTS-CPTR-CD = KS0GW00.KS0GW-CPTR-BKDN; /* cptr cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0GW00.KS0GW-HDG-BKDN; /* hdg cd*/
  KS0GW00.KS0GW-SHDG-FORMAT-FLD = KS0GW00.KS0GW-SHDG-BKDN;
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0GW00.KS0GW-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0GW00.KS0GW-2ND-SHDG-CD;
  KS0GW00.KS0GW-STAT-BKDN = KS0GW00.KS0GW-STAT-CD-BKDN;
  VHSNBR01.KS-HTS-STAT-CD = KS0GW00.KS0GW-STAT-CD;

  /* ------------------------------------------------------------*/
  /* move in second screen info*/
  /* ------------------------------------------------------------*/

  VHSNBR01.KS-HTS-STAT-DESC[1] = KS0GW02.KS0GW-HTS-STAT-DESC[1];
  VHSNBR01.KS-HTS-STAT-DESC[2] = KS0GW02.KS0GW-HTS-STAT-DESC[2];
  VHSNBR01.KS-HTS-STAT-DESC[3] = KS0GW02.KS0GW-HTS-STAT-DESC[3];
  VHSNBR01.KS-HTS-STAT-SDESC = KS0GW02.KS0GW-STAT-SDESC;
  VHSNBR01.KS-TEAM-CD = KS0GW02.KS0GW-TEAM-CD;
  VHSNBR01.YQT-QOTA-CAT-CD = KS0GW02.KS0GW-QOTA-CAT-CD;

  VHSNBR01.KS-GEN-DTY-RATE = KS0GW02.KS0GW-GEN-DTY-RATE;
  VHSNBR01.KS-GEN-DTY-UNT = KS0GW02.KS0GW-GEN-DTY-UNT;
  VHSNBR01.KS-GEN-UOM-ABRV = KS0GW02.KS0GW-GEN-UOM-ABRV;

  /* ------------------------------------------------------------*/
  /* move in third screen info*/
  /* ------------------------------------------------------------*/

  KS0GW00.KS0GW-IXM = 1;

  while (KS0GW00.KS0GW-IXM <= 7)
    VHSNBR01.KS-SPCL-DTY-RATE[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-DTY-RATE[KS0GW-IXM];
    VHSNBR01.KS-SPCL-DTY-UNT[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-DTY-UNT[KS0GW-IXM];
    VHSNBR01.KS-SPCL-UOM-ABRV[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-UOM-ABRV[KS0GW-IXM];
    VHSNBR01.KS-SPCL-QLFY[KS0GW-IXM] = KS0GW03.KS0GW-SPCL-QLFY[KS0GW-IXM];
    KS0GW00.KS0GW-IXM = KS0GW00.KS0GW-IXM + 1; /* SET INDEX UP BY 1*/
  end

  VHSNBR01.KS-COL2-DTY-RATE = KS0GW03.KS0GW-COL2-DTY-RATE;
  VHSNBR01.KS-COL2-DTY-UNT = KS0GW03.KS0GW-COL2-DTY-UNT;
  VHSNBR01.KS-COL2-UOM-ABRV = KS0GW03.KS0GW-COL2-UOM-ABRV;
  VHSNBR01.KS-RPT-UNT[1] = KS0GW02.KS0GW-RPT-UNT1;
  VHSNBR01.KS-RPT-UNT[2] = KS0GW02.KS0GW-RPT-UNT2;

  VHSNBR01.XXXSTAT = KS0GM002.KS0GM-STAT;
  VHSNBR01.XXXUSRID = COMMAREA.CAUSERID;

  VHSNBR01.ZZZSDT = XX0XW01.XX0XWDAT; /* Set-up date*/
  VHSNBR01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  VHSNBR01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

  /* ------------------------------------------------------------*/
  /* add the row in the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6120" ("A ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      KS0GW00.KS0GW-SAVE-ADD-CNT = KS0GW00.KS0GW-SAVE-ADD-CNT + 1;
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not added, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "36200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0G-36200

//*** RECORD=KS0GW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0GW00 type basicRecord
  10 KS0GW-IXM KS0GW-IXM ; 
  10 KS0GW-IX1 KS0GW-IX1 ; 
  10 KS0GW-IX2 KS0GW-IX2 ; 
  10 KS0GW-IX3 KS0GW-IX3 ; 
  10 KS0GW-IX4 KS0GW-IX4 ; 
  10 KS0GW-IX5 KS0GW-IX5 ; 
  10 KS0GW-DESC-CNTR KS0GW-DESC-CNTR ; 
  10 KS0GW-STAT KS0GW-STAT ; 
  10 KS0GW-DATA-CHGD-SW KS0GW-DATA-CHGD-SW ; 
  10 KS0GW-INVALID-DATA-SW KS0GW-INVALID-DATA-SW ; 
  10 KS0GW-SAVE-CHG-CNT KS0GW-SAVE-CHG-CNT ; 
  10 KS0GW-SAVE-ADD-CNT KS0GW-SAVE-ADD-CNT ; 
  10 KS0GW-NEXT-SEL-STAT KS0GW-NEXT-SEL-STAT ; 
  10 KS0GW-LAST-CHGD-STAT KS0GW-LAST-CHGD-STAT ; 
  10 KS0GW-HTS-HDG-SDESC KS0GW-HTS-HDG-SDESC ; 
  10 KS0GW-HTS-CPTR-SDESC KS0GW-HTS-CPTR-SDESC ; 
  10 KS0GW-HTS-SHDG-SDESC KS0GW-HTS-SHDG-SDESC ; 
  10 KS0GW-LINE KS0GW-LINE [5] ; 
  10 KS0GW-SWC KS0GW-SWC ; 
  10 KS0GW-SWD KS0GW-SWD ; 
  10 KS0GW-SWF KS0GW-SWF ; 
  10 KS0GW-SWR KS0GW-SWR ; 
  10 KS0GW-SWU KS0GW-SWU ; 
  10 KS0GW-FNC KS0GW-FNC ; 
  10 KS0GW-FND KS0GW-FND ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KS0GW-HTS-NUMBER KS0GW-HTS-NUMBER ; 
    15 KS0GW-HTS-BYTE KS0GW-HTS-BYTE [14] ; 
  10 * char(1) ; 
  10 KS0GW-HTS-NBR KS0GW-HTS-NBR ; 
    15 KS0GW-HTS-CPTR-CD KS0GW-HTS-CPTR-CD ; 
    15 KS0GW-HTS-HDG-CD KS0GW-HTS-HDG-CD ; 
    15 * char(1) ; 
    15 KS0GW-HTS-1ST-SHDG-CD KS0GW-HTS-1ST-SHDG-CD ; 
    15 * char(1) ; 
    15 KS0GW-HTS-2ND-SHDG-CD KS0GW-HTS-2ND-SHDG-CD ; 
    15 KS0GW-HTS-STAT-CD KS0GW-HTS-STAT-CD ; 
    15 * char(1) ; 
    15 * char(1) ; 
  10 * char(1) ; 
  10 KS0GW-SELECTED-STATS KS0GW-SELECTED-STATS [12] ; 
  10 KS0GW-SEL-INDEX KS0GW-SEL-INDEX ; 
  10 KS0GW-STAT-TSQ-PAGE-TBL KS0GW-STAT-TSQ-PAGE-TBL ; 
    15 KS0GW-STAT-CODE KS0GW-STAT-CODE [100] ; 
    15 KS0GW-TS-PAGE-NBR KS0GW-TS-PAGE-NBR [100] ; 
  10 KS0GW-CPTR-HDG-SHDG-BKDN KS0GW-CPTR-HDG-SHDG-BKDN ; 
    15 KS0GW-CPTR-BKDN KS0GW-CPTR-BKDN ; 
    15 KS0GW-HDG-BKDN KS0GW-HDG-BKDN ; 
    15 KS0GW-PERIOD1 char(1) ; // period for format of hts nbr
    15 KS0GW-SHDG-BKDN KS0GW-SHDG-BKDN ; 
    15 KS0GW-STAT-CD-BKDN KS0GW-STAT-CD-BKDN ; 
  10 KS0GW-SHDG-FORMAT-FLD KS0GW-SHDG-FORMAT-FLD ; 
    15 KS0GW-1ST-SHDG-CD KS0GW-1ST-SHDG-CD ; 
    15 KS0GW-PERIOD char(1) ; // period for format of hts nbr
    15 KS0GW-2ND-SHDG-CD KS0GW-2ND-SHDG-CD ; 
  10 KS0GW-STAT-BKDN KS0GW-STAT-BKDN ; 
    15 KS0GW-STAT-CD KS0GW-STAT-CD ; 
    15 * char(1) ; // period for format of hts nbr
    15 * char(1) ; 
  10 KS0GW-CPTR-HDG-CDS KS0GW-CPTR-HDG-CDS ; 
    15 KS0GW-CPTR-CD KS0GW-CPTR-CD ; 
    15 KS0GW-HDG-CD KS0GW-HDG-CD ; 
    15 KS0GW-PERIOD2 char(1) ; // period for format of hts nbr
  10 KS0GW-GEN-DTY-RATE KS0GW-GEN-DTY-RATE ; 
    15 KS0GW-RATE-BYTE KS0GW-RATE-BYTE [5] ; 
  10 KS0GW-GEN-DTY-UNT KS0GW-GEN-DTY-UNT ; 
    15 KS0GW-UNIT-BYTE KS0GW-UNIT-BYTE [5] ; 
  10 KS0GW-GEN-UOM-ABRV KS0GW-GEN-UOM-ABRV ; 
    15 KS0GW-UOM-BYTE KS0GW-UOM-BYTE [3] ; 
  10 KS0GW-FORMATTED-RATE KS0GW-FORMATTED-RATE ; 
    15 KS0GW-FORMAT-BYTE KS0GW-FORMAT-BYTE [21] ; 
  10 KS0GW-SIX-BYTE-FIELD KS0GW-SIX-BYTE-FIELD ; 
    15 KS0GW-BYTE-1 KS0GW-BYTE-1 ; 
    15 KS0GW-BYTE-2 KS0GW-BYTE-2 ; 
    15 KS0GW-BYTE-3 KS0GW-BYTE-3 ; 
    15 KS0GW-BYTE-4 KS0GW-BYTE-4 ; 
    15 KS0GW-BYTE-5 KS0GW-BYTE-5 ; 
    15 KS0GW-BYTE-6 KS0GW-BYTE-6 ; 
  10 KS0GW-RESULT-FIELD KS0GW-RESULT-FIELD ; 
    15 KS0GW-RES-BYTE-1 KS0GW-RES-BYTE-1 ; 
    15 KS0GW-RES-BYTE-2 KS0GW-RES-BYTE-2 ; 
    15 KS0GW-RES-BYTE-3 KS0GW-RES-BYTE-3 ; 
    15 KS0GW-RES-BYTE-4 KS0GW-RES-BYTE-4 ; 
    15 KS0GW-RES-BYTE-5 KS0GW-RES-BYTE-5 ; 
    15 KS0GW-RES-BYTE-6 KS0GW-RES-BYTE-6 ; 
    15 KS0GW-RES-BYTE-7 KS0GW-RES-BYTE-7 ; 
    15 KS0GW-RES-BYTE-8 KS0GW-RES-BYTE-8 ; 
    15 KS0GW-RES-BYTE-9 KS0GW-RES-BYTE-9 ; 
  10 KS0GW-CHECK-FIELD KS0GW-CHECK-FIELD ; 
    15 KS0GW-CHECK-BYTE KS0GW-CHECK-BYTE [6] ; 
end // end KS0GW00

//*** RECORD=KS0GW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record KS0GW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1084) ; 
    10 KS0GW-HTS-NBR KS0GW-HTS-NBR ; 
    10 KS0GW-HTS-CPTR-CD KS0GW-HTS-CPTR-CD ; 
    10 KS0GW-HTS-CPTR-SDESC KS0GW-HTS-CPTR-SDESC ; 
    10 KS0GW-HTS-HDG-CD KS0GW-HTS-HDG-CD ; 
    10 KS0GW-HTS-HDG-SDESC KS0GW-HTS-HDG-SDESC ; 
    10 KS0GW-HTS-SHDG-CD KS0GW-HTS-SHDG-CD ; 
    10 KS0GW-HTS-SHDG-SDESC KS0GW-HTS-SHDG-SDESC ; 
    10 KS0GW-HTS-STAT KS0GW-HTS-STAT ; 
    10 KS0GW-HTS-STAT-SDESC KS0GW-HTS-STAT-SDESC ; 
    10 KS0GW-STAT KS0GW-STAT ; 
    10 KS0GW-SEL KS0GW-SEL [12] ; 
    10 KS0GW-DTL-HTS-NBR KS0GW-DTL-HTS-NBR [12] ; 
      15 KS0GW-DTL-CPTR-CD KS0GW-DTL-CPTR-CD ; 
      15 KS0GW-DTL-HDG-CD KS0GW-DTL-HDG-CD ; 
      15 KS0GW-PERIOD1 KS0GW-PERIOD1 ; 
      15 KS0GW-DTL-1ST-SHDG-CD KS0GW-DTL-1ST-SHDG-CD ; 
      15 KS0GW-PERIOD2 KS0GW-PERIOD2 ; 
      15 KS0GW-DTL-2ND-SHDG-CD KS0GW-DTL-2ND-SHDG-CD ; 
      15 KS0GW-DTL-STAT-CD KS0GW-DTL-STAT-CD ; 
      15 * char(1) ; // period for format of hts nbr
      15 * char(1) ; 
    10 KS0GW-DTL-STAT-DESC KS0GW-DTL-STAT-DESC [12] ; 
    10 KS0GW-DTL-QOTA-CD KS0GW-DTL-QOTA-CD [12] ; 
    10 KS0GW-DTL-GEN-DTY-RATE KS0GW-DTL-GEN-DTY-RATE [12] ; 
end // end KS0GW01

//*** RECORD=KS0GW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record KS0GW02 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 KS0GW-HTS-CPTR-CD KS0GW-HTS-CPTR-CD ; 
  10 KS0GW-HTS-HDG-CD KS0GW-HTS-HDG-CD ; 
  10 KS0GW-HTS-1ST-SHDG-CD KS0GW-HTS-1ST-SHDG-CD ; 
  10 KS0GW-HTS-2ND-SHDG-CD KS0GW-HTS-2ND-SHDG-CD ; 
  10 KS0GW-STAT-CD KS0GW-STAT-CD ; 
  10 * char(1) ; 
  10 KS0GW-HTS-CPTR-SDESC KS0GW-HTS-CPTR-SDESC ; 
  10 KS0GW-HTS-HDG-SDESC KS0GW-HTS-HDG-SDESC ; 
  10 KS0GW-HTS-SHDG-SDESC KS0GW-HTS-SHDG-SDESC ; 
  10 KS0GW-STAT-SDESC KS0GW-STAT-SDESC ; 
  10 KS0GW-QOTA-CAT-CD KS0GW-QOTA-CAT-CD ; 
  10 KS0GW-QOTA-FIBR-DESC KS0GW-QOTA-FIBR-DESC ; 
  10 KS0GW-QOTA-CAT-DESC KS0GW-QOTA-CAT-DESC ; 
  10 KS0GW-GEN-DTY-RATE KS0GW-GEN-DTY-RATE ; 
  10 KS0GW-GEN-DTY-UNT KS0GW-GEN-DTY-UNT ; 
  10 KS0GW-GEN-UOM-ABRV KS0GW-GEN-UOM-ABRV ; 
  10 KS0GW-RPT-UNT1 KS0GW-RPT-UNT1 ; 
  10 KS0GW-RPT-UNT2 KS0GW-RPT-UNT2 ; 
  10 KS0GW-TEAM-CD KS0GW-TEAM-CD ; 
  10 KS0GW-TEAM-SDESC KS0GW-TEAM-SDESC ; 
  10 KS0GW-HTS-STAT-DESC KS0GW-HTS-STAT-DESC [3] ; 
  10 KS0GW-STAT KS0GW-STAT ; 
  10 KS0GW-STAT-DESC KS0GW-STAT-DESC ; 
  10 KS0GW-CREATE-DT KS0GW-CREATE-DT ; 
  10 KS0GW-MOD-DT KS0GW-MOD-DT ; 
  10 KS0GW-USER KS0GW-USER ; 
end // end KS0GW02

//*** RECORD=KS0GW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record KS0GW03 type basicRecord
  10 KS0GW-SPCL-DTY-RATE KS0GW-SPCL-DTY-RATE [7] ; 
  10 KS0GW-SPCL-DTY-UNT KS0GW-SPCL-DTY-UNT [7] ; 
  10 KS0GW-SPCL-UOM-ABRV KS0GW-SPCL-UOM-ABRV [7] ; 
  10 KS0GW-SPCL-QLFY KS0GW-SPCL-QLFY [7] ; 
  10 KS0GW-COL2-DTY-RATE KS0GW-COL2-DTY-RATE ; 
  10 KS0GW-COL2-DTY-UNT KS0GW-COL2-DTY-UNT ; 
  10 KS0GW-COL2-UOM-ABRV KS0GW-COL2-UOM-ABRV ; 
end // end KS0GW03

Record KS0GW04 type basicRecord
  10 KS0GW-STAT-SDESC KS0GW-STAT-SDESC ; 
  10 KS0GW-QOTA-CAT-CD KS0GW-QOTA-CAT-CD ; 
  10 KS0GW-GEN-DTY-RATE KS0GW-GEN-DTY-RATE ; 
  10 KS0GW-GEN-DTY-UNT KS0GW-GEN-DTY-UNT ; 
  10 KS0GW-GEN-UOM-ABRV KS0GW-GEN-UOM-ABRV ; 
  10 KS0GW-RPT-UNT1 KS0GW-RPT-UNT1 ; 
  10 KS0GW-RPT-UNT2 KS0GW-RPT-UNT2 ; 
  10 KS0GW-TEAM-CD KS0GW-TEAM-CD ; 
  10 KS0GW-HTS-STAT-DESC KS0GW-HTS-STAT-DESC [3] ; 
  10 KS0GW-STAT KS0GW-STAT ; 
  10 KS0GW-SPCL-DTY-RATE KS0GW-SPCL-DTY-RATE [7] ; 
  10 KS0GW-SPCL-DTY-UNT KS0GW-SPCL-DTY-UNT [7] ; 
  10 KS0GW-SPCL-UOM-ABRV KS0GW-SPCL-UOM-ABRV [7] ; 
  10 KS0GW-SPCL-QLFY KS0GW-SPCL-QLFY [7] ; 
  10 KS0GW-COL2-DTY-RATE KS0GW-COL2-DTY-RATE ; 
  10 KS0GW-COL2-DTY-UNT KS0GW-COL2-DTY-UNT ; 
  10 KS0GW-COL2-UOM-ABRV KS0GW-COL2-UOM-ABRV ; 
end // end KS0GW04

// 1st sub-heading code
DataItem KS0GW-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd sub-heading code
DataItem KS0GW-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-BYTE-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-BYTE-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-BYTE-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-BYTE-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-BYTE-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-BYTE-6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each byte of work field
DataItem KS0GW-CHECK-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem KS0GW-CHECK-FIELD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// column 2 duty rate
DataItem KS0GW-COL2-DTY-RATE num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// column 2 duty unit
DataItem KS0GW-COL2-DTY-UNT num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// column 2 uom abbreviation
DataItem KS0GW-COL2-UOM-ABRV char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter
DataItem KS0GW-CPTR-BKDN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter
DataItem KS0GW-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cptr/hdg format area
DataItem KS0GW-CPTR-HDG-CDS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cptr/hdg/shdg breakdown area
DataItem KS0GW-CPTR-HDG-SHDG-BKDN char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// creation date
DataItem KS0GW-CREATE-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed switch
DataItem KS0GW-DATA-CHGD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map function indicator
DataItem KS0GW-DESC-CNTR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dtl line 1st sub-heading cd
DataItem KS0GW-DTL-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dtl line 2nd sub-heading cd
DataItem KS0GW-DTL-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line chapter number
DataItem KS0GW-DTL-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quota code
DataItem KS0GW-DTL-GEN-DTY-RATE char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dtl line heading cd
DataItem KS0GW-DTL-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dtl line cptr/hdg/sub-heading
DataItem KS0GW-DTL-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quota code
DataItem KS0GW-DTL-QOTA-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hts status code
DataItem KS0GW-DTL-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dtl line status short descr
DataItem KS0GW-DTL-STAT-DESC char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function switch
DataItem KS0GW-FNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found switch
DataItem KS0GW-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each byte of formatted field
DataItem KS0GW-FORMAT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted gen dty rt,unit & um
DataItem KS0GW-FORMATTED-RATE char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general duty rate
DataItem KS0GW-GEN-DTY-RATE num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general duty unit
DataItem KS0GW-GEN-DTY-UNT num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general duty uom abrv
DataItem KS0GW-GEN-UOM-ABRV char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading
DataItem KS0GW-HDG-BKDN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading
DataItem KS0GW-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 1
DataItem KS0GW-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 2
DataItem KS0GW-HTS-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number table
DataItem KS0GW-HTS-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter number
DataItem KS0GW-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter short desc
DataItem KS0GW-HTS-CPTR-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading heading
DataItem KS0GW-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading short desc
DataItem KS0GW-HTS-HDG-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number
DataItem KS0GW-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number
DataItem KS0GW-HTS-NUMBER char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub-heading
DataItem KS0GW-HTS-SHDG-CD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub-heading short description
DataItem KS0GW-HTS-SHDG-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status
DataItem KS0GW-HTS-STAT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status
DataItem KS0GW-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. status description
DataItem KS0GW-HTS-STAT-DESC char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status short descr
DataItem KS0GW-HTS-STAT-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invalid data switch
DataItem KS0GW-INVALID-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0GW-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0GW-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0GW-IX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0GW-IX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0GW-IX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0GW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// last changed status
DataItem KS0GW-LAST-CHGD-STAT char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map m002 screen line work area
DataItem KS0GW-LINE char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modification date
DataItem KS0GW-MOD-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next selected status cd
DataItem KS0GW-NEXT-SEL-STAT char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period for format of hts nbr
DataItem KS0GW-PERIOD1 char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// period for format of hts nbr
DataItem KS0GW-PERIOD2 char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// quota code
DataItem KS0GW-QOTA-CAT-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quota category description
DataItem KS0GW-QOTA-CAT-DESC char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quota fiber description
DataItem KS0GW-QOTA-FIBR-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each byte of gen duty rate fld
DataItem KS0GW-RATE-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-RES-BYTE-1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-RES-BYTE-2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-RES-BYTE-3 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-RES-BYTE-4 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-RES-BYTE-5 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-RES-BYTE-6 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-RES-BYTE-7 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-RES-BYTE-8 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field breakdown
DataItem KS0GW-RES-BYTE-9 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field for map 2 units
DataItem KS0GW-RESULT-FIELD num(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reporting units 1
DataItem KS0GW-RPT-UNT1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reporting units 2
DataItem KS0GW-RPT-UNT2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save add count
DataItem KS0GW-SAVE-ADD-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save change count
DataItem KS0GW-SAVE-CHG-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection character
DataItem KS0GW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save index for changes
DataItem KS0GW-SEL-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// stats selected for changes
DataItem KS0GW-SELECTED-STATS char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub-hdg
DataItem KS0GW-SHDG-BKDN char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cptr/hdg/shdg breakdown area
DataItem KS0GW-SHDG-FORMAT-FLD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field for map 2 units
DataItem KS0GW-SIX-BYTE-FIELD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special duty rate
DataItem KS0GW-SPCL-DTY-RATE num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special duty unit
DataItem KS0GW-SPCL-DTY-UNT num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special qualifier
DataItem KS0GW-SPCL-QLFY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special uom abbreviation
DataItem KS0GW-SPCL-UOM-ABRV char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status
DataItem KS0GW-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status breakdown field
DataItem KS0GW-STAT-BKDN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status code
DataItem KS0GW-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stat
DataItem KS0GW-STAT-CD-BKDN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status code
DataItem KS0GW-STAT-CODE char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status description
DataItem KS0GW-STAT-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status short description
DataItem KS0GW-STAT-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stat/tsq page table
DataItem KS0GW-STAT-TSQ-PAGE-TBL char(1800)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KS0GW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem KS0GW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KS0GW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0GW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0GW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// team code
DataItem KS0GW-TEAM-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// team short description
DataItem KS0GW-TEAM-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temporary storage page
DataItem KS0GW-TS-PAGE-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// each byte of gen duty unit fld
DataItem KS0GW-UNIT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each byte of unit of measure
DataItem KS0GW-UOM-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user
DataItem KS0GW-USER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

