package ks0q;

import corpcom1.CEN-WORK;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom4.XSENTRY;
import corpcom4.XSKS-S0001;
import corpcom4.XSNOWAY;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.FCTY-CD;
import corpcom5.HD-BUS-UNIT-CD;
import corpcom5.HD-COLR-CD-ID;
import corpcom5.HD-DIM-CD;
import corpcom5.HD-DLVR-MO;
import corpcom5.HD-FCTY-CD;
import corpcom5.HD-PRDCTN-MO;
import corpcom5.HD-PRDCTN-YR;
import corpcom5.HD-SESN-CD;
import corpcom5.HD-SESN-YR;
import corpcom5.HD-STY-NBR;
import corpcom5.HS-1ST-SHDG-CD;
import corpcom5.HS-2ND-SHDGCD;
import corpcom5.HS-BYTE1;
import corpcom5.HS-BYTE2;
import corpcom5.HS-CPTR-CD;
import corpcom5.HS-HDG-CD;
import corpcom5.HS-NUMBER;
import corpcom5.HS-STAT-CD;
import corpcom6.PO-ID-MO-RNG;
import corpcom6.POID-DISP;
import corpcom6.POID-WK;
import corpcom6.SEASON-CD;
import corpcom6.SESN-CC;
import corpcom6.SESN-CD;
import corpcom6.SESN-CODE;
import corpcom6.SESN-RNG;
import corpcom6.SESN-WORK;
import corpcom6.SESN-YR;
import corpcom6.SESN-YR-WORK;
import corpcom6.SESN-YY;
import corpcom6.SQLCA;
import corpcom6.TO-SZ-DESC;
import corpx1.XSETBL;
import fy.common.FR-SZ-DESC;
import ks.common.KS-FOB-PRC;
import ks.common.KS-FOB-PRICE;
import ks.common.KSWREC;
import pc.common.*;
import pg.common.PG3REC;
import sy.common.SY-COLR-CD-ID;
import sy.common.SY-STY-NBR;
import sy.common.SYCOLRCDID;
import sy.common.SYSTYNBR;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VCPROD02;
import vv.common.VPOHTS01;
//*** PROGRAM=KS0Q ****
// This application will be used to update/maintain the
// components price of a product. When Business unit and any
// other header field is entered by the user, appication goes
// to the dcustm.vpohts01 talble and pulls the corresponding
// details on the screen. Initially when displayed on the
// screen, '64..' classification will show the total FOB price
// (inclusive of the components price). Once the user enters
// the price on the components, the price for '64..' HTS will
// be updated automatically to (Total FOB-components FOB).
// This screen is reached :
// 1. By selecting option 10 in the CUSTOMS MAIN MENU
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      08/21/00  vkumar  New application.
// KS#00    11/27/00  vkumar  Protected the primary component
//                            price field in the map.
// *********************
Program KS0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KS0QW01 KS0QW01; // record
  KS0QW02 KS0QW02; // record
  KS0QW03 KS0QW03; // record
  KSWREC KSWREC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCPROD02 VCPROD02; // record
  VPOHTS01 VPOHTS01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL {deleteAfterUse = yes}; // table
  use KS0QM.KS0QM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KS0Q000: KS0Q000();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0QM001 initial; /* M001 input/output*/
    set KS0QW01 empty; /* M001 display storage*/
    set VPOHTS01 empty;
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    KS0QW01.KS0QW-MAX-PAGES = 100; /* Set maximum pages to format*/
    KS0QW01.KS0QWPSW = "N";
    KS0QW01.KS0QWMAP = "I";
    KS0QW01.FRSTTIME = "Y";
    ;
    /* ------------------------------------------------------------*/
    /* If data was passed in the COMMAREA, use as the initial key.*/
    /* ------------------------------------------------------------*/
    ;
    if (COMMAREA.CAFROMAP == "KS0I") /* if from KS0I*/
      KS0QW01.KS0QWSWR = "Y"; /* Request for data switch*/
      if (KSWREC.KSW-POIDT == 0)
        KS0QM001.KS0QM-PRDCTN-YR = " "; /* clear map fields*/
        KS0QM001.KS0QM-PRDCTN-MO = " ";
        KS0QM001.KS0QM-DLVR-MO = " ";
        KS0QW01.HD-PRDCTN-YR = " "; /* clear w01 fields*/
        KS0QW01.HD-PRDCTN-MO = " ";
        KS0QW01.HD-DLVR-MO = " ";
      else
        KS0QW01.KS0QW-DATE-WORK = KSWREC.KSW-POIDT;
        KS0QW01.HD-PRDCTN-YR = KS0QW01.KS0QW-YEAR;
        KS0QM001.KS0QM-PRDCTN-YR = KS0QW01.KS0QW-YEAR;
        KS0QW01.HD-PRDCTN-MO = KS0QW01.KS0QW-MONTH;
        KS0QM001.KS0QM-PRDCTN-MO = KS0QW01.KS0QW-MONTH;
        KS0QW01.HD-DLVR-MO = KS0QW01.KS0QW-DAY;
        KS0QM001.KS0QM-DLVR-MO = KS0QW01.KS0QW-DAY;
      end
      KS0QW01.HD-FCTY-CD = KSWREC.KSW-FCTY-CD;
      KS0QM001.KS0QM-FCTY-CD = KSWREC.KSW-FCTY-CD;
      KS0QW01.HD-BUS-UNIT-CD = KSWREC.XGPCD;
      KS0QM001.KS0QM-BUS-UNIT-CD = KSWREC.XGPCD;
      KS0QW01.HD-STY-NBR = KSWREC.SY1STNBR;
      KS0QM001.KS0QM-STY-NBR = KSWREC.SY1STNBR;
      KS0QW01.HD-COLR-CD-ID = KSWREC.SY2CLRID;
      KS0QM001.KS0QM-COLR-CD-ID = KSWREC.SY2CLRID;
      KS0QW01.HD-DIM-CD = KSWREC.XDMCD;
      KS0QM001.KS0QM-DIM-CD = KSWREC.XDMCD;
      KS0QW01.HD-SESN-CD = KSWREC.XSECD;
      KS0QM001.KS0QM-SESN-CD = KSWREC.XSECD;
      ;
      if (KSWREC.XSNYR == 0)
        KS0QM001.KS0QM-SESN-YR = " "; /* clear map fields*/
        KS0QW01.HD-SESN-YR = " "; /* clear w01 fields*/
      else
        KS0QW01.SESN-WORK = KSWREC.XSNYR;
        KS0QM001.KS0QM-SESN-YR = KS0QW01.SESN-YR-WORK;
        KS0QW01.HD-SESN-YR = KS0QW01.SESN-YR-WORK;
      end
      ;
    else
      KS0QW01.KS0QWSWR = "N"; /* Request for data switch*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0Q-000; /* Converse the main process*/
    ;
    ;
    KS0Q-000: KS0Q-000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0Q001; /* Converse the main process*/
    ;
    ;
    KS0Q001: KS0Q001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the component hts fob screen     .*/
     /* ------------------------------------------------------------*/
    ;
    goto KS0Q001; /* Converse Component HTS & FOB*/
    ;
  end // end main
end // end KS0Q

// Main process to display a map
Function KS0Q-000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP == "KS0A" /* From allowed application*/
   || COMMAREA.CAFROMAP == "KS0I" /* From allowed application*/
   || COMMAREA.CAFROMAP == "MN0C" /* From allowed application*/
   || COMMAREA.CAFROMAP == "MN0M") /* From allowed application*/
    ;
    /* NEXT SENTENCE*/
    ;
  else
    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/
    ;
    XSNOWAY(); /* Invalid transfer was attempted*/
    ;
  end
  ;
   /* ********************** End of KS0Q-000 ********************/
end // end KS0Q-000

// Application initialization
Function KS0Q000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/
  ;
  XSENTRY(); /* Application entry validation*/
  ;
   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another OR*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP == "KS0I") /* Came from ks0i*/
    ;
    KSWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work recor*/
  else
    set KSWREC empty; /* Initialize work record area*/
    ;
  end
  ;
end // end KS0Q000

Function KS0Q001()
  /* -------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) CHECK THE ATTENTION IDENTIFIER USED TO RESPOND.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0QW01.KS0QWSWR == "Y" /* If request for data is yes*/
   && KS0QW01.KS0QWPSW == "N") /* and no errors*/
    KS0Q100(); /* Obtain the data to display*/
  end
  ;
  KS0Q200(); /* Format and display map*/
  ;
  KS0Q300(); /* Check attention identifier*/
  ;
  KS0Q400(); /* Reset fields to normal intensity*/
  ;
  KS0Q500(); /* Verify entered data*/
  ;
  if (KS0QW01.KS0QWPSW == "N") /* No errors*/
    KS0Q600(); /* Process valid input request*/
  end
  ;
end // end KS0Q001

// Obtain data to display
Function KS0Q100()
   /* ------------------------------------------------------------*/
  ;
               /* OBTAIN THE DATA TO DISPLAY*/
  ;
   /* 1) Move valid screen parameters to VPOHTS01 fields*/
   /* 2) Select sets and open cursors for DCUSTM.VPOHTS01.*/
   /* 3) Fetch rows from DCUSTM.VPOHTS01 table.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  VPOHTS01.KS-BUS-UNIT-CD = KS0QM001.KS0QM-BUS-UNIT-CD;
  ;
  if (KS0QM001.KS0QM-STY-NBR == " ")
    VPOHTS01.SY-STY-NBR = "*";
  else
    VPOHTS01.SY-STY-NBR = KS0QM001.KS0QM-STY-NBR;
  end
  ;
  if (KS0QM001.KS0QM-COLR-CD-ID == " ")
    VPOHTS01.SY-COLR-CD-ID = "*";
  else
    VPOHTS01.SY-COLR-CD-ID = KS0QM001.KS0QM-COLR-CD-ID;
  end
  ;
  if (KS0QM001.KS0QM-DIM-CD == " ")
    VPOHTS01.XDM-DIM-CD = "*";
  else
    VPOHTS01.XDM-DIM-CD = KS0QM001.KS0QM-DIM-CD;
  end
  ;
  if (KS0QM001.KS0QM-SESN-CD == " ")
    VPOHTS01.XSE-SESN-CD = "*";
  else
    VPOHTS01.XSE-SESN-CD = KS0QM001.KS0QM-SESN-CD;
  end
  ;
  if (KS0QM001.KS0QM-SESN-YR >= "00" /* if sesn-yr entered*/
   && KS0QM001.KS0QM-SESN-YR <= "99")
    KS0QW01.KS0QW-SESN-YY = KS0QM001.KS0QM-SESN-YR; /* Season year*/
    if (KS0QM001.KS0QM-SESN-YR > "65")
      KS0QW01.KS0QW-SESN-CENT = "19";
    else
      KS0QW01.KS0QW-SESN-CENT = "20";
    end
  else
    KS0QW01.KS0QW-SESN-YR = " "; /* Season year*/
  end
  ;
  if (KS0QW01.KS0QW-SESN-YR > " ")
    KS0QW01.KS0QW-SESN-YR-NUM = KS0QW01.KS0QW-SESN-YR;
  else
    KS0QW01.KS0QW-SESN-YR-NUM = 0;
  end
  ;
  if (KS0QW01.KS0QW-SESN-YR-NUM == 0)
    VPOHTS01.XSN-SESN-YR-RNG = -1;
  else
    VPOHTS01.XSN-SESN-YR-RNG = KS0QW01.KS0QW-SESN-YR-NUM;
  end
  ;
  if (KS0QM001.KS0QM-PRDCTN-YR > " ")
    KS0QW01.KS0QW-PRDCTN-YR = KS0QM001.KS0QM-PRDCTN-YR;
    KS0QW01.KS0QW-PRDCTN-MO = KS0QM001.KS0QM-PRDCTN-MO;
    KS0QW01.KS0QW-DLVR-MO = KS0QM001.KS0QM-DLVR-MO;
    if (KS0QM001.KS0QM-PRDCTN-YR > "65")
      KS0QW01.KS0QW-PRDCTN-CEN = "19";
    else
      KS0QW01.KS0QW-PRDCTN-CEN = "20";
    end
  else
    KS0QW01.KS0QW-POIDT = " ";
  end
  ;
  if (KS0QW01.KS0QW-POIDT > " ")
    KS0QW01.KS0QW-POIDT-NUM = KS0QW01.KS0QW-POIDT;
  else
    KS0QW01.KS0QW-POIDT-NUM = 0;
  end
  ;
  if (KS0QW01.KS0QW-POIDT-NUM > 0)
    VPOHTS01.PC-PO-ID-MO-RNG = KS0QW01.KS0QW-POIDT-NUM;
  else
    VPOHTS01.PC-PO-ID-MO-RNG = -1;
  end
  ;
  if (KS0QM001.KS0QM-FCTY-CD > " ")
    VPOHTS01.FY-FCTY-CD = KS0QM001.KS0QM-FCTY-CD;
  else
    VPOHTS01.FY-FCTY-CD = "*";
  end
  VPOHTS01.YKS-STY-TYP-CD = "*";
  ;
  KS0QW01.SESN-CD = " ";
  KS0QW01.SESN-RNG = 0;
  KS0QW01.PO-ID-MO-RNG = 0;
  KS0QW01.FCTY-CD = " ";
  KS0QW01.SYSTYNBR = " ";
  KS0QW01.SYCOLRCDID = " ";
  KS0QW01.HS-CPTR-CD = " ";
  KS0QW01.HS-HDG-CD = " ";
  KS0QW01.HS-1ST-SHDG-CD = " ";
  KS0QW01.HS-2ND-SHDGCD = " ";
  KS0QW01.HS-STAT-CD = " ";
  ;
  KS0Q110(); /* Purge any temporary storage*/
  ;
  KS0Q120(); /* Select set, open the cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
    set KS0QW02 empty; /* Set screen WS empty*/
    KS0QW01.KS0QWSW1 = "N"; /* Set end of selected set switch*/
    KS0QW01.KS0QWIXM = 1; /* Set counter for screen ws*/
    ;
    while (KS0QW01.KS0QWSW1 == "N") /* While data exists to fetch*/
      KS0Q130(); /* Fetch and process information*/
      if (KS0QW01.KS0QWSW1 == "N")
        KS0Q160(); /* Move to Prev*/
        KS0Q170(); /* Roll up items*/
      end
      ;
    end
    ;
    if (KS0QW01.KS0QWSW1 == "Y") /* If last fetch of detail done*/
      if (KS0QW01.KS0QWIXM > 1) /* and a partial page exists*/
        KS0Q140(); /* add that page to temp storage*/
      end
      KS0QW01.KS0QWTSP = 1; /* initialize page number*/
      KS0QW01.KS0QWSWR = "N"; /* reset request for data switch*/
      KS0Q150(); /* Close the POHTS selected set*/
    end
    ;
  end
  ;
  if (KS0QW01.TA5TSQIX == 0) /* No data to display*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    KS0QW01.KS0QWPSW = "Y";
    KS0QM001.KS0QPRCNM = "KS0Q100"; /* Process name*/
  end
  ;
end // end KS0Q100

// purge temp storage
Function KS0Q110()
   /* ------------------------------------------------------------*/
  ;
              /* PURGE ANY TEMPORARY STORAGE*/
  ;
   /* 1) Purge any temporary storage for this application.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = "KS0Q"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  call "TA0050" (KS0QW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "KS0Q110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0QM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  KS0QW01.KS0QWTSP = 0; /* Reset current page number*/
  KS0QW01.TA5TSQIX = 0; /* Reset highest page number*/
  ;
end // end KS0Q110

// Select open dcustm.vpohts01
Function KS0Q120()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "KS3000" ("S1", SQLCA, VPOHTS01) {isNoRefresh = yes, isExternal = yes};
  end /* Sele*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KS0QM001.KS0QPRCNM = "KS0Q120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KS0QM001.KS0QPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0Q120

// Fetch from dcustm.vpohts01
Function KS0Q130()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VPOHTS01*/
  ;
   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  try
    call "KS3000" ("N1", SQLCA, VPOHTS01) {isNoRefresh = yes, isExternal = yes};
  end /* FETCH*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    KS0QW01.KS0QWSW1 = "Y"; /* Set end switch*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      KS0QW01.KS0QWPSW = "Y"; /* Indicate problem*/
      KS0QW01.KS0QWSW1 = "Y"; /* Set end switch*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "KS0Q130"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "KS0QM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0QM001.KS0QPRCNM = "KS0Q130"; /* Process name*/
      ;
    end
  end
  ;
end // end KS0Q130

// store fields
Function KS0Q131()
  ;
  KS0QW01.SESN-YR = KS0QW01.SESN-YY;
  KS0QW02.SESN-CODE[KS0QWIXM] = KS0QW01.SEASON-CD;
  ;
  KS0QW01.POID-WK = KS0QW01.PC-PO-ID-WORK;
  KS0QW02.PC-PO-ID[KS0QWIXM] = KS0QW01.POID-DISP;
  ;
  KS0QW02.SY-STY-NBR[KS0QWIXM] = KS0QW01.SYSTYNBR;
  KS0QW02.STY-TYP-CD[KS0QWIXM] = KS0QW01.STY-TYP-CD;
  KS0QW02.SY-COLR-CD-ID[KS0QWIXM] = KS0QW01.SYCOLRCDID;
  ;
  KS0QW02.KS-FOB-PRC[KS0QWIXM] = KS0QW01.KS-FOB-PRICE;
  KS0QW02.KS-FOB-MAX-PRC[KS0QWIXM] = KS0QW01.KS-FOB-MAX-PRICE;
  KS0QW02.HS-ORD-NO[KS0QWIXM] = KS0QW01.HTS-ORD-NO;
  ;
  KS0Q132(); /* Get size descriptions*/
  ;
  KS0Q133(); /* Format the HTS*/
  ;
end // end KS0Q131

// Get size description
Function KS0Q132()
   /* ------------------------------------------------------------*/
  ;
             /* SELECT SIZE FROM DPROD.VSCALE01*/
  ;
    /* 1) move in the keys*/
    /* 2) select the number*/
   /* ------------------------------------------------------------*/
  ;
  set PG3REC empty; /* Clear record*/
  ;
  PG3REC.PG3FUNCD = "PC"; /* translator function*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  PG3REC.XGPCD = VPOHTS01.XGP-GPC-CD; /* keys*/
  PG3REC.SY1STNBR = KS0QW01.SYSTYNBR;
  PG3REC.SY2CLRID = KS0QW01.SYCOLRCDID;
  PG3REC.XDMCD = KS0QW01.DIMCD;
  PG3REC.XQACD = "**";
  ;
  KS0QS01(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                  /* SIZE BREAKS.*/
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)
    ;
   /* MOVE 114 TO EZEMNO;*/
  end
  ;
  if (PG3REC.PG3RETCD == "00") /* If good return code*/
    KS0QW01.KS0QSZID = KS0QW01.MIN-SZ-ID;
    KS0QW02.FR-SZ-DESC[KS0QWIXM] = PG3REC.SY4IDDSC[KS0QSZID];
    KS0QW01.KS0QSZID = KS0QW01.MAX-SZ-ID;
    KS0QW02.TO-SZ-DESC[KS0QWIXM] = PG3REC.SY4IDDSC[KS0QSZID];
    ;
  else
    ;
    if (PG3REC.PG3RETCD != "09") /* or not found*/
      /* ========  NEXT SENTENCE=======>*/
    else
      ;
      if (PG3REC.PG3RETCD == "09") /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      KS0QM001.KS0QPRCNM = "KS0Q132"; /* Process name*/
      ;
      exit stack; /* ===> exit to re-display map*/
      ;
    end
    ;
  end
  ;
end // end KS0Q132

// Format HTS
Function KS0Q133()
  ;
  KS0QW01.HS-BYTE1 = ".";
  KS0QW01.HS-BYTE2 = ".";
  ;
  KS0QW02.HS-NUMBER[KS0QWIXM] = KS0QW01.HS-NUMBER;
  ;
end // end KS0Q133

// Add to temp storage
Function KS0Q140()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/
  ;
  KS0QW02.KS0QWLEN = 789; /* Temporary storage length*/
  TA5REC.TA5APPID = "KS0Q"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  call "TA0050" (KS0QW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "KS0Q140"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0QM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0QM001.KS0QPRCNM = "KS0Q140"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  KS0QW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
  ;
  KS0QW01.KS0QWIXM = 1; /* Reset display line number*/
  ;
  set KS0QW02 empty; /* Clear temporary storage record*/
  ;
end // end KS0Q140

// Close dcustm.vpohts01
Function KS0Q150()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "KS3000" ("C1", SQLCA, VPOHTS01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KS0QM001.KS0QPRCNM = "KS0Q150"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KS0QM001.KS0QPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0Q150

// Move current to Prev
Function KS0Q160()
  KS0QW01.SESN-RNG = VPOHTS01.XSN-SESN-YR-RNG;
  KS0QW01.SESN-CD = VPOHTS01.XSE-SESN-CD;
  KS0QW01.PO-ID-MO-RNG = VPOHTS01.PC-PO-ID-MO-RNG;
  KS0QW01.FCTY-CD = VPOHTS01.FY-FCTY-CD;
  KS0QW01.STY-TYP-CD = VPOHTS01.YKS-STY-TYP-CD;
  KS0QW01.SYSTYNBR = VPOHTS01.SY-STY-NBR;
  KS0QW01.SYCOLRCDID = VPOHTS01.SY-COLR-CD-ID;
  KS0QW01.DIMCD = VPOHTS01.XDM-DIM-CD;
  KS0QW01.KS-FOB-PRICE = VPOHTS01.KS-MIN-FOB-PRC;
  KS0QW01.KS-FOB-MAX-PRICE = VPOHTS01.KS-MAX-FOB-PRC;
  KS0QW01.HS-CPTR-CD = VPOHTS01.KS-HTS-CPTR-CD;
  KS0QW01.HS-HDG-CD = VPOHTS01.KS-HTS-HDG-CD;
  KS0QW01.HS-1ST-SHDG-CD = VPOHTS01.KS-HTS-1ST-SHDG-CD;
  KS0QW01.HS-2ND-SHDGCD = VPOHTS01.KS-HTS-2ND-SHDGCD1;
  KS0QW01.HS-STAT-CD = VPOHTS01.KS-HTS-STAT-CD;
  KS0QW01.HTS-ORD-NO = VPOHTS01.KS-HTS-RNG-FL;
  KS0QW01.MIN-SZ-ID = VPOHTS01.KS-MIN-SZ-ID;
  KS0QW01.MAX-SZ-ID = VPOHTS01.KS-MAX-SZ-ID;
  ;
end // end KS0Q160

// Roll up
Function KS0Q170()
  while (KS0QW01.KS0QWSW1 == "N") /* While data exists to fetch*/
    KS0Q130(); /* Fetch and process informatio*/
    ;
    if (KS0QW01.KS0QWSW1 == "N")
      if (VPOHTS01.XSE-SESN-CD == KS0QW01.SESN-CD
       && VPOHTS01.XSN-SESN-YR-RNG == KS0QW01.SESN-RNG
       && VPOHTS01.PC-PO-ID-MO-RNG == KS0QW01.PO-ID-MO-RNG
       && VPOHTS01.FY-FCTY-CD == KS0QW01.FCTY-CD
       && VPOHTS01.SY-STY-NBR == KS0QW01.SYSTYNBR
       && VPOHTS01.SY-COLR-CD-ID == KS0QW01.SYCOLRCDID
       && VPOHTS01.YKS-STY-TYP-CD == KS0QW01.STY-TYP-CD
       && VPOHTS01.KS-HTS-CPTR-CD == KS0QW01.HS-CPTR-CD
       && VPOHTS01.KS-HTS-HDG-CD == KS0QW01.HS-HDG-CD
       && VPOHTS01.KS-HTS-1ST-SHDG-CD == KS0QW01.HS-1ST-SHDG-CD
       && VPOHTS01.KS-HTS-2ND-SHDGCD1 == KS0QW01.HS-2ND-SHDGCD
       && VPOHTS01.KS-HTS-STAT-CD == KS0QW01.HS-STAT-CD
       && VPOHTS01.KS-MIN-FOB-PRC == KS0QW01.KS-FOB-PRICE)
        ;
        if (VPOHTS01.KS-MIN-SZ-ID < KS0QW01.MIN-SZ-ID)
          KS0QW01.MIN-SZ-ID = VPOHTS01.KS-MIN-SZ-ID;
        end
        ;
        if (VPOHTS01.KS-MAX-SZ-ID > KS0QW01.MAX-SZ-ID)
          KS0QW01.MAX-SZ-ID = VPOHTS01.KS-MAX-SZ-ID;
        end
      else
        KS0Q131();
        KS0QW01.KS0QWIXM = KS0QW01.KS0QWIXM + 1; /* increment counter*/
        KS0Q160(); /* Move Prev*/
      end
    else
      KS0Q131();
      KS0QW01.KS0QWIXM = KS0QW01.KS0QWIXM + 1; /* increment counter*/
    end
    ;
    if (KS0QW01.KS0QWIXM > 14) /* page is full*/
      KS0Q140(); /* add that page to temp storage*/
      ;
      /* ---------------------------------------------------------------*/
      /* If the number of pages in temp storage is GE the maximum number*/
      /* of pages set in the entry flow to the application, then set the*/
      /* end of cursor flag and give message that max pages were reached*/
      /* ---------------------------------------------------------------*/
      if (KS0QW01.TA5TSQIX >= KS0QW01.KS0QW-MAX-PAGES)
        KS0QW01.KS0QWSW1 = "Y"; /* Endof file*/
        converseLib.validationFailed(128); /* Max pages reached*/
        KS0QM001.KS0QPRCNM = "KS0Q100"; /* Process name*/
      end
      ;
    end
  end
end // end KS0Q170

// Format and display KS0QM001
Function KS0Q200()
   /* ------------------------------------------------------------*/
               /* FORMAT AND DISPLAY THE MAP*/
  ;
   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (KS0QW01.KS0QWPSW == "N") /* No errors found*/
    ;
    set KS0QM001 initial; /* clear the map*/
    ;
  end
  if (KS0QW01.KS0QWMAP == "I") /* inquiry only*/
    KS0QM001.KS0QMHDG = "INQUIRY  ";
    KS0Q212(); /* Set fields protect*/
  else
    if (KS0QW01.KS0QWMAP == "C") /* maintenance*/
      KS0QM001.KS0QMHDG = "MAINTENANCE";
      KS0QW01.FRSTTIME = "N";
    end
  end
  ;
       /* Move heading data*/
  ;
  KS0QM001.KS0QM-BUS-UNIT-CD = KS0QW01.HD-BUS-UNIT-CD;
  KS0QM001.KS0QM-PRDCTN-YR = KS0QW01.HD-PRDCTN-YR;
  KS0QM001.KS0QM-PRDCTN-MO = KS0QW01.HD-PRDCTN-MO;
  KS0QM001.KS0QM-DLVR-MO = KS0QW01.HD-DLVR-MO;
  KS0QM001.KS0QM-FCTY-CD = KS0QW01.HD-FCTY-CD;
  KS0QM001.KS0QM-STY-NBR = KS0QW01.HD-STY-NBR;
  KS0QM001.KS0QM-COLR-CD-ID = KS0QW01.HD-COLR-CD-ID;
  KS0QM001.KS0QM-DIM-CD = KS0QW01.HD-DIM-CD;
  KS0QM001.KS0QM-DIM-CD = KS0QW01.HD-DIM-CD;
  KS0QM001.KS0QM-SESN-CD = KS0QW01.HD-SESN-CD;
  KS0QM001.KS0QM-SESN-YR = KS0QW01.HD-SESN-YR;
  ;
  ;
  if (KS0QW01.KS0QWPSW == "N") /* No errors found*/
    ;
    KS0Q210(); /* Format the data on the page*/
    ;
  end
  ;
  KS0QM001.KS0QCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  converse KS0QM001 ;
  ;
  KS0QW01.KS0QWPSW = "N"; /* reset problem switch*/
  ;
end // end KS0Q200

// Format the selected data
Function KS0Q210()
   /* ------------------------------------------------------------*/
               /* FORMAT THE SELECTED DATA*/
  ;
   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (KS0QW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else
    ;
    KS0Q211(); /* Obtain temporary storage page*/
    ;
    set KS0QM001.KS0QLITPG skip; /* Display "PAGE" literal*/
    set KS0QM001.KS0QLITOF skip; /* Display "OF" literal*/
    ;
    KS0QM001.KS0QTSPAG = KS0QW01.KS0QWTSP; /* Current page number*/
    KS0QM001.TA5TSQIX = KS0QW01.TA5TSQIX; /* Highest page number*/
    set KS0QM001.KS0QM-DTL-FOB[1] cursor;
    ;
    KS0QW01.KS0QWIXM = 1; /* Initialize line indexes*/
    ;
      /* move all lines of screen data*/
    ;
    while (KS0QW01.KS0QWIXM <= 14) /* Until end of lines*/
      KS0QM001.KS0QM-DTL-SESN[KS0QWIXM] = KS0QW02.SESN-CODE[KS0QWIXM];
      KS0QM001.KS0QM-DTL-POID[KS0QWIXM] = KS0QW02.PC-PO-ID[KS0QWIXM];
      KS0QM001.KS0QM-DTL-STY[KS0QWIXM] = KS0QW02.SY-STY-NBR[KS0QWIXM];
      KS0QM001.KS0QM-DTL-CLR[KS0QWIXM] = KS0QW02.SY-COLR-CD-ID[KS0QWIXM];
      KS0QM001.KS0QM-DTL-STY-TYP[KS0QWIXM] = KS0QW02.STY-TYP-CD[KS0QWIXM];
      KS0QM001.KS0QM-DTL-FOB[KS0QWIXM] = KS0QW02.KS-FOB-PRC[KS0QWIXM];
      KS0QM001.KS0QM-DTL-FR-SIZE[KS0QWIXM] = KS0QW02.FR-SZ-DESC[KS0QWIXM];
      KS0QM001.KS0QM-DTL-TO-SIZE[KS0QWIXM] = KS0QW02.TO-SZ-DESC[KS0QWIXM];
      KS0QM001.KS0QM-DTL-HTS[KS0QWIXM] = KS0QW02.HS-NUMBER[KS0QWIXM];
      KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] = KS0QW02.HS-ORD-NO[KS0QWIXM];
      if (KS0QW02.HS-ORD-NO[KS0QWIXM] == "1")
        set KS0QM001.KS0QM-DTL-FOB[KS0QWIXM] protect;
      end
      ;
      set KS0QM001.KS0QM-DTL-HTS[KS0QWIXM] protect;
      ;
      if (KS0QM001.KS0QM-DTL-SESN[KS0QWIXM] == " ")
        set KS0QM001.KS0QM-DTL-FOB[KS0QWIXM] protect;
      end
      if (KS0QM001.KS0QM-BUS-UNIT-CD == "02")
        ;
        if (KS0QW02.STY-TYP-CD[KS0QWIXM] == " ")
          set KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] protect;
        end
        ;
      else
        set KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] protect;
        set KS0QM001.KS0QM-DTL-FR-SIZE[KS0QWIXM] invisible, protect;
        set KS0QM001.KS0QM-DTL-TO-SIZE[KS0QWIXM] invisible, protect;
      end
      ;
      KS0QW01.KS0QWIXM = KS0QW01.KS0QWIXM + 1; /* Increment line indexes*/
      ;
    end
  end
  ;
end // end KS0Q210

// Read from temp storage
Function KS0Q211()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/
  ;
   /* 1) Obtain the next page of data to display.*/
   /* 2) If error occurs, indicate system error and exit to*/
      /* redisplay the map.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  KS0QW02.KS0QWLEN = 789; /* Temporary storage length*/
  TA5REC.TA5APPID = "KS0Q"; /* Application identification*/
  TA5REC.TA5TSQIX = KS0QW01.KS0QWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  call "TA0050" (KS0QW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "KS0Q211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "KS0QM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    KS0QM001.KS0QPRCNM = "KS0Q211"; /* Process name*/
    KS0QW01.KS0QWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
end // end KS0Q211

// Set fields protect
Function KS0Q212()
  KS0QW01.KS0QWIXM = 1; /* Initialize line indexes*/
  ;
  ;
  while (KS0QW01.KS0QWIXM <= 14) /* Until end of lines*/
    ;
    set KS0QM001.KS0QM-DTL-FOB[KS0QWIXM] protect;
    set KS0QM001.KS0QM-DTL-HTS[KS0QWIXM] protect;
    set KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] protect;
    ;
    KS0QW01.KS0QWIXM = KS0QW01.KS0QWIXM + 1; /* Increment line indexes*/
    ;
  end
end // end KS0Q212

// Check attention identifier
Function KS0Q300()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/
  ;
   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to KS0A*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 7) If any AI pressed other than ENTER, PF7, or PF8*/
      /* indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    KS0QW01.KS0QWPSW = "N"; /* Reset problem switch*/
    KS0QW01.KS0QWSWR = "N"; /* Reset request for data*/
    KS0QM001.KS0QPRCNM = "KS0Q300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf12 /* if pf12 was pressed and no errors*/
   && KS0QW01.KS0QWPSW == "N")    
    KS0QW01.KS0QWMAP = "C"; /* set to map 'C'*/
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    if (COMMAREA.CAFROMAP == "KS0I")
      COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* set to Carrier app*/
    else
      COMMAREA.CATOAP = "KS0A"; /* set to Carrier app*/
    end
   /* MOVE ' ' TO COMMAREA.CAITEM;    /* clear item field*/
   /* MOVE ' ' TO COMMAREA.CAUSERA;   /* clear user area*/
    KS0Q110(); /* purge any temp storage*/
    XSKS-S0001(); /* Exit to another application*/
    KS0QM001.KS0QPRCNM = "KS0Q300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (KS0QM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = KS0QM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = KS0QM001.CAITEM; /* Application data*/
      COMMAREA.CAUSERA = " "; /* clear user area*/
      KS0Q110(); /* purge any temp storage*/
      XSKS-S0001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      KS0QW01.KS0QWPSW = "Y"; /* Indicate problem*/
    end
    set KS0QM001.CATOAP cursor, modified, bold; /* Highlight*/
    KS0QM001.KS0QPRCNM = "KS0Q300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "KS0QM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end
    ;
    COMMAREA.CAUSERA = " "; /* clear user area*/
    KS0Q110(); /* purge any temp storage*/
    XSKS-S0001(); /* Exit to another application*/
    KS0QM001.KS0QPRCNM = "KS0Q300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not scroll request*/
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf3   
   && converseVar.eventKey not pf12)
    KS0QM001.KS0QPRCNM = "KS0Q300"; /* Process name*/
    KS0QW01.KS0QWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end
  ;
end // end KS0Q300

// Reset fields
Function KS0Q400()
   /* ------------------------------------------------------------*/
                /* RESET HIGHLIGHTED FIELDS*/
  ;
   /* 1) Reset field attributes to normal intensity.*/
  ;
   /* ------------------------------------------------------------*/
  set KS0QM001.KS0QM-BUS-UNIT-CD initialAttributes;
  set KS0QM001.KS0QM-PRDCTN-YR initialAttributes;
  set KS0QM001.KS0QM-PRDCTN-MO initialAttributes;
  set KS0QM001.KS0QM-DLVR-MO initialAttributes;
  set KS0QM001.KS0QM-FCTY-CD initialAttributes;
  set KS0QM001.KS0QM-STY-NBR initialAttributes;
  set KS0QM001.KS0QM-COLR-CD-ID initialAttributes;
  set KS0QM001.KS0QM-DIM-CD initialAttributes;
  set KS0QM001.KS0QM-SESN-CD initialAttributes;
  set KS0QM001.KS0QM-SESN-YR initialAttributes;
  ;
  set KS0QM001.CATOAP initialAttributes;
  set KS0QM001.CAITEM initialAttributes;
  ;
end // end KS0Q400

// verify entered data
Function KS0Q500()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/
  ;
   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/
  ;
   /* ------------------------------------------------------------*/
  ;
  if (KS0QM001.CAITEM > " ") /* Application data was entered*/
    set KS0QM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    KS0QW01.KS0QWPSW = "Y"; /* indicate error message*/
    KS0QM001.KS0QPRCNM = "KS0Q500"; /* Process name*/
  else
    ;
    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      KS0Q510(); /* Verify scroll request*/
      KS0Q520(); /* Do edits*/
    else
      if (converseVar.eventKey is enter) /* Scroll back request*/
        if (KS0QM001.KS0QM-BUS-UNIT-CD == " " /* If no data entered*/
         && KS0QM001.KS0QM-PRDCTN-YR == " "   /* If no data entered*/
         && KS0QM001.KS0QM-PRDCTN-MO == " "   
         && KS0QM001.KS0QM-DLVR-MO == " "     
         && KS0QM001.KS0QM-FCTY-CD == " "     
         && KS0QM001.KS0QM-STY-NBR == " "     
         && KS0QM001.KS0QM-COLR-CD-ID == " "  
         && KS0QM001.KS0QM-DIM-CD == " "      
         && KS0QM001.KS0QM-SESN-CD == " "     
         && KS0QM001.KS0QM-SESN-YR == " ")   
          ;
          KS0Q110(); /* purge temporary storage*/
          ;
          set KS0QW02 empty; /* empty screen ws*/
          ;
          KS0QW01.HD-BUS-UNIT-CD = " ";
          KS0QW01.HD-PRDCTN-YR = " ";
          KS0QW01.HD-PRDCTN-MO = " ";
          KS0QW01.HD-DLVR-MO = " ";
          KS0QW01.HD-FCTY-CD = " ";
          KS0QW01.HD-STY-NBR = " ";
          KS0QW01.HD-COLR-CD-ID = " ";
          KS0QW01.HD-DIM-CD = " ";
          KS0QW01.HD-SESN-CD = " ";
          KS0QW01.HD-SESN-YR = " ";
          ;
          set KS0QM001 initial; /* clear map*/
          KS0QW01.KS0QWPSW = "Y"; /* indicate error message*/
          converseLib.validationFailed(163); /* data must be entered*/
          KS0QM001.KS0QPRCNM = "KS0Q500"; /* process name*/
        else
          if (KS0QM001.KS0QM-BUS-UNIT-CD != KS0QW01.HD-BUS-UNIT-CD
           || KS0QM001.KS0QM-PRDCTN-YR != KS0QW01.HD-PRDCTN-YR
           || KS0QM001.KS0QM-PRDCTN-MO != KS0QW01.HD-PRDCTN-MO
           || KS0QM001.KS0QM-DLVR-MO != KS0QW01.HD-DLVR-MO
           || KS0QM001.KS0QM-FCTY-CD != KS0QW01.HD-FCTY-CD
           || KS0QM001.KS0QM-STY-NBR != KS0QW01.HD-STY-NBR
           || KS0QM001.KS0QM-COLR-CD-ID != KS0QW01.HD-COLR-CD-ID
           || KS0QM001.KS0QM-DIM-CD != KS0QW01.HD-DIM-CD
           || KS0QM001.KS0QM-SESN-CD != KS0QW01.HD-SESN-CD
           || KS0QM001.KS0QM-SESN-YR != KS0QW01.HD-SESN-YR
          )
            KS0Q110(); /* purge temporary storage*/
            set KS0QW02 empty; /* empty screen ws*/
            ;
            KS0QW01.HD-BUS-UNIT-CD = KS0QM001.KS0QM-BUS-UNIT-CD;
            KS0QW01.HD-PRDCTN-YR = KS0QM001.KS0QM-PRDCTN-YR;
            KS0QW01.HD-PRDCTN-MO = KS0QM001.KS0QM-PRDCTN-MO;
            KS0QW01.HD-DLVR-MO = KS0QM001.KS0QM-DLVR-MO;
            KS0QW01.HD-FCTY-CD = KS0QM001.KS0QM-FCTY-CD;
            KS0QW01.HD-STY-NBR = KS0QM001.KS0QM-STY-NBR;
            KS0QW01.HD-COLR-CD-ID = KS0QM001.KS0QM-COLR-CD-ID;
            KS0QW01.HD-DIM-CD = KS0QM001.KS0QM-DIM-CD;
            KS0QW01.HD-SESN-CD = KS0QM001.KS0QM-SESN-CD;
            KS0QW01.HD-SESN-YR = KS0QM001.KS0QM-SESN-YR;
            ;
            set KS0QM001 initial;
            ;
            KS0QM001.KS0QM-BUS-UNIT-CD = KS0QW01.HD-BUS-UNIT-CD;
            KS0QM001.KS0QM-PRDCTN-YR = KS0QW01.HD-PRDCTN-YR;
            KS0QM001.KS0QM-PRDCTN-MO = KS0QW01.HD-PRDCTN-MO;
            KS0QM001.KS0QM-DLVR-MO = KS0QW01.HD-DLVR-MO;
            KS0QM001.KS0QM-FCTY-CD = KS0QW01.HD-FCTY-CD;
            KS0QM001.KS0QM-STY-NBR = KS0QW01.HD-STY-NBR;
            KS0QM001.KS0QM-COLR-CD-ID = KS0QW01.HD-COLR-CD-ID;
            KS0QM001.KS0QM-DIM-CD = KS0QW01.HD-DIM-CD;
            KS0QM001.KS0QM-SESN-CD = KS0QW01.HD-SESN-CD;
            KS0QM001.KS0QM-SESN-YR = KS0QW01.HD-SESN-YR;
            ;
            KS0QW01.KS0QWSWR = "Y"; /* set request for data to yes*/
            ;
            KS0Q520(); /* Verify any changed data*/
            ;
          else /* If no data was changed*/
            ;
   /* MOVE 'Y' TO KS0QW01.KS0QWSWR;    /* set request for data to yes*/
            ;
            KS0Q520(); /* Verify selections and other data*/
            ;
          end
        end
      end
    end
  end
  ;
end // end KS0Q500

// verify scroll request
Function KS0Q510()
   /* ------------------------------------------------------------*/
  ;
               /* VERIFY SCROLL REQUEST*/
  ;
   /* 1) Ensure that pages exist to scroll forward or back.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0QW01.KS0QWTSP < 2)       /* and no previous pages*/
    KS0QW01.KS0QWPSW = "Y"; /* indicate problem*/
    KS0QM001.KS0QPRCNM = "KS0Q510"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0QW01.KS0QWTSP >= KS0QW01.TA5TSQIX) /* and no more pages*/
    KS0QW01.KS0QWPSW = "Y"; /* indicate problem*/
    KS0QM001.KS0QPRCNM = "KS0Q510"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end
  ;
end // end KS0Q510

// verify changed data
Function KS0Q520()
   /* ------------------------------------------------------------*/
  ;
                /* VERIFY ANY CHANGED DATA*/
  ;
   /* 1) Verify valid selections.*/
   /* 2) Verify that all dates entered are valid.*/
   /* 3) Verify that all locations entered are valid.*/
   /* 4) If no errors, check for date span and overlap errors.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - GPC/STYLE , GPC/SESN/YR*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0QM001.KS0QM-BUS-UNIT-CD == " "
   || KS0QM001.KS0QM-STY-NBR == " "
   || KS0QM001.KS0QM-COLR-CD-ID == " "
   || KS0QM001.KS0QM-PRDCTN-YR == " "
   || KS0QM001.KS0QM-PRDCTN-MO == " "
   || KS0QM001.KS0QM-DLVR-MO == " ")
    set KS0QM001.KS0QM-STY-NBR bold;
    set KS0QM001.KS0QM-COLR-CD-ID bold;
    set KS0QM001.KS0QM-PRDCTN-YR bold;
    set KS0QM001.KS0QM-PRDCTN-MO bold;
    set KS0QM001.KS0QM-DLVR-MO bold;
    KS0QM001.KS0QPRCNM = "KS0Q520"; /* Process name*/
    converseLib.validationFailed(163);
    KS0QW01.KS0QWPSW = "Y";
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the business unit entered.*/
  /* ------------------------------------------------------------*/
  if (KS0QM001.KS0QM-BUS-UNIT-CD != "02")
    if (KS0QM001.KS0QM-BUS-UNIT-CD != "EQ")
      if (KS0QM001.KS0QM-BUS-UNIT-CD != "03")
        KS0QM001.KS0QPRCNM = "KS0Q520"; /* Process name*/
        converseLib.validationFailed(167);
        set KS0QM001.KS0QM-BUS-UNIT-CD cursor, bold;
        KS0QW01.KS0QWPSW = "Y";
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0QM001.KS0QM-SESN-CD > " ") /* Season code entered*/
    if (KS0QM001.KS0QM-SESN-CD in XSETBL.XSECD /* Code in table*/
     && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      if (KS0QM001.KS0QM-SESN-YR >= "00"
       && KS0QM001.KS0QM-SESN-YR <= "99")
        ;
    /* Next Sentence*/
        ;
      else
        ;
        KS0QM001.KS0QPRCNM = "KS0Q520"; /* Process name*/
        set KS0QM001.KS0QM-SESN-YR cursor, bold; /* Highlight*/
        converseLib.validationFailed(26); /* Field missing or invalid*/
        KS0QW01.KS0QWPSW = "Y";
      end
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KS0QM001.KS0QPRCNM = "KS0Q520"; /* Process name*/
      set KS0QM001.KS0QM-SESN-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(27); /* Field missing or invalid*/
      KS0QW01.KS0QWPSW = "Y";
      ;
    end
  else
    if (KS0QM001.KS0QM-SESN-YR >= "00"
     && KS0QM001.KS0QM-SESN-YR <= "99")
      ;
      KS0QM001.KS0QPRCNM = "KS0Q520"; /* Process name*/
      set KS0QM001.KS0QM-SESN-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(27); /* Field missing or invalid*/
      KS0QW01.KS0QWPSW = "Y";
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the poid entered*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0QM001.KS0QM-PRDCTN-YR > " ")
    if (KS0QM001.KS0QM-PRDCTN-MO > " ")
      if (KS0QM001.KS0QM-PRDCTN-MO > "00"
       && KS0QM001.KS0QM-PRDCTN-MO <= "12")
        /* NEXT SENTENCE*/
      else
        KS0QM001.KS0QPRCNM = "KS0Q520"; /* Process name*/
        set KS0QM001.KS0QM-PRDCTN-MO cursor, bold; /* Highlight*/
        converseLib.validationFailed(114); /* Field missing or invalid*/
        KS0QW01.KS0QWPSW = "Y";
      end
      if (KS0QM001.KS0QM-DLVR-MO > " ")
        if (KS0QM001.KS0QM-DLVR-MO > "00"
         && KS0QM001.KS0QM-DLVR-MO <= "12")
          /* NEXT SENTENCE*/
        else
          KS0QM001.KS0QPRCNM = "KS0Q520"; /* Process name*/
          set KS0QM001.KS0QM-DLVR-MO cursor, bold; /* Highlight*/
          converseLib.validationFailed(114); /* Field missing or invalid*/
          KS0QW01.KS0QWPSW = "Y";
        end
      else
        KS0QM001.KS0QPRCNM = "KS0Q520"; /* Process name*/
        set KS0QM001.KS0QM-DLVR-MO cursor, bold; /* Highlight*/
        converseLib.validationFailed(114); /* Field missing or invalid*/
        KS0QW01.KS0QWPSW = "Y";
      end
    else
      KS0QM001.KS0QPRCNM = "KS0Q520"; /* Process name*/
      set KS0QM001.KS0QM-PRDCTN-MO cursor, bold; /* Highlight*/
      converseLib.validationFailed(114); /* Field missing or invalid*/
      KS0QW01.KS0QWPSW = "Y";
    end
  end
  ;
  ;
  /* ------------------------------------------------------------*/
  /* Verify the seq entered*/
  /* ------------------------------------------------------------*/
  if (KS0QM001.KS0QM-BUS-UNIT-CD == "02"
  )
    KS0QW01.KS0QWIXM = 1;
    while (KS0QM001.KS0QM-DTL-SESN[KS0QWIXM] > " ") /* While detail exists*/
      ;
      if (KS0QM001.KS0QM-DTL-STY-TYP[KS0QWIXM] != " "
       && KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] == "1")
        set KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] cursor, bold;
        converseLib.validationFailed(168); /* Field missing or invalid*/
        KS0QW01.KS0QWPSW = "Y";
      end
      ;
      KS0QW01.KS0QWIXM = KS0QW01.KS0QWIXM + 1;
      ;
    end
  end
  ;
end // end KS0Q520

// Process valid request
Function KS0Q600()
   /* ------------------------------------------------------------*/
  ;
              /* PROCESS VALID INPUT REQUESTS*/
  ;
     /* 3) If a scroll request, adjust temporary storage page*/
        /* number.*/
     /* 4) Transfer to requested map or application according*/
        /* to PFkey pressed.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  if (KS0QW01.KS0QWMAP == "C" /* If change map*/
   && KS0QW01.FRSTTIME == "N")
    KS0QW01.KS0QWIXM = 1; /* initialize index*/
    KS0QW01.MAINPRIC = 0;
    ;
    while (KS0QM001.KS0QM-DTL-SESN[KS0QWIXM] > " ") /* While detail exists*/
      ;
      if (KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] == "1")
        KS0QW01.POFOB = KS0QW02.KS-FOB-MAX-PRC[KS0QWIXM];
        KS0QW01.PRIM-STY-TYP = KS0QM001.KS0QM-DTL-STY-TYP[KS0QWIXM];
      end
      ;
      if (KS0QM001.KS0QM-DTL-FOB[KS0QWIXM] != 
      KS0QW02.KS-FOB-PRC[KS0QWIXM]
       || KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] != 
      KS0QW02.HS-ORD-NO[KS0QWIXM])
        ;
        KS0QW01.PRIMEUPD = "N";
        if (KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] == "1")
          KS0QW01.PRIMEUPD = "Y";
        end
        ;
        KS0Q610(); /* Update pohts table*/
        ;
        if (KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] != "1")
          KS0QW01.PRIMEUPD = "Y";
          KS0Q650(); /* Update the price of primary component*/
        end
        ;
      end
      ;
      KS0QW01.KS0QWIXM = KS0QW01.KS0QWIXM + 1;
      ;
    end
  end
  ;
  ;
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
           /* Check for pfkey operations*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    KS0QW01.KS0QWTSP = KS0QW01.KS0QWTSP - 1; /* Decrement page number*/
    KS0QW01.KS0QWSWR = "N"; /* Request for data*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      KS0QW01.KS0QWTSP = KS0QW01.KS0QWTSP + 1; /* Increment page number*/
      KS0QW01.KS0QWSWR = "N"; /* Request for data*/
    else
      if (converseVar.eventKey is enter)
        KS0QW01.KS0QWSWR = "Y"; /* Request for data*/
      end
    end
  end
  ;
end // end KS0Q600

// Update process
Function KS0Q610()
  ;
  set VPOHTS01 empty;
  ;
  VPOHTS01.KS-BUS-UNIT-CD = KS0QM001.KS0QM-BUS-UNIT-CD;
  ;
  KS0QW01.SEASON-CD = KS0QW02.SESN-CODE[KS0QWIXM];
  VPOHTS01.XSE-SESN-CD = KS0QW01.SESN-CD;
  ;
  KS0QW01.SESN-YY = KS0QW01.SESN-YR;
  ;
  if (KS0QW01.SESN-YY > "65")
    KS0QW01.SESN-CC = "19";
  else
    KS0QW01.SESN-CC = "20";
  end
  ;
  VPOHTS01.XSN-SESN-YR-RNG = KS0QW01.SESN-RNG;
  ;
  VPOHTS01.SY-STY-NBR = KS0QW02.SY-STY-NBR[KS0QWIXM];
  VPOHTS01.SY-COLR-CD-ID = KS0QW02.SY-COLR-CD-ID[KS0QWIXM];
  VPOHTS01.XDM-DIM-CD = "00";
  ;
  KS0QW01.POID-DISP = KS0QW02.PC-PO-ID[KS0QWIXM];
  KS0QW01.PC-PO-ID-WORK = KS0QW01.POID-WK;
  KS0QW01.PC-PO-WK-ID = KS0QW01.PC-PO-ID-WORK;
  if (KS0QW01.PC-PO-WK-YR > "65")
    KS0QW01.PC-PO-ID-CC = "19";
  else
    KS0QW01.PC-PO-ID-CC = "20";
  end
  VPOHTS01.PC-PO-ID-MO-RNG = KS0QW01.PO-ID-MO-RNG;
  ;
  VPOHTS01.FY-FCTY-CD = KS0QW01.FCTY-CD;
  VPOHTS01.YKS-STY-TYP-CD = KS0QW02.STY-TYP-CD[KS0QWIXM];
  ;
  KS0Q120(); /* Select*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
    ;
    KS0QW01.KS0QWSW1 = "N"; /* Set end of selected set switch*/
    while (KS0QW01.KS0QWSW1 == "N") /* While data exists to fetch*/
      KS0Q130(); /* Fetch and process information*/
      if (KS0QW01.KS0QWSW1 == "N")
        KS0Q620(); /* Update*/
        ;
        KS0Q640(); /* Update change date in dcustm.vcprod02*/
        ;
      end
    end
    ;
    KS0Q150(); /* Close the POHTS selected set*/
    ;
  end
  ;
end // end KS0Q610

// Update dcustm.vpohts01
Function KS0Q620()
  ;
  if (KS0QW01.PRIMEUPD == "Y") /* Changed by user?*/
    if (KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] == "1")
      VPOHTS01.KS-MIN-FOB-PRC = KS0QM001.KS0QM-DTL-FOB[KS0QWIXM];
    else
      VPOHTS01.KS-MIN-FOB-PRC = KS0QW01.MAINPRIC;
    end
  else
    VPOHTS01.KS-MIN-FOB-PRC = KS0QM001.KS0QM-DTL-FOB[KS0QWIXM];
  end
  ;
  if (KS0QW01.PRIMEUPD == "Y")
    VPOHTS01.KS-HTS-RNG-FL = "1";
  else
    VPOHTS01.KS-HTS-RNG-FL = KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM];
  end
  ;
  ;
   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/
  ;
  XX0XS01();
  ;
  VPOHTS01.XXX-USER-ID = COMMAREA.CAUSERID;
  VPOHTS01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VPOHTS01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/
  ;
  call "KS3000" ("U1", SQLCA, VPOHTS01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* Next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "KS0Q620"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "KS0QM001"; /* Map name*/
    TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    KS0QM001.KS0QPRCNM = "KS0Q620"; /* Process name*/
  end
  ;
end // end KS0Q620

// Update the change date vcprod0
Function KS0Q640()
  ;
  if (VPOHTS01.XSE-SESN-CD != KS0QW01.PREVSESN
   || VPOHTS01.XSN-SESN-YR-RNG != KS0QW01.PREVSEYR
   || VPOHTS01.SY-STY-NBR != KS0QW01.PREVSTYLE
   || VPOHTS01.SY-COLR-CD-ID != KS0QW01.PREVCOLR
  )
    KS0Q641(); /* Select VCPROD02*/
    KS0Q642(); /* Fetch  VCPROD02 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* If line exists*/
      KS0Q643(); /* Update VCPROD02*/
      KS0QW01.PREVSESN = VPOHTS01.XSE-SESN-CD;
      KS0QW01.PREVSEYR = VPOHTS01.XSN-SESN-YR-RNG;
      KS0QW01.PREVSTYLE = VPOHTS01.SY-STY-NBR;
      KS0QW01.PREVCOLR = VPOHTS01.SY-COLR-CD-ID;
    end
    ;
    KS0Q644(); /* close  VCPROD02 row*/
    ;
  end
  ;
  ;
  ;
end // end KS0Q640

// Select VCPROD02 set
Function KS0Q641()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  ;
  VCPROD02.XGPCD = VPOHTS01.XGP-GPC-CD; /* GPC*/
  VCPROD02.KS-BUS-UNIT-CD = VPOHTS01.KS-BUS-UNIT-CD; /* BUC*/
  VCPROD02.SY1STNBR = VPOHTS01.SY-STY-NBR; /* Style*/
  VCPROD02.SY2CLRID = VPOHTS01.SY-COLR-CD-ID;
  ;
  VCPROD02.XSNYR = VPOHTS01.XSN-SESN-YR-RNG; /* Season year*/
  VCPROD02.XSECD = VPOHTS01.XSE-SESN-CD; /* Season code*/
  VCPROD02.XDMCD = VPOHTS01.XDM-DIM-CD;
  ;
  VCPROD02.KS-XPRMT-STY-NBR = "*";
  VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
  VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
  VCPROD02.KS-HTS-HDG-CD = "*";
  VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
  VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
  VCPROD02.KS-HTS-STAT-CD = "*";
  VCPROD02.KS-PRBM-NBR = -1;
  ;
  try
    call "VCPROD02" ("S1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* SlC tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "0Q461"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0Q641

// Fetch  VCPROD02 row
Function KS0Q642()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("N1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "0Q642"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0Q642

// Update VCPROD02 CHANGE DATE
Function KS0Q643()
  /* ------------------------------------------------------------*/
  /* Update a row to the DCUSTM.VCPROD02 table.*/
  /* ------------------------------------------------------------*/
  ;
  VCPROD02.XXXUSRID = COMMAREA.CAUSERID;
  VCPROD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
  VCPROD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
  ;
  try
    call "VCPROD02" ("U ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "0Q643"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0Q643

// Close  VCPROD02 set
Function KS0Q644()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("C1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "0Q644"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0Q644

// Update primary shoe price
Function KS0Q650()
  set VPOHTS01 empty;
  set KS0QW03 empty;
  ;
  VPOHTS01.KS-BUS-UNIT-CD = KS0QM001.KS0QM-BUS-UNIT-CD;
  ;
  KS0QW01.SEASON-CD = KS0QW02.SESN-CODE[KS0QWIXM];
  VPOHTS01.XSE-SESN-CD = KS0QW01.SESN-CD;
  ;
  KS0QW01.SESN-YY = KS0QW01.SESN-YR;
  ;
  if (KS0QW01.SESN-YY > "65")
    KS0QW01.SESN-CC = "19";
  else
    KS0QW01.SESN-CC = "20";
  end
  ;
  VPOHTS01.XSN-SESN-YR-RNG = KS0QW01.SESN-RNG;
  ;
  VPOHTS01.SY-STY-NBR = KS0QW02.SY-STY-NBR[KS0QWIXM];
  VPOHTS01.SY-COLR-CD-ID = KS0QW02.SY-COLR-CD-ID[KS0QWIXM];
  VPOHTS01.XDM-DIM-CD = "00";
  ;
  KS0QW01.POID-DISP = KS0QW02.PC-PO-ID[KS0QWIXM];
  KS0QW01.PC-PO-ID-WORK = KS0QW01.POID-WK;
  KS0QW01.PC-PO-WK-ID = KS0QW01.PC-PO-ID-WORK;
  if (KS0QW01.PC-PO-WK-YR > "65")
    KS0QW01.PC-PO-ID-CC = "19";
  else
    KS0QW01.PC-PO-ID-CC = "20";
  end
  VPOHTS01.PC-PO-ID-MO-RNG = KS0QW01.PO-ID-MO-RNG;
  ;
  VPOHTS01.FY-FCTY-CD = KS0QW01.FCTY-CD;
  ;
  VPOHTS01.YKS-STY-TYP-CD = KS0QW01.PRIM-STY-TYP;
  KS0Q651();
  ;
  KS0Q652();
  ;
  KS0Q653();
  ;
  if (KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] == " "
   && KS0QM001.KS0QM-DTL-FOB[KS0QWIXM] > 0)
    converseLib.validationFailed(166);
    set KS0QM001.KS0QM-DTL-HTS-SEQ[KS0QWIXM] cursor, bold;
  end
  ;
  KS0QW01.MAINPRIC = KS0QW01.POFOB - KS0QW03.TOTCMPPRC;
  ;
  if (KS0QW01.MAINPRIC <= 0)
    converseLib.validationFailed(165);
   /* MOVE 0 TO KS0QW01.MAINPRIC;*/
    KS0QW01.MAINPRIC = KS0QW01.POFOB;
  else
    if (KS0QM001.KS0QM-BUS-UNIT-CD == "02")
      if (KS0QW01.POFOB > 12
       && KS0QW01.MAINPRIC <= 12)
        converseLib.validationFailed(164); /* indicate confirm message*/
      end
    end
  end
  ;
  KS0Q120(); /* Select*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
    ;
    KS0QW01.KS0QWSW1 = "N"; /* Set end of selected set switch*/
    while (KS0QW01.KS0QWSW1 == "N") /* While data exists to fetch*/
      KS0Q130(); /* Fetch and process information*/
      if (KS0QW01.KS0QWSW1 == "N")
        KS0Q620(); /* Update*/
        ;
        KS0Q640(); /* Update change date in dcustm.vcprod02*/
        ;
      end
    end
    ;
    KS0Q150(); /* Close the POHTS selected set*/
    ;
  end
  ;
end // end KS0Q650

// Select from dcustm.vpohts01
Function KS0Q651()
  ;
  try
    call "KS3000" ("S2", SQLCA, VPOHTS01) {isNoRefresh = yes, isExternal = yes};
  end /* Sele*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KS0QM001.KS0QPRCNM = "KS0Q651"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KS0QM001.KS0QPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0Q651

// fetch
Function KS0Q652()
  ;
  try
    call "KS3000" ("N2", SQLCA, VPOHTS01, KS0QW03) {isNoRefresh = yes, isExternal = yes};
  end /* FETCH*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      KS0QW01.KS0QWPSW = "Y"; /* Indicate problem*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "KS0Q562"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "KS0QM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      KS0QM001.KS0QPRCNM = "KS0Q562"; /* Process name*/
      ;
    end
  end
  ;
end // end KS0Q652

// close
Function KS0Q653()
  ;
  try
    call "KS3000" ("C2", SQLCA, VPOHTS01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KS0QM001.KS0QPRCNM = "KS0Q653"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KS0QM001.KS0QPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHTS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0Q653

Function KS0QS01()
  ;
   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/
  ;
   /* This subroutine accesses the Production Style/Color and the*/
   /* Product Scale Tables and returns the Size Identification,*/
   /* Size Description and Division Code for all valid sizes of a*/
   /* GPC/Style/Color/Dimension.*/
  ;
   /* *** Code the following before this is executed:         ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3FUNCD: PC = all valid sizes             ****/
   /* ***                    IE = int. sz id to desc.         ****/
   /* ***                    EI = desc. to int. sz id         ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3DATFM: C = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3XDVCD: Highest division code to return. ****/
   /* ***                    Valid codes are '01','02','03'.  ****/
   /* ***                    Blank defaults to all divisions. ****/
   /* ***                                                     ****/
   /* ***   TA1REC.TA1PGMNM: The name of the calling process, ****/
   /* ***                    for Error Diagnosis Reporting.   ****/
  ;
   /* This subroutine will return the CSP return code in EZERT8,*/
   /* the Size Translation Subroutine return code in PG3RETCD*/
   /* and, if a normal return, the size information in PG3SIZES.*/
  ;
   /* *** Both return codes must indicate normal return.      ****/
   /* ***                                                     ****/
   /* ***   EZERT8                                            ****/
   /* ***   ------                                            ****/
   /* ***   '00000000' = Normal return                        ****/
   /* ***   OTHER      = Unexpected error has occurred        ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3RETCD                                   ****/
   /* ***   ---------------                                   ****/
   /* ***   '00'  = Normal return                             ****/
   /* ***   '09'  = Data in use by another application        ****/
   /* ***   OTHER = Unexpected error has occurred             ****/
  ;
   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting to TA0020.  The calling process must check the*/
   /* return codes and take the appropriate action relating to*/
   /* its terminal output.  The calling process does not need to*/
   /* do any Error Diagnosis Reporting.*/
  ;
   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain size descriptions from Size Translation Subroutine.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Size translation*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "00")       /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)
    ;
   /* MOVE 114 TO EZEMNO;*/
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and resource not available*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
    TA1REC.TA1LOC = "XSPG301 DESCRIPTION TRANSLATION";
    TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && PG3REC.PG3RETCD == "99")       /* and negative SQL error*/
      ;
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
      TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/
      TA1REC.TA1LOC = "XSPG301 DESCRIPTION TRANSLATION";
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
    else
      ;
      TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
      TAEREC.TAEDESC2 = PG3REC.PG3GROUP; /* Subroutine parameters*/
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "XSPG301 DESCRIPTION TRANSLATION";
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
    ;
  end
  ;
end // end KS0QS01

//*** RECORD=KS0QW01 ****
// Working storage for KS0Q
// ***********************
Record KS0QW01 type basicRecord
  10 KS0QWSWR KS0QWSWR ; 
  10 KS0QWPSW KS0QWPSW ; 
  10 KS0QW-DATE-WORK KS0QW-DATE-WORK ; 
    15 KS0QW-FILLER KS0QW-FILLER ; 
    15 KS0QW-CENTURY KS0QW-CENTURY ; 
    15 KS0QW-YEAR KS0QW-YEAR ; 
    15 KS0QW-MONTH KS0QW-MONTH ; 
    15 KS0QW-DAY KS0QW-DAY ; 
  10 SESN-WORK SESN-WORK ; 
    15 CEN-WORK CEN-WORK ; 
    15 SESN-YR-WORK SESN-YR-WORK ; 
  10 KS0QW-SESN-YR KS0QW-SESN-YR ; 
    15 KS0QW-SESN-CENT KS0QW-SESN-CENT ; 
    15 KS0QW-SESN-YY KS0QW-SESN-YY ; 
  10 KS0QW-SESN-YR-NUM KS0QW-SESN-YR-NUM ; 
  10 KS0QW-PO-NBR-NUM KS0QW-PO-NBR-NUM ; 
  10 KS0QW-POIDT KS0QW-POIDT ; 
    15 KS0QW-PRDCTN-CEN KS0QW-PRDCTN-CEN ; 
    15 KS0QW-PRDCTN-YR KS0QW-PRDCTN-YR ; 
    15 KS0QW-PRDCTN-MO KS0QW-PRDCTN-MO ; 
    15 KS0QW-DLVR-MO KS0QW-DLVR-MO ; 
  10 KS0QW-POIDT-NUM KS0QW-POIDT-NUM ; 
  10 KS0QWSW1 KS0QWSW1 ; 
  10 KS0QWIXM KS0QWIXM ; 
  10 KS0QWIDX KS0QWIDX ; 
  10 KS0QWTSP KS0QWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SEASON-CD SEASON-CD ; 
    15 SESN-CD SESN-CD ; 
    15 SESN-YR SESN-YR ; 
  10 SESN-RNG SESN-RNG ; 
    15 SESN-CC SESN-CC ; 
    15 SESN-YY SESN-YY ; 
  10 POID-DISP POID-DISP ; 
    15 POID-WK POID-WK ; 
    15 FCTY-CD FCTY-CD ; 
  10 PO-ID-MO-RNG PO-ID-MO-RNG ; 
    15 PC-PO-ID-CC PC-PO-ID-CC ; 
    15 PC-PO-ID-WORK PC-PO-ID-WORK ; 
  10 PC-PO-WK-ID PC-PO-WK-ID ; 
    15 PC-PO-WK-YR PC-PO-WK-YR ; 
    15 PC-PO-WK-PMO PC-PO-WK-PMO ; 
    15 PC-PO-WK-DMO PC-PO-WK-DMO ; 
  10 KS-FOB-PRICE KS-FOB-PRICE ; 
  10 KS-FOB-MAX-PRICE KS-FOB-MAX-PRICE ; 
  10 POFOB POFOB ; 
  10 MAINPRIC MAINPRIC ; 
  10 KS0QSZID KS0QSZID ; 
  10 HS-NUMBER HS-NUMBER ; 
    15 HS-CPTR-CD HS-CPTR-CD ; 
    15 HS-HDG-CD HS-HDG-CD ; 
    15 HS-BYTE1 HS-BYTE1 ; 
    15 HS-1ST-SHDG-CD HS-1ST-SHDG-CD ; 
    15 HS-BYTE2 HS-BYTE2 ; 
    15 HS-2ND-SHDGCD HS-2ND-SHDGCD ; 
    15 HS-STAT-CD HS-STAT-CD ; 
  10 HD-BUS-UNIT-CD HD-BUS-UNIT-CD ; 
  10 HD-PRDCTN-YR HD-PRDCTN-YR ; 
  10 HD-PRDCTN-MO HD-PRDCTN-MO ; 
  10 HD-DLVR-MO HD-DLVR-MO ; 
  10 HD-FCTY-CD HD-FCTY-CD ; 
  10 HD-STY-NBR HD-STY-NBR ; 
  10 HD-COLR-CD-ID HD-COLR-CD-ID ; 
  10 HD-DIM-CD HD-DIM-CD ; 
  10 HD-SESN-CD HD-SESN-CD ; 
  10 HD-SESN-YR HD-SESN-YR ; 
  10 SYSTYNBR SYSTYNBR ; 
  10 SYCOLRCDID SYCOLRCDID ; 
  10 DIMCD DIMCD ; 
  10 KS0QW-MAX-PAGES KS0QW-MAX-PAGES ; 
  10 STY-TYP-CD STY-TYP-CD ; 
  10 MIN-SZ-ID MIN-SZ-ID ; 
  10 MAX-SZ-ID MAX-SZ-ID ; 
  10 HTS-ORD-NO HTS-ORD-NO ; 
  10 KS0QWMAP KS0QWMAP ; 
  10 FRSTTIME FRSTTIME ; 
  10 PRIMEUPD PRIMEUPD ; 
  10 PREVSESN PREVSESN ; 
  10 PREVSEYR PREVSEYR ; 
  10 PREVSTYLE PREVSTYLE ; 
  10 PREVCOLR PREVCOLR ; 
  10 PRIM-STY-TYP PRIM-STY-TYP ; 
end // end KS0QW01

//*** RECORD=KS0QW02 ****
// Temporary storage record for KS0Q
// ***********************
Record KS0QW02 type basicRecord
  10 KS0QWLEN KS0QWLEN ; 
  10 KS0QWLIN KS0QWLIN [14] ; 
    15 SESN-CODE SESN-CODE ; 
    15 PC-PO-ID PC-PO-ID ; 
    15 SY-STY-NBR SY-STY-NBR ; 
    15 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    15 STY-TYP-CD STY-TYP-CD ; 
    15 KS-FOB-PRC KS-FOB-PRC ; 
    15 FR-SZ-DESC FR-SZ-DESC ; 
    15 TO-SZ-DESC TO-SZ-DESC ; 
    15 HS-NUMBER HS-NUMBER ; 
    15 HS-ORD-NO HS-ORD-NO ; 
    15 KS-FOB-MAX-PRC KS-FOB-MAX-PRC ; 
end // end KS0QW02

Record KS0QW03 type basicRecord
  10 TOTCMPPRC TOTCMPPRC ; 
end // end KS0QW03

DataItem DIMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FRSTTIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem HS-ORD-NO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem HTS-ORD-NO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_DEST_LOC_CD
DataItem KS-FOB-MAX-PRC decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_DEST_LOC_CD
DataItem KS-FOB-MAX-PRICE decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QSZID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-CENTURY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-DATE-WORK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-DAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-DLVR-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0QW-FILLER num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-MAX-PAGES num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-PO-NBR-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-POIDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0QW-POIDT-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-PRDCTN-CEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0QW-PRDCTN-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0QW-PRDCTN-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0QW-SESN-CENT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0QW-SESN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0QW-SESN-YR-NUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0QW-SESN-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0QW-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem KS0QWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0QWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem KS0QWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem KS0QWLIN char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0QWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem KS0QWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch1
DataItem KS0QWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0QWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem KS0QWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem MAINPRIC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem MAX-SZ-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem MIN-SZ-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC-PO-WK-DMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-PO-WK-ID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-PO-WK-PMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-PO-WK-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem POFOB decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PREVCOLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PREVSESN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PREVSEYR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PREVSTYLE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PRIM-STY-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PRIMEUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem STY-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TOTCMPPRC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

