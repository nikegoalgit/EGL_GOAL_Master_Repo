package ks0l;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPKS-00001;
import corpcom3.XPXCT01;
import corpcom3.XPXDR01;
import corpcom3.XPXDV02;
import corpcom3.XPXGP01;
import corpcom3.XPXSE01;
import corpcom3.XPXX001;
import corpcom3.XPYKP01;
import corpcom3.XPYKS01;
import corpcom3.XPYPR01;
import corpcom3.XPYQT01;
import corpcom4.XSKS-S0001;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTTBL;
import corpx1.XDMTBL;
import corpx1.XDRTBL;
import corpx1.XDVTBL;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XMCTBL;
import corpx1.XMLTBL;
import corpx1.XPCTBL;
import corpx1.XSETBL;
import corpx1.XSPTBL;
import corpx1.XSUTBL;
import corpy2.YKPTBL;
import corpy2.YKSTBL;
import corpy2.YPRTBL;
import corpy2.YQTTBL;
import fy.common.FY3REC;
import ks.common.*;
import pc.common.PC6REC;
import pc.common.PCYREC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import sy.common.SY1STYNM;
import sy.common.SYNREC;
import sy.common.SYRTBL;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VBDRUL01;
import vv.common.VCPROB01;
import vv.common.VCPROD01;
import vv.common.VCPROD02;
import vv.common.VCTEAM01;
import vv.common.VHSCHP01;
import vv.common.VHSHDG01;
import vv.common.VHSNBR01;
import vv.common.VHSSHD01;
import vv.common.VKSAUD01;
import vv.common.VKSCTL01;
import vv.common.VKSORD01;
import vv.common.VKSTXT01;
//*** PROGRAM=KS0L ****
// This program will display a list of products for a given
// criteria.  The selection criteria is the same as KS0I, but
// there are also some other options available for list
// selections.  These are the ability to list all styles for a
// given HS number, Ruling number, or Feature code.  These
// options are available here to provide a Global view of
// distinct products in regards to a given key field without
// the requirement of entering Season or PO ID.
// 
// The list of products, which is produced by this seleciton
// does differ significantly from KS0I.  Less information per
// product is displayed and only distinct style/color/dimension
// combinations will be displayed (apparel will still see the
// *** in the color fields for their color rollup requirements)
// More products per page can be shown here, therefore reducing
// the number or formatted pages to display.
// 
// Once a list has been brought up, a user who has update
// authority can make product selecitons from the list to
// include in an update group for map 2.  The selections can
// be made from multiple pages on map 1 and, when PF14 is
// pressed, the products will be carried forward to map 2.
// (** Selections are not required when pressing PF14 to access
// Global Changes entry screen.)
// 
// Once a user has pressed PF14 to enter Global Change, a list
// of styles may be entered to have changes applied to.  The
// user can change HS number, Status, Ruling number, or Feature
// codes for a group of given styles.  (This change will be
// applied to all product master rows which exist for a given
// set of product keys.)  The keys which are available to be
// used for update of product rows are; gpc/sesn/yr/style/
// color/dim.  (** Multiple pages of product may be entered
// for the applied changes.)
// 
// This application may be entered via fastpath or option 6
// from customs main menu.  (When entering either of these
// ways, user security will be checked to determine update
// authority.)
// 
// Entry from KS0C is also available so a user can view a list
// of distinct styles for a given Ruling number.  GPC and
// Ruling number will need to be passed to KS0L in this case
// in order to bring up a list.  This will be inquiry only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      08/12/92  DHUFFM  New application.
// C066     12/07/92  DHUFFM  Change HS Number format - remove
//                            suffix id.
// C039     12/09/92  SMARIE  Add XDVCD to selection criteria.
// 000      12/30/92  SMARIE  Fix QOTA selection check.
// C068     01/07/93  SMARIE  Add Style Type selection criteria
// C074     02/10/93  DHUFFM  Chg style field to 6 chars.
// C078     02/11/93  DHUFFM  Chg to display a warning when an
//                            inactive HS number is entered.
// C077     02/18/93  DHUFFM  Chg H.S. Nbr display/update
// C000     03/24/93  DHUFFM  Add KS-HTS-RNG-FL to VKSAUD01.
// ks9999   09/22/93  kkyle   Mods for 4.1 conversion
// 000      07/14/94  DHUFFM  Fix default status to be like
//                            KS0I.
// 000      07/18/94  DHUFFM  Fix century assignment.
// 000      02/28/95  slewis  Add CVS warning message.
// k0097    05/26/95  DHUFFM  Add Market Region to application.
//          07/06/97  RCORLE  Equipment mods
//          08/05/97  RTANGI  Message table changes for 'BU'
//          08/12/97  RTANGI  Equipment mods
//          08/27/97  RTANGI  New messages for 'BU'
//          09/05/97  RTANGI  Factory code changes
// Y2KFIX   11/11/97  WSQUIR  Y2K MODIFICATIONS MADE TO
//                            XPKS-00001, KS0L-15200,
//                            KS0L-22100, KS0L-25000,
//                            KS0L-25100, KS0L-25201
// *********************
Program KS0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY3REC FY3REC; // record
  KS0LW00 KS0LW00; // record
  KS0LW01 KS0LW01; // record
  KS0LW02 KS0LW02; // record
  KS0LW05 KS0LW05; // record
  KSAREC KSAREC; // record
  KSWREC KSWREC; // record
  PC6REC PC6REC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  SYNREC SYNREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VBDRUL01 VBDRUL01; // record
  VCPROB01 VCPROB01; // record
  VCPROD01 VCPROD01; // record
  VCPROD02 VCPROD02; // record
  VCTEAM01 VCTEAM01; // record
  VHSCHP01 VHSCHP01; // record
  VHSHDG01 VHSHDG01; // record
  VHSNBR01 VHSNBR01; // record
  VHSSHD01 VHSSHD01; // record
  VKSAUD01 VKSAUD01; // record
  VKSCTL01 VKSCTL01; // record
  VKSORD01 VKSORD01; // record
  VKSTXT01 VKSTXT01; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SYRTBL {deleteAfterUse = yes}; // table
  use XDRTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XMLTBL {deleteAfterUse = yes}; // table
  use XMCTBL {deleteAfterUse = yes}; // table
  use YKPTBL {deleteAfterUse = yes}; // table
  use YKSTBL {deleteAfterUse = yes}; // table
  use YPRTBL {deleteAfterUse = yes}; // table
  use YQTTBL {deleteAfterUse = yes}; // table
  use KS0LM.KS0LM001,  // forms
      KS0LM.KS0LM002, 
      KS0LM.KS0LM003,
      KS0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0LM001 initial; /* M001 input/output*/
    set KS0LM002 initial; /* M002 input/output*/
    set KS0LW00 empty; /* Working storage*/
    set KS0LW01 empty; /* M001 display storage*/
    set KS0LW02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set VCPROD01 empty; /* Product Master record*/
    set VCPROD02 empty; /* Product Master record*/
    set VCPROB01 empty; /* Problem record*/
    set VHSCHP01 empty; /* HS chapter record*/
    set VHSHDG01 empty; /* HS heading record*/
    set VHSSHD01 empty; /* HS subheading record*/
    set VHSNBR01 empty; /* HS number record*/
    set VCTEAM01 empty; /* Team record*/
    set VKSTXT01 empty; /* Text record*/
    set VKSCTL01 empty; /* Control table record*/
    set VKSAUD01 empty; /* Audit table record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    KS0LW00.KS0LW-SWD = "1"; /* Map to be displayed switch*/
    KS0LW00.KS0LW-SWF = "Y"; /* Format the map switch*/
    KS0LW00.KS0LW-PRESEL = "N"; /* Format preselect switch*/
    ;
    if (COMMAREA.CAFROMAP == "KS0C") /* If transfer from KS0C*/
      if (KSWREC.KS-RULE-NBR > " ") /* and rule number exists*/
        KS0LW01.KS0LW-GPC = KSWREC.XGPCD; /* GPC code*/
        KS0LM001.KS0LM-GPC-CD = KSWREC.XGPCD; /* GPC code*/
        KS0LM001.KS0LM-RULE-NBR = KSWREC.KS-RULE-NBR; /* Rule nbr*/
        KS0LW00.KS0LW-RULE-NBR = KSWREC.KS-RULE-NBR; /* Rule nbr*/
        KS0LW00.KS0LW-FNC = "I"; /* Function switch*/
        KS0LW00.KS0LW-KS0C-SWITCH = "Y";
        KS0LW00.KS0LW-SWR = "Y"; /* Request for data switch*/
      else
        if (KSWREC.XGPCD > " ") /* If GPC exists*/
          KS0LW01.KS0LW-GPC = KSWREC.XGPCD; /* GPC code*/
          KS0LW01.KS0LW-SESN-CD = KSWREC.XSECD; /* SESN code*/
    /*  */
    /* ************************ Y2K OUT BEGIN *********************************/
    /*  */
    /* IF KSWREC.XSNYR GT 0;*/
    /*  */
    /* ************************ Y2K OUT END ***********************************/
    /*  */
          KS0LW01.KS0LW-SESN-YR-NUM = KSWREC.XSNYR; /* SESN YR code*/
          KS0LW01.KS0LW-SESN-YR = KS0LW01.KS0LW-SESN-YR-NUM;
    /*  */
    /* ************************ Y2K OUT BEGIN *********************************/
    /*  */
    /* END;*/
    /*  */
    /* ************************ Y2K OUT END ***********************************/
    /*  */
          KS0LW00.KS0LW-FNC = " "; /* Function switch*/
          KS0LW00.KS0LW-KS0C-SWITCH = "Y";
          KS0LW00.KS0LW-SWR = "N"; /* Request for data switch*/
        end
      end
      if (KS0LW01.KS0LW-GPC in XGPTBL.XGPCD /* Code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        ;
        KS0LW01.KS0LW-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Move desc*/
        KS0LM001.KS0LM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Move desc*/
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0L-00000; /* Converse the main process*/
    ;
    ;
    KS0L-00000: KS0L-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0L-00000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end KS0L

// Main process to display a map
Function KS0L-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) If specified, display the first map.*/
  /* 2) Otherwise, if specified, display the second map.*/
  /* 3) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-SWD == "1") /* Map 1 was requested*/
    ;
    KS0L-10000(); /* Display map 1*/
    ;
  else
    ;
    if (KS0LW00.KS0LW-SWD == "2") /* Map 2 was requested*/
      ;
      KS0L-20000(); /* Display map 2*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
      /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "00000"; /* Module identification*/
      KSWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = KS0LW00.KS0LW-SWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
      /* ------------------------------------------------------------*/
      /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
      ;
      COMMAREA.CATOAP = "KS0A"; /* TO application*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
      /* ------------------------------------------------------------*/
      /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
    ;
  end
  ;
  ;
end // end KS0L-00000

// Main process Map1 Product List
Function KS0L-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0L-11000(); /* Obtain the data to display*/
  ;
  KS0L-12000(); /* Format and display the map*/
  ;
  KS0L-13000(); /* Check attention identifier*/
  ;
  KS0L-14000(); /* Reset fields to normal intensity*/
  ;
  KS0L-15000(); /* Verify the entered data*/
  ;
  KS0L-16000(); /* Process valid input request*/
  ;
  ;
end // end KS0L-10000

// Obtain the data
Function KS0L-11000()
  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.XXXTSLEN = 2324; /* Temporary storage page length*/
  ;
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO == 0) /* No message to display*/
    KS0LW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage and save key fields.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-SAVE-INDEX = KS0LW01.KS0LW-SAVE-INDEX;
  KS0LW00.KS0LW-SAVE-PG-NBR = KS0LW01.KS0LW-SAVE-PG-NBR;
  KS0LW00.KS0LW-SAVE-STY-CS = KS0LW01.KS0LW-SAVE-STY-CS;
  KS0L-11100(); /* Purge any temporary storage*/
  ;
  KS0LW01.KS0LW-SAVE-INDEX = KS0LW00.KS0LW-SAVE-INDEX;
  KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW00.KS0LW-SAVE-PG-NBR;
  KS0LW01.KS0LW-SAVE-STY-CS = KS0LW00.KS0LW-SAVE-STY-CS;
  KS0LW01.KS0LW-GPC = KS0LM001.KS0LM-GPC-CD; /* GPC code*/
  KS0LW01.KS0LW-GPC-DESC = KS0LM001.KS0LM-GPC-DESC;
  KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR; /* HS number*/
  KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR; /* Style number*/
  KS0LW01.KS0LW-COLR-CD-ID = KS0LM001.KS0LM-COLR-CD-ID; /* Color cd*/
  KS0LW01.KS0LW-DIM-CD = KS0LM001.KS0LM-DIM-CD; /* Dimension code*/
  KS0LW01.KS0LW-RULE-NBR-MAP = KS0LM001.KS0LM-RULE-NBR; /* Ruling nbr*/
  KS0LW01.KS0LW-RULE-NBR = KS0LW00.KS0LW-RULE-NBR; /* Ruling nbr*/
  KS0LW01.KS0LW-DIV-CD = KS0LM001.KS0LM-DIV-CD; /* Division code*/
  KS0LW01.KS0LW-SESN-CD = KS0LM001.KS0LM-SESN-CD; /* Season code*/
  KS0LW01.KS0LW-SESN-YY = KS0LM001.KS0LM-SESN-YR-RNG; /* Season yr*/
  KS0LW01.KS0LW-QOTA-CAT-CD = KS0LM001.KS0LM-QOTA-CAT-CD; /* Quota*/
  KS0LW01.KS0LW-TEAM-CD = KS0LM001.KS0LM-TEAM-CD; /* Team code*/
  KS0LW01.KS0LW-PRDCTN-YR = KS0LM001.KS0LM-PRDCTN-YR; /* PO ID year*/
  KS0LW01.KS0LW-PRDCTN-MO = KS0LM001.KS0LM-PRDCTN-MO; /* PO ID mo*/
  KS0LW01.KS0LW-DLVR-MO = KS0LM001.KS0LM-DLVR-MO; /* PO ID mo*/
  KS0LW01.KS0LW-FCTY-CD = KS0LM001.KS0LM-FCTY-CD; /* Factory code*/
  KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD; /* Problem code*/
  KS0LW01.KS0LW-US-MADE-FLAG = KS0LM001.KS0LM-US-MADE-FL;
  KS0LW01.KS0LW-ORIG-CD = KS0LM001.KS0LM-ORIG-CD; /* Origin code*/
  KS0LW01.KS0LW-STAT = KS0LM001.KS0LM-STAT-CD; /* Status code*/
  KS0LW01.KS0LW-EXP-STYLE = KS0LM001.KS0LM-EXP-STYLE-FL; /* Exp style*/
  KS0LW01.KS0LW-STY-TYP-CD1 = KS0LM001.KS0LM-STY-TYP-CD[1]; /* Sty Typ1*/
  KS0LW01.KS0LW-STY-TYP-CD2 = KS0LM001.KS0LM-STY-TYP-CD[2]; /* Sty Typ2*/
  KS0LW01.KS0LW-STY-TYP-CD3 = KS0LM001.KS0LM-STY-TYP-CD[3]; /* Sty Typ3*/
  KS0LW01.KS0LW-REG-CD = KS0LM001.KS0LM-REG-CD; /* Market Reg*/
  ;
  /* ------------------------------------------------------------*/
  /* Select the information to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0L-11200(); /* Selection process*/
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-IXM > 1) /* Page was formatted*/
    if (KS0LW00.KS0LW-IXM > 22 /* More than one page*/
     && KS0LW01.KS0LW-DTL-LINE[23] > "      ")
      KS0LW00.KS0LW-DTL-LINE[1] = KS0LW01.KS0LW-DTL-LINE[23];
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD;
      KS0LW00.KS0LW-SAVE-INDEX = KS0LW01.KS0LW-SAVE-INDEX;
      KS0LW00.KS0LW-SAVE-PG-NBR = KS0LW01.KS0LW-SAVE-PG-NBR;
      KS0LW00.KS0LW-SAVE-STY-CS = KS0LW01.KS0LW-SAVE-STY-CS;
      ;
      KS0L-11300(); /* Add page to temporary storage*/
      ;
      KS0LW01.KS0LW-SAVE-INDEX = KS0LW00.KS0LW-SAVE-INDEX;
      KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW00.KS0LW-SAVE-PG-NBR;
      KS0LW01.KS0LW-SAVE-STY-CS = KS0LW00.KS0LW-SAVE-STY-CS;
      KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW00.TA5TSQIX;
      KS0LW01.KS0LW-GPC = KS0LM001.KS0LM-GPC-CD; /* GPC code*/
      KS0LW01.KS0LW-GPC-DESC = KS0LM001.KS0LM-GPC-DESC;
      KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR; /* Style number*/
      KS0LW01.KS0LW-COLR-CD-ID = KS0LM001.KS0LM-COLR-CD-ID; /* Color*/
      KS0LW01.KS0LW-DIM-CD = KS0LM001.KS0LM-DIM-CD; /* Dimension code*/
      KS0LW01.KS0LW-SESN-CD = KS0LM001.KS0LM-SESN-CD; /* Season code*/
      KS0LW01.KS0LW-SESN-YY = KS0LM001.KS0LM-SESN-YR-RNG;
                                   /* Season year*/
      KS0LW01.KS0LW-PRDCTN-YR = KS0LM001.KS0LM-PRDCTN-YR; /* PO ID*/
      KS0LW01.KS0LW-PRDCTN-MO = KS0LM001.KS0LM-PRDCTN-MO; /* PO ID*/
      KS0LW01.KS0LW-DLVR-MO = KS0LM001.KS0LM-DLVR-MO; /* PO ID*/
      KS0LW01.KS0LW-FCTY-CD = KS0LM001.KS0LM-FCTY-CD; /* Factory code*/
      KS0LW01.KS0LW-ORIG-CD = KS0LM001.KS0LM-ORIG-CD; /* Origin code*/
      KS0LW01.KS0LW-US-MADE-FLAG = KS0LM001.KS0LM-US-MADE-FL;
      KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR; /* HS number*/
      KS0LW01.KS0LW-RULE-NBR-MAP = KS0LM001.KS0LM-RULE-NBR; /* Rule*/
      KS0LW01.KS0LW-RULE-NBR = KS0LW00.KS0LW-RULE-NBR; /* Ruling nbr*/
      KS0LW01.KS0LW-DIV-CD = KS0LM001.KS0LM-DIV-CD; /* Division code*/
      KS0LW01.KS0LW-QOTA-CAT-CD = KS0LM001.KS0LM-QOTA-CAT-CD; /* Quota*/
      KS0LW01.KS0LW-TEAM-CD = KS0LM001.KS0LM-TEAM-CD; /* Team code*/
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD; /* Feature code*/
      KS0LW01.KS0LW-STAT = KS0LM001.KS0LM-STAT-CD; /* Status code*/
      KS0LW01.KS0LW-EXP-STYLE = KS0LM001.KS0LM-EXP-STYLE-FL;
      KS0LW01.KS0LW-STY-TYP-CD1 = KS0LM001.KS0LM-STY-TYP-CD[1];
                                   /* Sty Typ1*/
      KS0LW01.KS0LW-STY-TYP-CD2 = KS0LM001.KS0LM-STY-TYP-CD[2];
                                   /* Sty Typ2*/
      KS0LW01.KS0LW-STY-TYP-CD3 = KS0LM001.KS0LM-STY-TYP-CD[3];
                                   /* Sty Typ3*/
      KS0LW01.KS0LW-REG-CD = KS0LM001.KS0LM-REG-CD; /* Market Reg*/
      ;
      KS0LW00.KS0LW-IXM = 1;
      KS0LW01.KS0LW-DTL-LINE[KS0LW-IXM] = KS0LW00.KS0LW-DTL-LINE[KS0LW-IXM];
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD; /* Feature code*/
      KS0L-11300(); /* Add page to temporary storage*/
      KS0LW01.KS0LW-SAVE-INDEX = KS0LW00.KS0LW-SAVE-INDEX;
      KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW00.KS0LW-SAVE-PG-NBR;
      KS0LW01.KS0LW-SAVE-STY-CS = KS0LW00.KS0LW-SAVE-STY-CS;
      KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW00.TA5TSQIX;
      KS0LW01.KS0LW-GPC = KS0LM001.KS0LM-GPC-CD; /* GPC code*/
      KS0LW01.KS0LW-GPC-DESC = KS0LM001.KS0LM-GPC-DESC;
      KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR; /* Style number*/
      KS0LW01.KS0LW-COLR-CD-ID = KS0LM001.KS0LM-COLR-CD-ID; /* Color*/
      KS0LW01.KS0LW-DIM-CD = KS0LM001.KS0LM-DIM-CD; /* Dimension code*/
      KS0LW01.KS0LW-SESN-CD = KS0LM001.KS0LM-SESN-CD; /* Season code*/
      KS0LW01.KS0LW-SESN-YY = KS0LM001.KS0LM-SESN-YR-RNG;
                                   /* Season year*/
      KS0LW01.KS0LW-PRDCTN-YR = KS0LM001.KS0LM-PRDCTN-YR; /* PO ID*/
      KS0LW01.KS0LW-PRDCTN-MO = KS0LM001.KS0LM-PRDCTN-MO; /* PO ID*/
      KS0LW01.KS0LW-DLVR-MO = KS0LM001.KS0LM-DLVR-MO; /* PO ID*/
      KS0LW01.KS0LW-FCTY-CD = KS0LM001.KS0LM-FCTY-CD; /* Factory code*/
      KS0LW01.KS0LW-ORIG-CD = KS0LM001.KS0LM-ORIG-CD; /* Origin code*/
      KS0LW01.KS0LW-US-MADE-FLAG = KS0LM001.KS0LM-US-MADE-FL;
      KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR; /* HS number*/
      KS0LW01.KS0LW-RULE-NBR-MAP = KS0LM001.KS0LM-RULE-NBR; /* Ruling*/
      KS0LW01.KS0LW-RULE-NBR = KS0LW00.KS0LW-RULE-NBR; /* Ruling nbr*/
      KS0LW01.KS0LW-DIV-CD = KS0LM001.KS0LM-DIV-CD; /* Division-code*/
      KS0LW01.KS0LW-QOTA-CAT-CD = KS0LM001.KS0LM-QOTA-CAT-CD; /* Quota*/
      KS0LW01.KS0LW-TEAM-CD = KS0LM001.KS0LM-TEAM-CD; /* Team code*/
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD; /* Feature code*/
      KS0LW01.KS0LW-STAT = KS0LM001.KS0LM-STAT-CD; /* Status code*/
      KS0LW01.KS0LW-EXP-STYLE = KS0LM001.KS0LM-EXP-STYLE-FL;
      KS0LW01.KS0LW-STY-TYP-CD1 = KS0LM001.KS0LM-STY-TYP-CD[1];
                                   /* Sty Typ1*/
      KS0LW01.KS0LW-STY-TYP-CD2 = KS0LM001.KS0LM-STY-TYP-CD[2];
                                   /* Sty Typ2*/
      KS0LW01.KS0LW-STY-TYP-CD3 = KS0LM001.KS0LM-STY-TYP-CD[3];
                                   /* Sty Typ3*/
      KS0LW01.KS0LW-REG-CD = KS0LM001.KS0LM-REG-CD;
    else
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD; /* Feature code*/
      KS0LW00.KS0LW-SAVE-INDEX = KS0LW01.KS0LW-SAVE-INDEX;
      KS0LW00.KS0LW-SAVE-PG-NBR = KS0LW01.KS0LW-SAVE-PG-NBR;
      KS0LW00.KS0LW-SAVE-STY-CS = KS0LW01.KS0LW-SAVE-STY-CS;
      KS0L-11300(); /* Add page to temporary storage*/
      KS0LW01.KS0LW-SAVE-INDEX = KS0LW00.KS0LW-SAVE-INDEX;
      KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW00.KS0LW-SAVE-PG-NBR;
      KS0LW01.KS0LW-SAVE-STY-CS = KS0LW00.KS0LW-SAVE-STY-CS;
      KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW00.TA5TSQIX;
      KS0LW01.KS0LW-GPC = KS0LM001.KS0LM-GPC-CD; /* GPC code*/
      KS0LW01.KS0LW-GPC-DESC = KS0LM001.KS0LM-GPC-DESC;
      KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR; /* Style number*/
      KS0LW01.KS0LW-COLR-CD-ID = KS0LM001.KS0LM-COLR-CD-ID; /* Color*/
      KS0LW01.KS0LW-DIM-CD = KS0LM001.KS0LM-DIM-CD; /* Dimension code*/
      KS0LW01.KS0LW-SESN-CD = KS0LM001.KS0LM-SESN-CD; /* Season code*/
      KS0LW01.KS0LW-SESN-YY = KS0LM001.KS0LM-SESN-YR-RNG;
                                   /* Season year*/
      KS0LW01.KS0LW-PRDCTN-YR = KS0LM001.KS0LM-PRDCTN-YR; /* PO ID*/
      KS0LW01.KS0LW-PRDCTN-MO = KS0LM001.KS0LM-PRDCTN-MO; /* PO ID*/
      KS0LW01.KS0LW-DLVR-MO = KS0LM001.KS0LM-DLVR-MO; /* PO ID*/
      KS0LW01.KS0LW-FCTY-CD = KS0LM001.KS0LM-FCTY-CD; /* Factory code*/
      KS0LW01.KS0LW-ORIG-CD = KS0LM001.KS0LM-ORIG-CD; /* Origin code*/
      KS0LW01.KS0LW-US-MADE-FLAG = KS0LM001.KS0LM-US-MADE-FL;
      KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR; /* HS number*/
      KS0LW01.KS0LW-RULE-NBR-MAP = KS0LM001.KS0LM-RULE-NBR; /* Ruling*/
      KS0LW01.KS0LW-RULE-NBR = KS0LW00.KS0LW-RULE-NBR; /* Ruling nbr*/
      KS0LW01.KS0LW-DIV-CD = KS0LM001.KS0LM-DIV-CD; /* Division code*/
      KS0LW01.KS0LW-QOTA-CAT-CD = KS0LM001.KS0LM-QOTA-CAT-CD; /* Quota*/
      KS0LW01.KS0LW-TEAM-CD = KS0LM001.KS0LM-TEAM-CD; /* Team code*/
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD; /* Feature code*/
      KS0LW01.KS0LW-STAT = KS0LM001.KS0LM-STAT-CD; /* Status code*/
      KS0LW01.KS0LW-EXP-STYLE = KS0LM001.KS0LM-EXP-STYLE-FL;
      KS0LW01.KS0LW-STY-TYP-CD1 = KS0LM001.KS0LM-STY-TYP-CD[1];
                                   /* Sty Typ1*/
      KS0LW01.KS0LW-STY-TYP-CD2 = KS0LM001.KS0LM-STY-TYP-CD[2];
                                   /* Sty Typ2*/
      KS0LW01.KS0LW-STY-TYP-CD3 = KS0LM001.KS0LM-STY-TYP-CD[3];
                                   /* Sty Typ3*/
      KS0LW01.KS0LW-REG-CD = KS0LM001.KS0LM-REG-CD;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    KS0LW00.XXXTSPAG = 0; /* Page number*/
    KSWREC.XXXPRCNM = "11000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-SWR = "N"; /* Request for data switch*/
  ;
  ;
end // end KS0L-11000

// Purge temporary storage
Function KS0L-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0LW01 empty; /* M001 display storage*/
  ;
  KS0LW00.KS0LW-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0LW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11100

// Selection Process
Function KS0L-11200()
  /* ------------------------------------------------------------*/
  /* Determine if entire style or partial style has been entered.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-STYLE-FND = "N";
  if (KS0LM001.KS0LM-STY-NBR > " ") /* If style entered*/
    KS0LW00.KS0LW-SELECT = "S1";
    KS0LW00.KS0LW-FETCH = "N1";
    KS0LW00.KS0LW-CLOSE = "C1";
    KS0L-11220(); /* Call IO6130 select*/
    KS0L-11240(); /* Call IO6130 fetch*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If style exists*/
      KS0LW00.KS0LW-STYLE-FND = "Y";
    end
    KS0L-11270(); /* Call IO6130 close*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Select the information to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-HS-SELECT = "N"; /* HS select switch*/
  KS0LW00.KS0LW-KS1120-SW = "N"; /* Initialize switch*/
  KS0LW00.KS0LW-IO6130-SW = "N"; /* Initialize switch*/
  ;
  if (KS0LM001.KS0LM-GPC-CD == "02") /* Footwear GPC code*/
    if (KS0LM001.KS0LM-PRDCTN-YR > " " /* PO ID year entered*/
     && KS0LM001.KS0LM-PRDCTN-MO > " " /* and PO ID month entered*/
     && KS0LM001.KS0LM-DLVR-MO > " ")  /* and PO ID month entered*/
      if (KS0LM001.KS0LM-FCTY-CD > " ") /* and factory code entered*/
        KS0LW00.KS0LW-SELECT = "S1";
        KS0LW00.KS0LW-FETCH = "N1";
        KS0LW00.KS0LW-CLOSE = "C1";
        KS0L-11210(); /* Call KS1120 select*/
      else
        KS0LW00.KS0LW-SELECT = "S2";
        KS0LW00.KS0LW-FETCH = "N2";
        KS0LW00.KS0LW-CLOSE = "C2";
        KS0L-11210(); /* Call KS1120 select*/
      end
    else
      if (KS0LM001.KS0LM-FEAT-CD > " ") /* If Feature code entered*/
        KS0LW00.KS0LW-SELECT = "S6";
        KS0LW00.KS0LW-FETCH = "N6";
        KS0LW00.KS0LW-CLOSE = "C6";
        KS0L-11210(); /* Call KS1120 select*/
      else
        if (KS0LM001.KS0LM-STY-TYP-CD[1] > " " /* If Sty-Typ entered*/
         || KS0LM001.KS0LM-STY-TYP-CD[2] > " " 
         /* If Sty-Typ entered*/
         || KS0LM001.KS0LM-STY-TYP-CD[3] > " ")
                                   /* If Sty-Typ entered*/
          KS0LW00.KS0LW-SELECT = "SB";
          KS0LW00.KS0LW-FETCH = "NB";
          KS0LW00.KS0LW-CLOSE = "CB";
          KS0L-11210(); /* Call ks1120 select*/
        else
          if (KS0LM001.KS0LM-SESN-CD > " " /* If Season code entered*/
           && KS0LM001.KS0LM-SESN-YR-RNG > " ")
                                   /* and Season year entered*/
            KS0LW00.KS0LW-SELECT = "S2";
            KS0LW00.KS0LW-FETCH = "N2";
            KS0LW00.KS0LW-CLOSE = "C2";
            KS0L-11220(); /* Call IO6130 select*/
          else
            if (KS0LM001.KS0LM-RULE-NBR > " ") /* If Rule nbr entered*/
              KS0LW00.KS0LW-SELECT = "S3";
              KS0LW00.KS0LW-FETCH = "N3";
              KS0LW00.KS0LW-CLOSE = "C3";
              KS0L-11220(); /* Call IO6130 select*/
            else
              if (KS0LM001.KS0LM-HTS-NBR > " " /* If HS nbr entered*/
               && KS0LW00.KS0LW-STYLE-FND == "N")
                KS0LW00.KS0LW-HS-SELECT = "Y";
                KS0LW00.KS0LW-SELECT = "S4";
                KS0LW00.KS0LW-FETCH = "N4";
                KS0LW00.KS0LW-CLOSE = "C4";
                KS0L-11220(); /* Call IO6130 select*/
              else
                KS0LW00.KS0LW-SELECT = "S3";
                KS0LW00.KS0LW-FETCH = "N3";
                KS0LW00.KS0LW-CLOSE = "C3";
                KS0L-11210(); /* Call KS1120 select*/
              end
            end
          end
        end
      end
    end
  else
    if (KS0LM001.KS0LM-FEAT-CD > " ") /* If Feature code entered*/
      KS0LW00.KS0LW-SELECT = "S6";
      KS0LW00.KS0LW-FETCH = "N6";
      KS0LW00.KS0LW-CLOSE = "C6";
      KS0L-11210(); /* Call KS1120 select*/
    else
      if (KS0LM001.KS0LM-STY-TYP-CD[1] > " " /* If STY-TYP entered*/
       || KS0LM001.KS0LM-STY-TYP-CD[2] > " " /* If STY-TYP entered*/
       || KS0LM001.KS0LM-STY-TYP-CD[3] > " ") /* If STY-TYP entered*/
        KS0LW00.KS0LW-SELECT = "S7";
        KS0LW00.KS0LW-FETCH = "N7";
        KS0LW00.KS0LW-CLOSE = "C7";
        KS0L-11220(); /* Call IO6130 select*/
      else
        if (KS0LM001.KS0LM-SESN-CD > " " /* If Season code entered*/
         && KS0LM001.KS0LM-SESN-YR-RNG > " ") /* and Season year entered*/
          KS0LW00.KS0LW-SELECT = "S2";
          KS0LW00.KS0LW-FETCH = "N2";
          KS0LW00.KS0LW-CLOSE = "C2";
          KS0L-11220(); /* Call IO6130 select*/
        else
          if (KS0LM001.KS0LM-RULE-NBR > " ") /* If Rule nbr entered*/
            KS0LW00.KS0LW-SELECT = "S3";
            KS0LW00.KS0LW-FETCH = "N3";
            KS0LW00.KS0LW-CLOSE = "C3";
            KS0L-11220(); /* Call IO6130 select*/
          else
            if (KS0LM001.KS0LM-HTS-NBR > " " /* If HS nbr entered*/
             && KS0LW00.KS0LW-STYLE-FND == "N")
              KS0LW00.KS0LW-HS-SELECT = "Y";
              KS0LW00.KS0LW-SELECT = "S4";
              KS0LW00.KS0LW-FETCH = "N4";
              KS0LW00.KS0LW-CLOSE = "C4";
              KS0L-11220(); /* Call IO6130 select*/
            else
              if (KS0LM001.KS0LM-GPC-CD > "  " /* Only stat and gpc entered*/
               && KS0LM001.KS0LM-STAT-CD > "  "
               && KS0LM001.KS0LM-STY-NBR == "  ")
                KS0LW00.KS0LW-SELECT = "S3";
                KS0LW00.KS0LW-FETCH = "N3";
                KS0LW00.KS0LW-CLOSE = "C3";
                KS0L-11210(); /* Call KS1120 select*/
              else
                KS0LW00.KS0LW-SELECT = "S1";
                KS0LW00.KS0LW-FETCH = "N1";
                KS0LW00.KS0LW-CLOSE = "C1";
                KS0L-11220(); /* Call IO6130 select*/
              end
            end
          end
        end
      end
    end
  end
  ;
  KS0LW00.KS0LW-IXM = 1; /* Display line index*/
  KS0LW00.KS0LW-PAGE-IS-FULL = "N";
  KS0LW00.KS0LW-SWC = "N"; /* End of cursor switch*/
  KS0LW00.KS0LW-COUNTER = 0; /* Display counter*/
  ;
  while (KS0LW00.KS0LW-SWC == "N") /* Until end of cursor*/
    ;
    if (KS0LW00.KS0LW-KS1120-SW == "Y")
      KS0L-11230(); /* Fetch next KS1120 row*/
    else
      if (KS0LW00.KS0LW-IO6130-SW == "Y")
        KS0L-11240(); /* Fetch next IO6130 row*/
      else
        KS0LW00.KS0LW-SWC = "Y";
      end
    end
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0LW00.KS0LW-SWC == "N") /* Not end of cursor*/
      if (KS0LM001.KS0LM-REG-CD != " ") /* if reg-cd entered*/
        KS0L-11280(); /* call KS1120*/
        ;
        if (KSA-WSY2000-RETURN-CD == 00)
          if (KS0LM001.KS0LM-GPC-CD == "EQ")
            if (VCPROD02.KS-BUS-UNIT-CD == "EQ")
              KS0L-11250(); /* Save data in display storage*/
            end
          else
            if (VCPROD02.KS-BUS-UNIT-CD != "EQ")
              KS0L-11250(); /* Save data in display storage*/
            end
          end
        end
      else /* if reg-cd not entered*/
        if (KS0LM001.KS0LM-GPC-CD == "EQ")
          if (VCPROD02.KS-BUS-UNIT-CD == "EQ")
            KS0L-11250(); /* Save data in display storage*/
          end
        else
          if (VCPROD02.KS-BUS-UNIT-CD != "EQ")
            KS0L-11250(); /* Save data in display storage*/
          end
        end
      end
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0LW00.KS0LW-PAGE-IS-FULL == "Y"
     && KS0LW01.KS0LW-DTL-LINE[23] > "    ")
      KS0LW00.KS0LW-DTL-LINE[1] = KS0LW01.KS0LW-DTL-LINE[23];
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD;
      KS0LW00.KS0LW-SAVE-INDEX = KS0LW01.KS0LW-SAVE-INDEX;
      KS0LW00.KS0LW-SAVE-PG-NBR = KS0LW01.KS0LW-SAVE-PG-NBR;
      KS0LW00.KS0LW-SAVE-STY-CS = KS0LW01.KS0LW-SAVE-STY-CS;
      ;
      KS0L-11300(); /* Add page to temporary storage*/
      ;
      KS0LW01.KS0LW-SAVE-INDEX = KS0LW00.KS0LW-SAVE-INDEX;
      KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW00.KS0LW-SAVE-PG-NBR;
      KS0LW01.KS0LW-SAVE-STY-CS = KS0LW00.KS0LW-SAVE-STY-CS;
      KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW00.TA5TSQIX;
      KS0LW00.KS0LW-PAGE-IS-FULL = "N";
      KS0LW01.KS0LW-GPC = KS0LM001.KS0LM-GPC-CD; /* GPC code*/
      KS0LW01.KS0LW-GPC-DESC = KS0LM001.KS0LM-GPC-DESC;
      KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR; /* HS number*/
      KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR; /* Style nbr*/
      KS0LW01.KS0LW-COLR-CD-ID = KS0LM001.KS0LM-COLR-CD-ID; /* Color*/
      KS0LW01.KS0LW-DIM-CD = KS0LM001.KS0LM-DIM-CD; /* Dimension*/
      KS0LW01.KS0LW-RULE-NBR-MAP = KS0LM001.KS0LM-RULE-NBR; /* Ruling*/
      KS0LW01.KS0LW-RULE-NBR = KS0LW00.KS0LW-RULE-NBR; /* Ruling nbr*/
      KS0LW01.KS0LW-DIV-CD = KS0LM001.KS0LM-DIV-CD; /* Division code*/
      KS0LW01.KS0LW-SESN-CD = KS0LM001.KS0LM-SESN-CD; /* Season code*/
      KS0LW01.KS0LW-SESN-YY = KS0LM001.KS0LM-SESN-YR-RNG; /* Season yr*/
      KS0LW01.KS0LW-QOTA-CAT-CD = KS0LM001.KS0LM-QOTA-CAT-CD; /* Quota*/
      KS0LW01.KS0LW-TEAM-CD = KS0LM001.KS0LM-TEAM-CD; /* Team code*/
      KS0LW01.KS0LW-PRDCTN-YR = KS0LM001.KS0LM-PRDCTN-YR; /* PO ID date*/
      KS0LW01.KS0LW-PRDCTN-MO = KS0LM001.KS0LM-PRDCTN-MO;
      KS0LW01.KS0LW-DLVR-MO = KS0LM001.KS0LM-DLVR-MO;
      KS0LW01.KS0LW-FCTY-CD = KS0LM001.KS0LM-FCTY-CD; /* Factory code*/
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD; /* Problem code*/
      KS0LW01.KS0LW-US-MADE-FLAG = KS0LM001.KS0LM-US-MADE-FL;
      KS0LW01.KS0LW-ORIG-CD = KS0LM001.KS0LM-ORIG-CD; /* Origin code*/
      KS0LW01.KS0LW-STAT = KS0LM001.KS0LM-STAT-CD; /* Status code*/
      KS0LW01.KS0LW-EXP-STYLE = KS0LM001.KS0LM-EXP-STYLE-FL;
      KS0LW01.KS0LW-STY-TYP-CD1 = KS0LM001.KS0LM-STY-TYP-CD[1];
      KS0LW01.KS0LW-STY-TYP-CD2 = KS0LM001.KS0LM-STY-TYP-CD[2];
      KS0LW01.KS0LW-STY-TYP-CD3 = KS0LM001.KS0LM-STY-TYP-CD[3];
      KS0LW01.KS0LW-REG-CD = KS0LM001.KS0LM-REG-CD;
      KS0LW01.KS0LW-DTL-LINE[1] = KS0LW00.KS0LW-DTL-LINE[1];
      KS0LW00.KS0LW-IXM = 2;
      ;
      KS0L-11255(); /* add last display line*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-KS1120-SW == "Y")
    KS0L-11260(); /* Close KS1120 set*/
  else
    if (KS0LW00.KS0LW-IO6130-SW == "Y")
      KS0L-11270(); /* Close IO6130 set*/
    end
  end
  ;
  ;
end // end KS0L-11200

// Call KS1120 select
Function KS0L-11210()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KS0L-11211(); /* Set wildcards*/
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11210"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11210

// Set wildcards for KS1120 call
Function KS0L-11211()
  /* ------------------------------------------------------------*/
  /* Set wildcards for KS1120 Call.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  set VCPROB01 empty; /* Clear row storage area*/
  set KSAREC empty; /* Clear row storage area*/
  set PC6REC empty; /* Clear row storage area*/
  set PG2REC empty; /* Clear row storage area*/
  ;
  KS0LW00.KS0LW-KS1120-SW = "Y";
  KS0LW00.KS0LW-IO6130-SW = "N";
  ;
  if (KS0LW01.KS0LW-GPC == "EQ")
    VCPROD02.KS-BUS-UNIT-CD = "EQ";
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0LW01.KS0LW-GPC;
  end
  if (KS0LW01.KS0LW-GPC == "02" /* If footwear GPC*/
   && KS0LW01.KS0LW-POIDT > " ")
    if (KS0LW01.KS0LW-PRDCTN-YR > "60")
      KS0LW01.KS0LW-PRDCTN-CEN = "19";
    else
      KS0LW01.KS0LW-PRDCTN-CEN = "20";
    end
  end
  KS0LW01.KS0LW-POIDT-NUM = KS0LW01.KS0LW-POIDT;
  PC6REC.PC3POIDT = KS0LW01.KS0LW-POIDT-NUM; /* PO ID date*/
  if (KS0LW01.KS0LW-FCTY-CD > " ") /* If factory code entered*/
    PC6REC.FY1FCTYC = KS0LW01.KS0LW-FCTY-CD; /* Factory code*/
  else
    PC6REC.FY1FCTYC = "*";
  end
  ;
  if (KS0LM001.KS0LM-US-MADE-FL == "Y")
    VCPROD02.KS-XCT-ORIG-CD[1] = "USA";
  else
    VCPROD02.KS-XCT-ORIG-CD[1] = "*";
  end
  if (KS0LW01.KS0LW-ORIG-CD > " ")
    VCPROD02.KS-XCT-ORIG-CD[1] = KS0LW01.KS0LW-ORIG-CD;
  else
    if (VCPROD02.KS-XCT-ORIG-CD[1] == " ")
      VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
    end
  end
  ;
  if (KS0LW01.KS0LW-SESN-CD > " ") /* Season code entered*/
    if (KS0LW01.KS0LW-SESN-YY > "60")
      KS0LW01.KS0LW-SESN-CENT = "19";
    else
      KS0LW01.KS0LW-SESN-CENT = "20";
    end
    KS0LW01.KS0LW-SESN-YR-NUM = KS0LW01.KS0LW-SESN-YR;
    VCPROD02.XSNYR = KS0LW01.KS0LW-SESN-YR-NUM; /* Season year*/
    VCPROD02.XSECD = KS0LW01.KS0LW-SESN-CD; /* Season code*/
  else
    VCPROD02.XSNYR = -1; /* Season year*/
    VCPROD02.XSECD = "*"; /* Season code*/
  end
  ;
  if (KS0LW00.KS0LW-SELECT == "S3") /* If select by style*/
    if (KS0LW01.KS0LW-STYLE == " ")
      VCPROD02.SY1STNBR = "%%%%%%%";
      VCPROD02.KS-XPRMT-STY-NBR = "%%%%%%%";
    else
      VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
      VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
    end
  else
    if (KS0LW01.KS0LW-STYLE > " ") /* If style entered*/
      VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
      VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
      if (KS0LW01.KS0LW-STY-CHAR-2 == " ") /* If second char blank*/
        KS0LW01.KS0LW-STY-CHAR-2 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-3 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-4 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-5 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
        VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
        VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
        KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
      else
        if (KS0LW01.KS0LW-STY-CHAR-3 == " ") /* If third char blank*/
          KS0LW01.KS0LW-STY-CHAR-3 = "%"; /* Move in wildcard*/
          KS0LW01.KS0LW-STY-CHAR-4 = "%"; /* Move in wildcard*/
          KS0LW01.KS0LW-STY-CHAR-5 = "%"; /* Move in wildcard*/
          KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
          KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
          VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
          VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
          KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
        else
          if (KS0LW01.KS0LW-STY-CHAR-4 == " ") /* If fourth char blank*/
            KS0LW01.KS0LW-STY-CHAR-4 = "%"; /* Move in wildcard*/
            KS0LW01.KS0LW-STY-CHAR-5 = "%"; /* Move in wildcard*/
            KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
            KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
            VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
            VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
            KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
          else
            if (KS0LW01.KS0LW-STY-CHAR-5 == " ") /* If fifth char blank*/
              KS0LW01.KS0LW-STY-CHAR-5 = "%"; /* Move in wildcard*/
              KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
              KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
              VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
              VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
              KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
            else
              if (KS0LW01.KS0LW-STY-CHAR-6 == " ") /* If sixth char blank*/
                KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
                KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
                VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
                KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
              else
                if (KS0LW01.KS0LW-STY-CHAR-7 == " ") /* If seventh char blank*/
                  KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                  VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
                  VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
                  KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
                end
              end
            end
          end
        end
      end
    else
      VCPROD02.SY1STNBR = "%%%%%%%";
      VCPROD02.KS-XPRMT-STY-NBR = "%%%%%%%";
    end
  end
  ;
  if (KS0LW01.KS0LW-COLR-CD-ID > " ") /* Color entered*/
    VCPROD02.SY2CLRID = KS0LW01.KS0LW-COLR-CD-ID;
  else
    VCPROD02.SY2CLRID = "*";
  end
  ;
  if (KS0LW01.KS0LW-DIM-CD > " ") /* Dimension entered*/
    VCPROD02.XDMCD = KS0LW01.KS0LW-DIM-CD;
  else
    VCPROD02.XDMCD = "*";
  end
  ;
  if (KS0LW01.KS0LW-HTS-NBR > " ")
    KS0LW01.KS0LW-HTS-NUMBER = KS0LW01.KS0LW-HTS-NBR;
    if (KS0LW01.KS0LW-HTS-BYTE[11] == "-" /* If range entered*/
     || KS0LW01.KS0LW-HTS-BYTE[11] == ",") /* If range entered*/
      if (KS0LW01.KS0LW-HTS-CPTR-CD > " ")
        VCPROD02.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD;
      else
        VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
      end
      if (KS0LW01.KS0LW-HTS-HDG-CD > " ")
        VCPROD02.KS-HTS-HDG-CD = KS0LW01.KS0LW-HTS-HDG-CD;
      else
        VCPROD02.KS-HTS-HDG-CD = "*";
      end
      if (KS0LW01.KS0LW-HTS-1ST-SHDG-CD > " ")
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW01.KS0LW-HTS-1ST-SHDG-CD;
      else
        VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
      end
      if (KS0LW01.KS0LW-HTS-2ND-SHDG-CD > " ")
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
      else
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
      end
      if (KS0LW01.KS0LW-HTS-BYTE[12] > " "
       && KS0LW01.KS0LW-HTS-BYTE[13] > " ")
        KS0LW01.KS0LW-HTS-2ND-SHDG1 = KS0LW01.KS0LW-HTS-BYTE[12];
        KS0LW01.KS0LW-HTS-2ND-SHDG2 = KS0LW01.KS0LW-HTS-BYTE[13];
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
        KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR;
      else
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
      end
    else
      if (KS0LW01.KS0LW-HTS-CPTR-CD > " ")
        VCPROD02.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD;
      else
        VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
      end
      if (KS0LW01.KS0LW-HTS-HDG-CD > " ")
        VCPROD02.KS-HTS-HDG-CD = KS0LW01.KS0LW-HTS-HDG-CD;
      else
        VCPROD02.KS-HTS-HDG-CD = "*";
      end
      if (KS0LW01.KS0LW-HTS-1ST-SHDG-CD > " ")
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW01.KS0LW-HTS-1ST-SHDG-CD;
      else
        VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
      end
      if (KS0LW01.KS0LW-HTS-2ND-SHDG-CD > " ")
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
      else
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
      end
      VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
      if (KS0LW01.KS0LW-HTS-STAT-CD > " ")
        VCPROD02.KS-HTS-STAT-CD = KS0LW01.KS0LW-HTS-STAT-CD;
      else
        VCPROD02.KS-HTS-STAT-CD = "*";
      end
    end
  else
    VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
    VCPROD02.KS-HTS-HDG-CD = "*";
    VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
    VCPROD02.KS-HTS-STAT-CD = "*";
  end
  if (KS0LW01.KS0LW-TEAM-CD > " ")
    VCPROD02.KS-TEAM-CD = KS0LW01.KS0LW-TEAM-CD;
    if (VCPROD02.KS-HTS-CPTR-CD == "*")
      VCPROD02.KS-HTS-CPTR-CD = "**";
    end
  else
    if (KS0LW00.KS0LW-SELECT == "S9") /* HS Number select*/
      VCPROD02.KS-TEAM-CD = "*";
    else
      VCPROD02.KS-TEAM-CD = "***";
    end
  end
  if (KS0LW01.KS0LW-RULE-NBR > " ")
    VCPROD02.KS-RULE-NBR = KS0LW01.KS0LW-RULE-NBR;
  else
    VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  end
  ;
  if (KS0LW00.KS0LW-SELECT == "S6") /* If feature code select*/
    VCPROB01.YKP-PRBM-CD = KS0LW01.KS0LW-PRBM-CD;
  else
    if (KS0LW01.KS0LW-PRBM-CD > " ")
      VCPROD02.KS-PRBM-NBR = -2;
    else
      VCPROD02.KS-PRBM-NBR = -1;
    end
  end
  ;
  if (KS0LW01.KS0LW-STAT > " ")
    VCPROD02.YPR-PROD-STAT-CD = KS0LW01.KS0LW-STAT;
  else
    VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  end
  ;
  if (KS0LW01.KS0LW-STY-TYP-CD1 > " ")
    KSAREC.YKS-STY-TYP-CD[1] = KS0LW01.KS0LW-STY-TYP-CD1;
  else
    KSAREC.YKS-STY-TYP-CD[1] = "**";
  end
  ;
  if (KS0LW01.KS0LW-STY-TYP-CD2 > " ")
    KSAREC.YKS-STY-TYP-CD[2] = KS0LW01.KS0LW-STY-TYP-CD2;
  else
    KSAREC.YKS-STY-TYP-CD[2] = "**";
  end
  ;
  if (KS0LW01.KS0LW-STY-TYP-CD3 > " ")
    KSAREC.YKS-STY-TYP-CD[3] = KS0LW01.KS0LW-STY-TYP-CD3;
  else
    KSAREC.YKS-STY-TYP-CD[3] = "**";
  end
  ;
  KSAREC.KSA-TASK = KS0LW00.KS0LW-SELECT;
  ;
  ;
end // end KS0L-11211

// Call IO6130 select
Function KS0L-11220()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-SWD == "1")
    KS0L-11221(); /* Set wildcard values*/
  else
    KSAREC.KSA-TASK = KS0LW00.KS0LW-SELECT;
  end
  ;
  try
    call "VCPROD02" (KSAREC, SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11220"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11220

// Set wildcards for IO6130 call
Function KS0L-11221()
  /* ------------------------------------------------------------*/
  /* Set wildcard values for IO6130 call.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  set KSAREC empty; /* Clear row storage area*/
  ;
  KS0LW00.KS0LW-IO6130-SW = "Y";
  KS0LW00.KS0LW-KS1120-SW = "N";
  ;
  if (KS0LW01.KS0LW-GPC == "EQ")
    VCPROD02.KS-BUS-UNIT-CD = "EQ";
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0LW01.KS0LW-GPC;
  end
  if (KS0LW01.KS0LW-SESN-CD > " ") /* Season code entered*/
    if (KS0LW01.KS0LW-SESN-YY > "60")
      KS0LW01.KS0LW-SESN-CENT = "19";
    else
      KS0LW01.KS0LW-SESN-CENT = "20";
    end
    KS0LW01.KS0LW-SESN-YR-NUM = KS0LW01.KS0LW-SESN-YR;
    VCPROD02.XSNYR = KS0LW01.KS0LW-SESN-YR-NUM; /* Season year*/
    VCPROD02.XSECD = KS0LW01.KS0LW-SESN-CD; /* Season code*/
  else
    VCPROD02.XSNYR = -1; /* Season year*/
    VCPROD02.XSECD = "*"; /* Season code*/
  end
  ;
  if (KS0LW00.KS0LW-SELECT == "S1") /* If select by style requested*/
    VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
    VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
  else
    if (KS0LW01.KS0LW-STYLE > " ") /* If style entered*/
      VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
      VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
      if (KS0LW01.KS0LW-STY-CHAR-2 == " ") /* If second char blank*/
        KS0LW01.KS0LW-STY-CHAR-2 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-3 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-4 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-5 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
        KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
        VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
        VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
        KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
      else
        if (KS0LW01.KS0LW-STY-CHAR-3 == " ") /* If third char blank*/
          KS0LW01.KS0LW-STY-CHAR-3 = "%"; /* Move in wildcard*/
          KS0LW01.KS0LW-STY-CHAR-4 = "%"; /* Move in wildcard*/
          KS0LW01.KS0LW-STY-CHAR-5 = "%"; /* Move in wildcard*/
          KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
          KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
          VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
          VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
          KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
        else
          if (KS0LW01.KS0LW-STY-CHAR-4 == " ") /* If fourth char blank*/
            KS0LW01.KS0LW-STY-CHAR-4 = "%"; /* Move in wildcard*/
            KS0LW01.KS0LW-STY-CHAR-5 = "%"; /* Move in wildcard*/
            KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
            KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
            VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
            VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
            KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
          else
            if (KS0LW01.KS0LW-STY-CHAR-5 == " ") /* If fifth char blank*/
              KS0LW01.KS0LW-STY-CHAR-5 = "%"; /* Move in wildcard*/
              KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
              KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
              VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
              VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
              KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
            else
              if (KS0LW01.KS0LW-STY-CHAR-6 == " ") /* If sixth char blank*/
                KS0LW01.KS0LW-STY-CHAR-6 = "%"; /* Move in wildcard*/
                KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
                VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
                KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
              else
                if (KS0LW01.KS0LW-STY-CHAR-7 == " ") /* If seventh char blank*/
                  KS0LW01.KS0LW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                  VCPROD02.SY1STNBR = KS0LW01.KS0LW-STYLE;
                  VCPROD02.KS-XPRMT-STY-NBR = KS0LW01.KS0LW-STYLE;
                  KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
                end
              end
            end
          end
        end
      end
    else
      VCPROD02.SY1STNBR = "%%%%%%%";
      VCPROD02.KS-XPRMT-STY-NBR = "%%%%%%%";
    end
  end
  ;
  if (KS0LW01.KS0LW-COLR-CD-ID > " ") /* If color code entered*/
    VCPROD02.SY2CLRID = KS0LW01.KS0LW-COLR-CD-ID;
  else
    VCPROD02.SY2CLRID = "*"; /* Wildcard color*/
  end
  if (KS0LW01.KS0LW-DIM-CD > " ") /* If dimension entered*/
    VCPROD02.XDMCD = KS0LW01.KS0LW-DIM-CD;
  else
    VCPROD02.XDMCD = "*"; /* Wildcard dimension*/
  end
  ;
  if (KS0LM001.KS0LM-US-MADE-FL == "Y")
    VCPROD02.KS-XCT-ORIG-CD = "USA";
  else
    VCPROD02.KS-XCT-ORIG-CD = "*";
  end
  if (KS0LW01.KS0LW-ORIG-CD > " ")
    VCPROD02.KS-XCT-ORIG-CD[1] = KS0LW01.KS0LW-ORIG-CD;
  else
    if (VCPROD02.KS-XCT-ORIG-CD[1] == " ")
      VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
    end
  end
  ;
  if (KS0LW01.KS0LW-STAT > " ")
    VCPROD02.YPR-PROD-STAT-CD = KS0LW01.KS0LW-STAT;
  else
    VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  end
  ;
  if (KS0LW01.KS0LW-RULE-NBR > " ")
    VCPROD02.KS-RULE-NBR = KS0LW01.KS0LW-RULE-NBR;
  else
    VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  end
  ;
  if (KS0LW01.KS0LW-HTS-NBR > " ")
    KS0LW01.KS0LW-HTS-NUMBER = KS0LW01.KS0LW-HTS-NBR;
    if (KS0LW00.KS0LW-SELECT == "S4")
      if (KS0LW01.KS0LW-HTS-BYTE[11] == "-" /* If range entered*/
       || KS0LW01.KS0LW-HTS-BYTE[11] == ",") /* If range entered*/
        VCPROD02.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD;
        VCPROD02.KS-HTS-HDG-CD = KS0LW01.KS0LW-HTS-HDG-CD;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW01.KS0LW-HTS-1ST-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
        KS0LW01.KS0LW-HTS-2ND-SHDG1 = KS0LW01.KS0LW-HTS-BYTE[12];
        KS0LW01.KS0LW-HTS-2ND-SHDG2 = KS0LW01.KS0LW-HTS-BYTE[13];
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
        KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR;
      else
        VCPROD02.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD;
        VCPROD02.KS-HTS-HDG-CD = KS0LW01.KS0LW-HTS-HDG-CD;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW01.KS0LW-HTS-1ST-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
        VCPROD02.KS-HTS-STAT-CD = KS0LW01.KS0LW-HTS-STAT-CD;
      end
    else
      if (KS0LW01.KS0LW-HTS-BYTE[11] == "-" /* If range entered*/
       || KS0LW01.KS0LW-HTS-BYTE[11] == ",") /* If range entered*/
        if (KS0LW01.KS0LW-HTS-CPTR-CD > " ")
          VCPROD02.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD;
        else
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
        if (KS0LW01.KS0LW-HTS-HDG-CD > " ")
          VCPROD02.KS-HTS-HDG-CD = KS0LW01.KS0LW-HTS-HDG-CD;
        else
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
        if (KS0LW01.KS0LW-HTS-1ST-SHDG-CD > " ")
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW01.KS0LW-HTS-1ST-SHDG-CD;
        else
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
        if (KS0LW01.KS0LW-HTS-2ND-SHDG-CD > " ")
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
        else
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
        if (KS0LW01.KS0LW-HTS-BYTE[12] > " "
         && KS0LW01.KS0LW-HTS-BYTE[13] > " ")
          KS0LW01.KS0LW-HTS-2ND-SHDG1 = KS0LW01.KS0LW-HTS-BYTE[12];
          KS0LW01.KS0LW-HTS-2ND-SHDG2 = KS0LW01.KS0LW-HTS-BYTE[13];
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
          KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR;
        else
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
        end
      else
        if (KS0LW01.KS0LW-HTS-CPTR-CD > " ")
          VCPROD02.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD;
        else
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
        if (KS0LW01.KS0LW-HTS-HDG-CD > " ")
          VCPROD02.KS-HTS-HDG-CD = KS0LW01.KS0LW-HTS-HDG-CD;
        else
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
        if (KS0LW01.KS0LW-HTS-1ST-SHDG-CD > " ")
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW01.KS0LW-HTS-1ST-SHDG-CD;
        else
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
        if (KS0LW01.KS0LW-HTS-2ND-SHDG-CD > " ")
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
        else
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
        if (KS0LW01.KS0LW-HTS-STAT-CD > " ")
          VCPROD02.KS-HTS-STAT-CD = KS0LW01.KS0LW-HTS-STAT-CD;
        else
          VCPROD02.KS-HTS-STAT-CD = "*";
        end
      end
    end
  else
    VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
    VCPROD02.KS-HTS-HDG-CD = "*";
    VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
    VCPROD02.KS-HTS-STAT-CD = "*";
  end
  if (KS0LW01.KS0LW-TEAM-CD > " ")
    VCPROD02.KS-TEAM-CD = KS0LW01.KS0LW-TEAM-CD;
    if (VCPROD02.KS-HTS-CPTR-CD == "*")
      VCPROD02.KS-HTS-CPTR-CD = "**";
    end
  else
    if (KS0LW00.KS0LW-SELECT == "S4" /* if either of the HS NBR*/
     || KS0LW00.KS0LW-SELECT == "S6") /* selects are chosen*/
      VCPROD02.KS-TEAM-CD = "*";
    else
      VCPROD02.KS-TEAM-CD = "***";
    end
  end
  if (KS0LW01.KS0LW-QOTA-CAT-CD > " "
   && VCPROD02.KS-HTS-CPTR-CD == "*")
    VCPROD02.KS-HTS-CPTR-CD = "**";
  end
  if (KS0LW01.KS0LW-PRBM-CD > " ")
    VCPROD02.KS-PRBM-NBR = -2;
  else
    VCPROD02.KS-PRBM-NBR = -1;
  end
  ;
  if (KS0LW01.KS0LW-STY-TYP-CD1 > " ")
    KSAREC.YKS-STY-TYP-CD[1] = KS0LW01.KS0LW-STY-TYP-CD1;
  else
    KSAREC.YKS-STY-TYP-CD[1] = "**";
  end
  ;
  if (KS0LW01.KS0LW-STY-TYP-CD2 > " ")
    KSAREC.YKS-STY-TYP-CD[2] = KS0LW01.KS0LW-STY-TYP-CD2;
  else
    KSAREC.YKS-STY-TYP-CD[2] = "**";
  end
  ;
  if (KS0LW01.KS0LW-STY-TYP-CD3 > " ")
    KSAREC.YKS-STY-TYP-CD[3] = KS0LW01.KS0LW-STY-TYP-CD3;
  else
    KSAREC.YKS-STY-TYP-CD[3] = "**";
  end
  ;
  KSAREC.KSA-TASK = KS0LW00.KS0LW-SELECT;
  ;
  ;
end // end KS0L-11221

// Call KS1120 fetch
Function KS0L-11230()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set KSAREC empty;
  ;
  KSAREC.KSA-TASK = KS0LW00.KS0LW-FETCH;
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0LW00.KS0LW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11230"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11230

// Call IO6130 fetch
Function KS0L-11240()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0LW00.KS0LW-FETCH;
  ;
  try
    call "VCPROD02" (KSAREC, SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* ftch tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0LW00.KS0LW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11240"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11240

// Save display storage process
Function KS0L-11250()
  /* ------------------------------------------------------------*/
  /* If first line on subsequent page, save heading information.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.TA5TSQIX > 0 /* Not the first page*/
   && KS0LW00.KS0LW-IXM == 1) /* and first line on page*/
    ;
    KS0LW01.KS0LW-GPC = VCPROD02.XGPCD; /* GPC code*/
    KS0LW01.KS0LW-STYLE = VCPROD02.SY1STNBR; /* Style number*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-FEAT-CD > " ") /* If feature entered*/
    KS0LW00.KS0LW-SWP = "N"; /* Initialize EOF switch*/
    KS0L-11251(); /* Select VCPROB01 set*/
    KS0LW00.KS0LW-PRBM-TABLE = " ";
    KS0LW00.KS0LW-IX2 = 1;
    while (KS0LW00.KS0LW-SWP == "N" /* Until EOF*/
     && KS0LW00.KS0LW-IX2 <= 25) /* and up to 25 codes*/
      KS0L-11252(); /* Fetch VCPROB01 rows*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        ;
        KS0LW00.KS0LW-PRBM[KS0LW-IX2] = VCPROB01.YKP-PRBM-CD;
                                   /* Save prbm*/
        KS0LW00.KS0LW-IX2 = KS0LW00.KS0LW-IX2 + 1; /* Increment index*/
        ;
      end
      ;
    end
    KS0L-11253(); /* Close VCPROB01 set*/
  else
    KS0LW01.KS0LW-PRBM-CD = " ";
    KS0LW00.KS0LW-PRBM-TABLE = " ";
  end
  ;
  set VHSNBR01 empty; /* Clear VHSNBR01 record*/
  if (KS0LW01.KS0LW-TEAM-CD > " " /* If team code entered*/
   || KS0LW01.KS0LW-QOTA-CAT-CD > " ") /* or quota cat code entered*/
    ;
    if (VCPROD02.KS-HTS-STAT-CD == "  " /* No HS-STAT assigned to Prod*/
     && KS0LW01.KS0LW-GPC == "02")     
      ;
      KS0LW00.KS0LW-HTS-CPTR = VCPROD02.KS-HTS-CPTR-CD; /* Chapter cd*/
      KS0LW00.KS0LW-HTS-HDG = VCPROD02.KS-HTS-HDG-CD; /* Chapter hdg*/
      KS0LW00.KS0LW-HTS-1ST-SHDG = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KS0LW00.KS0LW-HTS-2ND-SHDG-1 = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
      KS0LW00.KS0LW-HTS-2ND-SHDG-2 = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
      ;
      KS0L-11257(); /* select set vhsnbr*/
      KS0L-11258(); /* fetch row vhsnbr*/
      KS0L-11259(); /* close set vhsnbr*/
      ;
    else
      ;
      KS0LW01.KS0LW-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD; /* Chapter*/
      KS0LW01.KS0LW-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD; /* Chapter hd*/
      KS0LW01.KS0LW-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KS0LW01.KS0LW-HTS-2ND-SHDG-CD = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
      KS0LW01.KS0LW-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
      ;
      KS0L-11254(); /* Select VHSNBR01 row*/
    end
  end
  ;
  if (KS0LW00.KS0LW-COUNTER > 0) /* If not first time through*/
    KS0LW00.KS0LW-IX1 = 1;
    KS0LW00.KS0LW-COLOR-COMB = "N";
    while (KS0LW00.KS0LW-IX1 <= 23)
      if (VCPROD02.XGPCD != "02") /* If not footwear*/
        if (KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX1] > " ")
          if (VCPROD02.SY1STNBR == KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX1]
           || VCPROD02.KS-XPRMT-STY-NBR == 
          KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX1])
            KS0LW00.KS0LW-COLOR-COMB = "Y";
            KS0LW01.KS0LW-DTL-COLR-CD-ID[KS0LW-IX1] = "***";
            if (VCPROD02.KS-TXT-NBR == KS0LW01.KS0LW-TEXT-NBR[KS0LW-IX1]
             && VCPROD02.KS-PRBM-NBR == KS0LW01.KS0LW-PRBM-NBR[KS0LW-IX1]
            
             && VCPROD02.KS-RULE-NBR == 
            KS0LW01.KS0LW-DTL-RULE-NBR[KS0LW-IX1]
             && VCPROD02.YKS-STY-TYP-CD == 
            KS0LW01.KS0LW-DTL-STY-TYP[KS0LW-IX1]
             && VCPROD02.KS-HTS-CPTR-CD == 
            KS0LW01.KS0LW-DTL-HTS-CPTR-CD[KS0LW-IX1]
             && VCPROD02.KS-HTS-HDG-CD == 
            KS0LW01.KS0LW-DTL-HTS-HDG-CD[KS0LW-IX1]
             && VCPROD02.KS-HTS-1ST-SHDG-CD == 
            KS0LW01.KS0LW-DTL-HTS-1ST-SHDG-CD[KS0LW-IX1]
             && VCPROD02.KS-HTS-2ND-SHDG-CD[1] == 
            KS0LW01.KS0LW-DTL-HTS-2ND-SHDGCD1[KS0LW-IX1]
             && VCPROD02.KS-HTS-2ND-SHDG-CD[2] == 
            KS0LW01.KS0LW-DTL-HTS-2ND-SHDGCD2[KS0LW-IX1]
             && VCPROD02.KS-HTS-STAT-CD == 
            KS0LW01.KS0LW-DTL-HTS-STAT-CD[KS0LW-IX1])
              if (KS0LM001.KS0LM-HTS-NBR == " ")
                KS0LW01.KS0LW-HTS-NBR = " ";
              else
                KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR;
              end
              if (KS0LM001.KS0LM-FEAT-CD == " ")
                KS0LW01.KS0LW-PRBM-CD = " ";
              end
              KS0LW00.KS0LW-IX1 = 23;
            else
              KS0LW01.KS0LW-DTL-MULT-FL[KS0LW-IX1] = "*";
              KS0LW00.KS0LW-IX1 = 23;
            end
          end
        end
      else
        if (KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX1] > " ")
          if (VCPROD02.SY1STNBR == KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX1]
           || VCPROD02.KS-XPRMT-STY-NBR == 
          KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX1])
            if (VCPROD02.SY2CLRID == KS0LW01.KS0LW-DTL-COLR-CD-ID[KS0LW-IX1]
            
             && VCPROD02.XDMCD == KS0LW01.KS0LW-DTL-DIM-CD[KS0LW-IX1])
              KS0LW00.KS0LW-COLOR-COMB = "Y";
              KS0LW01.KS0LW-DTL-MULT-FL[KS0LW-IX1] = "*";
              KS0LW00.KS0LW-IX1 = 23;
            end
          end
        end
      end
      ;
      KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 + 1;
      ;
    end
    if (KS0LW00.KS0LW-COLOR-COMB == "N")
      KS0L-11255(); /* Add line to display storage*/
    end
    ;
  else
    ;
    KS0L-11255(); /* Add line to display storage*/
    ;
  end
  ;
  ;
end // end KS0L-11250

// Select VCPROB01 set
Function KS0L-11251()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROB01 empty; /* Clear row storage area*/
  ;
  KS0LW00.KS0LW-IX2 = 1; /* Initialize index*/
  ;
  VCPROB01.KS-PRBM-NBR = VCPROD02.KS-PRBM-NBR; /* Problem number*/
  ;
  try
    call "IO6140" ("S1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11251"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11251

// Fetch  VCPROB01 row
Function KS0L-11252()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6140" ("N1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        ;
        KS0LW00.KS0LW-SWP = "Y"; /* Indicate end of cursor*/
        ;
        return; /* Return to previous process*/
        ;
      end
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11252"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11252

// Close  VCPROB01 set
Function KS0L-11253()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6140" ("C1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11253"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11253

// Select unique VHSNBR01 row
Function KS0L-11254()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSNBR01 empty; /* Clear row storage area*/
  ;
  VHSNBR01.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD; /* Chapter cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0LW01.KS0LW-HTS-HDG-CD; /* Chapter hdg*/
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0LW01.KS0LW-HTS-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
  VHSNBR01.KS-HTS-STAT-CD = KS0LW01.KS0LW-HTS-STAT-CD;
  if (KS0LM001.KS0LM-HTS-NBR == " ")
    KS0LW01.KS0LW-HTS-NBR = " ";
  else
    KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR;
  end
  ;
  try
    call "IO6120" ("S ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11254"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11254

// Add line to display storage
Function KS0L-11255()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-EXP-STYLE-FL == "N") /* If exclude exp style*/
    if (VCPROD02.SY1STNBR == " ")
      return; /* Return to previous process*/
    end
  else
    if (KS0LM001.KS0LM-EXP-STYLE-FL == "Y") /* If only exp style*/
      if (VCPROD02.SY1STNBR > " ")
        return; /* Return to previous process*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Check for match on the sty typ if entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-STY-TYP-CD[1] > " " /* If one of the sty-typ*/
   || KS0LM001.KS0LM-STY-TYP-CD[2] > " " /* codes is entered*/
   || KS0LM001.KS0LM-STY-TYP-CD[3] > " ")
    if (VCPROD02.YKS-STY-TYP-CD == " ") /* If prod has no sty-typ*/
      return;
    else
      if (VCPROD02.YKS-STY-TYP-CD == KS0LM001.KS0LM-STY-TYP-CD[1]
       || VCPROD02.YKS-STY-TYP-CD == KS0LM001.KS0LM-STY-TYP-CD[2]
       || VCPROD02.YKS-STY-TYP-CD == KS0LM001.KS0LM-STY-TYP-CD[3])
        /* next sentence*/
      else
        return;
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Check for match on the H.S. Number if entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-HTS-NBR > " ")
    KS0LW01.KS0LW-HTS-NUMBER = KS0LM001.KS0LM-HTS-NBR;
    if (KS0LW01.KS0LW-HTS-BYTE[11] == "-")
      if (VCPROD02.KS-HTS-RNG-FL != "Y")
        return;
      end
    else
      if (KS0LW01.KS0LW-HTS-BYTE[11] == ",")
        if (VCPROD02.KS-HTS-RNG-FL != "N")
          return;
        end
      end
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Check the division code*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-DIV-CD > " ") /* if the DIV-CD is entered*/
    set PG2REC empty;
    PG2REC.XGPCD = VCPROD02.XGPCD;
    PG2REC.SY1STNBR = VCPROD02.SY1STNBR;
    PG2REC.SY2CLRID = VCPROD02.SY2CLRID;
    PG2REC.XDMCD = VCPROD02.XDMCD;
    KS0L-11256(); /* get the SYCLR01 unique*/
    if (SQLCA.VAGen_SQLCODE == 100) /* no row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        if (PG2REC.XDVCD1 == KS0LM001.KS0LM-DIV-CD
         || PG2REC.XBCCD == KS0LM001.KS0LM-DIV-CD)
          /* next sentence*/
        else
          return;
        end
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Check the life cycle effective date for GPC 02*/
  /* ------------------------------------------------------------*/
  ;
  if (VCPROD02.XGPCD == "02" /* If ftwr*/
   && VCPROD02.YPR-PROD-STAT-CD == "DS"
   && KS0LW00.KS0LW-STYLE-FND != "Y"
   && KS0LM001.KS0LM-STAT-CD != "DS")
    set PG2REC empty;
    PG2REC.XGPCD = VCPROD02.XGPCD;
    PG2REC.SY1STNBR = VCPROD02.SY1STNBR;
    PG2REC.SY2CLRID = VCPROD02.SY2CLRID;
    PG2REC.XDMCD = VCPROD02.XDMCD;
    KS0L-11256(); /* get the SYCLR01 unique*/
    if (SQLCA.VAGen_SQLCODE == 100) /* no row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        XX0XS01();
        KS0LW00.KS0LW-DATE-WORK = XX0XW01.XX0XWDAT - 00010000;
        if (PG2REC.PG-CURR-XLC-CD == PG2REC.XLCCD1)
          if (PG2REC.SY2CEDT1 < KS0LW00.KS0LW-DATE-WORK)
            return;
          end
        else
          if (PG2REC.PG-CURR-XLC-CD == PG2REC.XLCCD2)
            if (PG2REC.SY2CEDT2 < KS0LW00.KS0LW-DATE-WORK)
              return;
            end
          else
            if (PG2REC.PG-CURR-XLC-CD == PG2REC.XLCCD3)
              if (PG2REC.SY2CEDT3 < KS0LW00.KS0LW-DATE-WORK)
                return;
              end
            else
              if (PG2REC.PG-CURR-XLC-CD == PG2REC.XLCCD4)
                if (PG2REC.SY2CEDT4 < KS0LW00.KS0LW-DATE-WORK)
                  return;
                end
                ;
              end
            end
          end
        end
      end
    end
  end
  ;
  if (KS0LM001.KS0LM-FEAT-CD > " ") /* If feature code entered*/
    KS0LW00.KS0LW-IX1 = 1; /* Initialize index*/
    KS0LW00.KS0LW-PRBM-FND = "N"; /* Problem found switch*/
    while (KS0LW00.KS0LW-IX1 <= 25)
      if (KS0LM001.KS0LM-FEAT-CD == KS0LW00.KS0LW-PRBM[KS0LW-IX1])
        KS0LW00.KS0LW-PRBM-FND = "Y";
        KS0LW00.KS0LW-IX1 = 25;
      end
      ;
      KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 + 1;
    end
    ;
    if (KS0LW00.KS0LW-PRBM-FND == "N") /* Problem not found*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (KS0LW01.KS0LW-TEAM-CD > " ") /* If team code entered*/
    if (VCPROD02.KS-TEAM-CD > " ") /* If override team exists*/
      if (VCPROD02.KS-TEAM-CD == KS0LW01.KS0LW-TEAM-CD)
                                  /* Continue on*/
      else
        ;
        return; /* Return to previous process*/
        ;
      end
    else
      if (VHSNBR01.KS-TEAM-CD > " ") /* If HS team code exists*/
        if (VHSNBR01.KS-TEAM-CD == KS0LW01.KS0LW-TEAM-CD)
                                  /* Continue on*/
        else
          ;
          return; /* Return to previous process*/
          ;
        end
      else
        ;
        return; /* Return to previous process*/
        ;
      end
    end
  end
  ;
  if (KS0LW01.KS0LW-QOTA-CAT-CD > " ") /* If quota cat code enter*/
    if (VHSNBR01.YQT-QOTA-CAT-CD == KS0LW01.KS0LW-QOTA-CAT-CD)
                                  /* Continue on*/
    else
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  if (KS0LM001.KS0LM-US-MADE-FL == "N"
   && VCPROD02.KS-XCT-ORIG-CD[1] == "USA"
   && VCPROD02.KS-XCT-ORIG-CD[2] == " ")
    ;
    return;
    ;
  end
  ;
  KS0LW00.KS0LW-COUNTER = KS0LW00.KS0LW-COUNTER + 1; /* Increment line count*/
  ;
  if (KS0LW00.KS0LW-IXM > 23) /* Need to start new pg*/
    KS0LW00.KS0LW-PAGE-IS-FULL = "Y";
  else
    ;
    KS0LW01.XGPCD[KS0LW-IXM] = VCPROD02.XGPCD; /* GPC code*/
    KS0LW01.KS0LW-DTL-SESN-CD[KS0LW-IXM] = VCPROD02.XSECD;
    KS0LW01.KS0LW-DTL-SESN-YR[KS0LW-IXM] = VCPROD02.XSNYR;
    if (VCPROD02.SY1STNBR > " ")
      KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IXM] = VCPROD02.SY1STNBR;
                                   /* Style*/
    else
      KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IXM] = VCPROD02.KS-XPRMT-STY-NBR;
    end
    KS0LW01.KS0LW-DTL-XPRMT-STY[KS0LW-IXM] = VCPROD02.KS-XPRMT-STY-NBR;
    if (VCPROD02.XGPCD == "02") /* If footwear*/
      KS0LW01.KS0LW-DTL-COLR-CD-ID[KS0LW-IXM] = VCPROD02.SY2CLRID;
      KS0LW01.KS0LW-DTL-DIM-CD[KS0LW-IXM] = VCPROD02.XDMCD;
    else
      if (KS0LW01.KS0LW-DTL-COLR-CD-ID[KS0LW-IXM] == " ")
        KS0LW01.KS0LW-DTL-COLR-CD-ID[KS0LW-IXM] = VCPROD02.SY2CLRID;
      end
    end
    if (KS0LW00.KS0LW-PRESEL == "Y")
      KS0LW01.KS0LW-SEL[KS0LW-IXM] = "S";
    else
      KS0LW01.KS0LW-SEL[KS0LW-IXM] = " ";
    end
    KS0LW01.KS0LW-DTL-STY-TYP[KS0LW-IXM] = VCPROD02.YKS-STY-TYP-CD;
    KS0LW01.KS0LW-DTL-SHORT-STY-NM[KS0LW-IXM] = VCPROD02.KS-SHORT-STY-NM; /* Style Description*/
    if (VCPROD02.KS-HTS-CPTR-CD > " ") /* If HS number exists*/
      KS0LW01.KS0LW-DTL-HTS-CPTR-CD[KS0LW-IXM] = VCPROD02.KS-HTS-CPTR-CD;
      KS0LW01.KS0LW-DTL-HTS-HDG-CD[KS0LW-IXM] = VCPROD02.KS-HTS-HDG-CD;
      KS0LW01.KS0LW-DTL-HTS-1ST-SHDG-CD[KS0LW-IXM] = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KS0LW01.KS0LW-DTL-HTS-2ND-SHDGCD1[KS0LW-IXM] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
      KS0LW01.KS0LW-DTL-HTS-2ND-SHDGCD2[KS0LW-IXM] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
      KS0LW01.KS0LW-DTL-HTS-STAT-CD[KS0LW-IXM] = VCPROD02.KS-HTS-STAT-CD;
      ;
      if (KS0LM001.KS0LM-HTS-NBR == " ")
        KS0LW01.KS0LW-HTS-NBR = " ";
      else
        KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR;
      end
    end
    KS0LW01.KS0LW-DTL-RULE-NBR[KS0LW-IXM] = VCPROD02.KS-RULE-NBR;
    KS0LW01.KS0LW-PRBM-NBR[KS0LW-IXM] = VCPROD02.KS-PRBM-NBR;
    KS0LW01.KS0LW-DTL-PRBM-CD[KS0LW-IXM] = KS0LW01.KS0LW-PRBM-CD;
    if (KS0LM001.KS0LM-FEAT-CD == " ")
      KS0LW01.KS0LW-PRBM-CD = " ";
    else
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD;
    end
    KS0LW01.KS0LW-TEXT-NBR[KS0LW-IXM] = VCPROD02.KS-TXT-NBR;
                                   /* Save text*/
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
end // end KS0L-11255

// Select unique VSYCLR01 row
Function KS0L-11256()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11256"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11256

// Select VHSNBR01 set
Function KS0L-11257()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSNBR01 empty; /* Clear row storage area*/
  ;
  VHSNBR01.KS-HTS-CPTR-CD = KS0LW00.KS0LW-HTS-CPTR; /* Chapter cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0LW00.KS0LW-HTS-HDG; /* Chapter hdg*/
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0LW00.KS0LW-HTS-1ST-SHDG;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0LW00.KS0LW-HTS-2ND-SHDG-1;
  ;
  try
    call "IO6120" ("S1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11256"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11257

// Fetch  VHSNBR01 row
Function KS0L-11258()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6120" ("N1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11257"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11258

// Close  VHSNBR01 set
Function KS0L-11259()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6120" ("C1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11258"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11259

// Call KS1120 close
Function KS0L-11260()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  set KSAREC empty;
  KSAREC.KSA-TASK = KS0LW00.KS0LW-CLOSE;
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11260"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11260

// Call IO6130 close
Function KS0L-11270()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0LW00.KS0LW-CLOSE;
  ;
  try
    call "VCPROD02" (KSAREC, SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* close tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11270"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11270

// Call KS1120 using Market Reg
Function KS0L-11280()
  /* ------------------------------------------------------------*/
  /* Move values from VKSAUD01 to VCPROD01 for KS1120 call*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.XDR-PROD-REG-CD = KS0LM001.KS0LM-REG-CD;
  KSAREC.KSA-TASK = "SC";
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11280"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11280

// Add page to temporary storage
Function KS0L-11300()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW01.XXXTSLEN = KS0LW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set KS0LW01 empty; /* M001 display storage*/
    ;
    KS0LW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11300"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-11300

// Format and display map 1
Function KS0L-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  if (KS0LW00.KS0LW-VCPROD01-ADDED == "Y" /* If data base updated*/
   || KS0LW00.KS0LW-VCPROD01-UPD == "Y") 
    KSWREC.XXXMSGNO = 1;
    KS0LW00.KS0LW-VCPROD01-ADDED = "N";
    KS0LW00.KS0LW-VCPROD01-UPD = "N";
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0LW00.KS0LW-SWF == "Y") /* Map must be formatted*/
      KS0L-12100(); /* Format the data on the map*/
    end
    ;
  end
  ;
  if (KS0LM001.XXXTSPAG > 0) /* If page number exists*/
    set KS0LM001.XXXTSPAG skip;
    set KS0LM001.TA5TSQIX skip;
  end
  ;
  if (KS0LM001.KS0LM-PRDCTN-MO == "00")
    KS0LM001.KS0LM-PRDCTN-MO = " ";
  end
  if (KS0LM001.KS0LM-DLVR-MO == "00")
    KS0LM001.KS0LM-DLVR-MO = " ";
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0LM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0LM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0LM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0LM001.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0LM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  ;
  converse KS0LM001 ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0LM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0LM001.CAITEM; /* Application data*/
  ;
  ;
end // end KS0L-12000

// Format the display data
Function KS0L-12100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ----------------------------------------------------------*/
  ;
  set KS0LM001 initial; /* M001 input/output area*/
  ;
  KS0LW00.KS0LW-SWF = "N"; /* Format the map switch*/
  KS0LW00.KS0LW-DATA-CHANGED = "N"; /* Data changed switch*/
  KS0LM001.KS0LM-PRE-SEL = KS0LW00.KS0LW-PRESEL;
  ;
  /* ------------------------------------------------------------*/
  /* If the page in storage is not the page to be displayed,*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW01.KS0LW-SAVE-PG-NBR > 0 /* If save page exists*/
   && KS0LW00.TA5TSQIX > 0)         /* and pages exist*/
    KS0LW00.XXXTSPAG = KS0LW01.KS0LW-SAVE-PG-NBR;
    TA5REC.TA5APPID = "KS0L";
  end
  ;
  if (KS0LW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (KS0LW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (KS0LW00.KS0LW-SWU == "Y") /* Current page was changed*/
        ;
        KS0L-12110(); /* Update temporary storage page*/
        ;
        KS0LW00.KS0LW-SWU = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (KS0LW00.XXXTSPAG > KS0LW00.TA5TSQIX) /* Desired greater highest*/
        KS0LW00.XXXTSPAG = KS0LW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      KS0L-12120(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0LM001.XXXLITPG skip; /* "PAGE" literal*/
    KS0LM001.XXXTSPAG = KS0LW00.XXXTSPAG; /* Current page*/
    set KS0LM001.XXXLITOF skip; /* "OF" literal*/
    KS0LM001.TA5TSQIX = KS0LW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-FNC == " ") /* If first time through*/
    set KS0LM001.KS0LM-GPC-CD cursor; /* Position cursor*/
    KS0LW01.KS0LW-US-MADE-FLAG = "N";
    KS0LW01.KS0LW-EXP-STYLE = "N";
  else
    if (KS0LW01.KS0LW-SAVE-INDEX > 0)
      KS0LW00.KS0LW-IX1 = KS0LW01.KS0LW-SAVE-INDEX;
      if (KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX1] > " "
       && KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX1] == 
      KS0LW01.KS0LW-SAVE-STY-CS)
        set KS0LM001.KS0LM-SEL[KS0LW-IX1] cursor; /* Position cursor*/
        KS0LW01.KS0LW-SAVE-INDEX = 0;
        KS0LW01.KS0LW-SAVE-PG-NBR = 0;
        KS0LW01.KS0LW-SAVE-MAX-PG = 0;
        KS0LW01.KS0LW-SAVE-STY-CS = " ";
        KS0LW00.KS0LW-SWU = "Y";
      else
        if (KS0LW01.KS0LW-DTL-STY-NBR[1] > " ") /* If detail lines exist*/
          set KS0LM001.KS0LM-SEL[1] cursor; /* Position cursor*/
        else
          set KS0LM001.KS0LM-GPC-CD cursor; /* Position cursor*/
        end
      end
    else
      if (KS0LW01.KS0LW-DTL-STY-NBR[1] > " ") /* If detail lines exist*/
        set KS0LM001.KS0LM-SEL[1] cursor; /* Position cursor*/
      else
        set KS0LM001.KS0LM-GPC-CD cursor; /* Position cursor*/
      end
    end
  end
  ;
  KS0LM001.KS0LM-PRE-SEL = KS0LW00.KS0LW-PRESEL;
  KS0LM001.KS0LM-GPC-CD = KS0LW01.KS0LW-GPC; /* GPC code*/
  KS0LM001.KS0LM-GPC-DESC = KS0LW01.KS0LW-GPC-DESC; /* GPC desc*/
  KS0LM001.KS0LM-STY-NBR = KS0LW01.KS0LW-STYLE; /* Style number*/
  if (KS0LW01.KS0LW-GPC == "02")
    KS0LM001.KS0LM-COLR-CD-ID = KS0LW01.KS0LW-COLR-CD-ID; /* Color cd*/
    KS0LM001.KS0LM-DIM-CD = KS0LW01.KS0LW-DIM-CD; /* Dimension code*/
  else
    KS0LM001.KS0LM-COLR-CD-ID = "   ";
    KS0LM001.KS0LM-DIM-CD = "  ";
    KS0LW01.KS0LW-COLR-CD-ID = "   ";
    KS0LW01.KS0LW-DIM-CD = "  ";
  end
  KS0LM001.KS0LM-SESN-CD = KS0LW01.KS0LW-SESN-CD; /* Season code*/
  if (KS0LW01.KS0LW-SESN-YR == "    ")
    KS0LW01.KS0LW-SESN-YY = "  ";
    KS0LM001.KS0LM-SESN-YR-RNG = "  ";
  else
    KS0LM001.KS0LM-SESN-YR-RNG = KS0LW01.KS0LW-SESN-YY; /* Season year*/
  end
  if (KS0LW01.KS0LW-POIDT > " ") /* If PO ID date exists*/
    KS0LM001.KS0LM-PRDCTN-YR = KS0LW01.KS0LW-PRDCTN-YR;
  else
    KS0LW01.KS0LW-PRDCTN-YR = "  ";
    KS0LM001.KS0LM-PRDCTN-YR = "  ";
  end
  if (KS0LW01.KS0LW-PRDCTN-MO-1 == " "
   && KS0LW01.KS0LW-PRDCTN-MO > " ")
    KS0LW01.KS0LW-PRDCTN-MO-1 = "0";
  end
  KS0LM001.KS0LM-PRDCTN-MO = KS0LW01.KS0LW-PRDCTN-MO; /* PO ID*/
  if (KS0LW01.KS0LW-DLVR-MO-1 == " "
   && KS0LW01.KS0LW-DLVR-MO > " ")
    KS0LW01.KS0LW-DLVR-MO-1 = "0";
  end
  KS0LM001.KS0LM-DLVR-MO = KS0LW01.KS0LW-DLVR-MO; /* PO ID*/
  KS0LM001.KS0LM-FCTY-CD = KS0LW01.KS0LW-FCTY-CD; /* Factory code*/
  KS0LM001.KS0LM-ORIG-CD = KS0LW01.KS0LW-ORIG-CD; /* Origin code*/
  KS0LM001.KS0LM-US-MADE-FL = KS0LW01.KS0LW-US-MADE-FLAG;
  KS0LM001.KS0LM-ORIG-DESC = KS0LW01.KS0LW-ORIG-DESC; /* Origin desc*/
  KS0LM001.KS0LM-HTS-NBR = KS0LW01.KS0LW-HTS-NBR; /* HS number*/
  KS0LM001.KS0LM-RULE-NBR = KS0LW01.KS0LW-RULE-NBR-MAP; /* Ruling nbr*/
  KS0LM001.KS0LM-DIV-CD = KS0LW01.KS0LW-DIV-CD; /* Division code*/
  KS0LM001.KS0LM-QOTA-CAT-CD = KS0LW01.KS0LW-QOTA-CAT-CD; /* Quota*/
  KS0LM001.KS0LM-TEAM-CD = KS0LW01.KS0LW-TEAM-CD; /* Team code*/
  KS0LM001.KS0LM-FEAT-CD = KS0LW01.KS0LW-PRBM-CD; /* Feature code*/
  KS0LM001.KS0LM-STAT-CD = KS0LW01.KS0LW-STAT; /* Status code*/
  KS0LM001.KS0LM-EXP-STYLE-FL = KS0LW01.KS0LW-EXP-STYLE;
  KS0LM001.KS0LM-STY-TYP-CD[1] = KS0LW01.KS0LW-STY-TYP-CD1;
  KS0LM001.KS0LM-STY-TYP-CD[2] = KS0LW01.KS0LW-STY-TYP-CD2;
  KS0LM001.KS0LM-STY-TYP-CD[3] = KS0LW01.KS0LW-STY-TYP-CD3;
  KS0LM001.KS0LM-REG-CD = KS0LW01.KS0LW-REG-CD;
  ;
  if (KS0LW00.KS0LW-FNC == "I") /* If inquiry only*/
    set KS0LM001.KS0LM-GPC-CD cursor; /* Position cursor*/
  else
    if (COMMAREA.CACHGFL == "Y") /* If change flag = yes*/
      set KS0LM001.KS0LM-PF14 skip; /* PF14 chg key*/
      KS0LW00.KS0LW-FNC = "C";
      set KS0LM001.KS0LM-DTL-SEL-FIELD[1] skip;
      set KS0LM001.KS0LM-DTL-SEL-FIELD[2] skip;
    else
      set KS0LM001.KS0LM-GPC-CD cursor; /* Position cursor*/
    end
  end
  ;
  KS0LW00.KS0LW-IXM = 1; /* Initialize line index*/
  while (KS0LW00.KS0LW-IXM <= 22) /* Until screen is full*/
    ;
    KS0LM001.KS0LM-SEL[KS0LW-IXM] = KS0LW01.KS0LW-SEL[KS0LW-IXM];
    KS0LM001.KS0LM-DTL-STY-NBR[KS0LW-IXM] = KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IXM];
    KS0LM001.KS0LM-DTL-COLR-CD-ID[KS0LW-IXM] = KS0LW01.KS0LW-DTL-COLR-CD-ID[KS0LW-IXM];
    KS0LM001.KS0LM-DTL-DIM-CD[KS0LW-IXM] = KS0LW01.KS0LW-DTL-DIM-CD[KS0LW-IXM];
    KS0LM001.KS0LM-DTL-SH-STY-NM[KS0LW-IXM] = KS0LW01.KS0LW-DTL-SHORT-STY-NM[KS0LW-IXM];
    KS0LM001.KS0LM-DTL-MULT-FL[KS0LW-IXM] = KS0LW01.KS0LW-DTL-MULT-FL[KS0LW-IXM];
    ;
    if (KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IXM] > " " /* If line exists*/
     && KS0LW00.KS0LW-FNC == "C")                 
      set KS0LM001.KS0LM-SEL[KS0LW-IXM] normal; /* Set selection normal*/
    end
    ;
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  KS0LW01.KS0LW-SAVE-INDEX = 0; /* Clear save index*/
  KS0LW01.KS0LW-SAVE-PG-NBR = 0;
  KS0LW01.KS0LW-SAVE-MAX-PG = 0;
  KS0LW00.KS0LW-SAVE-INDEX = 0; /* Clear save index*/
  KS0LW00.KS0LW-SAVE-PG-NBR = 0;
  KS0LW00.KS0LW-SAVE-MAX-PG = 0;
  ;
  ;
end // end KS0L-12100

// Update temporary storage page
Function KS0L-12110()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-12110

// Read temporary storage page
Function KS0L-12120()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW01.XXXTSLEN = KS0LW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0LW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA5REC.TA5RTNCD == 0 /* and normal return code*/
     || TA5REC.TA5RTNCD == 7) /* or EOF return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-12120

// Check the attention identifier
Function KS0L-13000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0LW00.KS0LW-SWR == "Y") /* Request for data*/
      set KS0LW01 empty; /* M001 display storage*/
    end
    ;
    KS0LW00.KS0LW-SWF = "Y"; /* Format the map switch*/
    KS0LW00.KS0LW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      KS0L-11100(); /* Purge temporary storage*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
    else
      ;
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      set KS0LM001.CATOAP cursor, bold; /* Highlight*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0LM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (KS0LW00.KS0LW-KS0C-SWITCH == "Y" /* If from KS0C*/
       && KSWREC.XGPCD > " ")              /* and GPC passed*/
        COMMAREA.CATOAP = "KS0C"; /* TO application*/
      else
        COMMAREA.CATOAP = "KS0A"; /* TO application*/
      end
    end
    ;
    KS0L-11100(); /* Purge temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* Chg flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
      ;
      exit stack; /* Exit to display map*/
    else
      if (KS0LW00.KS0LW-KS0C-SWITCH == "Y" /* or from KS0C*/
       && KSWREC.KS-RULE-NBR > " ")        /* and rule number exists*/
        KSWREC.XXXPRCNM = "13000"; /* Module identification*/
        converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
        ;
        exit stack; /* Exit to display map*/
      end
    end
    if (KS0LW01.KS0LW-GPC == "02" /* Footwear GPC code*/
     && COMMAREA.CACLVL[2] == "N")
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(41); /* Not authorized message*/
      ;
      exit stack; /* Exit to display map*/
    end
    if (KS0LW01.KS0LW-GPC == "03" /* Apparel GPC code*/
     && COMMAREA.CACLVL[3] == "N")
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(42); /* Not authorized message*/
      ;
      exit stack; /* Exit to display map*/
    end
  end
  ;
  ;
end // end KS0L-13000

// Reset highlighted fields
Function KS0L-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0LM001.KS0LM-GPC-CD initialAttributes; /* GPC code*/
  set KS0LM001.KS0LM-HTS-NBR initialAttributes; /* HS number*/
  set KS0LM001.KS0LM-STY-NBR initialAttributes; /* Style code*/
  set KS0LM001.KS0LM-COLR-CD-ID initialAttributes; /* Color code id*/
  set KS0LM001.KS0LM-DIM-CD initialAttributes; /* Dimension code*/
  set KS0LM001.KS0LM-RULE-NBR initialAttributes; /* Ruling number*/
  set KS0LM001.KS0LM-DIV-CD initialAttributes; /* Division code*/
  set KS0LM001.KS0LM-SESN-CD initialAttributes; /* Season code*/
  set KS0LM001.KS0LM-SESN-YR-RNG initialAttributes; /* Season year range*/
  set KS0LM001.KS0LM-QOTA-CAT-CD initialAttributes; /* Quota cat code*/
  set KS0LM001.KS0LM-TEAM-CD initialAttributes; /* Team code*/
  set KS0LM001.KS0LM-PRDCTN-YR initialAttributes; /* PO ID production year*/
  set KS0LM001.KS0LM-PRDCTN-MO initialAttributes; /* PO ID production month*/
  set KS0LM001.KS0LM-DLVR-MO initialAttributes; /* PO ID deliver month*/
  set KS0LM001.KS0LM-FCTY-CD initialAttributes; /* Factory code*/
  set KS0LM001.KS0LM-ORIG-CD initialAttributes; /* Origin code*/
  set KS0LM001.KS0LM-FEAT-CD initialAttributes; /* Feature code*/
  set KS0LM001.KS0LM-STAT-CD initialAttributes; /* Product status code*/
  set KS0LM001.KS0LM-US-MADE-FL initialAttributes; /* US made flag*/
  set KS0LM001.KS0LM-EXP-STYLE-FL initialAttributes; /* Experimental style flag*/
  set KS0LM001.KS0LM-STY-TYP-CD[1] initialAttributes; /* Style Type Code 1*/
  set KS0LM001.KS0LM-STY-TYP-CD[2] initialAttributes; /* Style Type Code 2*/
  set KS0LM001.KS0LM-STY-TYP-CD[3] initialAttributes; /* Style Type Code 3*/
  set KS0LM001.KS0LM-REG-CD initialAttributes; /* Market Reg*/
  set KS0LM001.XXXTSPAG initialAttributes; /* Page number*/
  ;
  KS0LW00.KS0LW-IXM = 1; /* Initialize line index*/
  while (KS0LW00.KS0LW-IXM <= 22) /* Until end of lines*/
    ;
    if (KS0LM001.KS0LM-DTL-STY-NBR[KS0LW-IXM] > " " /* If style exists*/
     && KS0LW00.KS0LW-FNC == "C")                  
      set KS0LM001.KS0LM-SEL[KS0LW-IXM] normal; /* Reset select flag*/
    end
    ;
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  set KS0LM001.CATOAP initialAttributes; /* TO application*/
  set KS0LM001.CAITEM initialAttributes; /* Application data*/
  ;
  if (KS0LM001.KS0LM-GPC-CD == "?"        /* if any ? entered*/
   || KS0LM001.KS0LM-REG-CD == "?"        /* if ? in market reg field*/
   || KS0LM001.KS0LM-DIV-CD == "?"        /* if ? in division code field*/
   || KS0LM001.KS0LM-STY-TYP-CD[1] == "?" /* if ? in dtyle type  field*/
   || KS0LM001.KS0LM-STY-TYP-CD[2] == "?" /* if ? in dtyle type  field*/
   || KS0LM001.KS0LM-STY-TYP-CD[3] == "?" /* if ? in dtyle type  field*/
   || KS0LM001.KS0LM-SESN-CD == "?"       /* if ? in season code field*/
   || KS0LM001.KS0LM-QOTA-CAT-CD == "?"   /* if ? in quota code field*/
   || KS0LM001.KS0LM-ORIG-CD == "?"       /* if ? in origin code field*/
   || KS0LM001.KS0LM-FEAT-CD == "?"       /* if ? in problem code field*/
   || KS0LM001.KS0LM-STAT-CD == "?")      /* if ? in status code field*/
    if (KS0LM001.KS0LM-GPC-CD == "?") /* if any ? entered*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end
      ;
       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-GPC-CD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        KS0LM001.KS0LM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
      else
        KS0LM001.KS0LM-GPC-CD = " "; /* clear fields*/
        KS0LM001.KS0LM-GPC-DESC = " ";
      end
      set KS0LM001.KS0LM-GPC-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-REG-CD == "?") /* if any ? entered*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "         MARKET REGION       "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDR01(); /* perform market reg window*/
      end
      ;
       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the Market     **/
       /* *  region table code to the map.                        **/
       /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-REG-CD = XDRTBL.XDR-PROD-REG-CD[XX0XWPIX];
        KS0LM001.KS0LM-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[XX0XWPIX];
      else
        KS0LM001.KS0LM-REG-CD = " "; /* clear fields*/
        KS0LM001.KS0LM-REG-SDESC = " ";
      end
      set KS0LM001.KS0LM-REG-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-DIV-CD == "?") /* if ? in division code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "         DIVISION CODE      "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDV02(); /* perform division code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the season     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-DIV-CD = XDVTBL.XDVCD[XX0XWPIX]; /* move code*/
      else
        KS0LM001.KS0LM-DIV-CD = " "; /* clear fields*/
      end
      set KS0LM001.KS0LM-DIV-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-SESN-CD == "?") /* if ? in season code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                SEASON      "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSE01(); /* perform season code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the season     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-SESN-CD = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      else
        KS0LM001.KS0LM-SESN-CD = " "; /* clear fields*/
      end
      set KS0LM001.KS0LM-SESN-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-QOTA-CAT-CD == "?") /* if ? in quota code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "     QUOTA CATEGORY CODE    "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYQT01(); /* perform quota code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the quota      **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-QOTA-CAT-CD = YQTTBL.YQT-QOTA-CAT-CD[XX0XWPIX];
      else
        KS0LM001.KS0LM-QOTA-CAT-CD = " "; /* clear fields*/
      end
      set KS0LM001.KS0LM-QOTA-CAT-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-ORIG-CD == "?") /* if ? in origin code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-ORIG-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        KS0LM001.KS0LM-ORIG-DESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move desc*/
      else
        KS0LM001.KS0LM-ORIG-CD = " "; /* clear fields*/
        KS0LM001.KS0LM-ORIG-DESC = " ";
      end
      set KS0LM001.KS0LM-ORIG-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-FEAT-CD == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        CUSTOMS FEATURE     "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-FEAT-CD = YKPTBL.YKP-PRBM-CD[XX0XWPIX]; /* move code*/
      else
        KS0LM001.KS0LM-FEAT-CD = " "; /* clear fields*/
      end
      set KS0LM001.KS0LM-FEAT-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-STY-TYP-CD[1] == "?") /* if ? in style type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "   CUSTOMS STYLE TYPE CODE  "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform style type window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-STY-TYP-CD[1] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0LM001.KS0LM-STY-TYP-CD[1] = " "; /* clear fields*/
      end
      set KS0LM001.KS0LM-STY-TYP-CD[1] cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-STY-TYP-CD[2] == "?") /* if ? in style type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "   CUSTOMS STYLE TYPE CODE  "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform style type window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-STY-TYP-CD[2] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0LM001.KS0LM-STY-TYP-CD[2] = " "; /* clear fields*/
      end
      set KS0LM001.KS0LM-STY-TYP-CD[2] cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-STY-TYP-CD[3] == "?") /* if ? in style type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "   CUSTOMS STYLE TYPE CODE  "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform style type window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-STY-TYP-CD[3] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0LM001.KS0LM-STY-TYP-CD[3] = " "; /* clear fields*/
      end
      set KS0LM001.KS0LM-STY-TYP-CD[3] cursor; /* Set cursor*/
    end
    ;
    if (KS0LM001.KS0LM-STAT-CD == "?") /* if ? in status code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "         CUSTOMS STATUS CODE"; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPR01(); /* perform status code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the status     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM001.KS0LM-STAT-CD = YPRTBL.YPR-PROD-STAT-CD[XX0XWPIX]; /* move code*/
      else
        KS0LM001.KS0LM-STAT-CD = " "; /* clear fields*/
      end
      set KS0LM001.KS0LM-STAT-CD cursor; /* Set cursor*/
    end
    ;
    KS0LW00.KS0LW-SWR = "N"; /* Reset request for data switch*/
    KS0LW00.KS0LW-SWF = "N"; /* Reset format the map switch*/
    ;
    converseLib.clearScreen();
     /* Restore the original map*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0L-14000

// Verify the entered data
Function KS0L-15000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "15000"; /* Module identification*/
    set KS0LM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    exit stack;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    KS0L-15100(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* Otherwise, verify data in the heading.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0LM001.KS0LM-GPC-CD != KS0LW01.KS0LW-GPC /* If any data changed*/
     || KS0LM001.KS0LM-PRE-SEL != KS0LW00.KS0LW-PRESEL
     || KS0LM001.KS0LM-STY-NBR != KS0LW01.KS0LW-STYLE
     || KS0LM001.KS0LM-SESN-CD != KS0LW01.KS0LW-SESN-CD
     || KS0LM001.KS0LM-SESN-YR-RNG != KS0LW01.KS0LW-SESN-YY
     || KS0LM001.KS0LM-ORIG-CD != KS0LW01.KS0LW-ORIG-CD
     || KS0LM001.KS0LM-US-MADE-FL != KS0LW01.KS0LW-US-MADE-FLAG
     || KS0LM001.KS0LM-HTS-NBR != KS0LW01.KS0LW-HTS-NBR
     || KS0LM001.KS0LM-RULE-NBR != KS0LW01.KS0LW-RULE-NBR-MAP
     || KS0LM001.KS0LM-DIV-CD != KS0LW01.KS0LW-DIV-CD
     || KS0LM001.KS0LM-QOTA-CAT-CD != KS0LW01.KS0LW-QOTA-CAT-CD
     || KS0LM001.KS0LM-TEAM-CD != KS0LW01.KS0LW-TEAM-CD
     || KS0LM001.KS0LM-FEAT-CD != KS0LW01.KS0LW-PRBM-CD
     || KS0LM001.KS0LM-STAT-CD != KS0LW01.KS0LW-STAT
     || KS0LM001.KS0LM-EXP-STYLE-FL != KS0LW01.KS0LW-EXP-STYLE
     || KS0LM001.KS0LM-COLR-CD-ID != KS0LW01.KS0LW-COLR-CD-ID
     || KS0LM001.KS0LM-DIM-CD != KS0LW01.KS0LW-DIM-CD
     || KS0LM001.KS0LM-PRDCTN-YR != KS0LW01.KS0LW-PRDCTN-YR
     || KS0LM001.KS0LM-PRDCTN-MO != KS0LW01.KS0LW-PRDCTN-MO
     || KS0LM001.KS0LM-DLVR-MO != KS0LW01.KS0LW-DLVR-MO
     || KS0LM001.KS0LM-FCTY-CD != KS0LW01.KS0LW-FCTY-CD
     || KS0LM001.KS0LM-STY-TYP-CD[1] != KS0LW01.KS0LW-STY-TYP-CD1
     || KS0LM001.KS0LM-STY-TYP-CD[2] != KS0LW01.KS0LW-STY-TYP-CD2
     || KS0LM001.KS0LM-STY-TYP-CD[3] != KS0LW01.KS0LW-STY-TYP-CD3
     || KS0LM001.KS0LM-REG-CD != KS0LW01.KS0LW-REG-CD)
      KS0LW00.KS0LW-SAV-EQUIP-GPC = " ";
      KS0L-11100(); /* Purge temp storage*/
      KS0LW01.KS0LW-GPC = KS0LM001.KS0LM-GPC-CD;
                                   /* If any data changed*/
      KS0LW00.KS0LW-PRESEL = KS0LM001.KS0LM-PRE-SEL;
      KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
      KS0LW01.KS0LW-SESN-CD = KS0LM001.KS0LM-SESN-CD;
      KS0LW01.KS0LW-SESN-YY = KS0LM001.KS0LM-SESN-YR-RNG;
      KS0LW01.KS0LW-ORIG-CD = KS0LM001.KS0LM-ORIG-CD;
      KS0LW01.KS0LW-US-MADE-FLAG = KS0LM001.KS0LM-US-MADE-FL;
      KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR;
      KS0LW01.KS0LW-RULE-NBR-MAP = KS0LM001.KS0LM-RULE-NBR;
      KS0LW01.KS0LW-DIV-CD = KS0LM001.KS0LM-DIV-CD;
      KS0LW01.KS0LW-QOTA-CAT-CD = KS0LM001.KS0LM-QOTA-CAT-CD;
      KS0LW01.KS0LW-TEAM-CD = KS0LM001.KS0LM-TEAM-CD;
      KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD;
      KS0LW01.KS0LW-STAT = KS0LM001.KS0LM-STAT-CD;
      KS0LW01.KS0LW-EXP-STYLE = KS0LM001.KS0LM-EXP-STYLE-FL;
      KS0LW01.KS0LW-COLR-CD-ID = KS0LM001.KS0LM-COLR-CD-ID;
      KS0LW01.KS0LW-DIM-CD = KS0LM001.KS0LM-DIM-CD;
      KS0LW01.KS0LW-PRDCTN-YR = KS0LM001.KS0LM-PRDCTN-YR;
      KS0LW01.KS0LW-PRDCTN-MO = KS0LM001.KS0LM-PRDCTN-MO;
      KS0LW01.KS0LW-DLVR-MO = KS0LM001.KS0LM-DLVR-MO;
      KS0LW01.KS0LW-FCTY-CD = KS0LM001.KS0LM-FCTY-CD;
      KS0LW01.KS0LW-STY-TYP-CD1 = KS0LM001.KS0LM-STY-TYP-CD[1];
      KS0LW01.KS0LW-STY-TYP-CD2 = KS0LM001.KS0LM-STY-TYP-CD[2];
      KS0LW01.KS0LW-STY-TYP-CD3 = KS0LM001.KS0LM-STY-TYP-CD[3];
      KS0LW01.KS0LW-REG-CD = KS0LM001.KS0LM-REG-CD;
      set KS0LM001 initial; /* Clear map*/
      KS0LM001.KS0LM-GPC-CD = KS0LW01.KS0LW-GPC;
      KS0LM001.KS0LM-PRE-SEL = KS0LW00.KS0LW-PRESEL;
      KS0LM001.KS0LM-STY-NBR = KS0LW01.KS0LW-STYLE;
      KS0LM001.KS0LM-SESN-CD = KS0LW01.KS0LW-SESN-CD;
      KS0LM001.KS0LM-SESN-YR-RNG = KS0LW01.KS0LW-SESN-YY;
      KS0LM001.KS0LM-ORIG-CD = KS0LW01.KS0LW-ORIG-CD;
      KS0LM001.KS0LM-US-MADE-FL = KS0LW01.KS0LW-US-MADE-FLAG;
      KS0LM001.KS0LM-HTS-NBR = KS0LW01.KS0LW-HTS-NBR;
      KS0LM001.KS0LM-RULE-NBR = KS0LW01.KS0LW-RULE-NBR-MAP;
      KS0LM001.KS0LM-DIV-CD = KS0LW01.KS0LW-DIV-CD;
      KS0LM001.KS0LM-QOTA-CAT-CD = KS0LW01.KS0LW-QOTA-CAT-CD;
      KS0LM001.KS0LM-TEAM-CD = KS0LW01.KS0LW-TEAM-CD;
      KS0LM001.KS0LM-FEAT-CD = KS0LW01.KS0LW-PRBM-CD;
      KS0LM001.KS0LM-STAT-CD = KS0LW01.KS0LW-STAT;
      KS0LM001.KS0LM-EXP-STYLE-FL = KS0LW01.KS0LW-EXP-STYLE;
      KS0LM001.KS0LM-COLR-CD-ID = KS0LW01.KS0LW-COLR-CD-ID;
      KS0LM001.KS0LM-DIM-CD = KS0LW01.KS0LW-DIM-CD;
      KS0LM001.KS0LM-PRDCTN-YR = KS0LW01.KS0LW-PRDCTN-YR;
      KS0LM001.KS0LM-PRDCTN-MO = KS0LW01.KS0LW-PRDCTN-MO;
      KS0LM001.KS0LM-DLVR-MO = KS0LW01.KS0LW-DLVR-MO;
      KS0LM001.KS0LM-FCTY-CD = KS0LW01.KS0LW-FCTY-CD;
      KS0LM001.KS0LM-STY-TYP-CD[1] = KS0LW01.KS0LW-STY-TYP-CD1;
      KS0LM001.KS0LM-STY-TYP-CD[2] = KS0LW01.KS0LW-STY-TYP-CD2;
      KS0LM001.KS0LM-STY-TYP-CD[3] = KS0LW01.KS0LW-STY-TYP-CD3;
      KS0LM001.KS0LM-REG-CD = KS0LW01.KS0LW-REG-CD;
      KS0LW00.KS0LW-SWR = "Y"; /* Request for data*/
      KS0LW00.KS0LW-DATA-CHANGED = "Y";
    end
    ;
    if (converseVar.eventKey not pf14) /* If PF14 not pressed*/
      KS0L-15200(); /* Verify required data*/
      ;
      if (converseVar.validationMsgNum == 0) /* If no previous errors*/
        KS0L-15300(); /* Verify the rest of the data*/
      end
      ;
      if (converseVar.validationMsgNum == 0 /* If no previous errors*/
       && converseVar.eventKey is enter)   
        KS0L-15400(); /* Verify problem code*/
      end
    end
    ;
  end
  ;
    /* ------------------------------------------------------------*/
    /* If page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.TA5TSQIX > 0) /* Page was formatted*/
    ;
    KS0LW00.KS0LW-IXM = 22; /* Initialize line index*/
    ;
    while (KS0LW00.KS0LW-IXM > 0) /* Until end of lines*/
      ;
        /* ------------------------------------------------------------*/
        /* If selection was entered and is not a "S", indicate that*/
        /* only "S" may be entered to select a line.*/
        /* ------------------------------------------------------------*/
      ;
      if (KS0LM001.KS0LM-SEL[KS0LW-IXM] != KS0LW01.KS0LW-SEL[KS0LW-IXM]
       && KS0LM001.KS0LM-SEL[KS0LW-IXM] != "S" /* and is not a "S"*/
       && KS0LM001.KS0LM-SEL[KS0LW-IXM] != " ") /* and not blank*/
        ;
        KSWREC.XXXPRCNM = "15000"; /* Module identification*/
        set KS0LM001.KS0LM-SEL[KS0LW-IXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(13); /* Only "S" may be entered*/
        ;
      end
      ;
      KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM - 1;
                                   /* Decrement line number*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0L-15000

// Verify scroll request
Function KS0L-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0LW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
   /* KS0LW00.XXXTSPAG = KS0LW00.XXXTSPAG + 1;/* Reset page number*/
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0LW00.XXXTSPAG >= KS0LW00.TA5TSQIX) /* and no more pages*/
    ;
   /* KS0LW00.XXXTSPAG = KS0LW00.XXXTSPAG - 1;/* Reset page number*/
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  if (KS0LM001.KS0LM-STY-NBR != KS0LW01.KS0LW-STYLE) /* Style changed*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0LM001.KS0LM-STY-NBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
  if (KS0LM001.KS0LM-GPC-CD != KS0LW01.KS0LW-GPC) /* GPC changed*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0LM001.KS0LM-GPC-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
  ;
end // end KS0L-15100

// Verify required data
Function KS0L-15200()
  /* ---------------------------------------------------------------*/
  /* Verify the minimum amount of key header information entered*/
  /* GPC/STYLE, GPC/SESN/YR, GPC/FEATURE, GPC/HS NUMBER, GPC/RULING*/
  /* GPC/STY-TYP*/
  /* ---------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-GPC-CD > " ") /* If GPC entered*/
    if (KS0LM001.KS0LM-GPC-CD != "02") /* If not footwear*/
      if (KS0LM001.KS0LM-STY-NBR > " ") /* If style entered*/
        ;
      else
        if (KS0LM001.KS0LM-SESN-CD > " ") /* If season code entered*/
  /*  */
  /* *********************** Y2K OUT BEGIN **********************************/
  /*  */
  /* IF KS0LM001.KS0LM-SESN-YR-RNG GT '0';/* If season year entered*/
  /*  */
  /* *********************** Y2K OUT END ************************************/
  /*  */
  /*  */
  /* *********************** Y2K IN BEGIN ***********************************/
  /*  */
          if (KS0LM001.KS0LM-SESN-YR-RNG > "  ") /* If season year entered*/
  /*  */
  /* *********************** Y2K IN END *************************************/
  /*  */
            ;
          else
            ;
            set KS0LM001.KS0LM-SESN-YR-RNG cursor, bold;
            KSWREC.XXXPRCNM = "15200"; /* Module identification*/
            converseLib.validationFailed(146); /* Data is required message*/
          end
          ;
        else
          if (KS0LM001.KS0LM-HTS-NBR > " "       /* HS nbr entered*/
           || KS0LM001.KS0LM-RULE-NBR > " "      /* Rule nbr entered*/
           || KS0LM001.KS0LM-FEAT-CD > " "       /* Feature code entered*/
           || KS0LM001.KS0LM-STAT-CD > " "       /* Status code entered*/
           || KS0LM001.KS0LM-STY-TYP-CD[1] > " " /* Style type entered*/
           || KS0LM001.KS0LM-STY-TYP-CD[2] > " " /* Style type entered*/
           || KS0LM001.KS0LM-STY-TYP-CD[3] > " ") /* Style type entered*/
          else
            set KS0LM001.KS0LM-STY-NBR cursor, bold;
            set KS0LM001.KS0LM-SESN-CD bold;
            set KS0LM001.KS0LM-SESN-YR-RNG bold;
            set KS0LM001.KS0LM-HTS-NBR bold;
            set KS0LM001.KS0LM-RULE-NBR bold;
            set KS0LM001.KS0LM-FEAT-CD bold;
            set KS0LM001.KS0LM-PRDCTN-YR bold;
            set KS0LM001.KS0LM-PRDCTN-MO bold;
            set KS0LM001.KS0LM-DLVR-MO bold;
            set KS0LM001.KS0LM-STY-TYP-CD[1] bold;
            set KS0LM001.KS0LM-STY-TYP-CD[2] bold;
            set KS0LM001.KS0LM-STY-TYP-CD[3] bold;
            KSWREC.XXXPRCNM = "15200"; /* Module identification*/
            converseLib.validationFailed(146); /* Data is required message*/
          end
        end
      end
      if (KS0LM001.KS0LM-PRDCTN-YR > "  " /* PO ID year entered*/
       || KS0LM001.KS0LM-PRDCTN-MO > "  " /* PO ID mth entered*/
       || KS0LM001.KS0LM-DLVR-MO > "  "   /* PO ID deliver mth entered*/
       || KS0LM001.KS0LM-FCTY-CD > " ")   /* Factory code entered*/
        set KS0LM001.KS0LM-PRDCTN-YR cursor, bold;
        set KS0LM001.KS0LM-PRDCTN-MO bold;
        set KS0LM001.KS0LM-DLVR-MO bold;
        set KS0LM001.KS0LM-FCTY-CD bold;
        KSWREC.XXXPRCNM = "15200"; /* Module identification*/
        converseLib.validationFailed(112); /* PO ID invalid for GPC*/
      end
    else
      if (KS0LM001.KS0LM-PRDCTN-YR >= "  "
       && KS0LW01.KS0LW-POIDT > " ")
        if (KS0LM001.KS0LM-PRDCTN-MO > "  ")
          if (KS0LM001.KS0LM-DLVR-MO > "  ")
            if (KS0LM001.KS0LM-FCTY-CD > " "
             || KS0LM001.KS0LM-ORIG-CD > " ")
            else
              set KS0LM001.KS0LM-FCTY-CD cursor, bold;
              set KS0LM001.KS0LM-ORIG-CD bold;
              KSWREC.XXXPRCNM = "15200"; /* Module identification*/
              converseLib.validationFailed(113); /* Data is required message*/
            end
          else
            set KS0LM001.KS0LM-PRDCTN-YR bold;
            set KS0LM001.KS0LM-PRDCTN-MO bold;
            set KS0LM001.KS0LM-DLVR-MO cursor, bold;
            KSWREC.XXXPRCNM = "15200"; /* Module identification*/
            converseLib.validationFailed(114); /* PO ID is missing or invalid*/
          end
        else
          set KS0LM001.KS0LM-PRDCTN-YR bold;
          set KS0LM001.KS0LM-PRDCTN-MO cursor, bold;
          set KS0LM001.KS0LM-DLVR-MO bold;
          KSWREC.XXXPRCNM = "15200"; /* Module identification*/
          converseLib.validationFailed(114); /* PO ID is missing or invalid*/
        end
      else
        if (KS0LM001.KS0LM-STY-NBR > " ") /* If style entered*/
          ;
        else
          if (KS0LM001.KS0LM-SESN-CD > " ") /* If season code entered*/
            if (KS0LM001.KS0LM-SESN-YR-RNG > " ") /* If season year entered*/
              ;
            else
              ;
              set KS0LM001.KS0LM-SESN-YR-RNG cursor, bold;
              KSWREC.XXXPRCNM = "15200"; /* Module identification*/
              converseLib.validationFailed(146); /* Data is required message*/
            end
            ;
          else
            if (KS0LM001.KS0LM-HTS-NBR > " "       /* HS nbr entered*/
             || KS0LM001.KS0LM-RULE-NBR > " "      /* Rule nbr entered*/
             || KS0LM001.KS0LM-FEAT-CD > " "       /* Feature code entered*/
             || KS0LM001.KS0LM-STAT-CD > " "       /* Status code entered*/
             || KS0LM001.KS0LM-STY-TYP-CD[1] > " " /* Style type entered*/
             || KS0LM001.KS0LM-STY-TYP-CD[2] > " " /* Style type entered*/
             || KS0LM001.KS0LM-STY-TYP-CD[3] > " ") /* Style type entered*/
            else
              set KS0LM001.KS0LM-STY-NBR cursor, bold;
              set KS0LM001.KS0LM-SESN-CD bold;
              set KS0LM001.KS0LM-SESN-YR-RNG bold;
              set KS0LM001.KS0LM-HTS-NBR bold;
              set KS0LM001.KS0LM-RULE-NBR bold;
              set KS0LM001.KS0LM-FEAT-CD bold;
              set KS0LM001.KS0LM-PRDCTN-YR bold;
              set KS0LM001.KS0LM-PRDCTN-MO bold;
              set KS0LM001.KS0LM-DLVR-MO bold;
              set KS0LM001.KS0LM-STY-TYP-CD[1] bold;
              set KS0LM001.KS0LM-STY-TYP-CD[2] bold;
              set KS0LM001.KS0LM-STY-TYP-CD[3] bold;
              KSWREC.XXXPRCNM = "15200"; /* Module identification*/
              converseLib.validationFailed(146); /* Data is required message*/
            end
          end
        end
        ;
      end
      ;
    end
    ;
  else
    set KS0LM001.KS0LM-GPC-CD cursor, bold;
    set KS0LM001.KS0LM-STY-NBR bold;
    set KS0LM001.KS0LM-SESN-CD bold;
    set KS0LM001.KS0LM-SESN-YR-RNG bold;
    set KS0LM001.KS0LM-HTS-NBR bold;
    set KS0LM001.KS0LM-RULE-NBR bold;
    set KS0LM001.KS0LM-FEAT-CD bold;
    set KS0LM001.KS0LM-PRDCTN-YR bold;
    set KS0LM001.KS0LM-PRDCTN-MO bold;
    set KS0LM001.KS0LM-DLVR-MO bold;
    set KS0LM001.KS0LM-STY-TYP-CD[1] bold;
    set KS0LM001.KS0LM-STY-TYP-CD[2] bold;
    set KS0LM001.KS0LM-STY-TYP-CD[3] bold;
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    converseLib.validationFailed(146); /* Data is required message*/
  end
  ;
  ;
end // end KS0L-15200

// Verify heading data entered
Function KS0L-15300()
  /* ------------------------------------------------------------*/
  /* Verify the Market Region code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-REG-CD > " ") /* If market reg entered*/
    if (KS0LM001.KS0LM-REG-CD in XDRTBL.XDR-PROD-REG-CD /* Code in table*/
     && XDRTBL.XXX-STAT[sysVar.arrayIndex] == "A")      /* and active status*/
      ;
      KS0LW01.KS0LW-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
      ;
    else
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0LM001.KS0LM-REG-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(142); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Experimental Style Flag.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-EXP-STYLE-FL != "Y" /* Experimental flag not 'y'*/
   && KS0LM001.KS0LM-EXP-STYLE-FL != "N" /* and not 'n'*/
   && KS0LM001.KS0LM-EXP-STYLE-FL != " ") /* and not ' '*/
    ;
    KSWREC.XXXPRCNM = "15300"; /* Module identification*/
    set KS0LM001.KS0LM-EXP-STYLE-FL cursor, bold; /* Highlight*/
    converseLib.validationFailed(129); /* Please enter 'y' or 'n'*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Preselect  Flag.*/
  /* ------------------------------------------------------------*/
  if (KS0LM001.KS0LM-PRE-SEL != "Y" /* Experimental flag not 'y'*/
   && KS0LM001.KS0LM-PRE-SEL != "N" /* and not 'n'*/
   && KS0LM001.KS0LM-PRE-SEL != " ") /* and not ' '*/
    ;
    KSWREC.XXXPRCNM = "15300"; /* Module identification*/
    set KS0LM001.KS0LM-PRE-SEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(129); /* Please enter 'y' or 'n'*/
    ;
  end
  /* ------------------------------------------------------------*/
  /* Verify the Style Type Codes.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-STY-TYP-CD[1] > " ") /* If sty-typ entered*/
    if (KS0LM001.KS0LM-STY-TYP-CD[1] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      ;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0LM001.KS0LM-STY-TYP-CD[1] cursor, bold; /* Highlight*/
      converseLib.validationFailed(69); /* Field missing or invalid*/
      ;
    end
  end
  ;
  if (KS0LM001.KS0LM-STY-TYP-CD[2] > " ") /* If sty-typ entered*/
    if (KS0LM001.KS0LM-STY-TYP-CD[2] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      ;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0LM001.KS0LM-STY-TYP-CD[2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(69); /* Field missing or invalid*/
      ;
    end
  end
  ;
  if (KS0LM001.KS0LM-STY-TYP-CD[3] > " ") /* If sty-typ entered*/
    if (KS0LM001.KS0LM-STY-TYP-CD[3] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      ;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0LM001.KS0LM-STY-TYP-CD[3] cursor, bold; /* Highlight*/
      converseLib.validationFailed(69); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Customs Product Status code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-STAT-CD > " ") /* If status entered*/
    if (KS0LM001.KS0LM-STAT-CD in YPRTBL.YPR-PROD-STAT-CD /* Code in table*/
     && YPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")         /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0LM001.KS0LM-STAT-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(69); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-ORIG-CD > " ") /* If origin entered*/
    if (KS0LM001.KS0LM-ORIG-CD in XCTTBL.XCTCD /* Code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      KS0LW01.KS0LW-ORIG-DESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0LM001.KS0LM-ORIG-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(70); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the U.S. Made Flag.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-US-MADE-FL != "Y" /* US Made flag not 'y'*/
   && KS0LM001.KS0LM-US-MADE-FL != "N" /* and not 'n'*/
   && KS0LM001.KS0LM-US-MADE-FL != " ") /* and not ' '*/
    ;
    KSWREC.XXXPRCNM = "15300"; /* Module identification*/
    set KS0LM001.KS0LM-US-MADE-FL cursor, bold; /* Highlight*/
    converseLib.validationFailed(129); /* Please enter 'y' or 'n'*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Team Number code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-TEAM-CD > " ") /* If team code entered*/
    set VCTEAM01 empty; /* Clear record*/
    VCTEAM01.KS-TEAM-CD = KS0LM001.KS0LM-TEAM-CD;
    KS0L-15301(); /* Select VCTEAM01 row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Team code exists*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0LM001.KS0LM-TEAM-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(20); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Quota Category code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-QOTA-CAT-CD > " ") /* If quota entered*/
    if (KS0LM001.KS0LM-QOTA-CAT-CD in YQTTBL.YQT-QOTA-CAT-CD
     && YQTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      /* Continue on*/
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0LM001.KS0LM-QOTA-CAT-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(58); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Year range entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-SESN-YR-RNG > "  " /* If season year entered*/
   || KS0LM001.KS0LM-SESN-CD > "  ")    /* or season code entered*/
    if (KS0LM001.KS0LM-SESN-YR-RNG >= "00"
     && KS0LM001.KS0LM-SESN-YR-RNG <= "99")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0LM001.KS0LM-SESN-YR-RNG cursor, bold; /* Highlight*/
      converseLib.validationFailed(26); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-SESN-CD > " ") /* Season code entered*/
    if (KS0LM001.KS0LM-SESN-CD in XSETBL.XSECD /* Code in table*/
     && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0LM001.KS0LM-SESN-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(27); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Division Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-DIV-CD > " ") /* If division entered*/
    if (KS0LM001.KS0LM-DIV-CD in XDVTBL.XDVCD) /* If code exists*/
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0LM001.KS0LM-DIV-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(130); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Ruling Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-RULE-NBR > " ") /* If rule nbr entered*/
    set VBDRUL01 empty; /* Clear record*/
    if (KS0LM001.KS0LM-GPC-CD == "EQ")
      if (KS0LW00.KS0LW-SAV-EQUIP-GPC == " ")
        VBDRUL01.XGPCD = "02";
        KS0LW00.KS0LW-SELECT = "S "; /* Select unique row*/
        VBDRUL01.KS-RULE-NBR = KS0LM001.KS0LM-RULE-NBR;
        KS0L-15302(); /* Select VBDRUL01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
          KS0LW00.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
          KS0LW01.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
          KS0LW00.KS0LW-SAV-EQUIP-GPC = "02";
        else
          VBDRUL01.XGPCD = "03";
          KS0LW00.KS0LW-SELECT = "S "; /* Select unique row*/
          VBDRUL01.KS-RULE-NBR = KS0LM001.KS0LM-RULE-NBR;
          KS0L-15302(); /* Select VBDRUL01 row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
            KS0LW00.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
            KS0LW01.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
            KS0LW00.KS0LW-SAV-EQUIP-GPC = "03";
          else
            KSWREC.XXXPRCNM = "15300"; /* Module identification*/
            set KS0LM001.KS0LM-RULE-NBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(32); /* Field missing or invalid*/
          end
        end
      else
        VBDRUL01.XGPCD = KS0LW00.KS0LW-SAV-EQUIP-GPC;
        KS0LW00.KS0LW-SELECT = "S "; /* Select unique row*/
        VBDRUL01.KS-RULE-NBR = KS0LM001.KS0LM-RULE-NBR;
        KS0L-15302(); /* Select VBDRUL01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
          KS0LW00.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
          KS0LW01.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
          KS0LW00.KS0LW-RULE-NBR = KS0LM001.KS0LM-RULE-NBR;
        else
          KSWREC.XXXPRCNM = "15300"; /* Module identification*/
          set KS0LM001.KS0LM-RULE-NBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(32); /* Field missing or invalid*/
        end
      end
    else
      VBDRUL01.XGPCD = KS0LM001.KS0LM-GPC-CD;
      KS0LW00.KS0LW-SELECT = "S "; /* Select unique row*/
      VBDRUL01.KS-RULE-NBR = KS0LM001.KS0LM-RULE-NBR;
      KS0L-15302(); /* Select VBDRUL01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
        KS0LW00.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
        KS0LW01.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
        KS0LW00.KS0LW-RULE-NBR = KS0LM001.KS0LM-RULE-NBR;
        KS0LW00.KS0LW-SAV-EQUIP-GPC = VBDRUL01.XGPCD;
      else
        if (KS0LM001.KS0LM-GPC-CD == "02" /* if footwear*/
         && KS0LW00.KS0LW-RULE-BYTE[5] == " ") /* and only xref entered*/
          set VBDRUL01 empty; /* Clear record*/
          KS0LW00.KS0LW-SELECT = "SA"; /* Select alternate row*/
          VBDRUL01.XGPCD = KS0LM001.KS0LM-GPC-CD;
          VBDRUL01.KS-RULE-XREF-CD = KS0LM001.KS0LM-RULE-NBR;
          KS0L-15302(); /* Select VBDRUL01 row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
            KS0LW00.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
            KS0LW01.KS0LW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
            KS0LW01.KS0LW-RULE-NBR-MAP = VBDRUL01.KS-RULE-XREF-CD;
            KS0LW00.KS0LW-SAV-EQUIP-GPC = VBDRUL01.XGPCD;
          else
            KSWREC.XXXPRCNM = "15300"; /* Module identification*/
            set KS0LM001.KS0LM-RULE-NBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(32); /* Field missing or invalid*/
          end
        else
          KSWREC.XXXPRCNM = "15300"; /* Module identification*/
          set KS0LM001.KS0LM-RULE-NBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(32); /* Field missing or invalid*/
        end
      end
    end
  else
    KS0LW00.KS0LW-RULE-NBR = " ";
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-STY-NBR > " "    /* If style entered*/
   && KS0LM001.KS0LM-SESN-CD == " "   /* and season code not entered*/
   && KS0LM001.KS0LM-HTS-NBR == " "   /* and HS nbr not entered*/
   && KS0LM001.KS0LM-RULE-NBR == " "  /* and Rule nbr not entered*/
   && KS0LM001.KS0LM-FEAT-CD == " "   /* and Feature not entered*/
   && KS0LM001.KS0LM-PRDCTN-YR == " " /* and PO ID not entered*/
   && KS0LM001.KS0LM-PRDCTN-MO == " " 
   && KS0LM001.KS0LM-DLVR-MO == " ") 
    ;
    KS0LW00.KS0LW-STYLE-FND = "N"; /* Initialize switch*/
    set PG2REC empty; /* Clear record*/
    if (KS0LM001.KS0LM-GPC-CD == "EQ") /* equipment*/
      PG2REC.XGPCD = "02"; /* GPC code*/
      KS0LW00.KS0LW-SAV-EQUIP-GPC = "02"; /* GPC code*/
    else
      PG2REC.XGPCD = KS0LM001.KS0LM-GPC-CD; /* GPC code*/
    end
    PG2REC.SY1STNBR = KS0LM001.KS0LM-STY-NBR; /* Style nbr*/
    KS0L-15303(); /* Select VSYCLR01 set*/
    KS0L-15304(); /* Fetch  VSYCLR01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
      KS0LW00.KS0LW-STYLE-FND = "Y";
      KS0LW00.KS0LW-SAV-EQUIP-GPC = PG2REC.XGPCD;
    else
      if (KS0LM001.KS0LM-GPC-CD == "EQ") /* equipment*/
        KS0L-15305(); /* Close  VSYCLR01 set*/
        PG2REC.XGPCD = "03"; /* GPC code*/
        KS0LW00.KS0LW-SAV-EQUIP-GPC = "03"; /* GPC code*/
        PG2REC.SY1STNBR = KS0LM001.KS0LM-STY-NBR; /* Style nbr*/
        KS0L-15303(); /* Select VSYCLR01 set*/
        KS0L-15304(); /* Fetch  VSYCLR01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
          KS0LW00.KS0LW-STYLE-FND = "Y";
          KS0LW00.KS0LW-SAV-EQUIP-GPC = PG2REC.XGPCD;
        end
      end
    end
    ;
    KS0L-15305(); /* Close  VSYCLR01 set*/
    ;
    if (KS0LW00.KS0LW-STYLE-FND == "N") /* Style not found*/
      KS0LW00.KS0LW-SELECT = "S1";
      KS0L-11220(); /* Select VCPROD01 set*/
      KS0LW00.KS0LW-FETCH = "N1";
      KS0L-11240(); /* Fetch  VCPROD01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
        KS0LW00.KS0LW-STYLE-FND = "Y";
      end
      KS0LW00.KS0LW-CLOSE = "C1";
      KS0L-11270(); /* Close  VCPROD01 set*/
    end
    ;
    if (KS0LW00.KS0LW-STYLE-FND == "N") /* If style not found*/
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0LM001.KS0LM-STY-NBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(67); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style Dimension code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-DIM-CD > " ") /* If dimension entered*/
    if (KS0LM001.KS0LM-DIM-CD in XDMTBL.XDMCD /* Code in table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0LM001.KS0LM-DIM-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(78); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the HS Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-HTS-NBR > " ") /* If HS number entered*/
    KS0LW01.KS0LW-HTS-NUMBER = KS0LM001.KS0LM-HTS-NBR;
    KS0L-15306(); /* Verify HS format*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the General Product Class code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-GPC-CD in XGPTBL.XGPCD /* Code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    KS0LW01.KS0LW-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Move desc*/
    KS0LM001.KS0LM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Move desc*/
    ;
  else
    if (KS0LM001.KS0LM-GPC-CD == "EQ" /* equipment*/
    )                                
      KS0LW01.KS0LW-GPC-DESC = "EQUIPMENT"; /* Move desc*/
      KS0LM001.KS0LM-GPC-DESC = "EQUIPMENT"; /* Move desc*/
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0LM001.KS0LM-GPC-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(147); /* Field missing or invalid*/
    end
  end
  ;
  ;
  if (KS0LM001.KS0LM-GPC-CD != "02"
   && KS0LM001.KS0LM-GPC-CD != "03"
   && KS0LM001.KS0LM-GPC-CD != "EQ")
    KSWREC.XXXPRCNM = "15300"; /* Module identification*/
    set KS0LM001.KS0LM-GPC-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(157); /* Field missing or invalid*/
  end
end // end KS0L-15300

// Select unique VCTEAM01 row
Function KS0L-15301()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6060" ("S ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15301"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.VCTEAM01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-15301

// Select unique VBDRUL01 row
Function KS0L-15302()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-SELECT == "S ") /* If select unique requested*/
    try
      call "IO6070" ("S ", SQLCA, VBDRUL01) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Select table set*/
  else
    if (KS0LW00.KS0LW-SELECT == "SA") /* If select alternate requested*/
      try
        call "IO6070" ("SA", SQLCA, VBDRUL01) {isNoRefresh = yes, isExternal = yes};
      end
                                   /* Select table set*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15302"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBDRUL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VBDRUL01.VBDRUL01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-15302

// Select VSYCLR01 set
Function KS0L-15303()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15303"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-15303

// Fetch  VSYCLR01 row
Function KS0L-15304()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15304"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-15304

// Close  VSYCLR01 set
Function KS0L-15305()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("CS", SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15305"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-15305

// Verify HS number format
Function KS0L-15306()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999.9*/
  /* this routine verifies that there is a ' ' or '.' in positions*/
  /* 3 and 5 and 8. If any of the other positions contain a '.', it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-IXM = 1; /* initialize index*/
  ;
  while (KS0LW00.KS0LW-IXM <= 14)
    if (KS0LW00.KS0LW-IXM == 5 /* these 2 positions must be blank or*/
     || KS0LW00.KS0LW-IXM == 8) /* equal '.'. if not, it's in error*/
      if (KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] != " ")
        if (KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] != ".")
          KSWREC.XXXPRCNM = "15306"; /* Module id*/
          set KS0LM001.KS0LM-HTS-NBR cursor, bold;
          converseLib.validationFailed(35); /* Invalid HTS nbr*/
          KS0LW00.KS0LW-HTS-FORMAT-SW = "N";
        end
      end
    else
      if (KS0LW00.KS0LW-IXM == 14) /* this position must be blank*/
        if (KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] != " ")
          KSWREC.XXXPRCNM = "15306"; /* Module id*/
          set KS0LM001.KS0LM-HTS-NBR cursor, bold;
          converseLib.validationFailed(35); /* Invalid HTS nbr*/
          KS0LW00.KS0LW-HTS-FORMAT-SW = "N";
        end
      else
        if (KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] == "."
         || KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] == "-"
         || KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] == ",")
          KSWREC.XXXPRCNM = "15306"; /* Module id*/
          set KS0LM001.KS0LM-HTS-NBR cursor, bold;
          converseLib.validationFailed(35); /* Invalid HTS nbr*/
          KS0LW00.KS0LW-HTS-FORMAT-SW = "N";
        end
      end
    end
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* set index up by 1*/
  end
  ;
  /* -----------------------------------------------------------------*/
  /* Verify the special HS Number format for FTWR*/
  /* -----------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-GPC-CD == "02"
   && converseVar.validationMsgNum == 35) /* Invalid HTS nbr*/
    converseLib.validationFailed(0); /* Invalid HTS nbr*/
    KS0LW00.KS0LW-HTS-FORMAT-SW = "Y";
    KS0LW00.KS0LW-IXM = 1; /* initialize index*/
    while (KS0LW00.KS0LW-IXM <= 14)
      if (KS0LW00.KS0LW-IXM == 5 /* these 3 positions must be blank or*/
       || KS0LW00.KS0LW-IXM == 8 /* equal '.'. if not, it's in error*/
       || KS0LW00.KS0LW-IXM == 11)
        if (KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] != " ")
          if (KS0LW00.KS0LW-IXM == 5
           || KS0LW00.KS0LW-IXM == 8)
            if (KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] != ".")
              KSWREC.XXXPRCNM = "15306"; /* Module id*/
              set KS0LM001.KS0LM-HTS-NBR cursor, bold;
              converseLib.validationFailed(97); /* Invalid HTS nbr*/
              KS0LW00.KS0LW-HTS-FORMAT-SW = "N";
            end
          else
            if (KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] != "-"
             && KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] != ",")
              KSWREC.XXXPRCNM = "15306"; /* Module id*/
              set KS0LM001.KS0LM-HTS-NBR cursor, bold;
              converseLib.validationFailed(97); /* Invalid HTS nbr*/
              KS0LW00.KS0LW-HTS-FORMAT-SW = "N";
            end
          end
        end
      else
        if (KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] == "."
         || KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] == "-"
         || KS0LW01.KS0LW-HTS-BYTE[KS0LW-IXM] == ",")
          KSWREC.XXXPRCNM = "15306"; /* Module id*/
          set KS0LM001.KS0LM-HTS-NBR cursor, bold;
          converseLib.validationFailed(97); /* Invalid HTS nbr*/
          KS0LW00.KS0LW-HTS-FORMAT-SW = "N";
        end
      end
      KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* set index up by 1*/
    end
  end
  ;
  ;
end // end KS0L-15306

// Verify feature code entered
Function KS0L-15400()
  /* ------------------------------------------------------------*/
  /* Verify the Customs feature code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM001.KS0LM-FEAT-CD > " " /* If feature entered*/
   && KS0LM001.KS0LM-FEAT-CD != KS0LW00.KS0LW-SAVE-PRBM)
    KS0LW00.KS0LW-SAVE-PRBM = KS0LM001.KS0LM-FEAT-CD;
    if (KS0LM001.KS0LM-FEAT-CD in YKPTBL.YKP-PRBM-CD /* Code in table*/
     && YKPTBL.XXXSTAT[sysVar.arrayIndex] == "A")    /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15400"; /* Module identification*/
      set KS0LM001.KS0LM-FEAT-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(68); /* Field missing or invalid*/
      ;
    end
  end
  ;
  ;
end // end KS0L-15400

// Process valid input requests
Function KS0L-16000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no errors*/
    KS0LW00.KS0LW-SWF = "Y"; /* Format the map switch*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the select fields and clear the map input/output area.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-IXM = 1; /* Initialize line index*/
  ;
  while (KS0LW00.KS0LW-IXM <= 22) /* Until end of lines*/
    ;
    if (KS0LM001.KS0LM-SEL[KS0LW-IXM] != KS0LW01.KS0LW-SEL[KS0LW-IXM])
      ;
      KS0LW01.KS0LW-SEL[KS0LW-IXM] = KS0LM001.KS0LM-SEL[KS0LW-IXM];
      KS0LW00.KS0LW-SWU = "Y"; /* Storage update switch*/
      ;
    end
    ;
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  if (KS0LW00.KS0LW-SWU == "Y") /* If data changed*/
    ;
    if (KS0LW01.KS0LW-SAVE-PG-NBR > 0) /* If save page exists*/
      KS0LW00.XXXTSPAG = KS0LW01.KS0LW-SAVE-PG-NBR;
      TA5REC.TA5TSQIX = KS0LW01.KS0LW-SAVE-PG-NBR;
      KS0LW00.TA5TSQIX = KS0LW01.KS0LW-SAVE-MAX-PG;
      TA5REC.TA5APPID = "KS0L";
    end
    ;
    KS0L-12110(); /* update temp storage*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    KS0LW00.XXXTSPAG = KS0LW00.XXXTSPAG - 1; /* Decrement page number*/
    KS0LW00.KS0LW-SAV = 1; /* Reset index for cursor plcmt*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    KS0LW00.XXXTSPAG = KS0LW00.XXXTSPAG + 1; /* Increment page number*/
    KS0LW00.KS0LW-SAV = 1; /* Reset index for cursor plcmt*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a line was selected, save the key fields and indicate*/
  /* that map 002 is to be displayed.*/
  /* ------------------------------------------------------------*/
  ;
  if ("S" in KS0LW01.KS0LW-SEL) /* Line was selected*/
    ;
    KS0LW00.KS0LW-IXM = sysVar.arrayIndex; /* Map line index*/
    ;

    KS0LM002.KS0LM-GPC-CD = KS0LW01.XGPCD[KS0LW-IXM]; /* GPC*/
    KS0LW00.KS0LW-SAV-EQUIP-GPC = KS0LW01.XGPCD[KS0LW-IXM];
    KS0LM002.KS0LM-SESN-CD = KS0LW01.KS0LW-SESN-CD; /* Season code*/
    KS0LM002.KS0LM-SESN-YR-RNG = KS0LW01.KS0LW-SESN-YY; /* Season*/
    KS0LM002.KS0LM-HTS-NBR = KS0LW01.KS0LW-HTS-NBR; /* HS number*/
    KS0LM002.KS0LM-RULE-NBR = KS0LW01.KS0LW-RULE-NBR; /* Rule nbr*/
    KS0LM002.KS0LM-STAT-CD = KS0LW01.KS0LW-STAT; /* Status code*/
    KS0LM002.KS0LM-FEAT-CD[1] = KS0LW01.KS0LW-PRBM-CD; /* Feature code*/
    KS0LM002.KS0LM-REG-CD = KS0LW01.KS0LW-REG-CD;
    ;
    KS0LW00.KS0LW-SWD = "2"; /* Map to be displayed switch*/
    KS0LW00.KS0LW-SWR = "Y"; /* Request for data switch*/
    ;
  end
  ;
  if (converseVar.eventKey is enter /* Enter pressed*/
   || converseVar.eventKey is pf14) /* PF14 pressed*/
    KS0LW00.KS0LW-IXM = 1; /* reset index*/
    KS0LW00.KS0LW-IX1 = 1; /* reset index*/
    KS0LW00.KS0LW-SAV = 0; /* reset index*/
    KS0LW00.KS0LW-REFORMAT-MAP1 = "N";
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      while (KS0LW00.KS0LW-IXM <= 22) /* Until end of lines*/
        ;
        if (KS0LM001.KS0LM-SEL[KS0LW-IXM] == "S" /* Line selected*/
         && converseVar.eventKey is enter)       /* and enter pressed*/
          set KS0LM001.KS0LM-SEL[KS0LW-IXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(88); /* Select only valid with PF14*/
          KSWREC.XXXPRCNM = "16000"; /* Module identification*/
          KS0LW00.KS0LW-SWR = "N"; /* do not request data*/
          KS0LW00.KS0LW-SWF = "N"; /* do not format map*/
          KS0LW00.KS0LW-SWD = "1"; /* Map to be displayed switch*/
        end
        ;
        if (KS0LM001.KS0LM-SEL[KS0LW-IXM] == "S") /* This line selected*/
          KS0LW01.KS0LW-SAVE-INDEX = KS0LW00.KS0LW-IXM;
          KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW00.XXXTSPAG;
          KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW00.TA5TSQIX;
          KS0LW01.KS0LW-SAVE-STY-CS = KS0LM001.KS0LM-DTL-STY-NBR[KS0LW-IXM];
          KS0LW02.KS0LW-SAVE-INDEX = KS0LW00.KS0LW-IXM;
          KS0LW02.KS0LW-SAVE-PG-NBR = KS0LW00.XXXTSPAG;
          KS0LW02.KS0LW-SAVE-MAX-PG = KS0LW00.TA5TSQIX;
          KS0LW02.KS0LW-SAVE-STY-CS = KS0LM001.KS0LM-DTL-STY-NBR[KS0LW-IXM];
          KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 + 1;
        end
        KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment line index*/
        ;
      end
      if (KS0LW00.KS0LW-IX1 == 1              /* if none were selected*/
       && converseVar.eventKey is enter       
       && KS0LM001.KS0LM-DTL-STY-NBR[1] > " " /* and styles exist*/
       && KS0LW00.KS0LW-SWR != "Y"            /* data not requested*/
       && KS0LW00.KS0LW-FNC == "C")           /* and Change function*/
        KSWREC.XXXPRCNM = "16000"; /* Module identification*/
        converseLib.validationFailed(43); /* set error msg nbr*/
        KS0LW00.KS0LW-SWR = "N"; /* do not request data*/
        KS0LW00.KS0LW-SWF = "N"; /* do not format map*/
        KS0LW00.KS0LW-SWD = "1"; /* Map to be displayed switch*/
        set KS0LM001.KS0LM-SEL[1] cursor; /* Position cursor*/
        return; /* return*/
      end
      if (converseVar.eventKey is enter) /* Enter pressed*/
        if (KS0LM001.KS0LM-GPC-CD != KS0LW01.KS0LW-GPC      /* GPC changed*/
         || KS0LM001.KS0LM-STY-NBR != KS0LW01.KS0LW-STYLE   /* or Style*/
         || KS0LM001.KS0LM-SESN-CD != KS0LW01.KS0LW-SESN-CD /* or Season cd*/
         || KS0LM001.KS0LM-SESN-YR-RNG != KS0LW01.KS0LW-SESN-YY)
          ;
    /* ------------------------------------------------------------*/
    /* If a search key was entered, request the data to display.*/
    /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/
          ;
          if (KS0LM001.KS0LM-STY-NBR > " " /* Style was entered*/
           || KS0LM001.KS0LM-SESN-CD > " " /* or Season was entered*/
           || KS0LM001.KS0LM-SESN-YR-RNG > " ") /* or Season was entered*/
            ;
            KS0LW00.KS0LW-SWR = "Y"; /* Request for data switch*/
            KS0LW00.KS0LW-FNC = "I"; /* Function switch*/
            ;
          else
            ;
            KS0LW00.KS0LW-SWR = "N"; /* Request for data switch*/
            ;
            KS0L-11100(); /* Purge any temporary storage*/
            ;
          end
          ;
          return; /* Return to previous process*/
          ;
        end
        ;
        KS0LW00.KS0LW-SWR = "Y"; /* Request for data switch*/
        if (KS0LW00.KS0LW-DATA-CHANGED == "Y"
         && converseVar.validationMsgNum > 0)
          KS0LW00.KS0LW-DATA-CHANGED = "N";
          KS0LW00.KS0LW-SWD = "1"; /* Map switch*/
          KS0LW00.KS0LW-SWF = "N"; /* Format map switch*/
        else
          if (KS0LW00.KS0LW-DATA-CHANGED == "Y")
            KS0LW00.KS0LW-DATA-CHANGED = "N";
            KS0LW00.KS0LW-SWD = "1"; /* Map switch*/
          else
            KS0LW00.KS0LW-SWD = "1"; /* Map switch*/
          end
        end
        ;
      end
      ;
      if (converseVar.eventKey is pf14) /* PF14 pressed*/
        if (KS0LW00.TA5TSQIX == 0) /* If no data was entered*/
          ;
          KS0LW00.KS0LW-SAVE-INDEX = 0;
          KS0LW00.KS0LW-SAVE-PG-NBR = 1;
          KS0LW00.KS0LW-SAVE-STY-CS = " ";
          KS0L-11100(); /* Purge any temporary storage*/
          ;
          KS0LW01.KS0LW-SAVE-INDEX = KS0LW00.KS0LW-SAVE-INDEX;
          KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW00.KS0LW-SAVE-PG-NBR;
          KS0LW01.KS0LW-SAVE-STY-CS = KS0LW00.KS0LW-SAVE-STY-CS;
          KS0LW01.KS0LW-GPC = KS0LM001.KS0LM-GPC-CD; /* GPC code*/
          KS0LW01.KS0LW-GPC-DESC = KS0LM001.KS0LM-GPC-DESC;
          KS0LW01.KS0LW-HTS-NBR = KS0LM001.KS0LM-HTS-NBR; /* HS number*/
          KS0LW01.KS0LW-STYLE = KS0LM001.KS0LM-STY-NBR;
                                   /* Style number*/
          KS0LW01.KS0LW-COLR-CD-ID = KS0LM001.KS0LM-COLR-CD-ID;
                                   /* Color cd*/
          KS0LW01.KS0LW-DIM-CD = KS0LM001.KS0LM-DIM-CD;
                                   /* Dimension code*/
          KS0LW01.KS0LW-RULE-NBR = KS0LM001.KS0LM-RULE-NBR;
                                   /* Ruling nbr*/
          KS0LW01.KS0LW-DIV-CD = KS0LM001.KS0LM-DIV-CD;
                                   /* Division code*/
          KS0LW01.KS0LW-SESN-CD = KS0LM001.KS0LM-SESN-CD;
                                   /* Season code*/
          KS0LW01.KS0LW-SESN-YR = KS0LM001.KS0LM-SESN-YR-RNG;
                                   /* Season year*/
          KS0LW01.KS0LW-QOTA-CAT-CD = KS0LM001.KS0LM-QOTA-CAT-CD;
                                   /* Quota*/
          KS0LW01.KS0LW-TEAM-CD = KS0LM001.KS0LM-TEAM-CD; /* Team code*/
          KS0LW01.KS0LW-PRDCTN-YR = KS0LM001.KS0LM-PRDCTN-YR;
                                   /* PO ID year*/
          KS0LW01.KS0LW-PRDCTN-MO = KS0LM001.KS0LM-PRDCTN-MO;
                                   /* PO ID mo*/
          KS0LW01.KS0LW-DLVR-MO = KS0LM001.KS0LM-DLVR-MO; /* PO ID mo*/
          KS0LW01.KS0LW-FCTY-CD = KS0LM001.KS0LM-FCTY-CD;
                                   /* Factory code*/
          KS0LW01.KS0LW-PRBM-CD = KS0LM001.KS0LM-FEAT-CD;
                                   /* Problem code*/
          KS0LW01.KS0LW-US-MADE-FLAG = KS0LM001.KS0LM-US-MADE-FL;
          KS0LW01.KS0LW-ORIG-CD = KS0LM001.KS0LM-ORIG-CD;
                                   /* Origin code*/
          KS0LW01.KS0LW-STAT = KS0LM001.KS0LM-STAT-CD; /* Status code*/
          KS0LW01.KS0LW-EXP-STYLE = KS0LM001.KS0LM-EXP-STYLE-FL;
                                   /* Exp style*/
          KS0LW01.KS0LW-STY-TYP-CD1 = KS0LM001.KS0LM-STY-TYP-CD[1];
          KS0LW01.KS0LW-STY-TYP-CD2 = KS0LM001.KS0LM-STY-TYP-CD[2];
          KS0LW01.KS0LW-STY-TYP-CD3 = KS0LM001.KS0LM-STY-TYP-CD[3];
          KS0LW01.KS0LW-REG-CD = KS0LM001.KS0LM-REG-CD;
          KS0LW01.KS0LW-REG-SDESC = KS0LM001.KS0LM-REG-SDESC;
          ;
          KS0L-11300(); /* Add page to temporary storage*/
          ;
        end
        ;
        KS0LW00.KS0LW-SWR = "Y"; /* Request for data switch*/
        KS0LW00.KS0LW-SWD = "2"; /* Map switch*/
        KS0LW00.KS0LW-FNC = "C"; /* Function switch*/
        ;
      end
      ;
    else
      KS0LW00.KS0LW-SWF = "N";
      exit stack; /* Exit to display map*/
    end
  end
  ;
  KS0LW00.KS0LW-SAVE-FNC = KS0LW00.KS0LW-FNC;
  ;
  ;
end // end KS0L-16000

// Main process Map2 Product Chg
Function KS0L-20000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0L-21000(); /* Obtain the data to display*/
  ;
  KS0L-22000(); /* Format and display the map*/
  ;
  KS0L-23000(); /* Check attention identifier*/
  ;
  KS0L-24000(); /* Reset fields to normal intensity*/
  ;
  KS0L-25000(); /* Verify the entered data*/
  ;
  KS0L-26000(); /* Process valid input request*/
  ;
  ;
end // end KS0L-20000

// Obtain the data
Function KS0L-21000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    KS0LW02.KS0LW-GPC-CD = KS0LW01.KS0LW-GPC;
    return; /* Return to previous process*/
  end
  KS0LW00.KS0LW-SCV = "Y"; /* set map5 switch on;*/
  /* ------------------------------------------------------------*/
  /* Clear the map display storage area and save the key fields.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW01.KS0LW-SAVE-INDEX = KS0LW02.KS0LW-SAVE-INDEX;
  KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW02.KS0LW-SAVE-PG-NBR;
  KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW02.KS0LW-SAVE-MAX-PG;
  KS0LW01.KS0LW-SAVE-STY-CS = KS0LW02.KS0LW-SAVE-STY-CS;
  KS0L-21100(); /* Purge temporary storage*/
  ;
  KS0LW02.KS0LW-SAVE-INDEX = KS0LW01.KS0LW-SAVE-INDEX;
  KS0LW02.KS0LW-SAVE-PG-NBR = KS0LW01.KS0LW-SAVE-PG-NBR;
  KS0LW02.KS0LW-SAVE-MAX-PG = KS0LW01.KS0LW-SAVE-MAX-PG;
  KS0LW02.KS0LW-SAVE-STY-CS = KS0LW01.KS0LW-SAVE-STY-CS;
  KS0LW00.KS0LW-DATA-CHANGED = "N"; /* Reset indicator*/
  KS0LW00.KS0LW-HTS-CHANGE = "N";
  KS0LW00.KS0LW-KEY-CHANGE = "N";
  KS0LW00.KS0LW-FEAT-CHANGE = "N";
  KS0LW00.KS0LW-MAP2-SAVE-FLDS = " ";
  KS0LW00.KS0LW-SAVE-PRBM-TABLE = " ";
  KS0LW00.KS0LW-PRBM-TABLE = " ";
  KS0LW02.KS0LW-HTS-NBR = KS0LW01.KS0LW-HTS-NBR; /* Move heading in*/
  KS0LW02.KS0LW-STAT = KS0LW01.KS0LW-STAT;
  KS0LW02.KS0LW-RULE-NBR = KS0LW01.KS0LW-RULE-NBR;
  KS0LW02.KS0LW-FEAT-CD[1] = KS0LW01.KS0LW-PRBM-CD;
  KS0LW00.KS0LW-PRBM[1] = KS0LW01.KS0LW-PRBM-CD;
  KS0LW02.KS0LW-GPC-CD = KS0LW01.KS0LW-GPC;
  KS0LW02.KS0LW-SESN-CD = KS0LW01.KS0LW-SESN-CD;
  /* MOVE KS0LW01.KS0LW-SESN-YR TO KS0LW01.KS0LW-SESN-YR-NUM;*/
  KS0LW02.KS0LW-SESN-YR-RNG = KS0LW01.KS0LW-SESN-YR;
  KS0LW02.KS0LW-REG-CD = KS0LW01.KS0LW-REG-CD;
  KS0LW02.KS0LW-REG-SDESC = KS0LW01.KS0LW-REG-SDESC;
  ;
  /* ------------------------------------------------------------*/
  /* Obtain the table rows to be displayed.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.TA5TSQIX = 0; /* Temp storage page*/
  KS0LW00.KS0LW-IXM = 1; /* TS1 page nbr*/
  KS0LW00.KS0LW-IX1 = 1; /* Map2 line nbr*/
  KS0LW00.KS0LW-IX2 = 1; /* Map1 line nbr*/
  KS0LW00.KS0LW-IX3 = 1; /* TS2 page nbr*/
  KS0LW00.KS0LW-TS-EOF = "N"; /* Temporary storage EOF switch*/
  KS0LW00.KS0LW-SW1 = "N"; /* Update TS2 switch*/
  ;
  while (KS0LW00.KS0LW-TS-EOF == "N")
    KS0LW00.XXXTSPAG = KS0LW00.KS0LW-IXM; /* Move page nbr to read*/
    KS0L-12120(); /* Read temp storage page*/
    if (TA5REC.TA5RTNCD == 7) /* If EOF*/
      KS0LW00.KS0LW-TS-EOF = "Y";
    else
      while (KS0LW00.KS0LW-IX2 <= 22) /* While lines exist*/
        if (KS0LW01.KS0LW-SEL[KS0LW-IX2] == "S"
         && KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX2] > " ")
          KS0LW02.KS0LW-DTL-STYLE[KS0LW-IX1] = KS0LW01.KS0LW-DTL-STY-NBR[KS0LW-IX2];
          if (KS0LW01.KS0LW-GPC == "02")
            KS0LW02.KS0LW-DTL-COLOR[KS0LW-IX1] = KS0LW01.KS0LW-DTL-COLR-CD-ID[KS0LW-IX2];
            KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IX1] = KS0LW01.KS0LW-DTL-DIM-CD[KS0LW-IX2];
          else
            KS0LW02.KS0LW-DTL-COLOR[KS0LW-IX1] = " ";
            KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IX1] = " ";
          end
          KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 + 1;
          KS0LW00.KS0LW-SW1 = "Y";
        end
        if (KS0LW00.KS0LW-IX1 > 44)
          TA5REC.TA5TSQIX = 0;
          TA5REC.TA5APPID = "KS1L";
          KS0L-21200(); /* Add temp storage*/
          KS0LW00.KS0LW-IX3 = KS0LW00.KS0LW-IX3 + 1;
          KS0LW00.KS0LW-IX1 = 1;
          KS0LW00.KS0LW-SW1 = "N";
          KS0LW01.KS0LW-SAVE-INDEX = KS0LW02.KS0LW-SAVE-INDEX;
          KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW02.KS0LW-SAVE-PG-NBR;
          KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW02.KS0LW-SAVE-MAX-PG;
          KS0LW01.KS0LW-SAVE-STY-CS = KS0LW02.KS0LW-SAVE-STY-CS;
          set KS0LW02 empty; /* M002 display storage*/
          KS0LW02.KS0LW-SAVE-INDEX = KS0LW01.KS0LW-SAVE-INDEX;
          KS0LW02.KS0LW-SAVE-PG-NBR = KS0LW01.KS0LW-SAVE-PG-NBR;
          KS0LW02.KS0LW-SAVE-MAX-PG = KS0LW01.KS0LW-SAVE-MAX-PG;
          KS0LW02.KS0LW-SAVE-STY-CS = KS0LW01.KS0LW-SAVE-STY-CS;
          KS0LW02.KS0LW-HTS-NBR = KS0LW01.KS0LW-HTS-NBR;
          KS0LW02.KS0LW-STAT = KS0LW01.KS0LW-STAT;
          KS0LW02.KS0LW-RULE-NBR = KS0LW01.KS0LW-RULE-NBR;
          KS0LW02.KS0LW-FEAT-CD[1] = KS0LW01.KS0LW-PRBM-CD;
          KS0LW00.KS0LW-PRBM[1] = KS0LW01.KS0LW-PRBM-CD;
          KS0LW02.KS0LW-GPC-CD = KS0LW01.KS0LW-GPC;
          KS0LW02.KS0LW-REG-CD = KS0LW01.KS0LW-REG-CD;
          KS0LW02.KS0LW-REG-SDESC = KS0LW01.KS0LW-REG-SDESC;
          KS0LW02.KS0LW-SESN-CD = KS0LW01.KS0LW-SESN-CD;
  /* MOVE KS0LW01.KS0LW-SESN-YR TO KS0LW01.KS0LW-SESN-YR-NUM;*/
          KS0LW02.KS0LW-SESN-YR-RNG = KS0LW01.KS0LW-SESN-YR;
        end
        KS0LW00.KS0LW-IX2 = KS0LW00.KS0LW-IX2 + 1;
      end
    end
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment index*/
    KS0LW00.KS0LW-IX2 = 1; /* Reset index*/
  end
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no errors so far*/
    ;
    TA5REC.TA5TSQIX = 0;
    KS0L-21200(); /* Add temp storage*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.XXXTSPAG = KS0LW00.KS0LW-IX3; /* Temp storage page*/
  KS0LW00.KS0LW-SWR = "N"; /* Request for data switch*/
  ;
  ;
end // end KS0L-21000

// Purge temporary storage
Function KS0L-21100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0LW02 empty; /* M002 display storage*/
  ;
  KS0LW00.KS0LW-SW1 = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0LW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = "KS1L"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "21100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-21100

// Add temp storage 2
Function KS0L-21200()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW02.XXXTSLEN = KS0LW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = "KS1L"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    KS0LW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    KS0LW00.KS0LW-SW1 = "N"; /* Storage update switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "21200"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-21200

// Format and display the map
Function KS0L-22000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0LW00.KS0LW-SWF == "Y") /* Map must be formatted*/
      KS0L-22100(); /* Format the data on the map*/
    end
    ;
  end
  ;
  if (KS0LM002.XXXTSPAG > 0) /* If page number exists*/
    set KS0LM002.XXXTSPAG skip;
    set KS0LM002.TA5TSQIX skip;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0LM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0LM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0LM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0LM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0LM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0LM002 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0LM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0LM002.CAITEM; /* Application data*/
  ;
  ;
end // end KS0L-22000

// Format the display data
Function KS0L-22100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ----------------------------------------------------------*/
  ;
  set KS0LM002 initial; /* M002 input/output area*/
  ;
  KS0LW00.KS0LW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If the page in storage is not the page to be displayed,*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (KS0LW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (KS0LW00.KS0LW-SW1 == "Y" /* Current page was changed*/
       && TA5REC.TA5TSQIX != 0)    /* and current page not zero*/
        ;
        KS0L-22110(); /* Update temporary storage page*/
        ;
        KS0LW00.KS0LW-SW1 = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (KS0LW00.XXXTSPAG > KS0LW00.TA5TSQIX) /* Desired greater highest*/
        KS0LW00.XXXTSPAG = KS0LW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      KS0LM002.KS0LM-HTS-NBR = KS0LW02.KS0LW-HTS-NBR; /* HS number*/
      KS0LM002.KS0LM-RULE-NBR = KS0LW02.KS0LW-RULE-NBR; /* Ruling nbr*/
      KS0LM002.KS0LM-FEAT-CD[1] = KS0LW02.KS0LW-FEAT-CD[1];
      KS0LM002.KS0LM-FEAT-CD[2] = KS0LW02.KS0LW-FEAT-CD[2];
      KS0LM002.KS0LM-FEAT-CD[3] = KS0LW02.KS0LW-FEAT-CD[3];
      KS0LM002.KS0LM-FEAT-CD[4] = KS0LW02.KS0LW-FEAT-CD[4];
      KS0LM002.KS0LM-FEAT-CD[5] = KS0LW02.KS0LW-FEAT-CD[5];
      KS0LM002.KS0LM-FEAT-CD[6] = KS0LW02.KS0LW-FEAT-CD[6];
      KS0LM002.KS0LM-FEAT-CD[7] = KS0LW02.KS0LW-FEAT-CD[7];
      KS0LM002.KS0LM-FEAT-CD[8] = KS0LW02.KS0LW-FEAT-CD[8];
      KS0LM002.KS0LM-FEAT-CD[9] = KS0LW02.KS0LW-FEAT-CD[9];
      KS0LM002.KS0LM-FEAT-CD[10] = KS0LW02.KS0LW-FEAT-CD[10];
      KS0LM002.KS0LM-STAT-CD = KS0LW02.KS0LW-STAT; /* Status code*/
      KS0LM002.KS0LM-SESN-YR-RNG = KS0LW02.KS0LW-SESN-YEAR;
      KS0LM002.KS0LM-SESN-CD = KS0LW02.KS0LW-SESN-CD;
      KS0LM002.KS0LM-GPC-CD = KS0LW02.KS0LW-GPC-CD;
      KS0LM002.KS0LM-REG-CD = KS0LW02.KS0LW-REG-CD;
      ;
      KS0L-22120(); /* Obtain temporary storage page*/
      ;
      KS0LW02.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
      KS0LW02.KS0LW-STAT = KS0LM002.KS0LM-STAT-CD;
      KS0LW02.KS0LW-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
      KS0LW02.KS0LW-FEAT-TABLE = KS0LW00.KS0LW-PRBM-TABLE;
      KS0LW02.KS0LW-GPC-CD = KS0LM002.KS0LM-GPC-CD;
      KS0LW02.KS0LW-REG-CD = KS0LM002.KS0LM-REG-CD;
      KS0LW02.KS0LW-SESN-CD = KS0LM002.KS0LM-SESN-CD;
      KS0LW02.KS0LW-SESN-YEAR = KS0LM002.KS0LM-SESN-YR-RNG;
      if (KS0LW02.KS0LW-SESN-YR-RNG == "  ")
        KS0LM002.KS0LM-SESN-YR-RNG = "  ";
      end
      if (KS0LM002.KS0LM-REG-CD > " ") /* If market reg entered*/
        if (KS0LM002.KS0LM-REG-CD in XDRTBL.XDR-PROD-REG-CD /* Code in table*/
         && XDRTBL.XXX-STAT[sysVar.arrayIndex] == "A")      /* and active status*/
          ;
          KS0LW02.KS0LW-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
        end
      else
        KS0LW02.KS0LW-REG-SDESC = "ALL";
      end
      KS0LW00.KS0LW-SW1 = "Y";
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0LM002.XXXLITPG skip; /* "PAGE" literal*/
    KS0LM002.XXXTSPAG = KS0LW00.XXXTSPAG; /* Current page*/
    set KS0LM002.XXXLITOF skip; /* "OF" literal*/
    KS0LM002.TA5TSQIX = KS0LW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-DATA-CHANGED == "Y")
    set KS0LM002.KS0LM-DTL-STY-NBR[1] cursor;
  else
    set KS0LM002.KS0LM-HTS-NBR cursor; /* Position cursor*/
    ;
    KS0LM002.KS0LM-GPC-CD = KS0LW02.KS0LW-GPC-CD; /* GPC code*/
    KS0LM002.KS0LM-SESN-CD = KS0LW02.KS0LW-SESN-CD; /* Season code*/
  /*  */
  /* ************************* Y2K OUT BEGIN ********************************/
  /*  */
  /* IF KS0LW02.KS0LW-SESN-YR-RNG EQ '0';*/
  /*  */
  /* ************************* Y2K OUT END **********************************/
  /*  */
  /*  */
  /* ************************* Y2K IN BEGIN *********************************/
  /*  */
    if (KS0LW02.KS0LW-SESN-YR-RNG == "  ")
  /*  */
  /* ************************* Y2K IN END ***********************************/
  /*  */
      KS0LW02.KS0LW-SESN-YEAR = "  ";
      KS0LM002.KS0LM-SESN-YR-RNG = "  ";
    else
      KS0LM002.KS0LM-SESN-YR-RNG = KS0LW02.KS0LW-SESN-YEAR;
                                   /* Season yr*/
    end
    KS0LM002.KS0LM-HTS-NBR = KS0LW02.KS0LW-HTS-NBR; /* HS number*/
    KS0LM002.KS0LM-RULE-NBR = KS0LW02.KS0LW-RULE-NBR; /* Ruling nbr*/
    KS0LM002.KS0LM-FEAT-CD[1] = KS0LW02.KS0LW-FEAT-CD[1];
                                   /* Feature cd*/
    KS0LM002.KS0LM-FEAT-CD[2] = KS0LW02.KS0LW-FEAT-CD[2];
                                   /* Feature cd*/
    KS0LM002.KS0LM-FEAT-CD[3] = KS0LW02.KS0LW-FEAT-CD[3];
                                   /* Feature cd*/
    KS0LM002.KS0LM-FEAT-CD[4] = KS0LW02.KS0LW-FEAT-CD[4];
                                   /* Feature cd*/
    KS0LM002.KS0LM-FEAT-CD[5] = KS0LW02.KS0LW-FEAT-CD[5];
                                   /* Feature cd*/
    KS0LM002.KS0LM-FEAT-CD[6] = KS0LW02.KS0LW-FEAT-CD[6];
                                   /* Feature cd*/
    KS0LM002.KS0LM-FEAT-CD[7] = KS0LW02.KS0LW-FEAT-CD[7];
                                   /* Feature cd*/
    KS0LM002.KS0LM-FEAT-CD[8] = KS0LW02.KS0LW-FEAT-CD[8];
                                   /* Feature cd*/
    KS0LM002.KS0LM-FEAT-CD[9] = KS0LW02.KS0LW-FEAT-CD[9];
                                   /* Feature cd*/
    KS0LM002.KS0LM-FEAT-CD[10] = KS0LW02.KS0LW-FEAT-CD[10]; /* Feature*/
    KS0LM002.KS0LM-STAT-CD = KS0LW02.KS0LW-STAT; /* Status code*/
    KS0LM002.KS0LM-REG-CD = KS0LW02.KS0LW-REG-CD;
    KS0LM002.KS0LM-REG-SDESC = KS0LW02.KS0LW-REG-SDESC;
  end
  ;
  if (KS0LW02.KS0LW-GPC-CD != "02")
    set KS0LM002.KS0LM-COLR-FIELD[1] skip, invisible;
    set KS0LM002.KS0LM-COLR-FIELD[2] skip, invisible;
    set KS0LM002.KS0LM-COLR-FIELD[3] skip, invisible;
    set KS0LM002.KS0LM-COLR-FIELD[4] skip, invisible;
    set KS0LM002.KS0LM-DIM-FIELD[1] skip, invisible;
    set KS0LM002.KS0LM-DIM-FIELD[2] skip, invisible;
    set KS0LM002.KS0LM-DIM-FIELD[3] skip, invisible;
    set KS0LM002.KS0LM-DIM-FIELD[4] skip, invisible;
  end
  ;
  KS0LW00.KS0LW-IXM = 1; /* Initialize line index*/
  while (KS0LW00.KS0LW-IXM <= 44) /* Until screen is full*/
    ;
    KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IXM] = KS0LW02.KS0LW-DTL-STYLE[KS0LW-IXM];
    if (KS0LW02.KS0LW-GPC-CD != "02")
      KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IXM] = "   ";
      KS0LW02.KS0LW-DTL-COLOR[KS0LW-IXM] = "   ";
      set KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IXM] skip, invisible;
    else
      KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IXM] = KS0LW02.KS0LW-DTL-COLOR[KS0LW-IXM];
    end
    if (KS0LW02.KS0LW-GPC-CD != "02")
      KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IXM] = "  ";
      KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IXM] = "  ";
      set KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IXM] skip, invisible;
    else
      KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IXM] = KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IXM];
    end
    ;
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
end // end KS0L-22100

// Update temp storage 2
Function KS0L-22110()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW02.XXXTSLEN = KS0LW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "22110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-22110

// Read temp storage 2
Function KS0L-22120()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW02.XXXTSLEN = KS0LW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = "KS1L"; /* Application identification*/
  TA5REC.TA5TSQIX = KS0LW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA5REC.TA5RTNCD == 0 /* and normal return code*/
     || TA5REC.TA5RTNCD == 7) /* or EOF return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "22120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-22120

// Check the attention identifier
Function KS0L-23000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0LW00.KS0LW-SWR == "Y") /* Request for data*/
      set KS0LW02 empty; /* M002 display storage*/
    end
    ;
    KS0LW00.KS0LW-SWF = "Y"; /* Format the map switch*/
    KS0LW00.KS0LW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      KS0L-21100(); /* Purge temporary storage*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
    else
      ;
      KSWREC.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      set KS0LM002.CATOAP cursor, bold; /* Highlight*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0LM002"; /* Application find code*/
    end
    ;
    KS0L-21100(); /* Purge temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf4   /* and PF4 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "23000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end KS0L-23000

// Reset the highlighted fields
Function KS0L-24000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0LM002.KS0LM-HTS-NBR initialAttributes; /* HS number*/
  set KS0LM002.KS0LM-STAT-CD initialAttributes; /* Product status code*/
  set KS0LM002.KS0LM-RULE-NBR initialAttributes; /* Ruling number*/
  set KS0LM002.KS0LM-FEAT-CD[1] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-FEAT-CD[2] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-FEAT-CD[3] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-FEAT-CD[4] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-FEAT-CD[5] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-FEAT-CD[6] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-FEAT-CD[7] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-FEAT-CD[8] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-FEAT-CD[9] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-FEAT-CD[10] initialAttributes; /* Feature code*/
  set KS0LM002.KS0LM-GPC-CD initialAttributes; /* GPC code*/
  set KS0LM002.KS0LM-REG-CD initialAttributes; /* Market Region*/
  set KS0LM002.KS0LM-SESN-CD initialAttributes; /* Season code*/
  set KS0LM002.KS0LM-SESN-YR-RNG initialAttributes; /* Season year range*/
  ;
  KS0LW00.KS0LW-IXM = 1; /* Initialize line index*/
  while (KS0LW00.KS0LW-IXM <= 44) /* Until end of lines*/
    ;
    set KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IXM] normal; /* Reset style fields*/
    if (KS0LW02.KS0LW-GPC-CD == "02")
      set KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IXM] normal;
      set KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IXM] normal;
    end
    ;
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  set KS0LM002.CATOAP initialAttributes; /* TO application*/
  set KS0LM002.CAITEM initialAttributes; /* Application data*/
  ;
  KS0LW00.KS0LW-IXM = 1; /* Reset index*/
  KS0LW00.KS0LW-DEF = "N";
  while (KS0LW00.KS0LW-IXM <= 10)
    if (KS0LM002.KS0LM-FEAT-CD[KS0LW-IXM] == "?") /* If ? in feature code*/
      KS0LW00.KS0LW-DEF = "Y";
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        CUSTOMS FEATURE     "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0LM002.KS0LM-FEAT-CD[KS0LW-IXM] = YKPTBL.YKP-PRBM-CD[XX0XWPIX]; /* move code*/
      else
        KS0LM002.KS0LM-FEAT-CD[KS0LW-IXM] = " "; /* clear fields*/
      end
      set KS0LM002.KS0LM-FEAT-CD[KS0LW-IXM] cursor; /* Set cursor*/
    end
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1;
    ;
  end
  if (KS0LM002.KS0LM-STAT-CD == "?") /* if ? in status code field*/
    KS0LW00.KS0LW-DEF = "Y";
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "         CUSTOMS STATUS CODE"; /* heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYPR01(); /* perform status code window*/
    end
    ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the status     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
    ;
    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      KS0LM002.KS0LM-STAT-CD = YPRTBL.YPR-PROD-STAT-CD[XX0XWPIX]; /* move code*/
    else
      KS0LM002.KS0LM-STAT-CD = " "; /* clear fields*/
    end
    set KS0LM002.KS0LM-STAT-CD cursor; /* Set cursor*/
  end
  ;
  if (KS0LW00.KS0LW-DEF == "Y") /* If pop up displayed*/
    KS0LW00.KS0LW-SWR = "N"; /* Reset request for data switch*/
    KS0LW00.KS0LW-SWF = "N"; /* Reset format the map switch*/
    ;
    converseLib.clearScreen();
     /* Restore the original map*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0L-24000

// Verify the entered data
Function KS0L-25000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
    set KS0LM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    KS0L-25100(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* Otherwise, verify data in the heading.*/
    /* ------------------------------------------------------------*/
    ;
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* IF KS0LW02.KS0LW-SESN-YR-RNG EQ '0';*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
    if (KS0LW02.KS0LW-SESN-YR-RNG == "  ")
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
      KS0LW00.KS0LW-YY = "  ";
    else
      KS0LW00.KS0LW-YY = KS0LW02.KS0LW-SESN-YEAR;
    end
    /* ------------------------------------------------------------*/
    /* The following code would need to be included if Season Code*/
    /* and Season Year Range are change keys.*/
    /* ------------------------------------------------------------*/
    if (KS0LM002.KS0LM-GPC-CD != KS0LW02.KS0LW-GPC-CD
     || KS0LM002.KS0LM-SESN-CD != KS0LW02.KS0LW-SESN-CD
     || KS0LM002.KS0LM-SESN-YR-RNG != KS0LW00.KS0LW-YY)
      /* MOVE 'Y' TO KS0LW00.KS0LW-KEY-CHANGE;*/
      KS0LW00.KS0LW-DATA-CHANGED = "Y"; /* Data changed switch*/
      /* MOVE KS0LW02.KS0LW-GPC-CD TO KS0LW00.KS0LW-GPC-CD;*/
      /* MOVE KS0LW02.KS0LW-SESN-YR-RNG TO KS0LW00.KS0LW-SESN-YR;*/
      /* MOVE KS0LW02.KS0LW-SESN-CD TO KS0LW00.KS0LW-SESN-CD;*/
    end
    if (KS0LM002.KS0LM-FEAT-CD[1] != KS0LW02.KS0LW-FEAT-CD[1]
     || KS0LM002.KS0LM-FEAT-CD[2] != KS0LW02.KS0LW-FEAT-CD[2]
     || KS0LM002.KS0LM-FEAT-CD[3] != KS0LW02.KS0LW-FEAT-CD[3]
     || KS0LM002.KS0LM-FEAT-CD[4] != KS0LW02.KS0LW-FEAT-CD[4]
     || KS0LM002.KS0LM-FEAT-CD[5] != KS0LW02.KS0LW-FEAT-CD[5]
     || KS0LM002.KS0LM-FEAT-CD[6] != KS0LW02.KS0LW-FEAT-CD[6]
     || KS0LM002.KS0LM-FEAT-CD[7] != KS0LW02.KS0LW-FEAT-CD[7]
     || KS0LM002.KS0LM-FEAT-CD[8] != KS0LW02.KS0LW-FEAT-CD[8]
     || KS0LM002.KS0LM-FEAT-CD[9] != KS0LW02.KS0LW-FEAT-CD[9]
     || KS0LM002.KS0LM-FEAT-CD[10] != KS0LW02.KS0LW-FEAT-CD[10])
      KS0LW00.KS0LW-FEAT-CHANGE = "Y";
      KS0LW00.KS0LW-DATA-CHANGED = "Y"; /* Data changed switch*/
      KS0LW00.KS0LW-PRBM-TABLE = KS0LW02.KS0LW-FEAT-TABLE;
    end
    if (KS0LM002.KS0LM-HTS-NBR != KS0LW02.KS0LW-HTS-NBR)
      KS0LW00.KS0LW-SCV = "Y";
      KS0LW00.KS0LW-HTS-CHANGE = "Y";
      KS0LW00.KS0LW-DATA-CHANGED = "Y"; /* Data changed switch*/
      KS0LW00.KS0LW-HS-NBR = KS0LW02.KS0LW-HTS-NBR;
    end
    if (KS0LM002.KS0LM-RULE-NBR != KS0LW02.KS0LW-RULE-NBR
     || KS0LM002.KS0LM-STAT-CD != KS0LW02.KS0LW-STAT)
      KS0LW00.KS0LW-RULE-NBR = KS0LW02.KS0LW-RULE-NBR;
      KS0LW00.KS0LW-STAT-CD = KS0LW02.KS0LW-STAT;
      KS0LW00.KS0LW-DATA-CHANGED = "Y"; /* Data changed switch*/
    end
    ;
    if (converseVar.validationMsgNum == 0 /* If no previous errors*/
     && KS0LW00.KS0LW-DATA-CHANGED == "Y")
      KS0L-25200(); /* Verify heading data entered*/
    end
    ;
    if (KS0LW00.TA5TSQIX > 0) /* Page was formatted*/
      ;
      KS0LW00.KS0LW-STYLE-FND = "N";
      KS0LW00.KS0LW-IXM = 44;
      ;
      while (KS0LW00.KS0LW-IXM > 0)
        ;
        if (KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IXM] > " ") /* If entered*/
          KS0LW00.KS0LW-STYLE-FND = "Y";
          KS0LW00.KS0LW-IXM = 1;
        end
        ;
        KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM - 1;
      end
      ;
      if (KS0LW00.KS0LW-STYLE-FND == "N" /* If style not entered*/
       && KS0LW00.XXXTSPAG == 1)         /* and only 1 page*/
        KSWREC.XXXPRCNM = "25000"; /* MODULE IDENTIFICATION*/
        set KS0LM002.KS0LM-DTL-STY-NBR[1] cursor, bold;
        converseLib.validationFailed(81); /* Must enter style*/
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0) /* If no previous errors*/
    KS0L-25300(); /* Verify overlap products*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return; /* Exit to display map*/
  end
  ;
  ;
end // end KS0L-25000

// Verify scroll request
Function KS0L-25100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0LW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    KSWREC.XXXPRCNM = "25100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0LW00.XXXTSPAG >= KS0LW00.TA5TSQIX) /* and no more pages*/
    ;
    KSWREC.XXXPRCNM = "25100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forwards or backwards was requested check to see*/
  /* if data changed and Temp Storage should be updated*/
  /* ------------------------------------------------------------*/
  ;
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* IF KS0LW02.KS0LW-SESN-YR-RNG EQ '0';/* Season year not entered*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
  if (KS0LW02.KS0LW-SESN-YR-RNG == "  ") /* Season year not entered*/
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
    KS0LW00.KS0LW-YY = " ";
  else
    KS0LW00.KS0LW-YY = KS0LW02.KS0LW-SESN-YEAR;
  end
  if (KS0LM002.KS0LM-GPC-CD != KS0LW02.KS0LW-GPC-CD
   || KS0LM002.KS0LM-SESN-CD != KS0LW02.KS0LW-SESN-CD
   || KS0LM002.KS0LM-SESN-YR-RNG != KS0LW00.KS0LW-YY)
    KS0LW00.KS0LW-SW1 = "Y";
  end
  ;
  if (KS0LM002.KS0LM-FEAT-CD[1] != KS0LW02.KS0LW-FEAT-CD[1]
   || KS0LM002.KS0LM-FEAT-CD[2] != KS0LW02.KS0LW-FEAT-CD[2]
   || KS0LM002.KS0LM-FEAT-CD[3] != KS0LW02.KS0LW-FEAT-CD[3]
   || KS0LM002.KS0LM-FEAT-CD[4] != KS0LW02.KS0LW-FEAT-CD[4]
   || KS0LM002.KS0LM-FEAT-CD[5] != KS0LW02.KS0LW-FEAT-CD[5]
   || KS0LM002.KS0LM-FEAT-CD[6] != KS0LW02.KS0LW-FEAT-CD[6]
   || KS0LM002.KS0LM-FEAT-CD[7] != KS0LW02.KS0LW-FEAT-CD[7]
   || KS0LM002.KS0LM-FEAT-CD[8] != KS0LW02.KS0LW-FEAT-CD[8]
   || KS0LM002.KS0LM-FEAT-CD[9] != KS0LW02.KS0LW-FEAT-CD[9]
   || KS0LM002.KS0LM-FEAT-CD[10] != KS0LW02.KS0LW-FEAT-CD[10]
   || KS0LM002.KS0LM-HTS-NBR != KS0LW02.KS0LW-HTS-NBR
   || KS0LM002.KS0LM-RULE-NBR != KS0LW02.KS0LW-RULE-NBR
   || KS0LM002.KS0LM-STAT-CD != KS0LW02.KS0LW-STAT)
    KS0LW00.KS0LW-DATA-CHANGED = "Y";
    KS0LW00.KS0LW-PRBM-TABLE = KS0LW02.KS0LW-FEAT-TABLE;
  end
  ;
  KS0LW00.KS0LW-IX2 = 1;
  while (KS0LW00.KS0LW-IX2 <= 44
   && KS0LW00.KS0LW-SW1 != "Y")
    if (KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX2] != 
    KS0LW02.KS0LW-DTL-STYLE[KS0LW-IX2])
      if (KS0LM002.KS0LM-GPC-CD == "02")
        if (KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX2] != 
        KS0LW02.KS0LW-DTL-COLOR[KS0LW-IX2]
         && KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX2] != 
        KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IX2])
          KS0LW00.KS0LW-SW1 = "Y";
        end
      else
        KS0LW00.KS0LW-SW1 = "Y";
      end
    end
    KS0LW00.KS0LW-IX2 = KS0LW00.KS0LW-IX2 + 1;
  end
  KS0LW00.KS0LW-MAP2-SAVE-FLDS = " ";
  ;
  ;
end // end KS0L-25100

// Verify heading data entered
Function KS0L-25200()
  /* ------------------------------------------------------------*/
  /* Verify the Season Year range entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM002.KS0LM-SESN-YR-RNG > "  " /* If season year entered*/
   || KS0LM002.KS0LM-SESN-CD > "  ")    /* or season code entered*/
    if (KS0LM002.KS0LM-SESN-YR-RNG >= "00"
     && KS0LM002.KS0LM-SESN-YR-RNG <= "99")
      KS0LW02.KS0LW-SESN-YEAR = KS0LM002.KS0LM-SESN-YR-RNG;
      if (KS0LW02.KS0LW-SESN-YEAR > "60")
        KS0LW02.KS0LW-SESN-CENTURY = "19";
      else
        KS0LW02.KS0LW-SESN-CENTURY = "20";
      end
    else
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0LM002.KS0LM-SESN-YR-RNG cursor, bold; /* Highlight*/
      converseLib.validationFailed(26); /* Field missing or invalid*/
      KS0LW00.KS0LW-DATA-CHANGED = "N";
      return;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM002.KS0LM-SESN-CD > " ") /* Season code entered*/
    if (KS0LM002.KS0LM-SESN-CD in XSETBL.XSECD /* Code in table*/
     && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      KS0LW02.KS0LW-SESN-CD = KS0LM002.KS0LM-SESN-CD;
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0LM002.KS0LM-SESN-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(27); /* Field missing or invalid*/
      KS0LW00.KS0LW-DATA-CHANGED = "N";
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the General Product Class code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM002.KS0LM-GPC-CD != KS0LW02.KS0LW-GPC-CD /* GPC code*/
   || KS0LM002.KS0LM-GPC-CD == " ")                 /* or GPC blank*/
    if (KS0LM002.KS0LM-GPC-CD == "EQ")
      if (KS0LW00.KS0LW-SAV-EQUIP-GPC in XGPTBL.XGPCD /* Code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")   /* and active status*/
        ;
        KS0LW02.KS0LW-GPC-CD = KS0LW00.KS0LW-SAV-EQUIP-GPC;
        ;
      else
        ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
        ;
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0LM002.KS0LM-GPC-CD cursor, bold; /* Highlight*/
        converseLib.validationFailed(28); /* Field missing or invalid*/
        KS0LW00.KS0LW-DATA-CHANGED = "N";
        ;
      end
    else
      if (KS0LM002.KS0LM-GPC-CD in XGPTBL.XGPCD /* Code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        ;
        KS0LW02.KS0LW-GPC-CD = KS0LM002.KS0LM-GPC-CD;
        ;
      else
        ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
        ;
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0LM002.KS0LM-GPC-CD cursor, bold; /* Highlight*/
        converseLib.validationFailed(28); /* Field missing or invalid*/
        KS0LW00.KS0LW-DATA-CHANGED = "N";
        ;
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style/Color/Dim detail.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-IX1 = 44;
  while (KS0LW00.KS0LW-IX1 > 0)
    if (KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1] > " ") /* If style entered*/
      KS0LW00.KS0LW-SELECT = "S1";
      KS0LW00.KS0LW-FETCH = "N1";
      KS0LW00.KS0LW-CLOSE = "C1";
      KS0L-25201(); /* Set wildcards for select*/
      KS0L-11220(); /* Call IO6130 select*/
      KS0L-11240(); /* Call IO6130 fetch*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
        ;
    /* Next Sentence*/
      else
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1] cursor, bold;
        converseLib.validationFailed(90); /* Field missing or invalid*/
        ;
      end
      KS0L-11270(); /* Call IO6130 close*/
    else
      if (KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX1] > " "
       || KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX1] > " ")
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1] cursor, bold;
        converseLib.validationFailed(90); /* Field missing or invalid*/
      end
      ;
    end
    KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 - 1;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Customs feature code.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-IX1 = 10;
  while (KS0LW00.KS0LW-IX1 > 0)
    if (KS0LM002.KS0LM-FEAT-CD[KS0LW-IX1] > " " /* If feature entered*/
     && KS0LM002.KS0LM-FEAT-CD[KS0LW-IX1] !=    
    KS0LW00.KS0LW-SAVE-PRBM[KS0LW-IX1])        
      KS0LW00.KS0LW-SAVE-PRBM[KS0LW-IX1] = KS0LM002.KS0LM-FEAT-CD[KS0LW-IX1];
      if (KS0LM002.KS0LM-FEAT-CD[KS0LW-IX1] in YKPTBL.YKP-PRBM-CD
       && YKPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        ;
    /* Next Sentence*/
      else
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0LM002.KS0LM-FEAT-CD[KS0LW-IX1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(68); /* Field missing or invalid*/
        KS0LW00.KS0LW-DATA-CHANGED = "N";
        KS0LW02.KS0LW-FEAT-CD[KS0LW-IX1] = " ";
        ;
      end
    end
    KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 - 1;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Ruling Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM002.KS0LM-RULE-NBR > " ") /* If rule nbr entered*/
    set VBDRUL01 empty; /* Clear record*/
    if (KS0LM002.KS0LM-GPC-CD == "EQ")
      if (KS0LW00.KS0LW-SAV-EQUIP-GPC == " ")
        VBDRUL01.XGPCD = "02";
        KS0LW00.KS0LW-SELECT = "S "; /* Select unique row*/
        VBDRUL01.KS-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
        KS0L-15302(); /* Select VBDRUL01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
          KS0LW02.KS0LW-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
          KS0LW00.KS0LW-SAV-EQUIP-GPC = "02";
          ;
        else
          VBDRUL01.XGPCD = "03";
          KS0LW00.KS0LW-SELECT = "S "; /* Select unique row*/
          VBDRUL01.KS-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
          KS0L-15302(); /* Select VBDRUL01 row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
            KS0LW02.KS0LW-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
            KS0LW00.KS0LW-SAV-EQUIP-GPC = "02";
          else
            KSWREC.XXXPRCNM = "25200"; /* Module identification*/
            set KS0LM002.KS0LM-RULE-NBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(32); /* Field missing or invalid*/
            KS0LW00.KS0LW-DATA-CHANGED = "N";
            ;
          end
        end
      else
        KS0LW00.KS0LW-SELECT = "S "; /* Select unique row*/
        VBDRUL01.XGPCD = KS0LW00.KS0LW-SAV-EQUIP-GPC;
        VBDRUL01.KS-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
        KS0L-15302(); /* Select VBDRUL01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
          KS0LW02.KS0LW-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
          ;
        else
          KSWREC.XXXPRCNM = "25200"; /* Module identification*/
          set KS0LM002.KS0LM-RULE-NBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(32); /* Field missing or invalid*/
          KS0LW00.KS0LW-DATA-CHANGED = "N";
        end
      end
    else
      KS0LW00.KS0LW-SELECT = "S "; /* Select unique row*/
      VBDRUL01.XGPCD = KS0LM002.KS0LM-GPC-CD;
      VBDRUL01.KS-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
      KS0L-15302(); /* Select VBDRUL01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
        KS0LW02.KS0LW-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
        ;
      else
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0LM002.KS0LM-RULE-NBR cursor, bold; /* Highlight*/
        converseLib.validationFailed(32); /* Field missing or invalid*/
        KS0LW00.KS0LW-DATA-CHANGED = "N";
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Customs Product Status code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM002.KS0LM-STAT-CD > " ") /* If status entered*/
    if (KS0LM002.KS0LM-STAT-CD in YPRTBL.YPR-PROD-STAT-CD /* Code in table*/
     && YPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")         /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0LM002.KS0LM-STAT-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(69); /* Field missing or invalid*/
      KS0LW00.KS0LW-DATA-CHANGED = "N";
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the HS Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LM002.KS0LM-HTS-NBR > " ") /* If HS number entered*/
    KS0LW01.KS0LW-HTS-NUMBER = KS0LM002.KS0LM-HTS-NBR;
    KS0LW00.KS0LW-HTS-FORMAT-SW = "Y";
    KS0L-15306(); /* Verify HS format*/
    if (KS0LW00.KS0LW-HTS-FORMAT-SW == "N") /* If HS format incorrect*/
      set KS0LM002.KS0LM-HTS-NBR cursor, bold; /* Highlight field*/
      KS0LW00.KS0LW-DATA-CHANGED = "N";
      KS0LW00.KS0LW-NEW-HS-SWITCH = "N";
      KS0LW02.KS0LW-HTS-NBR = " ";
    end
    if (KS0LM002.KS0LM-HTS-NBR != KS0LW02.KS0LW-HTS-NBR)
      KS0LW02.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
      KS0LW00.KS0LW-NEW-HS-SWITCH = "Y";
      ;
      if (KS0LW00.KS0LW-HTS-FORMAT-SW == "Y") /* If HS format is OK*/
        KS0LW01.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
        KS0LW00.KS0LW-HTS-NBR-WORK = KS0LM002.KS0LM-HTS-NBR;
        if (KS0LW01.KS0LW-HTS-CPTR-CD > " ") /* If chapter code exists*/
          KS0L-25202(); /* ; /* Select VHSCHP01 row*/
        end
        if (SQLCA.VAGen_SQLCODE == 0 /* If chapter code OK*/
         && KS0LW01.KS0LW-HTS-HDG-CD > " ") /* and heading exists*/
          KS0L-25203(); /* ; /* Select VHSHDG01 row*/
          if (SQLCA.VAGen_SQLCODE == 0 /* If heading code OK*/
           && KS0LW01.KS0LW-HTS-1ST-SHDG-CD > " ")
                                   /* and 1st subheading exists*/
            if (KS0LW01.KS0LW-HTS-2ND-SHDG-CD > " ")
                                   /* and 2nd subheading exists*/
              KS0L-25204(); /* Select VHSSHD01 row*/
              if (SQLCA.VAGen_SQLCODE == 0) /* If subheading code OK*/
                if (KS0LW01.KS0LW-HTS-BYTE[11] == "-"
                 || KS0LW01.KS0LW-HTS-BYTE[11] == ",")
                  KS0LW01.KS0LW-HTS-2ND-SHDG-CD = KS0LW00.KS0LW-HTS-2ND-SHDG-2;
                  KS0L-25204(); /* Select VHSSHD01 row*/
                  KS0LW01.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
                  if (SQLCA.VAGen_SQLCODE == 0) /* If subheading code OK*/
                  else
                    if (SQLCA.VAGen_SQLCODE == 100) /* If subheading code not OK*/
                      KS0L-25205(); /* Set up HS Error*/
                    end
                  end
                else
                  if (KS0LW01.KS0LW-HTS-STAT-CD > " ")
                                   /* and status code exists*/
                    KS0L-11254(); /* Select VHSNBR01 row*/
                    if (SQLCA.VAGen_SQLCODE == 0) /* If entire HS number OK*/
                    else
                      if (SQLCA.VAGen_SQLCODE == 100) /* If subheading code not OK*/
                        KS0L-25205(); /* Set up HS Error*/
                      end
                    end
                  end
                end
              else
                if (SQLCA.VAGen_SQLCODE == 100) /* If subheading code not OK*/
                  KS0L-25205(); /* Set up HS Error*/
                end
              end
            else
              KS0L-25205(); /* Set up HS Error*/
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* If heading doesn't exist*/
              KS0L-25205(); /* Set up HS Error*/
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* If chapter doesn't exist*/
            KS0L-25205(); /* Set up HS Error*/
          end
        end
      else
        set KS0LM002.KS0LM-HTS-NBR cursor, bold; /* Highlight field*/
        KS0LW00.KS0LW-DATA-CHANGED = "N";
        KS0LW00.KS0LW-NEW-HS-SWITCH = "N";
        KS0LW02.KS0LW-HTS-NBR = " ";
      end
      KS0LW01.KS0LW-HTS-NBR = " ";
      if (VHSCHP01.XXXSTAT == "I" /* Inactive status*/
       || VHSHDG01.XXXSTAT == "I" 
       || VHSSHD01.XXXSTAT == "I" 
       || VHSNBR01.XXXSTAT == "I")
        KS0L-25205(); /* Set up HS Error*/
      end
    end
    /* verify CVS hts number;*/
    if (KS0LW00.KS0LW-SCV == "Y" /* display map 5*/
     && KS0LM002.KS0LM-HTS-NBR != KS0LM001.KS0LM-HTS-NBR)
      KS0LW05.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
      KS0L-60000();
    end
  end
  ;
  ;
end // end KS0L-25200

// Set wildcards for W02
Function KS0L-25201()
  /* ------------------------------------------------------------*/
  /* Set wildcard values for IO6130 call.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  ;
  if (KS0LW00.KS0LW-KEY-CHANGE == "Y")
    if (KS0LW01.KS0LW-GPC == "EQ")
      VCPROD02.KS-BUS-UNIT-CD = "EQ";
    else
      VCPROD02.KS-BUS-UNIT-CD = KS0LW01.KS0LW-GPC;
    end
    if (KS0LW00.KS0LW-SESN-CD > " ") /* Season code entered*/
      VCPROD02.XSECD = KS0LW00.KS0LW-SESN-CD;
    else
      VCPROD02.XSECD = "*"; /* Season code*/
    end
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* IF KS0LW00.KS0LW-SESN-YR GT '0';*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
    if (KS0LW00.KS0LW-SESN-YR > "  ")
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
      KS0LW00.KS0LW-SESN-YR-NUM = KS0LW00.KS0LW-SESN-YR;
      VCPROD02.XSNYR = KS0LW00.KS0LW-SESN-YR-NUM;
    else
      VCPROD02.XSNYR = -1; /* Season year*/
    end
  else
    if (KS0LM002.KS0LM-GPC-CD == "EQ")
      VCPROD02.KS-BUS-UNIT-CD = "EQ";
    else
      VCPROD02.KS-BUS-UNIT-CD = KS0LM002.KS0LM-GPC-CD;
    end
    if (KS0LM002.KS0LM-SESN-CD > " ") /* Season code entered*/
      VCPROD02.XSECD = KS0LM002.KS0LM-SESN-CD; /* Season code*/
    else
      VCPROD02.XSECD = "*"; /* Season code*/
    end
    if (KS0LM002.KS0LM-SESN-YR-RNG > " ")
      KS0LW02.KS0LW-SESN-YEAR = KS0LM002.KS0LM-SESN-YR-RNG;
      if (KS0LW02.KS0LW-SESN-YEAR > "80")
        KS0LW02.KS0LW-SESN-CENTURY = "19";
      else
        KS0LW02.KS0LW-SESN-CENTURY = "20";
      end
      KS0LW02.KS0LW-SESN-YR-RNG-NUM = KS0LW02.KS0LW-SESN-YR-RNG;
      VCPROD02.XSNYR = KS0LW02.KS0LW-SESN-YR-RNG-NUM; /* Season year*/
    else
      VCPROD02.XSNYR = -1; /* Season year*/
    end
  end
  ;
  VCPROD02.SY1STNBR = KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1];
  VCPROD02.KS-XPRMT-STY-NBR = KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1];
  ;
  if (KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX1] > " ")
    VCPROD02.SY2CLRID = KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX1];
  else
    VCPROD02.SY2CLRID = "*"; /* Wildcard color*/
  end
  if (KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX1] > " ") /* If dimension entered*/
    VCPROD02.XDMCD = KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX1];
  else
    VCPROD02.XDMCD = "*"; /* Wildcard dimension*/
  end
  ;
  VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
  VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
  VCPROD02.KS-HTS-HDG-CD = "*";
  VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
  VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
  VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
  VCPROD02.KS-HTS-STAT-CD = "*";
  VCPROD02.KS-TEAM-CD = "*";
  VCPROD02.KS-PRBM-NBR = -1;
  KSAREC.KSA-TASK = KS0LW00.KS0LW-SELECT;
  ;
  ;
end // end KS0L-25201

// Select VHSCHP01 row
Function KS0L-25202()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSCHP01 empty; /* Clear row storage area*/
  ;
  VHSCHP01.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD; /* Chapter cd*/
  ;
  try
    call "IO6080" ("S ", SQLCA, VHSCHP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "25202"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSCHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSCHP01.VHSCHP01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-25202

// Select VHSHDG01 row
Function KS0L-25203()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* Clear row storage area*/
  ;
  VHSHDG01.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD; /* Chapter cd*/
  VHSHDG01.KS-HTS-HDG-CD = KS0LW01.KS0LW-HTS-HDG-CD; /* Chapter hdg*/
  ;
  try
    call "IO6100" ("S ", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "25203"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSHDG01.VHSHDG01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-25203

// Select VHSSHD01 row
Function KS0L-25204()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSSHD01 empty; /* Clear row storage area*/
  ;
  VHSSHD01.KS-HTS-CPTR-CD = KS0LW01.KS0LW-HTS-CPTR-CD; /* Chapter cd*/
  VHSSHD01.KS-HTS-HDG-CD = KS0LW01.KS0LW-HTS-HDG-CD; /* Chapter hdg*/
  VHSSHD01.KS-HTS-1ST-SHDG-CD = KS0LW01.KS0LW-HTS-1ST-SHDG-CD;
  VHSSHD01.KS-HTS-2ND-SHDG-CD = KS0LW01.KS0LW-HTS-2ND-SHDG-CD;
  ;
  try
    call "IO6110" ("S ", SQLCA, VHSSHD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "25204"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSSHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSSHD01.VHSSHD01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-25204

// Set up HS Number error
Function KS0L-25205()
  /* ------------------------------------------------------------*/
  /* Set up the HS Number Errors.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = "25200";
                                   /* Module identification*/
  set KS0LM002.KS0LM-HTS-NBR cursor, bold; /* Highlight*/
  ;
  if (converseVar.eventKey is enter)
    if (VHSCHP01.XXXSTAT == "I" /* Inactive status*/
     || VHSHDG01.XXXSTAT == "I" 
     || VHSSHD01.XXXSTAT == "I" 
     || VHSNBR01.XXXSTAT == "I")
      converseLib.validationFailed(133);
      VHSCHP01.XXXSTAT = " ";
      VHSHDG01.XXXSTAT = " ";
      VHSSHD01.XXXSTAT = " ";
      VHSNBR01.XXXSTAT = " ";
    else
      converseLib.validationFailed(93);
                                   /* Warning press enter to continue*/
    end
  end
  ;
end // end KS0L-25205

// Verify overlap products
Function KS0L-25300()
  /* ------------------------------------------------------------*/
  /* Check each style/colr/dim on the current page to see if it*/
  /* previously exists on the page.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-IXM = 1; /* Reset index*/
  ;
  while (KS0LW00.KS0LW-IXM < 44) /* Until end of page*/
    if (KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IXM] > " ")
      KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IXM + 1; /* Set index*/
      while (KS0LW00.KS0LW-IX1 <= 44)
        if (KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IXM] == 
        KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1]
         && KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IXM] == 
        KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX1]
         && KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IXM] == 
        KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX1])
          ;
          set KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1] cursor, bold;
          KSWREC.XXXPRCNM = "25300"; /* Module identification*/
          converseLib.validationFailed(118); /* Style already exists*/
          KS0LW00.KS0LW-IX1 = 45; /* End loop*/
          KS0LW00.KS0LW-IXM = 44; /* End loop*/
        else
          KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 + 1; /* Increment index*/
        end
      end
    end
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment index*/
  end
  ;
  if (converseVar.validationMsgNum == 0) /* If no errors so far*/
    ;
    if (KS0LW00.KS0LW-SW1 == "Y" /* If data changed*/
     || KS0LW00.KS0LW-DATA-CHANGED == "Y")
      KS0LW02.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
      KS0LW02.KS0LW-STAT = KS0LM002.KS0LM-STAT-CD;
      KS0LW02.KS0LW-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
      KS0LW02.KS0LW-FEAT-CD[1] = KS0LM002.KS0LM-FEAT-CD[1];
      KS0LW02.KS0LW-FEAT-CD[2] = KS0LM002.KS0LM-FEAT-CD[2];
      KS0LW02.KS0LW-FEAT-CD[3] = KS0LM002.KS0LM-FEAT-CD[3];
      KS0LW02.KS0LW-FEAT-CD[4] = KS0LM002.KS0LM-FEAT-CD[4];
      KS0LW02.KS0LW-FEAT-CD[5] = KS0LM002.KS0LM-FEAT-CD[5];
      KS0LW02.KS0LW-FEAT-CD[6] = KS0LM002.KS0LM-FEAT-CD[6];
      KS0LW02.KS0LW-FEAT-CD[7] = KS0LM002.KS0LM-FEAT-CD[7];
      KS0LW02.KS0LW-FEAT-CD[8] = KS0LM002.KS0LM-FEAT-CD[8];
      KS0LW02.KS0LW-FEAT-CD[9] = KS0LM002.KS0LM-FEAT-CD[9];
      KS0LW02.KS0LW-FEAT-CD[10] = KS0LM002.KS0LM-FEAT-CD[10];
      KS0LW02.KS0LW-GPC-CD = KS0LM002.KS0LM-GPC-CD;
      KS0LW02.KS0LW-REG-CD = KS0LM002.KS0LM-REG-CD;
      KS0LW02.KS0LW-SESN-CD = KS0LM002.KS0LM-SESN-CD;
      KS0LW02.KS0LW-SESN-YEAR = KS0LM002.KS0LM-SESN-YR-RNG;
      if (KS0LM002.KS0LM-SESN-YR-RNG == " ")
        KS0LW02.KS0LW-SESN-YR-RNG = "0";
      end
      KS0LW00.KS0LW-IX2 = 1;
      while (KS0LW00.KS0LW-IX2 <= 44)
        KS0LW02.KS0LW-DTL-STYLE[KS0LW-IX2] = KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX2];
        KS0LW02.KS0LW-DTL-COLOR[KS0LW-IX2] = KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX2];
        KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IX2] = KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX2];
        KS0LW00.KS0LW-IX2 = KS0LW00.KS0LW-IX2 + 1;
      end
      TA5REC.TA5TSQIX = KS0LW00.XXXTSPAG;
      KS0L-22110(); /* update temp storage*/
      KS0LW00.KS0LW-SW1 = "N"; /* Update switch*/
    end
    ;
    KS0LW00.KS0LW-XXXTSPAG = KS0LW00.XXXTSPAG; /* Save current page*/
    KS0LW00.KS0LW-TA5TSQIX = KS0LW00.TA5TSQIX; /* and maximum page*/
    ;
    KS0L-25310(); /* Load style overlap table*/
    ;
    KS0L-25320(); /* Check overlap table for duplicates*/
    ;
    KS0LW00.XXXTSPAG = KS0LW00.KS0LW-XXXTSPAG;
    KS0LW00.TA5TSQIX = KS0LW00.KS0LW-TA5TSQIX;
    KS0L-22120(); /* Read current ts page*/
  end
  ;
  ;
end // end KS0L-25300

// Load overlap style table
Function KS0L-25310()
  /* ------------------------------------------------------------*/
  /* Obtain the table rows to be loaded.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-TS-EOF = "N"; /* Temporary storage EOF switch*/
  KS0LW00.KS0LW-IXM = 1; /* Reset index*/
  KS0LW00.KS0LW-IX1 = 1; /* Reset index*/
  KS0LW00.KS0LW-IX2 = 1; /* Reset index*/
  KS0LW00.KS0LW-STYLE-TABLE = " "; /* Clear overlap style table*/
  ;
  while (KS0LW00.KS0LW-TS-EOF == "N")
    ;
    KS0LW00.XXXTSPAG = KS0LW00.KS0LW-IXM; /* Move page nbr to read*/
    KS0L-22120(); /* Read temp storage page*/
    if (TA5REC.TA5RTNCD == 7) /* If EOF*/
      KS0LW00.KS0LW-TS-EOF = "Y";
    else
      while (KS0LW00.KS0LW-IX2 <= 44) /* While lines exist*/
        if (KS0LW02.KS0LW-DTL-STYLE[KS0LW-IX2] > " ")
          KS0LW00.KS0LW-STYLE-CHECK[KS0LW-IX1] = KS0LW02.KS0LW-DTL-STYLE[KS0LW-IX2];
          KS0LW00.KS0LW-COLOR-CHECK[KS0LW-IX1] = KS0LW02.KS0LW-DTL-COLOR[KS0LW-IX2];
          KS0LW00.KS0LW-DIM-CHECK[KS0LW-IX1] = KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IX2];
          KS0LW00.KS0LW-PAGE-CHECK[KS0LW-IX1] = KS0LW00.XXXTSPAG;
          KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 + 1;
        end
        KS0LW00.KS0LW-IX2 = KS0LW00.KS0LW-IX2 + 1;
      end
    end
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment index*/
    KS0LW00.KS0LW-IX2 = 1; /* Reset index*/
  end
  ;
  ;
end // end KS0L-25310

// Check overlap style table
Function KS0L-25320()
  /* ------------------------------------------------------------*/
  /* Check each style/colr/dim in the overlap style table to see*/
  /* if it previously exists on another page.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-IXM = 1; /* Reset index*/
  ;
  while (KS0LW00.KS0LW-IXM < 2200) /* Until end of table*/
    if (KS0LW00.KS0LW-STYLE-CHECK[KS0LW-IXM] > " ")
      KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IXM + 1; /* Set index*/
      while (KS0LW00.KS0LW-IX1 <= 2200)
        if (KS0LW00.KS0LW-STYLE-CHECK[KS0LW-IX1] > " ")
          if (KS0LW00.KS0LW-STYLE-CHECK[KS0LW-IXM] == 
          KS0LW00.KS0LW-STYLE-CHECK[KS0LW-IX1]
           && KS0LW00.KS0LW-COLOR-CHECK[KS0LW-IXM] == 
          KS0LW00.KS0LW-COLOR-CHECK[KS0LW-IX1]
           && KS0LW00.KS0LW-DIM-CHECK[KS0LW-IXM] == 
          KS0LW00.KS0LW-DIM-CHECK[KS0LW-IX1])
            ;
            KS0L-25321(); /* Process style error*/
            KSWREC.XXXPRCNM = "25320"; /* Module identification*/
            converseLib.validationFailed(118); /* Style already exists*/
            KS0LW00.KS0LW-IX1 = 2201; /* End loop*/
            KS0LW00.KS0LW-IXM = 2201; /* End loop*/
          else
            KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 + 1; /* Increment index*/
          end
        else
          KS0LW00.KS0LW-IX1 = 2201; /* End loop*/
        end
      end
    else
      KS0LW00.KS0LW-IXM = 2200; /* End loop*/
    end
    KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment index*/
  end
  ;
  ;
end // end KS0L-25320

// Process style error
Function KS0L-25321()
  /* ------------------------------------------------------------*/
  /* Check to make sure page is set correctly and highlight*/
  /* problem style.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.XXXTSPAG == KS0LW00.KS0LW-PAGE-CHECK[KS0LW-IX1])
  /* Continue on*/
  else
    KS0LW00.XXXTSPAG = KS0LW00.KS0LW-PAGE-CHECK[KS0LW-IX1];
    KS0L-22120(); /* Read TS page*/
  end
  ;
  KS0LW00.KS0LW-IX3 = 1; /* Reset index*/
  while (KS0LW00.KS0LW-IX3 <= 44) /* Until end of page*/
    if (KS0LW02.KS0LW-DTL-STYLE[KS0LW-IX3] == 
    KS0LW00.KS0LW-STYLE-CHECK[KS0LW-IX1])
      ;
      if (KS0LW02.KS0LW-DTL-COLOR[KS0LW-IX3] == 
      KS0LW00.KS0LW-COLOR-CHECK[KS0LW-IX1]
       || KS0LW00.KS0LW-COLOR-CHECK[KS0LW-IX1] == "***")
        ;
        if (KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IX3] == 
        KS0LW00.KS0LW-DIM-CHECK[KS0LW-IX1]
         || KS0LW00.KS0LW-DIM-CHECK[KS0LW-IX1] == "**")
          ;
          set KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX3] cursor, bold;
          KS0LW00.KS0LW-SWF = "Y";
          ;
        end
      end
    end
    KS0LW00.KS0LW-IX3 = KS0LW00.KS0LW-IX3 + 1;
  end
  ;
  ;
end // end KS0L-25321

// Process valid input requests
Function KS0L-26000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LW00.KS0LW-SWF = "Y"; /* Format the map switch*/
  ;
  if (KS0LW00.KS0LW-SW1 == "Y" /* If data changed*/
   || KS0LW00.KS0LW-DATA-CHANGED == "Y")
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      KS0LW02.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
      KS0LW02.KS0LW-STAT = KS0LM002.KS0LM-STAT-CD;
      KS0LW02.KS0LW-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
      KS0LW02.KS0LW-FEAT-CD[1] = KS0LM002.KS0LM-FEAT-CD[1];
      KS0LW02.KS0LW-FEAT-CD[2] = KS0LM002.KS0LM-FEAT-CD[2];
      KS0LW02.KS0LW-FEAT-CD[3] = KS0LM002.KS0LM-FEAT-CD[3];
      KS0LW02.KS0LW-FEAT-CD[4] = KS0LM002.KS0LM-FEAT-CD[4];
      KS0LW02.KS0LW-FEAT-CD[5] = KS0LM002.KS0LM-FEAT-CD[5];
      KS0LW02.KS0LW-FEAT-CD[6] = KS0LM002.KS0LM-FEAT-CD[6];
      KS0LW02.KS0LW-FEAT-CD[7] = KS0LM002.KS0LM-FEAT-CD[7];
      KS0LW02.KS0LW-FEAT-CD[8] = KS0LM002.KS0LM-FEAT-CD[8];
      KS0LW02.KS0LW-FEAT-CD[9] = KS0LM002.KS0LM-FEAT-CD[9];
      KS0LW02.KS0LW-FEAT-CD[10] = KS0LM002.KS0LM-FEAT-CD[10];
      KS0LW02.KS0LW-GPC-CD = KS0LM002.KS0LM-GPC-CD;
      KS0LW02.KS0LW-REG-CD = KS0LM002.KS0LM-REG-CD;
      KS0LW02.KS0LW-SESN-CD = KS0LM002.KS0LM-SESN-CD;
      KS0LW02.KS0LW-SESN-YEAR = KS0LM002.KS0LM-SESN-YR-RNG;
      if (KS0LM002.KS0LM-SESN-YR-RNG == " ")
        KS0LW02.KS0LW-SESN-YR-RNG = "0";
      end
      KS0LW00.KS0LW-IX2 = 1;
      while (KS0LW00.KS0LW-IX2 <= 44)
        KS0LW02.KS0LW-DTL-STYLE[KS0LW-IX2] = KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX2];
        KS0LW02.KS0LW-DTL-COLOR[KS0LW-IX2] = KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX2];
        KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IX2] = KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX2];
        KS0LW00.KS0LW-IX2 = KS0LW00.KS0LW-IX2 + 1;
      end
      TA5REC.TA5TSQIX = KS0LW00.XXXTSPAG;
      KS0L-22110(); /* update temp storage*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    ;
    KS0LW00.XXXTSPAG = KS0LW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward requested*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    ;
    KS0LW00.XXXTSPAG = KS0LW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If enter was pressed and no errors and copy from color in*/
  /* process:  check to see if original text and problems should*/
  /* be deleted, if not add text, problems, and update product.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* Enter pressed*/
    if (converseVar.validationMsgNum == 0) /* and no errors*/
      if (KS0LW00.KS0LW-DATA-CHANGED == "Y")
        if (KS0LM002.KS0LM-HTS-NBR == KS0LW00.KS0LW-SAVE-HS-NBR
         && KS0LM002.KS0LM-STAT-CD == KS0LW00.KS0LW-SAVE-STATUS
         && KS0LM002.KS0LM-RULE-NBR == KS0LW00.KS0LW-SAVE-RULE-NBR
         && KS0LM002.KS0LM-FEAT-CD[1] == KS0LW00.KS0LW-SAVE-FEAT-CD[1]
         && KS0LM002.KS0LM-FEAT-CD[2] == KS0LW00.KS0LW-SAVE-FEAT-CD[2]
         && KS0LM002.KS0LM-FEAT-CD[3] == KS0LW00.KS0LW-SAVE-FEAT-CD[3]
         && KS0LM002.KS0LM-FEAT-CD[4] == KS0LW00.KS0LW-SAVE-FEAT-CD[4]
         && KS0LM002.KS0LM-FEAT-CD[5] == KS0LW00.KS0LW-SAVE-FEAT-CD[5]
         && KS0LM002.KS0LM-FEAT-CD[6] == KS0LW00.KS0LW-SAVE-FEAT-CD[6]
         && KS0LM002.KS0LM-FEAT-CD[7] == KS0LW00.KS0LW-SAVE-FEAT-CD[7]
         && KS0LM002.KS0LM-FEAT-CD[8] == KS0LW00.KS0LW-SAVE-FEAT-CD[8]
         && KS0LM002.KS0LM-FEAT-CD[9] == KS0LW00.KS0LW-SAVE-FEAT-CD[9]
         && KS0LM002.KS0LM-FEAT-CD[10] == KS0LW00.KS0LW-SAVE-FEAT-CD[10]
         && KS0LM002.KS0LM-GPC-CD == KS0LW00.KS0LW-SAVE-GPC-CD
         && KS0LM002.KS0LM-SESN-CD == KS0LW00.KS0LW-SAVE-SESN-CD
         && KS0LM002.KS0LM-SESN-YR-RNG == KS0LW00.KS0LW-SAVE-SESN-YR)
          ;
          KS0LW00.TA5TSQIX = 0; /* Temp storage page*/
          KS0LW00.KS0LW-IXM = 1; /* TS2 page nbr*/
          KS0LW00.KS0LW-IX1 = 1; /* Map2 line nbr*/
          KS0LW00.KS0LW-TS-EOF = "N"; /* Temporary storage EOF switch*/
          ;
          while (KS0LW00.KS0LW-TS-EOF == "N")
            ;
            KS0LW00.XXXTSPAG = KS0LW00.KS0LW-IXM;
                                   /* Move page nbr to read*/
            KS0L-22120(); /* Read temp storage page*/
            if (TA5REC.TA5RTNCD == 7) /* If EOF*/
              KS0LW00.KS0LW-TS-EOF = "Y";
            else
              while (KS0LW00.KS0LW-IX1 <= 44) /* While lines exist*/
                if (KS0LW02.KS0LW-DTL-STYLE[KS0LW-IX1] > " ")
                  KS0L-26100(); /* Process VCPROD01 updates*/
                end
                KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 + 1;
              end
            end
            KS0LW00.KS0LW-IXM = KS0LW00.KS0LW-IXM + 1; /* Increment index*/
            KS0LW00.KS0LW-IX1 = 1; /* Reset index*/
            KS0LW01.KS0LW-SAVE-INDEX = KS0LW02.KS0LW-SAVE-INDEX;
            KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW02.KS0LW-SAVE-PG-NBR;
            KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW02.KS0LW-SAVE-MAX-PG;
            KS0LW01.KS0LW-SAVE-STY-CS = KS0LW02.KS0LW-SAVE-STY-CS;
            set KS0LW02 empty; /* M002 display storage*/
            KS0LW02.KS0LW-SAVE-INDEX = KS0LW01.KS0LW-SAVE-INDEX;
            KS0LW02.KS0LW-SAVE-PG-NBR = KS0LW01.KS0LW-SAVE-PG-NBR;
            KS0LW02.KS0LW-SAVE-MAX-PG = KS0LW01.KS0LW-SAVE-MAX-PG;
            KS0LW02.KS0LW-SAVE-STY-CS = KS0LW01.KS0LW-SAVE-STY-CS;
            KS0LW02.KS0LW-HTS-NBR = KS0LW00.KS0LW-SAVE-HS-NBR;
            KS0LW02.KS0LW-STAT = KS0LW00.KS0LW-SAVE-STATUS;
            KS0LW02.KS0LW-RULE-NBR = KS0LW00.KS0LW-SAVE-RULE-NBR;
            KS0LW02.KS0LW-FEAT-CD[1] = KS0LW00.KS0LW-SAVE-FEAT-CD[1];
            KS0LW02.KS0LW-FEAT-CD[2] = KS0LW00.KS0LW-SAVE-FEAT-CD[2];
            KS0LW02.KS0LW-FEAT-CD[3] = KS0LW00.KS0LW-SAVE-FEAT-CD[3];
            KS0LW02.KS0LW-FEAT-CD[4] = KS0LW00.KS0LW-SAVE-FEAT-CD[4];
            KS0LW02.KS0LW-FEAT-CD[5] = KS0LW00.KS0LW-SAVE-FEAT-CD[5];
            KS0LW02.KS0LW-FEAT-CD[6] = KS0LW00.KS0LW-SAVE-FEAT-CD[6];
            KS0LW02.KS0LW-FEAT-CD[7] = KS0LW00.KS0LW-SAVE-FEAT-CD[7];
            KS0LW02.KS0LW-FEAT-CD[8] = KS0LW00.KS0LW-SAVE-FEAT-CD[8];
            KS0LW02.KS0LW-FEAT-CD[9] = KS0LW00.KS0LW-SAVE-FEAT-CD[9];
            KS0LW02.KS0LW-FEAT-CD[10] = KS0LW00.KS0LW-SAVE-FEAT-CD[10];
            KS0LW02.KS0LW-GPC-CD = KS0LW00.KS0LW-SAVE-GPC-CD;
            KS0LW02.KS0LW-SESN-CD = KS0LW00.KS0LW-SAVE-SESN-CD;
            KS0LW02.KS0LW-SESN-YEAR = KS0LW00.KS0LW-SAVE-SESN-YR;
          end
          ;
          KS0LW00.KS0LW-VCPROD01-UPD = "Y"; /* Update flag*/
          KS0LW00.KS0LW-SWD = "1"; /* Map switch*/
          KS0LW00.KS0LW-SWR = "Y"; /* Request for data*/
          KS0LW00.KS0LW-IX1 = 1;
          while (KS0LW00.KS0LW-IX1 <= KS0LW02.KS0LW-SAVE-MAX-PG)
            KS0LW00.XXXTSPAG = KS0LW00.KS0LW-IX1;
            KS0L-12120(); /* Read TS page*/
            KS0LW00.KS0LW-IX2 = 1;
            while (KS0LW00.KS0LW-IX2 <= 22)
              KS0LW01.KS0LW-SEL[KS0LW-IX2] = " ";
              KS0LW00.KS0LW-IX2 = KS0LW00.KS0LW-IX2 + 1;
            end
            KS0L-12110(); /* Update TS page*/
            KS0LW00.KS0LW-IX1 = KS0LW00.KS0LW-IX1 + 1;
          end
          KS0LW00.XXXTSPAG = 0;
          KS0LW00.TA5TSQIX = 0;
          KS0LW01.KS0LW-SAVE-INDEX = KS0LW02.KS0LW-SAVE-INDEX;
          KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW02.KS0LW-SAVE-PG-NBR;
          KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW02.KS0LW-SAVE-MAX-PG;
          KS0LW01.KS0LW-SAVE-STY-CS = KS0LW02.KS0LW-SAVE-STY-CS;
          KS0LW00.KS0LW-DATA-CHANGED = "Y";
          KS0LW00.KS0LW-SWF = "Y"; /* Format the map switch*/
        else
          if (KS0LM002.KS0LM-DTL-STY-NBR[44] > " " /* If page is full*/
           && KS0LW00.XXXTSPAG == KS0LW00.TA5TSQIX) /* and last page*/
            KS0LW01.KS0LW-SAVE-INDEX = KS0LW02.KS0LW-SAVE-INDEX;
            KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW02.KS0LW-SAVE-PG-NBR;
            KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW02.KS0LW-SAVE-MAX-PG;
            KS0LW01.KS0LW-SAVE-STY-CS = KS0LW02.KS0LW-SAVE-STY-CS;
            set KS0LW02 empty;
            KS0LW02.KS0LW-SAVE-INDEX = KS0LW01.KS0LW-SAVE-INDEX;
            KS0LW02.KS0LW-SAVE-PG-NBR = KS0LW01.KS0LW-SAVE-PG-NBR;
            KS0LW02.KS0LW-SAVE-MAX-PG = KS0LW01.KS0LW-SAVE-MAX-PG;
            KS0LW02.KS0LW-SAVE-STY-CS = KS0LW01.KS0LW-SAVE-STY-CS;
            KS0LW00.KS0LW-SAVE-HS-NBR = " ";
            KS0LW00.KS0LW-SAVE-STATUS = " ";
            KS0LW00.KS0LW-SAVE-RULE-NBR = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[1] = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[2] = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[3] = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[4] = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[5] = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[6] = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[7] = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[8] = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[9] = " ";
            KS0LW00.KS0LW-SAVE-FEAT-CD[10] = " ";
            KS0LW00.KS0LW-SAVE-GPC-CD = " ";
            KS0LW00.KS0LW-SAVE-SESN-CD = " ";
            KS0LW00.KS0LW-SAVE-SESN-YR = " ";
            KS0LW02.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
            KS0LW02.KS0LW-STAT = KS0LM002.KS0LM-STAT-CD;
            KS0LW02.KS0LW-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
            KS0LW02.KS0LW-FEAT-CD[1] = KS0LM002.KS0LM-FEAT-CD[1];
            KS0LW02.KS0LW-FEAT-CD[2] = KS0LM002.KS0LM-FEAT-CD[2];
            KS0LW02.KS0LW-FEAT-CD[3] = KS0LM002.KS0LM-FEAT-CD[3];
            KS0LW02.KS0LW-FEAT-CD[4] = KS0LM002.KS0LM-FEAT-CD[4];
            KS0LW02.KS0LW-FEAT-CD[5] = KS0LM002.KS0LM-FEAT-CD[5];
            KS0LW02.KS0LW-FEAT-CD[6] = KS0LM002.KS0LM-FEAT-CD[6];
            KS0LW02.KS0LW-FEAT-CD[7] = KS0LM002.KS0LM-FEAT-CD[7];
            KS0LW02.KS0LW-FEAT-CD[8] = KS0LM002.KS0LM-FEAT-CD[8];
            KS0LW02.KS0LW-FEAT-CD[9] = KS0LM002.KS0LM-FEAT-CD[9];
            KS0LW02.KS0LW-FEAT-CD[10] = KS0LM002.KS0LM-FEAT-CD[10];
            KS0LW02.KS0LW-GPC-CD = KS0LM002.KS0LM-GPC-CD;
            KS0LW02.KS0LW-REG-CD = KS0LM002.KS0LM-REG-CD;
            KS0LW02.KS0LW-SESN-CD = KS0LM002.KS0LM-SESN-CD;
            KS0LW02.KS0LW-SESN-YEAR = KS0LM002.KS0LM-SESN-YR-RNG;
            KS0L-21200(); /* Add temp storage*/
            KS0LW00.XXXTSPAG = KS0LW00.TA5TSQIX; /* Current page*/
            KS0LW00.KS0LW-SWF = "Y"; /* Format the map*/
            if (KS0LM002.KS0LM-HTS-NBR != KS0LW00.KS0LW-SAVE-HS-NBR)
              KS0LW00.KS0LW-SCV = "Y"; /* Turn map5 flag on*/
            end
          else
            KS0LW00.KS0LW-SAVE-HS-NBR = KS0LM002.KS0LM-HTS-NBR;
            KS0LW00.KS0LW-SAVE-STATUS = KS0LM002.KS0LM-STAT-CD;
            KS0LW00.KS0LW-SAVE-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
            KS0LW00.KS0LW-SAVE-FEAT-CD[1] = KS0LM002.KS0LM-FEAT-CD[1];
            KS0LW00.KS0LW-SAVE-FEAT-CD[2] = KS0LM002.KS0LM-FEAT-CD[2];
            KS0LW00.KS0LW-SAVE-FEAT-CD[3] = KS0LM002.KS0LM-FEAT-CD[3];
            KS0LW00.KS0LW-SAVE-FEAT-CD[4] = KS0LM002.KS0LM-FEAT-CD[4];
            KS0LW00.KS0LW-SAVE-FEAT-CD[5] = KS0LM002.KS0LM-FEAT-CD[5];
            KS0LW00.KS0LW-SAVE-FEAT-CD[6] = KS0LM002.KS0LM-FEAT-CD[6];
            KS0LW00.KS0LW-SAVE-FEAT-CD[7] = KS0LM002.KS0LM-FEAT-CD[7];
            KS0LW00.KS0LW-SAVE-FEAT-CD[8] = KS0LM002.KS0LM-FEAT-CD[8];
            KS0LW00.KS0LW-SAVE-FEAT-CD[9] = KS0LM002.KS0LM-FEAT-CD[9];
            KS0LW00.KS0LW-SAVE-FEAT-CD[10] = KS0LM002.KS0LM-FEAT-CD[10];
            KS0LW00.KS0LW-SAVE-GPC-CD = KS0LM002.KS0LM-GPC-CD;
            KS0LW00.KS0LW-SAVE-SESN-CD = KS0LM002.KS0LM-SESN-CD;
            KS0LW00.KS0LW-SAVE-SESN-YR = KS0LM002.KS0LM-SESN-YR-RNG;
            ;
            converseLib.validationFailed(119); /* Press enter to process update*/
            KSWREC.XXXPRCNM = "26000"; /* Module identifcation*/
            KS0LW00.KS0LW-SCV = "N"; /* /set map5 flag off*/
          end
        end
        ;
      end
    end
  end
  if (converseVar.eventKey is enter /* Enter pressed*/
   && KS0LW00.KS0LW-DATA-CHANGED == "N")
    if (converseVar.validationMsgNum == 0) /* and no errors*/
      converseLib.validationFailed(120); /* Enter change information*/
      KSWREC.XXXPRCNM = "26000"; /* Module identifcation*/
      set KS0LM002.KS0LM-HTS-NBR cursor, bold;
      set KS0LM002.KS0LM-RULE-NBR bold;
      set KS0LM002.KS0LM-STAT-CD bold;
      set KS0LM002.KS0LM-FEAT-CD[1] bold;
      ;
    else
      KS0LW00.KS0LW-SWF = "N"; /* Format map switch*/
    end
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 pressed*/
    ;
    KS0LW00.KS0LW-SWR = "N"; /* Request for data switch*/
    ;
    KS0LW00.KS0LW-SWD = "1"; /* Map switch*/
    KS0LW01.KS0LW-SAVE-INDEX = KS0LW02.KS0LW-SAVE-INDEX;
    KS0LW01.KS0LW-SAVE-PG-NBR = KS0LW02.KS0LW-SAVE-PG-NBR;
    KS0LW01.KS0LW-SAVE-STY-CS = KS0LW02.KS0LW-SAVE-STY-CS;
    KS0LW01.KS0LW-SAVE-MAX-PG = KS0LW02.KS0LW-SAVE-MAX-PG;
    KS0LW00.TA5TSQIX = KS0LW02.KS0LW-SAVE-MAX-PG;
    TA5REC.TA5TSQIX = KS0LW02.KS0LW-SAVE-MAX-PG;
    converseLib.validationFailed(0); /* Clear message file*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
  ;
end // end KS0L-26000

// Process VCPROD updates
Function KS0L-26100()
  /* ------------------------------------------------------------*/
  /* Process all colors for each style.*/
  /* ------------------------------------------------------------*/
  ;
  KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1] = KS0LW02.KS0LW-DTL-STYLE[KS0LW-IX1];
  KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX1] = KS0LW02.KS0LW-DTL-COLOR[KS0LW-IX1];
  KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX1] = KS0LW02.KS0LW-DTL-DIMENSION[KS0LW-IX1];
  ;
  KS0L-25201(); /* Set wildcards for select*/
  ;
  KS0LW00.KS0LW-SELECT = "S1";
  KS0LW00.KS0LW-FETCH = "N1";
  KS0LW00.KS0LW-CLOSE = "C1";
  KS0LW00.KS0LW-SWC = "N"; /* End of cursor switch*/
  ;
  KS0L-11220(); /* Call IO6130 select*/
  ;
  while (KS0LW00.KS0LW-SWC == "N")
    KS0L-11240(); /* Call IO6130 fetch*/
    if (KS0LW00.KS0LW-SWC == "N") /* Normal return*/
      if (KS0LW00.KS0LW-FEAT-CHANGE == "Y")
        KS0L-26110(); /* Process VCPR0B updates*/
        KS0LW00.KS0LW-SAVE-STY-NBR = VCPROD02.SY1STNBR;
        KS0LW00.KS0LW-SAVE-TXT-NBR = VCPROD02.KS-TXT-NBR;
      else
        KS0LW02.KS0LW-PRBM-NBR = VCPROD02.KS-PRBM-NBR;
      end
      if (KS0LW00.KS0LW-KEY-CHANGE == "Y")
        KS0L-26120(); /* Delete/Add VCPR0D row*/
      else
        KS0L-26130(); /* Update VCPR0D row process*/
      end
      if (KS0LW00.KS0LW-HTS-CHANGE == "Y")
        KS0L-26140(); /* Write VKSAUD row process*/
      end
    end
    ;
  end
  ;
  KS0L-11270(); /* Call IO6130 close*/
  ;
  ;
end // end KS0L-26100

// Process VCPROB updates process
Function KS0L-26110()
  /* ------------------------------------------------------------*/
  /* Format the data and add rows until end of data.*/
  /* ------------------------------------------------------------*/
  if (VCPROD02.KS-PRBM-NBR == 0) /* If Feature number does not exist*/
    if (KS0LM002.KS0LM-FEAT-CD[1] > " " /* and Feature code exists*/
     || KS0LM002.KS0LM-FEAT-CD[2] > " " 
     || KS0LM002.KS0LM-FEAT-CD[3] > " " 
     || KS0LM002.KS0LM-FEAT-CD[4] > " " 
     || KS0LM002.KS0LM-FEAT-CD[5] > " " 
     || KS0LM002.KS0LM-FEAT-CD[6] > " " 
     || KS0LM002.KS0LM-FEAT-CD[7] > " " 
     || KS0LM002.KS0LM-FEAT-CD[8] > " " 
     || KS0LM002.KS0LM-FEAT-CD[9] > " " 
     || KS0LM002.KS0LM-FEAT-CD[10] > " ")
      if (VCPROD02.SY1STNBR == KS0LW00.KS0LW-SAVE-STY-NBR
       && VCPROD02.KS-TXT-NBR == KS0LW00.KS0LW-SAVE-TXT-NBR
       && KS0LW00.KS0LW-SAVE-PRBM-NBR > 0
       && VCPROD02.XGPCD != "02")
        KS0LW02.KS0LW-PRBM-NBR = KS0LW00.KS0LW-SAVE-PRBM-NBR;
        VCPROD02.KS-PRBM-NBR = KS0LW00.KS0LW-SAVE-PRBM-NBR;
      else
        KS0L-26111(); /* Get next prbm nbr*/
        KS0LW02.KS0LW-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
        VCPROD02.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
        KS0LW00.KS0LW-SAVE-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
      end
    end
  else
    KS0LW02.KS0LW-PRBM-NBR = VCPROD02.KS-PRBM-NBR;
  end
  ;
  if (KS0LW00.KS0LW-PRBM[1] > " "
   && KS0LM002.KS0LM-FEAT-CD[1] == " ")
    VCPROB01.KS-PRBM-NBR = VCPROD02.KS-PRBM-NBR;
    VCPROB01.YKP-PRBM-CD = KS0LW00.KS0LW-PRBM[1];
    KS0L-26112(); /* Select unique row VCPROB01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/
      KS0L-26113(); /* Delete VCPROB01 row*/
    end
  end
  ;
  KS0LW00.KS0LW-IX2 = 1; /* Display line index*/
  while (KS0LW00.KS0LW-IX2 <= 10) /* Until end of data*/
    ;
    if (KS0LM002.KS0LM-FEAT-CD[KS0LW-IX2] > " ") /* If prbm exists*/
      VCPROB01.KS-PRBM-NBR = KS0LW02.KS0LW-PRBM-NBR;
      VCPROB01.YKP-PRBM-CD = KS0LM002.KS0LM-FEAT-CD[KS0LW-IX2];
      XX0XS01(); /* Get system date,time*/
      VCPROB01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move set up date*/
      VCPROB01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
      VCPROB01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
      VCPROB01.ZZZCHGCT = 0; /* Move chg count*/
      KS0L-26112(); /* Select unique*/
      if (SQLCA.VAGen_SQLCODE == 100) /* If prbm does not already exist*/
        KS0L-26114(); /* Add prbm row*/
      end
    end
    ;
    KS0LW00.KS0LW-IX2 = KS0LW00.KS0LW-IX2 + 1; /* Increment index*/
  end
  ;
  KS0L-11251(); /* Call VCPROB01 select*/
  KS0L-11252(); /* Call VCPROB01 fetch*/
  if (SQLCA.VAGen_SQLCODE == 100) /* If no rows exist*/
    KS0LW02.KS0LW-PRBM-NBR = 0;
  end
  KS0L-11253(); /* Call VCPROB01 close*/
  ;
  ;
end // end KS0L-26110

// Select next prbm nbr VKSCTL01
Function KS0L-26111()
  /* ------------------------------------------------------------*/
  /* Get next text number or problem number from DCUSTM.VKSCTL01.*/
  /* ------------------------------------------------------------*/
  ;
  set VKSCTL01 empty;
  ;
  XX0XS01(); /* Get system date and time*/
  ;
  VKSCTL01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VKSCTL01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO6160" ("G2", SQLCA, VKSCTL01) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table row*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSCTL01.VKSCTL01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-26111

// Select unique VCPROB01 row
Function KS0L-26112()
  ;
  try
    call "IO6140" ("S ", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or prbm does not exist*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26112"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-26112

// Delete VCPROB01 row
Function KS0L-26113()
  ;
  try
    call "IO6140" ("D ", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26113"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE A TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-26113

// Add VCPROB01 row
Function KS0L-26114()
  ;
  try
    call "IO6140" ("A ", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26114"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A TABLE ROW         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-26114

// Delete/Add VCPROD row process
Function KS0L-26120()
  /* ------------------------------------------------------------*/
  /* Select row, if exists delete and add new product line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0L-26121(); /* Delete VCPROD02 row*/
  if (KS0LW02.KS0LW-GPC-CD == "EQ")
    VCPROD02.XGPCD = KS0LW00.KS0LW-SAV-EQUIP-GPC;
  else
    VCPROD02.XGPCD = KS0LW02.KS0LW-GPC-CD;
  end
  if (KS0LW02.KS0LW-GPC-CD == "EQ")
    VCPROD02.KS-BUS-UNIT-CD = "EQ";
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0LW02.KS0LW-GPC-CD;
  end
  if (KS0LW02.KS0LW-SESN-CD > " ")
    VCPROD02.XSECD = KS0LW02.KS0LW-SESN-CD;
    KS0LW02.KS0LW-SESN-YR-RNG-NUM = KS0LW02.KS0LW-SESN-YR-RNG;
    VCPROD02.XSNYR = KS0LW02.KS0LW-SESN-YR-RNG-NUM;
  end
  if (KS0LW00.KS0LW-HTS-CHANGE == "Y")
    KS0LW00.KS0LW-SAVE-HTS-NBR = " ";
    KS0LW00.KS0LW-SAVE-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
    KS0LW00.KS0LW-SAVE-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
    KS0LW00.KS0LW-SAVE-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
    KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
    KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
    KS0LW00.KS0LW-SAVE-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
    KS0LW00.KS0LW-SAVE-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
    if (KS0LM002.KS0LM-HTS-NBR > " ")
      KS0LW01.KS0LW-HTS-NUMBER = KS0LM002.KS0LM-HTS-NBR;
      if (KS0LW01.KS0LW-HTS-BYTE[11] == "-"
       || KS0LW01.KS0LW-HTS-BYTE[11] == ",")
        KS0LW00.KS0LW-HTS-NBR-WORK = KS0LM002.KS0LM-HTS-NBR;
        VCPROD02.KS-HTS-CPTR-CD = KS0LW00.KS0LW-HTS-CPTR;
        VCPROD02.KS-HTS-HDG-CD = KS0LW00.KS0LW-HTS-HDG;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW00.KS0LW-HTS-1ST-SHDG;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW00.KS0LW-HTS-2ND-SHDG-1;
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0LW00.KS0LW-HTS-2ND-SHDG-2;
        VCPROD02.KS-HTS-STAT-CD = " ";
        VCPROD02.KS-HTS-SUFX-ID = " ";
        if (KS0LW01.KS0LW-HTS-BYTE[11] == ",")
          VCPROD02.KS-HTS-RNG-FL = "N";
        else
          VCPROD02.KS-HTS-RNG-FL = "Y";
        end
      else
        KS0LW02.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
        VCPROD02.KS-HTS-CPTR-CD = KS0LW02.KS0LW-HTS-CPTR-CD;
        VCPROD02.KS-HTS-HDG-CD = KS0LW02.KS0LW-HTS-HDG-CD;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW02.KS0LW-HTS-1ST-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW02.KS0LW-HTS-2ND-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = " ";
        VCPROD02.KS-HTS-STAT-CD = KS0LW02.KS0LW-HTS-STAT-CD;
        VCPROD02.KS-HTS-SUFX-ID = " ";
        VCPROD02.KS-HTS-RNG-FL = "N";
      end
    else
      VCPROD02.KS-HTS-CPTR-CD = " ";
      VCPROD02.KS-HTS-HDG-CD = " ";
      VCPROD02.KS-HTS-1ST-SHDG-CD = " ";
      VCPROD02.KS-HTS-2ND-SHDG-CD[1] = " ";
      VCPROD02.KS-HTS-2ND-SHDG-CD[2] = " ";
      VCPROD02.KS-HTS-STAT-CD = " ";
      VCPROD02.KS-HTS-SUFX-ID = " ";
      VCPROD02.KS-HTS-RNG-FL = "N";
    end
  end
  ;
  if (KS0LW00.KS0LW-RULE-NBR > " "
   || KS0LM002.KS0LM-RULE-NBR > " ")
    VCPROD02.KS-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
  end
  if (KS0LW00.KS0LW-STAT-CD > " "
   || KS0LM002.KS0LM-STAT-CD > " ")
    VCPROD02.YPR-PROD-STAT-CD = KS0LM002.KS0LM-STAT-CD;
  end
  VCPROD02.KS-PRBM-NBR = KS0LW02.KS0LW-PRBM-NBR;
  ;
  KS0L-26122(); /* Default status code field*/
  ;
  KS0L-26123(); /* Select unique VCPROD02 row*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Select successful*/
    converseLib.validationFailed(83); /* Duplicate style message*/
    KSWREC.XXXPRCNM = "26120";
    set KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1] cursor, bold;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  else
    KS0L-26124(); /* Add VCPROD02 row*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Add not successful*/
      converseLib.validationFailed(11); /* Data in use message*/
      KSWREC.XXXPRCNM = "26120";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      return;
    end
  end
  ;
  ;
end // end KS0L-26120

// Delete VCPROD01 row
Function KS0L-26121()
  /* ------------------------------------------------------------*/
  /* Delete a row to the DCUSTM.VCPROD01 table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("D ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26121"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE A TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-26121

// Default status code field
Function KS0L-26122()
  /* ------------------------------------------------------------*/
  /* Default 'STATUS:' if not already entered by user.*/
  /* ------------------------------------------------------------*/
  ;
  if (VCPROD02.YPR-PROD-STAT-CD == " ") /* If status blank*/
    if (VCPROD02.KS-HTS-CPTR-CD == " ") /* If HS number not entered*/
      VCPROD02.YPR-PROD-STAT-CD = "NC"; /* Set non-classified*/
    end
    if (VCPROD02.KS-HTS-CPTR-CD > " ") /* If HS number entered*/
      if (VCPROD02.KS-RULE-NBR == " ") /* and rule nbr not entered*/
        VCPROD02.YPR-PROD-STAT-CD = "TC";
                                   /* Set tentatively classified*/
      else
        VCPROD02.YPR-PROD-STAT-CD = "BR";
                                   /* Set binding ruling assigned*/
      end
    end
  else
    if (VCPROD02.YPR-PROD-STAT-CD == "BR") /* If binding ruling assigned*/
      if (VCPROD02.KS-RULE-NBR == " ") /* If rule nbr not entered*/
        VCPROD02.YPR-PROD-STAT-CD = "TC"; /* Set tent classified*/
        if (VCPROD02.KS-HTS-CPTR-CD == " ") /* If HS number not entered*/
          VCPROD02.YPR-PROD-STAT-CD = "NC";
        end
      end
    else
      if (VCPROD02.YPR-PROD-STAT-CD == "TC" /* If tentatively classified*/
       || VCPROD02.YPR-PROD-STAT-CD == "SB" /* or sent for bind rule*/
       || VCPROD02.YPR-PROD-STAT-CD == "SP") /* or scheduled for preclass*/
        if (VCPROD02.KS-RULE-NBR > " " /* If rule nbr entered*/
         && VCPROD02.KS-HTS-CPTR-CD > " ") /* and HS number entered*/
          VCPROD02.YPR-PROD-STAT-CD = "BR"; /* Set BR*/
        else
          if (VCPROD02.YPR-PROD-STAT-CD == "TC"
           && VCPROD02.KS-HTS-CPTR-CD == " ") /* If HS number not entered*/
            VCPROD02.YPR-PROD-STAT-CD = "NC";
          end
        end
      else
        if (VCPROD02.YPR-PROD-STAT-CD == "SD") /* If scheduled preclass drop*/
          if (VCPROD02.KS-HTS-CPTR-CD > " " /* If HS nbr entered*/
           && VCPROD02.KS-RULE-NBR > " ")   /* If rule nbr entered*/
            VCPROD02.YPR-PROD-STAT-CD = "DS"; /* Set dropped*/
          end
        else
          if (VCPROD02.YPR-PROD-STAT-CD == "NC") /* If not classified*/
            if (VCPROD02.KS-HTS-CPTR-CD > " ") /* and HS number entered*/
              VCPROD02.YPR-PROD-STAT-CD = "TC"; /* Set tent classified*/
              if (VCPROD02.KS-RULE-NBR > " ") /* If rule number entered*/
                VCPROD02.YPR-PROD-STAT-CD = "BR";
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KS0L-26122

// Select unique VCPROD01 row
Function KS0L-26123()
  /* ------------------------------------------------------------*/
  /* Select the unique row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("S ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row does not exist*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26123"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-26123

// Add VCPROD01 row
Function KS0L-26124()
  /* ------------------------------------------------------------*/
  /* Add a row to the DCUSTM.VCPROD02 table.*/
  /* ------------------------------------------------------------*/
  ;
  VCPROD02.XXXUSRID = COMMAREA.CAUSERID;
  XX0XS01();
  VCPROD02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VCPROD02.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VCPROD02.ZZZCHGCT = VCPROD01.ZZZCHGCT + 1;
  ;
  try
    call "VCPROD02" ("A ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26124"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A TABLE ROW         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-26124

// Update VCPROD01 row process
Function KS0L-26130()
  /* ------------------------------------------------------------*/
  /* Upd a row to the DCUSTM.VCPROD01 table.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0LW00.KS0LW-KEY-CHANGE == "Y")
    if (KS0LM002.KS0LM-GPC-CD == "EQ")
      VCPROD02.KS-BUS-UNIT-CD = "EQ";
    else
      VCPROD02.KS-BUS-UNIT-CD = KS0LM002.KS0LM-GPC-CD;
    end
    if (KS0LM002.KS0LM-SESN-CD > " ") /* If season entered*/
      VCPROD02.XSECD = KS0LM002.KS0LM-SESN-CD; /* Season code*/
      KS0LW02.KS0LW-SESN-YR-RNG-NUM = KS0LW02.KS0LW-SESN-YR-RNG;
      VCPROD02.XSNYR = KS0LW02.KS0LW-SESN-YR-RNG-NUM; /* Season year*/
    end
  end
  ;
  KS0LW00.KS0LW-SKIP-KSAUD = "N";
  if (KS0LW00.KS0LW-HTS-CHANGE == "Y") /* If HS changed*/
    if (KS0LW00.KS0LW-HS-NBR > " " /* If HS select*/
     && KS0LW00.KS0LW-HS-SELECT == "Y")
      KS0LW01.KS0LW-HTS-NUMBER = KS0LW00.KS0LW-HS-NBR;
      if (KS0LW01.KS0LW-HTS-BYTE[11] == "-"
       || KS0LW01.KS0LW-HTS-BYTE[11] == ",")
        KS0LW00.KS0LW-HTS-NBR-WORK = KS0LW00.KS0LW-HS-NBR;
        KS0LW00.KS0LW-SAVE-CPTR-CD = KS0LW00.KS0LW-HTS-CPTR;
        KS0LW00.KS0LW-SAVE-HDG-CD = KS0LW00.KS0LW-HTS-HDG;
        KS0LW00.KS0LW-SAVE-1ST-SHDG-CD = KS0LW00.KS0LW-HTS-1ST-SHDG;
        KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[1] = KS0LW00.KS0LW-HTS-2ND-SHDG-1;
        KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[2] = KS0LW00.KS0LW-HTS-2ND-SHDG-2;
        KS0LW00.KS0LW-SAVE-RNG-FL = KS0LW00.KS0LW-HTS-RNG-FL;
        KS0LW00.KS0LW-SAVE-STAT-CD = " ";
      else
        KS0LW02.KS0LW-HTS-NBR = KS0LW00.KS0LW-HS-NBR;
        KS0LW00.KS0LW-SAVE-CPTR-CD = KS0LW02.KS0LW-HTS-CPTR-CD;
        KS0LW00.KS0LW-SAVE-HDG-CD = KS0LW02.KS0LW-HTS-HDG-CD;
        KS0LW00.KS0LW-SAVE-1ST-SHDG-CD = KS0LW02.KS0LW-HTS-1ST-SHDG-CD;
        KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[1] = KS0LW02.KS0LW-HTS-2ND-SHDG-CD;
        KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[2] = " ";
        KS0LW00.KS0LW-SAVE-STAT-CD = KS0LW02.KS0LW-HTS-STAT-CD;
        KS0LW00.KS0LW-SAVE-RNG-FL = "N";
      end
      if (VCPROD02.KS-HTS-CPTR-CD == KS0LW00.KS0LW-SAVE-CPTR-CD
       && VCPROD02.KS-HTS-HDG-CD == KS0LW00.KS0LW-SAVE-HDG-CD
       && VCPROD02.KS-HTS-1ST-SHDG-CD == 
      KS0LW00.KS0LW-SAVE-1ST-SHDG-CD
       && VCPROD02.KS-HTS-2ND-SHDG-CD[1] == 
      KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[1]
       && VCPROD02.KS-HTS-2ND-SHDG-CD[2] == 
      KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[2]
       && VCPROD02.KS-HTS-STAT-CD == KS0LW00.KS0LW-SAVE-STAT-CD
       && VCPROD02.KS-HTS-RNG-FL == KS0LW00.KS0LW-SAVE-RNG-FL)
        KS0LW01.KS0LW-HTS-NUMBER = KS0LM002.KS0LM-HTS-NBR;
        if (KS0LW01.KS0LW-HTS-BYTE[11] == "-"
         || KS0LW01.KS0LW-HTS-BYTE[11] == ",")
          KS0LW00.KS0LW-HTS-NBR-WORK = KS0LM002.KS0LM-HTS-NBR;
          VCPROD02.KS-HTS-CPTR-CD = KS0LW00.KS0LW-HTS-CPTR;
          VCPROD02.KS-HTS-HDG-CD = KS0LW00.KS0LW-HTS-HDG;
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW00.KS0LW-HTS-1ST-SHDG;
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW00.KS0LW-HTS-2ND-SHDG-1;
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0LW00.KS0LW-HTS-2ND-SHDG-2;
          if (KS0LW01.KS0LW-HTS-BYTE[11] == ",")
            VCPROD02.KS-HTS-RNG-FL = "N";
          else
            VCPROD02.KS-HTS-RNG-FL = "Y";
          end
          VCPROD02.KS-HTS-STAT-CD = " ";
          VCPROD02.KS-HTS-SUFX-ID = " ";
        else
          KS0LW02.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
          VCPROD02.KS-HTS-CPTR-CD = KS0LW02.KS0LW-HTS-CPTR-CD;
          VCPROD02.KS-HTS-HDG-CD = KS0LW02.KS0LW-HTS-HDG-CD;
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW02.KS0LW-HTS-1ST-SHDG-CD;
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW02.KS0LW-HTS-2ND-SHDG-CD;
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = " ";
          VCPROD02.KS-HTS-STAT-CD = KS0LW02.KS0LW-HTS-STAT-CD;
          VCPROD02.KS-HTS-SUFX-ID = " ";
          VCPROD02.KS-HTS-RNG-FL = "N";
        end
      else
        KS0LW00.KS0LW-SKIP-KSAUD = "Y"; /* Don't update KSAUD rec*/
      end
    else
      KS0LW00.KS0LW-SAVE-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
      KS0LW00.KS0LW-SAVE-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
      KS0LW00.KS0LW-SAVE-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
      KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
      KS0LW00.KS0LW-SAVE-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
      KS0LW00.KS0LW-SAVE-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
      KS0LW01.KS0LW-HTS-NUMBER = KS0LM002.KS0LM-HTS-NBR;
      if (KS0LW01.KS0LW-HTS-BYTE[11] == "-"
       || KS0LW01.KS0LW-HTS-BYTE[11] == ",")
        KS0LW00.KS0LW-HTS-NBR-WORK = KS0LM002.KS0LM-HTS-NBR;
        VCPROD02.KS-HTS-CPTR-CD = KS0LW00.KS0LW-HTS-CPTR;
        VCPROD02.KS-HTS-HDG-CD = KS0LW00.KS0LW-HTS-HDG;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW00.KS0LW-HTS-1ST-SHDG;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW00.KS0LW-HTS-2ND-SHDG-1;
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0LW00.KS0LW-HTS-2ND-SHDG-2;
        if (KS0LW01.KS0LW-HTS-BYTE[11] == ",")
          VCPROD02.KS-HTS-RNG-FL = "N";
        else
          VCPROD02.KS-HTS-RNG-FL = "Y";
        end
        VCPROD02.KS-HTS-STAT-CD = " ";
        VCPROD02.KS-HTS-SUFX-ID = " ";
      else
        KS0LW02.KS0LW-HTS-NBR = KS0LM002.KS0LM-HTS-NBR;
        VCPROD02.KS-HTS-CPTR-CD = KS0LW02.KS0LW-HTS-CPTR-CD;
        VCPROD02.KS-HTS-HDG-CD = KS0LW02.KS0LW-HTS-HDG-CD;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0LW02.KS0LW-HTS-1ST-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0LW02.KS0LW-HTS-2ND-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = " ";
        VCPROD02.KS-HTS-STAT-CD = KS0LW02.KS0LW-HTS-STAT-CD;
        VCPROD02.KS-HTS-SUFX-ID = " ";
        VCPROD02.KS-HTS-RNG-FL = "N";
      end
    end
  end
  ;
  if (KS0LM002.KS0LM-RULE-NBR > " ")
    VCPROD02.KS-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
  end
  if (KS0LW00.KS0LW-RULE-NBR > " ")
    if (KS0LW01.KS0LW-RULE-NBR > " ")
      VCPROD02.KS-RULE-NBR = KS0LM002.KS0LM-RULE-NBR;
    end
  end
  ;
  if (KS0LW00.KS0LW-STAT-CD > " "
   || KS0LM002.KS0LM-STAT-CD > " ")
    VCPROD02.YPR-PROD-STAT-CD = KS0LM002.KS0LM-STAT-CD;
  end
  VCPROD02.KS-PRBM-NBR = KS0LW02.KS0LW-PRBM-NBR;
  ;
  KS0L-26122(); /* Default status code field*/
  ;
  KS0L-26131(); /* Update VCPROD02 row*/
  ;
  ;
end // end KS0L-26130

// Update VCPROD01 row
Function KS0L-26131()
  /* ------------------------------------------------------------*/
  /* Update a row to the DCUSTM.VCPROD02 table.*/
  /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Get system date and time*/
  ;
  VCPROD02.XXXUSRID = COMMAREA.CAUSERID; /* Move user id*/
  VCPROD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
  VCPROD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
  ;
  try
    call "VCPROD02" ("U ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26131"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-26131

// Write VKSAUD01 row process
Function KS0L-26140()
  /* ------------------------------------------------------------*/
  /* Format the data and add DCUSTM.VKSAUD01 rows.*/
  /* ------------------------------------------------------------*/
  ;
  set VKSAUD01 empty; /* Clear record*/
  ;
  if (KS0LW00.KS0LW-HS-NBR != KS0LM002.KS0LM-HTS-NBR
   && KS0LW00.KS0LW-SKIP-KSAUD != "Y")
    VKSAUD01.XXXRKNBR = 1; /* Before image data*/
    KS0LW01.KS0LW-HTS-NUMBER = KS0LW00.KS0LW-HS-NBR;
    if (KS0LW01.KS0LW-HTS-BYTE[11] == "-") /* If range entered*/
      VKSAUD01.KS-HTS-CPTR-CD = KS0LW00.KS0LW-SAVE-CPTR-CD;
      VKSAUD01.KS-HTS-HDG-CD = KS0LW00.KS0LW-SAVE-HDG-CD;
      VKSAUD01.KS-HTS-1ST-SHDG-CD = KS0LW00.KS0LW-SAVE-1ST-SHDG-CD;
      VKSAUD01.KS-HTS-2ND-SHDG-CD[1] = KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[1];
      VKSAUD01.KS-HTS-2ND-SHDG-CD[2] = KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[2];
      VKSAUD01.KS-HTS-RNG-FL = KS0LW00.KS0LW-SAVE-RNG-FL;
    else
      VKSAUD01.KS-HTS-CPTR-CD = KS0LW00.KS0LW-SAVE-CPTR-CD;
      VKSAUD01.KS-HTS-HDG-CD = KS0LW00.KS0LW-SAVE-HDG-CD;
      VKSAUD01.KS-HTS-1ST-SHDG-CD = KS0LW00.KS0LW-SAVE-1ST-SHDG-CD;
      VKSAUD01.KS-HTS-2ND-SHDG-CD[1] = KS0LW00.KS0LW-SAVE-2ND-SHDG-CD[1];
      VKSAUD01.KS-HTS-2ND-SHDG-CD[2] = " ";
      VKSAUD01.KS-HTS-STAT-CD = KS0LW00.KS0LW-SAVE-STAT-CD;
      VKSAUD01.KS-HTS-RNG-FL = KS0LW00.KS0LW-SAVE-RNG-FL;
    end
    if (KS0LW00.KS0LW-SESN-CD > " ") /* If season code changed*/
      VKSAUD01.XSECD = KS0LW00.KS0LW-SESN-CD;
      KS0LW00.KS0LW-SESN-YR-NUM = KS0LW00.KS0LW-SESN-YR;
      VKSAUD01.XSNYR = KS0LW00.KS0LW-SESN-YR-NUM;
    else
      VKSAUD01.XSECD = VCPROD02.XSECD;
      VKSAUD01.XSNYR = VCPROD02.XSNYR;
    end
    if (KS0LW00.KS0LW-GPC-CD > " ") /* If GPC changed*/
      if (KS0LW00.KS0LW-GPC-CD == "EQ")
        VKSAUD01.XGPCD = KS0LW00.KS0LW-SAV-EQUIP-GPC;
      else
        VKSAUD01.XGPCD = KS0LW00.KS0LW-GPC-CD;
      end
    else
      VKSAUD01.XGPCD = VCPROD02.XGPCD;
    end
    VKSAUD01.SY1STNBR = KS0LM002.KS0LM-DTL-STY-NBR[KS0LW-IX1];
    if (KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX1] > " ") /* If color entered*/
      VKSAUD01.SY2CLRID = KS0LM002.KS0LM-DTL-COLR-CD-ID[KS0LW-IX1];
    else
      VKSAUD01.SY2CLRID = VCPROD02.SY2CLRID;
    end
    if (KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX1] > " ") /* If dimension entered*/
      VKSAUD01.XDMCD = KS0LM002.KS0LM-DTL-DIM-CD[KS0LW-IX1];
    else
      VKSAUD01.XDMCD = VCPROD02.XDMCD;
    end
    VKSAUD01.KS-XPRMT-STY-NBR = VCPROD02.KS-XPRMT-STY-NBR;
    VKSAUD01.KS-RULE-NBR = VCPROD02.KS-RULE-NBR;
    VKSAUD01.YPR-PROD-STAT-CD = VCPROD02.YPR-PROD-STAT-CD;
    VKSAUD01.YKS-STY-TYP-CD = VCPROD02.YKS-STY-TYP-CD;
    VKSAUD01.XXXUSRID = COMMAREA.CAUSERID;
    KS0L-26141(); /* Insert VKSAUD01 row*/
    VKSAUD01.XXXRKNBR = 2; /* After image data*/
    VKSAUD01.KS-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
    VKSAUD01.KS-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
    VKSAUD01.KS-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
    VKSAUD01.KS-HTS-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
    VKSAUD01.KS-HTS-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
    VKSAUD01.KS-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
    VKSAUD01.KS-HTS-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
    VKSAUD01.KS-RULE-NBR = VCPROD02.KS-RULE-NBR;
    VKSAUD01.YPR-PROD-STAT-CD = VCPROD02.YPR-PROD-STAT-CD;
    VKSAUD01.YKS-STY-TYP-CD = VCPROD02.YKS-STY-TYP-CD;
    VKSAUD01.XXXUSRID = COMMAREA.CAUSERID;
    KS0L-26141(); /* Insert VKSAUD01 row*/
  end
  ;
  ;
end // end KS0L-26140

// Insert VKSAUD01 row
Function KS0L-26141()
  /* ------------------------------------------------------------*/
  /* Add a row to the DCUSTM.VKSAUD01 table.*/
  /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  VKSAUD01.ZZZSDT = XX0XW01.XX0XWDAT;
  VKSAUD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VKSAUD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VKSAUD01.ZZHHMMSS = XX0XW01.XX0XWHMS;
  VKSAUD01.ZZZCHGCT = 0;
  ;
  try
    call "IO6290" ("A ", SQLCA, VKSAUD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26141"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSAUD01.VKSAUD01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-26141

// Main process Map 5
Function KS0L-60000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.  (N/A for this process.)*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    KS0L-61000(); /* Check hts number and country*/
  else
    return;
  end
  ;
  if (KS0LW05.KS0LW-CVS-FLAG == "N")
    return;
  end

  KS0L-62000(); /* Format and display the map*/
  ;
  KS0L-63000(); /* Check attention identifier*/
  ;
   /* ERFORM ks0l-64000;              /* Reset fields to normal intensity*/
  ;
   /* ERFORM ks0l-65000;              /* Verify the entered data*/
  ;
   /* ERFORM ks0l-66000;              /* Process valid input request*/
  ;
  ;
end // end KS0L-60000

// Check the CVS-hts number
Function KS0L-61000()
  KS0LW05.KS0LW-CVS-FLAG = "N";
  set VKSORD01 empty;
  VKSORD01.KS-CUST-ORDER-NBR = "C-549-401";
  VKSORD01.KS-HTS-CPTR-CD = KS0LW05.KS0LW-HTS-CPTR-CD;
  VKSORD01.KS-HTS-HDG-CD = KS0LW05.KS0LW-HTS-HDG-CD;
  VKSORD01.KS-HTS-1ST-SHDG-CD = KS0LW05.KS0LW-HTS-1ST-SHDG-CD;
  VKSORD01.KS-HTS-2ND-SHDGCD1 = KS0LW05.KS0LW-HTS-2ND-SHDGCD1;
  ;
  KS0L-61100(); /* OPEN KSORD01*/
  ;
  while (KS0LW05.KS0LW-CVS-FLAG != "Y")
    VKSORD01.KS-HTS-CPTR-CD = KS0LW05.KS0LW-HTS-CPTR-CD;
    VKSORD01.KS-HTS-HDG-CD = KS0LW05.KS0LW-HTS-HDG-CD;
    VKSORD01.KS-HTS-1ST-SHDG-CD = KS0LW05.KS0LW-HTS-1ST-SHDG-CD;
    VKSORD01.KS-HTS-2ND-SHDGCD1 = KS0LW05.KS0LW-HTS-2ND-SHDGCD1;
    KS0L-61110(); /* FETCH KSORD01*/
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
    if (KS0LW05.KS0LW-HTS-CPTR-CD == VKSORD01.KS-HTS-CPTR-CD)
      if (VKSORD01.KS-HTS-HDG-CD == "  ")
        KS0LW05.KS0LW-CVS-FLAG = "Y";
      else
        if (KS0LW05.KS0LW-HTS-HDG-CD > "  "
         && KS0LW05.KS0LW-HTS-HDG-CD == VKSORD01.KS-HTS-HDG-CD
        )
          if (VKSORD01.KS-HTS-1ST-SHDG-CD == "  ")
            KS0LW05.KS0LW-CVS-FLAG = "Y";
          else
            if (KS0LW05.KS0LW-HTS-1ST-SHDG-CD > "  "
             && KS0LW05.KS0LW-HTS-1ST-SHDG-CD == 
            VKSORD01.KS-HTS-1ST-SHDG-CD)
              if (VKSORD01.KS-HTS-2ND-SHDGCD1 == "  ")
                KS0LW05.KS0LW-CVS-FLAG = "Y";
              else
                if (KS0LW05.KS0LW-HTS-2ND-SHDGCD1 > "  "
                 && KS0LW05.KS0LW-HTS-2ND-SHDGCD1 == 
                VKSORD01.KS-HTS-2ND-SHDGCD1)
                  KS0LW05.KS0LW-CVS-FLAG = "Y";
                end
              end
            end
          end
        end
      end
    end
  end
  KS0L-61120(); /* CLOSE KSORD01*/
end // end KS0L-61000

// Select VKSORD01 set
Function KS0L-61100()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "VKSORD01" ("S1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end /* Sel table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "61100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSORD01.VKSORD01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-61100

// Fetch  VKSORD01 row
Function KS0L-61110()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VKSORD01" ("N1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
                                   /* Save prbm*/
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0LW00.KS0LW-SWP = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "61110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSORD01.VKSORD01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-61110

// Close  VKSORD01 set
Function KS0L-61120()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VKSORD01" ("C1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "61120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0L-61120

// Format and converse the map
Function KS0L-62000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
   /* MOVE 'C-549-401' TO KS0LM003.KS0LM-CVS-NBR;*/
  KS0LM003.KS0LM-CVS-NBR = VKSORD01.KS-CUST-ORDER-NBR;
  ;
  ;
  ;
  ;
  ;
  converse KS0LM003 ;
  ;
  ;
  ;
  ;
end // end KS0L-62000

// Check the attention identifier
Function KS0L-63000()
  ;
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3) 
    ;
    KSWREC.XXXPRCNM = "63000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    KS0LW00.KS0LW-SWD = "5";
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end KS0L-63000

//*** RECORD=KS0LW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0LW00 type basicRecord
  10 KS0LW-IXM KS0LW-IXM ; 
  10 KS0LW-IX1 KS0LW-IX1 ; 
  10 KS0LW-IX2 KS0LW-IX2 ; 
  10 KS0LW-IX3 KS0LW-IX3 ; 
  10 KS0LW-SWC KS0LW-SWC ; 
  10 KS0LW-SWP KS0LW-SWP ; 
  10 KS0LW-SWD KS0LW-SWD ; 
  10 KS0LW-SWF KS0LW-SWF ; 
  10 KS0LW-SWR KS0LW-SWR ; 
  10 KS0LW-DEF KS0LW-DEF ; 
  10 KS0LW-SWU KS0LW-SWU ; 
  10 KS0LW-SW1 KS0LW-SW1 ; 
  10 KS0LW-SCV KS0LW-SCV ; 
  10 KS0LW-PRESEL KS0LW-PRESEL ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KS0LW-COUNTER KS0LW-COUNTER ; 
  10 KS0LW-COLOR-COMB KS0LW-COLOR-COMB ; 
  10 KS0LW-PRBM-FND KS0LW-PRBM-FND ; 
  10 KS0LW-TEAM-FND KS0LW-TEAM-FND ; 
  10 KS0LW-STYLE-FND KS0LW-STYLE-FND ; 
  10 KS0LW-PRBM-TABLE KS0LW-PRBM-TABLE ; 
    15 KS0LW-PRBM KS0LW-PRBM [25] ; 
  10 KS0LW-SAVE-INDEX KS0LW-SAVE-INDEX ; 
  10 KS0LW-SAVE-PG-NBR KS0LW-SAVE-PG-NBR ; 
  10 KS0LW-SAVE-MAX-PG KS0LW-SAVE-MAX-PG ; 
  10 KS0LW-SAVE-STY-CS KS0LW-SAVE-STY-CS ; 
  10 KS0LW-DATE KS0LW-DATE ; 
    15 KS0LW-MM KS0LW-MM ; 
    15 KS0LW-DD KS0LW-DD ; 
    15 KS0LW-YY KS0LW-YY ; 
  10 KS0LW-CTL-FUNC KS0LW-CTL-FUNC ; 
  10 KS0LW-VCPROD01-ADDED KS0LW-VCPROD01-ADDED ; 
  10 KS0LW-VCPROD01-UPD KS0LW-VCPROD01-UPD ; 
  10 KS0LW-PAGE-IS-FULL KS0LW-PAGE-IS-FULL ; 
  10 KS0LW-DATA-CHANGED KS0LW-DATA-CHANGED ; 
  10 KS0LW-NEW-HS-SWITCH KS0LW-NEW-HS-SWITCH ; 
  10 KS0LW-REFORMAT-MAP1 KS0LW-REFORMAT-MAP1 ; 
  10 KS0LW-CTL-FLD KS0LW-CTL-FLD ; 
    15 KS0LW-FNC KS0LW-FNC ; 
    15 KS0LW-SAV KS0LW-SAV ; 
    15 KS0LW-SAVE-PAGE KS0LW-SAVE-PAGE ; 
  10 KS0LW-SAVE-PRBM-TABLE KS0LW-SAVE-PRBM-TABLE ; 
    15 KS0LW-SAVE-PRBM KS0LW-SAVE-PRBM [10] ; 
  10 KS0LW-SAVE-FNC KS0LW-SAVE-FNC ; 
  10 KS0LW-DTL-LINE KS0LW-DTL-LINE [4] ; 
  10 KS0LW-HTS-FORMAT-SW KS0LW-HTS-FORMAT-SW ; 
  10 KS0LW-SAVE-HTS-NBR KS0LW-SAVE-HTS-NBR ; 
    15 KS0LW-SAVE-CPTR-CD KS0LW-SAVE-CPTR-CD ; 
    15 KS0LW-SAVE-HDG-CD KS0LW-SAVE-HDG-CD ; 
    15 * char(1) ; 
    15 KS0LW-SAVE-1ST-SHDG-CD KS0LW-SAVE-1ST-SHDG-CD ; 
    15 * char(1) ; 
    15 KS0LW-SAVE-2ND-SHDG-CD KS0LW-SAVE-2ND-SHDG-CD [2] ; 
    15 KS0LW-SAVE-STAT-CD KS0LW-SAVE-STAT-CD ; 
    15 * char(1) ; 
    15 * char(1) ; 
  10 KS0LW-SAVE-RNG-FL KS0LW-SAVE-RNG-FL ; 
  10 KS0LW-HTS-NBR-WORK KS0LW-HTS-NBR-WORK ; 
    15 KS0LW-HTS-CPTR KS0LW-HTS-CPTR ; 
    15 KS0LW-HTS-HDG KS0LW-HTS-HDG ; 
    15 * char(1) ; 
    15 KS0LW-HTS-1ST-SHDG KS0LW-HTS-1ST-SHDG ; 
    15 * char(1) ; 
    15 KS0LW-HTS-2ND-SHDG-1 KS0LW-HTS-2ND-SHDG-1 ; 
    15 * char(1) ; 
    15 KS0LW-HTS-2ND-SHDG-2 KS0LW-HTS-2ND-SHDG-2 ; 
    15 * char(1) ; 
  10 KS0LW-HTS-RNG-FL KS0LW-HTS-RNG-FL ; 
  10 KS0LW-GPC-CD KS0LW-GPC-CD ; 
  10 KS0LW-SESN-CD KS0LW-SESN-CD ; 
  10 KS0LW-SESN-YR-NUM KS0LW-SESN-YR-NUM ; 
  10 KS0LW-SESN-YR KS0LW-SESN-YR ; 
    15 KS0LW-SESN-CENT KS0LW-SESN-CENT ; 
    15 KS0LW-SESN-YY KS0LW-SESN-YY ; 
  10 KS0LW-HS-NBR KS0LW-HS-NBR ; 
  10 KS0LW-HS-SELECT KS0LW-HS-SELECT ; 
  10 KS0LW-RULE-NBR KS0LW-RULE-NBR ; 
    15 KS0LW-RULE-BYTE KS0LW-RULE-BYTE [10] ; 
  10 KS0LW-STAT-CD KS0LW-STAT-CD ; 
  10 KS0LW-KS1120-SW KS0LW-KS1120-SW ; 
  10 KS0LW-IO6130-SW KS0LW-IO6130-SW ; 
  10 KS0LW-SELECT KS0LW-SELECT ; 
  10 KS0LW-FETCH KS0LW-FETCH ; 
  10 KS0LW-CLOSE KS0LW-CLOSE ; 
  10 KS0LW-KS0C-SWITCH KS0LW-KS0C-SWITCH ; 
  10 KS0LW-TS-EOF KS0LW-TS-EOF ; 
  10 KS0LW-MAP2-SAVE-FLDS KS0LW-MAP2-SAVE-FLDS ; 
    15 KS0LW-SAVE-HS-NBR KS0LW-SAVE-HS-NBR ; 
    15 KS0LW-SAVE-STATUS KS0LW-SAVE-STATUS ; 
    15 KS0LW-SAVE-RULE-NBR KS0LW-SAVE-RULE-NBR ; 
    15 KS0LW-SAVE-FEAT-TABLE KS0LW-SAVE-FEAT-TABLE ; 
      20 KS0LW-SAVE-FEAT-CD KS0LW-SAVE-FEAT-CD [10] ; 
    15 KS0LW-SAVE-GPC-CD KS0LW-SAVE-GPC-CD ; 
    15 KS0LW-SAVE-SESN-CD KS0LW-SAVE-SESN-CD ; 
    15 KS0LW-SAVE-SESN-YR KS0LW-SAVE-SESN-YR ; 
  10 KS0LW-SAVE-STY-NBR KS0LW-SAVE-STY-NBR ; 
  10 KS0LW-SAVE-TXT-NBR KS0LW-SAVE-TXT-NBR ; 
  10 KS0LW-SAVE-PRBM-NBR KS0LW-SAVE-PRBM-NBR ; 
  10 KS0LW-KEY-CHANGE KS0LW-KEY-CHANGE ; 
  10 KS0LW-FEAT-CHANGE KS0LW-FEAT-CHANGE ; 
  10 KS0LW-HTS-CHANGE KS0LW-HTS-CHANGE ; 
  10 KS0LW-XXXTSPAG KS0LW-XXXTSPAG ; 
  10 KS0LW-TA5TSQIX KS0LW-TA5TSQIX ; 
  10 KS0LW-STYLE-TABLE KS0LW-STYLE-TABLE ; 
    15 KS0LW-STYLE-CHECK KS0LW-STYLE-CHECK [1760] ; 
    15 KS0LW-COLOR-CHECK KS0LW-COLOR-CHECK [1760] ; 
    15 KS0LW-DIM-CHECK KS0LW-DIM-CHECK [1760] ; 
    15 KS0LW-PAGE-CHECK KS0LW-PAGE-CHECK [1760] ; 
  10 KS0LW-SKIP-KSAUD KS0LW-SKIP-KSAUD ; 
  10 KS0LW-SAV-EQUIP-GPC KS0LW-SAV-EQUIP-GPC ; 
  10 KS0LW-DATE-WORK KS0LW-DATE-WORK ; 
end // end KS0LW00

//*** RECORD=KS0LW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record KS0LW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(2325) ; 
    10 KS0LW-GPC KS0LW-GPC ; 
    10 KS0LW-GPC-DESC KS0LW-GPC-DESC ; 
    10 KS0LW-STYLE KS0LW-STYLE ; 
      15 KS0LW-STY-CHAR-1 KS0LW-STY-CHAR-1 ; 
      15 KS0LW-STY-CHAR-2 KS0LW-STY-CHAR-2 ; 
      15 KS0LW-STY-CHAR-3 KS0LW-STY-CHAR-3 ; 
      15 KS0LW-STY-CHAR-4 KS0LW-STY-CHAR-4 ; 
      15 KS0LW-STY-CHAR-5 KS0LW-STY-CHAR-5 ; 
      15 KS0LW-STY-CHAR-6 KS0LW-STY-CHAR-6 ; 
      15 KS0LW-STY-CHAR-7 KS0LW-STY-CHAR-7 ; 
    10 SY1STYNM SY1STYNM ; 
    10 KS0LW-COLR-CD-ID KS0LW-COLR-CD-ID ; 
    10 KS0LW-DIM-CD KS0LW-DIM-CD ; 
    10 KS0LW-SESN-YR-NUM KS0LW-SESN-YR-NUM ; 
    10 KS0LW-SESN-YR KS0LW-SESN-YR ; 
      15 KS0LW-SESN-CENT KS0LW-SESN-CENT ; 
      15 KS0LW-SESN-YY KS0LW-SESN-YY ; 
    10 KS0LW-SESN-CD KS0LW-SESN-CD ; 
    10 KS0LW-POIDT-NUM KS0LW-POIDT-NUM ; 
    10 KS0LW-POIDT KS0LW-POIDT ; 
      15 * char(1) ; 
      15 KS0LW-PRDCTN-CEN KS0LW-PRDCTN-CEN ; 
      15 KS0LW-PRDCTN-YR KS0LW-PRDCTN-YR ; 
      15 KS0LW-PRDCTN-MO KS0LW-PRDCTN-MO ; 
        20 KS0LW-PRDCTN-MO-1 KS0LW-PRDCTN-MO-1 ; 
        20 KS0LW-PRDCTN-MO-2 KS0LW-PRDCTN-MO-2 ; 
      15 KS0LW-DLVR-MO KS0LW-DLVR-MO ; 
        20 KS0LW-DLVR-MO-1 KS0LW-DLVR-MO-1 ; 
        20 KS0LW-DLVR-MO-2 KS0LW-DLVR-MO-2 ; 
    10 KS0LW-FCTY-CD KS0LW-FCTY-CD ; 
    10 KS0LW-ORIG-CD KS0LW-ORIG-CD ; 
    10 KS0LW-ORIG-DESC KS0LW-ORIG-DESC ; 
    10 KS0LW-US-MADE-FLAG KS0LW-US-MADE-FLAG ; 
    10 KS0LW-EXP-STYLE KS0LW-EXP-STYLE ; 
    10 KS0LW-HTS-NUMBER KS0LW-HTS-NUMBER ; 
      15 KS0LW-HTS-BYTE KS0LW-HTS-BYTE [16] ; 
    10 * char(1) ; 
    10 KS0LW-HTS-NBR KS0LW-HTS-NBR ; 
      15 KS0LW-HTS-CPTR-CD KS0LW-HTS-CPTR-CD ; 
      15 KS0LW-HTS-HDG-CD KS0LW-HTS-HDG-CD ; 
      15 * char(1) ; 
      15 KS0LW-HTS-1ST-SHDG-CD KS0LW-HTS-1ST-SHDG-CD ; 
      15 * char(1) ; 
      15 KS0LW-HTS-2ND-SHDG-CD KS0LW-HTS-2ND-SHDG-CD ; 
        20 KS0LW-HTS-2ND-SHDG1 KS0LW-HTS-2ND-SHDG1 ; 
        20 KS0LW-HTS-2ND-SHDG2 KS0LW-HTS-2ND-SHDG2 ; 
      15 KS0LW-HTS-STAT-CD KS0LW-HTS-STAT-CD ; 
      15 * char(1) ; 
      15 * char(1) ; // HTS suffix id
    10 KS0LW-RULE-NBR KS0LW-RULE-NBR ; 
    10 KS0LW-RULE-NBR-MAP KS0LW-RULE-NBR-MAP ; 
    10 KS0LW-QOTA-CAT-CD KS0LW-QOTA-CAT-CD ; 
    10 KS0LW-TEAM-CD KS0LW-TEAM-CD ; 
    10 KS0LW-PRBM-CD KS0LW-PRBM-CD ; 
    10 KS0LW-STAT KS0LW-STAT ; 
    10 KS0LW-DIV-CD KS0LW-DIV-CD ; 
    10 KS0LW-STY-TYP-CD1 KS0LW-STY-TYP-CD1 ; 
    10 KS0LW-STY-TYP-CD2 KS0LW-STY-TYP-CD2 ; 
    10 KS0LW-STY-TYP-CD3 KS0LW-STY-TYP-CD3 ; 
    10 KS0LW-REG-CD KS0LW-REG-CD ; 
    10 KS0LW-REG-SDESC KS0LW-REG-SDESC ; 
    10 KS0LW-SAVE-INDEX KS0LW-SAVE-INDEX ; 
    10 KS0LW-SAVE-PG-NBR KS0LW-SAVE-PG-NBR ; 
    10 KS0LW-SAVE-MAX-PG KS0LW-SAVE-MAX-PG ; 
    10 KS0LW-SAVE-STY-CS KS0LW-SAVE-STY-CS ; 
    10 KS0LW-DTL-LINE KS0LW-DTL-LINE [23] ; 
      15 KS0LW-SEL KS0LW-SEL ; 
      15 XGPCD XGPCD ; 
      15 KS0LW-DTL-STY-NBR KS0LW-DTL-STY-NBR ; 
      15 KS0LW-DTL-COLR-CD-ID KS0LW-DTL-COLR-CD-ID ; 
      15 KS0LW-DTL-DIM-CD KS0LW-DTL-DIM-CD ; 
      15 KS0LW-DTL-MULT-FL KS0LW-DTL-MULT-FL ; 
      15 KS0LW-DTL-SHORT-STY-NM KS0LW-DTL-SHORT-STY-NM ; 
      15 KS0LW-DTL-HTS-NBR KS0LW-DTL-HTS-NBR ; 
        20 KS0LW-DTL-HTS-CPTR-CD KS0LW-DTL-HTS-CPTR-CD ; 
        20 KS0LW-DTL-HTS-HDG-CD KS0LW-DTL-HTS-HDG-CD ; 
        20 KS0LW-DTL-HTS-1ST-SHDG-CD KS0LW-DTL-HTS-1ST-SHDG-CD ; 
        20 KS0LW-DTL-HTS-2ND-SHDGCD1 KS0LW-DTL-HTS-2ND-SHDGCD1 ; 
        20 KS0LW-DTL-HTS-2ND-SHDGCD2 KS0LW-DTL-HTS-2ND-SHDGCD2 ; 
        20 KS0LW-DTL-HTS-STAT-CD KS0LW-DTL-HTS-STAT-CD ; 
        20 * char(1) ; // HTS suffix id
      15 KS0LW-DTL-RULE-NBR KS0LW-DTL-RULE-NBR ; 
      15 KS0LW-DTL-PRBM-CD KS0LW-DTL-PRBM-CD ; 
      15 KS0LW-DTL-STY-TYP KS0LW-DTL-STY-TYP ; 
      15 KS0LW-DTL-SESN-CD KS0LW-DTL-SESN-CD ; 
      15 KS0LW-DTL-SESN-YR KS0LW-DTL-SESN-YR ; 
      15 KS0LW-DTL-XPRMT-STY KS0LW-DTL-XPRMT-STY ; 
      15 KS0LW-TEXT-NBR KS0LW-TEXT-NBR ; 
      15 KS0LW-PRBM-NBR KS0LW-PRBM-NBR ; 
end // end KS0LW01

//*** RECORD=KS0LW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record KS0LW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(622) ; 
    10 CACHGFL CACHGFL ; 
    10 KS0LW-GPC-CD KS0LW-GPC-CD ; 
    10 KS0LW-SESN-CD KS0LW-SESN-CD ; 
    10 KS0LW-SESN-YR-RNG-NUM KS0LW-SESN-YR-RNG-NUM ; 
    10 KS0LW-SESN-YR-RNG KS0LW-SESN-YR-RNG ; 
      15 KS0LW-SESN-CENTURY KS0LW-SESN-CENTURY ; 
      15 KS0LW-SESN-YEAR KS0LW-SESN-YEAR ; 
    10 KS0LW-HTS-NBR KS0LW-HTS-NBR ; 
      15 KS0LW-HTS-CPTR-CD KS0LW-HTS-CPTR-CD ; 
      15 KS0LW-HTS-HDG-CD KS0LW-HTS-HDG-CD ; 
      15 * char(1) ; 
      15 KS0LW-HTS-1ST-SHDG-CD KS0LW-HTS-1ST-SHDG-CD ; 
      15 * char(1) ; 
      15 KS0LW-HTS-2ND-SHDG-CD KS0LW-HTS-2ND-SHDG-CD ; 
      15 KS0LW-HTS-STAT-CD KS0LW-HTS-STAT-CD ; 
      15 * char(1) ; 
      15 * char(1) ; // HTS suffix code
    10 KS0LW-RULE-NBR KS0LW-RULE-NBR ; 
    10 KS0LW-STAT KS0LW-STAT ; 
    10 KS0LW-FEAT-TABLE KS0LW-FEAT-TABLE ; 
      15 KS0LW-FEAT-CD KS0LW-FEAT-CD [10] ; 
    10 KS0LW-PRBM-NBR KS0LW-PRBM-NBR ; 
    10 KS0LW-REG-CD KS0LW-REG-CD ; 
    10 KS0LW-REG-SDESC KS0LW-REG-SDESC ; 
    10 KS0LW-SAVE-INDEX KS0LW-SAVE-INDEX ; 
    10 KS0LW-SAVE-PG-NBR KS0LW-SAVE-PG-NBR ; 
    10 KS0LW-SAVE-MAX-PG KS0LW-SAVE-MAX-PG ; 
    10 KS0LW-SAVE-STY-CS KS0LW-SAVE-STY-CS ; 
    10 KS0LW-DTL-LINE2 KS0LW-DTL-LINE2 [44] ; 
      15 KS0LW-DTL-STYLE KS0LW-DTL-STYLE ; 
      15 KS0LW-DTL-COLOR KS0LW-DTL-COLOR ; 
      15 KS0LW-DTL-DIMENSION KS0LW-DTL-DIMENSION ; 
end // end KS0LW02

//*** RECORD=KS0LW05 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record KS0LW05 type basicRecord
  10 KS0LW-HTS-NBR KS0LW-HTS-NBR ; 
    15 KS0LW-HTS-CPTR-CD KS0LW-HTS-CPTR-CD ; 
    15 KS0LW-HTS-HDG-CD KS0LW-HTS-HDG-CD ; 
    15 * char(1) ; 
    15 KS0LW-HTS-1ST-SHDG-CD KS0LW-HTS-1ST-SHDG-CD ; 
    15 * char(1) ; 
    15 KS0LW-HTS-2ND-SHDGCD1 KS0LW-HTS-2ND-SHDGCD1 ; 
    15 KS0LW-HTS-STAT-CD KS0LW-HTS-STAT-CD ; 
    15 * char(1) ; 
    15 * char(1) ; 
  10 KS0LW-CVS-FLAG KS0LW-CVS-FLAG ; 
end // end KS0LW05

// IO function code
DataItem KS0LW-CLOSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage problem code
DataItem KS0LW-COLOR-CHECK char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color combined switch
DataItem KS0LW-COLOR-COMB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color code id
DataItem KS0LW-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage counter
DataItem KS0LW-COUNTER num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pass record control field
DataItem KS0LW-CTL-FLD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Control table function switch
DataItem KS0LW-CTL-FUNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_PRBM_NBR
DataItem KS0LW-CVS-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data changed switch
DataItem KS0LW-DATA-CHANGED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date working storage
DataItem KS0LW-DATE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date work area
DataItem KS0LW-DATE-WORK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day
DataItem KS0LW-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data entered switch
DataItem KS0LW-DEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dimension code
DataItem KS0LW-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage problem code
DataItem KS0LW-DIM-CHECK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDVCD
DataItem KS0LW-DIV-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem KS0LW-DLVR-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-DLVR-MO-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-DLVR-MO-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0LW-DTL-COLOR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0LW-DTL-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem KS0LW-DTL-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem KS0LW-DTL-DIMENSION char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 1st subheading code
DataItem KS0LW-DTL-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 2nd subheading code
DataItem KS0LW-DTL-HTS-2ND-SHDGCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 2nd subheading code
DataItem KS0LW-DTL-HTS-2ND-SHDGCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS chapter code
DataItem KS0LW-DTL-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS heading code
DataItem KS0LW-DTL-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customs HS Number
DataItem KS0LW-DTL-HTS-NBR char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS status code
DataItem KS0LW-DTL-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List screen detail line
DataItem KS0LW-DTL-LINE char(92)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail line Map 2
DataItem KS0LW-DTL-LINE2 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Multiple type flag
DataItem KS0LW-DTL-MULT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_PRBM_NBR
DataItem KS0LW-DTL-PRBM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR
DataItem KS0LW-DTL-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail season code
DataItem KS0LW-DTL-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail season year
DataItem KS0LW-DTL-SESN-YR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// KS_SHORT_STY_NM
DataItem KS0LW-DTL-SHORT-STY-NM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0LW-DTL-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style type code
DataItem KS0LW-DTL-STY-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0LW-DTL-STYLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Experimental style number
DataItem KS0LW-DTL-XPRMT-STY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exp Style? flag
DataItem KS0LW-EXP-STYLE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory code
DataItem KS0LW-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_PRBM_CD
DataItem KS0LW-FEAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-FEAT-CHANGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-FEAT-TABLE char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IO function code
DataItem KS0LW-FETCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map function switch
DataItem KS0LW-FNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem KS0LW-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem KS0LW-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC description
DataItem KS0LW-GPC-DESC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HS-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-1ST-SHDG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 1st subheading code
DataItem KS0LW-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-2ND-SHDG-1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-2ND-SHDG-2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 2nd subheading code
DataItem KS0LW-HTS-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-2ND-SHDG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-2ND-SHDG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 2nd subheading code
DataItem KS0LW-HTS-2ND-SHDGCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-CHANGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-CPTR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS chapter code
DataItem KS0LW-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid HS Number Format Switch
DataItem KS0LW-HTS-FORMAT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-HDG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS heading code
DataItem KS0LW-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage HTS number
DataItem KS0LW-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS number work area
DataItem KS0LW-HTS-NBR-WORK char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-HTS-NUMBER char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS range flag
DataItem KS0LW-HTS-RNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS status code
DataItem KS0LW-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IO6130 call switch
DataItem KS0LW-IO6130-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0LW-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0LW-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0LW-IX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0LW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-KEY-CHANGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS0C switch
DataItem KS0LW-KS0C-SWITCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS1120 call switch
DataItem KS0LW-KS1120-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-MAP2-SAVE-FLDS char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem KS0LW-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New HS number from KS0J
DataItem KS0LW-NEW-HS-SWITCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_XCT_ORIG_CD
DataItem KS0LW-ORIG-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Origin country description
DataItem KS0LW-ORIG-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage problem code
DataItem KS0LW-PAGE-CHECK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page is full indicator
DataItem KS0LW-PAGE-IS-FULL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID date
DataItem KS0LW-POIDT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID date
DataItem KS0LW-POIDT-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working storage problem code
DataItem KS0LW-PRBM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_PRBM_NBR
DataItem KS0LW-PRBM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem found switch
DataItem KS0LW-PRBM-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_PRBM_NBR
DataItem KS0LW-PRBM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working storage problem table
DataItem KS0LW-PRBM-TABLE char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-PRDCTN-CEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production month
DataItem KS0LW-PRDCTN-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-PRDCTN-MO-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-PRDCTN-MO-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production year
DataItem KS0LW-PRDCTN-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-PRESEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quota Cat code
DataItem KS0LW-QOTA-CAT-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat map 1 switch
DataItem KS0LW-REFORMAT-MAP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDR-PROD-REG-CD
DataItem KS0LW-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDR-PROD-REG-SDESC
DataItem KS0LW-REG-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR bytes
DataItem KS0LW-RULE-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR
DataItem KS0LW-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR on map
DataItem KS0LW-RULE-NBR-MAP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save index for WS
DataItem KS0LW-SAV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Skip KSAUD update flag
DataItem KS0LW-SAV-EQUIP-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-FEAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-FEAT-TABLE char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map save function switch
DataItem KS0LW-SAVE-FNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-HS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save HS number
DataItem KS0LW-SAVE-HTS-NBR char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save index array
DataItem KS0LW-SAVE-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save page for cursor placement
DataItem KS0LW-SAVE-MAX-PG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Save page for cursor placement
DataItem KS0LW-SAVE-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Save page for cursor placement
DataItem KS0LW-SAVE-PG-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Save problem code
DataItem KS0LW-SAVE-PRBM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-PRBM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0LW-SAVE-PRBM-TABLE char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save HS range flag
DataItem KS0LW-SAVE-RNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-SESN-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-STATUS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save style for cursor placemen
DataItem KS0LW-SAVE-STY-CS char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SAVE-TXT-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Storage page update switch
DataItem KS0LW-SCV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem KS0LW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IO function code
DataItem KS0LW-SELECT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE_SESN_CD
DataItem KS0LW-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season century
DataItem KS0LW-SESN-CENT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SESN-CENTURY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0LW-SESN-YEAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem KS0LW-SESN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem KS0LW-SESN-YR-NUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season year
DataItem KS0LW-SESN-YR-RNG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season year
DataItem KS0LW-SESN-YR-RNG-NUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season year
DataItem KS0LW-SESN-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Skip KSAUD update flag
DataItem KS0LW-SKIP-KSAUD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YPR_PROD_STAT_CD
DataItem KS0LW-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YPR_PROD_STAT_CD
DataItem KS0LW-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style first character
DataItem KS0LW-STY-CHAR-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style second character
DataItem KS0LW-STY-CHAR-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style third character
DataItem KS0LW-STY-CHAR-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style fourth character
DataItem KS0LW-STY-CHAR-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style fifth character
DataItem KS0LW-STY-CHAR-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style sixth character
DataItem KS0LW-STY-CHAR-6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style seventh character
DataItem KS0LW-STY-CHAR-7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 1
DataItem KS0LW-STY-TYP-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 2
DataItem KS0LW-STY-TYP-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 3
DataItem KS0LW-STY-TYP-CD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem KS0LW-STYLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage problem code
DataItem KS0LW-STYLE-CHECK char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style found switch
DataItem KS0LW-STYLE-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage problem table
DataItem KS0LW-STYLE-TABLE char(28160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0LW-SW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KS0LW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem KS0LW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KS0LW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prbm cursor end of file switch
DataItem KS0LW-SWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0LW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0LW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem KS0LW-TA5TSQIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Customs Team Code
DataItem KS0LW-TEAM-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Team found switch
DataItem KS0LW-TEAM-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_TXT_NBR
DataItem KS0LW-TEXT-NBR int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage EOF switch
DataItem KS0LW-TS-EOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// U.S. Made? flag
DataItem KS0LW-US-MADE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCPROD01 row add
DataItem KS0LW-VCPROD01-ADDED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCPROD01 row(s) updated
DataItem KS0LW-VCPROD01-UPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem KS0LW-XXXTSPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem KS0LW-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

