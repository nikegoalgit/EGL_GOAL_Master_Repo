package ks0m;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPKS-00001;
import corpcom3.XPXGP01;
import corpcom3.XPXX001;
import corpcom4.XSKS-S0001;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XGPTBL;
import ks.common.*;
import pg.common.PG2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VCPROD01;
import vv.common.VCPROD02;
import vv.common.VHSNBR01;
import vv.common.VKSAUD01;
//*** PROGRAM=KS0M ****
// This application will display the U.S. Customs
// Classifications Audit information based on user entered
// selection criteria.  The user muster enter GPC and Style.
// The user may page forward (PF8) and page backward (PF7)
// through the selected list.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      03/10/93  DHUFFM  New application.
// KS9999   09/21/93  KKYLE   MOD FOR 4.1 CONVERSION
//          02/21/96  mhuynh  regen due to table change
//          04/23/97  RTANGI  Display only the details for rank
//                            2 row of the audit file.commented
//                            the portion where if the current
//                            'to' hs number matches the
//                            'previous' hs number row was not
//                            saved.Added an if check for
//                            saving only the rank 2 details.
//                            (in process ks0m-11408).
//          06/23/97  RCORLE  Equipment mods
//          08/05/97  RTANGI  Message table changes for 'BU'
//          08/27/97  RTANGI  New messages for 'bu'
//          10/15/97  RVEMPA  Added new processes for accepting
//                            Business Unit 'EQ'. Also added
//                            protected GPC-CD field on screen
//                            whose value will be displayed
//                            along with HS details.
//                            Ref:KS0M-15010 (VCPROD02 select)
//                                KS0M-15020 (VCPROD02 fetch)
//                                KS0M-15030 (VCPROD02 close).
//          12/03/97  RTANGI  fix for screen abends,increased
//                            ks0mw02 occurs from 20 to 60.
// *********************
Program KS0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KS0MW00 KS0MW00; // record
  KS0MW01 KS0MW01; // record
  KS0MW02 KS0MW02; // record
  KS0MW03 KS0MW03; // record
  KS0MW04 KS0MW04; // record
  KS0MW05 KS0MW05; // record
  KSAREC KSAREC; // record
  KSWREC KSWREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCPROD01 VCPROD01; // record
  VCPROD02 VCPROD02; // record
  VHSNBR01 VHSNBR01; // record
  VKSAUD01 VKSAUD01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use KS0MM.KS0MM001, // form
  	KS0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0MM001 initial; /* M001 input/output*/
    set KS0MW00 empty; /* Working storage*/
    set KS0MW01 empty; /* M001 display storage*/
    set KS0MW02 empty; /* M001 display storage*/
    set KS0MW03 empty; /* M001 display storage*/
    set KS0MW04 empty; /* M001 display storage*/
    set KSAREC empty; /* Task pass record*/
    set VKSAUD01 empty; /* HS Change Audit table*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    KS0MW00.KS0MW-SWD = "1"; /* Map to be displayed switch*/
    KS0MW00.KS0MW-SWF = "Y"; /* Format the map switch*/
    KS0MW00.KS0MW-SWR = "N"; /* Request for data switch*/
    ;
    /* ------------------------------------------------------------*/
    /* If data was passed in the COMMAREA, use as the initial key.*/
    /* ------------------------------------------------------------*/
    ;
    if (COMMAREA.CAITEM > " ") /* Data was passed*/
      ;
      COMMAREA.CAITEM = " "; /* Clear passed data*/
      ;
      KS0MW00.KS0MW-SWR = "Y"; /* Request for data switch*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0M-00000; /* Converse the main process*/
    ;
    ;
    KS0M-00000: KS0M-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0M-00000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end KS0M

// Main process to display a map
Function KS0M-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) If specified, display the first map.*/
  /* 2) Otherwise, if specified, display the second map, depending*/
  /* on function = add or change*/
  /* 3) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.KS0MW-SWD == "1") /* Map 1 was requested*/
    ;
    KS0M-10000(); /* Display map 1*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* Write the error to the Error Diagnosis Reporting Facility.*/
    /* ------------------------------------------------------------*/
    ;
    KSWREC.XXXPRCNM = "00000"; /* Module identification*/
    KSWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
    TA1REC.TA1MAPNO = KS0MW00.KS0MW-SWD; /* Map number*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    /* ------------------------------------------------------------*/
    /* Exit to display the application system menu.*/
    /* ------------------------------------------------------------*/
    ;
    COMMAREA.CATOAP = "KS0A"; /* TO application*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    /* ------------------------------------------------------------*/
    /* Abnormally terminate the transaction if the exit failed.*/
    /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  ;
end // end KS0M-00000

// List the rows in the table
Function KS0M-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0M-11000(); /* Obtain the data to display*/
  ;
  KS0M-12000(); /* Format and display the map*/
  ;
  KS0M-13000(); /* Check attention identifier*/
  ;
  KS0M-14000(); /* Reset fields to normal intensity*/
  ;
  KS0M-15000(); /* Verify the entered data*/
  ;
  KS0M-16000(); /* Process valid input request*/
  ;
  ;
end // end KS0M-10000

// Obtain the data to display
Function KS0M-11000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.KS0MW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW00.XXXTSLEN = 1329; /* temp storage page length*/
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.XXXTSPAG == 0) /* no pages established*/
    KS0MW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage and save key fields.*/
  /* ------------------------------------------------------------*/
  ;
  KS0M-11100(); /* Purge any temporary storage*/
  set KS0MW02 empty; /* Clear working storage*/
  set KS0MW03 empty; /* Clear working storage*/
  ;
  KS0MW01.KS0MW-GPC-CD = KS0MW05.KS0MW-GPC-CD; /* GPC code*/
  KS0MW01.KS0MW-STY-NBR = KS0MM001.KS0MM-STY-NBR; /* Style*/
  KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID; /* Color code*/
  KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD; /* Dimension*/
  ;
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0M-11200(); /* Select set and open cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW00.KS0MW-IXM = 1; /* Display line index*/
  KS0MW00.KS0MW-SWC = "N"; /* End of cursor switch*/
  ;
  while (KS0MW00.KS0MW-SWC == "N") /* Until end of cursor*/
    ;
    KS0M-11300(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0MW00.KS0MW-SWC == "N") /* Not end of cursor*/
      KS0M-11400(); /* Save data in display storage*/
    else
      if (KS0MW00.KS0MW-IXM > 1)
        KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IXM - 1;
        if (KS0MW03.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IX2] == " ")
          KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] = " ";
        end
      end
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If the page was formatted Roll-up the season duplicates.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.KS0MW-IXM > 1) /* If page was formatted*/
    KS0MW00.KS0MW-IX1 = 1;
    while (KS0MW00.KS0MW-IX1 <= 60
     && KS0MW02.KS0MW-DTL-STY-GROUP[KS0MW-IX1] != " ")
      set KS0MW04 empty; /* Clear working storage*/
      KS0M-11500(); /* Process season duplicates*/
      KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IX1] = KS0MW04.KS0MW-HS-GROUP; /* Replace HS detail*/
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If the page was formatted add the page to temp storage queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.KS0MW-IXM > 1) /* If page was formatted*/
    KS0MW00.KS0MW-IXM = 1;
    KS0MW00.KS0MW-IX1 = 1;
    KS0MW00.KS0MW-COUNTER = 0;
    while (KS0MW00.KS0MW-IXM <= 60
     && KS0MW02.KS0MW-DTL-STY-GROUP[KS0MW-IXM] > " ")
      KS0MW03.KS0MW-HS-GROUP = KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IXM];
      KS0MW00.KS0MW-IX2 = 1;
      while (KS0MW00.KS0MW-IX2 <= 40
       && KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] > " ")
        KS0M-11600(); /* Save temp storage page*/
        if (KS0MW00.KS0MW-COUNTER >= 14)
          KS0MW01.KS0MW-GPC-CD = KS0MM001.KS0MM-GPC-CD;
          KS0MW01.KS0MW-STY-NBR = KS0MM001.KS0MM-STY-NBR;
          KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID;
          KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD;
          if (KS0MW00.KS0MW-COUNTER > 14)
            KS0MW00.KS0MW-DTL-LINE = KS0MW01.KS0MW-DTL-LINE[15];
            KS0M-11700(); /* Add page to temporary storage*/
            KS0MW01.KS0MW-DTL-LINE[1] = KS0MW00.KS0MW-DTL-LINE;
            KS0MW00.KS0MW-COUNTER = 1;
          else
            KS0M-11700(); /* Add page to temporary storage*/
            KS0MW00.KS0MW-COUNTER = 0;
          end
        end
        KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1;
      end
      if (KS0MW00.KS0MW-IX2 > 60)
        converseLib.validationFailed(137); /* Table is full contact IS*/
        KSWREC.XXXPRCNM = "11000"; /* Module identification*/
      end
      if (KS0MW00.KS0MW-IX2 > 1)
        KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 - 1;
        if (KS0MW00.KS0MW-COUNTER == 0)
          if (KS0MW03.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IX2] == " ")
            KS0MW01.KS0MW-DTL-LINE[14] = " ";
            KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 - 1;
          end
        else
          if (KS0MW03.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IX2] == " ")
            KS0MW01.KS0MW-DTL-LINE[KS0MW-COUNTER] = " ";
            KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 - 1;
            KS0MW00.KS0MW-COUNTER = KS0MW00.KS0MW-COUNTER - 1;
          end
        end
      end
      KS0MW00.KS0MW-IXM = KS0MW00.KS0MW-IXM + 1;
    end
    if (KS0MW00.KS0MW-IXM > 60)
      converseLib.validationFailed(137); /* Table is full contact IS*/
      KSWREC.XXXPRCNM = "11000"; /* Module identification*/
    end
    if (KS0MW00.KS0MW-COUNTER > 0)
      KS0MW01.KS0MW-GPC-CD = KS0MM001.KS0MM-GPC-CD;
      KS0MW01.KS0MW-STY-NBR = KS0MM001.KS0MM-STY-NBR;
      KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID;
      KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD;
      KS0M-11700(); /* Add page to temporary storage*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  KS0M-11800(); /* Close the selected set cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    KSWREC.XXXPRCNM = "11000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    set KS0MM001.KS0MM-GPC-CD cursor; /* cursor*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW00.KS0MW-SWR = "N"; /* Request for data switch*/
  ;
  ;
end // end KS0M-11000

// Purge any temporary storage
Function KS0M-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0MW01 empty; /* M001 display storage*/
  ;
  KS0MW00.KS0MW-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0MW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-11100

// Select set and open cursor
Function KS0M-11200()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VKSAUD01 empty; /* Clear row storage area*/
  ;
  /* Use values entered on map to select the data*/
  ;
  if (KS0MM001.KS0MM-GPC-CD != "02")
    KSAREC.KSA-TASK = "S1";
  else
    KSAREC.KSA-TASK = "S2";
  end
  VKSAUD01.XGPCD = KS0MM001.KS0MM-GPC-CD;
  VKSAUD01.SY1STNBR = KS0MM001.KS0MM-STY-NBR;
  if (KS0MM001.KS0MM-COLR-CD-ID > " ")
    VKSAUD01.SY2CLRID = KS0MM001.KS0MM-COLR-CD-ID;
  else
    VKSAUD01.SY2CLRID = "*";
  end
  if (KS0MM001.KS0MM-DIM-CD > " ")
    VKSAUD01.XDMCD = KS0MM001.KS0MM-DIM-CD;
  else
    VKSAUD01.XDMCD = "*";
  end
  ;
  try
    call "IO6290" (KSAREC, SQLCA, VKSAUD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSAUD01.VKSAUD01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-11200

// Fetch next row in the cursor
Function KS0M-11300()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MM001.KS0MM-GPC-CD != "02")
    KSA-TASK = "N1";
  else
    KSA-TASK = "N2";
  end
  ;
  try
    call "IO6290" (KSAREC, SQLCA, VKSAUD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0MW00.KS0MW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSAUD01.VKSAUD01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-11300

// Save data in display storage
Function KS0M-11400()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSNBR01 empty; /* Clear VHSNBR01 record*/
  KS0MW00.KS0MW-FORMATTED-RATE = " "; /* Clear gen dty rt*/
  if (VKSAUD01.KS-HTS-CPTR-CD > " ") /* If HS number exists*/
    ;
    if (VKSAUD01.KS-HTS-2ND-SHDG-CD[2] == " "
     && VKSAUD01.KS-HTS-STAT-CD == " "
     && KS0MW01.KS0MW-GPC-CD == "02")
      KS0MW00.KS0MW-HTS-CPTR = VKSAUD01.KS-HTS-CPTR-CD;
                                   /* Chapter cd*/
      KS0MW00.KS0MW-HTS-HDG = VKSAUD01.KS-HTS-HDG-CD;
                                   /* Chapter hdg*/
      KS0MW00.KS0MW-HTS-1ST-SHDG = VKSAUD01.KS-HTS-1ST-SHDG-CD;
      KS0MW00.KS0MW-HTS-2ND-SHDG-1 = VKSAUD01.KS-HTS-2ND-SHDG-CD[1];
      KS0MW00.KS0MW-HTS-2ND-SHDG-2 = VKSAUD01.KS-HTS-2ND-SHDG-CD[2];
      ;
      KS0M-11403(); /* Select VHSNBR01 set*/
      KS0M-11404(); /* Fetch  VHSNBR01 row*/
      KS0M-11405(); /* Close  VHSNBR01 set*/
      KS0M-11402(); /* Format general duty rate*/
      ;
    else
      if (VKSAUD01.KS-HTS-2ND-SHDG-CD[2] == " ")
        KS0MW01.KS0MW-HTS-CPTR-CD = VKSAUD01.KS-HTS-CPTR-CD;
                                   /* Chapter cd*/
        KS0MW01.KS0MW-HTS-HDG-CD = VKSAUD01.KS-HTS-HDG-CD;
                                   /* Chapter hdg*/
        KS0MW01.KS0MW-HTS-1ST-SHDG-CD = VKSAUD01.KS-HTS-1ST-SHDG-CD;
        KS0MW01.KS0MW-HTS-2ND-SHDG-CD = VKSAUD01.KS-HTS-2ND-SHDG-CD[1];
        KS0MW01.KS0MW-HTS-STAT-CD = VKSAUD01.KS-HTS-STAT-CD;
        ;
        KS0M-11401(); /* Select VHSNBR01 row*/
        KS0M-11402(); /* Format general duty rate*/
      else
        KS0MW00.KS0MW-HTS-CPTR = VKSAUD01.KS-HTS-CPTR-CD;
                                   /* Chapter cd*/
        KS0MW00.KS0MW-HTS-HDG = VKSAUD01.KS-HTS-HDG-CD;
                                   /* Chapter hdg*/
        KS0MW00.KS0MW-HTS-1ST-SHDG = VKSAUD01.KS-HTS-1ST-SHDG-CD;
        KS0MW00.KS0MW-HTS-2ND-SHDG-1 = VKSAUD01.KS-HTS-2ND-SHDG-CD[1];
        KS0MW00.KS0MW-HTS-2ND-SHDG-2 = VKSAUD01.KS-HTS-2ND-SHDG-CD[2];
        ;
        KS0M-11403(); /* Select VHSNBR01 set*/
        KS0M-11404(); /* Fetch  VHSNBR01 row*/
        KS0M-11405(); /* Close  VHSNBR01 set*/
        ;
        KS0MW00.KS0MW-FORMATTED-RATE = "CHECK FOB";
      end
    end
  end
  ;
  KS0MW00.KS0MW-COLOR-COMB = "N";
  if (VKSAUD01.XGPCD == "02")
    KS0M-11408(); /* Add ftwr line to display*/
  else
    if (KS0MW00.KS0MW-IXM > 1)
      KS0MW00.KS0MW-IX1 = 1;
      while (KS0MW00.KS0MW-IX1 <= 20)
        if (VKSAUD01.SY1STNBR == KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IX1]
         || VKSAUD01.KS-XPRMT-STY-NBR == 
        KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IX1])
          KS0MW00.KS0MW-CHECK = KS0MW02.KS0MW-DTL-ZZHHMMSS[KS0MW-IX1] -           VKSAUD01.ZZHHMMSS;
          ;
          if (VKSAUD01.YKS-STY-TYP-CD == 
          KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IX1]
           && VKSAUD01.ZZZCHGDT == KS0MW02.KS0MW-DTL-CHNG-DT[KS0MW-IX1]
           && KS0MW00.KS0MW-CHECK == 0
           && VKSAUD01.XXXRKNBR == 
          KS0MW02.KS0MW-DTL-RANK-NBR[KS0MW-IX1])
            ;
            VKSAUD01.SY2CLRID = "***";
            KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IX1] = "***";
            KS0M-11406(); /* Figure rolled color group*/
          else
            if (KS0MW00.KS0MW-CHECK == 0
             && VKSAUD01.XXXRKNBR != 
            KS0MW02.KS0MW-DTL-RANK-NBR[KS0MW-IX1]
             && KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IX1] == "***")
              VKSAUD01.SY2CLRID = "***";
            end
          end
        end
        KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
      end
      ;
      if (KS0MW00.KS0MW-COLOR-COMB == "N")
        KS0M-11409(); /* Add line to display storage*/
      end
      ;
    else
      KS0M-11409(); /* Add line to display storage*/
      ;
    end
  end
  ;
  ;
end // end KS0M-11400

// Select unique VHSNBR01 row
Function KS0M-11401()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSNBR01 empty; /* Clear row storage area*/
  ;
  VHSNBR01.KS-HTS-CPTR-CD = KS0MW01.KS0MW-HTS-CPTR-CD; /* Chapter cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0MW01.KS0MW-HTS-HDG-CD; /* Chapter hdg*/
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0MW01.KS0MW-HTS-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0MW01.KS0MW-HTS-2ND-SHDG-CD;
  VHSNBR01.KS-HTS-STAT-CD = KS0MW01.KS0MW-HTS-STAT-CD;
  ;
  try
    call "IO6120" ("S ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11401"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-11401

// Format General Duty Rate field
Function KS0M-11402()
  /* ----------------------------------------------------------------------*/
  /* This routine moves the general duty rate, general duty unit and*/
  /* general duty uom abrv to a formatted field suitable for viewing.*/
  /* ----------------------------------------------------------------------*/
  ;
  KS0MW00.KS0MW-GEN-DTY-RATE = VHSNBR01.KS-GEN-DTY-RATE;
  KS0MW00.KS0MW-GEN-DTY-UNT = VHSNBR01.KS-GEN-DTY-UNT;
  KS0MW00.KS0MW-UOM-ABRV = VHSNBR01.KS-GEN-UOM-ABRV;
  ;
  KS0MW00.KS0MW-IX1 = 1; /* initialize index*/
  ;
  if (KS0MW00.KS0MW-GEN-DTY-RATE == 0 /* if both rate & unit are zeros*/
   && KS0MW00.KS0MW-GEN-DTY-UNT == 0)
    KS0MW00.KS0MW-FORMATTED-RATE = " "; /* spaces to result field*/
    return; /* return to previous process*/
  end
  ;
  if (KS0MW00.KS0MW-GEN-DTY-RATE > 0) /* if rate > zeros*/
    if (KS0MW00.KS0MW-RATE-BYTE[1] > "0") /* if 1st byte > zero*/
      KS0MW00.KS0MW-FORMAT-BYTE[1] = KS0MW00.KS0MW-RATE-BYTE[1]; /* move in 1st two bytes*/
      KS0MW00.KS0MW-FORMAT-BYTE[2] = KS0MW00.KS0MW-RATE-BYTE[2];
      KS0MW00.KS0MW-IX1 = 3;
    else
      KS0MW00.KS0MW-FORMAT-BYTE[1] = KS0MW00.KS0MW-RATE-BYTE[2];
      KS0MW00.KS0MW-IX1 = 2;
    end
    if (KS0MW00.KS0MW-RATE-BYTE[3] == "0" /* if 3rd byte = zero*/
     && KS0MW00.KS0MW-RATE-BYTE[4] == "0" /* & 4th byte = zero*/
     && KS0MW00.KS0MW-RATE-BYTE[5] == "0") /* & 5th byte = zero*/
       /* next sentence*/
    else
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = ".";
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1; /* set index up by 1*/
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-RATE-BYTE[3]; /* move in 3rd byte*/
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1; /* set index up by 1*/
      if (KS0MW00.KS0MW-RATE-BYTE[5] > "0")
        KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-RATE-BYTE[4]; /* move in 4th byte*/
        KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
        KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-RATE-BYTE[5]; /* move in 5th byte*/
        KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
      else
        if (KS0MW00.KS0MW-RATE-BYTE[4] > "0")
          KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-RATE-BYTE[4]; /* move in 4th byte*/
          KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
        end
      end
    end
    KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = "%";
    KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    if (KS0MW00.KS0MW-GEN-DTY-UNT > 0) /* something in unit ?*/
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = " ";
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = "+";
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = " ";
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    end
  end
  if (KS0MW00.KS0MW-GEN-DTY-UNT > 0) /* something in unit ?*/
    KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = "$";
    KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    if (KS0MW00.KS0MW-UNIT-BYTE[1] > "0") /* if 1st byte > zero*/
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UNIT-BYTE[1]; /* move in 1st two bytes*/
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UNIT-BYTE[2];
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    else
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UNIT-BYTE[2];
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    end
    if (KS0MW00.KS0MW-UNIT-BYTE[3] == "0" /* if 3rd byte = zero*/
     && KS0MW00.KS0MW-UNIT-BYTE[4] == "0" /* & 4th byte = zero*/
     && KS0MW00.KS0MW-UNIT-BYTE[5] == "0") /* & 5th byte = zero*/
       /* next sentence*/
    else
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = ".";
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1; /* set index up by 1*/
      KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UNIT-BYTE[3]; /* move in 3rd byte*/
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1; /* set index up by 1*/
      if (KS0MW00.KS0MW-UNIT-BYTE[5] > "0")
        KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UNIT-BYTE[4]; /* move in 4th byte*/
        KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
        KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UNIT-BYTE[5]; /* move in 5th byte*/
        KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
      else
        if (KS0MW00.KS0MW-UNIT-BYTE[4] > "0")
          KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UNIT-BYTE[4]; /* move in 4th byte*/
          KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
        end
      end
    end
    KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = "/";
    KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UOM-BYTE[1];
    KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UOM-BYTE[2];
    KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    KS0MW00.KS0MW-FORMAT-BYTE[KS0MW-IX1] = KS0MW00.KS0MW-UOM-BYTE[3];
  end
  ;
  ;
end // end KS0M-11402

// Select VHSNBR01 set
Function KS0M-11403()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSNBR01 empty; /* Clear row storage area*/
  ;
  VHSNBR01.KS-HTS-CPTR-CD = KS0MW00.KS0MW-HTS-CPTR; /* Chapter cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0MW00.KS0MW-HTS-HDG; /* Chapter hdg*/
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0MW00.KS0MW-HTS-1ST-SHDG;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0MW00.KS0MW-HTS-2ND-SHDG-1;
  ;
  try
    call "IO6120" ("S1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11403"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-11403

// Fetch  VHSNBR01 row
Function KS0M-11404()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6120" ("N1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11404"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-11404

// Close  VHSNBR01 set
Function KS0M-11405()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6120" ("C1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11405"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-11405

// Roll Style Group colors
Function KS0M-11406()
  ;
  KS0MW00.KS0MW-IX3 = 1;
  while (KS0MW00.KS0MW-IX3 <= 20)
    if (VKSAUD01.SY1STNBR == KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IX3]
     && VKSAUD01.XDMCD == KS0MW02.KS0MW-DTL-DIM-CD[KS0MW-IX3]
     && VKSAUD01.YKS-STY-TYP-CD == 
    KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IX3]
     && KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IX3] == "***")
      KS0MW00.KS0MW-COLOR-COMB = "Y";
      if (KS0MW00.KS0MW-IX1 != KS0MW00.KS0MW-IX3)
        KS0MW02.KS0MW-DTL-RANK-NBR[KS0MW-IX3] = VKSAUD01.XXXRKNBR;
        KS0MW02.KS0MW-DTL-ZZHHMMSS[KS0MW-IX3] = VKSAUD01.ZZHHMMSS;
        KS0MW02.KS0MW-DTL-CHNG-DT[KS0MW-IX3] = VKSAUD01.ZZZCHGDT;
        KS0MW00.KS0MW-IX2 = 1;
        KS0MW03.KS0MW-HS-GROUP = KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IX3];
        while (KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] != " "
         && KS0MW00.KS0MW-IX2 != 40)
          KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1;
        end
        ;
        KS0MW03.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-CPTR-CD;
        KS0MW03.KS0MW-DTL-HTS-HDG-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-HDG-CD;
        KS0MW03.KS0MW-DTL-HTS-1ST-SHDG-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-1ST-SHDG-CD;
        KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD1[KS0MW-IX2] = VKSAUD01.KS-HTS-2ND-SHDG-CD[1];
        KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-IX2] = VKSAUD01.KS-HTS-2ND-SHDG-CD[2];
        KS0MW03.KS0MW-DTL-HTS-STAT-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-STAT-CD;
        KS0MW03.KS0MW-DTL-HTS-RNG-FL[KS0MW-IX2] = VKSAUD01.KS-HTS-RNG-FL;
        KS0MW03.KS0MW-DTL-RULE-NBR[KS0MW-IX2] = VKSAUD01.KS-RULE-NBR;
        KS0MW03.KS0MW-DTL-PROD-STAT[KS0MW-IX2] = VKSAUD01.YPR-PROD-STAT-CD;
        KS0MW03.KS0MW-DTL-USERID[KS0MW-IX2] = VKSAUD01.XXXUSRID;
        KS0MW03.KS0MW-DTL-CHNG-DT[KS0MW-IX2] = VKSAUD01.ZZZCHGDT;
        KS0MW03.KS0MW-DTL-QOTA-CAT-CD[KS0MW-IX2] = VHSNBR01.YQT-QOTA-CAT-CD;
        KS0MW03.KS0MW-DTL-DTY-RATE[KS0MW-IX2] = KS0MW00.KS0MW-FORMATTED-RATE;
        KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IX3] = KS0MW03.KS0MW-HS-GROUP;
        ;
        KS0MW00.KS0MW-IX2 = 1;
        KS0MW03.KS0MW-HS-GROUP = KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IX1];
        while (KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] != " "
         && KS0MW00.KS0MW-IX2 <= 40)
          KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1;
        end
        KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 - 1;
        ;
        if (KS0MW00.KS0MW-IX2 > 1)
          KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IX1] = KS0MW03.KS0MW-COLR-CD-ID[KS0MW-IX2];
          KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] = " ";
          KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IX1] = KS0MW03.KS0MW-HS-GROUP;
        else
          KS0MW02.KS0MW-DTL-STY-GROUP[KS0MW-IX1] = " ";
          KS0MW00.KS0MW-IXM = KS0MW00.KS0MW-IX1; /* Reset line index*/
        end
      end
      KS0MW00.KS0MW-IX3 = 20;
      KS0MW00.KS0MW-IX1 = 20;
    end
    KS0MW00.KS0MW-IX3 = KS0MW00.KS0MW-IX3 + 1;
  end
  ;
  ;
end // end KS0M-11406

// Save ftwr display line
Function KS0M-11408()
  /* ------------------------------------------------------------*/
  /* If the current "to" HS matches the previous "from" HS don't*/
  /* save the data.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.KS0MW-IXM > 1)
    KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IXM - 1;
    if (KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IX1] == VKSAUD01.SY1STNBR
     && KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IX1] == VKSAUD01.SY2CLRID
     && KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IX1] == VKSAUD01.YKS-STY-TYP-CD)
      KS0MW00.KS0MW-IX2 = 1;
      KS0MW03.KS0MW-HS-GROUP = KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IX1];
      while (KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] != " "
       && KS0MW00.KS0MW-IX2 != 40)
        KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1;
      end
      if (KS0MW00.KS0MW-IX2 > 1)
        KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 - 1;
      end
  /* IF KS0MW03.KS0MW-DTL-HTS-CPTR-CD(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-CPTR-CD*/
  /* AND KS0MW03.KS0MW-DTL-HTS-HDG-CD(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-HDG-CD*/
  /* AND KS0MW03.KS0MW-DTL-HTS-1ST-SHDG-CD(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-1ST-SHDG-CD*/
  /* AND KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD1(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-2ND-SHDG-CD(1)*/
  /* AND KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD2(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-2ND-SHDG-CD(2)*/
  /* AND KS0MW03.KS0MW-DTL-HTS-STAT-CD(KS0MW-IX2) EQ*/
    /* VKSAUD01.KS-HTS-STAT-CD*/
    /* AND KS0MW03.KS0MW-DTL-HTS-RNG-FL(KS0MW-IX2) EQ*/
    /* VKSAUD01.KS-HTS-RNG-FL;*/
    /* EZERTN;*/
    /* END;*/
    /* IF RANK NUMBER IS 1,DO NOT SAVE THE ROW*/
      if (VKSAUD01.XXXRKNBR == 1)
        return;
      end
    /* END OF THE IF FOR RANK NBR*/
    end
  end
  ;
  if (KS0MW00.KS0MW-IXM > 1) /* Figure group to add to*/
    KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IXM - 1;
    if (VKSAUD01.SY1STNBR == KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IX1]
     && VKSAUD01.SY2CLRID == KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IX1]
     && VKSAUD01.XDMCD == KS0MW02.KS0MW-DTL-DIM-CD[KS0MW-IX1]
     && VKSAUD01.YKS-STY-TYP-CD == 
    KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IX1])
      KS0MW00.KS0MW-IXM = KS0MW00.KS0MW-IX1;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW02.KS0MW-DTL-GPC-CD[KS0MW-IXM] = VKSAUD01.XGPCD;
  KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IXM] = VKSAUD01.SY1STNBR;
  KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IXM] = VKSAUD01.SY2CLRID;
  KS0MW02.KS0MW-DTL-DIM-CD[KS0MW-IXM] = VKSAUD01.XDMCD;
  KS0MW02.KS0MW-DTL-XPRMT-STY-NBR[KS0MW-IXM] = VKSAUD01.KS-XPRMT-STY-NBR;
  KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IXM] = VKSAUD01.YKS-STY-TYP-CD;
  ;
  KS0MW00.KS0MW-IX2 = 1;
  KS0MW03.KS0MW-HS-GROUP = KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IXM];
  while (KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] != " "
   && KS0MW00.KS0MW-IX2 != 40)
    KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1;
  end
  ;
  KS0MW03.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-CPTR-CD;
  KS0MW03.KS0MW-DTL-HTS-HDG-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-HDG-CD;
  KS0MW03.KS0MW-DTL-HTS-1ST-SHDG-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-1ST-SHDG-CD;
  KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD1[KS0MW-IX2] = VKSAUD01.KS-HTS-2ND-SHDG-CD[1];
  KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-IX2] = VKSAUD01.KS-HTS-2ND-SHDG-CD[2];
  KS0MW03.KS0MW-DTL-HTS-STAT-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-STAT-CD;
  KS0MW03.KS0MW-DTL-HTS-RNG-FL[KS0MW-IX2] = VKSAUD01.KS-HTS-RNG-FL;
  KS0MW03.KS0MW-DTL-RULE-NBR[KS0MW-IX2] = VKSAUD01.KS-RULE-NBR;
  KS0MW03.KS0MW-DTL-PROD-STAT[KS0MW-IX2] = VKSAUD01.YPR-PROD-STAT-CD;
  KS0MW03.KS0MW-DTL-USERID[KS0MW-IX2] = VKSAUD01.XXXUSRID;
  KS0MW03.KS0MW-DTL-CHNG-DT[KS0MW-IX2] = VKSAUD01.ZZZCHGDT;
  KS0MW03.KS0MW-DTL-QOTA-CAT-CD[KS0MW-IX2] = VHSNBR01.YQT-QOTA-CAT-CD;
  KS0MW03.KS0MW-DTL-DTY-RATE[KS0MW-IX2] = KS0MW00.KS0MW-FORMATTED-RATE;
  ;
  KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IXM] = KS0MW03.KS0MW-HS-GROUP;
  ;
  KS0MW00.KS0MW-IXM = KS0MW00.KS0MW-IXM + 1; /* Increment line index*/
  ;
  ;
end // end KS0M-11408

// Save aprl display line
Function KS0M-11409()
  /* ------------------------------------------------------------*/
  /* If the current "to" HS matches the previous "from" HS don't*/
  /* save the data.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.KS0MW-IXM > 1)
    KS0MW00.KS0MW-IX1 = 1;
    while (KS0MW00.KS0MW-IX1 <= 20)
      if (KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IX1] == VKSAUD01.SY1STNBR
       && KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IX1] == VKSAUD01.YKS-STY-TYP-CD
      )
        if (KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IX1] == VKSAUD01.SY2CLRID)
          /* OR KS0MW02.KS0MW-DTL-COLR-CD-ID(KS0MW-IX1) EQ '***';*/
          KS0MW00.KS0MW-IX2 = 1;
          KS0MW03.KS0MW-HS-GROUP = KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IX1];
          while (KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] != " "
           && KS0MW00.KS0MW-IX2 != 40)
            KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1;
          end
          if (KS0MW00.KS0MW-IX2 > 1)
            KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 - 1;
          end
  /* IF KS0MW03.KS0MW-DTL-HTS-CPTR-CD(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-CPTR-CD*/
  /* AND KS0MW03.KS0MW-DTL-HTS-HDG-CD(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-HDG-CD*/
  /* AND KS0MW03.KS0MW-DTL-HTS-1ST-SHDG-CD(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-1ST-SHDG-CD*/
  /* AND KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD1(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-2ND-SHDG-CD(1)*/
  /* AND KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD2(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-2ND-SHDG-CD(2)*/
  /* AND KS0MW03.KS0MW-DTL-HTS-STAT-CD(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-STAT-CD*/
  /* AND KS0MW03.KS0MW-DTL-HTS-RNG-FL(KS0MW-IX2) EQ*/
  /* VKSAUD01.KS-HTS-RNG-FL;*/
  /* EZERTN;*/
  /* END;*/
  /* IF RANK NUMBER IS 1,DO NOT SAVE THE ROW*/
          if (VKSAUD01.XXXRKNBR == 1)
            return;
          end
  /* END OF IF FOR RANK NUMBER*/
        end
      end
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    end
  end
  ;
  if (KS0MW00.KS0MW-IXM > 1) /* Figure group to add to*/
    KS0MW00.KS0MW-IX1 = 1;
    while (KS0MW00.KS0MW-IX1 <= 20)
      if (VKSAUD01.SY1STNBR == KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IX1]
       && VKSAUD01.XDMCD == KS0MW02.KS0MW-DTL-DIM-CD[KS0MW-IX1]
       && VKSAUD01.YKS-STY-TYP-CD == 
      KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IX1])
        if (VKSAUD01.SY2CLRID == KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IX1])
          /* OR KS0MW02.KS0MW-DTL-COLR-CD-ID(KS0MW-IX1) EQ '***';*/
          KS0MW00.KS0MW-IXM = KS0MW00.KS0MW-IX1;
        end
      end
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW02.KS0MW-DTL-GPC-CD[KS0MW-IXM] = VKSAUD01.XGPCD;
  KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IXM] = VKSAUD01.SY1STNBR;
  if (KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IXM] == " ")
    KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IXM] = VKSAUD01.SY2CLRID;
  end
  KS0MW02.KS0MW-DTL-DIM-CD[KS0MW-IXM] = VKSAUD01.XDMCD;
  KS0MW02.KS0MW-DTL-XPRMT-STY-NBR[KS0MW-IXM] = VKSAUD01.KS-XPRMT-STY-NBR;
  KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IXM] = VKSAUD01.YKS-STY-TYP-CD;
  KS0MW02.KS0MW-DTL-RANK-NBR[KS0MW-IXM] = VKSAUD01.XXXRKNBR;
  KS0MW02.KS0MW-DTL-ZZHHMMSS[KS0MW-IXM] = VKSAUD01.ZZHHMMSS;
  KS0MW02.KS0MW-DTL-CHNG-DT[KS0MW-IXM] = VKSAUD01.ZZZCHGDT;
  ;
  KS0MW00.KS0MW-IX2 = 1;
  KS0MW03.KS0MW-HS-GROUP = KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IXM];
  while (KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] != " "
   && KS0MW00.KS0MW-IX2 != 40)
    KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1;
  end
  ;
  KS0MW03.KS0MW-COLR-CD-ID[KS0MW-IX2] = VKSAUD01.SY2CLRID;
  KS0MW03.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-CPTR-CD;
  KS0MW03.KS0MW-DTL-HTS-HDG-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-HDG-CD;
  KS0MW03.KS0MW-DTL-HTS-1ST-SHDG-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-1ST-SHDG-CD;
  KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD1[KS0MW-IX2] = VKSAUD01.KS-HTS-2ND-SHDG-CD[1];
  KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-IX2] = VKSAUD01.KS-HTS-2ND-SHDG-CD[2];
  KS0MW03.KS0MW-DTL-HTS-STAT-CD[KS0MW-IX2] = VKSAUD01.KS-HTS-STAT-CD;
  KS0MW03.KS0MW-DTL-HTS-RNG-FL[KS0MW-IX2] = VKSAUD01.KS-HTS-RNG-FL;
  KS0MW03.KS0MW-DTL-RULE-NBR[KS0MW-IX2] = VKSAUD01.KS-RULE-NBR;
  KS0MW03.KS0MW-DTL-PROD-STAT[KS0MW-IX2] = VKSAUD01.YPR-PROD-STAT-CD;
  KS0MW03.KS0MW-DTL-USERID[KS0MW-IX2] = VKSAUD01.XXXUSRID;
  KS0MW03.KS0MW-DTL-CHNG-DT[KS0MW-IX2] = VKSAUD01.ZZZCHGDT;
  KS0MW03.KS0MW-DTL-QOTA-CAT-CD[KS0MW-IX2] = VHSNBR01.YQT-QOTA-CAT-CD;
  KS0MW03.KS0MW-DTL-DTY-RATE[KS0MW-IX2] = KS0MW00.KS0MW-FORMATTED-RATE;
  ;
  KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IXM] = KS0MW03.KS0MW-HS-GROUP;
  ;
  KS0MW00.KS0MW-IXM = KS0MW00.KS0MW-IXM + 1; /* Increment line index*/
  ;
  ;
end // end KS0M-11409

// Process Season Duplicates
Function KS0M-11500()
  /* ------------------------------------------------------------*/
  /* Process working storage for season duplicates.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW03.KS0MW-HS-GROUP = KS0MW02.KS0MW-DTL-HS-NBR-GROUP[KS0MW-IX1];
  KS0MW00.KS0MW-IX2 = 1;
  KS0MW00.KS0MW-IX3 = 1;
  while (KS0MW00.KS0MW-IX2 <= 40
   && KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] != " ")
    KS0MW00.KS0MW-HS-FOUND = "N";
    KS0MW00.KS0MW-COUNTER = KS0MW00.KS0MW-IX2 + 1;
    while (KS0MW00.KS0MW-COUNTER <= 40
     && KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-COUNTER] != " ")
      if (KS0MW03.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IX2] == 
      KS0MW03.KS0MW-DTL-HTS-CPTR-CD[KS0MW-COUNTER]
       && KS0MW03.KS0MW-DTL-HTS-HDG-CD[KS0MW-IX2] == 
      KS0MW03.KS0MW-DTL-HTS-HDG-CD[KS0MW-COUNTER]
       && KS0MW03.KS0MW-DTL-HTS-1ST-SHDG-CD[KS0MW-IX2] == 
      KS0MW03.KS0MW-DTL-HTS-1ST-SHDG-CD[KS0MW-COUNTER]
       && KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD1[KS0MW-IX2] == 
      KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD1[KS0MW-COUNTER]
       && KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-IX2] == 
      KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-COUNTER]
       && KS0MW03.KS0MW-DTL-HTS-STAT-CD[KS0MW-IX2] == 
      KS0MW03.KS0MW-DTL-HTS-STAT-CD[KS0MW-COUNTER]
       && KS0MW03.KS0MW-DTL-HTS-RNG-FL[KS0MW-IX2] == 
      KS0MW03.KS0MW-DTL-HTS-RNG-FL[KS0MW-COUNTER])
        KS0MW00.KS0MW-HS-FOUND = "Y";
        KS0M-11510(); /* Process HS Nbr groups*/
      end
      KS0MW00.KS0MW-COUNTER = KS0MW00.KS0MW-COUNTER + 1;
    end
    if (KS0MW00.KS0MW-HS-FOUND == "N") /* If HS not found*/
      KS0MW04.KS0MW-HS-NBR-GROUP[KS0MW-IX3] = KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2]; /* Save HS information*/
      KS0MW00.KS0MW-IX3 = KS0MW00.KS0MW-IX3 + 1;
      KS0MW00.KS0MW-HS-FOUND = "N";
    end
    KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1;
  end
  ;
  ;
end // end KS0M-11500

// Process HS Nbr Groups
Function KS0M-11510()
  ;
  KS0MW00.KS0MW-IX4 = KS0MW00.KS0MW-COUNTER - KS0MW00.KS0MW-IX2;
  KS0MW00.KS0MW-IX5 = 1;
  KS0MW04.KS0MW-COMP1-GROUP = " ";
  KS0MW04.KS0MW-COMP2-GROUP = " ";
  while (KS0MW00.KS0MW-IX5 <= KS0MW00.KS0MW-IX4
   && KS0MW00.KS0MW-COUNTER <= 40
   && KS0MW00.KS0MW-IX5 <= 10)
    if (KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-IX2] > " "
     && KS0MW03.KS0MW-DTL-HTS-NBR[KS0MW-IX2] == " ")
      KS0MW04.KS0MW-COMP1[KS0MW-IX5] = "X";
    else
      KS0MW04.KS0MW-COMP1[KS0MW-IX5] = KS0MW03.KS0MW-DTL-HTS-NBR[KS0MW-IX2];
    end
    if (KS0MW03.KS0MW-HS-NBR-GROUP[KS0MW-COUNTER] > " "
     && KS0MW03.KS0MW-DTL-HTS-NBR[KS0MW-COUNTER] == " ")
      KS0MW04.KS0MW-COMP2[KS0MW-IX5] = "X";
    else
      KS0MW04.KS0MW-COMP2[KS0MW-IX5] = KS0MW03.KS0MW-DTL-HTS-NBR[KS0MW-COUNTER];
    end
    KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1;
    KS0MW00.KS0MW-COUNTER = KS0MW00.KS0MW-COUNTER + 1;
    ;
    KS0MW00.KS0MW-IX5 = KS0MW00.KS0MW-IX5 + 1;
  end
  ;
  KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 - KS0MW00.KS0MW-IX4;
  KS0MW00.KS0MW-COUNTER = KS0MW00.KS0MW-COUNTER - KS0MW00.KS0MW-IX4;
  ;
  if (KS0MW04.KS0MW-COMP1[1] == KS0MW04.KS0MW-COMP2[1]
   && KS0MW04.KS0MW-COMP1[2] == KS0MW04.KS0MW-COMP2[2]
   && KS0MW04.KS0MW-COMP1[3] == KS0MW04.KS0MW-COMP2[3]
   && KS0MW04.KS0MW-COMP1[4] == KS0MW04.KS0MW-COMP2[4]
   && KS0MW04.KS0MW-COMP1[5] == KS0MW04.KS0MW-COMP2[5]
   && KS0MW04.KS0MW-COMP1[6] == KS0MW04.KS0MW-COMP2[6]
   && KS0MW04.KS0MW-COMP1[7] == KS0MW04.KS0MW-COMP2[7]
   && KS0MW04.KS0MW-COMP1[8] == KS0MW04.KS0MW-COMP2[8]
   && KS0MW04.KS0MW-COMP1[9] == KS0MW04.KS0MW-COMP2[9]
   && KS0MW04.KS0MW-COMP1[10] == KS0MW04.KS0MW-COMP2[10])
    KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-COUNTER; /* Reset HS index*/
    KS0MW00.KS0MW-HS-FOUND = "N";
  else
    KS0MW00.KS0MW-COUNTER = KS0MW00.KS0MW-COUNTER + KS0MW00.KS0MW-IX4 - 1;
    KS0MW00.KS0MW-HS-FOUND = "N";
  end
  ;
  ;
end // end KS0M-11510

// Save page to temporary storage
Function KS0M-11600()
  /* ------------------------------------------------------------*/
  /* If the current style, color, and style type match - save the*/
  /* data, else insert blank line and save the data.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-COUNTER + 1;
  if (KS0MW00.KS0MW-COUNTER > 0)
    if (KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IXM] == 
    KS0MW01.KS0MW-DTL-STY-NBR[KS0MW-COUNTER]
     && KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IXM] == 
    KS0MW01.KS0MW-DTL-COLR-CD-ID[KS0MW-COUNTER]
     && KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IXM] == 
    KS0MW01.KS0MW-DTL-STY-TYP[KS0MW-COUNTER])
    else
      KS0MW01.KS0MW-DTL-LINE[KS0MW-IX1] = " ";
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
      KS0MW00.KS0MW-COUNTER = KS0MW00.KS0MW-COUNTER + 1;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW01.KS0MW-DTL-GPC-CD[KS0MW-IX1] = KS0MW02.KS0MW-DTL-GPC-CD[KS0MW-IXM];
  KS0MW01.KS0MW-DTL-STY-NBR[KS0MW-IX1] = KS0MW02.KS0MW-DTL-STY-NBR[KS0MW-IXM];
  KS0MW01.KS0MW-DTL-COLR-CD-ID[KS0MW-IX1] = KS0MW02.KS0MW-DTL-COLR-CD-ID[KS0MW-IXM];
  KS0MW01.KS0MW-DTL-DIM-CD[KS0MW-IX1] = KS0MW02.KS0MW-DTL-DIM-CD[KS0MW-IXM];
  KS0MW01.KS0MW-DTL-XPRMT-STY-NBR[KS0MW-IX1] = KS0MW02.KS0MW-DTL-XPRMT-STY-NBR[KS0MW-IXM];
  KS0MW01.KS0MW-DTL-STY-TYP[KS0MW-IX1] = KS0MW02.KS0MW-DTL-STY-TYP[KS0MW-IXM];
  ;
  KS0MW01.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IX1] = KS0MW03.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-HTS-HDG-CD[KS0MW-IX1] = KS0MW03.KS0MW-DTL-HTS-HDG-CD[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-HTS-1ST-SHDG-CD[KS0MW-IX1] = KS0MW03.KS0MW-DTL-HTS-1ST-SHDG-CD[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-HTS-2ND-SHDGCD1[KS0MW-IX1] = KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD1[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-IX1] = KS0MW03.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-HTS-STAT-CD[KS0MW-IX1] = KS0MW03.KS0MW-DTL-HTS-STAT-CD[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-HTS-RNG-FL[KS0MW-IX1] = KS0MW03.KS0MW-DTL-HTS-RNG-FL[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-RULE-NBR[KS0MW-IX1] = KS0MW03.KS0MW-DTL-RULE-NBR[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-PROD-STAT[KS0MW-IX1] = KS0MW03.KS0MW-DTL-PROD-STAT[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-USERID[KS0MW-IX1] = KS0MW03.KS0MW-DTL-USERID[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-CHNG-DT[KS0MW-IX1] = KS0MW03.KS0MW-DTL-CHNG-DT[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-QOTA-CAT-CD[KS0MW-IX1] = KS0MW03.KS0MW-DTL-QOTA-CAT-CD[KS0MW-IX2];
  KS0MW01.KS0MW-DTL-DTY-RATE[KS0MW-IX1] = KS0MW03.KS0MW-DTL-DTY-RATE[KS0MW-IX2];
  KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX1 + 1;
  KS0MW00.KS0MW-COUNTER = KS0MW00.KS0MW-COUNTER + 1;
  ;
  ;
end // end KS0M-11600

// Add  page to temporary storage
Function KS0M-11700()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW01.XXXTSLEN = KS0MW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set KS0MW01 empty; /* M001 display storage*/
    ;
    KS0MW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-11700

// Close selected set cursor
Function KS0M-11800()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MM001.KS0MM-GPC-CD != "02")
    KSAREC.KSA-TASK = "C1";
  else
    KSAREC.KSA-TASK = "C2";
  end
  ;
  try
    call "IO6290" (KSAREC, SQLCA, VKSAUD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11800"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSAUD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-11800

// Format and converse the map
Function KS0M-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.KS0MW-SWR == "Y"          /* Obtain data failed*/
   || converseVar.validationMsgNum == 0 /* or no error found*/
   || converseVar.validationMsgNum == 137) /* or table is full error*/
    ;
    if (KS0MW00.KS0MW-SWF == "Y") /* Map must be formatted*/
  /* Save header info in working storage*/
      KS0MW05.KS0MW-KS-BUS-UNIT-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
      KS0MW01.KS0MW-GPC-CD = KS0MW05.KS0MW-GPC-CD; /* GPC code gpc*/
      KS0MW01.KS0MW-STY-NBR = KS0MM001.KS0MM-STY-NBR;
      KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID;
      KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD;
      KS0M-12100(); /* Format the data on the map*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0MM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0MM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0MM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0MM001.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0MM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0MM001 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  KS0MW00.KS0MW-SFN = " "; /* reset function switch*/
   /* reset saved page*/
  KS0MW00.KS0MW-SAVE-PAGE = 0000;
  COMMAREA.CATOAP = KS0MM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0MM001.CAITEM; /* Application data*/
end // end KS0M-12000

// Format the display data
Function KS0M-12100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0MM001 initial; /* M001 input/output area*/
  ;
  KS0MW00.KS0MW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If audit changes exist, get the page from temp storage that the*/
  /* record's on and display it.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW00.KS0MW-SAVE-PAGE != 0) /* if page saved off*/
    ;
    KS0MW00.XXXTSPAG = KS0MW-SAVE-PAGE; /* use saved page*/
    ;
    KS0M-12110(); /* Obtain temporary storage page*/
    ;
    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0MM001.XXXLITPG skip; /* "PAGE" literal*/
    KS0MM001.XXXTSPAG = KS0MW00.XXXTSPAG; /* Current page*/
    set KS0MM001.XXXLITOF skip; /* "OF" literal*/
    KS0MM001.TA5TSQIX = KS0MW00.TA5TSQIX; /* Highest page*/
    ;
  /* ------------------------------------------------------------*/
  /* If the page in storage is not the page to be displayed,*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/
    ;
  else
    if (KS0MW00.TA5TSQIX > 0) /* Pages were formatted*/
      ;
      if (KS0MW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
        ;
        /* ------------------------------------------------------------*/
        /* If the current page has been changed, update the page in*/
        /* storage before obtaining the next one to display.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0MW00.KS0MW-SWU == "Y") /* Current page was changed*/
          ;
          KS0M-12120(); /* Update temporary storage page*/
          ;
          KS0MW00.KS0MW-SWU = "N"; /* Storage update switch*/
          ;
        end
        ;
        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0MW00.XXXTSPAG > KS0MW00.TA5TSQIX) /* Desired greater highest*/
          KS0MW00.XXXTSPAG = KS0MW00.TA5TSQIX; /* Default to highest*/
        end
        ;
        KS0M-12110(); /* Obtain temporary storage page*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/
      ;
      set KS0MM001.XXXLITPG skip; /* "PAGE" literal*/
      KS0MM001.XXXTSPAG = KS0MW00.XXXTSPAG; /* Current page*/
      set KS0MM001.XXXLITOF skip; /* "OF" literal*/
      KS0MM001.TA5TSQIX = KS0MW00.TA5TSQIX; /* Highest page*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
                /* GPC and GPC description in the header*/
  KS0MM001.KS0MM-BUS-UNIT-CD = KS0MW05.KS0MW-KS-BUS-UNIT-CD;
  KS0MM001.KS0MM-GPC-CD = KS0MW01.KS0MW-GPC-CD;
  ;
  if (KS0MW05.KS0MW-KS-BUS-UNIT-CD == "EQ")
    KS0MM001.KS0MM-GPC-DESC = "EQUIPMENT";
  else
   /* get description*/
    if (KS0MW01.KS0MW-GPC-CD in XGPTBL.XGPCD)
      KS0MM001.KS0MM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
  end
  ;
  KS0MM001.KS0MM-STY-NBR = KS0MW01.KS0MW-STY-NBR;
  KS0MM001.KS0MM-COLR-CD-ID = KS0MW01.KS0MW-COLR-CD-ID;
  KS0MM001.KS0MM-DIM-CD = KS0MW01.KS0MW-DIM-CD;
  ;
  KS0MW00.KS0MW-IXM = 1; /* Initialize map index*/
  while (KS0MW00.KS0MW-IXM <= 14) /* Until screen is full*/
    ;
    if (KS0MW00.KS0MW-IXM == 14
     && KS0MW01.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IXM] == " "
     && KS0MM001.XXXTSPAG == KS0MM001.TA5TSQIX)
      KS0MW01.KS0MW-DTL-LINE[KS0MW-IXM] = " ";
    end
    if (KS0MW00.KS0MW-IXM > 1)
      KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IXM - 1;
      if (KS0MW01.KS0MW-DTL-GPC-CD[KS0MW-IXM] == "02")
        if (KS0MW01.KS0MW-DTL-STY-NBR[KS0MW-IXM] == 
        KS0MW01.KS0MW-DTL-STY-NBR[KS0MW-IX1]
         && KS0MW01.KS0MW-DTL-COLR-CD-ID[KS0MW-IXM] == 
        KS0MW01.KS0MW-DTL-COLR-CD-ID[KS0MW-IX1]
         && KS0MW01.KS0MW-DTL-DIM-CD[KS0MW-IXM] == 
        KS0MW01.KS0MW-DTL-DIM-CD[KS0MW-IX1]
         && KS0MW01.KS0MW-DTL-STY-TYP[KS0MW-IXM] == 
        KS0MW01.KS0MW-DTL-STY-TYP[KS0MW-IX1])
          KS0MM001.KS0MM-DTL-STY-NBR[KS0MW-IXM] = " ";
          KS0MM001.KS0MM-DTL-COLR-CD-ID[KS0MW-IXM] = " ";
          KS0MM001.KS0MM-DTL-DIM-CD[KS0MW-IXM] = " ";
          KS0MM001.KS0MM-DTL-STY-TYP[KS0MW-IXM] = " ";
        else
          KS0MM001.KS0MM-DTL-STY-NBR[KS0MW-IXM] = KS0MW01.KS0MW-DTL-STY-NBR[KS0MW-IXM];
          KS0MM001.KS0MM-DTL-COLR-CD-ID[KS0MW-IXM] = KS0MW01.KS0MW-DTL-COLR-CD-ID[KS0MW-IXM];
          KS0MM001.KS0MM-DTL-DIM-CD[KS0MW-IXM] = KS0MW01.KS0MW-DTL-DIM-CD[KS0MW-IXM];
          KS0MM001.KS0MM-DTL-STY-TYP[KS0MW-IXM] = KS0MW01.KS0MW-DTL-STY-TYP[KS0MW-IXM];
        end
      else
        if (KS0MW01.KS0MW-DTL-GPC-CD[KS0MW-IXM] == "03")
          if (KS0MW01.KS0MW-DTL-STY-NBR[KS0MW-IXM] == 
          KS0MW01.KS0MW-DTL-STY-NBR[KS0MW-IX1]
           && KS0MW01.KS0MW-DTL-STY-TYP[KS0MW-IXM] == 
          KS0MW01.KS0MW-DTL-STY-TYP[KS0MW-IX1])
            KS0MM001.KS0MM-DTL-STY-NBR[KS0MW-IXM] = " ";
            KS0MM001.KS0MM-DTL-COLR-CD-ID[KS0MW-IXM] = " ";
            KS0MM001.KS0MM-DTL-DIM-CD[KS0MW-IXM] = " ";
            KS0MM001.KS0MM-DTL-STY-TYP[KS0MW-IXM] = " ";
          else
            KS0MM001.KS0MM-DTL-STY-NBR[KS0MW-IXM] = KS0MW01.KS0MW-DTL-STY-NBR[KS0MW-IXM];
            KS0MM001.KS0MM-DTL-COLR-CD-ID[KS0MW-IXM] = KS0MW01.KS0MW-DTL-COLR-CD-ID[KS0MW-IXM];
            KS0MM001.KS0MM-DTL-DIM-CD[KS0MW-IXM] = KS0MW01.KS0MW-DTL-DIM-CD[KS0MW-IXM];
            KS0MM001.KS0MM-DTL-STY-TYP[KS0MW-IXM] = KS0MW01.KS0MW-DTL-STY-TYP[KS0MW-IXM];
          end
        end
      end
    else
      KS0MM001.KS0MM-DTL-STY-NBR[KS0MW-IXM] = KS0MW01.KS0MW-DTL-STY-NBR[KS0MW-IXM];
      KS0MM001.KS0MM-DTL-COLR-CD-ID[KS0MW-IXM] = KS0MW01.KS0MW-DTL-COLR-CD-ID[KS0MW-IXM];
      KS0MM001.KS0MM-DTL-DIM-CD[KS0MW-IXM] = KS0MW01.KS0MW-DTL-DIM-CD[KS0MW-IXM];
      KS0MM001.KS0MM-DTL-STY-TYP[KS0MW-IXM] = KS0MW01.KS0MW-DTL-STY-TYP[KS0MW-IXM];
      KS0MM001.KS0MM-DTL-RULE-NBR[KS0MW-IXM] = KS0MW01.KS0MW-DTL-RULE-NBR[KS0MW-IXM];
    end
    if (KS0MW01.KS0MW-DTL-GPC-CD[KS0MW-IXM] > " ")
      KS0MM001.KS0MM-DTL-RULE-NBR[KS0MW-IXM] = KS0MW01.KS0MW-DTL-RULE-NBR[KS0MW-IXM];
      KS0MM001.KS0MM-DTL-PROD-STAT[KS0MW-IXM] = KS0MW01.KS0MW-DTL-PROD-STAT[KS0MW-IXM];
      KS0MM001.KS0MM-DTL-USERID[KS0MW-IXM] = KS0MW01.KS0MW-DTL-USERID[KS0MW-IXM];
      if (KS0MW01.KS0MW-DTL-CHNG-DT[KS0MW-IXM] > 0)
        KS0MW00.KS0MW-FULLDATE = KS0MW01.KS0MW-DTL-CHNG-DT[KS0MW-IXM];
        KS0MW00.KS0MW-FORMYY = KS0MW00.KS0MW-FULLYY;
        KS0MW00.KS0MW-FORMMM = KS0MW00.KS0MW-FULLMM;
        KS0MW00.KS0MW-FORMDD = KS0MW00.KS0MW-FULLDD;
        KS0MM001.KS0MM-DTL-CHNG-DT[KS0MW-IXM] = KS0MW00.KS0MW-FORMDATE;
      else
        KS0MM001.KS0MM-DTL-CHNG-DT[KS0MW-IXM] = " ";
      end
      KS0MM001.KS0MM-DTL-QOTA-CAT-CD[KS0MW-IXM] = KS0MW01.KS0MW-DTL-QOTA-CAT-CD[KS0MW-IXM];
      KS0MM001.KS0MM-DTL-DTY-RATE[KS0MW-IXM] = KS0MW01.KS0MW-DTL-DTY-RATE[KS0MW-IXM];
      if (KS0MW01.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-IXM] == " "
       && KS0MW01.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IXM] > " ")
        KS0MW01.KS0MW-HTS-CPTR-CD = KS0MW01.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IXM];
        KS0MW01.KS0MW-HTS-HDG-CD = KS0MW01.KS0MW-DTL-HTS-HDG-CD[KS0MW-IXM];
        KS0MW01.KS0MW-HTS-1ST-SHDG-CD = KS0MW01.KS0MW-DTL-HTS-1ST-SHDG-CD[KS0MW-IXM];
        KS0MW01.KS0MW-HTS-2ND-SHDG-CD = KS0MW01.KS0MW-DTL-HTS-2ND-SHDGCD1[KS0MW-IXM];
        KS0MW01.KS0MW-HTS-STAT-CD = KS0MW01.KS0MW-DTL-HTS-STAT-CD[KS0MW-IXM];
        KS0MW01.KS0MW-HTS-NUMBER = KS0MW01.KS0MW-HTS-NBR;
        KS0MW00.KS0MW-IX2 = 1; /* Initialize index*/
        while (KS0MW00.KS0MW-IX2 <= 14)
          if (KS0MW00.KS0MW-IX2 == 5 /* These 3 positions must be '.'*/
           || KS0MW00.KS0MW-IX2 == 8 
           || KS0MW00.KS0MW-IX2 == 13)
            if (KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX2] != ".")
              KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX2 + 1;
              if (KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX1] > " ")
                KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX2] = ".";
              end
            end
          end
          KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1; /* set index up by 1*/
        end
        ;
        KS0MM001.KS0MM-DTL-HTS-NBR[KS0MW-IXM] = KS0MW01.KS0MW-HTS-NUMBER;
        ;
      else
        if (KS0MW01.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-IXM] > " ")
          KS0MW00.KS0MW-HTS-CPTR = KS0MW01.KS0MW-DTL-HTS-CPTR-CD[KS0MW-IXM];
          KS0MW00.KS0MW-HTS-HDG = KS0MW01.KS0MW-DTL-HTS-HDG-CD[KS0MW-IXM];
          KS0MW00.KS0MW-HTS-1ST-SHDG = KS0MW01.KS0MW-DTL-HTS-1ST-SHDG-CD[KS0MW-IXM];
          KS0MW00.KS0MW-HTS-2ND-SHDG-1 = KS0MW01.KS0MW-DTL-HTS-2ND-SHDGCD1[KS0MW-IXM];
          KS0MW00.KS0MW-HTS-2ND-SHDG-2 = KS0MW01.KS0MW-DTL-HTS-2ND-SHDGCD2[KS0MW-IXM];
          KS0MW01.KS0MW-HTS-NUMBER = KS0MW00.KS0MW-HTS-NBR-WORK;
          ;
          KS0MW00.KS0MW-IX2 = 1; /* Initialize index*/
          while (KS0MW00.KS0MW-IX2 <= 14)
            if (KS0MW00.KS0MW-IX2 == 5 /* These 2 positions must be '.'*/
             || KS0MW00.KS0MW-IX2 == 8)
              if (KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX2] != ".")
                KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX2 + 1;
                if (KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX1] > " ")
                  KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX2] = ".";
                end
              end
            end
            if (KS0MW00.KS0MW-IX2 == 11)
              if (KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX2] != "-"
               || KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX2] != ",")
                KS0MW00.KS0MW-IX1 = KS0MW00.KS0MW-IX2 + 1;
                if (KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX1] > " "
                 && KS0MW01.KS0MW-DTL-HTS-RNG-FL[KS0MW-IXM] != "Y")
                  KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX2] = ",";
                else
                  KS0MW01.KS0MW-HTS-BYTE[KS0MW-IX2] = "-";
                end
              end
            end
            KS0MW00.KS0MW-IX2 = KS0MW00.KS0MW-IX2 + 1; /* set index up by 1*/
          end
          ;
          KS0MM001.KS0MM-DTL-HTS-NBR[KS0MW-IXM] = KS0MW01.KS0MW-HTS-NUMBER;
          ;
        end
        ;
      end
    end
    KS0MW00.KS0MW-IXM = KS0MW00.KS0MW-IXM + 1;
                                   /* Increment map index*/
  end
  ;
  ;
end // end KS0M-12100

// Read temporary storage page
Function KS0M-12110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW01.XXXTSLEN = KS0MW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0MW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-12110

// Update temporary storage page
Function KS0M-12120()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-12120

// Check attention identifier
Function KS0M-13000()
  /* -------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0MW00.KS0MW-SWR == "Y") /* Request for data*/
      set KS0MW01 empty; /* M001 display storage*/
    end
    ;
    KS0MW00.KS0MW-SWF = "Y"; /* Format the map switch*/
    KS0MW00.KS0MW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      KS0M-11100(); /* Purge temporary storage*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
      set KS0MM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0MM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "KS0A"; /* TO application*/
    end
    ;
    KS0M-11100(); /* Purge temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  /* ------------------------------------------------------------*/
  /* If search key changed, get new data*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW01.KS0MW-GPC-CD != KS0MM001.KS0MM-GPC-CD
   || KS0MW01.KS0MW-STY-NBR != KS0MM001.KS0MM-STY-NBR
   || KS0MW01.KS0MW-COLR-CD-ID != KS0MM001.KS0MM-COLR-CD-ID
   || KS0MW01.KS0MW-DIM-CD != KS0MM001.KS0MM-DIM-CD)
    KS0MW00.KS0MW-SWR = "Y"; /* Request for data switch*/
    return; /* return to previous process*/
  end
  ;
  ;
end // end KS0M-13000

// Reset highlighted fields
Function KS0M-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0MM001.KS0MM-BUS-UNIT-CD normal; /* Reset bus unit cd*/
  set KS0MM001.KS0MM-GPC-CD normal; /* Reset gpc*/
  set KS0MM001.KS0MM-STY-NBR normal; /* Reset style*/
  set KS0MM001.KS0MM-COLR-CD-ID normal; /* Reset color*/
  set KS0MM001.KS0MM-DIM-CD normal; /* Reset Dimension*/
  ;
  set KS0MM001.CATOAP initialAttributes; /* TO application*/
  set KS0MM001.CAITEM initialAttributes; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
  ;
              /* CHECK FOR USER ? CODE INQUIRY*/
  ;
     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/
  ;
     /* 2) Set map page after all windows displayed*/
  ;
   /* ------------------------------------------------------------*/
  ;
  if (KS0MM001.KS0MM-BUS-UNIT-CD == "?") /* if any ? entered*/
    ;
    if (KS0MM001.KS0MM-BUS-UNIT-CD == "?") /* if ? entered in gpc*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end
      ;
       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0MM001.KS0MM-BUS-UNIT-CD = XGPTBL.XGPCD[XX0XWPIX];
        KS0MM001.KS0MM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
        set KS0MM001.KS0MM-BUS-UNIT-CD cursor; /* put cursor on bus unit cd*/
        set KS0MM001.KS0MM-GPC-CD skip, invisible; /* darken gpc*/
      else
        KS0MM001.KS0MM-BUS-UNIT-CD = " "; /* clear fields*/
        set KS0MM001.KS0MM-BUS-UNIT-CD cursor; /* put cursor on bus unit cd*/
        set KS0MM001.KS0MM-GPC-CD skip, invisible; /* darken gpc*/
        KS0MM001.KS0MM-GPC-DESC = " "; /* clear description*/
      end
      ;
    end
    ;
    converseLib.clearScreen();
     /* restore the original map*/
    ;
    KS0MW00.KS0MW-SWR = "N"; /* no to request for data*/
    KS0MW00.KS0MW-SWF = "N"; /* no to format map*/
    ;
    exit stack; /* go display map*/
    ;
  end
  ;
  ;
end // end KS0M-14000

// Verify data that was entered
Function KS0M-15000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MM001.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "15000"; /* Module identification*/
    set KS0MM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If bus-unit = 'EQ' get gpc from vcprod02 table.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MM001.KS0MM-BUS-UNIT-CD == "EQ")
    KS0MW05.KS0MW-KS-BUS-UNIT-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
    KS0M-15010(); /* Call VCPROD02 select*/
    KS0M-15020(); /* Call VCPROD02 fetch*/
    KS0M-15030(); /* Call VCPROD02 close*/
    KS0MW05.KS0MW-GPC-CD = VCPROD02.XGPCD;
    KS0MW01.KS0MW-GPC-CD = KS0MW05.KS0MW-GPC-CD;
    KS0MM001.KS0MM-GPC-CD = KS0MW05.KS0MW-GPC-CD;
  else
    KS0MW05.KS0MW-KS-BUS-UNIT-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
    KS0MW01.KS0MW-GPC-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
    KS0MM001.KS0MM-GPC-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no header data entered, ask for it.*/
   /* ------------------------------------------------------------*/
  ;
  if (KS0MM001.KS0MM-BUS-UNIT-CD == " " /* bus unit is blank*/
   && KS0MM001.KS0MM-STY-NBR == " ")    /* and style is blank*/
    KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID;
    KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD; /* save dimension*/
    set KS0MM001 initial; /* clear screen*/
    KSWREC.XXXPRCNM = "15000"; /* Module identification*/
    set KS0MM001.KS0MM-BUS-UNIT-CD cursor, bold; /* cursor & hi-lite*/
    set KS0MM001.KS0MM-STY-NBR bold; /* hi-lite*/
    converseLib.validationFailed(150); /* gpc/style required*/
    KS0MM001.KS0MM-COLR-CD-ID = KS0MW01.KS0MW-COLR-CD-ID;
    KS0MM001.KS0MM-DIM-CD = KS0MW01.KS0MW-DIM-CD;
    exit stack; /* return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    KS0M-15100(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/
    ;
    KS0M-15200(); /* Verify data in the line*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0M-15000

// Call IO6130 select
Function KS0M-15010()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KS0M-15011(); /* Set wildcard values*/
  ;
  try
    call "VCPROD02" ("S1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15010"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-15010

// Set VCPROD02 wildcard values
Function KS0M-15011()
  /* ------------------------------------------------------------*/
  /* Set wildcard values for VCPROD02 call.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  set KSAREC empty; /* Clear row storage area*/
  ;
  if (KS0MM001.KS0MM-BUS-UNIT-CD == "EQ")
    VCPROD02.KS-BUS-UNIT-CD = "EQ"; /* Bus unit code*/
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
  end
  ;
  VCPROD02.SY1STNBR = KS0MM001.KS0MM-STY-NBR; /* Style*/
  VCPROD02.KS-XPRMT-STY-NBR = KS0MM001.KS0MM-STY-NBR; /* Style*/
  VCPROD02.SY2CLRID = "*"; /* Wildcard color*/
  VCPROD02.XDMCD = "*"; /* Wildcard dimension*/
  VCPROD02.XSNYR = -1; /* Season year range*/
  VCPROD02.XSECD = "*"; /* Season code*/
  VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
  VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  VCPROD02.KS-HTS-STAT-CD = "*";
  VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
  VCPROD02.KS-HTS-HDG-CD = "*";
  VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
  VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
  VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
  VCPROD02.KS-PRBM-NBR = -1;
  ;
end // end KS0M-15011

// Call VCPROD02 fetch
Function KS0M-15020()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("N1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15020"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-15020

// Call VCPROD02 close
Function KS0M-15030()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("C1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15030"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-15030

// Verify scroll request
Function KS0M-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0MW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0MW00.XXXTSPAG >= KS0MW00.TA5TSQIX) /* and no more pages*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end KS0M-15100

// Verify data in the line
Function KS0M-15200()
  /* ------------------------------------------------------------*/
  /* GPC code must be in GPC code table*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MM001.KS0MM-GPC-CD == " ") /* code is blank - flag edit*/
    KS0MW05.KS0MW-KS-BUS-UNIT-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
    KS0MW01.KS0MW-GPC-CD = KS0MM001.KS0MM-GPC-CD; /* Save map fields*/
    KS0MW01.KS0MW-STY-NBR = KS0MM001.KS0MM-STY-NBR;
    KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID;
    KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD;
    set KS0MM001 initial; /* clear screen*/
    KS0MM001.KS0MM-BUS-UNIT-CD = KS0MW05.KS0MW-KS-BUS-UNIT-CD;
    KS0MM001.KS0MM-GPC-CD = KS0MW01.KS0MW-GPC-CD;
    KS0MM001.KS0MM-STY-NBR = KS0MW01.KS0MW-STY-NBR;
    KS0MM001.KS0MM-COLR-CD-ID = KS0MW01.KS0MW-COLR-CD-ID;
    KS0MM001.KS0MM-DIM-CD = KS0MW01.KS0MW-DIM-CD;
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    set KS0MM001.KS0MM-GPC-DESC skip, invisible; /* darken desc*/
    if (KS0MW05.KS0MW-KS-BUS-UNIT-CD == "EQ")
      set KS0MM001.KS0MM-STY-NBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(67); /* style missing or invalid*/
    else
      set KS0MM001.KS0MM-BUS-UNIT-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(147); /* GPC code invalid*/
    end
    return;
    ;
  else
    if (KS0MM001.KS0MM-GPC-CD in XGPTBL.XGPCD) /* code in table*/
      ;
      if (KS0MM001.KS0MM-BUS-UNIT-CD == "EQ")
        KS0MM001.KS0MM-GPC-DESC = "EQUIPMENT";
      else
   /* get description*/
        if (KS0MM001.KS0MM-GPC-CD in XGPTBL.XGPCD)
          KS0MM001.KS0MM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        end
      end
      set KS0MM001.KS0MM-GPC-DESC skip;
      set KS0MM001.KS0MM-GPC-CD skip;
      if (KS0MM001.KS0MM-GPC-CD != "02"
       && KS0MM001.KS0MM-GPC-CD != "03")
        set KS0MM001.KS0MM-BUS-UNIT-CD cursor, bold; /* Highlight*/
        set KS0MM001.KS0MM-GPC-CD skip, invisible; /* darken gpc*/
        converseLib.validationFailed(157); /* GPC code invalid*/
        return;
      end
      ;
    else
      KS0MW05.KS0MW-KS-BUS-UNIT-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
      KS0MW01.KS0MW-GPC-CD = KS0MM001.KS0MM-GPC-CD; /* Save map fields*/
      KS0MW01.KS0MW-STY-NBR = KS0MM001.KS0MM-STY-NBR;
      KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID;
      KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD;
      set KS0MM001 initial; /* clear screen*/
      KS0MM001.KS0MM-BUS-UNIT-CD = KS0MW05.KS0MW-KS-BUS-UNIT-CD;
      KS0MM001.KS0MM-GPC-CD = KS0MW01.KS0MW-GPC-CD;
      KS0MM001.KS0MM-STY-NBR = KS0MW01.KS0MW-STY-NBR;
      KS0MM001.KS0MM-COLR-CD-ID = KS0MW01.KS0MW-COLR-CD-ID;
      KS0MM001.KS0MM-DIM-CD = KS0MW01.KS0MW-DIM-CD;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0MM001.KS0MM-BUS-UNIT-CD cursor, bold; /* Highlight*/
      set KS0MM001.KS0MM-GPC-CD skip, invisible; /* darken GPC*/
      set KS0MM001.KS0MM-GPC-DESC skip, invisible; /* darken desc*/
      converseLib.validationFailed(157); /* GPC code invalid*/
      return;
      ;
    end
    ;
  end
  /* ------------------------------------------------------------*/
  /* Verify the Style entered.*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW00.KS0MW-STYLE-FND = "N"; /* Initialize switch*/
  if (KS0MM001.KS0MM-STY-NBR > " ") /* If style entered*/
    ;
    set PG2REC empty; /* Clear record*/
    PG2REC.XGPCD = KS0MM001.KS0MM-GPC-CD; /* GPC code*/
    PG2REC.SY1STNBR = KS0MM001.KS0MM-STY-NBR; /* Style nbr*/
    KS0M-15201(); /* Select VSYCLR01 set*/
    KS0M-15202(); /* Fetch  VSYCLR01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
      KS0MW00.KS0MW-STYLE-FND = "Y";
    end
    ;
    KS0M-15203(); /* Close  VSYCLR01 set*/
    ;
    if (KS0MW00.KS0MW-STYLE-FND == "N") /* Style not found*/
      KS0M-15204(); /* Select VCPROD01 set*/
      KS0M-15205(); /* Fetch  VCPROD01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
        KS0MW-STYLE-FND = "Y"; /* Style found switch*/
      end
      KS0M-15206(); /* Close  VCPROD01 set*/
    end
    ;
    if (KS0MW00.KS0MW-STYLE-FND == "N") /* If style not found*/
      ;
      KS0MW05.KS0MW-KS-BUS-UNIT-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
      KS0MW01.KS0MW-GPC-CD = KS0MM001.KS0MM-GPC-CD; /* Save map fields*/
      KS0MW01.KS0MW-STY-NBR = KS0MM001.KS0MM-STY-NBR;
      KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID;
      KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD;
      set KS0MM001 initial; /* clear screen*/
      KS0MM001.KS0MM-BUS-UNIT-CD = KS0MW05.KS0MW-KS-BUS-UNIT-CD;
      KS0MM001.KS0MM-GPC-CD = KS0MW01.KS0MW-GPC-CD;
      KS0MM001.KS0MM-STY-NBR = KS0MW01.KS0MW-STY-NBR;
      KS0MM001.KS0MM-COLR-CD-ID = KS0MW01.KS0MW-COLR-CD-ID;
      KS0MM001.KS0MM-DIM-CD = KS0MW01.KS0MW-DIM-CD;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0MM001.KS0MM-STY-NBR cursor, bold; /* hi-lite*/
      set KS0MM001.KS0MM-GPC-CD skip, invisible; /* darken GPC*/
      converseLib.validationFailed(67); /* style missing or invalid*/
      return;
      ;
    end
  else
    KS0MW05.KS0MW-KS-BUS-UNIT-CD = KS0MM001.KS0MM-BUS-UNIT-CD;
    KS0MW01.KS0MW-GPC-CD = KS0MM001.KS0MM-GPC-CD; /* Save map fields*/
    KS0MW01.KS0MW-STY-NBR = KS0MM001.KS0MM-STY-NBR;
    KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID;
    KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD;
    set KS0MM001 initial; /* clear screen*/
    KS0MM001.KS0MM-BUS-UNIT-CD = KS0MW05.KS0MW-KS-BUS-UNIT-CD;
    KS0MM001.KS0MM-GPC-CD = KS0MW01.KS0MW-GPC-CD;
    KS0MM001.KS0MM-STY-NBR = KS0MW01.KS0MW-STY-NBR;
    KS0MM001.KS0MM-COLR-CD-ID = KS0MW01.KS0MW-COLR-CD-ID;
    KS0MM001.KS0MM-DIM-CD = KS0MW01.KS0MW-DIM-CD;
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    set KS0MM001.KS0MM-STY-NBR cursor, bold; /* Highlight*/
    set KS0MM001.KS0MM-GPC-CD skip, invisible; /* darken GPC*/
    converseLib.validationFailed(67); /* Style missing or invalid*/
    return;
    ;
  end
  ;
  ;
end // end KS0M-15200

// Select VSYCLR01 set
Function KS0M-15201()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15201"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-15201

// Fetch  VSYCLR01 row
Function KS0M-15202()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15202"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-15202

// Close  VSYCLR01 set
Function KS0M-15203()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("CS", SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15203"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-15203

// Select VCPROD01 set
Function KS0M-15204()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD01 empty; /* Clear row storage area*/
  ;
  VCPROD01.XGPCD = KS0MM001.KS0MM-GPC-CD; /* GPC*/
  VCPROD01.SY1STNBR = KS0MM001.KS0MM-STY-NBR; /* Style*/
  VCPROD01.KS-XPRMT-STY-NBR = KS0MM001.KS0MM-STY-NBR; /* Style*/
  ;
  VCPROD01.XSNYR = -1; /* Season year range*/
  VCPROD01.XSECD = "*"; /* Season code*/
  VCPROD01.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
  VCPROD01.YPR-PROD-STAT-CD = "*"; /* Status code*/
  VCPROD01.KS-RULE-NBR = "*"; /* Ruling number*/
  VCPROD01.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
  VCPROD01.KS-HTS-HDG-CD = "*";
  VCPROD01.KS-HTS-1ST-SHDG-CD = "*";
  VCPROD01.KS-HTS-2ND-SHDG-CD[1] = "*";
  VCPROD01.KS-HTS-STAT-CD = "*";
  VCPROD01.SY2CLRID = "*";
  VCPROD01.XDMCD = "*";
  ;
  try
    call "IO6130" ("S1", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15204"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD01.VCPROD01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-15204

// Fetch  VCPROD01 row
Function KS0M-15205()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6130" ("N1", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15205"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD01.VCPROD01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-15205

// Close  VCPROD01 set
Function KS0M-15206()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6130" ("C1", SQLCA, VCPROD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15206"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0M-15206

// Process valid input request
Function KS0M-16000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display*/
  /* ------------------------------------------------------------*/
  ;
  KS0MW00.KS0MW-SWF = "Y"; /* format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If search key changed, get new data*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0MW01.KS0MW-GPC-CD != KS0MM001.KS0MM-GPC-CD
   || KS0MW01.KS0MW-STY-NBR != KS0MM001.KS0MM-STY-NBR
   || KS0MW01.KS0MW-COLR-CD-ID != KS0MM001.KS0MM-COLR-CD-ID
   || KS0MW01.KS0MW-DIM-CD != KS0MM001.KS0MM-DIM-CD)
    KS0MW00.KS0MW-SWR = "Y"; /* request for data switch*/
    KS0MW00.XXXTSPAG = 0000; /* zero out temp storage*/
  /* move map input to working storage*/
    KS0MW01.KS0MW-GPC-CD = KS0MM001.KS0MM-GPC-CD;
    KS0MW01.KS0MW-STY-NBR = KS0MM001.KS0MM-STY-NBR;
    KS0MW01.KS0MW-COLR-CD-ID = KS0MM001.KS0MM-COLR-CD-ID;
    KS0MW01.KS0MW-DIM-CD = KS0MM001.KS0MM-DIM-CD;
    return;
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    KS0MW00.XXXTSPAG = KS0MW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    KS0MW00.XXXTSPAG = KS0MW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* enter pressed*/
    ;
    KS0MW00.KS0MW-SWF = "Y"; /* Format the map switch*/
  end
  ;
  ;
end // end KS0M-16000

//*** RECORD=KS0MW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0MW00 type basicRecord
  10 KS0MW-IXM KS0MW-IXM ; 
  10 KS0MW-IX1 KS0MW-IX1 ; 
  10 KS0MW-IX2 KS0MW-IX2 ; 
  10 KS0MW-IX3 KS0MW-IX3 ; 
  10 KS0MW-IX4 KS0MW-IX4 ; 
  10 KS0MW-IX5 KS0MW-IX5 ; 
  10 KS0MW-IXX KS0MW-IXX ; 
  10 KS0MW-SWC KS0MW-SWC ; 
  10 KS0MW-SWD KS0MW-SWD ; 
  10 KS0MW-SWF KS0MW-SWF ; 
  10 KS0MW-SWR KS0MW-SWR ; 
  10 KS0MW-SWU KS0MW-SWU ; 
  10 KS0MW-SFN KS0MW-SFN ; 
  10 KS0MW-COLOR-COMB KS0MW-COLOR-COMB ; 
  10 KS0MW-HS-FOUND KS0MW-HS-FOUND ; 
  10 KS0MW-COUNTER KS0MW-COUNTER ; 
  10 KS0MW-CHECK KS0MW-CHECK ; 
  10 KS0MW-EDIT-FLAG KS0MW-EDIT-FLAG ; 
  10 KS0MW-GPC-CD KS0MW-GPC-CD ; 
  10 KS0MW-GPC-DESC KS0MW-GPC-DESC ; 
  10 KS0MW-SESN-YR KS0MW-SESN-YR ; 
  10 KS0MW-YEAR-DESC-CHAR KS0MW-YEAR-DESC-CHAR ; 
  10 KS0MW-YEAR-DESC KS0MW-YEAR-DESC ; 
    15 KS0MW-YEAR-DESC-CC KS0MW-YEAR-DESC-CC ; 
    15 KS0MW-YEAR-DESC-YY KS0MW-YEAR-DESC-YY ; 
  10 KS0MW-SESN-CD KS0MW-SESN-CD ; 
  10 KS0MW-SESN-DESC KS0MW-SESN-DESC ; 
  10 KS0MW-SAVE-PAGE KS0MW-SAVE-PAGE ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KS0MW-FULLDATE KS0MW-FULLDATE ; 
    15 KS0MW-FULLCC KS0MW-FULLCC ; 
    15 KS0MW-FULLYY KS0MW-FULLYY ; 
    15 KS0MW-FULLMM KS0MW-FULLMM ; 
    15 KS0MW-FULLDD KS0MW-FULLDD ; 
  10 KS0MW-FORMDATE KS0MW-FORMDATE ; 
    15 KS0MW-FORMMM KS0MW-FORMMM ; 
    15 KS0MW-FORMDD KS0MW-FORMDD ; 
    15 KS0MW-FORMYY KS0MW-FORMYY ; 
  10 KS0MW-GEN-DTY-RATE KS0MW-GEN-DTY-RATE ; 
    15 KS0MW-RATE-BYTE KS0MW-RATE-BYTE [5] ; 
  10 KS0MW-GEN-DTY-UNT KS0MW-GEN-DTY-UNT ; 
    15 KS0MW-UNIT-BYTE KS0MW-UNIT-BYTE [5] ; 
  10 KS0MW-UOM-ABRV KS0MW-UOM-ABRV ; 
    15 KS0MW-UOM-BYTE KS0MW-UOM-BYTE [3] ; 
  10 KS0MW-FORMATTED-RATE KS0MW-FORMATTED-RATE ; 
    15 KS0MW-FORMAT-BYTE KS0MW-FORMAT-BYTE [21] ; 
  10 KS0MW-HTS-NBR-WORK KS0MW-HTS-NBR-WORK ; 
    15 KS0MW-HTS-CPTR KS0MW-HTS-CPTR ; 
    15 KS0MW-HTS-HDG KS0MW-HTS-HDG ; 
    15 * char(1) ; 
    15 KS0MW-HTS-1ST-SHDG KS0MW-HTS-1ST-SHDG ; 
    15 * char(1) ; 
    15 KS0MW-HTS-2ND-SHDG-1 KS0MW-HTS-2ND-SHDG-1 ; 
    15 * char(1) ; 
    15 KS0MW-HTS-2ND-SHDG-2 KS0MW-HTS-2ND-SHDG-2 ; 
    15 * char(1) ; 
  10 KS0MW-STYLE-FND KS0MW-STYLE-FND ; 
  10 KS0MW-DTL-LINE KS0MW-DTL-LINE ; 
end // end KS0MW00

//*** RECORD=KS0MW01 ****
// /*
// /*      application working storage for map1
// /*
// ***********************
Record KS0MW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1329) ; // Temporary storage page length
    10 KS0MW-GPC-CD KS0MW-GPC-CD ; 
    10 KS0MW-GPC-DESC KS0MW-GPC-DESC ; 
    10 KS0MW-STY-NBR KS0MW-STY-NBR ; 
    10 KS0MW-COLR-CD-ID KS0MW-COLR-CD-ID ; 
    10 KS0MW-DIM-CD KS0MW-DIM-CD ; 
    10 KS0MW-HTS-NBR KS0MW-HTS-NBR ; 
      15 KS0MW-HTS-CPTR-CD KS0MW-HTS-CPTR-CD ; 
      15 KS0MW-HTS-HDG-CD KS0MW-HTS-HDG-CD ; 
      15 * char(1) ; 
      15 KS0MW-HTS-1ST-SHDG-CD KS0MW-HTS-1ST-SHDG-CD ; 
      15 * char(1) ; 
      15 KS0MW-HTS-2ND-SHDG-CD KS0MW-HTS-2ND-SHDG-CD ; 
        20 KS0MW-HTS-2ND-SHDG1 KS0MW-HTS-2ND-SHDG1 ; 
        20 KS0MW-HTS-2ND-SHDG2 KS0MW-HTS-2ND-SHDG2 ; 
      15 KS0MW-HTS-STAT-CD KS0MW-HTS-STAT-CD ; 
      15 * char(1) ; 
      15 * char(1) ; 
    10 KS0MW-HTS-NUMBER KS0MW-HTS-NUMBER ; 
      15 KS0MW-HTS-BYTE KS0MW-HTS-BYTE [14] ; 
    10 KS0MW-DTL-LINE KS0MW-DTL-LINE [17] ; 
      15 KS0MW-DTL-GPC-CD KS0MW-DTL-GPC-CD ; 
      15 KS0MW-DTL-STY-NBR KS0MW-DTL-STY-NBR ; 
      15 KS0MW-DTL-COLR-CD-ID KS0MW-DTL-COLR-CD-ID ; 
      15 KS0MW-DTL-DIM-CD KS0MW-DTL-DIM-CD ; 
      15 KS0MW-DTL-XPRMT-STY-NBR KS0MW-DTL-XPRMT-STY-NBR ; 
      15 KS0MW-DTL-STY-TYP KS0MW-DTL-STY-TYP ; 
      15 KS0MW-DTL-HTS-CPTR-CD KS0MW-DTL-HTS-CPTR-CD ; 
      15 KS0MW-DTL-HTS-HDG-CD KS0MW-DTL-HTS-HDG-CD ; 
      15 KS0MW-DTL-HTS-1ST-SHDG-CD KS0MW-DTL-HTS-1ST-SHDG-CD ; 
      15 KS0MW-DTL-HTS-2ND-SHDGCD1 KS0MW-DTL-HTS-2ND-SHDGCD1 ; 
      15 KS0MW-DTL-HTS-2ND-SHDGCD2 KS0MW-DTL-HTS-2ND-SHDGCD2 ; 
      15 KS0MW-DTL-HTS-STAT-CD KS0MW-DTL-HTS-STAT-CD ; 
      15 * char(1) ; 
      15 KS0MW-DTL-HTS-RNG-FL KS0MW-DTL-HTS-RNG-FL ; 
      15 KS0MW-DTL-RULE-NBR KS0MW-DTL-RULE-NBR ; 
      15 KS0MW-DTL-PROD-STAT KS0MW-DTL-PROD-STAT ; 
      15 KS0MW-DTL-USERID KS0MW-DTL-USERID ; 
      15 KS0MW-DTL-CHNG-DT KS0MW-DTL-CHNG-DT ; 
      15 KS0MW-DTL-QOTA-CAT-CD KS0MW-DTL-QOTA-CAT-CD ; 
      15 KS0MW-DTL-DTY-RATE KS0MW-DTL-DTY-RATE ; 
end // end KS0MW01

//*** RECORD=KS0MW02 ****
// /*
// /*      application working storage for map1
// /*
// ***********************
Record KS0MW02 type basicRecord
  10 KS0MW-DTL-STY-GROUP KS0MW-DTL-STY-GROUP [60] ; 
    15 KS0MW-DTL-GPC-CD KS0MW-DTL-GPC-CD ; 
    15 KS0MW-DTL-STY-NBR KS0MW-DTL-STY-NBR ; 
    15 KS0MW-DTL-COLR-CD-ID KS0MW-DTL-COLR-CD-ID ; 
    15 KS0MW-DTL-DIM-CD KS0MW-DTL-DIM-CD ; 
    15 KS0MW-DTL-XPRMT-STY-NBR KS0MW-DTL-XPRMT-STY-NBR ; 
    15 KS0MW-DTL-STY-TYP KS0MW-DTL-STY-TYP ; 
    15 KS0MW-DTL-RANK-NBR KS0MW-DTL-RANK-NBR ; 
    15 KS0MW-DTL-ZZHHMMSS KS0MW-DTL-ZZHHMMSS ; 
    15 KS0MW-DTL-CHNG-DT KS0MW-DTL-CHNG-DT ; 
    15 KS0MW-DTL-HS-NBR-GROUP KS0MW-DTL-HS-NBR-GROUP ; 
end // end KS0MW02

//*** RECORD=KS0MW03 ****
// /*
// /*      application working storage for map1
// /*
// ***********************
Record KS0MW03 type basicRecord
  5 KS0MW-HS-GROUP KS0MW-HS-GROUP ; 
    10 KS0MW-HS-NBR-GROUP KS0MW-HS-NBR-GROUP [40] ; 
      15 KS0MW-COLR-CD-ID KS0MW-COLR-CD-ID ; 
      15 KS0MW-DTL-HTS-NBR KS0MW-DTL-HTS-NBR ; 
        20 KS0MW-DTL-HTS-CPTR-CD KS0MW-DTL-HTS-CPTR-CD ; 
        20 KS0MW-DTL-HTS-HDG-CD KS0MW-DTL-HTS-HDG-CD ; 
        20 KS0MW-DTL-HTS-1ST-SHDG-CD KS0MW-DTL-HTS-1ST-SHDG-CD ; 
        20 KS0MW-DTL-HTS-2ND-SHDGCD1 KS0MW-DTL-HTS-2ND-SHDGCD1 ; 
        20 KS0MW-DTL-HTS-2ND-SHDGCD2 KS0MW-DTL-HTS-2ND-SHDGCD2 ; 
        20 KS0MW-DTL-HTS-STAT-CD KS0MW-DTL-HTS-STAT-CD ; 
        20 * char(1) ; 
        20 KS0MW-DTL-HTS-RNG-FL KS0MW-DTL-HTS-RNG-FL ; 
      15 KS0MW-DTL-RULE-NBR KS0MW-DTL-RULE-NBR ; 
      15 KS0MW-DTL-PROD-STAT KS0MW-DTL-PROD-STAT ; 
      15 KS0MW-DTL-USERID KS0MW-DTL-USERID ; 
      15 KS0MW-DTL-CHNG-DT KS0MW-DTL-CHNG-DT ; 
      15 KS0MW-DTL-QOTA-CAT-CD KS0MW-DTL-QOTA-CAT-CD ; 
      15 KS0MW-DTL-DTY-RATE KS0MW-DTL-DTY-RATE ; 
end // end KS0MW03

//*** RECORD=KS0MW04 ****
// /*
// /*      application working storage for map1
// /*
// ***********************
Record KS0MW04 type basicRecord
  5 KS0MW-HS-GROUP KS0MW-HS-GROUP ; 
    10 KS0MW-HS-NBR-GROUP KS0MW-HS-NBR-GROUP [40] ; 
      15 KS0MW-COLR-CD-ID KS0MW-COLR-CD-ID ; 
      15 KS0MW-DTL-HTS-CPTR-CD KS0MW-DTL-HTS-CPTR-CD ; 
      15 KS0MW-DTL-HTS-HDG-CD KS0MW-DTL-HTS-HDG-CD ; 
      15 KS0MW-DTL-HTS-1ST-SHDG-CD KS0MW-DTL-HTS-1ST-SHDG-CD ; 
      15 KS0MW-DTL-HTS-2ND-SHDGCD1 KS0MW-DTL-HTS-2ND-SHDGCD1 ; 
      15 KS0MW-DTL-HTS-2ND-SHDGCD2 KS0MW-DTL-HTS-2ND-SHDGCD2 ; 
      15 KS0MW-DTL-HTS-STAT-CD KS0MW-DTL-HTS-STAT-CD ; 
      15 * char(1) ; 
      15 KS0MW-DTL-HTS-RNG-FL KS0MW-DTL-HTS-RNG-FL ; 
      15 KS0MW-DTL-RULE-NBR KS0MW-DTL-RULE-NBR ; 
      15 KS0MW-DTL-PROD-STAT KS0MW-DTL-PROD-STAT ; 
      15 KS0MW-DTL-USERID KS0MW-DTL-USERID ; 
      15 KS0MW-DTL-CHNG-DT KS0MW-DTL-CHNG-DT ; 
      15 KS0MW-DTL-QOTA-CAT-CD KS0MW-DTL-QOTA-CAT-CD ; 
      15 KS0MW-DTL-DTY-RATE KS0MW-DTL-DTY-RATE ; 
  5 KS0MW-COMP1-GROUP KS0MW-COMP1-GROUP ; 
    10 KS0MW-COMP1 KS0MW-COMP1 [10] ; 
  5 KS0MW-COMP2-GROUP KS0MW-COMP2-GROUP ; 
    10 KS0MW-COMP2 KS0MW-COMP2 [10] ; 
end // end KS0MW04

Record KS0MW05 type basicRecord
  10 KS0MW-GPC-CD KS0MW-GPC-CD ; 
  10 KS0MW-KS-BUS-UNIT-CD KS0MW-KS-BUS-UNIT-CD ; 
end // end KS0MW05

// Working storage Check number
DataItem KS0MW-CHECK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color combined switch
DataItem KS0MW-COLOR-COMB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COLOR CODE ID
DataItem KS0MW-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-COMP1 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Compare group 1
DataItem KS0MW-COMP1-GROUP char(140)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-COMP2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Compare group 2
DataItem KS0MW-COMP2-GROUP char(140)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage counter
DataItem KS0MW-COUNTER num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DIMENSION CODE
DataItem KS0MW-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRODUCT CHANGE DATE
DataItem KS0MW-DTL-CHNG-DT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// COLOR CD ID
DataItem KS0MW-DTL-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DIMENSION CODE
DataItem KS0MW-DTL-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GENERAL DUTY RATE
DataItem KS0MW-DTL-DTY-RATE char(12)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// GPC CODE
DataItem KS0MW-DTL-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-DTL-HS-NBR-GROUP char(2240)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 1ST SUBHEADING CODE
DataItem KS0MW-DTL-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 2ND SUBHEADING CODE1
DataItem KS0MW-DTL-HTS-2ND-SHDGCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 2ND SUBHEADING CODE2
DataItem KS0MW-DTL-HTS-2ND-SHDGCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS CHAPTER CODE
DataItem KS0MW-DTL-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS HEADING CODE
DataItem KS0MW-DTL-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS NBR
DataItem KS0MW-DTL-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS RANGE FLAG
DataItem KS0MW-DTL-HTS-RNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS STAT CODE
DataItem KS0MW-DTL-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level
DataItem KS0MW-DTL-LINE char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRODUCT STATUS CODE
DataItem KS0MW-DTL-PROD-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// QUOTA CAT CODE
DataItem KS0MW-DTL-QOTA-CAT-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RANK NBR
DataItem KS0MW-DTL-RANK-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BINDING RULING NBR
DataItem KS0MW-DTL-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-DTL-STY-GROUP char(2272)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STYLE NUMBER
DataItem KS0MW-DTL-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STYLE TYPE CODE
DataItem KS0MW-DTL-STY-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CHANGE USERID
DataItem KS0MW-DTL-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXPERIMENTAL STYLE NBR
DataItem KS0MW-DTL-XPRMT-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SETUP TIME
DataItem KS0MW-DTL-ZZHHMMSS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Edit Flag
DataItem KS0MW-EDIT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Each byte of formatted rate
DataItem KS0MW-FORMAT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Formatted gen dty rt,unit,uom
DataItem KS0MW-FORMATTED-RATE char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format Date
DataItem KS0MW-FORMDATE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format Date dd
DataItem KS0MW-FORMDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format Date mm
DataItem KS0MW-FORMMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format Date yy
DataItem KS0MW-FORMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date cc
DataItem KS0MW-FULLCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date
DataItem KS0MW-FULLDATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date dd
DataItem KS0MW-FULLDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date mm
DataItem KS0MW-FULLMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date yy
DataItem KS0MW-FULLYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// General duty rate
DataItem KS0MW-GEN-DTY-RATE num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General duty unit
DataItem KS0MW-GEN-DTY-UNT num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GPC CODE
DataItem KS0MW-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC DESCRIPTION
DataItem KS0MW-GPC-DESC char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS Nbr Found switch
DataItem KS0MW-HS-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS group from W02
DataItem KS0MW-HS-GROUP char(2240)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS nbr group
DataItem KS0MW-HS-NBR-GROUP char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-1ST-SHDG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-2ND-SHDG-1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-2ND-SHDG-2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-2ND-SHDG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-2ND-SHDG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-CPTR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-HDG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-NBR-WORK char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS NUMBER WORK
DataItem KS0MW-HTS-NUMBER char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0MW-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0MW-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0MW-IX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0MW-IX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0MW-IX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0MW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0MW-IXX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0MW-KS-BUS-UNIT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Each byte of general duty rate
DataItem KS0MW-RATE-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page save field
DataItem KS0MW-SAVE-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SEASON CODE
DataItem KS0MW-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON CODE DESCRIPTION - HDR
DataItem KS0MW-SESN-DESC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEAR
DataItem KS0MW-SESN-YR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// function switch
DataItem KS0MW-SFN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STYLE NUMBER
DataItem KS0MW-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style found switch
DataItem KS0MW-STYLE-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KS0MW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem KS0MW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KS0MW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0MW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0MW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Each byte of general duty unit
DataItem KS0MW-UNIT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Unit of measure
DataItem KS0MW-UOM-ABRV char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Each byte of unit of measure
DataItem KS0MW-UOM-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEARdescription
DataItem KS0MW-YEAR-DESC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEAR description cc
DataItem KS0MW-YEAR-DESC-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEAR description char
DataItem KS0MW-YEAR-DESC-CHAR char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEAR description yy
DataItem KS0MW-YEAR-DESC-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

