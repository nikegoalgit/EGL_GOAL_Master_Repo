package ks0i;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPKS-00001;
import corpcom3.XPXCT01;
import corpcom3.XPXDR01;
import corpcom3.XPXDV02;
import corpcom3.XPXGP01;
import corpcom3.XPXSE01;
import corpcom3.XPXSU01;
import corpcom3.XPXX001;
import corpcom3.XPYKP01;
import corpcom3.XPYKS01;
import corpcom3.XPYPR01;
import corpcom3.XPYQT01;
import corpcom4.XSKS-S0001;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XDMTBL;
import corpx1.XDRTBL;
import corpx1.XDVTBL;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XMCTBL;
import corpx1.XMLTBL;
import corpx1.XPCTBL;
import corpx1.XSETBL;
import corpx1.XSPTBL;
import corpx1.XSUTBL;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpx2.XSUCD;
import corpx2.XXXUSRID;
import corpy2.YKPTBL;
import corpy2.YKS-STY-TYP-CD;
import corpy2.YKSTBL;
import corpy2.YPR-PROD-STAT-CD;
import corpy2.YPRTBL;
import corpy2.YQTTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fy.common.FY3REC;
import ks.common.*;
import pc.common.PC6REC;
import pc.common.PCYREC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import sy.common.SY2CLRDS;
import sy.common.SY2CLRID;
import sy.common.SYNCTPGN;
import sy.common.SYNREC;
import sy.common.SYRTBL;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VBDRUL01;
import vv.common.VCPROB01;
import vv.common.VCPROD02;
import vv.common.VCTEAM01;
import vv.common.VHSCHP01;
import vv.common.VHSHDG01;
import vv.common.VHSNBR01;
import vv.common.VHSSHD01;
import vv.common.VKSAUD01;
import vv.common.VKSCTL01;
import vv.common.VKSFNT01;
import vv.common.VKSORD01;
import vv.common.VKSTXT01;
//*** PROGRAM=KS0I ****
// This program will display a list of Customs Product Master
// information given user entered parameters.  The user is
// required to enter at least the GPC/STYLE or GPC/SESN/YR
// combination to select a set of data.  Once the minimum
// amount of selection keys are entered, the user can limit the
// list even more by entering ORIGIN COUNTRY, HS NUMBER,
// BINDING RULING, TEAM NUMBER, PROBLEM CODE, or CUSTOMS
// PRODUCT STATUS.
// 
// Rows on this screen will display in Style order (IBM style
// or Experimental Style Number).  In most cases, all color
// rows for a particular style will be seen as one row with a
// color of '***'.  Only in cases where a color results in a
// different HS Number or Fabric description will a color be
// separated away from the group.
// 
// From the list screen, users are able to select rows for
// maintenance (PF14), add new rows (PF13), duplicate existing
// rows (PF15), select rows to inquire on problems (PF17), or
// select and go directly to HS Assignment application KS0J
// (PF16).
// 
// For maintenance, add, and duplicaiton, there exists three
// screens for entry of data.  The most important and all
// required information for a customs product exists on Map 2.
// Map 3 is available if the user needs to assign problem codes
// for a product.  Map 4 is where the user would enter the
// product description or any comments associated with this
// product.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/20/91  DHUFFM  New application.
// 000      04/15/92  DHUFFM  Move user id to VKSAUD01 table.
// C010     04/22/92  DHUFFM  Add option to exclude style
//                            development product codes.
// C014     05/13/92  bantho  chg 'problems' to 'features' on
//                            all maps.
// 000      05/14/92  bantho  re-align ks0im002 fields.
// 000      06/18/92  DHUFFM  Fix update of ZZ-SDT.
// C019     07/15/92  DHUFFM  Change style titles on map 2.
// C017     07/15/92  DHUFFM  Provide ability to list products
//                            by Quota Category Code.
// C020     07/21/92  CEPPLE  When selection made for apparel
//                            without using sesn/yr, then for-
//                            mat short desc in dtl differently
//                            on map 1.
// 000      08/06/92  CEPPLE  Wildcard color and dim for IO6130
//                            'S1' and 'S2'.
// C043     09/09/92  SMARIE  Reset type desc to spaces in
//                            working storage before look-up.
// 000      09/30/92  DHUFFM  Fix ftwr pre-class system testing
//                            bugs.
// 000      10/12/92  DHUFFM  Provide ability for footwear to
//                            over-ride silhouette code.
// 000      10/19/92  SMARIE  Fix transfer back not obtaining
//                            the list.
// 000      10/26/92  SMARIE  Fix HS Number format checking.
//                            Add checks for mutually exclusive
//                            feature codes.
// 000      10/27/92  SMARIE  Add new selects to work like KS0L
// 000      10/28/92  SMARIE  Limit to 350 pages built in WS.
// 000      11/03/92  SMARIE  Fix cursor positioning to check
//                            previous pages.
// 000      11/05/92  SMARIE  Add logic to use STY-NBR select
//                            if valid style entered.  Add the
//                            ability for ftwr to use binding
//                            ruling xref on map 1 only.
// 000      11/09/92  SMARIE  Change to make SESN-YR on map a
//                            charachter field so can display
//                            zeros and chose by year 2000.
// 000      11/23/92  SMARIE  Change display of map 1 to show
//                            Last POIDT for item if GPC is 02
//                            and status is DS.
// C066     12/07/92  DHUFFM  Change HS Number format - remove
//                            suffix id.
// C039     12/09/92  SMARIE  Add XDVCD to selection criteria.
// C000     12/30/92  KKYLE   Add exp. style nbr edit (gpc 02),
//                            fix 'quota' bug.
// C068     01/05/93  SMARIE  Add Sty-Typ to selection criteria
// C000     02/01/93  CEPPLE  change sesn yr check to verify
//                            that season year is gt 65 when
//                            setting century to 19. (was 90).
// C070     02/09/93  DHUFFM  Chg to include 'DS' status.
// C074     02/10/93  DHUFFM  Chg style field to 6 chars.
// C078     02/11/93  DHUFFM  Chg to display warning when an
//                            inactive HS number is entered.
// C077     02/11/93  DHUFFM  Chg H.S. Nbr display/update.
// C000     03/24/93  DHUFFM  Add KS-HTS-RNG-FL to VKSAUD01.
// C000     04/15/93  DHUFFM  Chg to only get current date/time
//                            once per style change.
// C000     05/12/93  DHUFFM  Fix copy from color flag error.
// C000     09/14/93  jricha  fixed it so factory codes appear
//                            on screen 2 if selected from
//                            any page except the first page
//                            on screen 1. ks0i-11339 process.
// C000     09/20/93  KKYLE   MODS FOR 4.1 CONVERSION
// C000     10/01/93  KKYLE   MORE 4.1 CONVERSION MODS
// C092     10/11/93  CEPPLE  Correct KS0I footwear duplication
//                            bug.  Not assigning new ks-prbm-
//                            nbr to duplicated product.
// C095     01/21/94  DHUFFM  Correct KS0I ftwr selection bug.
// C096     02/10/94  DHUFFM  Chg to set status to 'ds' if
//                            'sd' and binding ruling assigned.
// k103     10/06/94  SLEWIS  change status of 'sd' not allowed
// k103     11/15/94  SLEWIS  ADD CVS SCREENS
// ks097    05/25/95  DHUFFM  Chg to add Marketing Region to
//                            application.
// ks110    08/28/95  eraymo  Increased prod-desc array to
//                            occurs 12 from occurs 6
// ks110    09/29/95  eraymo  Increased save-text array to
//                            occurs 30 from occurs 15
// ks110    10/05/95  eraymo  chg to display first 3 lines of
//                            fbrc desc from display first 2
//                            lines and last line
// ks110    10/24/95  eraymo  add scrolling of fbrc desc with
//                            pf keys w/appropriate err msgs
// ks110    10/31/95  eraymo  added more scrolling and editing
//                            functionality to fbrc desc
// ks110    11/14/95  eraymo  enhanced insert line function
//                            for fbrc desc
//           2/12/96  eraymo  increased length of qota-cat-cd
//                            from 3 to 7
// fix       3/26/96  eraymo  fixed to allow 1 clr of a style
//                            to have a separate fbrc desc
// ks417     1/30/97  eraymo  set ctry fields to read-only,
//                            show factory info for aprl.
// ks1082   05/14/97  rtangi  changed the max pages from 350 to
//                            100,corrected some invalid moves.
//          07/14/97  rcorle  mod for equipment
//          08/05/97  rtangi  message table changes for 'BU'
//          08/07/97  rtangi  Equipment mods
//          08/27/97  rtangi  New messages for 'BU'
//          09/05/97  rtangi  Factory code changes
//          10/01/97  rtangi  Roll up problems on map1
// ks####   10/07/97  SMANN2  Footwear Equipment changes for
//                            displaying fabric description.
// y2kproj  12-12-97  oricha  y2k modifications:  changed m002
//                            sesn-yr-rng to character field;
//                            year evaluation logic change in
//                            ks0i-46000, 25200.
// KS00118  08-12-98  VKUMAR  modified to ignore CO flag
//                            while updating hts no, if CO
//                            flag changes for multiple
//                            colors.
// KS0000   03-08-99  VKUMAR  modified SESN/YR as mandatory
//                            fields for equipments.KS0I-11500
// KS0000   09-29-99  VKUMAR  When User deletes a record from
//                            the product master, inserted the
//                            record in the Audit database with
//                            rank-nbr 0.
// KS0000   11-23-99  VKUMAR  Fixed the problem with styles
//                            having more than 30 colors.
// KS#00    02/29/00  vkumar  Populated the ZZ fields when
//                            updating the Feature code table.
//                            Also updated the change date in
//                            crpod02 whenever feature code is
//                            changed.
// KS#00    04/12/00  vkumar  Added PF21 for footwear.
// KS#000   05/02/00  VKUMAR  modified SESN/YR as optional
//                            fields for equipments.KS0I-11500
// KS#000   08/18/00  VKUMAR  When a sub row is deleted from
//                            customs product master, changed
//                            the appln to update the change
//                            date of the parent product.
// KS#000   09/06/00  vkumar  Included price % for apparel
// KS#000   10/25/00  VKUMAR  Modified to accept 100% and made
//                            price% field mandatory
// *********************
Program KS0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY3REC FY3REC; // record
  KS0IW00 KS0IW00; // record
  KS0IW01 KS0IW01; // record
  KS0IW02 KS0IW02; // record
  KS0IW03 KS0IW03; // record
  KS0IW04 KS0IW04; // record
  KS0IW05 KS0IW05; // record
  KSAREC KSAREC; // record
  KSWREC KSWREC; // record
  PC6REC PC6REC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  SYNREC SYNREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VBDRUL01 VBDRUL01; // record
  VCPROB01 VCPROB01; // record
  VCPROD02 VCPROD02; // record
  VCPROD03 VCPROD03; // record
  VCTEAM01 VCTEAM01; // record
  VHSCHP01 VHSCHP01; // record
  VHSHDG01 VHSHDG01; // record
  VHSNBR01 VHSNBR01; // record
  VHSSHD01 VHSSHD01; // record
  VKSAUD01 VKSAUD01; // record
  VKSCTL01 VKSCTL01; // record
  VKSFNT01 VKSFNT01; // record
  VKSORD01 VKSORD01; // record
  VKSTXT01 VKSTXT01; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SYRTBL {deleteAfterUse = yes}; // table
  use XDRTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XMLTBL {deleteAfterUse = yes}; // table
  use XMCTBL {deleteAfterUse = yes}; // table
  use YKPTBL {deleteAfterUse = yes}; // table
  use YKSTBL {deleteAfterUse = yes}; // table
  use YPRTBL {deleteAfterUse = yes}; // table
  use YQTTBL {deleteAfterUse = yes}; // table
  use KS0IM.KS0IM001,  // forms
      KS0IM.KS0IM002, 
      KS0IM.KS0IM003, 
      KS0IM.KS0IM004, 
      KS0IM.KS0IM005, 
      KS0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0IM001 initial; /* M001 input/output*/
    set KS0IM002 initial; /* M002 input/output*/
    set KS0IM003 initial; /* M003 input/output*/
    set KS0IM004 initial; /* M004 input/output*/
    set KS0IM005 initial; /* M005 input/output*/
    set KS0IW00 empty; /* Working storage*/
    set KS0IW01 empty; /* M001 display storage*/
    set KS0IW02 empty; /* M002 display storage*/
    set KS0IW03 empty; /* M003 display storage*/
    set KS0IW04 empty; /* M004 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set VCPROD02 empty; /* Product Master record*/
    set VCPROB01 empty; /* Problem record*/
    set VHSCHP01 empty; /* HS chapter record*/
    set VHSHDG01 empty; /* HS heading record*/
    set VHSSHD01 empty; /* HS subheading record*/
    set VHSNBR01 empty; /* HS number record*/
    set VCTEAM01 empty; /* Team record*/
    set VKSTXT01 empty; /* Text record*/
    set VKSCTL01 empty; /* Control table record*/
    set VKSAUD01 empty; /* Audit table record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    KS0IW00.KS0IW-MAX-PAGES = 100; /* Set maximum pages to format*/
    ;
    if (COMMAREA.CAFROMAP == "KS0J") /* If transfer from KS0J*/
      KS0IW00.KS0IW-SWD = "2"; /* Map to be displayed switch*/
      KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
      KS0IW00.KS0IW-CTL-FLD = KSWREC.KSW-CTL-FLD;
      KSWREC.KSW-CTL-FLD = " ";
      if (KS0IW00.KS0IW-SAV > 0)
        KS0IW00.KS0IW-SAV = KS0IW00.KS0IW-SAV - 1;
      else
        KS0IW00.KS0IW-SAV = 0;
      end
      if (KS0IW00.KS0IW-FNC == "C")
        KS0IW00.KS0IW-SAVE-FNC = "C";
        KS0IW00.KS0IW-FNC = "C";
      else
        if (KS0IW00.KS0IW-FNC == "A")
          KS0IW00.KS0IW-SAVE-FNC = "A";
          KS0IW00.KS0IW-FNC = "C";
        else
          if (KS0IW00.KS0IW-FNC == "D")
            KS0IW00.KS0IW-SAVE-FNC = "D";
            KS0IW00.KS0IW-FNC = "C";
          end
        end
      end
      if (KS0IW00.KS0IW-SAVE-PAGE < 1)
        KS0IW00.KS0IW-SAVE-PAGE = 1;
        KS0IW00.XXXTSPAG = KS0IW00.KS0IW-SAVE-PAGE;
      else
        KS0IW00.XXXTSPAG = KS0IW00.KS0IW-SAVE-PAGE;
      end
    else
      if (COMMAREA.CAFROMAP == "KS0K" /* If transfer from KS0k*/
       && KSWREC.KSW-CTL-FLD > " ")   /* and control field exists*/
        KS0IW00.KS0IW-SWD = "2"; /* Map to be displayed switch*/
        KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
        KS0IW00.KS0IW-CTL-FLD = KSWREC.KSW-CTL-FLD;
        KSWREC.KSW-CTL-FLD = " ";
        if (KS0IW00.KS0IW-SAV > 0)
          KS0IW00.KS0IW-SAV = KS0IW00.KS0IW-SAV - 1;
        else
          KS0IW00.KS0IW-SAV = 0;
        end
        if (KS0IW00.KS0IW-FNC == "C")
          KS0IW00.KS0IW-SAVE-FNC = "C";
          KS0IW00.KS0IW-FNC = "C";
        else
          if (KS0IW00.KS0IW-FNC == "D")
            KS0IW00.KS0IW-SAVE-FNC = "D";
            KS0IW00.KS0IW-FNC = "C";
          else
            if (KS0IW00.KS0IW-FNC == "I")
              KS0IW00.KS0IW-SAVE-FNC = "I";
              KS0IW00.KS0IW-FNC = "I";
            end
          end
        end
        if (KS0IW00.KS0IW-SAVE-PAGE < 1)
          KS0IW00.KS0IW-SAVE-PAGE = 1;
          KS0IW00.XXXTSPAG = KS0IW00.KS0IW-SAVE-PAGE;
        else
          KS0IW00.XXXTSPAG = KS0IW00.KS0IW-SAVE-PAGE;
        end
      else
        if (COMMAREA.CAFROMAP == "KS0P" /* If transfer from KS0k*/
         && KSWREC.KSW-CTL-FLD > " ")   /* and control field exists*/
          KS0IW00.KS0IW-SWD = "2"; /* Map to be displayed switch*/
          KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
          KS0IW00.KS0IW-CTL-FLD = KSWREC.KSW-CTL-FLD;
          KSWREC.KSW-CTL-FLD = " ";
          if (KS0IW00.KS0IW-SAV > 0)
            KS0IW00.KS0IW-SAV = KS0IW00.KS0IW-SAV - 1;
          else
            KS0IW00.KS0IW-SAV = 0;
          end
          if (KS0IW00.KS0IW-FNC == "C")
            KS0IW00.KS0IW-SAVE-FNC = "C";
            KS0IW00.KS0IW-FNC = "C";
          else
            if (KS0IW00.KS0IW-FNC == "I")
              KS0IW00.KS0IW-SAVE-FNC = "I";
              KS0IW00.KS0IW-FNC = "I";
            end
          end
          ;
          if (KS0IW00.KS0IW-SAVE-PAGE < 1)
            KS0IW00.KS0IW-SAVE-PAGE = 1;
            KS0IW00.XXXTSPAG = KS0IW00.KS0IW-SAVE-PAGE;
          else
            KS0IW00.XXXTSPAG = KS0IW00.KS0IW-SAVE-PAGE;
          end
          ;
        else
          KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
          KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
        end
      end
    end
    ;
    KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
    KS0IW00.KS0IW-CPY-CLR-IN-PROCESS = "N"; /* Copy from color switch*/
    ;
    /* ------------------------------------------------------------*/
    /* If data was passed in the COMMAREA, use as the initial key.*/
    /* ------------------------------------------------------------*/
    ;
    if (COMMAREA.CAITEM > " ") /* Data was passed*/
      ;
      KS0IM001.KS0IM-BUS-UNIT-CD = COMMAREA.XGPCD; /* GPC code*/
      KS0IM001.KS0IM-MAP1-STY-NBR = COMMAREA.CAITEM; /* Style code*/
      ;
      COMMAREA.CAITEM = " "; /* Clear passed data*/
      ;
      KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
      ;
    else
      ;
      KS0IW01.KS0IW-GPC = COMMAREA.XGPCD; /* GPC code*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0I-00000; /* Converse the main process*/
    ;
    ;
    KS0I-00000: KS0I-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0I-00000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end KS0I

// Main process to display a map
Function KS0I-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) If specified, display the first map.*/
  /* 2) Otherwise, if specified, display the second map.*/
  /* 3) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SWD == "1") /* Map 1 was requested*/
    ;
    KS0I-10000(); /* Display map 1*/
    ;
  else
    ;
    if (KS0IW00.KS0IW-SWD == "2") /* Map 2 was requested*/
      ;
      if (KS0IW00.KS0IW-FNC == "D" /* If duplicate requested*/
       || KS0IW00.KS0IW-FNC == "A") /* or add requested*/
        ;
        KS0I-20000(); /* Display map 2 add/dup*/
        ;
      else
        ;
        if (KS0IW00.KS0IW-FNC == "I" /* If inquiry requested*/
         || KS0IW00.KS0IW-FNC == "C" /* or change requested*/
         || KS0IW00.KS0IW-FNC == "X" /* or delete requested*/
         || KS0IW00.KS0IW-FNC == "P") /* or problem requested*/
          ;
          KS0I-30000(); /* Display map 2 inq/chg*/
          ;
        end
      end
      ;
    else
      ;
      if (KS0IW00.KS0IW-SWD == "3") /* Map 3 was requested*/
        ;
        KS0I-40000(); /* Display map 3*/
        ;
      else
        ;
        if (KS0IW00.KS0IW-SWD == "4") /* Map 4 was requested*/
          ;
          KS0I-50000(); /* Display map 4*/
          ;
        else
          ;
          if (KS0IW00.KS0IW-SWD == "5") /* Map 5 was requested*/
            ;
            KS0I-60000(); /* Display map 5*/
            ;
          else
            ;
      /* ------------------------------------------------------------*/
      /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
            ;
            KSWREC.XXXPRCNM = "00000"; /* Module identification*/
            KSWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
            ;
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "APPL"; /* Type of error*/
            TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
            TA1REC.TA1MAPNO = KS0IW00.KS0IW-SWD; /* Map number*/
            TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
                                   /* Program application*/
            TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
            ;
            call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
            ;
      /* ------------------------------------------------------------*/
      /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
            ;
            COMMAREA.CATOAP = "KS0A"; /* TO application*/
            ;
            XSKS-S0001(); /* Exit to another application*/
            ;
      /* ------------------------------------------------------------*/
      /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
            ;
            TA1REC.TA1FUNC = "ABND"; /* Termination function*/
            ;
            call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
            ;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end KS0I-00000

// List the rows in the table
Function KS0I-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-11000(); /* Obtain the data to display*/
  ;
  KS0I-12000(); /* Format and display the map*/
  ;
  KS0I-13000(); /* Check attention identifier*/
  ;
  KS0I-14000(); /* Reset fields to normal intensity*/
  ;
  KS0I-15000(); /* Verify the entered data*/
  ;
  KS0I-16000(); /* Process valid input request*/
  ;
  ;
end // end KS0I-10000

// Obtain the data to display
Function KS0I-11000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.XXXTSLEN = 3881; /* Temporary storage page length*/
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO == 0) /* No message to display*/
    KS0IW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage and save key fields.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-11100(); /* Purge any temporary storage*/
  ;
  KS0IW01.KS0IW-GPC = KS0IM001.KS0IM-BUS-UNIT-CD; /* GPC code*/
  KS0IW01.KS0IW-GPC-DESC = KS0IM001.KS0IM-GPC-DESC;
  KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR; /* Style number*/
  KS0IW01.KS0IW-COLR-CD-ID = KS0IM001.KS0IM-COLR-CD-ID; /* Color cd*/
  KS0IW01.KS0IW-DIM-CD = KS0IM001.KS0IM-DIM-CD; /* Dimension code*/
  KS0IW01.KS0IW-SESN-CD = KS0IM001.KS0IM-SESN-CD; /* Season code*/
  if (KS0IM001.KS0IM-SESN-YR-RNG >= "00" /* if sesn-yr entered*/
   && KS0IM001.KS0IM-SESN-YR-RNG <= "99")
    KS0IW01.KS0IW-SESN-YY = KS0IM001.KS0IM-SESN-YR-RNG; /* Season year*/
    if (KS0IM001.KS0IM-SESN-YR-RNG > "65")
      KS0IW01.KS0IW-SESN-CENT = "19";
    else
      KS0IW01.KS0IW-SESN-CENT = "20";
    end
  else
    KS0IW01.KS0IW-SESN-YR = " "; /* Season year*/
  end
  KS0IW01.KS0IW-PRDCTN-YR = KS0IM001.KS0IM-PRDCTN-YR; /* PO ID year*/
  KS0IW01.KS0IW-PRDCTN-MO = KS0IM001.KS0IM-PRDCTN-MO; /* PO ID mo*/
  KS0IW01.KS0IW-DLVR-MO = KS0IM001.KS0IM-DLVR-MO; /* PO ID mo*/
  KS0IW01.KS0IW-FCTY-CD = KS0IM001.KS0IM-FCTY-CD; /* Factory code*/
  KS0IW01.KS0IW-ORIG-CD = KS0IM001.KS0IM-ORIG-CD; /* Origin code*/
  KS0IW01.KS0IW-US-MADE-FLAG = KS0IM001.KS0IM-US-MADE-FLAG;
  KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR; /* HS number*/
  KS0IW01.KS0IW-RULE-NBR-MAP = KS0IM001.KS0IM-RULE-NBR; /* Ruling nbr*/
  KS0IW01.KS0IW-RULE-NBR = KS0IW00.KS0IW-RULE-NBR; /* Ruling nbr*/
  KS0IW01.KS0IW-QOTA-CAT-CD = KS0IM001.KS0IM-QOTA-CAT-CD; /* Quota*/
  KS0IW01.KS0IW-TEAM-CD = KS0IM001.KS0IM-TEAM-CD; /* Team code*/
  KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD; /* Problem code*/
  KS0IW01.KS0IW-DIV-CD = KS0IM001.KS0IM-DIV-CD; /* Division code*/
  KS0IW01.KS0IW-STAT = KS0IM001.KS0IM-STAT; /* Status code*/
  KS0IW01.KS0IW-EXP-STYLE = KS0IM001.KS0IM-EXP-STYLE; /* Exp style flag*/
  KS0IW01.KS0IW-STY-TYP-CD1 = KS0IM001.KS0IM-STY-TYP-CD[1]; /* Sty-typ*/
  KS0IW01.KS0IW-STY-TYP-CD2 = KS0IM001.KS0IM-STY-TYP-CD[2]; /* Sty-typ*/
  KS0IW01.KS0IW-STY-TYP-CD3 = KS0IM001.KS0IM-STY-TYP-CD[3]; /* Sty-typ*/
  KS0IW01.KS0IW-REG-CD = KS0IM001.KS0IM-REG-CD; /* Market Region*/
  ;
  /* ------------------------------------------------------------*/
  /* Select the information to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-BUS-UNIT-CD > " " /* BUC      entered*/
   && KS0IM001.KS0IM-BUS-UNIT-CD == "02") /* Footwear BUC*/
    KS0I-11300(); /* Footwr  select process*/
  else
    if (KS0IM001.KS0IM-BUS-UNIT-CD == "03") /* Apparel BUC*/
      KS0I-11200(); /* Apparel  select process*/
    else
      if (KS0IM001.KS0IM-BUS-UNIT-CD == "EQ") /* Equipment bus unit cd*/
        KS0I-11500(); /* Equip    select process*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-IXM > 1) /* Page was formatted*/
    if (KS0IW00.KS0IW-IXM > 12) /* More than one page*/
      KS0IW00.KS0IW-DTL-LINE[1] = KS0IW01.KS0IW-DTL-LINE[12];
      KS0IW00.KS0IW-DTL-LINE[2] = KS0IW01.KS0IW-DTL-LINE[13];
      KS0IW00.KS0IW-DTL-LINE[3] = KS0IW01.KS0IW-DTL-LINE[14];
      KS0IW00.KS0IW-DTL-LINE[4] = KS0IW01.KS0IW-DTL-LINE[15];
      KS0IW01.KS0IW-DTL-LINE[12] = " ";
      KS0IW01.KS0IW-DTL-LINE[13] = " ";
      KS0IW01.KS0IW-DTL-LINE[14] = " ";
      KS0IW01.KS0IW-DTL-LINE[15] = " ";
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD;
      KS0IW00.KS0IW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
      ;
      KS0I-11400(); /* Add page to temporary storage*/
      ;
      KS0IW01.KS0IW-SAVE-INDEX-TBL = KS0IW00.KS0IW-SAVE-INDEX-TBL;
      KS0IW01.KS0IW-GPC = KS0IM001.KS0IM-BUS-UNIT-CD; /* GPC code*/
      KS0IW01.KS0IW-GPC-DESC = KS0IM001.KS0IM-GPC-DESC;
      KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
                                   /* Style number*/
      KS0IW01.KS0IW-COLR-CD-ID = KS0IM001.KS0IM-COLR-CD-ID; /* Color*/
      KS0IW01.KS0IW-DIM-CD = KS0IM001.KS0IM-DIM-CD; /* Dimension code*/
      KS0IW01.KS0IW-SESN-CD = KS0IM001.KS0IM-SESN-CD; /* Season code*/
      if (KS0IM001.KS0IM-SESN-YR-RNG >= "00" /* if sesn-yr entered*/
       && KS0IM001.KS0IM-SESN-YR-RNG <= "99")
        KS0IW01.KS0IW-SESN-YY = KS0IM001.KS0IM-SESN-YR-RNG;
                                   /* Season year*/
      else
        KS0IW01.KS0IW-SESN-YR = "0"; /* Season year*/
      end
      KS0IW01.KS0IW-PRDCTN-YR = KS0IM001.KS0IM-PRDCTN-YR; /* PO ID*/
      KS0IW01.KS0IW-PRDCTN-MO = KS0IM001.KS0IM-PRDCTN-MO; /* PO ID*/
      KS0IW01.KS0IW-DLVR-MO = KS0IM001.KS0IM-DLVR-MO; /* PO ID*/
      KS0IW01.KS0IW-FCTY-CD = KS0IM001.KS0IM-FCTY-CD; /* Factory code*/
      KS0IW01.KS0IW-ORIG-CD = KS0IM001.KS0IM-ORIG-CD; /* Origin code*/
      KS0IW01.KS0IW-US-MADE-FLAG = KS0IM001.KS0IM-US-MADE-FLAG;
      KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR; /* HS number*/
      KS0IW01.KS0IW-RULE-NBR-MAP = KS0IM001.KS0IM-RULE-NBR; /* Rule nbr*/
      KS0IW01.KS0IW-RULE-NBR = KS0IW00.KS0IW-RULE-NBR; /* Rule nbr*/
      KS0IW01.KS0IW-QOTA-CAT-CD = KS0IM001.KS0IM-QOTA-CAT-CD; /* Quota*/
      KS0IW01.KS0IW-TEAM-CD = KS0IM001.KS0IM-TEAM-CD; /* Team code*/
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD; /* Problem code*/
      KS0IW01.KS0IW-DIV-CD = KS0IM001.KS0IM-DIV-CD; /* Division code*/
      KS0IW01.KS0IW-STAT = KS0IM001.KS0IM-STAT; /* Status code*/
      KS0IW01.KS0IW-EXP-STYLE = KS0IM001.KS0IM-EXP-STYLE;
      KS0IW01.KS0IW-STY-TYP-CD1 = KS0IM001.KS0IM-STY-TYP-CD[1];
      KS0IW01.KS0IW-STY-TYP-CD2 = KS0IM001.KS0IM-STY-TYP-CD[2];
      KS0IW01.KS0IW-STY-TYP-CD3 = KS0IM001.KS0IM-STY-TYP-CD[3];
      KS0IW01.KS0IW-REG-CD = KS0IM001.KS0IM-REG-CD;
      ;
      KS0IW00.KS0IW-IXM = 1;
      KS0IW00.KS0IW-IX1 = 1;
      if (KS0IW00.KS0IW-DTL-LINE[KS0IW-IXM] > " ")
        KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = KS0IW00.KS0IW-DTL-LINE[KS0IW-IXM];
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      else
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
      end
      while (KS0IW00.KS0IW-IXM <= 4)
        KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = KS0IW00.KS0IW-DTL-LINE[KS0IW-IXM];
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      end
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD; /* Problem code*/
      KS0I-11400(); /* Add page to temporary storage*/
    else
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD; /* Problem code*/
      KS0I-11400(); /* Add page to temporary storage*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    KS0IW00.XXXTSPAG = 0; /* Page number*/
    KSWREC.XXXPRCNM = "11000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
  KS0IW00.KS0IW-CPY-CLR-IN-PROCESS = "N"; /* Copy from color flag*/
  ;
  ;
end // end KS0I-11000

// Purge temporary storage
Function KS0I-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
  ;
  set KS0IW01 empty; /* M001 display storage*/
  ;
  KS0IW01.KS0IW-SAVE-INDEX-TBL = KS0IW00.KS0IW-SAVE-INDEX-TBL;
  ;
  KS0IW00.KS0IW-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0IW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11100

// Apparel select process
Function KS0I-11200()
  /* ------------------------------------------------------------*/
  /* Handle all zeros in PO ID*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-PRDCTN-MO == "  " /* and PO ID month is zero*/
   && KS0IM001.KS0IM-DLVR-MO == "  ")  /* and PO ID month is zero*/
    KS0IM001.KS0IM-PRDCTN-YR = " ";
    KS0IM001.KS0IM-PRDCTN-MO = " ";
    KS0IM001.KS0IM-DLVR-MO = " ";
  end
  ;
  ;
  ;
  /* ------------------------------------------------------------*/
  /* Determine if full or partial style has been entered.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-STYLE-FND = "N";
  if (KS0IM001.KS0IM-MAP1-STY-NBR > " ") /* if a valid is entered;*/
    KS0IW00.KS0IW-SELECT = "S1";
    KS0IW00.KS0IW-FETCH = "N1";
    KS0IW00.KS0IW-CLOSE = "C1";
    KS0I-11210(); /* Call IO6130 select*/
    KS0I-11220(); /* Fetch next IO6130 row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KS0IW00.KS0IW-STYLE-FND = "Y";
    end
    KS0I-11240(); /* IO6130 Close*/
  end
  /* ------------------------------------------------------------*/
  /* Reset IO Mod Flags*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IO6130-SW = "N"; /* IO Mod IO6130 called*/
  KS0IW00.KS0IW-KS1120-SW = "N"; /* IO Mod KS1120 called*/
  ;
  /* ------------------------------------------------------------*/
  /* Select the information to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-PRDCTN-YR > " " /* PO ID year entered*/
   && KS0IM001.KS0IM-PRDCTN-MO > " " /* and PO ID month entered*/
   && KS0IM001.KS0IM-DLVR-MO > " ")  /* and PO ID month entered*/
  /* IF KS0IM001.KS0IM-FCTY-CD GT ' ';/* and factory code entered*/
    KS0IW00.KS0IW-SELECT = "SD";
    KS0IW00.KS0IW-FETCH = "ND";
    KS0IW00.KS0IW-CLOSE = "CD";
    KS0I-11310(); /* Call KS1120 select*/
  else
  /* MOVE 'S2' TO KS0IW00.KS0IW-SELECT;*/
  /* MOVE 'N2' TO KS0IW00.KS0IW-FETCH;*/
  /* MOVE 'C2' TO KS0IW00.KS0IW-CLOSE;*/
  /* PERFORM KS0I-11310;          /* Call KS1120 select*/
  /* END;*/
  /* SE;*/
    if (KS0IM001.KS0IM-PRBM-CD > " ") /* If Prbm code entered*/
      KS0IW00.KS0IW-SELECT = "S5";
      KS0IW00.KS0IW-FETCH = "N5";
      KS0IW00.KS0IW-CLOSE = "C5";
      KS0I-11310(); /* Call KS1120 select*/
    else
      if (KS0IM001.KS0IM-STY-TYP-CD[1] > " " /* If STY-TYP entered*/
       || KS0IM001.KS0IM-STY-TYP-CD[2] > " " /* If STY-TYP entered*/
       || KS0IM001.KS0IM-STY-TYP-CD[3] > " ") /* If STY-TYP entered*/
        KS0IW00.KS0IW-SELECT = "S7";
        KS0IW00.KS0IW-FETCH = "N7";
        KS0IW00.KS0IW-CLOSE = "C7";
        KS0I-11210(); /* Call IO6130 select*/
      else
        if (KS0IM001.KS0IM-SESN-CD > " " /* If Season code entered*/
         && KS0IM001.KS0IM-SESN-YR-RNG > " ") /* and Season year entered*/
          KS0IW00.KS0IW-SELECT = "S2";
          KS0IW00.KS0IW-FETCH = "N2";
          KS0IW00.KS0IW-CLOSE = "C2";
          KS0I-11210(); /* Call IO6130 select*/
        else
          if (KS0IM001.KS0IM-RULE-NBR > " ") /* If Ruling Number entered*/
            KS0IW00.KS0IW-SELECT = "S5";
            KS0IW00.KS0IW-FETCH = "N5";
            KS0IW00.KS0IW-CLOSE = "C5";
            KS0I-11210(); /* Call IO6130 select*/
          else
            if (KS0IM001.KS0IM-HTS-NBR > " " /* If HS Number entered*/
             && KS0IW00.KS0IW-STYLE-FND == "N") /* stle not found*/
              KS0IW00.KS0IW-SELECT = "S6";
              KS0IW00.KS0IW-FETCH = "N6";
              KS0IW00.KS0IW-CLOSE = "C6";
              KS0I-11210(); /* Call IO6130 select*/
            else
              KS0IW00.KS0IW-SELECT = "S1";
              KS0IW00.KS0IW-FETCH = "N1";
              KS0IW00.KS0IW-CLOSE = "C1";
              KS0I-11210(); /* Call IO6130 select*/
            end
          end
        end
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Display line index*/
  KS0IW00.KS0IW-PAGE-IS-FULL = "N";
  KS0IW00.KS0IW-SWC = "N"; /* End of cursor switch*/
  KS0IW00.KS0IW-COUNTER = 0; /* Display counter*/
  ;
  while (KS0IW00.KS0IW-SWC == "N") /* Until end of cursor*/
    ;
    if (KS0IW00.KS0IW-KS1120-SW == "Y")
      KS0I-11320(); /* Fetch next KS1120 row*/
    else
      if (KS0IW00.KS0IW-IO6130-SW == "Y")
        KS0I-11220(); /* Fetch next IO6130 row*/
      else
        KS0IW00.KS0IW-SWC = "Y";
      end
    end
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0IW00.KS0IW-SWC == "N") /* Not end of cursor*/
      if (KS0IM001.KS0IM-REG-CD != " ") /* if reg-cd entered*/
        KS0I-11250(); /* call KS1120*/
        ;
        if (KSA-WSY2000-RETURN-CD == 00)
          if (KS0IW01.KS0IW-GPC == "EQ")
            if (VCPROD02.KS-BUS-UNIT-CD == "EQ")
              KS0I-11230(); /* Save data in display storage*/
            end
          else
            if (VCPROD02.KS-BUS-UNIT-CD != "EQ")
              KS0I-11230(); /* Save data in display storage*/
            end
          end
        end
      else /* if reg-cd not entered*/
        if (KS0IW01.KS0IW-GPC == "EQ")
          if (VCPROD02.KS-BUS-UNIT-CD == "EQ")
            KS0I-11230(); /* Save data in display storage*/
          end
        else
          if (VCPROD02.KS-BUS-UNIT-CD != "EQ")
            KS0I-11230(); /* Save data in display storage*/
          end
        end
      end
      KS0IW00.KS0IW-COUNTER = KS0IW00.KS0IW-COUNTER + 1; /* Increment cntr*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0IW00.KS0IW-PAGE-IS-FULL == "Y")
      ;
      KS0IW00.KS0IW-DTL-LINE[1] = KS0IW01.KS0IW-DTL-LINE[12];
      KS0IW00.KS0IW-DTL-LINE[2] = KS0IW01.KS0IW-DTL-LINE[13];
      KS0IW00.KS0IW-DTL-LINE[3] = KS0IW01.KS0IW-DTL-LINE[14];
      KS0IW00.KS0IW-DTL-LINE[4] = KS0IW01.KS0IW-DTL-LINE[15];
      KS0IW01.KS0IW-DTL-LINE[12] = " ";
      KS0IW01.KS0IW-DTL-LINE[13] = " ";
      KS0IW01.KS0IW-DTL-LINE[14] = " ";
      KS0IW01.KS0IW-DTL-LINE[15] = " ";
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD;
      KS0IW00.KS0IW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
      ;
      KS0I-11400(); /* Add page to temporary storage*/
      ;
      /* ---------------------------------------------------------------*/
      /* If the number of pages in temp storage is GE the maximum number*/
      /* of pages set in the entry flow of the application, then set the*/
      /* end of cursor flag and give message that max pages were reached*/
      /* ---------------------------------------------------------------*/
      if (KS0IW00.TA5TSQIX >= KS0IW00.KS0IW-MAX-PAGES)
        KS0IW00.KS0IW-SWC = "Y"; /* Set end of file*/
        KSWREC.XXXMSGNO = 128; /* Max pages reached*/
        KSWREC.XXXPRCNM = "11200";
      end
      ;
      KS0IW01.KS0IW-SAVE-INDEX-TBL = KS0IW00.KS0IW-SAVE-INDEX-TBL;
      KS0IW00.KS0IW-PAGE-IS-FULL = "N";
      KS0IW01.KS0IW-GPC = KS0IM001.KS0IM-BUS-UNIT-CD; /* GPC code*/
      KS0IW01.KS0IW-GPC-DESC = KS0IM001.KS0IM-GPC-DESC;
      KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
                                   /* Style number*/
      KS0IW01.KS0IW-SESN-CD = KS0IM001.KS0IM-SESN-CD; /* Season code*/
      if (KS0IM001.KS0IM-SESN-YR-RNG >= "00"
       && KS0IM001.KS0IM-SESN-YR-RNG <= "99")
        KS0IW01.KS0IW-SESN-YY = KS0IM001.KS0IM-SESN-YR-RNG;
                                   /* Season year*/
      else
        KS0IW01.KS0IW-SESN-YY = " ";
      end
      KS0IW01.KS0IW-PRDCTN-YR = KS0IM001.KS0IM-PRDCTN-YR; /* PO ID*/
      KS0IW01.KS0IW-PRDCTN-MO = KS0IM001.KS0IM-PRDCTN-MO; /* PO ID*/
      KS0IW01.KS0IW-DLVR-MO = KS0IM001.KS0IM-DLVR-MO; /* PO ID*/
      KS0IW01.KS0IW-FCTY-CD = KS0IM001.KS0IM-FCTY-CD;
                                   /* Factory code*/
      ;
      KS0IW01.KS0IW-ORIG-CD = KS0IM001.KS0IM-ORIG-CD; /* Origin code*/
      KS0IW01.KS0IW-US-MADE-FLAG = KS0IM001.KS0IM-US-MADE-FLAG;
      KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR; /* HS number*/
      KS0IW01.KS0IW-RULE-NBR-MAP = KS0IM001.KS0IM-RULE-NBR; /* Rule nbr*/
      KS0IW01.KS0IW-RULE-NBR = KS0IW00.KS0IW-RULE-NBR; /* Rule nbr*/
      KS0IW01.KS0IW-QOTA-CAT-CD = KS0IM001.KS0IM-QOTA-CAT-CD;
      KS0IW01.KS0IW-TEAM-CD = KS0IM001.KS0IM-TEAM-CD; /* Team code*/
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD; /* Problem code*/
      KS0IW01.KS0IW-DIV-CD = KS0IM001.KS0IM-DIV-CD; /* Division code*/
      KS0IW01.KS0IW-STAT = KS0IM001.KS0IM-STAT; /* Status code*/
      KS0IW01.KS0IW-EXP-STYLE = KS0IM001.KS0IM-EXP-STYLE;
      KS0IW01.KS0IW-STY-TYP-CD1 = KS0IM001.KS0IM-STY-TYP-CD[1];
      KS0IW01.KS0IW-STY-TYP-CD2 = KS0IM001.KS0IM-STY-TYP-CD[2];
      KS0IW01.KS0IW-STY-TYP-CD3 = KS0IM001.KS0IM-STY-TYP-CD[3];
      KS0IW01.KS0IW-REG-CD = KS0IM001.KS0IM-REG-CD;
      ;
      KS0IW00.KS0IW-IX1 = 1; /* Reset index*/
      KS0IW00.KS0IW-IXM = 1;
      if (KS0IW00.KS0IW-DTL-LINE[KS0IW-IXM] > " ")
        KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = KS0IW00.KS0IW-DTL-LINE[KS0IW-IXM];
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      else
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
      end
      while (KS0IW00.KS0IW-IXM <= 4)
        KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = KS0IW00.KS0IW-DTL-LINE[KS0IW-IXM];
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      end
      if (KS0IW01.KS0IW-DTL-STY-NBR[4] > " ")
        KS0IW00.KS0IW-IXM = 5;
      else
        if (KS0IW01.KS0IW-DTL-STY-NBR[3] > " ")
          KS0IW00.KS0IW-IXM = 4;
        else
          if (KS0IW01.KS0IW-DTL-STY-NBR[2] > " ")
            KS0IW00.KS0IW-IXM = 3;
          else
            if (KS0IW01.KS0IW-DTL-STY-NBR[1] > " ")
              KS0IW00.KS0IW-IXM = 2;
            else
              KS0IW00.KS0IW-IXM = 1;
            end
          end
        end
      end
      ;
      KS0I-11239(); /* add last display line*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-KS1120-SW == "Y")
    KS0I-11340(); /* Close KS1120 set*/
  else
    if (KS0IW00.KS0IW-IO6130-SW == "Y")
      KS0I-11240(); /* Close IO6130 set*/
    end
  end
  ;
end // end KS0I-11200

// Call IO6130 select
Function KS0I-11210()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-11211(); /* Set wildcard values*/
  ;
  try
    call "VCPROD02" (KSAREC, SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11210"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11210

// Set IO6130 wildcard values
Function KS0I-11211()
  /* ------------------------------------------------------------*/
  /* Set wildcard values for IO6130 call.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  set KSAREC empty; /* Clear row storage area*/
  ;
  KS0IW00.KS0IW-IO6130-SW = "Y"; /* IO6130 set selected*/
  KS0IW00.KS0IW-KS1120-SW = "N";
  ;
  if (KS0IW01.KS0IW-GPC == "EQ")
    VCPROD02.KS-BUS-UNIT-CD = "EQ"; /* BUS UNIT CODE*/
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0IW01.KS0IW-GPC;
  end
  if (KS0IW01.KS0IW-SESN-CD > " ") /* Season code entered*/
    if (KS0IM001.KS0IM-SESN-YR-RNG > "  ")
      if (KS0IW01.KS0IW-SESN-YY > "65")
        KS0IW01.KS0IW-SESN-CENT = "19";
      else
        KS0IW01.KS0IW-SESN-CENT = "20";
      end
    else
      KS0IW01.KS0IW-SESN-YR = "0";
    end
    if (KS0IW01.KS0IW-SESN-YR > "0")
      KS0IW01.KS0IW-SESN-YR-NUM = KS0IW01.KS0IW-SESN-YR;
      VCPROD02.XSNYR = KS0IW01.KS0IW-SESN-YR-NUM; /* Season year*/
    else
      VCPROD02.XSNYR = -1; /* Season year*/
    end
    VCPROD02.XSECD = KS0IW01.KS0IW-SESN-CD; /* Season code*/
  else
    VCPROD02.XSNYR = -1; /* Season year*/
    VCPROD02.XSECD = "*"; /* Season code*/
  end
  ;
  if (KS0IW00.KS0IW-SELECT == "S1") /* If select by style requested*/
    VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
    VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
  else
    if (KS0IW01.KS0IW-STYLE > " ") /* If style entered*/
      VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
      VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
      if (KS0IW01.KS0IW-STY-CHAR-2 == " ") /* If second char blank*/
        KS0IW01.KS0IW-STY-CHAR-2 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-3 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
        VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
        VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
        KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
      else
        if (KS0IW01.KS0IW-STY-CHAR-3 == " ") /* If third char blank*/
          KS0IW01.KS0IW-STY-CHAR-3 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
          VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
          VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
          KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
        else
          if (KS0IW01.KS0IW-STY-CHAR-4 == " ") /* If fourth char blank*/
            KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
            VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
            VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
            KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
          else
            if (KS0IW01.KS0IW-STY-CHAR-5 == " ") /* If fifth char blank*/
              KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
              KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
              KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
              VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
              VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
              KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
            else
              if (KS0IW01.KS0IW-STY-CHAR-6 == " ") /* If sixth char blank*/
                KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
                KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
                VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
                KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
              else
                if (KS0IW01.KS0IW-STY-CHAR-7 == " ") /* If seventh char blank*/
                  KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                  VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
                  VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
                  KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
                end
              end
            end
          end
        end
      end
    else
      VCPROD02.SY1STNBR = "%%%%%%%";
      VCPROD02.KS-XPRMT-STY-NBR = "%%%%%%%";
    end
  end
  ;
  if (KS0IW01.KS0IW-COLR-CD-ID > " ") /* If color code entered*/
    VCPROD02.SY2CLRID = KS0IW01.KS0IW-COLR-CD-ID;
  else
    VCPROD02.SY2CLRID = "*"; /* Wildcard color*/
  end
  if (KS0IW01.KS0IW-DIM-CD > " ") /* If dimension entered*/
    VCPROD02.XDMCD = KS0IW01.KS0IW-DIM-CD;
  else
    VCPROD02.XDMCD = "*"; /* Wildcard dimension*/
  end
  ;
  if (KS0IM001.KS0IM-US-MADE-FLAG == "Y")
    VCPROD02.KS-XCT-ORIG-CD = "USA";
  else
    VCPROD02.KS-XCT-ORIG-CD = "*";
  end
  if (KS0IW01.KS0IW-ORIG-CD > " ")
    VCPROD02.KS-XCT-ORIG-CD[1] = KS0IW01.KS0IW-ORIG-CD;
  else
    if (VCPROD02.KS-XCT-ORIG-CD[1] == " ")
      VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
    end
  end
  ;
  if (KS0IW01.KS0IW-STAT > " ")
    VCPROD02.YPR-PROD-STAT-CD = KS0IW01.KS0IW-STAT;
  else
    VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  end
  ;
  if (KS0IW01.KS0IW-RULE-NBR > " ")
    VCPROD02.KS-RULE-NBR = KS0IW01.KS0IW-RULE-NBR;
  else
    VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  end
  ;
  if (KS0IW01.KS0IW-HTS-NBR > " ")
    KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-HTS-NBR;
    if (KS0IW00.KS0IW-SELECT == "S6")
      if (KS0IW01.KS0IW-HTS-BYTE[11] == "-" /* If range entered*/
       || KS0IW01.KS0IW-HTS-BYTE[11] == ",") /* If range entered*/
        VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
        VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        KS0IW01.KS0IW-HTS-2ND-SHDG1 = KS0IW01.KS0IW-HTS-BYTE[12];
        KS0IW01.KS0IW-HTS-2ND-SHDG2 = KS0IW01.KS0IW-HTS-BYTE[13];
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
      else
        VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
        VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        VCPROD02.KS-HTS-STAT-CD = KS0IW01.KS0IW-HTS-STAT-CD;
      end
    else
      if (KS0IW01.KS0IW-HTS-BYTE[11] == "-" /* If range entered*/
       || KS0IW01.KS0IW-HTS-BYTE[11] == ",") /* If range entered*/
        if (KS0IW01.KS0IW-HTS-CPTR-CD > " ")
          VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
        else
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
        if (KS0IW01.KS0IW-HTS-HDG-CD > " ")
          VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
        else
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
        if (KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
        else
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
        if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        else
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
        if (KS0IW01.KS0IW-HTS-BYTE[12] > " "
         && KS0IW01.KS0IW-HTS-BYTE[13] > " ")
          KS0IW01.KS0IW-HTS-2ND-SHDG1 = KS0IW01.KS0IW-HTS-BYTE[12];
          KS0IW01.KS0IW-HTS-2ND-SHDG2 = KS0IW01.KS0IW-HTS-BYTE[13];
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
          KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
        else
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
        end
      else
        if (KS0IW01.KS0IW-HTS-CPTR-CD > " ")
          VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
        else
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
        if (KS0IW01.KS0IW-HTS-HDG-CD > " ")
          VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
        else
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
        if (KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
        else
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
        if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        else
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
        if (KS0IW01.KS0IW-HTS-STAT-CD > " ")
          VCPROD02.KS-HTS-STAT-CD = KS0IW01.KS0IW-HTS-STAT-CD;
        else
          VCPROD02.KS-HTS-STAT-CD = "*";
        end
      end
    end
  else
    VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
    VCPROD02.KS-HTS-HDG-CD = "*";
    VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
    VCPROD02.KS-HTS-STAT-CD = "*";
  end
  if (KS0IW01.KS0IW-TEAM-CD > " ")
    VCPROD02.KS-TEAM-CD = KS0IW01.KS0IW-TEAM-CD;
    if (VCPROD02.KS-HTS-CPTR-CD == "*")
      VCPROD02.KS-HTS-CPTR-CD = "**";
    end
  else
    if (KS0IW00.KS0IW-SELECT == "S4"
     || KS0IW00.KS0IW-SELECT == "S6")
      VCPROD02.KS-TEAM-CD = "*";
    else
      VCPROD02.KS-TEAM-CD = "***";
    end
  end
  if (KS0IW01.KS0IW-QOTA-CAT-CD > " "
   && VCPROD02.KS-HTS-CPTR-CD == "*")
    VCPROD02.KS-HTS-CPTR-CD = "**";
  end
  if (KS0IW01.KS0IW-PRBM-CD > " ")
    VCPROD02.KS-PRBM-NBR = -2;
  else
    VCPROD02.KS-PRBM-NBR = -1;
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD1 > " ")
    KSAREC.YKS-STY-TYP-CD[1] = KS0IW01.KS0IW-STY-TYP-CD1;
  else
    KSAREC.YKS-STY-TYP-CD[1] = "**";
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD2 > " ")
    KSAREC.YKS-STY-TYP-CD[2] = KS0IW01.KS0IW-STY-TYP-CD2;
  else
    KSAREC.YKS-STY-TYP-CD[2] = "**";
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD3 > " ")
    KSAREC.YKS-STY-TYP-CD[3] = KS0IW01.KS0IW-STY-TYP-CD3;
  else
    KSAREC.YKS-STY-TYP-CD[3] = "**";
  end
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-SELECT;
  ;
  ;
end // end KS0I-11211

// Call IO6130 fetch
Function KS0I-11220()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-FETCH;
  ;
  try
    call "VCPROD02" (KSAREC, SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0IW00.KS0IW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11220"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11220

// Save display storage process
Function KS0I-11230()
  /* ------------------------------------------------------------*/
  /* If first line on subsequent page, save heading information.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.TA5TSQIX > 0 /* Not the first page*/
   && KS0IW00.KS0IW-IXM == 1) /* and first line on page*/
    ;
    KS0IW01.KS0IW-GPC = VCPROD02.XGPCD; /* GPC code*/
    KS0IW01.KS0IW-STYLE = VCPROD02.SY1STNBR; /* Style number*/
    KS0IW01.SY1STYNM = VCPROD02.KS-SHORT-STY-NM; /* Style name*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (VCPROD02.KS-PRBM-NBR > 0 /* If problem exists*/
   || KS0IM001.KS0IM-PRBM-CD > " ") /* or problem entered*/
    KS0IW00.KS0IW-SWP = "N"; /* Initialize EOF switch*/
    KS0I-11231(); /* Select VCPROB01 set*/
    while (KS0IW00.KS0IW-SWP == "N" /* Until EOF*/
     && KS0IW00.KS0IW-IX2 <= 25)
      KS0I-11232(); /* Fetch VCPROB01 rows*/
    end
    KS0I-11233(); /* Close VCPROB01 set*/
  else
    KS0IW01.KS0IW-PRBM-CD = " ";
    KS0IW00.KS0IW-PRBM-TABLE = " ";
  end
  ;
  set VHSNBR01 empty; /* Clear VHSNBR01 record*/
  KS0IW00.KS0IW-FORMATTED-RATE = " "; /* Clear gen dty rt*/
  if (KS0IW01.KS0IW-TEAM-CD > " " /* If team code entered*/
   || VCPROD02.KS-HTS-CPTR-CD > " ") /* or HS number exists*/
    ;
    KS0IW01.KS0IW-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD; /* Chapter cd*/
    KS0IW01.KS0IW-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD; /* Chapter hdg*/
    KS0IW01.KS0IW-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
    KS0IW01.KS0IW-HTS-2ND-SHDG-CD = VCPROD02.KS-HTS-2ND-SHDG-CD;
    KS0IW01.KS0IW-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
    ;
    KS0I-11234(); /* Select VHSNBR01 row*/
    KS0I-11235(); /* Format general duty rate*/
  end
  ;
  if (KS0IW00.KS0IW-COUNTER > 0)
    KS0IW00.KS0IW-IX1 = 1;
    KS0IW00.KS0IW-COLOR-COMB = "N";
    while (KS0IW00.KS0IW-IX1 <= 15)
      if (VCPROD02.SY1STNBR == KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
       || VCPROD02.KS-XPRMT-STY-NBR == 
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
      )
        if (VCPROD02.KS-TXT-NBR == KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1]
         /* AND VCPROD02.KS-PRBM-NBR EQ*/
         /* KS0IW01.KS0IW-PRBM-NBR(KS0IW-IX1)*/
         && VCPROD02.KS-RULE-NBR == KS0IW01.KS0IW-DTL-RULE-NBR[KS0IW-IX1]
         
         && VCPROD02.YKS-STY-TYP-CD == 
        KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1]
         && VCPROD02.KS-HTS-CPTR-CD == 
        KS0IW01.KS0IW-DTL-HTS-CPTR-CD[KS0IW-IX1]
         && VCPROD02.KS-HTS-HDG-CD == 
        KS0IW01.KS0IW-DTL-HTS-HDG-CD[KS0IW-IX1]
         && VCPROD02.KS-HTS-1ST-SHDG-CD == 
        KS0IW01.KS0IW-DTL-HTS-1ST-SHDG-CD[KS0IW-IX1]
         && VCPROD02.KS-HTS-2ND-SHDG-CD == 
        KS0IW01.KS0IW-DTL-HTS-2ND-SHDG-CD[KS0IW-IX1]
         && VCPROD02.KS-HTS-STAT-CD == 
        KS0IW01.KS0IW-DTL-HTS-STAT-CD[KS0IW-IX1])
          if (VCPROD02.KS-PRBM-NBR == KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1])
            KS0I-11237(); /* Add color to array*/
            if (KS0IM001.KS0IM-HTS-NBR == " ")
              KS0IW01.KS0IW-HTS-NBR = " ";
            else
              KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
            end
            if (KS0IM001.KS0IM-PRBM-CD == " ")
              KS0IW01.KS0IW-PRBM-CD = " ";
            end
            KS0IW00.KS0IW-IX1 = 15; /* End search*/
            KS0IW00.KS0IW-COLOR-COMB = "Y";
          else
            if (KS0IW00.KS0IW-PRBM[1] == 
            KS0IW01.KS0IW-DTL-PRBM-CD[KS0IW-IX1])
              KS0I-11237(); /* Add color to array*/
              if (KS0IM001.KS0IM-HTS-NBR == " ")
                KS0IW01.KS0IW-HTS-NBR = " ";
              else
                KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
              end
              if (KS0IM001.KS0IM-PRBM-CD == " ")
                KS0IW01.KS0IW-PRBM-CD = " ";
              end
              KS0IW00.KS0IW-IX1 = 15; /* End search*/
              KS0IW00.KS0IW-COLOR-COMB = "Y";
            end
          end
        end
      end
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
    ;
    if (KS0IW00.KS0IW-COLOR-COMB == "N")
      KS0I-11239(); /* Add line to display storage*/
    end
    ;
  else
    ;
    KS0I-11239(); /* Add line to display storage*/
    ;
  end
  ;
  ;
end // end KS0I-11230

// Select VCPROB01 set
Function KS0I-11231()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROB01 empty; /* Clear row storage area*/
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  ;
  KS0IW00.KS0IW-PRBM-TABLE = " "; /* Intialize table*/
  ;
  VCPROB01.KS-PRBM-NBR = VCPROD02.KS-PRBM-NBR; /* Problem number*/
  ;
  try
    call "IO6140" ("S1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11231"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11231

// Fetch  VCPROB01 row
Function KS0I-11232()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6140" ("N1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      KS0IW00.KS0IW-PRBM[KS0IW-IX2] = VCPROB01.YKP-PRBM-CD;
                                                                /* Save prbm*/
      ;
      KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0IW00.KS0IW-SWP = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11232"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11232

// Close  VCPROB01 set
Function KS0I-11233()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6140" ("C1", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11233"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11233

// Select unique VHSNBR01 row
Function KS0I-11234()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSNBR01 empty; /* Clear row storage area*/
  ;
  VHSNBR01.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD; /* Chapter cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD; /* Chapter hdg*/
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
  VHSNBR01.KS-HTS-STAT-CD = KS0IW01.KS0IW-HTS-STAT-CD;
  if (KS0IM001.KS0IM-HTS-NBR == " ")
    KS0IW01.KS0IW-HTS-NBR = " ";
  else
    KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
  end
  ;
  try
    call "IO6120" ("S ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11234"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11234

// Format general duty fields
Function KS0I-11235()
  /* ----------------------------------------------------------------------*/
  /* This routine moves the general duty rate, general duty unit and*/
  /* general duty uom abrv to a formatted field suitable for viewing.*/
  /* ----------------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-GEN-DTY-RATE = VHSNBR01.KS-GEN-DTY-RATE;
  KS0IW00.KS0IW-GEN-DTY-UNT = VHSNBR01.KS-GEN-DTY-UNT;
  KS0IW00.KS0IW-UOM-ABRV = VHSNBR01.KS-GEN-UOM-ABRV;
  ;
  KS0IW00.KS0IW-IX1 = 1; /* initialize index*/
  ;
  if (KS0IW00.KS0IW-GEN-DTY-RATE == 0 /* if both rate & unit are zeros*/
   && KS0IW00.KS0IW-GEN-DTY-UNT == 0)
    KS0IW00.KS0IW-FORMATTED-RATE = " "; /* spaces to result field*/
    return; /* return to previous process*/
  end
  ;
  if (KS0IW00.KS0IW-GEN-DTY-RATE > 0) /* if rate > zeros*/
    if (KS0IW00.KS0IW-RATE-BYTE[1] > "0") /* if 1st byte > zero*/
      KS0IW00.KS0IW-FORMAT-BYTE[1] = KS0IW00.KS0IW-RATE-BYTE[1]; /* move in 1st two bytes*/
      KS0IW00.KS0IW-FORMAT-BYTE[2] = KS0IW00.KS0IW-RATE-BYTE[2];
      KS0IW00.KS0IW-IX1 = 3;
    else
      KS0IW00.KS0IW-FORMAT-BYTE[1] = KS0IW00.KS0IW-RATE-BYTE[2];
      KS0IW00.KS0IW-IX1 = 2;
    end
    if (KS0IW00.KS0IW-RATE-BYTE[3] == "0" /* if 3rd byte = zero*/
     && KS0IW00.KS0IW-RATE-BYTE[4] == "0" /* & 4th byte = zero*/
     && KS0IW00.KS0IW-RATE-BYTE[5] == "0") /* & 5th byte = zero*/
       /* next sentence*/
    else
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = ".";
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1; /* set index up by 1*/
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-RATE-BYTE[3]; /* move in 3rd byte*/
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1; /* set index up by 1*/
      if (KS0IW00.KS0IW-RATE-BYTE[5] > "0")
        KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-RATE-BYTE[4]; /* move in 4th byte*/
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
        KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-RATE-BYTE[5]; /* move in 5th byte*/
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      else
        if (KS0IW00.KS0IW-RATE-BYTE[4] > "0")
          KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-RATE-BYTE[4]; /* move in 4th byte*/
          KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
        end
      end
    end
    KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = "%";
    KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    if (KS0IW00.KS0IW-GEN-DTY-UNT > 0) /* something in unit ?*/
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = " ";
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = "+";
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = " ";
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
  end
  if (KS0IW00.KS0IW-GEN-DTY-UNT > 0) /* something in unit ?*/
    KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = "$";
    KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    if (KS0IW00.KS0IW-UNIT-BYTE[1] > "0") /* if 1st byte > zero*/
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UNIT-BYTE[1]; /* move in 1st two bytes*/
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UNIT-BYTE[2];
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    else
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UNIT-BYTE[2];
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
    if (KS0IW00.KS0IW-UNIT-BYTE[3] == "0" /* if 3rd byte = zero*/
     && KS0IW00.KS0IW-UNIT-BYTE[4] == "0" /* & 4th byte = zero*/
     && KS0IW00.KS0IW-UNIT-BYTE[5] == "0") /* & 5th byte = zero*/
       /* next sentence*/
    else
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = ".";
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1; /* set index up by 1*/
      KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UNIT-BYTE[3]; /* move in 3rd byte*/
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1; /* set index up by 1*/
      if (KS0IW00.KS0IW-UNIT-BYTE[5] > "0")
        KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UNIT-BYTE[4]; /* move in 4th byte*/
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
        KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UNIT-BYTE[5]; /* move in 5th byte*/
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      else
        if (KS0IW00.KS0IW-UNIT-BYTE[4] > "0")
          KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UNIT-BYTE[4]; /* move in 4th byte*/
          KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
        end
      end
    end
    KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = "/";
    KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UOM-BYTE[1];
    KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UOM-BYTE[2];
    KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    KS0IW00.KS0IW-FORMAT-BYTE[KS0IW-IX1] = KS0IW00.KS0IW-UOM-BYTE[3];
  end
  ;
  ;
end // end KS0I-11235

// Save color array in display st
Function KS0I-11237()
  /* ------------------------------------------------------------*/
  /* Save color array in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW01.KS0IW-COLOR-1[KS0IW-IX1] == " ") /* If field blank*/
    KS0IW01.KS0IW-COLOR-1[KS0IW-IX1] = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1]; /* Move color*/
    KS0IW01.KS0IW-COLOR-2[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
    KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] = "***";
  else
    if (KS0IW01.KS0IW-COLOR-3[KS0IW-IX1] == " ") /* If field blank*/
      KS0IW01.KS0IW-COLOR-3[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                                                /* Move clr*/
    else
      if (KS0IW01.KS0IW-COLOR-4[KS0IW-IX1] == " ") /* If field blank*/
        KS0IW01.KS0IW-COLOR-4[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
      else
        if (KS0IW01.KS0IW-COLOR-5[KS0IW-IX1] == " ") /* If field blank*/
          KS0IW01.KS0IW-COLOR-5[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
        else
          if (KS0IW01.KS0IW-COLOR-6[KS0IW-IX1] == " ") /* If field blank*/
            KS0IW01.KS0IW-COLOR-6[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
          else
            if (KS0IW01.KS0IW-COLOR-7[KS0IW-IX1] == " ") /* If field blank*/
              KS0IW01.KS0IW-COLOR-7[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
            else
              if (KS0IW01.KS0IW-COLOR-8[KS0IW-IX1] == " ") /* If field blank*/
                KS0IW01.KS0IW-COLOR-8[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
              else
                if (KS0IW01.KS0IW-COLOR-9[KS0IW-IX1] == " ")
                                                          /* If field blank*/
                  KS0IW01.KS0IW-COLOR-9[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
                else
                  if (KS0IW01.KS0IW-COLOR-10[KS0IW-IX1] == " ")
                                   /* If field blank*/
                    KS0IW01.KS0IW-COLOR-10[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                  else
                    if (KS0IW01.KS0IW-COLOR-11[KS0IW-IX1] == " ")
                                   /* If field blank*/
                      KS0IW01.KS0IW-COLOR-11[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                    else
                      if (KS0IW01.KS0IW-COLOR-12[KS0IW-IX1] == " ")
                                   /* If field blank*/
                        KS0IW01.KS0IW-COLOR-12[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                      else
                        if (KS0IW01.KS0IW-COLOR-13[KS0IW-IX1] == " ")
                                   /* If field blank*/
                          KS0IW01.KS0IW-COLOR-13[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                        else
                          if (KS0IW01.KS0IW-COLOR-14[KS0IW-IX1] == " ")
                                   /* If field blank*/
                            KS0IW01.KS0IW-COLOR-14[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                          else
                            if (KS0IW01.KS0IW-COLOR-15[KS0IW-IX1] == " ")
                                   /* If field blank*/
                              KS0IW01.KS0IW-COLOR-15[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
                            else
                              if (KS0IW01.KS0IW-COLOR-16[KS0IW-IX1] == " ")
                                   /* If field blank*/
                                KS0IW01.KS0IW-COLOR-16[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
                              else
                                KS0I-11238();
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KS0I-11237

// Save color array in display st
Function KS0I-11238()
  /* ------------------------------------------------------------*/
  /* Save color array in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW01.KS0IW-COLOR-17[KS0IW-IX1] == " ") /* If field blank*/
    KS0IW01.KS0IW-COLOR-17[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
  else
    if (KS0IW01.KS0IW-COLOR-18[KS0IW-IX1] == " ") /* If field blank*/
      KS0IW01.KS0IW-COLOR-18[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
    else
      if (KS0IW01.KS0IW-COLOR-19[KS0IW-IX1] == " ") /* If field blank*/
        KS0IW01.KS0IW-COLOR-19[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
      else
        if (KS0IW01.KS0IW-COLOR-20[KS0IW-IX1] == " ") /* If field blank*/
          KS0IW01.KS0IW-COLOR-20[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
        else
          if (KS0IW01.KS0IW-COLOR-21[KS0IW-IX1] == " ") /* If field blank*/
            KS0IW01.KS0IW-COLOR-21[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
          else
            if (KS0IW01.KS0IW-COLOR-22[KS0IW-IX1] == " ") /* If field blank*/
              KS0IW01.KS0IW-COLOR-22[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
            else
              if (KS0IW01.KS0IW-COLOR-23[KS0IW-IX1] == " ") /* If field blank*/
                KS0IW01.KS0IW-COLOR-23[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
              else
                if (KS0IW01.KS0IW-COLOR-24[KS0IW-IX1] == " ")
                                   /* If field blank*/
                  KS0IW01.KS0IW-COLOR-24[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                else
                  if (KS0IW01.KS0IW-COLOR-25[KS0IW-IX1] == " ")
                                   /* If field blank*/
                    KS0IW01.KS0IW-COLOR-25[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                  else
                    if (KS0IW01.KS0IW-COLOR-26[KS0IW-IX1] == " ")
                                   /* If field blank*/
                      KS0IW01.KS0IW-COLOR-26[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                    else
                      if (KS0IW01.KS0IW-COLOR-27[KS0IW-IX1] == " ")
                                   /* If field blank*/
                        KS0IW01.KS0IW-COLOR-27[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                      else
                        if (KS0IW01.KS0IW-COLOR-28[KS0IW-IX1] == " ")
                                   /* If field blank*/
                          KS0IW01.KS0IW-COLOR-28[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                        else
                          if (KS0IW01.KS0IW-COLOR-29[KS0IW-IX1] == " ")
                                   /* If field blank*/
                            KS0IW01.KS0IW-COLOR-29[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                          else
                            if (KS0IW01.KS0IW-COLOR-30[KS0IW-IX1] == " ")
                                   /* If field blank*/
                              KS0IW01.KS0IW-COLOR-30[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KS0I-11238

// Save display storage line
Function KS0I-11239()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-EXP-STYLE == "N") /* If exclude exp style*/
    if (VCPROD02.SY1STNBR == " ")
      return; /* Return to previous process*/
    end
  else
    if (KS0IM001.KS0IM-EXP-STYLE == "Y") /* If only exp style*/
      if (VCPROD02.SY1STNBR > " ")
        return; /* Return to previous process*/
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD1 > " "
   || KS0IW01.KS0IW-STY-TYP-CD2 > " "
   || KS0IW01.KS0IW-STY-TYP-CD3 > " ")
    if (VCPROD02.YKS-STY-TYP-CD == " ")
      return;
    else
      if (VCPROD02.YKS-STY-TYP-CD == KS0IW01.KS0IW-STY-TYP-CD1
       || VCPROD02.YKS-STY-TYP-CD == KS0IW01.KS0IW-STY-TYP-CD2
       || VCPROD02.YKS-STY-TYP-CD == KS0IW01.KS0IW-STY-TYP-CD3)
        /* next sentence*/
      else
        return;
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-DIV-CD > " ") /* If DIV-CD entered*/
    set PG2REC empty;
    PG2REC.XGPCD = VCPROD02.XGPCD;
    PG2REC.SY1STNBR = VCPROD02.SY1STNBR;
    PG2REC.SY2CLRID = VCPROD02.SY2CLRID;
    PG2REC.XDMCD = VCPROD02.XDMCD;
    KS0I-21501(); /* select unique SYCLR01 record*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if no record found*/
      return; /* return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
        if (PG2REC.XDVCD1 == KS0IW01.KS0IW-DIV-CD /* div cd matched*/
         || PG2REC.XBCCD == KS0IW01.KS0IW-DIV-CD) /* brand cd matched*/
           /* next sentence*/
        else
          return; /* Return to previous process*/
        end
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-TEAM-CD > " ") /* If team code entered*/
    if (VCPROD02.KS-TEAM-CD > " ") /* If override team exists*/
      if (VCPROD02.KS-TEAM-CD == KS0IW01.KS0IW-TEAM-CD)
                                  /* Continue on*/
      else
        ;
        return; /* Return to previous process*/
        ;
      end
    else
      if (VHSNBR01.KS-TEAM-CD > " ") /* If HS team code exists*/
        if (VHSNBR01.KS-TEAM-CD == KS0IW01.KS0IW-TEAM-CD)
                                  /* Continue on*/
        else
          ;
          return; /* Return to previous process*/
          ;
        end
      else
        ;
        return; /* Return to previous process*/
        ;
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-QOTA-CAT-CD > " ") /* If quota cat code entered*/
    if (VHSNBR01.YQT-QOTA-CAT-CD == KS0IW01.KS0IW-QOTA-CAT-CD)
                                /* Continue on*/
    else
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  if (KS0IM001.KS0IM-US-MADE-FLAG == "N"
   && VCPROD02.KS-XCT-ORIG-CD[1] == "USA"
   && VCPROD02.KS-XCT-ORIG-CD[2] == " ")
    ;
    return;
    ;
  end
  ;
  if (KS0IM001.KS0IM-PRBM-CD > " ") /* If problem code entered*/
    KS0IW00.KS0IW-IX1 = 1; /* Initialize index*/
    KS0IW00.KS0IW-PRBM-FND = "N"; /* Problem found switch*/
    while (KS0IW00.KS0IW-IX1 <= 25)
      if (KS0IM001.KS0IM-PRBM-CD == KS0IW00.KS0IW-PRBM[KS0IW-IX1])
        KS0IW00.KS0IW-PRBM-FND = "Y";
        KS0IW00.KS0IW-IX1 = 25;
        if (KS0IW00.KS0IW-PRBM[2] > " ") /* If more than 1 problem*/
          KS0IW01.KS0IW-PRBM-CD = "**";
        else
          KS0IW01.KS0IW-PRBM-CD = KS0IW00.KS0IW-PRBM[1];
        end
      end
      ;
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
    ;
    if (KS0IW00.KS0IW-PRBM-FND == "N") /* Problem not found*/
      return; /* Return to previous process*/
    end
  else
    if (VCPROD02.KS-PRBM-NBR > 0) /* If problem exists*/
      if (KS0IW00.KS0IW-PRBM[2] > " ") /* and more than 1 problem*/
        KS0IW01.KS0IW-PRBM-CD = "**";
      else
        KS0IW01.KS0IW-PRBM-CD = KS0IW00.KS0IW-PRBM[1];
      end
    else
      KS0IW01.KS0IW-PRBM-CD = " ";
    end
  end
  ;
  if (KS0IW00.KS0IW-IXM > 13) /* Need to start new pg*/
    KS0IW00.KS0IW-PAGE-IS-FULL = "Y";
  else
    ;
    if (KS0IW00.KS0IW-IXM > 1) /* Should blank line be inserted*/
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IXM - 1;
      if (VCPROD02.SY1STNBR == KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
       || VCPROD02.KS-XPRMT-STY-NBR == 
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1])
        if (VCPROD02.XSECD == KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1]
         && VCPROD02.XSNYR == 
        KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1])
          if (KS0IW00.KS0IW-IXM == 12)
            KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 - 1;
            if (VCPROD02.SY1STNBR == KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1])
              KS0IW01.KS0IW-DTL-LINE[12] = KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1];
              KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = " ";
              KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
              KS0IW01.KS0IW-DTL-LINE[13] = KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1];
              KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = " ";
              KS0IW00.KS0IW-IXM = 14;
            else
              KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
              KS0IW01.KS0IW-DTL-LINE[12] = KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1];
              KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = " ";
              KS0IW00.KS0IW-IXM = 13;
            end
          end
        else
          KS0IW01.KS0IW-DTL-LINE[KS0IW-IXM] = " ";
          KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
        end
      else
        KS0IW01.KS0IW-DTL-LINE[KS0IW-IXM] = " ";
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
      end
    end
    KS0IW01.XGPCD[KS0IW-IXM] = VCPROD02.XGPCD; /* GPC code*/
    KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IXM] = VCPROD02.XSECD;
    KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IXM] = VCPROD02.XSNYR;
    if (VCPROD02.SY1STNBR > " ")
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM] = VCPROD02.SY1STNBR;
                                   /* Style*/
    else
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM] = VCPROD02.KS-XPRMT-STY-NBR;
    end
    KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IXM] = VCPROD02.KS-XPRMT-STY-NBR;
    KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IXM] = VCPROD02.SY2CLRID;
                                   /* Color*/
    KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IXM] = VCPROD02.XDMCD; /* Dimension*/
  /* IF KS0IW01.KS0IW-GPC EQ '02'*/
    if (KS0IW01.KS0IW-POIDT > " ")
      if (KS0IW01.KS0IW-PRDCTN-YR > "60")
        KS0IW01.KS0IW-PRDCTN-CEN = "19";
      else
        KS0IW01.KS0IW-PRDCTN-CEN = "20";
      end
    end
    if (KS0IW01.KS0IW-POIDT > " ")
      KS0IW01.KS0IW-DTL-POID[KS0IW-IXM] = KS0IW01.KS0IW-POIDT;
                                   /* PO id*/
    else
      KS0IW01.KS0IW-DTL-POID[KS0IW-IXM] = 0;
    end
    KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IXM] = VCPROD02.YKS-STY-TYP-CD;
    KS0IW01.KS0IW-DTL-SHORT-STY-NM[KS0IW-IXM] = VCPROD02.KS-SHORT-STY-NM; /* Style Description*/
    KS0IW01.KS0IW-DTL-QOTA-CAT-CD[KS0IW-IXM] = VHSNBR01.YQT-QOTA-CAT-CD;
    KS0IW01.KS0IW-DTL-DTY-RATE[KS0IW-IXM] = KS0IW00.KS0IW-FORMATTED-RATE;
    if (VCPROD02.KS-HTS-CPTR-CD > " ") /* If HS number exists*/
      KS0IW01.KS0IW-DTL-HTS-CPTR-CD[KS0IW-IXM] = VCPROD02.KS-HTS-CPTR-CD;
      KS0IW01.KS0IW-DTL-HTS-HDG-CD[KS0IW-IXM] = VCPROD02.KS-HTS-HDG-CD;
      KS0IW01.KS0IW-DTL-HTS-1ST-SHDG-CD[KS0IW-IXM] = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KS0IW01.KS0IW-DTL-HTS-2ND-SHDG-CD[KS0IW-IXM] = VCPROD02.KS-HTS-2ND-SHDG-CD;
      KS0IW01.KS0IW-DTL-HTS-STAT-CD[KS0IW-IXM] = VCPROD02.KS-HTS-STAT-CD;
      KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM];
      KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
      while (KS0IW00.KS0IW-IX2 <= 14)
        if (KS0IW00.KS0IW-IX2 == 5 /* These 3 positions must be '.'*/
         || KS0IW00.KS0IW-IX2 == 8 
         || KS0IW00.KS0IW-IX2 == 13)
          if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] != ".")
            KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX2 + 1;
            if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX1] > " ")
              KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] = ".";
            end
          end
        end
        KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* set index up by 1*/
      end
      ;
      KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM] = KS0IW01.KS0IW-HTS-NUMBER;
      if (KS0IM001.KS0IM-HTS-NBR == " ")
        KS0IW01.KS0IW-HTS-NBR = " ";
      else
        KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
      end
    end
    KS0IW01.KS0IW-DTL-RULE-NBR[KS0IW-IXM] = VCPROD02.KS-RULE-NBR;
    KS0IW01.KS0IW-PRBM-NBR[KS0IW-IXM] = VCPROD02.KS-PRBM-NBR;
    KS0IW01.KS0IW-DTL-PRBM-CD[KS0IW-IXM] = KS0IW01.KS0IW-PRBM-CD;
    if (KS0IM001.KS0IM-PRBM-CD == " ")
      KS0IW01.KS0IW-PRBM-CD = " ";
    else
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD;
    end
    KS0IW01.KS0IW-TEXT-NBR[KS0IW-IXM] = VCPROD02.KS-TXT-NBR;
                                   /* Save text*/
    ;
    KS0IW01.KS0IW-SYNCTPGN[KS0IW-IXM] = VCPROD02.SYNCTPGN; /* Page nbr*/
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
end // end KS0I-11239

// Call IO6130 close
Function KS0I-11240()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-CLOSE;
  ;
  try
    call "VCPROD02" (KSAREC, SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11240"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11240

// Call KS1120 using Market Reg
Function KS0I-11250()
  /* ------------------------------------------------------------*/
  /* Move values from VKSAUD01 to VCPROD02 for KS1120 call*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.XDR-PROD-REG-CD = KS0IM001.KS0IM-REG-CD;
  KSAREC.KSA-TASK = "SC";
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11250"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11250

// Footwear select process
Function KS0I-11300()
  /* ------------------------------------------------------------*/
  /* Handle all zeros in PO ID*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-PRDCTN-MO == "  " /* and PO ID month is zero*/
   && KS0IM001.KS0IM-DLVR-MO == "  ")  /* and PO ID month is zero*/
    KS0IM001.KS0IM-PRDCTN-YR = " ";
    KS0IM001.KS0IM-PRDCTN-MO = " ";
    KS0IM001.KS0IM-DLVR-MO = " ";
  end
  ;
  /* ------------------------------------------------------------*/
  /* Check for valid style entered*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-STYLE-FND = "N";
  if (KS0IM001.KS0IM-MAP1-STY-NBR > " ") /* if a style entered*/
    KS0IW00.KS0IW-SELECT = "S1";
    KS0IW00.KS0IW-FETCH = "N1";
    KS0IW00.KS0IW-CLOSE = "C1";
    KS0I-11210(); /* Call IO6130 select*/
    KS0I-11220(); /* Call IO6130 fetch*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KS0IW00.KS0IW-STYLE-FND = "Y";
    end
    KS0I-11240(); /* IO6130 close*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Select the information to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-PRDCTN-YR > " " /* PO ID year entered*/
   && KS0IM001.KS0IM-PRDCTN-MO > " " /* and PO ID month entered*/
   && KS0IM001.KS0IM-DLVR-MO > " ")  /* and PO ID month entered*/
    if (KS0IM001.KS0IM-FCTY-CD > " ") /* and factory code entered*/
      KS0IW00.KS0IW-SELECT = "S1";
      KS0IW00.KS0IW-FETCH = "N1";
      KS0IW00.KS0IW-CLOSE = "C1";
      KS0I-11310(); /* Call KS1120 select*/
    else
      KS0IW00.KS0IW-SELECT = "S2";
      KS0IW00.KS0IW-FETCH = "N2";
      KS0IW00.KS0IW-CLOSE = "C2";
      KS0I-11310(); /* Call KS1120 select*/
    end
  else
    if (KS0IM001.KS0IM-PRBM-CD > " ") /* If Problem code entered*/
      KS0IW00.KS0IW-SELECT = "S7";
      KS0IW00.KS0IW-FETCH = "N7";
      KS0IW00.KS0IW-CLOSE = "C7";
      KS0I-11310(); /* Call KS1120 select*/
    else
      if (KS0IM001.KS0IM-STY-TYP-CD[1] > " " /* If STY-TYP-CD entered*/
       || KS0IM001.KS0IM-STY-TYP-CD[2] > " " 
       /* If STY-TYP-CD entered*/
       || KS0IM001.KS0IM-STY-TYP-CD[3] > " ")
                                   /* If STY-TYP-CD entered*/
        KS0IW00.KS0IW-SELECT = "SB";
        KS0IW00.KS0IW-FETCH = "NB";
        KS0IW00.KS0IW-CLOSE = "CB";
        KS0I-11310(); /* Call KS1120 select*/
      else
        if (KS0IM001.KS0IM-SESN-CD > " " /* If Season code entered*/
         && KS0IM001.KS0IM-SESN-YR-RNG > " ") /* and Season year entered*/
          KS0IW00.KS0IW-SELECT = "S4";
          KS0IW00.KS0IW-FETCH = "N4";
          KS0IW00.KS0IW-CLOSE = "C4";
          KS0I-11310(); /* Call KS1120 select*/
        else
          if (KS0IM001.KS0IM-RULE-NBR > " ") /* If Rule Nbr entered*/
            KS0IW00.KS0IW-SELECT = "S8";
            KS0IW00.KS0IW-FETCH = "N8";
            KS0IW00.KS0IW-CLOSE = "C8";
            KS0I-11310(); /* Call KS1120 select*/
          else
            if (KS0IM001.KS0IM-HTS-NBR > " " /* If HS Number entered*/
             && KS0IW00.KS0IW-STYLE-FND == "N") /* and style not found*/
              KS0IW00.KS0IW-SELECT = "S9";
              KS0IW00.KS0IW-FETCH = "N9";
              KS0IW00.KS0IW-CLOSE = "C9";
              KS0I-11310(); /* Call KS1120 select*/
            else
              KS0IW00.KS0IW-SELECT = "S3";
              KS0IW00.KS0IW-FETCH = "N3";
              KS0IW00.KS0IW-CLOSE = "C3";
              KS0I-11310(); /* Call KS1120 select*/
            end
          end
        end
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Display line index*/
  KS0IW00.KS0IW-PAGE-IS-FULL = "N";
  KS0IW00.KS0IW-SWC = "N"; /* End of cursor switch*/
  KS0IW00.KS0IW-COUNTER = 0; /* Display counter*/
  ;
  while (KS0IW00.KS0IW-SWC == "N") /* Until end of cursor*/
    ;
    KS0I-11320(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    if (KS0IW00.KS0IW-SWC == "N") /* Not end of cursor*/
      if (KS0IM001.KS0IM-REG-CD != " ") /* if reg-cd entered*/
        KS0I-11250(); /* call KS1120*/
        ;
        if (KSA-WSY2000-RETURN-CD == 00)
          if (KS0IW01.KS0IW-GPC == "EQ")
            if (VCPROD02.KS-BUS-UNIT-CD == "EQ")
              KS0IW00.KS0IW-IX3 = 1; /* Reset index*/
              KS0I-11330(); /* Save data in display storage*/
            end
          else
            if (VCPROD02.KS-BUS-UNIT-CD != "EQ")
              KS0IW00.KS0IW-IX3 = 1; /* Reset index*/
              KS0I-11330(); /* Save data in display storage*/
            end
          end
        end
      else /* if reg-cd not entered*/
        if (KS0IW01.KS0IW-GPC == "EQ")
          if (VCPROD02.KS-BUS-UNIT-CD == "EQ")
            KS0IW00.KS0IW-IX3 = 1; /* Reset index*/
            KS0I-11330(); /* Save data in display storage*/
          end
        else
          if (VCPROD02.KS-BUS-UNIT-CD != "EQ")
            KS0IW00.KS0IW-IX3 = 1; /* Reset index*/
            KS0I-11330(); /* Save data in display storage*/
          end
        end
      end
      ;
      /* MOVE 1 TO KS0IW00.KS0IW-IX3; /* Reset index*/
      /* PERFORM KS0I-11330;          /* Save data in display storage*/
      KS0IW00.KS0IW-COUNTER = KS0IW00.KS0IW-COUNTER + 1; /* Increment cntr*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0IW00.KS0IW-PAGE-IS-FULL == "Y")
      ;
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD;
      KS0IW00.KS0IW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
      ;
      KS0I-11400(); /* Add page to temporary storage*/
      ;
      /* ---------------------------------------------------------------*/
      /* If the number of pages in temp storage is GE the maximum number*/
      /* of pages set in the entry flow to the application, then set the*/
      /* end of cursor flag and give message that max pages were reached*/
      /* ---------------------------------------------------------------*/
      if (KS0IW00.TA5TSQIX >= KS0IW00.KS0IW-MAX-PAGES)
        KS0IW00.KS0IW-SWC = "Y"; /* Endof file*/
        KSWREC.XXXMSGNO = 128; /* Max pages reached*/
        KSWREC.XXXPRCNM = "11300";
      end
      ;
      KS0IW01.KS0IW-SAVE-INDEX-TBL = KS0IW00.KS0IW-SAVE-INDEX-TBL;
      KS0IW00.KS0IW-PAGE-IS-FULL = "N";
      KS0IW01.KS0IW-GPC = KS0IM001.KS0IM-BUS-UNIT-CD; /* GPC code*/
      KS0IW01.KS0IW-GPC-DESC = KS0IM001.KS0IM-GPC-DESC;
      KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
                                   /* Style number*/
      KS0IW01.KS0IW-COLR-CD-ID = KS0IM001.KS0IM-COLR-CD-ID;
      KS0IW01.KS0IW-DIM-CD = KS0IM001.KS0IM-DIM-CD;
      KS0IW01.KS0IW-SESN-CD = KS0IM001.KS0IM-SESN-CD; /* Season code*/
      if (KS0IM001.KS0IM-SESN-YR-RNG != " ")
        KS0IW01.KS0IW-SESN-YY = KS0IM001.KS0IM-SESN-YR-RNG;
                                   /* Season year*/
        if (KS0IM001.KS0IM-SESN-YR-RNG > "65")
          KS0IW01.KS0IW-SESN-CENT = "19";
        else
          KS0IW01.KS0IW-SESN-CENT = "20";
        end
      else
        KS0IW01.KS0IW-SESN-YR = " ";
      end
      KS0IW01.KS0IW-PRDCTN-YR = KS0IM001.KS0IM-PRDCTN-YR; /* PO ID*/
      KS0IW01.KS0IW-PRDCTN-MO = KS0IM001.KS0IM-PRDCTN-MO; /* PO ID*/
      KS0IW01.KS0IW-DLVR-MO = KS0IM001.KS0IM-DLVR-MO; /* PO ID*/
      KS0IW01.KS0IW-FCTY-CD = KS0IM001.KS0IM-FCTY-CD; /* Factory code*/
      KS0IW01.KS0IW-ORIG-CD = KS0IM001.KS0IM-ORIG-CD; /* Origin code*/
      KS0IW01.KS0IW-US-MADE-FLAG = KS0IM001.KS0IM-US-MADE-FLAG;
      KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR; /* HS number*/
      KS0IW01.KS0IW-RULE-NBR-MAP = KS0IM001.KS0IM-RULE-NBR; /* Rule nbr*/
      KS0IW01.KS0IW-RULE-NBR = KS0IW00.KS0IW-RULE-NBR; /* Rule nbr*/
      KS0IW01.KS0IW-QOTA-CAT-CD = KS0IM001.KS0IM-QOTA-CAT-CD; /* Quota*/
      KS0IW01.KS0IW-TEAM-CD = KS0IM001.KS0IM-TEAM-CD; /* Team code*/
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD; /* Problem code*/
      KS0IW01.KS0IW-DIV-CD = KS0IM001.KS0IM-DIV-CD; /* Division code*/
      KS0IW01.KS0IW-STAT = KS0IM001.KS0IM-STAT; /* Status code*/
      KS0IW01.KS0IW-EXP-STYLE = KS0IM001.KS0IM-EXP-STYLE;
      KS0IW01.KS0IW-STY-TYP-CD1 = KS0IM001.KS0IM-STY-TYP-CD[1];
      KS0IW01.KS0IW-STY-TYP-CD2 = KS0IM001.KS0IM-STY-TYP-CD[2];
      KS0IW01.KS0IW-STY-TYP-CD3 = KS0IM001.KS0IM-STY-TYP-CD[3];
      KS0IW01.KS0IW-REG-CD = KS0IM001.KS0IM-REG-CD;
      ;
      KS0IW00.KS0IW-IX1 = 1; /* Reset index*/
      KS0IW00.KS0IW-IXM = 1;
      KS0IW00.KS0IW-IX3 = 1;
      ;
      KS0I-11339(); /* add last display line*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-11340(); /* Close the selected set cursor*/
  ;
  ;
end // end KS0I-11300

// Call KS1120 select
Function KS0I-11310()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-11311(); /* Set wildcards*/
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11310"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11310

// Set KS1120 wildcard values
Function KS0I-11311()
  /* ------------------------------------------------------------*/
  /* Set wildcards for KS1120 Call.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  set VCPROB01 empty; /* Clear row storage area*/
  set KSAREC empty; /* Clear row storage area*/
  set PC6REC empty; /* Clear row storage area*/
  set PG2REC empty; /* Clear row storage area*/
  ;
  KS0IW00.KS0IW-KS1120-SW = "Y"; /* KS1120 set selected*/
  KS0IW00.KS0IW-IO6130-SW = "N";
  ;
  if (KS0IW01.KS0IW-GPC == "EQ")
    VCPROD02.KS-BUS-UNIT-CD = "EQ"; /* BUS UNIT CODE*/
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0IW01.KS0IW-GPC;
  end
  /* MOVE KS0IW01.KS0IW-GPC TO VCPROD02.XGPCD;/* GPC*/
  /* KS0IW01.KS0IW-GPC EQ '02'     /* If footwear GPC*/
  if (KS0IW01.KS0IW-POIDT > " ")
    if (KS0IW01.KS0IW-PRDCTN-YR > "65")
      KS0IW01.KS0IW-PRDCTN-CEN = "19";
    else
      KS0IW01.KS0IW-PRDCTN-CEN = "20";
    end
  end
  if (KS0IW01.KS0IW-POIDT > " ")
    KS0IW01.KS0IW-POIDT-NUM = KS0IW01.KS0IW-POIDT;
  else
    KS0IW01.KS0IW-POIDT-NUM = 0;
  end
  PC6REC.PC3POIDT = KS0IW01.KS0IW-POIDT-NUM; /* PO ID date*/
  if (KS0IW01.KS0IW-FCTY-CD > " ") /* If factory code entered*/
    PC6REC.FY1FCTYC = KS0IW01.KS0IW-FCTY-CD; /* Factory code*/
  else
    PC6REC.FY1FCTYC = "*";
  end
  ;
  if (KS0IM001.KS0IM-US-MADE-FLAG == "Y")
    VCPROD02.KS-XCT-ORIG-CD[1] = "USA";
  else
    VCPROD02.KS-XCT-ORIG-CD[1] = "*";
  end
  if (KS0IW01.KS0IW-ORIG-CD > " ")
    VCPROD02.KS-XCT-ORIG-CD[1] = KS0IW01.KS0IW-ORIG-CD;
  else
    if (VCPROD02.KS-XCT-ORIG-CD[1] == " ")
      VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
    end
  end
  ;
  if (KS0IW01.KS0IW-SESN-CD > " ") /* Season code entered*/
    if (KS0IM001.KS0IM-SESN-YR-RNG > "  ")
      if (KS0IW01.KS0IW-SESN-YY > "65")
        KS0IW01.KS0IW-SESN-CENT = "19";
      else
        KS0IW01.KS0IW-SESN-CENT = "20";
      end
    else
      KS0IW01.KS0IW-SESN-CENT = "0";
    end
    if (KS0IW01.KS0IW-SESN-YR > "0")
      KS0IW01.KS0IW-SESN-YR-NUM = KS0IW01.KS0IW-SESN-YR;
      VCPROD02.XSNYR = KS0IW01.KS0IW-SESN-YR-NUM; /* Season year*/
    else
      VCPROD02.XSNYR = -1; /* Season year*/
    end
    VCPROD02.XSECD = KS0IW01.KS0IW-SESN-CD; /* Season code*/
  else
    VCPROD02.XSNYR = -1; /* Season year*/
    VCPROD02.XSECD = "*"; /* Season code*/
  end
  ;
  if (KS0IW00.KS0IW-SELECT == "S3") /* If select by style*/
    VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
    VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
  else
    if (KS0IW01.KS0IW-STYLE > " ") /* If style entered*/
      VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
      VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
      if (KS0IW01.KS0IW-STY-CHAR-2 == " ") /* If second char blank*/
        KS0IW01.KS0IW-STY-CHAR-2 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-3 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
        VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
        VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
        KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
      else
        if (KS0IW01.KS0IW-STY-CHAR-3 == " ") /* If third char blank*/
          KS0IW01.KS0IW-STY-CHAR-3 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
          VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
          VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
          KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
        else
          if (KS0IW01.KS0IW-STY-CHAR-4 == " ") /* If fourth char blank*/
            KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
            VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
            VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
            KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
          else
            if (KS0IW01.KS0IW-STY-CHAR-5 == " ") /* If fifth char blank*/
              KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
              KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
              KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
              VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
              VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
              KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
            else
              if (KS0IW01.KS0IW-STY-CHAR-6 == " ") /* If sixth char blank*/
                KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
                KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
                VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
                KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
              else
                if (KS0IW01.KS0IW-STY-CHAR-7 == " ") /* If seventh char blank*/
                  KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                  VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
                  VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
                  KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
                end
              end
            end
          end
        end
      end
    else
      VCPROD02.SY1STNBR = "%%%%%%%";
      VCPROD02.KS-XPRMT-STY-NBR = "%%%%%%%";
    end
  end
  ;
  if (KS0IW01.KS0IW-COLR-CD-ID > " ") /* Color entered*/
    VCPROD02.SY2CLRID = KS0IW01.KS0IW-COLR-CD-ID;
  else
    VCPROD02.SY2CLRID = "*";
  end
  ;
  if (KS0IW01.KS0IW-DIM-CD > " ") /* Dimension entered*/
    VCPROD02.XDMCD = KS0IW01.KS0IW-DIM-CD;
  else
    VCPROD02.XDMCD = "*";
  end
  ;
  if (KS0IW01.KS0IW-HTS-NBR > " ")
    KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-HTS-NBR;
    if (KS0IW01.KS0IW-HTS-BYTE[11] == "-" /* If range entered*/
     || KS0IW01.KS0IW-HTS-BYTE[11] == ",") /* If range entered*/
      if (KS0IW01.KS0IW-HTS-CPTR-CD > " ")
        VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
      end
      if (KS0IW01.KS0IW-HTS-HDG-CD > " ")
        VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-BYTE[12] > " "
       && KS0IW01.KS0IW-HTS-BYTE[13] > " ")
        KS0IW01.KS0IW-HTS-2ND-SHDG1 = KS0IW01.KS0IW-HTS-BYTE[12];
        KS0IW01.KS0IW-HTS-2ND-SHDG2 = KS0IW01.KS0IW-HTS-BYTE[13];
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
        end
      end
    else
      if (KS0IW01.KS0IW-HTS-CPTR-CD > " ")
        VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
      end
      if (KS0IW01.KS0IW-HTS-HDG-CD > " ")
        VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
      end
      if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
      end
      if (KS0IW01.KS0IW-HTS-STAT-CD > " ")
        VCPROD02.KS-HTS-STAT-CD = KS0IW01.KS0IW-HTS-STAT-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-STAT-CD = "*";
        end
      end
    end
  else
    VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
    VCPROD02.KS-HTS-HDG-CD = "*";
    VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
    VCPROD02.KS-HTS-STAT-CD = "*";
  end
  if (KS0IW01.KS0IW-TEAM-CD > " ")
    VCPROD02.KS-TEAM-CD = KS0IW01.KS0IW-TEAM-CD;
    if (VCPROD02.KS-HTS-CPTR-CD == "*")
      VCPROD02.KS-HTS-CPTR-CD = "**";
    end
  else
    if (KS0IW00.KS0IW-SELECT == "S9") /* if looking by HS #*/
      VCPROD02.KS-TEAM-CD = "*";
    else
      VCPROD02.KS-TEAM-CD = "***";
    end
  end
  if (KS0IW00.KS0IW-SELECT == "S8") /* if looking by Rule Nbr*/
    KS0IW01.KS0IW-RULE-NBR = KS0IM001.KS0IM-RULE-NBR;
  end
  if (KS0IW01.KS0IW-RULE-NBR > " ")
    VCPROD02.KS-RULE-NBR = KS0IW01.KS0IW-RULE-NBR;
  else
    VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  end
  ;
  if (KS0IW00.KS0IW-SELECT == "S5" /* If feature code select*/
   || KS0IW00.KS0IW-SELECT == "S7") /* If feature code select*/
    VCPROB01.YKP-PRBM-CD = KS0IW01.KS0IW-PRBM-CD;
  else
    if (KS0IW01.KS0IW-PRBM-CD > " ")
      VCPROD02.KS-PRBM-NBR = -2;
    else
      VCPROD02.KS-PRBM-NBR = -1;
    end
  end
  ;
  if (KS0IW01.KS0IW-STAT > " ")
    VCPROD02.YPR-PROD-STAT-CD = KS0IW01.KS0IW-STAT;
  else
    VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD1 > " ")
    KSAREC.YKS-STY-TYP-CD[1] = KS0IW01.KS0IW-STY-TYP-CD1;
  else
    KSAREC.YKS-STY-TYP-CD[1] = "**";
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD2 > " ")
    KSAREC.YKS-STY-TYP-CD[2] = KS0IW01.KS0IW-STY-TYP-CD2;
  else
    KSAREC.YKS-STY-TYP-CD[2] = "**";
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD3 > " ")
    KSAREC.YKS-STY-TYP-CD[3] = KS0IW01.KS0IW-STY-TYP-CD3;
  else
    KSAREC.YKS-STY-TYP-CD[3] = "**";
  end
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-SELECT;
  ;
  ;
end // end KS0I-11311

// Call KS1120 fetch
Function KS0I-11320()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-FETCH;
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0IW00.KS0IW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11320"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11320

// Save Ftwr display process
Function KS0I-11330()
  /* ------------------------------------------------------------*/
  /* If first line on subsequent page, save heading information.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.TA5TSQIX > 0 /* Not the first page*/
   && KS0IW00.KS0IW-IXM == 1) /* and first line on page*/
    ;
    KS0IW01.KS0IW-GPC = VCPROD02.XGPCD; /* GPC code*/
    KS0IW01.KS0IW-STYLE = VCPROD02.SY1STNBR; /* Style number*/
    KS0IW01.SY1STYNM = VCPROD02.KS-SHORT-STY-NM; /* Style name*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (VCPROD02.KS-PRBM-NBR > 0 /* If problem exists*/
   || KS0IM001.KS0IM-PRBM-CD > " ") /* or problem entered*/
    KS0IW00.KS0IW-SWP = "N"; /* Initialize EOF switch*/
    KS0I-11231(); /* Select VCPROB01 set*/
    while (KS0IW00.KS0IW-SWP == "N" /* Until EOF*/
     && KS0IW00.KS0IW-IX2 <= 25)
      KS0I-11232(); /* Fetch VCPROB01 rows*/
    end
    KS0I-11233(); /* Close VCPROB01 set*/
  else
    KS0IW01.KS0IW-PRBM-CD = " ";
    KS0IW00.KS0IW-PRBM-TABLE = " ";
  end
  ;
  set VHSNBR01 empty; /* Clear VHSNBR01 record*/
  KS0IW00.KS0IW-FORMATTED-RATE = " "; /* Clear gen dty rt*/
  if (KS0IW01.KS0IW-TEAM-CD > " " /* If team code entered*/
   || VCPROD02.KS-HTS-CPTR-CD > " ") /* or HS number exists*/
    ;
    if (VCPROD02.KS-HTS-2ND-SHDG-CD[2] == " "
     && VCPROD02.KS-HTS-STAT-CD == " "
     && KS0IW01.KS0IW-GPC == "02")
      KS0IW00.KS0IW-HTS-CPTR = VCPROD02.KS-HTS-CPTR-CD;
                                   /* Chapter cd*/
      KS0IW00.KS0IW-HTS-HDG = VCPROD02.KS-HTS-HDG-CD;
                                   /* Chapter hdg*/
      KS0IW00.KS0IW-HTS-1ST-SHDG = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KS0IW00.KS0IW-HTS-2ND-SHDG-1 = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
      KS0IW00.KS0IW-HTS-2ND-SHDG-2 = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
      ;
      KS0I-11331(); /* Select VHSNBR01 set*/
      KS0I-11332(); /* Fetch  VHSNBR01 row*/
      KS0I-11333(); /* Close  VHSNBR01 set*/
      KS0I-11235(); /* Format general duty rate*/
      ;
    else
      if (VCPROD02.KS-HTS-2ND-SHDG-CD[2] == " ")
        KS0IW01.KS0IW-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
                                   /* Chapter cd*/
        KS0IW01.KS0IW-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
                                   /* Chapter hdg*/
        KS0IW01.KS0IW-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
        KS0IW01.KS0IW-HTS-2ND-SHDG-CD = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
        KS0IW01.KS0IW-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
        ;
        KS0I-11234(); /* Select VHSNBR01 row*/
        KS0I-11235(); /* Format general duty rate*/
      else
        KS0IW00.KS0IW-HTS-CPTR = VCPROD02.KS-HTS-CPTR-CD;
                                   /* Chapter cd*/
        KS0IW00.KS0IW-HTS-HDG = VCPROD02.KS-HTS-HDG-CD;
                                   /* Chapter hdg*/
        KS0IW00.KS0IW-HTS-1ST-SHDG = VCPROD02.KS-HTS-1ST-SHDG-CD;
        KS0IW00.KS0IW-HTS-2ND-SHDG-1 = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
        KS0IW00.KS0IW-HTS-2ND-SHDG-2 = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
        ;
        KS0I-11331(); /* Select VHSNBR01 set*/
        KS0I-11332(); /* Fetch  VHSNBR01 row*/
        KS0I-11333(); /* Close  VHSNBR01 set*/
        ;
        KS0IW00.KS0IW-FORMATTED-RATE = "CHECK FOB";
      end
    end
  end
  ;
  KS0I-11339(); /* Add line to display storage*/
  ;
  ;
end // end KS0I-11330

// Select VHSNBR01 set
Function KS0I-11331()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSNBR01 empty; /* Clear row storage area*/
  ;
  VHSNBR01.KS-HTS-CPTR-CD = KS0IW00.KS0IW-HTS-CPTR; /* Chapter cd*/
  VHSNBR01.KS-HTS-HDG-CD = KS0IW00.KS0IW-HTS-HDG; /* Chapter hdg*/
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0IW00.KS0IW-HTS-1ST-SHDG;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0IW00.KS0IW-HTS-2ND-SHDG-1;
  ;
  try
    call "IO6120" ("S1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11331"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11331

// Fetch  VHSNBR01 row
Function KS0I-11332()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6120" ("N1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11332"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSNBR01.VHSNBR01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11332

// Close  VHSNBR01 set
Function KS0I-11333()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6120" ("C1", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11333"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11333

// Obtain VPOITM01 max
Function KS0I-11338()
  /* ------------------------------------------------------------*/
  /* Obtain the factory information.*/
  /* ------------------------------------------------------------*/
  ;
  set PC6REC empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "M3"; /* Call function*/
  PC6REC.XGPCD = KS0IW01.XGPCD[KS0IW-IXM]; /* GPC code*/
  PC6REC.SY1STNBR = KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM];
  PC6REC.SY2CLRID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IXM];
  PC6REC.XDMCD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IXM];
  ;
  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0   /* IF normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -305) /* or zero returned*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11338"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT MAX OF POIDT ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0I-11338

// Save Ftwr display line
Function KS0I-11339()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-EXP-STYLE == "N") /* If exclude exp style*/
    if (VCPROD02.SY1STNBR == " ")
      return; /* Return to previous process*/
    end
  else
    if (KS0IM001.KS0IM-EXP-STYLE == "Y") /* If only exp style*/
      if (VCPROD02.SY1STNBR > " ")
        return; /* Return to previous process*/
      end
    end
  end
  ;
  if (KS0IM001.KS0IM-PRBM-CD > " ") /* If problem code entered*/
    KS0IW00.KS0IW-IX1 = 1; /* Initialize index*/
    KS0IW00.KS0IW-PRBM-FND = "N"; /* Problem found switch*/
    while (KS0IW00.KS0IW-IX1 <= 25)
      if (KS0IM001.KS0IM-PRBM-CD == KS0IW00.KS0IW-PRBM[KS0IW-IX1])
        KS0IW00.KS0IW-PRBM-FND = "Y";
        KS0IW00.KS0IW-IX1 = 25;
      end
      ;
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
    if (KS0IW00.KS0IW-PRBM-FND == "N") /* Problem not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD1 > " "
   || KS0IW01.KS0IW-STY-TYP-CD2 > " "
   || KS0IW01.KS0IW-STY-TYP-CD3 > " ")
    if (VCPROD02.YKS-STY-TYP-CD == " ")
      return;
    else
      if (VCPROD02.YKS-STY-TYP-CD == KS0IW01.KS0IW-STY-TYP-CD1
       || VCPROD02.YKS-STY-TYP-CD == KS0IW01.KS0IW-STY-TYP-CD2
       || VCPROD02.YKS-STY-TYP-CD == KS0IW01.KS0IW-STY-TYP-CD3)
        /* next sentence*/
      else
        return;
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-DIV-CD > " ") /* If div-cd entered*/
    set PG2REC empty;
    PG2REC.XGPCD = VCPROD02.XGPCD;
    PG2REC.SY1STNBR = VCPROD02.SY1STNBR;
    PG2REC.SY2CLRID = VCPROD02.SY2CLRID;
    PG2REC.XDMCD = VCPROD02.XDMCD;
    KS0I-21501(); /* select unique SYCLR01*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        if (PG2REC.XDVCD1 == KS0IW01.KS0IW-DIV-CD /* If div-cd match*/
         || PG2REC.XBCCD == KS0IW01.KS0IW-DIV-CD) /* If brand-cd match*/
          /* next sentence*/
        else
          return; /* return to previous process*/
        end
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-TEAM-CD > " ") /* If team code entered*/
    if (VCPROD02.KS-TEAM-CD > " ") /* If override team exists*/
      if (VCPROD02.KS-TEAM-CD == KS0IW01.KS0IW-TEAM-CD)
                                  /* Continue on*/
      else
        ;
        return; /* Return to previous process*/
        ;
      end
    else
      if (VHSNBR01.KS-TEAM-CD > " ") /* If HS team code exists*/
        if (VHSNBR01.KS-TEAM-CD == KS0IW01.KS0IW-TEAM-CD)
                                  /* Continue on*/
        else
          ;
          return; /* Return to previous process*/
          ;
        end
      else
        ;
        return; /* Return to previous process*/
        ;
      end
    end
  end
  if (KS0IW01.KS0IW-QOTA-CAT-CD > " ") /* If quota entered*/
    if (VHSNBR01.YQT-QOTA-CAT-CD == KS0IW01.KS0IW-QOTA-CAT-CD)
                                /* Continue on*/
    else
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  if (KS0IM001.KS0IM-US-MADE-FLAG == "N"
   && VCPROD02.KS-XCT-ORIG-CD[1] == "USA"
   && VCPROD02.KS-XCT-ORIG-CD[2] == " ")
    ;
    return;
    ;
  end
  if (KS0IM001.KS0IM-HTS-NBR > " ")
    KS0IW01.KS0IW-HTS-NUMBER = KS0IM001.KS0IM-HTS-NBR;
    if (KS0IW01.KS0IW-HTS-BYTE[11] == "-")
      if (VCPROD02.KS-HTS-RNG-FL != "Y")
        return;
      end
    else
      if (KS0IW01.KS0IW-HTS-BYTE[11] == ",")
        if (VCPROD02.KS-HTS-RNG-FL != "N")
          return;
        end
      end
    end
    ;
  end
  ;
  if (VCPROD02.YPR-PROD-STAT-CD == "DS") /* If dropped style status*/
    if (KS0IW00.KS0IW-STYLE-FND == "Y" /* If valid style entered*/
     || KS0IM001.KS0IM-STAT == "DS")  
     /* continue and save style regardless of status*/
    else
      XX0XS01();
      KS0IW00.KS0IW-DATE-WORK = XX0XW01.XX0XWDAT - 00010000;
      if (PG2REC.PG-CURR-XLC-CD == PG2REC.XLCCD1)
        if (PG2REC.SY2CEDT1 < KS0IW00.KS0IW-DATE-WORK)
          return;
        end
      else
        if (PG2REC.PG-CURR-XLC-CD == PG2REC.XLCCD2)
          if (PG2REC.SY2CEDT2 < KS0IW00.KS0IW-DATE-WORK)
            return;
          end
        else
          if (PG2REC.PG-CURR-XLC-CD == PG2REC.XLCCD3)
            if (PG2REC.SY2CEDT3 < KS0IW00.KS0IW-DATE-WORK)
              return;
            end
          else
            if (PG2REC.PG-CURR-XLC-CD == PG2REC.XLCCD4)
              if (PG2REC.SY2CEDT4 < KS0IW00.KS0IW-DATE-WORK)
                return;
              end
              ;
            end
          end
        end
      end
    end
  end
  ;
  if (KS0IW00.KS0IW-IXM == 1)
    KS0IW00.KS0IW-IX1 = 1;
    ;
  else /* Figure how many lines for product*/
    KS0IW00.KS0IW-IX1 = 1;
    if (PG2REC.XMCCD1 != "000"
     && PG2REC.XMCCD1 != "   ")
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
    if (PG2REC.XMCCD2 != "000"
     && PG2REC.XMCCD2 != "   ")
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX1 + 1;
    while (KS0IW00.KS0IW-IX2 <= 10)
      if (KS0IW00.KS0IW-PRBM[KS0IW-IX2] > " ")
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      else
        KS0IW00.KS0IW-IX2 = 10; /* End loop*/
      end
      ;
      KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
    end
    ;
    KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + KS0IW00.KS0IW-IXM;
    KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    ;
  end
  ;
  if (KS0IW00.KS0IW-IX1 > 12) /* Need to start new pg*/
    KS0IW00.KS0IW-PAGE-IS-FULL = "Y";
  else
    ;
    if (KS0IW00.KS0IW-IXM == 1) /* Should blank line be inserted*/
      ;
    else
      KS0IW01.KS0IW-DTL-LINE[KS0IW-IXM] = " ";
      KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
    end
    KS0IW01.XGPCD[KS0IW-IXM] = VCPROD02.XGPCD; /* GPC code*/
    KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IXM] = VCPROD02.XSECD;
    KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IXM] = VCPROD02.XSNYR;
    if (VCPROD02.SY1STNBR > " ")
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM] = VCPROD02.SY1STNBR;
                                   /* Style*/
    else
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM] = VCPROD02.KS-XPRMT-STY-NBR;
    end
    KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IXM] = VCPROD02.KS-XPRMT-STY-NBR;
    KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IXM] = VCPROD02.SY2CLRID;
                                   /* Color*/
    KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IXM] = VCPROD02.XDMCD; /* Dimension*/
    KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IXM] = VCPROD02.YKS-STY-TYP-CD;
    KS0IW01.KS0IW-DTL-SHORT-STY-NM[KS0IW-IXM] = VCPROD02.KS-SHORT-STY-NM; /* Style Description*/
    KS0IW01.KS0IW-DTL-QOTA-CAT-CD[KS0IW-IXM] = VHSNBR01.YQT-QOTA-CAT-CD;
    KS0IW01.KS0IW-DTL-DTY-RATE[KS0IW-IXM] = KS0IW00.KS0IW-FORMATTED-RATE;
    if (VCPROD02.KS-HTS-2ND-SHDG-CD[2] > " ")
      KS0IW00.KS0IW-HTS-NBR-WORK = " ";
      KS0IW00.KS0IW-HTS-CPTR = VCPROD02.KS-HTS-CPTR-CD;
      KS0IW00.KS0IW-HTS-HDG = VCPROD02.KS-HTS-HDG-CD;
      KS0IW00.KS0IW-HTS-1ST-SHDG = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KS0IW00.KS0IW-HTS-2ND-SHDG-1 = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
      KS0IW00.KS0IW-HTS-2ND-SHDG-2 = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
      KS0IW01.KS0IW-HTS-NUMBER = KS0IW00.KS0IW-HTS-NBR-WORK;
      KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
      while (KS0IW00.KS0IW-IX2 <= 14)
        if (KS0IW00.KS0IW-IX2 == 5 /* These 3 positions must be '.'*/
         || KS0IW00.KS0IW-IX2 == 8)
          if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] != ".")
            KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX2 + 1;
            if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX1] > " ")
              KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] = ".";
            end
          end
        end
        if (KS0IW00.KS0IW-IX2 == 11)
          if (VCPROD02.KS-HTS-RNG-FL == "Y")
            KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] = "-";
          else
            KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] = ",";
          end
        end
        KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* set index up by 1*/
      end
      KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM] = KS0IW01.KS0IW-HTS-NUMBER;
    else
      if (VCPROD02.KS-HTS-CPTR-CD > " ") /* If HS number exists*/
        KS0IW01.KS0IW-DTL-HTS-CPTR-CD[KS0IW-IXM] = VCPROD02.KS-HTS-CPTR-CD;
        KS0IW01.KS0IW-DTL-HTS-HDG-CD[KS0IW-IXM] = VCPROD02.KS-HTS-HDG-CD;
        KS0IW01.KS0IW-DTL-HTS-1ST-SHDG-CD[KS0IW-IXM] = VCPROD02.KS-HTS-1ST-SHDG-CD;
        KS0IW01.KS0IW-DTL-HTS-2ND-SHDG-CD[KS0IW-IXM] = VCPROD02.KS-HTS-2ND-SHDG-CD;
        KS0IW01.KS0IW-DTL-HTS-STAT-CD[KS0IW-IXM] = VCPROD02.KS-HTS-STAT-CD;
        KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM];
        KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
        while (KS0IW00.KS0IW-IX2 <= 14)
          if (KS0IW00.KS0IW-IX2 == 5 /* These 3 positions must be '.'*/
           || KS0IW00.KS0IW-IX2 == 8 
           || KS0IW00.KS0IW-IX2 == 13)
            if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] != ".")
              KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX2 + 1;
              if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX1] > " ")
                KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] = ".";
              end
            end
          end
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* set index up by 1*/
        end
        ;
        KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM] = KS0IW01.KS0IW-HTS-NUMBER;
      end
    end
    if (KS0IM001.KS0IM-HTS-NBR == " ")
      KS0IW01.KS0IW-HTS-NBR = " ";
    else
      KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
    end
    KS0IW01.KS0IW-DTL-RULE-NBR[KS0IW-IXM] = VCPROD02.KS-RULE-NBR;
    KS0IW01.KS0IW-PRBM-NBR[KS0IW-IXM] = VCPROD02.KS-PRBM-NBR;
    KS0IW01.KS0IW-DTL-PRBM-CD[KS0IW-IXM] = KS0IW00.KS0IW-PRBM[KS0IW-IX3];
    KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1; /* Increment index*/
    if (KS0IM001.KS0IM-PRBM-CD == " ")
      KS0IW01.KS0IW-PRBM-CD = " ";
    else
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD;
    end
    KS0IW01.KS0IW-TEXT-NBR[KS0IW-IXM] = VCPROD02.KS-TXT-NBR;
                                   /* Save text*/
  /* ----------------------------------------------------------*/
  /* if this is a DS Stat, save the last POIDT*/
  /* ----------------------------------------------------------*/
    if (VCPROD02.YPR-PROD-STAT-CD == "DS")
      ;
      KS0I-11338(); /* find max POIDT*/
      if (SQLCA.VAGen_SQLCODE == 0)
        KS0IW00.KS0IW-DATE-WORK = PCYREC.PCYCOUNT;
        KS0IW01.KS0IW-DTL-LST-POIDT[KS0IW-IXM] = KS0IW00.KS0IW-DATE-WORK;
      else
        KS0IW01.KS0IW-DTL-LST-POIDT[KS0IW-IXM] = " ";
      end
    else
      KS0IW01.KS0IW-DTL-LST-POIDT[KS0IW-IXM] = " ";
    end
    KS0IW01.KS0IW-SYNCTPGN[KS0IW-IXM] = VCPROD02.SYNCTPGN; /* Page nbr*/
    ;
    if (PG2REC.XMLCD[1] != "00")
      KS0IW01.KS0IW-LCTNT-CD1[KS0IW-IXM] = PG2REC.XMLCD[1];
    else
      KS0IW01.KS0IW-LCTNT-CD1[KS0IW-IXM] = " ";
    end
    if (PG2REC.XMLCD[2] != "00")
      KS0IW01.KS0IW-LCTNT-CD2[KS0IW-IXM] = PG2REC.XMLCD[2];
    else
      KS0IW01.KS0IW-LCTNT-CD2[KS0IW-IXM] = " ";
    end
    if (PG2REC.XMLCD[3] != "00")
      KS0IW01.KS0IW-LCTNT-CD3[KS0IW-IXM] = PG2REC.XMLCD[3];
    else
      KS0IW01.KS0IW-LCTNT-CD3[KS0IW-IXM] = " ";
    end
    if (PG2REC.XMLCD[4] != "00")
      KS0IW01.KS0IW-LCTNT-CD4[KS0IW-IXM] = PG2REC.XMLCD[4];
    else
      KS0IW01.KS0IW-LCTNT-CD4[KS0IW-IXM] = " ";
    end
    if (PG2REC.XMCCD1 != "000")
      KS0IW01.KS0IW-UCTNT-CD1[KS0IW-IXM] = PG2REC.XMCCD1;
    else
      KS0IW01.KS0IW-UCTNT-CD1[KS0IW-IXM] = " ";
    end
    if (PG2REC.XMCCD2 != "000")
      KS0IW01.KS0IW-UCTNT-CD2[KS0IW-IXM] = PG2REC.XMCCD2;
    else
      KS0IW01.KS0IW-UCTNT-CD2[KS0IW-IXM] = " ";
    end
    if (PG2REC.XMCCD3 != "000")
      KS0IW01.KS0IW-UCTNT-CD3[KS0IW-IXM] = PG2REC.XMCCD3;
    else
      KS0IW01.KS0IW-UCTNT-CD3[KS0IW-IXM] = " ";
    end
    if (PG2REC.XMCCD4 != "000")
      KS0IW01.KS0IW-UCTNT-CD4[KS0IW-IXM] = PG2REC.XMCCD4;
    else
      KS0IW01.KS0IW-UCTNT-CD4[KS0IW-IXM] = " ";
    end
    if (KS0IW01.KS0IW-GPC == "02"
     && KS0IW01.KS0IW-POIDT > " ")
      if (KS0IW01.KS0IW-PRDCTN-YR > "60")
        KS0IW01.KS0IW-PRDCTN-CEN = "19";
      else
        KS0IW01.KS0IW-PRDCTN-CEN = "20";
      end
    end
    ;
    if (KS0IW01.KS0IW-POIDT > " ")
      KS0IW01.KS0IW-DTL-POID[KS0IW-IXM] = KS0IW01.KS0IW-POIDT;
    else
      KS0IW01.KS0IW-DTL-POID[KS0IW-IXM] = 0;
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
    ;
    if (PG2REC.XMCCD1 != "000" /* If shell info exists*/
     && PG2REC.XMCCD1 != "   ")
      KS0IW01.KS0IW-DTL-LINE[KS0IW-IXM] = " ";
      KS0IW00.KS0IW-DESC = "SHELL  : ";
      KS0IW00.KS0IW-CD1 = PG2REC.XMCCD1;
      KS0IW01.KS0IW-DTL-SHORT-STY-NM[KS0IW-IXM] = KS0IW00.KS0IW-GPC02-DESC;
      if (KS0IW00.KS0IW-PRBM[KS0IW-IX3] > " ")
        KS0IW01.KS0IW-DTL-PRBM-CD[KS0IW-IXM] = KS0IW00.KS0IW-PRBM[KS0IW-IX3];
        KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1; /* Increment index*/
      end
      KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
    end
    if (PG2REC.XMCCD2 != "000" /* If overlay info exists*/
     && PG2REC.XMCCD2 != "   ")
      KS0IW01.KS0IW-DTL-LINE[KS0IW-IXM] = " ";
      KS0IW00.KS0IW-DESC = "OVERLAY: ";
      KS0IW00.KS0IW-CD1 = PG2REC.XMCCD2;
      KS0IW01.KS0IW-DTL-SHORT-STY-NM[KS0IW-IXM] = KS0IW00.KS0IW-GPC02-DESC;
      if (PG2REC.XMCCD3 != "000")
        KS0IW00.KS0IW-CD3 = PG2REC.XMCCD3;
      else
        KS0IW00.KS0IW-CD3 = " ";
      end
      if (PG2REC.XMCCD4 != "000")
        KS0IW00.KS0IW-CD4 = PG2REC.XMCCD4;
      else
        KS0IW00.KS0IW-CD4 = " ";
      end
      KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM] = KS0IW00.KS0IW-GPC02-HS-NBR;
      if (KS0IW00.KS0IW-PRBM[KS0IW-IX3] > " ")
        KS0IW01.KS0IW-DTL-PRBM-CD[KS0IW-IXM] = KS0IW00.KS0IW-PRBM[KS0IW-IX3];
        KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1; /* Increment index*/
      end
      KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
    end
    while (KS0IW00.KS0IW-IX3 <= 10)
      if (KS0IW00.KS0IW-PRBM[KS0IW-IX3] > " ") /* If problem exists*/
        KS0IW01.KS0IW-DTL-LINE[KS0IW-IXM] = " ";
        KS0IW01.KS0IW-DTL-PRBM-CD[KS0IW-IXM] = KS0IW00.KS0IW-PRBM[KS0IW-IX3];
        KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1; /* Increment index*/
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
      else
        KS0IW00.KS0IW-IX3 = 11;
      end
    end
  end
  ;
  ;
end // end KS0I-11339

// Call KS1120 close
Function KS0I-11340()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-CLOSE;
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11340"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11340

// Add page to temporary storage
Function KS0I-11400()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW01.XXXTSLEN = KS0IW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set KS0IW01 empty; /* M001 display storage*/
    ;
    KS0IW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11400"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11400

// Apparel select process
Function KS0I-11500()
  /* ------------------------------------------------------------*/
  /* Verify sesn/yr is entered*/
  /* ------------------------------------------------------------*/
  /* ;*/
  /* IF KS0IM001.KS0IM-SESN-CD GT ' '*/
  /* AND KS0IM001.KS0IM-SESN-YR-RNG GT '  ';*/
  /* ;*/
  /* /* Next Sentence*/
  /* ;*/
  /* ELSE;*/
  /* ;*/
  /* MOVE '11500' TO KSWREC.XXXPRCNM;/* Module identification*/
  /* SET KS0IM001.KS0IM-SESN-YR-RNG CURSOR,BRIGHT;/* Highlight*/
  /* SET KS0IM001.KS0IM-SESN-CD CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 160 TO EZEMNO;            /* Field missing*/
  /* END;*/
  ;
  /* ------------------------------------------------------------*/
  /* Handle all zeros in PO ID*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-PRDCTN-MO == "  " /* and PO ID month is zero*/
   && KS0IM001.KS0IM-DLVR-MO == "  ")  /* and PO ID month is zero*/
    KS0IM001.KS0IM-PRDCTN-YR = " ";
    KS0IM001.KS0IM-PRDCTN-MO = " ";
    KS0IM001.KS0IM-DLVR-MO = " ";
  end
  ;
  ;
  ;
  /* ------------------------------------------------------------*/
  /* Determine if full or partial style has been entered.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-STYLE-FND = "N";
  if (KS0IM001.KS0IM-MAP1-STY-NBR > " ") /* if a valid is entered;*/
    KS0IW00.KS0IW-SELECT = "S1";
    KS0IW00.KS0IW-FETCH = "N1";
    KS0IW00.KS0IW-CLOSE = "C1";
    KS0I-11510(); /* Call IO6130 select*/
    KS0I-11520(); /* Fetch next IO6130 row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KS0IW00.KS0IW-STYLE-FND = "Y";
    end
    KS0I-11540(); /* IO6130 Close*/
  end
  /* ------------------------------------------------------------*/
  /* Reset IO Mod Flags*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IO6130-SW = "N"; /* IO Mod IO613Q called*/
  KS0IW00.KS0IW-KS1120-SW = "N"; /* IO Mod KS112Q called*/
  ;
  /* ------------------------------------------------------------*/
  /* Select the information to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-PRDCTN-YR > " " /* PO ID year entered*/
   && KS0IM001.KS0IM-PRDCTN-MO > " " /* and PO ID month entered*/
   && KS0IM001.KS0IM-DLVR-MO > " ")  /* and PO ID month entered*/
  /* IF KS0IM001.KS0IM-FCTY-CD GT ' ';/* and factory code entered*/
    KS0IW00.KS0IW-SELECT = "SD";
    KS0IW00.KS0IW-FETCH = "ND";
    KS0IW00.KS0IW-CLOSE = "CD";
    KS0I-11610(); /* Call KS112Q select*/
  else
  /* MOVE 'S2' TO KS0IW00.KS0IW-SELECT;*/
  /* MOVE 'N2' TO KS0IW00.KS0IW-FETCH;*/
  /* MOVE 'C2' TO KS0IW00.KS0IW-CLOSE;*/
  /* PERFORM KS0I-11610;          /* Call KS112Q select*/
  /* END;*/
  /* SE;*/
    if (KS0IM001.KS0IM-PRBM-CD > " ") /* If Prbm code entered*/
      KS0IW00.KS0IW-SELECT = "S5";
      KS0IW00.KS0IW-FETCH = "N5";
      KS0IW00.KS0IW-CLOSE = "C5";
      KS0I-11610(); /* Call KS112Q select*/
    else
      if (KS0IM001.KS0IM-STY-TYP-CD[1] > " " /* If STY-TYP entered*/
       || KS0IM001.KS0IM-STY-TYP-CD[2] > " " /* If STY-TYP entered*/
       || KS0IM001.KS0IM-STY-TYP-CD[3] > " ") /* If STY-TYP entered*/
        KS0IW00.KS0IW-SELECT = "S7";
        KS0IW00.KS0IW-FETCH = "N7";
        KS0IW00.KS0IW-CLOSE = "C7";
        KS0I-11510(); /* Call IO613Q select*/
      else
        if (KS0IM001.KS0IM-SESN-CD > " " /* If Season code entered*/
         && KS0IM001.KS0IM-SESN-YR-RNG > " ") /* and Season year entered*/
          KS0IW00.KS0IW-SELECT = "S2";
          KS0IW00.KS0IW-FETCH = "N2";
          KS0IW00.KS0IW-CLOSE = "C2";
          KS0I-11510(); /* Call IO613Q select*/
        else
          if (KS0IM001.KS0IM-RULE-NBR > " ") /* If Ruling Number entered*/
            KS0IW00.KS0IW-SELECT = "S5";
            KS0IW00.KS0IW-FETCH = "N5";
            KS0IW00.KS0IW-CLOSE = "C5";
            KS0I-11510(); /* Call IO613Q select*/
          else
            if (KS0IM001.KS0IM-HTS-NBR > " " /* If HS Number entered*/
             && KS0IW00.KS0IW-STYLE-FND == "N") /* stle not found*/
              KS0IW00.KS0IW-SELECT = "S6";
              KS0IW00.KS0IW-FETCH = "N6";
              KS0IW00.KS0IW-CLOSE = "C6";
              KS0I-11510(); /* Call IO613Q select*/
            else
              KS0IW00.KS0IW-SELECT = "S1";
              KS0IW00.KS0IW-FETCH = "N1";
              KS0IW00.KS0IW-CLOSE = "C1";
              KS0I-11510(); /* Call IO613Q select*/
            end
          end
        end
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Display line index*/
  KS0IW00.KS0IW-PAGE-IS-FULL = "N";
  KS0IW00.KS0IW-SWC = "N"; /* End of cursor switch*/
  KS0IW00.KS0IW-COUNTER = 0; /* Display counter*/
  ;
  while (KS0IW00.KS0IW-SWC == "N") /* Until end of cursor*/
    ;
    if (KS0IW00.KS0IW-KS1120-SW == "Y")
      KS0I-11620(); /* Fetch next KS112Q row*/
    else
      if (KS0IW00.KS0IW-IO6130-SW == "Y")
        KS0I-11520(); /* Fetch next IO613Q row*/
      else
        KS0IW00.KS0IW-SWC = "Y";
      end
    end
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0IW00.KS0IW-SWC == "N") /* Not end of cursor*/
      if (KS0IM001.KS0IM-REG-CD != " ") /* if reg-cd entered*/
        KS0I-11550(); /* call KS112Q*/
        ;
        if (KSA-WSY2000-RETURN-CD == 00)
          if (KS0IW01.KS0IW-GPC == "EQ")
            if (VCPROD02.KS-BUS-UNIT-CD == "EQ")
              KS0I-11530(); /* Save data in display storage*/
            end
          else
            if (VCPROD02.KS-BUS-UNIT-CD != "EQ")
              KS0I-11530(); /* Save data in display storage*/
            end
          end
        end
      else /* if reg-cd not entered*/
        if (KS0IW01.KS0IW-GPC == "EQ")
          if (VCPROD02.KS-BUS-UNIT-CD == "EQ")
            KS0I-11530(); /* Save data in display storage*/
          end
        else
          if (VCPROD02.KS-BUS-UNIT-CD != "EQ")
            KS0I-11530(); /* Save data in display storage*/
          end
        end
      end
      KS0IW00.KS0IW-COUNTER = KS0IW00.KS0IW-COUNTER + 1; /* Increment cntr*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0IW00.KS0IW-PAGE-IS-FULL == "Y")
      ;
      KS0IW00.KS0IW-DTL-LINE[1] = KS0IW01.KS0IW-DTL-LINE[12];
      KS0IW00.KS0IW-DTL-LINE[2] = KS0IW01.KS0IW-DTL-LINE[13];
      KS0IW00.KS0IW-DTL-LINE[3] = KS0IW01.KS0IW-DTL-LINE[14];
      KS0IW00.KS0IW-DTL-LINE[4] = KS0IW01.KS0IW-DTL-LINE[15];
      KS0IW01.KS0IW-DTL-LINE[12] = " ";
      KS0IW01.KS0IW-DTL-LINE[13] = " ";
      KS0IW01.KS0IW-DTL-LINE[14] = " ";
      KS0IW01.KS0IW-DTL-LINE[15] = " ";
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD;
      KS0IW00.KS0IW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
      ;
      KS0I-11400(); /* Add page to temporary storage*/
      ;
      /* ---------------------------------------------------------------*/
      /* If the number of pages in temp storage is GE the maximum number*/
      /* of pages set in the entry flow of the application, then set the*/
      /* end of cursor flag and give message that max pages were reached*/
      /* ---------------------------------------------------------------*/
      if (KS0IW00.TA5TSQIX >= KS0IW00.KS0IW-MAX-PAGES)
        KS0IW00.KS0IW-SWC = "Y"; /* Set end of file*/
        KSWREC.XXXMSGNO = 128; /* Max pages reached*/
        KSWREC.XXXPRCNM = "11500";
      end
      ;
      KS0IW01.KS0IW-SAVE-INDEX-TBL = KS0IW00.KS0IW-SAVE-INDEX-TBL;
      KS0IW00.KS0IW-PAGE-IS-FULL = "N";
      KS0IW01.KS0IW-GPC = KS0IM001.KS0IM-BUS-UNIT-CD; /* GPC code*/
      KS0IW01.KS0IW-GPC-DESC = KS0IM001.KS0IM-GPC-DESC;
      KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
                                   /* Style number*/
      KS0IW01.KS0IW-SESN-CD = KS0IM001.KS0IM-SESN-CD; /* Season code*/
      if (KS0IM001.KS0IM-SESN-YR-RNG >= "00"
       && KS0IM001.KS0IM-SESN-YR-RNG <= "99")
        KS0IW01.KS0IW-SESN-YY = KS0IM001.KS0IM-SESN-YR-RNG;
                                   /* Season year*/
      else
        KS0IW01.KS0IW-SESN-YY = " ";
      end
      KS0IW01.KS0IW-PRDCTN-YR = KS0IM001.KS0IM-PRDCTN-YR; /* PO ID*/
      KS0IW01.KS0IW-PRDCTN-MO = KS0IM001.KS0IM-PRDCTN-MO; /* PO ID*/
      KS0IW01.KS0IW-DLVR-MO = KS0IM001.KS0IM-DLVR-MO; /* PO ID*/
      KS0IW01.KS0IW-FCTY-CD = KS0IM001.KS0IM-FCTY-CD;
                                   /* Factory code*/
      ;
      KS0IW01.KS0IW-ORIG-CD = KS0IM001.KS0IM-ORIG-CD; /* Origin code*/
      KS0IW01.KS0IW-US-MADE-FLAG = KS0IM001.KS0IM-US-MADE-FLAG;
      KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR; /* HS number*/
      KS0IW01.KS0IW-RULE-NBR-MAP = KS0IM001.KS0IM-RULE-NBR; /* Rule nbr*/
      KS0IW01.KS0IW-RULE-NBR = KS0IW00.KS0IW-RULE-NBR; /* Rule nbr*/
      KS0IW01.KS0IW-QOTA-CAT-CD = KS0IM001.KS0IM-QOTA-CAT-CD;
      KS0IW01.KS0IW-TEAM-CD = KS0IM001.KS0IM-TEAM-CD; /* Team code*/
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD; /* Problem code*/
      KS0IW01.KS0IW-DIV-CD = KS0IM001.KS0IM-DIV-CD; /* Division code*/
      KS0IW01.KS0IW-STAT = KS0IM001.KS0IM-STAT; /* Status code*/
      KS0IW01.KS0IW-EXP-STYLE = KS0IM001.KS0IM-EXP-STYLE;
      KS0IW01.KS0IW-STY-TYP-CD1 = KS0IM001.KS0IM-STY-TYP-CD[1];
      KS0IW01.KS0IW-STY-TYP-CD2 = KS0IM001.KS0IM-STY-TYP-CD[2];
      KS0IW01.KS0IW-STY-TYP-CD3 = KS0IM001.KS0IM-STY-TYP-CD[3];
      KS0IW01.KS0IW-REG-CD = KS0IM001.KS0IM-REG-CD;
      ;
      KS0IW00.KS0IW-IX1 = 1; /* Reset index*/
      KS0IW00.KS0IW-IXM = 1;
      if (KS0IW00.KS0IW-DTL-LINE[KS0IW-IXM] > " ")
        KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = KS0IW00.KS0IW-DTL-LINE[KS0IW-IXM];
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      else
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
      end
      while (KS0IW00.KS0IW-IXM <= 4)
        KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = KS0IW00.KS0IW-DTL-LINE[KS0IW-IXM];
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      end
      if (KS0IW01.KS0IW-DTL-STY-NBR[4] > " ")
        KS0IW00.KS0IW-IXM = 5;
      else
        if (KS0IW01.KS0IW-DTL-STY-NBR[3] > " ")
          KS0IW00.KS0IW-IXM = 4;
        else
          if (KS0IW01.KS0IW-DTL-STY-NBR[2] > " ")
            KS0IW00.KS0IW-IXM = 3;
          else
            if (KS0IW01.KS0IW-DTL-STY-NBR[1] > " ")
              KS0IW00.KS0IW-IXM = 2;
            else
              KS0IW00.KS0IW-IXM = 1;
            end
          end
        end
      end
      ;
      KS0I-11539(); /* add last display line*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-KS1120-SW == "Y")
    KS0I-11640(); /* Close KS112Q set*/
  else
    if (KS0IW00.KS0IW-IO6130-SW == "Y")
      KS0I-11540(); /* Close IO613Q set*/
    end
  end
  ;
end // end KS0I-11500

// Call IO6130 select
Function KS0I-11510()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-11511(); /* Set wildcard values*/
  ;
  try
    call "VCPROD02" (KSAREC, SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11510"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11510

// Set IO6130 wildcard values
Function KS0I-11511()
  /* ------------------------------------------------------------*/
  /* Set wildcard values for IO613Q call.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  set KSAREC empty; /* Clear row storage area*/
  ;
  KS0IW00.KS0IW-IO6130-SW = "Y"; /* IO613Q set selected*/
  KS0IW00.KS0IW-KS1120-SW = "N";
  ;
  if (KS0IW01.KS0IW-GPC == "EQ")
    VCPROD02.KS-BUS-UNIT-CD = "EQ"; /* BUS UNIT CODE*/
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0IW01.KS0IW-GPC;
  end
  if (KS0IW01.KS0IW-SESN-CD > " ") /* Season code entered*/
    if (KS0IM001.KS0IM-SESN-YR-RNG > "  ")
      if (KS0IW01.KS0IW-SESN-YY > "65")
        KS0IW01.KS0IW-SESN-CENT = "19";
      else
        KS0IW01.KS0IW-SESN-CENT = "20";
      end
    else
      KS0IW01.KS0IW-SESN-YR = "0";
    end
    if (KS0IW01.KS0IW-SESN-YR > "0")
      KS0IW01.KS0IW-SESN-YR-NUM = KS0IW01.KS0IW-SESN-YR;
      VCPROD02.XSNYR = KS0IW01.KS0IW-SESN-YR-NUM; /* Season year*/
    else
      VCPROD02.XSNYR = -1; /* Season year*/
    end
    VCPROD02.XSECD = KS0IW01.KS0IW-SESN-CD; /* Season code*/
  else
    VCPROD02.XSNYR = -1; /* Season year*/
    VCPROD02.XSECD = "*"; /* Season code*/
  end
  ;
  if (KS0IW00.KS0IW-SELECT == "S1") /* If select by style requested*/
    VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
    VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
  else
    if (KS0IW01.KS0IW-STYLE > " ") /* If style entered*/
      VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
      VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
      if (KS0IW01.KS0IW-STY-CHAR-2 == " ") /* If second char blank*/
        KS0IW01.KS0IW-STY-CHAR-2 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-3 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
        VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
        VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
        KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
      else
        if (KS0IW01.KS0IW-STY-CHAR-3 == " ") /* If third char blank*/
          KS0IW01.KS0IW-STY-CHAR-3 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
          VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
          VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
          KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
        else
          if (KS0IW01.KS0IW-STY-CHAR-4 == " ") /* If fourth char blank*/
            KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
            VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
            VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
            KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
          else
            if (KS0IW01.KS0IW-STY-CHAR-5 == " ") /* If fifth char blank*/
              KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
              KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
              KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
              VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
              VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
              KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
            else
              if (KS0IW01.KS0IW-STY-CHAR-6 == " ") /* If sixth char blank*/
                KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
                KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
                VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
                KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
              else
                if (KS0IW01.KS0IW-STY-CHAR-7 == " ") /* If seventh char blank*/
                  KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                  VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
                  VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
                  KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
                end
              end
            end
          end
        end
      end
    else
      VCPROD02.SY1STNBR = "%%%%%%%";
      VCPROD02.KS-XPRMT-STY-NBR = "%%%%%%%";
    end
  end
  ;
  if (KS0IW01.KS0IW-COLR-CD-ID > " ") /* If color code entered*/
    VCPROD02.SY2CLRID = KS0IW01.KS0IW-COLR-CD-ID;
  else
    VCPROD02.SY2CLRID = "*"; /* Wildcard color*/
  end
  if (KS0IW01.KS0IW-DIM-CD > " ") /* If dimension entered*/
    VCPROD02.XDMCD = KS0IW01.KS0IW-DIM-CD;
  else
    VCPROD02.XDMCD = "*"; /* Wildcard dimension*/
  end
  ;
  if (KS0IM001.KS0IM-US-MADE-FLAG == "Y")
    VCPROD02.KS-XCT-ORIG-CD = "USA";
  else
    VCPROD02.KS-XCT-ORIG-CD = "*";
  end
  if (KS0IW01.KS0IW-ORIG-CD > " ")
    VCPROD02.KS-XCT-ORIG-CD[1] = KS0IW01.KS0IW-ORIG-CD;
  else
    if (VCPROD02.KS-XCT-ORIG-CD[1] == " ")
      VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
    end
  end
  ;
  if (KS0IW01.KS0IW-STAT > " ")
    VCPROD02.YPR-PROD-STAT-CD = KS0IW01.KS0IW-STAT;
  else
    VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  end
  ;
  if (KS0IW01.KS0IW-RULE-NBR > " ")
    VCPROD02.KS-RULE-NBR = KS0IW01.KS0IW-RULE-NBR;
  else
    VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  end
  ;
  if (KS0IW01.KS0IW-HTS-NBR > " ")
    KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-HTS-NBR;
    if (KS0IW00.KS0IW-SELECT == "S6")
      if (KS0IW01.KS0IW-HTS-BYTE[11] == "-" /* If range entered*/
       || KS0IW01.KS0IW-HTS-BYTE[11] == ",") /* If range entered*/
        VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
        VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        KS0IW01.KS0IW-HTS-2ND-SHDG1 = KS0IW01.KS0IW-HTS-BYTE[12];
        KS0IW01.KS0IW-HTS-2ND-SHDG2 = KS0IW01.KS0IW-HTS-BYTE[13];
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
      else
        VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
        VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        VCPROD02.KS-HTS-STAT-CD = KS0IW01.KS0IW-HTS-STAT-CD;
      end
    else
      if (KS0IW01.KS0IW-HTS-BYTE[11] == "-" /* If range entered*/
       || KS0IW01.KS0IW-HTS-BYTE[11] == ",") /* If range entered*/
        if (KS0IW01.KS0IW-HTS-CPTR-CD > " ")
          VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
        else
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
        if (KS0IW01.KS0IW-HTS-HDG-CD > " ")
          VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
        else
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
        if (KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
        else
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
        if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        else
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
        if (KS0IW01.KS0IW-HTS-BYTE[12] > " "
         && KS0IW01.KS0IW-HTS-BYTE[13] > " ")
          KS0IW01.KS0IW-HTS-2ND-SHDG1 = KS0IW01.KS0IW-HTS-BYTE[12];
          KS0IW01.KS0IW-HTS-2ND-SHDG2 = KS0IW01.KS0IW-HTS-BYTE[13];
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
          KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
        else
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
        end
      else
        if (KS0IW01.KS0IW-HTS-CPTR-CD > " ")
          VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
        else
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
        if (KS0IW01.KS0IW-HTS-HDG-CD > " ")
          VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
        else
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
        if (KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
        else
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
        if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        else
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
        if (KS0IW01.KS0IW-HTS-STAT-CD > " ")
          VCPROD02.KS-HTS-STAT-CD = KS0IW01.KS0IW-HTS-STAT-CD;
        else
          VCPROD02.KS-HTS-STAT-CD = "*";
        end
      end
    end
  else
    VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
    VCPROD02.KS-HTS-HDG-CD = "*";
    VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
    VCPROD02.KS-HTS-STAT-CD = "*";
  end
  if (KS0IW01.KS0IW-TEAM-CD > " ")
    VCPROD02.KS-TEAM-CD = KS0IW01.KS0IW-TEAM-CD;
    if (VCPROD02.KS-HTS-CPTR-CD == "*")
      VCPROD02.KS-HTS-CPTR-CD = "**";
    end
  else
    if (KS0IW00.KS0IW-SELECT == "S4"
     || KS0IW00.KS0IW-SELECT == "S6")
      VCPROD02.KS-TEAM-CD = "*";
    else
      VCPROD02.KS-TEAM-CD = "***";
    end
  end
  if (KS0IW01.KS0IW-QOTA-CAT-CD > " "
   && VCPROD02.KS-HTS-CPTR-CD == "*")
    VCPROD02.KS-HTS-CPTR-CD = "**";
  end
  if (KS0IW01.KS0IW-PRBM-CD > " ")
    VCPROD02.KS-PRBM-NBR = -2;
  else
    VCPROD02.KS-PRBM-NBR = -1;
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD1 > " ")
    KSAREC.YKS-STY-TYP-CD[1] = KS0IW01.KS0IW-STY-TYP-CD1;
  else
    KSAREC.YKS-STY-TYP-CD[1] = "**";
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD2 > " ")
    KSAREC.YKS-STY-TYP-CD[2] = KS0IW01.KS0IW-STY-TYP-CD2;
  else
    KSAREC.YKS-STY-TYP-CD[2] = "**";
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD3 > " ")
    KSAREC.YKS-STY-TYP-CD[3] = KS0IW01.KS0IW-STY-TYP-CD3;
  else
    KSAREC.YKS-STY-TYP-CD[3] = "**";
  end
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-SELECT;
  ;
  ;
end // end KS0I-11511

// Call IO6130 fetch
Function KS0I-11520()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-FETCH;
  ;
  try
    call "VCPROD02" (KSAREC, SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0IW00.KS0IW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11220"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11520

// Save display storage process
Function KS0I-11530()
  /* ------------------------------------------------------------*/
  /* If first line on subsequent page, save heading information.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.TA5TSQIX > 0 /* Not the first page*/
   && KS0IW00.KS0IW-IXM == 1) /* and first line on page*/
    ;
    KS0IW01.KS0IW-GPC = VCPROD02.KS-BUS-UNIT-CD; /* GPC code*/
    KS0IW01.KS0IW-STYLE = VCPROD02.SY1STNBR; /* Style number*/
    KS0IW01.SY1STYNM = VCPROD02.KS-SHORT-STY-NM; /* Style name*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (VCPROD02.KS-PRBM-NBR > 0 /* If problem exists*/
   || KS0IM001.KS0IM-PRBM-CD > " ") /* or problem entered*/
    KS0IW00.KS0IW-SWP = "N"; /* Initialize EOF switch*/
    KS0I-11231(); /* Select VCPROB01 set*/
    while (KS0IW00.KS0IW-SWP == "N" /* Until EOF*/
     && KS0IW00.KS0IW-IX2 <= 25)
      KS0I-11232(); /* Fetch VCPROB01 rows*/
    end
    KS0I-11233(); /* Close VCPROB01 set*/
  else
    KS0IW01.KS0IW-PRBM-CD = " ";
    KS0IW00.KS0IW-PRBM-TABLE = " ";
  end
  ;
  set VHSNBR01 empty; /* Clear VHSNBR01 record*/
  KS0IW00.KS0IW-FORMATTED-RATE = " "; /* Clear gen dty rt*/
  if (KS0IW01.KS0IW-TEAM-CD > " " /* If team code entered*/
   || VCPROD02.KS-HTS-CPTR-CD > " ") /* or HS number exists*/
    ;
    KS0IW01.KS0IW-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD; /* Chapter cd*/
    KS0IW01.KS0IW-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD; /* Chapter hdg*/
    KS0IW01.KS0IW-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
    KS0IW01.KS0IW-HTS-2ND-SHDG-CD = VCPROD02.KS-HTS-2ND-SHDG-CD;
    KS0IW01.KS0IW-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
    ;
    KS0I-11234(); /* Select VHSNBR01 row*/
    KS0I-11235(); /* Format general duty rate*/
  end
  ;
  if (KS0IW00.KS0IW-COUNTER > 0)
    KS0IW00.KS0IW-IX1 = 1;
    KS0IW00.KS0IW-COLOR-COMB = "N";
    while (KS0IW00.KS0IW-IX1 <= 15)
      if (VCPROD02.SY1STNBR == KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
       || VCPROD02.KS-XPRMT-STY-NBR == 
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
      )
        if (VCPROD02.KS-TXT-NBR == KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1]
         && VCPROD02.KS-PRBM-NBR == KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1]
         && VCPROD02.KS-RULE-NBR == KS0IW01.KS0IW-DTL-RULE-NBR[KS0IW-IX1]
         && VCPROD02.XSECD == KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1]
         && VCPROD02.XSNYR == KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1]
        
         && VCPROD02.YKS-STY-TYP-CD == 
        KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1]
         && VCPROD02.KS-HTS-CPTR-CD == 
        KS0IW01.KS0IW-DTL-HTS-CPTR-CD[KS0IW-IX1]
         && VCPROD02.KS-HTS-HDG-CD == 
        KS0IW01.KS0IW-DTL-HTS-HDG-CD[KS0IW-IX1]
         && VCPROD02.KS-HTS-1ST-SHDG-CD == 
        KS0IW01.KS0IW-DTL-HTS-1ST-SHDG-CD[KS0IW-IX1]
         && VCPROD02.KS-HTS-2ND-SHDG-CD == 
        KS0IW01.KS0IW-DTL-HTS-2ND-SHDG-CD[KS0IW-IX1]
         && VCPROD02.KS-HTS-STAT-CD == 
        KS0IW01.KS0IW-DTL-HTS-STAT-CD[KS0IW-IX1])
          KS0I-11537(); /* Add color to array*/
          if (KS0IM001.KS0IM-HTS-NBR == " ")
            KS0IW01.KS0IW-HTS-NBR = " ";
          else
            KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
          end
          if (KS0IM001.KS0IM-PRBM-CD == " ")
            KS0IW01.KS0IW-PRBM-CD = " ";
          end
          KS0IW00.KS0IW-IX1 = 15; /* End search*/
          KS0IW00.KS0IW-COLOR-COMB = "Y";
        end
      end
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
    ;
    if (KS0IW00.KS0IW-COLOR-COMB == "N")
      KS0I-11539(); /* Add line to display storage*/
    end
    ;
  else
    ;
    KS0I-11539(); /* Add line to display storage*/
    ;
  end
  ;
  ;
end // end KS0I-11530

// Save color array in display st
Function KS0I-11537()
  /* ------------------------------------------------------------*/
  /* Save color array in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW01.KS0IW-COLOR-1[KS0IW-IX1] == " ") /* If field blank*/
    KS0IW01.KS0IW-COLOR-1[KS0IW-IX1] = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1]; /* Move color*/
    KS0IW01.KS0IW-COLOR-2[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
    KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] = "***";
  else
    if (KS0IW01.KS0IW-COLOR-3[KS0IW-IX1] == " ") /* If field blank*/
      KS0IW01.KS0IW-COLOR-3[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                                                /* Move clr*/
    else
      if (KS0IW01.KS0IW-COLOR-4[KS0IW-IX1] == " ") /* If field blank*/
        KS0IW01.KS0IW-COLOR-4[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
      else
        if (KS0IW01.KS0IW-COLOR-5[KS0IW-IX1] == " ") /* If field blank*/
          KS0IW01.KS0IW-COLOR-5[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
        else
          if (KS0IW01.KS0IW-COLOR-6[KS0IW-IX1] == " ") /* If field blank*/
            KS0IW01.KS0IW-COLOR-6[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
          else
            if (KS0IW01.KS0IW-COLOR-7[KS0IW-IX1] == " ") /* If field blank*/
              KS0IW01.KS0IW-COLOR-7[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
            else
              if (KS0IW01.KS0IW-COLOR-8[KS0IW-IX1] == " ") /* If field blank*/
                KS0IW01.KS0IW-COLOR-8[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
              else
                if (KS0IW01.KS0IW-COLOR-9[KS0IW-IX1] == " ")
                                                          /* If field blank*/
                  KS0IW01.KS0IW-COLOR-9[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
                else
                  if (KS0IW01.KS0IW-COLOR-10[KS0IW-IX1] == " ")
                                   /* If field blank*/
                    KS0IW01.KS0IW-COLOR-10[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                  else
                    if (KS0IW01.KS0IW-COLOR-11[KS0IW-IX1] == " ")
                                   /* If field blank*/
                      KS0IW01.KS0IW-COLOR-11[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                    else
                      if (KS0IW01.KS0IW-COLOR-12[KS0IW-IX1] == " ")
                                   /* If field blank*/
                        KS0IW01.KS0IW-COLOR-12[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                      else
                        if (KS0IW01.KS0IW-COLOR-13[KS0IW-IX1] == " ")
                                   /* If field blank*/
                          KS0IW01.KS0IW-COLOR-13[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                        else
                          if (KS0IW01.KS0IW-COLOR-14[KS0IW-IX1] == " ")
                                   /* If field blank*/
                            KS0IW01.KS0IW-COLOR-14[KS0IW-IX1] = VCPROD02.SY2CLRID; /* Move clr*/
                          else
                            if (KS0IW01.KS0IW-COLOR-15[KS0IW-IX1] == " ")
                                   /* If field blank*/
                              KS0IW01.KS0IW-COLOR-15[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
                            else
                              if (KS0IW01.KS0IW-COLOR-16[KS0IW-IX1] == " ")
                                   /* If field blank*/
                                KS0IW01.KS0IW-COLOR-16[KS0IW-IX1] = VCPROD02.SY2CLRID;
                                   /* Move clr*/
                              else
                                KS0I-11238();
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KS0I-11537

// Save display storage line
Function KS0I-11539()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-EXP-STYLE == "N") /* If exclude exp style*/
    if (VCPROD02.SY1STNBR == " ")
      return; /* Return to previous process*/
    end
  else
    if (KS0IM001.KS0IM-EXP-STYLE == "Y") /* If only exp style*/
      if (VCPROD02.SY1STNBR > " ")
        return; /* Return to previous process*/
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD1 > " "
   || KS0IW01.KS0IW-STY-TYP-CD2 > " "
   || KS0IW01.KS0IW-STY-TYP-CD3 > " ")
    if (VCPROD02.YKS-STY-TYP-CD == " ")
      return;
    else
      if (VCPROD02.YKS-STY-TYP-CD == KS0IW01.KS0IW-STY-TYP-CD1
       || VCPROD02.YKS-STY-TYP-CD == KS0IW01.KS0IW-STY-TYP-CD2
       || VCPROD02.YKS-STY-TYP-CD == KS0IW01.KS0IW-STY-TYP-CD3)
        /* next sentence*/
      else
        return;
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-DIV-CD > " ") /* If DIV-CD entered*/
    set PG2REC empty;
    PG2REC.XGPCD = VCPROD02.XGPCD;
    PG2REC.SY1STNBR = VCPROD02.SY1STNBR;
    PG2REC.SY2CLRID = VCPROD02.SY2CLRID;
    PG2REC.XDMCD = VCPROD02.XDMCD;
    KS0I-21501(); /* select unique SYCLR01 record*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if no record found*/
      return; /* return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
        if (PG2REC.XDVCD1 == KS0IW01.KS0IW-DIV-CD /* div cd matched*/
         || PG2REC.XBCCD == KS0IW01.KS0IW-DIV-CD) /* brand cd matched*/
           /* next sentence*/
        else
          return; /* Return to previous process*/
        end
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-TEAM-CD > " ") /* If team code entered*/
    if (VCPROD02.KS-TEAM-CD > " ") /* If override team exists*/
      if (VCPROD02.KS-TEAM-CD == KS0IW01.KS0IW-TEAM-CD)
                                  /* Continue on*/
      else
        ;
        return; /* Return to previous process*/
        ;
      end
    else
      if (VHSNBR01.KS-TEAM-CD > " ") /* If HS team code exists*/
        if (VHSNBR01.KS-TEAM-CD == KS0IW01.KS0IW-TEAM-CD)
                                  /* Continue on*/
        else
          ;
          return; /* Return to previous process*/
          ;
        end
      else
        ;
        return; /* Return to previous process*/
        ;
      end
    end
  end
  ;
  if (KS0IW01.KS0IW-QOTA-CAT-CD > " ") /* If quota cat code entered*/
    if (VHSNBR01.YQT-QOTA-CAT-CD == KS0IW01.KS0IW-QOTA-CAT-CD)
                                /* Continue on*/
    else
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  if (KS0IM001.KS0IM-US-MADE-FLAG == "N"
   && VCPROD02.KS-XCT-ORIG-CD[1] == "USA"
   && VCPROD02.KS-XCT-ORIG-CD[2] == " ")
    ;
    return;
    ;
  end
  ;
  if (KS0IM001.KS0IM-PRBM-CD > " ") /* If problem code entered*/
    KS0IW00.KS0IW-IX1 = 1; /* Initialize index*/
    KS0IW00.KS0IW-PRBM-FND = "N"; /* Problem found switch*/
    while (KS0IW00.KS0IW-IX1 <= 25)
      if (KS0IM001.KS0IM-PRBM-CD == KS0IW00.KS0IW-PRBM[KS0IW-IX1])
        KS0IW00.KS0IW-PRBM-FND = "Y";
        KS0IW00.KS0IW-IX1 = 25;
        if (KS0IW00.KS0IW-PRBM[2] > " ") /* If more than 1 problem*/
          KS0IW01.KS0IW-PRBM-CD = "**";
        else
          KS0IW01.KS0IW-PRBM-CD = KS0IW00.KS0IW-PRBM[1];
        end
      end
      ;
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
    ;
    if (KS0IW00.KS0IW-PRBM-FND == "N") /* Problem not found*/
      return; /* Return to previous process*/
    end
  else
    if (VCPROD02.KS-PRBM-NBR > 0) /* If problem exists*/
      if (KS0IW00.KS0IW-PRBM[2] > " ") /* and more than 1 problem*/
        KS0IW01.KS0IW-PRBM-CD = "**";
      else
        KS0IW01.KS0IW-PRBM-CD = KS0IW00.KS0IW-PRBM[1];
      end
    else
      KS0IW01.KS0IW-PRBM-CD = " ";
    end
  end
  ;
  if (KS0IW00.KS0IW-IXM > 13) /* Need to start new pg*/
    KS0IW00.KS0IW-PAGE-IS-FULL = "Y";
  else
    ;
    if (KS0IW00.KS0IW-IXM > 1) /* Should blank line be inserted*/
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IXM - 1;
      if (VCPROD02.SY1STNBR == KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
       || VCPROD02.KS-XPRMT-STY-NBR == 
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1])
        if (VCPROD02.XSECD == KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1]
         && VCPROD02.XSNYR == 
        KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1])
          if (KS0IW00.KS0IW-IXM == 12)
            KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 - 1;
            if (VCPROD02.SY1STNBR == KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1])
              KS0IW01.KS0IW-DTL-LINE[12] = KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1];
              KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = " ";
              KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
              KS0IW01.KS0IW-DTL-LINE[13] = KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1];
              KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = " ";
              KS0IW00.KS0IW-IXM = 14;
            else
              KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
              KS0IW01.KS0IW-DTL-LINE[12] = KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1];
              KS0IW01.KS0IW-DTL-LINE[KS0IW-IX1] = " ";
              KS0IW00.KS0IW-IXM = 13;
            end
          end
        else
          KS0IW01.KS0IW-DTL-LINE[KS0IW-IXM] = " ";
          KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
        end
      else
        KS0IW01.KS0IW-DTL-LINE[KS0IW-IXM] = " ";
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
      end
    end
    KS0IW01.XGPCD[KS0IW-IXM] = VCPROD02.XGPCD; /* GPC code*/
    KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IXM] = VCPROD02.XSECD;
    KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IXM] = VCPROD02.XSNYR;
    if (VCPROD02.SY1STNBR > " ")
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM] = VCPROD02.SY1STNBR;
                                   /* Style*/
    else
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM] = VCPROD02.KS-XPRMT-STY-NBR;
    end
    KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IXM] = VCPROD02.KS-XPRMT-STY-NBR;
    KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IXM] = VCPROD02.SY2CLRID;
                                   /* Color*/
    KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IXM] = VCPROD02.XDMCD; /* Dimension*/
  /* IF KS0IW01.KS0IW-GPC EQ '02'*/
    if (KS0IW01.KS0IW-POIDT > " ")
      if (KS0IW01.KS0IW-PRDCTN-YR > "60")
        KS0IW01.KS0IW-PRDCTN-CEN = "19";
      else
        KS0IW01.KS0IW-PRDCTN-CEN = "20";
      end
    end
    if (KS0IW01.KS0IW-POIDT > " ")
      KS0IW01.KS0IW-DTL-POID[KS0IW-IXM] = KS0IW01.KS0IW-POIDT;
                                   /* PO id*/
    else
      KS0IW01.KS0IW-DTL-POID[KS0IW-IXM] = 0;
    end
    KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IXM] = VCPROD02.YKS-STY-TYP-CD;
    KS0IW01.KS0IW-DTL-SHORT-STY-NM[KS0IW-IXM] = VCPROD02.KS-SHORT-STY-NM; /* Style Description*/
    KS0IW01.KS0IW-DTL-QOTA-CAT-CD[KS0IW-IXM] = VHSNBR01.YQT-QOTA-CAT-CD;
    KS0IW01.KS0IW-DTL-DTY-RATE[KS0IW-IXM] = KS0IW00.KS0IW-FORMATTED-RATE;
    if (VCPROD02.KS-HTS-CPTR-CD > " ") /* If HS number exists*/
      KS0IW01.KS0IW-DTL-HTS-CPTR-CD[KS0IW-IXM] = VCPROD02.KS-HTS-CPTR-CD;
      KS0IW01.KS0IW-DTL-HTS-HDG-CD[KS0IW-IXM] = VCPROD02.KS-HTS-HDG-CD;
      KS0IW01.KS0IW-DTL-HTS-1ST-SHDG-CD[KS0IW-IXM] = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KS0IW01.KS0IW-DTL-HTS-2ND-SHDG-CD[KS0IW-IXM] = VCPROD02.KS-HTS-2ND-SHDG-CD;
      KS0IW01.KS0IW-DTL-HTS-STAT-CD[KS0IW-IXM] = VCPROD02.KS-HTS-STAT-CD;
      KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM];
      KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
      while (KS0IW00.KS0IW-IX2 <= 14)
        if (KS0IW00.KS0IW-IX2 == 5 /* These 3 positions must be '.'*/
         || KS0IW00.KS0IW-IX2 == 8 
         || KS0IW00.KS0IW-IX2 == 13)
          if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] != ".")
            KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX2 + 1;
            if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX1] > " ")
              KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] = ".";
            end
          end
        end
        KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* set index up by 1*/
      end
      ;
      KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM] = KS0IW01.KS0IW-HTS-NUMBER;
      if (KS0IM001.KS0IM-HTS-NBR == " ")
        KS0IW01.KS0IW-HTS-NBR = " ";
      else
        KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
      end
    end
    KS0IW01.KS0IW-DTL-RULE-NBR[KS0IW-IXM] = VCPROD02.KS-RULE-NBR;
    KS0IW01.KS0IW-PRBM-NBR[KS0IW-IXM] = VCPROD02.KS-PRBM-NBR;
    KS0IW01.KS0IW-DTL-PRBM-CD[KS0IW-IXM] = KS0IW01.KS0IW-PRBM-CD;
    if (KS0IM001.KS0IM-PRBM-CD == " ")
      KS0IW01.KS0IW-PRBM-CD = " ";
    else
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD;
    end
    KS0IW01.KS0IW-TEXT-NBR[KS0IW-IXM] = VCPROD02.KS-TXT-NBR;
                                   /* Save text*/
    ;
    KS0IW01.KS0IW-SYNCTPGN[KS0IW-IXM] = VCPROD02.SYNCTPGN; /* Page nbr*/
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
end // end KS0I-11539

// Call IO6130 close
Function KS0I-11540()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-CLOSE;
  ;
  try
    call "VCPROD02" (KSAREC, SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11540"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11540

// Call KS1120 using Market Reg
Function KS0I-11550()
  /* ------------------------------------------------------------*/
  /* Move values from VKSAUD01 to VCPROD02 for KS1120 call*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.XDR-PROD-REG-CD = KS0IM001.KS0IM-REG-CD;
  KSAREC.KSA-TASK = "SC";
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11550"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11550

// Call KS1120 select
Function KS0I-11610()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-11611(); /* Set wildcards*/
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11610"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11610

// Set KS1120 wildcard values
Function KS0I-11611()
  /* ------------------------------------------------------------*/
  /* Set wildcards for KS1120 Call.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  set VCPROB01 empty; /* Clear row storage area*/
  set KSAREC empty; /* Clear row storage area*/
  set PC6REC empty; /* Clear row storage area*/
  set PG2REC empty; /* Clear row storage area*/
  ;
  KS0IW00.KS0IW-KS1120-SW = "Y"; /* KS1120 set selected*/
  KS0IW00.KS0IW-IO6130-SW = "N";
  ;
  VCPROD02.XGPCD = "02"; /* GPC*/
  /* KS0IW01.KS0IW-GPC EQ '02'     /* If footwear GPC*/
  if (KS0IW01.KS0IW-POIDT > " ")
    if (KS0IW01.KS0IW-PRDCTN-YR > "65")
      KS0IW01.KS0IW-PRDCTN-CEN = "19";
    else
      KS0IW01.KS0IW-PRDCTN-CEN = "20";
    end
  end
  if (KS0IW01.KS0IW-POIDT > " ")
    KS0IW01.KS0IW-POIDT-NUM = KS0IW01.KS0IW-POIDT;
  else
    KS0IW01.KS0IW-POIDT-NUM = 0;
  end
  PC6REC.PC3POIDT = KS0IW01.KS0IW-POIDT-NUM; /* PO ID date*/
  if (KS0IW01.KS0IW-FCTY-CD > " ") /* If factory code entered*/
    PC6REC.FY1FCTYC = KS0IW01.KS0IW-FCTY-CD; /* Factory code*/
  else
    PC6REC.FY1FCTYC = "*";
  end
  ;
  if (KS0IM001.KS0IM-US-MADE-FLAG == "Y")
    VCPROD02.KS-XCT-ORIG-CD[1] = "USA";
  else
    VCPROD02.KS-XCT-ORIG-CD[1] = "*";
  end
  if (KS0IW01.KS0IW-ORIG-CD > " ")
    VCPROD02.KS-XCT-ORIG-CD[1] = KS0IW01.KS0IW-ORIG-CD;
  else
    if (VCPROD02.KS-XCT-ORIG-CD[1] == " ")
      VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
    end
  end
  ;
  if (KS0IW01.KS0IW-SESN-CD > " ") /* Season code entered*/
    if (KS0IM001.KS0IM-SESN-YR-RNG > "  ")
      if (KS0IW01.KS0IW-SESN-YY > "65")
        KS0IW01.KS0IW-SESN-CENT = "19";
      else
        KS0IW01.KS0IW-SESN-CENT = "20";
      end
    else
      KS0IW01.KS0IW-SESN-CENT = "0";
    end
    if (KS0IW01.KS0IW-SESN-YR > "0")
      KS0IW01.KS0IW-SESN-YR-NUM = KS0IW01.KS0IW-SESN-YR;
      VCPROD02.XSNYR = KS0IW01.KS0IW-SESN-YR-NUM; /* Season year*/
    else
      VCPROD02.XSNYR = -1; /* Season year*/
    end
    VCPROD02.XSECD = KS0IW01.KS0IW-SESN-CD; /* Season code*/
  else
    VCPROD02.XSNYR = -1; /* Season year*/
    VCPROD02.XSECD = "*"; /* Season code*/
  end
  ;
  if (KS0IW00.KS0IW-SELECT == "S3") /* If select by style*/
    VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
    VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
  else
    if (KS0IW01.KS0IW-STYLE > " ") /* If style entered*/
      VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
      VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
      if (KS0IW01.KS0IW-STY-CHAR-2 == " ") /* If second char blank*/
        KS0IW01.KS0IW-STY-CHAR-2 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-3 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
        KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
        VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
        VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
        KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
      else
        if (KS0IW01.KS0IW-STY-CHAR-3 == " ") /* If third char blank*/
          KS0IW01.KS0IW-STY-CHAR-3 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
          KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
          VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
          VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
          KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
        else
          if (KS0IW01.KS0IW-STY-CHAR-4 == " ") /* If fourth char blank*/
            KS0IW01.KS0IW-STY-CHAR-4 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
            KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
            VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
            VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
            KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
          else
            if (KS0IW01.KS0IW-STY-CHAR-5 == " ") /* If fifth char blank*/
              KS0IW01.KS0IW-STY-CHAR-5 = "%"; /* Move in wildcard*/
              KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
              KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
              VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
              VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
              KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
            else
              if (KS0IW01.KS0IW-STY-CHAR-6 == " ") /* If sixth char blank*/
                KS0IW01.KS0IW-STY-CHAR-6 = "%"; /* Move in wildcard*/
                KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
                VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
                KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
              else
                if (KS0IW01.KS0IW-STY-CHAR-7 == " ") /* If seventh char blank*/
                  KS0IW01.KS0IW-STY-CHAR-7 = "%"; /* Move in wildcard*/
                  VCPROD02.SY1STNBR = KS0IW01.KS0IW-STYLE;
                  VCPROD02.KS-XPRMT-STY-NBR = KS0IW01.KS0IW-STYLE;
                  KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
                end
              end
            end
          end
        end
      end
    else
      VCPROD02.SY1STNBR = "%%%%%%%";
      VCPROD02.KS-XPRMT-STY-NBR = "%%%%%%%";
    end
  end
  ;
  if (KS0IW01.KS0IW-COLR-CD-ID > " ") /* Color entered*/
    VCPROD02.SY2CLRID = KS0IW01.KS0IW-COLR-CD-ID;
  else
    VCPROD02.SY2CLRID = "*";
  end
  ;
  if (KS0IW01.KS0IW-DIM-CD > " ") /* Dimension entered*/
    VCPROD02.XDMCD = KS0IW01.KS0IW-DIM-CD;
  else
    VCPROD02.XDMCD = "*";
  end
  ;
  if (KS0IW01.KS0IW-HTS-NBR > " ")
    KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-HTS-NBR;
    if (KS0IW01.KS0IW-HTS-BYTE[11] == "-" /* If range entered*/
     || KS0IW01.KS0IW-HTS-BYTE[11] == ",") /* If range entered*/
      if (KS0IW01.KS0IW-HTS-CPTR-CD > " ")
        VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
      end
      if (KS0IW01.KS0IW-HTS-HDG-CD > " ")
        VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-BYTE[12] > " "
       && KS0IW01.KS0IW-HTS-BYTE[13] > " ")
        KS0IW01.KS0IW-HTS-2ND-SHDG1 = KS0IW01.KS0IW-HTS-BYTE[12];
        KS0IW01.KS0IW-HTS-2ND-SHDG2 = KS0IW01.KS0IW-HTS-BYTE[13];
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
        end
      end
    else
      if (KS0IW01.KS0IW-HTS-CPTR-CD > " ")
        VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
        end
      end
      if (KS0IW01.KS0IW-HTS-HDG-CD > " ")
        VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-HDG-CD = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
        end
      end
      if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
        end
      end
      if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
      end
      if (KS0IW01.KS0IW-HTS-STAT-CD > " ")
        VCPROD02.KS-HTS-STAT-CD = KS0IW01.KS0IW-HTS-STAT-CD;
      else
        if (KS0IW00.KS0IW-SELECT != "S9") /* if not selecting by HS NBR*/
          VCPROD02.KS-HTS-STAT-CD = "*";
        end
      end
    end
  else
    VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
    VCPROD02.KS-HTS-HDG-CD = "*";
    VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
    VCPROD02.KS-HTS-2ND-SHDG-CD[2] = "*";
    VCPROD02.KS-HTS-STAT-CD = "*";
  end
  if (KS0IW01.KS0IW-TEAM-CD > " ")
    VCPROD02.KS-TEAM-CD = KS0IW01.KS0IW-TEAM-CD;
    if (VCPROD02.KS-HTS-CPTR-CD == "*")
      VCPROD02.KS-HTS-CPTR-CD = "**";
    end
  else
    if (KS0IW00.KS0IW-SELECT == "S9") /* if looking by HS #*/
      VCPROD02.KS-TEAM-CD = "*";
    else
      VCPROD02.KS-TEAM-CD = "***";
    end
  end
  if (KS0IW00.KS0IW-SELECT == "S8") /* if looking by Rule Nbr*/
    KS0IW01.KS0IW-RULE-NBR = KS0IM001.KS0IM-RULE-NBR;
  end
  if (KS0IW01.KS0IW-RULE-NBR > " ")
    VCPROD02.KS-RULE-NBR = KS0IW01.KS0IW-RULE-NBR;
  else
    VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  end
  ;
  if (KS0IW00.KS0IW-SELECT == "S5" /* If feature code select*/
   || KS0IW00.KS0IW-SELECT == "S7") /* If feature code select*/
    VCPROB01.YKP-PRBM-CD = KS0IW01.KS0IW-PRBM-CD;
  else
    if (KS0IW01.KS0IW-PRBM-CD > " ")
      VCPROD02.KS-PRBM-NBR = -2;
    else
      VCPROD02.KS-PRBM-NBR = -1;
    end
  end
  ;
  if (KS0IW01.KS0IW-STAT > " ")
    VCPROD02.YPR-PROD-STAT-CD = KS0IW01.KS0IW-STAT;
  else
    VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD1 > " ")
    KSAREC.YKS-STY-TYP-CD[1] = KS0IW01.KS0IW-STY-TYP-CD1;
  else
    KSAREC.YKS-STY-TYP-CD[1] = "**";
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD2 > " ")
    KSAREC.YKS-STY-TYP-CD[2] = KS0IW01.KS0IW-STY-TYP-CD2;
  else
    KSAREC.YKS-STY-TYP-CD[2] = "**";
  end
  ;
  if (KS0IW01.KS0IW-STY-TYP-CD3 > " ")
    KSAREC.YKS-STY-TYP-CD[3] = KS0IW01.KS0IW-STY-TYP-CD3;
  else
    KSAREC.YKS-STY-TYP-CD[3] = "**";
  end
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-SELECT;
  ;
  ;
end // end KS0I-11611

// Call KS1120 fetch
Function KS0I-11620()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-FETCH;
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0IW00.KS0IW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11620

// Call KS1120 close
Function KS0I-11640()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  KSAREC.KSA-TASK = KS0IW00.KS0IW-CLOSE;
  ;
  try
    call "KS112Q" (KSAREC, SQLCA, VCPROD02, PG2REC, PC6REC, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11640"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-11640

// Format and converse the map
Function KS0I-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  if (KS0IW00.KS0IW-VCPROD02-ADDED == "Y" /* If data base updated*/
   || KS0IW00.KS0IW-VCPROD02-DUP == "Y"   
   || KS0IW00.KS0IW-VCPROD02-UPD == "Y") 
    KSWREC.XXXMSGNO = 1;
    KS0IW00.KS0IW-VCPROD02-ADDED = "N";
    KS0IW00.KS0IW-VCPROD02-DUP = "N";
    KS0IW00.KS0IW-VCPROD02-UPD = "N";
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0IW00.KS0IW-SWF == "Y") /* Map must be formatted*/
      KS0I-12100(); /* Format the data on the map*/
    end
    ;
  end
  ;
  if (KS0IM001.XXXTSPAG > 0 /* If page number exists*/
   || converseVar.validationMsgNum == 95)
    set KS0IM001.XXXTSPAG normal;
    set KS0IM001.XXXLITPG protect;
    set KS0IM001.XXXLITOF protect;
  else
    set KS0IM001.XXXTSPAG invisible, protect;
    set KS0IM001.XXXLITPG invisible, protect;
    set KS0IM001.XXXLITOF invisible, protect;
  end
  ;
  if (KS0IM001.KS0IM-PRDCTN-MO == "00")
    KS0IM001.KS0IM-PRDCTN-MO = " ";
  end
  if (KS0IM001.KS0IM-DLVR-MO == "00")
    KS0IM001.KS0IM-DLVR-MO = " ";
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0IM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0IM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0IM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0IM001.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0IM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0IM001 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0IM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0IM001.CAITEM; /* Application data*/
  ;
  ;
end // end KS0I-12000

// Format the display data
Function KS0I-12100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ----------------------------------------------------------*/
  ;
  set KS0IM001 initial; /* M001 input/output area*/
  ;
  KS0IW00.KS0IW-SWF = "N"; /* Format the map switch*/
  KS0IW00.KS0IW-DATA-CHANGED = "N"; /* Data changed switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If the page in storage is not the page to be displayed,*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SAVE-PAGE > 0) /* If save page exists*/
    KS0IW00.XXXTSPAG = KS0IW00.KS0IW-SAVE-PAGE; /* Move desired page*/
    KS0IW00.KS0IW-SAVE-PAGE = 0; /* Clear save page*/
  end
  ;
  if (KS0IW00.KS0IW-FNC == " ") /* If first time through*/
    set KS0IM001.KS0IM-BUS-UNIT-CD cursor; /* Position cursor*/
    KS0IW01.KS0IW-US-MADE-FLAG = "N";
    KS0IW01.KS0IW-EXP-STYLE = "N";
  end
  ;
  if (KS0IW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (KS0IW00.KS0IW-SAV-KEY > " ")
      ;
      KS0I-12130(); /* Find page and position cursor*/
      ;
    else
      if (KS0IW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
        ;
      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
        ;
        if (KS0IW00.KS0IW-SWU == "Y") /* Current page was changed*/
          ;
          KS0I-12110(); /* Update temporary storage page*/
          ;
          KS0IW00.KS0IW-SWU = "N"; /* Storage update switch*/
          ;
        end
        ;
      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
        ;
        if (KS0IW00.XXXTSPAG > KS0IW00.TA5TSQIX) /* Desired greater highest*/
          KS0IW00.XXXTSPAG = KS0IW00.TA5TSQIX; /* Default to highest*/
        end
        ;
        KS0I-12120(); /* Obtain temporary storage page*/
        ;
      end
      ;
      if (KS0IW00.XXXTSPAG > 0)
        set KS0IM001.XXXTSPAG normal; /* Current page*/
      end
      ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
      ;
      if (KS0IW00.KS0IW-FNC == "A" /* If add function*/
       || KS0IW00.KS0IW-FNC == "D" /* or duplicate function*/
       || KS0IW00.KS0IW-CPY-CLR-IN-PROCESS == "Y")
        KS0IW00.KS0IW-CPY-CLR-IN-PROCESS = "N";
        if (KS0IM002.KS0IM-STY-NBR in KS0IW01.KS0IW-DTL-STY-NBR
         && KS0IM002.KS0IM-STY-NBR > " ")
          set KS0IM001.KS0IM-SEL[sysVar.arrayIndex] cursor; /* Position cursor*/
        else
          if (KS0IW01.KS0IW-DTL-STY-NBR[1] > " ") /* If lines exist*/
            set KS0IM001.KS0IM-SEL[1] cursor; /* Position cursor*/
          end
        end
      else
        if (KS0IW00.KS0IW-FNC != "A" /* If anything except add*/
         && KS0IW00.KS0IW-SAV > 1)  
          KS0IW00.KS0IW-SAV = KS0IW00.KS0IW-SAV - 1;
          if (KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV] > "0")
            KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
            if (KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1] > " ")
              set KS0IM001.KS0IM-SEL[KS0IW-IX1] cursor; /* Position cursor*/
            else
              if (KS0IM002.KS0IM-STY-NBR in KS0IW01.KS0IW-DTL-STY-NBR
               && KS0IM002.KS0IM-STY-NBR > " ")
                set KS0IM001.KS0IM-SEL[sysVar.arrayIndex] cursor; /* Position cursor*/
              else
                if (KS0IW01.KS0IW-DTL-STY-NBR[1] > " ") /* If lines exist*/
                  set KS0IM001.KS0IM-SEL[1] cursor; /* Position cursor*/
                end
              end
            end
          else
            if (KS0IM002.KS0IM-STY-NBR in KS0IW01.KS0IW-DTL-STY-NBR
             && KS0IM002.KS0IM-STY-NBR > " ")
              set KS0IM001.KS0IM-SEL[sysVar.arrayIndex] cursor; /* Position cursor*/
            else
              if (KS0IW01.KS0IW-DTL-STY-NBR[1] > " ") /* If lines exist*/
                set KS0IM001.KS0IM-SEL[1] cursor; /* Position cursor*/
              end
            end
          end
        else
          if (KS0IW01.KS0IW-DTL-STY-NBR[1] > " ") /* If detail lines exist*/
            set KS0IM001.KS0IM-SEL[1] cursor; /* Position cursor*/
          end
        end
      end
    end
    ;
    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0IM001.XXXLITPG skip; /* "PAGE" literal*/
    KS0IM001.XXXTSPAG = KS0IW00.XXXTSPAG; /* Current page*/
    set KS0IM001.XXXLITOF skip; /* "OF" literal*/
    KS0IM001.TA5TSQIX = KS0IW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
  KS0IM001.KS0IM-BUS-UNIT-CD = KS0IW01.KS0IW-GPC; /* GPC code*/
  KS0IM001.KS0IM-GPC-DESC = KS0IW01.KS0IW-GPC-DESC; /* GPC desc*/
  KS0IM001.KS0IM-MAP1-STY-NBR = KS0IW01.KS0IW-STYLE; /* Style number*/
  if (KS0IW01.KS0IW-GPC == "02")
    KS0IM001.KS0IM-COLR-CD-ID = KS0IW01.KS0IW-COLR-CD-ID; /* Color cd*/
    KS0IM001.KS0IM-DIM-CD = KS0IW01.KS0IW-DIM-CD; /* Dimension code*/
  else
    KS0IM001.KS0IM-COLR-CD-ID = "   ";
    KS0IM001.KS0IM-DIM-CD = "  ";
    KS0IW01.KS0IW-COLR-CD-ID = "   ";
    KS0IW01.KS0IW-DIM-CD = "  ";
  end
  KS0IM001.KS0IM-SESN-CD = KS0IW01.KS0IW-SESN-CD; /* Season code*/
  if (KS0IW01.KS0IW-SESN-YR > " ")
    KS0IM001.KS0IM-SESN-YR-RNG = KS0IW01.KS0IW-SESN-YY; /* Season year*/
  else
    KS0IM001.KS0IM-SESN-YR-RNG = "  "; /* Season year*/
  end
  KS0IM001.KS0IM-PRDCTN-YR = KS0IW01.KS0IW-PRDCTN-YR; /* PO ID*/
  if (KS0IW01.KS0IW-PRDCTN-MO-1 == " "
   && KS0IW01.KS0IW-PRDCTN-MO > "0")
    KS0IW01.KS0IW-PRDCTN-MO-1 = "0";
  end
  KS0IM001.KS0IM-PRDCTN-MO = KS0IW01.KS0IW-PRDCTN-MO; /* PO ID*/
  if (KS0IW01.KS0IW-DLVR-MO-1 == " "
   && KS0IW01.KS0IW-DLVR-MO > "0")
    KS0IW01.KS0IW-DLVR-MO-1 = "0";
  end
  KS0IM001.KS0IM-DLVR-MO = KS0IW01.KS0IW-DLVR-MO; /* PO ID*/
  KS0IM001.KS0IM-FCTY-CD = KS0IW01.KS0IW-FCTY-CD; /* Factory code*/
  KS0IM001.KS0IM-ORIG-CD = KS0IW01.KS0IW-ORIG-CD; /* Origin code*/
  KS0IM001.KS0IM-US-MADE-FLAG = KS0IW01.KS0IW-US-MADE-FLAG;
  KS0IM001.KS0IM-ORIG-DESC = KS0IW01.KS0IW-ORIG-DESC; /* Origin desc*/
  KS0IM001.KS0IM-HTS-NBR = KS0IW01.KS0IW-HTS-NBR; /* HS number*/
  KS0IM001.KS0IM-RULE-NBR = KS0IW01.KS0IW-RULE-NBR-MAP; /* Ruling nbr*/
  KS0IM001.KS0IM-QOTA-CAT-CD = KS0IW01.KS0IW-QOTA-CAT-CD; /* Quota*/
  KS0IM001.KS0IM-TEAM-CD = KS0IW01.KS0IW-TEAM-CD; /* Team code*/
  KS0IM001.KS0IM-PRBM-CD = KS0IW01.KS0IW-PRBM-CD; /* Problem code*/
  KS0IM001.KS0IM-DIV-CD = KS0IW01.KS0IW-DIV-CD; /* Division code*/
  KS0IM001.KS0IM-STAT = KS0IW01.KS0IW-STAT; /* Status code*/
  KS0IM001.KS0IM-EXP-STYLE = KS0IW01.KS0IW-EXP-STYLE;
  KS0IM001.KS0IM-STY-TYP-CD[1] = KS0IW01.KS0IW-STY-TYP-CD1;
  KS0IM001.KS0IM-STY-TYP-CD[2] = KS0IW01.KS0IW-STY-TYP-CD2;
  KS0IM001.KS0IM-STY-TYP-CD[3] = KS0IW01.KS0IW-STY-TYP-CD3;
  KS0IM001.KS0IM-REG-CD = KS0IW01.KS0IW-REG-CD;
  ;
  KS0IW00.KS0IW-IXM = 1; /* Initialize line index*/
  while (KS0IW00.KS0IW-IXM <= 11) /* Until screen is full*/
    ;
    KS0IM001.KS0IM-SEL[KS0IW-IXM] = " ";
    KS0IM001.KS0IM-DTL-STY-NBR[KS0IW-IXM] = KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM];
    KS0IM001.KS0IM-DTL-COLR-CD-ID[KS0IW-IXM] = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IXM];
    KS0IM001.KS0IM-DTL-DIM-CD[KS0IW-IXM] = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IXM];
    ;
  /* ------------------------------------------------------------------*/
  /* Depending on whether selection uses season year, format style*/
  /* short name differently for gpc 03 only.*/
    ;
    if (KS0IM001.KS0IM-SESN-CD == "  "
     && KS0IM001.KS0IM-SESN-YR-RNG == "  "
     && KS0IM001.KS0IM-BUS-UNIT-CD == "03")
      KS0IM001.KS0IM-SH-DESC-FIELD = "SESN   TYPE ";
      KS0IW00.KS0IW-SESN-TYP-TXT = " ";
      if (KS0IM001.KS0IM-DTL-STY-NBR[KS0IW-IXM] > " ")
        KS0IW00.KS0IW-SESN-CD-TXT = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IXM];
        KS0IW00.KS0IW-SESN-YR = KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IXM];
        KS0IW00.KS0IW-SESN-YY-TXT = KS0IW00.KS0IW-SESN-YY;
        if (KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IXM] > "  ")
          if (KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IXM]
           in YKSTBL.YKS-STY-TYP-CD)
            KS0IW00.KS0IW-TYPE-DESC-TXT = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
          end
        end
        KS0IM001.KS0IM-DTL-SHORT-STY-NM[KS0IW-IXM] = KS0IW00.KS0IW-SESN-TYP-TXT;
      end
    else
      KS0IM001.KS0IM-SH-DESC-FIELD = " SHORT DESC ";
      KS0IM001.KS0IM-DTL-SHORT-STY-NM[KS0IW-IXM] = KS0IW01.KS0IW-DTL-SHORT-STY-NM[KS0IW-IXM];
    end
    ;
  /* ------------------------------------------------------------------*/
    ;
    if (KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM] > " ")
      KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM];
      if (KS0IW01.KS0IW-GPC != "02")
        KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
        while (KS0IW00.KS0IW-IX2 <= 14)
          if (KS0IW00.KS0IW-IX2 == 5 /* These 3 positions must be '.'*/
           || KS0IW00.KS0IW-IX2 == 8 
           || KS0IW00.KS0IW-IX2 == 13)
            if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] != ".")
              KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX2 + 1;
              if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX1] > " ")
                KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] = ".";
              end
            end
          end
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* set index up by 1*/
        end
      end
      KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM] = KS0IW01.KS0IW-HTS-NUMBER;
      KS0IM001.KS0IM-DTL-HTS-NBR[KS0IW-IXM] = KS0IW01.KS0IW-HTS-NUMBER;
      KS0IW01.KS0IW-HTS-NUMBER = " ";
    else
      KS0IM001.KS0IM-DTL-HTS-NBR[KS0IW-IXM] = " ";
    end
    ;
    KS0IM001.KS0IM-DTL-QOTA-CAT-CD[KS0IW-IXM] = KS0IW01.KS0IW-DTL-QOTA-CAT-CD[KS0IW-IXM];
  /* --------------------------------------------------------------*/
  /* If selection criteria is GPC 02 and STATUS DS, format differently*/
  /* ----------------------------------------------------------------*/
    if (KS0IM001.KS0IM-STAT == "DS"
     && KS0IM001.KS0IM-BUS-UNIT-CD == "02")
      KS0IM001.KS0IM-GEN-DTY-FIELD = "GEN DUTY  LST PO";
      KS0IW00.KS0IW-DTY-LST-PO-TXT = " ";
      KS0IW00.KS0IW-DTY-LST-PO-TXT = KS0IW01.KS0IW-DTL-DTY-RATE[KS0IW-IXM];
      if (KS0IW01.KS0IW-DTL-LST-POIDT[KS0IW-IXM] > 0)
        KS0IW00.KS0IW-DTY-SPACE = " ";
        KS0IW00.KS0IW-LST-PO-TXT = KS0IW01.KS0IW-DTL-LST-PO-MO-RNG[KS0IW-IXM];
      end
      KS0IM001.KS0IM-DTL-DTY-RATE[KS0IW-IXM] = KS0IW00.KS0IW-DTY-LST-PO-TXT;
    else
  /* -------------------------------------------------------------*/
  /* format for gen duty rate only*/
      KS0IM001.KS0IM-GEN-DTY-FIELD = " GEN DUTY RATE  ";
      KS0IM001.KS0IM-DTL-DTY-RATE[KS0IW-IXM] = KS0IW01.KS0IW-DTL-DTY-RATE[KS0IW-IXM];
    end
    ;
    KS0IM001.KS0IM-DTL-RULE-NBR[KS0IW-IXM] = KS0IW01.KS0IW-DTL-RULE-NBR[KS0IW-IXM];
    KS0IM001.KS0IM-DTL-PRBM-CD[KS0IW-IXM] = KS0IW01.KS0IW-DTL-PRBM-CD[KS0IW-IXM];
    if (KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM] > " ") /* If line exists*/
      set KS0IM001.KS0IM-SEL[KS0IW-IXM] normal; /* Set selection normal*/
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  KS0IW01.KS0IW-SAVE-INDEX-TBL = " "; /* Clear index table*/
  ;
  if (COMMAREA.CACHGFL == "Y") /* If change flag = yes*/
    set KS0IM001.KS0IM-PF14 skip; /* PF14 add key*/
    set KS0IM001.KS0IM-PF16 skip; /* PF16 add key*/
  end
  ;
  if (COMMAREA.CAADDFL == "Y") /* If add flag = yes*/
    set KS0IM001.KS0IM-PF13 skip; /* PF13 add key*/
    set KS0IM001.KS0IM-PF15 skip; /* PF15 duplicate key*/
  end
  KS0IM001.KS0IM-BUS-UNIT-CD = KS0IW01.KS0IW-GPC; /* GPC code*/
  ;
  if (KS0IW01.KS0IW-GPC != "03") /* If not apparel*/
    set KS0IM001.KS0IM-PF19 skip; /* PF19 plnmtr key*/
    set KS0IM001.KS0IM-PF21 skip; /* KS0P*/
  end
  ;
  set KS0IM001.KS0IM-PF17 skip; /* PF17 problem key*/
  ;
  ;
end // end KS0I-12100

// Update temporary storage page
Function KS0I-12110()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-12110

// Read temporary storage page
Function KS0I-12120()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW01.XXXTSLEN = KS0IW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0IW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-12120

// Search pages for matching row
Function KS0I-12130()
  /* ------------------------------------------------------------*/
  /* Obtain the desired page from temporary storage and set cursor*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.XXXTSPAG > 2) /* If page is gt 2*/
    KS0IW00.XXXTSPAG = KS0IW00.XXXTSPAG - 2;
  else
    KS0IW00.XXXTSPAG = 1;
  end
  ;
  KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
  KS0IW00.KS0IW-LAST-CHECKED-ROW = 1;
  KS0IW00.KS0IW-CURSOR-FOUND-SW = "N";
  ;
  /* ------------------------------------------------------------*/
  /* Set style for exprimentals*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SAV-XPRMT-STY > " " /* if expmt style exists*/
   && KS0IW00.KS0IW-SAV-STY-NBR == " ") /* and sty not entered*/
    ;
    KS0IW00.KS0IW-SAV-STY-NBR = KS0IW00.KS0IW-SAV-XPRMT-STY;
    ;
  end
  ;
  if (KS0IW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    while (KS0IW00.KS0IW-CURSOR-FOUND-SW == "N")
      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (KS0IW00.XXXTSPAG > KS0IW00.TA5TSQIX) /* Desired greater highest*/
        KS0IW00.XXXTSPAG = KS0IW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      KS0I-12120(); /* Obtain temporary storage page*/
      ;
      if (KS0IW01.KS0IW-GPC == "02") /* if footwear*/
        KS0I-12131(); /* search footwear lines*/
      else
        KS0I-12132(); /* Search other GPC lines*/
      end
      ;
      if (KS0IW00.KS0IW-CURSOR-FOUND-SW == "N")
        if (KS0IW00.XXXTSPAG < KS0IW00.TA5TSQIX)
          KS0IW00.XXXTSPAG = KS0IW00.XXXTSPAG + 1;
        else
          KS0IW00.KS0IW-CURSOR-FOUND-SW = "Y";
          set KS0IM001.KS0IM-SEL[KS0IW-LAST-CHECKED-ROW] cursor;
        end
      end
      ;
    end
    ;
  end
  ;
  KS0IW00.KS0IW-SAV-KEY = " ";
  ;
end // end KS0I-12130

// Search footwear pages
Function KS0I-12131()
  /* ------------------------------------------------------------*/
  /* Search through footwear page for a match.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IX1 = 1; /* Set index*/
  ;
  while (KS0IW-IX1 <= 11)
    ;
    if (KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1] > " ")
      ;
      if (KS0IW00.KS0IW-SAV-STY-NBR == 
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-XPRMT-STY == 
      KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-COLR-CD-ID == 
      KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-DIM-CD == 
      KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-STY-TYP == 
      KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-SESN-YR == 
      KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-SESN-CD == 
      KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1])
        ;
        KS0IW00.KS0IW-CURSOR-FOUND-SW = "Y";
        set KS0IM001.KS0IM-SEL[KS0IW-IX1] cursor;
        KS0IW-IX1 = 12;
        ;
      else
        if (KS0IW00.KS0IW-SAV-STY-NBR >  /* if sty is greater*/
        KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1])
          ;
          KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
          KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
          ;
        else
          if (KS0IW00.KS0IW-SAV-STY-NBR ==   /* if sty is equal*/
          KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
           && KS0IW00.KS0IW-SAV-XPRMT-STY >  /* and x-sty is greater*/
          KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1])
            ;
            KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
            KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
            ;
          else
            if (KS0IW00.KS0IW-SAV-STY-NBR ==    /* if sty is equal*/
            KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
             && KS0IW00.KS0IW-SAV-XPRMT-STY ==  /* and x-sty is equal*/
            KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]
             && KS0IW00.KS0IW-SAV-COLR-CD-ID >  /* and color is greater*/
            KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1])
              ;
              KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
              KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
              ;
            else
              if (KS0IW00.KS0IW-SAV-STY-NBR ==     /* if sty is equal*/
              KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1] 
               && KS0IW00.KS0IW-SAV-XPRMT-STY ==   /* and x-sty is equal*/
              KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]
               && KS0IW00.KS0IW-SAV-COLR-CD-ID ==  /* and color is equal*/
              KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1]
               && KS0IW00.KS0IW-SAV-DIM-CD >       /* dim is greater*/
              KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1])
                ;
                KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
                KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
                ;
              else
                if (KS0IW00.KS0IW-SAV-STY-NBR ==     /* if sty is equal*/
                KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1] 
                 && KS0IW00.KS0IW-SAV-XPRMT-STY ==   /* and x-sty is equal*/
                KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]
                 && KS0IW00.KS0IW-SAV-COLR-CD-ID ==  /* and color is equal*/
                KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1]
                 && KS0IW00.KS0IW-SAV-DIM-CD ==      /* and dim is equal*/
                KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1]  
                 && KS0IW00.KS0IW-SAV-STY-TYP >      /* and sty-typ is greater*/
                KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1])
                  ;
                  KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
                  KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
                  ;
                else
                  if (KS0IW00.KS0IW-SAV-STY-NBR ==    /* if sty is equal*/
                  KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
                   && KS0IW00.KS0IW-SAV-XPRMT-STY ==  /* and x-sty is equal*/
                  KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]
                   && KS0IW00.KS0IW-SAV-COLR-CD-ID == 
                   /* and color is equal*/
                  KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1]
                   && KS0IW00.KS0IW-SAV-DIM-CD ==     /* and dim is equal*/
                  KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1] 
                   && KS0IW00.KS0IW-SAV-STY-TYP ==    /* and sty-typ is equal*/
                  KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1]
                   && KS0IW00.KS0IW-SAV-SESN-YR <     /* and sesn-yr is less*/
                  KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1])
                    ;
                    KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
                    KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
                    ;
                  else
                    if (KS0IW00.KS0IW-SAV-STY-NBR ==  /* if sty is equal*/
                    KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
                     && KS0IW00.KS0IW-SAV-XPRMT-STY == 
                     /* and x-sty is equal*/
                    KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]
                     && KS0IW00.KS0IW-SAV-COLR-CD-ID == 
                     /* and color is equal*/
                    KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1]
                     && KS0IW00.KS0IW-SAV-DIM-CD ==   /* and dim is equal*/
                    KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1]
                     && KS0IW00.KS0IW-SAV-STY-TYP ==  
                     /* and sty-typ is equal*/
                    KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1]
                     && KS0IW00.KS0IW-SAV-SESN-YR ==  
                     /* and sesn-yr is equal*/
                    KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1]
                     && KS0IW00.KS0IW-SAV-SESN-CD >   
                     /* and sesn-cd is greater*/
                    KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1])
                      ;
                      KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
                      KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
                      ;
                    else
                      ;
                      KS0IW00.KS0IW-CURSOR-FOUND-SW = "Y";
                      if (KS0IW00.KS0IW-LAST-CHECKED-PAGE < 
                      KS0IW00.XXXTSPAG)
                        ;
                        KS0IW00.XXXTSPAG = KS0IW00.KS0IW-LAST-CHECKED-PAGE;
                        KS0I-12120();
                      end
                      ;
                      set KS0IM001.KS0IM-SEL[KS0IW-LAST-CHECKED-ROW] cursor;
                      KS0IW-IX1 = 12;
                      ;
                    end
                    ;
                  end
                  ;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
    KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    ;
  end
end // end KS0I-12131

// Search other gpc pages
Function KS0I-12132()
  /* ------------------------------------------------------------*/
  /* Search through page for a match.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IX1 = 1; /* Set index*/
  ;
  while (KS0IW-IX1 <= 11)
    ;
    if (KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1] > " ")
      ;
      if (KS0IW00.KS0IW-SAV-SESN-YR == 
      KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-SESN-CD == 
      KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-STY-NBR == 
      KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-XPRMT-STY == 
      KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-STY-TYP == 
      KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1]
       && KS0IW00.KS0IW-SAV-DIM-CD == 
      KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1])
        ;
        if (KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-1[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-2[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-3[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-4[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-5[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-6[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-7[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-8[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-9[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-10[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-11[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-12[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-13[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-14[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-15[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-16[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-17[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-18[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-19[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-20[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-21[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-22[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-23[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-24[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-25[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-26[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-27[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-28[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-29[KS0IW-IX1]
         || KS0IW00.KS0IW-SAV-COLR-CD-ID == 
        KS0IW01.KS0IW-COLOR-30[KS0IW-IX1])
          ;
          KS0IW00.KS0IW-CURSOR-FOUND-SW = "Y";
          set KS0IM001.KS0IM-SEL[KS0IW-IX1] cursor;
          KS0IW-IX1 = 12;
          ;
        else
          ;
          KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
          KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
          ;
        end
      else
        if (KS0IW00.KS0IW-SAV-SESN-YR <  /* if sesn-yr less*/
        KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1])
          ;
          KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
          KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
          ;
        else
          if (KS0IW00.KS0IW-SAV-SESN-YR ==  /* if sesn-yr equal*/
          KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1]
           && KS0IW00.KS0IW-SAV-SESN-CD >   /* and sesn-cd greater*/
          KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1])
            ;
            KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
            KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
            ;
          else
            if (KS0IW00.KS0IW-SAV-SESN-YR ==  /* if sesn-yr equal*/
            KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1]
             && KS0IW00.KS0IW-SAV-SESN-CD ==  /* and sesn-cd equal*/
            KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1]
             && KS0IW00.KS0IW-SAV-STY-NBR >   /* and sty greater*/
            KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1])
              ;
              KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
              KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
              ;
            else
              if (KS0IW00.KS0IW-SAV-SESN-YR ==   /* if sesn-yr equal*/
              KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1]
               && KS0IW00.KS0IW-SAV-SESN-CD ==   /* and sesn-cd equal*/
              KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1]
               && KS0IW00.KS0IW-SAV-STY-NBR ==   /* and sty equal*/
              KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
               && KS0IW00.KS0IW-SAV-XPRMT-STY >  /* and x-sty greater*/
              KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1])
                ;
                KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
                KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
                ;
              else
                if (KS0IW00.KS0IW-SAV-SESN-YR ==    /* if sesn-yr equal*/
                KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1]
                 && KS0IW00.KS0IW-SAV-SESN-CD ==    /* and sesn-cd equal*/
                KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1]
                 && KS0IW00.KS0IW-SAV-STY-NBR ==    /* and sty equal*/
                KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
                 && KS0IW00.KS0IW-SAV-XPRMT-STY ==  /* and x-sty equal*/
                KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]
                 && KS0IW00.KS0IW-SAV-STY-TYP >     /* and sty-typ greater*/
                KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1])
                  ;
                  KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
                  KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
                  ;
                else
                  if (KS0IW00.KS0IW-SAV-SESN-YR ==    /* if sesn-yr equal*/
                  KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1]
                   && KS0IW00.KS0IW-SAV-SESN-CD ==    /* and sesn-cd equal*/
                  KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1]
                   && KS0IW00.KS0IW-SAV-STY-NBR ==    /* and sty equal*/
                  KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1]
                   && KS0IW00.KS0IW-SAV-XPRMT-STY ==  /* and x-sty equal*/
                  KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]
                   && KS0IW00.KS0IW-SAV-STY-TYP ==    /* and sty-typ equal*/
                  KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1]
                   && KS0IW00.KS0IW-SAV-DIM-CD >      /* and dim greater*/
                  KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1])
                    ;
                    KS0IW00.KS0IW-LAST-CHECKED-PAGE = KS0IW00.XXXTSPAG;
                    KS0IW00.KS0IW-LAST-CHECKED-ROW = KS0IW-IX1;
                    ;
                  else
                    ;
                    KS0IW00.KS0IW-CURSOR-FOUND-SW = "Y";
                    if (KS0IW00.KS0IW-LAST-CHECKED-PAGE < KS0IW00.XXXTSPAG)
                      ;
                      KS0IW00.XXXTSPAG = KS0IW00.KS0IW-LAST-CHECKED-PAGE;
                      KS0I-12120();
                    end
                    ;
                    set KS0IM001.KS0IM-SEL[KS0IW-LAST-CHECKED-ROW] cursor;
                    KS0IW-IX1 = 12;
                    ;
                  end
                  ;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
    KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    ;
  end
end // end KS0I-12132

// Check attention identifier
Function KS0I-13000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0IW00.KS0IW-SWR == "Y") /* Request for data*/
      set KS0IW01 empty; /* M001 display storage*/
    end
    ;
    KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
    KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (KS0IM001.CATOAP == "KS0K")
        KSWREC.XXXPRCNM = "13000"; /* Module identification*/
        converseLib.validationFailed(6); /* PA/PF key may not be used*/
        set KS0IM001.CATOAP cursor, bold; /* Highlight*/
      else
        ;
        KS0I-11100(); /* Purge temporary storage*/
        ;
        XSKS-S0001(); /* Exit to another application*/
        ;
      end
    else
      ;
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      set KS0IM001.CATOAP cursor, bold; /* Highlight*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0IM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "KS0A"; /* TO application*/
    end
    ;
    KS0I-11100(); /* Purge temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf21) /* and PF21 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CAADDFL == "N") /* Add flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
      ;
      exit stack; /* Exit to display map*/
    end
    if (KS0IW01.KS0IW-GPC == "02" /* Footwear GPC code*/
     && COMMAREA.CAALVL[2] == "N")
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(41); /* Not authorized message*/
      ;
      exit stack; /* Exit to display map*/
    end
    if (KS0IW01.KS0IW-GPC == "03" /* Apparel GPC code*/
     && COMMAREA.CAALVL[3] == "N")
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(42); /* Not authorized message*/
      ;
      exit stack; /* Exit to display map*/
    end
  end
  ;
  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   || converseVar.eventKey is pf16) /* or PF16 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* Chg flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
      ;
      exit stack; /* Exit to display map*/
    end
    if (KS0IW01.KS0IW-GPC == "02" /* Footwear GPC code*/
     && COMMAREA.CACLVL[2] == "N")
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(41); /* Not authorized message*/
      ;
      exit stack; /* Exit to display map*/
    end
    if (KS0IW01.KS0IW-GPC == "03" /* Apparel GPC code*/
     && COMMAREA.CACLVL[3] == "N")
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(42); /* Not authorized message*/
      ;
      exit stack; /* Exit to display map*/
    end
  end
  if (converseVar.eventKey is pf19 /* If PF19 pressed*/
   || converseVar.eventKey is pf21) /* If PF21 pressed*/
    if (KS0IW01.KS0IW-GPC == "02") /* and footwear gpc*/
      ;
    else
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
      ;
      exit stack; /* Exit to display map*/
    end
    if (COMMAREA.CACHGFL == "N") /* Chg flag = no*/
      KS0IW00.KS0IW-FNC = "I"; /* Inquiry function code*/
      ;
    else
      KS0IW00.KS0IW-FNC = "C"; /* Change function code*/
      ;
    end
  end
  ;
  ;
end // end KS0I-13000

// Reset highlighted fields
Function KS0I-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM001.KS0IM-BUS-UNIT-CD initialAttributes; /* GPC code*/
  set KS0IM001.KS0IM-HTS-NBR initialAttributes; /* HS number*/
  set KS0IM001.KS0IM-MAP1-STY-NBR initialAttributes; /* Style code*/
  set KS0IM001.KS0IM-COLR-CD-ID initialAttributes; /* Color code id*/
  set KS0IM001.KS0IM-DIM-CD initialAttributes; /* Dimension code*/
  set KS0IM001.KS0IM-RULE-NBR initialAttributes; /* Ruling number*/
  set KS0IM001.KS0IM-SESN-CD initialAttributes; /* Season code*/
  set KS0IM001.KS0IM-SESN-YR-RNG initialAttributes; /* Season year range*/
  set KS0IM001.KS0IM-QOTA-CAT-CD initialAttributes; /* Quota cat code*/
  set KS0IM001.KS0IM-TEAM-CD initialAttributes; /* Team code*/
  set KS0IM001.KS0IM-PRDCTN-YR initialAttributes; /* PO ID production year*/
  set KS0IM001.KS0IM-PRDCTN-MO initialAttributes; /* PO ID production month*/
  set KS0IM001.KS0IM-DLVR-MO initialAttributes; /* PO ID deliver month*/
  set KS0IM001.KS0IM-FCTY-CD initialAttributes; /* Factory code*/
  set KS0IM001.KS0IM-ORIG-CD initialAttributes; /* Origin code*/
  set KS0IM001.KS0IM-PRBM-CD initialAttributes; /* Problem code*/
  set KS0IM001.KS0IM-DIV-CD initialAttributes; /* Division code*/
  set KS0IM001.KS0IM-STAT initialAttributes; /* Product status code*/
  set KS0IM001.KS0IM-STY-TYP-CD[1] initialAttributes; /* Style Type Code*/
  set KS0IM001.KS0IM-STY-TYP-CD[2] initialAttributes; /* Style Type Code*/
  set KS0IM001.KS0IM-STY-TYP-CD[3] initialAttributes; /* Style Type Code*/
  set KS0IM001.XXXTSPAG initialAttributes; /* Page number*/
  set KS0IM001.KS0IM-REG-CD initialAttributes; /* Market Region*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Initialize line index*/
  while (KS0IW00.KS0IW-IXM <= 11) /* Until end of lines*/
    ;
    if (KS0IM001.KS0IM-DTL-STY-NBR[KS0IW-IXM] > " ") /* If style exists*/
      set KS0IM001.KS0IM-SEL[KS0IW-IXM] normal; /* Reset select flag*/
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  set KS0IM001.CATOAP initialAttributes; /* TO application*/
  set KS0IM001.CAITEM initialAttributes; /* Application data*/
  ;
  if (KS0IM001.KS0IM-BUS-UNIT-CD == "?"   /* if any ? entered*/
   || KS0IM001.KS0IM-REG-CD == "?"        /* if ? in market reg field*/
   || KS0IM001.KS0IM-SESN-CD == "?"       /* if ? in season code field*/
   || KS0IM001.KS0IM-QOTA-CAT-CD == "?"   /* if ? in quota code field*/
   || KS0IM001.KS0IM-ORIG-CD == "?"       /* if ? in origin code field*/
   || KS0IM001.KS0IM-PRBM-CD == "?"       /* if ? in problem code field*/
   || KS0IM001.KS0IM-DIV-CD == "?"        /* if ? in division code field*/
   || KS0IM001.KS0IM-STY-TYP-CD[1] == "?" /* if ? in Style typ code field*/
   || KS0IM001.KS0IM-STY-TYP-CD[2] == "?" /* if ? in Style typ code field*/
   || KS0IM001.KS0IM-STY-TYP-CD[3] == "?" /* if ? in Style typ code field*/
   || KS0IM001.KS0IM-STAT == "?")         /* if ? in status code field*/
    if (KS0IM001.KS0IM-BUS-UNIT-CD == "?") /* if any ? entered*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end
      ;
       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-BUS-UNIT-CD = XGPTBL.XGPCD[XX0XWPIX]; /* mv cd*/
        KS0IM001.KS0IM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
      else
        KS0IM001.KS0IM-BUS-UNIT-CD = " "; /* clear fields*/
        KS0IM001.KS0IM-GPC-DESC = " ";
      end
      set KS0IM001.KS0IM-BUS-UNIT-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-REG-CD == "?") /* if any ? entered*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "       MARKET REGION         "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDR01(); /* perform market reg window*/
      end
      ;
       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the market reg **/
       /* *  table code to the map.                               **/
       /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-REG-CD = XDRTBL.XDR-PROD-REG-CD[XX0XWPIX];
      else
        KS0IM001.KS0IM-REG-CD = " "; /* clear fields*/
      end
      set KS0IM001.KS0IM-REG-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-SESN-CD == "?") /* if ? in season code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                SEASON      "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSE01(); /* perform season code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the season     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-SESN-CD = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      else
        KS0IM001.KS0IM-SESN-CD = " "; /* clear fields*/
      end
      set KS0IM001.KS0IM-SESN-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-QOTA-CAT-CD == "?") /* if ? in quota code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "     QUOTA CATEGORY CODE    "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYQT01(); /* perform quota code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the quota      **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-QOTA-CAT-CD = YQTTBL.YQT-QOTA-CAT-CD[XX0XWPIX];
      else
        KS0IM001.KS0IM-QOTA-CAT-CD = " "; /* clear fields*/
      end
      set KS0IM001.KS0IM-QOTA-CAT-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-ORIG-CD == "?") /* if ? in origin code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-ORIG-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        KS0IM001.KS0IM-ORIG-DESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move desc*/
      else
        KS0IM001.KS0IM-ORIG-CD = " "; /* clear fields*/
        KS0IM001.KS0IM-ORIG-DESC = " ";
      end
      set KS0IM001.KS0IM-ORIG-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-PRBM-CD == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        CUSTOMS FEATURE     "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-PRBM-CD = YKPTBL.YKP-PRBM-CD[XX0XWPIX]; /* move code*/
      else
        KS0IM001.KS0IM-PRBM-CD = " "; /* clear fields*/
      end
      set KS0IM001.KS0IM-PRBM-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-DIV-CD == "?") /* if ? in division code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "         DIVISION CODE      "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDV02(); /* perform division code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-DIV-CD = XDVTBL.XDVCD[XX0XWPIX]; /* move code*/
      else
        KS0IM001.KS0IM-DIV-CD = " "; /* clear fields*/
      end
      set KS0IM001.KS0IM-DIV-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-STY-TYP-CD[1] == "?") /* if ? in style typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  CUSTOMS STYLE TYPE CODE   "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform status code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the status     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-STY-TYP-CD[1] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0IM001.KS0IM-STY-TYP-CD[1] = " "; /* clear fields*/
      end
      set KS0IM001.KS0IM-STY-TYP-CD[1] cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-STY-TYP-CD[2] == "?") /* if ? in style typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  CUSTOMS STYLE TYPE CODE   "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform status code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the status     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-STY-TYP-CD[2] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0IM001.KS0IM-STY-TYP-CD[2] = " "; /* clear fields*/
      end
      set KS0IM001.KS0IM-STY-TYP-CD[2] cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-STY-TYP-CD[3] == "?") /* if ? in style typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  CUSTOMS STYLE TYPE CODE   "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform status code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the status     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-STY-TYP-CD[3] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0IM001.KS0IM-STY-TYP-CD[3] = " "; /* clear fields*/
      end
      set KS0IM001.KS0IM-STY-TYP-CD[3] cursor; /* Set cursor*/
    end
    ;
    if (KS0IM001.KS0IM-STAT == "?") /* if ? in status code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "         CUSTOMS STATUS CODE"; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPR01(); /* perform status code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the status     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM001.KS0IM-STAT = YPRTBL.YPR-PROD-STAT-CD[XX0XWPIX]; /* move code*/
      else
        KS0IM001.KS0IM-STAT = " "; /* clear fields*/
      end
      set KS0IM001.KS0IM-STAT cursor; /* Set cursor*/
    end
    ;
    KS0IW00.KS0IW-SWR = "N"; /* Reset request for data switch*/
    KS0IW00.KS0IW-SWF = "N"; /* Reset format the map switch*/
    ;
    converseLib.clearScreen();
     /* Restore the original map*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0I-14000

// Verify data that was entered
Function KS0I-15000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "15000"; /* Module identification*/
    set KS0IM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    exit stack;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    KS0I-15100(); /* Verify scroll request*/
    ;
  else
    if (KS0IW00.XXXTSPAG != KS0IM001.XXXTSPAG /* or new page nbr*/
     && KS0IW01.KS0IW-DTL-STY-NBR[1] > " ")   /* and page exists*/
      KS0I-15100(); /* Verify scroll request*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* Otherwise, verify data in the heading.*/
    /* ------------------------------------------------------------*/
      ;
      if (KS0IW01.KS0IW-PRDCTN-MO == "00")
        KS0IW00.KS0IW-MM = "  ";
      else
        KS0IW00.KS0IW-MM = KS0IW01.KS0IW-PRDCTN-MO;
      end
      if (KS0IW01.KS0IW-DLVR-MO == "00")
        KS0IW00.KS0IW-DD = "  ";
      else
        KS0IW00.KS0IW-DD = KS0IW01.KS0IW-DLVR-MO;
      end
      if (KS0IM001.KS0IM-BUS-UNIT-CD != KS0IW01.KS0IW-GPC /* If any chg*/
       || KS0IM001.KS0IM-MAP1-STY-NBR != KS0IW01.KS0IW-STYLE
       || KS0IM001.KS0IM-SESN-CD != KS0IW01.KS0IW-SESN-CD 
       || KS0IM001.KS0IM-ORIG-CD != KS0IW01.KS0IW-ORIG-CD 
       || KS0IM001.KS0IM-US-MADE-FLAG != KS0IW01.KS0IW-US-MADE-FLAG
       || KS0IM001.KS0IM-HTS-NBR != KS0IW01.KS0IW-HTS-NBR 
       || KS0IM001.KS0IM-RULE-NBR != KS0IW01.KS0IW-RULE-NBR-MAP
       || KS0IM001.KS0IM-QOTA-CAT-CD != KS0IW01.KS0IW-QOTA-CAT-CD
       || KS0IM001.KS0IM-TEAM-CD != KS0IW01.KS0IW-TEAM-CD 
       || KS0IM001.KS0IM-PRBM-CD != KS0IW01.KS0IW-PRBM-CD 
       || KS0IM001.KS0IM-DIV-CD != KS0IW01.KS0IW-DIV-CD   
       || KS0IM001.KS0IM-STAT != KS0IW01.KS0IW-STAT       
       || KS0IM001.KS0IM-EXP-STYLE != KS0IW01.KS0IW-EXP-STYLE
       || KS0IM001.KS0IM-COLR-CD-ID != KS0IW01.KS0IW-COLR-CD-ID
       || KS0IM001.KS0IM-DIM-CD != KS0IW01.KS0IW-DIM-CD   
       || KS0IM001.KS0IM-PRDCTN-YR != KS0IW01.KS0IW-PRDCTN-YR
       || KS0IM001.KS0IM-PRDCTN-MO != KS0IW00.KS0IW-MM    
       || KS0IM001.KS0IM-DLVR-MO != KS0IW00.KS0IW-DD      
       || KS0IM001.KS0IM-FCTY-CD != KS0IW01.KS0IW-FCTY-CD 
       || KS0IM001.KS0IM-STY-TYP-CD[1] != KS0IW01.KS0IW-STY-TYP-CD1
       || KS0IM001.KS0IM-STY-TYP-CD[2] != KS0IW01.KS0IW-STY-TYP-CD2
       || KS0IM001.KS0IM-STY-TYP-CD[3] != KS0IW01.KS0IW-STY-TYP-CD3
       || KS0IM001.KS0IM-REG-CD != KS0IW01.KS0IW-REG-CD) 
        KS0IW00.KS0IW-SAV-EQUIP-GPC = " ";
        KS0I-11100(); /* Purge temp storage*/
        KS0I-15500(); /* Set ws and map equal*/
      else
        if (KS0IM001.KS0IM-SESN-YR-RNG != KS0IW01.KS0IW-SESN-YY)
          if (KS0IM001.KS0IM-SESN-YR-RNG == " "
           && KS0IW01.KS0IW-SESN-YR == " ")
            /* next sentence*/
          else
            KS0I-11100(); /* Purge temp storage*/
            KS0I-15500(); /* Set ws and map equal*/
          end
        else
          if (KS0IM001.KS0IM-SESN-YR-RNG == "00"
           && KS0IW01.KS0IW-SESN-YR == "0")
            KS0I-11100(); /* Purge temp storage*/
            KS0I-15500(); /* Set ws and map equal*/
          end
        end
      end
      ;
      KS0I-15200(); /* Verify required data*/
      ;
      if (converseVar.validationMsgNum == 0) /* If no previous errors*/
        KS0I-15300(); /* Verify the rest of the data*/
      end
      ;
      if (converseVar.validationMsgNum == 0) /* If no previous errors*/
        KS0I-15400(); /* Verify problem code*/
      end
      ;
    /* ------------------------------------------------------------*/
    /* If page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/
      ;
      if (KS0IW00.TA5TSQIX > 0) /* Page was formatted*/
        ;
        KS0IW00.KS0IW-IXM = 11; /* Initialize line index*/
        ;
        while (KS0IW00.KS0IW-IXM > 0) /* Until end of lines*/
          ;
        /* ------------------------------------------------------------*/
        /* If selection was entered and is not a "S", indicate that*/
        /* only "S" may be entered to select a line.*/
        /* ------------------------------------------------------------*/
          ;
          if (KS0IM001.KS0IM-SEL[KS0IW-IXM] != KS0IW01.KS0IW-SEL[KS0IW-IXM]
           && KS0IM001.KS0IM-SEL[KS0IW-IXM] != "S" /* and is not a "S"*/
           && KS0IM001.KS0IM-SEL[KS0IW-IXM] != " ") /* and not blank*/
            ;
            KSWREC.XXXPRCNM = "15000"; /* Module identification*/
            set KS0IM001.KS0IM-SEL[KS0IW-IXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(13); /* Only "S" may be entered*/
            ;
          end
          ;
          KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM - 1;
                                   /* Decrement line number*/
          ;
        end
        ;
      end
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return; /* Exit to display map*/
  end
  ;
  ;
end // end KS0I-15000

// Verify scroll request
Function KS0I-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0IW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    KS0IW00.XXXTSPAG = KS0IW00.XXXTSPAG + 1; /* Reset page number*/
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0IW00.XXXTSPAG >= KS0IW00.TA5TSQIX) /* and no more pages*/
    ;
    KS0IW00.XXXTSPAG = KS0IW00.XXXTSPAG - 1; /* Reset page number*/
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If page number was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.XXXTSPAG != KS0IM001.XXXTSPAG) /* If page nbr entered*/
    if (KS0IM001.XXXTSPAG == 0) /* If nothing entered*/
      KS0IM001.XXXTSPAG = KS0IW00.XXXTSPAG;
    else
      if (KS0IM001.XXXTSPAG > KS0IW00.TA5TSQIX) /* If page too high*/
        set KS0IM001.XXXTSPAG bold, cursor;
        KSWREC.XXXPRCNM = "15100"; /* Module identification*/
        converseLib.validationFailed(95); /* No more pages to display*/
        ;
      end
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate an error for any data that was modified.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IXM = 11; /* Initialize line index*/
  ;
  while (KS0IW00.KS0IW-IXM > 0) /* Until end of lines*/
    ;
    if (KS0IM001.KS0IM-SEL[KS0IW-IXM] != KS0IW01.KS0IW-SEL[KS0IW-IXM]
     && KS0IM001.KS0IM-SEL[KS0IW-IXM] != " ")
      ;
      KSWREC.XXXPRCNM = "15100"; /* Module identification*/
      set KS0IM001.KS0IM-SEL[KS0IW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/
      ;
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM - 1; /* Decrement line number*/
    ;
  end
  ;
  if (KS0IM001.KS0IM-MAP1-STY-NBR != KS0IW01.KS0IW-STYLE) /* Style changed*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0IM001.KS0IM-MAP1-STY-NBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
  if (KS0IM001.KS0IM-BUS-UNIT-CD != KS0IW01.KS0IW-GPC) /* GPC changed*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0IM001.KS0IM-BUS-UNIT-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
  ;
end // end KS0I-15100

// Verify data in the line
Function KS0I-15200()
  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - GPC/STYLE , GPC/SESN/YR, GPC/RULING NBR, GPC/HS NBR*/
  /* GPC/POID or GPC/PO MONTH/CTRY*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-BUS-UNIT-CD > " ") /* If GPC entered*/
    if (KS0IM001.KS0IM-BUS-UNIT-CD != "02") /* If not footwear*/
      if (KS0IM001.KS0IM-MAP1-STY-NBR > " ") /* If style entered*/
        ;
      else
        if (KS0IM001.KS0IM-SESN-CD > " ") /* If season code entered*/
          if (KS0IM001.KS0IM-SESN-YR-RNG >= "00" /* If season year entered*/
           && KS0IM001.KS0IM-SESN-YR-RNG <= "99")
                                   /* If season year entered*/
            ;
          else
            ;
            set KS0IM001.KS0IM-SESN-YR-RNG cursor, bold;
            KSWREC.XXXPRCNM = "15200"; /* Module identification*/
            converseLib.validationFailed(26); /* Data is required message*/
          end
          ;
        else
          if (KS0IM001.KS0IM-HTS-NBR > " "       /* HS Number entered*/
           || KS0IM001.KS0IM-RULE-NBR > " "      /* Rule nbr entered*/
           || KS0IM001.KS0IM-PRBM-CD > " "       /* Feature cd entered*/
           || KS0IM001.KS0IM-STY-TYP-CD[1] > " " /* Style Type entered*/
           || KS0IM001.KS0IM-STY-TYP-CD[2] > " " /* Style Type entered*/
           || KS0IM001.KS0IM-STY-TYP-CD[3] > " ") /* Style Type entered*/
          else
            set KS0IM001.KS0IM-MAP1-STY-NBR cursor, bold;
            set KS0IM001.KS0IM-SESN-CD bold;
            set KS0IM001.KS0IM-SESN-YR-RNG bold;
            set KS0IM001.KS0IM-HTS-NBR bold;
            set KS0IM001.KS0IM-RULE-NBR bold;
            set KS0IM001.KS0IM-PRBM-CD bold;
            set KS0IM001.KS0IM-PRDCTN-YR bold;
            set KS0IM001.KS0IM-PRDCTN-MO bold;
            set KS0IM001.KS0IM-DLVR-MO bold;
            set KS0IM001.KS0IM-STY-TYP-CD[1] bold;
            set KS0IM001.KS0IM-STY-TYP-CD[2] bold;
            set KS0IM001.KS0IM-STY-TYP-CD[3] bold;
            KSWREC.XXXPRCNM = "15200"; /* Module identification*/
            converseLib.validationFailed(146); /* Data is required message*/
          end
        end
      end
  /* IF KS0IM001.KS0IM-PRDCTN-YR GE '00' /* PO ID year entered*/
  /* OR KS0IM001.KS0IM-PRDCTN-MO GT '00' /* PO ID mth entered*/
  /* OR KS0IM001.KS0IM-DLVR-MO GT '00' /* PO ID deliver mth entered*/
  /* OR KS0IM001.KS0IM-FCTY-CD GT ' ';/* Factory code entered*/
  /* SET KS0IM001.KS0IM-PRDCTN-YR CURSOR,BRIGHT;*/
  /* SET KS0IM001.KS0IM-PRDCTN-MO BRIGHT;*/
  /* SET KS0IM001.KS0IM-DLVR-MO BRIGHT;*/
  /* SET KS0IM001.KS0IM-FCTY-CD BRIGHT;*/
  /* MOVE '15200' TO KSWREC.XXXPRCNM;/* Module identification*/
  /* MOVE 112 TO EZEMNO;        /* PO ID invalid for GPC*/
  /* END;*/
    end /* WAS ELSE;*/
    if (KS0IM001.KS0IM-PRDCTN-YR >= "  "
     && KS0IW01.KS0IW-POIDT > " ")
      if (KS0IM001.KS0IM-PRDCTN-MO > "  ")
        if (KS0IM001.KS0IM-DLVR-MO > "  ")
          if (KS0IM001.KS0IM-FCTY-CD > " "
           || KS0IM001.KS0IM-ORIG-CD > " ")
          else
            set KS0IM001.KS0IM-FCTY-CD cursor, bold;
            set KS0IM001.KS0IM-ORIG-CD bold;
            KSWREC.XXXPRCNM = "15200"; /* Module identification*/
            converseLib.validationFailed(113); /* Data is required message*/
          end
        else
          set KS0IM001.KS0IM-PRDCTN-YR bold;
          set KS0IM001.KS0IM-PRDCTN-MO bold;
          set KS0IM001.KS0IM-DLVR-MO cursor, bold;
          KSWREC.XXXPRCNM = "15200"; /* Module identification*/
          converseLib.validationFailed(114); /* PO ID is missing or invalid*/
        end
      else
        set KS0IM001.KS0IM-PRDCTN-YR bold;
        set KS0IM001.KS0IM-PRDCTN-MO cursor, bold;
        set KS0IM001.KS0IM-DLVR-MO bold;
        KSWREC.XXXPRCNM = "15200"; /* Module identification*/
        converseLib.validationFailed(114); /* PO ID is missing or invalid*/
      end
    else
      if (KS0IM001.KS0IM-MAP1-STY-NBR > " ") /* If style entered*/
        ;
      else
        if (KS0IM001.KS0IM-SESN-CD > " ") /* If season code entered*/
          if (KS0IM001.KS0IM-SESN-YR-RNG >= "00"
           && KS0IM001.KS0IM-SESN-YR-RNG <= "99")
                                   /* If season year entered*/
            ;
          else
            ;
            set KS0IM001.KS0IM-SESN-YR-RNG cursor, bold;
            KSWREC.XXXPRCNM = "15200"; /* Module identification*/
            converseLib.validationFailed(26); /* Data is required message*/
          end
          ;
        else
          if (KS0IM001.KS0IM-HTS-NBR > " "       /* HS Number entered*/
           || KS0IM001.KS0IM-RULE-NBR > " "      /* Rule nbr entered*/
           || KS0IM001.KS0IM-PRBM-CD > " "       /* Feat cd entered*/
           || KS0IM001.KS0IM-STY-TYP-CD[1] > " " /* Style Type entered*/
           || KS0IM001.KS0IM-STY-TYP-CD[2] > " " /* Style Type entered*/
           || KS0IM001.KS0IM-STY-TYP-CD[3] > " ") /* Style Type entered*/
          else
            set KS0IM001.KS0IM-MAP1-STY-NBR cursor, bold;
            set KS0IM001.KS0IM-SESN-CD bold;
            set KS0IM001.KS0IM-SESN-YR-RNG bold;
            set KS0IM001.KS0IM-HTS-NBR bold;
            set KS0IM001.KS0IM-RULE-NBR bold;
            set KS0IM001.KS0IM-PRBM-CD bold;
            set KS0IM001.KS0IM-PRDCTN-YR bold;
            set KS0IM001.KS0IM-PRDCTN-MO bold;
            set KS0IM001.KS0IM-DLVR-MO bold;
            set KS0IM001.KS0IM-STY-TYP-CD[1] bold;
            set KS0IM001.KS0IM-STY-TYP-CD[2] bold;
            set KS0IM001.KS0IM-STY-TYP-CD[3] bold;
            KSWREC.XXXPRCNM = "15200"; /* Module identification*/
            converseLib.validationFailed(146); /* Data is required message*/
          end
        end
      end
      ;
    end
    ;
    ;
  /* END;   NE '02'*/
  else
    set KS0IM001.KS0IM-BUS-UNIT-CD cursor, bold;
    set KS0IM001.KS0IM-MAP1-STY-NBR bold;
    set KS0IM001.KS0IM-SESN-CD bold;
    set KS0IM001.KS0IM-SESN-YR-RNG bold;
    set KS0IM001.KS0IM-HTS-NBR bold;
    set KS0IM001.KS0IM-RULE-NBR bold;
    set KS0IM001.KS0IM-PRBM-CD bold;
    set KS0IM001.KS0IM-PRDCTN-YR bold;
    set KS0IM001.KS0IM-PRDCTN-MO bold;
    set KS0IM001.KS0IM-DLVR-MO bold;
    set KS0IM001.KS0IM-STY-TYP-CD[1] bold;
    set KS0IM001.KS0IM-STY-TYP-CD[2] bold;
    set KS0IM001.KS0IM-STY-TYP-CD[3] bold;
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    converseLib.validationFailed(146); /* Data is required message*/
  end
  ;
  ;
end // end KS0I-15200

// Verify heading data entered
Function KS0I-15300()
  /* ------------------------------------------------------------*/
  /* Verify the Division code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-DIV-CD > " ") /* If DIV-CD entered*/
    if (KS0IM001.KS0IM-DIV-CD in XDVTBL.XDVCD) /* If code exists*/
       /* next sentence*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-DIV-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(130); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style Type codes entered*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-STY-TYP-CD[1] > " ") /* If STY-TYP-CD entered*/
    if (KS0IM001.KS0IM-STY-TYP-CD[1] in YKSTBL.YKS-STY-TYP-CD /* Code in tbl*/
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")             /* and active*/
       /* next sentence*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-STY-TYP-CD[1] cursor, bold; /* Highlight*/
      converseLib.validationFailed(76); /* Field missing or invalid*/
    end
  end
  ;
  if (KS0IM001.KS0IM-STY-TYP-CD[2] > " ") /* If STY-TYP-CD entered*/
    if (KS0IM001.KS0IM-STY-TYP-CD[2] in YKSTBL.YKS-STY-TYP-CD /* Code in tbl*/
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")             /* and active*/
       /* next sentence*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-STY-TYP-CD[2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(76); /* Field missing or invalid*/
    end
  end
  ;
  if (KS0IM001.KS0IM-STY-TYP-CD[3] > " ") /* If STY-TYP-CD entered*/
    if (KS0IM001.KS0IM-STY-TYP-CD[3] in YKSTBL.YKS-STY-TYP-CD /* Code in tbl*/
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")             /* and active*/
       /* next sentence*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-STY-TYP-CD[3] cursor, bold; /* Highlight*/
      converseLib.validationFailed(76); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Customs Product Status code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-STAT > " ") /* If status entered*/
    if (KS0IM001.KS0IM-STAT in YPRTBL.YPR-PROD-STAT-CD /* Code in table*/
     && YPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")      /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0IM001.KS0IM-STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(69); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-ORIG-CD > " ") /* If origin entered*/
    if (KS0IM001.KS0IM-ORIG-CD in XCTTBL.XCTCD /* Code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      KS0IW01.KS0IW-ORIG-DESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-ORIG-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(70); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Exp Style flag.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-EXP-STYLE != "N"
   && KS0IM001.KS0IM-EXP-STYLE != "Y"
   && KS0IM001.KS0IM-EXP-STYLE != " ")
    ;
    KSWREC.XXXPRCNM = "15300"; /* Module identification*/
    set KS0IM001.KS0IM-EXP-STYLE cursor, bold; /* Highlight*/
    converseLib.validationFailed(129); /* Field missing or invalid*/
  else
    ;
    if (KS0IM001.KS0IM-PRDCTN-YR > " " /* If PO ID entered*/
     && KS0IM001.KS0IM-PRDCTN-MO > " " 
     && KS0IM001.KS0IM-DLVR-MO > " "   
     && KS0IM001.KS0IM-EXP-STYLE != "N") /* and exp.style not 'n', error*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-EXP-STYLE cursor, bold; /* Highlight*/
      converseLib.validationFailed(131); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the US Made flag.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-US-MADE-FLAG == "N"
   || KS0IM001.KS0IM-US-MADE-FLAG == "Y"
   || KS0IM001.KS0IM-US-MADE-FLAG == " ")
    ;
  else
    KSWREC.XXXPRCNM = "15200"; /* Module identification*/
    set KS0IM001.KS0IM-US-MADE-FLAG cursor, bold; /* Highlight*/
    converseLib.validationFailed(129); /* Field missing or invalid*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Team Number code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-TEAM-CD > " ") /* If team code entered*/
    KS0I-15301(); /* Select VCTEAM01 row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Team code exists*/
      KS0IW01.KS0IW-TEAM-DESC = VCTEAM01.KS-TEAM-SDESC; /* Move desc*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-TEAM-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(20); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Quota Category code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-QOTA-CAT-CD > " ") /* If quota entered*/
    if (KS0IM001.KS0IM-QOTA-CAT-CD in YQTTBL.YQT-QOTA-CAT-CD
     && YQTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      /* Continue on*/
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-QOTA-CAT-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(58); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Year range entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-SESN-YR-RNG != " ") /* If season year entered*/
    if (KS0IM001.KS0IM-SESN-YR-RNG >= "00"
     && KS0IM001.KS0IM-SESN-YR-RNG <= "99")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-SESN-YR-RNG cursor, bold; /* Highlight*/
      converseLib.validationFailed(26); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-SESN-CD > " ") /* Season code entered*/
    if (KS0IM001.KS0IM-SESN-CD in XSETBL.XSECD /* Code in table*/
     && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      if (KS0IM001.KS0IM-SESN-YR-RNG >= "00"
       && KS0IM001.KS0IM-SESN-YR-RNG <= "99")
        ;
    /* Next Sentence*/
        ;
      else
        ;
        KSWREC.XXXPRCNM = "15300"; /* Module identification*/
        set KS0IM001.KS0IM-SESN-YR-RNG cursor, bold; /* Highlight*/
        converseLib.validationFailed(26); /* Field missing or invalid*/
      end
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-SESN-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(27); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Ruling Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-RULE-NBR > " ") /* If rule nbr entered*/
    set VBDRUL01 empty; /* Clear record*/
    if (KS0IM001.KS0IM-BUS-UNIT-CD == "EQ")
      if (KS0IW00.KS0IW-SAV-EQUIP-GPC != " ")
        VBDRUL01.XGPCD = KS0IW00.KS0IW-SAV-EQUIP-GPC;
        VBDRUL01.KS-RULE-NBR = KS0IM001.KS0IM-RULE-NBR;
        KS0I-15302(); /* Select VBDRUL01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
          KS0IW00.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
          KS0IW01.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
        else
          KSWREC.XXXPRCNM = "15300"; /* Module identification*/
          set KS0IM001.KS0IM-RULE-NBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(32); /* Field missing or invalid*/
        end
      else
        VBDRUL01.XGPCD = "02";
        VBDRUL01.KS-RULE-NBR = KS0IM001.KS0IM-RULE-NBR;
        KS0I-15302(); /* Select VBDRUL01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
          KS0IW00.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
          KS0IW01.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
          KS0IW00.KS0IW-SAV-EQUIP-GPC = "02";
        else
          set VBDRUL01 empty; /* Clear record*/
          VBDRUL01.XGPCD = "03";
          VBDRUL01.KS-RULE-NBR = KS0IM001.KS0IM-RULE-NBR;
          KS0I-15302(); /* Select VBDRUL01 row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
            KS0IW00.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
            KS0IW01.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
            KS0IW00.KS0IW-SAV-EQUIP-GPC = "03";
          else
            KSWREC.XXXPRCNM = "15300"; /* Module identification*/
            set KS0IM001.KS0IM-RULE-NBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(32); /* Field missing or invalid*/
          end
        end
      end
    else
      VBDRUL01.XGPCD = KS0IM001.KS0IM-BUS-UNIT-CD;
      VBDRUL01.KS-RULE-NBR = KS0IM001.KS0IM-RULE-NBR;
      KS0I-15302(); /* Select VBDRUL01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
        KS0IW00.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
        KS0IW01.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
      else
        KS0IW00.KS0IW-RULE-NBR = KS0IM001.KS0IM-RULE-NBR;
        if (KS0IM001.KS0IM-BUS-UNIT-CD == "02" /* if footwear*/
         && KS0IW00.KS0IW-RULE-BYTE[5] == " ") /* and only xref entered*/
          set VBDRUL01 empty; /* Clear record*/
          VBDRUL01.XGPCD = KS0IM001.KS0IM-BUS-UNIT-CD;
          VBDRUL01.KS-RULE-XREF-CD = KS0IM001.KS0IM-RULE-NBR;
          KS0I-15310(); /* Select VBDRUL01 xref*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
            KS0IW00.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
            KS0IW01.KS0IW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
          else
            KSWREC.XXXPRCNM = "15300"; /* Module identification*/
            set KS0IM001.KS0IM-RULE-NBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(32); /* Field missing or invalid*/
          end
        else
          KSWREC.XXXPRCNM = "15300"; /* Module identification*/
          set KS0IM001.KS0IM-RULE-NBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(32); /* Field missing or invalid*/
        end
      end
    end
  else
    KS0IW00.KS0IW-RULE-NBR = " ";
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style entered.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-STYLE-FND = "N"; /* Initialize switch*/
  if (KS0IM001.KS0IM-MAP1-STY-NBR > " ") /* If style entered*/
    ;
    set PG2REC empty; /* Clear record*/
    if (KS0IM001.KS0IM-BUS-UNIT-CD == "EQ") /* Equipment BUC*/
      PG2REC.XGPCD = "03"; /* Try apparel GPC*/
    else
      PG2REC.XGPCD = KS0IM001.KS0IM-BUS-UNIT-CD; /* GPC code*/
    end
    PG2REC.SY1STNBR = KS0IM001.KS0IM-MAP1-STY-NBR; /* Style nbr*/
    KS0I-15303(); /* Select VSYCLR01 set*/
    KS0I-15304(); /* Fetch  VSYCLR01 row*/
    ;
    if (KS0IM001.KS0IM-BUS-UNIT-CD == "EQ") /* Equipment BUC*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
        KS0IW00.KS0IW-SAV-EQUIP-GPC = PG2REC.XGPCD; /* save GPC code*/
        KS0IW00.KS0IW-STYLE-FND = "Y";
        KS0IW01.SY1STYNM = PG2REC.SY1STYNM; /* Move description*/
      else
        PG2REC.XGPCD = "02"; /* Try footwear gpc*/
        PG2REC.SY1STNBR = KS0IM001.KS0IM-MAP1-STY-NBR; /* Style nbr*/
        KS0I-15305(); /* Close  VSYCLR01 set*/
        KS0I-15303(); /* Select VSYCLR01 set*/
        KS0I-15304(); /* Fetch  VSYCLR01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
          KS0IW00.KS0IW-SAV-EQUIP-GPC = PG2REC.XGPCD; /* save GPC code*/
          KS0IW00.KS0IW-STYLE-FND = "Y";
          KS0IW01.SY1STYNM = PG2REC.SY1STYNM; /* Move description*/
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
        KS0IW00.KS0IW-STYLE-FND = "Y";
        KS0IW00.KS0IW-SAV-EQUIP-GPC = PG2REC.XGPCD;
        KS0IW01.SY1STYNM = PG2REC.SY1STYNM; /* Move description*/
      end
    end
    ;
    KS0I-15305(); /* Close  VSYCLR01 set*/
    ;
    if (KS0IM001.KS0IM-BUS-UNIT-CD == "EQ" /* Equipment BUC*/
     && KS0IW00.KS0IW-STYLE-FND == "N")    /* Style not found*/
      KS0I-15306(); /* Select VCPROD02 set*/
      KS0I-15307(); /* Fetch  VCPROD02 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
        KS0IW00.KS0IW-STYLE-FND = "Y";
        KS0IW00.KS0IW-SAV-EQUIP-GPC = VCPROD02.XGPCD;
        KS0IW01.SY1STYNM = VCPROD02.KS-SHORT-STY-NM; /* Move desc*/
        KS0I-15308();
      else
        KS0I-15308();
      end
    else
      if (KS0IM001.KS0IM-BUS-UNIT-CD != "EQ"
       && KS0IW00.KS0IW-STYLE-FND == "N")
        KS0I-15306(); /* Select VCPROD02 set*/
        KS0I-15307(); /* Fetch  VCPROD02 set*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
          KS0IW00.KS0IW-STYLE-FND = "Y";
          KS0IW00.KS0IW-SAV-EQUIP-GPC = VCPROD02.XGPCD;
          KS0IW01.SY1STYNM = VCPROD02.KS-SHORT-STY-NM; /* Move desc*/
          KS0I-15308();
        else
          KS0I-15308();
        end
      end
    end
    ;
    if (KS0IW00.KS0IW-STYLE-FND == "N" /* If style not found*/
     && KS0IM001.KS0IM-SESN-CD == " "  /* and season code not entered*/
     && KS0IM001.KS0IM-PRBM-CD == " "  /* and feature code not entered*/
     && KS0IM001.KS0IM-RULE-NBR == " " /* and rule nbr not entered*/
     && KS0IM001.KS0IM-HTS-NBR == " "  /* and hs nbr not entered*/
     && KS0IW01.KS0IW-POIDT == " ")    /* and PO ID not entered*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-MAP1-STY-NBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(67); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style Dimension code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-DIM-CD > " ") /* If dimension entered*/
    if (KS0IM001.KS0IM-DIM-CD in XDMTBL.XDMCD /* Code in table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0IM001.KS0IM-DIM-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(78); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the HS Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-HTS-NBR > " ") /* If HS number entered*/
    KS0IW01.KS0IW-HTS-NUMBER = KS0IM001.KS0IM-HTS-NBR;
    KS0I-15309(); /* Verify HS format*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Market Region entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-REG-CD > " ") /* If reg-CD entered*/
    if (KS0IM001.KS0IM-REG-CD in XDRTBL.XDR-PROD-REG-CD) /* If code exists*/
       /* next sentence*/
    else
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-REG-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(142); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the General Product Class code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-BUS-UNIT-CD == "EQ") /* Equipment bus unit cd*/
    KS0IW01.KS0IW-GPC-DESC = "EQUIPMENT"; /* Move desc*/
    KS0IM001.KS0IM-GPC-DESC = "EQUIPMENT"; /* Move desc*/
  else
    if (KS0IM001.KS0IM-BUS-UNIT-CD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")  /* and active status*/
      ;
      KS0IW01.KS0IW-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Move desc*/
      KS0IM001.KS0IM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Move desc*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15300"; /* Module identification*/
      set KS0IM001.KS0IM-BUS-UNIT-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(147); /* Field missing or invalid*/
      ;
    end
  end
  if (KS0IM001.KS0IM-BUS-UNIT-CD != "02"
   && KS0IM001.KS0IM-BUS-UNIT-CD != "03"
   && KS0IM001.KS0IM-BUS-UNIT-CD != "EQ")
    KSWREC.XXXPRCNM = "15300"; /* Module identification*/
    set KS0IM001.KS0IM-BUS-UNIT-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(157); /* Field missing or invalid*/
  end
  ;
  ;
end // end KS0I-15300

// Select unique VCTEAM01 row
Function KS0I-15301()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCTEAM01 empty; /* Clear row storage area*/
  ;
  VCTEAM01.KS-TEAM-CD = KS0IM001.KS0IM-TEAM-CD; /* Team code*/
  ;
  try
    call "IO6060" ("S ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15301"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.VCTEAM01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-15301

// Select unique VBDRUL01 row
Function KS0I-15302()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6070" ("S ", SQLCA, VBDRUL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15302"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBDRUL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VBDRUL01.VBDRUL01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-15302

// Select VSYCLR01 set
Function KS0I-15303()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15303"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-15303

// Fetch  VSYCLR01 row
Function KS0I-15304()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15304"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-15304

// Close  VSYCLR01 set
Function KS0I-15305()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("CS", SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15305"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-15305

// Select VCPROD01 set
Function KS0I-15306()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  ;
  if (KS0IM001.KS0IM-BUS-UNIT-CD == "EQ") /* Equipment BUC*/
    VCPROD02.KS-BUS-UNIT-CD = "EQ"; /* BUC*/
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0IM001.KS0IM-BUS-UNIT-CD; /* BUC*/
  end
  VCPROD02.SY1STNBR = KS0IM001.KS0IM-MAP1-STY-NBR; /* Style*/
  VCPROD02.KS-XPRMT-STY-NBR = KS0IM001.KS0IM-MAP1-STY-NBR; /* Style*/
  ;
  VCPROD02.XSNYR = -1; /* Season year range*/
  VCPROD02.XSECD = "*"; /* Season code*/
  VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
  VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
  VCPROD02.KS-HTS-HDG-CD = "*";
  VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
  VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
  VCPROD02.KS-HTS-STAT-CD = "*";
  VCPROD02.SY2CLRID = "*";
  VCPROD02.XDMCD = "*";
  ;
  if (KS0IM001.KS0IM-PRBM-CD > " ")
    VCPROD02.KS-PRBM-NBR = -2;
  else
    VCPROD02.KS-PRBM-NBR = -1;
  end
  ;
  try
    call "VCPROD02" ("S1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* SlC tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15306"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-15306

// Fetch  VCPROD01 row
Function KS0I-15307()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("N1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15307"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-15307

// Close  VCPROD01 set
Function KS0I-15308()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("C1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15308"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-15308

// Verify HTS number format
Function KS0I-15309()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999  or  9999.99.99-99*/
  /* or  9999.99.99,99*/
  /* this routine verifies that there is a ' ' or '.' in positions*/
  /* 3 and 5 and 8. If any of the other positions contain a '.', it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* no errors found*/
    ;
    KS0IW00.KS0IW-IXM = 1; /* initialize index*/
    ;
    while (KS0IW00.KS0IW-IXM <= 14)
      if (KS0IW00.KS0IW-IXM == 5 /* these 2 positions must be blank or*/
       || KS0IW00.KS0IW-IXM == 8) /* equal '.'. if not, it's in error*/
        if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] != " ")
          if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] != ".")
            KSWREC.XXXPRCNM = "15309"; /* Module id*/
            set KS0IM001.KS0IM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
            KS0IW00.KS0IW-HTS-FORMAT-SW = "N"; /* Format invalid*/
          end
        end
      else
        if (KS0IW00.KS0IW-IXM == 14) /* this position must be blank*/
          if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] != " ")
            KSWREC.XXXPRCNM = "15309"; /* Module id*/
            set KS0IM001.KS0IM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
            KS0IW00.KS0IW-HTS-FORMAT-SW = "N"; /* Format invalid*/
          end
        else
          if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] == "."
           || KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] == "-"
           || KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] == ",")
            KSWREC.XXXPRCNM = "15309"; /* Module id*/
            set KS0IM001.KS0IM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
            KS0IW00.KS0IW-HTS-FORMAT-SW = "N"; /* Format invalid*/
          end
        end
      end
      KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* set index up by 1*/
    end
    ;
  /* ----------------------------------------------------------------*/
  /* Check alternate format for ftwr*/
  /* ----------------------------------------------------------------*/
    ;
    if (KS0IM001.KS0IM-BUS-UNIT-CD == "02"
     && converseVar.validationMsgNum == 35) /* Error found on format*/
      ;
      converseLib.validationFailed(0); /* initialize error*/
      KS0IW00.KS0IW-HTS-FORMAT-SW = "Y"; /* Reset Format Sw*/
      KS0IW00.KS0IW-IXM = 1; /* initialize index*/
      ;
      while (KS0IW00.KS0IW-IXM <= 14)
        if (KS0IW00.KS0IW-IXM == 5 /* these 3 positions must be blank or*/
         || KS0IW00.KS0IW-IXM == 8 /* equal '.'. if not, it's in error*/
         || KS0IW00.KS0IW-IXM == 11)
          if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] != " ")
            if (KS0IW00.KS0IW-IXM == 5
             || KS0IW00.KS0IW-IXM == 8)
              if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] != ".")
                KSWREC.XXXPRCNM = "15309"; /* Module id*/
                set KS0IM001.KS0IM-HTS-NBR cursor, bold;
                converseLib.validationFailed(97); /* Invalid HTS nbr*/
                KS0IW00.KS0IW-HTS-FORMAT-SW = "N"; /* Format invalid*/
              end
            else
              if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] != "-"
               && KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] != ",")
                KSWREC.XXXPRCNM = "15309"; /* Module id*/
                set KS0IM001.KS0IM-HTS-NBR cursor, bold;
                converseLib.validationFailed(97); /* Invalid HTS nbr*/
                KS0IW00.KS0IW-HTS-FORMAT-SW = "N"; /* Format invalid*/
              end
            end
          end
        else
          if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] == "."
           || KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] == "-"
           || KS0IW01.KS0IW-HTS-BYTE[KS0IW-IXM] == ",")
            KSWREC.XXXPRCNM = "15309"; /* Module id*/
            set KS0IM001.KS0IM-HTS-NBR cursor, bold;
            converseLib.validationFailed(97); /* Invalid HTS nbr*/
            KS0IW00.KS0IW-HTS-FORMAT-SW = "N"; /* Format invalid*/
          end
        end
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* set index up by 1*/
      end
    end
    ;
  end
  ;
end // end KS0I-15309

// Select unique VBDRUL01 xref
Function KS0I-15310()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6070" ("SA", SQLCA, VBDRUL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15310"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBDRUL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VBDRUL01.VBDRUL01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-15310

// Verify customs problem code
Function KS0I-15400()
  /* ------------------------------------------------------------*/
  /* Verify the Customs Problem code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM001.KS0IM-PRBM-CD > " " /* If problem entered*/
   && KS0IM001.KS0IM-PRBM-CD != KS0IW00.KS0IW-SAVE-PRBM)
    KS0IW00.KS0IW-SAVE-PRBM = KS0IM001.KS0IM-PRBM-CD;
    if (KS0IM001.KS0IM-PRBM-CD in YKPTBL.YKP-PRBM-CD /* Code in table*/
     && YKPTBL.XXXSTAT[sysVar.arrayIndex] == "A")    /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "15400"; /* Module identification*/
      set KS0IM001.KS0IM-PRBM-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(68); /* Field missing or invalid*/
      ;
    end
  end
  ;
  ;
end // end KS0I-15400

// set up map and ws - map 1
Function KS0I-15500()
  /* ---------------------------------------------------------------*/
  /* Set map and ws values to be equal*/
  /* ---------------------------------------------------------------*/
  ;
  KS0IW01.KS0IW-GPC = KS0IM001.KS0IM-BUS-UNIT-CD;
                                   /* If any data changed*/
  KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
  KS0IW01.KS0IW-SESN-CD = KS0IM001.KS0IM-SESN-CD;
  if (KS0IM001.KS0IM-SESN-YR-RNG != " ")
    KS0IW01.KS0IW-SESN-YY = KS0IM001.KS0IM-SESN-YR-RNG;
    if (KS0IW01.KS0IW-SESN-YY > "65")
      KS0IW01.KS0IW-SESN-CENT = "19";
    else
      KS0IW01.KS0IW-SESN-CENT = "20";
    end
  else
    KS0IW01.KS0IW-SESN-YR = " ";
  end
  KS0IW01.KS0IW-ORIG-CD = KS0IM001.KS0IM-ORIG-CD;
  KS0IW01.KS0IW-US-MADE-FLAG = KS0IM001.KS0IM-US-MADE-FLAG;
  KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
  KS0IW01.KS0IW-RULE-NBR-MAP = KS0IM001.KS0IM-RULE-NBR;
  KS0IW01.KS0IW-RULE-NBR = KS0IW00.KS0IW-RULE-NBR;
  KS0IW01.KS0IW-QOTA-CAT-CD = KS0IM001.KS0IM-QOTA-CAT-CD;
  KS0IW01.KS0IW-TEAM-CD = KS0IM001.KS0IM-TEAM-CD;
  KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD;
  KS0IW01.KS0IW-DIV-CD = KS0IM001.KS0IM-DIV-CD;
  KS0IW01.KS0IW-STAT = KS0IM001.KS0IM-STAT;
  KS0IW01.KS0IW-EXP-STYLE = KS0IM001.KS0IM-EXP-STYLE;
  KS0IW01.KS0IW-COLR-CD-ID = KS0IM001.KS0IM-COLR-CD-ID;
  KS0IW01.KS0IW-DIM-CD = KS0IM001.KS0IM-DIM-CD;
  KS0IW01.KS0IW-PRDCTN-YR = KS0IM001.KS0IM-PRDCTN-YR;
  KS0IW01.KS0IW-PRDCTN-MO = KS0IM001.KS0IM-PRDCTN-MO;
  KS0IW01.KS0IW-DLVR-MO = KS0IM001.KS0IM-DLVR-MO;
  KS0IW01.KS0IW-FCTY-CD = KS0IM001.KS0IM-FCTY-CD;
  KS0IW01.KS0IW-STY-TYP-CD1 = KS0IM001.KS0IM-STY-TYP-CD[1];
  KS0IW01.KS0IW-STY-TYP-CD2 = KS0IM001.KS0IM-STY-TYP-CD[2];
  KS0IW01.KS0IW-STY-TYP-CD3 = KS0IM001.KS0IM-STY-TYP-CD[3];
  KS0IW01.KS0IW-REG-CD = KS0IM001.KS0IM-REG-CD;
  set KS0IM001 initial; /* Clear map*/
  KS0IM001.KS0IM-BUS-UNIT-CD = KS0IW01.KS0IW-GPC;
  KS0IM001.KS0IM-MAP1-STY-NBR = KS0IW01.KS0IW-STYLE;
  KS0IM001.KS0IM-SESN-CD = KS0IW01.KS0IW-SESN-CD;
  if (KS0IW01.KS0IW-SESN-YR > " ")
    KS0IM001.KS0IM-SESN-YR-RNG = KS0IW01.KS0IW-SESN-YY;
  else
    KS0IM001.KS0IM-SESN-YR-RNG = "  ";
  end
  KS0IM001.KS0IM-ORIG-CD = KS0IW01.KS0IW-ORIG-CD;
  KS0IM001.KS0IM-US-MADE-FLAG = KS0IW01.KS0IW-US-MADE-FLAG;
  KS0IM001.KS0IM-HTS-NBR = KS0IW01.KS0IW-HTS-NBR;
  KS0IM001.KS0IM-RULE-NBR = KS0IW01.KS0IW-RULE-NBR-MAP;
  KS0IM001.KS0IM-QOTA-CAT-CD = KS0IW01.KS0IW-QOTA-CAT-CD;
  KS0IM001.KS0IM-TEAM-CD = KS0IW01.KS0IW-TEAM-CD;
  KS0IM001.KS0IM-PRBM-CD = KS0IW01.KS0IW-PRBM-CD;
  KS0IM001.KS0IM-DIV-CD = KS0IW01.KS0IW-DIV-CD;
  KS0IM001.KS0IM-STAT = KS0IW01.KS0IW-STAT;
  KS0IM001.KS0IM-EXP-STYLE = KS0IW01.KS0IW-EXP-STYLE;
  KS0IM001.KS0IM-COLR-CD-ID = KS0IW01.KS0IW-COLR-CD-ID;
  KS0IM001.KS0IM-DIM-CD = KS0IW01.KS0IW-DIM-CD;
   /* OVE KS0IW01.KS0IW-PRDCTN-YR TO KS0IM001.KS0IM-PRDCTN-YR;*/
  if (KS0IW01.KS0IW-PRDCTN-YR == "0")
    KS0IM001.KS0IM-PRDCTN-YR = " ";
  else
    KS0IM001.KS0IM-PRDCTN-YR = KS0IW01.KS0IW-PRDCTN-YR;
  end
  if (KS0IW01.KS0IW-PRDCTN-MO == "0")
    KS0IM001.KS0IM-PRDCTN-MO = " ";
  else
    KS0IM001.KS0IM-PRDCTN-MO = KS0IW01.KS0IW-PRDCTN-MO;
  end
  if (KS0IW01.KS0IW-DLVR-MO == "0")
    KS0IM001.KS0IM-DLVR-MO = " ";
  else
    KS0IM001.KS0IM-DLVR-MO = KS0IW01.KS0IW-DLVR-MO;
  end
  KS0IM001.KS0IM-FCTY-CD = KS0IW01.KS0IW-FCTY-CD;
  KS0IM001.KS0IM-STY-TYP-CD[1] = KS0IW01.KS0IW-STY-TYP-CD1;
  KS0IM001.KS0IM-STY-TYP-CD[2] = KS0IW01.KS0IW-STY-TYP-CD2;
  KS0IM001.KS0IM-STY-TYP-CD[3] = KS0IW01.KS0IW-STY-TYP-CD3;
  KS0IM001.KS0IM-REG-CD = KS0IW01.KS0IW-REG-CD;
  KS0IW00.KS0IW-SWR = "Y"; /* Request for data*/
  KS0IW00.KS0IW-DATA-CHANGED = "Y";
  ;
  ;
end // end KS0I-15500

// Process valid input request
Function KS0I-16000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no errors*/
    KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    KS0IW00.XXXTSPAG = KS0IW00.XXXTSPAG - 1; /* Decrement page number*/
    KS0IW00.KS0IW-SAV = 1; /* Reset index for cursor plcmt*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    KS0IW00.XXXTSPAG = KS0IW00.XXXTSPAG + 1; /* Increment page number*/
    KS0IW00.KS0IW-SAV = 1; /* Reset index for cursor plcmt*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a page number was requested, set the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.XXXTSPAG != KS0IM001.XXXTSPAG) /* If page number entered*/
    ;
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      ;
      KS0IW00.XXXTSPAG = KS0IM001.XXXTSPAG;
      KS0IW00.KS0IW-SAV = 1; /* Reset index for cursor plcmt*/
      return; /* Return to previous process*/
      ;
    else
      ;
      return;
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the select fields and clear the map input/output area.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Initialize line index*/
  ;
  while (KS0IW00.KS0IW-IXM <= 11) /* Until end of lines*/
    ;
    if (KS0IM001.KS0IM-SEL[KS0IW-IXM] != KS0IW01.KS0IW-SEL[KS0IW-IXM])
      ;
      KS0IW01.KS0IW-SEL[KS0IW-IXM] = KS0IM001.KS0IM-SEL[KS0IW-IXM];
      KS0IW00.KS0IW-SWU = "Y"; /* Storage update switch*/
      ;
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a line was selected, save the key fields and indicate*/
  /* that map 002 is to be displayed.*/
  /* ------------------------------------------------------------*/
  ;
  if ("S" in KS0IW01.KS0IW-SEL) /* Line was selected*/
    ;
    KS0IW00.KS0IW-IXM = sysVar.arrayIndex; /* Map line index*/
    ;
    KS0IM002.KS0IM-BUS-UNIT-CD = KS0IW01.XGPCD[KS0IW-IXM]; /* GPC*/
    KS0IW00.KS0IW-SAV-EQUIP-GPC = KS0IW01.XGPCD[KS0IW-IXM];
    KS0IM002.KS0IM-SESN-CD = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IXM];
    KS0IM002.KS0IM-SESN-YR-RNG = KS0IW01.KS0IW-DTL-SESN-YY[KS0IW-IXM];
    KS0IM002.KS0IM-STY-NBR = KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IXM];
    KS0IM002.KS0IM-COLR-CD-ID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IXM];
    KS0IM002.KS0IM-DIM-CD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IXM];
    KS0IM002.KS0IM-STY-TYP-CD = KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IXM];
    KS0IM002.KS0IM-HTS-NBR = KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IXM];
    KS0IM002.KS0IM-GEN-DTY-RATE = KS0IW01.KS0IW-DTL-DTY-RATE[KS0IW-IXM];
    KS0IM002.KS0IM-QOTA-CAT-CD = KS0IW01.KS0IW-DTL-QOTA-CAT-CD[KS0IW-IXM];
    KS0IM002.KS0IM-RULE-NBR = KS0IW01.KS0IW-DTL-RULE-NBR[KS0IW-IXM];
    ;
    KS0IW00.KS0IW-SWD = "2"; /* Map to be displayed switch*/
    KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
    ;
  end
  ;
  if (converseVar.eventKey is enter /* Enter pressed*/
   || converseVar.eventKey is pf14  /* PF14 pressed*/
   || converseVar.eventKey is pf15  /* PF15 pressed*/
   || converseVar.eventKey is pf16  /* PF16 pressed*/
   || converseVar.eventKey is pf17) /* PF17 pressed*/
    KS0IW00.KS0IW-IXM = 1; /* reset index*/
    KS0IW00.KS0IW-IX1 = 1; /* reset index*/
    KS0IW00.KS0IW-SAV = 0; /* reset index*/
    KS0IW00.KS0IW-REFORMAT-MAP1 = "N";
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      while (KS0IW00.KS0IW-IXM <= 11) /* Until end of lines*/
        ;
        if (KS0IM001.KS0IM-SEL[KS0IW-IXM] == "S") /* This line selected*/
          KS0IW01.KS0IW-SAVE-INDEX[KS0IW-IX1] = KS0IW00.KS0IW-IXM;
          KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
          KS0IW00.KS0IW-SAVE-PAGE = KS0IW00.XXXTSPAG;
        end
        KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
        ;
      end
      if (KS0IW00.KS0IW-IX1 == 1   /* if none were selected*/
       && KS0IW00.KS0IW-SWR != "Y" /* data not requested*/
       && KS0IM001.KS0IM-DTL-STY-NBR[1] > " ") /* and data on the map*/
        converseLib.validationFailed(43); /* set error msg nbr*/
        KS0IW00.KS0IW-SWR = "N"; /* do not request data*/
        KS0IW00.KS0IW-SWF = "N"; /* do not format map*/
        KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
        set KS0IM001.KS0IM-SEL[1] cursor; /* Position cursor*/
        return; /* return*/
      end
      if (converseVar.eventKey is enter) /* Enter pressed*/
        if (KS0IM001.KS0IM-BUS-UNIT-CD != KS0IW01.KS0IW-GPC    /* GPC changed*/
         || KS0IM001.KS0IM-MAP1-STY-NBR != KS0IW01.KS0IW-STYLE /* or Style*/
         || KS0IM001.KS0IM-SESN-CD != KS0IW01.KS0IW-SESN-CD)   /* or Season cd*/
          ;
    /* ------------------------------------------------------------*/
    /* If a search key was entered, request the data to display.*/
    /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/
          ;
          if (KS0IM001.KS0IM-MAP1-STY-NBR > " " /* Style was entered*/
           || KS0IM001.KS0IM-SESN-CD > " "      /* or Season was entered*/
           || KS0IM001.KS0IM-SESN-YR-RNG > " ") /* or Season was entered*/
            ;
            KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
            KS0IW00.KS0IW-FNC = "I"; /* Function switch*/
            ;
          else
            ;
            KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
            ;
            KS0I-11100(); /* Purge any temporary storage*/
            ;
          end
          ;
          return; /* Return to previous process*/
          ;
        else
          if (KS0IM001.KS0IM-SESN-YR-RNG != KS0IW01.KS0IW-SESN-YY)
            if (KS0IM001.KS0IM-SESN-YR-RNG == " "
             && KS0IW01.KS0IW-SESN-YR == "0")
               /* next sentence*/
            else
              if (KS0IM001.KS0IM-MAP1-STY-NBR > " " /* Style was entered*/
               || KS0IM001.KS0IM-SESN-CD > " "      /* or Season was entered*/
               || KS0IM001.KS0IM-SESN-YR-RNG > " ")
                                   /* or Season was entered*/
                ;
                KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
                KS0IW00.KS0IW-FNC = "I"; /* Function switch*/
                ;
              else
                ;
                KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
                ;
                KS0I-11100(); /* Purge any temporary storage*/
                ;
              end
              ;
              return; /* Return to previous process*/
              ;
            end
          else
            if (KS0IM001.KS0IM-SESN-YR-RNG == "00"
             && KS0IW01.KS0IW-SESN-YR == "0")
              ;
              if (KS0IM001.KS0IM-MAP1-STY-NBR > " " /* Style was entered*/
               || KS0IM001.KS0IM-SESN-CD > " "      /* or Season was entered*/
               || KS0IM001.KS0IM-SESN-YR-RNG > " ")
                                   /* or Season was entered*/
                ;
                KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
                KS0IW00.KS0IW-FNC = "I"; /* Function switch*/
                ;
              else
                ;
                KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
                ;
                KS0I-11100(); /* Purge any temporary storage*/
                ;
              end
              ;
              return; /* Return to previous process*/
              ;
            end
          end
        end
        ;
        KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
        if (KS0IW00.KS0IW-DATA-CHANGED == "Y"
         && converseVar.validationMsgNum > 0)
          KS0IW00.KS0IW-DATA-CHANGED = "N";
          KS0IW00.KS0IW-SWD = "1"; /* Map switch*/
          KS0IW00.KS0IW-SWF = "N"; /* Format map switch*/
        else
          if (KS0IW00.KS0IW-DATA-CHANGED == "Y")
            KS0IW00.KS0IW-DATA-CHANGED = "N";
            KS0IW00.KS0IW-SWD = "1"; /* Map switch*/
          else
            if (KS0IM001.KS0IM-DTL-STY-NBR[1] > " ")
              KS0IW00.KS0IW-SWD = "2";
            else
              KS0IW00.KS0IW-SWD = "1"; /* Map switch*/
            end
          end
        end
        KS0IW00.KS0IW-FNC = "I"; /* Function switch*/
        ;
      end
      ;
      if (converseVar.eventKey is pf14) /* PF14 pressed*/
        ;
        KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
        KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
        KS0IW00.KS0IW-FNC = "C"; /* Function switch*/
        ;
      end
      if (converseVar.eventKey is pf15) /* PF15 pressed*/
        ;
        KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
        KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
        KS0IW00.KS0IW-FNC = "D"; /* Function switch*/
        ;
      end
      if (converseVar.eventKey is pf16) /* PF16 pressed*/
        if ("S" in KS0IW01.KS0IW-SEL) /* Line was selected*/
          KS0IW00.KS0IW-SAV = 1;
          KS0IW00.KS0IW-FNC = "C";
          KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[1];
          set KS0IW02 empty;
          KS0IW02.KS0IW-XSNYR = KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1];
          KS0IW02.KS0IW-XSECD = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1];
          KS0IW02.XGPCD = KS0IW01.KS0IW-GPC;
          KS0IW02.KS0IW-STY-NBR = KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1];
          KS0IW02.SY2CLRID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
          KS0IW02.XDMCD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1];
          KS0IW02.KS0IW-STY-TYP-CD = KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1];
          KS0IW02.KS0IW-XPRMT-STY-NBR = KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1];
          KS0I-21100(); /* Obtain VCPROD02 row*/
          KSWREC.KS-STY-NM[1] = VCPROD02.KS-STY-NM[1];
          KSWREC.KS-STY-NM[2] = VCPROD02.KS-STY-NM[2];
          if (KS0IW01.KS0IW-GPC != "02")
            KS0I-21300(); /* Obtain VKSTXT01 rows*/
            KS0I-21400(); /* Save text data*/
            KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[1];
            KSWREC.KS-TXT[1] = KS0IW02.KS0IW-FABRIC-DESC[1];
            KSWREC.KS-TXT[2] = KS0IW02.KS0IW-FABRIC-DESC[2];
            KSWREC.KS-TXT[3] = KS0IW02.KS0IW-FABRIC-DESC[3];
          else
            KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[1];
            KS0IW02.KS0IW-UCTNT-CD[1] = KS0IW01.KS0IW-UCTNT-CD1[KS0IW-IX1];
            KS0IW02.KS0IW-UCTNT-CD[2] = KS0IW01.KS0IW-UCTNT-CD2[KS0IW-IX1];
            KS0IW02.KS0IW-UCTNT-CD[3] = KS0IW01.KS0IW-UCTNT-CD3[KS0IW-IX1];
            KS0IW02.KS0IW-UCTNT-CD[4] = KS0IW01.KS0IW-UCTNT-CD4[KS0IW-IX1];
            KS0IW02.KS0IW-LCTNT-CD[1] = KS0IW01.KS0IW-LCTNT-CD1[KS0IW-IX1];
            KS0IW02.KS0IW-LCTNT-CD[2] = KS0IW01.KS0IW-LCTNT-CD2[KS0IW-IX1];
            KS0IW02.KS0IW-LCTNT-CD[3] = KS0IW01.KS0IW-LCTNT-CD3[KS0IW-IX1];
            KS0IW02.KS0IW-LCTNT-CD[4] = KS0IW01.KS0IW-LCTNT-CD4[KS0IW-IX1];
            KS0I-21700(); /**/
            KSWREC.KS-TXT[1] = KS0IW02.KS0IW-FABRIC-DESC[1];
            KSWREC.KS-TXT[2] = KS0IW02.KS0IW-FABRIC-DESC[2];
            KSWREC.KS-TXT[3] = KS0IW02.KS0IW-FABRIC-DESC[3];
            ;
          end
          KSWREC.KSW-CTL-FLD = KS0IW00.KS0IW-CTL-FLD;
                                   /* Pass control fld*/
          KSWREC.KSW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
          COMMAREA.CATOAP = "KS0J"; /* Set destination application*/
          KSWREC.XSNYR = KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1];
          KSWREC.XSECD = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1];
          KSWREC.XGPCD = KS0IW01.KS0IW-GPC;
          KSWREC.SY1STNBR = KS0IW02.KS0IW-STY-NBR;
          KSWREC.SY2CLRID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
          KSWREC.XDMCD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1];
          KSWREC.KS-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR;
          KSWREC.YKS-STY-TYP-CD = KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1];
          KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1];
          if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
           || KS0IW01.KS0IW-HTS-BYTE[11] == " "
           || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
            KS0IW00.KS0IW-HTS-NBR-WORK = KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1];
            KSWREC.KS-HTS-CPTR-CD = KS0IW00.KS0IW-HTS-CPTR;
            KSWREC.KS-HTS-HDG-CD = KS0IW00.KS0IW-HTS-HDG;
            KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW00.KS0IW-HTS-1ST-SHDG;
            KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW00.KS0IW-HTS-2ND-SHDG-1;
            KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0IW00.KS0IW-HTS-2ND-SHDG-2;
            if (KS0IW01.KS0IW-HTS-BYTE[11] == ","
             || KS0IW01.KS0IW-HTS-BYTE[11] == " ")
              KSWREC.KS-HTS-RNG-FL = "N";
            else
              KSWREC.KS-HTS-RNG-FL = "Y";
            end
          else
            KSWREC.KS-HTS-CPTR-CD = KS0IW01.KS0IW-DTL-HTS-CPTR-CD[KS0IW-IX1];
            KSWREC.KS-HTS-HDG-CD = KS0IW01.KS0IW-DTL-HTS-HDG-CD[KS0IW-IX1];
            KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-DTL-HTS-1ST-SHDG-CD[KS0IW-IX1];
            KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-DTL-HTS-2ND-SHDG-CD[KS0IW-IX1];
            KSWREC.KS-HTS-STAT-CD = KS0IW01.KS0IW-DTL-HTS-STAT-CD[KS0IW-IX1];
          end
          ;
          XSKS-S0001(); /* Exit to another application*/
        else
          converseLib.validationFailed(43); /* set error msg nbr*/
          KS0IW00.KS0IW-SWR = "N"; /* do not request data*/
          KS0IW00.KS0IW-SWF = "N"; /* do not format map*/
          KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
          if (KS0IM001.KS0IM-DTL-STY-NBR[1] > " ")
            set KS0IM001.KS0IM-SEL[1] cursor; /* Position cursor*/
          end
          return; /* return*/
        end
      end
      if (converseVar.eventKey is pf17) /* PF17 pressed*/
        ;
        KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
        KS0IW00.KS0IW-SWD = "3"; /* Map switch*/
        KS0IW00.KS0IW-FNC = "P"; /* Function switch*/
        ;
      end
      ;
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
    end
  end
  ;
  if (converseVar.eventKey is pf19) /* PF19 pressed*/
    KS0IW00.KS0IW-REFORMAT-MAP1 = "N";
    KS0IW00.KS0IW-IXM = 1; /* reset index*/
    KS0IW00.KS0IW-IX1 = 1; /* reset index*/
    KS0IW00.KS0IW-SAV = 1; /* reset index*/
    KS0IW00.KS0IW-REFORMAT-MAP1 = "N";
    while (KS0IW00.KS0IW-IXM <= 11) /* Until end of lines*/
      ;
      if (KS0IM001.KS0IM-SEL[KS0IW-IXM] == "S") /* This line selected*/
        KS0IW01.KS0IW-SAVE-INDEX[KS0IW-IX1] = KS0IW00.KS0IW-IXM;
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
        KS0IW00.KS0IW-SAVE-PAGE = KS0IW00.XXXTSPAG;
      end
      KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
      ;
    end
    if (KS0IW00.KS0IW-IX1 == 1) /* if none were selected*/
      if (KS0IM001.KS0IM-DTL-STY-NBR[1] > " ")
        set KS0IM001.KS0IM-SEL[1] cursor; /* Position cursor*/
      /* AND KS0IW00.KS0IW-SWR NE 'Y';/* data not requested*/
      end
      converseLib.validationFailed(43); /* set error msg nbr*/
      KS0IW00.KS0IW-SWR = "N"; /* do not request data*/
      KS0IW00.KS0IW-SWF = "N"; /* do not format map*/
      KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
      return; /* return*/
    end
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      KS0IW00.KS0IW-SAV = 1;
      KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[1];
      set KS0IW02 empty;
      KS0IW02.KS0IW-XSNYR = KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1];
      KS0IW02.KS0IW-XSECD = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1];
      KS0IW02.XGPCD = KS0IW01.KS0IW-GPC;
      KSWREC.KSW-POIDT = KS0IW01.KS0IW-POIDT; /* PO ID month range*/
      KSWREC.KSW-FCTY-CD = KS0IW01.KS0IW-FCTY-CD; /* Factory code*/
      KS0IW02.KS0IW-STY-NBR = KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1];
      KS0IW02.SY2CLRID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
      KS0IW02.XDMCD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1];
      KS0IW02.KS0IW-STY-TYP-CD = KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1];
      KS0IW02.KS0IW-XPRMT-STY-NBR = KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1];
      KS0I-21100(); /* Obtain VCPROD02 row*/
      KSWREC.KS-STY-NM[1] = VCPROD02.KS-STY-NM[1];
      KSWREC.KS-STY-NM[2] = VCPROD02.KS-STY-NM[2];
      KSWREC.KS-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
      KSWREC.KS-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
      KSWREC.KS-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KSWREC.KS-HTS-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
      KSWREC.KS-HTS-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
      KSWREC.KS-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
      KSWREC.KS-HTS-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
      ;
      KSWREC.KSW-CTL-FLD = KS0IW00.KS0IW-CTL-FLD;
                                   /* Pass control fld*/
      KSWREC.KSW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
      COMMAREA.CATOAP = "KS0K"; /* Set destination application*/
      KSWREC.XSNYR = KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1];
      KSWREC.XSECD = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1];
      KSWREC.XGPCD = KS0IW01.KS0IW-GPC;
      KSWREC.SY1STNBR = KS0IW02.KS0IW-STY-NBR;
      KSWREC.SY2CLRID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
      KSWREC.XDMCD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1];
      KSWREC.KS-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR;
      KSWREC.YKS-STY-TYP-CD = KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1];
      XSKS-S0001(); /* Exit to another application*/
      if (converseVar.validationMsgNum != 0) /* If application not available*/
        KS0IW00.KS0IW-SWF = "N";
        KS0IW00.KS0IW-SWD = 1; /* Map switch*/
      end
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
    end
  end
  ;
  if (converseVar.eventKey is pf13) /* PF13 pressed*/
    if (converseVar.validationMsgNum == 0)
      ;
      KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
      KS0IW00.KS0IW-FNC = "A"; /* Function switch*/
      ;
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
    end
  end
  KS0IW00.KS0IW-SAVE-FNC = KS0IW00.KS0IW-FNC;
  ;
  if (converseVar.eventKey is pf21) /* PF21 pressed*/
    KS0IW00.KS0IW-REFORMAT-MAP1 = "N";
    KS0IW00.KS0IW-IXM = 1; /* reset index*/
    KS0IW00.KS0IW-IX1 = 1; /* reset index*/
    KS0IW00.KS0IW-SAV = 1; /* reset index*/
    KS0IW00.KS0IW-REFORMAT-MAP1 = "N";
    while (KS0IW00.KS0IW-IXM <= 11) /* Until end of lines*/
      ;
      if (KS0IM001.KS0IM-SEL[KS0IW-IXM] == "S") /* This line selected*/
        KS0IW01.KS0IW-SAVE-INDEX[KS0IW-IX1] = KS0IW00.KS0IW-IXM;
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
        KS0IW00.KS0IW-SAVE-PAGE = KS0IW00.XXXTSPAG;
      end
      KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment line index*/
      ;
    end
    ;
    KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[1];
    set KS0IW02 empty;
    KS0IW02.KS0IW-XSNYR = KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1];
    KS0IW02.KS0IW-XSECD = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1];
    KS0IW02.XGPCD = KS0IW01.KS0IW-GPC;
    KSWREC.KSW-POIDT = KS0IW01.KS0IW-POIDT; /* PO ID month range*/
    KSWREC.KSW-FCTY-CD = KS0IW01.KS0IW-FCTY-CD; /* Factory code*/
    KS0IW02.KS0IW-STY-NBR = KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1];
    KS0IW02.SY2CLRID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
    KS0IW02.XDMCD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1];
    KS0IW02.KS0IW-STY-TYP-CD = KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1];
    KS0IW02.KS0IW-XPRMT-STY-NBR = KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1];
    KS0I-21100(); /* Obtain VCPROD02 row*/
    KSWREC.KS-STY-NM[1] = VCPROD02.KS-STY-NM[1];
    KSWREC.KS-STY-NM[2] = VCPROD02.KS-STY-NM[2];
    KSWREC.KS-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
    KSWREC.KS-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
    KSWREC.KS-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
    KSWREC.KS-HTS-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
    KSWREC.KS-HTS-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
    KSWREC.KS-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
    KSWREC.KS-HTS-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
    ;
    KSWREC.KSW-CTL-FLD = KS0IW00.KS0IW-CTL-FLD;
                                 /* Pass control fld*/
    KSWREC.KSW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
    COMMAREA.CATOAP = "KS0P"; /* Set destination application*/
    KSWREC.XSNYR = KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1];
    KSWREC.XSECD = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1];
    KSWREC.XGPCD = KS0IW01.KS0IW-GPC;
    KSWREC.SY1STNBR = KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1];
    KSWREC.SY2CLRID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
    KSWREC.XDMCD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1];
    KSWREC.KSW-POIDT = KS0IW01.KS0IW-POIDT; /* PO ID month range*/
    KSWREC.KSW-FCTY-CD = KS0IW01.KS0IW-FCTY-CD; /* Factory code*/
    XSKS-S0001(); /* Exit to another application*/
  end
  ;
end // end KS0I-16000

// Main process Map 2 (Add/Dup)
Function KS0I-20000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-21000(); /* Obtain the data to display*/
  ;
  KS0I-22000(); /* Format and display the map*/
  ;
  KS0I-23000(); /* Check attention identifier*/
  ;
  KS0I-24000(); /* Reset fields to normal intensity*/
  ;
  KS0I-25000(); /* Verify the entered data*/
  ;
  KS0I-26000(); /* Process valid input request*/
  ;
  ;
end // end KS0I-20000

// Obtain the data to display
Function KS0I-21000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SWR != "Y" /* Data was not requested*/
   || KS0IW00.KS0IW-FNC == "A" /* or add function requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    KS0IW02.XGPCD = KS0IW01.KS0IW-GPC;
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Clear the map display storage area and save the key fields.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IW02 empty; /* M002 display storage*/
  set KS0IW03 empty; /* M003 display storage*/
  set KS0IM003 initial; /* M003 display storage*/
  set KS0IW04 empty; /* M004 display storage*/
  set KS0IM004 initial; /* M004 display storage*/
  KS0IW00.KS0IW-DATA-CHANGED = "N";
  KS0IW00.KS0IW-MAP3-CHANGED = "N";
  KS0IW00.KS0IW-MAP4-CHANGED = "N";
  KS0IW00.KS0IW-TEAM-OVERRIDE = "N";
  KS0IW00.KS0IW-CAT-OVERRIDE = "N";
  KS0IW00.KS0IW-SIL-OVERRIDE = "N";
  ;
  KS0IW00.KS0IW-SAV = KS0IW00.KS0IW-SAV + 1; /* Increment index*/
  if (COMMAREA.CAFROMAP == "KS0J" /* If coming back from KS0J*/
   || COMMAREA.CAFROMAP == "KS0K" /* or coming back from KS0K*/
   || COMMAREA.CAFROMAP == "KS0P") /* or coming back from KS0P*/
    KS0IW00.XXXTSLEN = 3881; /* Tempory storage line length*/
    KS0I-12120(); /* Obtain tempory storage page*/
    if (KS0IW00.KS0IW-SAVE-FNC == "A")
      KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV] = "1";
    else
      KS0IW01.KS0IW-SAVE-INDEX-TBL = KSWREC.KSW-SAVE-INDEX-TBL;
    end
    KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
    KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1] = KSWREC.XSECD;
    KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1] = KSWREC.XSNYR;
    KS0IW01.KS0IW-GPC = KSWREC.XGPCD;
    KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1] = KSWREC.SY1STNBR;
    KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] = KSWREC.SY2CLRID;
    KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1] = KSWREC.XDMCD;
    KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1] = KSWREC.KS-XPRMT-STY-NBR;
    KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1] = KSWREC.YKS-STY-TYP-CD;
    if (KSWREC.KS-HTS-2ND-SHDG-CD[2] > " ")
      KS0IW00.KS0IW-HTS-CPTR = KSWREC.KS-HTS-CPTR-CD;
      KS0IW00.KS0IW-HTS-HDG = KSWREC.KS-HTS-HDG-CD;
      KS0IW00.KS0IW-HTS-1ST-SHDG = KSWREC.KS-HTS-1ST-SHDG-CD;
      KS0IW00.KS0IW-HTS-2ND-SHDG-1 = KSWREC.KS-HTS-2ND-SHDG-CD[1];
      KS0IW00.KS0IW-HTS-2ND-SHDG-2 = KSWREC.KS-HTS-2ND-SHDG-CD[2];
      KS0IW01.KS0IW-HTS-NUMBER = KS0IW00.KS0IW-HTS-NBR-WORK;
      KS0IW01.KS0IW-HTS-BYTE[5] = ".";
      KS0IW01.KS0IW-HTS-BYTE[8] = ".";
      if (COMMAREA.CAFROMAP == "KS0J") /* If coming back from KS0J*/
        KS0IW01.KS0IW-HTS-BYTE[11] = "-";
      else
        if (KSWREC.KS-HTS-RNG-FL == "Y")
          KS0IW01.KS0IW-HTS-BYTE[11] = "-";
        else
          KS0IW01.KS0IW-HTS-BYTE[11] = ",";
        end
      end
      if (KS0IW01.KS0IW-HTS-NUMBER != KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1])
        KS0IW00.KS0IW-NEW-HS-SWITCH = "Y";
      end
      KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1] = KS0IW01.KS0IW-HTS-NUMBER;
      KS0IW02.KS0IW-HTS-NBR = KS0IW01.KS0IW-HTS-NUMBER;
    else
      KS0IW02.KS0IW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
      KS0IW02.KS0IW-HTS-HDG-CD = KSWREC.KS-HTS-HDG-CD;
      KS0IW02.KS0IW-HTS-1ST-SHDG-CD = KSWREC.KS-HTS-1ST-SHDG-CD;
      KS0IW02.KS0IW-HTS-2ND-SHDG-CD = KSWREC.KS-HTS-2ND-SHDG-CD[1];
      KS0IW02.KS0IW-HTS-STAT-CD = KSWREC.KS-HTS-STAT-CD;
      KS0IW01.KS0IW-HTS-NUMBER = KS0IW02.KS0IW-HTS-NBR;
      if (KS0IW01.KS0IW-HTS-BYTE[6] > " ")
        KS0IW01.KS0IW-HTS-BYTE[5] = ".";
      end
      if (KS0IW01.KS0IW-HTS-BYTE[9] > " ")
        KS0IW01.KS0IW-HTS-BYTE[8] = ".";
      end
      if (KS0IW01.KS0IW-HTS-BYTE[14] > " ")
        KS0IW01.KS0IW-HTS-BYTE[13] = ".";
      end
      if (KS0IW01.KS0IW-HTS-NUMBER != KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1])
        KS0IW00.KS0IW-NEW-HS-SWITCH = "Y";
      end
      KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1] = KS0IW01.KS0IW-HTS-NUMBER;
      KS0IW02.KS0IW-HTS-NBR = KS0IW01.KS0IW-HTS-NUMBER;
    end
    ;
    KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
    COMMAREA.CAFROMAP = " "; /* Clear from application field*/
    KS0IM001.KS0IM-BUS-UNIT-CD = KS0IW01.KS0IW-GPC; /* Move hdg*/
    KS0IM001.KS0IM-MAP1-STY-NBR = KS0IW01.KS0IW-STYLE;
    KS0IM001.KS0IM-COLR-CD-ID = KS0IW01.KS0IW-COLR-CD-ID;
    KS0IM001.KS0IM-DIM-CD = KS0IW01.KS0IW-DIM-CD;
    KS0IM001.KS0IM-SESN-CD = KS0IW01.KS0IW-SESN-CD;
    if (KS0IW01.KS0IW-SESN-YR > "0")
      KS0IM001.KS0IM-SESN-YR-RNG = KS0IW01.KS0IW-SESN-YY;
    else
      KS0IM001.KS0IM-SESN-YR-RNG = "  ";
    end
    KS0IM001.KS0IM-PRDCTN-YR = KS0IW01.KS0IW-PRDCTN-YR;
    KS0IM001.KS0IM-PRDCTN-MO = KS0IW01.KS0IW-PRDCTN-MO;
    KS0IM001.KS0IM-DLVR-MO = KS0IW01.KS0IW-DLVR-MO;
    KS0IM001.KS0IM-FCTY-CD = KS0IW01.KS0IW-FCTY-CD;
    KS0IM001.KS0IM-ORIG-CD = KS0IW01.KS0IW-ORIG-CD;
    KS0IM001.KS0IM-HTS-NBR = KS0IW01.KS0IW-HTS-NBR;
    KS0IM001.KS0IM-RULE-NBR = KS0IW01.KS0IW-RULE-NBR-MAP;
    KS0IM001.KS0IM-QOTA-CAT-CD = KS0IW01.KS0IW-QOTA-CAT-CD;
    KS0IM001.KS0IM-TEAM-CD = KS0IW01.KS0IW-TEAM-CD;
    KS0IM001.KS0IM-PRBM-CD = KS0IW01.KS0IW-PRBM-CD;
    KS0IM001.KS0IM-DIV-CD = KS0IW01.KS0IW-DIV-CD;
    KS0IM001.KS0IM-STAT = KS0IW01.KS0IW-STAT;
    KS0IM001.KS0IM-US-MADE-FLAG = KS0IW01.KS0IW-US-MADE-FLAG;
    KS0IM001.KS0IM-EXP-STYLE = KS0IW01.KS0IW-EXP-STYLE;
    KS0IM001.KS0IM-STY-TYP-CD[1] = KS0IW01.KS0IW-STY-TYP-CD1;
    KS0IM001.KS0IM-STY-TYP-CD[2] = KS0IW01.KS0IW-STY-TYP-CD2;
    KS0IM001.KS0IM-STY-TYP-CD[3] = KS0IW01.KS0IW-STY-TYP-CD3;
    KS0IM001.KS0IM-REG-CD = KS0IW01.KS0IW-REG-CD;
    ;
  end
  ;
  if (KS0IW00.KS0IW-SAV <= 15 /* Less than max*/
   && KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV] > "0") /* Multiple exist*/
    KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
    ;
    KS0IW02.XGPCD = KS0IW01.KS0IW-GPC; /* GPC code*/
    KS0IW02.KS0IW-XSECD = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1];
    KS0IW02.KS0IW-XSNYR = KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1];
    KS0IW02.KS0IW-STY-NBR = KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1];
    KS0IW02.SY2CLRID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
    if (KS0IW02.SY2CLRID == "***")
      KS0I-26600(); /* Move color array*/
    else
      KS0IW02.KS0IW-COLOR-TABLE = " ";
    end
    KS0IW02.XDMCD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1];
                                   /* Dimension cd*/
    KS0IW02.KS0IW-XPRMT-STY-NBR = KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1];
    KS0IW02.KS0IW-STY-TYP-CD = KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1];
    if (KS0IW02.KS0IW-STY-TYP-CD > " ") /* If style type exists*/
      if (KS0IW02.KS0IW-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD
       /* Code in table*/
       && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        KS0IW02.KS0IW-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-SDESC[sysVar.arrayIndex];
        ;
      else
        KS0IW02.KS0IW-STY-TYP-DESC = " ";
        ;
      end
    end
    ;
    if (KS0IW02.XGPCD == "03")
      KS0I-21001();
      KS0IW02.KS0IW-PRC-PCT = VCPROD03.KS-CMPNT-PRC-PCT;
    end
    ;
    KS0IW02.KS0IW-POIDT = KS0IW01.KS0IW-DTL-POID[KS0IW-IX1];
    KS0IW02.KS0IW-UCTNT-CD[1] = KS0IW01.KS0IW-UCTNT-CD1[KS0IW-IX1];
    KS0IW02.KS0IW-UCTNT-CD[2] = KS0IW01.KS0IW-UCTNT-CD2[KS0IW-IX1];
    KS0IW02.KS0IW-UCTNT-CD[3] = KS0IW01.KS0IW-UCTNT-CD3[KS0IW-IX1];
    KS0IW02.KS0IW-UCTNT-CD[4] = KS0IW01.KS0IW-UCTNT-CD4[KS0IW-IX1];
    KS0IW02.KS0IW-LCTNT-CD[1] = KS0IW01.KS0IW-LCTNT-CD1[KS0IW-IX1];
    KS0IW02.KS0IW-LCTNT-CD[2] = KS0IW01.KS0IW-LCTNT-CD2[KS0IW-IX1];
    KS0IW02.KS0IW-LCTNT-CD[3] = KS0IW01.KS0IW-LCTNT-CD3[KS0IW-IX1];
    KS0IW02.KS0IW-LCTNT-CD[4] = KS0IW01.KS0IW-LCTNT-CD4[KS0IW-IX1];
    ;
    KS0IW02.KS0IW-HTS-NBR = KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1];
    KS0IW01.KS0IW-HTS-NBR = KS0IW02.KS0IW-HTS-NBR;
    KS0IW00.KS0IW-HTS-NBR-WORK = KS0IW02.KS0IW-HTS-NBR;
    KS0IW01.KS0IW-HTS-NUMBER = KS0IW02.KS0IW-HTS-NBR;
    KS0IW00.KS0IW-FORMATTED-RATE = " ";
    if (KS0IW02.XGPCD == "02"
     || (KS0IW02.XGPCD == "EQ" && VCPROD02.XGPCD == "02"))
      if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
       || KS0IW01.KS0IW-HTS-BYTE[11] == " "
       || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
        KS0I-11331(); /* Select VHSNBR01 set*/
        KS0I-11332(); /* Fetch  VHSNBR01 row*/
        KS0I-11333(); /* Close  VHSNBR01 set*/
      else
        KS0I-11234(); /* Obtain VHSNBR01 row*/
      end
    else
      KS0I-11234(); /* Obtain VHSNBR01 row*/
    end
    if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
     || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
      KS0IW00.KS0IW-FORMATTED-RATE = "CHECK FOB";
    else
      KS0I-11235(); /* Format general duty rate*/
    end
    if (KS0IM001.KS0IM-HTS-NBR > " ")
      KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
    else
      KS0IW01.KS0IW-HTS-NBR = " ";
    end
    KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
    KS0IW01.KS0IW-DTL-QOTA-CAT-CD[KS0IW-IX1] = VHSNBR01.YQT-QOTA-CAT-CD;
    KS0IW01.KS0IW-DTL-DTY-RATE[KS0IW-IX1] = KS0IW00.KS0IW-FORMATTED-RATE;
    KS0IW02.KS0IW-QOTA-CAT-CD = KS0IW01.KS0IW-DTL-QOTA-CAT-CD[KS0IW-IX1]; /* Quota category code*/
    if (KS0IW02.KS0IW-QOTA-CAT-CD > " ") /* If quota cat code exists*/
      if (KS0IW02.KS0IW-QOTA-CAT-CD in YQTTBL.YQT-QOTA-CAT-CD
       /* Code in table*/
       && YQTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        KS0IW02.KS0IW-QOTA-CAT-DESC = YQTTBL.YQT-QOTA-CAT-SDESC[sysVar.arrayIndex];
        ;
      else
        KS0IW02.KS0IW-QOTA-CAT-DESC = " ";
        ;
      end
    end
    if (KS0IM001.KS0IM-REG-CD > " ") /* If market region exists*/
      KS0IW02.KS0IW-REG-CD = KS0IM001.KS0IM-REG-CD;
      if (KS0IM001.KS0IM-REG-CD in XDRTBL.XDR-PROD-REG-CD
       /* Code in table*/
       && XDRTBL.XXX-STAT[sysVar.arrayIndex] == "A") /* and active status*/
        KS0IW02.KS0IW-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
      else
        KS0IW02.KS0IW-REG-SDESC = " ";
      end
    else
      KS0IW02.KS0IW-REG-SDESC = "ALL";
    end
    KS0IW02.KS0IW-DTY-RATE = KS0IW01.KS0IW-DTL-DTY-RATE[KS0IW-IX1]; /* General duty rate*/
    ;
  else
    if (KS0IW00.KS0IW-REFORMAT-MAP1 == "Y")
      KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
      KS0IW00.KS0IW-SWD = "1"; /* Map request switch*/
      KS0IW00.KS0IW-SWF = "Y"; /* Format map switch*/
      exit stack; /* Return to previous process*/
    else
      KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
      KS0IW00.KS0IW-SWD = "1"; /* Map request switch*/
      KS0IW00.KS0IW-SWF = "Y"; /* Format map switch*/
      exit stack; /* Return to previous process*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Obtain the table rows to be displayed.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-21100(); /* Obtain the VCPROD02 rows*/
  ;
  if (VCPROD02.KS-PRBM-NBR > 0) /* If problem exists*/
    KS0I-21200(); /* Obtain the VCPROB01 rows*/
  else
    KS0IW-PRBM-TABLE = " "; /* Clear problem table*/
  end
  ;
  KS0I-21300(); /* Obtain the VKSTXT01 rows*/
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no errors so far*/
    ;
    KS0I-21400(); /* Save in display storage*/
    ;
  else
    ;
    KSWREC.XXXPRCNM = "21000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  KS0IW02.KS0IW-FACTORY-TABLE = " "; /* init tbl here*/
  /* get factory info for apparel, or any gpc w/mult colors*/
  if (KS0IW02.SY2CLRID == "***") /* multiple colors*/
    KS0IW00.KS0IW-CLR-IDX = 1;
    while (KS0IW00.KS0IW-CLR-IDX <= 30
     && KS0IW02.KS0IW-COLOR[KS0IW-CLR-IDX] != " ")
      KS0IW02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-CLR-IDX];
      if (KS0IW02.KS0IW-POIDT > " ") /* If PO ID month range exists*/
        KS0I-21800(); /* Select VPOITM01 set*/
      else
        if (KS0IW02.KS0IW-STY-NBR > " ")
          KS0I-21900(); /* Select VFYCLR01 set*/
        end
      end
      KS0IW00.KS0IW-CLR-IDX = KS0IW00.KS0IW-CLR-IDX + 1;
    end
    KS0IW02.SY2CLRID = "***";
  else
    if (KS0IW02.SY2CLRID != " ")
      if (KS0IW02.KS0IW-POIDT > " ") /* If PO ID month range exists*/
        KS0I-21800(); /* Select VPOITM01 set*/
      else
        if (KS0IW02.KS0IW-STY-NBR > " ")
          KS0I-21900(); /* Select VFYCLR01 set*/
        end
      end
    end
  end

  if (KS0IW02.XGPCD == "02"
   || (KS0IW02.XGPCD == "EQ" && VCPROD02.XGPCD == "02"))
    if (KS0IW02.KS0IW-STY-NBR > " ")
      KS0I-21500(); /* Select unique VSYCLR01 row*/
    else
      KS0I-21600(); /* Select unique VSYDVL01 row*/
    end
    KS0I-21700(); /* Obtain the upper/lower contents*/
    if (KS0IW02.KS0IW-POIDT > " ") /* If PO ID month range exists*/
      KS0I-21800(); /* Select VPOITM01 set*/
    else
      if (KS0IW02.KS0IW-STY-NBR > " ")
        KS0I-21900(); /* Select VFYCLR01 set*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
  ;
  ;
end // end KS0I-21000

// Select unique VCPROD03 row
Function KS0I-21001()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD03 empty; /* Clear row storage area*/
  ;
  VCPROD03.XSNYR = KS0IW02.KS0IW-XSNYR;
  VCPROD03.XSECD = KS0IW02.KS0IW-XSECD;
  if (KS0IW02.XGPCD == "EQ") /* If Equipment*/
    VCPROD03.KS-BUS-UNIT-CD = "EQ";
  else
    VCPROD03.KS-BUS-UNIT-CD = KS0IW02.XGPCD;
  end
  ;
  VCPROD03.SY1STNBR = KS0IW02.KS0IW-STY-NBR;
  ;
  if (KS0IW02.SY2CLRID == "***") /* If multiple colors*/
    KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
    VCPROD03.SY2CLRID = KS0IW01.KS0IW-COLOR-1[KS0IW-IX1];
  else
    VCPROD03.SY2CLRID = KS0IW02.SY2CLRID;
  end
  ;
  VCPROD03.XDMCD = KS0IW02.XDMCD;
  VCPROD03.KS-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR;
  VCPROD03.YKS-STY-TYP-CD = KS0IW02.KS0IW-STY-TYP-CD;
  ;
  try
    call "KS3010" ("S ", SQLCA, VCPROD03) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21001"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD03"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD03.VCPROD03-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21001

// Obtain VCPROD01 data process
Function KS0I-21100()
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWC = "N"; /* End of cursor switch*/
  ;
  KS0I-21110(); /* Select unique VCPROD02 row*/
  ;
  ;
end // end KS0I-21100

// Select unique VCPROD01 row
Function KS0I-21110()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  ;
  VCPROD02.XSNYR = KS0IW02.KS0IW-XSNYR;
  VCPROD02.XSECD = KS0IW02.KS0IW-XSECD;
  if (KS0IW02.XGPCD == "EQ") /* If Equipment*/
    VCPROD02.KS-BUS-UNIT-CD = "EQ";
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0IW02.XGPCD;
  end
  ;
  if (KS0IW02.KS0IW-STY-NBR == KS0IW02.KS0IW-XPRMT-STY-NBR)
    VCPROD02.SY1STNBR = " ";
    VCPROD02.KS-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR;
  else
    VCPROD02.SY1STNBR = KS0IW02.KS0IW-STY-NBR;
    VCPROD02.KS-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR;
  end
  ;
  if (KS0IW02.SY2CLRID == "***") /* If multiple colors*/
    KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
    VCPROD02.SY2CLRID = KS0IW01.KS0IW-COLOR-1[KS0IW-IX1];
  else
    VCPROD02.SY2CLRID = KS0IW02.SY2CLRID;
  end
  ;
  VCPROD02.XDMCD = KS0IW02.XDMCD;
  VCPROD02.YKS-STY-TYP-CD = KS0IW02.KS0IW-STY-TYP-CD;
  ;
  try
    call "VCPROD02" ("S ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21110

// Obtain VCPROB01 data process
Function KS0I-21200()
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-11231(); /* Select set and open cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data for duplicate option.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWP = "N"; /* Problem cursor EOF switch*/
  while (KS0IW00.KS0IW-SWP == "N" /* Until EOF*/
   && KS0IW00.KS0IW-IX2 <= 25)
    KS0I-11232(); /* Fetch next row in the cursor*/
  end
  ;
  KS0I-11233(); /* Close the selected set cursor*/
  ;
  ;
end // end KS0I-21200

// Obtain VKSTXT01 data process
Function KS0I-21300()
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-21310(); /* Select set and open cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data for duplicate option.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWX = "N"; /* Text cursor EOF switch*/
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-SWX == "N") /* Until EOF*/
    KS0I-21320(); /* Fetch next row in the cursor*/
  end
  ;
  KS0I-21330(); /* Close the selected set cursor*/
  ;
  ;
end // end KS0I-21300

// Select VKSTXT01 set
Function KS0I-21310()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VKSTXT01 empty; /* Clear row storage area*/
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  ;
  KS0IW00.KS0IW-TEXT-TABLE = " "; /* Intialize table*/
  ;
  if (KS0IW02.XGPCD == "EQ")
    VKSTXT01.KS-TXT-NBR = VCPROD02.KS-TXT-NBR; /* Text number*/
  else
    VKSTXT01.KS-TXT-NBR = VCPROD02.KS-TXT-NBR; /* Text number*/
  end
  ;
  try
    call "IO6150" ("S1", SQLCA, VKSTXT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21310"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSTXT01.VKSTXT01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21310

// Fetch  VKSTXT01 row
Function KS0I-21320()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6150" ("N1", SQLCA, VKSTXT01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      KS0IW00.KS0IW-TXT-TYP[KS0IW-IX2] = VKSTXT01.KS-TXT-TYP-IND;
      KS0IW00.KS0IW-RANK-NBR[KS0IW-IX2] = VKSTXT01.XXXRKNBR;
      KS0IW00.KS0IW-TEXT[KS0IW-IX2] = VKSTXT01.KS-TXT;
      ;
      KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0IW00.KS0IW-SWX = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21320"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSTXT01.VKSTXT01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21320

// Close  VKSTXT01 set
Function KS0I-21330()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6150" ("C1", SQLCA, VKSTXT01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21330"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSTXT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21330

// Save Map 2,3,4 data in WS
Function KS0I-21400()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW02.KS0IW-STY-NBR = VCPROD02.SY1STNBR; /* Style nbr*/
  KS0IW02.KS0IW-XPRMT-STY-NBR = VCPROD02.KS-XPRMT-STY-NBR; /* Experimental style nbr*/
  KS0IW02.KS0IW-XSECD = VCPROD02.XSECD; /* Season code*/
  KS0IW02.KS0IW-XSNYR = VCPROD02.XSNYR; /* Season year*/
  KS0IW02.KS0IW-KS-STY-NM[1] = VCPROD02.KS-STY-NM[1]; /* Style name*/
  KS0IW02.KS0IW-KS-STY-NM[2] = VCPROD02.KS-STY-NM[2]; /* Style name*/
  KS0IW02.KS0IW-STY-TYP-CD = VCPROD02.YKS-STY-TYP-CD; /* Style type cd*/
  if (VCPROD02.KS-RULE-NBR > " ") /* If Binding ruling number exists*/
    KS0IW02.KS0IW-RULE-NBR = VCPROD02.KS-RULE-NBR; /* Rule number*/
    set VBDRUL01 empty; /* Clear record*/
    VBDRUL01.XGPCD = VCPROD02.XGPCD;
    VBDRUL01.KS-RULE-NBR = KS0IW02.KS0IW-RULE-NBR;
    KS0I-15302(); /* Select VBDRUL01 row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
      KS0IW00.KS0IW-DATE-WORK = VBDRUL01.KS-RULE-DT;
                                   /* Move rule date*/
      KS0IW00.KS0IW-YY = KS0IW00.KS0IW-DATE-YR; /* Move year*/
      KS0IW00.KS0IW-MM = KS0IW00.KS0IW-DATE-MO; /* Move month*/
      KS0IW00.KS0IW-DD = KS0IW00.KS0IW-DATE-DAY; /* Move day*/
      KS0IW02.KS0IW-RULE-DT = KS0IW00.KS0IW-DATE;
    end
  end
  ;
  KS0IW02.KS0IW-KS-SHORT-STY-NM = VCPROD02.KS-SHORT-STY-NM; /* Short*/
  KS0IW02.KS0IW-ORIG-CD[1] = VCPROD02.KS-XCT-ORIG-CD[1]; /* Origin cd*/
  KS0IW02.KS0IW-ORIG-CD[2] = VCPROD02.KS-XCT-ORIG-CD[2]; /* Origin cd*/
  KS0IW02.KS0IW-ORIG-CD[3] = VCPROD02.KS-XCT-ORIG-CD[3]; /* Origin cd*/
  KS0IW02.KS0IW-ORIG-CD[4] = VCPROD02.KS-XCT-ORIG-CD[4]; /* Origin cd*/
  KS0IW02.KS0IW-ORIG-CD[5] = VCPROD02.KS-XCT-ORIG-CD[5]; /* Origin cd*/
  KS0IW02.KS0IW-ORIG-CD[6] = VCPROD02.KS-XCT-ORIG-CD[6]; /* Origin cd*/
  KS0IW02.KS0IW-MAP2-TEXT = VCPROD02.KS-TXT-NBR; /* Text number*/
  KS0IW02.KS0IW-MAP2-PRBM = VCPROD02.KS-PRBM-NBR; /* Problem number*/
  KS0IW02.KS0IW-STAT = VCPROD02.YPR-PROD-STAT-CD; /* Prod status cd*/
  if (VCPROD02.KS-TEAM-CD > " ") /* If product team code exists*/
    KS0IW02.KS0IW-TEAM-NBR = VCPROD02.KS-TEAM-CD; /* Team code*/
    if (VCPROD02.KS-TEAM-CD != VHSNBR01.KS-TEAM-CD) /* If overridden*/
      KS0IW00.KS0IW-TEAM-OVERRIDE = "Y";
    end
  else
    if (VHSNBR01.KS-TEAM-CD > " ") /* If HS team code exists*/
      KS0IW02.KS0IW-TEAM-NBR = VHSNBR01.KS-TEAM-CD; /* Team code*/
    end
  end
  ;
  if (VCPROD02.XSUCD > " ") /* If silhouette code exists*/
    KS0IW02.KS0IW-SILH-CD = VCPROD02.XSUCD; /* Silhouette code*/
  end
  KS0IW00.KS0IW-CAT-EOF = "N";
  KS0IW00.KS0IW-CAT-OVERRIDE = "N";
  if (VCPROD02.SYNCTPGN > 0) /* If catalog page override exists*/
    KS0IW00.KS0IW-CAT-OVERRIDE = "Y";
    KS0IW00.KS0IW-CAT-EOF = "Y";
    KS0IW02.KS0IW-CATLG-PAGE-NBR = VCPROD02.SYNCTPGN;
  else
    KS0I-21401(); /* Select VCATLG01 set*/
    KS0I-21402(); /* Fetch VCATLG01 row*/
    while (KS0IW00.KS0IW-CAT-EOF == "N")
      if (SYNREC.SYRCATID in SYRTBL.SYRCATID)
        if (SYRTBL.XSECD[sysVar.arrayIndex] == KS0IW02.KS0IW-XSECD
         && SYRTBL.XSNYR[sysVar.arrayIndex] == KS0IW02.KS0IW-XSNYR)
          KS0IW02.KS0IW-CATLG-PAGE-NBR = SYNREC.SYNCTPGN;
          KS0IW00.KS0IW-CAT-EOF = "Y";
        end
      end
      KS0I-21402(); /* Fetch VCATLG01 row*/
    end
    KS0I-21403(); /* Close VCATLG01 set*/
  end
  KS0IW02.KS0IW-FBRC-CHANGED = "N"; /* init change flag*/
  KS0IW02.KS0IW-1ST-FBRC-LINE = 1;
  KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
  while (KS0IW00.KS0IW-TXT-TYP[KS0IW-IX2] > " " /* If text exists*/
   && KS0IW00.KS0IW-IX2 <= 30) /* and less than max*/
    if (KS0IW00.KS0IW-TXT-TYP[KS0IW-IX2] == "1") /* If fabric desc*/
      if (KS0IW02.KS0IW-FABRIC-DESC[KS0IW-IX2] == " ") /* if blank*/
        KS0IW02.KS0IW-FABRIC-DESC[KS0IW-IX2] = KS0IW00.KS0IW-TEXT[KS0IW-IX2];
      end
      KS0IW02.KS0IW-TOT-FBRC-LINES = KS0IW-IX2;
    else
      if (KS0IW00.KS0IW-TXT-TYP[KS0IW-IX2] == "2") /* If product desc*/
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-RANK-NBR[KS0IW-IX2];
        KS0IW04.KS0IW-PROD-DESC[KS0IW-IX1] = KS0IW00.KS0IW-TEXT[KS0IW-IX2];
      else
        if (KS0IW00.KS0IW-TXT-TYP[KS0IW-IX2] == "3") /* If comment desc*/
          if (KS0IW04.KS0IW-CMMT-DESC[1] == " ") /* If blank*/
            KS0IW04.KS0IW-CMMT-DESC[1] = KS0IW00.KS0IW-TEXT[KS0IW-IX2];
          else
            if (KS0IW04.KS0IW-CMMT-DESC[2] == " ") /* If blank*/
              KS0IW04.KS0IW-CMMT-DESC[2] = KS0IW00.KS0IW-TEXT[KS0IW-IX2];
            end
          end
        end
      end
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
  while (KS0IW00.KS0IW-IX2 <= 25 /* Less than max*/
   && KS0IW00.KS0IW-PRBM[KS0IW-IX2] > " ") /* If problem exists*/
    KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2] = KS0IW00.KS0IW-PRBM[KS0IW-IX2];
    if (KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2] in YKPTBL.YKP-PRBM-CD /* Code in*/
     && YKPTBL.XXXSTAT[sysVar.arrayIndex] == "A")                /* and active status*/
      ;
      KS0IW03.KS0IW-MAP3-PRBM-DESC[KS0IW-IX2] = YKPTBL.YKP-PRBM-DESC[sysVar.arrayIndex];
      ;
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  ;
end // end KS0I-21400

// Select VCATLG01 set
Function KS0I-21401()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set SYNREC empty; /* Clear row storage area*/
  ;
  if (KS0IW02.XGPCD == "EQ")
    if (KS0IW00.KS0IW-SAV-EQUIP-GPC != " ")
      SYNREC.XGPCD = KS0IW00.KS0IW-SAV-EQUIP-GPC;
      SYNREC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style*/
      SYNREC.XDMCD = KS0IW02.XDMCD; /* Dimension*/
      SYNREC.SY2CLRID = "*";
      ;
      try
        call "IO4880" ("S1", SQLCA, SYNREC) {isNoRefresh = yes, isExternal = yes};
      end
                                   /* Select table set*/
      ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
        ;
        return; /* Return to previous process*/
        ;
      end
    else
      SYNREC.XGPCD = "02"; /* Product GPC*/
      SYNREC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style*/
      SYNREC.XDMCD = KS0IW02.XDMCD; /* Dimension*/
      SYNREC.SY2CLRID = "*";
      ;
      try
        call "IO4880" ("S1", SQLCA, SYNREC) {isNoRefresh = yes, isExternal = yes};
      end
                                   /* Select table set*/
      ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
        ;
        KS0IW00.KS0IW-SAV-EQUIP-GPC = SYNREC.XGPCD;
        return; /* Return to previous process*/
        ;
      else
        SYNREC.XGPCD = "03"; /* Product GPC*/
        SYNREC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style*/
        SYNREC.XDMCD = KS0IW02.XDMCD; /* Dimension*/
        SYNREC.SY2CLRID = "*";
        ;
        try
          call "IO4880" ("S1", SQLCA, SYNREC) {isNoRefresh = yes, isExternal = yes};
        end
                                   /* Select table set*/
        ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
        ;
        if (sysVar.errorCode == "00000000" /* Call successful*/
         && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
          KS0IW00.KS0IW-SAV-EQUIP-GPC = SYNREC.XGPCD;
          ;
          return; /* Return to previous process*/
          ;
        end
      end
    end
  else
    SYNREC.XGPCD = KS0IW02.XGPCD; /* Product GPC*/
    SYNREC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style*/
    SYNREC.XDMCD = KS0IW02.XDMCD; /* Dimension*/
    SYNREC.SY2CLRID = "*";
    ;
    try
      call "IO4880" ("S1", SQLCA, SYNREC) {isNoRefresh = yes, isExternal = yes};
    end /* Select table set*/
    ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21401"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCATLG01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYNREC.SYNDATA; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21401

// Fetch VCATLG01 row
Function KS0I-21402()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO4880" ("N1", SQLCA, SYNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0IW00.KS0IW-CAT-EOF = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21402"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCATLG01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYNREC.SYNDATA; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21402

// Close VCATLG01 set
Function KS0I-21403()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO4880" ("C1", SQLCA, SYNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21403"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCATLG01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21403

// Obtain product information
Function KS0I-21500()
  /* ------------------------------------------------------------*/
  /* Obtain the product information.*/
  /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  if (KS0IW02.XGPCD == "EQ") /* Equipment*/
    if (KS0IW00.KS0IW-SAV-EQUIP-GPC != " ")
      PG2REC.XGPCD = KS0IW00.KS0IW-SAV-EQUIP-GPC; /* GPC code*/
      PG2REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
      if (KS0IW02.SY2CLRID == "***") /* Color array*/
        PG2REC.SY2CLRID = KS0IW02.KS0IW-COLOR[1]; /* Color 1 of array*/
      else
        PG2REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
      end
      PG2REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
      ;
      KS0I-21501(); /* Select unique VSYCLR01 row*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/
        KS0IW00.KS0IW-SAV-EQUIP-GPC = PG2REC.XGPCD;
        KS0IW02.SY2CLRDS = PG2REC.SY2CLRDS; /* Color desc*/
        if (PG2REC.XMLCD[1] == "00")
          KS0IW02.KS0IW-LCTNT-CD[1] = "  ";
        else
          KS0IW02.KS0IW-LCTNT-CD[1] = PG2REC.XMLCD[1];
        end
        if (PG2REC.XMLCD[2] == "00")
          KS0IW02.KS0IW-LCTNT-CD[2] = "  ";
        else
          KS0IW02.KS0IW-LCTNT-CD[2] = PG2REC.XMLCD[2];
        end
        KS0IW02.KS0IW-LCTNT-CD[3] = PG2REC.XMLCD[3];
        KS0IW02.KS0IW-LCTNT-CD[4] = PG2REC.XMLCD[4];
        if (PG2REC.XMCCD1 == "000")
          KS0IW02.KS0IW-UCTNT-CD[1] = "  ";
        else
          KS0IW02.KS0IW-UCTNT-CD[1] = PG2REC.XMCCD1;
        end
        if (PG2REC.XMCCD2 == "000")
          KS0IW02.KS0IW-UCTNT-CD[2] = "  ";
        else
          KS0IW02.KS0IW-UCTNT-CD[2] = PG2REC.XMCCD2;
        end
        if (PG2REC.XMCCD3 == "000")
          KS0IW02.KS0IW-UCTNT-CD[3] = "  ";
        else
          KS0IW02.KS0IW-UCTNT-CD[3] = PG2REC.XMCCD3;
        end
        if (PG2REC.XMCCD4 == "000")
          KS0IW02.KS0IW-UCTNT-CD[4] = "  ";
        else
          KS0IW02.KS0IW-UCTNT-CD[4] = PG2REC.XMCCD4;
        end
        KS0IW02.KS0IW-SPACT-CD = PG2REC.XSPCD; /* Sport Activity code*/
        if (PG2REC.XSPCD in XSPTBL.XSPCD /* If code in table*/
         && XSPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-SPACT-ABRV = XSPTBL.XSPABRV[sysVar.arrayIndex];
                                   /* Move code*/
        end
        KS0IW02.KS0IW-DIV-CD = PG2REC.XDVCD1; /* Division code*/
        if (PG2REC.XDVCD1 in XDVTBL.XDVCD /* If code in table*/
         && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-DIV-ABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
                                   /* Move code*/
        end
        KS0IW02.KS0IW-PROD-CAT-CD = PG2REC.XPCCD; /* Prod Cat code*/
        if (PG2REC.XPCCD in XPCTBL.XPCCD /* If code in table*/
         && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-PROD-CAT-ABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
                                   /* Move cd*/
        end
        KS0IW02.KS0IW-GNDR-AGE-CD = PG2REC.XGACD; /* Gender/age code*/
        if (PG2REC.XGACD in XGATBL.XGACD /* If code in table*/
         && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-GNDR-AGE-ABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
                                   /* Move cd*/
        end
        if (KS0IW02.KS0IW-SILH-CD == " ") /* Silhouette not overriden*/
          KS0IW02.KS0IW-SILH-CD = PG2REC.XSUCD; /* Silhouette code*/
          KS0IW00.KS0IW-SIL-OVERRIDE = "N";
        else
          if (KS0IW02.KS0IW-SILH-CD != PG2REC.XSUCD)
            KS0IW00.KS0IW-SIL-OVERRIDE = "Y";
          end
        end
        if (KS0IW02.KS0IW-SILH-CD in XSUTBL.XSUCD /* If code in table*/
         && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-SILH-ABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
                                   /* Move code*/
        end
      end
    else
      PG2REC.XGPCD = "02"; /* GPC code*/
      PG2REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
      if (KS0IW02.SY2CLRID == "***") /* Color array*/
        PG2REC.SY2CLRID = KS0IW02.KS0IW-COLOR[1]; /* Color 1 of array*/
      else
        PG2REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
      end
      PG2REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
      ;
      KS0I-21501(); /* Select unique VSYCLR01 row*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/
        KS0IW00.KS0IW-SAV-EQUIP-GPC = PG2REC.XGPCD;
        KS0IW02.SY2CLRDS = PG2REC.SY2CLRDS; /* Color desc*/
        if (PG2REC.XMLCD[1] == "00")
          KS0IW02.KS0IW-LCTNT-CD[1] = "  ";
        else
          KS0IW02.KS0IW-LCTNT-CD[1] = PG2REC.XMLCD[1];
        end
        if (PG2REC.XMLCD[2] == "00")
          KS0IW02.KS0IW-LCTNT-CD[2] = "  ";
        else
          KS0IW02.KS0IW-LCTNT-CD[2] = PG2REC.XMLCD[2];
        end
        KS0IW02.KS0IW-LCTNT-CD[3] = PG2REC.XMLCD[3];
        KS0IW02.KS0IW-LCTNT-CD[4] = PG2REC.XMLCD[4];
        if (PG2REC.XMCCD1 == "000")
          KS0IW02.KS0IW-UCTNT-CD[1] = "  ";
        else
          KS0IW02.KS0IW-UCTNT-CD[1] = PG2REC.XMCCD1;
        end
        if (PG2REC.XMCCD2 == "000")
          KS0IW02.KS0IW-UCTNT-CD[2] = "  ";
        else
          KS0IW02.KS0IW-UCTNT-CD[2] = PG2REC.XMCCD2;
        end
        if (PG2REC.XMCCD3 == "000")
          KS0IW02.KS0IW-UCTNT-CD[3] = "  ";
        else
          KS0IW02.KS0IW-UCTNT-CD[3] = PG2REC.XMCCD3;
        end
        if (PG2REC.XMCCD4 == "000")
          KS0IW02.KS0IW-UCTNT-CD[4] = "  ";
        else
          KS0IW02.KS0IW-UCTNT-CD[4] = PG2REC.XMCCD4;
        end
        KS0IW02.KS0IW-SPACT-CD = PG2REC.XSPCD; /* Sport Activity code*/
        if (PG2REC.XSPCD in XSPTBL.XSPCD /* If code in table*/
         && XSPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-SPACT-ABRV = XSPTBL.XSPABRV[sysVar.arrayIndex];
                                   /* Move code*/
        end
        KS0IW02.KS0IW-DIV-CD = PG2REC.XDVCD1; /* Division code*/
        if (PG2REC.XDVCD1 in XDVTBL.XDVCD /* If code in table*/
         && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-DIV-ABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
                                   /* Move code*/
        end
        KS0IW02.KS0IW-PROD-CAT-CD = PG2REC.XPCCD; /* Prod Cat code*/
        if (PG2REC.XPCCD in XPCTBL.XPCCD /* If code in table*/
         && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-PROD-CAT-ABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
                                   /* Move cd*/
        end
        KS0IW02.KS0IW-GNDR-AGE-CD = PG2REC.XGACD; /* Gender/age code*/
        if (PG2REC.XGACD in XGATBL.XGACD /* If code in table*/
         && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-GNDR-AGE-ABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
                                   /* Move cd*/
        end
        if (KS0IW02.KS0IW-SILH-CD == " ") /* Silhouette not overriden*/
          KS0IW02.KS0IW-SILH-CD = PG2REC.XSUCD; /* Silhouette code*/
          KS0IW00.KS0IW-SIL-OVERRIDE = "N";
        else
          if (KS0IW02.KS0IW-SILH-CD != PG2REC.XSUCD)
            KS0IW00.KS0IW-SIL-OVERRIDE = "Y";
          end
        end
        if (KS0IW02.KS0IW-SILH-CD in XSUTBL.XSUCD /* If code in table*/
         && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          KS0IW02.KS0IW-SILH-ABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
                                   /* Move code*/
        end
      else
        PG2REC.XGPCD = "03"; /* GPC code*/
        PG2REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
        if (KS0IW02.SY2CLRID == "***") /* Color array*/
          PG2REC.SY2CLRID = KS0IW02.KS0IW-COLOR[1];
                                   /* Color 1 of array*/
        else
          PG2REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
        end
        PG2REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
        ;
        KS0I-21501(); /* Select unique VSYCLR01 row*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/
          KS0IW00.KS0IW-SAV-EQUIP-GPC = PG2REC.XGPCD;
          KS0IW02.SY2CLRDS = PG2REC.SY2CLRDS; /* Color desc*/
          if (PG2REC.XMLCD[1] == "00")
            KS0IW02.KS0IW-LCTNT-CD[1] = "  ";
          else
            KS0IW02.KS0IW-LCTNT-CD[1] = PG2REC.XMLCD[1];
          end
          if (PG2REC.XMLCD[2] == "00")
            KS0IW02.KS0IW-LCTNT-CD[2] = "  ";
          else
            KS0IW02.KS0IW-LCTNT-CD[2] = PG2REC.XMLCD[2];
          end
          KS0IW02.KS0IW-LCTNT-CD[3] = PG2REC.XMLCD[3];
          KS0IW02.KS0IW-LCTNT-CD[4] = PG2REC.XMLCD[4];
          if (PG2REC.XMCCD1 == "000")
            KS0IW02.KS0IW-UCTNT-CD[1] = "  ";
          else
            KS0IW02.KS0IW-UCTNT-CD[1] = PG2REC.XMCCD1;
          end
          if (PG2REC.XMCCD2 == "000")
            KS0IW02.KS0IW-UCTNT-CD[2] = "  ";
          else
            KS0IW02.KS0IW-UCTNT-CD[2] = PG2REC.XMCCD2;
          end
          if (PG2REC.XMCCD3 == "000")
            KS0IW02.KS0IW-UCTNT-CD[3] = "  ";
          else
            KS0IW02.KS0IW-UCTNT-CD[3] = PG2REC.XMCCD3;
          end
          if (PG2REC.XMCCD4 == "000")
            KS0IW02.KS0IW-UCTNT-CD[4] = "  ";
          else
            KS0IW02.KS0IW-UCTNT-CD[4] = PG2REC.XMCCD4;
          end
          KS0IW02.KS0IW-SPACT-CD = PG2REC.XSPCD;
                                   /* Sport Activity code*/
          if (PG2REC.XSPCD in XSPTBL.XSPCD /* If code in table*/
           && XSPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
            KS0IW02.KS0IW-SPACT-ABRV = XSPTBL.XSPABRV[sysVar.arrayIndex];
                                   /* Move code*/
          end
          KS0IW02.KS0IW-DIV-CD = PG2REC.XDVCD1; /* Division code*/
          if (PG2REC.XDVCD1 in XDVTBL.XDVCD /* If code in table*/
           && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
            KS0IW02.KS0IW-DIV-ABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
                                   /* Move code*/
          end
          KS0IW02.KS0IW-PROD-CAT-CD = PG2REC.XPCCD; /* Prod Cat code*/
          if (PG2REC.XPCCD in XPCTBL.XPCCD /* If code in table*/
           && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
            KS0IW02.KS0IW-PROD-CAT-ABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
                                   /* Move cd*/
          end
          KS0IW02.KS0IW-GNDR-AGE-CD = PG2REC.XGACD; /* Gender/age code*/
          if (PG2REC.XGACD in XGATBL.XGACD /* If code in table*/
           && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
            KS0IW02.KS0IW-GNDR-AGE-ABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
                                   /* Move cd*/
          end
          if (KS0IW02.KS0IW-SILH-CD == " ") /* Silhouette not overriden*/
            KS0IW02.KS0IW-SILH-CD = PG2REC.XSUCD; /* Silhouette code*/
            KS0IW00.KS0IW-SIL-OVERRIDE = "N";
          else
            if (KS0IW02.KS0IW-SILH-CD != PG2REC.XSUCD)
              KS0IW00.KS0IW-SIL-OVERRIDE = "Y";
            end
          end
          if (KS0IW02.KS0IW-SILH-CD in XSUTBL.XSUCD /* If code in table*/
           && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
            KS0IW02.KS0IW-SILH-ABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
                                   /* Move code*/
          end
        end
      end
    end
  else
    PG2REC.XGPCD = KS0IW02.XGPCD; /* GPC code*/
    PG2REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
    if (KS0IW02.SY2CLRID == "***") /* Color array*/
      PG2REC.SY2CLRID = KS0IW02.KS0IW-COLOR[1]; /* Color 1 of array*/
    else
      PG2REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
    end
    PG2REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
    ;
    KS0I-21501(); /* Select unique VSYCLR01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/
      KS0IW02.SY2CLRDS = PG2REC.SY2CLRDS; /* Color desc*/
      if (PG2REC.XMLCD[1] == "00")
        KS0IW02.KS0IW-LCTNT-CD[1] = "  ";
      else
        KS0IW02.KS0IW-LCTNT-CD[1] = PG2REC.XMLCD[1];
      end
      if (PG2REC.XMLCD[2] == "00")
        KS0IW02.KS0IW-LCTNT-CD[2] = "  ";
      else
        KS0IW02.KS0IW-LCTNT-CD[2] = PG2REC.XMLCD[2];
      end
      KS0IW02.KS0IW-LCTNT-CD[3] = PG2REC.XMLCD[3];
      KS0IW02.KS0IW-LCTNT-CD[4] = PG2REC.XMLCD[4];
      if (PG2REC.XMCCD1 == "000")
        KS0IW02.KS0IW-UCTNT-CD[1] = "  ";
      else
        KS0IW02.KS0IW-UCTNT-CD[1] = PG2REC.XMCCD1;
      end
      if (PG2REC.XMCCD2 == "000")
        KS0IW02.KS0IW-UCTNT-CD[2] = "  ";
      else
        KS0IW02.KS0IW-UCTNT-CD[2] = PG2REC.XMCCD2;
      end
      if (PG2REC.XMCCD3 == "000")
        KS0IW02.KS0IW-UCTNT-CD[3] = "  ";
      else
        KS0IW02.KS0IW-UCTNT-CD[3] = PG2REC.XMCCD3;
      end
      if (PG2REC.XMCCD4 == "000")
        KS0IW02.KS0IW-UCTNT-CD[4] = "  ";
      else
        KS0IW02.KS0IW-UCTNT-CD[4] = PG2REC.XMCCD4;
      end
      KS0IW02.KS0IW-SPACT-CD = PG2REC.XSPCD; /* Sport Activity code*/
      if (PG2REC.XSPCD in XSPTBL.XSPCD /* If code in table*/
       && XSPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        KS0IW02.KS0IW-SPACT-ABRV = XSPTBL.XSPABRV[sysVar.arrayIndex];
                                   /* Move code*/
      end
      KS0IW02.KS0IW-DIV-CD = PG2REC.XDVCD1; /* Division code*/
      if (PG2REC.XDVCD1 in XDVTBL.XDVCD /* If code in table*/
       && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        KS0IW02.KS0IW-DIV-ABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* Move code*/
      end
      KS0IW02.KS0IW-PROD-CAT-CD = PG2REC.XPCCD; /* Prod Cat code*/
      if (PG2REC.XPCCD in XPCTBL.XPCCD /* If code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        KS0IW02.KS0IW-PROD-CAT-ABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
                                   /* Move cd*/
      end
      KS0IW02.KS0IW-GNDR-AGE-CD = PG2REC.XGACD; /* Gender/age code*/
      if (PG2REC.XGACD in XGATBL.XGACD /* If code in table*/
       && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        KS0IW02.KS0IW-GNDR-AGE-ABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
                                   /* Move cd*/
      end
      if (KS0IW02.KS0IW-SILH-CD == " ") /* Silhouette not overriden*/
        KS0IW02.KS0IW-SILH-CD = PG2REC.XSUCD; /* Silhouette code*/
        KS0IW00.KS0IW-SIL-OVERRIDE = "N";
      else
        if (KS0IW02.KS0IW-SILH-CD != PG2REC.XSUCD)
          KS0IW00.KS0IW-SIL-OVERRIDE = "Y";
        end
      end
      if (KS0IW02.KS0IW-SILH-CD in XSUTBL.XSUCD /* If code in table*/
       && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        KS0IW02.KS0IW-SILH-ABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* Move code*/
      end
    end
  end
end // end KS0I-21500

// Select unique VSYCLR01 row
Function KS0I-21501()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21601"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21501

// Obtain dev product information
Function KS0I-21600()
  /* ------------------------------------------------------------*/
  /* Obtain the product information.*/
  /* ------------------------------------------------------------*/
  ;
  set PG4REC empty;
  PG4REC.PG4STNBR = KS0IW02.KS0IW-XPRMT-STY-NBR; /* Style number*/
  ;
  KS0I-21601(); /* Select unique VSYCLR01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/
    if (PG4REC.XMLCD[1] == "00")
      KS0IW02.KS0IW-LCTNT-CD[1] = "  ";
    else
      KS0IW02.KS0IW-LCTNT-CD[1] = PG4REC.XMLCD[1];
    end
    if (PG4REC.XMLCD[2] == "00")
      KS0IW02.KS0IW-LCTNT-CD[2] = "  ";
    else
      KS0IW02.KS0IW-LCTNT-CD[2] = PG4REC.XMLCD[2];
    end
    KS0IW02.KS0IW-LCTNT-CD[3] = PG4REC.XMLCD[3];
    KS0IW02.KS0IW-LCTNT-CD[4] = PG4REC.XMLCD[4];
    if (PG4REC.XMCCD[1] == "000")
      KS0IW02.KS0IW-UCTNT-CD[1] = " ";
    else
      KS0IW02.KS0IW-UCTNT-CD[1] = PG4REC.XMCCD[1];
    end
    if (PG4REC.XMCCD[2] == "000")
      KS0IW02.KS0IW-UCTNT-CD[2] = " ";
    else
      KS0IW02.KS0IW-UCTNT-CD[2] = PG4REC.XMCCD[2];
    end
    if (PG4REC.XMCCD[3] == "000")
      KS0IW02.KS0IW-UCTNT-CD[3] = " ";
    else
      KS0IW02.KS0IW-UCTNT-CD[3] = PG4REC.XMCCD[3];
    end
    if (PG4REC.XMCCD[4] == "000")
      KS0IW02.KS0IW-UCTNT-CD[4] = " ";
    else
      KS0IW02.KS0IW-UCTNT-CD[4] = PG4REC.XMCCD[4];
    end
    KS0IW-FACTORY[1] = PG4REC.PG4PRFTY;
    KS0IW02.KS0IW-SPACT-CD = PG4REC.XSPCD; /* Sport Activity code*/
    if (PG4REC.XSPCD in XSPTBL.XSPCD /* If code in table*/
     && XSPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      KS0IW02.KS0IW-SPACT-ABRV = XSPTBL.XSPABRV[sysVar.arrayIndex]; /* Move code*/
    end
    KS0IW02.KS0IW-DIV-CD = PG4REC.XDVCD; /* Division code*/
    if (PG4REC.XDVCD in XDVTBL.XDVCD /* If code in table*/
     && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      KS0IW02.KS0IW-DIV-ABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* Move code*/
    end
    KS0IW02.KS0IW-PROD-CAT-CD = PG4REC.XPCCD; /* Prod Cat code*/
    if (PG4REC.XPCCD in XPCTBL.XPCCD /* If code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      KS0IW02.KS0IW-PROD-CAT-ABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Move cd*/
    end
    KS0IW02.KS0IW-GNDR-AGE-CD = PG4REC.XGACD; /* Gender/age code*/
    if (PG4REC.XGACD in XGATBL.XGACD /* If code in table*/
     && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      KS0IW02.KS0IW-GNDR-AGE-ABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* Move cd*/
    end
    KS0IW02.KS0IW-SILH-CD = PG4REC.XSUCD; /* Silhouette code*/
    if (PG4REC.XSUCD in XSUTBL.XSUCD /* If code in table*/
     && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      KS0IW02.KS0IW-SILH-ABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* Move code*/
    end
  end
  ;
  ;
end // end KS0I-21600

// Select unique VSYDVL01 row
Function KS0I-21601()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21701"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21601

// Obtain upper/lower contents
Function KS0I-21700()
  /* ------------------------------------------------------------*/
  /* Get GPC 02 Shell/Overlay/Outsole info.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW02.KS0IW-FABRIC-DESC[1] = " ";
  KS0IW02.KS0IW-FABRIC-FIELD[1] = "UPPER - SHELL  : ";
  if (KS0IW02.KS0IW-UCTNT-CD[1] > " ")
    if (KS0IW02.KS0IW-UCTNT-CD[1] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0IW02.KS0IW-FABRIC-DESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    end
  end
  KS0IW02.KS0IW-FABRIC-TEXT = " ";
  KS0IW02.KS0IW-FABRIC-FIELD[2] = "        OVERLAY: ";
  KS0IW00.KS0IW-IX2 = 1;
  KS0IW00.KS0IW-IX3 = 1;
  if (KS0IW02.KS0IW-UCTNT-CD[2] > " ")
    if (KS0IW02.KS0IW-UCTNT-CD[2] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0IW02.KS0IW-XMCSDESC = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      while (KS0IW00.KS0IW-IX2 <= 12)
        if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
          KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
        else
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = " ";
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
            KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
          else
            KS0IW00.KS0IW-IX2 = 13;
          end
        end
      end
    end
  end
  if (KS0IW02.KS0IW-UCTNT-CD[3] > " ")
    if (KS0IW02.KS0IW-UCTNT-CD[3] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0IW02.KS0IW-XMCSDESC = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      KS0IW00.KS0IW-IX2 = 1;
      KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = ",";
      KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
      KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = " ";
      KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
      while (KS0IW00.KS0IW-IX2 <= 12)
        if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
          KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
        else
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = " ";
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
            KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
          else
            KS0IW00.KS0IW-IX2 = 13;
          end
        end
      end
    end
  end
  if (KS0IW02.KS0IW-UCTNT-CD[4] > " ")
    if (KS0IW02.KS0IW-UCTNT-CD[4] in XMCTBL.XMCCD
     && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0IW02.KS0IW-XMCSDESC = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      KS0IW00.KS0IW-IX2 = 1;
      KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = ",";
      KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
      KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = " ";
      KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
      while (KS0IW00.KS0IW-IX2 <= 12)
        if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
          KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
        else
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = " ";
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
            KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
          else
            KS0IW00.KS0IW-IX2 = 13;
          end
        end
      end
    end
  end
  KS0IW02.KS0IW-FABRIC-DESC[2] = KS0IW02.KS0IW-FABRIC-TEXT;
  ;
  KS0IW02.KS0IW-FABRIC-TEXT = " ";
  KS0IW02.KS0IW-FABRIC-FIELD[3] = "LOWER - OUTSOLE: ";
  KS0IW00.KS0IW-IX2 = 1;
  KS0IW00.KS0IW-IX3 = 1;
  if (KS0IW02.KS0IW-LCTNT-CD[1] > " ")
    if (KS0IW02.KS0IW-LCTNT-CD[1] in XMLTBL.XMLCD
     && XMLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0IW02.KS0IW-XMCSDESC = XMLTBL.XMLSDESC[sysVar.arrayIndex];
      while (KS0IW00.KS0IW-IX2 <= 12)
        if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
          KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
        else
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = " ";
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
            KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
          else
            KS0IW00.KS0IW-IX2 = 13;
          end
        end
      end
    end
  end
  if (KS0IW02.KS0IW-LCTNT-CD[2] > " ")
    if (KS0IW02.KS0IW-LCTNT-CD[2] in XMLTBL.XMLCD
     && XMLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KS0IW02.KS0IW-XMCSDESC = XMLTBL.XMLSDESC[sysVar.arrayIndex];
      KS0IW00.KS0IW-IX2 = 1;
      KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = ",";
      KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
      KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = " ";
      KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
      while (KS0IW00.KS0IW-IX2 <= 12)
        if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
          KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
        else
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          if (KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2] > " ")
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = " ";
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
            KS0IW02.KS0IW-FABRIC-BYTE[KS0IW-IX3] = KS0IW02.KS0IW-XMCSDESC-BYTE[KS0IW-IX2];
            KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
          else
            KS0IW00.KS0IW-IX2 = 13;
          end
        end
      end
    end
  end
  KS0IW02.KS0IW-FABRIC-DESC[3] = KS0IW02.KS0IW-FABRIC-TEXT;
  ;
  ;
end // end KS0I-21700

// Obtain VPOITM01 information
Function KS0I-21800()
  /* ------------------------------------------------------------*/
  /* Obtain the factory information.*/
  /* ------------------------------------------------------------*/
  ;
  set PC6REC empty;
  set PCYREC empty;
  if (KS0IW02.XGPCD == "EQ") /**/
    if (KS0IW00.KS0IW-SAV-EQUIP-GPC != " ")
      PCYREC.PCYFUNC = "S3"; /* Call function*/
      PC6REC.XGPCD = KS0IW00.KS0IW-SAV-EQUIP-GPC; /* GPC code*/
      PC6REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
      if (KS0IW02.KS0IW-POIDT > " ")
        KS0IW02.KS0IW-POIDT-NUM = KS0IW02.KS0IW-POIDT;
      else
        KS0IW02.KS0IW-POIDT-NUM = 0;
      end
      PCYREC.PCYFRDT = KS0IW02.KS0IW-POIDT-NUM; /* PO ID date*/
      PCYREC.PCYTODT = KS0IW02.KS0IW-POIDT-NUM; /* PO ID date*/
      PC6REC.PCFSECD = "*"; /* Season code*/
      PC6REC.FY1FCTYC = "*"; /* Factory code*/
      PC6REC.PC4ORTYP = "*"; /* Order type code*/
      PC6REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
      PC6REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
      PC6REC.XQACD = "*"; /* Quality code*/
      PC6REC.XOWCD = "*"; /* Owner group code*/
      PC6REC.XPGCD = "*"; /* Package type code*/
      if (PG2REC.XUMCD > " ")
        PC6REC.XUMCD = PG2REC.XUMCD; /* UOM code*/
      else
        PC6REC.XUMCD = "*";
      end
      PC6REC.XWHCD = "*"; /* Warehouse code*/
      PC6REC.PC2INSEG = "*"; /* Spec code*/
      PC6REC.PC2CUXID = "*"; /* PC-PRDCU-ID*/
      PC6REC.PC6ETSDT = -1; /* PC-EST-HDT*/
      PC6REC.YMTCD = "*"; /* Mode code*/
      PC6REC.PC6PLAN = -1; /* Plan number*/
      PC6REC.XDSCD = "*"; /* Direct ship code*/
      PC6REC.YSMXDV = "*"; /* XXX-SUM-XDV-CD*/
      PC6REC.PC6STAT = "*"; /* Item status code*/
      ;
      KS0IW00.KS0IW-FCTY-SWITCH = "N";
      KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
      KS0IW00.KS0IW-IX3 = 1; /* Reset index*/
      ;
      KS0I-21801(); /* Select VPOITM01 set*/
      ;
      while (KS0IW00.KS0IW-FCTY-SWITCH == "N" /* Until EOF*/
       && KS0IW00.KS0IW-IX2 <= 12          
       && KS0IW00.KS0IW-IX3 <= 6)
        KS0I-21802(); /* Fetch  VPOITM01 row*/
      end
      ;
      KS0I-21803(); /* Close  VPOITM01 set*/
    else
      PCYREC.PCYFUNC = "S3"; /* Call function*/
      PC6REC.XGPCD = "02"; /* GPC code*/
      PC6REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
      if (KS0IW02.KS0IW-POIDT > " ")
        KS0IW02.KS0IW-POIDT-NUM = KS0IW02.KS0IW-POIDT;
      else
        KS0IW02.KS0IW-POIDT-NUM = 0;
      end
      PCYREC.PCYFRDT = KS0IW02.KS0IW-POIDT-NUM; /* PO ID date*/
      PCYREC.PCYTODT = KS0IW02.KS0IW-POIDT-NUM; /* PO ID date*/
      PC6REC.PCFSECD = "*"; /* Season code*/
      PC6REC.FY1FCTYC = "*"; /* Factory code*/
      PC6REC.PC4ORTYP = "*"; /* Order type code*/
      PC6REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
      PC6REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
      PC6REC.XQACD = "*"; /* Quality code*/
      PC6REC.XOWCD = "*"; /* Owner group code*/
      PC6REC.XPGCD = "*"; /* Package type code*/
      if (PG2REC.XUMCD > " ")
        PC6REC.XUMCD = PG2REC.XUMCD; /* UOM code*/
      else
        PC6REC.XUMCD = "*";
      end
      PC6REC.XWHCD = "*"; /* Warehouse code*/
      PC6REC.PC2INSEG = "*"; /* Spec code*/
      PC6REC.PC2CUXID = "*"; /* PC-PRDCU-ID*/
      PC6REC.PC6ETSDT = -1; /* PC-EST-HDT*/
      PC6REC.YMTCD = "*"; /* Mode code*/
      PC6REC.PC6PLAN = -1; /* Plan number*/
      PC6REC.XDSCD = "*"; /* Direct ship code*/
      PC6REC.YSMXDV = "*"; /* XXX-SUM-XDV-CD*/
      PC6REC.PC6STAT = "*"; /* Item status code*/
      ;
      KS0IW00.KS0IW-FCTY-SWITCH = "N";
      KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
      KS0IW00.KS0IW-IX3 = 1; /* Reset index*/
      ;
      KS0I-21801(); /* Select VPOITM01 set*/
      ;
      while (KS0IW00.KS0IW-FCTY-SWITCH == "N" /* Until EOF*/
       && KS0IW00.KS0IW-IX2 <= 12          
       && KS0IW00.KS0IW-IX3 <= 6)
        KS0I-21802(); /* Fetch  VPOITM01 row*/
      end
      ;
      KS0I-21803(); /* Close  VPOITM01 set*/
      PCYREC.PCYFUNC = "S3"; /* Call function*/
      PC6REC.XGPCD = "03"; /* GPC code*/
      PC6REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
      if (KS0IW02.KS0IW-POIDT > " ")
        KS0IW02.KS0IW-POIDT-NUM = KS0IW02.KS0IW-POIDT;
      else
        KS0IW02.KS0IW-POIDT-NUM = 0;
      end
      PCYREC.PCYFRDT = KS0IW02.KS0IW-POIDT-NUM; /* PO ID date*/
      PCYREC.PCYTODT = KS0IW02.KS0IW-POIDT-NUM; /* PO ID date*/
      PC6REC.PCFSECD = "*"; /* Season code*/
      PC6REC.FY1FCTYC = "*"; /* Factory code*/
      PC6REC.PC4ORTYP = "*"; /* Order type code*/
      PC6REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
      PC6REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
      PC6REC.XQACD = "*"; /* Quality code*/
      PC6REC.XOWCD = "*"; /* Owner group code*/
      PC6REC.XPGCD = "*"; /* Package type code*/
      if (PG2REC.XUMCD > " ")
        PC6REC.XUMCD = PG2REC.XUMCD; /* UOM code*/
      else
        PC6REC.XUMCD = "*";
      end
      PC6REC.XWHCD = "*"; /* Warehouse code*/
      PC6REC.PC2INSEG = "*"; /* Spec code*/
      PC6REC.PC2CUXID = "*"; /* PC-PRDCU-ID*/
      PC6REC.PC6ETSDT = -1; /* PC-EST-HDT*/
      PC6REC.YMTCD = "*"; /* Mode code*/
      PC6REC.PC6PLAN = -1; /* Plan number*/
      PC6REC.XDSCD = "*"; /* Direct ship code*/
      PC6REC.YSMXDV = "*"; /* XXX-SUM-XDV-CD*/
      PC6REC.PC6STAT = "*"; /* Item status code*/
      ;
      KS0IW00.KS0IW-FCTY-SWITCH = "N";
      KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
      KS0IW00.KS0IW-IX3 = 1; /* Reset index*/
      ;
      KS0I-21801(); /* Select VPOITM01 set*/
      ;
      while (KS0IW00.KS0IW-FCTY-SWITCH == "N" /* Until EOF*/
       && KS0IW00.KS0IW-IX2 <= 12          
       && KS0IW00.KS0IW-IX3 <= 6)
        KS0I-21802(); /* Fetch  VPOITM01 row*/
      end
      ;
      KS0I-21803(); /* Close  VPOITM01 set*/
    end
  else
    PCYREC.PCYFUNC = "S3"; /* Call function*/
    PC6REC.XGPCD = KS0IW02.XGPCD; /* GPC code*/
    PC6REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
    if (KS0IW02.KS0IW-POIDT > " ")
      KS0IW02.KS0IW-POIDT-NUM = KS0IW02.KS0IW-POIDT;
    else
      KS0IW02.KS0IW-POIDT-NUM = 0;
    end
    PCYREC.PCYFRDT = KS0IW02.KS0IW-POIDT-NUM; /* PO ID date*/
    PCYREC.PCYTODT = KS0IW02.KS0IW-POIDT-NUM; /* PO ID date*/
    PC6REC.PCFSECD = "*"; /* Season code*/
    PC6REC.FY1FCTYC = "*"; /* Factory code*/
    PC6REC.PC4ORTYP = "*"; /* Order type code*/
    PC6REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
    PC6REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
    PC6REC.XQACD = "*"; /* Quality code*/
    PC6REC.XOWCD = "*"; /* Owner group code*/
    PC6REC.XPGCD = "*"; /* Package type code*/
    if (PG2REC.XUMCD > " ")
      PC6REC.XUMCD = PG2REC.XUMCD; /* UOM code*/
    else
      PC6REC.XUMCD = "*";
    end
    PC6REC.XWHCD = "*"; /* Warehouse code*/
    PC6REC.PC2INSEG = "*"; /* Spec code*/
    PC6REC.PC2CUXID = "*"; /* PC-PRDCU-ID*/
    PC6REC.PC6ETSDT = -1; /* PC-EST-HDT*/
    PC6REC.YMTCD = "*"; /* Mode code*/
    PC6REC.PC6PLAN = -1; /* Plan number*/
    PC6REC.XDSCD = "*"; /* Direct ship code*/
    PC6REC.YSMXDV = "*"; /* XXX-SUM-XDV-CD*/
    PC6REC.PC6STAT = "*"; /* Item status code*/
    ;
    KS0IW00.KS0IW-FCTY-SWITCH = "N";
    KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
    KS0IW00.KS0IW-IX3 = 1; /* Reset index*/
    ;
    KS0I-21801(); /* Select VPOITM01 set*/
    ;
    while (KS0IW00.KS0IW-FCTY-SWITCH == "N" /* Until EOF*/
     && KS0IW00.KS0IW-IX2 <= 12          
     && KS0IW00.KS0IW-IX3 <= 6)
      KS0I-21802(); /* Fetch  VPOITM01 row*/
    end
    ;
    KS0I-21803(); /* Close  VPOITM01 set*/
  end
end // end KS0I-21800

// Select VPOITM01 set
Function KS0I-21801()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21801"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21801

// Fetch  VPOITM01 row
Function KS0I-21802()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  PCYREC.PCYFUNC = "N3";
  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      KS0IW00.KS0IW-SAV-EQUIP-GPC = PC6REC.XGPCD;
      if (PC6REC.FY1FCTYC in KS0IW02.KS0IW-FACTORY)
        if (KS0IW02.XGPCD != "03") /* don't add any ctrys for aprl*/
          if (PC6REC.XCTCD in KS0IW02.KS0IW-ORIG-CD)
            return;
          else
            KS0IW02.KS0IW-ORIG-CD[KS0IW-IX3] = PC6REC.XCTCD;
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
            return;
          end
        else
          return;
        end
      else
        KS0IW02.KS0IW-FACTORY[KS0IW-IX2] = PC6REC.FY1FCTYC;
        KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
        if (KS0IW02.XGPCD != "03") /* don't add any ctrys for aprl*/
          if (PC6REC.XCTCD in KS0IW02.KS0IW-ORIG-CD)
            return;
          else
            KS0IW02.KS0IW-ORIG-CD[KS0IW-IX3] = PC6REC.XCTCD;
            KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1;
            return;
          end
        else
          return;
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KS0IW00.KS0IW-FCTY-SWITCH = "Y";
        return;
      end
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21802"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21802

// Close  VPOITM01 set
Function KS0I-21803()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  PCYREC.PCYFUNC = "C3";
  try
    call "IO3310" (PCYREC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21803"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21803

// Obtain VFYCLR01 information
Function KS0I-21900()
  /* ------------------------------------------------------------*/
  /* Obtain the factory information.*/
  /* ------------------------------------------------------------*/
  ;
  set FY3REC empty;
  if (KS0IW02.XGPCD == "EQ") /* Equipment*/
    if (KS0IW00.KS0IW-SAV-EQUIP-GPC != " ")
      FY3REC.XGPCD = KS0IW00.KS0IW-SAV-EQUIP-GPC; /* GPC*/
      FY3REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
      FY3REC.FY1FCTYC = "*"; /* Factory code*/
      FY3REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
      FY3REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
      FY3REC.XQACD = "*"; /* Quality code*/
      FY3REC.PC2INSEG = "*"; /* Spec code*/
      FY3REC.XPGCD = "*"; /* Package type code*/
      FY3REC.XUMCD = "*"; /* UOM code*/
      FY3REC.XSECD = "*"; /* Season code*/
      FY3REC.XSNYR = -1; /* Season year range*/
      FY3REC.FY3INPFL = "*"; /* FY-IN-PROD-FL*/
      FY3REC.FY3SFYFL = "*"; /* FY-FCTY-STY-FL*/
      FY3REC.XXXSTAT = "*"; /* Item status code*/
      ;
      KS0IW00.KS0IW-FCTY-SWITCH = "N";
      KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
      ;
      KS0I-21901(); /* Select VFYCLR01 set*/
      ;
      while (KS0IW00.KS0IW-FCTY-SWITCH == "N" /* Until EOF*/
       && KS0IW00.KS0IW-IX2 <= 12)
        KS0I-21902(); /* Fetch  VFYCLR01 row*/
      end
      ;
      KS0I-21903(); /* Close  VFYCLR01 set*/
    else
      ;
      FY3REC.XGPCD = "02"; /* GPC*/
      FY3REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
      FY3REC.FY1FCTYC = "*"; /* Factory code*/
      FY3REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
      FY3REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
      FY3REC.XQACD = "*"; /* Quality code*/
      FY3REC.PC2INSEG = "*"; /* Spec code*/
      FY3REC.XPGCD = "*"; /* Package type code*/
      FY3REC.XUMCD = "*"; /* UOM code*/
      FY3REC.XSECD = "*"; /* Season code*/
      FY3REC.XSNYR = -1; /* Season year range*/
      FY3REC.FY3INPFL = "*"; /* FY-IN-PROD-FL*/
      FY3REC.FY3SFYFL = "*"; /* FY-FCTY-STY-FL*/
      FY3REC.XXXSTAT = "*"; /* Item status code*/
      ;
      KS0IW00.KS0IW-FCTY-SWITCH = "N";
      KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
      ;
      KS0I-21901(); /* Select VFYCLR01 set*/
      ;
      while (KS0IW00.KS0IW-FCTY-SWITCH == "N" /* Until EOF*/
       && KS0IW00.KS0IW-IX2 <= 12)
        KS0I-21902(); /* Fetch  VFYCLR01 row*/
      end
      ;
      KS0I-21903(); /* Close  VFYCLR01 set*/
      ;
      FY3REC.XGPCD = "03"; /* GPC*/
      FY3REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
      FY3REC.FY1FCTYC = "*"; /* Factory code*/
      FY3REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
      FY3REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
      FY3REC.XQACD = "*"; /* Quality code*/
      FY3REC.PC2INSEG = "*"; /* Spec code*/
      FY3REC.XPGCD = "*"; /* Package type code*/
      FY3REC.XUMCD = "*"; /* UOM code*/
      FY3REC.XSECD = "*"; /* Season code*/
      FY3REC.XSNYR = -1; /* Season year range*/
      FY3REC.FY3INPFL = "*"; /* FY-IN-PROD-FL*/
      FY3REC.FY3SFYFL = "*"; /* FY-FCTY-STY-FL*/
      FY3REC.XXXSTAT = "*"; /* Item status code*/
      ;
      KS0IW00.KS0IW-FCTY-SWITCH = "N";
      KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
      ;
      KS0I-21901(); /* Select VFYCLR01 set*/
      ;
      while (KS0IW00.KS0IW-FCTY-SWITCH == "N" /* Until EOF*/
       && KS0IW00.KS0IW-IX2 <= 12)
        KS0I-21902(); /* Fetch  VFYCLR01 row*/
      end
      ;
      KS0I-21903(); /* Close  VFYCLR01 set*/
    end
    ;
  else
    FY3REC.XGPCD = KS0IW02.XGPCD; /* GPC*/
    FY3REC.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
    FY3REC.FY1FCTYC = "*"; /* Factory code*/
    FY3REC.SY2CLRID = KS0IW02.SY2CLRID; /* Color code ID*/
    FY3REC.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
    FY3REC.XQACD = "*"; /* Quality code*/
    FY3REC.PC2INSEG = "*"; /* Spec code*/
    FY3REC.XPGCD = "*"; /* Package type code*/
    FY3REC.XUMCD = "*"; /* UOM code*/
    FY3REC.XSECD = "*"; /* Season code*/
    FY3REC.XSNYR = -1; /* Season year range*/
    FY3REC.FY3INPFL = "*"; /* FY-IN-PROD-FL*/
    FY3REC.FY3SFYFL = "*"; /* FY-FCTY-STY-FL*/
    FY3REC.XXXSTAT = "*"; /* Item status code*/
    ;
    KS0IW00.KS0IW-FCTY-SWITCH = "N";
    KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
    ;
    KS0I-21901(); /* Select VFYCLR01 set*/
    ;
    while (KS0IW00.KS0IW-FCTY-SWITCH == "N" /* Until EOF*/
     && KS0IW00.KS0IW-IX2 <= 12)
      KS0I-21902(); /* Fetch  VFYCLR01 row*/
    end
    ;
    KS0I-21903(); /* Close  VFYCLR01 set*/
    ;
  end
  ;
end // end KS0I-21900

// Select VFYCLR01 set
Function KS0I-21901()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO2990" ("S1", SQLCA, FY3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21901"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY3REC.FY3GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21901

// Fetch  VFYCLR01 row
Function KS0I-21902()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO2990" ("N1", SQLCA, FY3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      KS0IW00.KS0IW-SAV-EQUIP-GPC = FY3REC.XGPCD;
      if (FY3REC.FY1FCTYC in KS0IW02.KS0IW-FACTORY)
      else
        KS0IW02.KS0IW-FACTORY[KS0IW-IX2] = FY3REC.FY1FCTYC;
        KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
      end
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KS0IW00.KS0IW-FCTY-SWITCH = "Y";
        return;
      end
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21902"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY3REC.FY3GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21902

// Close  VFYCLR01 set
Function KS0I-21903()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO2990" ("C1", SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21903"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-21903

// Format and converse the map
Function KS0I-22000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  if (KS0IW00.KS0IW-VCPROD02-ADDED == "Y" /* If data base updated*/
   || KS0IW00.KS0IW-VCPROD02-DUP == "Y"   
   || KS0IW00.KS0IW-VCPROD02-UPD == "Y") 
    KSWREC.XXXMSGNO = 1;
    KS0IW00.KS0IW-VCPROD02-ADDED = "N";
    KS0IW00.KS0IW-VCPROD02-DUP = "N";
    KS0IW00.KS0IW-VCPROD02-UPD = "N";
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0IW00.KS0IW-SWF == "Y") /* Map must be formatted*/
      if (KS0IW00.KS0IW-FNC == "D" /* Duplicate function requested*/
       && KS0IW02.XGPCD != "02")   /* and not footwear GPC code*/
        KS0I-22100(); /* Format the data on the map*/
      else
        if (KS0IW00.KS0IW-FNC == "D" /* Duplicate funciton requested*/
         && KS0IW02.XGPCD == "02")   /* and footwear GPC code*/
          KS0I-22200(); /* Format the data on the map*/
        else
          if (KS0IW00.KS0IW-FNC == "A") /* Add function requested*/
            KS0I-22300(); /* Format the data on the map*/
          end
        end
      end
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0IM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0IM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  set KS0IM002.KS0IM-PF16 skip;
  if (KS0IW02.XGPCD == "02"
   && KS0IW00.KS0IW-FNC != "A")
    set KS0IM002.KS0IM-PF19 skip;
  end
  ;
  if (KSWREC.KSW-HTS-NBR > " ")
    set KS0IM002.KS0IM-HTS-NBR cursor;
    KSWREC.KSW-HTS-NBR = " ";
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0IM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0IM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0IM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0IM002 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0IM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0IM002.CAITEM; /* Application data*/
  ;
  ;
end // end KS0I-22000

// Format Apparel Duplication map
Function KS0I-22100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM002 initial; /* M002 input/output area*/
  ;
  KS0IW00.KS0IW-SWF = "N"; /* Format the map switch*/
  ;
  set KS0IM002.KS0IM-BUS-UNIT-CD skip; /* Category*/
  set KS0IM002.KS0IM-STY-NBR cursor; /* Style*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM002.KS0IM-MAP-DESC = "DUPLICATE"; /* Map description*/
  KS0IM002.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
  KS0IM002.KS0IM-KS-STY-NM-FIELD = "LINE:";
  KS0IM002.KS0IM-DESC-FIELD = " NAME:";
  KS0IM002.KS0IM-FABRIC-FIELD1 = "    FABRIC DESC:";
  KS0IM002.KS0IM-FABRIC-FIELD2 = "                ";
  KS0IM002.KS0IM-FABRIC-FIELD3 = "                ";
  ;
  KS0IM002.KS0IM-BUS-UNIT-CD = KS0IW02.XGPCD; /* GPC code*/
  KS0IM002.KS0IM-STY-NBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
  KS0IM002.KS0IM-COLR-CD-ID = KS0IW02.SY2CLRID; /* Color id*/
  if (KS0IW02.SY2CLRID == "***")
    KS0IW00.KS0IW-IX1 = 1;
    while (KS0IW00.KS0IW-IX1 <= 10)
      if (KS0IW02.KS0IW-COLOR[KS0IW-IX1] > " ")
        KS0IM002.KS0IM-COLOR[KS0IW-IX1] = KS0IW02.KS0IW-COLOR[KS0IW-IX1];
        set KS0IM002.KS0IM-COLOR[KS0IW-IX1] skip;
        set KS0IM002.KS0IM-COLR-IND skip;
      end
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
  end
  ;
  KS0IM002.KS0IM-DIM-CD = KS0IW02.XDMCD; /* Dimension code*/
  ;
  if (KS0IW02.KS0IW-DTY-RATE > " ")
    set KS0IM002.KS0IM-GEN-DTY-FIELD skip;
    KS0IM002.KS0IM-GEN-DTY-RATE = KS0IW02.KS0IW-DTY-RATE;
  end
  ;
  if (KS0IW02.KS0IW-QOTA-CAT-CD > " ")
    set KS0IM002.KS0IM-QOTA-CAT-FIELD skip;
    KS0IM002.KS0IM-QOTA-CAT-CD = KS0IW02.KS0IW-QOTA-CAT-CD;
    KS0IM002.KS0IM-QOTA-CAT-SDESC = KS0IW02.KS0IW-QOTA-CAT-DESC;
  end
  ;
  KS0IM002.KS0IM-REG-CD = KS0IW02.KS0IW-REG-CD;
  if (KS0IM002.KS0IM-REG-CD > " ") /* If market reg entered*/
    if (KS0IM002.KS0IM-REG-CD in XDRTBL.XDR-PROD-REG-CD /* Code in table*/
     && XDRTBL.XXX-STAT[sysVar.arrayIndex] == "A")      /* and active status*/
      ;
      KS0IW02.KS0IW-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
    end
  end
  KS0IM002.KS0IM-REG-SDESC = KS0IW02.KS0IW-REG-SDESC;
  ;
  KS0IM002.KS0IM-HTS-NBR = KS0IW02.KS0IW-HTS-NBR; /* HTS number*/
  KS0IW01.KS0IW-HTS-NBR = " ";
  if (KS0IW02.KS0IW-HTS-NBR > " ")
    KS0IM002.KS0IM-TEAM-NBR = KS0IW02.KS0IW-TEAM-NBR;
    set KS0IM002.KS0IM-TEAM-NBR-FIELD skip;
    set KS0IM002.KS0IM-TEAM-NBR normal;
    if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y")
      set KS0IM002.KS0IM-TEAM-NBR bold;
    end
  end
  KS0IM002.KS0IM-RULE-NBR = KS0IW02.KS0IW-RULE-NBR; /* Rule number*/
  if (KS0IW02.KS0IW-RULE-NBR > " ")
    KS0IM002.KS0IM-RULE-DT = KS0IW02.KS0IW-RULE-DT; /* Rule date*/
    set KS0IM002.KS0IM-RULE-DT skip;
    set KS0IM002.KS0IM-DT-FIELD skip;
  else
    KS0IW02.KS0IW-RULE-DT = " ";
  end
  KS0IM002.KS0IM-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR; /* Experimental style number*/
  KS0IM002.KS0IM-SESN-CD = KS0IW02.KS0IW-XSECD; /* Season code*/
  if (KS0IW02.KS0IW-XSNYR > 0)
    KS0IM002.KS0IM-SESN-YR-RNG = KS0IW02.KS0IW-SESN-YEAR;
                                   /* Season year*/
  else
    KS0IM002.KS0IM-SESN-YR-RNG = 0; /* Season year*/
  end
  ;
  KS0IM002.KS0IM-KS-STY-NM[1] = KS0IW02.KS0IW-KS-STY-NM[1];
  KS0IM002.KS0IM-KS-STY-NM[2] = KS0IW02.KS0IW-KS-STY-NM[2];
  KS0IM002.KS0IM-STY-TYP-CD = KS0IW02.KS0IW-STY-TYP-CD;
  set KS0IM002.KS0IM-STY-TYP-DESC skip;
  KS0IM002.KS0IM-STY-TYP-DESC = KS0IW02.KS0IW-STY-TYP-DESC;
  KS0IM002.KS0IM-CUST-STYLE-SH-DESC = KS0IW02.KS0IW-KS-SHORT-STY-NM;
  ;
  set KS0IM002.KS0IM-FCTY-FIELD skip;
  KS0IW00.KS0IW-IX2 = 1;
  while (KS0IW00.KS0IW-IX2 <= 12
   && KS0IW02.KS0IW-FACTORY[KS0IW-IX2] > " ")
    KS0IM002.KS0IM-FCTY-CD[KS0IW-IX2] = KS0IW02.KS0IW-FACTORY[KS0IW-IX2];
    set KS0IM002.KS0IM-FCTY-CD[KS0IW-IX2] skip;
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
  end
  if (KS0IM002.KS0IM-FCTY-CD[1] == " ")
    KS0IM002.KS0IM-FCTY-CD[1] = "N/A";
    set KS0IM002.KS0IM-FCTY-CD[1] skip;
  end
  ;
  KS0IM002.KS0IM-FABRIC-DESC[1] = KS0IW02.KS0IW-FABRIC-DESC[1];
  KS0IM002.KS0IM-FABRIC-DESC[2] = KS0IW02.KS0IW-FABRIC-DESC[2];
  KS0IM002.KS0IM-FABRIC-DESC[3] = KS0IW02.KS0IW-FABRIC-DESC[3];
  ;
  KS0IM002.KS0IM-ORIG-CD[1] = KS0IW02.KS0IW-ORIG-CD[1]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[2] = KS0IW02.KS0IW-ORIG-CD[2]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[3] = KS0IW02.KS0IW-ORIG-CD[3]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[4] = KS0IW02.KS0IW-ORIG-CD[4]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[5] = KS0IW02.KS0IW-ORIG-CD[5]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[6] = KS0IW02.KS0IW-ORIG-CD[6]; /* Origin code*/
  ;
  KS0IM002.KS0IM-CATLG-PAGE-NBR = KS0IW02.KS0IW-CATLG-PAGE-NBR;
  ;
  ;
end // end KS0I-22100

// Format Ftwr Duplication map
Function KS0I-22200()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM002 initial; /* M002 input/output area*/
  ;
  KS0IW00.KS0IW-SWF = "N"; /* Format the map switch*/
  ;
  set KS0IM002.KS0IM-BUS-UNIT-CD skip; /* Category*/
  set KS0IM002.KS0IM-STY-NBR skip; /* Style*/
  set KS0IM002.KS0IM-XPRMT-STY-NBR skip; /* Exprimental Style*/
  set KS0IM002.KS0IM-COLR-CD-ID skip; /* Color*/
  set KS0IM002.KS0IM-DIM-CD skip; /* Dimension*/
  set KS0IM002.KS0IM-SESN-CD skip; /* Exprimental Style*/
  set KS0IM002.KS0IM-SESN-YR-RNG skip; /* Exprimental Style*/
  set KS0IM002.KS0IM-HTS-NBR cursor; /* HS Number*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM002.KS0IM-MAP-DESC = "DUPLICATE"; /* Map description*/
  KS0IM002.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
  KS0IM002.KS0IM-KS-STY-NM-FIELD = "NAME:";
  KS0IM002.KS0IM-DESC-FIELD = "COLOR:";
  KS0IM002.KS0IM-FABRIC-FIELD1 = KS0IW02.KS0IW-FABRIC-FIELD[1];
  KS0IM002.KS0IM-FABRIC-FIELD2 = KS0IW02.KS0IW-FABRIC-FIELD[2];
  KS0IM002.KS0IM-FABRIC-FIELD3 = KS0IW02.KS0IW-FABRIC-FIELD[3];
  set KS0IM002.KS0IM-FABRIC-FIELD1 skip;
  set KS0IM002.KS0IM-FABRIC-FIELD2 skip;
  set KS0IM002.KS0IM-FABRIC-FIELD3 skip;
  ;
  KS0IM002.KS0IM-BUS-UNIT-CD = KS0IW02.XGPCD; /* GPC code*/
  KS0IM002.KS0IM-STY-NBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
  KS0IM002.KS0IM-COLR-CD-ID = KS0IW02.SY2CLRID; /* Color id*/
  ;
  KS0IM002.KS0IM-DIM-CD = KS0IW02.XDMCD; /* Dimension code*/
  ;
  if (KS0IW-MAP3-PRBM-TABLE > " ")
    KS0IW00.KS0IW-IX1 = 1;
    KS0IW00.KS0IW-IX2 = 1;
    set KS0IM002.KS0IM-CSTM-FEAT-FIELD skip;
    while (KS0IW00.KS0IW-IX1 <= 25
     && KS0IW00.KS0IW-IX2 <= 6)
      if (KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX1] > " ")
        KS0IM002.KS0IM-CSTM-FEAT-CD[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX1];
        set KS0IM002.KS0IM-CSTM-FEAT-CD[KS0IW-IX2] skip;
        KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
      end
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
  end
  ;
  if (KS0IW02.KS0IW-DTY-RATE > " ")
    set KS0IM002.KS0IM-GEN-DTY-FIELD skip;
    KS0IM002.KS0IM-GEN-DTY-RATE = KS0IW02.KS0IW-DTY-RATE;
  end
  ;
  if (KS0IW02.KS0IW-QOTA-CAT-CD > " ")
    set KS0IM002.KS0IM-QOTA-CAT-FIELD skip;
    KS0IM002.KS0IM-QOTA-CAT-CD = KS0IW02.KS0IW-QOTA-CAT-CD;
    KS0IM002.KS0IM-QOTA-CAT-SDESC = KS0IW02.KS0IW-QOTA-CAT-DESC;
  end
  ;
  KS0IM002.KS0IM-REG-CD = KS0IW02.KS0IW-REG-CD;
  KS0IM002.KS0IM-REG-SDESC = KS0IW02.KS0IW-REG-SDESC;
  ;
  KS0IM002.KS0IM-HTS-NBR = KS0IW02.KS0IW-HTS-NBR; /* HTS number*/
  KS0IW01.KS0IW-HTS-NBR = " ";
  if (KS0IW02.KS0IW-HTS-NBR > " ")
    KS0IM002.KS0IM-TEAM-NBR = KS0IW02.KS0IW-TEAM-NBR;
    set KS0IM002.KS0IM-TEAM-NBR-FIELD skip;
    set KS0IM002.KS0IM-TEAM-NBR normal;
    if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y")
      set KS0IM002.KS0IM-TEAM-NBR bold;
    end
  end
  KS0IM002.KS0IM-RULE-NBR = KS0IW02.KS0IW-RULE-NBR; /* Rule number*/
  if (KS0IW02.KS0IW-RULE-NBR > " ")
    KS0IM002.KS0IM-RULE-DT = KS0IW02.KS0IW-RULE-DT; /* Rule date*/
    set KS0IM002.KS0IM-RULE-DT skip;
    set KS0IM002.KS0IM-DT-FIELD skip;
  else
    KS0IW02.KS0IW-RULE-DT = " ";
  end
  KS0IM002.KS0IM-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR; /* Experimental style number*/
  KS0IM002.KS0IM-SESN-CD = KS0IW02.KS0IW-XSECD; /* Season code*/
  if (KS0IW02.KS0IW-XSNYR > 0)
    KS0IM002.KS0IM-SESN-YR-RNG = KS0IW02.KS0IW-SESN-YEAR;
                                   /* Season year*/
  else
    KS0IM002.KS0IM-SESN-YR-RNG = 0; /* Season year*/
  end
  ;
  KS0IM002.KS0IM-KS-STY-NM[1] = KS0IW02.KS0IW-KS-STY-NM[1];
  KS0IM002.KS0IM-KS-STY-NM[2] = KS0IW02.KS0IW-KS-STY-NM[2];
  KS0IM002.KS0IM-STY-TYP-CD = KS0IW02.KS0IW-STY-TYP-CD;
  set KS0IM002.KS0IM-STY-TYP-DESC skip;
  KS0IM002.KS0IM-STY-TYP-DESC = KS0IW02.KS0IW-STY-TYP-DESC;
  KS0IM002.KS0IM-CUST-STYLE-SH-DESC = KS0IW02.KS0IW-KS-SHORT-STY-NM;
  KS0IM002.KS0IM-SPACT-CD = KS0IW02.KS0IW-SPACT-CD;
  KS0IM002.KS0IM-SPACT-ABRV = KS0IW02.KS0IW-SPACT-ABRV;
  KS0IM002.KS0IM-DIV-CD = KS0IW02.KS0IW-DIV-CD;
  KS0IM002.KS0IM-DIV-ABRV = KS0IW02.KS0IW-DIV-ABRV;
  KS0IM002.KS0IM-PROD-CAT-CD = KS0IW02.KS0IW-PROD-CAT-CD;
  KS0IM002.KS0IM-PROD-CAT-ABRV = KS0IW02.KS0IW-PROD-CAT-ABRV;
  KS0IM002.KS0IM-GNDR-AGE-CD = KS0IW02.KS0IW-GNDR-AGE-CD;
  KS0IM002.KS0IM-GNDR-AGE-ABRV = KS0IW02.KS0IW-GNDR-AGE-ABRV;
  KS0IM002.KS0IM-SILH-CD = KS0IW02.KS0IW-SILH-CD;
  KS0IM002.KS0IM-SILH-ABRV = KS0IW02.KS0IW-SILH-ABRV;
  KS0IM002.KS0IM-REG-CD = KS0IW02.KS0IW-REG-CD;
  KS0IM002.KS0IM-REG-SDESC = KS0IW02.KS0IW-REG-SDESC;
  set KS0IM002.KS0IM-SPACT-FIELD skip;
  set KS0IM002.KS0IM-SPACT-CD skip;
  set KS0IM002.KS0IM-SPACT-ABRV skip;
  set KS0IM002.KS0IM-DIV-FIELD skip;
  set KS0IM002.KS0IM-DIV-CD skip;
  set KS0IM002.KS0IM-DIV-ABRV skip;
  set KS0IM002.KS0IM-PROD-CAT-FIELD skip;
  set KS0IM002.KS0IM-PROD-CAT-CD skip;
  set KS0IM002.KS0IM-PROD-CAT-ABRV skip;
  set KS0IM002.KS0IM-GNDR-AGE-FIELD skip;
  set KS0IM002.KS0IM-GNDR-AGE-CD skip;
  set KS0IM002.KS0IM-GNDR-AGE-ABRV skip;
  set KS0IM002.KS0IM-SILH-FIELD skip;
  if (KS0IW00.KS0IW-SIL-OVERRIDE == "Y")
    set KS0IM002.KS0IM-SILH-CD bold;
  else
    set KS0IM002.KS0IM-SILH-CD normal;
  end
  set KS0IM002.KS0IM-SILH-ABRV skip;
  ;
  set KS0IM002.KS0IM-FCTY-FIELD skip;
  KS0IW00.KS0IW-IX2 = 1;
  while (KS0IW00.KS0IW-IX2 <= 12
   && KS0IW02.KS0IW-FACTORY[KS0IW-IX2] > " ")
    KS0IM002.KS0IM-FCTY-CD[KS0IW-IX2] = KS0IW02.KS0IW-FACTORY[KS0IW-IX2];
    set KS0IM002.KS0IM-FCTY-CD[KS0IW-IX2] skip;
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
  end
  if (KS0IM002.KS0IM-FCTY-CD[1] == " ")
    KS0IM002.KS0IM-FCTY-CD[1] = "N/A";
    set KS0IM002.KS0IM-FCTY-CD[1] skip;
  end
  ;
  KS0IM002.KS0IM-FABRIC-DESC[1] = KS0IW02.KS0IW-FABRIC-DESC[1];
  set KS0IM002.KS0IM-FABRIC-DESC[1] skip;
  KS0IM002.KS0IM-FABRIC-DESC[2] = KS0IW02.KS0IW-FABRIC-DESC[2];
  set KS0IM002.KS0IM-FABRIC-DESC[2] skip;
  KS0IM002.KS0IM-FABRIC-DESC[3] = KS0IW02.KS0IW-FABRIC-DESC[3];
  set KS0IM002.KS0IM-FABRIC-DESC[3] skip;
  ;
  KS0IM002.KS0IM-ORIG-CD[1] = KS0IW02.KS0IW-ORIG-CD[1]; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[1] skip;
  KS0IM002.KS0IM-ORIG-CD[2] = KS0IW02.KS0IW-ORIG-CD[2]; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[2] skip;
  KS0IM002.KS0IM-ORIG-CD[3] = KS0IW02.KS0IW-ORIG-CD[3]; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[3] skip;
  KS0IM002.KS0IM-ORIG-CD[4] = KS0IW02.KS0IW-ORIG-CD[4]; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[4] skip;
  KS0IM002.KS0IM-ORIG-CD[5] = KS0IW02.KS0IW-ORIG-CD[5]; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[5] skip;
  KS0IM002.KS0IM-ORIG-CD[6] = KS0IW02.KS0IW-ORIG-CD[6]; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[6] skip;
  ;
  KS0IM002.KS0IM-CATLG-PAGE-NBR = KS0IW02.KS0IW-CATLG-PAGE-NBR;
  ;
  /* ------------------------------------------------------------*/
  /* Go ahead and format map3 and map4 at this time.*/
  /* ------------------------------------------------------------*/
  KS0I-42100(); /* Format Map3*/
  KS0I-52100(); /* Format Map4*/
  ;
  ;
end // end KS0I-22200

// Format Aprl/Ftwr Add map
Function KS0I-22300()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM002 initial; /* Clear map 2*/
  set KS0IM003 initial; /* Clear map 3*/
  set KS0IM004 initial; /* Clear map 4*/
  KS0IW00.KS0IW-IX1 = 0; /* Clear return index*/
  KS0IM002.KS0IM-MAP-DESC = "ADD"; /* Map description*/
  KSWREC.XXXPRCNM = "22300"; /* Process name*/
  KSWREC.XXXMSGNO = 72; /* Please enter new product message*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW02.XGPCD == "02")
    KS0IM002.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
    KS0IM002.KS0IM-KS-STY-NM-FIELD = "NAME:";
    KS0IM002.KS0IM-DESC-FIELD = "COLOR:";
    KS0IM002.KS0IM-FABRIC-FIELD1 = "UPPER - SHELL  :";
    KS0IM002.KS0IM-FABRIC-FIELD2 = "        OVERLAY:";
    KS0IM002.KS0IM-FABRIC-FIELD3 = "LOWER - OUTSOLE:";
    KS0IM002.KS0IM-BUS-UNIT-CD = KS0IW02.XGPCD;
    set KS0IM002.KS0IM-FABRIC-FIELD1 skip;
    set KS0IM002.KS0IM-FABRIC-FIELD2 skip;
    set KS0IM002.KS0IM-FABRIC-FIELD3 skip;
    set KS0IM002.KS0IM-FABRIC-DESC[1] skip;
    set KS0IM002.KS0IM-FABRIC-DESC[2] skip;
    set KS0IM002.KS0IM-FABRIC-DESC[3] skip;
    set KS0IM002.KS0IM-ORIG-CD[1] skip;
    set KS0IM002.KS0IM-ORIG-CD[2] skip;
    set KS0IM002.KS0IM-ORIG-CD[3] skip;
    set KS0IM002.KS0IM-ORIG-CD[4] skip;
    set KS0IM002.KS0IM-ORIG-CD[5] skip;
    set KS0IM002.KS0IM-ORIG-CD[6] skip;
  else
    KS0IM002.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
    KS0IM002.KS0IM-KS-STY-NM-FIELD = "LINE:";
    KS0IM002.KS0IM-DESC-FIELD = " NAME:";
    KS0IM002.KS0IM-FABRIC-FIELD1 = "    FABRIC DESC:";
    KS0IM002.KS0IM-FABRIC-FIELD2 = "                ";
    KS0IM002.KS0IM-FABRIC-FIELD3 = "                ";
    KS0IM002.KS0IM-BUS-UNIT-CD = KS0IW02.XGPCD;
    set KS0IM002.KS0IM-FABRIC-FIELD1 skip;
    set KS0IM002.KS0IM-FABRIC-FIELD2 skip;
    set KS0IM002.KS0IM-FABRIC-FIELD3 skip;
  end
  ;
  ;
end // end KS0I-22300

// Check attention identifier
Function KS0I-23000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0IW00.KS0IW-SWR == "Y") /* Request for data*/
      set KS0IW02 empty; /* M002 display storage*/
    end
    ;
    KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
    KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (COMMAREA.CATOAP == "KS0K")
        KSWREC.XXXPRCNM = "23000"; /* Module identification*/
        converseLib.validationFailed(6); /* PA/PF key may not be used*/
        set KS0IM002.CATOAP cursor, bold; /* Highlight*/
      else
        ;
        KS0I-11100(); /* Purge any temporary storage*/
        ;
        XSKS-S0001(); /* Exit to another application*/
        ;
        KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
        ;
      end
    else
      ;
      KSWREC.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      set KS0IM002.CATOAP cursor, bold; /* Highlight*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0IM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      ;
      COMMAREA.CATOAP = "KS0A"; /* Xfer to Customs Menu*/
      ;
    end
    ;
    KS0I-11100(); /* Purge any temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF18 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "23000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (converseVar.eventKey is enter /* Enter was pressed*/
   || converseVar.eventKey is pf16  /* or PF16 was pressed*/
   || converseVar.eventKey is pf17  /* or PF17 was pressed*/
   || converseVar.eventKey is pf18) /* or PF18 was pressed*/
    if (KS0IW01.KS0IW-GPC == "02" /* Footwear GPC code*/
     && COMMAREA.CAALVL[2] == "N")
      KSWREC.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(41); /* Not authorized message*/
    end
    if (KS0IW01.KS0IW-GPC == "03" /* Apparel GPC code*/
     && COMMAREA.CAALVL[3] == "N")
      KSWREC.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(42); /* Not authorized message*/
    end
  end
  if (converseVar.eventKey is pf19) /* If PF19 pressed*/
    if (KS0IW01.KS0IW-GPC == "02" /* and footwear gpc*/
     && KS0IW00.KS0IW-FNC != "A") /* and not add function*/
      ;
    else
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
      ;
      exit stack; /* Exit to display map*/
    end
  end
  ;
  ;
end // end KS0I-23000

// Reset highlighted fields
Function KS0I-24000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-FNC != "I")
    set KS0IM002.KS0IM-BUS-UNIT-CD initialAttributes; /* GPC code*/
    set KS0IM002.KS0IM-SESN-CD initialAttributes; /* Season code*/
    set KS0IM002.KS0IM-SESN-YR-RNG initialAttributes; /* Season year range*/
    set KS0IM002.KS0IM-STY-NBR initialAttributes; /* Style code*/
    set KS0IM002.KS0IM-COLR-CD-ID initialAttributes; /* Color code*/
    set KS0IM002.KS0IM-DIM-CD initialAttributes; /* Dimension code*/
    set KS0IM002.KS0IM-XPRMT-STY-NBR initialAttributes; /* Experimental style number*/
    set KS0IM002.KS0IM-HTS-NBR initialAttributes; /* HS number*/
    set KS0IM002.KS0IM-RULE-NBR initialAttributes; /* Ruling number*/
    set KS0IM002.KS0IM-KS-STY-NM[1] initialAttributes; /* Style name*/
    set KS0IM002.KS0IM-KS-STY-NM[2] initialAttributes; /* Style name*/
    set KS0IM002.KS0IM-STY-TYP-CD initialAttributes; /* Style type code*/
    set KS0IM002.KS0IM-CUST-STYLE-SH-DESC initialAttributes;
                                   /* Customs style short desc*/
    set KS0IM002.KS0IM-FABRIC-DESC[1] initialAttributes; /* Fabric description*/
    set KS0IM002.KS0IM-FABRIC-DESC[2] initialAttributes; /* Fabric description*/
    set KS0IM002.KS0IM-FABRIC-DESC[3] initialAttributes; /* Fabric description*/
    set KS0IM002.KS0IM-ORIG-CD[1] initialAttributes; /* Origin code*/
    set KS0IM002.KS0IM-ORIG-CD[2] initialAttributes; /* Origin code*/
    set KS0IM002.KS0IM-ORIG-CD[3] initialAttributes; /* Origin code*/
    set KS0IM002.KS0IM-ORIG-CD[4] initialAttributes; /* Origin code*/
    set KS0IM002.KS0IM-ORIG-CD[5] initialAttributes; /* Origin code*/
    set KS0IM002.KS0IM-ORIG-CD[6] initialAttributes; /* Origin code*/
    set KS0IM002.KS0IM-CATLG-PAGE-NBR initialAttributes; /* Catalog page number*/
    if (KS0IW02.KS0IW-STAT != "SD")
      set KS0IM002.KS0IM-STAT initialAttributes; /* Product status code*/
    else
      set KS0IM002.KS0IM-STAT skip; /* Product status code*/
    end
  end
  if (KS0IW00.KS0IW-FNC == "D"
   || KS0IW00.KS0IW-FNC == "C")
    set KS0IM002.KS0IM-BUS-UNIT-CD skip; /* GPC code*/
  end
  if (KS0IM002.KS0IM-BUS-UNIT-CD == "02")
    set KS0IM002.KS0IM-FABRIC-DESC[1] skip;
    set KS0IM002.KS0IM-FABRIC-DESC[2] skip;
    set KS0IM002.KS0IM-FABRIC-DESC[3] skip;
    set KS0IM002.KS0IM-ORIG-CD[1] skip;
    set KS0IM002.KS0IM-ORIG-CD[2] skip;
    set KS0IM002.KS0IM-ORIG-CD[3] skip;
    set KS0IM002.KS0IM-ORIG-CD[4] skip;
    set KS0IM002.KS0IM-ORIG-CD[5] skip;
    set KS0IM002.KS0IM-ORIG-CD[6] skip;
    if (KS0IW00.KS0IW-FNC == "D"
     || KS0IW00.KS0IW-FNC == "C")
      set KS0IM002.KS0IM-STY-NBR skip; /* Style code*/
      set KS0IM002.KS0IM-COLR-CD-ID skip; /* Color code*/
      set KS0IM002.KS0IM-DIM-CD skip; /* Dimension code*/
      set KS0IM002.KS0IM-XPRMT-STY-NBR skip;
                                   /* Experimental style number*/
      set KS0IM002.KS0IM-SESN-CD skip;
      set KS0IM002.KS0IM-SESN-YR-RNG skip;
    end
  end
  ;
  KS0IW00.KS0IW-IXM = 1; /* Initialize line index*/
  ;
  set KS0IM002.CATOAP initialAttributes; /* TO application*/
  set KS0IM002.CAITEM initialAttributes; /* Application data*/
  ;
  if (KS0IM002.KS0IM-BUS-UNIT-CD == "?" /* if any ? entered*/
   || KS0IM002.KS0IM-SESN-CD == "?"     /* if ? in season code field*/
   || KS0IM002.KS0IM-STY-TYP-CD == "?"  /* if ? in style type field*/
   || KS0IM002.KS0IM-ORIG-CD[1] == "?"  /* If ? in origin country field*/
   || KS0IM002.KS0IM-ORIG-CD[2] == "?"  /* If ? in origin country field*/
   || KS0IM002.KS0IM-ORIG-CD[3] == "?"  /* If ? in origin country field*/
   || KS0IM002.KS0IM-ORIG-CD[4] == "?"  /* If ? in origin country field*/
   || KS0IM002.KS0IM-ORIG-CD[5] == "?"  /* If ? in origin country field*/
   || KS0IM002.KS0IM-ORIG-CD[6] == "?"  /* If ? in origin country field*/
   || KS0IM002.KS0IM-STAT == "?"        /* if ? in status code field*/
   || KS0IM002.KS0IM-SILH-CD == "?")    /* If ? in silhouette code field*/
    if (KS0IM002.KS0IM-BUS-UNIT-CD == "?") /* if any ? entered*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end
      ;
       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-BUS-UNIT-CD = XGPTBL.XGPCD[XX0XWPIX]; /* mv cd*/
      else
        KS0IM002.KS0IM-BUS-UNIT-CD = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-BUS-UNIT-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-SESN-CD == "?") /* if ? in season code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                SEASON      "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSE01(); /* perform season code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the season     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-SESN-CD = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      else
        KS0IM002.KS0IM-SESN-CD = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-SESN-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-STY-TYP-CD == "?") /* if ? in style type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "   CUSTOMS STYLE TYPE CODE  "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform style type window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the status     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-STY-TYP-CD = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0IM002.KS0IM-STY-TYP-CD = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-STY-TYP-CD cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-ORIG-CD[1] == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-ORIG-CD[1] = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      else
        KS0IM002.KS0IM-ORIG-CD[1] = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-ORIG-CD[1] cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-ORIG-CD[2] == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-ORIG-CD[2] = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      else
        KS0IM002.KS0IM-ORIG-CD[2] = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-ORIG-CD[2] cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-ORIG-CD[3] == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-ORIG-CD[3] = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      else
        KS0IM002.KS0IM-ORIG-CD[3] = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-ORIG-CD[3] cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-ORIG-CD[4] == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-ORIG-CD[4] = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      else
        KS0IM002.KS0IM-ORIG-CD[4] = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-ORIG-CD[4] cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-ORIG-CD[5] == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-ORIG-CD[5] = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      else
        KS0IM002.KS0IM-ORIG-CD[5] = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-ORIG-CD[5] cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-ORIG-CD[6] == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the problem    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-ORIG-CD[6] = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      else
        KS0IM002.KS0IM-ORIG-CD[6] = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-ORIG-CD[6] cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-STAT == "?") /* if ? in status code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "         CUSTOMS STATUS CODE"; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPR01(); /* perform status code window*/
      end
      ;
      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the status     **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-STAT = YPRTBL.YPR-PROD-STAT-CD[XX0XWPIX]; /* move code*/
      else
        KS0IM002.KS0IM-STAT = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-STAT cursor; /* Set cursor*/
    end
    ;
    if (KS0IM002.KS0IM-SILH-CD == "?") /* if any ? entered*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "       SILHOUETTE CODE       "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSU01(); /* perform silhouette window*/
      end
      ;
       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the silhouette **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM002.KS0IM-SILH-CD = XSUTBL.XSUCD[XX0XWPIX]; /* move code*/
        KS0IM002.KS0IM-SILH-ABRV = XSUTBL.XSUABRV[XX0XWPIX];
        KS0IW02.KS0IW-SILH-ABRV = XSUTBL.XSUABRV[XX0XWPIX];
      else
        KS0IM002.KS0IM-SILH-CD = " "; /* clear fields*/
        KS0IM002.KS0IM-SILH-ABRV = " "; /* clear fields*/
      end
      set KS0IM002.KS0IM-SILH-CD cursor; /* Set cursor*/
    end
    ;
    ;
    KS0IW00.KS0IW-SWR = "N"; /* Reset request for data switch*/
    KS0IW00.KS0IW-SWF = "N"; /* Reset format the map switch*/
    ;
    converseLib.clearScreen();
     /* Restore the original map*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0I-24000

// Verify data that was entered
Function KS0I-25000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
    set KS0IM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Perform standard Verify any Changed Data.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-25100(); /* Default status if not entered*/
  ;
  /* ------------------------------------------------------------*/
  /* Verify that Duplication rules are followed.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-FNC == "D") /* If duplicate requested*/
    if (KS0IM002.KS0IM-STY-NBR != KS0IW02.KS0IW-STY-NBR) /* If new style*/
      if (KS0IM002.KS0IM-COLR-CD-ID == "***" /* If multiple colors*/
       || KS0IM002.KS0IM-DIM-CD == "**")     /* or multiple dim cds*/
        ;
        KSWREC.XXXPRCNM = "25000"; /* Module identification*/
        set KS0IM002.KS0IM-COLR-CD-ID cursor, bold; /* Highlight*/
        set KS0IM002.KS0IM-DIM-CD bold; /* Highlight*/
        converseLib.validationFailed(82); /* Must enter unique colr/dim*/
        ;
      end
    end
  end
   /* IF KS0IW02.XGPCD EQ '02'         /* If footwear GPC*/
  if (VCPROD02.XGPCD == "02"   /* If footwear GPC*/
   && KS0IW00.KS0IW-FNC == "D" /* and duplicate function*/
   && KS0IM002.KS0IM-STY-NBR == KS0IW02.KS0IW-STY-NBR
   && KS0IM002.KS0IM-XPRMT-STY-NBR == KS0IW02.KS0IW-XPRMT-STY-NBR
   && KS0IM002.KS0IM-COLR-CD-ID == KS0IW02.SY2CLRID
   && KS0IM002.KS0IM-DIM-CD == KS0IW02.XDMCD
   && KS0IM002.KS0IM-STY-TYP-CD == KS0IW02.KS0IW-STY-TYP-CD)
    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
    set KS0IM002.KS0IM-STY-TYP-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(115); /* Must enter unique keys*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return; /* Exit to display map*/
  else
    KS0I-25200(); /* Verify the entered data*/
  end
  ;
  ;
end // end KS0I-25000

// Default status code field
Function KS0I-25100()
  /* ------------------------------------------------------------*/
  /* Default 'STATUS:' if not already entered by user.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-STAT == " ") /* If status blank*/
    if (KS0IM002.KS0IM-HTS-NBR == " ") /* If HS number not entered*/
      KS0IM002.KS0IM-STAT = "NC"; /* Set non-classified*/
    end
    if (KS0IM002.KS0IM-HTS-NBR > " " /* If HS number entered*/
     && KS0IM002.KS0IM-RULE-NBR == " ") /* and rule nbr not entered*/
      KS0IM002.KS0IM-STAT = "TC"; /* Set tentatively classified*/
    end
    if (KS0IM002.KS0IM-HTS-NBR > " " /* If HS number entered*/
     && KS0IM002.KS0IM-RULE-NBR > " ") /* and rule nbr entered*/
      KS0IM002.KS0IM-STAT = "BR"; /* Set binding ruling assigned*/
    end
  else
    if (KS0IM002.KS0IM-STAT == "BR") /* If binding ruling assigned*/
      if (KS0IM002.KS0IM-RULE-NBR == " ") /* If rule nbr not entered*/
        KS0IM002.KS0IM-STAT = "TC"; /* Set tentatively classified*/
        if (KS0IM002.KS0IM-HTS-NBR == " ") /* If HS number not entered*/
          KS0IM002.KS0IM-STAT = "NC";
        end
      end
    else
      if (KS0IM002.KS0IM-STAT == "TC" /* If tentatively classified*/
       || KS0IM002.KS0IM-STAT == "SB" /* or sent for bind rule*/
       || KS0IM002.KS0IM-STAT == "SP") /* or scheduled for preclass*/
        if (KS0IM002.KS0IM-RULE-NBR > " " /* If rule nbr entered*/
         && KS0IM002.KS0IM-HTS-NBR > " ") /* and HS number entered*/
          KS0IM002.KS0IM-STAT = "BR"; /* Set binding ruling assigned*/
        else
          if (KS0IM002.KS0IM-STAT == "TC"
           && KS0IM002.KS0IM-HTS-NBR == " ") /* If HS number not entered*/
            KS0IM002.KS0IM-STAT = "NC";
          end
        end
      else
        if (KS0IM002.KS0IM-STAT == "SD") /* If sched preclass and dropped*/
          if (KS0IM002.KS0IM-RULE-NBR > " " /* If rule nbr entered*/
           && KS0IM002.KS0IM-HTS-NBR > " ") /* and HS number entered*/
            KS0IM002.KS0IM-STAT = "DS"; /* Set dropped style*/
          end
        else
          if (KS0IM002.KS0IM-STAT == "NC") /* If not classified*/
            if (KS0IM002.KS0IM-HTS-NBR > " ") /* and HS number entered*/
              KS0IM002.KS0IM-STAT = "TC";
                                   /* Set tentatively classified*/
              if (KS0IM002.KS0IM-RULE-NBR > " ") /* If rule number entered*/
                KS0IM002.KS0IM-STAT = "BR";
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KS0I-25100

// Verify the entered data
Function KS0I-25200()
  /* ------------------------------------------------------------*/
  /* Verify the Footwear Silhouette code.*/
  /* ------------------------------------------------------------*/
  ;
   /* IF KS0IM002.KS0IM-BUS-UNIT-CD EQ '02'/* If footwear*/
  if (VCPROD02.XGPCD == "02"       /* If footwear*/
   && KS0IM002.KS0IM-SILH-CD > " " /* and silhouette entered*/
   && KS0IM002.KS0IM-SILH-CD != KS0IW02.KS0IW-SILH-CD)
    if (KS0IM002.KS0IM-SILH-CD in XSUTBL.XSUCD /* If code in table*/
     && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      KS0IW02.KS0IW-SILH-ABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
      KS0IM002.KS0IM-SILH-ABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
      if (KS0IM002.KS0IM-SILH-CD == PG2REC.XSUCD)
        KS0IW02.KS0IW-SILH-CD = " ";
        set KS0IM002.KS0IM-SILH-CD normal;
        KS0IW00.KS0IW-SIL-OVERRIDE = "N";
      else
        KS0IW02.KS0IW-SILH-CD = KS0IM002.KS0IM-SILH-CD;
        set KS0IM002.KS0IM-SILH-CD bold;
        KS0IW00.KS0IW-SIL-OVERRIDE = "Y";
      end
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0IM002.KS0IM-SILH-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(125); /* Field missing or invalid*/
      ;
    end
  else
    if (KS0IM002.KS0IM-SILH-CD == " " /* If silh cd blanked out*/
     && KS0IM002.KS0IM-SILH-CD != KS0IW02.KS0IW-SILH-CD)
      KS0IW02.KS0IW-SILH-CD = " ";
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Customs Product Status code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-STAT > " ") /* If status entered*/
    if (KS0IM002.KS0IM-STAT in YPRTBL.YPR-PROD-STAT-CD /* Code in table*/
     && YPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")      /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0IM002.KS0IM-STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(69); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IX2 = 6; /* Set index*/
  while (KS0IW00.KS0IW-IX2 > 0) /* Until end of origin codes*/
    if (KS0IM002.KS0IM-ORIG-CD[KS0IW-IX2] > " " /* If origin entered*/
     && KS0IW02.XGPCD != "02")                 
      if (KS0IM002.KS0IM-ORIG-CD[KS0IW-IX2] in XCTTBL.XCTCD /* Code in table*/
       && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")         /* and active status*/
        ;
      else
        ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
        ;
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0IM002.KS0IM-ORIG-CD[KS0IW-IX2] cursor, bold; /* Highlight*/
        converseLib.validationFailed(70); /* Field missing or invalid*/
        ;
      end
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 - 1; /* Decrement index*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Fabric Description entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-FABRIC-DESC[1] == " " /* If fabric desc not entered*/
   && VCPROD02.XGPCD != "02")             
    /* AND KS0IW02.XGPCD NE '02';*/
    KSWREC.XXXPRCNM = "25200"; /* Module identification*/
    set KS0IM002.KS0IM-FABRIC-DESC[1] cursor, bold; /* Highlight*/
    set KS0IM002.KS0IM-FABRIC-DESC[2] bold; /* Highlight*/
    set KS0IM002.KS0IM-FABRIC-DESC[3] bold; /* Highlight*/
    converseLib.validationFailed(74); /* Field missing or invalid*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style Short Description entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-CUST-STYLE-SH-DESC == " ") /* Short desc not entered*/
    KSWREC.XXXPRCNM = "25200"; /* Module identification*/
    set KS0IM002.KS0IM-CUST-STYLE-SH-DESC cursor, bold;
    converseLib.validationFailed(75); /* Field missing or invalid*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style Type code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-STY-TYP-CD > " ") /* Style type code entered*/
    if (KS0IM002.KS0IM-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD /* Code in table*/
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* and active status*/
      KS0IM002.KS0IM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0IM002.KS0IM-STY-TYP-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(76); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style Description entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-KS-STY-NM[1] == " ") /* If style name not entered*/
    KSWREC.XXXPRCNM = "25200"; /* Module identification*/
    set KS0IM002.KS0IM-KS-STY-NM[1] cursor, bold; /* Highlight*/
    set KS0IM002.KS0IM-KS-STY-NM[2] bold; /* Highlight*/
    converseLib.validationFailed(77); /* Field missing or invalid*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Ruling Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-RULE-NBR > " ") /* If rule nbr entered*/
    set VBDRUL01 empty; /* Clear record*/
    if (KS0IM002.KS0IM-BUS-UNIT-CD == "EQ")
      VBDRUL01.XGPCD = "02";
      VBDRUL01.KS-RULE-NBR = KS0IM002.KS0IM-RULE-NBR;
      KS0I-15302(); /* Select VBDRUL01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
        KS0IW00.KS0IW-SAV-EQUIP-GPC = VBDRUL01.XGPCD;
        KS0IW00.KS0IW-DATE-WORK = VBDRUL01.KS-RULE-DT;
                                   /* Move rule date*/
        KS0IW00.KS0IW-YY = KS0IW00.KS0IW-DATE-YR; /* Move year*/
        KS0IW00.KS0IW-MM = KS0IW00.KS0IW-DATE-MO; /* Move month*/
        KS0IW00.KS0IW-DD = KS0IW00.KS0IW-DATE-DAY; /* Move day*/
        KS0IM002.KS0IM-RULE-DT = KS0IW00.KS0IW-DATE;
                                   /* Move to map fld*/
        set KS0IM002.KS0IM-RULE-DT skip;
        set KS0IM002.KS0IM-DT-FIELD skip;
      else
        VBDRUL01.XGPCD = "03";
        VBDRUL01.KS-RULE-NBR = KS0IM002.KS0IM-RULE-NBR;
        KS0I-15302(); /* Select VBDRUL01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
          KS0IW00.KS0IW-SAV-EQUIP-GPC = VBDRUL01.XGPCD;
          KS0IW00.KS0IW-DATE-WORK = VBDRUL01.KS-RULE-DT;
                                   /* Move rule date*/
          KS0IW00.KS0IW-YY = KS0IW00.KS0IW-DATE-YR; /* Move year*/
          KS0IW00.KS0IW-MM = KS0IW00.KS0IW-DATE-MO; /* Move month*/
          KS0IW00.KS0IW-DD = KS0IW00.KS0IW-DATE-DAY; /* Move day*/
          KS0IM002.KS0IM-RULE-DT = KS0IW00.KS0IW-DATE;
                                   /* Move to map fld*/
          set KS0IM002.KS0IM-RULE-DT skip;
          set KS0IM002.KS0IM-DT-FIELD skip;
        else
          KSWREC.XXXPRCNM = "25200"; /* Module identification*/
          set KS0IM002.KS0IM-RULE-NBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(32); /* Field missing or invalid*/
        end
      end
    else
      VBDRUL01.XGPCD = KS0IM002.KS0IM-BUS-UNIT-CD;
      VBDRUL01.KS-RULE-NBR = KS0IM002.KS0IM-RULE-NBR;
      KS0I-15302(); /* Select VBDRUL01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
        KS0IW00.KS0IW-SAV-EQUIP-GPC = VBDRUL01.XGPCD;
        KS0IW00.KS0IW-DATE-WORK = VBDRUL01.KS-RULE-DT;
                                   /* Move rule date*/
        KS0IW00.KS0IW-YY = KS0IW00.KS0IW-DATE-YR; /* Move year*/
        KS0IW00.KS0IW-MM = KS0IW00.KS0IW-DATE-MO; /* Move month*/
        KS0IW00.KS0IW-DD = KS0IW00.KS0IW-DATE-DAY; /* Move day*/
        KS0IM002.KS0IM-RULE-DT = KS0IW00.KS0IW-DATE;
                                   /* Move to map fld*/
        set KS0IM002.KS0IM-RULE-DT skip;
        set KS0IM002.KS0IM-DT-FIELD skip;
      else
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0IM002.KS0IM-RULE-NBR cursor, bold; /* Highlight*/
        converseLib.validationFailed(32); /* Field missing or invalid*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Dimension code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-DIM-CD > " " /* Dimension code entered*/
   && KS0IM002.KS0IM-DIM-CD != "**") /* and not multiple dim codes*/
    if (KS0IM002.KS0IM-DIM-CD in XDMTBL.XDMCD /* Code in table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0IM002.KS0IM-DIM-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(78); /* Field missing or invalid*/
      ;
    end
  else
    ;
    if (KS0IM002.KS0IM-DIM-CD == " ") /* Dimension code not entered*/
      KS0IM002.KS0IM-DIM-CD = "00"; /* Default dimension code*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Color Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-COLR-CD-ID == " ") /* Color code not entered*/
    /* IF KS0IW02.XGPCD EQ '02';*/
    if (VCPROD02.XGPCD == "02")
      KS0IM002.KS0IM-COLR-CD-ID = "00";
    else
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0IM002.KS0IM-COLR-CD-ID cursor, bold;
      converseLib.validationFailed(79); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-STY-NBR > " ") /* If style entered*/
    /* IF KS0IM002.KS0IM-BUS-UNIT-CD EQ '02';/* If footwear GPC*/
    if (VCPROD02.XGPCD == "02") /* If footwear GPC*/
      set PG2REC empty; /* Clear record*/
      PG2REC.XGPCD = VCPROD02.XGPCD; /* GPC code*/
      /* MOVE KS0IM002.KS0IM-BUS-UNIT-CD TO PG2REC.XGPCD;/* GPC code*/
      PG2REC.SY1STNBR = KS0IM002.KS0IM-STY-NBR; /* Style nbr*/
      KS0I-15303(); /* Select VSYCLR01 set*/
      KS0I-15304(); /* Fetch  VSYCLR01 row*/
      ;
      if (SQLCA.VAGen_SQLCODE != 0) /* If style not found*/
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0IM002.KS0IM-STY-NBR cursor, bold;
        converseLib.validationFailed(80); /* Field missing or invalid*/
      end
      ;
      KS0I-15305(); /* Close  VSYCLR01 set*/
      ;
    else
      ;
      if (KS0IM002.KS0IM-COLR-CD-ID == "***") /* If multiple colors*/
      /* Next sentence*/
      else
        if (KS0IM002.KS0IM-COLR-CD-ID > " ") /* If color entered*/
          set PG2REC empty; /* Clear record*/
          PG2REC.XGPCD = VCPROD02.XGPCD; /* GPC code*/
          /* MOVE KS0IM002.KS0IM-BUS-UNIT-CD TO PG2REC.XGPCD;/* GPC code*/
          PG2REC.SY1STNBR = KS0IM002.KS0IM-STY-NBR; /* Style nbr*/
          KS0I-15303(); /* Select VSYCLR01 set*/
          KS0I-15304(); /* Fetch  VSYCLR01 row*/
          ;
          if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
            KS0IW02.SY1SSTNM = PG2REC.SY1SSTNM; /* Move description*/
            KS0IW02.SY2CLRDS = PG2REC.SY2CLRDS; /* Move description*/
          else
            KSWREC.XXXPRCNM = "25200"; /* Module identification*/
            set KS0IM002.KS0IM-STY-NBR cursor, bold;
            set KS0IM002.KS0IM-COLR-CD-ID bold;
            converseLib.validationFailed(80); /* Field missing or invalid*/
          end
          ;
          KS0I-15305(); /* Close  VSYCLR01 set*/
          ;
        end
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the HS Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-HTS-NBR > " ") /* If HS number entered*/
    KS0IW01.KS0IW-HTS-NUMBER = KS0IM002.KS0IM-HTS-NBR;
    KS0IW00.KS0IW-HTS-FORMAT-SW = "Y";
    KS0I-15309(); /* Verify HS format*/
    if (KS0IW00.KS0IW-HTS-FORMAT-SW == "N") /* If HS format incorrect*/
      set KS0IM002.KS0IM-HTS-NBR cursor, bold; /* Highlight*/
    end
    if (KS0IM002.KS0IM-HTS-NBR != KS0IW02.KS0IW-HTS-NBR)
      KS0IW02.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
      KS0IW00.KS0IW-HTS-NBR-WORK = KS0IM002.KS0IM-HTS-NBR;
      KS0IW00.KS0IW-NEW-HS-SWITCH = "Y";
      ;
      if (KS0IW00.KS0IW-HTS-FORMAT-SW == "Y") /* If HS number OK*/
        KS0IW01.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
        if (KS0IW01.KS0IW-HTS-CPTR-CD > " ") /* If chapter code exists*/
          KS0I-25201(); /* ; /* Select VHSCHP01 row*/
        end
        if (SQLCA.VAGen_SQLCODE == 0 /* If chapter code OK*/
         && KS0IW01.KS0IW-HTS-HDG-CD > " ") /* and heading exists*/
          KS0I-25202(); /* ; /* Select VHSHDG01 row*/
          if (SQLCA.VAGen_SQLCODE == 0 /* If heading code OK*/
           && KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
                                   /* and 1st subheading exists*/
            if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
                                   /* and 2nd subheading exists*/
              KS0I-25203(); /* Select VHSSHD01 row*/
              if (SQLCA.VAGen_SQLCODE == 0) /* If subheading code OK*/
                if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
                 || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
                  KS0IW01.KS0IW-HTS-2ND-SHDG-CD = KS0IW00.KS0IW-HTS-2ND-SHDG-2;
                  KS0I-25203();
                  KS0IW01.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
                  if (SQLCA.VAGen_SQLCODE == 0) /* If entire HS number OK*/
                    KS0I-11235(); /* Format general duty field*/
                  else
                    if (SQLCA.VAGen_SQLCODE == 100) /* If subheading code not OK*/
                      KSWREC.XXXPRCNM = "25200";
                                   /* Module identification*/
                      KS0I-25204(); /* Process Error Messages*/
                    end
                  end
                else
                  if (KS0IW01.KS0IW-HTS-STAT-CD > " ")
                                   /* and status code exists*/
                    KS0I-11234(); /* Select VHSNBR01 row*/
                    if (SQLCA.VAGen_SQLCODE == 0) /* If entire HS number OK*/
                      KS0I-11235(); /* Format general duty field*/
                    else
                      if (SQLCA.VAGen_SQLCODE == 100) /* If subheading code not OK*/
                        KSWREC.XXXPRCNM = "25200";
                                   /* Module identification*/
                        KS0I-25204(); /* Process Error Messages*/
                      end
                    end
                  end
                end
              else
                if (SQLCA.VAGen_SQLCODE == 100) /* If subheading code not OK*/
                  KSWREC.XXXPRCNM = "25200"; /* Module identification*/
                  KS0I-25204(); /* Process Error Messages*/
                end
              end
            else
              KSWREC.XXXPRCNM = "25200"; /* Module identification*/
              KS0I-25204(); /* Process Error Messages*/
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* If heading doesn't exist*/
              KSWREC.XXXPRCNM = "25200"; /* Module identification*/
              KS0I-25204(); /* Process Error Messages*/
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* If chapter doesn't exist*/
            KSWREC.XXXPRCNM = "25200"; /* Module identification*/
            KS0I-25204(); /* Process Error Messages*/
          end
        end
      end
      KS0IW01.KS0IW-HTS-NBR = " ";
      if (VHSCHP01.XXXSTAT == "I"
       || VHSHDG01.XXXSTAT == "I"
       || VHSSHD01.XXXSTAT == "I"
       || VHSNBR01.XXXSTAT == "I")
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        KS0I-25204(); /* Process Error Messages*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Team Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-TEAM-NBR > " " /* If team nbr entered*/
   && KS0IM002.KS0IM-TEAM-NBR != KS0IW02.KS0IW-TEAM-NBR)
    set VCTEAM01 empty; /* Clear record*/
    VCTEAM01.KS-TEAM-CD = KS0IM002.KS0IM-TEAM-NBR;
    KS0I-35201(); /* Select VCTEAM01 row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* team nbr exists*/
      if (VCTEAM01.KS-TEAM-CD == VHSNBR01.KS-TEAM-CD)
        KS0IW02.KS0IW-TEAM-NBR = " ";
        set KS0IM002.KS0IM-TEAM-NBR normal;
        KS0IW00.KS0IW-TEAM-OVERRIDE = "N";
      else
        KS0IW02.KS0IW-TEAM-NBR = KS0IM002.KS0IM-TEAM-NBR;
        set KS0IM002.KS0IM-TEAM-NBR bold;
        KS0IW00.KS0IW-TEAM-OVERRIDE = "Y";
      end
    else
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0IM002.KS0IM-TEAM-NBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(20); /* Field missing or invalid*/
    end
  else
    if (KS0IM002.KS0IM-TEAM-NBR == " " /* If team nbr blanked out*/
     && KS0IM002.KS0IM-TEAM-NBR != KS0IW02.KS0IW-TEAM-NBR)
      KS0IW02.KS0IW-TEAM-NBR = " ";
    end
  end
  if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y")
    set KS0IM002.KS0IM-TEAM-NBR bold;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Year range entered.*/
  /* ------------------------------------------------------------*/
  ;
   /* --------------- y2k out begin --------------*/
   /* IF KS0IM002.KS0IM-SESN-YR-RNG NE 0;/* If season year entered*/
   /* IF KS0IM002.KS0IM-SESN-YR-RNG GE '00'*/
     /* AND KS0IM002.KS0IM-SESN-YR-RNG LE '99';*/
   /* --------------- y2k out end ----------------*/
   /* --------------- y2k in  begin --------------*/
  if (KS0IM002.KS0IM-SESN-YR-RNG > "0") /* If season year entered*/
    if (KS0IM002.KS0IM-SESN-YR-RNG >= "00"
     && KS0IM002.KS0IM-SESN-YR-RNG <= "99")
      /* --------------- y2k in end -----------------*/
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0IM002.KS0IM-SESN-YR-RNG cursor, bold; /* Highlight*/
      converseLib.validationFailed(26); /* Field missing or invalid*/
    end
  else
    /* IF KS0IM002.KS0IM-BUS-UNIT-CD NE '02';/* and gpc ne 02*/
    if (VCPROD02.XGPCD != "02") /* and gpc ne 02*/
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0IM002.KS0IM-SESN-YR-RNG cursor, bold; /* Highlight*/
      converseLib.validationFailed(26); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-SESN-CD > " ") /* Season code entered*/
    if (KS0IM002.KS0IM-SESN-CD in XSETBL.XSECD /* Code in table*/
     && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
    /* Next Sentence*/
    else
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      KSWREC.XXXPRCNM = "25200"; /* Module identification*/
      set KS0IM002.KS0IM-SESN-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(27); /* Field missing or invalid*/
    end
  else
    KSWREC.XXXPRCNM = "25200"; /* Module identification*/
    set KS0IM002.KS0IM-SESN-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(27); /* Field missing or invalid*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style or the Experimental Style entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-STY-NBR > " " /* If style entered*/
   || KS0IM002.KS0IM-XPRMT-STY-NBR > " ") /* or experimental sty entered*/
    /* Next sentence*/
  else
    KSWREC.XXXPRCNM = "25200"; /* Module identification*/
    set KS0IM002.KS0IM-STY-NBR cursor, bold;
    set KS0IM002.KS0IM-XPRMT-STY-NBR bold;
    converseLib.validationFailed(81); /* Field missing or invalid*/
  end
  /* ------------------------------------------------------------*/
  /* Verify the GPC Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-BUS-UNIT-CD > " ") /* If GPC entered*/
    if (KS0IM002.KS0IM-BUS-UNIT-CD == "EQ")
      if (KS0IW00.KS0IW-SAV-EQUIP-GPC in XGPTBL.XGPCD
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
   /*  */
      else
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0IM002.KS0IM-BUS-UNIT-CD cursor, bold;
        converseLib.validationFailed(28); /* Field missing or invalid*/
      end
    else
      if (KS0IM002.KS0IM-BUS-UNIT-CD in XGPTBL.XGPCD /* Code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")  /* and active status*/
     /* Next sentence*/
      else
        KSWREC.XXXPRCNM = "25200"; /* Module identification*/
        set KS0IM002.KS0IM-BUS-UNIT-CD cursor, bold;
        converseLib.validationFailed(28); /* Field missing or invalid*/
      end
    end
  else
    KSWREC.XXXPRCNM = "25200"; /* Module identification*/
    set KS0IM002.KS0IM-BUS-UNIT-CD cursor, bold;
    converseLib.validationFailed(28); /* Field missing or invalid*/
  end
  ;
  ;
end // end KS0I-25200

// Select VHSCHP01 row
Function KS0I-25201()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSCHP01 empty; /* Clear row storage area*/
  ;
  VHSCHP01.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD; /* Chapter cd*/
  ;
  try
    call "IO6080" ("S ", SQLCA, VHSCHP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "25201"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSCHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSCHP01.VHSCHP01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-25201

// Select VHSHDG01 row
Function KS0I-25202()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* Clear row storage area*/
  ;
  VHSHDG01.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD; /* Chapter cd*/
  VHSHDG01.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD; /* Chapter hdg*/
  ;
  try
    call "IO6100" ("S ", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "25202"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSHDG01.VHSHDG01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-25202

// Select VHSSHD01 row
Function KS0I-25203()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSSHD01 empty; /* Clear row storage area*/
  ;
  VHSSHD01.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD; /* Chapter cd*/
  VHSSHD01.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD; /* Chapter hdg*/
  VHSSHD01.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
  VHSSHD01.KS-HTS-2ND-SHDG-CD = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
  ;
  try
    call "IO6110" ("S ", SQLCA, VHSSHD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "25203"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSSHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSSHD01.VHSSHD01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-25203

// Process HS Error Messages
Function KS0I-25204()
  /* ------------------------------------------------------------*/
  /* Process the HS Number Error Messages.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM002.KS0IM-HTS-NBR cursor, bold; /* Highlight*/
  ;
  if (converseVar.eventKey is enter)
    if (VHSCHP01.XXXSTAT == "I"
     || VHSHDG01.XXXSTAT == "I"
     || VHSSHD01.XXXSTAT == "I"
     || VHSNBR01.XXXSTAT == "I")
      converseLib.validationFailed(133);
      VHSCHP01.XXXSTAT = " ";
      VHSHDG01.XXXSTAT = " ";
      VHSSHD01.XXXSTAT = " ";
      VHSNBR01.XXXSTAT = " ";
    else
      converseLib.validationFailed(93);
                                  /* Warning press enter to continue*/
    end
  else
    if (converseVar.eventKey is pf16)
      if (VHSCHP01.XXXSTAT == "I"
       || VHSHDG01.XXXSTAT == "I"
       || VHSSHD01.XXXSTAT == "I"
       || VHSNBR01.XXXSTAT == "I")
        converseLib.validationFailed(134);
        VHSCHP01.XXXSTAT = " ";
        VHSHDG01.XXXSTAT = " ";
        VHSSHD01.XXXSTAT = " ";
        VHSNBR01.XXXSTAT = " ";
      else
        converseLib.validationFailed(94);
                                  /* Warning press PF16 to continue*/
      end
    else
      converseLib.validationFailed(50);
                                  /* Field is missing or invalid*/
    end
  end
  ;
  ;
end // end KS0I-25204

// Process valid input request
Function KS0I-26000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If enter was pressed and no errors and add function:*/
  /* Check to see if product already exists.  If not,*/
  /* add rows to data base.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter /* Enter pressed*/
   || converseVar.eventKey is pf16) /* or HS assignment map*/
    if (converseVar.validationMsgNum == 0 /* If no errors*/
     && KS0IW00.KS0IW-FNC == "A")         /* and add function requested*/
      set VCPROD02 empty; /* Clear record*/
      VCPROD02.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
      KS0I-26100(); /* Select unique VCPROD02 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If product already exists*/
        KSWREC.XXXPRCNM = "26000"; /* Process name*/
        converseLib.validationFailed(83); /* Product is a duplicate message*/
        KS0IW00.KS0IW-SWR = "N"; /* do not request data*/
        KS0IW00.KS0IW-SWF = "N"; /* do not format map*/
        KS0IW00.KS0IW-SWD = "2"; /* Map to be displayed switch*/
        return; /* return*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If product does not exist*/
          if (KS0IW00.KS0IW-MAP4-CHANGED == "Y"
           || KS0IW02.KS0IW-MAP2-TEXT == 0)
            KS0IW00.KS0IW-CTL-FUNC = "T";
            KS0I-26200(); /* Get next txt-nbr from VKSCTL01*/
            VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
            KS0I-26300(); /* Add VKSTXT01 rows process*/
          else
            VCPROD02.KS-TXT-NBR = KS0IW02.KS0IW-MAP2-TEXT;
          end
          if (KS0IM003.KS0IM-PRBM-CD[1] > " ") /* If problems exist*/
            if (KS0IW00.KS0IW-MAP3-CHANGED == "Y"
             || KS0IW02.KS0IW-MAP2-PRBM == 0)
              KS0IW00.KS0IW-CTL-FUNC = "P";
              KS0I-26200(); /* Get next prbm-nbr from VKSCTL01*/
              VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
              KS0I-26400(); /* Add VCPROB01 rows process*/
            else
              VCPROD02.KS-PRBM-NBR = KS0IW02.KS0IW-MAP2-PRBM;
            end
          end
          KS0I-26500(); /* Add VCPROD02 row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Row added successfully*/
            KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
            KS0IW00.KS0IW-VCPROD02-ADDED = "Y"; /* Row added switch*/
            KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
            KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
            KS0I-26700(); /* Write VKSAUD01 rows*/
            if (SQLCA.VAGen_SQLCODE != 0) /* Row not added*/
              converseLib.validationFailed(11); /* Data in use message*/
              KSWREC.XXXPRCNM = "26000";
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* Reset all DB modifications*/
              return; /* Return to previous process*/
            end
          else
            KS0IW00.KS0IW-VCPROD02-ADDED = "N";
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* Reset all DB modifications*/
            return; /* Return to previous process*/
          end
          ;
        end
      end
    else
      if (converseVar.validationMsgNum == 0 /* If no errors*/
       && KS0IW00.KS0IW-FNC == "D")         /* and duplicate function requested*/
        if (KS0IM002.KS0IM-STY-NBR == KS0IW02.KS0IW-STY-NBR
         && KS0IM002.KS0IM-COLR-CD-ID != KS0IW02.SY2CLRID
         && KS0IM002.KS0IM-COLR-CD-ID != "***"
         && KS0IW00.KS0IW-MAP3-CHANGED != "Y"
         && KS0IW00.KS0IW-MAP4-CHANGED != "Y"
         && KS0IM002.KS0IM-DIM-CD == KS0IW02.XDMCD
         && KS0IM002.KS0IM-SESN-CD == KS0IW02.KS0IW-XSECD
         && KS0IM002.KS0IM-XPRMT-STY-NBR == KS0IW02.KS0IW-XPRMT-STY-NBR
         && KS0IM002.KS0IM-HTS-NBR == KS0IW02.KS0IW-HTS-NBR
         && KS0IM002.KS0IM-RULE-NBR == KS0IW02.KS0IW-RULE-NBR
         && KS0IM002.KS0IM-KS-STY-NM[1] == KS0IW02.KS0IW-KS-STY-NM[1]
         && KS0IM002.KS0IM-KS-STY-NM[2] == KS0IW02.KS0IW-KS-STY-NM[2]
         && KS0IM002.KS0IM-STY-TYP-CD == KS0IW02.KS0IW-STY-TYP-CD
         && KS0IM002.KS0IM-FABRIC-DESC[1] == KS0IW02.KS0IW-FABRIC-DESC[1]
        
         && KS0IM002.KS0IM-FABRIC-DESC[2] == KS0IW02.KS0IW-FABRIC-DESC[2]
        
         && KS0IM002.KS0IM-FABRIC-DESC[3] == KS0IW02.KS0IW-FABRIC-DESC[3]
        
         && KS0IM002.KS0IM-ORIG-CD[1] == KS0IW02.KS0IW-ORIG-CD[1]
         && KS0IM002.KS0IM-ORIG-CD[2] == KS0IW02.KS0IW-ORIG-CD[2]
         && KS0IM002.KS0IM-ORIG-CD[3] == KS0IW02.KS0IW-ORIG-CD[3]
         && KS0IM002.KS0IM-ORIG-CD[4] == KS0IW02.KS0IW-ORIG-CD[4]
         && KS0IM002.KS0IM-STAT == KS0IW02.KS0IW-STAT)
          if (KS0IM002.KS0IM-SESN-YR-RNG == KS0IW02.KS0IW-SESN-YEAR
           && KS0IW02.KS0IW-SESN-YEAR != 0)
            KS0I-26800(); /* Check and add CPROD row*/
          else
            if (KS0IM002.KS0IM-SESN-YR-RNG == 0
             && KS0IW02.KS0IW-SESN-YEAR == 0)
              KS0I-26800(); /* Check and add CPROD row*/
            else
              KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
              if (KS0IW00.KS0IW-MAP4-CHANGED == "Y"
               || KS0IW02.KS0IW-MAP2-TEXT == 
              KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1])
                KS0IW00.KS0IW-CTL-FUNC = "T";
                KS0I-26200(); /* Get next txt-nbr from VKSCTL01*/
                VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
                KS0I-26300(); /* Add VKSTXT01 rows process*/
              end
              if (KS0IW03.KS0IW-MAP3-PRBM[1] > " ") /* If problems exist*/
                if (KS0IW00.KS0IW-MAP3-CHANGED == "Y"
                 || KS0IW02.KS0IW-MAP2-PRBM == 
                KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1])
                  KS0IW00.KS0IW-CTL-FUNC = "P";
                  KS0I-26200(); /* Get next prbm-nbr from VKSCTL01*/
                  VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
                  KS0I-26400(); /* Add VCPROB01 rows process*/
                end
              end
              if (KS0IM002.KS0IM-COLR-CD-ID == "***") /* If multiple colors*/
                KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
                KS0I-26600(); /* Move color code array*/
              else
                KS0IW02.KS0IW-COLOR-TABLE = " "; /* Clear color table*/
                KS0IW02.KS0IW-COLOR[1] = KS0IM002.KS0IM-COLR-CD-ID;
              end
              KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
              XX0XS01(); /* Get current date/time*/
              while (KS0IW02.KS0IW-COLOR[KS0IW-IX2] > " " /* Color exists*/
               || KS0IW00.KS0IW-IX2 == 1) /* or first time*/
                VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX2];
                KS0I-26100(); /* Select unique VCPROD02 row*/
                if (SQLCA.VAGen_SQLCODE == 0) /* Row already exists*/
                  KS0IW00.KS0IW-VCPROD02-DUP = "N";
                  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                  sysLib.rollback();
                  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                   /* Reset all DB modifications*/
                  converseLib.validationFailed(83); /* Product is a duplicate message*/
                  KS0IW00.KS0IW-SWR = "N"; /* do not request data*/
                  KS0IW00.KS0IW-SWF = "N"; /* do not format map*/
                  KS0IW00.KS0IW-SWD = "2";
                                   /* Map to be displayed switch*/
                  return; /* Return to previous process*/
                else
                  KS0I-26500(); /* Add VCPROD02 row*/
                  KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
                  KS0IW00.KS0IW-VCPROD02-DUP = "Y";
                                   /* Row added switch*/
                  KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                  KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
                  KS0I-26700(); /* Write VKSAUD01 rows*/
                  if (SQLCA.VAGen_SQLCODE != 0) /* Row not added*/
                    converseLib.validationFailed(11); /* Data in use message*/
                    KSWREC.XXXPRCNM = "26000";
                    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                    sysLib.rollback();
                    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                     /* Reset all DB modifications*/
                    return; /* Return to previous process*/
                  end
                end
                KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
                                   /* Increment index*/
              end
              ;
            end
          end
        else
          KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
          if (KS0IW00.KS0IW-MAP4-CHANGED == "Y"
           || KS0IW02.KS0IW-MAP2-TEXT == 
          KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1])
            KS0IW00.KS0IW-CTL-FUNC = "T";
            KS0I-26200(); /* Get next txt-nbr from VKSCTL01*/
            VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
            KS0I-26300(); /* Add VKSTXT01 rows process*/
          end
          if (KS0IW03.KS0IW-MAP3-PRBM[1] > " ") /* If problems exist*/
            if (KS0IW00.KS0IW-MAP3-CHANGED == "Y"
             || KS0IW02.KS0IW-MAP2-PRBM == 
            KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1])
              KS0IW00.KS0IW-CTL-FUNC = "P";
              KS0I-26200(); /* Get next prbm-nbr from VKSCTL01*/
              VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
              KS0I-26400(); /* Add VCPROB01 rows process*/
            end
          end
          if (KS0IM002.KS0IM-COLR-CD-ID == "***") /* If multiple colors*/
            KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
            KS0I-26600(); /* Move color code array*/
          else
            KS0IW02.KS0IW-COLOR-TABLE = " "; /* Clear color table*/
            KS0IW02.KS0IW-COLOR[1] = KS0IM002.KS0IM-COLR-CD-ID;
          end
          KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
          XX0XS01(); /* Get current date/time*/
          while (KS0IW02.KS0IW-COLOR[KS0IW-IX2] > " " /* Color exists*/
           || KS0IW00.KS0IW-IX2 == 1) /* or first time*/
            VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX2];
            KS0I-26100(); /* Select unique VCPROD02 row*/
            if (SQLCA.VAGen_SQLCODE == 0) /* Row already exists*/
              KS0IW00.KS0IW-VCPROD02-DUP = "N";
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* Reset all DB modifications*/
              converseLib.validationFailed(83); /* Product is a duplicate message*/
              KS0IW00.KS0IW-SWR = "N"; /* do not request data*/
              KS0IW00.KS0IW-SWF = "N"; /* do not format map*/
              KS0IW00.KS0IW-SWD = "2"; /* Map to be displayed switch*/
              return; /* Return to previous process*/
            else
              KS0I-26500(); /* Add VCPROD02 row*/
              KS0I-36001(); /* Update VCPROD03*/
              KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
              KS0IW00.KS0IW-VCPROD02-DUP = "Y"; /* Row added switch*/
              KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
              KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
              KS0I-26700(); /* Write VKSAUD01 rows*/
              if (SQLCA.VAGen_SQLCODE != 0) /* Row not added*/
                converseLib.validationFailed(11); /* Data in use message*/
                KSWREC.XXXPRCNM = "26000";
                VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                sysLib.rollback();
                VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                 /* Reset all DB modifications*/
                return; /* Return to previous process*/
              end
            end
            KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
          end
          ;
        end
      end
      ;
    end
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 pressed*/
    ;
    if (KS0IW00.KS0IW-REFORMAT-MAP1 == "N"
     && KSWREC.CAUSERA == 0)
      KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
    else
      KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
    end
    ;
    KS0IW00.KS0IW-SWD = "1"; /* Map switch*/
    converseLib.validationFailed(0); /* Clear message file*/
    KS0IW00.KS0IW-SAV = KS0IW00.KS0IW-SAV + 1;
    ;
  end
  if (converseVar.eventKey is pf16) /* PF16 pressed*/
    ;
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      ;
      KSWREC.KSW-CTL-FLD = KS0IW00.KS0IW-CTL-FLD; /* Pass control fld*/
      KSWREC.KSW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
      COMMAREA.CATOAP = "KS0J"; /* Set destination application*/
      if (KS0IM002.KS0IM-SESN-YR-RNG >= 0
       && KS0IM002.KS0IM-SESN-YR-RNG <= 99)
        KS0IW02.KS0IW-SESN-YEAR = KS0IM002.KS0IM-SESN-YR-RNG;
        if (KS0IM002.KS0IM-SESN-YR-RNG > 65)
          KS0IW02.KS0IW-SESN-CENTURY = 19;
        else
          KS0IW02.KS0IW-SESN-CENTURY = 20;
        end
      else
        KS0IW02.KS0IW-XSNYR = 0;
      end
      KSWREC.XSNYR = KS0IW02.KS0IW-XSNYR; /* Move map to kswrec*/
      KSWREC.XSECD = KS0IM002.KS0IM-SESN-CD;
      KSWREC.XGPCD = KS0IM002.KS0IM-BUS-UNIT-CD;
      KSWREC.SY1STNBR = KS0IM002.KS0IM-STY-NBR;
      KSWREC.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
      KSWREC.XDMCD = KS0IM002.KS0IM-DIM-CD;
      KSWREC.KS-XPRMT-STY-NBR = KS0IM002.KS0IM-XPRMT-STY-NBR;
      KSWREC.KS-STY-NM[1] = KS0IM002.KS0IM-KS-STY-NM[1];
      KSWREC.KS-STY-NM[2] = KS0IM002.KS0IM-KS-STY-NM[2];
      KSWREC.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD;
      KSWREC.KS-TXT[1] = KS0IM002.KS0IM-FABRIC-DESC[1];
      KSWREC.KS-TXT[2] = KS0IM002.KS0IM-FABRIC-DESC[2];
      KSWREC.KS-TXT[3] = KS0IM002.KS0IM-FABRIC-DESC[3];
      KS0IW01.KS0IW-HTS-NUMBER = KS0IM002.KS0IM-HTS-NBR;
      if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
       || KS0IW01.KS0IW-HTS-BYTE[11] == " "
       || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
        KS0IW00.KS0IW-HTS-NBR-WORK = KS0IM002.KS0IM-HTS-NBR;
        KSWREC.KS-HTS-CPTR-CD = KS0IW00.KS0IW-HTS-CPTR;
        KSWREC.KS-HTS-HDG-CD = KS0IW00.KS0IW-HTS-HDG;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW00.KS0IW-HTS-1ST-SHDG;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW00.KS0IW-HTS-2ND-SHDG-1;
        KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0IW00.KS0IW-HTS-2ND-SHDG-2;
        if (KS0IW01.KS0IW-HTS-BYTE[11] == ","
         || KS0IW01.KS0IW-HTS-BYTE[11] == " ")
          KSWREC.KS-HTS-RNG-FL = "N";
        else
          KSWREC.KS-HTS-RNG-FL = "Y";
        end
      else
        KS0IW02.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
        KSWREC.KS-HTS-CPTR-CD = KS0IW02.KS0IW-HTS-CPTR-CD;
        KSWREC.KS-HTS-HDG-CD = KS0IW02.KS0IW-HTS-HDG-CD;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW02.KS0IW-HTS-1ST-SHDG-CD;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW02.KS0IW-HTS-2ND-SHDG-CD;
        KSWREC.KS-HTS-STAT-CD = KS0IW02.KS0IW-HTS-STAT-CD;
        KSWREC.KS-HTS-RNG-FL = "N";
      end
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
      ;
    end
  end
  if (converseVar.eventKey is pf17) /* PF17 pressed*/
    ;
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      KS0IW00.KS0IW-SWD = "3"; /* Map switch*/
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  if (converseVar.eventKey is pf18) /* PF18 pressed*/
    ;
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      KS0IW00.KS0IW-SWD = "4"; /* Map switch*/
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf19) /* PF19 pressed*/
    ;
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      ;
      KSWREC.KSW-CTL-FLD = KS0IW00.KS0IW-CTL-FLD; /* Pass control fld*/
      KSWREC.KSW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
      COMMAREA.CATOAP = "KS0K"; /* Set destination application*/
      if (KS0IM002.KS0IM-SESN-YR-RNG >= 0
       && KS0IM002.KS0IM-SESN-YR-RNG <= 99)
        KS0IW02.KS0IW-XSNYR = KS0IM002.KS0IM-SESN-YR-RNG;
        if (KS0IM002.KS0IM-SESN-YR-RNG > 65)
          KS0IW02.KS0IW-SESN-CENTURY = 19;
        else
          KS0IW02.KS0IW-SESN-CENTURY = 20;
        end
      else
        KS0IW02.KS0IW-XSNYR = 0;
      end
      KSWREC.KSW-POIDT = KS0IW02.KS0IW-POIDT;
      KSWREC.KSW-FCTY-CD = KS0IW01.KS0IW-FCTY-CD;
      KSWREC.XSNYR = KS0IW02.KS0IW-XSNYR; /* Move map to kswrec*/
      KSWREC.XSECD = KS0IM002.KS0IM-SESN-CD;
      KSWREC.XGPCD = KS0IM002.KS0IM-BUS-UNIT-CD;
      KSWREC.SY1STNBR = KS0IM002.KS0IM-STY-NBR;
      KSWREC.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
      KSWREC.XDMCD = KS0IM002.KS0IM-DIM-CD;
      KSWREC.KS-XPRMT-STY-NBR = KS0IM002.KS0IM-XPRMT-STY-NBR;
      KSWREC.KS-STY-NM[1] = KS0IM002.KS0IM-KS-STY-NM[1];
      KSWREC.KS-STY-NM[2] = KS0IM002.KS0IM-KS-STY-NM[2];
      KSWREC.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD;
      KS0IW01.KS0IW-HTS-NUMBER = KS0IM002.KS0IM-HTS-NBR;
      if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
       || KS0IW01.KS0IW-HTS-BYTE[11] == " "
       || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
        KS0IW00.KS0IW-HTS-NBR-WORK = KS0IM002.KS0IM-HTS-NBR;
        KSWREC.KS-HTS-CPTR-CD = KS0IW00.KS0IW-HTS-CPTR;
        KSWREC.KS-HTS-HDG-CD = KS0IW00.KS0IW-HTS-HDG;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW00.KS0IW-HTS-1ST-SHDG;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW00.KS0IW-HTS-2ND-SHDG-1;
        KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0IW00.KS0IW-HTS-2ND-SHDG-2;
        if (KS0IW01.KS0IW-HTS-BYTE[11] == ","
         || KS0IW01.KS0IW-HTS-BYTE[11] == " ")
          KSWREC.KS-HTS-RNG-FL = "N";
        else
          KSWREC.KS-HTS-RNG-FL = "Y";
        end
      else
        KS0IW02.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
        KSWREC.KS-HTS-CPTR-CD = KS0IW02.KS0IW-HTS-CPTR-CD;
        KSWREC.KS-HTS-HDG-CD = KS0IW02.KS0IW-HTS-HDG-CD;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW02.KS0IW-HTS-1ST-SHDG-CD;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW02.KS0IW-HTS-2ND-SHDG-CD;
        KSWREC.KS-HTS-STAT-CD = KS0IW02.KS0IW-HTS-STAT-CD;
        KSWREC.KS-HTS-RNG-FL = "N";
      end
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
      ;
    end
  end
  ;
  if (KS0IW00.KS0IW-VCPROD02-ADDED == "Y"
   || KS0IW00.KS0IW-FNC == "D")
    KS0IW00.KS0IW-SAV-SESN-CD = KS0IM002.KS0IM-SESN-CD;
    if (KS0IM002.KS0IM-SESN-YR-RNG >= 0
     && KS0IM002.KS0IM-SESN-YR-RNG <= 99)
      ;
      KS0IW01.KS0IW-SESN-YY = KS0IM002.KS0IM-SESN-YR-RNG;
      if (KS0IW01.KS0IW-SESN-YY > "65")
        KS0IW01.KS0IW-SESN-CENT = "19";
      else
        KS0IW01.KS0IW-SESN-CENT = "20";
      end
    else
      ;
      KS0IW01.KS0IW-SESN-YR = "0";
    end
    KS0IW00.KS0IW-SAV-SESN-YR = KS0IW01.KS0IW-SESN-YR;
    ;
    KS0IW00.KS0IW-SAV-STY-NBR = KS0IM002.KS0IM-STY-NBR;
    KS0IW00.KS0IW-SAV-XPRMT-STY = KS0IM002.KS0IM-XPRMT-STY-NBR;
    KS0IW00.KS0IW-SAV-STY-TYP = KS0IM002.KS0IM-STY-TYP-CD;
    KS0IW00.KS0IW-SAV-COLR-CD-ID = KS0IM002.KS0IM-COLR-CD-ID;
    KS0IW00.KS0IW-SAV-DIM-CD = KS0IM002.KS0IM-DIM-CD;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
end // end KS0I-26000

// Select unique VCPROD01 row
Function KS0I-26100()
  /* ------------------------------------------------------------*/
  /* Select the unique row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  VCPROD02.XSECD = KS0IM002.KS0IM-SESN-CD;
  if (KS0IM002.KS0IM-SESN-YR-RNG >= 00
   && KS0IM002.KS0IM-SESN-YR-RNG <= 99)
    KS0IW01.KS0IW-SESN-YY = KS0IM002.KS0IM-SESN-YR-RNG;
    if (KS0IW01.KS0IW-SESN-YY > "65")
      KS0IW01.KS0IW-SESN-CENT = "19";
    else
      KS0IW01.KS0IW-SESN-CENT = "20";
    end
  else
    KS0IW01.KS0IW-SESN-YR = "0";
  end
  KS0IW01.KS0IW-SESN-YR-NUM = KS0IW01.KS0IW-SESN-YR;
  VCPROD02.XSNYR = KS0IW01.KS0IW-SESN-YR-NUM;
  if (KS0IM002.KS0IM-BUS-UNIT-CD == "EQ")
    VCPROD02.KS-BUS-UNIT-CD = "EQ"; /* BUS*/
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0IM002.KS0IM-BUS-UNIT-CD; /* BUS*/
  end
  VCPROD02.SY1STNBR = KS0IM002.KS0IM-STY-NBR; /* Style*/
  VCPROD02.XDMCD = KS0IM002.KS0IM-DIM-CD; /* Dimension code*/
  VCPROD02.KS-XPRMT-STY-NBR = KS0IM002.KS0IM-XPRMT-STY-NBR;
  VCPROD02.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD; /* Style type*/
  ;
  try
    call "VCPROD02" ("S ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row does not exist*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-26100

// Get next number row VKSCTL01
Function KS0I-26200()
  /* ------------------------------------------------------------*/
  /* Get next text number or problem number from DCUSTM.VKSCTL01.*/
  /* ------------------------------------------------------------*/
  ;
  set VKSCTL01 empty;
  ;
  XX0XS01(); /* Get system date and time*/
  ;
  VKSCTL01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VKSCTL01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  if (KS0IW00.KS0IW-CTL-FUNC == "T") /* If txt-nbr needed*/
    try
      call "IO6160" ("G ", SQLCA, VKSCTL01) {isNoRefresh = yes, isExternal = yes};
    end
                                       /* Select table row*/
  else
    if (KS0IW00.KS0IW-CTL-FUNC == "P") /* If prbm-nbr needed*/
      try
        call "IO6160" ("G2", SQLCA, VKSCTL01) {isNoRefresh = yes, isExternal = yes};
      end
                                       /* Select table row*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSCTL01.VKSCTL01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-26200

// Add text rows process
Function KS0I-26300()
  /* ------------------------------------------------------------*/
  /* Format the data and add rows until end of data.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Display line index*/
  KS0IW00.KS0IW-COUNTER = 0; /* Working storage counter*/
  ;
  while (KS0IW00.KS0IW-IXM <= KS0IW02.KS0IW-TOT-FBRC-LINES
   /* Until end of data*/
   && KS0IW02.XGPCD != "02") /* and not footwear GPC*/
    ;
    if (KS0IW02.KS0IW-FABRIC-DESC[KS0IW-IXM] > " ") /* If text exists*/
      KS0IW00.KS0IW-COUNTER = KS0IW00.KS0IW-COUNTER + 1;
      VCPROD02.KS-TXT-NBR = VKSTXT01.KS-TXT-NBR; /* Move text nbr*/
      VKSTXT01.KS-TXT-TYP-IND = "1"; /* Move text type ind*/
      VKSTXT01.XXXRKNBR = KS0IW00.KS0IW-IXM; /* Move rank nbr*/
      VKSTXT01.KS-TXT = KS0IW02.KS0IW-FABRIC-DESC[KS0IW-IXM];
      XX0XS01();
      VKSTXT01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move set up date*/
      VKSTXT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
      VKSTXT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
      VKSTXT01.ZZZCHGCT = 0; /* Move chg count*/
      KS0I-26301(); /* Select unique*/
      if (SQLCA.VAGen_SQLCODE == 100) /* If text does not already exist*/
        KS0I-26302(); /* Add text row*/
      end
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
  end
  KS0IW02.KS0IW-TOT-FBRC-LINES = KS0IW00.KS0IW-COUNTER;
                                   /* tot lines excluding blanks*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Display line index*/
  KS0IW00.KS0IW-IX4 = 1;
  while (KS0IW00.KS0IW-IXM <= 6) /* Until end of data*/
    ;
    if (KS0IW04.KS0IW-PROD-DESC[KS0IW-IXM] > " ") /* Prod desc exists*/
      KS0IW00.KS0IW-COUNTER = KS0IW00.KS0IW-COUNTER + 1;
      VCPROD02.KS-TXT-NBR = VKSTXT01.KS-TXT-NBR; /* Move text nbr*/
      VKSTXT01.KS-TXT-TYP-IND = "2"; /* Move text type ind*/
      VKSTXT01.XXXRKNBR = KS0IW00.KS0IW-IX4; /* Move rank nbr*/
      KS0IW00.KS0IW-IX4 = KS0IW00.KS0IW-IX4 + 1;
      VKSTXT01.KS-TXT = KS0IW04.KS0IW-PROD-DESC[KS0IW-IXM];
      VKSTXT01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move set up date*/
      VKSTXT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
      VKSTXT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
      VKSTXT01.ZZZCHGCT = 0; /* Move chg count*/
      KS0I-26301(); /* Select unique*/
      if (SQLCA.VAGen_SQLCODE == 0
       && VKSTXT01.KS-TXT != KS0IW04.KS0IW-PROD-DESC[KS0IW-IXM])
        KS0I-36101(); /* Delete existing row*/
        VKSTXT01.KS-TXT = KS0IW04.KS0IW-PROD-DESC[KS0IW-IXM];
        VKSTXT01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move set up date*/
        VKSTXT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
        VKSTXT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
        VKSTXT01.ZZZCHGCT = 0; /* Move chg count*/
        KS0I-26302(); /* Add text row*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If text does not already exist*/
          KS0I-26302(); /* Add text row*/
        end
      end
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
  end
  ;
  KS0IW00.KS0IW-IXM = 1; /* Display line index*/
  KS0IW00.KS0IW-IX4 = 1;
  while (KS0IW00.KS0IW-IXM <= 2 /* Until end of data*/
   && KS0IW02.XGPCD != "02") /* and not footwear GPC*/
    ;
    if (KS0IW04.KS0IW-CMMT-DESC[KS0IW-IXM] > " ") /* If comment exists*/
      KS0IW00.KS0IW-COUNTER = KS0IW00.KS0IW-COUNTER + 1;
      VCPROD02.KS-TXT-NBR = VKSTXT01.KS-TXT-NBR; /* Move text nbr*/
      VKSTXT01.KS-TXT-TYP-IND = "3"; /* Move text type ind*/
      VKSTXT01.XXXRKNBR = KS0IW00.KS0IW-IX4; /* Move rank nbr*/
      KS0IW00.KS0IW-IX4 = KS0IW00.KS0IW-IX4 + 1;
      VKSTXT01.KS-TXT = KS0IW04.KS0IW-CMMT-DESC[KS0IW-IXM];
      VKSTXT01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move set up date*/
      VKSTXT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
      VKSTXT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
      VKSTXT01.ZZZCHGCT = 0; /* Move chg count*/
      KS0I-26301(); /* Select unique*/
      if (SQLCA.VAGen_SQLCODE == 0
       && VKSTXT01.KS-TXT != KS0IW04.KS0IW-CMMT-DESC[KS0IW-IXM])
        KS0I-36101(); /* Delete existing row*/
        VKSTXT01.KS-TXT = KS0IW04.KS0IW-CMMT-DESC[KS0IW-IXM];
        VKSTXT01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move set up date*/
        VKSTXT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
        VKSTXT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
        VKSTXT01.ZZZCHGCT = 0; /* Move chg count*/
        KS0I-26302(); /* Add text row*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If text does not already exist*/
          KS0I-26302(); /* Add text row*/
        end
      end
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
  end
  ;
  if (KS0IW00.KS0IW-COUNTER == 0) /* No rows were added*/
    KS0IW02.KS0IW-MAP2-TEXT = 0;
    VCPROD02.KS-TXT-NBR = 0;
  end
  ;
  ;
end // end KS0I-26300

// Select unique VKSTXT01 row
Function KS0I-26301()
  ;
  try
    call "IO6150" ("S ", SQLCA, VKSTXT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or text does not exist*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26301"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSTXT01.VKSTXT01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-26301

// Add row to VKSTXT01 table
Function KS0I-26302()
  ;
  try
    call "IO6150" ("A ", SQLCA, VKSTXT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26302"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A TABLE ROW         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSTXT01.VKSTXT01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-26302

// Add problem rows process
Function KS0I-26400()
  /* ------------------------------------------------------------*/
  /* Format the data and add rows until end of data.*/
  /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Get current date and time*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Display line index*/
  KS0IW00.KS0IW-COUNTER = 0; /* Working storage counter*/
  ;
  while (KS0IW00.KS0IW-IXM <= 10) /* Until end of data*/
    ;
    if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IXM] > " ") /* If prbm exists*/
      KS0IW00.KS0IW-COUNTER = KS0IW00.KS0IW-COUNTER + 1;
      VCPROD02.KS-PRBM-NBR = VCPROB01.KS-PRBM-NBR; /* Move prbm nbr*/
      VCPROB01.YKP-PRBM-CD = KS0IM003.KS0IM-PRBM-CD[KS0IW-IXM];
      VCPROB01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move set up date*/
      VCPROB01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
      VCPROB01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
      VCPROB01.ZZZCHGCT = 0; /* Move chg count*/
      KS0I-26401(); /* Select unique*/
      if (SQLCA.VAGen_SQLCODE == 100) /* If prbm does not already exist*/
        KS0I-26402(); /* Add prbm row*/
      end
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
  end
  ;
  if (KS0IW00.KS0IW-COUNTER == 0) /* No rows added*/
    KS0IW02.KS0IW-MAP2-PRBM = 0;
    VCPROD02.KS-PRBM-NBR = 0;
  end
  ;
  ;
end // end KS0I-26400

// Select unique VCPROB01 row
Function KS0I-26401()
  ;
  try
    call "IO6140" ("S ", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or prbm does not exist*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26401"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-26401

// Add row to VCPROB01 table
Function KS0I-26402()
  ;
  try
    call "IO6140" ("A ", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26402"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A TABLE ROW         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-26402

// Add row to VCPROD01 table
Function KS0I-26500()
  /* ------------------------------------------------------------*/
  /* Add a row to the DCUSTM.VCPROD02 table.*/
  /* ------------------------------------------------------------*/
  ;
  VCPROD02.XSECD = KS0IM002.KS0IM-SESN-CD;
  if (KS0IM002.KS0IM-SESN-YR-RNG >= 00
   && KS0IM002.KS0IM-SESN-YR-RNG <= 99)
    KS0IW01.KS0IW-SESN-YY = KS0IM002.KS0IM-SESN-YR-RNG;
    if (KS0IW01.KS0IW-SESN-YY > "65")
      KS0IW01.KS0IW-SESN-CENT = "19";
    else
      KS0IW01.KS0IW-SESN-CENT = "20";
    end
  else
    KS0IW01.KS0IW-SESN-YR = "0";
  end
  KS0IW01.KS0IW-SESN-YR-NUM = KS0IW01.KS0IW-SESN-YR;
  VCPROD02.XSNYR = KS0IW01.KS0IW-SESN-YR-NUM;
  if (KS0IM002.KS0IM-BUS-UNIT-CD == "EQ")
    VCPROD02.XGPCD = KS0IW00.KS0IW-SAV-EQUIP-GPC;
  else
    VCPROD02.XGPCD = KS0IM002.KS0IM-BUS-UNIT-CD; /* GPC*/
  end
  VCPROD02.SY1STNBR = KS0IM002.KS0IM-STY-NBR; /* Style*/
  VCPROD02.XDMCD = KS0IM002.KS0IM-DIM-CD; /* Dimension code*/
  VCPROD02.KS-XPRMT-STY-NBR = KS0IM002.KS0IM-XPRMT-STY-NBR;
  VCPROD02.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD; /* Style type cd*/
  ;
  if (KS0IM002.KS0IM-HTS-NBR > " ")
    KS0IW01.KS0IW-HTS-NUMBER = KS0IM002.KS0IM-HTS-NBR;
    if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
     || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
      KS0IW00.KS0IW-HTS-NBR-WORK = KS0IM002.KS0IM-HTS-NBR;
      VCPROD02.KS-HTS-CPTR-CD = KS0IW00.KS0IW-HTS-CPTR;
      VCPROD02.KS-HTS-HDG-CD = KS0IW00.KS0IW-HTS-HDG;
      VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW00.KS0IW-HTS-1ST-SHDG;
      VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW00.KS0IW-HTS-2ND-SHDG-1;
      VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0IW00.KS0IW-HTS-2ND-SHDG-2;
      if (KS0IW01.KS0IW-HTS-BYTE[11] == ",")
        VCPROD02.KS-HTS-RNG-FL = "N";
      else
        VCPROD02.KS-HTS-RNG-FL = "Y";
      end
      VCPROD02.KS-HTS-STAT-CD = " ";
      VCPROD02.KS-HTS-SUFX-ID = " ";
    else
      KS0IW02.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
      VCPROD02.KS-HTS-CPTR-CD = KS0IW02.KS0IW-HTS-CPTR-CD;
      VCPROD02.KS-HTS-HDG-CD = KS0IW02.KS0IW-HTS-HDG-CD;
      VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW02.KS0IW-HTS-1ST-SHDG-CD;
      VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW02.KS0IW-HTS-2ND-SHDG-CD;
      VCPROD02.KS-HTS-2ND-SHDG-CD[2] = " ";
      VCPROD02.KS-HTS-STAT-CD = KS0IW02.KS0IW-HTS-STAT-CD;
      VCPROD02.KS-HTS-SUFX-ID = " ";
      VCPROD02.KS-HTS-RNG-FL = "N";
    end
  else
    VCPROD02.KS-HTS-CPTR-CD = " ";
    VCPROD02.KS-HTS-HDG-CD = " ";
    VCPROD02.KS-HTS-1ST-SHDG-CD = " ";
    VCPROD02.KS-HTS-2ND-SHDG-CD[1] = " ";
    VCPROD02.KS-HTS-2ND-SHDG-CD[2] = " ";
    VCPROD02.KS-HTS-STAT-CD = " ";
    VCPROD02.KS-HTS-SUFX-ID = " ";
    VCPROD02.KS-HTS-RNG-FL = "N";
  end
  ;
  if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y"
   || KS0IW02.KS0IW-TEAM-NBR == " ")
    VCPROD02.KS-TEAM-CD = KS0IW02.KS0IW-TEAM-NBR;
  end
  ;
  if (KS0IW00.KS0IW-SIL-OVERRIDE == "Y"
   || KS0IW02.KS0IW-SILH-CD == " ")
    VCPROD02.XSUCD = KS0IW02.KS0IW-SILH-CD;
  end
  ;
  if (KS0IW00.KS0IW-CAT-OVERRIDE == "Y"
   || KS0IW02.KS0IW-CATLG-PAGE-NBR == 0)
    VCPROD02.SYNCTPGN = KS0IW02.KS0IW-CATLG-PAGE-NBR;
  end
  ;
  VCPROD02.KS-RULE-NBR = KS0IM002.KS0IM-RULE-NBR;
  VCPROD02.KS-STY-NM[1] = KS0IM002.KS0IM-KS-STY-NM[1];
  VCPROD02.KS-STY-NM[2] = KS0IM002.KS0IM-KS-STY-NM[2];
  VCPROD02.KS-SHORT-STY-NM = KS0IM002.KS0IM-CUST-STYLE-SH-DESC;
  VCPROD02.KS-XCT-ORIG-CD[1] = KS0IM002.KS0IM-ORIG-CD[1];
  VCPROD02.KS-XCT-ORIG-CD[2] = KS0IM002.KS0IM-ORIG-CD[2];
  VCPROD02.KS-XCT-ORIG-CD[3] = KS0IM002.KS0IM-ORIG-CD[3];
  VCPROD02.KS-XCT-ORIG-CD[4] = KS0IM002.KS0IM-ORIG-CD[4];
  VCPROD02.KS-XCT-ORIG-CD[5] = KS0IM002.KS0IM-ORIG-CD[5];
  VCPROD02.KS-XCT-ORIG-CD[6] = KS0IM002.KS0IM-ORIG-CD[6];
  VCPROD02.YPR-PROD-STAT-CD = KS0IM002.KS0IM-STAT;
  VCPROD02.XXXUSRID = COMMAREA.CAUSERID;
  VCPROD02.KS-PLANIMETER-FL = "N";
  VCPROD02.KS-CF5523-FL = "N";
  if (KS0IW00.KS0IW-SAVE-SDT > 0)
    VCPROD02.ZZZSDT = KS0IW00.KS0IW-SAVE-SDT;
    KS0IW00.KS0IW-SAVE-SDT = 0;
  else
    VCPROD02.ZZZSDT = XX0XW01.XX0XWDAT;
  end
  VCPROD02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VCPROD02.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "VCPROD02" ("A ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slc tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26500"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-26500

// Move color code array
Function KS0I-26600()
  /* ------------------------------------------------------------*/
  /* Move color array in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW02.KS0IW-COLOR-TABLE = " "; /* Clear table*/
  KS0IW02.KS0IW-COLOR[1] = KS0IW01.KS0IW-COLOR-1[KS0IW-IX1];
                                                                 /* Move clr*/
  KS0IW02.KS0IW-COLOR[2] = KS0IW01.KS0IW-COLOR-2[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[3] = KS0IW01.KS0IW-COLOR-3[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[4] = KS0IW01.KS0IW-COLOR-4[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[5] = KS0IW01.KS0IW-COLOR-5[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[6] = KS0IW01.KS0IW-COLOR-6[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[7] = KS0IW01.KS0IW-COLOR-7[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[8] = KS0IW01.KS0IW-COLOR-8[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[9] = KS0IW01.KS0IW-COLOR-9[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[10] = KS0IW01.KS0IW-COLOR-10[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[11] = KS0IW01.KS0IW-COLOR-11[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[12] = KS0IW01.KS0IW-COLOR-12[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[13] = KS0IW01.KS0IW-COLOR-13[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[14] = KS0IW01.KS0IW-COLOR-14[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[15] = KS0IW01.KS0IW-COLOR-15[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[16] = KS0IW01.KS0IW-COLOR-16[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[17] = KS0IW01.KS0IW-COLOR-17[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[18] = KS0IW01.KS0IW-COLOR-18[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[19] = KS0IW01.KS0IW-COLOR-19[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[20] = KS0IW01.KS0IW-COLOR-20[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[21] = KS0IW01.KS0IW-COLOR-21[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[22] = KS0IW01.KS0IW-COLOR-22[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[23] = KS0IW01.KS0IW-COLOR-23[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[24] = KS0IW01.KS0IW-COLOR-24[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[25] = KS0IW01.KS0IW-COLOR-25[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[26] = KS0IW01.KS0IW-COLOR-26[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[27] = KS0IW01.KS0IW-COLOR-27[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[28] = KS0IW01.KS0IW-COLOR-28[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[29] = KS0IW01.KS0IW-COLOR-29[KS0IW-IX1];
  KS0IW02.KS0IW-COLOR[30] = KS0IW01.KS0IW-COLOR-30[KS0IW-IX1];
  ;
  ;
end // end KS0I-26600

// Write VKSAUD01 rows process
Function KS0I-26700()
  /* ------------------------------------------------------------*/
  /* Format the data and add DCUSTM.VKSAUD01 rows.*/
  /* ------------------------------------------------------------*/
  ;
  set VKSAUD01 empty; /* Clear record*/
  ;
  if (KS0IW00.KS0IW-FNC == "A" /* If add function*/
   || KS0IW00.KS0IW-FNC == "D") /* or duplicate function*/
    if (KS0IW02.KS0IW-HTS-NBR != KS0IM002.KS0IM-HTS-NBR
     || KS0IW02.KS0IW-HTS-NBR > " ") /* If HS number exists*/
      VKSAUD01.XXXRKNBR = 1; /* Before image data*/
      VKSAUD01.XSECD = KS0IM002.KS0IM-SESN-CD;
      VKSAUD01.XSNYR = VCPROD02.XSNYR;
      VKSAUD01.XGPCD = VCPROD02.XGPCD;
      VKSAUD01.SY1STNBR = KS0IM002.KS0IM-STY-NBR;
      VKSAUD01.SY2CLRID = VCPROD02.SY2CLRID;
      VKSAUD01.XDMCD = KS0IM002.KS0IM-DIM-CD;
      VKSAUD01.KS-XPRMT-STY-NBR = KS0IM002.KS0IM-XPRMT-STY-NBR;
      VKSAUD01.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD;
      KS0I-26701(); /* Insert VKSAUD01 row*/
      VKSAUD01.XXXRKNBR = 2; /* After image data*/
      VKSAUD01.KS-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
      VKSAUD01.KS-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
      VKSAUD01.KS-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
      VKSAUD01.KS-HTS-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
      VKSAUD01.KS-HTS-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
      VKSAUD01.KS-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
      VKSAUD01.KS-HTS-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
      VKSAUD01.KS-RULE-NBR = VCPROD02.KS-RULE-NBR;
      VKSAUD01.YPR-PROD-STAT-CD = VCPROD02.YPR-PROD-STAT-CD;
      VKSAUD01.YKS-STY-TYP-CD = VCPROD02.YKS-STY-TYP-CD;
      VKSAUD01.XXXUSRID = COMMAREA.CAUSERID;
      KS0I-26701(); /* Insert VKSAUD01 row*/
    end
  else
    KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
    if (KS0IW02.KS0IW-HTS-NBR != KS0IM002.KS0IM-HTS-NBR
     || KS0IW02.KS0IW-HTS-CPTR-CD != 
    KS0IW01.KS0IW-DTL-HTS-CPTR-CD[KS0IW-IX1]
     || KS0IW02.KS0IW-HTS-HDG-CD != 
    KS0IW01.KS0IW-DTL-HTS-HDG-CD[KS0IW-IX1]
     || KS0IW02.KS0IW-HTS-1ST-SHDG-CD != 
    KS0IW01.KS0IW-DTL-HTS-1ST-SHDG-CD[KS0IW-IX1]
     || KS0IW02.KS0IW-HTS-2ND-SHDG-CD != 
    KS0IW01.KS0IW-DTL-HTS-2ND-SHDG-CD[KS0IW-IX1]
     || KS0IW02.KS0IW-HTS-STAT-CD != 
    KS0IW01.KS0IW-DTL-HTS-STAT-CD[KS0IW-IX1]
     || KS0IW00.KS0IW-NEW-HS-SWITCH == "Y")
      VKSAUD01.XXXRKNBR = 1; /* Before image data*/
      VKSAUD01.XSECD = KS0IW02.KS0IW-XSECD;
      VKSAUD01.XSNYR = KS0IW02.KS0IW-XSNYR;
      VKSAUD01.XGPCD = VCPROD02.XGPCD;
      VKSAUD01.SY1STNBR = KS0IW02.KS0IW-STY-NBR;
      VKSAUD01.SY2CLRID = VCPROD02.SY2CLRID;
      VKSAUD01.XDMCD = KS0IW02.XDMCD;
      VKSAUD01.KS-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR;
      VKSAUD01.YKS-STY-TYP-CD = KS0IW02.KS0IW-STY-TYP-CD;
      VKSAUD01.KS-HTS-CPTR-CD = KS0IW00.KS0IW-SAVE-CPTR-CD;
      VKSAUD01.KS-HTS-HDG-CD = KS0IW00.KS0IW-SAVE-HDG-CD;
      VKSAUD01.KS-HTS-1ST-SHDG-CD = KS0IW00.KS0IW-SAVE-1ST-SHDG-CD;
      VKSAUD01.KS-HTS-2ND-SHDG-CD[1] = KS0IW00.KS0IW-SAVE-2ND-SHDG-CD[1];
      VKSAUD01.KS-HTS-2ND-SHDG-CD[2] = KS0IW00.KS0IW-SAVE-2ND-SHDG-CD[2];
      VKSAUD01.KS-HTS-STAT-CD = KS0IW00.KS0IW-SAVE-STAT-CD;
      VKSAUD01.KS-HTS-RNG-FL = KS0IW00.KS0IW-SAVE-RNG-FL;
      VKSAUD01.KS-RULE-NBR = KS0IW02.KS0IW-RULE-NBR;
      VKSAUD01.YPR-PROD-STAT-CD = KS0IW02.KS0IW-STAT;
      VKSAUD01.YKS-STY-TYP-CD = KS0IW02.KS0IW-STY-TYP-CD;
      VKSAUD01.XXXUSRID = COMMAREA.CAUSERID;
      KS0I-26701(); /* Insert VKSAUD01 row*/
      VKSAUD01.XXXRKNBR = 2; /* After image data*/
      VKSAUD01.KS-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
      VKSAUD01.KS-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
      VKSAUD01.KS-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
      VKSAUD01.KS-HTS-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
      VKSAUD01.KS-HTS-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
      VKSAUD01.KS-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
      VKSAUD01.KS-HTS-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
      VKSAUD01.KS-RULE-NBR = VCPROD02.KS-RULE-NBR;
      VKSAUD01.YPR-PROD-STAT-CD = VCPROD02.YPR-PROD-STAT-CD;
      VKSAUD01.YKS-STY-TYP-CD = VCPROD02.YKS-STY-TYP-CD;
      VKSAUD01.XXXUSRID = COMMAREA.CAUSERID;
      KS0I-26701(); /* Insert VKSAUD01 row*/
    end
  end
  ;
  ;
end // end KS0I-26700

// Insert VKSAUD01 row
Function KS0I-26701()
  /* ------------------------------------------------------------*/
  /* Add a row to the DCUSTM.VKSAUD01 table.*/
  /* ------------------------------------------------------------*/
  ;
  VKSAUD01.ZZZSDT = XX0XW01.XX0XWDAT;
  VKSAUD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VKSAUD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VKSAUD01.ZZHHMMSS = XX0XW01.XX0XWHMS;
  VKSAUD01.ZZZCHGCT = 0;
  ;
  try
    call "IO6290" ("A ", SQLCA, VKSAUD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26701"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSAUD01.VKSAUD01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-26701

// Check and add CPROD Row
Function KS0I-26800()
  /* ----------------------------------------------------------------*/
  /* Add CPROD row if it does not alredy exist*/
  /* ----------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear record*/
  VCPROD02.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
  KS0I-26100(); /* Select unique VCPROD02 row*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If row exists*/
    converseLib.validationFailed(83); /* Product is a duplicate message*/
    KS0IW00.KS0IW-SWR = "N"; /* do not request data*/
    KS0IW00.KS0IW-SWF = "N"; /* do not format map*/
    KS0IW00.KS0IW-SWD = "2"; /* Map to be displayed switch*/
    return; /* return*/
  else
    VCPROD02.KS-TXT-NBR = KS0IW02.KS0IW-MAP2-TEXT;
    VCPROD02.KS-PRBM-NBR = KS0IW02.KS0IW-MAP2-PRBM;
    KS0I-26500(); /* Add VCPROD02 row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row added successfully*/
      KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
      KS0IW00.KS0IW-VCPROD02-DUP = "Y"; /* Row added switch*/
      KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
      KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
      XX0XS01(); /* Get current date/time*/
      KS0I-26700(); /* Write VKSAUD01 rows*/
      if (SQLCA.VAGen_SQLCODE != 0) /* Row not added*/
        converseLib.validationFailed(11); /* Data in use message*/
        KSWREC.XXXPRCNM = "26000";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* Reset all DB modifications*/
        return; /* Return to previous process*/
      end
    else
      KS0IW00.KS0IW-VCPROD02-DUP = "N";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* Reset all DB modifications*/
      return; /* Return to previous process*/
    end
  end
  ;
end // end KS0I-26800

// Main process Map 2 (INQ/CHG)
Function KS0I-30000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-21000(); /* Obtain the data to display*/
  ;
  KS0I-32000(); /* Format and display the map*/
  ;
  KS0I-33000(); /* Check attention identifier*/
  ;
  KS0I-24000(); /* Reset fields to normal intensity*/
  ;
  KS0I-35000(); /* Verify the entered data*/
  ;
  KS0I-36000(); /* Process valid input request*/
  ;
  ;
end // end KS0I-30000

// Format and converse the map
Function KS0I-32000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  if (KS0IW00.KS0IW-VCPROD02-ADDED == "Y"
   || KS0IW00.KS0IW-VCPROD02-DUP == "Y"
   || KS0IW00.KS0IW-VCPROD02-UPD == "Y")
    KSWREC.XXXMSGNO = 1;
    KS0IW00.KS0IW-VCPROD02-ADDED = "N";
    KS0IW00.KS0IW-VCPROD02-DUP = "N";
    KS0IW00.KS0IW-VCPROD02-UPD = "N";
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SWR == "Y"           /* Obtain data failed*/
   || converseVar.validationMsgNum == 0  /* or no error found*/
   || converseVar.validationMsgNum == 85 /* or copy color in process*/
   || converseVar.validationMsgNum == 121) /* or delete in process*/
    ;
    if (KS0IW00.KS0IW-SWF == "Y") /* Map must be formatted*/
      if (KS0IW00.KS0IW-FNC == "I") /* Inquiry function requested*/
        KS0I-32100(); /* Format the data for inquiry*/
        KS0IM002.KS0IM-MAP-DESC = "INQUIRY"; /* Map description*/
      else
        if (KS0IW00.KS0IW-FNC == "C") /* Change function requested*/
          KS0I-32200(); /* Format the data for change*/
          KS0IM002.KS0IM-MAP-DESC = "CHANGE"; /* Map description*/
        else
          if (KS0IW00.KS0IW-FNC == "X") /* Delete function requested*/
            KS0I-32100(); /* Format the data for delete*/
            KS0IM002.KS0IM-MAP-DESC = "CHANGE"; /* Map description*/
          end
        end
      end
    end
    ;
  end
  ;
  if (KSWREC.KSW-HTS-NBR > " "
   && KS0IW00.KS0IW-FNC != "I"
   && KS0IW00.KS0IW-FNC != "X")
    set KS0IM002.KS0IM-HTS-NBR cursor;
    KSWREC.KSW-HTS-NBR = " ";
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0IM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0IM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0IM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0IM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0IM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0IM002 ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0IM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0IM002.CAITEM; /* Application data*/
  ;
  ;
end // end KS0I-32000

// Format Inquiry map fields
Function KS0I-32100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM002 initial; /* M002 input/output area*/
  ;
  KS0IW00.KS0IW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW02.XGPCD == "02") /* If footwear GPC code*/
    KS0IM002.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
    KS0IM002.KS0IM-KS-STY-NM-FIELD = "NAME:";
    KS0IM002.KS0IM-DESC-FIELD = "COLOR:";
    KS0IM002.KS0IM-FABRIC-FIELD1 = KS0IW02.KS0IW-FABRIC-FIELD[1];
    KS0IM002.KS0IM-FABRIC-FIELD2 = KS0IW02.KS0IW-FABRIC-FIELD[2];
    KS0IM002.KS0IM-FABRIC-FIELD3 = KS0IW02.KS0IW-FABRIC-FIELD[3];
    set KS0IM002.KS0IM-FABRIC-FIELD1 skip;
    set KS0IM002.KS0IM-FABRIC-FIELD2 skip;
    set KS0IM002.KS0IM-FABRIC-FIELD3 skip;
    set KS0IM002.KS0IM-OF invisible;
    set KS0IM002.KS0IM-PF19 skip;
    ;
  else
    if (KS0IW02.XGPCD == "03") /* If apparel  GPC code*/
      KS0IM002.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
      KS0IM002.KS0IM-KS-STY-NM-FIELD = "LINE:";
      KS0IM002.KS0IM-DESC-FIELD = " NAME:";
      KS0IM002.KS0IM-FABRIC-FIELD1 = "    FABRIC DESC:";
      KS0IM002.KS0IM-FABRIC-FIELD2 = "                ";
      KS0IM002.KS0IM-FABRIC-FIELD3 = "                ";
      KS0IM002.KS0IM-1ST-FBRC-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE;
      KS0IM002.KS0IM-TOT-FBRC-LINES = KS0IW02.KS0IW-TOT-FBRC-LINES;
      KS0IM002.KS0IM-OF = "OF";
    else
      KS0IM002.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
      KS0IM002.KS0IM-KS-STY-NM-FIELD = "NAME:";
      KS0IM002.KS0IM-DESC-FIELD = "COLOR:";
      KS0IM002.KS0IM-FABRIC-FIELD1 = "    FABRIC DESC:";
      KS0IM002.KS0IM-FABRIC-FIELD2 = "                ";
      KS0IM002.KS0IM-FABRIC-FIELD3 = "                ";
      KS0IM002.KS0IM-1ST-FBRC-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE;
      KS0IM002.KS0IM-TOT-FBRC-LINES = KS0IW02.KS0IW-TOT-FBRC-LINES;
      KS0IM002.KS0IM-OF = "OF";
    end
  end
  ;
  KS0IM002.KS0IM-BUS-UNIT-CD = KS0IW02.XGPCD; /* GPC code*/
  KS0IM002.KS0IM-STY-NBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
  KS0IM002.KS0IM-COLR-CD-ID = KS0IW02.SY2CLRID; /* Color id*/
  if (KS0IW02.SY2CLRID == "***")
    KS0IW00.KS0IW-IX1 = 1;
    while (KS0IW00.KS0IW-IX1 <= 10)
      if (KS0IW02.KS0IW-COLOR[KS0IW-IX1] > " ")
        KS0IM002.KS0IM-COLOR[KS0IW-IX1] = KS0IW02.KS0IW-COLOR[KS0IW-IX1];
  /* here for factory retrieve ?*/
        set KS0IM002.KS0IM-COLOR[KS0IW-IX1] skip;
        set KS0IM002.KS0IM-COLR-IND skip;
      end
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
  end
  KS0IM002.KS0IM-DIM-CD = KS0IW02.XDMCD; /* Dimension code*/
  ;
  if (KS0IW-MAP3-PRBM-TABLE > " "
   && KS0IW02.XGPCD == "02")
    KS0IW00.KS0IW-IX1 = 1;
    KS0IW00.KS0IW-IX2 = 1;
    set KS0IM002.KS0IM-CSTM-FEAT-FIELD skip;
    while (KS0IW00.KS0IW-IX1 <= 25
     && KS0IW00.KS0IW-IX2 <= 6)
      if (KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX1] > " ")
        KS0IM002.KS0IM-CSTM-FEAT-CD[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX1];
        set KS0IM002.KS0IM-CSTM-FEAT-CD[KS0IW-IX2] skip;
        KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
      end
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
  end
  ;
  if (KS0IW02.KS0IW-DTY-RATE > " ")
    set KS0IM002.KS0IM-GEN-DTY-FIELD skip;
    KS0IM002.KS0IM-GEN-DTY-RATE = KS0IW02.KS0IW-DTY-RATE;
  end
  ;
  if (KS0IW02.KS0IW-QOTA-CAT-CD > " ")
    set KS0IM002.KS0IM-QOTA-CAT-FIELD skip;
    KS0IM002.KS0IM-QOTA-CAT-CD = KS0IW02.KS0IW-QOTA-CAT-CD;
    KS0IM002.KS0IM-QOTA-CAT-SDESC = KS0IW02.KS0IW-QOTA-CAT-DESC;
  end
  ;
  KS0IM002.KS0IM-REG-CD = KS0IW02.KS0IW-REG-CD;
  if (KS0IM002.KS0IM-REG-CD > " ") /* If market reg entered*/
    if (KS0IM002.KS0IM-REG-CD in XDRTBL.XDR-PROD-REG-CD /* Code in table*/
     && XDRTBL.XXX-STAT[sysVar.arrayIndex] == "A")      /* and active status*/
      ;
      KS0IW02.KS0IW-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
    end
  end
  KS0IM002.KS0IM-REG-SDESC = KS0IW02.KS0IW-REG-SDESC;
  ;
  if (KS0IW02.KS0IW-HTS-NBR > " ")
    KS0IM002.KS0IM-TEAM-NBR = KS0IW02.KS0IW-TEAM-NBR;
    set KS0IM002.KS0IM-TEAM-NBR-FIELD skip;
    set KS0IM002.KS0IM-TEAM-NBR skip;
    if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y")
      set KS0IM002.KS0IM-TEAM-NBR skip, bold;
    end
  end
  KS0IM002.KS0IM-HTS-NBR = KS0IW02.KS0IW-HTS-NBR; /* HTS number*/
  KS0IM002.KS0IM-RULE-NBR = KS0IW02.KS0IW-RULE-NBR; /* Rule number*/
  if (KS0IW02.KS0IW-RULE-NBR > " ")
    KS0IM002.KS0IM-RULE-DT = KS0IW02.KS0IW-RULE-DT;
    set KS0IM002.KS0IM-RULE-DT skip;
    set KS0IM002.KS0IM-DT-FIELD skip;
  end
  KS0IM002.KS0IM-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR; /* Experimental style number*/
  KS0IM002.KS0IM-SESN-CD = KS0IW02.KS0IW-XSECD; /* Season code*/
  if (KS0IW02.KS0IW-XSNYR > 0)
    KS0IM002.KS0IM-SESN-YR-RNG = KS0IW02.KS0IW-SESN-YEAR;
                                   /* Season year*/
  else
    KS0IM002.KS0IM-SESN-YR-RNG = 0; /* Season year*/
  end
  ;
  KS0IM002.KS0IM-KS-STY-NM[1] = KS0IW02.KS0IW-KS-STY-NM[1];
  KS0IM002.KS0IM-KS-STY-NM[2] = KS0IW02.KS0IW-KS-STY-NM[2];
  KS0IM002.KS0IM-STY-TYP-CD = KS0IW02.KS0IW-STY-TYP-CD;
  set KS0IM002.KS0IM-STY-TYP-DESC skip;
  KS0IM002.KS0IM-STY-TYP-DESC = KS0IW02.KS0IW-STY-TYP-DESC;
  KS0IM002.KS0IM-CUST-STYLE-SH-DESC = KS0IW02.KS0IW-KS-SHORT-STY-NM;
  ;
  KS0IM002.KS0IM-FABRIC-DESC[1] = KS0IW02.KS0IW-FABRIC-DESC[1];
  KS0IM002.KS0IM-FABRIC-DESC[2] = KS0IW02.KS0IW-FABRIC-DESC[2];
  KS0IM002.KS0IM-FABRIC-DESC[3] = KS0IW02.KS0IW-FABRIC-DESC[3];
  ;
  KS0IM002.KS0IM-ORIG-CD[1] = KS0IW02.KS0IW-ORIG-CD[1]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[2] = KS0IW02.KS0IW-ORIG-CD[2]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[3] = KS0IW02.KS0IW-ORIG-CD[3]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[4] = KS0IW02.KS0IW-ORIG-CD[4]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[5] = KS0IW02.KS0IW-ORIG-CD[5]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[6] = KS0IW02.KS0IW-ORIG-CD[6]; /* Origin code*/
  ;
  KS0IM002.KS0IM-CATLG-PAGE-NBR = KS0IW02.KS0IW-CATLG-PAGE-NBR;
  if (KS0IW00.KS0IW-CAT-OVERRIDE == "Y")
    set KS0IM002.KS0IM-CATLG-PAGE-NBR skip, bold;
  else
    set KS0IM002.KS0IM-CATLG-PAGE-NBR skip;
  end
  KS0IM002.KS0IM-STAT = KS0IW02.KS0IW-STAT; /* Status code*/
  ;
  if (KS0IW02.XGPCD != "03")
    KS0IM002.KS0IM-SPACT-CD = KS0IW02.KS0IW-SPACT-CD;
    KS0IM002.KS0IM-SPACT-ABRV = KS0IW02.KS0IW-SPACT-ABRV;
    KS0IM002.KS0IM-DIV-CD = KS0IW02.KS0IW-DIV-CD;
    KS0IM002.KS0IM-DIV-ABRV = KS0IW02.KS0IW-DIV-ABRV;
    KS0IM002.KS0IM-PROD-CAT-CD = KS0IW02.KS0IW-PROD-CAT-CD;
    KS0IM002.KS0IM-PROD-CAT-ABRV = KS0IW02.KS0IW-PROD-CAT-ABRV;
    KS0IM002.KS0IM-GNDR-AGE-CD = KS0IW02.KS0IW-GNDR-AGE-CD;
    KS0IM002.KS0IM-GNDR-AGE-ABRV = KS0IW02.KS0IW-GNDR-AGE-ABRV;
    KS0IM002.KS0IM-SILH-CD = KS0IW02.KS0IW-SILH-CD;
    KS0IM002.KS0IM-SILH-ABRV = KS0IW02.KS0IW-SILH-ABRV;
    KS0IM002.KS0IM-REG-CD = KS0IW02.KS0IW-REG-CD;
    KS0IM002.KS0IM-REG-SDESC = KS0IW02.KS0IW-REG-SDESC;
    set KS0IM002.KS0IM-SPACT-FIELD skip;
    set KS0IM002.KS0IM-SPACT-CD skip;
    set KS0IM002.KS0IM-SPACT-ABRV skip;
    set KS0IM002.KS0IM-DIV-FIELD skip;
    set KS0IM002.KS0IM-DIV-CD skip;
    set KS0IM002.KS0IM-DIV-ABRV skip;
    set KS0IM002.KS0IM-PROD-CAT-FIELD skip;
    set KS0IM002.KS0IM-PROD-CAT-CD skip;
    set KS0IM002.KS0IM-PROD-CAT-ABRV skip;
    set KS0IM002.KS0IM-GNDR-AGE-FIELD skip;
    set KS0IM002.KS0IM-GNDR-AGE-CD skip;
    set KS0IM002.KS0IM-GNDR-AGE-ABRV skip;
    set KS0IM002.KS0IM-SILH-FIELD skip;
    set KS0IM002.KS0IM-SILH-CD skip;
    set KS0IM002.KS0IM-SILH-ABRV skip;
    ;
    if (KS0IW00.KS0IW-SIL-OVERRIDE == "Y") /* If silhouette overriden*/
      set KS0IM002.KS0IM-SILH-CD skip, bold;
    end
  end
  ;
  if (KS0IW02.XGPCD == "03") /* aprl gpc only*/
    KS0IM002.KS0IM-PRICE-PCT = KS0IW02.KS0IW-PRC-PCT;
    set KS0IM002.KS0IM-PRICE-PCT-FIELD skip;
    set KS0IM002.KS0IM-PRICE-PCT skip;
  else
    set KS0IM002.KS0IM-PRICE-PCT-FIELD invisible, skip;
    set KS0IM002.KS0IM-PRICE-PCT noHighLight, skip;
  end
  ;
  if (KS0IW02.KS0IW-TOT-FBRC-LINES > 3 /* need to scroll desc*/
   && KS0IW02.XGPCD == "03")           /* aprl gpc only*/
    set KS0IM002.KS0IM-1ST-FBRC-LINE green, underline, cursor;
    KS0IM002.KS0IM-PF7 = "PF7:UP"; /* show pf7*/
    KS0IM002.KS0IM-PF8 = "PF8:DN"; /* show pf8*/
  else
    set KS0IM002.KS0IM-1ST-FBRC-LINE blue, noHighLight, skip;
    KS0IM002.KS0IM-PF7 = " ";
    KS0IM002.KS0IM-PF8 = " ";
  end
  ;
  KS0IW00.KS0IW-IX2 = 1; /* factory info for all gpc's*/
  while (KS0IW00.KS0IW-IX2 <= 12
   && KS0IW02.KS0IW-FACTORY[KS0IW-IX2] > " ")
    KS0IM002.KS0IM-FCTY-CD[KS0IW-IX2] = KS0IW02.KS0IW-FACTORY[KS0IW-IX2];
    set KS0IM002.KS0IM-FCTY-CD[KS0IW-IX2] skip;
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
  end
  if (KS0IM002.KS0IM-FCTY-CD[1] == " ")
    KS0IM002.KS0IM-FCTY-CD[1] = "N/A";
    set KS0IM002.KS0IM-FCTY-CD[1] skip;
  end
  set KS0IM002.KS0IM-FCTY-FIELD skip;
  set KS0IM002.CATOAP cursor; /* Set cursor*/
  set KS0IM002.KS0IM-BUS-UNIT-CD skip; /* GPC*/
  set KS0IM002.KS0IM-XPRMT-STY-NBR skip; /* Experimental style*/
  set KS0IM002.KS0IM-SESN-CD skip; /* Season code*/
  set KS0IM002.KS0IM-SESN-YR-RNG skip; /* Season year*/
  set KS0IM002.KS0IM-HTS-NBR skip; /* HS number*/
  set KS0IM002.KS0IM-STY-NBR skip; /* Style number*/
  set KS0IM002.KS0IM-STY-NBR skip; /* Style number*/
  set KS0IM002.KS0IM-COLR-CD-ID skip; /* Color code id*/
  set KS0IM002.KS0IM-DIM-CD skip; /* Dimension code*/
  set KS0IM002.KS0IM-RULE-NBR skip; /* Rule number*/
  set KS0IM002.KS0IM-KS-STY-NM[1] skip; /* Style name*/
  set KS0IM002.KS0IM-KS-STY-NM[2] skip; /* Style name*/
  set KS0IM002.KS0IM-STY-TYP-CD skip; /* Style type code*/
  set KS0IM002.KS0IM-CUST-STYLE-SH-DESC skip; /* Customs short sty desc*/
  set KS0IM002.KS0IM-FABRIC-DESC[1] skip; /* Fabric description*/
  set KS0IM002.KS0IM-FABRIC-DESC[2] skip; /* Fabric description*/
  set KS0IM002.KS0IM-FABRIC-DESC[3] skip; /* Fabric description*/
  set KS0IM002.KS0IM-ORIG-CD[1] skip; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[2] skip; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[3] skip; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[4] skip; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[5] skip; /* Origin code*/
  set KS0IM002.KS0IM-ORIG-CD[6] skip; /* Origin code*/
  set KS0IM002.KS0IM-STAT skip; /* Product status*/
  ;
end // end KS0I-32100

// Format Change map fields
Function KS0I-32200()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM002 initial; /* M002 input/output area*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW02.XGPCD == "02") /* If footwear GPC code*/
    KS0IM002.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
    KS0IM002.KS0IM-KS-STY-NM-FIELD = "NAME:";
    KS0IM002.KS0IM-DESC-FIELD = "COLOR:";
    KS0IM002.KS0IM-FABRIC-FIELD1 = KS0IW02.KS0IW-FABRIC-FIELD[1];
    KS0IM002.KS0IM-FABRIC-FIELD2 = KS0IW02.KS0IW-FABRIC-FIELD[2];
    KS0IM002.KS0IM-FABRIC-FIELD3 = KS0IW02.KS0IW-FABRIC-FIELD[3];
    set KS0IM002.KS0IM-FABRIC-FIELD1 skip;
    set KS0IM002.KS0IM-FABRIC-FIELD2 skip;
    set KS0IM002.KS0IM-FABRIC-FIELD3 skip;
    set KS0IM002.KS0IM-COLR-CD-ID skip;
    set KS0IM002.KS0IM-DIM-CD skip;
    set KS0IM002.KS0IM-OF invisible;
    set KS0IM002.KS0IM-PF5 skip;
  else
    KS0IM002.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
    KS0IM002.KS0IM-KS-STY-NM-FIELD = "LINE:";
    KS0IM002.KS0IM-DESC-FIELD = " NAME:";
    KS0IM002.KS0IM-FABRIC-FIELD1 = "    FABRIC DESC:";
    KS0IM002.KS0IM-FABRIC-FIELD2 = "                ";
    KS0IM002.KS0IM-FABRIC-FIELD3 = "                ";
    KS0IM002.KS0IM-1ST-FBRC-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE;
    KS0IM002.KS0IM-TOT-FBRC-LINES = KS0IW02.KS0IW-TOT-FBRC-LINES;
    KS0IM002.KS0IM-OF = "OF";
  end
  ;
  KS0IM002.KS0IM-BUS-UNIT-CD = KS0IW02.XGPCD; /* GPC code*/
  KS0IM002.KS0IM-STY-NBR = KS0IW02.KS0IW-STY-NBR; /* Style number*/
  KS0IM002.KS0IM-COLR-CD-ID = KS0IW02.SY2CLRID; /* Color id*/
  if (KS0IW02.SY2CLRID == "***")
    KS0IW00.KS0IW-IX1 = 1;
    while (KS0IW00.KS0IW-IX1 <= 10)
      if (KS0IW02.KS0IW-COLOR[KS0IW-IX1] > " ")
        KS0IM002.KS0IM-COLOR[KS0IW-IX1] = KS0IW02.KS0IW-COLOR[KS0IW-IX1];
        set KS0IM002.KS0IM-COLOR[KS0IW-IX1] skip;
        set KS0IM002.KS0IM-COLR-IND skip;
      end
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
  end
  KS0IM002.KS0IM-DIM-CD = KS0IW02.XDMCD; /* Dimension code*/
  ;
  if (KS0IW-MAP3-PRBM-TABLE > " "
   && KS0IW02.XGPCD == "02")
    KS0IW00.KS0IW-IX1 = 1;
    KS0IW00.KS0IW-IX2 = 1;
    set KS0IM002.KS0IM-CSTM-FEAT-FIELD skip;
    while (KS0IW00.KS0IW-IX1 <= 25
     && KS0IW00.KS0IW-IX2 <= 6)
      if (KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX1] > " ")
        KS0IM002.KS0IM-CSTM-FEAT-CD[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX1];
        set KS0IM002.KS0IM-CSTM-FEAT-CD[KS0IW-IX2] skip;
        KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
      end
      KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
    end
  end
  ;
  if (KS0IW02.XGPCD == "03") /* aprl gpc only*/
    KS0IM002.KS0IM-PRICE-PCT = KS0IW02.KS0IW-PRC-PCT;
  else
    set KS0IM002.KS0IM-PRICE-PCT-FIELD invisible, skip;
    set KS0IM002.KS0IM-PRICE-PCT noHighLight, skip;
  end
  ;
  if (KS0IW02.KS0IW-DTY-RATE > " ")
    set KS0IM002.KS0IM-GEN-DTY-FIELD skip;
    KS0IM002.KS0IM-GEN-DTY-RATE = KS0IW02.KS0IW-DTY-RATE;
  end
  ;
  if (KS0IW02.KS0IW-QOTA-CAT-CD > " ")
    set KS0IM002.KS0IM-QOTA-CAT-FIELD skip;
    KS0IM002.KS0IM-QOTA-CAT-CD = KS0IW02.KS0IW-QOTA-CAT-CD;
    KS0IM002.KS0IM-QOTA-CAT-SDESC = KS0IW02.KS0IW-QOTA-CAT-DESC;
  end
  ;
  KS0IM002.KS0IM-REG-CD = KS0IW02.KS0IW-REG-CD;
  if (KS0IM002.KS0IM-REG-CD > " ") /* If market reg entered*/
    if (KS0IM002.KS0IM-REG-CD in XDRTBL.XDR-PROD-REG-CD /* Code in table*/
     && XDRTBL.XXX-STAT[sysVar.arrayIndex] == "A")      /* and active status*/
      ;
      KS0IW02.KS0IW-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
    end
  end
  KS0IM002.KS0IM-REG-SDESC = KS0IW02.KS0IW-REG-SDESC;
  ;
  if (KS0IW02.KS0IW-HTS-NBR > " ")
    KS0IM002.KS0IM-TEAM-NBR = KS0IW02.KS0IW-TEAM-NBR;
    set KS0IM002.KS0IM-TEAM-NBR-FIELD skip;
    set KS0IM002.KS0IM-TEAM-NBR normal;
    if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y")
      set KS0IM002.KS0IM-TEAM-NBR bold;
    end
    KS0IW01.KS0IW-HTS-NUMBER = KS0IW02.KS0IW-HTS-NBR;
    KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
    while (KS0IW00.KS0IW-IX2 <= 14)
      if (KS0IW00.KS0IW-IX2 == 5 /* These 3 positions must be '.'*/
       || KS0IW00.KS0IW-IX2 == 8 
       || KS0IW00.KS0IW-IX2 == 13)
        if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] != ".")
          KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX2 + 1;
          if (KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX1] > " ")
            KS0IW01.KS0IW-HTS-BYTE[KS0IW-IX2] = ".";
          end
        end
      end
      KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* set index up by 1*/
    end
    KS0IW02.KS0IW-HTS-NBR = KS0IW01.KS0IW-HTS-NUMBER;
    KS0IW01.KS0IW-HTS-NUMBER = " ";
  end
  ;
  KS0IM002.KS0IM-HTS-NBR = KS0IW02.KS0IW-HTS-NBR; /* HTS number*/
  KS0IM002.KS0IM-RULE-NBR = KS0IW02.KS0IW-RULE-NBR; /* Rule number*/
  if (KS0IW02.KS0IW-RULE-NBR > " ")
    KS0IM002.KS0IM-RULE-DT = KS0IW02.KS0IW-RULE-DT;
    set KS0IM002.KS0IM-RULE-DT skip;
    set KS0IM002.KS0IM-DT-FIELD skip;
  end
  KS0IM002.KS0IM-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR; /* Experimental style number*/
  KS0IM002.KS0IM-SESN-CD = KS0IW02.KS0IW-XSECD; /* Season code*/
  if (KS0IW02.KS0IW-XSNYR > 0)
    KS0IM002.KS0IM-SESN-YR-RNG = KS0IW02.KS0IW-SESN-YEAR;
                                   /* Season year*/
  else
    KS0IM002.KS0IM-SESN-YR-RNG = 0; /* Season year*/
  end
  if (KS0IM002.KS0IM-BUS-UNIT-CD == "02")
    set KS0IM002.KS0IM-SESN-CD skip;
    set KS0IM002.KS0IM-SESN-YR-RNG skip;
  end
  ;
  KS0IM002.KS0IM-KS-STY-NM[1] = KS0IW02.KS0IW-KS-STY-NM[1];
  KS0IM002.KS0IM-KS-STY-NM[2] = KS0IW02.KS0IW-KS-STY-NM[2];
  KS0IM002.KS0IM-STY-TYP-CD = KS0IW02.KS0IW-STY-TYP-CD;
  set KS0IM002.KS0IM-STY-TYP-DESC skip;
  KS0IM002.KS0IM-STY-TYP-DESC = KS0IW02.KS0IW-STY-TYP-DESC;
  KS0IM002.KS0IM-CUST-STYLE-SH-DESC = KS0IW02.KS0IW-KS-SHORT-STY-NM;
  ;
  KS0IW02.KS0IW-2ND-FBRC-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE + 1;
  KS0IW02.KS0IW-3RD-FBRC-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE + 2;
  ;
  KS0IM002.KS0IM-FABRIC-DESC[1] = KS0IW02.KS0IW-FABRIC-DESC[KS0IW-1ST-FBRC-LINE];
  KS0IM002.KS0IM-FABRIC-DESC[2] = KS0IW02.KS0IW-FABRIC-DESC[KS0IW-2ND-FBRC-LINE];
  KS0IM002.KS0IM-FABRIC-DESC[3] = KS0IW02.KS0IW-FABRIC-DESC[KS0IW-3RD-FBRC-LINE];
  ;
  KS0IM002.KS0IM-ORIG-CD[1] = KS0IW02.KS0IW-ORIG-CD[1]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[2] = KS0IW02.KS0IW-ORIG-CD[2]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[3] = KS0IW02.KS0IW-ORIG-CD[3]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[4] = KS0IW02.KS0IW-ORIG-CD[4]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[5] = KS0IW02.KS0IW-ORIG-CD[5]; /* Origin code*/
  KS0IM002.KS0IM-ORIG-CD[6] = KS0IW02.KS0IW-ORIG-CD[6]; /* Origin code*/
  ;
  KS0IM002.KS0IM-CATLG-PAGE-NBR = KS0IW02.KS0IW-CATLG-PAGE-NBR;
  if (KS0IW00.KS0IW-CAT-OVERRIDE == "Y")
    set KS0IM002.KS0IM-CATLG-PAGE-NBR bold;
  end
  KS0IM002.KS0IM-STAT = KS0IW02.KS0IW-STAT; /* Status code*/
  if (KS0IW02.KS0IW-STAT == "SD")
    set KS0IM002.KS0IM-STAT skip;
  end
  ;
  if (KS0IW02.XGPCD == "02")
    KS0IM002.KS0IM-SPACT-CD = KS0IW02.KS0IW-SPACT-CD;
    KS0IM002.KS0IM-SPACT-ABRV = KS0IW02.KS0IW-SPACT-ABRV;
    KS0IM002.KS0IM-DIV-CD = KS0IW02.KS0IW-DIV-CD;
    KS0IM002.KS0IM-DIV-ABRV = KS0IW02.KS0IW-DIV-ABRV;
    KS0IM002.KS0IM-PROD-CAT-CD = KS0IW02.KS0IW-PROD-CAT-CD;
    KS0IM002.KS0IM-PROD-CAT-ABRV = KS0IW02.KS0IW-PROD-CAT-ABRV;
    KS0IM002.KS0IM-GNDR-AGE-CD = KS0IW02.KS0IW-GNDR-AGE-CD;
    KS0IM002.KS0IM-GNDR-AGE-ABRV = KS0IW02.KS0IW-GNDR-AGE-ABRV;
    if (KS0IW00.KS0IW-SIL-OVERRIDE == "Y")
      set KS0IM002.KS0IM-SILH-CD bold;
    else
      set KS0IM002.KS0IM-SILH-CD normal;
    end
    KS0IM002.KS0IM-SILH-CD = KS0IW02.KS0IW-SILH-CD;
    KS0IM002.KS0IM-SILH-ABRV = KS0IW02.KS0IW-SILH-ABRV;
    KS0IM002.KS0IM-REG-CD = KS0IW02.KS0IW-REG-CD;
    KS0IM002.KS0IM-REG-SDESC = KS0IW02.KS0IW-REG-SDESC;
    set KS0IM002.KS0IM-SPACT-FIELD skip;
    set KS0IM002.KS0IM-SPACT-CD skip;
    set KS0IM002.KS0IM-SPACT-ABRV skip;
    set KS0IM002.KS0IM-DIV-FIELD skip;
    set KS0IM002.KS0IM-DIV-CD skip;
    set KS0IM002.KS0IM-DIV-ABRV skip;
    set KS0IM002.KS0IM-PROD-CAT-FIELD skip;
    set KS0IM002.KS0IM-PROD-CAT-CD skip;
    set KS0IM002.KS0IM-PROD-CAT-ABRV skip;
    set KS0IM002.KS0IM-GNDR-AGE-FIELD skip;
    set KS0IM002.KS0IM-GNDR-AGE-CD skip;
    set KS0IM002.KS0IM-GNDR-AGE-ABRV skip;
    set KS0IM002.KS0IM-SILH-FIELD skip;
    set KS0IM002.KS0IM-SILH-ABRV skip;
    ;
    set KS0IM002.KS0IM-FABRIC-DESC[1] skip;
    set KS0IM002.KS0IM-FABRIC-DESC[2] skip;
    set KS0IM002.KS0IM-FABRIC-DESC[3] skip;
    set KS0IM002.KS0IM-ORIG-CD[1] skip;
    set KS0IM002.KS0IM-ORIG-CD[2] skip;
    set KS0IM002.KS0IM-ORIG-CD[3] skip;
    set KS0IM002.KS0IM-ORIG-CD[4] skip;
    set KS0IM002.KS0IM-ORIG-CD[5] skip;
    set KS0IM002.KS0IM-ORIG-CD[6] skip;
    set KS0IM002.KS0IM-PF19 skip; /* PF19 KS0K screen*/
  else
    set KS0IM002.KS0IM-CPY-COLR-FIELD normal; /* Copy from color field*/
    set KS0IM002.KS0IM-CPY-COLR-FIELD skip; /* Copy from color field*/
    set KS0IM002.KS0IM-CPY-COLR-CD-ID normal; /* Copy from color field*/
  end
  ;
  if (KS0IW02.KS0IW-TOT-FBRC-LINES > 3) /* more lines than fit*/
    set KS0IM002.KS0IM-1ST-FBRC-LINE green, underline;
    KS0IM002.KS0IM-PF7 = "PF7:UP"; /* show pf7 available*/
    KS0IM002.KS0IM-PF8 = "PF8:DN"; /* show pf8 available*/
  else
    set KS0IM002.KS0IM-1ST-FBRC-LINE blue, noHighLight, skip;
    KS0IM002.KS0IM-PF7 = " "; /* not show pf7 available*/
    KS0IM002.KS0IM-PF8 = " "; /* not show pf8 available*/
  end
  ;
  if (KS0IW02.KS0IW-TOT-FBRC-LINES < 30 /* less than max*/
   && KS0IM002.KS0IM-BUS-UNIT-CD == "03") /* and aprl gpc*/
    KS0IM002.KS0IM-PF5 = "PF5:IN";
  else
    KS0IM002.KS0IM-PF5 = " ";
  end
  ;
  KS0IW00.KS0IW-IX2 = 1; /* factory info for all gpc's*/
  while (KS0IW00.KS0IW-IX2 <= 12
   && KS0IW02.KS0IW-FACTORY[KS0IW-IX2] > " ")
    KS0IM002.KS0IM-FCTY-CD[KS0IW-IX2] = KS0IW02.KS0IW-FACTORY[KS0IW-IX2];
    set KS0IM002.KS0IM-FCTY-CD[KS0IW-IX2] skip;
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
  end
  if (KS0IM002.KS0IM-FCTY-CD[1] == " ")
    KS0IM002.KS0IM-FCTY-CD[1] = "N/A";
    set KS0IM002.KS0IM-FCTY-CD[1] skip;
  end
  set KS0IM002.KS0IM-FCTY-FIELD skip;
  set KS0IM002.KS0IM-HTS-NBR cursor; /* Set cursor*/
  set KS0IM002.KS0IM-BUS-UNIT-CD skip; /* GPC*/
  set KS0IM002.KS0IM-STY-NBR skip; /* Style number*/
  set KS0IM002.KS0IM-XPRMT-STY-NBR skip; /* Experimental style*/
  set KS0IM002.KS0IM-PF16 skip; /* PF16 KS0J screen*/
  if (COMMAREA.CADELFL == "Y")
    set KS0IM002.KS0IM-PF20 skip; /* PF20 Delete option*/
  end
  ;
  ;
end // end KS0I-32200

// Check attention identifier
Function KS0I-33000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0IW00.KS0IW-SWR == "Y") /* Request for data*/
      set KS0IW02 empty; /* M002 display storage*/
    end
    ;
    KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
    KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (COMMAREA.CATOAP == "KS0K")
        KSWREC.XXXPRCNM = "33000"; /* Module identification*/
        converseLib.validationFailed(6); /* PA/PF key may not be used*/
        set KS0IM002.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        KS0I-11100(); /* Purge any temporary storage*/
        ;
        XSKS-S0001(); /* Exit to another application*/
        ;
        KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
        ;
      end
    else
      ;
      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      set KS0IM002.CATOAP cursor, bold; /* Highlight*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0IM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      ;
      COMMAREA.CATOAP = "KS0A"; /* Xfer to Customs Menu*/
      ;
    end
    ;
    KS0I-11100(); /* Purge any temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-FNC == "I") /* If inquiry function*/
    if (converseVar.eventKey is pf16 /* PF16 was pressed*/
     || converseVar.eventKey is pf20 /* PF20 was pressed*/
     || converseVar.eventKey is pf5) /* PF5  was pressed*/
      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    end
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "33000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (converseVar.eventKey is enter /* Enter was pressed*/
   || converseVar.eventKey is pf16  /* or PF16 was pressed*/
   || converseVar.eventKey is pf17  /* or PF17 was pressed*/
   || converseVar.eventKey is pf18) /* or PF18 was pressed*/
    if (KS0IW01.KS0IW-GPC == "02" /* Footwear GPC code*/
     && COMMAREA.CACLVL[2] == "N" 
     && KS0IW00.KS0IW-FNC != "I") /* and not inquiry function*/
      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(42); /* Not authorized message*/
    end
    if (KS0IW01.KS0IW-GPC == "03" /* Apparel GPC code*/
     && COMMAREA.CACLVL[3] == "N" 
     && KS0IW00.KS0IW-FNC != "I") /* and not inquiry function*/
      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(42); /* Not authorized message*/
    end
    if (converseVar.eventKey is enter)
      if (KS0IW01.KS0IW-GPC == "03") /* aprl gpc only*/
        if (KS0IM002.KS0IM-1ST-FBRC-LINE != KS0IW02.KS0IW-1ST-FBRC-LINE)
          if (KS0IM002.KS0IM-1ST-FBRC-LINE <= 0
           || KS0IM002.KS0IM-1ST-FBRC-LINE > KS0IW02.KS0IW-TOT-FBRC-LINES
          )
            KSWREC.XXXPRCNM = "33000"; /* Module identification*/
            converseLib.validationFailed(144); /* Line number missing or invalid*/
            set KS0IM002.KS0IM-1ST-FBRC-LINE cursor, bold; /* Highlight*/
          else
            if (KS0IM002.KS0IM-1ST-FBRC-LINE < KS0IW02.KS0IW-1ST-FBRC-LINE)
              KS0I-33100(); /* check for any chgs*/
              KS0IW02.KS0IW-1ST-FBRC-LINE = KS0IM002.KS0IM-1ST-FBRC-LINE;
              KS0IW02.KS0IW-SCROLL-IDX = KS0IM002.KS0IM-1ST-FBRC-LINE;
              KS0IW02.KS0IW-END-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE + 2;
              KS0I-33102(); /* move in new lines*/
              ;
              exit stack;
              ;
            else
              if (KS0IM002.KS0IM-1ST-FBRC-LINE > 
              KS0IW02.KS0IW-1ST-FBRC-LINE)
                KS0I-33100(); /* check for any chgs*/
                KS0IW02.KS0IW-1ST-FBRC-LINE = KS0IM002.KS0IM-1ST-FBRC-LINE;
                KS0IW02.KS0IW-SCROLL-IDX = KS0IM002.KS0IM-1ST-FBRC-LINE;
                KS0IW02.KS0IW-END-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE + 2;
                KS0I-33102(); /* move in new lines*/
                ;
                exit stack;
                ;
              end
            end
          end
        end
      end
    end
  end
  if (converseVar.eventKey is pf5 /* PF5  was pressed*/
   && KS0IW00.KS0IW-FNC != "I")   /* and change screen*/
    if (KS0IW02.XGPCD != "03" /* If not aprl     GPC*/
     || KS0IW02.KS0IW-TOT-FBRC-LINES == 30) /* desc array is full*/
      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    else
      KS0I-33300(); /* disp. popup and process*/
      ;
      exit stack;
      ;
    end
  end
  if (converseVar.eventKey is pf7) /* PF7  was pressed*/
    if (KS0IW02.XGPCD != "03" /* If not aprl     GPC*/
     || KS0IW02.KS0IW-TOT-FBRC-LINES <= 3) /* no need to scroll*/
      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    else
      if (KS0IW02.KS0IW-1ST-FBRC-LINE == 1) /* if at top of desc*/
        KSWREC.XXXPRCNM = "33000"; /* Module identification*/
        converseLib.validationFailed(2); /* no previous pages to display*/
      else
        KS0I-33100(); /* check for desc chgs*/
        KS0I-33101(); /* setup to scroll fbrc bkwd*/
        KS0I-33102(); /* move in new lines*/
        ;
        exit stack; /* Exit to display map*/
        ;
      end
    end
  end
  if (converseVar.eventKey is pf8) /* PF8  was pressed*/
    if (KS0IW02.XGPCD != "03" /* If not aprl     GPC*/
     || KS0IW02.KS0IW-TOT-FBRC-LINES <= 3) /* no need to scroll*/
      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    else
      KS0IW02.KS0IW-FWD-LIMIT = KS0IW02.KS0IW-TOT-FBRC-LINES - 2;
      if (KS0IW02.KS0IW-1ST-FBRC-LINE == KS0IW02.KS0IW-TOT-FBRC-LINES
       || KS0IW02.KS0IW-1ST-FBRC-LINE >= 
      KS0IW02.KS0IW-FWD-LIMIT)
        KSWREC.XXXPRCNM = "33000"; /* Module identification*/
        converseLib.validationFailed(3); /* no more pages to display*/
      else
        KS0I-33100(); /* check for desc chgs*/
        KS0I-33200(); /* setup to scroll fbrc fwd*/
        KS0I-33102(); /* move in new lines*/
        ;
        exit stack; /* Exit to display map*/
        ;
      end
    end
  end
  if (converseVar.eventKey is pf19 /* PF19 was pressed*/
   && KS0IW02.XGPCD != "02")       /* If not footwear GPC*/
    KSWREC.XXXPRCNM = "33000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
  end
  if (converseVar.eventKey is pf20) /* or PF20 was pressed*/
    if (COMMAREA.CADELFL == "N"
     && KS0IW00.KS0IW-FNC != "I") /* and not inquiry function*/
      KSWREC.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    end
    KS0IW00.KS0IW-FNC = "I";
  end
  ;
  ;
end // end KS0I-33000

// check fbrc lines for chg
Function KS0I-33100()
  /* -------------------------------------------------------------*/
  /* resave current lines, if they have changed, and clear map*/
  /* -------------------------------------------------------------*/
  KS0IW02.KS0IW-SCROLL-IDX = KS0IW02.KS0IW-1ST-FBRC-LINE;
  KS0IW02.KS0IW-END-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE + 2;
  KS0IW02.KS0IW-MAP-LINE-IDX = 1;
  while (KS0IW02.KS0IW-SCROLL-IDX <= KS0IW02.KS0IW-END-LINE)
    if (KS0IM002.KS0IM-FABRIC-DESC[KS0IW-MAP-LINE-IDX] != 
    KS0IW02.KS0IW-FABRIC-DESC[KS0IW-SCROLL-IDX])
      KS0IW02.KS0IW-FBRC-CHANGED = "Y";
      KS0IW02.KS0IW-FABRIC-DESC[KS0IW-SCROLL-IDX] = KS0IM002.KS0IM-FABRIC-DESC[KS0IW-MAP-LINE-IDX];
    end
    KS0IM002.KS0IM-FABRIC-DESC[KS0IW-MAP-LINE-IDX] = "                                                  ";
    KS0IW-SCROLL-IDX = KS0IW-SCROLL-IDX + 1;
    KS0IW-MAP-LINE-IDX = KS0IW-MAP-LINE-IDX + 1;
  end
end // end KS0I-33100

// set up bkwd scroll
Function KS0I-33101()
  /* -------------------------------------------------------------*/
  /* Check nbr of previous lines available for display*/
  /* -------------------------------------------------------------*/
  if (KS0IW02.KS0IW-1ST-FBRC-LINE == 1
   || KS0IW02.KS0IW-1ST-FBRC-LINE <= 3)
    KS0IW02.KS0IW-1ST-FBRC-LINE = 1;
    KS0IW02.KS0IW-SCROLL-IDX = 1;
    KS0IW02.KS0IW-END-LINE = 3;
  else
    KS0IW02.KS0IW-END-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE - 1;
    KS0IW02.KS0IW-1ST-FBRC-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE - 3;
    KS0IW02.KS0IW-SCROLL-IDX = KS0IW02.KS0IW-1ST-FBRC-LINE;
  end
  KS0IM002.KS0IM-1ST-FBRC-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE;
  ;
end // end KS0I-33101

// move in new fbrc lines
Function KS0I-33102()
  /* -------------------------------------------------------------*/
  /* move in available previous description lines*/
  /* -------------------------------------------------------------*/
  KS0IW02.KS0IW-MAP-LINE-IDX = 1;
  while (KS0IW02.KS0IW-SCROLL-IDX <= KS0IW02.KS0IW-END-LINE)
    KS0IM002.KS0IM-FABRIC-DESC[KS0IW-MAP-LINE-IDX] = KS0IW02.KS0IW-FABRIC-DESC[KS0IW-SCROLL-IDX];
    KS0IW-SCROLL-IDX = KS0IW-SCROLL-IDX + 1;
    KS0IW-MAP-LINE-IDX = KS0IW-MAP-LINE-IDX + 1;
  end
  ;
end // end KS0I-33102

// set up fwd scroll
Function KS0I-33200()
  /* -------------------------------------------------------------*/
  /* Check nbr of next     lines available for display*/
  /* -------------------------------------------------------------*/
  KS0IW02.KS0IW-FWD-LIMIT = KS0IW02.KS0IW-TOT-FBRC-LINES - 2;
  if (KS0IW02.KS0IW-1ST-FBRC-LINE == KS0IW02.KS0IW-TOT-FBRC-LINES
   || KS0IW02.KS0IW-1ST-FBRC-LINE >= KS0IW02.KS0IW-FWD-LIMIT)
    KS0IW02.KS0IW-1ST-FBRC-LINE = KS0IW02.KS0IW-FWD-LIMIT;
    KS0IW02.KS0IW-SCROLL-IDX = KS0IW02.KS0IW-FWD-LIMIT;
    KS0IW02.KS0IW-END-LINE = KS0IW02.KS0IW-TOT-FBRC-LINES;
  else
    KS0IW02.KS0IW-1ST-FBRC-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE + 3;
    KS0IW02.KS0IW-SCROLL-IDX = KS0IW02.KS0IW-1ST-FBRC-LINE;
    KS0IW02.KS0IW-END-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE + 2;
  end
  KS0IM002.KS0IM-1ST-FBRC-LINE = KS0IW02.KS0IW-1ST-FBRC-LINE;
  ;
end // end KS0I-33200

// call popup and process
Function KS0I-33300()
  /* ******************************************************************/
  /* call pop-up with screen  line nbrs, return select, if any*/
  /* save currently displayed lines*/
  /* save lines from the tot-fbrc-lines back to the selection + 1,*/
  /* in the next slot in the array.  add 1 to tot-fbrc-lines*/
  /* display blank line, if it would show*/
  /* ******************************************************************/
  XPXX001(); /* perform pop-up window initialize*/
  XX0XW02.XX0XWHDR = "     INSERT BLANK LINE       "; /* heading*/
  ;
  while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
    KS0I-33310(); /* perform lines window*/
  end
  ;
       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/
  ;
  if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
    if (XX0XW02.XX0XWPIX == 1) /* first displayed line*/
      KS0IW02.KS0IW-INSERT-MARK = KS0IW02.KS0IW-1ST-FBRC-LINE;
    else
      if (XX0XW02.XX0XWPIX == 2) /* 2nd   displayed line*/
        KS0IW02.KS0IW-INSERT-MARK = KS0IW02.KS0IW-1ST-FBRC-LINE + 1;
      else
        if (XX0XW02.XX0XWPIX == 3) /* 3rd   displayed line*/
          KS0IW02.KS0IW-INSERT-MARK = KS0IW02.KS0IW-1ST-FBRC-LINE + 2;
        end
      end
    end
    KS0I-33320(); /* save desc and insert blnk line*/
  end
  ;
  KS0IW00.KS0IW-SWR = "N"; /* Reset request for data switch*/
  KS0IW00.KS0IW-SWF = "N"; /* Reset format the map switch*/
  ;
  converseLib.clearScreen();
   /* Restore the original map*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-33300

// converse pop up window
Function KS0I-33310()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up*/
         /* If first time through,*/
         /* set values on the map*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = " TO INSERT BLANK LINE AFTER SELECTED #";
    ;
     /* *********************************************************/
    XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
    KS0IW02.KS0IW-MAP-LINE-IDX = 1;
    while (XX0XW02.XX0XWCT2 <= 3) /* Until end of display lines*/
      XX0XM001.XX0XMCD[XX0XWCT2] = KS0IW02.KS0IW-MAP-LINE-IDX;
      XX0XM001.XX0XMDES[XX0XWCT2] = "-DISPLAYED LINE NBR";
      set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
      XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
      KS0IW02.KS0IW-MAP-LINE-IDX = KS0IW02.KS0IW-MAP-LINE-IDX + 1;
                                   /* Increment values for display*/
    end
    ;
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 3 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf7 /* If PF7 pressed*/
   || converseVar.eventKey is pf8) /* If PF8 pressed*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is enter) /* If enter pressed*/
      XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
      ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
      ;
      XX0XW02.XX0XWCT2 = 1; /* Screen index*/
      while (XX0XW02.XX0XWCT2 <= 3) /* Until end of screen data*/
        if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
          XX0XW02.XX0XWPIX = XX0XW02.XX0XWCT2;
          XX0XW02.XX0XWCT2 = 11; /* End loop*/
        end
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
      end
    else
      if (converseVar.eventKey not pf7 /* invalid pf key*/
       && converseVar.eventKey not pf8 
       && converseVar.eventKey not enter)
        XX0XW02.XX0XWERR = "Y"; /* set error flag*/
      end
    end
  end
  ;
  ;
end // end KS0I-33310

// save desc with insrted line
Function KS0I-33320()
  ;
  KS0I-33100(); /* check + save displayed lines*/
  ;
  KS0IW02.KS0IW-SCROLL-IDX = KS0IW02.KS0IW-TOT-FBRC-LINES;
  KS0IW02.KS0IW-INSERT-IDX = KS0IW02.KS0IW-TOT-FBRC-LINES + 1;
  ;
  /* *************************************************************/
  /* save description lines into the next slot in the array*/
  /* backwards, so that no lines are lost*/
  /* *************************************************************/
  while (KS0IW02.KS0IW-SCROLL-IDX > KS0IW02.KS0IW-INSERT-MARK)
    KS0IW02.KS0IW-FABRIC-DESC[KS0IW-INSERT-IDX] = KS0IW02.KS0IW-FABRIC-DESC[KS0IW-SCROLL-IDX];
    KS0IW02.KS0IW-SCROLL-IDX = KS0IW02.KS0IW-SCROLL-IDX - 1;
    KS0IW02.KS0IW-INSERT-IDX = KS0IW02.KS0IW-INSERT-IDX - 1;
  end
  ;
  KS0IW02.KS0IW-FABRIC-DESC[KS0IW-INSERT-IDX] = " ";
  KS0IW02.KS0IW-SCROLL-IDX = KS0IW02.KS0IW-1ST-FBRC-LINE;
  KS0IW02.KS0IW-END-LINE = KS0IW02.KS0IW-SCROLL-IDX + 2;
  KS0IW02.KS0IW-TOT-FBRC-LINES = KS0IW02.KS0IW-TOT-FBRC-LINES + 1;
  ;
  set KS0IM002.KS0IM-FABRIC-DESC[1] cursor;
  KS0IM002.KS0IM-TOT-FBRC-LINES = KS0IW02.KS0IW-TOT-FBRC-LINES;
  if (KS0IW02.KS0IW-TOT-FBRC-LINES > 3) /* need to be able to scroll*/
    set KS0IM002.KS0IM-1ST-FBRC-LINE initialAttributes;
    KS0IM002.KS0IM-PF7 = "PF7:UP";
    KS0IM002.KS0IM-PF8 = "PF8:DN";
  end
  ;
  set KS0IM002.KS0IM-FABRIC-DESC[1] cursor; /* put cursor on fbrc desc*/
  ;
  KS0I-33102(); /* put new lines on map*/
  ;
end // end KS0I-33320

// Verify the entered data
Function KS0I-35000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "35000"; /* Module identification*/
    set KS0IM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Perform standard Verify any Changed Data.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-NEW-HS-SWITCH != "Y")
    KS0IW05.KS0IW-MAP-HTS-NBR = KS0IW02.KS0IW-HTS-NBR;
  end
  ;
  if (KS0IW00.KS0IW-CPY-CLR-IN-PROCESS != "Y")
    KS0IW02.KS0IW-MAP-LINE-IDX = 1;
    KS0IW02.KS0IW-SCROLL-IDX = KS0IW02.KS0IW-1ST-FBRC-LINE;
    while (KS0IW02.KS0IW-MAP-LINE-IDX <= 3)
      if (KS0IM002.KS0IM-FABRIC-DESC[KS0IW-MAP-LINE-IDX] != 
      KS0IW02.KS0IW-FABRIC-DESC[KS0IW-SCROLL-IDX])
        KS0IW02.KS0IW-FABRIC-DESC[KS0IW-SCROLL-IDX] = KS0IM002.KS0IM-FABRIC-DESC[KS0IW-MAP-LINE-IDX];
        KS0IW02.KS0IW-FBRC-CHANGED = "Y";
        KS0IW00.KS0IW-CPY-CLR-IN-PROCESS = "N"; /* Set indicator*/
        KS0IW00.KS0IW-DATA-CHANGED = "Y";
      end
      KS0IW02.KS0IW-MAP-LINE-IDX = KS0IW02.KS0IW-MAP-LINE-IDX + 1;
      KS0IW02.KS0IW-SCROLL-IDX = KS0IW02.KS0IW-SCROLL-IDX + 1;
    end
    KS0IW00.KS0IW-PRCPCTCHG = "N";
    KS0IW00.KS0IW-OTHRFLDCHG = "N";
    if (KS0IM002.KS0IM-PRICE-PCT != KS0IW02.KS0IW-PRC-PCT)
      KS0IW00.KS0IW-PRCPCTCHG = "Y";
      KS0IW00.KS0IW-CPY-CLR-IN-PROCESS = "N"; /* Set indicator*/
      KS0IW00.KS0IW-DATA-CHANGED = "Y";
    end
    if (KS0IM002.KS0IM-DIM-CD != KS0IW02.XDMCD /* If fields changed*/
     || KS0IM002.KS0IM-HTS-NBR != KS0IW02.KS0IW-HTS-NBR
     || KS0IM002.KS0IM-RULE-NBR != KS0IW02.KS0IW-RULE-NBR
     || KS0IM002.KS0IM-SESN-CD != KS0IW02.KS0IW-XSECD
     || KS0IM002.KS0IM-KS-STY-NM[1] != KS0IW02.KS0IW-KS-STY-NM[1]
     || KS0IM002.KS0IM-KS-STY-NM[2] != KS0IW02.KS0IW-KS-STY-NM[2]
     || KS0IM002.KS0IM-STY-TYP-CD != KS0IW02.KS0IW-STY-TYP-CD
     || KS0IM002.KS0IM-CUST-STYLE-SH-DESC != KS0IW02.KS0IW-KS-SHORT-STY-NM
                                               
     || KS0IW02.KS0IW-FBRC-CHANGED == "Y"      
     || KS0IM002.KS0IM-ORIG-CD[1] != KS0IW02.KS0IW-ORIG-CD[1]
     || KS0IM002.KS0IM-ORIG-CD[2] != KS0IW02.KS0IW-ORIG-CD[2]
     || KS0IM002.KS0IM-ORIG-CD[3] != KS0IW02.KS0IW-ORIG-CD[3]
     || KS0IM002.KS0IM-ORIG-CD[4] != KS0IW02.KS0IW-ORIG-CD[4]
     || KS0IM002.KS0IM-ORIG-CD[5] != KS0IW02.KS0IW-ORIG-CD[5]
     || KS0IM002.KS0IM-ORIG-CD[6] != KS0IW02.KS0IW-ORIG-CD[6]
     || KS0IM002.KS0IM-STAT != KS0IW02.KS0IW-STAT
     || KS0IM002.KS0IM-CATLG-PAGE-NBR != KS0IW02.KS0IW-CATLG-PAGE-NBR
     || KS0IM002.KS0IM-TEAM-NBR != KS0IW02.KS0IW-TEAM-NBR
     || KS0IM002.KS0IM-SILH-CD != KS0IW02.KS0IW-SILH-CD
     || KS0IW00.KS0IW-NEW-HS-SWITCH == "Y")   
      KS0IW00.KS0IW-CPY-CLR-IN-PROCESS = "N"; /* Set indicator*/
      KS0IW00.KS0IW-DATA-CHANGED = "Y";
      KS0IW00.KS0IW-OTHRFLDCHG = "Y";
    else
      if (KS0IM002.KS0IM-SESN-YR-RNG != KS0IW02.KS0IW-SESN-YEAR)
        if (KS0IM002.KS0IM-SESN-YR-RNG == 0
         && KS0IW02.KS0IW-XSNYR == 0)
         /* next sentence*/
        else
          KS0IW00.KS0IW-CPY-CLR-IN-PROCESS = "N"; /* Set indicator*/
          KS0IW00.KS0IW-DATA-CHANGED = "Y";
        end
      else
        if (KS0IM002.KS0IM-SESN-YR-RNG == 0
         && KS0IW02.KS0IW-XSNYR == 0)
          KS0IW00.KS0IW-CPY-CLR-IN-PROCESS = "N"; /* Set indicator*/
          KS0IW00.KS0IW-DATA-CHANGED = "Y";
        end
      end
    end
  else
    KS0IW00.KS0IW-DATA-CHANGED = "Y";
  end
  ;
  /* ------------------------------------------------------------*/
  /* If COPY FROM CLR entered, verify product exists.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-CPY-COLR-CD-ID > " " /* If copy color entered*/
   && KS0IW02.XGPCD != "02")              /* and not footwear*/
    set VCPROD02 empty; /* Clear record*/
    VCPROD02.SY2CLRID = KS0IM002.KS0IM-CPY-COLR-CD-ID;
    KS0I-26100(); /* Select unique VCPROD02*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If product exists*/
      KS0IW02.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
      KS0IW02.XDMCD = VCPROD02.XDMCD; /* Move map to WS flds*/
      KS0IW02.KS0IW-SAVE-DIM = VCPROD02.XDMCD;
      if (VCPROD02.KS-HTS-CPTR-CD == " ") /* If HS number blank*/
        KS0IW02.KS0IW-HTS-NBR = " "; /* remove '.' from line*/
      end
      KS0IW02.KS0IW-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
      KS0IW02.KS0IW-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
      KS0IW02.KS0IW-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
      KS0IW02.KS0IW-HTS-2ND-SHDG-CD = VCPROD02.KS-HTS-2ND-SHDG-CD;
      KS0IW02.KS0IW-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
      KS0IW01.KS0IW-HTS-NBR = KS0IW02.KS0IW-HTS-NBR;
      KS0I-11234(); /* Obtain VHSNBR01 row*/
      KS0IW02.KS0IW-RULE-NBR = VCPROD02.KS-RULE-NBR;
      KS0IW02.KS0IW-CATLG-PAGE-NBR = VCPROD02.SYNCTPGN;
      KS0IW02.KS0IW-SAVE-XPRMT-STY = VCPROD02.KS-XPRMT-STY-NBR;
      KS0IW02.KS0IW-SAVE-STY-TYP = VCPROD02.YKS-STY-TYP-CD;
      if (VCPROD02.KS-PRBM-NBR > 0)
        KS0I-21200(); /* Obtain problems process*/
      end
      KS0IW02.KS0IW-FABRIC-DESC[1] = " ";
      KS0IW02.KS0IW-FABRIC-DESC[2] = " ";
      KS0IW02.KS0IW-FABRIC-DESC[3] = " ";
      KS0I-21300(); /* Obtain text process*/
      KS0I-21400(); /* Save data process*/
      KS0IW00.KS0IW-CPY-CLR-IN-PROCESS = "Y"; /* Set indicator*/
      KS0IW00.KS0IW-SWF = "Y"; /* Format the map ind*/
      KS0IM002.KS0IM-CPY-COLR-CD-ID = " "; /* Clear copy from clr*/
      converseLib.validationFailed(85); /* Press enter to copy message*/
      return; /* Exit to display map*/
      ;
    else
      KSWREC.XXXPRCNM = "35000"; /* Module identification*/
      set KS0IM002.KS0IM-CPY-COLR-CD-ID cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* Cpy clr does not exist message*/
      return;
      ;
    end
  end
  ;
  if (KS0IW00.KS0IW-CPY-CLR-IN-PROCESS != "Y" /* If copy color not entered*/
   && KS0IW02.SY2CLRID == "***"               /* and multiple colors*/
   && KS0IM002.KS0IM-COLR-CD-ID != KS0IW02.SY2CLRID)
    if (KS0IW02.KS0IW-XSECD == KS0IM002.KS0IM-SESN-CD /* If map not changed*/
     && KS0IW02.KS0IW-HTS-NBR == KS0IM002.KS0IM-HTS-NBR
     && KS0IW02.KS0IW-STY-TYP-CD == KS0IM002.KS0IM-STY-TYP-CD
     /* AND KS0IW02.KS0IW-FABRIC-DESC(1) EQ KS0IM002.KS0IM-FABRIC-DESC(1)*/
     /* AND KS0IW02.KS0IW-FABRIC-DESC(2) EQ KS0IM002.KS0IM-FABRIC-DESC(2)*/
     /* AND KS0IW02.KS0IW-FABRIC-DESC(3) EQ KS0IM002.KS0IM-FABRIC-DESC(3);*/
     && KS0IW02.KS0IW-FBRC-CHANGED == "N")           
      if (KS0IW02.KS0IW-SESN-YEAR == KS0IM002.KS0IM-SESN-YR-RNG)
        if (KS0IW02.KS0IW-XSNYR != 0)
          KSWREC.XXXPRCNM = "35000"; /* Module identification*/
          set KS0IM002.KS0IM-SESN-CD cursor, bold; /* Highlight*/
          set KS0IM002.KS0IM-SESN-YR-RNG bold; /* Highlight*/
          set KS0IM002.KS0IM-HTS-NBR bold; /* Highlight*/
          set KS0IM002.KS0IM-STY-TYP-CD bold; /* Highlight*/
          set KS0IM002.KS0IM-FABRIC-DESC[1] bold; /* Highlight*/
          set KS0IM002.KS0IM-FABRIC-DESC[2] bold; /* Highlight*/
          set KS0IM002.KS0IM-FABRIC-DESC[3] bold; /* Highlight*/
          converseLib.validationFailed(86); /* Must change data message*/
          return;
        end
      else
        if (KS0IM002.KS0IM-SESN-YR-RNG == 0
         && KS0IW02.KS0IW-XSNYR == 0)
          KSWREC.XXXPRCNM = "35000"; /* Module identification*/
          set KS0IM002.KS0IM-SESN-CD cursor, bold; /* Highlight*/
          set KS0IM002.KS0IM-SESN-YR-RNG bold; /* Highlight*/
          set KS0IM002.KS0IM-HTS-NBR bold; /* Highlight*/
          set KS0IM002.KS0IM-STY-TYP-CD bold; /* Highlight*/
          set KS0IM002.KS0IM-FABRIC-DESC[1] bold; /* Highlight*/
          set KS0IM002.KS0IM-FABRIC-DESC[2] bold; /* Highlight*/
          set KS0IM002.KS0IM-FABRIC-DESC[3] bold; /* Highlight*/
          converseLib.validationFailed(86); /* Must change data message*/
          return;
        end
      end
    end
  end
  ;
  if (KS0IW00.KS0IW-FNC != "I") /* If not inquiry function*/
    KS0I-25100(); /* Default status if not entered*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return; /* Exit to display map*/
  else
    if (KS0IW00.KS0IW-FNC != "I") /* If not inquiry function*/
      KS0I-35200(); /* Verify the entered data*/
    end
  end
  ;
  ;
end // end KS0I-35000

// Edit the rest of the fields
Function KS0I-35200()
  /* ------------------------------------------------------------*/
  /* Verify the Footwear Silhouette code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-BUS-UNIT-CD != "03" /* If not apparel*/
   && KS0IM002.KS0IM-SILH-CD > " "       /* and silhouette entered*/
   && KS0IM002.KS0IM-SILH-CD != KS0IW02.KS0IW-SILH-CD)
    if (KS0IM002.KS0IM-SILH-CD in XSUTBL.XSUCD /* If code in table*/
     && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      KS0IW02.KS0IW-SILH-ABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
      KS0IM002.KS0IM-SILH-ABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
      if (KS0IM002.KS0IM-SILH-CD == PG2REC.XSUCD)
        KS0IW02.KS0IW-SILH-CD = " ";
        set KS0IM002.KS0IM-SILH-CD normal;
        KS0IW00.KS0IW-SIL-OVERRIDE = "N";
      else
        KS0IW02.KS0IW-SILH-CD = KS0IM002.KS0IM-SILH-CD;
        set KS0IM002.KS0IM-SILH-CD bold;
        KS0IW00.KS0IW-SIL-OVERRIDE = "Y";
      end
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0IM002.KS0IM-SILH-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(125); /* Field missing or invalid*/
      ;
    end
  else
    if (KS0IM002.KS0IM-SILH-CD == " " /* If silh cd blanked out*/
     && KS0IM002.KS0IM-SILH-CD != KS0IW02.KS0IW-SILH-CD)
      KS0IW02.KS0IW-SILH-CD = " ";
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Customs Product Status code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-STAT > " ") /* If status entered*/
    if (KS0IM002.KS0IM-STAT in YPRTBL.YPR-PROD-STAT-CD /* Code in table*/
     && YPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")      /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0IM002.KS0IM-STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(69); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IX2 = 6; /* Set index*/
  while (KS0IW00.KS0IW-IX2 > 0) /* Until end of origin codes*/
    if (KS0IM002.KS0IM-ORIG-CD[KS0IW-IX2] > " " /* If origin entered*/
     && KS0IW02.XGPCD != "02")                 
      if (KS0IM002.KS0IM-ORIG-CD[KS0IW-IX2] in XCTTBL.XCTCD /* Code in table*/
       && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")         /* and active status*/
        ;
      else
        ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
        ;
        KSWREC.XXXPRCNM = "35200"; /* Module identification*/
        set KS0IM002.KS0IM-ORIG-CD[KS0IW-IX2] cursor, bold; /* Highlight*/
        converseLib.validationFailed(70); /* Field missing or invalid*/
        ;
      end
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 - 1; /* Decrement index*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Fabric Description entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-FABRIC-DESC[1] == " " /* If fabric desc not entered*/
   && KS0IM002.KS0IM-FABRIC-DESC[2] == " " 
   && KS0IM002.KS0IM-FABRIC-DESC[3] == " " 
   && KS0IW02.XGPCD != "02"                
   && KS0IW02.XGPCD != "EQ")              
    KSWREC.XXXPRCNM = "35200"; /* Module identification*/
    set KS0IM002.KS0IM-FABRIC-DESC[1] cursor, bold; /* Highlight*/
    set KS0IM002.KS0IM-FABRIC-DESC[2] bold; /* Highlight*/
    set KS0IM002.KS0IM-FABRIC-DESC[3] bold; /* Highlight*/
    converseLib.validationFailed(74); /* Field missing or invalid*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style Short Description entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-CUST-STYLE-SH-DESC == " ") /* Short desc not entered*/
    KSWREC.XXXPRCNM = "35200"; /* Module identification*/
    set KS0IM002.KS0IM-CUST-STYLE-SH-DESC cursor, bold;
    converseLib.validationFailed(75); /* Field missing or invalid*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style Type code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-STY-TYP-CD > " ") /* Style type code entered*/
    if (KS0IM002.KS0IM-STY-TYP-CD in YKSTBL.YKS-STY-TYP-CD /* Code in table*/
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* and active status*/
      KS0IM002.KS0IM-STY-TYP-DESC = YKSTBL.YKS-STY-TYP-DESC[sysVar.arrayIndex];
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0IM002.KS0IM-STY-TYP-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(76); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Style Description entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-KS-STY-NM[1] == " ") /* If style name not entered*/
    KSWREC.XXXPRCNM = "35200"; /* Module identification*/
    set KS0IM002.KS0IM-KS-STY-NM[1] cursor, bold; /* Highlight*/
    set KS0IM002.KS0IM-KS-STY-NM[2] bold; /* Highlight*/
    converseLib.validationFailed(77); /* Field missing or invalid*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Ruling Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-RULE-NBR > " ") /* If rule nbr entered*/
    set VBDRUL01 empty; /* Clear record*/
    VBDRUL01.XGPCD = KS0IM002.KS0IM-BUS-UNIT-CD;
    VBDRUL01.KS-RULE-NBR = KS0IM002.KS0IM-RULE-NBR;
    KS0I-15302(); /* Select VBDRUL01 row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
      KS0IW00.KS0IW-DATE-WORK = VBDRUL01.KS-RULE-DT; /* Move rule date*/
      KS0IW00.KS0IW-YY = KS0IW00.KS0IW-DATE-YR; /* Move year*/
      KS0IW00.KS0IW-MM = KS0IW00.KS0IW-DATE-MO; /* Move month*/
      KS0IW00.KS0IW-DD = KS0IW00.KS0IW-DATE-DAY; /* Move day*/
      KS0IM002.KS0IM-RULE-DT = KS0IW00.KS0IW-DATE; /* Move to map fld*/
      set KS0IM002.KS0IM-RULE-DT skip;
      set KS0IM002.KS0IM-DT-FIELD skip;
    else
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0IM002.KS0IM-RULE-NBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Dimension code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-DIM-CD > " " /* Dimension code entered*/
   && KS0IM002.KS0IM-DIM-CD != "**") /* and not multiple dim codes*/
    if (KS0IM002.KS0IM-DIM-CD in XDMTBL.XDMCD /* Code in table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
    /* Next Sentence*/
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0IM002.KS0IM-DIM-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(78); /* Field missing or invalid*/
      ;
    end
  else
    ;
    if (KS0IM002.KS0IM-DIM-CD == " ") /* Dimension code not entered*/
      KS0IM002.KS0IM-DIM-CD = "00"; /* Default dimension code*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Color Code entered is in selected set.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
  if (KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] == "***" /* If multiple clrs*/
   && KS0IW00.KS0IW-CPY-CLR-IN-PROCESS == "N"          
   && KS0IM002.KS0IM-COLR-CD-ID !=                     
  KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1])             /* and color changed*/
    KS0I-26600(); /* Move color array*/
    if (KS0IM002.KS0IM-COLR-CD-ID in KS0IW02.KS0IW-COLOR) /* Code in table*/
      KS0IW02.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
      KS0IW02.KS0IW-COLOR-TABLE = " ";
      ;
    else
      ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0IM002.KS0IM-COLR-CD-ID cursor, bold; /* Highlight*/
      converseLib.validationFailed(87); /* Field missing or invalid*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the HS Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-HTS-NBR > " ") /* If HS number entered*/
    KS0IW01.KS0IW-HTS-NUMBER = KS0IM002.KS0IM-HTS-NBR;
    KS0IW00.KS0IW-HTS-FORMAT-SW = "Y"; /* Set format switch*/
    KS0I-15309(); /* Verify HS format*/
    if (KS0IW00.KS0IW-HTS-FORMAT-SW == "N") /* If HS format incorrect*/
      set KS0IM002.KS0IM-HTS-NBR cursor, bold; /* Highlight field*/
    end
    if (KS0IM002.KS0IM-HTS-NBR != KS0IW02.KS0IW-HTS-NBR)
      KS0IW02.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
      KS0IW00.KS0IW-NEW-HS-SWITCH = "Y";
      ;
      if (KS0IW00.KS0IW-HTS-FORMAT-SW == "Y") /* If HS number OK*/
        KS0IW01.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
        KS0IW00.KS0IW-HTS-NBR-WORK = KS0IM002.KS0IM-HTS-NBR;
        if (KS0IW01.KS0IW-HTS-CPTR-CD > " ") /* If chapter code exists*/
          KS0I-25201(); /* ; /* Select VHSCHP01 row*/
        end
        if (SQLCA.VAGen_SQLCODE == 0 /* If chapter code OK*/
         && KS0IW01.KS0IW-HTS-HDG-CD > " ") /* and heading exists*/
          KS0I-25202(); /* ; /* Select VHSHDG01 row*/
          if (SQLCA.VAGen_SQLCODE == 0 /* If heading code OK*/
           && KS0IW01.KS0IW-HTS-1ST-SHDG-CD > " ")
                                   /* and 1st subheading exists*/
            if (KS0IW01.KS0IW-HTS-2ND-SHDG-CD > " ")
                                   /* and 2nd subheading exists*/
              KS0I-25203(); /* Select VHSSHD01 row*/
              if (SQLCA.VAGen_SQLCODE == 0) /* If subheading code OK*/
                if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
                 || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
                  KS0IW01.KS0IW-HTS-2ND-SHDG-CD = KS0IW00.KS0IW-HTS-2ND-SHDG-2;
                  KS0I-25203();
                  KS0IW01.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
                  if (SQLCA.VAGen_SQLCODE == 0) /* If entire HS number OK*/
                    KS0I-11235(); /* Format general duty field*/
                  else
                    if (SQLCA.VAGen_SQLCODE == 100) /* If subheading code not OK*/
                      KSWREC.XXXPRCNM = "35200";
                                   /* Module identification*/
                      KS0I-25204(); /* Process HS Error Messages*/
                    end
                  end
                else
                  if (KS0IW01.KS0IW-HTS-STAT-CD > " ")
                                   /* and status code exists*/
                    KS0I-11234(); /* Select VHSNBR01 row*/
                    if (SQLCA.VAGen_SQLCODE == 0) /* If entire HS number OK*/
                      KS0I-11235(); /* Format general duty field*/
                    else
                      if (SQLCA.VAGen_SQLCODE == 100) /* If subheading code not OK*/
                        KSWREC.XXXPRCNM = "35200";
                                   /* Module identification*/
                        KS0I-25204(); /* Process HS Error Messages*/
                      end
                    end
                  end
                end
              else
                if (SQLCA.VAGen_SQLCODE == 100) /* If subheading code not OK*/
                  KSWREC.XXXPRCNM = "35200"; /* Module identification*/
                  KS0I-25204(); /* Process HS Error Messages*/
                end
              end
            else
              KSWREC.XXXPRCNM = "35200"; /* Module identification*/
              KS0I-25204(); /* Process HS Error Messages*/
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* If heading doesn't exist*/
              KSWREC.XXXPRCNM = "35200"; /* Module identification*/
              KS0I-25204(); /* Process HS Error Messages*/
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* If chapter doesn't exist*/
            KSWREC.XXXPRCNM = "35200"; /* Module identification*/
            KS0I-25204(); /* Process HS Error Messages*/
          end
        end
        if (VHSCHP01.XXXSTAT == "I" /* If inactive status*/
         || VHSHDG01.XXXSTAT == "I" 
         || VHSSHD01.XXXSTAT == "I" 
         || VHSNBR01.XXXSTAT == "I")
          KSWREC.XXXPRCNM = "35200"; /* Module identification*/
          KS0I-25204(); /* Process HS Error Messages*/
        end
      else
        set KS0IM002.KS0IM-HTS-NBR cursor, bold; /* Highlight field*/
      end
      KS0IW01.KS0IW-HTS-NBR = " ";
    end
  end
  /* ------------------------------------------------------------*/
  /* Verify the Team Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-TEAM-NBR > " " /* If team nbr entered*/
   && KS0IM002.KS0IM-TEAM-NBR != KS0IW02.KS0IW-TEAM-NBR)
    set VCTEAM01 empty; /* Clear record*/
    VCTEAM01.KS-TEAM-CD = KS0IM002.KS0IM-TEAM-NBR;
    KS0I-35201(); /* Select VCTEAM01 row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* team nbr exists*/
      if (VCTEAM01.KS-TEAM-CD == VHSNBR01.KS-TEAM-CD)
        KS0IW02.KS0IW-TEAM-NBR = " ";
        set KS0IM002.KS0IM-TEAM-NBR normal;
        KS0IW00.KS0IW-TEAM-OVERRIDE = "N";
      else
        KS0IW02.KS0IW-TEAM-NBR = KS0IM002.KS0IM-TEAM-NBR;
        set KS0IM002.KS0IM-TEAM-NBR bold;
        KS0IW00.KS0IW-TEAM-OVERRIDE = "Y";
      end
    else
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0IM002.KS0IM-TEAM-NBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(20); /* Field missing or invalid*/
    end
  else
    if (KS0IM002.KS0IM-TEAM-NBR == " " /* If team nbr blanked out*/
     && KS0IM002.KS0IM-TEAM-NBR != KS0IW02.KS0IW-TEAM-NBR)
      KS0IW02.KS0IW-TEAM-NBR = " ";
    end
  end
  if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y")
    set KS0IM002.KS0IM-TEAM-NBR bold;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Catalog Page Number entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-CATLG-PAGE-NBR > 0) /* If cat page entered*/
    KS0IW00.KS0IW-CAT-EOF = "N";
    KS0I-21401(); /* Select VCATLG01 set*/
    KS0I-21402(); /* Fetch VCATLG01 row*/
    while (KS0IW00.KS0IW-CAT-EOF == "N")
      if (SYNREC.SYRCATID in SYRTBL.SYRCATID)
        if (SYRTBL.XSECD[sysVar.arrayIndex] == KS0IW02.KS0IW-XSECD
         && SYRTBL.XSNYR[sysVar.arrayIndex] == KS0IW02.KS0IW-XSNYR)
          if (SYNREC.SYNCTPGN == KS0IM002.KS0IM-CATLG-PAGE-NBR)
            KS0IW02.KS0IW-CATLG-PAGE-NBR = 0;
            set KS0IM002.KS0IM-CATLG-PAGE-NBR normal;
            KS0IW00.KS0IW-CAT-OVERRIDE = "N";
          else
            KS0IW02.KS0IW-CATLG-PAGE-NBR = KS0IM002.KS0IM-CATLG-PAGE-NBR;
            set KS0IM002.KS0IM-CATLG-PAGE-NBR bold;
            KS0IW00.KS0IW-CAT-OVERRIDE = "Y";
          end
          KS0IW00.KS0IW-CAT-EOF = "Y";
        end
      end
      KS0I-21402(); /* Fetch VCATLG01 row*/
    end
    KS0I-21403(); /* Close VCATLG01 set*/
  else
    if (KS0IM002.KS0IM-CATLG-PAGE-NBR == 0 /* If page nbr blanked out*/
     && KS0IM002.KS0IM-CATLG-PAGE-NBR != KS0IW02.KS0IW-CATLG-PAGE-NBR)
      KS0IW02.KS0IW-CATLG-PAGE-NBR = 0;
    end
  end
  if (KS0IW00.KS0IW-CAT-OVERRIDE == "Y")
    set KS0IM002.KS0IM-CATLG-PAGE-NBR bold;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Year range entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-SESN-YR-RNG != 0) /* If season year entered*/
    if (KS0IM002.KS0IM-SESN-YR-RNG >= 00
     && KS0IM002.KS0IM-SESN-YR-RNG <= 99)
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0IM002.KS0IM-SESN-YR-RNG cursor, bold; /* Highlight*/
      converseLib.validationFailed(26); /* Field missing or invalid*/
    end
  else
    if (KS0IM002.KS0IM-BUS-UNIT-CD != "02")
      KSWREC.XXXPRCNM = "35200"; /* Module identification*/
      set KS0IM002.KS0IM-SESN-YR-RNG cursor, bold; /* Highlight*/
      converseLib.validationFailed(26); /* Field missing or invalid*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the Season Code entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IM002.KS0IM-SESN-CD in XSETBL.XSECD /* Code in table*/
   && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    /* Next Sentence*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    KSWREC.XXXPRCNM = "35200"; /* Module identification*/
    set KS0IM002.KS0IM-SESN-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(27); /* Field missing or invalid*/
    ;
  end
  ;
  if (KS0IM002.KS0IM-BUS-UNIT-CD == "03") /* If apparel*/
    if (KS0IM002.KS0IM-HTS-NBR > " ")
      if (KS0IM002.KS0IM-PRICE-PCT == 0)
        KSWREC.XXXPRCNM = "35200"; /* Module identification*/
        set KS0IM002.KS0IM-PRICE-PCT cursor, bold; /* Highlight*/
        converseLib.validationFailed(169); /* Field missing or invalid*/
      end
    end
  end
  ;
end // end KS0I-35200

// Select unique VCTEAM01 row
Function KS0I-35201()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6060" ("S ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "35201"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.VCTEAM01-GROUP; /* Table group*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-35201

// Process valid input request
Function KS0I-36000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If enter was pressed and no errors and copy from color in*/
  /* process:  check to see if original text and problems should*/
  /* be deleted, if not add text, problems, and update product.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter /* Enter pressed*/
   || converseVar.eventKey is pf16  /* or HS assignment*/
   || converseVar.eventKey is pf19) /* or PL assignment*/
    if (converseVar.validationMsgNum == 0) /* and no errors*/
      ;
      if (KS0IW00.KS0IW-DATA-CHANGED == "Y"
       || KS0IW00.KS0IW-MAP3-CHANGED == "Y"
       || KS0IW00.KS0IW-MAP4-CHANGED == "Y"
       || KS0IW00.KS0IW-FNC == "X")
        ;
        if (KS0IW00.KS0IW-FNC == "C" /* and chg function requested*/
         && KS0IW00.KS0IW-CPY-CLR-IN-PROCESS == "Y") /* and cpy color*/
          KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
          ;
          if (KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] != "***")
            VCPROD02.KS-TXT-NBR = KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1];
            KS0I-36100(); /* Delete original text process*/
            KS0IW00.KS0IW-TEXT-TABLE = " ";
            ;
            if (KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1] > 0
             && KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1] != 
            KS0IW02.KS0IW-MAP2-PRBM)
              VCPROD02.KS-PRBM-NBR = KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1];
              KS0I-36200(); /* Delete original problem process*/
            end
            ;
          end
          if (KS0IM002.KS0IM-COLR-CD-ID == "***") /* If multiple colors*/
            KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
            KS0I-26600(); /* Move color code array*/
          else
            KS0IW02.KS0IW-COLOR-TABLE = " "; /* Clear color table*/
            KS0IW02.KS0IW-COLOR[1] = KS0IM002.KS0IM-COLR-CD-ID;
          end
          KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
          XX0XS01(); /* Get current date/time*/
          while (KS0IW02.KS0IW-COLOR[KS0IW-IX2] > " " /* Color exists*/
           || KS0IW00.KS0IW-IX2 == 1) /* or first time*/
            VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX2];
            VCPROD02.XDMCD = KS0IW02.KS0IW-SAVE-DIM;
            VCPROD02.KS-XPRMT-STY-NBR = KS0IW02.KS0IW-SAVE-XPRMT-STY;
            VCPROD02.YKS-STY-TYP-CD = KS0IW02.KS0IW-SAVE-STY-TYP;
            KS0I-26100(); /* Select unique VCPROD02 row*/
            if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
              KS0IW00.KS0IW-SAVE-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
              KS0IW00.KS0IW-SAVE-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
              KS0IW00.KS0IW-SAVE-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
              KS0IW00.KS0IW-SAVE-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
              KS0IW00.KS0IW-SAVE-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
              KS0IW00.KS0IW-SAVE-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
              KS0IW00.KS0IW-SAVE-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
              VCPROD02.KS-HTS-CPTR-CD = KS0IW02.KS0IW-HTS-CPTR-CD;
              VCPROD02.KS-HTS-HDG-CD = KS0IW02.KS0IW-HTS-HDG-CD;
              VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW02.KS0IW-HTS-1ST-SHDG-CD;
              VCPROD02.KS-HTS-2ND-SHDG-CD = KS0IW02.KS0IW-HTS-2ND-SHDG-CD;
              VCPROD02.KS-HTS-STAT-CD = KS0IW02.KS0IW-HTS-STAT-CD;
              VCPROD02.KS-RULE-NBR = KS0IW02.KS0IW-RULE-NBR;
              VCPROD02.KS-STY-NM[1] = KS0IW02.KS0IW-KS-STY-NM[1];
              VCPROD02.KS-STY-NM[2] = KS0IW02.KS0IW-KS-STY-NM[2];
              VCPROD02.KS-SHORT-STY-NM = KS0IW02.KS0IW-KS-SHORT-STY-NM;
              VCPROD02.KS-XCT-ORIG-CD[1] = KS0IW02.KS0IW-ORIG-CD[1];
              VCPROD02.KS-XCT-ORIG-CD[2] = KS0IW02.KS0IW-ORIG-CD[2];
              VCPROD02.KS-XCT-ORIG-CD[3] = KS0IW02.KS0IW-ORIG-CD[3];
              VCPROD02.KS-XCT-ORIG-CD[4] = KS0IW02.KS0IW-ORIG-CD[4];
              VCPROD02.KS-XCT-ORIG-CD[5] = KS0IW02.KS0IW-ORIG-CD[5];
              VCPROD02.KS-XCT-ORIG-CD[6] = KS0IW02.KS0IW-ORIG-CD[6];
              VCPROD02.SYNCTPGN = KS0IW02.KS0IW-CATLG-PAGE-NBR;
              VCPROD02.YPR-PROD-STAT-CD = KS0IW02.KS0IW-STAT;
              VCPROD02.KS-TXT-NBR = KS0IW02.KS0IW-MAP2-TEXT;
              VCPROD02.KS-PRBM-NBR = KS0IW02.KS0IW-MAP2-PRBM;
              KS0I-46100(); /* Update VCPROD02 row*/
              if (SQLCA.VAGen_SQLCODE == 0) /* If row updtd successfully*/
                KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
                KS0IW00.KS0IW-FNC = KS0IW00.KS0IW-SAVE-FNC;
                KS0IW00.KS0IW-VCPROD02-UPD = "Y";
                                   /* Row updated switch*/
                KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
                KS0I-26700(); /* Write VKSAUD01 rows*/
                if (SQLCA.VAGen_SQLCODE != 0) /* If row not added*/
                  converseLib.validationFailed(11); /* Data in use message*/
                  KSWREC.XXXPRCNM = "36000";
                  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                  sysLib.rollback();
                  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                  
                  return;
                end
              else
                KSWREC.XXXPRCNM = "36000"; /* Module identification*/
                converseLib.validationFailed(10); /* Unexpected error*/
                KS0IW00.KS0IW-SWR = "N"; /* Do not request data*/
                KS0IW00.KS0IW-SWF = "N"; /* Do not format map*/
                KS0IW00.KS0IW-SWD = "2"; /* Map to be displayed switch*/
                KS0IW00.KS0IW-VCPROD02-UPD = "N";
                VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                sysLib.rollback();
                VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                 /* Reset all DB modifications*/
                return; /* Return to previous process*/
              end
            else
              KSWREC.XXXPRCNM = "36000"; /* Module identification*/
              set KS0IM002.KS0IM-COLR-CD-ID cursor, bold; /* Highlight*/
              converseLib.validationFailed(79); /* Product is a duplicate*/
              KS0IW00.KS0IW-SWR = "N"; /* Do not request data*/
              KS0IW00.KS0IW-SWF = "N"; /* Do not format map*/
              KS0IW00.KS0IW-SWD = "2"; /* Map to be displayed switch*/
              KS0IW00.KS0IW-VCPROD02-UPD = "N";
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* Reset all DB modifications*/
              return; /* Return to previous process*/
            end
            KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
          end
          KS0IW00.KS0IW-NEW-HS-SWITCH = "N";
          ;
        else
          ;
          if (KS0IW00.KS0IW-FNC == "C" /* and chg function requested*/
           && KS0IW00.KS0IW-CPY-CLR-IN-PROCESS == "N")
                                   /* and not cpy color*/
            ;
            if (KS0IM003.KS0IM-PRBM-CD[1] > " ") /* If problems exist*/
              KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
              ;
              if (KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1] == 0)
                KS0IW00.KS0IW-CTL-FUNC = "P";
                KS0I-26200(); /* Get next prbm-nbr from VKSCTL01*/
                VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
                KS0IW02.KS0IW-MAP2-PRBM = VCPROB01.KS-PRBM-NBR;
                KS0I-26400(); /* Add VCPROB01 rows process*/
              else
                VCPROD02.KS-PRBM-NBR = KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1];
                KS0I-36200(); /* Delete original problem process*/
                KS0IW02.KS0IW-MAP2-PRBM = VCPROD02.KS-PRBM-NBR;
                VCPROB01.KS-PRBM-NBR = VCPROD02.KS-PRBM-NBR;
                KS0I-26400(); /* Add VCPROB01 rows process*/
              end
              ;
            else
              if (KS0IW00.KS0IW-MAP3-CHANGED == "Y")
                KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
                if (KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1] > 0)
                  VCPROD02.KS-PRBM-NBR = KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1];
                  KS0I-36200(); /* Delete original problem process*/
                  KS0IW02.KS0IW-MAP2-PRBM = VCPROD02.KS-PRBM-NBR;
                  VCPROB01.KS-PRBM-NBR = VCPROD02.KS-PRBM-NBR;
                  KS0I-26400(); /* Add VCPROB01 rows process*/
                end
              end
            end
            ;
            KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
            if (KS0IW02.KS0IW-FBRC-CHANGED == "Y"
             || KS0IM002.KS0IM-SESN-CD != KS0IW02.KS0IW-XSECD
             || KS0IM002.KS0IM-STY-TYP-CD != KS0IW02.KS0IW-STY-TYP-CD
             || KS0IM002.KS0IM-HTS-NBR != 
            KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1]
             || KS0IW00.KS0IW-MAP4-CHANGED == "Y")
              if (KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] == 
              KS0IM002.KS0IM-COLR-CD-ID
               && KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1] > 0)
                VCPROD02.KS-TXT-NBR = KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1];
                KS0IW02.KS0IW-MAP2-TEXT = VCPROD02.KS-TXT-NBR;
                KS0I-36100(); /* Delete original text process*/
                KS0I-26300(); /* Add VKSTXT01 rows process*/
              else
                if (KS0IW02.XGPCD == "02" /* If gpc 02 and no text chgs*/
                 && KS0IW00.KS0IW-MAP4-CHANGED == "N")
                  /* Continue on*/
                else
                  KS0IW00.KS0IW-CTL-FUNC = "T";
                  KS0I-26200();
                  VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
                  KS0IW02.KS0IW-MAP2-TEXT = VKSTXT01.KS-TXT-NBR;
                  KS0I-26300(); /* Add VKSTXT01 rows process*/
                end
              end
            else
              if (KS0IM002.KS0IM-SESN-YR-RNG != KS0IW02.KS0IW-SESN-YEAR)
  /* IF KS0IM002.KS0IM-SESN-YR-RNG EQ '  '*/
                if (KS0IM002.KS0IM-SESN-YR-RNG == 00
                 && KS0IW02.KS0IW-XSNYR == 0)
                  if (KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] == 
                  KS0IM002.KS0IM-COLR-CD-ID
                   && KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1] > 0)
                    VCPROD02.KS-TXT-NBR = KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1];
                    KS0IW02.KS0IW-MAP2-TEXT = VCPROD02.KS-TXT-NBR;
                    KS0I-36100(); /* Delete original text process*/
                    KS0I-26300(); /* Add VKSTXT01 rows process*/
                  else
                    KS0IW00.KS0IW-CTL-FUNC = "T";
                    KS0I-26200();
                    VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
                    KS0IW02.KS0IW-MAP2-TEXT = VKSTXT01.KS-TXT-NBR;
                    KS0I-26300(); /* Add VKSTXT01 rows process*/
                  end
                end
              else
                if (KS0IM002.KS0IM-SESN-YR-RNG == 00
                 && KS0IW02.KS0IW-XSNYR == 0)
                  if (KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] == 
                  KS0IM002.KS0IM-COLR-CD-ID
                   && KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1] > 0)
                    VCPROD02.KS-TXT-NBR = KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1];
                    KS0IW02.KS0IW-MAP2-TEXT = VCPROD02.KS-TXT-NBR;
                    KS0I-36100(); /* Delete original text process*/
                    KS0I-26300(); /* Add VKSTXT01 rows process*/
                  else
                    KS0IW00.KS0IW-CTL-FUNC = "T";
                    KS0I-26200();
                    VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
                    KS0IW02.KS0IW-MAP2-TEXT = VKSTXT01.KS-TXT-NBR;
                    KS0I-26300(); /* Add VKSTXT01 rows process*/
                  end
                end
              end
            end
            if (KS0IM002.KS0IM-COLR-CD-ID == "***") /* If multiple colors*/
              KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
              KS0I-26600(); /* Move color code array*/
            else
              KS0IW02.KS0IW-COLOR-TABLE = " "; /* Clear color table*/
              KS0IW02.KS0IW-COLOR[1] = KS0IM002.KS0IM-COLR-CD-ID;
            end
            KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
            XX0XS01(); /* Get current date/time*/
            while (KS0IW02.KS0IW-COLOR[KS0IW-IX2] > " " /* Color exists*/
             || KS0IW00.KS0IW-IX2 == 1) /* or first time*/
              VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX2];
              if (KS0IM002.KS0IM-SESN-CD != KS0IW02.KS0IW-XSECD
               || KS0IM002.KS0IM-STY-TYP-CD != KS0IW02.KS0IW-STY-TYP-CD)
                KS0I-36300(); /* Delete/Add VCPROD02 process*/
                if (KS0IW00.KS0IW-PRCPCTCHG == "Y")
                  KS0I-36001(); /* Update VCPROD03*/
                end
              else
                if (KS0IM002.KS0IM-SESN-YR-RNG != KS0IW02.KS0IW-SESN-YEAR)
  /* IF KS0IM002.KS0IM-SESN-YR-RNG EQ '  '*/
                  if (KS0IM002.KS0IM-SESN-YR-RNG == 00
                   && KS0IW02.KS0IW-XSNYR == 0)
                    KS0I-36400(); /* Update VCPROD02 process*/
                  else
                    KS0I-36300(); /* Delete/Add VCPROD02 process*/
                  end
                else
                  if (KS0IM002.KS0IM-SESN-YR-RNG == 00
                   && KS0IW02.KS0IW-XSNYR == 0)
                    KS0I-36300(); /* Delete/Add VCPROD02 process*/
                  else
                    if (KS0IW00.KS0IW-PRCPCTCHG == "Y")
                      KS0I-36001(); /* Update VCPROD03*/
                    end
                    if (KS0IW00.KS0IW-OTHRFLDCHG == "Y")
                      KS0I-36400(); /* Update VCPROD02 process*/
                    end
                  end
                end
              end
              if (SQLCA.VAGen_SQLCODE == 0) /* If row added successfully*/
                KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
                KS0IW00.KS0IW-FNC = KS0IW00.KS0IW-SAVE-FNC;
                KS0IW00.KS0IW-VCPROD02-UPD = "Y";
                                   /* Row updated switch*/
                KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
              else
                KS0IW00.KS0IW-VCPROD02-UPD = "N";
                VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                sysLib.rollback();
                VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                 /* Reset all DB modifications*/
                return; /* Return to previous process*/
              end
              KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
            end
            KS0IW00.KS0IW-NEW-HS-SWITCH = "N";
            ;
          else
            if (KS0IW00.KS0IW-FNC == "X") /* If delete function*/
              if (KS0IM002.KS0IM-COLR-CD-ID == "***") /* If multiple colors*/
                KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
                KS0I-26600(); /* Move color code array*/
              else
                KS0IW02.KS0IW-COLOR-TABLE = " "; /* Clear color table*/
                KS0IW02.KS0IW-COLOR[1] = KS0IM002.KS0IM-COLR-CD-ID;
              end
              KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
              while (KS0IW02.KS0IW-COLOR[KS0IW-IX2] > " " /* Color exists*/
               || KS0IW00.KS0IW-IX2 == 1) /* or first time*/
                VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX2];
                KS0I-36500(); /* Delete VCPROD02 process*/
                if (SQLCA.VAGen_SQLCODE == 0) /* If successful*/
                  KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
                  KS0IW00.KS0IW-VCPROD02-UPD = "Y";
                                   /* Row updated switch*/
                  KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                  KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
                  KS0IW00.KS0IW-FNC = "C"; /* Switch back to Change*/
                else
                  KS0IW00.KS0IW-VCPROD02-UPD = "N";
                  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                  sysLib.rollback();
                  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                   /* Reset all DB modifications*/
                  return; /* Return to previous process*/
                end
                KS0I-36510(); /* Update VCPROD02 change date*/
                KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
                                   /* Increment index*/
              end
            end
          end
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is enter /* Enter pressed*/
   || converseVar.eventKey is pf16  /* or HS assignment*/
   || converseVar.eventKey is pf19) /* or PL assignment*/
    /* OR EZEAID IS PF17              /* or Feature screen*/
    /* OR EZEAID IS PF18              /* or Comment screen*/
    if (converseVar.validationMsgNum == 0) /* and no errors*/
      if (KS0IW05.KS0IW-MAP-HTS-NBR != KS0IM002.KS0IM-HTS-NBR)
        KS0I-60000(); /* Verify if cvs number*/
        set KS0IW05 empty;
      end
    end
  end
  ;
  if (converseVar.eventKey is enter /* Enter pressed*/
   && KS0IW00.KS0IW-PF16 != "Y"     
   && KS0IW00.KS0IW-PF17 != "Y"     
   && KS0IW00.KS0IW-PF18 != "Y"     
   && KS0IW00.KS0IW-PF19 != "Y"     
   && KS0IW00.KS0IW-DATA-CHANGED == "N"
   && KS0IW00.KS0IW-MAP3-CHANGED == "N"
   && KS0IW00.KS0IW-MAP4-CHANGED == "N"
   && KS0IW00.KS0IW-CPY-CLR-IN-PROCESS != "Y")
    KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
    if (converseVar.validationMsgNum == 0) /* and no errors*/
      KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
    else
      KS0IW00.KS0IW-SWF = "N"; /* Format map switch*/
    end
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 pressed*/
    ;
    if (KS0IW00.KS0IW-FNC == "I" /* If inquiry function*/
     && KSWREC.CAUSERA == 0)    
      KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
    else
      ;
      if (KS0IW00.KS0IW-REFORMAT-MAP1 == "Y"
       || KSWREC.CAUSERA > 0)
        KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
      else
        KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
      end
    end
    ;
    KS0IW00.KS0IW-SAV-SESN-CD = KS0IM002.KS0IM-SESN-CD;
    if (KS0IM002.KS0IM-SESN-YR-RNG >= 00
     && KS0IM002.KS0IM-SESN-YR-RNG <= 99)
      ;
      KS0IW01.KS0IW-SESN-YY = KS0IM002.KS0IM-SESN-YR-RNG;
      if (KS0IW01.KS0IW-SESN-YY > "65")
        KS0IW01.KS0IW-SESN-CENT = "19";
      else
        KS0IW01.KS0IW-SESN-CENT = "20";
      end
    else
      ;
      KS0IW01.KS0IW-SESN-YR = "0";
    end
    KS0IW00.KS0IW-SAV-SESN-YR = KS0IW01.KS0IW-SESN-YR;
    ;
    KS0IW00.KS0IW-SAV-STY-NBR = KS0IM002.KS0IM-STY-NBR;
    KS0IW00.KS0IW-SAV-XPRMT-STY = KS0IM002.KS0IM-XPRMT-STY-NBR;
    KS0IW00.KS0IW-SAV-STY-TYP = KS0IM002.KS0IM-STY-TYP-CD;
    KS0IW00.KS0IW-SAV-COLR-CD-ID = KS0IM002.KS0IM-COLR-CD-ID;
    KS0IW00.KS0IW-SAV-DIM-CD = KS0IM002.KS0IM-DIM-CD;
    ;
    KS0IW00.KS0IW-SWD = "1"; /* Map switch*/
    KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
    KS0IW00.KS0IW-NEW-HS-SWITCH = "N";
    KS0IW00.KS0IW-SAV = KS0IW00.KS0IW-SAV + 1;
    converseLib.validationFailed(0); /* Clear message file*/
    exit stack; /* Exit to display map*/
    ;
  end
  if (converseVar.eventKey is pf16 /* PF16 pressed*/
   || KS0IW00.KS0IW-PF16 == "Y")  
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      ;
      KSWREC.KSW-CTL-FLD = KS0IW00.KS0IW-CTL-FLD; /* Pass control fld*/
      KSWREC.KSW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
      COMMAREA.CATOAP = "KS0J"; /* Set destination application*/
      KSWREC.XSNYR = KS0IW02.KS0IW-XSNYR; /* Move map to kswrec*/
      KSWREC.XSECD = KS0IM002.KS0IM-SESN-CD;
      if (KS0IM002.KS0IM-BUS-UNIT-CD == "EQ")
        KSWREC.XGPCD = KS0IW00.KS0IW-SAV-EQUIP-GPC;
      else
        KSWREC.XGPCD = KS0IM002.KS0IM-BUS-UNIT-CD;
      end
      KSWREC.SY1STNBR = KS0IM002.KS0IM-STY-NBR;
      KSWREC.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
      KSWREC.XDMCD = KS0IM002.KS0IM-DIM-CD;
      KSWREC.KS-XPRMT-STY-NBR = KS0IM002.KS0IM-XPRMT-STY-NBR;
      KSWREC.KS-STY-NM[1] = KS0IM002.KS0IM-KS-STY-NM[1];
      KSWREC.KS-STY-NM[2] = KS0IM002.KS0IM-KS-STY-NM[2];
      KSWREC.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD;
      KSWREC.KS-TXT[1] = KS0IM002.KS0IM-FABRIC-DESC[1];
      KSWREC.KS-TXT[2] = KS0IM002.KS0IM-FABRIC-DESC[2];
      KSWREC.KS-TXT[3] = KS0IM002.KS0IM-FABRIC-DESC[3];
      KS0IW01.KS0IW-HTS-NUMBER = KS0IM002.KS0IM-HTS-NBR;
      if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
       || KS0IW01.KS0IW-HTS-BYTE[11] == " "
       || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
        KS0IW00.KS0IW-HTS-NBR-WORK = KS0IM002.KS0IM-HTS-NBR;
        KSWREC.KS-HTS-CPTR-CD = KS0IW00.KS0IW-HTS-CPTR;
        KSWREC.KS-HTS-HDG-CD = KS0IW00.KS0IW-HTS-HDG;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW00.KS0IW-HTS-1ST-SHDG;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW00.KS0IW-HTS-2ND-SHDG-1;
        KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0IW00.KS0IW-HTS-2ND-SHDG-2;
        if (KS0IW01.KS0IW-HTS-BYTE[11] == ","
         || KS0IW01.KS0IW-HTS-BYTE[11] == " ")
          KSWREC.KS-HTS-RNG-FL = "N";
        else
          KSWREC.KS-HTS-RNG-FL = "Y";
        end
      else
        KS0IW02.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
        KSWREC.KS-HTS-CPTR-CD = KS0IW02.KS0IW-HTS-CPTR-CD;
        KSWREC.KS-HTS-HDG-CD = KS0IW02.KS0IW-HTS-HDG-CD;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW02.KS0IW-HTS-1ST-SHDG-CD;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW02.KS0IW-HTS-2ND-SHDG-CD;
        KSWREC.KS-HTS-STAT-CD = KS0IW02.KS0IW-HTS-STAT-CD;
      end
      KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
      KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1] = KS0IM002.KS0IM-HTS-NBR;
      TA5REC.TA5TSQIX = KS0IW00.KS0IW-SAVE-PAGE; /* Page to update*/
      KS0IW01.KS0IW-GPC = KS0IM001.KS0IM-BUS-UNIT-CD; /* Move heading*/
      KS0IW01.KS0IW-STYLE = KS0IM001.KS0IM-MAP1-STY-NBR;
      KS0IW01.KS0IW-COLR-CD-ID = KS0IM001.KS0IM-COLR-CD-ID;
      KS0IW01.KS0IW-DIM-CD = KS0IM001.KS0IM-DIM-CD;
      KS0IW01.KS0IW-SESN-CD = KS0IM001.KS0IM-SESN-CD;
      if (KS0IM001.KS0IM-SESN-YR-RNG >= "00"
       && KS0IM001.KS0IM-SESN-YR-RNG <= "99")
        KS0IW01.KS0IW-SESN-YY = KS0IM001.KS0IM-SESN-YR-RNG;
        if (KS0IM001.KS0IM-SESN-YR-RNG > "65")
          KS0IW01.KS0IW-SESN-CENT = "19";
        else
          KS0IW01.KS0IW-SESN-CENT = "20";
        end
      else
        KS0IW01.KS0IW-SESN-YR = "0";
      end
      KS0IW01.KS0IW-PRDCTN-YR = KS0IM001.KS0IM-PRDCTN-YR;
      KS0IW01.KS0IW-PRDCTN-MO = KS0IM001.KS0IM-PRDCTN-MO;
      KS0IW01.KS0IW-DLVR-MO = KS0IM001.KS0IM-DLVR-MO;
      KS0IW01.KS0IW-FCTY-CD = KS0IM001.KS0IM-FCTY-CD;
      KS0IW01.KS0IW-ORIG-CD = KS0IM001.KS0IM-ORIG-CD;
      KS0IW01.KS0IW-HTS-NBR = KS0IM001.KS0IM-HTS-NBR;
      KS0IW01.KS0IW-RULE-NBR-MAP = KS0IM001.KS0IM-RULE-NBR;
      KS0IW01.KS0IW-RULE-NBR = KS0IW00.KS0IW-RULE-NBR;
      KS0IW01.KS0IW-QOTA-CAT-CD = KS0IM001.KS0IM-QOTA-CAT-CD;
      KS0IW01.KS0IW-TEAM-CD = KS0IM001.KS0IM-TEAM-CD;
      KS0IW01.KS0IW-PRBM-CD = KS0IM001.KS0IM-PRBM-CD;
      KS0IW01.KS0IW-STAT = KS0IM001.KS0IM-STAT;
      KS0IW01.KS0IW-US-MADE-FLAG = KS0IM001.KS0IM-US-MADE-FLAG;
      KS0IW01.KS0IW-EXP-STYLE = KS0IM001.KS0IM-EXP-STYLE;
      KS0IW01.KS0IW-REG-CD = KS0IM001.KS0IM-REG-CD;
      KS0I-12110(); /* Update temp storage with any changes*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
      ;
    end
  end
  if (converseVar.eventKey is pf17 /* PF17 pressed*/
   || KS0IW00.KS0IW-PF17 == "Y")  
    ;
    if (converseVar.validationMsgNum == 0)
      KS0IW00.KS0IW-SWD = "3"; /* Map switch*/
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  if (converseVar.eventKey is pf18 /* PF18 pressed*/
   || KS0IW00.KS0IW-PF18 == "Y")  
    ;
    if (converseVar.validationMsgNum == 0)
      KS0IW00.KS0IW-SWD = "4"; /* Map switch*/
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf19 /* PF19 pressed*/
   || KS0IW00.KS0IW-PF19 == "Y")  
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      ;
      KSWREC.KSW-CTL-FLD = KS0IW00.KS0IW-CTL-FLD; /* Pass control fld*/
      KSWREC.KSW-SAVE-INDEX-TBL = KS0IW01.KS0IW-SAVE-INDEX-TBL;
      COMMAREA.CATOAP = "KS0K"; /* Set destination application*/
      KSWREC.KSW-POIDT = KS0IW02.KS0IW-POIDT;
      KSWREC.KSW-FCTY-CD = KS0IW01.KS0IW-FCTY-CD;
      KSWREC.XSNYR = KS0IW02.KS0IW-XSNYR; /* Move map to kswrec*/
      KSWREC.XSECD = KS0IM002.KS0IM-SESN-CD;
      if (KS0IM002.KS0IM-BUS-UNIT-CD == "EQ")
        KSWREC.XGPCD = KS0IW00.KS0IW-SAV-EQUIP-GPC;
      else
        KSWREC.XGPCD = KS0IM002.KS0IM-BUS-UNIT-CD;
      end
      KSWREC.SY1STNBR = KS0IM002.KS0IM-STY-NBR;
      KSWREC.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
      KSWREC.XDMCD = KS0IM002.KS0IM-DIM-CD;
      KSWREC.KS-XPRMT-STY-NBR = KS0IM002.KS0IM-XPRMT-STY-NBR;
      KSWREC.KS-STY-NM[1] = KS0IM002.KS0IM-KS-STY-NM[1];
      KSWREC.KS-STY-NM[2] = KS0IM002.KS0IM-KS-STY-NM[2];
      KSWREC.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD;
      KS0IW01.KS0IW-HTS-NUMBER = KS0IM002.KS0IM-HTS-NBR;
      if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
       || KS0IW01.KS0IW-HTS-BYTE[11] == " "
       || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
        KS0IW00.KS0IW-HTS-NBR-WORK = KS0IM002.KS0IM-HTS-NBR;
        KSWREC.KS-HTS-CPTR-CD = KS0IW00.KS0IW-HTS-CPTR;
        KSWREC.KS-HTS-HDG-CD = KS0IW00.KS0IW-HTS-HDG;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW00.KS0IW-HTS-1ST-SHDG;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW00.KS0IW-HTS-2ND-SHDG-1;
        KSWREC.KS-HTS-2ND-SHDG-CD[2] = KS0IW00.KS0IW-HTS-2ND-SHDG-2;
        if (KS0IW01.KS0IW-HTS-BYTE[11] == ","
         || KS0IW01.KS0IW-HTS-BYTE[11] == " ")
          KSWREC.KS-HTS-RNG-FL = "N";
        else
          KSWREC.KS-HTS-RNG-FL = "Y";
        end
      else
        KS0IW02.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
        KSWREC.KS-HTS-CPTR-CD = KS0IW02.KS0IW-HTS-CPTR-CD;
        KSWREC.KS-HTS-HDG-CD = KS0IW02.KS0IW-HTS-HDG-CD;
        KSWREC.KS-HTS-1ST-SHDG-CD = KS0IW02.KS0IW-HTS-1ST-SHDG-CD;
        KSWREC.KS-HTS-2ND-SHDG-CD[1] = KS0IW02.KS0IW-HTS-2ND-SHDG-CD;
        KSWREC.KS-HTS-STAT-CD = KS0IW02.KS0IW-HTS-STAT-CD;
      end
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
      ;
    end
  end
  ;
  if (converseVar.eventKey is pf20 /* PF20 pressed*/
   && converseVar.validationMsgNum != 4) /* not authorized*/
    KS0IW00.KS0IW-FNC = "X"; /* Delete function*/
    KSWREC.XXXPRCNM = "36000"; /* Module identification*/
    converseLib.validationFailed(121); /* Press enter to delete*/
  end
  ;
  set KS0IM003 initial; /* Clear map output after update*/
  set KS0IM004 initial; /* Clear map output after update*/
  set KS0IM005 initial; /* Clear map output after update*/
  ;
  KS0IW00.KS0IW-SAV-SESN-CD = KS0IM002.KS0IM-SESN-CD;
  if (KS0IM002.KS0IM-SESN-YR-RNG >= 00
   && KS0IM002.KS0IM-SESN-YR-RNG <= 99)
    ;
    KS0IW01.KS0IW-SESN-YY = KS0IM002.KS0IM-SESN-YR-RNG;
    if (KS0IW01.KS0IW-SESN-YY > "65")
      KS0IW01.KS0IW-SESN-CENT = "19";
    else
      KS0IW01.KS0IW-SESN-CENT = "20";
    end
  else
    ;
    KS0IW01.KS0IW-SESN-YR = "0";
  end
  KS0IW00.KS0IW-SAV-SESN-YR = KS0IW01.KS0IW-SESN-YR;
  ;
  KS0IW00.KS0IW-SAV-STY-NBR = KS0IM002.KS0IM-STY-NBR;
  KS0IW00.KS0IW-SAV-XPRMT-STY = KS0IM002.KS0IM-XPRMT-STY-NBR;
  KS0IW00.KS0IW-SAV-STY-TYP = KS0IM002.KS0IM-STY-TYP-CD;
  KS0IW00.KS0IW-SAV-COLR-CD-ID = KS0IM002.KS0IM-COLR-CD-ID;
  KS0IW00.KS0IW-SAV-DIM-CD = KS0IM002.KS0IM-DIM-CD;
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
end // end KS0I-36000

// Update VCPROD01 process
Function KS0I-36001()
  /* ------------------------------------------------------------*/
  /* Select row, if exists update product line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-36011(); /* Select unique VCPROD03 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If line exists*/
    VCPROD03.KS-CMPNT-PRC-PCT = KS0IM002.KS0IM-PRICE-PCT;
    if (KS0IM002.KS0IM-PRICE-PCT == 100)
      VCPROD03.KS-HTS-ORD-ID = "1";
    else
      VCPROD03.KS-HTS-ORD-ID = "0";
    end
    ;
    KS0I-36021(); /* Update VCPROD03 row*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Add not successful*/
      converseLib.validationFailed(11); /* Data in use message*/
      KSWREC.XXXPRCNM = "36400";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      return;
    end
  end
  ;
  ;
end // end KS0I-36001

// SELECT UNIQUE VCPROD03
Function KS0I-36011()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD03 empty; /* Clear row storage area*/
  ;
  VCPROD03.XSNYR = KS0IW02.KS0IW-XSNYR;
  VCPROD03.XSECD = KS0IW02.KS0IW-XSECD;
  if (KS0IW02.XGPCD == "EQ") /* If Equipment*/
    VCPROD03.KS-BUS-UNIT-CD = "EQ";
  else
    VCPROD03.KS-BUS-UNIT-CD = KS0IW02.XGPCD;
  end
  ;
  VCPROD03.SY1STNBR = KS0IW02.KS0IW-STY-NBR;
  ;
  VCPROD03.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX2];
  ;
  VCPROD03.XDMCD = KS0IW02.XDMCD;
  VCPROD03.KS-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR;
  VCPROD03.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD;
  ;
  try
    call "KS3010" ("S ", SQLCA, VCPROD03) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36011"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD03"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD03.VCPROD03-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0I-36011

// Update VCPROD01 row
Function KS0I-36021()
  /* ------------------------------------------------------------*/
  /* Update a row to the DCUSTM.VCPROD02 table.*/
  /* ------------------------------------------------------------*/
  ;
  VCPROD03.XXXUSRID = COMMAREA.CAUSERID; /* Move user id*/
  VCPROD03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
  VCPROD03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
  ;
  try
    call "KS3010" ("U ", SQLCA, VCPROD03) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36011"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD03"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD03.VCPROD03-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36021

// Delete VKSTXT01 rows process
Function KS0I-36100()
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be deleted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-21310(); /* Select set and open cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data for duplicate option.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWX = "N"; /* Text cursor EOF switch*/
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-SWX == "N") /* Until EOF*/
    KS0I-21320(); /* Fetch next row in the cursor*/
    if (KS0IW00.KS0IW-SWX == "N") /* If not EOF*/
      KS0I-36101(); /* Delete text row*/
    end
  end
  ;
  KS0I-21330(); /* Close the selected set cursor*/
  ;
  ;
end // end KS0I-36100

// Delete VKSTXT01 row
Function KS0I-36101()
  ;
  try
    call "IO6150" ("D ", SQLCA, VKSTXT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36101"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE A TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSTXT01.VKSTXT01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36101

// Delete VCPROB01 rows process
Function KS0I-36200()
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be deleted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-11231(); /* Select set and open cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and delete the data.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWP = "N"; /* Problem cursor EOF switch*/
  while (KS0IW00.KS0IW-SWP == "N" /* Until EOF*/
   && KS0IW00.KS0IW-IX2 <= 25)
    KS0I-11232(); /* Fetch next row in the cursor*/
    if (KS0IW00.KS0IW-SWP == "N") /* If not EOF*/
      KS0I-36201(); /* Delete problem row*/
    end
  end
  ;
  KS0I-11233(); /* Close the selected set cursor*/
  ;
  ;
end // end KS0I-36200

// Delete VCPROB01 row
Function KS0I-36201()
  ;
  try
    call "IO6140" ("D ", SQLCA, VCPROB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36201"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE A TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROB01.VCPROB01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36201

// Delete/Add VCPROD01 process
Function KS0I-36300()
  /* ------------------------------------------------------------*/
  /* Select row, if exists delete and add new product line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-36301(); /* Select unique VCPROD02 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If line exists*/
    KS0I-36302(); /* Delete VCPROD02 row*/
    KS0IW00.KS0IW-SAVE-HTS-NBR = " ";
    KS0IW00.KS0IW-SAVE-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
    KS0IW00.KS0IW-SAVE-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
    KS0IW00.KS0IW-SAVE-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
    KS0IW00.KS0IW-SAVE-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
    KS0IW00.KS0IW-SAVE-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
    KS0IW00.KS0IW-SAVE-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
    KS0IW00.KS0IW-SAVE-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
    KS0IW00.KS0IW-SAVE-SDT = VCPROD02.ZZZSDT;
    VCPROD02.KS-TXT-NBR = KS0IW02.KS0IW-MAP2-TEXT;
    VCPROD02.KS-PRBM-NBR = KS0IW02.KS0IW-MAP2-PRBM;
    KS0I-26100(); /* Select VCPROD02 row*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If line does not already exist*/
      KS0I-26500(); /* Add VCPROD02 row*/
      KS0I-26700(); /* Write VKSAUD01 rows*/
      if (SQLCA.VAGen_SQLCODE != 0) /* Add not successful*/
        converseLib.validationFailed(11); /* Data in use message*/
        KSWREC.XXXPRCNM = "36300";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        return;
      end
    else
      KSWREC.XXXPRCNM = "36300"; /* Process name*/
      converseLib.validationFailed(83); /* Product is a duplicate message*/
      SQLCA.VAGen_SQLCODE = 100;
      return; /* Return to previous process*/
    end
  end
  ;
  ;
end // end KS0I-36300

// Select unique VCPROD01 row
Function KS0I-36301()
  /* ------------------------------------------------------------*/
  /* Select the unique row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  VCPROD02.XSECD = KS0IW02.KS0IW-XSECD;
  VCPROD02.XSNYR = KS0IW02.KS0IW-XSNYR;
  if (KS0IW02.XGPCD == "EQ") /* If equipment*/
    VCPROD02.KS-BUS-UNIT-CD = "EQ"; /* BUS*/
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0IW02.XGPCD; /* BUS*/
  end
  VCPROD02.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style*/
  VCPROD02.XDMCD = KS0IW02.XDMCD; /* Dimension code*/
  VCPROD02.KS-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR;
  VCPROD02.YKS-STY-TYP-CD = KS0IW02.KS0IW-STY-TYP-CD; /* Style type cd*/
  ;
  try
    call "VCPROD02" ("S ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row does not exist*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36301"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36301

// Delete VCPROD01 row
Function KS0I-36302()
  /* ------------------------------------------------------------*/
  /* Delete a row to the DCUSTM.VCPROD02 table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("D ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36302"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE A TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36302

// Write VKSAUD01 rows process
Function KS0I-36303()
  /* ------------------------------------------------------------*/
  /* Format the data and add DCUSTM.VKSAUD01 rows.*/
  /* ------------------------------------------------------------*/
  ;
  set VKSAUD01 empty; /* Clear record*/
  ;
   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/
  ;
  XX0XS01();
  /* rank number '0' means that the product is deleted from the master*/
  VKSAUD01.XXXRKNBR = 0; /**/
  VKSAUD01.XSECD = VCPROD02.XSECD;
  VKSAUD01.XSNYR = VCPROD02.XSNYR;
  VKSAUD01.XGPCD = VCPROD02.XGPCD;
  VKSAUD01.SY1STNBR = VCPROD02.SY1STNBR;
  VKSAUD01.SY2CLRID = VCPROD02.SY2CLRID;
  VKSAUD01.XDMCD = VCPROD02.XDMCD;
  VKSAUD01.KS-XPRMT-STY-NBR = VCPROD02.KS-XPRMT-STY-NBR;
  VKSAUD01.YKS-STY-TYP-CD = VCPROD02.YKS-STY-TYP-CD;
  VKSAUD01.KS-HTS-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
  VKSAUD01.KS-HTS-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
  VKSAUD01.KS-HTS-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
  VKSAUD01.KS-HTS-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
  VKSAUD01.KS-HTS-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
  VKSAUD01.KS-HTS-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
  VKSAUD01.KS-HTS-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
  VKSAUD01.KS-RULE-NBR = VCPROD02.KS-RULE-NBR;
  VKSAUD01.YPR-PROD-STAT-CD = VCPROD02.YPR-PROD-STAT-CD;
  VKSAUD01.XXXUSRID = COMMAREA.CAUSERID;
  KS0I-26701(); /* Insert VKSAUD01 row*/
  ;
end // end KS0I-36303

// Update VCPROD01 process
Function KS0I-36400()
  /* ------------------------------------------------------------*/
  /* Select row, if exists update product line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-26100(); /* Select unique VCPROD02 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    KS0I-36600(); /* Select unique VCPROD02 row*/
    KS0I-36700(); /* Fetch  unique VCPROD02 row*/
    KS0I-36800(); /* Close unique cursor*/
  end
  if (SQLCA.VAGen_SQLCODE == 0) /* If line exists*/
    KS0IW00.KS0IW-SAVE-HTS-NBR = " ";
    KS0IW00.KS0IW-SAVE-CPTR-CD = VCPROD02.KS-HTS-CPTR-CD;
    KS0IW00.KS0IW-SAVE-HDG-CD = VCPROD02.KS-HTS-HDG-CD;
    KS0IW00.KS0IW-SAVE-1ST-SHDG-CD = VCPROD02.KS-HTS-1ST-SHDG-CD;
    KS0IW00.KS0IW-SAVE-2ND-SHDG-CD[1] = VCPROD02.KS-HTS-2ND-SHDG-CD[1];
    KS0IW00.KS0IW-SAVE-2ND-SHDG-CD[2] = VCPROD02.KS-HTS-2ND-SHDG-CD[2];
    KS0IW00.KS0IW-SAVE-STAT-CD = VCPROD02.KS-HTS-STAT-CD;
    KS0IW00.KS0IW-SAVE-RNG-FL = VCPROD02.KS-HTS-RNG-FL;
    VCPROD02.KS-TXT-NBR = KS0IW02.KS0IW-MAP2-TEXT;
    VCPROD02.KS-PRBM-NBR = KS0IW02.KS0IW-MAP2-PRBM;
    KS0IW01.KS0IW-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
    if (KS0IW01.KS0IW-HTS-NBR > " ")
      if (KS0IW02.XGPCD == "02")
        KS0IW01.KS0IW-HTS-NUMBER = KS0IW01.KS0IW-HTS-NBR;
        if (KS0IW01.KS0IW-HTS-BYTE[11] == "-"
         || KS0IW01.KS0IW-HTS-BYTE[11] == ",")
          KS0IW00.KS0IW-HTS-NBR-WORK = KS0IW01.KS0IW-HTS-NBR;
          VCPROD02.KS-HTS-CPTR-CD = KS0IW00.KS0IW-HTS-CPTR;
          VCPROD02.KS-HTS-HDG-CD = KS0IW00.KS0IW-HTS-HDG;
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW00.KS0IW-HTS-1ST-SHDG;
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW00.KS0IW-HTS-2ND-SHDG-1;
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = KS0IW00.KS0IW-HTS-2ND-SHDG-2;
          if (KS0IW01.KS0IW-HTS-BYTE[11] == ",")
            VCPROD02.KS-HTS-RNG-FL = "N";
          else
            VCPROD02.KS-HTS-RNG-FL = "Y";
          end
          VCPROD02.KS-HTS-STAT-CD = " ";
          VCPROD02.KS-HTS-SUFX-ID = " ";
        else
          VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
          VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
          VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
          VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
          VCPROD02.KS-HTS-2ND-SHDG-CD[2] = " ";
          VCPROD02.KS-HTS-STAT-CD = KS0IW01.KS0IW-HTS-STAT-CD;
          VCPROD02.KS-HTS-SUFX-ID = " ";
          VCPROD02.KS-HTS-RNG-FL = "N";
        end
      else
        VCPROD02.KS-HTS-CPTR-CD = KS0IW01.KS0IW-HTS-CPTR-CD;
        VCPROD02.KS-HTS-HDG-CD = KS0IW01.KS0IW-HTS-HDG-CD;
        VCPROD02.KS-HTS-1ST-SHDG-CD = KS0IW01.KS0IW-HTS-1ST-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[1] = KS0IW01.KS0IW-HTS-2ND-SHDG-CD;
        VCPROD02.KS-HTS-2ND-SHDG-CD[2] = " ";
        VCPROD02.KS-HTS-STAT-CD = KS0IW01.KS0IW-HTS-STAT-CD;
        VCPROD02.KS-HTS-SUFX-ID = " ";
        VCPROD02.KS-HTS-RNG-FL = "N";
      end
    else
      VCPROD02.KS-HTS-CPTR-CD = " ";
      VCPROD02.KS-HTS-HDG-CD = " ";
      VCPROD02.KS-HTS-1ST-SHDG-CD = " ";
      VCPROD02.KS-HTS-2ND-SHDG-CD[1] = " ";
      VCPROD02.KS-HTS-2ND-SHDG-CD[2] = " ";
      VCPROD02.KS-HTS-STAT-CD = " ";
      VCPROD02.KS-HTS-SUFX-ID = " ";
      VCPROD02.KS-HTS-RNG-FL = "N";
    end
    ;
    if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y"
     || KS0IW02.KS0IW-TEAM-NBR == " ")
      VCPROD02.KS-TEAM-CD = KS0IW02.KS0IW-TEAM-NBR;
    end
    ;
    if (KS0IW00.KS0IW-SIL-OVERRIDE == "Y"
     || KS0IW02.KS0IW-SILH-CD == " ")
      VCPROD02.XSUCD = KS0IW02.KS0IW-SILH-CD;
    end
    ;
    if (KS0IW00.KS0IW-CAT-OVERRIDE == "Y"
     || KS0IW02.KS0IW-CATLG-PAGE-NBR == 0)
      VCPROD02.SYNCTPGN = KS0IW02.KS0IW-CATLG-PAGE-NBR;
    end
    ;
    VCPROD02.KS-RULE-NBR = KS0IM002.KS0IM-RULE-NBR;
    VCPROD02.KS-STY-NM[1] = KS0IM002.KS0IM-KS-STY-NM[1];
    VCPROD02.KS-STY-NM[2] = KS0IM002.KS0IM-KS-STY-NM[2];
    VCPROD02.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD;
    VCPROD02.KS-SHORT-STY-NM = KS0IM002.KS0IM-CUST-STYLE-SH-DESC;
    VCPROD02.KS-XCT-ORIG-CD[1] = KS0IM002.KS0IM-ORIG-CD[1];
    VCPROD02.KS-XCT-ORIG-CD[2] = KS0IM002.KS0IM-ORIG-CD[2];
    VCPROD02.KS-XCT-ORIG-CD[3] = KS0IM002.KS0IM-ORIG-CD[3];
    VCPROD02.KS-XCT-ORIG-CD[4] = KS0IM002.KS0IM-ORIG-CD[4];
    VCPROD02.KS-XCT-ORIG-CD[5] = KS0IM002.KS0IM-ORIG-CD[5];
    VCPROD02.KS-XCT-ORIG-CD[6] = KS0IM002.KS0IM-ORIG-CD[6];
    VCPROD02.YPR-PROD-STAT-CD = KS0IM002.KS0IM-STAT;
    ;
    KS0I-46100(); /* Update VCPROD02 row*/
    KS0I-26700(); /* Write VKSAUD01 rows*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Add not successful*/
      converseLib.validationFailed(11); /* Data in use message*/
      KSWREC.XXXPRCNM = "36400";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      return;
    end
  end
  ;
  ;
end // end KS0I-36400

// Delete VCPROD01 function
Function KS0I-36500()
  /* ------------------------------------------------------------*/
  /* Select row, if exists delete and add new product line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-36301(); /* Select unique VCPROD01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If line exists*/
    KS0I-36302(); /* Delete VCPROD01 row*/
    KS0I-36303(); /* Update the Audit Table*/
  end
  ;
  ;
end // end KS0I-36500

// Update VCPROD02 change date
Function KS0I-36510()
  /* ------------------------------------------------------------*/
  /* Select row, if exists delete and add new product line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-36511(); /* Select VCPROD02*/
  KS0I-36512(); /* Fetch  VCPROD02 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If line exists*/
    KS0I-36513(); /* Update VCPROD02*/
  end
  ;
  KS0I-36514(); /* close  VCPROD02 row*/
  ;
end // end KS0I-36510

// Select VCPROD02 set
Function KS0I-36511()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VCPROD02 empty; /* Clear row storage area*/
  ;
  VCPROD02.KS-BUS-UNIT-CD = KS0IW02.XGPCD; /* BUC*/
  VCPROD02.SY1STNBR = KS0IW02.KS0IW-STY-NBR; /* Style*/
  VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX2];
  ;
  VCPROD02.XSNYR = KS0IW02.KS0IW-XSNYR; /* Season year range*/
  VCPROD02.XSECD = KS0IW02.KS0IW-XSECD; /* Season code*/
  VCPROD02.XDMCD = KS0IW02.XDMCD;
  ;
  VCPROD02.KS-XPRMT-STY-NBR = "*";
  VCPROD02.KS-XCT-ORIG-CD[1] = "*"; /* Origin code*/
  VCPROD02.YPR-PROD-STAT-CD = "*"; /* Status code*/
  VCPROD02.KS-RULE-NBR = "*"; /* Ruling number*/
  VCPROD02.KS-HTS-CPTR-CD = "*"; /* HS chapter code*/
  VCPROD02.KS-HTS-HDG-CD = "*";
  VCPROD02.KS-HTS-1ST-SHDG-CD = "*";
  VCPROD02.KS-HTS-2ND-SHDG-CD[1] = "*";
  VCPROD02.KS-HTS-STAT-CD = "*";
  VCPROD02.KS-PRBM-NBR = -1;
  ;
  try
    call "VCPROD02" ("S1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* SlC tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36511"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36511

// Fetch  VCPROD02 row
Function KS0I-36512()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("N1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36512"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36512

// Update VCPROD02 CHANGE DATE
Function KS0I-36513()
  /* ------------------------------------------------------------*/
  /* Update a row to the DCUSTM.VCPROD02 table.*/
  /* ------------------------------------------------------------*/
  ;
  VCPROD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
  VCPROD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
  ;
  try
    call "VCPROD02" ("U ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36513"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36513

// Close  VCPROD02 set
Function KS0I-36514()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("C1", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36514"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36514

// Select unique VCPROD01 row
Function KS0I-36600()
  /* ------------------------------------------------------------*/
  /* Select the unique row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  VCPROD02.XSECD = KS0IM002.KS0IM-SESN-CD;
  if (KS0IM002.KS0IM-SESN-YR-RNG >= 00
   && KS0IM002.KS0IM-SESN-YR-RNG <= 99)
    KS0IW01.KS0IW-SESN-YY = KS0IM002.KS0IM-SESN-YR-RNG;
    if (KS0IW01.KS0IW-SESN-YY > "65")
      KS0IW01.KS0IW-SESN-CENT = "19";
    else
      KS0IW01.KS0IW-SESN-CENT = "20";
    end
  else
    KS0IW01.KS0IW-SESN-YR = "0";
  end
  KS0IW01.KS0IW-SESN-YR-NUM = KS0IW01.KS0IW-SESN-YR;
  VCPROD02.XSNYR = KS0IW01.KS0IW-SESN-YR-NUM;
  if (KS0IM002.KS0IM-BUS-UNIT-CD == "EQ")
    VCPROD02.KS-BUS-UNIT-CD = "EQ"; /* BUS*/
  else
    VCPROD02.KS-BUS-UNIT-CD = KS0IM002.KS0IM-BUS-UNIT-CD; /* BUS*/
  end
  VCPROD02.SY1STNBR = KS0IM002.KS0IM-STY-NBR; /* Style*/
  VCPROD02.XDMCD = KS0IM002.KS0IM-DIM-CD; /* Dimension code*/
  KS0IW02.XPRMT-STY-SIX-CH = KS0IM002.KS0IM-XPRMT-STY-NBR;
  KS0IW02.XPRMT-STY-ID = "%";
  VCPROD02.KS-XPRMT-STY-NBR = KS0IW02.WK-XPRMT-STY;
  VCPROD02.YKS-STY-TYP-CD = KS0IM002.KS0IM-STY-TYP-CD; /* Style type*/
  ;
  try
    call "VCPROD02" ("S8", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row does not exist*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36600"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36600

// Fetch  VCPROD01 row
Function KS0I-36700()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("N8 ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch a*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36700"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36700

// Close  VCPROD01 set
Function KS0I-36800()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCPROD02" ("C8", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "36800"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-36800

// Main process Map 3
Function KS0I-40000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-FNC == "P") /* If problems requested*/
    KS0I-41000(); /* Obtain the data to display*/
  end
  ;
  KS0I-42000(); /* Format and display the map*/
  ;
  KS0I-43000(); /* Check attention identifier*/
  ;
  KS0I-44000(); /* Reset fields to normal intensity*/
  ;
  KS0I-45000(); /* Verify the entered data*/
  ;
  KS0I-46000(); /* Process valid input request*/
  ;
  ;
end // end KS0I-40000

// Obtain the data to display
Function KS0I-41000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    set KS0IW02 empty; /* M002 display storage*/
    set KS0IW03 empty; /* M003 display storage*/
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Clear the map display storage area and save the key fields.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IW02 empty; /* M002 display storage*/
  set KS0IW03 empty; /* M003 display storage*/
  ;
  KS0IW00.KS0IW-SAV = KS0IW00.KS0IW-SAV + 1; /* Increment index*/
  if (KS0IW00.KS0IW-SAV <= 15 /* Less than max*/
   && KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV] > "0") /* Multiple exist*/
    ;
    KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
    KS0IW02.KS0IW-POIDT = KS0IW01.KS0IW-POIDT; /* PO ID month range*/
    KS0IW02.KS0IW-UCTNT-CD[1] = KS0IW01.KS0IW-UCTNT-CD1[KS0IW-IX1];
    KS0IW02.KS0IW-UCTNT-CD[2] = KS0IW01.KS0IW-UCTNT-CD2[KS0IW-IX1];
    KS0IW02.KS0IW-UCTNT-CD[3] = KS0IW01.KS0IW-UCTNT-CD3[KS0IW-IX1];
    KS0IW02.KS0IW-UCTNT-CD[4] = KS0IW01.KS0IW-UCTNT-CD4[KS0IW-IX1];
    KS0IW02.KS0IW-LCTNT-CD[1] = KS0IW01.KS0IW-LCTNT-CD1[KS0IW-IX1];
    KS0IW02.KS0IW-LCTNT-CD[2] = KS0IW01.KS0IW-LCTNT-CD2[KS0IW-IX1];
    KS0IW02.KS0IW-LCTNT-CD[3] = KS0IW01.KS0IW-LCTNT-CD3[KS0IW-IX1];
    KS0IW02.KS0IW-LCTNT-CD[4] = KS0IW01.KS0IW-LCTNT-CD4[KS0IW-IX1];
    KS0IW02.XGPCD = KS0IW01.KS0IW-GPC; /* GPC code*/
    KS0IW02.KS0IW-XSECD = KS0IW01.KS0IW-DTL-SESN-CD[KS0IW-IX1];
    KS0IW02.KS0IW-XSNYR = KS0IW01.KS0IW-DTL-SESN-YR[KS0IW-IX1];
    KS0IW02.KS0IW-STY-NBR = KS0IW01.KS0IW-DTL-STY-NBR[KS0IW-IX1];
    KS0IW02.SY2CLRID = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
    KS0IW02.XDMCD = KS0IW01.KS0IW-DTL-DIM-CD[KS0IW-IX1];
                                   /* Dimension cd*/
    KS0IW02.KS0IW-XPRMT-STY-NBR = KS0IW01.KS0IW-DTL-XPRMT-STY[KS0IW-IX1]; /* Experimental style number*/
    KS0IW02.KS0IW-STY-TYP-CD = KS0IW01.KS0IW-DTL-STY-TYP[KS0IW-IX1];
    KS0IW02.KS0IW-HTS-NBR = KS0IW01.KS0IW-DTL-HTS-NBR[KS0IW-IX1];
    KS0IW02.KS0IW-QOTA-CAT-CD = KS0IW01.KS0IW-DTL-QOTA-CAT-CD[KS0IW-IX1];
    KS0IW02.KS0IW-DTY-RATE = KS0IW01.KS0IW-DTL-DTY-RATE[KS0IW-IX1];
    KS0IW02.KS0IW-RULE-NBR = KS0IW01.KS0IW-DTL-RULE-NBR[KS0IW-IX1];
    KS0IW02.KS0IW-CATLG-PAGE-NBR = KS0IW01.KS0IW-SYNCTPGN[KS0IW-IX1];
    KS0IW02.KS0IW-MAP2-TEXT = KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1];
    KS0IW02.KS0IW-MAP2-PRBM = KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1];
    KS0IW02.KS0IW-REG-CD = KS0IW01.KS0IW-REG-CD;
    if (KS0IW02.KS0IW-REG-CD > " ") /* If market reg entered*/
      if (KS0IW02.KS0IW-REG-CD in XDRTBL.XDR-PROD-REG-CD /* Code in table*/
       && XDRTBL.XXX-STAT[sysVar.arrayIndex] == "A")     /* and active status*/
        KS0IW02.KS0IW-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
      else
        KS0IW02.KS0IW-REG-SDESC = "ALL";
      end
    end
  else
    if (KS0IW00.KS0IW-REFORMAT-MAP1 == "Y")
      KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
      KS0IW00.KS0IW-SWD = "1"; /* Map request switch*/
      KS0IW00.KS0IW-SWF = "Y"; /* Format map switch*/
      exit stack; /* Return to previous process*/
    else
      KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
      KS0IW00.KS0IW-SWD = "1"; /* Map request switch*/
      KS0IW00.KS0IW-SWF = "Y"; /* Format map switch*/
      exit stack; /* Return to previous process*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Obtain the table rows to be displayed.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-21100(); /* Obtain the VCPROD02 rows*/
  ;
  if (VCPROD02.KS-PRBM-NBR > 0) /* If problem exists*/
    KS0I-21200(); /* Obtain the VCPROB01 rows*/
  else
    KS0IW-PRBM-TABLE = " "; /* Clear problem table*/
  end
  ;
  KS0I-21300(); /* Obtain the VKSTXT01 rows*/
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no errors so far*/
    ;
    KS0I-21400(); /* Save in display storage*/
    ;
  else
    ;
    KSWREC.XXXPRCNM = "41000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  KS0IW02.KS0IW-FACTORY-TABLE = " "; /* init tbl here*/
  /* get factory info for apparel, or any gpc w/mult colors*/
  if (KS0IW02.SY2CLRID == "***") /* multiple colors*/
    KS0IW00.KS0IW-CLR-IDX = 1;
    while (KS0IW00.KS0IW-CLR-IDX <= 30
     && KS0IW02.KS0IW-COLOR[KS0IW-CLR-IDX] != " ")
      KS0IW02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-CLR-IDX];
      if (KS0IW02.KS0IW-POIDT > " ") /* If PO ID month range exists*/
        KS0I-21800(); /* Select VPOITM01 set*/
      else
        if (KS0IW02.KS0IW-STY-NBR > " ")
          KS0I-21900(); /* Select VFYCLR01 set*/
        end
      end
      KS0IW00.KS0IW-CLR-IDX = KS0IW00.KS0IW-CLR-IDX + 1;
    end
    KS0IW02.SY2CLRID = "***";
  else
    if (KS0IW02.SY2CLRID != " ")
      if (KS0IW02.KS0IW-POIDT > " ") /* If PO ID month range exists*/
        KS0I-21800(); /* Select VPOITM01 set*/
      else
        if (KS0IW02.KS0IW-STY-NBR > " ")
          KS0I-21900(); /* Select VFYCLR01 set*/
        end
      end
    end
  end
  ;
  if (KS0IW02.XGPCD == "02") /* If footwear GPC code*/
    if (KS0IW02.KS0IW-STY-NBR > " ")
      KS0I-21500(); /* Select unique VSYCLR01 row*/
    else
      KS0I-21600(); /* Select unique VSYDVL01 row*/
    end
    KS0I-21700(); /* Obtain the upper/lower contents*/
    if (KS0IW02.KS0IW-POIDT > " ") /* If PO ID month range exists*/
      KS0I-21800(); /* Select VPOITM01 set*/
    else
      if (KS0IW02.KS0IW-STY-NBR > " ")
        KS0I-21900(); /* Select VFYCLR01 set*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
  ;
  ;
end // end KS0I-41000

// Format and display the map
Function KS0I-42000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0IW00.KS0IW-SWF == "Y") /* Map must be formatted*/
      if (KS0IW00.KS0IW-FNC == "D") /* Duplicate function requested*/
        KS0I-42100(); /* Format the data on the map*/
      else
        if (KS0IW00.KS0IW-FNC == "A") /* Add function requested*/
          KS0IM003.KS0IM-MAP-DESC = "ADD"; /* Map description*/
          set KS0IM003.KS0IM-PRBM-CD[1] cursor;
          set KS0IM003.KS0IM-PF18 skip;
        else
          if (KS0IW00.KS0IW-FNC == "I" /* Inquiry function*/
           || KS0IW00.KS0IW-FNC == "P") /* or problems requested*/
            KS0I-42200(); /* Format the inq/prb map*/
          else
            if (KS0IW00.KS0IW-FNC == "C") /* Inquiry function*/
              KS0I-42300(); /* Format the change map*/
            end
          end
        end
      end
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0IM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0IM003.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  KS0IW00.KS0IW-SWF = "N"; /* Format the map switch*/
  ;
  KS0IM003.KS0IM-BUS-UNIT-CD = KS0IM002.KS0IM-BUS-UNIT-CD; /* GPC code*/
  KS0IM003.KS0IM-STY-NBR = KS0IM002.KS0IM-STY-NBR; /* Style number*/
  KS0IM003.KS0IM-COLR-CD-ID = KS0IM002.KS0IM-COLR-CD-ID; /* Color id*/
  KS0IM003.KS0IM-DIM-CD = KS0IM002.KS0IM-DIM-CD; /* Dimension code*/
  ;
  if (KS0IW02.KS0IW-DTY-RATE > " ")
    set KS0IM003.KS0IM-GEN-DTY-FIELD skip;
    KS0IM003.KS0IM-GEN-DTY-RATE = KS0IW02.KS0IW-DTY-RATE;
  end
  ;
  if (KS0IW02.KS0IW-QOTA-CAT-CD > " ")
    set KS0IM003.KS0IM-QOTA-CAT-FIELD skip;
    KS0IM003.KS0IM-QOTA-CAT-CD = KS0IW02.KS0IW-QOTA-CAT-CD;
    KS0IM003.KS0IM-QOTA-CAT-SDESC = KS0IW02.KS0IW-QOTA-CAT-DESC;
  end
  KS0IM003.KS0IM-REG-CD = KS0IW02.KS0IW-REG-CD;
  KS0IM003.KS0IM-REG-SDESC = KS0IW02.KS0IW-REG-SDESC;
  KS0IM003.KS0IM-HTS-NBR = KS0IM002.KS0IM-HTS-NBR; /* HTS number*/
  if (KS0IM002.KS0IM-TEAM-NBR > " ")
    KS0IM003.KS0IM-TEAM-NBR = KS0IM002.KS0IM-TEAM-NBR;
    set KS0IM003.KS0IM-TEAM-NBR-FIELD skip;
    set KS0IM003.KS0IM-TEAM-NBR skip;
    if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y")
      set KS0IM003.KS0IM-TEAM-NBR skip, bold;
    end
  end
  KS0IM003.KS0IM-RULE-NBR = KS0IM002.KS0IM-RULE-NBR; /* Rule nbr*/
  if (KS0IM002.KS0IM-RULE-NBR > " ")
    KS0IM003.KS0IM-RULE-DT = KS0IM002.KS0IM-RULE-DT;
    set KS0IM003.KS0IM-RULE-DT skip;
    set KS0IM003.KS0IM-DT-FIELD skip;
  end
  KS0IM003.KS0IM-XPRMT-STY-NBR = KS0IM002.KS0IM-XPRMT-STY-NBR; /* Experimental style number*/
  KS0IM003.KS0IM-SESN-CD = KS0IM002.KS0IM-SESN-CD; /* Season code*/
  KS0IM003.KS0IM-SESN-YR-RNG = KS0IM002.KS0IM-SESN-YR-RNG;
  ;
  if (KS0IW00.KS0IW-FNC == "I"
   || KS0IW00.KS0IW-FNC == "P")
    KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
    while (KS0IW00.KS0IW-IX2 <= 10) /* Less than max*/
      if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] > " ") /* If code exists*/
        set KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] skip;
      else
        set KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] invisible, skip;
      end
      KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
    end
  end
  ;
  if (KS0IW03.KS0IW-MAP3-PRBM[11] > " "
   && KS0IW03.KS0IW-MAP3-CAUTION-FL != "Y")
    KSWREC.XXXMSGNO = 123;
    KS0IW03.KS0IW-MAP3-CAUTION-FL = "Y";
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0IM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0IM003.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0IM003 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  ;
  converse KS0IM003 ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0IM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0IM003.CAITEM; /* Application data*/
  ;
  ;
end // end KS0I-42000

// Format the data on the map
Function KS0I-42100()
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM003 initial; /* M003 display*/
  ;
  KS0IM003.KS0IM-MAP-DESC = "DUPLICATE"; /* Map description*/
  if (KS0IW02.XGPCD == "02") /* If footwear GPC*/
    KS0IM003.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
  else
    KS0IM003.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
  end
  ;
  set KS0IM003.KS0IM-PRBM-CD[1] cursor; /* Problem code*/
  ;
  set KS0IM003.KS0IM-PF18 skip;
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-IX2 <= 10 /* Less than max*/
   && KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2] > " ") /* and prbm exists*/
    KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2]; /* Move in code*/
    KS0IM003.KS0IM-PRBM-DESC[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM-DESC[KS0IW-IX2]; /* Move in description*/
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  ;
end // end KS0I-42100

// Format Inquiry map data
Function KS0I-42200()
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM003 initial; /* M003 display*/
  ;
  KS0IM003.KS0IM-MAP-DESC = "INQUIRY"; /* Map description*/
  if (KS0IW02.XGPCD == "02") /* If footwear GPC*/
    KS0IM003.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
  else
    KS0IM003.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
  end
  ;
  set KS0IM003.CATOAP cursor; /* Option field*/
  ;
  set KS0IM003.KS0IM-BUS-UNIT-CD skip;
  set KS0IM003.KS0IM-STY-NBR skip;
  set KS0IM003.KS0IM-COLR-CD-ID skip;
  set KS0IM003.KS0IM-DIM-CD skip;
  ;
  set KS0IM003.KS0IM-HTS-NBR skip;
  set KS0IM003.KS0IM-RULE-NBR skip;
  set KS0IM003.KS0IM-RULE-DT skip;
  set KS0IM003.KS0IM-XPRMT-STY-NBR skip;
  set KS0IM003.KS0IM-SESN-CD skip;
  set KS0IM003.KS0IM-SESN-YR-RNG skip;
  if (KS0IW00.KS0IW-FNC == "I") /* If inquiry function*/
    set KS0IM003.KS0IM-PF18 skip; /* Comment screen key*/
  end
  ;
  if (KS0IW00.KS0IW-FNC == "P") /* If problem function*/
    KS0IM002.KS0IM-BUS-UNIT-CD = KS0IW02.XGPCD;
    KS0IM002.KS0IM-STY-NBR = KS0IW02.KS0IW-STY-NBR;
    KS0IM002.KS0IM-COLR-CD-ID = KS0IW02.SY2CLRID;
    KS0IM002.KS0IM-DIM-CD = KS0IW02.XDMCD;
    KS0IM002.KS0IM-HTS-NBR = KS0IW02.KS0IW-HTS-NBR;
    KS0IM002.KS0IM-RULE-NBR = KS0IW02.KS0IW-RULE-NBR;
    KS0IM002.KS0IM-RULE-DT = KS0IW02.KS0IW-RULE-DT;
    KS0IM002.KS0IM-XPRMT-STY-NBR = KS0IW02.KS0IW-XPRMT-STY-NBR;
    KS0IM002.KS0IM-SESN-CD = KS0IW02.KS0IW-XSECD;
    if (KS0IW02.KS0IW-XSNYR > 0)
      KS0IM002.KS0IM-SESN-YR-RNG = KS0IW02.KS0IW-SESN-YEAR;
    else
      KS0IM002.KS0IM-SESN-YR-RNG = 0;
    end
  end
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-IX2 <= 10) /* Less than max*/
    KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2]; /* Move in code*/
    KS0IM003.KS0IM-PRBM-DESC[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM-DESC[KS0IW-IX2]; /* Move in description*/
    if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] > " ") /* If code exists*/
      set KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] skip;
    else
      set KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] invisible, skip;
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  ;
end // end KS0I-42200

// Format Change map data
Function KS0I-42300()
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM003 initial; /* M003 display*/
  ;
  KS0IM003.KS0IM-MAP-DESC = "CHANGE"; /* Map description*/
  if (KS0IW02.XGPCD == "02") /* If footwear GPC*/
    KS0IM003.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
  else
    KS0IM003.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
  end
  ;
  set KS0IM003.KS0IM-PRBM-CD[1] cursor; /* Problem code*/
  ;
  set KS0IM003.KS0IM-PF18 skip;
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-IX2 <= 10) /* Less than max*/
    if (KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2] > " ") /* and prbm exists*/
      KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2]; /* Move in code*/
      KS0IM003.KS0IM-PRBM-DESC[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM-DESC[KS0IW-IX2]; /* Move in description*/
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  ;
end // end KS0I-42300

// Check the attention identifier
Function KS0I-43000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0IW00.KS0IW-SWR == "Y") /* Request for data*/
      set KS0IW03 empty; /* M003 display storage*/
    end
    ;
    KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
    KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (COMMAREA.CATOAP == "KS0K")
        KSWREC.XXXPRCNM = "43000"; /* Module identification*/
        converseLib.validationFailed(6); /* PA/PF key may not be used*/
        set KS0IM003.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        KS0I-11100(); /* Purge any temporary storage*/
        ;
        XSKS-S0001(); /* Exit to another application*/
        ;
        KS0IW00.KS0IW-SWD = "3"; /* Map to be displayed switch*/
        ;
      end
    else
      ;
      KSWREC.XXXPRCNM = "43000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      set KS0IM003.CATOAP cursor, bold; /* Highlight*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0IM003"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      ;
      COMMAREA.CATOAP = "KS0A"; /* Xfer to Customs Menu*/
      ;
    end
    ;
    KS0I-11100(); /* Purge any temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf18 /* PF18 was pressed*/
   && KS0IW00.KS0IW-FNC == "P")    /* and problems function*/
    KSWREC.XXXPRCNM = "43000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key may not be used*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "43000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end KS0I-43000

// Reset the field intensities
Function KS0I-44000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM003.KS0IM-BUS-UNIT-CD initialAttributes; /* GPC code*/
  set KS0IM003.KS0IM-SESN-CD initialAttributes; /* Season code*/
  set KS0IM003.KS0IM-SESN-YR-RNG initialAttributes; /* Season year range*/
  set KS0IM003.KS0IM-STY-NBR initialAttributes; /* Style code*/
  set KS0IM003.KS0IM-COLR-CD-ID initialAttributes; /* Color code*/
  set KS0IM003.KS0IM-DIM-CD initialAttributes; /* Dimension code*/
  set KS0IM003.KS0IM-XPRMT-STY-NBR initialAttributes; /* Experimental style number*/
  set KS0IM003.KS0IM-HTS-NBR initialAttributes; /* HS number*/
  set KS0IM003.KS0IM-RULE-NBR initialAttributes; /* Ruling number*/
  set KS0IM003.KS0IM-RULE-DT initialAttributes; /* Ruling date*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Initialize line index*/
  while (KS0IW00.KS0IW-IXM <= 10) /* Until end of detail lines*/
    set KS0IM003.KS0IM-PRBM-CD[KS0IW-IXM] initialAttributes;
    set KS0IM003.KS0IM-PRBM-DESC[KS0IW-IXM] initialAttributes;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1;
  end
  ;
  set KS0IM003.CATOAP initialAttributes; /* TO application*/
  set KS0IM003.CAITEM initialAttributes; /* Application data*/
  ;
  KS0IW00.KS0IW-IXM = 1; /* Initialize line index*/
  ;
  while (KS0IW00.KS0IW-IXM <= 10) /* Until end of detail lines*/
    ;
    if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IXM] == "?") /* if ? in problem field*/
      KS0IW00.KS0IW-DEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        CUSTOMS FEATURE  "; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem code window*/
      end
      ;
       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/
      ;
      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0IM003.KS0IM-PRBM-CD[KS0IW-IXM] = YKPTBL.YKP-PRBM-CD[XX0XWPIX];
        KS0IM003.KS0IM-PRBM-DESC[KS0IW-IXM] = YKPTBL.YKP-PRBM-DESC[XX0XWPIX];
        set KS0IM003.KS0IM-PRBM-CD[KS0IW-IXM] cursor;
      else
        KS0IM003.KS0IM-PRBM-CD[KS0IW-IXM] = " "; /* clear fields*/
        KS0IM003.KS0IM-PRBM-DESC[KS0IW-IXM] = " "; /* clear fields*/
      end
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* increment index*/
    ;
  end
  ;
  if (KS0IW00.KS0IW-DEF == "Y") /* if a pop up window was displayed*/
    ;
    KS0IW00.KS0IW-DEF = "N"; /* Set data entered flag to yes*/
    KS0IW00.KS0IW-SWR = "N"; /* Reset request for data switch*/
    KS0IW00.KS0IW-SWF = "N"; /* Reset format the map switch*/
    ;
    converseLib.clearScreen();
     /* Restore the original map*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0I-44000

// Verify the entered data
Function KS0I-45000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "45000"; /* Module identification*/
    set KS0IM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Perform standard Verify any Changed Data.*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  else
    if (KS0IW00.KS0IW-FNC == "P"
     || KS0IW00.KS0IW-FNC == "I")
      ;
    else
      KS0I-45100(); /* Verify any changed data*/
      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        exit stack; /* Exit to display map*/
      end
      KS0I-45200(); /* Check for Mutually Exclusive Features*/
    end
  end
  ;
  ;
end // end KS0I-45000

// Verify any changed data
Function KS0I-45100()
  /* ------------------------------------------------------------*/
  /* Verify the Problem code.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IX2 = 10; /* Set index*/
  while (KS0IW00.KS0IW-IX2 > 0) /* Until end of problem codes*/
    if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] > " ") /* If prbm entered*/
      if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] in YKPTBL.YKP-PRBM-CD
       && YKPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        KS0IM003.KS0IM-PRBM-DESC[KS0IW-IX2] = YKPTBL.YKP-PRBM-DESC[sysVar.arrayIndex]; /* Move in description*/
        KS0IW03.KS0IW-MAP3-PRBM-DESC[KS0IW-IX2] = YKPTBL.YKP-PRBM-DESC[sysVar.arrayIndex]; /* Move in description*/
        ;
      else
        ;
    /* ------------------------------------------------------------*/
    /* If not found or inactive, set warning message.*/
    /* ------------------------------------------------------------*/
        if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] != 
        KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2]) /* Changed since last display*/
          ;
          KSWREC.XXXPRCNM = "45100"; /* Module identification*/
          set KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] cursor, bold; /* Highlight*/
          KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2] = KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2];
          KS0IW00.KS0IW-MAP3-CHANGED = "Y";
          converseLib.validationFailed(68); /* Warning not found message*/
          ;
        end
      end
    end
    if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] != 
    KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2])
      KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX2] = KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2];
      KS0IW00.KS0IW-MAP3-CHANGED = "Y";
      KS0IW03.KS0IW-MAP3-PRBM-DESC[KS0IW-IX2] = " ";
      KS0IM003.KS0IM-PRBM-DESC[KS0IW-IX2] = " ";
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 - 1; /* Decrement index*/
  end
  ;
  ;
end // end KS0I-45100

// Verify any changed data
Function KS0I-45200()
  /* ------------------------------------------------------------*/
  /* Check for mutually exclusive Feature Type codes*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Set index*/
  while (KS0IW00.KS0IW-IX2 <= 10) /* Until end of problem codes*/
    if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] == "FO" /* PRBM = FO*/
     || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] == "FS" /* PRBM = FS*/
     || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] == "FT") /* PRBM = FT*/
      ;
      KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX2; /* Set index*/
      while (KS0IW00.KS0IW-IX3 <= 10) /* Until end of problem codes*/
        if (KS0IW00.KS0IW-IX2 != KS0IW00.KS0IW-IX3)
          if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX3] == "FO" /* PRBM = FO*/
           || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX3] == "FS" /* PRBM = FS*/
           || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX3] == "FT") /* PRBM = FT*/
            ;
            KSWREC.XXXPRCNM = "45200"; /* Module identification*/
            set KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] cursor, bold;
                                   /* Highlight*/
            set KS0IM003.KS0IM-PRBM-CD[KS0IW-IX3] bold; /* Highlight*/
            converseLib.validationFailed(126); /* Mutually exclusive codes*/
            ;
          end
        end
        KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1; /* Increment index*/
      end
    end
    ;
    if (converseVar.validationMsgNum > 0)
      return;
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Check for mutually exclusive CF5523 codes*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Set index*/
  while (KS0IW00.KS0IW-IX2 <= 10) /* Until end of problem codes*/
    if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] == "F1" /* PRBM = F1*/
     || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] == "F2" /* PRBM = F2*/
     || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] == "F3" /* PRBM = F3*/
     || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] == "F4") /* PRBM = F4*/
      ;
      KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX2; /* Set index*/
      while (KS0IW00.KS0IW-IX3 <= 10) /* Until end of problem codes*/
        if (KS0IW00.KS0IW-IX2 != KS0IW00.KS0IW-IX3)
          if (KS0IM003.KS0IM-PRBM-CD[KS0IW-IX3] == "F1" /* PRBM = F1*/
           || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX3] == "F2" /* PRBM = F2*/
           || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX3] == "F3" /* PRBM = F3*/
           || KS0IM003.KS0IM-PRBM-CD[KS0IW-IX3] == "F4") /* PRBM = F4*/
            ;
            KSWREC.XXXPRCNM = "45200"; /* Module identification*/
            set KS0IM003.KS0IM-PRBM-CD[KS0IW-IX2] cursor, bold;
                                   /* Highlight*/
            set KS0IM003.KS0IM-PRBM-CD[KS0IW-IX3] bold; /* Highlight*/
            converseLib.validationFailed(126); /* Mutually exclusive codes*/
            ;
          end
        end
        KS0IW00.KS0IW-IX3 = KS0IW00.KS0IW-IX3 + 1; /* Increment index*/
      end
    end
    ;
    if (converseVar.validationMsgNum > 0)
      return;
    end
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
end // end KS0I-45200

// Process valid input request
Function KS0I-46000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If enter was pressed and no errors and add function:*/
  /* Check to see if problem already exists.  If not,*/
  /* add rows to data base.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* Enter pressed*/
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      if (KS0IW00.KS0IW-FNC == "A") /* If add function requested*/
        set VCPROD02 empty; /* Clear record*/
        if (KS0IM002.KS0IM-COLR-CD-ID == "***")
          VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[1];
        else
          VCPROD02.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
        end
        KS0I-26100(); /* Select unique VCPROD02 row*/
        if (SQLCA.VAGen_SQLCODE == 0 /* If product already exists*/
         && VCPROD02.KS-PRBM-NBR > 0) /* and problem nbr already exists*/
          VCPROB01.KS-PRBM-NBR = VCPROD02.KS-PRBM-NBR;
          KS0I-26400(); /* Add VCPROB01 rows process*/
        else
          if (SQLCA.VAGen_SQLCODE == 0 /* If product exists*/
           && VCPROD02.KS-PRBM-NBR == 0) /* and prbm nbr does not exist*/
            KS0IW00.KS0IW-CTL-FUNC = "P";
            KS0I-26200(); /* Get next prbm-nbr from VKSCTL01*/
            VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
            KS0IW02.KS0IW-MAP2-PRBM = VCPROB01.KS-PRBM-NBR;
            KS0I-26400(); /* Add VCPROB01 rows process*/
            KS0I-46100(); /* Update VCPROD02 row*/
            if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
              KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
              KS0IW00.KS0IW-VCPROD02-UPD = "Y"; /* Row updated switch*/
              KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
              KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
              XX0XS01(); /* Get current date/time*/
              KS0I-26700(); /* Write VKSAUD01 rows*/
            else
              KS0IW00.KS0IW-VCPROD02-UPD = "N";
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* Reset all DB modifications*/
              return; /* Return to previous process*/
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100 /* Product does not already exist*/
             && KS0IW00.KS0IW-MAP3-CHANGED == "Y")
              KS0IW00.KS0IW-CTL-FUNC = "P";
              KS0I-26200(); /* Get next prbm-nbr from VKSCTL01*/
              VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
              KS0IW02.KS0IW-MAP2-PRBM = VCPROB01.KS-PRBM-NBR;
              KS0I-26400(); /* Add VCPROB01 rows process*/
            end
            ;
          end
        end
        KS0IW00.KS0IW-MAP3-CHANGED = "N";
        KS0I-26000(); /* Update map 2*/
      else
        if (KS0IW00.KS0IW-FNC == "D") /* If dup function requested*/
          if (KS0IW00.KS0IW-MAP3-CHANGED == "Y")
            KS0IW00.KS0IW-MAP3-CHANGED = "N";
            KS0IW00.KS0IW-CTL-FUNC = "P";
            KS0I-26200(); /* Get next prbm-nbr from VKSCTL01*/
            VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
            KS0IW02.KS0IW-MAP2-PRBM = VCPROB01.KS-PRBM-NBR;
            KS0I-26400(); /* Add VCPROB01 rows process*/
            if (SQLCA.VAGen_SQLCODE == 0) /* Rows added successfully*/
              KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
              KS0I-26000(); /* Update map 2 data*/
            else
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* Reset all DB modificaitons*/
              return; /* Return to previous process*/
            end
          else
            KS0I-26000(); /* Update map 2 data*/
          end
        else
          if (KS0IW00.KS0IW-FNC == "C") /* If chg function requested*/
            if (KS0IW00.KS0IW-MAP3-CHANGED == "Y")
              KS0I-46001(); /* Update the change date in VCPROD02*/
              KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
              if (KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1] > 0) /* If prbms exist*/
                VCPROD02.KS-PRBM-NBR = KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1];
                KS0I-36200(); /* Delete original problem process*/
                KS0I-26400(); /* Add VCPROB01 rows process*/
                if (KS0IW00.KS0IW-COUNTER == 0)
                  VCPROB01.KS-PRBM-NBR = 0;
                  if (KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] == "***")
                    KS0I-26600(); /* Move color code array*/
                  else
                    KS0IW02.KS0IW-COLOR-TABLE = " ";
                                   /* Clear color table*/
                    KS0IW02.KS0IW-COLOR[1] = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
                  end
                  KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
                  XX0XS01(); /* Get current date/time*/
                  while (KS0IW02.KS0IW-COLOR[KS0IW-IX2] > " "
                   || KS0IW00.KS0IW-IX2 == 1)
                    VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX2];
                    KS0I-36301(); /* Select unique VCPROD02 row*/
                    VCPROD02.KS-PRBM-NBR = VCPROB01.KS-PRBM-NBR;
                    KS0I-46100(); /* Update VCPROD02 row*/
                    if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
                      KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
                      KS0IW00.KS0IW-VCPROD02-UPD = "Y";
                                   /* Row updated switch*/
                      KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                      KS0IW00.KS0IW-SWR = "Y"; /* Request for data*/
                      KS0I-26700(); /* Write VKSAUD01 rows*/
                    else
                      KS0IW00.KS0IW-VCPROD02-UPD = "N";
                      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                      sysLib.rollback();
                      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                       /* Reset all DB modifications*/
                      return; /* Return to previous process*/
                    end
                    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
                  end
                else
                  if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
                    KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
                    KS0IW00.KS0IW-VCPROD02-UPD = "Y";
                    KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                    KS0IW00.KS0IW-SWR = "Y"; /* Request for data*/
                  else
                    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                    sysLib.rollback();
                    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                     /* Reset all DB modifications*/
                    return; /* Return to previous process*/
                  end
                end
              else
                KS0IW00.KS0IW-CTL-FUNC = "P";
                KS0I-26200(); /* Get next prbm-nbr from VKSCTL01*/
                VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
                KS0IW02.KS0IW-MAP2-PRBM = VCPROB01.KS-PRBM-NBR;
                KS0IW01.KS0IW-PRBM-NBR[KS0IW-IX1] = VCPROB01.KS-PRBM-NBR;
                KS0I-26400(); /* Add VCPROB01 rows process*/
                if (KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1] == "***")
                  KS0I-26600(); /* Move color code array*/
                else
                  KS0IW02.KS0IW-COLOR-TABLE = " ";
                                   /* Clear color table*/
                  KS0IW02.KS0IW-COLOR[1] = KS0IW01.KS0IW-DTL-COLR-CD-ID[KS0IW-IX1];
                end
                KS0IW00.KS0IW-IX2 = 1; /* Reset index*/
                while (KS0IW02.KS0IW-COLOR[KS0IW-IX2] > " "
                 || KS0IW00.KS0IW-IX2 == 1)
                  VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX2];
                  KS0I-36301(); /* Select unique VCPROD02 row*/
                  VCPROD02.KS-PRBM-NBR = VCPROB01.KS-PRBM-NBR;
                  KS0I-46100(); /* Update VCPROD02 row*/
                  if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
                    KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
                    KS0IW00.KS0IW-VCPROD02-UPD = "Y";
                                   /* Row updated switch*/
                    KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                    KS0IW00.KS0IW-SWR = "Y"; /* Request for data*/
                  else
                    KS0IW00.KS0IW-VCPROD02-UPD = "N";
                    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                    sysLib.rollback();
                    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                     /* Reset all DB modifications*/
                    return; /* Return to previous process*/
                  end
                  KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
                end
              end
              KS0IW00.KS0IW-MAP3-CHANGED = "N";
              KS0I-36000(); /* Update map 2*/
            else
              KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
              KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
              KS0I-36000(); /* Update map 2*/
            end
          else
            if (KS0IW00.KS0IW-FNC == "P")
              KS0IW00.KS0IW-SWD = "3"; /* Map switch*/
              KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
            else
              if (KS0IW00.KS0IW-FNC == "I")
                KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
              end
            end
          end
        end
      end
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 pressed*/
    if (converseVar.validationMsgNum != 0)
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
    else
      if (KS0IW00.KS0IW-FNC == "P") /* If problem function*/
        ;
        KS0IW00.KS0IW-SAV-SESN-CD = KS0IM002.KS0IM-SESN-CD;
        /* ----------------- y2k out begin ---------------*/
        /* IF KS0IM002.KS0IM-SESN-YR-RNG GT 0;*/
        /* ----------------- y2k out end -----------------*/
        /* ----------------- y2k in  begin ---------------*/
        if (KS0IM002.KS0IM-SESN-YR-RNG >= "00"
         && KS0IM002.KS0IM-SESN-YR-RNG <= "99")
          /* ----------------- y2k in end ------------------*/
          ;
          KS0IW01.KS0IW-SESN-YY = KS0IM002.KS0IM-SESN-YR-RNG;
          if (KS0IW01.KS0IW-SESN-YY > "65")
            KS0IW01.KS0IW-SESN-CENT = "19";
          else
            KS0IW01.KS0IW-SESN-CENT = "20";
          end
        else
          ;
          KS0IW01.KS0IW-SESN-YR = "0";
        end
        KS0IW00.KS0IW-SAV-SESN-YR = KS0IW01.KS0IW-SESN-YR;
        ;
        KS0IW00.KS0IW-SAV-STY-NBR = KS0IM002.KS0IM-STY-NBR;
        KS0IW00.KS0IW-SAV-XPRMT-STY = KS0IM002.KS0IM-XPRMT-STY-NBR;
        KS0IW00.KS0IW-SAV-STY-TYP = KS0IM002.KS0IM-STY-TYP-CD;
        KS0IW00.KS0IW-SAV-COLR-CD-ID = KS0IM002.KS0IM-COLR-CD-ID;
        KS0IW00.KS0IW-SAV-DIM-CD = KS0IM002.KS0IM-DIM-CD;
        ;
        KS0IW00.KS0IW-SWD = "1"; /* Map switch*/
        KS0IW00.KS0IW-SAV = KS0IW00.KS0IW-SAV + 1;
      else
        KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
        KS0IW00.KS0IW-SWF = "N"; /* Format the map switch*/
        KS0IW00.KS0IW-SWR = "N"; /* Request for data*/
      end
    end
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf18) /* PF18 pressed*/
    ;
    if (converseVar.validationMsgNum == 0)
      KS0IW00.KS0IW-SWD = "4"; /* Map switch*/
    else
      KS0IW00.KS0IW-SWF = "N";
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
  KS0IW00.KS0IW-SAV-SESN-CD = KS0IM002.KS0IM-SESN-CD;
        /* ----------------- y2k out begin ---------------*/
        /* IF KS0IM002.KS0IM-SESN-YR-RNG GT 0;*/
        /* ----------------- y2k out end -----------------*/
        /* ----------------- y2k in  begin ---------------*/
  if (KS0IM002.KS0IM-SESN-YR-RNG >= "00"
   && KS0IM002.KS0IM-SESN-YR-RNG <= "99")
          /* ----------------- y2k in end ------------------*/
    ;
    KS0IW01.KS0IW-SESN-YY = KS0IM002.KS0IM-SESN-YR-RNG;
    if (KS0IW01.KS0IW-SESN-YY > "65")
      KS0IW01.KS0IW-SESN-CENT = "19";
    else
      KS0IW01.KS0IW-SESN-CENT = "20";
    end
  else
    ;
    KS0IW01.KS0IW-SESN-YR = "0";
  end
  KS0IW00.KS0IW-SAV-SESN-YR = KS0IW01.KS0IW-SESN-YR;
  ;
  KS0IW00.KS0IW-SAV-STY-NBR = KS0IM002.KS0IM-STY-NBR;
  KS0IW00.KS0IW-SAV-XPRMT-STY = KS0IM002.KS0IM-XPRMT-STY-NBR;
  KS0IW00.KS0IW-SAV-STY-TYP = KS0IM002.KS0IM-STY-TYP-CD;
  KS0IW00.KS0IW-SAV-COLR-CD-ID = KS0IM002.KS0IM-COLR-CD-ID;
  KS0IW00.KS0IW-SAV-DIM-CD = KS0IM002.KS0IM-DIM-CD;
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
end // end KS0I-46000

// Update VCPROD01 row
Function KS0I-46001()
  /* ------------------------------------------------------------*/
  /* Update a row to the DCUSTM.VCPROD02 table.*/
  /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Get current date and time*/
  ;
  VCPROD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
  VCPROD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
  ;
  try
    call "VCPROD02" ("U ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "46001"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-46001

// Update VCPROD01 row
Function KS0I-46100()
  /* ------------------------------------------------------------*/
  /* Update a row to the DCUSTM.VCPROD02 table.*/
  /* ------------------------------------------------------------*/
  ;
  VCPROD02.XXXUSRID = COMMAREA.CAUSERID; /* Move user id*/
  VCPROD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
  VCPROD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
  ;
  try
    call "VCPROD02" ("U ", SQLCA, VCPROD02) {isNoRefresh = yes, isExternal = yes};
  end /* Slct tbl set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "46100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPROD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCPROD02.VCPROD02-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-46100

// Main process Map 4
Function KS0I-50000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.  (N/A for this process.)*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0I-52000(); /* Format and display the map*/
  ;
  KS0I-53000(); /* Check attention identifier*/
  ;
  KS0I-54000(); /* Reset fields to normal intensity*/
  ;
  KS0I-55000(); /* Verify the entered data*/
  ;
  KS0I-56000(); /* Process valid input request*/
  ;
  ;
end // end KS0I-50000

// Format and converse the map
Function KS0I-52000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  if (KS0IW00.KS0IW-VCPROD02-ADDED == "Y"
   || KS0IW00.KS0IW-VCPROD02-DUP == "Y"
   || KS0IW00.KS0IW-VCPROD02-UPD == "Y")
    KSWREC.XXXMSGNO = 1;
    KS0IW00.KS0IW-VCPROD02-ADDED = "N";
    KS0IW00.KS0IW-VCPROD02-DUP = "N";
    KS0IW00.KS0IW-VCPROD02-UPD = "N";
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0IW00.KS0IW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0IW00.KS0IW-SWF == "Y") /* Map must be formatted*/
      if (KS0IW00.KS0IW-FNC == "D") /* Duplicate function requested*/
        KS0I-52100(); /* Format the data on the map*/
      else
        if (KS0IW00.KS0IW-FNC == "A") /* Add function requested*/
          KS0IM004.KS0IM-MAP-DESC = "ADD"; /* Map description*/
        else
          if (KS0IW00.KS0IW-FNC == "I")
            KS0I-52200(); /* Format inquiry map data*/
          else
            if (KS0IW00.KS0IW-FNC == "C")
              KS0I-52300(); /* Format change map data*/
            end
          end
        end
      end
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0IM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0IM004.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the heading information on the map.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWF = "N"; /* Format the map switch*/
  ;
  if (KS0IW00.KS0IW-FNC == "I") /* If inquiry function*/
    set KS0IM004.CATOAP cursor; /* Set cursor*/
  else
    set KS0IM004.KS0IM-PROD-DESC[1] cursor; /* Product description*/
  end
  ;
  KS0IM004.KS0IM-BUS-UNIT-CD = KS0IM002.KS0IM-BUS-UNIT-CD; /* GPC code*/
  KS0IM004.KS0IM-STY-NBR = KS0IM002.KS0IM-STY-NBR; /* Style number*/
  KS0IM004.KS0IM-COLR-CD-ID = KS0IM002.KS0IM-COLR-CD-ID; /* Color id*/
  KS0IM004.KS0IM-DIM-CD = KS0IM002.KS0IM-DIM-CD; /* Dimension code*/
  ;
  if (KS0IW02.KS0IW-DTY-RATE > " ")
    set KS0IM004.KS0IM-GEN-DTY-FIELD skip;
    KS0IM004.KS0IM-GEN-DTY-RATE = KS0IW02.KS0IW-DTY-RATE;
  end
  ;
  if (KS0IW02.KS0IW-QOTA-CAT-CD > " ")
    set KS0IM004.KS0IM-QOTA-CAT-FIELD skip;
    KS0IM004.KS0IM-QOTA-CAT-CD = KS0IM002.KS0IM-QOTA-CAT-CD;
    KS0IM004.KS0IM-QOTA-CAT-SDESC = KS0IM002.KS0IM-QOTA-CAT-SDESC;
  end
  ;
  KS0IM004.KS0IM-REG-CD = KS0IM002.KS0IM-REG-CD;
  KS0IM004.KS0IM-REG-SDESC = KS0IM002.KS0IM-REG-SDESC;
  ;
  KS0IM004.KS0IM-HTS-NBR = KS0IM002.KS0IM-HTS-NBR; /* HTS number*/
  if (KS0IM002.KS0IM-TEAM-NBR > " ")
    KS0IM004.KS0IM-TEAM-NBR = KS0IM002.KS0IM-TEAM-NBR;
    set KS0IM004.KS0IM-TEAM-NBR-FIELD skip;
    set KS0IM004.KS0IM-TEAM-NBR skip;
    if (KS0IW00.KS0IW-TEAM-OVERRIDE == "Y")
      set KS0IM004.KS0IM-TEAM-NBR skip, bold;
    end
  end
  KS0IM004.KS0IM-RULE-NBR = KS0IM002.KS0IM-RULE-NBR; /* Rule nbr*/
  if (KS0IM002.KS0IM-RULE-NBR > " ")
    KS0IM004.KS0IM-RULE-DT = KS0IM002.KS0IM-RULE-DT;
    set KS0IM004.KS0IM-RULE-DT skip;
    set KS0IM004.KS0IM-DT-FIELD skip;
  end
  KS0IM004.KS0IM-XPRMT-STY-NBR = KS0IM002.KS0IM-XPRMT-STY-NBR; /* Experimental style number*/
  KS0IM004.KS0IM-SESN-CD = KS0IM002.KS0IM-SESN-CD; /* Season code*/
  KS0IM004.KS0IM-SESN-YR-RNG = KS0IM002.KS0IM-SESN-YR-RNG;
  ;
  if (KS0IW02.XGPCD == "02")
    set KS0IM004.KS0IM-COMNT-FIELD invisible, skip;
    set KS0IM004.KS0IM-COMNT[1] invisible, skip;
    set KS0IM004.KS0IM-COMNT[2] invisible, skip;
    if (KS0IW-MAP3-PRBM-TABLE > " ")
      KS0IW00.KS0IW-IX1 = 1;
      KS0IW00.KS0IW-IX2 = 1;
      set KS0IM004.KS0IM-CSTM-FEAT-FIELD skip;
      while (KS0IW00.KS0IW-IX1 <= 25
       && KS0IW00.KS0IW-IX2 <= 6)
        if (KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX1] > " ")
          KS0IM004.KS0IM-CSTM-FEAT-CD[KS0IW-IX2] = KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX1];
          set KS0IM004.KS0IM-CSTM-FEAT-CD[KS0IW-IX2] skip;
          KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1;
        end
        KS0IW00.KS0IW-IX1 = KS0IW00.KS0IW-IX1 + 1;
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0IM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0IM004.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0IM004 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  ;
  converse KS0IM004 ;
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0IM004.CATOAP; /* To application*/
  COMMAREA.CAITEM = KS0IM004.CAITEM; /* Application data*/
  ;
  ;
end // end KS0I-52000

// Format duplicate map data
Function KS0I-52100()
  /* ------------------------------------------------------------*/
  /* Move the detail information in from display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM004.KS0IM-MAP-DESC = "DUPLICATE"; /* Map function display*/
  if (KS0IW02.XGPCD == "02")
    KS0IM004.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
    KS0IM004.KS0IM-PROD-DESC-FIELD = "                     COMMENTS                   ";
    set KS0IM004.KS0IM-COMNT-FIELD invisible;
    set KS0IM004.KS0IM-COMNT[1] skip;
    set KS0IM004.KS0IM-COMNT[1] invisible;
    set KS0IM004.KS0IM-COMNT[2] skip;
    set KS0IM004.KS0IM-COMNT[2] invisible;
  else
    KS0IM004.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
    KS0IM004.KS0IM-PROD-DESC-FIELD = "             PRODUCT DESCRIPTION                ";
  end
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-IX2 <= 6) /* Less than max*/
    KS0IM004.KS0IM-PROD-DESC[KS0IW-IX2] = KS0IW04.KS0IW-PROD-DESC[KS0IW-IX2]; /* Move in code*/
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-IX2 <= 2) /* Less than max*/
    KS0IM004.KS0IM-COMNT[KS0IW-IX2] = KS0IW04.KS0IW-CMMT-DESC[KS0IW-IX2]; /* Move in code*/
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  ;
end // end KS0I-52100

// Format inquiry map data
Function KS0I-52200()
  /* ------------------------------------------------------------*/
  /* Set map fields to autoskip for inquiry screen.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM004.KS0IM-BUS-UNIT-CD skip; /* GPC code*/
  set KS0IM004.KS0IM-STY-NBR skip; /* Style number*/
  set KS0IM004.KS0IM-COLR-CD-ID skip; /* Color id*/
  set KS0IM004.KS0IM-DIM-CD skip; /* Dimension code*/
  ;
  set KS0IM004.KS0IM-HTS-NBR skip; /* HTS number*/
  set KS0IM004.KS0IM-RULE-NBR skip; /* Rule nbr*/
  set KS0IM004.KS0IM-XPRMT-STY-NBR skip; /* Experimental style number*/
  set KS0IM004.KS0IM-SESN-CD skip; /* Season code*/
  set KS0IM004.KS0IM-SESN-YR-RNG skip; /* Season year*/
  ;
  /* ------------------------------------------------------------*/
  /* Move the detail information in from display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM004.KS0IM-MAP-DESC = "INQUIRY  "; /* Map function display*/
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-IX2 <= 6) /* Less than max*/
    KS0IM004.KS0IM-PROD-DESC[KS0IW-IX2] = KS0IW04.KS0IW-PROD-DESC[KS0IW-IX2]; /* Move in code*/
    set KS0IM004.KS0IM-PROD-DESC[KS0IW-IX2] skip;
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-IX2 <= 2) /* Less than max*/
    KS0IM004.KS0IM-COMNT[KS0IW-IX2] = KS0IW04.KS0IW-CMMT-DESC[KS0IW-IX2]; /* Move in code*/
    set KS0IM004.KS0IM-COMNT[KS0IW-IX2] skip;
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  if (KS0IW02.XGPCD == "02")
    KS0IM004.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
    KS0IM004.KS0IM-PROD-DESC-FIELD = "                     COMMENTS                    ";
    set KS0IM004.KS0IM-COMNT-FIELD invisible;
    set KS0IM004.KS0IM-COMNT[1] skip;
    set KS0IM004.KS0IM-COMNT[1] invisible;
    set KS0IM004.KS0IM-COMNT[2] skip;
    set KS0IM004.KS0IM-COMNT[2] invisible;
  else
    KS0IM004.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
    KS0IM004.KS0IM-PROD-DESC-FIELD = "             PRODUCT DESCRIPTION                 ";
  end
  ;
  ;
end // end KS0I-52200

// Format change map data
Function KS0I-52300()
  /* ------------------------------------------------------------*/
  /* Move the detail information in from display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IM004.KS0IM-MAP-DESC = "CHANGE   "; /* Map function display*/
  if (KS0IW02.XGPCD == "02")
    KS0IM004.KS0IM-XPRMT-STY-FIELD = "DEVELOPMENT CODE:";
    KS0IM004.KS0IM-PROD-DESC-FIELD = "                     COMMENTS                    ";
    set KS0IM004.KS0IM-COMNT-FIELD invisible;
    set KS0IM004.KS0IM-COMNT[1] skip;
    set KS0IM004.KS0IM-COMNT[1] invisible;
    set KS0IM004.KS0IM-COMNT[2] skip;
    set KS0IM004.KS0IM-COMNT[2] invisible;
  else
    KS0IM004.KS0IM-XPRMT-STY-FIELD = "   EXP STYLE NBR:";
    KS0IM004.KS0IM-PROD-DESC-FIELD = "             PRODUCT DESCRIPTION                 ";
  end
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-IX2 <= 6) /* Less than max*/
    KS0IM004.KS0IM-PROD-DESC[KS0IW-IX2] = KS0IW04.KS0IW-PROD-DESC[KS0IW-IX2]; /* Move in code*/
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  KS0IW00.KS0IW-IX2 = 1; /* Initialize index*/
  while (KS0IW00.KS0IW-IX2 <= 2) /* Less than max*/
    KS0IM004.KS0IM-COMNT[KS0IW-IX2] = KS0IW04.KS0IW-CMMT-DESC[KS0IW-IX2]; /* Move in code*/
    KS0IW00.KS0IW-IX2 = KS0IW00.KS0IW-IX2 + 1; /* Increment index*/
  end
  ;
  ;
end // end KS0I-52300

// Check the attention identifier
Function KS0I-53000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0IW00.KS0IW-SWR == "Y") /* Request for data*/
      set KS0IW04 empty; /* M004 display storage*/
    end
    ;
    KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
    KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (COMMAREA.CATOAP == "KS0K")
        KSWREC.XXXPRCNM = "53000"; /* Module identification*/
        converseLib.validationFailed(6); /* PA/PF key may not be used*/
        set KS0IM004.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        KS0I-11100(); /* Purge any temporary storage*/
        ;
        XSKS-S0001(); /* Exit to another application*/
        ;
        KS0IW00.KS0IW-SWD = "4"; /* Map to be displayed switch*/
        ;
      end
    else
      ;
      KSWREC.XXXPRCNM = "53000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      set KS0IM004.CATOAP cursor, bold; /* Highlight*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0IM004"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      ;
      COMMAREA.CATOAP = "KS0A"; /* Xfer to Customs Menu*/
      ;
    end
    ;
    KS0I-11100(); /* Purge any temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    KS0IW00.KS0IW-SWD = "1"; /* Map to be displayed switch*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf17) /* and PF17 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "53000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end KS0I-53000

// Reset highlighted fields
Function KS0I-54000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM004.KS0IM-BUS-UNIT-CD initialAttributes; /* GPC code*/
  set KS0IM004.KS0IM-SESN-CD initialAttributes; /* Season code*/
  set KS0IM004.KS0IM-SESN-YR-RNG initialAttributes; /* Season year range*/
  set KS0IM004.KS0IM-STY-NBR initialAttributes; /* Style code*/
  set KS0IM004.KS0IM-COLR-CD-ID initialAttributes; /* Color code*/
  set KS0IM004.KS0IM-DIM-CD initialAttributes; /* Dimension code*/
  set KS0IM004.KS0IM-XPRMT-STY-NBR initialAttributes; /* Experimental style number*/
  set KS0IM004.KS0IM-HTS-NBR initialAttributes; /* HS number*/
  set KS0IM004.KS0IM-RULE-NBR initialAttributes; /* Ruling number*/
  set KS0IM004.KS0IM-RULE-DT initialAttributes; /* Ruling date*/
  ;
  set KS0IM004.CATOAP initialAttributes; /* TO application*/
  set KS0IM004.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end KS0I-54000

// Verify the entered date
Function KS0I-55000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "55000"; /* Module identification*/
    set KS0IM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Check to see if any data has changed.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IXM = 1;
  while (KS0IW00.KS0IW-IXM <= 6) /* Until end of data*/
    ;
    if (KS0IM004.KS0IM-PROD-DESC[KS0IW-IXM] != 
    KS0IW04.KS0IW-PROD-DESC[KS0IW-IXM])
      KS0IW04.KS0IW-PROD-DESC[KS0IW-IXM] = KS0IM004.KS0IM-PROD-DESC[KS0IW-IXM];
      KS0IW00.KS0IW-MAP4-CHANGED = "Y";
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
  end
  ;
  KS0IW00.KS0IW-IXM = 1; /* Display line index*/
  while (KS0IW00.KS0IW-IXM <= 2) /* Until end of data*/
    ;
    if (KS0IM004.KS0IM-COMNT[KS0IW-IXM] != 
    KS0IW04.KS0IW-CMMT-DESC[KS0IW-IXM])
      KS0IW04.KS0IW-CMMT-DESC[KS0IW-IXM] = KS0IM004.KS0IM-COMNT[KS0IW-IXM];
      KS0IW00.KS0IW-MAP4-CHANGED = "Y";
    end
    ;
    KS0IW00.KS0IW-IXM = KS0IW00.KS0IW-IXM + 1; /* Increment index*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0I-55000

// Process valid input requests
Function KS0I-56000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If enter was pressed and no errors and add function:*/
  /* Check to see if problem already exists.  If not,*/
  /* add rows to data base.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* Enter pressed*/
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      if (KS0IW00.KS0IW-FNC == "A") /* If add function requested*/
        set VCPROD02 empty; /* Clear record*/
        if (KS0IM002.KS0IM-COLR-CD-ID == "***")
          VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[1];
        else
          VCPROD02.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
        end
        KS0I-26100(); /* Select unique VCPROD02 row*/
        if (SQLCA.VAGen_SQLCODE == 0 /* If product already exists*/
         && VCPROD02.KS-TXT-NBR > 0) /* and text nbr already exists*/
          VKSTXT01.KS-TXT-NBR = VCPROD02.KS-TXT-NBR;
          KS0I-26300(); /* Add VKSTXT01 rows process*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
            KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
            KS0IW00.KS0IW-VCPROD02-UPD = "Y"; /* Row updated switch*/
            KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
            KS0IW00.KS0IW-SWR = "Y"; /* Request for data*/
          else
            KS0IW00.KS0IW-VCPROD02-UPD = "N";
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* Reset all DB modifications*/
            return; /* Return to previous process*/
          end
        else
          if (SQLCA.VAGen_SQLCODE == 0 /* If product exists*/
           && VCPROD02.KS-TXT-NBR == 0) /* and text nbr does not exist*/
            KS0IW00.KS0IW-CTL-FUNC = "T";
            KS0I-26200(); /* Get next text-nbr from VKSCTL01*/
            VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
            KS0IW02.KS0IW-MAP2-TEXT = VKSTXT01.KS-TXT-NBR;
            KS0I-26300(); /* Add VKSTXT01 rows process*/
            KS0I-46100(); /* Update VCPROD02 row*/
            if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
              KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
              KS0IW00.KS0IW-VCPROD02-UPD = "Y"; /* Row updated switch*/
              KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
              KS0IW00.KS0IW-SWR = "Y"; /* Request for data*/
              XX0XS01(); /* Get current date/time*/
              KS0I-26700(); /* Write VKSAUD01 rows*/
            else
              KS0IW00.KS0IW-VCPROD02-UPD = "N";
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* Reset all DB modifications*/
              return; /* Return to previous process*/
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100 /* Product does not already exist*/
             && KS0IW00.KS0IW-MAP4-CHANGED == "Y")
              KS0IW00.KS0IW-CTL-FUNC = "T";
              KS0I-26200(); /* Get next text-nbr from VKSCTL01*/
              VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
              KS0IW02.KS0IW-MAP2-TEXT = VKSTXT01.KS-TXT-NBR;
              KS0I-26300(); /* Add VKSTXT01 rows process*/
            end
            ;
          end
        end
        KS0IW00.KS0IW-MAP4-CHANGED = "N";
        KS0I-26000(); /* Update map 2*/
      else
        if (KS0IW00.KS0IW-FNC == "D") /* If dup function requested*/
          if (KS0IW00.KS0IW-MAP4-CHANGED == "Y")
            KS0IW00.KS0IW-MAP4-CHANGED = "N";
            KS0IW00.KS0IW-CTL-FUNC = "T";
            KS0I-26200(); /* Get next text-nbr from VKSCTL01*/
            VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
            KS0IW02.KS0IW-MAP2-TEXT = VKSTXT01.KS-TXT-NBR;
            KS0I-26300(); /* Add VKSTXT01 rows process*/
            if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
              KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
              KS0I-26000(); /* Update map 2 data*/
            else
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* Reset all DB modifications*/
              return; /* Return to previous process*/
            end
          else
            KS0I-26000(); /* Update map 2 data*/
          end
        else
          if (KS0IW00.KS0IW-FNC == "C") /* If chg function requested*/
            if (KS0IW00.KS0IW-MAP4-CHANGED == "Y")
              KS0IW00.KS0IW-IX1 = KS0IW01.KS0IW-SAVE-INDEX[KS0IW-SAV];
              if (KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1] > 0) /* If text exist*/
                VCPROD02.KS-TXT-NBR = KS0IW01.KS0IW-TEXT-NBR[KS0IW-IX1];
                KS0I-36100(); /* Delete original text process*/
                KS0I-26300(); /* Add VKSTXT01 rows process*/
                if (KS0IW00.KS0IW-COUNTER == 0) /* No rows added*/
                  KS0I-46100(); /* Update VCPROD02 row*/
                end
                if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
                  KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                  KS0IW00.KS0IW-SWR = "Y"; /* Request for data*/
                  KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
                  KS0IW00.KS0IW-VCPROD02-UPD = "Y";
                else
                  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                  sysLib.rollback();
                  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                   /* Reset all DB modifications*/
                  return; /* Return to previous process*/
                end
              else
                KS0IW00.KS0IW-CTL-FUNC = "T";
                KS0I-26200(); /* Get next text-nbr from VKSCTL01*/
                VKSTXT01.KS-TXT-NBR = VKSCTL01.KS-NXT-TXT-NBR;
                KS0IW02.KS0IW-MAP2-TEXT = VKSTXT01.KS-TXT-NBR;
                KS0I-26300(); /* Add VKSTXT01 rows process*/
                KS0I-46100(); /* Update VCPROD02 row*/
                if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
                  KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
                  KS0IW00.KS0IW-VCPROD02-UPD = "Y";
                                   /* Row updated switch*/
                  KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
                  KS0IW00.KS0IW-SWR = "Y"; /* Request for data*/
                else
                  KS0IW00.KS0IW-VCPROD02-UPD = "N";
                  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                  sysLib.rollback();
                  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                   /* Reset all DB modifications*/
                  return; /* Return to previous process*/
                end
              end
              KS0IW00.KS0IW-MAP4-CHANGED = "N";
              KS0I-36000(); /* Update map 2*/
            else
              KS0I-36000(); /* Update map 2*/
            end
          else
            if (KS0IW00.KS0IW-FNC == "I") /* If inquiry requested*/
              KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
              KS0IW00.KS0IW-SWR = "Y"; /* Request for data switch*/
            end
          end
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 pressed*/
    KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
    KS0IW00.KS0IW-SWF = "N"; /* Format the map switch*/
    KS0IW00.KS0IW-SWR = "N"; /* Request for data switch*/
  end
  ;
  if (converseVar.eventKey is pf17) /* PF17 pressed*/
    ;
    KS0IW00.KS0IW-SWD = "3"; /* Map switch*/
    KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
  ;
end // end KS0I-56000

// Main process Map 5
Function KS0I-60000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.  (N/A for this process.)*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19)
    KS0I-61000(); /* Check hts number and country*/
  else
    if (converseVar.validationMsgNum == 0)
      return;
    end
  end
  ;
  if (KS0IW05.KS0IW-CVS-FLAG == "N")
    return;
  end

  KS0I-62000(); /* Format and display the map*/
  ;
  KS0I-63000(); /* Check attention identifier*/
  ;
  KS0I-64000(); /* Reset fields to normal intensity*/
  ;
  KS0I-65000(); /* Verify the entered data*/
  ;
  KS0I-66000(); /* Process valid input request*/
  ;
  ;
end // end KS0I-60000

// Check the CVS-hts number
Function KS0I-61000()
  ;
  if (converseVar.validationMsgNum != 0) /* If an error, exit to display map*/
    return;
  end
  ;
  if (converseVar.eventKey is pf16)
    KS0IW00.KS0IW-PF16 = "Y";
  else
    KS0IW00.KS0IW-PF16 = "N";
  end
  ;
  if (converseVar.eventKey is pf19)
    KS0IW00.KS0IW-PF19 = "Y";
  else
    KS0IW00.KS0IW-PF19 = "N";
  end
  ;
  if (converseVar.eventKey is pf17)
    KS0IW00.KS0IW-PF17 = "Y";
  else
    KS0IW00.KS0IW-PF17 = "N";
  end
  ;
  if (converseVar.eventKey is pf18)
    KS0IW00.KS0IW-PF18 = "Y";
  else
    KS0IW00.KS0IW-PF18 = "N";
  end
  ;
  KS0IW05.KS0IW-MAP-FOOT-DESC1 = " ";
  KS0IW05.KS0IW-MAP-FOOT-DESC2 = " ";
  KS0IW05.KS0IW-MAP-FOOT-DESC3 = " ";
  KS0IW05.KS0IW-CVS-FLAG = "N";
  KS0IW00.KS0IW-IX5 = 1; /* Set index*/
  KS0IW00.KS0IW-IX6 = 1; /* Set index*/
  KS0IM005.KS0IM-SEL[1] = " ";
  KS0IM005.KS0IM-SEL[2] = " ";
  KS0IM005.KS0IM-SEL[3] = " ";
  KS0IM005.KS0IM-SEL[4] = " ";
  set VKSORD01 empty;
  set VKSFNT01 empty;
  VKSORD01.KS-CUST-ORDER-NBR = "C-549-401";
  KS0IW05.KS0IW-MAP-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
  VKSORD01.KS-HTS-CPTR-CD = KS0IW05.KS0IW-HTS-CPTR-CD;
  VKSORD01.KS-HTS-HDG-CD = KS0IW05.KS0IW-HTS-HDG-CD;
  VKSORD01.KS-HTS-1ST-SHDG-CD = KS0IW05.KS0IW-HTS-1ST-SHDG-CD;
  VKSORD01.KS-HTS-2ND-SHDGCD1 = KS0IW05.KS0IW-HTS-2ND-SHDGCD1;
  ;
  KS0I-61100(); /* OPEN KSORD01*/
  ;
  while (KS0IW05.KS0IW-CVS-FLAG != "Y")
    KS0I-61110(); /* FETCH KSORD01*/
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
    if (KS0IW05.KS0IW-HTS-CPTR-CD == VKSORD01.KS-HTS-CPTR-CD)
      if (VKSORD01.KS-HTS-HDG-CD == "  ")
        KS0IW05.KS0IW-CVS-FLAG = "Y";
      else
        if (KS0IW05.KS0IW-HTS-HDG-CD > "  "
         && KS0IW05.KS0IW-HTS-HDG-CD == VKSORD01.KS-HTS-HDG-CD
        )
          if (VKSORD01.KS-HTS-1ST-SHDG-CD == "  ")
            KS0IW05.KS0IW-CVS-FLAG = "Y";
          else
            if (KS0IW05.KS0IW-HTS-1ST-SHDG-CD > "  "
             && KS0IW05.KS0IW-HTS-1ST-SHDG-CD == 
            VKSORD01.KS-HTS-1ST-SHDG-CD)
              if (VKSORD01.KS-HTS-2ND-SHDGCD1 == "  ")
                KS0IW05.KS0IW-CVS-FLAG = "Y";
              else
                if (KS0IW05.KS0IW-HTS-2ND-SHDGCD1 > "  "
                 && KS0IW05.KS0IW-HTS-2ND-SHDGCD1 == 
                VKSORD01.KS-HTS-2ND-SHDGCD1)
                  KS0IW05.KS0IW-CVS-FLAG = "Y";
                end
              end
            end
          end
        end
      end
    end
  end
  KS0I-61120(); /* CLOSE KSORD01*/

  if (KS0IW05.KS0IW-CVS-FLAG == "Y")
    if (VKSORD01.KS-FOOT-NOTE-NBR > "    ")
      KS0I-61200();
      if (SQLCA.VAGen_SQLCODE != 0)
        KS0IW05.KS0IW-MAP-FOOT-DESC1 = " ";
        KS0IW05.KS0IW-MAP-FOOT-DESC2 = " ";
        KS0IW05.KS0IW-MAP-FOOT-DESC3 = " ";
      else
        KS0IW05.KS0IW-FOOT-NOTE-NBR = VKSFNT01.KS-FOOT-NOTE-NBR;
        KS0IW05.KS0IW-MAP-FOOT-DESC1 = VKSFNT01.KS-FOOT-NOTE-DESC1;
        KS0IW05.KS0IW-MAP-FOOT-DESC2 = VKSFNT01.KS-FOOT-NOTE-DESC2;
        KS0IW05.KS0IW-MAP-FOOT-DESC3 = VKSFNT01.KS-FOOT-NOTE-DESC3;
      end
    end
  end
end // end KS0I-61000

// Select VKSORD01 set
Function KS0I-61100()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "VKSORD01" ("S1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end /* Sel table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "61100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSORD01.VKSORD01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-61100

// Fetch  VKSORD01 row
Function KS0I-61110()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VKSORD01" ("N1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
                                   /* Save prbm*/
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0IW00.KS0IW-SWP = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "61110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VKSORD01.VKSORD01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-61110

// Close  VKSORD01 set
Function KS0I-61120()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VKSORD01" ("C1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "61120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-61120

// Select unique VKSFNT01 row
Function KS0I-61200()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  VKSFNT01.KS-CUST-ORDER-NBR = VKSORD01.KS-CUST-ORDER-NBR;
                                                              /* CVD NUMBER*/
  VKSFNT01.KS-FOOT-NOTE-NBR = VKSORD01.KS-FOOT-NOTE-NBR;
                                                             /* CVD FOOT NT*/
  ;
  try
    call "VKSFNT01" ("S ", SQLCA, VKSFNT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "61200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VKSFNT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end KS0I-61200

// Format and converse the map
Function KS0I-62000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  ;
  KS0IM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  ;
  /* ------------------------------------------------------------*/
  /* Format the heading information on the map.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  set KS0IM005.KS0IM-SEL[1] cursor; /* FEATURE TYPE*/
  ;
  KS0IM005.KS0IM-BUS-UNIT-CD = KS0IM002.KS0IM-BUS-UNIT-CD; /* GPC code*/
  KS0IW05.KS0IW-STY-NBR = KS0IM002.KS0IM-STY-NBR; /* Style number*/
  KS0IW05.KS0IW-COLR-CD-ID = KS0IM002.KS0IM-COLR-CD-ID; /* Color id*/
  KS0IW05.KS0IW-DIM-CD = KS0IM002.KS0IM-DIM-CD; /* Dimension code*/
  KS0IM005.KS0IM-STYLE-CLR-DIM = KS0IW05.KS0IW-STYLE-CLR-DIM;
  ;
  KS0IM005.KS0IM-HTS-NBR = KS0IM002.KS0IM-HTS-NBR; /* HTS number*/
  KS0IM005.KS0IM-SESN-CD = KS0IM002.KS0IM-SESN-CD; /* Season code*/
  KS0IM005.KS0IM-SESN-YR-RNG = KS0IM002.KS0IM-SESN-YR-RNG;
  KS0IM005.KS0IM-FABRI-DESC1 = KS0IM002.KS0IM-FABRIC-DESC[1];
  KS0IM005.KS0IM-FABRI-DESC2 = KS0IM002.KS0IM-FABRIC-DESC[2];
  KS0IM005.KS0IM-FABRI-DESC3 = KS0IM002.KS0IM-FABRIC-DESC[3];
  KS0IM005.KS0IM-PROD-DESC1 = KS0IW04.KS0IW-PROD-DESC[1];
  KS0IM005.KS0IM-PROD-DESC2 = KS0IW04.KS0IW-PROD-DESC[2];
  KS0IM005.KS0IM-PROD-DESC3 = KS0IW04.KS0IW-PROD-DESC[3];
  KS0IM005.KS0IM-PROD-DESC4 = KS0IW04.KS0IW-PROD-DESC[4];
  KS0IM005.KS0IM-KS-STY-NM[1] = KS0IM002.KS0IM-KS-STY-NM[1];
  KS0IM005.KS0IM-KS-STY-NM[2] = KS0IM002.KS0IM-KS-STY-NM[2];
  KS0IM005.KS0IM-STY-TYPE-CD = KS0IM002.KS0IM-STY-TYP-CD;
  KS0IM005.KS0IM-FOOT-NOTE-NBR = KS0IW05.KS0IW-FOOT-NOTE-NBR;
  KS0IM005.KS0IM-FOOT-DESC1 = KS0IW05.KS0IW-MAP-FOOT-DESC1;
  KS0IM005.KS0IM-FOOT-DESC2 = KS0IW05.KS0IW-MAP-FOOT-DESC2;
  KS0IM005.KS0IM-FOOT-DESC3 = KS0IW05.KS0IW-MAP-FOOT-DESC3;
  KS0IW00.KS0IW-IX5 = 1;
  while (KS0IW00.KS0IW-IX5 <= 24)
    if (KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX5] > "  ")
      KS0IM005.KS0IM-FC[KS0IW-IX5] = KS0IW03.KS0IW-MAP3-PRBM[KS0IW-IX5];
      set KS0IM005.KS0IM-FC[KS0IW-IX5] underline;
    end
    KS0IW00.KS0IW-IX5 = KS0IW00.KS0IW-IX5 + 1;
  end
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  ;
  converse KS0IM005 ;
  ;
  ;
  ;
  ;
end // end KS0I-62000

// Check the attention identifier
Function KS0I-63000()
  ;
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3)  /* and PF3 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "63000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    KS0IW00.KS0IW-SWD = "5";
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end KS0I-63000

// Reset highlighted fields
Function KS0I-64000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0IM005.KS0IM-SEL[1] initialAttributes; /* Selection field*/
  set KS0IM005.KS0IM-SEL[2] initialAttributes;
  set KS0IM005.KS0IM-SEL[3] initialAttributes;
  set KS0IM005.KS0IM-SEL[4] initialAttributes;
  ;
  ;
end // end KS0I-64000

// Verify the entered data
Function KS0I-65000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "65000"; /* Module identification*/
    /* ET KS0IM005.CAITEM CURSOR,BRIGHT;     /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Check to see if any data has changed.*/
  /* ------------------------------------------------------------*/
  KS0IW00.KS0IW-SWD = "5";
  KS0IW05.KS0IW-PROB-FLAG = "N";
  KS0IW05.KS0IWIXM = 4;
  while (KS0IWIXM > 0)
    if (KS0IM005.KS0IM-SEL[KS0IWIXM] == "S" || 
    KS0IM005.KS0IM-SEL[KS0IWIXM] == " ")
      if (KS0IM005.KS0IM-SEL[KS0IWIXM] == "S")
        if (KS0IW05.KS0IW-PROB-FLAG == "Y")
          set KS0IM005.KS0IM-SEL[KS0IWIXM] cursor, bold;
          converseLib.validationFailed(141);

         /* EZEFLO;*/
        end
        KS0IW05.KS0IW-PROB-FLAG = "Y";
      end
    else
      set KS0IM005.KS0IM-SEL[KS0IWIXM] cursor, bold;
      converseLib.validationFailed(13);
      exit stack;
    end
    KS0IW05.KS0IWIXM = KS0IW05.KS0IWIXM - 1;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  KS0IW00.KS0IW-SWD = "2";
  if (KS0IM005.KS0IM-SEL[1] == "S")
    KS0IW00.KS0IW-DATA-CHANGED = "Y";
    KS0IW05.KS0IW-PRBM-CD = "T1";
  else
    if (KS0IM005.KS0IM-SEL[2] == "S")
      KS0IW00.KS0IW-DATA-CHANGED = "Y";
      KS0IW05.KS0IW-PRBM-CD = "T2";
    else
      if (KS0IM005.KS0IM-SEL[3] == "S")
        KS0IW00.KS0IW-DATA-CHANGED = "Y";
        KS0IW05.KS0IW-PRBM-CD = "T3";
      end
    end
  end
  if (KS0IM005.KS0IM-SEL[4] == "S")
    KS0IW05.KS0IW-PRBM-CD = "  ";
  end


  ;
  ;
end // end KS0I-65000

// Process valid input request
Function KS0I-66000()
  /* ------------------------------------------------------------*/
  /* If enter was pressed and no errors and add function:*/
  /* Check to see if problem already exists.  If not,*/
  /* add rows to data base.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* Enter pressed*/
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      set VCPROD02 empty; /* Clear record*/
      if (KS0IM002.KS0IM-COLR-CD-ID == "***")
        VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[1];
      else
        VCPROD02.SY2CLRID = KS0IM002.KS0IM-COLR-CD-ID;
      end
      KS0I-26100(); /* Select unique VCPROD02 row*/
      if (SQLCA.VAGen_SQLCODE == 0 /* If product already exists*/
       && VCPROD02.KS-PRBM-NBR > 0) /* and problem nbr already exists*/
        VCPROB01.KS-PRBM-NBR = VCPROD02.KS-PRBM-NBR;
        KS0I-66100(); /* Add VCPROB01 rows process*/
      else
        if (SQLCA.VAGen_SQLCODE == 0 /* If product exists*/
         && VCPROD02.KS-PRBM-NBR == 0) /* and prbm nbr does not exist*/
          KS0IW00.KS0IW-CTL-FUNC = "P";
          KS0I-26200(); /* Get next prbm-nbr from VKSCTL01*/
          VCPROB01.KS-PRBM-NBR = VKSCTL01.KS-NXT-PRBM-NBR;
          KS0IW02.KS0IW-MAP2-PRBM = VCPROB01.KS-PRBM-NBR;
          VCPROD02.KS-PRBM-NBR = VCPROB01.KS-PRBM-NBR;
          KS0I-66100(); /* Add VCPROB01 rows process*/
          KS0I-36400(); /* Upd VCPROD02 row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Row upd successfully*/
            KS0IW00.KS0IW-REFORMAT-MAP1 = "Y";
            KS0IW00.KS0IW-VCPROD02-UPD = "Y"; /* Row updated switch*/
            KS0IW00.KS0IW-SWD = "2"; /* Map switch*/
            KS0IW00.KS0IW-SWF = "Y"; /* Format the map switch*/
            KS0I-66200(); /* Upd VCPROD02 color array*/
            ;
          else
            KSWREC.XXXPRCNM = "66000";
                                   /* Module identification*/
            converseLib.validationFailed(10); /* Unexpected error*/
            KS0IW00.KS0IW-SWR = "N"; /* Do not request data*/
            KS0IW00.KS0IW-SWF = "N"; /* Do not format map*/
            KS0IW00.KS0IW-SWD = "5";
                                   /* Map to be displayed switch*/
            KS0IW00.KS0IW-VCPROD02-UPD = "N";
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* Reset all DB modifications*/
            return; /* Return to previous process*/
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Style does not already exist*/
            KSWREC.XXXPRCNM = "66000";
                                   /* Module identification*/
            converseLib.validationFailed(10); /* Unexpected error*/
            KS0IW00.KS0IW-SWR = "N"; /* Do not request data*/
            KS0IW00.KS0IW-SWF = "N"; /* Do not format map*/
            KS0IW00.KS0IW-SWD = "5";
                                   /* Map to be displayed switch*/
            KS0IW00.KS0IW-VCPROD02-UPD = "N";
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* Reset all DB modifications*/
            return; /* Return to previous process*/
          end
          ;
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 pressed*/
    ;
    set KS0IW05 empty;
    KS0IW05.KS0IW-MAP-HTS-NBR = KS0IM002.KS0IM-HTS-NBR;
    ;
  end
  ;
  ;
end // end KS0I-66000

// Add problem rows process
Function KS0I-66100()
  /* ------------------------------------------------------------*/
  /* Format the data and add rows until end of data.*/
  /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (KS0IW05.KS0IW-PRBM-CD > " ") /* If prbm exists*/
    VCPROB01.YKP-PRBM-CD = KS0IW05.KS0IW-PRBM-CD;
    VCPROB01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move set up date*/
    VCPROB01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move chg date*/
    VCPROB01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move chg time*/
    VCPROB01.ZZZCHGCT = 0; /* Move chg count*/
    KS0I-26401(); /* Select unique*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If prbm does not already exist*/
      KS0I-26402(); /* Add prbm row*/
    end
  end
  ;
  ;
  ;
end // end KS0I-66100

// Update VCPROD01 color array
Function KS0I-66200()
  /* ------------------------------------------------------------*/
  /* Update VCPROD02 rows until end of color code array.*/
  /* ------------------------------------------------------------*/
  ;
  KS0IW00.KS0IW-IX6 = 2; /* set index*/
  while (KS0IW00.KS0IW-IX6 <= 30
   && KS0IW02.KS0IW-COLOR[KS0IW-IX6] > " ") /* while color exists*/
    set VCPROD02 empty;
    VCPROD02.SY2CLRID = KS0IW02.KS0IW-COLOR[KS0IW-IX6];
    KS0I-26100(); /* select unique VCPROD02*/
    if (SQLCA.VAGen_SQLCODE == 0)
      VCPROD02.KS-PRBM-NBR = KS0IW02.KS0IW-MAP2-PRBM;
      KS0I-36400(); /* Upd VCPROD02 row*/
    else
      KSWREC.XXXPRCNM = "66200";
                                   /* Module identification*/
      converseLib.validationFailed(10); /* Unexpected error*/
      KS0IW00.KS0IW-SWR = "N"; /* Do not request data*/
      KS0IW00.KS0IW-SWF = "N"; /* Do not format map*/
      KS0IW00.KS0IW-SWD = "5";
                                   /* Map to be displayed switch*/
      KS0IW00.KS0IW-VCPROD02-UPD = "N";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* Reset all DB modifications*/
      return; /* Return to previous process*/
    end
    KS0IW00.KS0IW-IX6 = KS0IW00.KS0IW-IX6 + 1;
  end
  ;
  ;
end // end KS0I-66200

//*** RECORD=KS0IW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0IW00 type basicRecord
  10 KS0IW-IXM KS0IW-IXM ; 
  10 KS0IW-IX1 KS0IW-IX1 ; 
  10 KS0IW-IX2 KS0IW-IX2 ; 
  10 KS0IW-IX3 KS0IW-IX3 ; 
  10 KS0IW-IX4 KS0IW-IX4 ; 
  10 KS0IW-IX5 KS0IW-IX5 ; 
  10 KS0IW-IX6 KS0IW-IX6 ; 
  10 KS0IW-CLR-IDX KS0IW-CLR-IDX ; 
  10 KS0IW-ORDER-IDX KS0IW-ORDER-IDX ; 
  10 KS0IW-ORDER-MAX KS0IW-ORDER-MAX ; 
  10 KS0IW-ORDER-SWITCH KS0IW-ORDER-SWITCH ; 
  10 KS0IW-CVD-PRBM-CNT KS0IW-CVD-PRBM-CNT ; 
  10 KS0IW-SWC KS0IW-SWC ; 
  10 KS0IW-SWP KS0IW-SWP ; 
  10 KS0IW-SWT KS0IW-SWT ; 
  10 KS0IW-SWX KS0IW-SWX ; 
  10 KS0IW-SCT KS0IW-SCT ; 
  10 KS0IW-SWD KS0IW-SWD ; 
  10 KS0IW-SWF KS0IW-SWF ; 
  10 KS0IW-SWR KS0IW-SWR ; 
  10 KS0IW-DEF KS0IW-DEF ; 
  10 KS0IW-SWU KS0IW-SWU ; 
  10 KS0IW-FCTY-SWITCH KS0IW-FCTY-SWITCH ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KS0IW-COUNTER KS0IW-COUNTER ; 
  10 KS0IW-COLOR-COMB KS0IW-COLOR-COMB ; 
  10 KS0IW-PRBM-FND KS0IW-PRBM-FND ; 
  10 KS0IW-TEAM-FND KS0IW-TEAM-FND ; 
  10 KS0IW-STYLE-FND KS0IW-STYLE-FND ; 
  10 KS0IW-PRBM-TABLE KS0IW-PRBM-TABLE ; 
    15 KS0IW-PRBM KS0IW-PRBM [25] ; 
  10 KS0IW-SAVE-INDEX-TBL KS0IW-SAVE-INDEX-TBL ; 
    15 KS0IW-SAVE-INDEX KS0IW-SAVE-INDEX [30] ; 
  10 KS0IW-TEXT-TABLE KS0IW-TEXT-TABLE ; 
    15 KS0IW-TXT-TYP KS0IW-TXT-TYP [30] ; 
    15 KS0IW-RANK-NBR KS0IW-RANK-NBR [30] ; 
    15 KS0IW-TEXT KS0IW-TEXT [30] ; 
  10 KS0IW-GEN-DTY-RATE KS0IW-GEN-DTY-RATE ; 
    15 KS0IW-RATE-BYTE KS0IW-RATE-BYTE [5] ; 
  10 KS0IW-GEN-DTY-UNT KS0IW-GEN-DTY-UNT ; 
    15 KS0IW-UNIT-BYTE KS0IW-UNIT-BYTE [5] ; 
  10 KS0IW-UOM-ABRV KS0IW-UOM-ABRV ; 
    15 KS0IW-UOM-BYTE KS0IW-UOM-BYTE [3] ; 
  10 KS0IW-FORMATTED-RATE KS0IW-FORMATTED-RATE ; 
    15 KS0IW-FORMAT-BYTE KS0IW-FORMAT-BYTE [21] ; 
  10 KS0IW-DATE-WORK KS0IW-DATE-WORK ; 
    15 KS0IW-DATE-CENTURY KS0IW-DATE-CENTURY ; 
    15 KS0IW-DATE-YR KS0IW-DATE-YR ; 
    15 KS0IW-DATE-MO KS0IW-DATE-MO ; 
    15 KS0IW-DATE-DAY KS0IW-DATE-DAY ; 
  10 KS0IW-DATE KS0IW-DATE ; 
    15 KS0IW-MM KS0IW-MM ; 
    15 KS0IW-DD KS0IW-DD ; 
    15 KS0IW-YY KS0IW-YY ; 
  10 KS0IW-CTL-FUNC KS0IW-CTL-FUNC ; 
  10 KS0IW-VCPROD02-ADDED KS0IW-VCPROD02-ADDED ; 
  10 KS0IW-VCPROD02-DUP KS0IW-VCPROD02-DUP ; 
  10 KS0IW-VCPROD02-UPD KS0IW-VCPROD02-UPD ; 
  10 KS0IW-CPY-CLR-IN-PROCESS KS0IW-CPY-CLR-IN-PROCESS ; 
  10 KS0IW-PAGE-IS-FULL KS0IW-PAGE-IS-FULL ; 
  10 KS0IW-DATA-CHANGED KS0IW-DATA-CHANGED ; 
  10 KS0IW-MAP3-CHANGED KS0IW-MAP3-CHANGED ; 
  10 KS0IW-MAP4-CHANGED KS0IW-MAP4-CHANGED ; 
  10 KS0IW-NEW-HS-SWITCH KS0IW-NEW-HS-SWITCH ; 
  10 KS0IW-REFORMAT-MAP1 KS0IW-REFORMAT-MAP1 ; 
  10 KS0IW-TEAM-OVERRIDE KS0IW-TEAM-OVERRIDE ; 
  10 KS0IW-SIL-OVERRIDE KS0IW-SIL-OVERRIDE ; 
  10 KS0IW-CAT-OVERRIDE KS0IW-CAT-OVERRIDE ; 
  10 KS0IW-CAT-EOF KS0IW-CAT-EOF ; 
  10 KS0IW-CTL-FLD KS0IW-CTL-FLD ; 
    15 KS0IW-FNC KS0IW-FNC ; 
    15 KS0IW-SAV KS0IW-SAV ; 
    15 KS0IW-SAVE-PAGE KS0IW-SAVE-PAGE ; 
  10 KS0IW-SAVE-PRBM KS0IW-SAVE-PRBM ; 
  10 KS0IW-SAVE-FNC KS0IW-SAVE-FNC ; 
  10 KS0IW-DTL-LINE KS0IW-DTL-LINE [4] ; 
  10 KS0IW-HTS-FORMAT-SW KS0IW-HTS-FORMAT-SW ; 
  10 KS0IW-SAVE-HTS-NBR KS0IW-SAVE-HTS-NBR ; 
    15 KS0IW-SAVE-CPTR-CD KS0IW-SAVE-CPTR-CD ; 
    15 KS0IW-SAVE-HDG-CD KS0IW-SAVE-HDG-CD ; 
    15 * char(1) ; 
    15 KS0IW-SAVE-1ST-SHDG-CD KS0IW-SAVE-1ST-SHDG-CD ; 
    15 * char(1) ; 
    15 KS0IW-SAVE-2ND-SHDG-CD KS0IW-SAVE-2ND-SHDG-CD [2] ; 
    15 KS0IW-SAVE-STAT-CD KS0IW-SAVE-STAT-CD ; 
    15 * char(1) ; 
    15 * char(1) ; 
  10 KS0IW-SAVE-RNG-FL KS0IW-SAVE-RNG-FL ; 
  10 KS0IW-SAVE-SDT KS0IW-SAVE-SDT ; 
  10 KS0IW-GPC02-DESC KS0IW-GPC02-DESC ; 
    15 KS0IW-DESC KS0IW-DESC ; 
    15 KS0IW-CD1 KS0IW-CD1 ; 
  10 KS0IW-GPC02-HS-NBR KS0IW-GPC02-HS-NBR ; 
    15 KS0IW-CD3 KS0IW-CD3 ; 
    15 * char(1) ; // space
    15 KS0IW-CD4 KS0IW-CD4 ; 
    15 * char(7) ; // spaces
  10 KS0IW-HTS-NBR-WORK KS0IW-HTS-NBR-WORK ; 
    15 KS0IW-HTS-CPTR KS0IW-HTS-CPTR ; 
    15 KS0IW-HTS-HDG KS0IW-HTS-HDG ; 
    15 * char(1) ; 
    15 KS0IW-HTS-1ST-SHDG KS0IW-HTS-1ST-SHDG ; 
    15 * char(1) ; 
    15 KS0IW-HTS-2ND-SHDG-1 KS0IW-HTS-2ND-SHDG-1 ; 
    15 * char(1) ; 
    15 KS0IW-HTS-2ND-SHDG-2 KS0IW-HTS-2ND-SHDG-2 ; 
    15 * char(1) ; 
  10 KS0IW-SESN-TYP-TXT KS0IW-SESN-TYP-TXT ; 
    15 KS0IW-SESN-CD-TXT KS0IW-SESN-CD-TXT ; 
    15 KS0IW-SESN-YY-TXT KS0IW-SESN-YY-TXT ; 
    15 * char(1) ; 
    15 KS0IW-TYPE-DESC-TXT KS0IW-TYPE-DESC-TXT ; 
  10 KS0IW-SESN-YR KS0IW-SESN-YR ; 
    15 KS0IW-SESN-CENT KS0IW-SESN-CENT ; 
    15 KS0IW-SESN-YY KS0IW-SESN-YY ; 
  10 KS0IW-DTY-LST-PO-TXT KS0IW-DTY-LST-PO-TXT ; 
    15 KS0IW-DTY-RATE-TXT KS0IW-DTY-RATE-TXT ; 
    15 KS0IW-DTY-SPACE KS0IW-DTY-SPACE ; 
    15 KS0IW-LST-PO-TXT KS0IW-LST-PO-TXT ; 
  10 KS0IW-SELECT KS0IW-SELECT ; 
  10 KS0IW-FETCH KS0IW-FETCH ; 
  10 KS0IW-CLOSE KS0IW-CLOSE ; 
  10 KS0IW-IO6130-SW KS0IW-IO6130-SW ; 
  10 KS0IW-KS1120-SW KS0IW-KS1120-SW ; 
  10 KS0IW-MAX-PAGES KS0IW-MAX-PAGES ; 
  10 KS0IW-SAV-KEY KS0IW-SAV-KEY ; 
    15 KS0IW-SAV-SESN-CD KS0IW-SAV-SESN-CD ; 
    15 KS0IW-SAV-SESN-YR KS0IW-SAV-SESN-YR ; 
    15 KS0IW-SAV-STY-NBR KS0IW-SAV-STY-NBR ; 
    15 KS0IW-SAV-XPRMT-STY KS0IW-SAV-XPRMT-STY ; 
    15 KS0IW-SAV-STY-TYP KS0IW-SAV-STY-TYP ; 
    15 KS0IW-SAV-COLR-CD-ID KS0IW-SAV-COLR-CD-ID ; 
    15 KS0IW-SAV-DIM-CD KS0IW-SAV-DIM-CD ; 
  10 KS0IW-SAV-EQUIP-GPC KS0IW-SAV-EQUIP-GPC ; 
  10 KS0IW-CURSOR-FOUND-SW KS0IW-CURSOR-FOUND-SW ; 
  10 KS0IW-LAST-CHECKED-PAGE KS0IW-LAST-CHECKED-PAGE ; 
  10 KS0IW-LAST-CHECKED-ROW KS0IW-LAST-CHECKED-ROW ; 
  10 KS0IW-RULE-NBR KS0IW-RULE-NBR ; 
    15 KS0IW-RULE-BYTE KS0IW-RULE-BYTE [10] ; 
  10 KS0IW-PF16 KS0IW-PF16 ; 
  10 KS0IW-PF17 KS0IW-PF17 ; 
  10 KS0IW-PF18 KS0IW-PF18 ; 
  10 KS0IW-PF19 KS0IW-PF19 ; 
  10 KS0IW-PRCPCTCHG KS0IW-PRCPCTCHG ; 
  10 KS0IW-OTHRFLDCHG KS0IW-OTHRFLDCHG ; 
end // end KS0IW00

//*** RECORD=KS0IW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record KS0IW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(7605) ; 
    10 KS0IW-GPC KS0IW-GPC ; 
    10 KS0IW-GPC-DESC KS0IW-GPC-DESC ; 
    10 KS0IW-STYLE KS0IW-STYLE ; 
      15 KS0IW-STY-CHAR-1 KS0IW-STY-CHAR-1 ; 
      15 KS0IW-STY-CHAR-2 KS0IW-STY-CHAR-2 ; 
      15 KS0IW-STY-CHAR-3 KS0IW-STY-CHAR-3 ; 
      15 KS0IW-STY-CHAR-4 KS0IW-STY-CHAR-4 ; 
      15 KS0IW-STY-CHAR-5 KS0IW-STY-CHAR-5 ; 
      15 KS0IW-STY-CHAR-6 KS0IW-STY-CHAR-6 ; 
      15 KS0IW-STY-CHAR-7 KS0IW-STY-CHAR-7 ; 
    10 SY1STYNM SY1STYNM ; 
    10 KS0IW-COLR-CD-ID KS0IW-COLR-CD-ID ; 
    10 KS0IW-DIM-CD KS0IW-DIM-CD ; 
    10 KS0IW-SESN-YR-NUM KS0IW-SESN-YR-NUM ; 
    10 KS0IW-SESN-YR KS0IW-SESN-YR ; 
      15 KS0IW-SESN-CENT KS0IW-SESN-CENT ; 
      15 KS0IW-SESN-YY KS0IW-SESN-YY ; 
    10 KS0IW-SESN-CD KS0IW-SESN-CD ; 
    10 KS0IW-POIDT-NUM KS0IW-POIDT-NUM ; 
    10 KS0IW-POIDT KS0IW-POIDT ; 
      15 * char(1) ; 
      15 KS0IW-PRDCTN-CEN KS0IW-PRDCTN-CEN ; 
      15 KS0IW-PRDCTN-YR KS0IW-PRDCTN-YR ; 
      15 KS0IW-PRDCTN-MO KS0IW-PRDCTN-MO ; 
        20 KS0IW-PRDCTN-MO-1 KS0IW-PRDCTN-MO-1 ; 
        20 KS0IW-PRDCTN-MO-2 KS0IW-PRDCTN-MO-2 ; 
      15 KS0IW-DLVR-MO KS0IW-DLVR-MO ; 
        20 KS0IW-DLVR-MO-1 KS0IW-DLVR-MO-1 ; 
        20 KS0IW-DLVR-MO-2 KS0IW-DLVR-MO-2 ; 
    10 KS0IW-FCTY-CD KS0IW-FCTY-CD ; 
    10 KS0IW-ORIG-CD KS0IW-ORIG-CD ; 
    10 KS0IW-ORIG-DESC KS0IW-ORIG-DESC ; 
    10 KS0IW-US-MADE-FLAG KS0IW-US-MADE-FLAG ; 
    10 KS0IW-EXP-STYLE KS0IW-EXP-STYLE ; 
    10 KS0IW-HTS-NUMBER KS0IW-HTS-NUMBER ; 
      15 KS0IW-HTS-BYTE KS0IW-HTS-BYTE [16] ; 
    10 KS0IW-HTS-NBR KS0IW-HTS-NBR ; 
      15 KS0IW-HTS-CPTR-CD KS0IW-HTS-CPTR-CD ; 
      15 KS0IW-HTS-HDG-CD KS0IW-HTS-HDG-CD ; 
      15 * char(1) ; 
      15 KS0IW-HTS-1ST-SHDG-CD KS0IW-HTS-1ST-SHDG-CD ; 
      15 * char(1) ; 
      15 KS0IW-HTS-2ND-SHDG-CD KS0IW-HTS-2ND-SHDG-CD ; 
        20 KS0IW-HTS-2ND-SHDG1 KS0IW-HTS-2ND-SHDG1 ; 
        20 KS0IW-HTS-2ND-SHDG2 KS0IW-HTS-2ND-SHDG2 ; 
      15 KS0IW-HTS-STAT-CD KS0IW-HTS-STAT-CD ; 
      15 * char(1) ; 
      15 * char(1) ; 
    10 KS0IW-RULE-NBR KS0IW-RULE-NBR ; 
    10 KS0IW-RULE-NBR-MAP KS0IW-RULE-NBR-MAP ; 
    10 KS0IW-QOTA-CAT-CD KS0IW-QOTA-CAT-CD ; 
    10 KS0IW-TEAM-CD KS0IW-TEAM-CD ; 
    10 KS0IW-TEAM-DESC KS0IW-TEAM-DESC ; 
    10 KS0IW-PRBM-CD KS0IW-PRBM-CD ; 
    10 KS0IW-STAT KS0IW-STAT ; 
    10 KS0IW-DIV-CD KS0IW-DIV-CD ; 
    10 KS0IW-STY-TYP-CD1 KS0IW-STY-TYP-CD1 ; 
    10 KS0IW-STY-TYP-CD2 KS0IW-STY-TYP-CD2 ; 
    10 KS0IW-STY-TYP-CD3 KS0IW-STY-TYP-CD3 ; 
    10 KS0IW-REG-CD KS0IW-REG-CD ; 
    10 KS0IW-SAVE-INDEX-TBL KS0IW-SAVE-INDEX-TBL ; 
      15 KS0IW-SAVE-INDEX KS0IW-SAVE-INDEX [30] ; 
    10 KS0IW-DTL-LINE KS0IW-DTL-LINE [30] ; 
      15 KS0IW-SEL KS0IW-SEL ; 
      15 XGPCD XGPCD ; 
      15 KS0IW-DTL-STY-NBR KS0IW-DTL-STY-NBR ; 
      15 KS0IW-DTL-COLR-CD-ID KS0IW-DTL-COLR-CD-ID ; 
      15 KS0IW-DTL-DIM-CD KS0IW-DTL-DIM-CD ; 
      15 KS0IW-DTL-SHORT-STY-NM KS0IW-DTL-SHORT-STY-NM ; 
      15 KS0IW-DTL-HTS-NBR KS0IW-DTL-HTS-NBR ; 
        20 KS0IW-DTL-HTS-CPTR-CD KS0IW-DTL-HTS-CPTR-CD ; 
        20 KS0IW-DTL-HTS-HDG-CD KS0IW-DTL-HTS-HDG-CD ; 
        20 * char(1) ; 
        20 KS0IW-DTL-HTS-1ST-SHDG-CD KS0IW-DTL-HTS-1ST-SHDG-CD ; 
        20 * char(1) ; 
        20 KS0IW-DTL-HTS-2ND-SHDG-CD KS0IW-DTL-HTS-2ND-SHDG-CD ; 
        20 KS0IW-DTL-HTS-STAT-CD KS0IW-DTL-HTS-STAT-CD ; 
        20 * char(1) ; 
        20 * char(1) ; // HTS suffix id
      15 KS0IW-DTL-QOTA-CAT-CD KS0IW-DTL-QOTA-CAT-CD ; 
      15 KS0IW-DTL-DTY-RATE KS0IW-DTL-DTY-RATE ; 
      15 KS0IW-DTL-RULE-NBR KS0IW-DTL-RULE-NBR ; 
      15 KS0IW-DTL-PRBM-CD KS0IW-DTL-PRBM-CD ; 
      15 KS0IW-DTL-STY-TYP KS0IW-DTL-STY-TYP ; 
      15 KS0IW-DTL-SESN-CD KS0IW-DTL-SESN-CD ; 
      15 KS0IW-DTL-SESN-YR KS0IW-DTL-SESN-YR ; 
        20 KS0IW-DTL-SESN-CENT KS0IW-DTL-SESN-CENT ; 
        20 KS0IW-DTL-SESN-YY KS0IW-DTL-SESN-YY ; 
      15 KS0IW-DTL-XPRMT-STY KS0IW-DTL-XPRMT-STY ; 
      15 KS0IW-TEXT-NBR KS0IW-TEXT-NBR ; 
      15 KS0IW-PRBM-NBR KS0IW-PRBM-NBR ; 
      15 KS0IW-SYNCTPGN KS0IW-SYNCTPGN ; 
      15 KS0IW-DTL-POIDT KS0IW-DTL-POIDT ; 
        20 * char(1) ; 
        20 KS0IW-DTL-PRDCTN-CEN KS0IW-DTL-PRDCTN-CEN ; 
        20 KS0IW-DTL-PRDCTN-YR KS0IW-DTL-PRDCTN-YR ; 
        20 KS0IW-DTL-PRDCTN-MO KS0IW-DTL-PRDCTN-MO ; 
        20 KS0IW-DTL-DLVR-MO KS0IW-DTL-DLVR-MO ; 
      15 KS0IW-DTL-FCTY-CD KS0IW-DTL-FCTY-CD ; 
      15 KS0IW-DTL-LST-POIDT KS0IW-DTL-LST-POIDT ; 
        20 * char(1) ; 
        20 KS0IW-DTL-LST-PRDCTN-CEN KS0IW-DTL-LST-PRDCTN-CEN ; 
        20 KS0IW-DTL-LST-PO-MO-RNG KS0IW-DTL-LST-PO-MO-RNG ; 
          25 KS0IW-DTL-LST-PRDCTN-YR KS0IW-DTL-LST-PRDCTN-YR ; 
          25 KS0IW-DTL-LST-PRDCTN-MO KS0IW-DTL-LST-PRDCTN-MO ; 
          25 KS0IW-DTL-LST-DLVR-MO KS0IW-DTL-LST-DLVR-MO ; 
      15 KS0IW-UCTNT-CD1 KS0IW-UCTNT-CD1 ; 
      15 KS0IW-UCTNT-CD2 KS0IW-UCTNT-CD2 ; 
      15 KS0IW-UCTNT-CD3 KS0IW-UCTNT-CD3 ; 
      15 KS0IW-UCTNT-CD4 KS0IW-UCTNT-CD4 ; 
      15 KS0IW-LCTNT-CD1 KS0IW-LCTNT-CD1 ; 
      15 KS0IW-LCTNT-CD2 KS0IW-LCTNT-CD2 ; 
      15 KS0IW-LCTNT-CD3 KS0IW-LCTNT-CD3 ; 
      15 KS0IW-LCTNT-CD4 KS0IW-LCTNT-CD4 ; 
      15 KS0IW-DTL-POID KS0IW-DTL-POID ; 
      15 KS0IW-COLOR-1 KS0IW-COLOR-1 ; 
      15 KS0IW-COLOR-2 KS0IW-COLOR-2 ; 
      15 KS0IW-COLOR-3 KS0IW-COLOR-3 ; 
      15 KS0IW-COLOR-4 KS0IW-COLOR-4 ; 
      15 KS0IW-COLOR-5 KS0IW-COLOR-5 ; 
      15 KS0IW-COLOR-6 KS0IW-COLOR-6 ; 
      15 KS0IW-COLOR-7 KS0IW-COLOR-7 ; 
      15 KS0IW-COLOR-8 KS0IW-COLOR-8 ; 
      15 KS0IW-COLOR-9 KS0IW-COLOR-9 ; 
      15 KS0IW-COLOR-10 KS0IW-COLOR-10 ; 
      15 KS0IW-COLOR-11 KS0IW-COLOR-11 ; 
      15 KS0IW-COLOR-12 KS0IW-COLOR-12 ; 
      15 KS0IW-COLOR-13 KS0IW-COLOR-13 ; 
      15 KS0IW-COLOR-14 KS0IW-COLOR-14 ; 
      15 KS0IW-COLOR-15 KS0IW-COLOR-15 ; 
      15 KS0IW-COLOR-16 KS0IW-COLOR-16 ; 
      15 KS0IW-COLOR-17 KS0IW-COLOR-17 ; 
      15 KS0IW-COLOR-18 KS0IW-COLOR-18 ; 
      15 KS0IW-COLOR-19 KS0IW-COLOR-19 ; 
      15 KS0IW-COLOR-20 KS0IW-COLOR-20 ; 
      15 KS0IW-COLOR-21 KS0IW-COLOR-21 ; 
      15 KS0IW-COLOR-22 KS0IW-COLOR-22 ; 
      15 KS0IW-COLOR-23 KS0IW-COLOR-23 ; 
      15 KS0IW-COLOR-24 KS0IW-COLOR-24 ; 
      15 KS0IW-COLOR-25 KS0IW-COLOR-25 ; 
      15 KS0IW-COLOR-26 KS0IW-COLOR-26 ; 
      15 KS0IW-COLOR-27 KS0IW-COLOR-27 ; 
      15 KS0IW-COLOR-28 KS0IW-COLOR-28 ; 
      15 KS0IW-COLOR-29 KS0IW-COLOR-29 ; 
      15 KS0IW-COLOR-30 KS0IW-COLOR-30 ; 
end // end KS0IW01

//*** RECORD=KS0IW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record KS0IW02 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 XGPCD XGPCD ; 
  10 KS0IW-STY-NBR KS0IW-STY-NBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRDS SY2CLRDS ; 
  10 KS0IW-DTY-RATE KS0IW-DTY-RATE ; 
  10 KS0IW-QOTA-CAT-CD KS0IW-QOTA-CAT-CD ; 
  10 KS0IW-QOTA-CAT-DESC KS0IW-QOTA-CAT-DESC ; 
  10 KS0IW-HTS-NBR KS0IW-HTS-NBR ; 
    15 KS0IW-HTS-CPTR-CD KS0IW-HTS-CPTR-CD ; 
    15 KS0IW-HTS-HDG-CD KS0IW-HTS-HDG-CD ; 
    15 * char(1) ; 
    15 KS0IW-HTS-1ST-SHDG-CD KS0IW-HTS-1ST-SHDG-CD ; 
    15 * char(1) ; 
    15 KS0IW-HTS-2ND-SHDG-CD KS0IW-HTS-2ND-SHDG-CD ; 
    15 KS0IW-HTS-STAT-CD KS0IW-HTS-STAT-CD ; 
    15 * char(1) ; 
    15 * char(1) ; // HTS suffix code
  10 KS0IW-HTS-RNG-FL KS0IW-HTS-RNG-FL ; 
  10 KS0IW-RULE-NBR KS0IW-RULE-NBR ; 
  10 KS0IW-RULE-DT KS0IW-RULE-DT ; 
  10 KS0IW-XPRMT-STY-NBR KS0IW-XPRMT-STY-NBR ; 
  10 KS0IW-XSECD KS0IW-XSECD ; 
  10 KS0IW-XSNYR KS0IW-XSNYR ; 
    15 KS0IW-SESN-CENTURY KS0IW-SESN-CENTURY ; 
    15 KS0IW-SESN-YEAR KS0IW-SESN-YEAR ; 
  10 KS0IW-POIDT-NUM KS0IW-POIDT-NUM ; 
  10 KS0IW-POIDT KS0IW-POIDT ; 
  10 KS0IW-KS-STY-NM KS0IW-KS-STY-NM [2] ; 
  10 KS0IW-STY-TYP-CD KS0IW-STY-TYP-CD ; 
  10 KS0IW-STY-TYP-DESC KS0IW-STY-TYP-DESC ; 
  10 KS0IW-KS-SHORT-STY-NM KS0IW-KS-SHORT-STY-NM ; 
  10 KS0IW-REG-CD KS0IW-REG-CD ; 
  10 KS0IW-REG-SDESC KS0IW-REG-SDESC ; 
  10 KS0IW-FABRIC-DESC KS0IW-FABRIC-DESC [30] ; 
  10 KS0IW-FBRC-CHANGED KS0IW-FBRC-CHANGED ; 
  10 KS0IW-1ST-FBRC-LINE KS0IW-1ST-FBRC-LINE ; 
  10 KS0IW-2ND-FBRC-LINE KS0IW-2ND-FBRC-LINE ; 
  10 KS0IW-3RD-FBRC-LINE KS0IW-3RD-FBRC-LINE ; 
  10 KS0IW-TOT-FBRC-LINES KS0IW-TOT-FBRC-LINES ; 
  10 KS0IW-MAP-LINE-IDX KS0IW-MAP-LINE-IDX ; 
  10 KS0IW-SCROLL-IDX KS0IW-SCROLL-IDX ; 
  10 KS0IW-END-LINE KS0IW-END-LINE ; 
  10 KS0IW-FWD-LIMIT KS0IW-FWD-LIMIT ; 
  10 KS0IW-INSERT-IDX KS0IW-INSERT-IDX ; 
  10 KS0IW-INSERT-MARK KS0IW-INSERT-MARK ; 
  10 KS0IW-ORIG-CD KS0IW-ORIG-CD [6] ; 
  10 KS0IW-CATLG-PAGE-NBR KS0IW-CATLG-PAGE-NBR ; 
  10 KS0IW-TEAM-NBR KS0IW-TEAM-NBR ; 
  10 KS0IW-STAT KS0IW-STAT ; 
  10 KS0IW-MAP2-TEXT KS0IW-MAP2-TEXT ; 
  10 KS0IW-MAP2-PRBM KS0IW-MAP2-PRBM ; 
  10 KS0IW-COLOR-TABLE KS0IW-COLOR-TABLE ; 
    15 KS0IW-COLOR KS0IW-COLOR [300] ; 
  10 KS0IW-SAVE-DIM KS0IW-SAVE-DIM ; 
  10 KS0IW-SAVE-XPRMT-STY KS0IW-SAVE-XPRMT-STY ; 
  10 KS0IW-SAVE-STY-TYP KS0IW-SAVE-STY-TYP ; 
  10 KS0IW-UCTNT-CD KS0IW-UCTNT-CD [4] ; 
  10 KS0IW-LCTNT-CD KS0IW-LCTNT-CD [4] ; 
  10 KS0IW-FABRIC-FIELD KS0IW-FABRIC-FIELD [3] ; 
  10 KS0IW-FABRIC-TEXT KS0IW-FABRIC-TEXT ; 
    15 KS0IW-FABRIC-BYTE KS0IW-FABRIC-BYTE [50] ; 
  10 KS0IW-XMCSDESC KS0IW-XMCSDESC ; 
    15 KS0IW-XMCSDESC-BYTE KS0IW-XMCSDESC-BYTE [13] ; 
  10 KS0IW-FACTORY-TABLE KS0IW-FACTORY-TABLE ; 
    15 KS0IW-FACTORY KS0IW-FACTORY [12] ; 
  10 KS0IW-SPACT-CD KS0IW-SPACT-CD ; 
  10 KS0IW-SPACT-ABRV KS0IW-SPACT-ABRV ; 
  10 KS0IW-DIV-CD KS0IW-DIV-CD ; 
  10 KS0IW-DIV-ABRV KS0IW-DIV-ABRV ; 
  10 KS0IW-PROD-CAT-CD KS0IW-PROD-CAT-CD ; 
  10 KS0IW-PROD-CAT-ABRV KS0IW-PROD-CAT-ABRV ; 
  10 KS0IW-GNDR-AGE-CD KS0IW-GNDR-AGE-CD ; 
  10 KS0IW-GNDR-AGE-ABRV KS0IW-GNDR-AGE-ABRV ; 
  10 KS0IW-SILH-CD KS0IW-SILH-CD ; 
  10 KS0IW-SILH-ABRV KS0IW-SILH-ABRV ; 
  10 WK-XPRMT-STY WK-XPRMT-STY ; 
    15 XPRMT-STY-SIX-CH XPRMT-STY-SIX-CH ; 
    15 XPRMT-STY-ID XPRMT-STY-ID ; 
  10 KS0IW-PRC-PCT KS0IW-PRC-PCT ; 
end // end KS0IW02

//*** RECORD=KS0IW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record KS0IW03 type basicRecord
  10 KS0IW-MAP3-PRBM-TABLE KS0IW-MAP3-PRBM-TABLE [25] ; 
    15 KS0IW-MAP3-PRBM KS0IW-MAP3-PRBM ; 
    15 KS0IW-MAP3-PRBM-DESC KS0IW-MAP3-PRBM-DESC ; 
  10 KS0IW-MAP3-CAUTION-FL KS0IW-MAP3-CAUTION-FL ; 
end // end KS0IW03

//*** RECORD=KS0IW04 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record KS0IW04 type basicRecord
  10 KS0IW-CMMT-DESC KS0IW-CMMT-DESC [2] ; 
  10 KS0IW-PROD-DESC KS0IW-PROD-DESC [12] ; 
end // end KS0IW04

//*** RECORD=KS0IW05 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record KS0IW05 type basicRecord
  10 KS0IW-PROB-FLAG KS0IW-PROB-FLAG ; 
  10 KS0IW-CVS-FLAG KS0IW-CVS-FLAG ; 
  10 KS0IW-FOOT-NOTE-NBR KS0IW-FOOT-NOTE-NBR ; 
  10 KS0IWIXM KS0IWIXM ; 
  10 KS0IW-STYLE-CLR-DIM KS0IW-STYLE-CLR-DIM ; 
    15 KS0IW-STY-NBR KS0IW-STY-NBR ; 
    15 * char(1) ; 
    15 KS0IW-COLR-CD-ID KS0IW-COLR-CD-ID ; 
    15 * char(1) ; 
    15 KS0IW-DIM-CD KS0IW-DIM-CD ; 
  10 KS0IW-FOOT-DESC KS0IW-FOOT-DESC ; 
    15 KS0IW-FOOT-DESC1 KS0IW-FOOT-DESC1 ; 
    15 KS0IW-FOOT-DESC2 KS0IW-FOOT-DESC2 ; 
    15 KS0IW-FOOT-DEST3 KS0IW-FOOT-DEST3 ; 
    15 KS0IW-FOOT-DEST4 KS0IW-FOOT-DEST4 ; 
  10 KS0IW-PROD-DESC KS0IW-PROD-DESC [4] ; 
  10 KS0IW-MAP-FOOT-DESC KS0IW-MAP-FOOT-DESC ; 
    15 KS0IW-MAP-FOOT-DESC1 KS0IW-MAP-FOOT-DESC1 ; 
    15 KS0IW-MAP-FOOT-DESC2 KS0IW-MAP-FOOT-DESC2 ; 
    15 KS0IW-MAP-FOOT-DESC3 KS0IW-MAP-FOOT-DESC3 ; 
  10 KS0IW-MAP-HTS-NBR KS0IW-MAP-HTS-NBR ; 
    15 KS0IW-HTS-CPTR-CD KS0IW-HTS-CPTR-CD ; 
    15 KS0IW-HTS-HDG-CD KS0IW-HTS-HDG-CD ; 
    15 * char(1) ; 
    15 KS0IW-HTS-1ST-SHDG-CD KS0IW-HTS-1ST-SHDG-CD ; 
    15 * char(1) ; 
    15 KS0IW-HTS-2ND-SHDGCD1 KS0IW-HTS-2ND-SHDGCD1 ; 
    15 KS0IW-HTS-STAT-CD KS0IW-HTS-STAT-CD ; 
    15 * char(1) ; 
    15 * char(1) ; 
  10 KS0IW-PRBM-CD KS0IW-PRBM-CD ; 
  10 KS0IW-FC-CD KS0IW-FC-CD [9] ; 
end // end KS0IW05

//*** RECORD=VCPROD03 ****
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 09/07/00  VKUMAR     INITIAL RECORD CREATION
// ************************************************************
// ************************
Record VCPROD03 type basicRecord
  5 VCPROD03-GROUP VCPROD03-GROUP ; 
    10 VCPROD03-KEY VCPROD03-KEY ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 KS-XPRMT-STY-NBR KS-XPRMT-STY-NBR ; 
      15 YKS-STY-TYP-CD YKS-STY-TYP-CD ; 
    10 KS-HTS-CPTR-CD KS-HTS-CPTR-CD ; 
    10 KS-HTS-HDG-CD KS-HTS-HDG-CD ; 
    10 KS-HTS-1ST-SHDG-CD KS-HTS-1ST-SHDG-CD ; 
    10 KS-HTS-2ND-SHDG-CD KS-HTS-2ND-SHDG-CD [2] ; 
    10 KS-HTS-STAT-CD KS-HTS-STAT-CD ; 
    10 KS-HTS-SUFX-ID KS-HTS-SUFX-ID ; 
    10 KS-HTS-RNG-FL KS-HTS-RNG-FL ; 
    10 KS-RULE-NBR KS-RULE-NBR ; 
    10 KS-STY-NM KS-STY-NM [2] ; 
    10 KS-SHORT-STY-NM KS-SHORT-STY-NM ; 
    10 KS-XCT-ORIG-CD KS-XCT-ORIG-CD [6] ; 
    10 KS-PRBM-NBR KS-PRBM-NBR ; 
    10 KS-TXT-NBR KS-TXT-NBR ; 
    10 KS-PLANIMETER-FL KS-PLANIMETER-FL ; 
    10 KS-CF5523-FL KS-CF5523-FL ; 
    10 YPR-PROD-STAT-CD YPR-PROD-STAT-CD ; 
    10 SYNCTPGN SYNCTPGN ; 
    10 KS-TEAM-CD KS-TEAM-CD ; 
    10 XSUCD XSUCD ; 
    10 KS-BUS-UNIT-CD KS-BUS-UNIT-CD ; 
    10 KS-HTS-ORD-ID KS-HTS-ORD-ID ; 
    10 KS-CMPNT-PRC-PCT KS-CMPNT-PRC-PCT ; 
    10 KS-PRC-PCTEFF-DT KS-PRC-PCTEFF-DT ; 
    10 KS-PRC-PCTEXPIR-DT KS-PRC-PCTEXPIR-DT ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VCPROD03

// xxx-user-id
DataItem KS-CMPNT-PRC-PCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xxx-user-id
DataItem KS-HTS-ORD-ID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-user-id
DataItem KS-PRC-PCTEFF-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xxx-user-id
DataItem KS-PRC-PCTEXPIR-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0IW-1ST-FBRC-LINE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0IW-2ND-FBRC-LINE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0IW-3RD-FBRC-LINE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Catalog page eof switch
DataItem KS0IW-CAT-EOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Catalog page nbr override flag
DataItem KS0IW-CAT-OVERRIDE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customs catalog page number
DataItem KS0IW-CATLG-PAGE-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xmc-mat-ctnt-cd1/cd2
DataItem KS0IW-CD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xmc-mat-ctnt-cd3
DataItem KS0IW-CD3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xmc-mat-ctnt-cd4
DataItem KS0IW-CD4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close function code
DataItem KS0IW-CLOSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-CLR-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Comment description
DataItem KS0IW-CMMT-DESC char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color code
DataItem KS0IW-COLOR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 1
DataItem KS0IW-COLOR-1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 10
DataItem KS0IW-COLOR-10 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 11
DataItem KS0IW-COLOR-11 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 12
DataItem KS0IW-COLOR-12 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 13
DataItem KS0IW-COLOR-13 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 14
DataItem KS0IW-COLOR-14 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 15
DataItem KS0IW-COLOR-15 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 16
DataItem KS0IW-COLOR-16 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 17
DataItem KS0IW-COLOR-17 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 18
DataItem KS0IW-COLOR-18 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 19
DataItem KS0IW-COLOR-19 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 2
DataItem KS0IW-COLOR-2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 20
DataItem KS0IW-COLOR-20 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 21
DataItem KS0IW-COLOR-21 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 22
DataItem KS0IW-COLOR-22 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 23
DataItem KS0IW-COLOR-23 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 24
DataItem KS0IW-COLOR-24 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 25
DataItem KS0IW-COLOR-25 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 26
DataItem KS0IW-COLOR-26 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 27
DataItem KS0IW-COLOR-27 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 28
DataItem KS0IW-COLOR-28 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 29
DataItem KS0IW-COLOR-29 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 3
DataItem KS0IW-COLOR-3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 30
DataItem KS0IW-COLOR-30 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 4
DataItem KS0IW-COLOR-4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 5
DataItem KS0IW-COLOR-5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 6
DataItem KS0IW-COLOR-6 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 7
DataItem KS0IW-COLOR-7 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 8
DataItem KS0IW-COLOR-8 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color 9
DataItem KS0IW-COLOR-9 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color combined switch
DataItem KS0IW-COLOR-COMB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color code table
DataItem KS0IW-COLOR-TABLE char(900)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color code id
DataItem KS0IW-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage counter
DataItem KS0IW-COUNTER num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Copy Color in process ind
DataItem KS0IW-CPY-CLR-IN-PROCESS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pass record control field
DataItem KS0IW-CTL-FLD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Control table function switch
DataItem KS0IW-CTL-FUNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor position found switch
DataItem KS0IW-CURSOR-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-CVD-PRBM-CNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0IW-CVS-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data changed switch
DataItem KS0IW-DATA-CHANGED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date working storage
DataItem KS0IW-DATE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date century
DataItem KS0IW-DATE-CENTURY num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date day
DataItem KS0IW-DATE-DAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date month
DataItem KS0IW-DATE-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date working storage
DataItem KS0IW-DATE-WORK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date year
DataItem KS0IW-DATE-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day
DataItem KS0IW-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data entered switch
DataItem KS0IW-DEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-DESC char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dimension code
DataItem KS0IW-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Division abrv
DataItem KS0IW-DIV-ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Division code
DataItem KS0IW-DIV-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem KS0IW-DLVR-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-DLVR-MO-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-DLVR-MO-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0IW-DTL-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem KS0IW-DTL-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail PO ID delivery month
DataItem KS0IW-DTL-DLVR-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customs Duty Rate
DataItem KS0IW-DTL-DTY-RATE char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail Factory code
DataItem KS0IW-DTL-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 1st subheading code
DataItem KS0IW-DTL-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 2nd subheading code
DataItem KS0IW-DTL-HTS-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS chapter code
DataItem KS0IW-DTL-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS heading code
DataItem KS0IW-DTL-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customs HS Number
DataItem KS0IW-DTL-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS status code
DataItem KS0IW-DTL-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List screen detail line
DataItem KS0IW-DTL-LINE char(245)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail last PO ID delvry month
DataItem KS0IW-DTL-LST-DLVR-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail PO Month Rng screen
DataItem KS0IW-DTL-LST-PO-MO-RNG char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail last PO ID date
DataItem KS0IW-DTL-LST-POIDT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-DTL-LST-PRDCTN-CEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail last PO ID prod month
DataItem KS0IW-DTL-LST-PRDCTN-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail last PO ID prod year
DataItem KS0IW-DTL-LST-PRDCTN-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail PO ID date
DataItem KS0IW-DTL-POID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail PO ID date
DataItem KS0IW-DTL-POIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// KS_PRBM_NBR
DataItem KS0IW-DTL-PRBM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-DTL-PRDCTN-CEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem KS0IW-DTL-PRDCTN-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail PO ID production year
DataItem KS0IW-DTL-PRDCTN-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customs Quota Category Code
DataItem KS0IW-DTL-QOTA-CAT-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR
DataItem KS0IW-DTL-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail season code
DataItem KS0IW-DTL-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail season year century
DataItem KS0IW-DTL-SESN-CENT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail season year
DataItem KS0IW-DTL-SESN-YR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail season year yy
DataItem KS0IW-DTL-SESN-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// KS_SHORT_STY_NM
DataItem KS0IW-DTL-SHORT-STY-NM char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0IW-DTL-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style type code
DataItem KS0IW-DTL-STY-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Experimental style number
DataItem KS0IW-DTL-XPRMT-STY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Gen dty rate & last PO mo rng
DataItem KS0IW-DTY-LST-PO-TXT char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map 2 General duty rate
DataItem KS0IW-DTY-RATE char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Gen dty rate
DataItem KS0IW-DTY-RATE-TXT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Space separator
DataItem KS0IW-DTY-SPACE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-END-LINE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Exp Style? flag
DataItem KS0IW-EXP-STYLE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-FABRIC-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fabric description
DataItem KS0IW-FABRIC-DESC char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fabric Desc map description
DataItem KS0IW-FABRIC-FIELD char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fabric Desc work area
DataItem KS0IW-FABRIC-TEXT char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory code
DataItem KS0IW-FACTORY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory code table
DataItem KS0IW-FACTORY-TABLE char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-FBRC-CHANGED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-FC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory code
DataItem KS0IW-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcty cursor end of file switch
DataItem KS0IW-FCTY-SWITCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fetch function code
DataItem KS0IW-FETCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map function switch
DataItem KS0IW-FNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment description
DataItem KS0IW-FOOT-DESC char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-FOOT-DESC1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-FOOT-DESC2 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-FOOT-DEST3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-FOOT-DEST4 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-FOOT-NOTE-NBR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Each byte of formatted field
DataItem KS0IW-FORMAT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Formatted gen dty rt,unit,uom
DataItem KS0IW-FORMATTED-RATE char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-FWD-LIMIT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General duty rate
DataItem KS0IW-GEN-DTY-RATE num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General duty unit
DataItem KS0IW-GEN-DTY-UNT num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Gender/age abrv
DataItem KS0IW-GNDR-AGE-ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Gender/age code
DataItem KS0IW-GNDR-AGE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem KS0IW-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC description
DataItem KS0IW-GPC-DESC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Footwear Shell/Overlay desc
DataItem KS0IW-GPC02-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// space
DataItem KS0IW-GPC02-HS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-1ST-SHDG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-2ND-SHDG-1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-2ND-SHDG-2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS 2nd subheading code
DataItem KS0IW-HTS-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-2ND-SHDG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-2ND-SHDG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-2ND-SHDGCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-CPTR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HTS Number Format flag
DataItem KS0IW-HTS-FORMAT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-HDG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS number work area
DataItem KS0IW-HTS-NBR-WORK char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-NUMBER char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_RNG_FL
DataItem KS0IW-HTS-RNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-INSERT-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0IW-INSERT-MARK num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// IO6130 IO Mod called
DataItem KS0IW-IO6130-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0IW-IX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0IW-IX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0IW-IX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0IW-IX4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0IW-IX5 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for WS tables
DataItem KS0IW-IX6 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0IW-IXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Customs short style desc
DataItem KS0IW-KS-SHORT-STY-NM char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customs style description
DataItem KS0IW-KS-STY-NM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS1120 IO Mod called
DataItem KS0IW-KS1120-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last page checked for match
DataItem KS0IW-LAST-CHECKED-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last row checked for match
DataItem KS0IW-LAST-CHECKED-ROW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Lower content code
DataItem KS0IW-LCTNT-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Lower content code
DataItem KS0IW-LCTNT-CD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Lower content code
DataItem KS0IW-LCTNT-CD2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Lower content code
DataItem KS0IW-LCTNT-CD3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Lower content code
DataItem KS0IW-LCTNT-CD4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last PO month range for item
DataItem KS0IW-LST-PO-TXT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-MAP-FOOT-DESC char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-MAP-FOOT-DESC1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-MAP-FOOT-DESC2 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-MAP-FOOT-DESC3 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-MAP-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-MAP-LINE-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map2 problem number
DataItem KS0IW-MAP2-PRBM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map2 text number
DataItem KS0IW-MAP2-TEXT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map 3 caution flag
DataItem KS0IW-MAP3-CAUTION-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map 3 data changed switch
DataItem KS0IW-MAP3-CHANGED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem code
DataItem KS0IW-MAP3-PRBM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem description
DataItem KS0IW-MAP3-PRBM-DESC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map 3 problem table
DataItem KS0IW-MAP3-PRBM-TABLE char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map 4 data changed switch
DataItem KS0IW-MAP4-CHANGED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum pages to format
DataItem KS0IW-MAX-PAGES num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month
DataItem KS0IW-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New HS number from KS0J
DataItem KS0IW-NEW-HS-SWITCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-ORDER-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0IW-ORDER-MAX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0IW-ORDER-SWITCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_XCT_ORIG_CD
DataItem KS0IW-ORIG-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Origin country description
DataItem KS0IW-ORIG-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-OTHRFLDCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page is full indicator
DataItem KS0IW-PAGE-IS-FULL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF16 pressed flag
DataItem KS0IW-PF16 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF17 pressed flag
DataItem KS0IW-PF17 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 pressed flag
DataItem KS0IW-PF18 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF19 pressed flag
DataItem KS0IW-PF19 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID date
DataItem KS0IW-POIDT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID date
DataItem KS0IW-POIDT-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working storage problem code
DataItem KS0IW-PRBM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_PRBM_NBR
DataItem KS0IW-PRBM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem found switch
DataItem KS0IW-PRBM-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_PRBM_NBR
DataItem KS0IW-PRBM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working storage problem table
DataItem KS0IW-PRBM-TABLE char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-PRC-PCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0IW-PRCPCTCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-PRDCTN-CEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production month
DataItem KS0IW-PRDCTN-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-PRDCTN-MO-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-PRDCTN-MO-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production year
DataItem KS0IW-PRDCTN-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-PROB-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Product category abrv
DataItem KS0IW-PROD-CAT-ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Product category code
DataItem KS0IW-PROD-CAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Product description
DataItem KS0IW-PROD-DESC char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quota category code
DataItem KS0IW-QOTA-CAT-CD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quota category desc
DataItem KS0IW-QOTA-CAT-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rank number
DataItem KS0IW-RANK-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Each byte of general duty rate
DataItem KS0IW-RATE-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat map 1 switch
DataItem KS0IW-REFORMAT-MAP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDR-PROD-REG-CD
DataItem KS0IW-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-REG-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR bytes
DataItem KS0IW-RULE-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_DT
DataItem KS0IW-RULE-DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR
DataItem KS0IW-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR on map
DataItem KS0IW-RULE-NBR-MAP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save index for WS
DataItem KS0IW-SAV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Save Color Code
DataItem KS0IW-SAV-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save Dim Code
DataItem KS0IW-SAV-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save Dim Code
DataItem KS0IW-SAV-EQUIP-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save key for cursor position
DataItem KS0IW-SAV-KEY char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save Season Code
DataItem KS0IW-SAV-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save Season Year
DataItem KS0IW-SAV-SESN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save style number
DataItem KS0IW-SAV-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save Type code
DataItem KS0IW-SAV-STY-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save exprimental style
DataItem KS0IW-SAV-XPRMT-STY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-SAVE-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-SAVE-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-SAVE-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save dimension code
DataItem KS0IW-SAVE-DIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map save function switch
DataItem KS0IW-SAVE-FNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-SAVE-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save HS number
DataItem KS0IW-SAVE-HTS-NBR char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save index array
DataItem KS0IW-SAVE-INDEX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save index table
DataItem KS0IW-SAVE-INDEX-TBL char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save page for cursor placement
DataItem KS0IW-SAVE-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Save problem code
DataItem KS0IW-SAVE-PRBM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save HS range flag
DataItem KS0IW-SAVE-RNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save ZZ_SDT
DataItem KS0IW-SAVE-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KS0IW-SAVE-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save style type code
DataItem KS0IW-SAVE-STY-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save experimental style nbr
DataItem KS0IW-SAVE-XPRMT-STY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-SCROLL-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map 2 count switch
DataItem KS0IW-SCT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line selection indicator
DataItem KS0IW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select function code
DataItem KS0IW-SELECT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE_SESN_CD
DataItem KS0IW-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season code
DataItem KS0IW-SESN-CD-TXT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season century
DataItem KS0IW-SESN-CENT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-SESN-CENTURY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season/Type text
DataItem KS0IW-SESN-TYP-TXT char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-SESN-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem KS0IW-SESN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem KS0IW-SESN-YR-NUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season year
DataItem KS0IW-SESN-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season year
DataItem KS0IW-SESN-YY-TXT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Silhouette code override flag
DataItem KS0IW-SIL-OVERRIDE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Silhoutte abrv
DataItem KS0IW-SILH-ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Silhoutte code
DataItem KS0IW-SILH-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sport activity abrv
DataItem KS0IW-SPACT-ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sport activity code
DataItem KS0IW-SPACT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YPR_PROD_STAT_CD
DataItem KS0IW-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style first character
DataItem KS0IW-STY-CHAR-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style second character
DataItem KS0IW-STY-CHAR-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style third character
DataItem KS0IW-STY-CHAR-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style fourth character
DataItem KS0IW-STY-CHAR-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style fifth character
DataItem KS0IW-STY-CHAR-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style sixth character
DataItem KS0IW-STY-CHAR-6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style seventh character
DataItem KS0IW-STY-CHAR-7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0IW-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style type code
DataItem KS0IW-STY-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 1
DataItem KS0IW-STY-TYP-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 2
DataItem KS0IW-STY-TYP-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 3
DataItem KS0IW-STY-TYP-CD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style type description
DataItem KS0IW-STY-TYP-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem KS0IW-STYLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-STYLE-CLR-DIM char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style found switch
DataItem KS0IW-STYLE-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KS0IW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem KS0IW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KS0IW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prbm cursor end of file switch
DataItem KS0IW-SWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0IW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Team cursor end of file switch
DataItem KS0IW-SWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0IW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Text cursor end of file switch
DataItem KS0IW-SWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customs catalog page number
DataItem KS0IW-SYNCTPGN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customs Team Code
DataItem KS0IW-TEAM-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Team description
DataItem KS0IW-TEAM-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Team found switch
DataItem KS0IW-TEAM-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customs team number
DataItem KS0IW-TEAM-NBR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Team code override flag
DataItem KS0IW-TEAM-OVERRIDE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customs text
DataItem KS0IW-TEXT char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_TXT_NBR
DataItem KS0IW-TEXT-NBR int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Customs text table
DataItem KS0IW-TEXT-TABLE char(1650)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-TOT-FBRC-LINES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Text type indicator
DataItem KS0IW-TXT-TYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type description (Truncated)
DataItem KS0IW-TYPE-DESC-TXT char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Upper content code
DataItem KS0IW-UCTNT-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Upper content code
DataItem KS0IW-UCTNT-CD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Upper content code
DataItem KS0IW-UCTNT-CD2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Upper content code
DataItem KS0IW-UCTNT-CD3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Upper content code
DataItem KS0IW-UCTNT-CD4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Each byte of general duty unit
DataItem KS0IW-UNIT-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Unit of measure
DataItem KS0IW-UOM-ABRV char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Each byte of unit of measure
DataItem KS0IW-UOM-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// U.S. Made? flag
DataItem KS0IW-US-MADE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCPROD02 row add
DataItem KS0IW-VCPROD02-ADDED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCPROD02 row(s) duplicated
DataItem KS0IW-VCPROD02-DUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCPROD02 row(s) updated
DataItem KS0IW-VCPROD02-UPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// U/L description work area
DataItem KS0IW-XMCSDESC char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IW-XMCSDESC-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Experimental style number
DataItem KS0IW-XPRMT-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season code
DataItem KS0IW-XSECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season year
DataItem KS0IW-XSNYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year
DataItem KS0IW-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0IWIXM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem VCPROD03-GROUP char(199)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VCPROD03-KEY char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_XPRMT_STY_NBR
DataItem WK-XPRMT-STY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem XPRMT-STY-ID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_XPRMT_STY_NBR
DataItem XPRMT-STY-SIX-CH char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

