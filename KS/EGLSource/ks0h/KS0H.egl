package ks0h;

import corpcom2.XX0XW02;
import corpcom3.XPKS-00001;
import corpcom3.XPTA0P;
import corpcom3.XPXCT01;
import corpcom3.XPXDR01;
import corpcom3.XPXDV02;
import corpcom3.XPXGP01;
import corpcom3.XPXSE01;
import corpcom3.XPXX001;
import corpcom3.XPYKP01;
import corpcom3.XPYKS01;
import corpcom3.XPYPR01;
import corpcom3.XPYQT01;
import corpcom4.XSKS-S0001;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTTBL;
import corpx1.XDRTBL;
import corpx1.XDVTBL;
import corpx1.XGPTBL;
import corpx1.XSETBL;
import corpy2.YKPTBL;
import corpy2.YKSTBL;
import corpy2.YPRTBL;
import corpy2.YQTTBL;
import fy.common.FY1REC;
import ks.common.*;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import vv.common.VBDRUL01;
import vv.common.VCTEAM01;
import vv.common.VHSCHP01;
import vv.common.VHSHDG01;
import vv.common.VHSNBR01;
import vv.common.VHSSHD01;
import vv.common.VKSORD01;
//*** PROGRAM=KS0H ****
// This application displays the US Customs Report Request Menu
// screen and subordinate Background Job Submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Background Job Request Subroutine (TA0P).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.  The data in working storage is substituted
// and the statement is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGES
// -------  --------  ------  ---------------------------------
// NEW      12/30/91  SMACMI  New application.
// fix      02/28/92  CEPPLE  Fix 02520 to not move test table
//                            information to production jcl.
// fix      03/04/92  CEPPLE  Fix production jcl submit to pass
//                            SP for scheduled pre-class rather
//                            than PC.
// C001     04/07/92  DHUFFM  Change so that season/yr is not
//                            required if gpc/problem entered.
// C010     04/22/92  DHUFFM  Add option to exclude style
//                            development product codes.
// C009     05/08/92  DHUFFM  Style registration sheet format
//                            changes.
// C014     05/12/92  BANTHO  Chg 'problem code' to 'features'.
// fix      05/27/92  cepple  Modifiy bundle print logic to
//                            obtain and check printer selected
//                            for bundle print.
// 000      06/08/92  DHUFFM  Table changes - remove VBDRUL01 &
//                            VCPROD01 (not used).
// C024     07/10/92  DHUFFM  Classification report changes.
// C032     07/22/92  DHUFFM  Classification Report Select -
//                            Change parameters for selection
//                            to match KS0I screen header.
// C033     07/28/92  DHUFFM  Style Registration Sheet Select -
//                            Change parameters for selection
//                            to match KS0I screen header.
//  000     07/30/92  DHUFFM  Style Reg Sheets - default GPC to
//                            '03' and change to not require
//                            Season if style is entered.
//  000     07/30/92  DHUFFM  Footwear Preclassification
//                            Modifications.
// C037     08/25/92  SMARIE  Add ability to print up to 99
//                            copies to the LOCAL printer.
// C012     09/02/92  SMARIE  Add customs HS Number report to
//                            the on-line submitted report
//                            facility.
//  000     09/22/92  SMARIE  Add the CF5523 Exception Report
//                            to the on-line submit facility.
//  000     10/28/92  SMARIE  Allow ftwr to select by GPC only.
//                            on Classification Report.
//  000     10/29/92  SMARIE  Change selection criteria for
//                            Classification Report to match
//                            KS0L.
//  000     10/30/92  SMARIE  Change selection criteria for
//                            Style Reg Sheet to match KS0L.
//  000     11/4/92   SMARIE  Allow FTWR to use Binding Ruling
//                            Xref on Classification Report.
//  000     11/17/92  SMARIE  Add code to send Classification
//                            Report to different forms codes
//                            depending on GPC.  Used an * in
//                            the KS0HT22.TARTYPE field to
//                            indicate line. (* not passed to
//                            TA0P, substituted space)
//  000     11/18/92  SMARIE  Rename all tables to letter-num
//                            format in last two char in name.
// C066     12/08/92  SMARIE  Remove all references to SUFX-ID.
// c039     12/10/92  SMARIE  Add Div-CD selection criteria.
// C040     12/15/92  KKYLE   Add Binding Ruling Report
// C053     12/28/92  SMARIE  Add FTWR Master Class Report
//  000     01/06/93  SMARIE  Add special rpt and sort options
//                            to Master Classification Report.
// C068     01/08/93  SMARIE  Add STY-TYP to selection criteria
//                            in Class and Sty Reg Sheet Rpts.
// C071     01/27/93  DHUFFM  Report Requestor Change.
// C074     02/10/93  DHUFFM  Chg style field to 6 chars.
// C077     02/19/93  DHUFFM  Chg H.S. Nbr display/pass.
//  000     03/12/93  DHUFFM  Only allow 1 copy to print on the
//                            xerox.
// C082     04/01/93  CEPPLE  Add customs component mapper dnld
//                            option.
// C091     08/06/93  CEPPLE  Add customs aprl nc styles rpt.
// C099     03/21/94  dhuffm  Add 'BN' and 'SD' to selection
//                            status for 02000, 03000, & 07000.
// KS100    10/06/94  GAMEN   Add new selection for sending
//                            data to CAMCUST on request.
// ks097    05/11/95  NLADOU  Add marketing region to customs
//                            product master screens and
//                            reports.
//          06/21/95  eraymo  Add customs directives report
//          02/09/96  eraymo  Increased length of ws qota-cat
//                            -cd and changed parms to allow
//                            new length.
//          02/14/96  eraymo  re arranged parms and changed
//                            parm formatting modules accord
//                            ingly.
//          04/17/96  BKEPFO  removed hyper-channel code and
//                            converted to FTP and put in batch
//                            started jcl (KS1272).
//          10/04/96  ERAYMO  changes to Qota Cat. by Ctry
//                            screen.  Chg 'country' to 'origin
//                            country', restrict mkt region to
//                            '01'; USA.
//           1/23/97  ERAYMO  changes to maps 2,3,5,7 - Ctry
//                            field label changed to 'ORIGIN
//                            COUNTRY'.
//           7/11/97  RCORLE  Mod for equipment
//          08/05/97  RTANGI  message table changes for 'BU'
//          08/22/97  RTANGI  allow 'eq' for gpc on master
//                            classification report
//          08/26/97  RTANGI  New messages for 'BU'
//          09/05/97  RTANGI  Factory code changes
//          09/15/98  VKUMAR  Added option for Models without
//                            planimeter readings
// KS#000   05/05/00  VKUMAR  Changed the form code for models
//                            without planimeter readings
// KS#000   05/12/00  VKUMAR  Fixed the problem in models
//                            without planimeter readings rept
// *********************
Program KS0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY1REC FY1REC; // record
  KS0HW00 KS0HW00; // record
  KS0HW01 KS0HW01; // record
  KS0HW02 KS0HW02; // record
  KS0HW03 KS0HW03; // record
  KS0HW04 KS0HW04; // record
  KS0HW05 KS0HW05; // record
  KS0HW06 KS0HW06; // record
  KS0HW07 KS0HW07; // record
  KS0HW08 KS0HW08; // record
  KS0HW09 KS0HW09; // record
  KS0HW10 KS0HW10; // record
  KS0HW12 KS0HW12; // record
  KS0HW13 KS0HW13; // record
  KSWREC KSWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VBDRUL01 VBDRUL01; // record
  VCTEAM01 VCTEAM01; // record
  VHSCHP01 VHSCHP01; // record
  VHSHDG01 VHSHDG01; // record
  VHSNBR01 VHSNBR01; // record
  VHSSHD01 VHSSHD01; // record
  VKSORD01 VKSORD01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KS0HTA1; // table
  use KS0HTA2; // table
  use KS0HTA3; // table
  use KS0HTB1; // table
  use KS0HTB2; // table
  use KS0HTB3; // table
  use KS0HTC1; // table
  use KS0HTC2; // table
  use KS0HTC3; // table
  use KS0HTD1; // table
  use KS0HTD2; // table
  use KS0HTD3; // table
  use KS0HTE1; // table
  use KS0HTE2; // table
  use KS0HTE3; // table
  use KS0HTF1; // table
  use KS0HTF2; // table
  use KS0HTF3; // table
  use KS0HTG1; // table
  use KS0HTG2; // table
  use KS0HTG3; // table
  use KS0HTH1; // table
  use KS0HTH2; // table
  use KS0HTI1 {deleteAfterUse = yes}; // table
  use KS0HTI2 {deleteAfterUse = yes}; // table
  use KS0HTI3 {deleteAfterUse = yes}; // table
  use KS0HTJ1 {deleteAfterUse = yes}; // table
  use KS0HTJ2 {deleteAfterUse = yes}; // table
  use KS0HTK1 {deleteAfterUse = yes}; // table
  use KS0HTK2 {deleteAfterUse = yes}; // table
  use KS0HTK3 {deleteAfterUse = yes}; // table
  use KS0HTL1 {deleteAfterUse = yes}; // table
  use KS0HTL2 {deleteAfterUse = yes}; // table
  use KS0HTL3 {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XDRTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use YKPTBL {deleteAfterUse = yes}; // table
  use YKSTBL {deleteAfterUse = yes}; // table
  use YPRTBL {deleteAfterUse = yes}; // table
  use YQTTBL {deleteAfterUse = yes}; // table
  use KS0HM.KS0HM002,  // forms
      KS0HM.KS0HM003, 
      KS0HM.KS0HM004, 
      KS0HM.KS0HM005, 
      KS0HM.KS0HM006, 
      KS0HM.KS0HM007, 
      KS0HM.KS0HM008, 
      KS0HM.KS0HM009, 
      KS0HM.KS0HM010, 
      KS0HM.KS0HM011, 
      KS0HM.KS0HM012, 
      KS0HM.KS0HM013, 
      KS0HM.KS0HM099,
      KS0HM.TA0PM001,
      KS0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize the working storage areas and variables.*/
    /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set KS0HM002 initial; /* M002 input/output*/
    set KS0HM003 initial; /* M003 input/output*/
    set KS0HM004 initial; /* M004 input/output*/
    set KS0HM005 initial; /* M005 input/output*/
    set KS0HM006 initial; /* M006 input/output*/
    set KS0HM007 initial; /* M007 input/output*/
    set KS0HM008 initial; /* M008 input/output*/
    set KS0HM009 initial; /* M009 input/output*/
    set KS0HM011 initial; /* M011 input/output*/
    set KS0HM010 initial; /* M010 input/output*/
    set KS0HM012 initial; /* M012 input/output*/
    set KS0HM013 initial; /* M013 input/output*/
    set KS0HM099 initial; /* M099 input/output*/
    set KS0HW01 empty; /* Working storage*/
    set KS0HW02 empty; /* Working storage*/
    set KS0HW03 empty; /* Working storage*/
    set KS0HW04 empty; /* Working storage*/
    set KS0HW05 empty; /* Working storage*/
    set KS0HW06 empty; /* Working storage*/
    set KS0HW07 empty; /* Working storage*/
    set KS0HW08 empty; /* Working storage*/
    set KS0HW09 empty; /* Working storage*/
    set KS0HW10 empty; /* Working storage*/
    set KS0HW12 empty; /* Working storage*/
    set KS0HW13 empty; /* Working storage*/
    set VHSSHD01 empty; /* Database view*/
    set VHSHDG01 empty; /* Database view*/
    set VHSCHP01 empty; /* Database view*/
    set VHSNBR01 empty; /* Database view*/
    set VKSORD01 empty; /* Database view*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA3REC empty; /* Region check pass record*/
    set TA6REC empty; /* Background job subroutine parameters*/

    /* ------------------------------------------------------------*/
    /* Indicate that the report distribution must be obtained.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Obtain distribution information*/

    /* ------------------------------------------------------------*/
    /* Indicate the number of selection lines on the menu.*/
    /* ------------------------------------------------------------*/

    KS0HW01.KS0HW-IXL = 13; /* Number of selection lines*/

    /* ------------------------------------------------------------*/
    /* Flow to obtain execution environment.*/
    /* ------------------------------------------------------------*/

    goto KS0H-00001; /* Obtain execution environment*/


    KS0H-00001: KS0H-00001();
    /* -----------------------------------------------------------------*/
    /* Flow to next process in KS0H*/
    /* -----------------------------------------------------------------*/

    goto KS0H-00002; /* Main process to converse*/


    KS0H-00002: KS0H-00002();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto KS0H-00002; /* Converse the main process*/


  end // end main
end // end KS0H

// Obtain execution environment
Function KS0H-00001()
  /* ------------------------------------------------------------*/
  /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
  /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
  /* OR PRODUCTION.*/
  /* ------------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* continue on*/
  else

    KSWREC.XXXPRCNM = "00001"; /* module identification*/
    converseLib.validationFailed(10); /* Unexpected error has occurred.*/

  end

end // end KS0H-00001

// Main process to display a map
Function KS0H-00002()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Invoke the process for each selection entered on menu.*/
  /* 2) After all selections are processed, display the menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  if (KS0HW01.KS0HW-SWX != "Y") /* EXIT not requested*/

    if (KS0HW01.KS0HM-SEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")     /* or information requested*/

      KS0H-01000(); /* Specify report distribution*/

      if (TA6REC.XURDEST == "LOCAL " /* If laser selected*/
       && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/
        TA6REC.TA6SUBSW = "N"; /* Indicate info. obtained.*/
        KS0HW01.KS0HM-SEL[1] = "S"; /* Indicate selection*/
        return; /* Return to previous process*/
      end

    end

    if (KS0HW01.KS0HM-SEL[2] == "S") /* Line 2 was selected*/
      KS0H-02000(); /* Line Review Report*/
    end

    if (KS0HW01.KS0HM-SEL[3] == "S") /* Line 3 was selected*/
      KS0H-03000(); /* Style Registration Sheet*/
    end

    if (KS0HW01.KS0HM-SEL[4] == "S") /* Line 4 was selected*/
      KS0H-04000(); /* HS Number Report*/
    end

    if (KS0HW01.KS0HM-SEL[5] == "S") /* Line 5 was selected*/
      KS0H-05000(); /* CF5523 Exception Report*/
    end

    if (KS0HW01.KS0HM-SEL[6] == "S") /* Line 6 was selected*/
      KS0H-06000(); /* Binding Ruling Report*/
    end

    if (KS0HW01.KS0HM-SEL[7] == "S") /* Line 7 was selected*/
      KS0H-07000(); /* Master Class Report*/
    end

    if (KS0HW01.KS0HM-SEL[8] == "S") /* Line 8 was selected*/
      KS0H-08000(); /* Quota Cat by Country Report*/
    end

    if (KS0HW01.KS0HM-SEL[9] == "S") /* Line 9 was selected*/
      KS0H-09000(); /* Cstms Component Mapper Refresh*/
    end

    if (KS0HW01.KS0HM-SEL[10] == "S") /* Line 10 was selected*/
      KS0H-10000(); /* Cstms Aprl NC Styles Report*/
    end

    if (KS0HW01.KS0HM-SEL[11] == "S") /* Line 11 was selected*/
      KS0H-11000(); /* Cstms Oracle download to CAMCUST*/
    end

    if (KS0HW01.KS0HM-SEL[12] == "S") /* Line 12 was selected*/
      KS0H-12000(); /* US Customs Directives report*/
    end

    if (KS0HW01.KS0HM-SEL[13] == "S") /* Line 13 was selected*/
      KS0H-13000(); /* Models without planimeter report*/
    end

  end

  KS0HW01.KS0HW-SWX = "N"; /* Reset exit requested switch*/

  KS0H-99000(); /* Report Request Menu*/


end // end KS0H-00002

// Specify output destination
Function KS0H-01000()
  /* ------------------------------------------------------------*/
  /* Obtain and/or display the report distribution for the user.*/
  /* ------------------------------------------------------------*/

  XPTA0P(); /* Report distribution information*/

  /* ------------------------------------------------------------*/
  /* If successful, indicate the selected function is completed.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.XURDEST == "LOCAL "     /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N")    /* and not authorized for bundle prt*/

    KSWREC.XXXPRCNM = "01000"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    set TA0PM001 alarm;
    return; /* Return to previous process*/

  else
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (TA6REC.TA6RTNCD == "0") /* Normal return*/

        if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

          TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
        else
          KS0HW01.KS0HM-SEL[1] = "*"; /* Indicate function completed*/

        end

        return; /* Return to previous process*/

      end

    /* ------------------------------------------------------------*/
    /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

      if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

        KS0HW01.KS0HM-SEL[1] = "C"; /* Indicate function cancelled*/

        return; /* Return to previous process*/

      end
    end

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "01000"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/


end // end KS0H-01000

// Customs Classification Report
Function KS0H-02000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-02100(); /* Format and display the map*/

  KS0H-02200(); /* Check attention identifier*/

  KS0H-02300(); /* Reset fields to normal intensity*/

  KS0H-02400(); /* Verify the data that was entered*/

  KS0H-02500(); /* Process valid input request*/


end // end KS0H-02000

// Format and display the map
Function KS0H-02100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM002 initial; /* Clear map*/
      KS0HM002.KS0HM-US-MADE = "N";
      KS0HM002.KS0HM-EXP-STYLE = "N";
      KS0HM002.KS0HM-IN-NC-STAT = "N";
      KS0HM002.KS0HM-IN-TC-STAT = "N";
      KS0HM002.KS0HM-IN-BR-STAT = "N";
      KS0HM002.KS0HM-IN-SP-STAT = "N";
      KS0HM002.KS0HM-IN-SB-STAT = "N";
      KS0HM002.KS0HM-CO-NC-STAT = "N";
      KS0HM002.KS0HM-CO-TC-STAT = "N";
      KS0HM002.KS0HM-CO-BR-STAT = "N";
      KS0HM002.KS0HM-COL-BRULE = "Y";
      KS0HM002.KS0HM-COL-BRULE-XREF = "N";
      KS0HM002.KS0HM-COL-HS-NBR = "Y";
      KS0HM002.KS0HM-COL-QUOTA = "Y";
      KS0HM002.KS0HM-COL-DUTY = "Y";
      KS0HM002.KS0HM-COL-CTRY = "Y";
      KS0HM002.KS0HM-COL-CATLG-PG = "Y";
      KS0HM002.KS0HM-COL-COMMENTS = "N";
      KS0HM002.KS0HM-SORT-STY-NBR = "Y";
      KS0HM002.KS0HM-SORT-STY-NM = "N";

      KS0HM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM002.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM002.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM002 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM002 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-02100

// Check attention identifier
Function KS0H-02200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[2] = "C"; /* Indicate selection cancelled*/

    set KS0HM002 initial; /* M002 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "02200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-02200

// Reset highlighted fields
Function KS0H-02300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM002.XURCOPY initialAttributes; /* Number copies*/
  set KS0HM002.KS0HM-GPC-CD initialAttributes; /* gpc code*/
  set KS0HM002.KS0HM-HTS-NBR initialAttributes; /* HS number*/
  set KS0HM002.KS0HM-REG-CD initialAttributes; /* market region code*/
  set KS0HM002.KS0HM-STY-NBR initialAttributes; /* season year*/
  set KS0HM002.KS0HM-COLR-CD-ID initialAttributes; /* Color code id*/
  set KS0HM002.KS0HM-DIM-CD initialAttributes; /* Dimension code*/
  set KS0HM002.KS0HM-RULE-NBR initialAttributes; /* Rule number*/
  set KS0HM002.KS0HM-TEAM-CD initialAttributes; /* team code*/
  set KS0HM002.KS0HM-SESN-CD initialAttributes; /* season code*/
  set KS0HM002.KS0HM-SESN-YR-RNG initialAttributes; /* season year*/
  set KS0HM002.KS0HM-QOTA-CAT-CD initialAttributes; /* Quota Category code*/
  set KS0HM002.KS0HM-US-MADE initialAttributes; /**/
  set KS0HM002.KS0HM-PRDCTN-YR initialAttributes; /* POID Production Year*/
  set KS0HM002.KS0HM-PRDCTN-MO initialAttributes; /* POID Production Month*/
  set KS0HM002.KS0HM-DLVR-MO initialAttributes; /* POID Deliver Month*/
  set KS0HM002.KS0HM-FCTY-CD initialAttributes; /* POID Factory Code*/
  set KS0HM002.KS0HM-PRBM-CD initialAttributes; /* team code*/
  set KS0HM002.KS0HM-EXP-STYLE initialAttributes; /* Experimental style flag*/
  set KS0HM002.KS0HM-CTRY-CD initialAttributes; /* Country code*/
  set KS0HM002.KS0HM-STY-TYP-CD[1] initialAttributes; /**/
  set KS0HM002.KS0HM-STY-TYP-CD[2] initialAttributes; /**/
  set KS0HM002.KS0HM-STY-TYP-CD[3] initialAttributes; /**/
  set KS0HM002.KS0HM-DIV-CD initialAttributes; /* Division code*/
  set KS0HM002.KS0HM-IN-NC-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-IN-TC-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-IN-BR-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-IN-SP-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-IN-SB-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-IN-BN-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-IN-OTH-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-CO-NC-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-CO-TC-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-CO-BR-STAT initialAttributes; /**/
  set KS0HM002.KS0HM-COL-BRULE initialAttributes; /**/
  set KS0HM002.KS0HM-COL-BRULE-XREF initialAttributes; /**/
  set KS0HM002.KS0HM-COL-HS-NBR initialAttributes; /**/
  set KS0HM002.KS0HM-COL-QUOTA initialAttributes; /**/
  set KS0HM002.KS0HM-COL-DUTY initialAttributes; /**/
  set KS0HM002.KS0HM-COL-CTRY initialAttributes; /**/
  set KS0HM002.KS0HM-COL-CATLG-PG initialAttributes; /**/
  set KS0HM002.KS0HM-COL-COMMENTS initialAttributes; /**/
  set KS0HM002.KS0HM-SORT-STY-NBR initialAttributes; /**/
  set KS0HM002.KS0HM-SORT-STY-NM initialAttributes; /**/
  set KS0HM002.KS0HM-RPT-TITLE initialAttributes; /**/

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-GPC-CD == "?" /* if any ? entered*/
   || KS0HM002.KS0HM-REG-CD == "?" 
   || KS0HM002.KS0HM-DIV-CD == "?" 
   || KS0HM002.KS0HM-SESN-CD == "?"
   || KS0HM002.KS0HM-QOTA-CAT-CD == "?"
   || KS0HM002.KS0HM-PRBM-CD == "?"
   || KS0HM002.KS0HM-CTRY-CD == "?"
   || KS0HM002.KS0HM-IN-OTH-STAT == "?"
   || KS0HM002.KS0HM-STY-TYP-CD[1] == "?"
   || KS0HM002.KS0HM-STY-TYP-CD[2] == "?"
   || KS0HM002.KS0HM-STY-TYP-CD[3] == "?")

    if (KS0HM002.KS0HM-GPC-CD == "?") /* if ? entered in gpc*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        KS0HM002.KS0HM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
      else
        KS0HM002.KS0HM-GPC-CD = " "; /* clear fields*/
        KS0HM002.KS0HM-GPC-DESC = " "; /* clear description*/
      end
      set KS0HM002.KS0HM-GPC-CD cursor; /* put cursor on gpc cd*/
    end

    if (KS0HM002.KS0HM-REG-CD == "?") /* if ? entered in market region*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "           MARKET REGION     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDR01(); /* perform market region window*/
      end

      /* *************************************************************/
      /* *  If the pass index is greater than zero, use the         **/
      /* *  passed table index 'XX0XWPIX' to move the market region **/
      /* *  code to the map.                                        **/
      /* *************************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-REG-CD = XDRTBL.XDR-PROD-REG-CD[XX0XWPIX];
      else
        KS0HM002.KS0HM-REG-CD = " "; /* clear fields*/
      end
      set KS0HM002.KS0HM-REG-CD cursor; /* put cursor on market region cd*/
    end

    if (KS0HM002.KS0HM-DIV-CD == "?") /* if ? entered in div*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "          DIVISION CODE      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDV02(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-DIV-CD = XDVTBL.XDVCD[XX0XWPIX];
      else
        KS0HM002.KS0HM-DIV-CD = " "; /* clear fields*/
      end
      set KS0HM002.KS0HM-DIV-CD cursor; /* put cursor on div cd*/
    end

    if (KS0HM002.KS0HM-SESN-CD == "?") /* if ? in season field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 SEASON      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSE01(); /* perform season window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the season     **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-SESN-CD = XSETBL.XSECD[XX0XWPIX];
        set KS0HM002.KS0HM-SESN-YR-RNG cursor; /* put cursor on sesn yr*/
      else
        KS0HM002.KS0HM-SESN-CD = " "; /* clear fields*/
        set KS0HM002.KS0HM-SESN-CD cursor; /* put cursor on sesn cd*/
      end
    end

    if (KS0HM002.KS0HM-QOTA-CAT-CD == "?") /* if ? entered in quota*/
      XPXX001(); /* perform pop-up-window*/
      XX0XW02.XX0XWHDR = "      QUOTA CATEGORY CODE   ";

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYQT01(); /* perform gpc window*/
      end

       /* *******************************************************/
       /* *  If the pass index is greater than zero, use the   **/
       /* *  passed table index 'xx0xwpix' to move the quota   **/
       /* *  code to the map.                                  **/
       /* *******************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-QOTA-CAT-CD = YQTTBL.YQT-QOTA-CAT-CD[XX0XWPIX];
      else
        KS0HM002.KS0HM-QOTA-CAT-CD = " "; /* clear fields*/
      end
      set KS0HM002.KS0HM-QOTA-CAT-CD cursor; /* put cursor on quota*/
    end

    if (KS0HM002.KS0HM-PRBM-CD == "?") /* if ? in problem field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              FEATURES CODE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the problem    **/
       /* *  code to the map.                                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-PRBM-CD = YKPTBL.YKP-PRBM-CD[XX0XWPIX];
      else
        KS0HM002.KS0HM-PRBM-CD = " "; /* clear fields*/
      end
      set KS0HM002.KS0HM-PRBM-CD cursor; /* cursor*/
    end

    if (KS0HM002.KS0HM-CTRY-CD == "?") /* if ? in ctry code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-CTRY-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        KS0HM002.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move desc*/
      else
        KS0HM002.KS0HM-CTRY-CD = " "; /* clear fields*/
        KS0HM002.KS0HM-CTRY-DESC = " ";
      end
      set KS0HM002.KS0HM-CTRY-CD cursor; /* Set cursor*/
    end

    if (KS0HM002.KS0HM-STY-TYP-CD[1] == "?") /* if ? in sty typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  CUSTOMS STYLE TYPE CODE   "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform sty typ code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-STY-TYP-CD[1] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0HM002.KS0HM-STY-TYP-CD[1] = " "; /* clear fields*/
      end
      set KS0HM002.KS0HM-STY-TYP-CD[1] cursor; /* Set cursor*/
    end

    if (KS0HM002.KS0HM-STY-TYP-CD[2] == "?") /* if ? in sty typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  CUSTOMS STYLE TYPE CODE   "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform sty typ code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-STY-TYP-CD[2] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0HM002.KS0HM-STY-TYP-CD[2] = " "; /* clear fields*/
      end
      set KS0HM002.KS0HM-STY-TYP-CD[2] cursor; /* Set cursor*/
    end

    if (KS0HM002.KS0HM-STY-TYP-CD[3] == "?") /* if ? in sty typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  CUSTOMS STYLE TYPE CODE   "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform sty typ code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-STY-TYP-CD[3] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0HM002.KS0HM-STY-TYP-CD[3] = " "; /* clear fields*/
      end
      set KS0HM002.KS0HM-STY-TYP-CD[3] cursor; /* Set cursor*/
    end

    if (KS0HM002.KS0HM-IN-OTH-STAT == "?") /* if ? in opt stat field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "             OPTIONAL STATUS "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPR01(); /* perform status window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the optional   **/
       /* *  status code to the map.                              **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM002.KS0HM-IN-OTH-STAT = YPRTBL.YPR-PROD-STAT-CD[XX0XWPIX];
      else
        KS0HM002.KS0HM-IN-OTH-STAT = " "; /* clear fields*/
      end
      set KS0HM002.KS0HM-IN-OTH-STAT cursor; /* cursor*/
    end

    converseLib.clearScreen();
     /* restore the original map*/

    KS0HW00.KS0HW-SWR = "N"; /* no to request for data*/
    KS0HW00.KS0HW-SWF = "N"; /* no to format map*/
    KS0HW00.KS0HW-POP-UP = "Y"; /* indicate pop-up window*/

    exit stack; /* go display map*/

  end


end // end KS0H-02300

// Verify the entered data
Function KS0H-02400()
  /* ------------------------------------------------------------*/
  /* If a required field was not entered, indicate that it is*/
  /* missing or invalid.*/
  /* ------------------------------------------------------------*/

  KS0H-02405(); /* Verify required data entered*/

  /* ------------------------------------------------------------*/
  /* Verify Sort Style Name flag*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-SORT-STY-NM == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-SORT-STY-NM == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-SORT-STY-NM cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Verify Sort Style Nbr flag*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-SORT-STY-NBR == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-SORT-STY-NBR == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-SORT-STY-NBR cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Verify that one and only one sort is chosen*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-SORT-STY-NBR == KS0HM002.KS0HM-SORT-STY-NM)
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-SORT-STY-NBR cursor, bold; /* highlight*/
    set KS0HM002.KS0HM-SORT-STY-NM bold; /* highlight*/
    converseLib.validationFailed(132); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Include Column Checks*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Feature Code Column*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-COL-COMMENTS == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-COL-COMMENTS == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-COL-COMMENTS cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Catalog Page Column*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-COL-CATLG-PG == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-COL-CATLG-PG == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-COL-CATLG-PG cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Origin Country Column*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-COL-CTRY == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-COL-CTRY == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-COL-CTRY cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Genteral Duty Rate Column*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-COL-DUTY == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-COL-DUTY == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-COL-DUTY cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Quota Category Code Column*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-COL-QUOTA == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-COL-QUOTA == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-COL-QUOTA cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* HS Number Column*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-COL-HS-NBR == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-COL-HS-NBR == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-COL-HS-NBR cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Binding Ruling Cross Reference Column*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-COL-BRULE-XREF == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-COL-BRULE-XREF == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-COL-BRULE-XREF cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Binding Ruling Column*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-COL-BRULE == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-COL-BRULE == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-COL-BRULE cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Close-out Binding Ruling Assigned*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-CO-BR-STAT == " ") /* field is spaces*/
    KS0HM002.KS0HM-CO-BR-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM002.KS0HM-CO-BR-STAT == "Y" /* field is Y or N*/
     || KS0HM002.KS0HM-CO-BR-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-CO-BR-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Close-out Tentatively Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-CO-TC-STAT == " ") /* field is spaces*/
    KS0HM002.KS0HM-CO-TC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM002.KS0HM-CO-TC-STAT == "Y" /* field is Y or N*/
     || KS0HM002.KS0HM-CO-TC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-CO-TC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Close-out Non-Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-CO-NC-STAT == " ") /* field is spaces*/
    KS0HM002.KS0HM-CO-NC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM002.KS0HM-CO-NC-STAT == "Y" /* field is Y or N*/
     || KS0HM002.KS0HM-CO-NC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-CO-NC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Verify prod status code*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-IN-OTH-STAT == " ") /* optional status spaces*/
  /* next sentence*/
  else

    if (KS0HM002.KS0HM-IN-OTH-STAT in YPRTBL.YPR-PROD-STAT-CD)
  /* next sentence                  /* status in table, then go on*/
    else /* otherwise, warning*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-IN-OTH-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(69); /* invalid status code*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Opt NO Binding Ruling*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-IN-BN-STAT == " ") /* field is spaces*/
    KS0HM002.KS0HM-IN-BN-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM002.KS0HM-IN-BN-STAT == "Y" /* field is Y or N*/
     || KS0HM002.KS0HM-IN-BN-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-IN-BN-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Sent in Binding Ruling*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-IN-SB-STAT == " ") /* field is spaces*/
    KS0HM002.KS0HM-IN-SB-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM002.KS0HM-IN-SB-STAT == "Y" /* field is Y or N*/
     || KS0HM002.KS0HM-IN-SB-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-IN-SB-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Binding Ruling Assingned*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-IN-BR-STAT == " ") /* field is spaces*/
    KS0HM002.KS0HM-IN-BR-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM002.KS0HM-IN-BR-STAT == "Y" /* field is Y or N*/
     || KS0HM002.KS0HM-IN-BR-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-IN-BR-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Tentatively Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-IN-TC-STAT == " ") /* field is spaces*/
    KS0HM002.KS0HM-IN-TC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM002.KS0HM-IN-TC-STAT == "Y" /* field is Y or N*/
     || KS0HM002.KS0HM-IN-TC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-IN-TC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Scheduled Pre-Class*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-IN-SP-STAT == " ") /* field is spaces*/
    KS0HM002.KS0HM-IN-SP-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM002.KS0HM-IN-SP-STAT == "Y" /* field is Y or N*/
     || KS0HM002.KS0HM-IN-SP-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-IN-SP-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Non-Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-IN-NC-STAT == " ") /* field is spaces*/
    KS0HM002.KS0HM-IN-NC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM002.KS0HM-IN-NC-STAT == "Y" /* field is Y or N*/
     || KS0HM002.KS0HM-IN-NC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-IN-NC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Verify the Style Type Codes*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-STY-TYP-CD[1] > " ")
    if (KS0HM002.KS0HM-STY-TYP-CD[1] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-STY-TYP-CD[1] cursor, bold; /* highlight*/
      converseLib.validationFailed(70); /* field missing or invalid*/
    end
  end

  if (KS0HM002.KS0HM-STY-TYP-CD[2] > " ")
    if (KS0HM002.KS0HM-STY-TYP-CD[2] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-STY-TYP-CD[2] cursor, bold; /* highlight*/
      converseLib.validationFailed(70); /* field missing or invalid*/
    end
  end

  if (KS0HM002.KS0HM-STY-TYP-CD[3] > " ")
    if (KS0HM002.KS0HM-STY-TYP-CD[3] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-STY-TYP-CD[3] cursor, bold; /* highlight*/
      converseLib.validationFailed(70); /* field missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Experimental Style*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-EXP-STYLE == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-EXP-STYLE == "N" 
   || KS0HM002.KS0HM-EXP-STYLE == " ")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-EXP-STYLE cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-CTRY-CD > " ") /* If origin entered*/
    if (KS0HM002.KS0HM-CTRY-CD in XCTTBL.XCTCD /* Code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      KS0HM002.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[sysVar.arrayIndex];

    else

    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

      KSWREC.XXXPRCNM = "02400"; /* Module identification*/
      set KS0HM002.KS0HM-CTRY-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(70); /* Field missing or invalid*/

    end
  end

  /* ------------------------------------------------------------*/
  /* U.S. Made*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-US-MADE == "Y" /* field is Y or N*/
   || KS0HM002.KS0HM-US-MADE == "N" 
   || KS0HM002.KS0HM-US-MADE == " ")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-US-MADE cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Check if problem code is in the table*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Errors were found*/
   || KS0HM002.KS0HM-PRBM-CD == " ")    /* or prblm is blank*/
                                  /* - skip edit*/
  else
                                  /* - skip edit*/
    if (KS0HM002.KS0HM-PRBM-CD in YKPTBL.YKP-PRBM-CD) /* in the table -*/
      KS0HW00.KS0HW-PRBM-CD = KS0HM002.KS0HM-PRBM-CD; /* save it*/

    else /* not in the table*/

      if (KS0HM002.KS0HM-PRBM-CD == KS0HW00.KS0HW-PRBM-CD) /* no change*/
      /* next sentence*/
      else /* otherwise, warning*/
        KSWREC.XXXPRCNM = "02400"; /* module id*/
        set KS0HM002.KS0HM-PRBM-CD cursor, bold; /* highlight*/
        converseLib.validationFailed(68); /* invalid problem code*/
        KS0HW00.KS0HW-PRBM-CD = KS0HM002.KS0HM-PRBM-CD; /* save it*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify PO ID month range*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-DLVR-MO == " ") /* PO ID mnth not entered*/
      /* next sentence*/
  else
    if (KS0HM002.KS0HM-DLVR-MO >= "01" /* year between 1 & 12*/
     && KS0HM002.KS0HM-DLVR-MO <= "12")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-DLVR-MO cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  if (KS0HM002.KS0HM-PRDCTN-MO == " ") /* PO ID mnth not entered*/
      /* next sentence*/
  else
    if (KS0HM002.KS0HM-PRDCTN-MO >= "01" /* year between 1 & 12*/
     && KS0HM002.KS0HM-PRDCTN-MO <= "12")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-PRDCTN-MO cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  if (KS0HM002.KS0HM-PRDCTN-YR == " "  /* PO ID year not entered*/
   && KS0HM002.KS0HM-PRDCTN-MO == "  " /* prdctn mo not entered*/
   && KS0HM002.KS0HM-DLVR-MO == "  ")  /* delivr mo not entered*/
      /* next sentence*/
  else
    if (KS0HM002.KS0HM-PRDCTN-YR >= "00" /* year between 0 & 99*/
     && KS0HM002.KS0HM-PRDCTN-YR <= "99")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-PRDCTN-YR cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the fcty code*/
  /* ------------------------------------------------------------*/

  KS0H-02420();

  /* ------------------------------------------------------------*/
  /* Verify Team Number against VCTEAM01*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-TEAM-CD == " ") /* team is spaces*/
  /* next sentence*/
  else

    KS0H-02410(); /* check if team nbr*/
                                  /* is on database*/

    if (SQLCA.VAGen_SQLCODE == +100) /* team not found*/
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-TEAM-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(20); /* team nbr invalid*/
    else /* team found*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Verify Quota Category Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-QOTA-CAT-CD == " ") /* Quota code not entered*/
    /* next sentence*/
  else
    if (KS0HM002.KS0HM-QOTA-CAT-CD in YQTTBL.YQT-QOTA-CAT-CD /* In table*/
     && YQTTBL.XXXSTAT[sysVar.arrayIndex] == "A")            /* and active*/
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-QOTA-CAT-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(58); /* Quota code invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Year*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-SESN-YR-RNG == " ") /* Season year not entered*/
  /* NEXT SENTENCE*/
  else
    if (KS0HM002.KS0HM-SESN-YR-RNG >= "00" /* year between 0 & 99*/
     && KS0HM002.KS0HM-SESN-YR-RNG <= "99")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-SESN-YR-RNG cursor, bold; /* highlight*/
      converseLib.validationFailed(26); /* team nbr invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-SESN-CD == " ") /* Season code not entered*/
  else
    if (KS0HM002.KS0HM-SESN-CD in XSETBL.XSECD) /* season code in tbl*/
  /* next sentence*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-SESN-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(27); /* season code invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Division Code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-DIV-CD > " ") /* If div-cd entered*/
    if (KS0HM002.KS0HM-DIV-CD in XDVTBL.XDVCD)
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "02400"; /* Module identification*/
      set KS0HM002.KS0HM-DIV-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(130); /* Field missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Ruling Number entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-RULE-NBR > " ") /* If rule nbr entered*/
    set VBDRUL01 empty; /* Clear record*/
    VBDRUL01.XGPCD = KS0HM002.KS0HM-GPC-CD;
    VBDRUL01.KS-RULE-NBR = KS0HM002.KS0HM-RULE-NBR;
    KS0H-02401(); /* Select VBDRUL01 row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
      KS0HW00.KS0HW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
    else
      KS0HW00.KS0HW-RULE-NBR = KS0HM002.KS0HM-RULE-NBR;
      if (KS0HM002.KS0HM-GPC-CD == "02" /* If footwear;*/
       && KS0HW00.KS0HW-RULE-BYTE[5] == " ") /* if only 4 bytes long*/
        set VBDRUL01 empty; /* Clear record*/
        VBDRUL01.XGPCD = KS0HM002.KS0HM-GPC-CD;
        VBDRUL01.KS-RULE-XREF-CD = KS0HM002.KS0HM-RULE-NBR;
        KS0H-02403(); /* Select VBDRUL01 by XREF*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
          KS0HW00.KS0HW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
        else
          KSWREC.XXXPRCNM = "02400"; /* Module identification*/
          set KS0HM002.KS0HM-RULE-NBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(32); /* Field missing or invalid*/
        end
      else
        KSWREC.XXXPRCNM = "02400"; /* Module identification*/
        set KS0HM002.KS0HM-RULE-NBR cursor, bold; /* Highlight*/
        converseLib.validationFailed(32); /* Field missing or invalid*/
      end
    end
  else
    KS0HW00.KS0HW-RULE-NBR = " ";
  end

  /* ------------------------------------------------------------*/
  /* Verify Style Number against VCPROD01*/
  /* ------------------------------------------------------------*/

  /* No verification necessary*/

  /* ------------------------------------------------------------*/
  /* Verify the HS Number entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-HTS-NBR > " ") /* If HS number entered*/
    KS0HW00.KS0HW-HTS-NUMBER = KS0HM002.KS0HM-HTS-NBR;
    KS0H-02402(); /* Verify HS format*/
  end

  /* ------------------------------------------------------------*/
  /* Verify gpc code*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-GPC-CD in XGPTBL.XGPCD) /* gpc in the table*/
  /* /* get gpc description*/
    KS0HM002.KS0HM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    if (KS0HM002.KS0HM-GPC-CD == "EQ") /* equipment*/
      KS0HM002.KS0HM-GPC-DESC = "EQUIPMENT";
    else

      KSWREC.XXXPRCNM = "02400"; /* module id*/
      set KS0HM002.KS0HM-GPC-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(147); /* field missing or invalid*/
      KS0HM002.KS0HM-GPC-DESC = " "; /* clear desc*/

    end
  end
  if (KS0HM002.KS0HM-GPC-CD != "02" && KS0HM002.KS0HM-GPC-CD != "03"
   && KS0HM002.KS0HM-GPC-CD != "EQ")
    KSWREC.XXXPRCNM = "02400"; /* module id*/
    set KS0HM002.KS0HM-GPC-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(157); /* field missing or invalid*/
    KS0HM002.KS0HM-GPC-DESC = " "; /* clear desc*/
  end
  /* -------------------------------------------------------------*/
  /* Verify the Market Region Code entered.*/
  /* -------------------------------------------------------------*/

  if (KS0HM002.KS0HM-REG-CD > " ") /* if reg-cd entered*/
    if (KS0HM002.KS0HM-REG-CD in XDRTBL.XDR-PROD-REG-CD)
        /* next sentence*/
    else
      KSWREC.XXXPRCNM = "02400"; /* module identification*/
      set KS0HM002.KS0HM-REG-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(142); /* market region invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Check if printing multiple copies from the laser printer.*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* laser selected*/
   && KS0HM002.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM002.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM002.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM002.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM002.XURCOPY = 1; /* RESET TO 1 COPY*/

    else
      if (KS0HM002.XURCOPY != 01) /* Only 1 is allowed on xerox*/

        set KS0HM002.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "02400"; /* Module identification*/
        converseLib.validationFailed(16); /* Not authorized message*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM002.XURDEST bold; /* Highlight printer*/
    set KS0HM002.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "02400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-02400

// Select unique VBDRUL01 row
Function KS0H-02401()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6070" ("S ", SQLCA, VBDRUL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "02401"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBDRUL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VBDRUL01.VBDRUL01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0H-02401

// Check HS number format
Function KS0H-02402()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999  or  9999.99.99-99*/
  /* or  9999.99.99,99*/
  /* this routine verifies that there is a ' ' or '.' in positions*/
  /* 3 and 5 and 8. If any of the other positions contain a '.', it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors found*/

    KS0HW01.KS0HW-IXM = 1; /* initialize index*/

    while (KS0HW01.KS0HW-IXM <= 14)
      if (KS0HW01.KS0HW-IXM == 5 /* these 2 positions must be blank or*/
       || KS0HW01.KS0HW-IXM == 8) /* equal '.'. if not, it's in error*/
        if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != ".")
            KSWREC.XXXPRCNM = "02402"; /* Module id*/
            set KS0HM002.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      else
        if (KS0HW01.KS0HW-IXM == 14) /* this position must be blank*/
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
            KSWREC.XXXPRCNM = "02402"; /* Module id*/
            set KS0HM002.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        else
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == "."
           || KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == "-"
           || KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == ",")
            KSWREC.XXXPRCNM = "02402"; /* Module id*/
            set KS0HM002.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      end
      KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set index up by 1*/
    end

  /* ----------------------------------------------------------------*/
  /* Check alternate format for ftwr*/
  /* ----------------------------------------------------------------*/

    if (KS0HM002.KS0HM-GPC-CD == "02"
     && converseVar.validationMsgNum == 35) /* Error found on format*/

      converseLib.validationFailed(0); /* initialize error*/
      KS0HW01.KS0HW-IXM = 1; /* initialize index*/

      while (KS0HW01.KS0HW-IXM <= 14)
        if (KS0HW01.KS0HW-IXM == 5 /* these 3 positions must be blank or*/
         || KS0HW01.KS0HW-IXM == 8 /* equal '.'. if not, it's in error*/
         || KS0HW01.KS0HW-IXM == 11)
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
            if (KS0HW01.KS0HW-IXM == 5
             || KS0HW01.KS0HW-IXM == 8)
              if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != ".")
                KSWREC.XXXPRCNM = "02402"; /* Module id*/
                set KS0HM002.KS0HM-HTS-NBR cursor, bold;
                converseLib.validationFailed(97); /* Invalid HTS nbr*/
              end
            else
              if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != "-"
               && KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != ",")
                KSWREC.XXXPRCNM = "02402"; /* Module id*/
                set KS0HM002.KS0HM-HTS-NBR cursor, bold;
                converseLib.validationFailed(97); /* Invalid HTS nbr*/
              end
            end
          end
        else
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == "."
           || KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == "-"
           || KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == ",")
            KSWREC.XXXPRCNM = "02402"; /* Module id*/
            set KS0HM002.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(97); /* Invalid HTS nbr*/
          end
        end
        KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set index up by 1*/
      end
    end

  end

end // end KS0H-02402

// Select unique VBDRUL01 by XREF
Function KS0H-02403()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO6070" ("SA", SQLCA, VBDRUL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "02401"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBDRUL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VBDRUL01.VBDRUL01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0H-02403

// Verify required data
Function KS0H-02405()
  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - GPC/STYLE  OR  GPC/SESN/YR  OR  GPC/FEATURE  OR*/
  /* GPC/PO ID OR GPC/RULING OR GPC/HS*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-GPC-CD > " ") /* If GPC entered*/
    if (KS0HM002.KS0HM-GPC-CD != "02") /* If not footwear*/
      if (KS0HM002.KS0HM-STY-NBR > " "       /* If style entered*/
       || KS0HM002.KS0HM-PRBM-CD > " "       /* or Feature code entered*/
       || KS0HM002.KS0HM-HTS-NBR > " "       /* or HS Number entered*/
       || KS0HM002.KS0HM-RULE-NBR > " "      /* or Rule Number entered*/
       || KS0HM002.KS0HM-STY-TYP-CD[1] > " " /* or Style Type entered*/
       || KS0HM002.KS0HM-STY-TYP-CD[2] > " " /* or Style Type entered*/
       || KS0HM002.KS0HM-STY-TYP-CD[3] > " ") /* or Style Type entered*/

      else
        if (KS0HM002.KS0HM-SESN-CD > " ") /* If season code entered*/
          if (KS0HM002.KS0HM-SESN-YR-RNG > 0) /* If season year entered*/

          else

            set KS0HM002.KS0HM-SESN-YR-RNG cursor, bold;
            KSWREC.XXXPRCNM = "02405"; /* Module identification*/
            converseLib.validationFailed(26); /* Data is required message*/
          end

        else
          set KS0HM002.KS0HM-STY-NBR cursor, bold;
          set KS0HM002.KS0HM-SESN-CD bold;
          set KS0HM002.KS0HM-SESN-YR-RNG bold;
          set KS0HM002.KS0HM-HTS-NBR bold;
          set KS0HM002.KS0HM-PRBM-CD bold;
          set KS0HM002.KS0HM-RULE-NBR bold;
          set KS0HM002.KS0HM-PRDCTN-YR bold;
          set KS0HM002.KS0HM-PRDCTN-MO bold;
          set KS0HM002.KS0HM-DLVR-MO bold;
          set KS0HM002.KS0HM-STY-TYP-CD[1] bold;
          set KS0HM002.KS0HM-STY-TYP-CD[2] bold;
          set KS0HM002.KS0HM-STY-TYP-CD[3] bold;
          KSWREC.XXXPRCNM = "02405"; /* Module identification*/
          converseLib.validationFailed(146); /* Data is required message*/
        end
      end
      if (KS0HM002.KS0HM-PRDCTN-YR > " "  /* PO ID year entered*/
       || KS0HM002.KS0HM-PRDCTN-MO > "00" /* PO ID mth entered*/
       || KS0HM002.KS0HM-DLVR-MO > "00"   /* PO ID deliver mth entered*/
       || KS0HM002.KS0HM-FCTY-CD > " ")   /* Factory code entered*/
        set KS0HM002.KS0HM-PRDCTN-YR cursor, bold;
        set KS0HM002.KS0HM-PRDCTN-MO bold;
        set KS0HM002.KS0HM-DLVR-MO bold;
        set KS0HM002.KS0HM-FCTY-CD bold;
        KSWREC.XXXPRCNM = "02405"; /* Module identification*/
        converseLib.validationFailed(112); /* PO ID invalid for GPC*/
      end
    else
      if (KS0HM002.KS0HM-PRDCTN-YR > " ")
        if (KS0HM002.KS0HM-PRDCTN-MO > "00")
          if (KS0HM002.KS0HM-DLVR-MO > "00")
            if (KS0HM002.KS0HM-FCTY-CD > " "
             || KS0HM002.KS0HM-CTRY-CD > " ")
            else
              set KS0HM002.KS0HM-FCTY-CD cursor, bold;
              set KS0HM002.KS0HM-CTRY-CD bold;
              KSWREC.XXXPRCNM = "02405"; /* Module identification*/
              converseLib.validationFailed(113); /* Data is required message*/
            end
          else
            set KS0HM002.KS0HM-PRDCTN-YR bold;
            set KS0HM002.KS0HM-PRDCTN-MO bold;
            set KS0HM002.KS0HM-DLVR-MO cursor, bold;
            KSWREC.XXXPRCNM = "02405"; /* Module identification*/
            converseLib.validationFailed(114); /* PO ID is missing or invalid*/
          end
        else
          set KS0HM002.KS0HM-PRDCTN-YR bold;
          set KS0HM002.KS0HM-PRDCTN-MO cursor, bold;
          set KS0HM002.KS0HM-DLVR-MO bold;
          KSWREC.XXXPRCNM = "02405"; /* Module identification*/
          converseLib.validationFailed(114); /* PO ID is missing or invalid*/
        end
      else
        if (KS0HM002.KS0HM-STY-NBR > " "       /* If style entered*/
         || KS0HM002.KS0HM-PRBM-CD > " "       /* or Feature code entered*/
         || KS0HM002.KS0HM-HTS-NBR > " "       /* or HS Number entered*/
         || KS0HM002.KS0HM-RULE-NBR > " "      /* or Rule Number entered*/
         || KS0HM002.KS0HM-STY-TYP-CD[1] > " " /* or Style Type entered*/
         || KS0HM002.KS0HM-STY-TYP-CD[2] > " " /* or Style Type entered*/
         || KS0HM002.KS0HM-STY-TYP-CD[3] > " ") /* or Style Type entered*/

        else
          if (KS0HM002.KS0HM-SESN-CD > " ") /* If season code entered*/
            if (KS0HM002.KS0HM-SESN-YR-RNG > 0) /* If season year entered*/

            else

              set KS0HM002.KS0HM-SESN-YR-RNG cursor, bold;
              KSWREC.XXXPRCNM = "02405"; /* Module identification*/
              converseLib.validationFailed(26); /* Data is required message*/
            end

          end
        end

      end


    end
  else
    set KS0HM002.KS0HM-GPC-CD cursor, bold;
    set KS0HM002.KS0HM-STY-NBR bold;
    set KS0HM002.KS0HM-SESN-CD bold;
    set KS0HM002.KS0HM-SESN-YR-RNG bold;
    set KS0HM002.KS0HM-HTS-NBR bold;
    set KS0HM002.KS0HM-PRBM-CD bold;
    set KS0HM002.KS0HM-RULE-NBR bold;
    set KS0HM002.KS0HM-PRDCTN-YR bold;
    set KS0HM002.KS0HM-PRDCTN-MO bold;
    set KS0HM002.KS0HM-DLVR-MO bold;
    set KS0HM002.KS0HM-STY-TYP-CD[1] bold;
    set KS0HM002.KS0HM-STY-TYP-CD[2] bold;
    set KS0HM002.KS0HM-STY-TYP-CD[3] bold;
    KSWREC.XXXPRCNM = "02405"; /* Module identification*/
    converseLib.validationFailed(146); /* Data is required message*/
    exit stack; /* redisplay map*/
  end


end // end KS0H-02405

// Select row for editing
Function KS0H-02410()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  set VCTEAM01 empty; /* Clear row storage area*/

  VCTEAM01.KS-TEAM-CD = KS0HM002.KS0HM-TEAM-CD; /* team nbr*/

  try
    call "IO6060" ("S ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "02410"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FOR EDITING       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.KS-TEAM-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0H-02410

// verify factory code
Function KS0H-02420()
  /* ------------------------------------------------------------*/
  /* Verify the factory code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM002.KS0HM-FCTY-CD > " ")
    if (KS0HM002.KS0HM-GPC-CD == "EQ")
      FY1REC.XGPCD = "02";
      FY1REC.FY1FCTYC = KS0HM002.KS0HM-FCTY-CD;
      KS0H-05421(); /* select factory row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
          /* next sentence*/

      else
        FY1REC.XGPCD = "03";
        FY1REC.FY1FCTYC = KS0HM002.KS0HM-FCTY-CD;
        KS0H-05421(); /* select factory row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
           /* next sentence*/
        else
          set KS0HM002.KS0HM-FCTY-CD cursor, bold;
          converseLib.validationFailed(98);
          KSWREC.XXXPRCNM = "02420";
        end
      end
    else
      FY1REC.XGPCD = KS0HM002.KS0HM-GPC-CD;
      FY1REC.FY1FCTYC = KS0HM002.KS0HM-FCTY-CD;
      KS0H-05421(); /* select factory row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
        /* next sentence*/
      else
        set KS0HM002.KS0HM-FCTY-CD cursor, bold;
        converseLib.validationFailed(98);
        KSWREC.XXXPRCNM = "02420";
      end
    end
  end

end // end KS0H-02420

// Process valid input request
Function KS0H-02500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/
    KS0H-02510(); /* format development jcl*/
  else
    if (TA6REC.XURDEST != "LOCAL ")
      KS0H-02520(); /* format production jcl*/
    else
      KS0H-02530(); /* format bundle print*/
    end
  end


end // end KS0H-02500

// Format and submit devel jcl
Function KS0H-02510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTA2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-02511(); /* Format parm 1*/

    else

      /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      if (KS0HTA2.TARTYPE[TA6INDEX] == "Q") /* 2ND PARM*/

        KS0H-02512(); /* Format parm 2*/

      else

        if (KS0HTA2.TARTYPE[TA6INDEX] == "&") /* 3rd PARM*/

          KS0H-02513(); /* Format parm 3*/

        else

      /* ---------------------------------------------------------------*/
      /* Format the EXEC Proc line depending on the sort selected*/
      /* ---------------------------------------------------------------*/

          if (KS0HTA2.TARTYPE[TA6INDEX] == "+") /* EXEC stmt*/

            if (KS0HM002.KS0HM-SORT-STY-NBR == "Y")
              TA6REC.TARJCL[TA6INDEX] = KS0HTA2.TARJCL[TA6INDEX];
            else
              TA6REC.TARJCL[TA6INDEX] = "//S0010   EXEC KS1052,";
            end

          else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = KS0HTA2.TARJCL[TA6INDEX]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = KS0HTA2.TARTYPE[TA6INDEX];
                                   /* Typ*/

          end

        end

      end

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTA2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "02510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[2] = "*"; /* Indicate function completed*/

    set KS0HM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-02510

// Format Parm 1 for jcl
Function KS0H-02511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW02 empty; /* Parameters work area*/

  KS0HW-W2-GPC-CD = KS0HM002.KS0HM-GPC-CD; /* GPC-CD*/
  KS0HW-W2-GPC-DESC = KS0HM002.KS0HM-GPC-DESC; /* GPC-DESC*/
  KS0HW-W2-DIV-CD = KS0HM002.KS0HM-DIV-CD; /* DIV-CD*/
  KS0HW00.KS0HW-HTS-NUMBER = KS0HM002.KS0HM-HTS-NBR;
  KS0HW00.KS0HW-HTS-NBR = KS0HM002.KS0HM-HTS-NBR;
  KS0HW-W2-HTS-CPTR-CD = KS0HW00.KS0HW-HTS-CPTR-CD;
  KS0HW-W2-HTS-HDG-CD = KS0HW00.KS0HW-HTS-HDG-CD;
  KS0HW-W2-HTS-1ST-SHDG-CD = KS0HW00.KS0HW-HTS-1ST-SHDG-CD;
  KS0HW-W2-HTS-2ND-SHDG-CD1 = KS0HW00.KS0HW-HTS-2ND-SHDG-CD1;
  if (KS0HW00.KS0HW-HTS-BYTE[11] != "-"
   && KS0HW00.KS0HW-HTS-BYTE[11] != ",")
    KS0HW-W2-HTS-2ND-SHDG-CD2 = " ";
    KS0HW-W2-HTS-STAT-CD = KS0HW00.KS0HW-HTS-STAT-CD;
    KS0HW-W2-HTS-RNG-FL = "N";
  else
    KS0HW02.KS0HW-W2-HTS-2ND-SHDG-CD21 = KS0HW00.KS0HW-HTS-BYTE[12];
    KS0HW02.KS0HW-W2-HTS-2ND-SHDG-CD22 = KS0HW00.KS0HW-HTS-BYTE[13];
    KS0HW-W2-HTS-STAT-CD = " ";
    if (KS0HW00.KS0HW-HTS-BYTE[11] == "-")
      KS0HW-W2-HTS-RNG-FL = "Y";
    else
      if (KS0HW00.KS0HW-HTS-BYTE[11] == ",")
        KS0HW-W2-HTS-RNG-FL = "N";
      end
    end
  end
  KS0HW-W2-STY-NBR = KS0HM002.KS0HM-STY-NBR;
  KS0HW-W2-COLR-CD = KS0HM002.KS0HM-COLR-CD-ID;
  KS0HW-W2-DIM-CD = KS0HM002.KS0HM-DIM-CD;
  KS0HW-W2-RULE-NBR = KS0HW00.KS0HW-RULE-NBR;
  KS0HW-W2-SESN-CD = KS0HM002.KS0HM-SESN-CD; /* SEASON*/
  KS0HW00.KS0HW-YEAR-YY = KS0HM002.KS0HM-SESN-YR-RNG;

  if (KS0HM002.KS0HM-SESN-YR-RNG == " ") /* If season year not entered*/
    KS0HW00.KS0HW-YEAR-CC = 00;
  else
    if (KS0HM002.KS0HM-SESN-YR-RNG > "49")
      KS0HW00.KS0HW-YEAR-CC = 19;
    else
      KS0HW00.KS0HW-YEAR-CC = 20;
    end
  end

  KS0HW-W2-SESN-YR-RNG = KS0HW00.KS0HW-YEAR;
  KS0HW-W2-TEAM-CD = KS0HM002.KS0HM-TEAM-CD;
  KS0HW-W2-PRDCTN-YR = KS0HM002.KS0HM-PRDCTN-YR;
  KS0HW-W2-PRDCTN-MO = KS0HM002.KS0HM-PRDCTN-MO;
  KS0HW-W2-DLVR-MO = KS0HM002.KS0HM-DLVR-MO;
  KS0HW-W2-FCTY-CD = KS0HM002.KS0HM-FCTY-CD;
  KS0HW-W2-PROB-CD = KS0HM002.KS0HM-PRBM-CD;
  KS0HW-W2-US-MADE = KS0HM002.KS0HM-US-MADE;

  TA6REC.TARJCL[TA6INDEX] = KS0HW-W2-PARM-REC-1; /* Parameters*/


end // end KS0H-02511

// Format Parm 2 for jcl
Function KS0H-02512()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW02 empty; /* Parameters work area*/

  KS0HW-W2-CTRY-CD = KS0HM002.KS0HM-CTRY-CD;
  KS0HW-W2-EXP-STYLE = KS0HM002.KS0HM-EXP-STYLE;

  if (KS0HM002.KS0HM-IN-NC-STAT == "Y")
    KS0HW-W2-IN-NC-STAT = "NC";
  else
    KS0HW-W2-IN-NC-STAT = "  ";
  end

  if (KS0HM002.KS0HM-IN-SP-STAT == "Y")
    KS0HW-W2-IN-SP-STAT = "SP";
  else
    KS0HW-W2-IN-SP-STAT = "  ";
  end

  if (KS0HM002.KS0HM-IN-TC-STAT == "Y")
    KS0HW-W2-IN-TC-STAT = "TC";
  else
    KS0HW-W2-IN-TC-STAT = "  ";
  end

  if (KS0HM002.KS0HM-IN-BR-STAT == "Y")
    KS0HW-W2-IN-BR-STAT = "BR";
  else
    KS0HW-W2-IN-BR-STAT = "  ";
  end

  if (KS0HM002.KS0HM-IN-SB-STAT == "Y")
    KS0HW-W2-IN-SB-STAT = "SB";
  else
    KS0HW-W2-IN-SB-STAT = "  ";
  end

  if (KS0HM002.KS0HM-IN-BN-STAT == "Y")
    KS0HW-W2-IN-BN-STAT = "BN";
  else
    KS0HW-W2-IN-BN-STAT = "BN";
  end

  KS0HW-W2-IN-OTH-STAT = KS0HM002.KS0HM-IN-OTH-STAT;
  KS0HW-W2-CO-NC-STAT = KS0HM002.KS0HM-CO-NC-STAT;
  KS0HW-W2-CO-TC-STAT = KS0HM002.KS0HM-CO-TC-STAT;
  KS0HW-W2-CO-BR-STAT = KS0HM002.KS0HM-CO-BR-STAT;

  KS0HW-W2-COL-BRULE = KS0HM002.KS0HM-COL-BRULE;
  KS0HW-W2-COL-BRULE-XREF = KS0HM002.KS0HM-COL-BRULE-XREF;
  KS0HW-W2-COL-HS-NBR = KS0HM002.KS0HM-COL-HS-NBR;
  KS0HW-W2-COL-QUOTA = KS0HM002.KS0HM-COL-QUOTA;
  KS0HW-W2-COL-DUTY = KS0HM002.KS0HM-COL-DUTY;
  KS0HW-W2-COL-CTRY = KS0HM002.KS0HM-COL-CTRY;
  KS0HW-W2-CATLG-PG = KS0HM002.KS0HM-COL-CATLG-PG;
  KS0HW-W2-COMMENTS = KS0HM002.KS0HM-COL-COMMENTS;

  KS0HW-W2-RPT-TITLE = KS0HM002.KS0HM-RPT-TITLE;

  TA6REC.TARJCL[TA6INDEX] = KS0HW02.KS0HW-W2-PARM-REC-2;


end // end KS0H-02512

// Format Parm 3 for jcl
Function KS0H-02513()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW02 empty; /* Parameters work area*/

  KS0HW-W2-STY-TYP-CD1 = KS0HM002.KS0HM-STY-TYP-CD[1];
  KS0HW-W2-STY-TYP-CD2 = KS0HM002.KS0HM-STY-TYP-CD[2];
  KS0HW-W2-STY-TYP-CD3 = KS0HM002.KS0HM-STY-TYP-CD[3];

  KS0HW-W2-SORT-STY-NBR = KS0HM002.KS0HM-SORT-STY-NBR;
  KS0HW-W2-SORT-STY-NM = KS0HM002.KS0HM-SORT-STY-NM;

  KS0HW-W2-USERID = COMMAREA.CAUSERID;
  /* ----------------------------------------------------------------*/
  /* Move number of copies into parameters if local printer selected*/
  /* and in production.*/
  /* ----------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* If local printer selected*/
   && TA3REC.TA3RGNID == "03")   /* In PRODUCTION region*/

    KS0HW02.KS0HW-W2-LOCAL-COPIES = KS0HM002.XURCOPY;
  else

    KS0HW02.KS0HW-W2-LOCAL-COPIES = 00;
  end

  KS0HW-W2-PROD-REG-CD = KS0HM002.KS0HM-REG-CD;
  KS0HW-W2-QOTA-CAT-CD = KS0HM002.KS0HM-QOTA-CAT-CD;

  TA6REC.TARJCL[TA6INDEX] = KS0HW02.KS0HW-W2-PARM-REC-3;


end // end KS0H-02513

// Format and submit prod jcl
Function KS0H-02520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTA1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-02511(); /* Format parm 1*/

    else

      /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      if (KS0HTA1.TARTYPE[TA6INDEX] == "Q") /* 2ND PARM*/

        KS0H-02512(); /* Format parm 2*/

      else

        if (KS0HTA1.TARTYPE[TA6INDEX] == "&") /* 3RD PARM*/

          KS0H-02513(); /* Format parm 3*/

        else

      /* ---------------------------------------------------------------*/
      /* Format the EXEC Proc line depending on the sort selected*/
      /* ---------------------------------------------------------------*/

          if (KS0HTA1.TARTYPE[TA6INDEX] == "+") /* EXEC stmt*/

            if (KS0HM002.KS0HM-SORT-STY-NBR == "Y")
              TA6REC.TARJCL[TA6INDEX] = KS0HTA1.TARJCL[TA6INDEX];
            else
              TA6REC.TARJCL[TA6INDEX] = "//S0010   EXEC KS1052";
            end

          else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = KS0HTA1.TARJCL[TA6INDEX]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = KS0HTA1.TARTYPE[TA6INDEX];
                                   /* Typ*/

          end

        end

      end

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTA1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "02520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[2] = "*"; /* Indicate function completed*/

    set KS0HM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-02520

// Format and submit bundle jcl
Function KS0H-02530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTA3.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-02511(); /* Format parm 1*/

    else

      /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      if (KS0HTA3.TARTYPE[TA6INDEX] == "Q") /* 2ND PARM*/

        KS0H-02512(); /* Format parm 2*/

      else

        if (KS0HTA3.TARTYPE[TA6INDEX] == "&") /* 3RD PARM*/

          KS0H-02513(); /* Format parm 3*/

        else

      /* ---------------------------------------------------------------*/
      /* Format the EXEC Proc line depending on the sort selected*/
      /* ---------------------------------------------------------------*/

          if (KS0HTA3.TARTYPE[TA6INDEX] == "+") /* EXEC stmt*/

            if (KS0HM002.KS0HM-SORT-STY-NBR == "Y")
              TA6REC.TARJCL[TA6INDEX] = KS0HTA3.TARJCL[TA6INDEX];
            else
              TA6REC.TARJCL[TA6INDEX] = "//S0010   EXEC KS1052";
            end

          else

      /* ------------------------------------------------------------*/
      /* Format the forms code based on gpc.*/
      /* ------------------------------------------------------------*/

            if (KS0HTA3.TARTYPE[TA6INDEX] == "*") /* Forms Code Line*/
              TA6REC.TARTYPE[TA6INDEX] = " "; /* Typ*/
              if (KS0HM002.KS0HM-GPC-CD == "02") /* If ftwr*/

                TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT KS09 DEST=(RMT000),COPIES=1,FORMS=KS09"; /* JCL*/

              else

                TA6REC.TARJCL[TA6INDEX] = KS0HTA3.TARJCL[TA6INDEX];
                                   /* JCL*/

              end

            else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = KS0HTA3.TARJCL[TA6INDEX];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = KS0HTA3.TARTYPE[TA6INDEX];
                                   /* Typ*/

            end

          end

        end

      end

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTA3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "02530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[2] = "*"; /* Indicate function completed*/

    set KS0HM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-02530

// Customs style reg. sheets
Function KS0H-03000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-03100(); /* Format and display the map*/

  KS0H-03200(); /* Check attention identifier*/

  KS0H-03300(); /* Reset fields to normal intensity*/

  KS0H-03400(); /* Verify the data that was entered*/

  KS0H-03500(); /* Process valid input request*/


end // end KS0H-03000

// Format and display the map
Function KS0H-03100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N") /* If no pop-up window*/
      set KS0HM003 initial; /* Clear map*/
      KS0HM003.KS0HM-GPC-CD = "03";
      KS0HM003.KS0HM-US-MADE = "N";
      KS0HM003.KS0HM-EXP-STYLE = "N";
      KS0HM003.KS0HM-IN-NC-STAT = "N";
      KS0HM003.KS0HM-IN-TC-STAT = "N";
      KS0HM003.KS0HM-IN-BR-STAT = "N";
      KS0HM003.KS0HM-IN-SP-STAT = "N";
      KS0HM003.KS0HM-IN-SB-STAT = "N";
      KS0HM003.KS0HM-CO-NC-STAT = "N";
      KS0HM003.KS0HM-CO-TC-STAT = "N";
      KS0HM003.KS0HM-CO-BR-STAT = "N";
      KS0HM003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM003.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM003.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM003.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM003 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM003 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-03100

// Check attention identifier
Function KS0H-03200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[3] = "C"; /* Indicate selection cancelled*/

    set KS0HM003 initial; /* m003 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "03200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-03200

// Reset highlighted fields
Function KS0H-03300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM003.XURCOPY initialAttributes; /* Number Copies*/
  set KS0HM003.KS0HM-GPC-CD initialAttributes; /* gpc code*/
  set KS0HM003.KS0HM-REG-CD initialAttributes; /* market region code*/
  set KS0HM003.KS0HM-DIV-CD initialAttributes; /* div code*/
  set KS0HM003.KS0HM-HTS-NBR initialAttributes; /* HS number*/
  set KS0HM003.KS0HM-STY-NBR initialAttributes; /* style number*/
  set KS0HM003.KS0HM-RULE-NBR initialAttributes; /* Rule number*/
  set KS0HM003.KS0HM-SESN-CD initialAttributes; /* season code*/
  set KS0HM003.KS0HM-SESN-YR-RNG initialAttributes; /* season code*/
  set KS0HM003.KS0HM-QOTA-CAT-CD initialAttributes; /* Quota category code*/
  set KS0HM003.KS0HM-TEAM-CD initialAttributes; /* team code*/
  set KS0HM003.KS0HM-PRBM-CD initialAttributes; /* Feature code*/
  set KS0HM003.KS0HM-CTRY-CD initialAttributes; /* Country code*/
  set KS0HM003.KS0HM-IN-NC-STAT initialAttributes;
  set KS0HM003.KS0HM-IN-SP-STAT initialAttributes;
  set KS0HM003.KS0HM-IN-TC-STAT initialAttributes;
  set KS0HM003.KS0HM-IN-BR-STAT initialAttributes;
  set KS0HM003.KS0HM-IN-SB-STAT initialAttributes;
  set KS0HM003.KS0HM-IN-BN-STAT initialAttributes;
  set KS0HM003.KS0HM-IN-OTH-STAT initialAttributes;
  set KS0HM003.KS0HM-STY-TYP-CD[1] initialAttributes;
  set KS0HM003.KS0HM-STY-TYP-CD[2] initialAttributes;
  set KS0HM003.KS0HM-STY-TYP-CD[3] initialAttributes;

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-GPC-CD == "?" /* if any ? entered*/
   || KS0HM003.KS0HM-REG-CD == "?" 
   || KS0HM003.KS0HM-DIV-CD == "?" 
   || KS0HM003.KS0HM-SESN-CD == "?"
   || KS0HM003.KS0HM-QOTA-CAT-CD == "?"
   || KS0HM003.KS0HM-PRBM-CD == "?"
   || KS0HM003.KS0HM-CTRY-CD == "?"
   || KS0HM003.KS0HM-IN-OTH-STAT == "?"
   || KS0HM003.KS0HM-STY-TYP-CD[1] == "?"
   || KS0HM003.KS0HM-STY-TYP-CD[2] == "?"
   || KS0HM003.KS0HM-STY-TYP-CD[3] == "?")

    if (KS0HM003.KS0HM-GPC-CD == "?") /* if ? entered in gpc*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        KS0HM003.KS0HM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
        set KS0HM003.KS0HM-HTS-NBR cursor; /* put cursor on HS number*/
      else
        KS0HM003.KS0HM-GPC-CD = " "; /* clear fields*/
        KS0HM003.KS0HM-GPC-DESC = " "; /* clear description*/
        set KS0HM003.KS0HM-GPC-CD cursor; /* put cursor on gpc cd*/
      end
    end

    if (KS0HM003.KS0HM-REG-CD == "?") /* if ? entered in market region*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "           MARKET REGION     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDR01(); /* perform market region window*/
      end

      /* *************************************************************/
      /* *  If the pass index is greater than zero, use the         **/
      /* *  passed table index 'XX0XWPIX' to move the market region **/
      /* *  code to the map.                                        **/
      /* *************************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-REG-CD = XDRTBL.XDR-PROD-REG-CD[XX0XWPIX];
      else
        KS0HM003.KS0HM-REG-CD = " "; /* clear fields*/
      end
      set KS0HM003.KS0HM-REG-CD cursor; /* put cursor on market region cd*/
    end

    if (KS0HM003.KS0HM-DIV-CD == "?") /* if ? entered in div*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "         DIVISION CODE       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDV02(); /* perform div window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-DIV-CD = XDVTBL.XDVCD[XX0XWPIX];
        set KS0HM003.KS0HM-SESN-CD cursor; /* put cursor on sesn cd*/
      else
        KS0HM003.KS0HM-DIV-CD = " "; /* clear fields*/
        set KS0HM003.KS0HM-DIV-CD cursor; /* put cursor on div cd*/
      end
    end

    if (KS0HM003.KS0HM-SESN-CD == "?") /* if ? in season field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 SEASON      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSE01(); /* perform season window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the season     **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-SESN-CD = XSETBL.XSECD[XX0XWPIX];
        set KS0HM003.KS0HM-SESN-YR-RNG cursor; /* put cursor on sesn yr*/
      else
        KS0HM003.KS0HM-SESN-CD = " "; /* clear fields*/
        set KS0HM003.KS0HM-SESN-CD cursor; /* put cursor on sesn cd*/
      end
    end

    if (KS0HM003.KS0HM-QOTA-CAT-CD == "?") /* if ? entered in quota*/
      XPXX001(); /* perform pop-up-window*/
      XX0XW02.XX0XWHDR = "      QUOTA CATEGORY CODE   ";

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYQT01(); /* perform gpc window*/
      end

       /* *******************************************************/
       /* *  If the pass index is greater than zero, use the   **/
       /* *  passed table index 'xx0xwpix' to move the quota   **/
       /* *  code to the map.                                  **/
       /* *******************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-QOTA-CAT-CD = YQTTBL.YQT-QOTA-CAT-CD[XX0XWPIX];
        set KS0HM003.KS0HM-TEAM-CD cursor; /* put cursor on team code*/
      else
        KS0HM003.KS0HM-QOTA-CAT-CD = " "; /* clear fields*/
        set KS0HM003.KS0HM-QOTA-CAT-CD cursor; /* put cursor on quota*/
      end
    end

    if (KS0HM003.KS0HM-PRBM-CD == "?") /* if ? in problem field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              FEATURES CODE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the problem    **/
       /* *  code to the map.                                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-PRBM-CD = YKPTBL.YKP-PRBM-CD[XX0XWPIX];
        set KS0HM003.KS0HM-US-MADE cursor; /* cursor*/
      else
        KS0HM003.KS0HM-PRBM-CD = " "; /* clear fields*/
        set KS0HM003.KS0HM-PRBM-CD cursor; /* cursor*/
      end
    end

    if (KS0HM003.KS0HM-CTRY-CD == "?") /* if ? in ctry code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-CTRY-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        KS0HM003.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move desc*/
        set KS0HM003.KS0HM-EXP-STYLE cursor; /* Set cursor*/
      else
        KS0HM003.KS0HM-CTRY-CD = " "; /* clear fields*/
        KS0HM003.KS0HM-CTRY-DESC = " ";
        set KS0HM003.KS0HM-CTRY-CD cursor; /* Set cursor*/
      end
    end

    if (KS0HM003.KS0HM-STY-TYP-CD[1] == "?") /* if ? in stylt typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "   CUSTOMS STYLE TYPE CODE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform style type window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-STY-TYP-CD[1] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0HM003.KS0HM-STY-TYP-CD[1] = " "; /* clear fields*/
      end
      set KS0HM003.KS0HM-STY-TYP-CD[1] cursor; /* Set cursor*/
    end

    if (KS0HM003.KS0HM-STY-TYP-CD[2] == "?") /* if ? in stylt typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "   CUSTOMS STYLE TYPE CODE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform style type window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-STY-TYP-CD[2] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0HM003.KS0HM-STY-TYP-CD[2] = " "; /* clear fields*/
      end
      set KS0HM003.KS0HM-STY-TYP-CD[2] cursor; /* Set cursor*/
    end

    if (KS0HM003.KS0HM-STY-TYP-CD[3] == "?") /* if ? in stylt typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "   CUSTOMS STYLE TYPE CODE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform style type window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-STY-TYP-CD[3] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0HM003.KS0HM-STY-TYP-CD[3] = " "; /* clear fields*/
      end
      set KS0HM003.KS0HM-STY-TYP-CD[3] cursor; /* Set cursor*/
    end

    if (KS0HM003.KS0HM-IN-OTH-STAT == "?") /* if ? in opt stat field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "             OPTIONAL STATUS "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPR01(); /* perform status window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the optional   **/
       /* *  status code to the map.                              **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM003.KS0HM-IN-OTH-STAT = YPRTBL.YPR-PROD-STAT-CD[XX0XWPIX];
        set KS0HM003.KS0HM-IN-OTH-STAT cursor; /* cursor*/
      else
        KS0HM003.KS0HM-IN-OTH-STAT = " "; /* clear fields*/
        set KS0HM003.KS0HM-IN-OTH-STAT cursor; /* cursor*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    KS0HW00.KS0HW-SWR = "N"; /* no to request for data*/
    KS0HW00.KS0HW-SWF = "N"; /* no to format map*/
    KS0HW00.KS0HW-POP-UP = "Y"; /* indicate pop-up window*/

    exit stack; /* go display map*/

  end


end // end KS0H-03300

// Verify the entered data
Function KS0H-03400()
  /* ------------------------------------------------------------*/
  /* If a required field was not entered, indicate that it is*/
  /* missing or invalid.*/
  /* ------------------------------------------------------------*/

  KS0H-03405();

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

  /* ------------------------------------------------------------*/
  /* U.S. Made*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-US-MADE == "Y" /* field is Y or N*/
   || KS0HM003.KS0HM-US-MADE == "N" 
   || KS0HM003.KS0HM-US-MADE == " ")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "03400"; /* module id*/
    set KS0HM003.KS0HM-US-MADE cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Close-out Binding Ruling Assigned*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-CO-BR-STAT == " ") /* field is spaces*/
    KS0HM003.KS0HM-CO-BR-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM003.KS0HM-CO-BR-STAT == "Y" /* field is Y or N*/
     || KS0HM003.KS0HM-CO-BR-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-CO-BR-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Close-out Tentatively Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-CO-TC-STAT == " ") /* field is spaces*/
    KS0HM003.KS0HM-CO-TC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM003.KS0HM-CO-TC-STAT == "Y" /* field is Y or N*/
     || KS0HM003.KS0HM-CO-TC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-CO-TC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Close-out Non-Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-CO-NC-STAT == " ") /* field is spaces*/
    KS0HM003.KS0HM-CO-NC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM003.KS0HM-CO-NC-STAT == "Y" /* field is Y or N*/
     || KS0HM003.KS0HM-CO-NC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-CO-NC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* verify prod status code*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-IN-OTH-STAT == " ") /* optional status spaces*/
  /* next sentence*/
  else

    if (KS0HM003.KS0HM-IN-OTH-STAT in YPRTBL.YPR-PROD-STAT-CD)
  /* next sentence                  /* status in table, then go on*/
    else /* otherwise, warning*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-IN-OTH-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(69); /* invalid status code*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Opt NO Binding Ruling*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-IN-BN-STAT == " ") /* field is spaces*/
    KS0HM003.KS0HM-IN-BN-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM003.KS0HM-IN-BN-STAT == "Y" /* field is Y or N*/
     || KS0HM003.KS0HM-IN-BN-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-IN-BN-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Sent in Binding Ruling*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-IN-SB-STAT == " ") /* field is spaces*/
    KS0HM003.KS0HM-IN-SB-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM003.KS0HM-IN-SB-STAT == "Y" /* field is Y or N*/
     || KS0HM003.KS0HM-IN-SB-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-IN-SB-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Binding Ruling Assingned*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-IN-BR-STAT == " ") /* field is spaces*/
    KS0HM003.KS0HM-IN-BR-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM003.KS0HM-IN-BR-STAT == "Y" /* field is Y or N*/
     || KS0HM003.KS0HM-IN-BR-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-IN-BR-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Tentatively Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-IN-TC-STAT == " ") /* field is spaces*/
    KS0HM003.KS0HM-IN-TC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM003.KS0HM-IN-TC-STAT == "Y" /* field is Y or N*/
     || KS0HM003.KS0HM-IN-TC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-IN-TC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Scheduled Pre-Class*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-IN-SP-STAT == " ") /* field is spaces*/
    KS0HM003.KS0HM-IN-SP-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM003.KS0HM-IN-SP-STAT == "Y" /* field is Y or N*/
     || KS0HM003.KS0HM-IN-SP-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-IN-SP-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Non-Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-IN-NC-STAT == " ") /* field is spaces*/
    KS0HM003.KS0HM-IN-NC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM003.KS0HM-IN-NC-STAT == "Y" /* field is Y or N*/
     || KS0HM003.KS0HM-IN-NC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-IN-NC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-CTRY-CD > " ") /* If origin entered*/
    if (KS0HM003.KS0HM-CTRY-CD in XCTTBL.XCTCD /* Code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      KS0HM003.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[sysVar.arrayIndex];

    else

    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

      KSWREC.XXXPRCNM = "03400"; /* Module identification*/
      set KS0HM003.KS0HM-CTRY-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(70); /* Field missing or invalid*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Style Type Codes*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-STY-TYP-CD[1] > " ")
    if (KS0HM003.KS0HM-STY-TYP-CD[1] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-STY-TYP-CD[1] cursor, bold; /* highlight*/
      converseLib.validationFailed(70); /* field missing or invalid*/
    end
  end

  if (KS0HM003.KS0HM-STY-TYP-CD[2] > " ")
    if (KS0HM003.KS0HM-STY-TYP-CD[2] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-STY-TYP-CD[2] cursor, bold; /* highlight*/
      converseLib.validationFailed(70); /* field missing or invalid*/
    end
  end

  if (KS0HM003.KS0HM-STY-TYP-CD[3] > " ")
    if (KS0HM003.KS0HM-STY-TYP-CD[3] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-STY-TYP-CD[3] cursor, bold; /* highlight*/
      converseLib.validationFailed(70); /* field missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Team Number against VCTEAM01*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-TEAM-CD == " ") /* team is spaces*/
  /* next sentence*/
  else

    KS0H-03410(); /* check if team nbr*/
                                  /* is on database*/

    if (SQLCA.VAGen_SQLCODE == +100) /* team not found*/
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-TEAM-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(20); /* team nbr invalid*/
    else /* team found*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Verify Style Number against VCPROD01*/
  /* ------------------------------------------------------------*/

  /* No verification necessary*/

  /* ------------------------------------------------------------*/
  /* Verify Season Year*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-SESN-YR-RNG != " ") /* Season year entered*/
    if (KS0HM003.KS0HM-SESN-YR-RNG >= "00" /* year between 0 & 99*/
     && KS0HM003.KS0HM-SESN-YR-RNG <= "99")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-SESN-YR-RNG cursor, bold; /* highlight*/
      converseLib.validationFailed(26); /* team nbr invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-SESN-CD != " ") /* Season code entered*/
    if (KS0HM003.KS0HM-SESN-CD in XSETBL.XSECD) /* season code in tbl*/
  /* next sentence*/
    else
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-SESN-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(27); /* season code invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Quota Category Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-QOTA-CAT-CD == " ") /* Quota code not entered*/
    /* next sentence*/
  else
    if (KS0HM003.KS0HM-QOTA-CAT-CD in YQTTBL.YQT-QOTA-CAT-CD /* In table*/
     && YQTTBL.XXXSTAT[sysVar.arrayIndex] == "A")            /* and active*/
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-QOTA-CAT-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(58); /* Quota code invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Division Code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-DIV-CD > " ") /* If div-cd entered*/
    if (KS0HM003.KS0HM-DIV-CD in XDVTBL.XDVCD)
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-DIV-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(130); /* Div code invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Ruling Number entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-RULE-NBR > " ") /* If rule nbr entered*/
    set VBDRUL01 empty; /* Clear record*/
    VBDRUL01.XGPCD = KS0HM003.KS0HM-GPC-CD;
    VBDRUL01.KS-RULE-NBR = KS0HM003.KS0HM-RULE-NBR;
    KS0H-02401(); /* Select VBDRUL01 row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
   /* next sentence*/
    else
      KSWREC.XXXPRCNM = "03400"; /* Module identification*/
      set KS0HM003.KS0HM-RULE-NBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Field missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the HS Number entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-HTS-NBR > " ") /* If HS number entered*/
    KS0HW00.KS0HW-HTS-NUMBER = KS0HM003.KS0HM-HTS-NBR;
    KS0H-02402(); /* Verify HS format*/
    if (converseVar.validationMsgNum == 35 /* if an HS Format error*/
     || converseVar.validationMsgNum == 97) /* was found*/
      set KS0HM003.KS0HM-HTS-NBR cursor, bold;
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Market Region Code entered*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-REG-CD > " ") /* if reg-cd entered*/
    if (KS0HM003.KS0HM-REG-CD in XDRTBL.XDR-PROD-REG-CD
    ) /* next sentence*/
    else
      KSWREC.XXXPRCNM = "03400"; /* module identification*/
      set KS0HM003.KS0HM-REG-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(142); /* market region invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify gpc code*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-GPC-CD in XGPTBL.XGPCD) /* gpc in the table*/
  /* /* get gpc description*/
    KS0HM003.KS0HM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    if (KS0HM003.KS0HM-GPC-CD == "EQ") /* equipment*/
      KS0HM003.KS0HM-GPC-DESC = "EQUIPMENT";
    else
      KSWREC.XXXPRCNM = "03400"; /* module id*/
      set KS0HM003.KS0HM-GPC-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(147); /* field missing or invalid*/
      KS0HM003.KS0HM-GPC-DESC = " "; /* clear desc*/
    end
  end
  if (KS0HM003.KS0HM-GPC-CD != "03" && KS0HM003.KS0HM-GPC-CD != "EQ")
    KSWREC.XXXPRCNM = "03400"; /* module id*/
    set KS0HM003.KS0HM-GPC-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(155); /* field missing or invalid*/
    KS0HM003.KS0HM-GPC-DESC = " "; /* clear desc*/
  end
  /* ------------------------------------------------------------*/
  /* Check if problem code is on the table*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Errors were found*/
   || KS0HM003.KS0HM-PRBM-CD == " ")    /* or prblm is blank*/
                                  /* - skip edit*/
  else
                                  /* - skip edit*/
    if (KS0HM003.KS0HM-PRBM-CD in YKPTBL.YKP-PRBM-CD) /* in the table -*/
      KS0HW00.KS0HW-PRBM-CD = KS0HM003.KS0HM-PRBM-CD; /* save it*/

    else /* not in the table*/

      if (KS0HM003.KS0HM-PRBM-CD == KS0HW00.KS0HW-PRBM-CD) /* no change*/
      /* next sentence*/
      else /* otherwise, warning*/
        KSWREC.XXXPRCNM = "03400"; /* module id*/
        set KS0HM003.KS0HM-PRBM-CD cursor, bold; /* highlight*/
        converseLib.validationFailed(68); /* invalid problem code*/
        KS0HW00.KS0HW-PRBM-CD = KS0HM003.KS0HM-PRBM-CD; /* save it*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Check if printing multiple copies from the laser printer.*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && KS0HM003.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM003.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM003.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM003.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM003.XURCOPY = 1; /* RESET COPIES TO 1*/

    else
      if (KS0HM003.XURCOPY != 01) /* Only 1 copy is allowed on xerox*/

        set KS0HM003.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "03400"; /* Module identification*/
        converseLib.validationFailed(16); /* Num copies invalid*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM003.XURDEST bold; /* Highlight printer*/
    set KS0HM003.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "03400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-03400

// Verify required data
Function KS0H-03405()
  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - GPC/STYLE  OR  GPC/SESN/YR  OR  GPC/FEATURE  OR*/
  /* GPC/RULING OR GPC/HS*/
  /* ------------------------------------------------------------*/

  if (KS0HM003.KS0HM-GPC-CD > " ") /* If GPC entered*/
    if (KS0HM003.KS0HM-STY-NBR > " "       /* If style entered*/
     || KS0HM003.KS0HM-PRBM-CD > " "       /* or Feature code entered*/
     || KS0HM003.KS0HM-HTS-NBR > " "       /* or HS Number entered*/
     || KS0HM003.KS0HM-RULE-NBR > " "      /* or Rule Number entered*/
     || KS0HM003.KS0HM-STY-TYP-CD[1] > " " /* or Style Type entered*/
     || KS0HM003.KS0HM-STY-TYP-CD[2] > " " /* or Style Type entered*/
     || KS0HM003.KS0HM-STY-TYP-CD[3] > " ") /* or Style Type entered*/

    else
      if (KS0HM003.KS0HM-SESN-CD > " ") /* If season code entered*/
        if (KS0HM003.KS0HM-SESN-YR-RNG > 0) /* If season year entered*/

        else

          set KS0HM003.KS0HM-SESN-YR-RNG cursor, bold;
          KSWREC.XXXPRCNM = "03405"; /* Module identification*/
          converseLib.validationFailed(26); /* Data is required message*/
        end

      else
        set KS0HM003.KS0HM-STY-NBR cursor, bold;
        set KS0HM003.KS0HM-SESN-CD bold;
        set KS0HM003.KS0HM-SESN-YR-RNG bold;
        set KS0HM003.KS0HM-HTS-NBR bold;
        set KS0HM003.KS0HM-PRBM-CD bold;
        set KS0HM003.KS0HM-RULE-NBR bold;
        set KS0HM003.KS0HM-STY-TYP-CD[1] bold;
        set KS0HM003.KS0HM-STY-TYP-CD[2] bold;
        set KS0HM003.KS0HM-STY-TYP-CD[3] bold;
        KSWREC.XXXPRCNM = "03405"; /* Module identification*/
        converseLib.validationFailed(146); /* Data is required message*/
      end
    end

  else
    set KS0HM003.KS0HM-GPC-CD cursor, bold;
    set KS0HM003.KS0HM-STY-NBR bold;
    set KS0HM003.KS0HM-SESN-CD bold;
    set KS0HM003.KS0HM-SESN-YR-RNG bold;
    set KS0HM003.KS0HM-HTS-NBR bold;
    set KS0HM003.KS0HM-PRBM-CD bold;
    set KS0HM003.KS0HM-RULE-NBR bold;
    set KS0HM003.KS0HM-STY-TYP-CD[1] bold;
    set KS0HM003.KS0HM-STY-TYP-CD[2] bold;
    set KS0HM003.KS0HM-STY-TYP-CD[3] bold;
    KSWREC.XXXPRCNM = "03405"; /* Module identification*/
    converseLib.validationFailed(146); /* Data is required message*/
    exit stack; /* redisplay map*/
  end

end // end KS0H-03405

// Select row for editing
Function KS0H-03410()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  set VCTEAM01 empty; /* Clear row storage area*/

  VCTEAM01.KS-TEAM-CD = KS0HM003.KS0HM-TEAM-CD; /* team nbr*/

  try
    call "IO6060" ("S ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "03410"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FOR EDITING       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.KS-TEAM-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0H-03410

// Process valid input request
Function KS0H-03500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/
    KS0H-03510(); /* format development jcl*/
  else
    if (TA6REC.XURDEST != "LOCAL ")
      KS0H-03520(); /* format production jcl*/
    else
      KS0H-03530(); /* format bundle jcl*/
    end
  end


end // end KS0H-03500

// Format and Submit devel jcl
Function KS0H-03510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTB2.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      KS0H-03511(); /* Format parameters*/

    else

      if (KS0HTB2.TARTYPE[TA6INDEX] == "Q") /* Parameters statement*/

        KS0H-03512(); /* Format parameters*/

      else

      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = KS0HTB2.TARJCL[TA6INDEX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = KS0HTB2.TARTYPE[TA6INDEX]; /* Type*/

      end
    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTB2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "03510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[3] = "*"; /* Indicate function completed*/

    set KS0HM003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-03510

// Format parameters for jcl
Function KS0H-03511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW03 empty; /* Parameters work area*/

  KS0HW-W3-GPC-CD = KS0HM003.KS0HM-GPC-CD; /* GPC-CD*/
  KS0HW-W3-DIV-CD = KS0HM003.KS0HM-DIV-CD; /* div-CD*/
  KS0HW00.KS0HW-HTS-NUMBER = KS0HM003.KS0HM-HTS-NBR;
  KS0HW00.KS0HW-HTS-NBR = KS0HM003.KS0HM-HTS-NBR;
  KS0HW-W3-HTS-CPTR-CD = KS0HW00.KS0HW-HTS-CPTR-CD;
  KS0HW-W3-HTS-HDG-CD = KS0HW00.KS0HW-HTS-HDG-CD;
  KS0HW-W3-HTS-1ST-SHDG-CD = KS0HW00.KS0HW-HTS-1ST-SHDG-CD;
  KS0HW-W3-HTS-2ND-SHDG-CD1 = KS0HW00.KS0HW-HTS-2ND-SHDG-CD1;
  if (KS0HW00.KS0HW-HTS-BYTE[11] != "-"
   && KS0HW00.KS0HW-HTS-BYTE[11] != ",")
    KS0HW-W3-HTS-2ND-SHDG-CD2 = " ";
    KS0HW-W3-HTS-STAT-CD = KS0HW00.KS0HW-HTS-STAT-CD;
    KS0HW-W3-HTS-RNG-FL = "N";
  else
    KS0HW03.KS0HW-W3-HTS-2ND-SHDG-CD21 = KS0HW00.KS0HW-HTS-BYTE[12];
    KS0HW03.KS0HW-W3-HTS-2ND-SHDG-CD22 = KS0HW00.KS0HW-HTS-BYTE[13];
    KS0HW-W3-HTS-STAT-CD = " ";
    if (KS0HW00.KS0HW-HTS-BYTE[11] == "-")
      KS0HW-W3-HTS-RNG-FL = "Y";
    else
      if (KS0HW00.KS0HW-HTS-BYTE[11] == ",")
        KS0HW-W3-HTS-RNG-FL = "N";
      end
    end
  end
  KS0HW-W3-STY-NBR = KS0HM003.KS0HM-STY-NBR;
  KS0HW-W3-RULE-NBR = KS0HM003.KS0HM-RULE-NBR;
  KS0HW-W3-SESN-CD = KS0HM003.KS0HM-SESN-CD; /* SEASON*/
  KS0HW00.KS0HW-YEAR-YY = KS0HM003.KS0HM-SESN-YR-RNG;

  if (KS0HM003.KS0HM-SESN-YR-RNG == " ") /* If season year not entered*/
    KS0HW00.KS0HW-YEAR-CC = 00;
  else
    if (KS0HM003.KS0HM-SESN-YR-RNG > "49")
      KS0HW00.KS0HW-YEAR-CC = 19;
    else
      KS0HW00.KS0HW-YEAR-CC = 20;
    end
  end
  KS0HW-W3-SESN-YR-RNG = KS0HW00.KS0HW-YEAR;
  KS0HW-W3-TEAM-CD = KS0HM003.KS0HM-TEAM-CD;
  KS0HW-W3-PRBM-CD = KS0HM003.KS0HM-PRBM-CD;
  KS0HW-W3-US-MADE = KS0HM003.KS0HM-US-MADE;
  KS0HW-W3-CTRY-CD = KS0HM003.KS0HM-CTRY-CD;
  KS0HW-W3-EXP-STYLE = KS0HM003.KS0HM-EXP-STYLE;

  if (KS0HM003.KS0HM-IN-NC-STAT == "Y")
    KS0HW-W3-IN-NC-STAT = "NC";
  else
    KS0HW-W3-IN-NC-STAT = "  ";
  end

  if (KS0HM003.KS0HM-IN-SP-STAT == "Y")
    KS0HW-W3-IN-SP-STAT = "SP";
  else
    KS0HW-W3-IN-SP-STAT = "  ";
  end

  if (KS0HM003.KS0HM-IN-TC-STAT == "Y")
    KS0HW-W3-IN-TC-STAT = "TC";
  else
    KS0HW-W3-IN-TC-STAT = "  ";
  end

  if (KS0HM003.KS0HM-IN-BR-STAT == "Y")
    KS0HW-W3-IN-BR-STAT = "BR";
  else
    KS0HW-W3-IN-BR-STAT = "  ";
  end

  if (KS0HM003.KS0HM-IN-SB-STAT == "Y")
    KS0HW-W3-IN-SB-STAT = "SB";
  else
    KS0HW-W3-IN-SB-STAT = "  ";
  end

  if (KS0HM003.KS0HM-IN-BN-STAT == "Y")
    KS0HW-W3-IN-BN-STAT = "Y";
  else
    KS0HW-W3-IN-BN-STAT = " ";
  end

  KS0HW-W3-IN-OTH-STAT = KS0HM003.KS0HM-IN-OTH-STAT;

  KS0HW-W3-CO-NC-STAT = KS0HM003.KS0HM-CO-NC-STAT;
  KS0HW-W3-CO-TC-STAT = KS0HM003.KS0HM-CO-TC-STAT;
  KS0HW-W3-CO-BR-STAT = KS0HM003.KS0HM-CO-BR-STAT;

  KS0HW-W3-USERID = COMMAREA.CAUSERID;

  /* ----------------------------------------------------------------*/
  /* Move number of copies into parameters if LOCAL printer selected*/
  /* and in production.*/
  /* ----------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* if LOCAL print selected*/
   && TA3REC.TA3RGNID == "03")   /* In PRODUCTION region*/

    KS0HW03.KS0HW-W3-LOCAL-COPIES = KS0HM003.XURCOPY;
  else

    KS0HW03.KS0HW-W3-LOCAL-COPIES = 00;
  end

  TA6REC.TARJCL[TA6INDEX] = KS0HW03.TARJCL;


end // end KS0H-03511

// Format parameters for jcl
Function KS0H-03512()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW03 empty; /* Parameters work area*/

  KS0HW-W3-STY-TYP-CD1 = KS0HM003.KS0HM-STY-TYP-CD[1];
  KS0HW-W3-STY-TYP-CD2 = KS0HM003.KS0HM-STY-TYP-CD[2];
  KS0HW-W3-STY-TYP-CD3 = KS0HM003.KS0HM-STY-TYP-CD[3];
  KS0HW-W3-PROD-REG-CD = KS0HM003.KS0HM-REG-CD;
  KS0HW-W3-QOTA-CAT-CD = KS0HM003.KS0HM-QOTA-CAT-CD;


  TA6REC.TARJCL[TA6INDEX] = KS0HW03.KS0HW-W3-JCLPARM-2;


end // end KS0H-03512

// Format and Submit prod jcl
Function KS0H-03520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTB1.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      KS0H-03511(); /* Format parameters*/

    else

      if (KS0HTB1.TARTYPE[TA6INDEX] == "Q") /* Parameters statement*/

        KS0H-03512(); /* Format parameters*/

      else

      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = KS0HTB1.TARJCL[TA6INDEX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = KS0HTB1.TARTYPE[TA6INDEX]; /* Type*/

      end
    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTB1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "03520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[3] = "*"; /* Indicate function completed*/

    set KS0HM003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-03520

// Format and Submit bundle jcl
Function KS0H-03530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTB3.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      KS0H-03511(); /* Format parameters*/

    else

      if (KS0HTB3.TARTYPE[TA6INDEX] == "Q") /* Parameters statement*/

        KS0H-03512(); /* Format parameters*/

      else

      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = KS0HTB3.TARJCL[TA6INDEX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = KS0HTB3.TARTYPE[TA6INDEX]; /* Type*/

      end
    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTB3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "03530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[3] = "*"; /* Indicate function completed*/

    set KS0HM003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-03530

// Customs H.S. Number Report
Function KS0H-04000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-04100(); /* Format and display the map*/

  KS0H-04200(); /* Check attention identifier*/

  KS0H-04300(); /* Reset fields to normal intensity*/

  KS0H-04400(); /* Verify the data that was entered*/

  KS0H-04500(); /* Process valid input request*/


end // end KS0H-04000

// Format and display the map
Function KS0H-04100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM004 initial; /* Clear map*/
      KS0HM004.KS0HM-STAT = "A";
      KS0HM004.KS0HM-STAT-DESC = "ACTIVE";
      KS0HM004.KS0HM-PRINT-ALL = "N";

      KS0HM004.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM004.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM004.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM004.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM004.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM004.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM004 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM004 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-04100

// Check Attention Identifier
Function KS0H-04200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[4] = "C"; /* Indicate selection cancelled*/

    set KS0HM004 initial; /* M004 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "04200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-04200

// Reset highlighted fields
Function KS0H-04300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM004.XURCOPY initialAttributes; /* Number copies*/
  set KS0HM004.KS0HM-HTS-CPTR-CD initialAttributes; /* chapter number*/
  set KS0HM004.KS0HM-HTS-HDG-CD initialAttributes; /* chapter heading*/
  set KS0HM004.KS0HM-HTS-SHDG-CD initialAttributes; /* chapter sub-heading*/
  set KS0HM004.KS0HM-HTS-STAT-CD initialAttributes; /* chapt stat*/
  set KS0HM004.KS0HM-STAT initialAttributes; /* status code*/
  set KS0HM004.KS0HM-PRINT-ALL initialAttributes; /* print all flag*/


end // end KS0H-04300

// Verify the entered data
Function KS0H-04400()
  /* -------------------------------------------------------------*/
  /* check contents of the print all flag*/
  /* -------------------------------------------------------------*/

  if (KS0HM004.KS0HM-PRINT-ALL == "Y" /* print all*/
   || KS0HM004.KS0HM-PRINT-ALL == "N") /* do not print all*/
    /* next sentence*/
  else

    set KS0HM004.KS0HM-PRINT-ALL cursor, bold; /* higlight field*/
    KSWREC.XXXPRCNM = "04400"; /* module identification*/
    converseLib.validationFailed(66); /* y or n only*/

  end

  /* ------------------------------------------------------------*/
  /* check contents of status field*/
  /* ------------------------------------------------------------*/
  if (KS0HM004.KS0HM-STAT == "A") /* active status*/

    KS0HM004.KS0HM-STAT-DESC = "ACTIVE  "; /* active status*/

  else
    if (KS0HM004.KS0HM-STAT == "I") /* inactive status*/

      KS0HM004.KS0HM-STAT-DESC = "INACTIVE"; /* inactive status*/

    else
      if (KS0HM004.KS0HM-STAT == " ") /* both status'*/

        KS0HM004.KS0HM-STAT-DESC = "ALL     "; /* both status's*/

      else

        set KS0HM004.KS0HM-STAT cursor, bold; /* mark field*/
        KSWREC.XXXPRCNM = "04400"; /* module identification*/
        converseLib.validationFailed(19); /* status must be a, i or blank*/

      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the stat number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  KS0H-04410();

  /* ------------------------------------------------------------*/
  /* Verify the sub-heading number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  KS0H-04420();

  /* ------------------------------------------------------------*/
  /* Verify the heading number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  KS0H-04430();

  /* ------------------------------------------------------------*/
  /* Verify the chapter number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  KS0H-04440();

  /* ------------------------------------------------------------*/
  /* Check if printing multiple copies from the laser printer.*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* laser selected*/
   && KS0HM004.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM004.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM004.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM004.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM004.XURCOPY = 1; /* RESET TO 1 COPY*/

    else
      if (KS0HM004.XURCOPY != 01) /* Only 1 copy is allowed on xerox*/

        set KS0HM004.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "04400"; /* Module identification*/
        converseLib.validationFailed(16); /* Not authorized message*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM004.XURDEST bold; /* Highlight printer*/
    set KS0HM004.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "04400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-04400

// validate the stat cd
Function KS0H-04410()
  /* ------------------------------------------------------------*/
  /* Verify the stat number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  if (KS0HM004.KS0HM-HTS-STAT-CD > " ")
    if (KS0HM004.KS0HM-HTS-CPTR-CD > " ")
      if (KS0HM004.KS0HM-HTS-HDG-CD > " ")
        if (KS0HM004.KS0HM-HTS-SHDG-CD > " ")

          KS0H-04411(); /* select heading row*/

          if (SQLCA.VAGen_SQLCODE == 0) /* if there were no errors*/

            KS0HW00.KS0HW-HTS-STAT-CD = VHSNBR01.KS-HTS-STAT-CD; /* to status*/
            KS0HM004.KS0HM-HTS-STAT-CD = KS0HW00.KS0HW-HTS-STAT;
            KS0HM004.KS0HM-HTS-STAT-SDESC = VHSNBR01.KS-HTS-STAT-SDESC; /* short desc to map*/

          else

            KS0HM004.KS0HM-HTS-STAT-SDESC = " ";
            converseLib.validationFailed(56); /* set error nbr*/
            KSWREC.XXXPRCNM = "04410"; /* module identification*/
            set KS0HM004.KS0HM-HTS-STAT-CD cursor, bold;

          end
        else

          KS0HM004.KS0HM-HTS-SHDG-SDESC = " ";
          converseLib.validationFailed(50); /* set error nbr*/
          KSWREC.XXXPRCNM = "04410"; /* module identification*/
          set KS0HM004.KS0HM-HTS-SHDG-CD cursor, bold;

        end
      else

        KS0HM004.KS0HM-HTS-HDG-SDESC = " ";
        converseLib.validationFailed(44); /* set error nbr*/
        KSWREC.XXXPRCNM = "04410"; /* module identification*/
        set KS0HM004.KS0HM-HTS-HDG-CD cursor, bold;

      end
    else

      KS0HM004.KS0HM-HTS-CPTR-SDESC = " ";
      converseLib.validationFailed(34); /* set error nbr*/
      KSWREC.XXXPRCNM = "04410"; /* module identification*/
      set KS0HM004.KS0HM-HTS-CPTR-CD cursor, bold;

    end
  end

end // end KS0H-04410

// select requested table row
Function KS0H-04411()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  set VHSNBR01 empty; /* Clear row storage area*/

  /* ------------------------------------------------------------*/
  /* Set the chapter nbr/hdg/shdg for the select.*/
  /* ------------------------------------------------------------*/

  VHSNBR01.KS-HTS-CPTR-CD = KS0HM004.KS0HM-HTS-CPTR-CD;
  VHSNBR01.KS-HTS-HDG-CD = KS0HM004.KS0HM-HTS-HDG-CD;
  KS0HW00.KS0HW-SHDG-FORMAT-FLD = KS0HM004.KS0HM-HTS-SHDG-CD;
  VHSNBR01.KS-HTS-1ST-SHDG-CD = KS0HW00.KS0HW-HTS-1ST-SHDG-CD;
  VHSNBR01.KS-HTS-2ND-SHDG-CD = KS0HW00.KS0HW-HTS-2ND-SHDG-CD1;
  KS0HW00.KS0HW-HTS-STAT = KS0HM004.KS0HM-HTS-STAT-CD;
  VHSNBR01.KS-HTS-STAT-CD = KS0HW00.KS0HW-HTS-STAT-CD;

  try
    call "IO6120" ("S ", SQLCA, VHSNBR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no rows available*/

      return;

    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "04411"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FROM TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSNBR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end KS0H-04411

// validate the sub-heading cd
Function KS0H-04420()
  /* ------------------------------------------------------------*/
  /* Verify the sub-heading number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  if (KS0HM004.KS0HM-HTS-SHDG-CD > " ")
    if (KS0HM004.KS0HM-HTS-CPTR-CD > " ")
      if (KS0HM004.KS0HM-HTS-HDG-CD > " ")

        KS0H-04421(); /* select heading row*/

        if (SQLCA.VAGen_SQLCODE == 0) /* if there were no errors*/

          KS0HW00.KS0HW-HTS-1ST-SHDG-CD = VHSSHD01.KS-HTS-1ST-SHDG-CD; /* to subheading 1*/
          KS0HW00.KS0HW-HTS-2ND-SHDG-CD1 = VHSSHD01.KS-HTS-2ND-SHDG-CD; /* to subheading 2*/
          KS0HW00.KS0HW-PERIOD = "."; /* move period*/
          KS0HM004.KS0HM-HTS-SHDG-CD = KS0HW00.KS0HW-SHDG-FORMAT-FLD;
          KS0HM004.KS0HM-HTS-SHDG-SDESC = VHSSHD01.KS-HTS-SHDG-SDESC; /* short desc to map*/

        else

          KS0HM004.KS0HM-HTS-SHDG-SDESC = " ";
          converseLib.validationFailed(50); /* set error nbr*/
          KSWREC.XXXPRCNM = "04420"; /* module identification*/
          set KS0HM004.KS0HM-HTS-SHDG-CD cursor, bold;

        end
      else

        KS0HM004.KS0HM-HTS-HDG-SDESC = " ";
        converseLib.validationFailed(44); /* set error nbr*/
        KSWREC.XXXPRCNM = "04420"; /* module identification*/
        set KS0HM004.KS0HM-HTS-HDG-CD cursor, bold;

      end
    else

      KS0HM004.KS0HM-HTS-CPTR-SDESC = " ";
      converseLib.validationFailed(34); /* set error nbr*/
      KSWREC.XXXPRCNM = "04420"; /* module identification*/
      set KS0HM004.KS0HM-HTS-CPTR-CD cursor, bold;

    end
  end

end // end KS0H-04420

// get subheading info
Function KS0H-04421()
  /* ------------------------------------------------------------*/
  /* select table row*/
  /* ------------------------------------------------------------*/

  set VHSSHD01 empty; /* clear work record*/

  VHSSHD01.KS-HTS-CPTR-CD = KS0HM004.KS0HM-HTS-CPTR-CD; /* cptr cd*/
  VHSSHD01.KS-HTS-HDG-CD = KS0HM004.KS0HM-HTS-HDG-CD; /* hdg cd*/
  KS0HW00.KS0HW-SHDG-FORMAT-FLD = KS0HM004.KS0HM-HTS-SHDG-CD;
  VHSSHD01.KS-HTS-1ST-SHDG-CD = KS0HW00.KS0HW-HTS-1ST-SHDG-CD;
  VHSSHD01.KS-HTS-2ND-SHDG-CD = KS0HW00.KS0HW-HTS-2ND-SHDG-CD1;

  try
    call "IO6110" ("S ", SQLCA, VHSSHD01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return*/
  /* If data not found, return an error message to the user.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        return; /* Return to previous process*/

      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "04421"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT HEADING ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSSHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSSHD01.VHSSHD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0H-04421

// validate the heading cd
Function KS0H-04430()
  /* ------------------------------------------------------------*/
  /* Verify the heading number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  if (KS0HM004.KS0HM-HTS-HDG-CD > " ")
    if (KS0HM004.KS0HM-HTS-CPTR-CD > " ")

      KS0H-04431(); /* select heading row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if there were no errors*/

        KS0HM004.KS0HM-HTS-HDG-CD = VHSHDG01.KS-HTS-HDG-CD; /* cptr cd to map*/
        KS0HM004.KS0HM-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC; /* short desc to map*/

      else

        KS0HM004.KS0HM-HTS-HDG-SDESC = " ";
        converseLib.validationFailed(44); /* set error nbr*/
        KSWREC.XXXPRCNM = "04430"; /* module identification*/
        set KS0HM004.KS0HM-HTS-HDG-CD cursor, bold;

      end
    else

      KS0HM004.KS0HM-HTS-CPTR-SDESC = " ";
      converseLib.validationFailed(34); /* set error nbr*/
      KSWREC.XXXPRCNM = "04430"; /* module identification*/
      set KS0HM004.KS0HM-HTS-CPTR-CD cursor, bold;

    end
  end

end // end KS0H-04430

// get heading row
Function KS0H-04431()
  /* ------------------------------------------------------------*/
  /* select table row*/
  /* ------------------------------------------------------------*/

  set VHSHDG01 empty; /* clear work record*/

  VHSHDG01.KS-HTS-CPTR-CD = KS0HM004.KS0HM-HTS-CPTR-CD; /* cptr cd*/
  VHSHDG01.KS-HTS-HDG-CD = KS0HM004.KS0HM-HTS-HDG-CD; /* hdg cd*/

  try
    call "IO6100" ("S ", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return*/
  /* If data not found, return an error message to the user.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        return;

      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "04431"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

   /* MOVE KS0HW00.KS0HW-STAT TO KS0HW01.KS0HW-STAT;/* default status code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT HEADING ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSHDG01.KS-HTS-HDG-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0H-04431

// validate the chapter cd
Function KS0H-04440()
  /* ------------------------------------------------------------*/
  /* Verify the chapter number entered and move in short desc.*/
  /* ------------------------------------------------------------*/

  if (KS0HM004.KS0HM-HTS-CPTR-CD > " ")

    KS0H-04441(); /* select chapter row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if there were no errors*/

      KS0HM004.KS0HM-HTS-CPTR-CD = VHSCHP01.KS-HTS-CPTR-CD; /* cptr cd to map*/
      KS0HM004.KS0HM-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC; /* short desc to map*/

    else

      KS0HM004.KS0HM-HTS-CPTR-SDESC = " ";
      converseLib.validationFailed(34); /* set error nbr*/
      KSWREC.XXXPRCNM = "04440"; /* module identification*/
      set KS0HM004.KS0HM-HTS-CPTR-CD cursor, bold;

    end
  else
    if (KS0HM004.KS0HM-PRINT-ALL == "N") /* do not print all*/

      KS0HM004.KS0HM-HTS-CPTR-SDESC = " ";
      converseLib.validationFailed(34); /* set error nbr*/
      KSWREC.XXXPRCNM = "04440"; /* module identification*/
      set KS0HM004.KS0HM-HTS-CPTR-CD cursor, bold;

    end
  end

end // end KS0H-04440

// retrieve chapter information
Function KS0H-04441()
  /* ------------------------------------------------------------*/
  /* select table row*/
  /* ------------------------------------------------------------*/

  set VHSCHP01 empty; /* clear work record*/

  VHSCHP01.KS-HTS-CPTR-CD = KS0HM004.KS0HM-HTS-CPTR-CD; /* cptr cd*/

  try
    call "IO6080" ("S ", SQLCA, VHSCHP01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return*/
  /* If data not found, return an error message to the user.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        return; /* Return to previous process*/

      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "04441"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CHAPTER ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSCHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSCHP01.KS-HTS-CPTR-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0H-04441

// Process valid input requests
Function KS0H-04500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/

    KS0H-04510(); /* format development jcl*/

  else
    if (TA6REC.XURDEST != "LOCAL ")

      KS0H-04520(); /* format production jcl*/

    else

      KS0H-04530(); /* format bundle print*/

    end
  end


end // end KS0H-04500

// Format and submit devl jcl
Function KS0H-04510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTC2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-04511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTC2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTC2.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTC2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "04510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[4] = "*"; /* Indicate function completed*/

    set KS0HM004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-04510

// Format Parm 1 for jcl
Function KS0H-04511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW04 empty; /* Parameters work area*/

  KS0HW04.KS0HW-W4-HTS-CPTR-CD = KS0HM004.KS0HM-HTS-CPTR-CD;
  KS0HW04.KS0HW-W4-HTS-HDG-CD = KS0HM004.KS0HM-HTS-HDG-CD;
  KS0HW00.KS0HW-SHDG-FORMAT-FLD = KS0HM004.KS0HM-HTS-SHDG-CD;
  KS0HW04.KS0HW-W4-HTS-1ST-SHDG-CD = KS0HW00.KS0HW-HTS-1ST-SHDG-CD;
  KS0HW04.KS0HW-W4-HTS-2ND-SHDG-CD1 = KS0HW00.KS0HW-HTS-2ND-SHDG-CD1;
  KS0HW00.KS0HW-HTS-STAT = KS0HM004.KS0HM-HTS-STAT-CD;
  KS0HW04.KS0HW-W4-HTS-STAT-CD = KS0HW00.KS0HW-HTS-STAT-CD;

  KS0HW04.KS0HW-W4-STATUS = KS0HM004.KS0HM-STAT;
  KS0HW04.KS0HW-W4-PRINT-ALL = KS0HM004.KS0HM-PRINT-ALL;

  KS0HW04.KS0HW-W4-USERID = COMMAREA.CAUSERID;

  /* ----------------------------------------------------------------*/
  /* Move number of copies into parameters if local printer selected*/
  /* and in production.*/
  /* ----------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* If local printer selected*/
   && TA3REC.TA3RGNID == "03")   /* In PRODUCTION region*/

    KS0HW04.KS0HW-W4-LOCAL-COPIES = KS0HM004.XURCOPY;

  else

    KS0HW04.KS0HW-W4-LOCAL-COPIES = 00;

  end

  TA6REC.TARJCL[TA6INDEX] = KS0HW04.KS0HW-W4-PARM-REC; /* Parameters*/


end // end KS0H-04511

// Fomat and submit prod jcl
Function KS0H-04520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTC1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-04511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTC1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTC1.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTC1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "04520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[4] = "*"; /* Indicate function completed*/

    set KS0HM004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-04520

// Format and submit bundle jcl
Function KS0H-04530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTC3.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-04511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTC3.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTC3.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTC3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "04530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[4] = "*"; /* Indicate function completed*/

    set KS0HM004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-04530

// Customs CF5523 Exception Repor
Function KS0H-05000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-05100(); /* Format and display the map*/

  KS0H-05200(); /* Check attention identifier*/

  KS0H-05300(); /* Reset fields to normal intensity*/

  KS0H-05400(); /* Verify the data that was entered*/

  KS0H-05500(); /* Process valid input request*/


end // end KS0H-05000

// Format and display the map
Function KS0H-05100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM005 initial; /* Clear map*/
      KS0HM005.KS0HM-GPC-CD = "02"; /* default GPC to 02*/

      KS0HM005.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM005.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM005.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM005.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM005.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM005.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM005.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM005 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM005 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-05100

// Check attention identifier
Function KS0H-05200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[5] = "C"; /* Indicate selection cancelled*/

    set KS0HM005 initial; /* M005 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "05200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-05200

// Reset highlighted fields
Function KS0H-05300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM005.XURCOPY initialAttributes; /* Number copies*/
  set KS0HM005.KS0HM-GPC-CD initialAttributes; /* gpc code*/
  set KS0HM005.KS0HM-PRDCTN-YR initialAttributes; /* PO ID prdctn year*/
  set KS0HM005.KS0HM-PRDCTN-MO initialAttributes; /* PO ID prdctn Month*/
  set KS0HM005.KS0HM-DLVR-MO initialAttributes; /* PO ID deliver month*/
  set KS0HM005.KS0HM-FCTY-CD initialAttributes; /* PO ID factory code*/
  set KS0HM005.KS0HM-STY-NBR initialAttributes; /* season year*/
  set KS0HM005.KS0HM-COLR-CD-ID initialAttributes; /* Color code id*/
  set KS0HM005.KS0HM-DIM-CD initialAttributes; /* Dimension code*/
  set KS0HM005.KS0HM-CTRY-CD initialAttributes; /* Country code*/

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (KS0HM005.KS0HM-GPC-CD == "?" /* if any ? entered*/
   || KS0HM005.KS0HM-CTRY-CD == "?")

    if (KS0HM005.KS0HM-GPC-CD == "?") /* if ? entered in gpc*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM005.KS0HM-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        KS0HM005.KS0HM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
        set KS0HM005.KS0HM-PRDCTN-YR cursor; /* put cursor on prd yr*/
      else
        KS0HM005.KS0HM-GPC-CD = " "; /* clear fields*/
        KS0HM005.KS0HM-GPC-DESC = " "; /* clear description*/
        set KS0HM005.KS0HM-GPC-CD cursor; /* put cursor on gpc cd*/
      end
    end

    if (KS0HM005.KS0HM-CTRY-CD == "?") /* if ? in ctry code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM005.KS0HM-CTRY-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        KS0HM005.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move desc*/
        set KS0HM005.KS0HM-PRDCTN-YR cursor; /* put cursor on prd yr*/
      else
        KS0HM005.KS0HM-CTRY-CD = " "; /* clear fields*/
        KS0HM005.KS0HM-CTRY-DESC = " ";
        set KS0HM005.KS0HM-CTRY-CD cursor; /* Set cursor*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    KS0HW00.KS0HW-SWR = "N"; /* no to request for data*/
    KS0HW00.KS0HW-SWF = "N"; /* no to format map*/
    KS0HW00.KS0HW-POP-UP = "Y"; /* indicate pop-up window*/

    exit stack; /* go display map*/

  end


end // end KS0H-05300

// Verify the entered data
Function KS0H-05400()
  /* ------------------------------------------------------------*/
  /* If a required field was not entered, indicate that it is*/
  /* missing or invalid.*/
  /* ------------------------------------------------------------*/

  KS0H-05410(); /* Verify required data entered*/

  /* ------------------------------------------------------------*/
  /* Include Column Checks*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/

  if (KS0HM005.KS0HM-CTRY-CD > " ") /* If origin entered*/
    if (KS0HM005.KS0HM-CTRY-CD in XCTTBL.XCTCD /* Code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      KS0HM005.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[sysVar.arrayIndex];

    else

    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

      KSWREC.XXXPRCNM = "05400"; /* Module identification*/
      set KS0HM005.KS0HM-CTRY-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(70); /* Field missing or invalid*/

    end
  end

  /* -------------------------------------------------------------*/
  /* Verify the fcty code exists*/
  /* -------------------------------------------------------------*/

  KS0H-05420();

  /* ------------------------------------------------------------*/
  /* Verify Style Number is entered before color/dim*/
  /* ------------------------------------------------------------*/

  if (KS0HM005.KS0HM-STY-NBR == " ")
    if (KS0HM005.KS0HM-COLR-CD-ID > " "
     || KS0HM005.KS0HM-DIM-CD > " ")

      set KS0HM005.KS0HM-STY-NBR cursor, bold;
      set KS0HM005.KS0HM-COLR-CD-ID bold;
      set KS0HM005.KS0HM-DIM-CD bold;
      KSWREC.XXXPRCNM = "05400"; /* Module Identification*/
      converseLib.validationFailed(067); /* Style is missing*/

    end
  else
    if (KS0HM005.KS0HM-COLR-CD-ID == " "
     && KS0HM005.KS0HM-DIM-CD > " ")

      set KS0HM005.KS0HM-COLR-CD-ID cursor, bold;
      set KS0HM005.KS0HM-DIM-CD bold;
      KSWREC.XXXPRCNM = "05400"; /* Module Identification*/
      converseLib.validationFailed(079); /* colr is missing*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Verify PO ID month range*/
  /* ------------------------------------------------------------*/

  if (KS0HM005.KS0HM-DLVR-MO == " ") /* PO ID mnth not entered*/
      /* next sentence*/
  else
    if (KS0HM005.KS0HM-DLVR-MO >= "01" /* year between 1 & 12*/
     && KS0HM005.KS0HM-DLVR-MO <= "12")
    /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "05400"; /* module id*/
      set KS0HM005.KS0HM-DLVR-MO cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  if (KS0HM005.KS0HM-PRDCTN-MO == " ") /* PO ID mnth not entered*/
      /* next sentence*/
  else
    if (KS0HM005.KS0HM-PRDCTN-MO >= "01" /* year between 1 & 12*/
     && KS0HM005.KS0HM-PRDCTN-MO <= "12")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "05400"; /* module id*/
      set KS0HM005.KS0HM-PRDCTN-MO cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  if (KS0HM005.KS0HM-PRDCTN-YR == " " /* PO ID year not entered*/
   && KS0HM005.KS0HM-PRDCTN-MO == " " /* PO ID prd month is blank*/
   && KS0HM005.KS0HM-DLVR-MO == " ")  /* PO ID dlv month is blank*/
      /* next sentence*/
  else
    if (KS0HM005.KS0HM-PRDCTN-YR >= "00" /* year between 0 & 99*/
     && KS0HM005.KS0HM-PRDCTN-YR <= "99")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "05400"; /* module id*/
      set KS0HM005.KS0HM-PRDCTN-YR cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify gpc code*/
  /* ------------------------------------------------------------*/

  if (KS0HM005.KS0HM-GPC-CD in XGPTBL.XGPCD) /* gpc in the table*/
  /* /* get gpc description*/
    KS0HM005.KS0HM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    if (KS0HM005.KS0HM-GPC-CD == "EQ") /* equipment*/
      KS0HM005.KS0HM-GPC-DESC = "EQUIPMENT";
    else
      KSWREC.XXXPRCNM = "05400"; /* module id*/
      set KS0HM005.KS0HM-GPC-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(147); /* field missing or invalid*/
      KS0HM005.KS0HM-GPC-DESC = " "; /* clear desc*/

    end
  end
  if (KS0HM005.KS0HM-GPC-CD != "02" && KS0HM005.KS0HM-GPC-CD != "EQ")
    KSWREC.XXXPRCNM = "05400"; /* module id*/
    set KS0HM005.KS0HM-GPC-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(156); /* field missing or invalid*/
    KS0HM005.KS0HM-GPC-DESC = " "; /* clear desc*/
  end

  /* ------------------------------------------------------------*/
  /* Check if printing multiple copies from the laser printer.*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* laser selected*/
   && KS0HM005.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM005.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM005.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM005.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM005.XURCOPY = 1; /* RESET TO 1 COPY*/

    else
      if (KS0HM005.XURCOPY != 01) /* Only 1 copy is allowed on xerox*/

        set KS0HM005.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "05400"; /* Module identification*/
        converseLib.validationFailed(16); /* Not authorized message*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM005.XURDEST bold; /* Highlight printer*/
    set KS0HM005.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "05400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-05400

// Verify required data
Function KS0H-05410()
  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - GPC/po id*/
  /* ------------------------------------------------------------*/

  if (KS0HM005.KS0HM-GPC-CD > " ") /* If GPC entered*/
    if (KS0HM005.KS0HM-PRDCTN-YR > " ")
      if (KS0HM005.KS0HM-PRDCTN-MO > "00")
        if (KS0HM005.KS0HM-DLVR-MO > "00")
           /* next sentence*/
        else
          set KS0HM005.KS0HM-PRDCTN-YR bold;
          set KS0HM005.KS0HM-PRDCTN-MO bold;
          set KS0HM005.KS0HM-DLVR-MO cursor, bold;
          KSWREC.XXXPRCNM = "05410"; /* Module identification*/
          converseLib.validationFailed(114); /* PO ID is missing or invalid*/
        end
      else
        set KS0HM005.KS0HM-PRDCTN-YR bold;
        set KS0HM005.KS0HM-PRDCTN-MO cursor, bold;
        set KS0HM005.KS0HM-DLVR-MO bold;
        KSWREC.XXXPRCNM = "05410"; /* Module identification*/
        converseLib.validationFailed(114); /* PO ID is missing or invalid*/
      end
    else
      set KS0HM005.KS0HM-PRDCTN-YR cursor, bold;
      set KS0HM005.KS0HM-PRDCTN-MO bold;
      set KS0HM005.KS0HM-DLVR-MO bold;
      KSWREC.XXXPRCNM = "05410"; /* Module identification*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end


  else
    set KS0HM005.KS0HM-GPC-CD cursor, bold;
    KSWREC.XXXPRCNM = "05410"; /* Module identification*/
    converseLib.validationFailed(91); /* Data is required message*/
  end


end // end KS0H-05410

// verify factory code
Function KS0H-05420()
  /* ------------------------------------------------------------*/
  /* Verify the factory code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM005.KS0HM-FCTY-CD > " ")
    if (KS0HM005.KS0HM-GPC-CD == "EQ")
      FY1REC.XGPCD = "02";
      FY1REC.FY1FCTYC = KS0HM005.KS0HM-FCTY-CD;
      KS0H-05421(); /* select factory row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
         /* next sentence*/
      else
        FY1REC.XGPCD = "03";
        FY1REC.FY1FCTYC = KS0HM005.KS0HM-FCTY-CD;
        KS0H-05421(); /* select factory row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
           /* next sentence*/

        else
          set KS0HM005.KS0HM-FCTY-CD cursor, bold;
          converseLib.validationFailed(98);
          KSWREC.XXXPRCNM = "05420";
        end
      end
    else

      FY1REC.XGPCD = KS0HM005.KS0HM-GPC-CD;
      FY1REC.FY1FCTYC = KS0HM005.KS0HM-FCTY-CD;
      KS0H-05421(); /* select factory row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
        /* next sentence*/
      else
        set KS0HM005.KS0HM-FCTY-CD cursor, bold;
        converseLib.validationFailed(98);
        KSWREC.XXXPRCNM = "05420";
      end
    end
  end

end // end KS0H-05420

// select a factory row
Function KS0H-05421()
  /* ------------------------------------------------------------*/
  /* select table row*/
  /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  /* ------------------------------------------------------------*/
  /* If row exists, return*/
  /* If data not found, return an error message to the user.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "05421"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end KS0H-05421

// Process valid input request
Function KS0H-05500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/
    KS0H-05510(); /* format development jcl*/
  else
    if (TA6REC.XURDEST != "LOCAL ")
      KS0H-05520(); /* format production jcl*/
    else
      KS0H-05530(); /* format bundle print*/
    end
  end


end // end KS0H-05500

// Format and submit devel jcl
Function KS0H-05510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTD2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-05511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTD2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTD2.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTD2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "05510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[5] = "*"; /* Indicate function completed*/

    set KS0HM005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-05510

// Format Parm 1 for jcl
Function KS0H-05511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW05 empty; /* Parameters work area*/

  KS0HW-W5-GPC-CD = KS0HM005.KS0HM-GPC-CD; /* GPC-CD*/

  KS0HW-W5-POID-ZERO = 0;
  KS0HW-W5-PRDCTN-YR = KS0HM005.KS0HM-PRDCTN-YR;

  if (KS0HM005.KS0HM-PRDCTN-YR > "49")
    KS0HW-W5-PRDCTN-CC = 19;
  else
    KS0HW-W5-PRDCTN-CC = 20;
  end

  KS0HW-W5-PRDCTN-MO = KS0HM005.KS0HM-PRDCTN-MO;
  KS0HW-W5-DLVR-MO = KS0HM005.KS0HM-DLVR-MO;
  KS0HW-W5-FCTY-CD = KS0HM005.KS0HM-FCTY-CD;
  KS0HW-W5-STY-NBR = KS0HM005.KS0HM-STY-NBR;
  KS0HW-W5-COLR-CD = KS0HM005.KS0HM-COLR-CD-ID;
  KS0HW-W5-DIM-CD = KS0HM005.KS0HM-DIM-CD;
  KS0HW-W5-CTRY-CD = KS0HM005.KS0HM-CTRY-CD;

  KS0HW-W5-USERID = COMMAREA.CAUSERID;

  /* ------------------------------------------------------------*/
  /* Move number of copies into parameters if in production and*/
  /* local printer selected.*/
  /* -------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* local printer selected*/
   && TA3REC.TA3RGNID == "03")   /* in production*/

    KS0HW-W5-LOCAL-COPIES = KS0HM005.XURCOPY;
  else
    KS0HW-W5-LOCAL-COPIES = 00;
  end

  TA6REC.TARJCL[TA6INDEX] = KS0HW-W5-PARM-REC; /* Parameters*/


end // end KS0H-05511

// Format and submit prod jcl
Function KS0H-05520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTD1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-05511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTD1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTD1.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTD1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "05520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[5] = "*"; /* Indicate function completed*/

    set KS0HM005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-05520

// Format and submit bundle jcl
Function KS0H-05530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTD3.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-05511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTD3.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTD3.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTD3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "05530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[5] = "*"; /* Indicate function completed*/

    set KS0HM005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-05530

// Customs Binding Ruling Report
Function KS0H-06000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-06100(); /* Format and display the map*/

  KS0H-06200(); /* Check attention identifier*/

  KS0H-06300(); /* Reset fields to normal intensity*/

  KS0H-06400(); /* Verify the data that was entered*/

  KS0H-06500(); /* Process valid input request*/


end // end KS0H-06000

// Format and display the map
Function KS0H-06100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM006 initial; /* Clear map*/
      KS0HM006.KS0HM-STAT = "A";
      KS0HM006.KS0HM-STAT-DESC = "ACTIVE";
      KS0HM006.KS0HM-PRINT-ALL = "N";

      KS0HM006.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM006.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM006.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM006.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM006.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM006.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM006.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM006 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM006 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-06100

// Check Attention Identifier
Function KS0H-06200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[6] = "C"; /* Indicate selection cancelled*/

    set KS0HM006 initial; /* M006 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "06200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-06200

// Reset highlighted fields
Function KS0H-06300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM006.XURCOPY initialAttributes; /* Number copies*/
  set KS0HM006.KS0HM-GPC-CD initialAttributes; /* gpc code*/
  set KS0HM006.KS0HM-GPC-DESC initialAttributes; /* gpc code desc*/
  set KS0HM006.KS0HM-SESN-CD initialAttributes; /* season code*/
  set KS0HM006.KS0HM-SESN-YR-RNG initialAttributes; /* season year*/
  set KS0HM006.KS0HM-STAT initialAttributes; /* status*/
  set KS0HM006.KS0HM-STAT-DESC initialAttributes; /* status desc*/
  set KS0HM006.KS0HM-PRINT-ALL initialAttributes; /* print all? y or n*/

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropriate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (KS0HM006.KS0HM-GPC-CD == "?" /* if any ? entered*/
   || KS0HM006.KS0HM-SESN-CD == "?")

    if (KS0HM006.KS0HM-GPC-CD == "?") /* if ? entered in gpc*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM006.KS0HM-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        KS0HM006.KS0HM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
        set KS0HM006.KS0HM-SESN-CD cursor; /* put cursor on season code*/
      else
        KS0HM006.KS0HM-GPC-CD = " "; /* clear fields*/
        KS0HM006.KS0HM-GPC-DESC = " "; /* clear description*/
        set KS0HM006.KS0HM-GPC-CD cursor; /* put cursor on gpc cd*/
      end
    end

    if (KS0HM006.KS0HM-SESN-CD == "?") /* if ? in sesn code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              SEASON        "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSE01(); /* perform season window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the season     **/
      /* *  code table code to the map.                          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM006.KS0HM-SESN-CD = XSETBL.XSECD[XX0XWPIX]; /* move code*/
        set KS0HM006.KS0HM-SESN-YR-RNG cursor; /* put cursor on sesn yr*/
      else
        KS0HM006.KS0HM-SESN-CD = " "; /* clear fields*/
        set KS0HM006.KS0HM-SESN-CD cursor; /* Set cursor*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    KS0HW00.KS0HW-SWR = "N"; /* no to request for data*/
    KS0HW00.KS0HW-SWF = "N"; /* no to format map*/
    KS0HW00.KS0HW-POP-UP = "Y"; /* indicate pop-up window*/

    exit stack; /* go display map*/

  end


end // end KS0H-06300

// Verify the entered data
Function KS0H-06400()
  /* -------------------------------------------------------------*/
  /* check contents of the print all flag*/
  /* -------------------------------------------------------------*/

  if (KS0HM006.KS0HM-PRINT-ALL == "Y" /* print all*/
   || KS0HM006.KS0HM-PRINT-ALL == "N") /* do not print all*/
    /* next sentence*/
  else

    set KS0HM006.KS0HM-PRINT-ALL cursor, bold; /* highlight field*/
    KSWREC.XXXPRCNM = "06400"; /* module identification*/
    converseLib.validationFailed(66); /* y or n only*/
  end

  if (KS0HM006.KS0HM-GPC-CD == " ") /* gpc code blank*/
    if (KS0HM006.KS0HM-SESN-CD == " ") /* season code blank*/
      if (KS0HM006.KS0HM-SESN-YR-RNG == " ") /* season year blank*/
        if (KS0HM006.KS0HM-PRINT-ALL == "Y") /* print all*/
           /* next sentence*/
        else
          set KS0HM006.KS0HM-GPC-CD cursor, bold; /* highlight field*/
          KSWREC.XXXPRCNM = "06400"; /* module identification*/
          converseLib.validationFailed(147); /* at least BU  must be entered*/

        end
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* check contents of status field*/
  /* ------------------------------------------------------------*/
  if (KS0HM006.KS0HM-STAT == "A") /* active status*/

    KS0HM006.KS0HM-STAT-DESC = "ACTIVE  "; /* active status*/

  else
    if (KS0HM006.KS0HM-STAT == "I") /* inactive status*/

      KS0HM006.KS0HM-STAT-DESC = "INACTIVE"; /* inactive status*/

    else
      if (KS0HM006.KS0HM-STAT == " ") /* both status'*/

        KS0HM006.KS0HM-STAT-DESC = "ALL     "; /* both status's*/

      else

        set KS0HM006.KS0HM-STAT cursor, bold; /* mark field*/
        KSWREC.XXXPRCNM = "06400"; /* module identification*/
        converseLib.validationFailed(19); /* status must be a, i or blank*/

      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Year*/
  /* ------------------------------------------------------------*/

  if (KS0HM006.KS0HM-SESN-YR-RNG != " ") /* season year entered*/
    if (KS0HM006.KS0HM-SESN-YR-RNG >= "00" /* year between 0 and 99*/
     && KS0HM006.KS0HM-SESN-YR-RNG <= "99")
  /* next sentence*/
    else
      KSWREC.XXXPRCNM = "06400"; /* module id*/
      set KS0HM006.KS0HM-SESN-YR-RNG cursor, bold; /* highlight*/
      converseLib.validationFailed(26); /* field missing or invalid*/
    end
    if (KS0HM006.KS0HM-SESN-CD > " ") /* season code entered*/
  /* next sentence*/
    else
      KSWREC.XXXPRCNM = "06400"; /* module id*/
      set KS0HM006.KS0HM-SESN-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(27); /* season missing or invalid*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM006.KS0HM-SESN-CD > " ") /* season code entered*/
    if (KS0HM006.KS0HM-SESN-CD in XSETBL.XSECD) /* season code in table*/
  /* next sentence*/
    else
      KSWREC.XXXPRCNM = "06400"; /* module id*/
      set KS0HM006.KS0HM-SESN-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(27); /* season code missing or invalid*/
    end
    if (KS0HM006.KS0HM-SESN-YR-RNG > " ") /* year entered - ok*/
    else
      KSWREC.XXXPRCNM = "06400"; /* module id*/
      set KS0HM006.KS0HM-SESN-YR-RNG cursor, bold; /* highlight*/
      converseLib.validationFailed(26); /* year  missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the GPC code*/
  /* ------------------------------------------------------------*/

  if (KS0HM006.KS0HM-GPC-CD == " " /* gpc blank*/
   && KS0HM006.KS0HM-PRINT-ALL == "Y") /* and print-all is yes*/
  /* next sentence*/
  else
    if (KS0HM006.KS0HM-GPC-CD > " " /* gpc entered*/
     && KS0HM006.KS0HM-GPC-CD in XGPTBL.XGPCD) /* get desc*/
      KS0HM006.KS0HM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    else
      if (KS0HM006.KS0HM-GPC-CD == "EQ") /* equipment*/
        KS0HM006.KS0HM-GPC-DESC = "EQUIPMENT";
      else
        set KS0HM006.KS0HM-GPC-CD cursor, bold; /* highlight*/
        converseLib.validationFailed(147); /* field missing or invalid*/
        KS0HM006.KS0HM-GPC-DESC = " "; /* clear description*/
      end
    end
    if (KS0HM006.KS0HM-GPC-CD != "02" && KS0HM006.KS0HM-GPC-CD != "03")
      set KS0HM006.KS0HM-GPC-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(154); /* field missing of invalid*/
      KS0HM006.KS0HM-GPC-DESC = " "; /* clear description*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Check if printing multiple copies from the laser printer.*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* laser selected*/
   && KS0HM006.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM006.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM006.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM006.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM006.XURCOPY = 1; /* RESET TO 1 COPY*/

    else
      if (KS0HM006.XURCOPY != 01) /* Only 1 copy is allowed on xerox*/

        set KS0HM006.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "06400"; /* Module identification*/
        converseLib.validationFailed(16); /* Not authorized message*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM006.XURDEST bold; /* Highlight printer*/
    set KS0HM006.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "06400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-06400

// Process valid input requests
Function KS0H-06500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/

    KS0H-06510(); /* format development jcl*/

  else
    if (TA6REC.XURDEST != "LOCAL ")

      KS0H-06520(); /* format production jcl*/

    else

      KS0H-06530(); /* format bundle print*/

    end
  end


end // end KS0H-06500

// Format and submit devl jcl
Function KS0H-06510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTE2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-06511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTE2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTE2.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTE2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "06510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[6] = "*"; /* Indicate function completed*/

    set KS0HM006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-06510

// Format Parm 1 for jcl
Function KS0H-06511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW06 empty; /* Parameters work area*/

  KS0HW06.KS0HW-W6-GPC-CD = KS0HM006.KS0HM-GPC-CD;
  KS0HW06.KS0HW-W6-SESN-CD = KS0HM006.KS0HM-SESN-CD;
  KS0HW00.KS0HW-YEAR-YY = KS0HM006.KS0HM-SESN-YR-RNG;

  if (KS0HM006.KS0HM-SESN-YR-RNG == " ") /* if season year not entered*/
    KS0HW00.KS0HW-YEAR-CC = 00;
  else
    if (KS0HM006.KS0HM-SESN-YR-RNG > "49")
      KS0HW00.KS0HW-YEAR-CC = 19;
    else
      KS0HW00.KS0HW-YEAR-CC = 20;
    end
  end

  KS0HW06.KS0HW-W6-SESN-YR-RNG = KS0HW00.KS0HW-YEAR;
  KS0HW06.KS0HW-W6-STAT-CD = KS0HM006.KS0HM-STAT;
  KS0HW06.KS0HW-W6-PRINT-ALL = KS0HM006.KS0HM-PRINT-ALL;

  KS0HW06.KS0HW-W6-USERID = COMMAREA.CAUSERID;

  /* ----------------------------------------------------------------*/
  /* Move number of copies into parameters if local printer selected*/
  /* and in production.*/
  /* ----------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* If local printer selected*/
   && TA3REC.TA3RGNID == "03")   /* In PRODUCTION region*/

    KS0HW06.KS0HW-W6-LOCAL-COPIES = KS0HM006.XURCOPY;

  else

    KS0HW06.KS0HW-W6-LOCAL-COPIES = 00;

  end

  TA6REC.TARJCL[TA6INDEX] = KS0HW06.KS0HW-W6-PARM-REC; /* Parameters*/


end // end KS0H-06511

// Fomat and submit prod jcl
Function KS0H-06520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTE1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-06511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTE1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTE1.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTE1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "06520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[6] = "*"; /* Indicate function completed*/

    set KS0HM006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-06520

// Format and submit bundle jcl
Function KS0H-06530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTE3.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-06511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTE3.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTE3.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTE3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "06530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[6] = "*"; /* Indicate function completed*/

    set KS0HM006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-06530

// Footwear Master Class Report
Function KS0H-07000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-07100(); /* Format and display the map*/

  KS0H-07200(); /* Check attention identifier*/

  KS0H-07300(); /* Reset fields to normal intensity*/

  KS0H-07400(); /* Verify the data that was entered*/

  KS0H-07500(); /* Process valid input request*/


end // end KS0H-07000

// Format and display the map
Function KS0H-07100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM007 initial; /* Clear map*/
      KS0HM007.KS0HM-GPC-CD = "02";
      KS0HM007.KS0HM-US-MADE = "N";
      KS0HM007.KS0HM-EXP-STYLE = "N";
      KS0HM007.KS0HM-IN-NC-STAT = "N";
      KS0HM007.KS0HM-IN-TC-STAT = "N";
      KS0HM007.KS0HM-IN-BR-STAT = "N";
      KS0HM007.KS0HM-IN-SP-STAT = "N";
      KS0HM007.KS0HM-IN-SB-STAT = "N";
      KS0HM007.KS0HM-CO-NC-STAT = "N";
      KS0HM007.KS0HM-CO-TC-STAT = "N";
      KS0HM007.KS0HM-CO-BR-STAT = "N";
      KS0HM007.KS0HM-COL-BRULE = "Y";
      KS0HM007.KS0HM-COL-BRULE-XREF = "N";
      KS0HM007.KS0HM-COL-CF5523 = "Y";
      KS0HM007.KS0HM-COL-HS-NBR = "Y";
      KS0HM007.KS0HM-COL-DUTY = "Y";
      KS0HM007.KS0HM-COL-FOXING = "Y";
      KS0HM007.KS0HM-COMMENTS = "N";
      KS0HM007.KS0HM-SORT-STY-NBR = "Y";
      KS0HM007.KS0HM-SORT-STY-NM = "N";

      KS0HM007.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end
  /* SET KS0HM007.KS0HM-GPC-CD AUTOSKIP;/* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM007.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM007.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM007.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM007.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM007.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM007.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM007.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM007 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM007 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-07100

// Check attention identifier
Function KS0H-07200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[7] = "C"; /* Indicate selection cancelled*/

    set KS0HM007 initial; /* M002 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "07200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-07200

// Reset highlighted fields
Function KS0H-07300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM007.XURCOPY initialAttributes; /* Number copies*/
  set KS0HM007.KS0HM-GPC-CD initialAttributes; /* gpc code*/
  set KS0HM007.KS0HM-HTS-NBR initialAttributes; /* HS number*/
  set KS0HM007.KS0HM-REG-CD initialAttributes; /* market region code*/
  set KS0HM007.KS0HM-SESN-CD initialAttributes; /* season code*/
  set KS0HM007.KS0HM-SESN-YR-RNG initialAttributes; /* season year*/
  set KS0HM007.KS0HM-STY-NBR initialAttributes; /* season year*/
  set KS0HM007.KS0HM-COLR-CD-ID initialAttributes; /* Color code id*/
  set KS0HM007.KS0HM-DIM-CD initialAttributes; /* Dimension code*/
  set KS0HM007.KS0HM-RULE-NBR initialAttributes; /* Rule number*/
  set KS0HM007.KS0HM-DIV-CD initialAttributes; /* Division code*/
  set KS0HM007.KS0HM-TEAM-CD initialAttributes; /* team code*/
  set KS0HM007.KS0HM-QOTA-CAT-CD initialAttributes; /* Quota Category code*/
  set KS0HM007.KS0HM-PRDCTN-YR initialAttributes; /* POID Production Year*/
  set KS0HM007.KS0HM-PRDCTN-MO initialAttributes; /* POID Production Month*/
  set KS0HM007.KS0HM-DLVR-MO initialAttributes; /* POID Deliver Month*/
  set KS0HM007.KS0HM-FCTY-CD initialAttributes; /* POID Factory Code*/
  set KS0HM007.KS0HM-QOTA-CAT-CD initialAttributes; /* Quota Category code*/
  set KS0HM007.KS0HM-US-MADE initialAttributes; /**/
  set KS0HM007.KS0HM-CTRY-CD initialAttributes; /* Country code*/
  set KS0HM007.KS0HM-IN-NC-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-IN-TC-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-IN-BR-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-IN-SP-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-IN-SB-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-IN-BN-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-IN-OTH-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-CO-NC-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-CO-TC-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-CO-BR-STAT initialAttributes; /**/
  set KS0HM007.KS0HM-COL-BRULE initialAttributes; /**/
  set KS0HM007.KS0HM-COL-BRULE-XREF initialAttributes; /**/
  set KS0HM007.KS0HM-COL-CF5523 initialAttributes; /**/
  set KS0HM007.KS0HM-COL-HS-NBR initialAttributes; /**/
  set KS0HM007.KS0HM-COL-DUTY initialAttributes; /**/
  set KS0HM007.KS0HM-COL-FOXING initialAttributes; /**/
  set KS0HM007.KS0HM-COMMENTS initialAttributes; /**/
  set KS0HM007.KS0HM-RPT-TITLE initialAttributes; /**/
  set KS0HM007.KS0HM-SORT-STY-NBR initialAttributes; /**/
  set KS0HM007.KS0HM-SORT-STY-NM initialAttributes; /**/
  set KS0HM007.KS0HM-STY-TYP-CD[1] initialAttributes; /**/
  set KS0HM007.KS0HM-STY-TYP-CD[2] initialAttributes; /**/
  set KS0HM007.KS0HM-STY-TYP-CD[3] initialAttributes; /**/

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-GPC-CD == "?" /* if any ? entered*/
   || KS0HM007.KS0HM-REG-CD == "?" 
   || KS0HM007.KS0HM-DIV-CD == "?" 
   || KS0HM007.KS0HM-SESN-CD == "?"
   || KS0HM007.KS0HM-QOTA-CAT-CD == "?"
   || KS0HM007.KS0HM-PRBM-CD == "?"
   || KS0HM007.KS0HM-CTRY-CD == "?"
   || KS0HM007.KS0HM-IN-OTH-STAT == "?"
   || KS0HM007.KS0HM-STY-TYP-CD[1] == "?"
   || KS0HM007.KS0HM-STY-TYP-CD[2] == "?"
   || KS0HM007.KS0HM-STY-TYP-CD[3] == "?")

    if (KS0HM007.KS0HM-GPC-CD == "?") /* if ? entered in gpc*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        KS0HM007.KS0HM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
        set KS0HM007.KS0HM-HTS-NBR cursor; /* put cursor on hs number*/
      else
        KS0HM007.KS0HM-GPC-CD = " "; /* clear fields*/
        KS0HM007.KS0HM-GPC-DESC = " "; /* clear description*/
        set KS0HM007.KS0HM-GPC-CD cursor; /* put cursor on gpc cd*/
      end
    end

    if (KS0HM007.KS0HM-REG-CD == "?") /* if ? entered in market region*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "           MARKET REGION     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDR01(); /* perform market region window*/
      end

      /* *************************************************************/
      /* *  If the pass index is greater than zero, use the         **/
      /* *  passed table index 'XX0XWPIX' to move the market region **/
      /* *  code to the map.                                        **/
      /* *************************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-REG-CD = XDRTBL.XDR-PROD-REG-CD[XX0XWPIX];
      else
        KS0HM007.KS0HM-REG-CD = " "; /* clear fields*/
      end
      set KS0HM007.KS0HM-REG-CD cursor; /* put cursor on market region cd*/
    end

    if (KS0HM007.KS0HM-DIV-CD == "?") /* if ? entered in div*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "          DIVISION CODE      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDV02(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-DIV-CD = XDVTBL.XDVCD[XX0XWPIX];
        set KS0HM007.KS0HM-SESN-CD cursor; /* put cursor on sesn-cd*/
      else
        KS0HM007.KS0HM-DIV-CD = " "; /* clear fields*/
        set KS0HM007.KS0HM-DIV-CD cursor; /* put cursor on div cd*/
      end
    end

    if (KS0HM007.KS0HM-SESN-CD == "?") /* if ? in season field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 SEASON      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSE01(); /* perform season window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the season     **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-SESN-CD = XSETBL.XSECD[XX0XWPIX];
        set KS0HM007.KS0HM-SESN-YR-RNG cursor; /* put cursor on sesn yr*/
      else
        KS0HM007.KS0HM-SESN-CD = " "; /* clear fields*/
        set KS0HM007.KS0HM-SESN-CD cursor; /* put cursor on sesn cd*/
      end
    end

    if (KS0HM007.KS0HM-QOTA-CAT-CD == "?") /* if ? entered in quota*/
      XPXX001(); /* perform pop-up-window*/
      XX0XW02.XX0XWHDR = "      QUOTA CATEGORY CODE   ";

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYQT01(); /* perform gpc window*/
      end

       /* *******************************************************/
       /* *  If the pass index is greater than zero, use the   **/
       /* *  passed table index 'xx0xwpix' to move the quota   **/
       /* *  code to the map.                                  **/
       /* *******************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-QOTA-CAT-CD = YQTTBL.YQT-QOTA-CAT-CD[XX0XWPIX];
        set KS0HM007.KS0HM-TEAM-CD cursor; /* put cursor on team code*/
      else
        KS0HM007.KS0HM-QOTA-CAT-CD = " "; /* clear fields*/
        set KS0HM007.KS0HM-QOTA-CAT-CD cursor; /* put cursor on quota*/
      end
    end

    if (KS0HM007.KS0HM-PRBM-CD == "?") /* if ? in problem field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              FEATURES CODE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKP01(); /* perform problem window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the problem    **/
       /* *  code to the map.                                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-PRBM-CD = YKPTBL.YKP-PRBM-CD[XX0XWPIX];
        set KS0HM007.KS0HM-US-MADE cursor; /* cursor*/
      else
        KS0HM007.KS0HM-PRBM-CD = " "; /* clear fields*/
        set KS0HM007.KS0HM-PRBM-CD cursor; /* cursor*/
      end
    end

    if (KS0HM007.KS0HM-CTRY-CD == "?") /* if ? in ctry code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-CTRY-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        KS0HM007.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move desc*/
        set KS0HM007.KS0HM-EXP-STYLE cursor; /* Set cursor*/
      else
        KS0HM007.KS0HM-CTRY-CD = " "; /* clear fields*/
        KS0HM007.KS0HM-CTRY-DESC = " ";
        set KS0HM007.KS0HM-CTRY-CD cursor; /* Set cursor*/
      end
    end

    if (KS0HM007.KS0HM-STY-TYP-CD[1] == "?") /* if ? in style typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  CUSTOMS STYLE TYPE CODE   "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform sty typ code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-STY-TYP-CD[1] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0HM007.KS0HM-STY-TYP-CD[1] = " "; /* clear fields*/
      end
      set KS0HM007.KS0HM-STY-TYP-CD[1] cursor; /* Set cursor*/
    end

    if (KS0HM007.KS0HM-STY-TYP-CD[2] == "?") /* if ? in style typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  CUSTOMS STYLE TYPE CODE   "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform sty typ code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-STY-TYP-CD[2] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0HM007.KS0HM-STY-TYP-CD[2] = " "; /* clear fields*/
      end
      set KS0HM007.KS0HM-STY-TYP-CD[2] cursor; /* Set cursor*/
    end

    if (KS0HM007.KS0HM-STY-TYP-CD[3] == "?") /* if ? in style typ field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  CUSTOMS STYLE TYPE CODE   "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYKS01(); /* perform sty typ code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-STY-TYP-CD[3] = YKSTBL.YKS-STY-TYP-CD[XX0XWPIX]; /* move code*/
      else
        KS0HM007.KS0HM-STY-TYP-CD[3] = " "; /* clear fields*/
      end
      set KS0HM007.KS0HM-STY-TYP-CD[3] cursor; /* Set cursor*/
    end

    if (KS0HM007.KS0HM-IN-OTH-STAT == "?") /* if ? in opt stat field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "             OPTIONAL STATUS "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPR01(); /* perform status window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the optional   **/
       /* *  status code to the map.                              **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM007.KS0HM-IN-OTH-STAT = YPRTBL.YPR-PROD-STAT-CD[XX0XWPIX];
        set KS0HM007.KS0HM-IN-OTH-STAT cursor; /* cursor*/
      else
        KS0HM007.KS0HM-IN-OTH-STAT = " "; /* clear fields*/
        set KS0HM007.KS0HM-IN-OTH-STAT cursor; /* cursor*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    KS0HW00.KS0HW-SWR = "N"; /* no to request for data*/
    KS0HW00.KS0HW-SWF = "N"; /* no to format map*/
    KS0HW00.KS0HW-POP-UP = "Y"; /* indicate pop-up window*/

    exit stack; /* go display map*/

  end


end // end KS0H-07300

// Verify the entered data
Function KS0H-07400()
  /* ------------------------------------------------------------*/
  /* If a required field was not entered, indicate that it is*/
  /* missing or invalid.*/
  /* ------------------------------------------------------------*/

  KS0H-07405(); /* Verify required data entered*/

  /* ------------------------------------------------------------*/
  /* Verify Sort Style Name flag*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-SORT-STY-NM == "Y" /* field is Y or N*/
   || KS0HM007.KS0HM-SORT-STY-NM == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "07400"; /* module id*/
    set KS0HM007.KS0HM-SORT-STY-NM cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Verify Sort Style Nbr flag*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-SORT-STY-NBR == "Y" /* field is Y or N*/
   || KS0HM007.KS0HM-SORT-STY-NBR == "N")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "07400"; /* module id*/
    set KS0HM007.KS0HM-SORT-STY-NBR cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Verify that one and only one sort is chosen*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-SORT-STY-NBR == KS0HM007.KS0HM-SORT-STY-NM)
    KSWREC.XXXPRCNM = "07400"; /* module id*/
    set KS0HM007.KS0HM-SORT-STY-NBR cursor, bold; /* highlight*/
    set KS0HM007.KS0HM-SORT-STY-NM bold; /* highlight*/
    converseLib.validationFailed(132); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Print Column include Feature codes*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-COMMENTS == " ") /* field is spaces*/
    KS0HM007.KS0HM-COMMENTS = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-COMMENTS == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-COMMENTS == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-COMMENTS cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Print Column include foxing*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-COL-FOXING == " ") /* field is spaces*/
    KS0HM007.KS0HM-COL-FOXING = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-COL-FOXING == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-COL-FOXING == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-COL-FOXING cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Print Column include duty rate*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-COL-DUTY == " ") /* field is spaces*/
    KS0HM007.KS0HM-COL-DUTY = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-COL-DUTY == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-COL-DUTY == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-COL-DUTY cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Print Column include HS Nbr*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-COL-HS-NBR == " ") /* field is spaces*/
    KS0HM007.KS0HM-COL-HS-NBR = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-COL-HS-NBR == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-COL-HS-NBR == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-COL-HS-NBR cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Print Column include CF5523/typ*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-COL-CF5523 == " ") /* field is spaces*/
    KS0HM007.KS0HM-COL-CF5523 = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-COL-CF5523 == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-COL-CF5523 == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-COL-CF5523 cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Print Column include binding ruling xref code*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-COL-BRULE-XREF == " ") /* field is spaces*/
    KS0HM007.KS0HM-COL-BRULE-XREF = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-COL-BRULE-XREF == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-COL-BRULE-XREF == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-COL-BRULE-XREF cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Print Column include binding ruling*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-COL-BRULE == " ") /* field is spaces*/
    KS0HM007.KS0HM-COL-BRULE = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-COL-BRULE == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-COL-BRULE == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-COL-BRULE cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Binding Ruling Assingned*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-CO-BR-STAT == " ") /* field is spaces*/
    KS0HM007.KS0HM-CO-BR-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-CO-BR-STAT == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-CO-BR-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-CO-BR-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Tentatively Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-CO-TC-STAT == " ") /* field is spaces*/
    KS0HM007.KS0HM-CO-TC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-CO-TC-STAT == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-CO-TC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-CO-TC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Non-Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-CO-NC-STAT == " ") /* field is spaces*/
    KS0HM007.KS0HM-CO-NC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-CO-NC-STAT == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-CO-NC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-CO-NC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* verify prod status code*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-IN-OTH-STAT == " ") /* optional status spaces*/
  /* next sentence*/
  else

    if (KS0HM007.KS0HM-IN-OTH-STAT in YPRTBL.YPR-PROD-STAT-CD)
  /* next sentence                  /* status in table, then go on*/
    else /* otherwise, warning*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-IN-OTH-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(69); /* invalid status code*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Opt NO Binding Ruling*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-IN-BN-STAT == " ") /* field is spaces*/
    KS0HM007.KS0HM-IN-BN-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-IN-BN-STAT == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-IN-BN-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-IN-BN-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Sent in Binding Ruling*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-IN-SB-STAT == " ") /* field is spaces*/
    KS0HM007.KS0HM-IN-SB-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-IN-SB-STAT == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-IN-SB-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-IN-SB-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Binding Ruling Assingned*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-IN-BR-STAT == " ") /* field is spaces*/
    KS0HM007.KS0HM-IN-BR-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-IN-BR-STAT == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-IN-BR-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-IN-BR-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Tentatively Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-IN-TC-STAT == " ") /* field is spaces*/
    KS0HM007.KS0HM-IN-TC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-IN-TC-STAT == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-IN-TC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-IN-TC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Scheduled Pre-Class*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-IN-SP-STAT == " ") /* field is spaces*/
    KS0HM007.KS0HM-IN-SP-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-IN-SP-STAT == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-IN-SP-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-IN-SP-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Non-Classified*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-IN-NC-STAT == " ") /* field is spaces*/
    KS0HM007.KS0HM-IN-NC-STAT = "N"; /* move 'n'*/
  else

    if (KS0HM007.KS0HM-IN-NC-STAT == "Y" /* field is Y or N*/
     || KS0HM007.KS0HM-IN-NC-STAT == "N")
  /* next sentence                                /* continue*/
    else /* otherwise flag edit*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-IN-NC-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(66); /* field must be Y or N*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Experimental Style*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-EXP-STYLE == "Y" /* field is Y or N*/
   || KS0HM007.KS0HM-EXP-STYLE == "N" 
   || KS0HM007.KS0HM-EXP-STYLE == " ")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "07400"; /* module id*/
    set KS0HM007.KS0HM-EXP-STYLE cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Verify the Style Type Codes*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-STY-TYP-CD[1] > " ")
    if (KS0HM007.KS0HM-STY-TYP-CD[1] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-STY-TYP-CD[1] cursor, bold; /* highlight*/
      converseLib.validationFailed(70); /* field missing or invalid*/
    end
  end

  if (KS0HM007.KS0HM-STY-TYP-CD[2] > " ")
    if (KS0HM007.KS0HM-STY-TYP-CD[2] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-STY-TYP-CD[2] cursor, bold; /* highlight*/
      converseLib.validationFailed(70); /* field missing or invalid*/
    end
  end

  if (KS0HM007.KS0HM-STY-TYP-CD[3] > " ")
    if (KS0HM007.KS0HM-STY-TYP-CD[3] in YKSTBL.YKS-STY-TYP-CD
     && YKSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-STY-TYP-CD[3] cursor, bold; /* highlight*/
      converseLib.validationFailed(70); /* field missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-CTRY-CD > " ") /* If origin entered*/
    if (KS0HM007.KS0HM-CTRY-CD in XCTTBL.XCTCD /* Code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      KS0HM007.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[sysVar.arrayIndex];

    else

    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

      KSWREC.XXXPRCNM = "07400"; /* Module identification*/
      set KS0HM007.KS0HM-CTRY-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(70); /* Field missing or invalid*/

    end
  end

  /* ------------------------------------------------------------*/
  /* U.S. Made*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-US-MADE == "Y" /* field is Y or N*/
   || KS0HM007.KS0HM-US-MADE == "N" 
   || KS0HM007.KS0HM-US-MADE == " ")
  /* next sentence                         /* continue*/
  else /* otherwise flag edit*/
    KSWREC.XXXPRCNM = "07400"; /* module id*/
    set KS0HM007.KS0HM-US-MADE cursor, bold; /* highlight*/
    converseLib.validationFailed(66); /* field must be Y or N*/
  end

  /* ------------------------------------------------------------*/
  /* Check if problem code is in the table*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Errors were found*/
   || KS0HM007.KS0HM-PRBM-CD == " ")    /* or prblm is blank*/
                                  /* - skip edit*/
  else
                                  /* - skip edit*/
    if (KS0HM007.KS0HM-PRBM-CD in YKPTBL.YKP-PRBM-CD) /* in the table -*/
      KS0HW00.KS0HW-PRBM-CD = KS0HM007.KS0HM-PRBM-CD; /* save it*/

    else /* not in the table*/

      if (KS0HM007.KS0HM-PRBM-CD == KS0HW00.KS0HW-PRBM-CD) /* no change*/
      /* next sentence*/
      else /* otherwise, warning*/
        KSWREC.XXXPRCNM = "07400"; /* module id*/
        set KS0HM007.KS0HM-PRBM-CD cursor, bold; /* highlight*/
        converseLib.validationFailed(68); /* invalid problem code*/
        KS0HW00.KS0HW-PRBM-CD = KS0HM007.KS0HM-PRBM-CD; /* save it*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify PO ID month range*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-DLVR-MO == " ") /* PO ID mnth not entered*/
      /* next sentence*/
  else
    if (KS0HM007.KS0HM-DLVR-MO >= "01" /* year between 1 & 12*/
     && KS0HM007.KS0HM-DLVR-MO <= "12")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-DLVR-MO cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  if (KS0HM007.KS0HM-PRDCTN-MO == " ") /* PO ID mnth not entered*/
      /* next sentence*/
  else
    if (KS0HM007.KS0HM-PRDCTN-MO >= "01" /* year between 1 & 12*/
     && KS0HM007.KS0HM-PRDCTN-MO <= "12")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-PRDCTN-MO cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  if (KS0HM007.KS0HM-PRDCTN-YR == " "  /* PO ID year not entered*/
   && KS0HM007.KS0HM-PRDCTN-MO == "  " /* prdctn mo not entered*/
   && KS0HM007.KS0HM-DLVR-MO == "  ")  /* delivr mo not entered*/
      /* next sentence*/
  else
    if (KS0HM007.KS0HM-PRDCTN-YR >= "00" /* year between 0 & 99*/
     && KS0HM007.KS0HM-PRDCTN-YR <= "99")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-PRDCTN-YR cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the fcty code*/
  /* ------------------------------------------------------------*/

  KS0H-07420();

  /* ------------------------------------------------------------*/
  /* Verify Team Number against VCTEAM01*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-TEAM-CD == " ") /* team is spaces*/
  /* next sentence*/
  else

    KS0H-07410(); /* check if team nbr*/
                                  /* is on database*/

    if (SQLCA.VAGen_SQLCODE == +100) /* team not found*/
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-TEAM-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(20); /* team nbr invalid*/
    else /* team found*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Verify Quota Category Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-QOTA-CAT-CD == " ") /* Quota code not entered*/
    /* next sentence*/
  else
    if (KS0HM007.KS0HM-QOTA-CAT-CD in YQTTBL.YQT-QOTA-CAT-CD /* In table*/
     && YQTTBL.XXXSTAT[sysVar.arrayIndex] == "A")            /* and active*/
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-QOTA-CAT-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(58); /* Quota code invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Year*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-SESN-YR-RNG == " ") /* Season year not entered*/
  /* NEXT SENTENCE*/
  else
    if (KS0HM007.KS0HM-SESN-YR-RNG >= "00" /* year between 0 & 99*/
     && KS0HM007.KS0HM-SESN-YR-RNG <= "99")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-SESN-YR-RNG cursor, bold; /* highlight*/
      converseLib.validationFailed(26); /* team nbr invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-SESN-CD == " " /* Season code not entered*/
   && KS0HM007.KS0HM-SESN-YR-RNG == "  ") /* and sesn-yr not entered*/
  else
    if (KS0HM007.KS0HM-SESN-CD in XSETBL.XSECD) /* season code in tbl*/
  /* next sentence*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-SESN-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(27); /* season code invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Division Code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-DIV-CD > " ") /* If div-cd entered*/
    if (KS0HM007.KS0HM-DIV-CD in XDVTBL.XDVCD)
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "07400"; /* Module identification*/
      set KS0HM007.KS0HM-DIV-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(130); /* Field missing or invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Ruling Number entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-RULE-NBR > " ") /* If rule nbr entered*/
    if (KS0HM007.KS0HM-GPC-CD == "EQ")
      set VBDRUL01 empty; /* Clear record*/
      VBDRUL01.XGPCD = "02";
      VBDRUL01.KS-RULE-NBR = KS0HM007.KS0HM-RULE-NBR;
      KS0H-02401(); /* Select VBDRUL01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
        KS0HW00.KS0HW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
      else
        VBDRUL01.XGPCD = "03";
        VBDRUL01.KS-RULE-NBR = KS0HM007.KS0HM-RULE-NBR;
        KS0H-02401(); /* Select VBDRUL01 row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
          KS0HW00.KS0HW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
        else
          KSWREC.XXXPRCNM = "07400"; /* Module identification*/
          set KS0HM007.KS0HM-RULE-NBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(32); /* Field missing or invalid*/
        end
      end
    else
      set VBDRUL01 empty; /* Clear record*/
      VBDRUL01.XGPCD = KS0HM007.KS0HM-GPC-CD;
      VBDRUL01.KS-RULE-NBR = KS0HM007.KS0HM-RULE-NBR;
      KS0H-02401(); /* Select VBDRUL01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
        KS0HW00.KS0HW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
      else
        KS0HW00.KS0HW-RULE-NBR = KS0HM007.KS0HM-RULE-NBR;
        if (KS0HM007.KS0HM-GPC-CD == "02" /* If footwear;*/
         && KS0HW00.KS0HW-RULE-BYTE[5] == " ") /* if only 4 bytes long*/
          set VBDRUL01 empty; /* Clear record*/
          VBDRUL01.XGPCD = KS0HM007.KS0HM-GPC-CD;
          VBDRUL01.KS-RULE-XREF-CD = KS0HM007.KS0HM-RULE-NBR;
          KS0H-02403(); /* Select VBDRUL01 by XREF*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Rule nbr exists*/
            KS0HW00.KS0HW-RULE-NBR = VBDRUL01.KS-RULE-NBR;
          else
            KSWREC.XXXPRCNM = "07400"; /* Module identification*/
            set KS0HM007.KS0HM-RULE-NBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(32); /* Field missing or invalid*/
          end
        else
          KSWREC.XXXPRCNM = "07400"; /* Module identification*/
          set KS0HM007.KS0HM-RULE-NBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(32); /* Field missing or invalid*/
        end
      end
    end
  else
    KS0HW00.KS0HW-RULE-NBR = " ";
  end

  /* ------------------------------------------------------------*/
  /* Verify Style Number against VCPROD01*/
  /* ------------------------------------------------------------*/

  /* No verification necessary*/

  /* ------------------------------------------------------------*/
  /* Verify the HS Number entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-HTS-NBR > " ") /* If HS number entered*/
    KS0HW00.KS0HW-HTS-NUMBER = KS0HM007.KS0HM-HTS-NBR;
    KS0H-07402(); /* Verify HS format*/
  end

  /* ------------------------------------------------------------*/
  /* Verify the Market Region Code entered*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-REG-CD > " ") /* if reg-cd entered*/
    if (KS0HM007.KS0HM-REG-CD in XDRTBL.XDR-PROD-REG-CD)
         /* next sentence*/
    else
      KSWREC.XXXPRCNM = "07400"; /* module identification*/
      set KS0HM007.KS0HM-REG-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(142); /* market region invalid*/
    end
  end
  /* ------------------------------------------------------------*/
  /* Verify gpc code*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-GPC-CD in XGPTBL.XGPCD) /* gpc in the table*/
  /* /* get gpc description*/
    KS0HM007.KS0HM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else

    if (KS0HM007.KS0HM-GPC-CD == "EQ") /* gpc in the table*/
      KS0HM007.KS0HM-GPC-DESC = "EQUIPMENT";
    else
      KSWREC.XXXPRCNM = "07400"; /* module id*/
      set KS0HM007.KS0HM-GPC-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(28); /* field missing or invalid*/
      KS0HM007.KS0HM-GPC-DESC = " "; /* clear desc*/

    end
  end
  if (KS0HM007.KS0HM-GPC-CD != "02" && KS0HM007.KS0HM-GPC-CD != "EQ")
    KSWREC.XXXPRCNM = "07400"; /* module id*/
    set KS0HM007.KS0HM-GPC-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(156); /* field missing or invalid*/
    KS0HM007.KS0HM-GPC-DESC = " "; /* clear desc*/
  end
  /* ------------------------------------------------------------*/
  /* Check if printing multiple copies from the laser printer.*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* laser selected*/
   && KS0HM007.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM007.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM007.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM007.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM007.XURCOPY = 1; /* RESET TO 1 COPY*/

    else
      if (KS0HM007.XURCOPY != 01) /* Only 1 copy is allowed on xerox*/

        set KS0HM007.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "07400"; /* Module identification*/
        converseLib.validationFailed(16); /* Not authorized message*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM007.XURDEST bold; /* Highlight printer*/
    set KS0HM007.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "07400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-07400

// Check HS number format
Function KS0H-07402()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999  or  9999.99.99-99*/
  /* or  9999.99.99,99*/
  /* this routine verifies that there is a ' ' or '.' in positions*/
  /* 3 and 5 and 8. If any of the other positions contain a '.', it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors found*/

    KS0HW01.KS0HW-IXM = 1; /* initialize index*/

    while (KS0HW01.KS0HW-IXM <= 14)
      if (KS0HW01.KS0HW-IXM == 5 /* these 2 positions must be blank or*/
       || KS0HW01.KS0HW-IXM == 8) /* equal '.'. if not, it's in error*/
        if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != ".")
            KSWREC.XXXPRCNM = "07402"; /* Module id*/
            set KS0HM007.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      else
        if (KS0HW01.KS0HW-IXM == 14) /* this position must be blank*/
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
            KSWREC.XXXPRCNM = "07402"; /* Module id*/
            set KS0HM007.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        else
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == "."
           || KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == "-"
           || KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == ",")
            KSWREC.XXXPRCNM = "07402"; /* Module id*/
            set KS0HM007.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      end
      KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set index up by 1*/
    end

  /* ----------------------------------------------------------------*/
  /* Check alternate format for ftwr*/
  /* ----------------------------------------------------------------*/

    if (KS0HM007.KS0HM-GPC-CD == "02"
     && converseVar.validationMsgNum == 35) /* Error found on format*/

      converseLib.validationFailed(0); /* initialize error*/
      KS0HW01.KS0HW-IXM = 1; /* initialize index*/

      while (KS0HW01.KS0HW-IXM <= 14)
        if (KS0HW01.KS0HW-IXM == 5 /* these 3 positions must be blank or*/
         || KS0HW01.KS0HW-IXM == 8 /* equal '.'. if not, it's in error*/
         || KS0HW01.KS0HW-IXM == 11)
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
            if (KS0HW01.KS0HW-IXM == 5
             || KS0HW01.KS0HW-IXM == 8)
              if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != ".")
                KSWREC.XXXPRCNM = "07402"; /* Module id*/
                set KS0HM007.KS0HM-HTS-NBR cursor, bold;
                converseLib.validationFailed(97); /* Invalid HTS nbr*/
              end
            else
              if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != "-"
               && KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != ",")
                KSWREC.XXXPRCNM = "07402"; /* Module id*/
                set KS0HM007.KS0HM-HTS-NBR cursor, bold;
                converseLib.validationFailed(97); /* Invalid HTS nbr*/
              end
            end
          end
        else
          if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == "."
           || KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == "-"
           || KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == ",")
            KSWREC.XXXPRCNM = "07402"; /* Module id*/
            set KS0HM007.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(97); /* Invalid HTS nbr*/
          end
        end
        KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set index up by 1*/
      end
    end

  end

end // end KS0H-07402

// Verify required data
Function KS0H-07405()
  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - GPC/STYLE  OR  GPC/SESN/YR  OR  GPC/FEATURE  OR*/
  /* GPC/PO ID OR GPC/RULING OR GPC/HS*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-GPC-CD > " ") /* If GPC entered*/
    if (KS0HM007.KS0HM-GPC-CD != "02"
     && KS0HM007.KS0HM-GPC-CD != "EQ")
      if (KS0HM007.KS0HM-STY-NBR > " "       /* If style entered*/
       || KS0HM007.KS0HM-PRBM-CD > " "       /* or Feature code entered*/
       || KS0HM007.KS0HM-HTS-NBR > " "       /* or HS Number entered*/
       || KS0HM007.KS0HM-RULE-NBR > " "      /* or Rule Number entered*/
       || KS0HM007.KS0HM-STY-TYP-CD[1] > " " /* or Style Type entered*/
       || KS0HM007.KS0HM-STY-TYP-CD[2] > " " /* or Style Type entered*/
       || KS0HM007.KS0HM-STY-TYP-CD[3] > " ") /* or Style Type entered*/

      else
        if (KS0HM007.KS0HM-SESN-CD > " ") /* If season code entered*/
          if (KS0HM007.KS0HM-SESN-YR-RNG > 0) /* If season year entered*/

          else

            set KS0HM007.KS0HM-SESN-YR-RNG cursor, bold;
            KSWREC.XXXPRCNM = "07405"; /* Module identification*/
            converseLib.validationFailed(26); /* Data is required message*/
          end

        else
          set KS0HM007.KS0HM-STY-NBR cursor, bold;
          set KS0HM007.KS0HM-SESN-CD bold;
          set KS0HM007.KS0HM-SESN-YR-RNG bold;
          set KS0HM007.KS0HM-HTS-NBR bold;
          set KS0HM007.KS0HM-PRBM-CD bold;
          set KS0HM007.KS0HM-RULE-NBR bold;
          set KS0HM007.KS0HM-PRDCTN-YR bold;
          set KS0HM007.KS0HM-PRDCTN-MO bold;
          set KS0HM007.KS0HM-DLVR-MO bold;
          set KS0HM007.KS0HM-STY-TYP-CD[1] bold;
          set KS0HM007.KS0HM-STY-TYP-CD[2] bold;
          set KS0HM007.KS0HM-STY-TYP-CD[3] bold;
          KSWREC.XXXPRCNM = "07405"; /* Module identification*/
          converseLib.validationFailed(146); /* Data is required message*/
        end
      end
      if (KS0HM007.KS0HM-PRDCTN-YR > 0    /* PO ID year entered*/
       || KS0HM007.KS0HM-PRDCTN-MO > "00" /* PO ID mth entered*/
       || KS0HM007.KS0HM-DLVR-MO > "00"   /* PO ID deliver mth entered*/
       || KS0HM007.KS0HM-FCTY-CD > " ")   /* Factory code entered*/
        set KS0HM007.KS0HM-PRDCTN-YR cursor, bold;
        set KS0HM007.KS0HM-PRDCTN-MO bold;
        set KS0HM007.KS0HM-DLVR-MO bold;
        set KS0HM007.KS0HM-FCTY-CD bold;
        KSWREC.XXXPRCNM = "07405"; /* Module identification*/
        converseLib.validationFailed(112); /* PO ID invalid for GPC*/
      end
    else
      if (KS0HM007.KS0HM-PRDCTN-YR > " ")
        if (KS0HM007.KS0HM-PRDCTN-MO > "00")
          if (KS0HM007.KS0HM-DLVR-MO > "00")
            if (KS0HM007.KS0HM-FCTY-CD > " "
             || KS0HM007.KS0HM-CTRY-CD > " ")
            else
              set KS0HM007.KS0HM-FCTY-CD cursor, bold;
              set KS0HM007.KS0HM-CTRY-CD bold;
              KSWREC.XXXPRCNM = "07405"; /* Module identification*/
              converseLib.validationFailed(113); /* Data is required message*/
            end
          else
            set KS0HM007.KS0HM-PRDCTN-YR bold;
            set KS0HM007.KS0HM-PRDCTN-MO bold;
            set KS0HM007.KS0HM-DLVR-MO cursor, bold;
            KSWREC.XXXPRCNM = "07405"; /* Module identification*/
            converseLib.validationFailed(114); /* PO ID is missing or invalid*/
          end
        else
          set KS0HM007.KS0HM-PRDCTN-YR bold;
          set KS0HM007.KS0HM-PRDCTN-MO cursor, bold;
          set KS0HM007.KS0HM-DLVR-MO bold;
          KSWREC.XXXPRCNM = "07405"; /* Module identification*/
          converseLib.validationFailed(114); /* PO ID is missing or invalid*/
        end
      else
        if (KS0HM007.KS0HM-STY-NBR > " "       /* If style entered*/
         || KS0HM007.KS0HM-PRBM-CD > " "       /* or Feature code entered*/
         || KS0HM007.KS0HM-HTS-NBR > " "       /* or HS Number entered*/
         || KS0HM007.KS0HM-RULE-NBR > " "      /* or Rule Number entered*/
         || KS0HM007.KS0HM-STY-TYP-CD[1] > " " /* or Style Type entered*/
         || KS0HM007.KS0HM-STY-TYP-CD[2] > " " /* or Style Type entered*/
         || KS0HM007.KS0HM-STY-TYP-CD[3] > " ") /* or Style Type entered*/

        else
          if (KS0HM007.KS0HM-SESN-CD > " ") /* If season code entered*/
            if (KS0HM007.KS0HM-SESN-YR-RNG >= "00") /* If season year entered*/

            else

              set KS0HM007.KS0HM-SESN-YR-RNG cursor, bold;
              KSWREC.XXXPRCNM = "07405"; /* Module identification*/
              converseLib.validationFailed(26); /* Data is required message*/
            end

          else
            if (KS0HM007.KS0HM-SESN-YR-RNG >= "00") /* If season year entered*/
              if (KS0HM007.KS0HM-SESN-CD > " ") /* If season code entered*/

              else

                set KS0HM007.KS0HM-SESN-CD cursor, bold;
                KSWREC.XXXPRCNM = "07405"; /* Module identification*/
                converseLib.validationFailed(27); /* Data is required message*/
              end

            end
          end
        end

      end


    end
  else
    set KS0HM007.KS0HM-GPC-CD cursor, bold;
    set KS0HM007.KS0HM-STY-NBR bold;
    set KS0HM007.KS0HM-SESN-CD bold;
    set KS0HM007.KS0HM-SESN-YR-RNG bold;
    set KS0HM007.KS0HM-HTS-NBR bold;
    set KS0HM007.KS0HM-PRBM-CD bold;
    set KS0HM007.KS0HM-RULE-NBR bold;
    set KS0HM007.KS0HM-PRDCTN-YR bold;
    set KS0HM007.KS0HM-PRDCTN-MO bold;
    set KS0HM007.KS0HM-DLVR-MO bold;
    set KS0HM007.KS0HM-STY-TYP-CD[1] bold;
    set KS0HM007.KS0HM-STY-TYP-CD[2] bold;
    set KS0HM007.KS0HM-STY-TYP-CD[3] bold;
    KSWREC.XXXPRCNM = "07405"; /* Module identification*/
    converseLib.validationFailed(146); /* Data is required message*/
    exit stack; /* redisplay map*/
  end


end // end KS0H-07405

// Select row for editing
Function KS0H-07410()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  set VCTEAM01 empty; /* Clear row storage area*/

  VCTEAM01.KS-TEAM-CD = KS0HM007.KS0HM-TEAM-CD; /* team nbr*/

  try
    call "IO6060" ("S ", SQLCA, VCTEAM01) {isNoRefresh = yes, isExternal = yes};
  end

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KSWREC.XXXPRCNM = "07410"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FOR EDITING       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCTEAM01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCTEAM01.KS-TEAM-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KS0H-07410

// verify factory code
Function KS0H-07420()
  /* ------------------------------------------------------------*/
  /* Verify the factory code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM007.KS0HM-FCTY-CD > " ")

    if (KS0HM007.KS0HM-GPC-CD == "EQ")
      FY1REC.XGPCD = "02";
      FY1REC.FY1FCTYC = KS0HM007.KS0HM-FCTY-CD;
      KS0H-05421(); /* select factory row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
          /* next sentence*/
      else
        FY1REC.XGPCD = "03";
        FY1REC.FY1FCTYC = KS0HM007.KS0HM-FCTY-CD;
        KS0H-05421(); /* select factory row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
            /* next sentence*/
        else
          set KS0HM007.KS0HM-FCTY-CD cursor, bold;
          converseLib.validationFailed(98);
          KSWREC.XXXPRCNM = "07420";
        end
      end
    else
      FY1REC.XGPCD = KS0HM007.KS0HM-GPC-CD;
      FY1REC.FY1FCTYC = KS0HM007.KS0HM-FCTY-CD;
      KS0H-05421(); /* select factory row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
        /* next sentence*/
      else
        set KS0HM007.KS0HM-FCTY-CD cursor, bold;
        converseLib.validationFailed(98);
        KSWREC.XXXPRCNM = "07420";
      end
    end
  end

end // end KS0H-07420

// Process valid input request
Function KS0H-07500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/
    KS0H-07510(); /* format development jcl*/
  else
    if (TA6REC.XURDEST != "LOCAL ")
      KS0H-07520(); /* format production jcl*/
    else
      KS0H-07530(); /* format bundle print*/
    end
  end


end // end KS0H-07500

// Format and submit devel jcl
Function KS0H-07510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTF2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-07511(); /* Format parm 1*/

    else

      /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      if (KS0HTF2.TARTYPE[TA6INDEX] == "Q") /* 2ND PARM*/

        KS0H-07512(); /* Format parm 2*/

      else

        if (KS0HTF2.TARTYPE[TA6INDEX] == "&") /* 3rd PARM*/

          KS0H-07513(); /* Format parm 3*/

        else

      /* ------------------------------------------------------------*/
      /* Format the EXEC Proc line depending on the sort selected*/
      /* ------------------------------------------------------------*/

          if (KS0HTF2.TARTYPE[TA6INDEX] == "+") /* EXEC stmt*/

            if (KS0HM007.KS0HM-SORT-STY-NBR == "Y")
              TA6REC.TARJCL[TA6INDEX] = KS0HTF2.TARJCL[TA6INDEX];
                                   /* JCL*/
            else
              TA6REC.TARJCL[TA6INDEX] = "//S0010   EXEC KS1202,";
            end

          else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = KS0HTF2.TARJCL[TA6INDEX]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = KS0HTF2.TARTYPE[TA6INDEX];
                                   /* Typ*/

          end

        end

      end

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTF2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "07510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[7] = "*"; /* Indicate function completed*/

    set KS0HM007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-07510

// Format Parm 1 for jcl
Function KS0H-07511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW07 empty; /* Parameters work area*/

  KS0HW-W7-GPC-CD = KS0HM007.KS0HM-GPC-CD; /* GPC-CD*/
  KS0HW-W7-GPC-DESC = KS0HM007.KS0HM-GPC-DESC; /* GPC-DESC*/
  KS0HW-W7-DIV-CD = KS0HM007.KS0HM-DIV-CD; /* DIV-CD*/
  KS0HW00.KS0HW-HTS-NUMBER = KS0HM007.KS0HM-HTS-NBR;
  KS0HW00.KS0HW-HTS-NBR = KS0HM007.KS0HM-HTS-NBR;
  KS0HW-W7-HTS-CPTR-CD = KS0HW00.KS0HW-HTS-CPTR-CD;
  KS0HW-W7-HTS-HDG-CD = KS0HW00.KS0HW-HTS-HDG-CD;
  KS0HW-W7-HTS-1ST-SHDG-CD = KS0HW00.KS0HW-HTS-1ST-SHDG-CD;
  KS0HW-W7-HTS-2ND-SHDG-CD1 = KS0HW00.KS0HW-HTS-2ND-SHDG-CD1;
  if (KS0HW00.KS0HW-HTS-BYTE[11] != "-"
   && KS0HW00.KS0HW-HTS-BYTE[11] != ",")
    KS0HW-W7-HTS-2ND-SHDG-CD2 = " ";
    KS0HW-W7-HTS-STAT-CD = KS0HW00.KS0HW-HTS-STAT-CD;
    KS0HW-W7-HTS-RNG-FL = "N";
  else
    KS0HW07.KS0HW-W7-HTS-2ND-SHDG-CD21 = KS0HW00.KS0HW-HTS-BYTE[12];
    KS0HW07.KS0HW-W7-HTS-2ND-SHDG-CD22 = KS0HW00.KS0HW-HTS-BYTE[13];
    KS0HW-W7-HTS-STAT-CD = " ";
    if (KS0HW00.KS0HW-HTS-BYTE[11] == "-")
      KS0HW-W7-HTS-RNG-FL = "Y";
    else
      if (KS0HW00.KS0HW-HTS-BYTE[11] == ",")
        KS0HW-W7-HTS-RNG-FL = "N";
      end
    end
  end
  KS0HW-W7-STY-NBR = KS0HM007.KS0HM-STY-NBR;
  KS0HW-W7-COLR-CD = KS0HM007.KS0HM-COLR-CD-ID;
  KS0HW-W7-DIM-CD = KS0HM007.KS0HM-DIM-CD;
  KS0HW-W7-RULE-NBR = KS0HW00.KS0HW-RULE-NBR;
  KS0HW-W7-SESN-CD = KS0HM007.KS0HM-SESN-CD; /* SEASON*/
  KS0HW00.KS0HW-YEAR-YY = KS0HM007.KS0HM-SESN-YR-RNG;

  if (KS0HM007.KS0HM-SESN-YR-RNG == " ") /* If season year not entered*/
    KS0HW00.KS0HW-YEAR-CC = 00;
  else
    if (KS0HM007.KS0HM-SESN-YR-RNG > "49")
      KS0HW00.KS0HW-YEAR-CC = 19;
    else
      KS0HW00.KS0HW-YEAR-CC = 20;
    end
  end

  KS0HW-W7-SESN-YR-RNG = KS0HW00.KS0HW-YEAR;
  KS0HW-W7-TEAM-CD = KS0HM007.KS0HM-TEAM-CD;
  KS0HW-W7-PRDCTN-YR = KS0HM007.KS0HM-PRDCTN-YR;
  KS0HW-W7-PRDCTN-MO = KS0HM007.KS0HM-PRDCTN-MO;
  KS0HW-W7-DLVR-MO = KS0HM007.KS0HM-DLVR-MO;
  KS0HW-W7-FCTY-CD = KS0HM007.KS0HM-FCTY-CD;
  KS0HW-W7-PROB-CD = KS0HM007.KS0HM-PRBM-CD;
  KS0HW-W7-US-MADE = KS0HM007.KS0HM-US-MADE;

  TA6REC.TARJCL[TA6INDEX] = KS0HW-W7-PARM-REC-1; /* Parameters*/


end // end KS0H-07511

// Format Parm 2 for jcl
Function KS0H-07512()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW07 empty; /* Parameters work area*/

  KS0HW-W7-CTRY-CD = KS0HM007.KS0HM-CTRY-CD;
  KS0HW-W7-EXP-STYLE = KS0HM007.KS0HM-EXP-STYLE;

  if (KS0HM007.KS0HM-IN-NC-STAT == "Y")
    KS0HW-W7-IN-NC-STAT = "NC";
  else
    KS0HW-W7-IN-NC-STAT = "  ";
  end

  if (KS0HM007.KS0HM-IN-SP-STAT == "Y")
    KS0HW-W7-IN-SP-STAT = "SP";
  else
    KS0HW-W7-IN-SP-STAT = "  ";
  end

  if (KS0HM007.KS0HM-IN-TC-STAT == "Y")
    KS0HW-W7-IN-TC-STAT = "TC";
  else
    KS0HW-W7-IN-TC-STAT = "  ";
  end

  if (KS0HM007.KS0HM-IN-BR-STAT == "Y")
    KS0HW-W7-IN-BR-STAT = "BR";
  else
    KS0HW-W7-IN-BR-STAT = "  ";
  end

  if (KS0HM007.KS0HM-IN-SB-STAT == "Y")
    KS0HW-W7-IN-SB-STAT = "SB";
  else
    KS0HW-W7-IN-SB-STAT = "  ";
  end

  if (KS0HM007.KS0HM-IN-BN-STAT == "Y")
    KS0HW-W7-IN-BN-STAT = "BN";
  else
    KS0HW-W7-IN-BN-STAT = "  ";
  end

  KS0HW-W7-IN-OTH-STAT = KS0HM007.KS0HM-IN-OTH-STAT;

  KS0HW-W7-CO-NC-STAT = KS0HM007.KS0HM-CO-NC-STAT;
  KS0HW-W7-CO-TC-STAT = KS0HM007.KS0HM-CO-TC-STAT;
  KS0HW-W7-CO-BR-STAT = KS0HM007.KS0HM-CO-BR-STAT;

  KS0HW-W7-SORT-STY-NBR = KS0HM007.KS0HM-SORT-STY-NBR;
  KS0HW-W7-SORT-STY-NM = KS0HM007.KS0HM-SORT-STY-NM;

  KS0HW-W7-RPT-TITLE = KS0HM007.KS0HM-RPT-TITLE;
  KS0HW-W7-USERID = COMMAREA.CAUSERID;

  /* ----------------------------------------------------------------*/
  /* Move number of copies into parameters if local printer selected*/
  /* and in production.*/
  /* ----------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* If local printer selected*/
   && TA3REC.TA3RGNID == "03")   /* In PRODUCTION region*/

    KS0HW07.KS0HW-W7-LOCAL-COPIES = KS0HM007.XURCOPY;
  else

    KS0HW07.KS0HW-W7-LOCAL-COPIES = 00;
  end

  TA6REC.TARJCL[TA6INDEX] = KS0HW07.KS0HW-W7-PARM-REC-2;


end // end KS0H-07512

// Format Parm 3 for jcl
Function KS0H-07513()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW07 empty; /* Parameters work area*/

  KS0HW-W7-STY-TYP-CD1 = KS0HM007.KS0HM-STY-TYP-CD[1];
  KS0HW-W7-STY-TYP-CD2 = KS0HM007.KS0HM-STY-TYP-CD[2];
  KS0HW-W7-STY-TYP-CD3 = KS0HM007.KS0HM-STY-TYP-CD[3];

  KS0HW-W7-COL-BRULE = KS0HM007.KS0HM-COL-BRULE;
  KS0HW-W7-COL-BRULE-XREF = KS0HM007.KS0HM-COL-BRULE-XREF;
  KS0HW-W7-COL-CF5523 = KS0HM007.KS0HM-COL-CF5523;
  KS0HW-W7-COL-HS-NBR = KS0HM007.KS0HM-COL-HS-NBR;
  KS0HW-W7-COL-DUTY = KS0HM007.KS0HM-COL-DUTY;
  KS0HW-W7-COL-FOXING = KS0HM007.KS0HM-COL-FOXING;
  KS0HW-W7-COMMENTS = KS0HM007.KS0HM-COMMENTS;
  KS0HW-W7-PROD-REG-CD = KS0HM007.KS0HM-REG-CD;
  KS0HW-W7-QOTA-CAT-CD = KS0HM007.KS0HM-QOTA-CAT-CD;


  TA6REC.TARJCL[TA6INDEX] = KS0HW07.KS0HW-W7-PARM-REC-3;


end // end KS0H-07513

// Format and submit prod jcl
Function KS0H-07520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTF1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-07511(); /* Format parm 1*/

    else

      /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      if (KS0HTF1.TARTYPE[TA6INDEX] == "Q") /* 2ND PARM*/

        KS0H-07512(); /* Format parm 2*/

      else

        if (KS0HTF1.TARTYPE[TA6INDEX] == "&") /* 3rd PARM*/

          KS0H-07513(); /* Format parm 3*/

        else

      /* -----------------------------------------------------*/
      /* Format the EXEC stmt depending on the sort chosen.*/
      /* -----------------------------------------------------*/

          if (KS0HTF1.TARTYPE[TA6INDEX] == "+") /* EXEC stmt*/

            if (KS0HM007.KS0HM-SORT-STY-NBR == "Y")
              TA6REC.TARJCL[TA6INDEX] = KS0HTF1.TARJCL[TA6INDEX];
            else
              TA6REC.TARJCL[TA6INDEX] = "//S0010   EXEC KS1202";
            end


          else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = KS0HTF1.TARJCL[TA6INDEX]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = KS0HTF1.TARTYPE[TA6INDEX];
                                   /* Typ*/

          end

        end

      end

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTF1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "07520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[7] = "*"; /* Indicate function completed*/

    set KS0HM007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-07520

// Format and submit bundle jcl
Function KS0H-07530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTF3.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-07511(); /* Format parm 1*/

    else

      /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      if (KS0HTF3.TARTYPE[TA6INDEX] == "Q") /* 2ND PARM*/

        KS0H-07512(); /* Format parm 2*/

      else

        if (KS0HTF3.TARTYPE[TA6INDEX] == "&") /* 3rd PARM*/

          KS0H-07513(); /* Format parm 3*/

        else

        /* ---------------------------------------------------*/
        /* Format the EXEC stmt depending on the sort chosen.*/
        /* ---------------------------------------------------*/

          if (KS0HTF3.TARTYPE[TA6INDEX] == "+") /* EXEC stmt*/

            if (KS0HM007.KS0HM-SORT-STY-NBR == "Y")
              TA6REC.TARJCL[TA6INDEX] = KS0HTF3.TARJCL[TA6INDEX];
            else
              TA6REC.TARJCL[TA6INDEX] = "//S0010   EXEC KS1202";
            end

          else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = KS0HTF3.TARJCL[TA6INDEX]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = KS0HTF3.TARTYPE[TA6INDEX];
                                   /* Typ*/

          end

        end

      end

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTF3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "07530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[7] = "*"; /* Indicate function completed*/

    set KS0HM007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-07530

// Quota Cat by Country Report
Function KS0H-08000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-08100(); /* Format and display the map*/

  KS0H-08200(); /* Check attention identifier*/

  KS0H-08300(); /* Reset fields to normal intensity*/

  KS0H-08400(); /* Verify the data that was entered*/

  KS0H-08500(); /* Process valid input request*/


end // end KS0H-08000

// Format and display the map
Function KS0H-08100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM008 initial; /* Clear map*/
      KS0HM008.KS0HM-GPC-CD = "03";
      KS0HM008.KS0HM-REG-CD = "01";
      KS0HW00.KS0HW-IDX = 1;
      while (KS0HW00.KS0HW-IDX <= 30
       && XDRTBL.XDR-PROD-REG-CD[KS0HW-IDX] != "99")
        if (XDRTBL.XDR-PROD-REG-CD[KS0HW-IDX] == KS0HM008.KS0HM-REG-CD)
          KS0HM008.KS0HM-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[KS0HW-IDX];
          KS0HW00.KS0HW-IDX = 31;
        else
          KS0HW00.KS0HW-IDX = KS0HW00.KS0HW-IDX + 1;
        end
      end
      set KS0HM008.KS0HM-SESN-CD cursor; /* Set the cursor*/

      KS0HM008.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM008.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM008.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM008.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM008.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM008.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM008.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM008.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM008 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM008 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-08100

// Check attention identifier
Function KS0H-08200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[8] = "C"; /* Indicate selection cancelled*/

    set KS0HM008 initial; /* M008 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "08200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-08200

// Reset highlighted fields
Function KS0H-08300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM008.XURCOPY initialAttributes; /* Number copies*/
  set KS0HM008.KS0HM-GPC-CD initialAttributes; /* gpc code*/
  set KS0HM008.KS0HM-SESN-CD initialAttributes; /* season code*/
  set KS0HM008.KS0HM-SESN-YR-RNG initialAttributes; /* season year*/
  set KS0HM008.KS0HM-DIV-CD initialAttributes; /* Division code*/
  set KS0HM008.KS0HM-QOTA-CAT-CD initialAttributes; /* Quota Category code*/
  set KS0HM008.KS0HM-CTRY-CD initialAttributes; /* Country code*/
  set KS0HM008.KS0HM-REG-CD initialAttributes; /* market region code*/

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (KS0HM008.KS0HM-GPC-CD == "?" /* if any ? entered*/
   || KS0HM008.KS0HM-DIV-CD == "?" 
   || KS0HM008.KS0HM-SESN-CD == "?"
   || KS0HM008.KS0HM-QOTA-CAT-CD == "?"
   || KS0HM008.KS0HM-CTRY-CD == "?"
   || KS0HM008.KS0HM-REG-CD == "?")

    if (KS0HM008.KS0HM-GPC-CD == "?") /* if ? entered in gpc*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM008.KS0HM-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        KS0HM008.KS0HM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
        set KS0HM008.KS0HM-SESN-CD cursor; /* put cursor on field*/
      else
        KS0HM008.KS0HM-GPC-CD = " "; /* clear fields*/
        KS0HM008.KS0HM-GPC-DESC = " "; /* clear description*/
        set KS0HM008.KS0HM-GPC-CD cursor; /* put cursor on gpc cd*/
      end
    end

    if (KS0HM008.KS0HM-DIV-CD == "?") /* if ? entered in div*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "          DIVISION CODE      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDV02(); /* perform div window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM008.KS0HM-DIV-CD = XDVTBL.XDVCD[XX0XWPIX];
        KS0HM008.KS0HM-DIV-DESC = XDVTBL.XDVDESC[XX0XWPIX];
        set KS0HM008.KS0HM-QOTA-CAT-CD cursor; /* put cursor on quota*/
      else
        KS0HM008.KS0HM-DIV-CD = " "; /* clear fields*/
        KS0HM008.KS0HM-DIV-DESC = " ";
        set KS0HM008.KS0HM-DIV-CD cursor; /* put cursor on div cd*/
      end
    end

    if (KS0HM008.KS0HM-SESN-CD == "?") /* if ? in season field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 SEASON      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSE01(); /* perform season window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the season     **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM008.KS0HM-SESN-CD = XSETBL.XSECD[XX0XWPIX];
        set KS0HM008.KS0HM-SESN-YR-RNG cursor; /* put cursor on sesn yr*/
      else
        KS0HM008.KS0HM-SESN-CD = " "; /* clear fields*/
        set KS0HM008.KS0HM-SESN-CD cursor; /* put cursor on sesn cd*/
      end
    end

    if (KS0HM008.KS0HM-QOTA-CAT-CD == "?") /* if ? entered in quota*/
      XPXX001(); /* perform pop-up-window*/
      XX0XW02.XX0XWHDR = "      QUOTA CATEGORY CODE   ";

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYQT01(); /* perform gpc window*/
      end

       /* *******************************************************/
       /* *  If the pass index is greater than zero, use the   **/
       /* *  passed table index 'xx0xwpix' to move the quota   **/
       /* *  code to the map.                                  **/
       /* *******************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM008.KS0HM-QOTA-CAT-CD = YQTTBL.YQT-QOTA-CAT-CD[XX0XWPIX];
        KS0HM008.KS0HM-QOTA-CAT-DESC = YQTTBL.YQT-QOTA-CAT-SDESC[XX0XWPIX];
        set KS0HM008.KS0HM-CTRY-CD cursor; /* put cursor on ctry code*/
      else
        KS0HM008.KS0HM-QOTA-CAT-CD = " "; /* clear fields*/
        KS0HM008.KS0HM-QOTA-CAT-DESC = " ";
        set KS0HM008.KS0HM-QOTA-CAT-CD cursor; /* put cursor on quota*/
      end
    end

    if (KS0HM008.KS0HM-CTRY-CD == "?") /* if ? in ctry code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM008.KS0HM-CTRY-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        KS0HM008.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move desc*/
        set KS0HM008.KS0HM-CTRY-CD cursor; /* Set cursor*/
      else
        KS0HM008.KS0HM-CTRY-CD = " "; /* clear fields*/
        KS0HM008.KS0HM-CTRY-DESC = " ";
        set KS0HM008.KS0HM-CTRY-CD cursor; /* Set cursor*/
      end
    end

    if (KS0HM008.KS0HM-REG-CD == "?") /* if ? entered in market region*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "           MARKET REGION     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDR01(); /* perform market region window*/
      end

      /* **************************************************************/
      /* *   If the pass index is greater than zero, use the         **/
      /* *   passed table index 'XX0XWPIX' to move the market region **/
      /* *   code to the map.                                        **/
      /* **************************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM008.KS0HM-REG-CD = XDRTBL.XDR-PROD-REG-CD[XX0XWPIX];
        KS0HM008.KS0HM-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[XX0XWPIX];
      else
        KS0HM008.KS0HM-REG-CD = " "; /* clear fields*/
        KS0HM008.KS0HM-REG-SDESC = " "; /* clear description*/
      end
      set KS0HM008.KS0HM-REG-CD cursor; /* put cursor on market region cd*/
    end

    converseLib.clearScreen();
     /* restore the original map*/

    KS0HW00.KS0HW-SWR = "N"; /* no to request for data*/
    KS0HW00.KS0HW-SWF = "N"; /* no to format map*/
    KS0HW00.KS0HW-POP-UP = "Y"; /* indicate pop-up window*/

    exit stack; /* go display map*/

  end


end // end KS0H-08300

// Verify the entered data
Function KS0H-08400()
  /* ------------------------------------------------------------*/
  /* If a required field was not entered, indicate that it is*/
  /* missing or invalid.*/
  /* ------------------------------------------------------------*/

  KS0H-08405(); /* Verify required data entered*/

  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/

  if (KS0HM008.KS0HM-CTRY-CD > " ") /* If origin entered*/
    if (KS0HM008.KS0HM-CTRY-CD in XCTTBL.XCTCD /* Code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      KS0HM008.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[sysVar.arrayIndex];

    else

    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

      KSWREC.XXXPRCNM = "08400"; /* Module identification*/
      set KS0HM008.KS0HM-CTRY-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(70); /* Field missing or invalid*/
      KS0HM008.KS0HM-CTRY-DESC = " ";

    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Quota Category Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM008.KS0HM-QOTA-CAT-CD == " ") /* Quota code not entered*/
    /* next sentence*/
  else
    if (KS0HM008.KS0HM-QOTA-CAT-CD in YQTTBL.YQT-QOTA-CAT-CD /* In table*/
     && YQTTBL.XXXSTAT[sysVar.arrayIndex] == "A")            /* and active*/
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "08400"; /* module id*/
      set KS0HM008.KS0HM-QOTA-CAT-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(58); /* Quota code invalid*/
      KS0HM008.KS0HM-QOTA-CAT-DESC = " ";
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify the Division Code entered.*/
  /* ------------------------------------------------------------*/

  if (KS0HM008.KS0HM-DIV-CD > " ") /* If div-cd entered*/
    if (KS0HM008.KS0HM-DIV-CD in XDVTBL.XDVCD)
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "08400"; /* Module identification*/
      set KS0HM008.KS0HM-DIV-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(130); /* Field missing or invalid*/
      KS0HM008.KS0HM-DIV-DESC = " ";
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Year*/
  /* ------------------------------------------------------------*/

  if (KS0HM008.KS0HM-SESN-YR-RNG == " ") /* Season year not entered*/
  /* NEXT SENTENCE*/
  else
    if (KS0HM008.KS0HM-SESN-YR-RNG >= "00" /* year between 0 & 99*/
     && KS0HM008.KS0HM-SESN-YR-RNG <= "99")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "08400"; /* module id*/
      set KS0HM008.KS0HM-SESN-YR-RNG cursor, bold; /* highlight*/
      converseLib.validationFailed(26); /* team nbr invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM008.KS0HM-SESN-CD == " " /* Season code not entered*/
   && KS0HM008.KS0HM-SESN-YR-RNG == "  ") /* and sesn-yr not entered*/
  else
    if (KS0HM008.KS0HM-SESN-CD in XSETBL.XSECD) /* season code in tbl*/
  /* next sentence*/
    else
      KSWREC.XXXPRCNM = "08400"; /* module id*/
      set KS0HM008.KS0HM-SESN-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(27); /* season code invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify gpc code*/
  /* ------------------------------------------------------------*/

  if (KS0HM008.KS0HM-GPC-CD in XGPTBL.XGPCD) /* gpc in the table*/
  /* /* get gpc description*/
    KS0HM008.KS0HM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    if (KS0HM008.KS0HM-GPC-CD == "EQ") /* equipment*/
      KS0HM008.KS0HM-GPC-DESC = "EQUIPMENT";
    else
      KSWREC.XXXPRCNM = "08400"; /* module id*/
      set KS0HM008.KS0HM-GPC-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(147); /* field missing or invalid*/
      KS0HM008.KS0HM-GPC-DESC = " "; /* clear desc*/
    end
  end
  if (KS0HM008.KS0HM-GPC-CD != "03" && KS0HM008.KS0HM-GPC-CD != "EQ")
    KSWREC.XXXPRCNM = "08400"; /* module id*/
    set KS0HM008.KS0HM-GPC-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(155); /* field missing or invalid*/
    KS0HM008.KS0HM-GPC-DESC = " "; /* clear desc*/
  end

  /* -------------------------------------------------------------*/
  /* Verify the Market Region Code entered*/
  /* -------------------------------------------------------------*/

  if (KS0HM008.KS0HM-REG-CD > " ") /* if reg-cd entered*/
    if (KS0HM008.KS0HM-REG-CD in XDRTBL.XDR-PROD-REG-CD)
          /* next sentence*/
    else
      KSWREC.XXXPRCNM = "08400"; /* module identification*/
      set KS0HM008.KS0HM-REG-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(142); /* market region invalid*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Check if printing multiple copies from the laser printer.*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* laser selected*/
   && KS0HM008.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM008.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM008.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM008.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM008.XURCOPY = 1; /* RESET TO 1 COPY*/

    else
      if (KS0HM008.XURCOPY != 01) /* Only 1 copy is allowed on xerox*/

        set KS0HM008.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "08400"; /* Module identification*/
        converseLib.validationFailed(16); /* Not authorized message*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM008.XURDEST bold; /* Highlight printer*/
    set KS0HM008.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "08400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-08400

// Verify required data
Function KS0H-08405()
  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - GPC*/
  /* ------------------------------------------------------------*/

  if (KS0HM008.KS0HM-GPC-CD > " ") /* If GPC entered*/
  else
    set KS0HM008.KS0HM-GPC-CD cursor, bold;
    KSWREC.XXXPRCNM = "08405"; /* Module identification*/
    converseLib.validationFailed(147); /* Data is required message*/
    exit stack; /* redisplay map*/
  end


end // end KS0H-08405

// Process valid input request
Function KS0H-08500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/
    KS0H-08510(); /* format development jcl*/
  else
    if (TA6REC.XURDEST != "LOCAL ")
      KS0H-08520(); /* format production jcl*/
    else
      KS0H-08530(); /* format bundle print*/
    end
  end


end // end KS0H-08500

// Format and submit devel jcl
Function KS0H-08510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTG2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-08511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTG2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTG2.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTG2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "08510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[8] = "*"; /* Indicate function completed*/

    set KS0HM008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-08510

// Format Parm for jcl
Function KS0H-08511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW08 empty; /* Parameters work area*/

  KS0HW-W8-GPC-CD = KS0HM008.KS0HM-GPC-CD; /* GPC*/
  KS0HW-W8-SESN-CD = KS0HM008.KS0HM-SESN-CD; /* SEASON*/
  KS0HW00.KS0HW-YEAR-YY = KS0HM008.KS0HM-SESN-YR-RNG;

  if (KS0HM008.KS0HM-SESN-YR-RNG == " ") /* If season year not entered*/
    KS0HW00.KS0HW-YEAR-CC = 00;
  else
    if (KS0HM008.KS0HM-SESN-YR-RNG > "49")
      KS0HW00.KS0HW-YEAR-CC = 19;
    else
      KS0HW00.KS0HW-YEAR-CC = 20;
    end
  end

  KS0HW-W8-SESN-YR-RNG = KS0HW00.KS0HW-YEAR;
  KS0HW-W8-DIV-CD = KS0HM008.KS0HM-DIV-CD; /* DIV-CD*/
  KS0HW-W8-QOTA-CAT-CD = KS0HM008.KS0HM-QOTA-CAT-CD;
  KS0HW-W8-CTRY-CD = KS0HM008.KS0HM-CTRY-CD;
  /* ----------------------------------------------------------------*/
  /* Move number of copies into parameters if local printer selected*/
  /* and in production.*/
  /* ----------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* If local printer selected*/
   && TA3REC.TA3RGNID == "03")   /* In PRODUCTION region*/

    KS0HW08.KS0HW-W8-LOCAL-COPIES = KS0HM008.XURCOPY;

  else

    KS0HW08.KS0HW-W8-LOCAL-COPIES = 00;

  end
  KS0HW08.KS0HW-W8-USERID = COMMAREA.CAUSERID;
  KS0HW-W8-PROD-REG-CD = KS0HM008.KS0HM-REG-CD;

  TA6REC.TARJCL[TA6INDEX] = KS0HW-W8-PARM-REC; /* Parameters*/


end // end KS0H-08511

// Format and submit prod jcl
Function KS0H-08520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTG1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-08511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTG1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTG1.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTG1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "08520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[8] = "*"; /* Indicate function completed*/

    set KS0HM008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-08520

// Format and submit bundle jcl
Function KS0H-08530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTG3.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-08511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTG3.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTG3.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTG3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "08530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[8] = "*"; /* Indicate function completed*/

    set KS0HM008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-08530

// Quota Cat by Country Report
Function KS0H-09000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-09100(); /* Format and display the map*/

  KS0H-09200(); /* Check attention identifier*/

  KS0H-09300(); /* Reset fields to normal intensity*/

  KS0H-09400(); /* Verify the data that was entered*/

  KS0H-09500(); /* Process valid input request*/


end // end KS0H-09000

// Format and display the map
Function KS0H-09100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM009 initial; /* Clear map*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date.*/
  /* ------------------------------------------------------------*/

  KS0HM009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM009.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM009.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM009 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM009 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-09100

// Check attention identifier
Function KS0H-09200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[9] = "C"; /* Indicate selection cancelled*/

    set KS0HM009 initial; /* M009 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "09200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-09200

// Reset highlighted fields
Function KS0H-09300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

   /* *** none exist to reset *****/

end // end KS0H-09300

// Verify the entered data
Function KS0H-09400()
  /* ------------------------------------------------------------*/
  /* Check to see if client has adequate authority to submit*/
  /* this refresh.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAILVL[10] == "N") /* If not granted Customs auth.*/
    KSWREC.XXXPRCNM = "09400"; /* Module identification*/
    converseLib.validationFailed(135); /* Sorry, no authority*/
  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-09400

// Process valid input request
Function KS0H-09500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/
    KS0H-09510(); /* format development jcl*/
  else
    KS0H-09520(); /* format production jcl*/
  end


end // end KS0H-09500

// Format and submit devel jcl
Function KS0H-09510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTH2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      /* **** No parm exists for format*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTH2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTH2.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTH2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "09510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[9] = "*"; /* Indicate function completed*/

    set KS0HM009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-09510

// Format and submit prod jcl
Function KS0H-09520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTH1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      /* *** No parameters exist to format*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTH1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTH1.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTH1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "09520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[9] = "*"; /* Indicate function completed*/

    set KS0HM009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-09520

// Quota Cat by Country Report
Function KS0H-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-10100(); /* Format and display the map*/

  KS0H-10200(); /* Check attention identifier*/

  KS0H-10300(); /* Reset fields to normal intensity*/

  KS0H-10400(); /* Verify the data that was entered*/

  KS0H-10500(); /* Process valid input request*/


end // end KS0H-10000

// Format and display the map
Function KS0H-10100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM010 initial; /* Clear map*/
      KS0HM010.KS0HM-GPC-CD = "03";
      set KS0HM010.KS0HM-SESN-CD cursor; /* Set the cursor*/

      KS0HM010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM010.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM010.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM010.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM010.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM010.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM010 alarm; /* Indicate sound alarm*/

  end

  /* gpc will not be enterable on this map.*/
  set KS0HM010.KS0HM-GPC-CD skip; /* Do not allow entry of gpc*/

  converse KS0HM010 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-10100

// Check attention identifier
Function KS0H-10200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[10] = "C"; /* Indicate selection cancelled*/

    set KS0HM010 initial; /* m010 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "10200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-10200

// Reset highlighted fields
Function KS0H-10300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM010.XURCOPY initialAttributes; /* Number copies*/
  set KS0HM010.KS0HM-GPC-CD initialAttributes; /* gpc code*/
  set KS0HM010.KS0HM-SESN-CD initialAttributes; /* season code*/
  set KS0HM010.KS0HM-SESN-YR-RNG initialAttributes; /* season year*/

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (KS0HM010.KS0HM-GPC-CD == "?" /* if any ? entered*/
   || KS0HM010.KS0HM-SESN-CD == "?")

    if (KS0HM010.KS0HM-GPC-CD == "?") /* if ? entered in gpc*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM010.KS0HM-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        KS0HM010.KS0HM-GPC-DESC = XGPTBL.XGPDESC[XX0XWPIX];
        set KS0HM010.KS0HM-SESN-CD cursor; /* put cursor on field*/
      else
        KS0HM010.KS0HM-GPC-CD = " "; /* clear fields*/
        KS0HM010.KS0HM-GPC-DESC = " "; /* clear description*/
        set KS0HM010.KS0HM-GPC-CD cursor; /* put cursor on gpc cd*/
      end
    end

    if (KS0HM010.KS0HM-SESN-CD == "?") /* if ? in season field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 SEASON      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXSE01(); /* perform season window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the season     **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM010.KS0HM-SESN-CD = XSETBL.XSECD[XX0XWPIX];
        set KS0HM010.KS0HM-SESN-YR-RNG cursor; /* put cursor on sesn yr*/
      else
        KS0HM010.KS0HM-SESN-CD = " "; /* clear fields*/
        set KS0HM010.KS0HM-SESN-CD cursor; /* put cursor on sesn cd*/
      end

    end

    converseLib.clearScreen();
     /* restore the original map*/

    KS0HW00.KS0HW-SWR = "N"; /* no to request for data*/
    KS0HW00.KS0HW-SWF = "N"; /* no to format map*/
    KS0HW00.KS0HW-POP-UP = "Y"; /* indicate pop-up window*/

    exit stack; /* go display map*/

  end


end // end KS0H-10300

// Verify the entered data
Function KS0H-10400()
  /* ------------------------------------------------------------*/
  /* Verify Season Year*/
  /* ------------------------------------------------------------*/

  if (KS0HM010.KS0HM-SESN-YR-RNG >= "00" /* year between 0 & 99*/
   && KS0HM010.KS0HM-SESN-YR-RNG <= "99")
    /* NEXT SENTENCE*/
  else
    KSWREC.XXXPRCNM = "10400"; /* module id*/
    set KS0HM010.KS0HM-SESN-YR-RNG cursor, bold; /* highlight*/
    converseLib.validationFailed(26); /* team nbr invalid*/
  end

  /* ------------------------------------------------------------*/
  /* Verify Season Code*/
  /* ------------------------------------------------------------*/

  if (KS0HM010.KS0HM-SESN-CD in XSETBL.XSECD) /* season code in tbl*/
    /* next sentence*/
  else
    KSWREC.XXXPRCNM = "10400"; /* module id*/
    set KS0HM010.KS0HM-SESN-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(27); /* season code invalid*/
  end

  /* ------------------------------------------------------------*/
  /* Verify gpc code*/
  /* ------------------------------------------------------------*/

  if (KS0HM010.KS0HM-GPC-CD in XGPTBL.XGPCD) /* gpc in the table*/
  /* /* get gpc description*/
    KS0HM010.KS0HM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    if (KS0HM010.KS0HM-GPC-CD == "EQ") /* equipment*/
      KS0HM010.KS0HM-GPC-DESC = "EQUIPMENT";
    else
      KSWREC.XXXPRCNM = "10400"; /* module id*/
      set KS0HM010.KS0HM-GPC-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(28); /* field missing or invalid*/
      KS0HM010.KS0HM-GPC-DESC = " "; /* clear desc*/
    end
  end
  if (KS0HM010.KS0HM-GPC-CD != "03" && KS0HM010.KS0HM-GPC-CD != "EQ")
    KSWREC.XXXPRCNM = "10400"; /* module id*/
    set KS0HM010.KS0HM-GPC-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(155); /* field missing or invalid*/
    KS0HM010.KS0HM-GPC-DESC = " "; /* clear desc*/
  end
  /* ------------------------------------------------------------*/
  /* Check if printing multiple copies from the laser printer.*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* laser selected*/
   && KS0HM010.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM010.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM010.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM010.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM010.XURCOPY = 1; /* RESET TO 1 COPY*/

    else
      if (KS0HM010.XURCOPY != 01) /* Only 1 copy is allowed on xerox*/

        set KS0HM010.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "10400"; /* Module identification*/
        converseLib.validationFailed(16); /* Not authorized message*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM010.XURDEST bold; /* Highlight printer*/
    set KS0HM010.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "10400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-10400

// Process valid input request
Function KS0H-10500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/
    KS0H-10510(); /* format development jcl*/
  else
    if (TA6REC.XURDEST != "LOCAL ")
      KS0H-10520(); /* format production jcl*/
    else
      KS0H-10530(); /* format bundle print*/
    end
  end


end // end KS0H-10500

// Format and submit devel jcl
Function KS0H-10510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTI2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-10511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTI2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTI2.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTI2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "10510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[10] = "*"; /* Indicate function completed*/

    set KS0HM010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-10510

// Format Parm for jcl
Function KS0H-10511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW10 empty; /* Parameters work area*/

  KS0HW-W10-GPC-CD = KS0HM010.KS0HM-GPC-CD; /* GPC*/
  KS0HW-W10-SESN-CD = KS0HM010.KS0HM-SESN-CD; /* SEASON*/
  KS0HW00.KS0HW-YEAR-YY = KS0HM010.KS0HM-SESN-YR-RNG;

  if (KS0HM010.KS0HM-SESN-YR-RNG == " ") /* If season year not entered*/
    KS0HW00.KS0HW-YEAR-CC = 00;
  else
    if (KS0HM010.KS0HM-SESN-YR-RNG > "49")
      KS0HW00.KS0HW-YEAR-CC = 19;
    else
      KS0HW00.KS0HW-YEAR-CC = 20;
    end
  end

  KS0HW-W10-SESN-YR-RNG = KS0HW00.KS0HW-YEAR;
  /* ----------------------------------------------------------------*/
  /* Move number of copies into parameters if local printer selected*/
  /* and in production.*/
  /* ----------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* If local printer selected*/
   && TA3REC.TA3RGNID == "03")   /* In PRODUCTION region*/

    KS0HW10.KS0HW-W10-LOCAL-COPIES = KS0HM010.XURCOPY;

  else

    KS0HW10.KS0HW-W10-LOCAL-COPIES = 00;

  end
  KS0HW10.KS0HW-W10-USERID = COMMAREA.CAUSERID;
  TA6REC.TARJCL[TA6INDEX] = KS0HW-W10-PARM-REC; /* Parameters*/


end // end KS0H-10511

// Format and submit prod jcl
Function KS0H-10520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTI1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-10511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTI1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTI1.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTI1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "10520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[10] = "*"; /* Indicate function completed*/

    set KS0HM010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-10520

// Format and submit bundle jcl
Function KS0H-10530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTI3.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-10511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTI3.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTI3.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTI3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "10530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[10] = "*"; /* Indicate function completed*/

    set KS0HM010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-10530

// Quota Cat by Country Report
Function KS0H-11000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-11100(); /* Format and display the map*/

  KS0H-11200(); /* Check attention identifier*/

  KS0H-11300(); /* Reset fields to normal intensity*/

  KS0H-11400(); /* Verify the data that was entered*/

  KS0H-11500(); /* Process valid input request*/


end // end KS0H-11000

// Format and display the map
Function KS0H-11100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM011 initial; /* Clear map*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date.*/
  /* ------------------------------------------------------------*/

  KS0HM011.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM011.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM011.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM011 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM011 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-11100

// Check attention identifier
Function KS0H-11200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[11] = "C"; /* Indicate selection cancelled*/

    set KS0HM011 initial; /* M011 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "11200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-11200

// Reset highlighted fields
Function KS0H-11300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

   /* *** none exist to reset *****/

end // end KS0H-11300

// Verify the entered data
Function KS0H-11400()
  /* ------------------------------------------------------------*/
  /* Check to see if client has adequate authority to submit*/
  /* this refresh.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAILVL[10] == "N") /* If not granted Customs auth.*/
    KSWREC.XXXPRCNM = "11400"; /* Module identification*/
    converseLib.validationFailed(135); /* Sorry, no authority*/
  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-11400

// Process valid input request
Function KS0H-11500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/
    KS0H-11510(); /* format development jcl*/
  else
    KS0H-11520(); /* format production jcl*/
  end


end // end KS0H-11500

// Format and submit devel jcl
Function KS0H-11510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTJ2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      /* **** No parm exists for format*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTJ2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTJ2.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTJ2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "11510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[11] = "*"; /* Indicate function completed*/

    set KS0HM011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-11510

// Format and submit prod jcl
Function KS0H-11520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTJ1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      /* *** No parameters exist to format*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTJ1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTJ1.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTJ1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "11520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[11] = "*"; /* Indicate function completed*/

    set KS0HM011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-11520

// Customs Directives Report
Function KS0H-12000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-12100(); /* Format and display the map*/

  KS0H-12200(); /* Check attention identifier*/

  KS0H-12300(); /* Reset fields to normal intensity*/

  KS0H-12400(); /* Verify the data that was entered*/

  KS0H-12500(); /* Process valid input request*/


end // end KS0H-12000

// Format and display the map
Function KS0H-12100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM012 initial; /* Clear map*/

      KS0HM012.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM012.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM012.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM012.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM012.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM012.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM012.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM012.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM012.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM012 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM012 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-12100

// Check Attention Identifier
Function KS0H-12200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[12] = "C"; /* Indicate selection cancelled*/

    set KS0HM012 initial; /* M012 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "12200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-12200

// Reset highlighted fields
Function KS0H-12300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM012.XURCOPY initialAttributes; /* Number Copies*/
  set KS0HM012.KS0HM-HTS-NBR initialAttributes; /* HS number*/
  set KS0HM012.KS0HM-ORDER-NBR initialAttributes; /* cust order nbr*/

end // end KS0H-12300

// Verify the entered data
Function KS0H-12400()
  /* ------------------------------------------------------------*/
  /* If entered, verify the order number, or check the h.s. nbr*/
  /* ------------------------------------------------------------*/

  KS0H-12420();

  if (TA6REC.XURDEST == "LOCAL " /* laser selected*/
   && KS0HM012.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM012.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM012.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM012.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM012.XURCOPY = 1; /* RESET TO 1 COPY*/

    else
      if (KS0HM012.XURCOPY != 01) /* Only 1 copy is allowed on xerox*/

        set KS0HM012.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "12400"; /* Module identification*/
        converseLib.validationFailed(16); /* Not authorized message*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM012.XURDEST bold; /* Highlight printer*/
    set KS0HM012.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "12400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-12400

// verify the entered data
Function KS0H-12420()
  KS0HW00.KS0HW-ALL-DATA-FL = " "; /* Initialize*/
  /* ------------------------------------------------------------*/
  /* Verify the order number entered, if entered*/
  /* ------------------------------------------------------------*/

  if (KS0HM012.KS0HM-ORDER-NBR > " "
   && KS0HM012.KS0HM-HTS-NBR == " ")

    KS0H-12421(); /* verify order number*/

  else
  /* ------------------------------------------------------------*/
  /* Check if an hs number, or part of it, has been entered*/
  /* ------------------------------------------------------------*/
    if (KS0HM012.KS0HM-HTS-NBR > " "
     && KS0HM012.KS0HM-ORDER-NBR == " ")

      KS0HW00.KS0HW-HTS-NUMBER = KS0HM012.KS0HM-HTS-NBR;
      KS0H-12422(); /* verify h.s. number*/

    else
  /* ------------------------------------------------------------*/
  /* If both fields are blank, accept it and pass a print-all-data*/
  /* indicator.*/
  /* ------------------------------------------------------------*/
      if (KS0HM012.KS0HM-HTS-NBR == " "
       && KS0HM012.KS0HM-ORDER-NBR == " ")

        KS0HW00.KS0HW-ALL-DATA-FL = "Y";

      else /* if both fields are filled, error*/
        converseLib.validationFailed(143); /* set error nbr*/
        KSWREC.XXXPRCNM = "12420"; /* module identification*/
        set KS0HM012.KS0HM-ORDER-NBR cursor, bold;

      end
    end
  end
end // end KS0H-12420

// validate order number
Function KS0H-12421()
  /* ------------------------------------------------------------*/
  /* declare cursor, fetch a row, close cursor*/
  /* ------------------------------------------------------------*/

  set VKSORD01 empty; /* clear work record*/

  VKSORD01.KS-CUST-ORDER-NBR = KS0HM012.KS0HM-ORDER-NBR; /* ord #*/

  try
    call "VKSORD01" ("S1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
  end /* select existing*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      try
        call "VKSORD01" ("N1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
      end /* fetch row*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

          try
            call "VKSORD01" ("C1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
          end
                                   /* close cursor*/
          if (sysVar.errorCode == "00000000") /* Call successful*/
            if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

              return; /* Return to previous process*/

            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

            converseLib.validationFailed(138); /* set error msg nbr*/
            KSWREC.XXXPRCNM = "12421"; /* module identification*/
            set KS0HM012.KS0HM-ORDER-NBR cursor, bold; /* highlight error*/
            try
              call "VKSORD01" ("C1", SQLCA, VKSORD01) {isNoRefresh = yes, isExternal = yes};
            end
                                   /* close cursor*/
            if (sysVar.errorCode == "00000000") /* Call successful*/
              if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

                return; /* Return to previous process*/

              end
            end
          end
        end
      end
    end
  else

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    KSWREC.XXXPRCNM = "12421"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Data in use by another*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      converseLib.validationFailed(10); /* Unexpected error occurred*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT HEADING ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
    TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VKSORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = VKSORD01.VKSORD01-GROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end
end // end KS0H-12421

// Check HS number format
Function KS0H-12422()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999  or  9999.99.99-99*/
  /* or  9999.99.99,99*/
  /* this routine verifies that there is a  '.' in positions*/
  /* 5 and 8 if there is anything in the next position.*/
  /* this routine also verifies that there is a ',' or '-'*/
  /* in position 11 if there is anything in the next position.*/
  /* no other positions may have a '.', ',', or '-' in them.*/
  /* is in error.  also, digits must come in pairs of two so they*/
  /* can be compared to the hts nbr parts in vksord01.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors found*/

    KS0HW01.KS0HW-IXM = 1; /* initialize index*/

    while (KS0HW01.KS0HW-IXM <= 14)
      if (KS0HW01.KS0HW-IXM == 1
       || KS0HW01.KS0HW-IXM == 3
       || KS0HW01.KS0HW-IXM == 6
       || KS0HW01.KS0HW-IXM == 9
       || KS0HW01.KS0HW-IXM == 11)
        if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
          if (KS0HW01.KS0HW-IXM == 1
           || KS0HW01.KS0HW-IXM == 3)
            KS0H-12423(); /* check next position*/
          end
          if (KS0HW01.KS0HW-IXM == 6
           || KS0HW01.KS0HW-IXM == 9)
            KS0H-12423(); /* check next position*/
            KS0H-12424(); /* check prev position*/
          end
          if (KS0HW01.KS0HW-IXM == 11)
            if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == ","
             || KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == "-")
              KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set idx up 1*/
              if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
                KS0H-12423(); /* check next position*/
              else
                KS0H-12425(); /* error*/
              end
            else
              KS0H-12423(); /* check next position*/
            end
          end
        end
      end
      if (KS0HW01.KS0HW-IXM != 5
       && KS0HW01.KS0HW-IXM != 8)
        if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == ".")
          KS0H-12425(); /* error*/
        end
      else
        if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " "
         && KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != ".")
          KS0H-12425(); /* error*/
        end
      end
      if (KS0HW01.KS0HW-IXM == 14)
        if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
          KS0H-12425(); /* error*/
        end
      end
      KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set index up by 1*/
    end
  end

end // end KS0H-12422

// Check next position-HS nbr
Function KS0H-12423()
  /* ------------------------------------------------------------*/
  /* Make sure next position of the h.s. nunber is not blank*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* digits must come in pairs of two so they*/
  /* can be compared to the hts nbr parts in vksord01.*/
  /* ------------------------------------------------------------*/
  KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set index up by 1*/
  if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] == " ")
    KS0H-12425(); /* error*/
  end
  KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM - 1; /* set index down by 1*/
end // end KS0H-12423

// Check prev position-HS nbr
Function KS0H-12424()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* this routine verifies that there is a  '.' in positions*/
  /* 5 and 8 if there is anything in the next position.*/
  /* ------------------------------------------------------------*/

  KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM - 1; /* set index down by 1*/
  if (KS0HW00.KS0HW-HTS-BYTE[KS0HW-IXM] != ".")
    KS0H-12425();
  end
  KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set index up by 1*/

end // end KS0H-12424

// HS nbr error routine
Function KS0H-12425()
  /* ------------------------------------------------------------*/
  /* h.s. number is invalid*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999  or  9999.99.99-99*/
  /* or  9999.99.99,99*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "12422"; /* Module id*/
  set KS0HM012.KS0HM-HTS-NBR cursor, bold;
  converseLib.validationFailed(35); /* Invalid HTS nbr*/

end // end KS0H-12425

// Process valid input requests
Function KS0H-12500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/

    KS0H-12510(); /* format development jcl*/

  else
    if (TA6REC.XURDEST != "LOCAL ")

      KS0H-12520(); /* format production jcl*/

    else

      KS0H-12530(); /* format bundle print*/

    end
  end


end // end KS0H-12500

// Format and submit devl jcl
Function KS0H-12510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTK2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-12511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTK2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTK2.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTK2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "12510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[12] = "*"; /* Indicate function completed*/

    set KS0HM012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-12510

// Format Parm 1 for jcl
Function KS0H-12511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW12 empty; /* Parameters work area*/

  KS0HW12.KS0HW-W12-HTS-NBR = KS0HM012.KS0HM-HTS-NBR;
  KS0HW12.KS0HW-W12-ORDER-NBR = KS0HM012.KS0HM-ORDER-NBR;
  KS0HW12.KS0HW-W12-ALL-DATA-FL = KS0HW00.KS0HW-ALL-DATA-FL;

  KS0HW12.KS0HW-W12-USERID = COMMAREA.CAUSERID;

  /* ----------------------------------------------------------------*/
  /* Move number of copies into parameters if local printer selected*/
  /* and in production.*/
  /* ----------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* If local printer selected*/
   && TA3REC.TA3RGNID == "03")   /* In PRODUCTION region*/

    KS0HW12.KS0HW-W12-LOCAL-COPIES = KS0HM012.XURCOPY;

  else

    KS0HW12.KS0HW-W12-LOCAL-COPIES = 00;

  end

  TA6REC.TARJCL[TA6INDEX] = KS0HW12.KS0HW-W12-PARM-REC; /* Parameters*/


end // end KS0H-12511

// Fomat and submit prod jcl
Function KS0H-12520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTK1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-12511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTK1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTK1.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTK1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "12520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[12] = "*"; /* Indicate function completed*/

    set KS0HM012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-12520

// Format and submit bundle jcl
Function KS0H-12530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTK3.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-12511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTK3.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTK3.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTK3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "12530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[12] = "*"; /* Indicate function completed*/

    set KS0HM012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-12530

// Models without planimtr report
Function KS0H-13000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-13100(); /* Format and display the map*/

  KS0H-13200(); /* Check attention identifier*/

  KS0H-13300(); /* Reset fields to normal intensity*/

  KS0H-13400(); /* Verify the data that was entered*/

  KS0H-13500(); /* Process valid input request*/


end // end KS0H-13000

// Format and display the map
Function KS0H-13100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    if (KS0HW00.KS0HW-POP-UP == "N")
      set KS0HM013 initial; /* Clear map*/
      KS0HM013.KS0HM-GPC-CD = "02"; /* default GPC to 02*/

      KS0HM013.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and report print destination.*/
  /* ------------------------------------------------------------*/

  KS0HM013.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM013.XURDEST = TA6REC.XURDEST; /* Print destination*/
  KS0HM013.XRODESC = TA6REC.XRODESC; /* Printer description*/
  KS0HM013.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  KS0HM013.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/

  /* ------------------------------------------------------------*/
  /* Only allow user to change the number of copies if the laser*/
  /* printer has been selected.*/
  /* ------------------------------------------------------------*/

  set KS0HM013.XURCOPY skip; /* Protect and skip this field*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM013.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM013.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM013 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM013 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end KS0H-13100

// Check attention identifier
Function KS0H-13200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, indicate selection cancelled,*/
  /* clear the map fields and exit to display the next map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    KS0HW01.KS0HM-SEL[13] = "C"; /* Indicate selection cancelled*/

    set KS0HM013 initial; /* M013 input/output*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If EXIT was requested, indicate exit to the selection menu.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    KS0HW01.KS0HW-SWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "13200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end KS0H-13200

// Reset highlighted fields
Function KS0H-13300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set KS0HM013.XURCOPY initialAttributes; /* Number copies*/
  set KS0HM013.KS0HM-SESN-CD initialAttributes; /* Season code*/
  set KS0HM013.KS0HM-SESN-YR-RNG initialAttributes; /* Season year range*/
  set KS0HM013.KS0HM-GPC-CD initialAttributes; /* gpc code*/
  set KS0HM013.KS0HM-PRDCTN-YR initialAttributes; /* PO ID prdctn year*/
  set KS0HM013.KS0HM-PRDCTN-MO initialAttributes; /* PO ID prdctn Month*/
  set KS0HM013.KS0HM-DLVR-MO initialAttributes; /* PO ID deliver month*/
  set KS0HM013.KS0HM-FCTY-CD initialAttributes; /* PO ID factory code*/
  set KS0HM013.KS0HM-HTS-NBR initialAttributes; /* Hts number*/
  set KS0HM013.KS0HM-STY-NBR initialAttributes; /* Style number*/
  set KS0HM013.KS0HM-COLR-CD-ID initialAttributes; /* Color code id*/
  set KS0HM013.KS0HM-DIM-CD initialAttributes; /* Dimension code*/
  set KS0HM013.KS0HM-CTRY-CD initialAttributes; /* Country code*/
  set KS0HM013.KS0HM-PROD-STAT-CD initialAttributes; /* Product status code*/

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (KS0HM013.KS0HM-PROD-STAT-CD == "?" /* if any ? entered*/
   || KS0HM013.KS0HM-CTRY-CD == "?")    

    if (KS0HM013.KS0HM-PROD-STAT-CD == "?") /* if ? in prod stat field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "             PRODUCT  STATUS "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPR01(); /* perform status window*/
      end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the optional   **/
     /* *  status code to the map.                              **/
     /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM013.KS0HM-PROD-STAT-CD = YPRTBL.YPR-PROD-STAT-CD[XX0XWPIX];
        set KS0HM013.KS0HM-PROD-STAT-CD cursor; /* cursor*/
      else
        KS0HM013.KS0HM-PROD-STAT-CD = " "; /* clear fields*/
        set KS0HM013.KS0HM-PROD-STAT-CD cursor; /* cursor*/
      end
    end
    if (KS0HM013.KS0HM-CTRY-CD == "?") /* if ? in ctry code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "        ORIGIN COUNTRY CODE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform origin code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        KS0HM013.KS0HM-CTRY-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        KS0HM013.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move desc*/
        set KS0HM013.KS0HM-PRDCTN-YR cursor; /* put cursor on prd yr*/
      else
        KS0HM013.KS0HM-CTRY-CD = " "; /* clear fields*/
        KS0HM013.KS0HM-CTRY-DESC = " ";
        set KS0HM013.KS0HM-CTRY-CD cursor; /* Set cursor*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    KS0HW00.KS0HW-SWR = "N"; /* no to request for data*/
    KS0HW00.KS0HW-SWF = "N"; /* no to format map*/
    KS0HW00.KS0HW-POP-UP = "Y"; /* indicate pop-up window*/

    exit stack; /* go display map*/

  end


end // end KS0H-13300

// Verify the entered data
Function KS0H-13400()
  /* ------------------------------------------------------------*/
  /* If a required field was not entered, indicate that it is*/
  /* missing or invalid.*/
  /* ------------------------------------------------------------*/

  KS0H-13410(); /* Verify required data entered*/

  /* ------------------------------------------------------------*/
  /* Include Column Checks*/
  /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Verify the Origin Country code.*/
  /* ------------------------------------------------------------*/

  if (KS0HM013.KS0HM-CTRY-CD > " ") /* If origin entered*/
    if (KS0HM013.KS0HM-CTRY-CD in XCTTBL.XCTCD /* Code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      KS0HM013.KS0HM-CTRY-DESC = XCTTBL.XCTDESC[sysVar.arrayIndex];

    else

    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

      KSWREC.XXXPRCNM = "13400"; /* Module identification*/
      set KS0HM013.KS0HM-CTRY-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(70); /* Field missing or invalid*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Verify Style Number is entered before color/dim*/
  /* ------------------------------------------------------------*/

  if (KS0HM013.KS0HM-STY-NBR == " ")
    if (KS0HM013.KS0HM-COLR-CD-ID > " "
     || KS0HM013.KS0HM-DIM-CD > " ")

      set KS0HM013.KS0HM-STY-NBR cursor, bold;
      set KS0HM013.KS0HM-COLR-CD-ID bold;
      set KS0HM013.KS0HM-DIM-CD bold;
      KSWREC.XXXPRCNM = "13400"; /* Module Identification*/
      converseLib.validationFailed(067); /* Style is missing*/

    end
  else
    if (KS0HM013.KS0HM-COLR-CD-ID == " "
     && KS0HM013.KS0HM-DIM-CD > " ")

      set KS0HM013.KS0HM-COLR-CD-ID cursor, bold;
      set KS0HM013.KS0HM-DIM-CD bold;
      KSWREC.XXXPRCNM = "13400"; /* Module Identification*/
      converseLib.validationFailed(079); /* colr is missing*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Verify gpc code*/
  /* ------------------------------------------------------------*/

  /* IF KS0HM013.KS0HM-GPC-CD IN XGPTBL.XGPCD;/* gpc in the table*/
  if (KS0HM013.KS0HM-GPC-CD in XGPTBL.XGPCD /* gpc in the table*/
   && KS0HM013.KS0HM-GPC-CD == "02")       
  /* /* get gpc description*/
    KS0HM013.KS0HM-GPC-DESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    KSWREC.XXXPRCNM = "13400"; /* module id*/
    set KS0HM013.KS0HM-GPC-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(159); /* field missing or invalid*/
    KS0HM013.KS0HM-GPC-DESC = " "; /* clear desc*/

  end

  /* ------------------------------------------------------------*/
  /* Check if printing multiple copies from the laser printer.*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* laser selected*/
   && KS0HM013.XURCOPY != TA6REC.XURCOPY) /* changed number of copies*/

    if (KS0HM013.XURCOPY == 0  /* COPIES CHANGED TO 0*/
     || KS0HM013.XURCOPY == 00 /* COPIES CHANGED TO 00*/
     || KS0HM013.XURCOPY == "  ") /* COPIES ARE SPACES*/

      KS0HM013.XURCOPY = 1; /* RESET TO 1 COPY*/

    else
      if (KS0HM013.XURCOPY != 01) /* Only 1 copy is allowed on xerox*/

        set KS0HM013.XURCOPY cursor, bold; /* Highlight copies*/
        KSWREC.XXXPRCNM = "13400"; /* Module identification*/
        converseLib.validationFailed(16); /* Not authorized message*/
        exit stack; /* Return to previous process*/

      end

    end

  end

  /* ------------------------------------------------------------*/
  /* Check if security allows laser printer*/
  /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == "LOCAL " /* and laser selected*/
   && COMMAREA.CAILVL[10] == "N") /* and not authorized for bundle prt*/

    set KS0HM013.XURDEST bold; /* Highlight printer*/
    set KS0HM013.XRODESC bold; /* and description*/
    KSWREC.XXXPRCNM = "13400"; /* Module identification*/
    converseLib.validationFailed(96); /* Not authorized message*/
    exit stack; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end KS0H-13400

// Verify required data
Function KS0H-13410()
  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - ctry/style/clr/style name/hts*/
  /* ------------------------------------------------------------*/

  if (KS0HM013.KS0HM-HTS-NBR > " ") /**/
    KS0HW13.KS0HW-HTS-NBR = KS0HM013.KS0HM-HTS-NBR;
    KS0H-13411(); /* Verify HS format*/
    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
  end

  if (KS0HM013.KS0HM-SESN-CD == " "   /* If sesn entered*/
   && KS0HM013.KS0HM-SESN-YR-RNG == " "
   && KS0HM013.KS0HM-PRDCTN-YR == " " /* PO ID year not entered*/
   && KS0HM013.KS0HM-PRDCTN-MO == " " 
   && KS0HM013.KS0HM-DLVR-MO == " ") 
    KSWREC.XXXPRCNM = "13410"; /* module id*/
    set KS0HM013.KS0HM-SESN-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(158); /* season code invalid*/
    exit stack;
  end

  /* ------------------------------------------------------------*/
  /* Verify the minimum amount of key header information is*/
  /* entered - sesn/po id*/
  /* ------------------------------------------------------------*/

  if (KS0HM013.KS0HM-SESN-CD == " " /**/
   && KS0HM013.KS0HM-SESN-YR-RNG > " ")
    KSWREC.XXXPRCNM = "13410"; /* module id*/
    set KS0HM013.KS0HM-SESN-CD cursor, bold; /* highlight*/
    converseLib.validationFailed(27); /* season code invalid*/
    exit stack;
  end
  if (KS0HM013.KS0HM-SESN-CD > " ") /* If sesn entered*/
    if (KS0HM013.KS0HM-SESN-CD in XSETBL.XSECD) /* season code in tbl*/
      /* next sentence*/
    else
      KSWREC.XXXPRCNM = "13410"; /* module id*/
      set KS0HM013.KS0HM-SESN-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(27); /* season code invalid*/
      exit stack;
    end
    if (KS0HM013.KS0HM-SESN-YR-RNG > " ")
      if (KS0HM013.KS0HM-SESN-YR-RNG >= "00" /* year between 0 & 99*/
       && KS0HM013.KS0HM-SESN-YR-RNG <= "99")
        /* NEXT SENTENCE*/
      else
        KSWREC.XXXPRCNM = "13410"; /* module id*/
        set KS0HM013.KS0HM-SESN-YR-RNG cursor, bold; /* highlight*/
        converseLib.validationFailed(26); /* Year range invalid*/
        exit stack; /* Year range invalid*/
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* Verify PO ID month range*/
  /* ------------------------------------------------------------*/

  if (KS0HM013.KS0HM-DLVR-MO > " ")
    if (KS0HM013.KS0HM-DLVR-MO >= "01" /* year between 1 & 12*/
     && KS0HM013.KS0HM-DLVR-MO <= "12")
    /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "13400"; /* module id*/
      set KS0HM013.KS0HM-DLVR-MO cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  if (KS0HM013.KS0HM-PRDCTN-MO > " ") /* PO ID mnth not entered*/
    if (KS0HM013.KS0HM-PRDCTN-MO >= "01" /* year between 1 & 12*/
     && KS0HM013.KS0HM-PRDCTN-MO <= "12")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "13400"; /* module id*/
      set KS0HM013.KS0HM-PRDCTN-MO cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

  if (KS0HM013.KS0HM-PRDCTN-YR == " " /* PO ID year not entered*/
   && KS0HM013.KS0HM-PRDCTN-MO == " " 
   && KS0HM013.KS0HM-DLVR-MO == " ") 
  /* NEXT SENTENCE*/
  else
    if (KS0HM013.KS0HM-PRDCTN-YR >= "00" /* year between 0 & 99*/
     && KS0HM013.KS0HM-PRDCTN-YR <= "99")
  /* NEXT SENTENCE*/
    else
      KSWREC.XXXPRCNM = "13400"; /* module id*/
      set KS0HM013.KS0HM-PRDCTN-YR cursor, bold; /* highlight*/
      converseLib.validationFailed(114); /* PO ID is missing or invalid*/
    end
  end

end // end KS0H-13410

// Check HS number format
Function KS0H-13411()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999  or  9999.99.99-99*/
  /* or  9999.99.99,99*/
  /* this routine verifies that there is a ' ' or '.' in positions*/
  /* 3 and 5 and 8. If any of the other positions contain a '.', it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors found*/

    KS0HW01.KS0HW-IXM = 1; /* initialize index*/

    while (KS0HW01.KS0HW-IXM <= 14)
      if (KS0HW01.KS0HW-IXM == 5 /* these 2 positions must be blank or*/
       || KS0HW01.KS0HW-IXM == 8) /* equal '.'. if not, it's in error*/
        if (KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
          if (KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] != ".")
            KSWREC.XXXPRCNM = "13430"; /* Module id*/
            set KS0HM013.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      else
        if (KS0HW01.KS0HW-IXM == 14) /* this position must be blank*/
          if (KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
            KSWREC.XXXPRCNM = "13430"; /* Module id*/
            set KS0HM013.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        else
          if (KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] == "."
           || KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] == "-"
           || KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] == ",")
            KSWREC.XXXPRCNM = "13430"; /* Module id*/
            set KS0HM013.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      end
      KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set index up by 1*/
    end

  /* ----------------------------------------------------------------*/
  /* Check alternate format for ftwr*/
  /* ----------------------------------------------------------------*/

    if (KS0HM013.KS0HM-GPC-CD == "02"
     && converseVar.validationMsgNum == 35) /* Error found on format*/

      converseLib.validationFailed(0); /* initialize error*/
      KS0HW01.KS0HW-IXM = 1; /* initialize index*/

      while (KS0HW01.KS0HW-IXM <= 14)
        if (KS0HW01.KS0HW-IXM == 5 /* these 3 positions must be blank or*/
         || KS0HW01.KS0HW-IXM == 8 /* equal '.'. if not, it's in error*/
         || KS0HW01.KS0HW-IXM == 11)
          if (KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] != " ")
            if (KS0HW01.KS0HW-IXM == 5
             || KS0HW01.KS0HW-IXM == 8)
              if (KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] != ".")
                KSWREC.XXXPRCNM = "13430"; /* Module id*/
                set KS0HM013.KS0HM-HTS-NBR cursor, bold;
                converseLib.validationFailed(97); /* Invalid HTS nbr*/
              end
            else
              if (KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] != "-"
               && KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] != ",")
                KSWREC.XXXPRCNM = "13430"; /* Module id*/
                set KS0HM013.KS0HM-HTS-NBR cursor, bold;
                converseLib.validationFailed(97); /* Invalid HTS nbr*/
              end
            end
          end
        else
          if (KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] == "."
           || KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] == "-"
           || KS0HW13.KS0HW-HTS-BYTE[KS0HW-IXM] == ",")
            KSWREC.XXXPRCNM = "13430"; /* Module id*/
            set KS0HM013.KS0HM-HTS-NBR cursor, bold;
            converseLib.validationFailed(97); /* Invalid HTS nbr*/
          end
        end
        KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* set index up by 1*/
      end
    end

  end

end // end KS0H-13411

// Process valid input request
Function KS0H-13500()
  /* ------------------------------------------------------------*/
  /* Depending on the region, submit either the production job*/
  /* or the test job.*/
  /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID != "03") /* if not on production system*/
    KS0H-13510(); /* format development jcl*/
  else
    if (TA6REC.XURDEST != "LOCAL ")
      KS0H-13520(); /* format production jcl*/
    else
      KS0H-13530(); /* format bundle print*/
    end
  end


end // end KS0H-13500

// Format and submit devel jcl
Function KS0H-13510()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTL2.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-13511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTL2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTL2.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTL2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "13510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[13] = "*"; /* Indicate function completed*/

    set KS0HM013 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-13510

// Format Parm 1 for jcl
Function KS0H-13511()
  /* ------------------------------------------------------------*/
  /* Format the variable parameters entered by the user.*/
  /* ------------------------------------------------------------*/

  set KS0HW13 empty; /* Parameters work area*/

  KS0HW-W13-PRDCTN-YR = KS0HM013.KS0HM-PRDCTN-YR;


  KS0HW-W13-SESN-CD = KS0HM013.KS0HM-SESN-CD;
  KS0HW-W13-STY-NBR = KS0HM013.KS0HM-STY-NBR;
  KS0HW-W13-CTRY-CD = KS0HM013.KS0HM-CTRY-CD;
  KS0HW-W13-COLR-CD = KS0HM013.KS0HM-COLR-CD-ID;
  KS0HW-W13-PROD-STAT-CD = KS0HM013.KS0HM-PROD-STAT-CD;
  KS0HW-W13-PRDCTN-MO = KS0HM013.KS0HM-PRDCTN-MO;
  KS0HW-W13-DLVR-MO = KS0HM013.KS0HM-DLVR-MO;
  KS0HW-W13-FCTY-CD = KS0HM013.KS0HM-FCTY-CD;
  KS0HW-W13-HTS-NBR = KS0HM013.KS0HM-HTS-NBR;
  KS0HW-W13-SESN-YR-RNG = KS0HM013.KS0HM-SESN-YR-RNG;
  KS0HW-W13-DIM-CD = KS0HM013.KS0HM-DIM-CD;
  KS0HW-W13-GPC-CD = KS0HM013.KS0HM-GPC-CD; /* GPC-CD*/

  KS0HW-W13-USERID = COMMAREA.CAUSERID;

  /* ------------------------------------------------------------*/
  /* Move number of copies into parameters if in production and*/
  /* local printer selected.*/
  /* -------------------------------------------------------------*/
  if (TA6REC.XURDEST == "LOCAL " /* local printer selected*/
   && TA3REC.TA3RGNID == "03")   /* in production*/

    KS0HW-W13-LOCAL-COPIES = KS0HM013.XURCOPY;
  else
    KS0HW-W13-LOCAL-COPIES = 00;
  end

  TA6REC.TARJCL[TA6INDEX] = KS0HW-W13-PARM-REC; /* Parameters*/


end // end KS0H-13511

// Format and submit prod jcl
Function KS0H-13520()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTL1.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-13511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTL1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTL1.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTL1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "05520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[13] = "*"; /* Indicate function completed*/

    set KS0HM013 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-13520

// Format and submit bundle jcl
Function KS0H-13530()
  /* ------------------------------------------------------------*/
  /* Initialize the work area and index to be used.*/
  /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

  /* ------------------------------------------------------------*/
  /* Format JCL and parameters into the subroutine work area.*/
  /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (KS0HTL3.TARTYPE[TA6INDEX] == "P") /* 1ST PARM*/

      KS0H-13511(); /* Format parm 1*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = KS0HTL3.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = KS0HTL3.TARTYPE[TA6INDEX]; /* Typ*/

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (KS0HTL3.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Submit the JCL and parameters for background execution.*/
  /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  /* ------------------------------------------------------------*/
  /* If submit was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  KSWREC.XXXPRCNM = "13530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    KS0HW01.KS0HM-SEL[13] = "*"; /* Indicate function completed*/

    set KS0HM013 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If not successful, indicate unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end KS0H-13530

// Report Request Menu
Function KS0H-99000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KS0H-99100(); /* Format and display the map*/

  KS0H-99200(); /* Check attention identifier*/

  KS0H-99300(); /* Reset fields to normal intensity*/

  KS0H-99400(); /* Verify the data that was entered*/

  KS0H-99500(); /* Process valid input request*/


end // end KS0H-99000

// Format and display the map
Function KS0H-99100()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
    /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set KS0HM099 initial; /* M099 input/output*/

    KS0HW01.KS0HW-IXM = 1; /* Initialize map index*/

    while (KS0HW01.KS0HW-IXM <= KS0HW01.KS0HW-IXL) /* Until end of array*/

      KS0HM099.KS0HM-SEL[KS0HW-IXM] = KS0HW01.KS0HM-SEL[KS0HW-IXM];

      KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* Increment index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KS0HM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KS0HM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0HM099.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (KSWREC.XXXMSGNO != 0) /* Message to display*/

      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0HM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    KS0HM099.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/

    set KS0HM099 alarm; /* Indicate sound alarm*/

  end

  converse KS0HM099 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KS0HW00.KS0HW-POP-UP = "N"; /* Reset pop-up indicator*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = KS0HM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0HM099.CAITEM; /* Application data*/


end // end KS0H-99100

// Check attention identifier
Function KS0H-99200()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set KS0HM099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    KS0H-99210(); /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSKS-S0001(); /* Exit to another application*/

      set KS0HM099.CATOAP cursor, bold; /* Highlight*/

    else

      KSWREC.XXXPRCNM = "99200"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    KS0H-99210(); /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0HM099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "KS0A"; /* TO application*/
    end

    XSKS-S0001(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    KS0H-99210(); /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    KSWREC.XXXPRCNM = "99200"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    KS0H-99210(); /* Exit to display map*/

  end


end // end KS0H-99200

// Clear selections and exit
Function KS0H-99210()
  /* ------------------------------------------------------------*/
  /* Reset any pending selections in working storage.*/
  /* ------------------------------------------------------------*/

  KS0HW01.KS0HW-IXM = 1; /* Initialize map index*/

  while (KS0HW01.KS0HW-IXM <= KS0HW01.KS0HW-IXL) /* Until end of array*/

    if (KS0HW01.KS0HM-SEL[KS0HW-IXM] == "S") /* Entry is selected*/
      KS0HW01.KS0HM-SEL[KS0HW-IXM] = " "; /* Reset entry*/
    end

    KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* Increment index*/

  end

  /* ------------------------------------------------------------*/
  /* Exit to display the selection menu map.*/
  /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/



end // end KS0H-99210

// Reset highlighted fields
Function KS0H-99300()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  KS0HW01.KS0HW-IXM = 1; /* Initialize index*/

  while (KS0HW01.KS0HW-IXM <= KS0HW01.KS0HW-IXL) /* Until all lines are reset*/

    set KS0HM099.KS0HM-SEL[KS0HW-IXM] initialAttributes; /* Reset select field*/

    KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM + 1; /* Increment line index*/

  end

  set KS0HM099.CATOAP initialAttributes; /* TO application*/
  set KS0HM099.CAITEM initialAttributes; /* Application data*/


end // end KS0H-99300

// Verify the entered data
Function KS0H-99400()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    KSWREC.XXXPRCNM = "99400"; /* Module identification*/
    set KS0HM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  /* ------------------------------------------------------------*/
  /* Check for proper select tag.*/
  /* ------------------------------------------------------------*/

  KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXL; /* Initialize line index*/

  while (KS0HW01.KS0HW-IXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
    /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (KS0HM099.KS0HM-SEL[KS0HW-IXM] != KS0HW01.KS0HM-SEL[KS0HW-IXM]
     && KS0HM099.KS0HM-SEL[KS0HW-IXM] != " " /* Line was selected*/
     && KS0HM099.KS0HM-SEL[KS0HW-IXM] != "S") /* and not with an "S"*/

      KSWREC.XXXPRCNM = "99400"; /* Module identification*/
      set KS0HM099.KS0HM-SEL[KS0HW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is may be entered*/

    end

    KS0HW01.KS0HW-IXM = KS0HW01.KS0HW-IXM - 1; /* Decrement line number*/

  end

  /* ------------------------------------------------------------*/
  /* Exit to display the map if any error was found.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KS0H-99210(); /* Exit to display map*/
  end


end // end KS0H-99400

// Process valid input request
Function KS0H-99500()
  /* ------------------------------------------------------------*/
  /* Save the selections in the working storage array.*/
  /* ------------------------------------------------------------*/

  move KS0HM099.KS0HM-SEL to KS0HW01.KS0HM-SEL[1] for all; /* Menu selections*/

  /* ------------------------------------------------------------*/
  /* If specify destination selected, indicate to subroutine to*/
  /* display output destination, but, do not submit any JCL.*/
  /* ------------------------------------------------------------*/

  if (KS0HW01.KS0HM-SEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end KS0H-99500

//*** RECORD=KS0HW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0HW00 type basicRecord
  10 KS0HW-IXX KS0HW-IXX ; 
  10 KS0HW-IDX KS0HW-IDX ; 
  10 KS0HW-SWC KS0HW-SWC ; 
  10 KS0HW-SWD KS0HW-SWD ; 
  10 KS0HW-SWF KS0HW-SWF ; 
  10 KS0HW-SWR KS0HW-SWR ; 
  10 KS0HW-SWU KS0HW-SWU ; 
  10 KS0HW-SFN KS0HW-SFN ; 
  10 KS0HW-ALL-DATA-FL KS0HW-ALL-DATA-FL ; 
  10 KS0HW-POP-UP KS0HW-POP-UP ; 
  10 KS0HW-EDIT-FLAG KS0HW-EDIT-FLAG ; 
  10 KS0HW-GPC-CD KS0HW-GPC-CD ; 
  10 KS0HW-GPC-CD-SDESC KS0HW-GPC-CD-SDESC ; 
  10 KS0HW-SESN-YR KS0HW-SESN-YR ; 
  10 KS0HW-YEAR-DESC-CHAR KS0HW-YEAR-DESC-CHAR ; 
  10 KS0HW-YEAR KS0HW-YEAR ; 
    15 KS0HW-YEAR-CC KS0HW-YEAR-CC ; 
    15 KS0HW-YEAR-YY KS0HW-YEAR-YY ; 
  10 KS0HW-SESN-CD KS0HW-SESN-CD ; 
  10 KS0HW-SESN-DESC KS0HW-SESN-DESC ; 
  10 KS0HW-STAT KS0HW-STAT ; 
  10 KS0HW-STAT-DESC KS0HW-STAT-DESC ; 
  10 KS0HW-UPDATE-SW KS0HW-UPDATE-SW ; 
  10 KS0HW-RULE-NBR KS0HW-RULE-NBR ; 
    15 KS0HW-RULE-BYTE KS0HW-RULE-BYTE [10] ; 
  10 KS0HW-SAVE-PAGE KS0HW-SAVE-PAGE ; 
  10 KS0HW-PROD-STAT-CD KS0HW-PROD-STAT-CD ; 
  10 KS0HW-PRBM-CD KS0HW-PRBM-CD ; 
  10 KS0HW-ORDER-NBR KS0HW-ORDER-NBR ; 
  10 KS0HW-HTS-NBR KS0HW-HTS-NBR ; 
    15 KS0HW-HTS-CPTR-CD KS0HW-HTS-CPTR-CD ; 
    15 KS0HW-HTS-HDG-CD KS0HW-HTS-HDG-CD ; 
    15 * char(1) ; 
    15 KS0HW-SHDG-FORMAT-FLD KS0HW-SHDG-FORMAT-FLD ; 
      20 KS0HW-HTS-1ST-SHDG-CD KS0HW-HTS-1ST-SHDG-CD ; 
      20 KS0HW-PERIOD char(1) ; 
      20 KS0HW-HTS-2ND-SHDG-CD1 KS0HW-HTS-2ND-SHDG-CD1 ; 
    15 KS0HW-HTS-STAT KS0HW-HTS-STAT ; 
      20 KS0HW-HTS-STAT-CD KS0HW-HTS-STAT-CD ; 
      20 * char(1) ; 
      20 * char(1) ; 
  10 KS0HW-HTS-NUMBER KS0HW-HTS-NUMBER ; 
    15 KS0HW-HTS-BYTE KS0HW-HTS-BYTE [14] ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end KS0HW00

//*** RECORD=KS0HW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0HW01 type basicRecord
  10 KS0HM-SEL KS0HM-SEL [98] ; 
  10 KS0HW-IXL KS0HW-IXL ; 
  10 KS0HW-IXM KS0HW-IXM ; 
  10 KS0HW-SWX KS0HW-SWX ; 
end // end KS0HW01

//*** RECORD=KS0HW02 ****
// ------------------------------------------------------------
// Parameters for KS0H-2000  Customs Classification Report
// ------------------------------------------------------------
// ***********************
Record KS0HW02 type basicRecord
  10 KS0HW-W2-PARM-REC-1 KS0HW-W2-PARM-REC-1 ; 
    15 KS0HW-W2-GPC-CD KS0HW-W2-GPC-CD ; 
    15 KS0HW-W2-GPC-DESC KS0HW-W2-GPC-DESC ; 
    15 KS0HW-W2-DIV-CD KS0HW-W2-DIV-CD ; 
    15 KS0HW-W2-HTS-CPTR-CD KS0HW-W2-HTS-CPTR-CD ; 
    15 KS0HW-W2-HTS-HDG-CD KS0HW-W2-HTS-HDG-CD ; 
    15 KS0HW-W2-HTS-1ST-SHDG-CD KS0HW-W2-HTS-1ST-SHDG-CD ; 
    15 KS0HW-W2-HTS-2ND-SHDG-CD1 KS0HW-W2-HTS-2ND-SHDG-CD1 ; 
    15 KS0HW-W2-HTS-2ND-SHDG-CD2 KS0HW-W2-HTS-2ND-SHDG-CD2 ; 
      20 KS0HW-W2-HTS-2ND-SHDG-CD21 KS0HW-W2-HTS-2ND-SHDG-CD21 ; 
      20 KS0HW-W2-HTS-2ND-SHDG-CD22 KS0HW-W2-HTS-2ND-SHDG-CD22 ; 
    15 KS0HW-W2-HTS-STAT-CD KS0HW-W2-HTS-STAT-CD ; 
    15 KS0HW-W2-HTS-RNG-FL KS0HW-W2-HTS-RNG-FL ; 
    15 KS0HW-W2-STY-NBR KS0HW-W2-STY-NBR ; 
    15 KS0HW-W2-COLR-CD KS0HW-W2-COLR-CD ; 
    15 KS0HW-W2-DIM-CD KS0HW-W2-DIM-CD ; 
    15 KS0HW-W2-RULE-NBR KS0HW-W2-RULE-NBR ; 
    15 KS0HW-W2-SESN-CD KS0HW-W2-SESN-CD ; 
    15 KS0HW-W2-SESN-YR-RNG KS0HW-W2-SESN-YR-RNG ; 
    15 * char(2) ; 
    15 KS0HW-W2-TEAM-CD KS0HW-W2-TEAM-CD ; 
    15 KS0HW-W2-PRDCTN-YR KS0HW-W2-PRDCTN-YR ; 
    15 KS0HW-W2-PRDCTN-MO KS0HW-W2-PRDCTN-MO ; 
    15 KS0HW-W2-DLVR-MO KS0HW-W2-DLVR-MO ; 
    15 KS0HW-W2-FCTY-CD KS0HW-W2-FCTY-CD ; 
    15 KS0HW-W2-PROB-CD KS0HW-W2-PROB-CD ; 
    15 KS0HW-W2-US-MADE KS0HW-W2-US-MADE ; 
  10 KS0HW-W2-PARM-REC-2 KS0HW-W2-PARM-REC-2 ; 
    15 KS0HW-W2-CTRY-CD KS0HW-W2-CTRY-CD ; 
    15 KS0HW-W2-EXP-STYLE KS0HW-W2-EXP-STYLE ; 
    15 KS0HW-W2-IN-NC-STAT KS0HW-W2-IN-NC-STAT ; 
    15 KS0HW-W2-IN-TC-STAT KS0HW-W2-IN-TC-STAT ; 
    15 KS0HW-W2-IN-BR-STAT KS0HW-W2-IN-BR-STAT ; 
    15 KS0HW-W2-IN-SP-STAT KS0HW-W2-IN-SP-STAT ; 
    15 KS0HW-W2-IN-SB-STAT KS0HW-W2-IN-SB-STAT ; 
    15 KS0HW-W2-IN-BN-STAT KS0HW-W2-IN-BN-STAT ; 
    15 KS0HW-W2-IN-OTH-STAT KS0HW-W2-IN-OTH-STAT ; 
    15 KS0HW-W2-CO-NC-STAT KS0HW-W2-CO-NC-STAT ; 
    15 KS0HW-W2-CO-TC-STAT KS0HW-W2-CO-TC-STAT ; 
    15 KS0HW-W2-CO-BR-STAT KS0HW-W2-CO-BR-STAT ; 
    15 KS0HW-W2-COL-BRULE KS0HW-W2-COL-BRULE ; 
    15 KS0HW-W2-COL-BRULE-XREF KS0HW-W2-COL-BRULE-XREF ; 
    15 KS0HW-W2-COL-HS-NBR KS0HW-W2-COL-HS-NBR ; 
    15 KS0HW-W2-COL-QUOTA KS0HW-W2-COL-QUOTA ; 
    15 KS0HW-W2-COL-DUTY KS0HW-W2-COL-DUTY ; 
    15 KS0HW-W2-COL-CTRY KS0HW-W2-COL-CTRY ; 
    15 KS0HW-W2-CATLG-PG KS0HW-W2-CATLG-PG ; 
    15 KS0HW-W2-COMMENTS KS0HW-W2-COMMENTS ; 
    15 KS0HW-W2-RPT-TITLE KS0HW-W2-RPT-TITLE ; 
    15 * char(5) ; 
  10 KS0HW-W2-PARM-REC-3 KS0HW-W2-PARM-REC-3 ; 
    15 KS0HW-W2-STY-TYP-CD1 KS0HW-W2-STY-TYP-CD1 ; 
    15 KS0HW-W2-STY-TYP-CD2 KS0HW-W2-STY-TYP-CD2 ; 
    15 KS0HW-W2-STY-TYP-CD3 KS0HW-W2-STY-TYP-CD3 ; 
    15 KS0HW-W2-SORT-STY-NBR KS0HW-W2-SORT-STY-NBR ; 
    15 KS0HW-W2-SORT-STY-NM KS0HW-W2-SORT-STY-NM ; 
    15 KS0HW-W2-USERID KS0HW-W2-USERID ; 
    15 KS0HW-W2-LOCAL-COPIES KS0HW-W2-LOCAL-COPIES ; 
    15 KS0HW-W2-PROD-REG-CD KS0HW-W2-PROD-REG-CD ; 
    15 KS0HW-W2-QOTA-CAT-CD KS0HW-W2-QOTA-CAT-CD ; 
    15 * char(53) ; 
end // end KS0HW02

//*** RECORD=KS0HW03 ****
// ------------------------------------------------------------
// Parameters for KS0H - Style Registration Sheet Report
// ------------------------------------------------------------
// ***********************
Record KS0HW03 type basicRecord
  5 TARJCL TARJCL ; 
    10 KS0HW-W3-GPC-CD KS0HW-W3-GPC-CD ; 
    10 KS0HW-W3-HTS-CPTR-CD KS0HW-W3-HTS-CPTR-CD ; 
    10 KS0HW-W3-HTS-HDG-CD KS0HW-W3-HTS-HDG-CD ; 
    10 KS0HW-W3-HTS-1ST-SHDG-CD KS0HW-W3-HTS-1ST-SHDG-CD ; 
    10 KS0HW-W3-HTS-2ND-SHDG-CD1 KS0HW-W3-HTS-2ND-SHDG-CD1 ; 
    10 KS0HW-W3-HTS-2ND-SHDG-CD2 KS0HW-W3-HTS-2ND-SHDG-CD2 ; 
      15 KS0HW-W3-HTS-2ND-SHDG-CD21 KS0HW-W3-HTS-2ND-SHDG-CD21 ; 
      15 KS0HW-W3-HTS-2ND-SHDG-CD22 KS0HW-W3-HTS-2ND-SHDG-CD22 ; 
    10 KS0HW-W3-HTS-STAT-CD KS0HW-W3-HTS-STAT-CD ; 
    10 KS0HW-W3-HTS-RNG-FL KS0HW-W3-HTS-RNG-FL ; 
    10 KS0HW-W3-STY-NBR KS0HW-W3-STY-NBR ; 
    10 KS0HW-W3-RULE-NBR KS0HW-W3-RULE-NBR ; 
    10 KS0HW-W3-SESN-CD KS0HW-W3-SESN-CD ; 
    10 KS0HW-W3-SESN-YR-RNG KS0HW-W3-SESN-YR-RNG ; 
    10 KS0HW-W3-TEAM-CD KS0HW-W3-TEAM-CD ; 
    10 KS0HW-W3-PRBM-CD KS0HW-W3-PRBM-CD ; 
    10 KS0HW-W3-US-MADE KS0HW-W3-US-MADE ; 
    10 KS0HW-W3-CTRY-CD KS0HW-W3-CTRY-CD ; 
    10 KS0HW-W3-EXP-STYLE KS0HW-W3-EXP-STYLE ; 
    10 KS0HW-W3-IN-NC-STAT KS0HW-W3-IN-NC-STAT ; 
    10 KS0HW-W3-IN-TC-STAT KS0HW-W3-IN-TC-STAT ; 
    10 KS0HW-W3-IN-BR-STAT KS0HW-W3-IN-BR-STAT ; 
    10 KS0HW-W3-IN-SP-STAT KS0HW-W3-IN-SP-STAT ; 
    10 KS0HW-W3-IN-SB-STAT KS0HW-W3-IN-SB-STAT ; 
    10 KS0HW-W3-IN-BN-STAT KS0HW-W3-IN-BN-STAT ; 
    10 KS0HW-W3-IN-OTH-STAT KS0HW-W3-IN-OTH-STAT ; 
    10 KS0HW-W3-CO-NC-STAT KS0HW-W3-CO-NC-STAT ; 
    10 KS0HW-W3-CO-TC-STAT KS0HW-W3-CO-TC-STAT ; 
    10 KS0HW-W3-CO-BR-STAT KS0HW-W3-CO-BR-STAT ; 
    10 KS0HW-W3-USERID KS0HW-W3-USERID ; 
    10 KS0HW-W3-LOCAL-COPIES KS0HW-W3-LOCAL-COPIES ; 
    10 KS0HW-W3-DIV-CD KS0HW-W3-DIV-CD ; 
    10 * char(3) ; 
  5 KS0HW-W3-JCLPARM-2 KS0HW-W3-JCLPARM-2 ; 
    10 KS0HW-W3-STY-TYP-CD1 KS0HW-W3-STY-TYP-CD1 ; 
    10 KS0HW-W3-STY-TYP-CD2 KS0HW-W3-STY-TYP-CD2 ; 
    10 KS0HW-W3-STY-TYP-CD3 KS0HW-W3-STY-TYP-CD3 ; 
    10 KS0HW-W3-PROD-REG-CD KS0HW-W3-PROD-REG-CD ; 
    10 KS0HW-W3-QOTA-CAT-CD KS0HW-W3-QOTA-CAT-CD ; 
    10 * char(65) ; 
end // end KS0HW03

//*** RECORD=KS0HW04 ****
// ------------------------------------------------------------
// Parameters for KS0H-4000  Customs H.S. Number Report
// ------------------------------------------------------------
// ***********************
Record KS0HW04 type basicRecord
  10 KS0HW-W4-PARM-REC KS0HW-W4-PARM-REC ; 
    15 KS0HW-W4-HTS-CPTR-CD KS0HW-W4-HTS-CPTR-CD ; 
    15 KS0HW-W4-HTS-HDG-CD KS0HW-W4-HTS-HDG-CD ; 
    15 KS0HW-W4-HTS-1ST-SHDG-CD KS0HW-W4-HTS-1ST-SHDG-CD ; 
    15 KS0HW-W4-HTS-2ND-SHDG-CD1 KS0HW-W4-HTS-2ND-SHDG-CD1 ; 
    15 KS0HW-W4-HTS-STAT-CD KS0HW-W4-HTS-STAT-CD ; 
    15 * char(1) ; 
    15 * char(1) ; 
    15 KS0HW-W4-STATUS KS0HW-W4-STATUS ; 
    15 KS0HW-W4-PRINT-ALL KS0HW-W4-PRINT-ALL ; 
    15 * char(1) ; 
    15 KS0HW-W4-LOCAL-COPIES KS0HW-W4-LOCAL-COPIES ; 
    15 KS0HW-W4-USERID KS0HW-W4-USERID ; 
    15 * char(55) ; 
end // end KS0HW04

//*** RECORD=KS0HW05 ****
// ------------------------------------------------------------
// Parameters for KS0H-05000 Customs CF5523 Exception Report
// ------------------------------------------------------------
// ***********************
Record KS0HW05 type basicRecord
  10 KS0HW-W5-PARM-REC KS0HW-W5-PARM-REC ; 
    15 KS0HW-W5-GPC-CD KS0HW-W5-GPC-CD ; 
    15 KS0HW-W5-POID-ZERO KS0HW-W5-POID-ZERO ; 
    15 KS0HW-W5-PRDCTN-CC KS0HW-W5-PRDCTN-CC ; 
    15 KS0HW-W5-PRDCTN-YR KS0HW-W5-PRDCTN-YR ; 
    15 KS0HW-W5-PRDCTN-MO KS0HW-W5-PRDCTN-MO ; 
    15 KS0HW-W5-DLVR-MO KS0HW-W5-DLVR-MO ; 
    15 KS0HW-W5-FCTY-CD KS0HW-W5-FCTY-CD ; 
    15 KS0HW-W5-STY-NBR KS0HW-W5-STY-NBR ; 
    15 KS0HW-W5-COLR-CD KS0HW-W5-COLR-CD ; 
    15 KS0HW-W5-DIM-CD KS0HW-W5-DIM-CD ; 
    15 KS0HW-W5-CTRY-CD KS0HW-W5-CTRY-CD ; 
    15 KS0HW-W5-USERID KS0HW-W5-USERID ; 
    15 KS0HW-W5-LOCAL-COPIES KS0HW-W5-LOCAL-COPIES ; 
    15 KS0HW-W5-FILLER KS0HW-W5-FILLER ; 
end // end KS0HW05

//*** RECORD=KS0HW06 ****
// ------------------------------------------------------------
// Parameters for KS0H-6000  Customs Binding Ruling Report
// ------------------------------------------------------------
// ***********************
Record KS0HW06 type basicRecord
  10 KS0HW-W6-PARM-REC KS0HW-W6-PARM-REC ; 
    15 KS0HW-W6-GPC-CD KS0HW-W6-GPC-CD ; 
    15 KS0HW-W6-SESN-CD KS0HW-W6-SESN-CD ; 
    15 KS0HW-W6-SESN-YR-RNG KS0HW-W6-SESN-YR-RNG ; 
    15 KS0HW-W6-STAT-CD KS0HW-W6-STAT-CD ; 
    15 KS0HW-W6-PRINT-ALL KS0HW-W6-PRINT-ALL ; 
    15 KS0HW-W6-LOCAL-COPIES KS0HW-W6-LOCAL-COPIES ; 
    15 KS0HW-W6-USERID KS0HW-W6-USERID ; 
    15 * char(60) ; 
end // end KS0HW06

//*** RECORD=KS0HW07 ****
// ------------------------------------------------------------
// Parameters for KS0H-2000  Customs Classification Report
// ------------------------------------------------------------
// ***********************
Record KS0HW07 type basicRecord
  10 KS0HW-W7-PARM-REC-1 KS0HW-W7-PARM-REC-1 ; 
    15 KS0HW-W7-GPC-CD KS0HW-W7-GPC-CD ; 
    15 KS0HW-W7-GPC-DESC KS0HW-W7-GPC-DESC ; 
    15 KS0HW-W7-DIV-CD KS0HW-W7-DIV-CD ; 
    15 KS0HW-W7-HTS-CPTR-CD KS0HW-W7-HTS-CPTR-CD ; 
    15 KS0HW-W7-HTS-HDG-CD KS0HW-W7-HTS-HDG-CD ; 
    15 KS0HW-W7-HTS-1ST-SHDG-CD KS0HW-W7-HTS-1ST-SHDG-CD ; 
    15 KS0HW-W7-HTS-2ND-SHDG-CD1 KS0HW-W7-HTS-2ND-SHDG-CD1 ; 
    15 KS0HW-W7-HTS-2ND-SHDG-CD2 KS0HW-W7-HTS-2ND-SHDG-CD2 ; 
      20 KS0HW-W7-HTS-2ND-SHDG-CD21 KS0HW-W7-HTS-2ND-SHDG-CD21 ; 
      20 KS0HW-W7-HTS-2ND-SHDG-CD22 KS0HW-W7-HTS-2ND-SHDG-CD22 ; 
    15 KS0HW-W7-HTS-STAT-CD KS0HW-W7-HTS-STAT-CD ; 
    15 KS0HW-W7-HTS-RNG-FL KS0HW-W7-HTS-RNG-FL ; 
    15 KS0HW-W7-STY-NBR KS0HW-W7-STY-NBR ; 
    15 KS0HW-W7-COLR-CD KS0HW-W7-COLR-CD ; 
    15 KS0HW-W7-DIM-CD KS0HW-W7-DIM-CD ; 
    15 KS0HW-W7-RULE-NBR KS0HW-W7-RULE-NBR ; 
    15 KS0HW-W7-SESN-CD KS0HW-W7-SESN-CD ; 
    15 KS0HW-W7-SESN-YR-RNG KS0HW-W7-SESN-YR-RNG ; 
    15 KS0HW-W7-TEAM-CD KS0HW-W7-TEAM-CD ; 
    15 KS0HW-W7-PRDCTN-YR KS0HW-W7-PRDCTN-YR ; 
    15 KS0HW-W7-PRDCTN-MO KS0HW-W7-PRDCTN-MO ; 
    15 KS0HW-W7-DLVR-MO KS0HW-W7-DLVR-MO ; 
    15 KS0HW-W7-FCTY-CD KS0HW-W7-FCTY-CD ; 
    15 KS0HW-W7-PROB-CD KS0HW-W7-PROB-CD ; 
    15 KS0HW-W7-US-MADE KS0HW-W7-US-MADE ; 
    15 * char(2) ; 
  10 KS0HW-W7-PARM-REC-2 KS0HW-W7-PARM-REC-2 ; 
    15 KS0HW-W7-CTRY-CD KS0HW-W7-CTRY-CD ; 
    15 KS0HW-W7-EXP-STYLE KS0HW-W7-EXP-STYLE ; 
    15 KS0HW-W7-IN-NC-STAT KS0HW-W7-IN-NC-STAT ; 
    15 KS0HW-W7-IN-TC-STAT KS0HW-W7-IN-TC-STAT ; 
    15 KS0HW-W7-IN-BR-STAT KS0HW-W7-IN-BR-STAT ; 
    15 KS0HW-W7-IN-SP-STAT KS0HW-W7-IN-SP-STAT ; 
    15 KS0HW-W7-IN-SB-STAT KS0HW-W7-IN-SB-STAT ; 
    15 KS0HW-W7-IN-BN-STAT KS0HW-W7-IN-BN-STAT ; 
    15 KS0HW-W7-IN-OTH-STAT KS0HW-W7-IN-OTH-STAT ; 
    15 KS0HW-W7-CO-NC-STAT KS0HW-W7-CO-NC-STAT ; 
    15 KS0HW-W7-CO-TC-STAT KS0HW-W7-CO-TC-STAT ; 
    15 KS0HW-W7-CO-BR-STAT KS0HW-W7-CO-BR-STAT ; 
    15 KS0HW-W7-SORT-STY-NBR KS0HW-W7-SORT-STY-NBR ; 
    15 KS0HW-W7-SORT-STY-NM KS0HW-W7-SORT-STY-NM ; 
    15 KS0HW-W7-RPT-TITLE KS0HW-W7-RPT-TITLE ; 
    15 KS0HW-W7-USERID KS0HW-W7-USERID ; 
    15 KS0HW-W7-LOCAL-COPIES KS0HW-W7-LOCAL-COPIES ; 
    15 * char(1) ; 
  10 KS0HW-W7-PARM-REC-3 KS0HW-W7-PARM-REC-3 ; 
    15 KS0HW-W7-STY-TYP-CD1 KS0HW-W7-STY-TYP-CD1 ; 
    15 KS0HW-W7-STY-TYP-CD2 KS0HW-W7-STY-TYP-CD2 ; 
    15 KS0HW-W7-STY-TYP-CD3 KS0HW-W7-STY-TYP-CD3 ; 
    15 KS0HW-W7-COL-BRULE KS0HW-W7-COL-BRULE ; 
    15 KS0HW-W7-COL-BRULE-XREF KS0HW-W7-COL-BRULE-XREF ; 
    15 KS0HW-W7-COL-CF5523 KS0HW-W7-COL-CF5523 ; 
    15 KS0HW-W7-COL-HS-NBR KS0HW-W7-COL-HS-NBR ; 
    15 KS0HW-W7-COL-DUTY KS0HW-W7-COL-DUTY ; 
    15 KS0HW-W7-COL-FOXING KS0HW-W7-COL-FOXING ; 
    15 KS0HW-W7-COMMENTS KS0HW-W7-COMMENTS ; 
    15 KS0HW-W7-PROD-REG-CD KS0HW-W7-PROD-REG-CD ; 
    15 KS0HW-W7-QOTA-CAT-CD KS0HW-W7-QOTA-CAT-CD ; 
    15 * char(58) ; 
end // end KS0HW07

//*** RECORD=KS0HW08 ****
// ------------------------------------------------------------
// Parameters for KS0H-08000  Quota Cat by Country Report
// ------------------------------------------------------------
// ***********************
Record KS0HW08 type basicRecord
  10 KS0HW-W8-PARM-REC KS0HW-W8-PARM-REC ; 
    15 * char(1) ; 
    15 KS0HW-W8-GPC-CD KS0HW-W8-GPC-CD ; 
    15 KS0HW-W8-SESN-YR-RNG KS0HW-W8-SESN-YR-RNG ; 
    15 KS0HW-W8-SESN-CD KS0HW-W8-SESN-CD ; 
    15 * char(15) ; 
    15 KS0HW-W8-DIV-CD KS0HW-W8-DIV-CD ; 
    15 KS0HW-W8-CTRY-CD KS0HW-W8-CTRY-CD ; 
    15 * char(30) ; 
    15 KS0HW-W8-QOTA-CAT-CD KS0HW-W8-QOTA-CAT-CD ; 
    15 KS0HW-W8-LOCAL-COPIES KS0HW-W8-LOCAL-COPIES ; 
    15 KS0HW-W8-USERID KS0HW-W8-USERID ; 
    15 KS0HW-W8-PROD-REG-CD KS0HW-W8-PROD-REG-CD ; 
    15 * char(1) ; 
end // end KS0HW08

//*** RECORD=KS0HW09 ****
// ------------------------------------------------------------
// Parameters for KS0H-09000  Customs Component Mapper Refresh
//          *** No parameters exist for this job ***
// ------------------------------------------------------------
// ***********************
Record KS0HW09 type basicRecord
  10 * char(80) ; // Parm Record 1
end // end KS0HW09

//*** RECORD=KS0HW10 ****
// ------------------------------------------------------------
// Parameters for KS0H-08000  Quota Cat by Country Report
// ------------------------------------------------------------
// ***********************
Record KS0HW10 type basicRecord
  10 KS0HW-W10-PARM-REC KS0HW-W10-PARM-REC ; 
    15 KS0HW-W10-GPC-CD KS0HW-W10-GPC-CD ; 
    15 KS0HW-W10-SESN-CD KS0HW-W10-SESN-CD ; 
    15 KS0HW-W10-SESN-YR-RNG KS0HW-W10-SESN-YR-RNG ; 
    15 KS0HW-W10-LOCAL-COPIES KS0HW-W10-LOCAL-COPIES ; 
    15 KS0HW-W10-USERID KS0HW-W10-USERID ; 
    15 * char(62) ; 
end // end KS0HW10

//*** RECORD=KS0HW12 ****
// ------------------------------------------------------------
// Parameters for KS0H-12000  Customs Directives Report
// ------------------------------------------------------------
// ***********************
Record KS0HW12 type basicRecord
  5 KS0HW-W12-PARM-REC KS0HW-W12-PARM-REC ; 
    10 KS0HW-W12-ALL-DATA-FL KS0HW-W12-ALL-DATA-FL ; 
    10 KS0HW-W12-ORDER-NBR KS0HW-W12-ORDER-NBR ; 
    10 KS0HW-W12-HTS-NBR KS0HW-W12-HTS-NBR ; 
    10 KS0HW-W12-LOCAL-COPIES KS0HW-W12-LOCAL-COPIES ; 
    10 KS0HW-W12-USERID KS0HW-W12-USERID ; 
end // end KS0HW12

//*** RECORD=KS0HW13 ****
// ------------------------------------------------------------
// Parameters for KS0H-13000 Models without planimtr rdg report
// ------------------------------------------------------------
// ***********************
Record KS0HW13 type basicRecord
  10 KS0HW-W13-PARM-REC KS0HW-W13-PARM-REC ; 
    15 KS0HW-W13-PRDCTN-YR KS0HW-W13-PRDCTN-YR ; 
    15 KS0HW-W13-PRDCTN-MO KS0HW-W13-PRDCTN-MO ; 
    15 KS0HW-W13-DLVR-MO KS0HW-W13-DLVR-MO ; 
    15 KS0HW-W13-FCTY-CD KS0HW-W13-FCTY-CD ; 
    15 KS0HW-W13-SESN-CD KS0HW-W13-SESN-CD ; 
    15 KS0HW-W13-SESN-YR-RNG KS0HW-W13-SESN-YR-RNG ; 
    15 KS0HW-W13-HTS-NBR KS0HW-W13-HTS-NBR ; 
    15 KS0HW-W13-STY-NBR KS0HW-W13-STY-NBR ; 
    15 KS0HW-W13-PROD-STAT-CD KS0HW-W13-PROD-STAT-CD ; 
    15 KS0HW-W13-COLR-CD KS0HW-W13-COLR-CD ; 
    15 KS0HW-W13-CTRY-CD KS0HW-W13-CTRY-CD ; 
    15 KS0HW-W13-DIM-CD KS0HW-W13-DIM-CD ; 
    15 KS0HW-W13-USERID KS0HW-W13-USERID ; 
    15 KS0HW-W13-LOCAL-COPIES KS0HW-W13-LOCAL-COPIES ; 
    15 KS0HW-W13-PRDCTN-CC KS0HW-W13-PRDCTN-CC ; 
    15 KS0HW-W13-GPC-CD KS0HW-W13-GPC-CD ; 
    15 KS0HW-HTS-NBR KS0HW-HTS-NBR ; 
      20 KS0HW-HTS-BYTE KS0HW-HTS-BYTE [14] ; 
end // end KS0HW13

// Menu selection field
DataItem KS0HM-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0HW-ALL-DATA-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit flag
DataItem KS0HW-EDIT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC CODE
DataItem KS0HW-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc description
DataItem KS0HW-GPC-CD-SDESC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st subheading code
DataItem KS0HW-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd subheading code
DataItem KS0HW-HTS-2ND-SHDG-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS byte
DataItem KS0HW-HTS-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Chapter code
DataItem KS0HW-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Heading code
DataItem KS0HW-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS number
DataItem KS0HW-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS number
DataItem KS0HW-HTS-NUMBER char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status and sufx codes
DataItem KS0HW-HTS-STAT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status code
DataItem KS0HW-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0HW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem KS0HW-IXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0HW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0HW-IXX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// customer order number
DataItem KS0HW-ORDER-NBR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pop-up window switch
DataItem KS0HW-POP-UP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem KS0HW-PRBM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem KS0HW-PROD-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ks_rule_nbr single byte
DataItem KS0HW-RULE-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR
DataItem KS0HW-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem KS0HW-SAVE-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SEASON CODE
DataItem KS0HW-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON CODE DESCRIPTION - HDR
DataItem KS0HW-SESN-DESC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON YEAR
DataItem KS0HW-SESN-YR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// function switch
DataItem KS0HW-SFN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subheading codes 1 and 2
DataItem KS0HW-SHDG-FORMAT-FLD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STATUS CODE
DataItem KS0HW-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STATUS CODE DESCRIPTION - HDR
DataItem KS0HW-STAT-DESC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KS0HW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem KS0HW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KS0HW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0HW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0HW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem KS0HW-SWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem KS0HW-UPDATE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem KS0HW-W10-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Copies for LOCAL Ptr
DataItem KS0HW-W10-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Parm record 1
DataItem KS0HW-W10-PARM-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_CD
DataItem KS0HW-W10-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE_SESN_YR_RNG
DataItem KS0HW-W10-SESN-YR-RNG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CAUSERID
DataItem KS0HW-W10-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0HW-W12-ALL-DATA-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number
DataItem KS0HW-W12-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// local copies
DataItem KS0HW-W12-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer order number
DataItem KS0HW-W12-ORDER-NBR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 12
DataItem KS0HW-W12-PARM-REC char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id
DataItem KS0HW-W12-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0HW-W13-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Origin country code
DataItem KS0HW-W13-CTRY-CD char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem KS0HW-W13-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID deliver month
DataItem KS0HW-W13-DLVR-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory code
DataItem KS0HW-W13-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem KS0HW-W13-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hts Number
DataItem KS0HW-W13-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Copies for LOCAL Ptr
DataItem KS0HW-W13-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 1
DataItem KS0HW-W13-PARM-REC char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production century
DataItem KS0HW-W13-PRDCTN-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production month
DataItem KS0HW-W13-PRDCTN-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production year
DataItem KS0HW-W13-PRDCTN-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Status code
DataItem KS0HW-W13-PROD-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season code
DataItem KS0HW-W13-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season year range
DataItem KS0HW-W13-SESN-YR-RNG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0HW-W13-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CAUSERID
DataItem KS0HW-W13-USERID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Catalog page Column
DataItem KS0HW-W2-CATLG-PG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close-out status BR
DataItem KS0HW-W2-CO-BR-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close-out status NC
DataItem KS0HW-W2-CO-NC-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close-out status TC
DataItem KS0HW-W2-CO-TC-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Binding Ruling Column
DataItem KS0HW-W2-COL-BRULE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Binding Ruling Cross Reference
DataItem KS0HW-W2-COL-BRULE-XREF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Country Code Column
DataItem KS0HW-W2-COL-CTRY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General Duty Rate Column
DataItem KS0HW-W2-COL-DUTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS number Column
DataItem KS0HW-W2-COL-HS-NBR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quota Cat Code Column
DataItem KS0HW-W2-COL-QUOTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0HW-W2-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comments Column
DataItem KS0HW-W2-COMMENTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Origin country code
DataItem KS0HW-W2-CTRY-CD char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem KS0HW-W2-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Division Code
DataItem KS0HW-W2-DIV-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID deliver month
DataItem KS0HW-W2-DLVR-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0HW-W2-EXP-STYLE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory code
DataItem KS0HW-W2-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem KS0HW-W2-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC Description
DataItem KS0HW-W2-GPC-DESC char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_1ST_SHDG_CD
DataItem KS0HW-W2-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD1
DataItem KS0HW-W2-HTS-2ND-SHDG-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD2
DataItem KS0HW-W2-HTS-2ND-SHDG-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD2 char 1
DataItem KS0HW-W2-HTS-2ND-SHDG-CD21 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD2 char 2
DataItem KS0HW-W2-HTS-2ND-SHDG-CD22 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_CPTR_CD
DataItem KS0HW-W2-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_HDG_CD
DataItem KS0HW-W2-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_RNG_FL
DataItem KS0HW-W2-HTS-RNG-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_STAT_CD
DataItem KS0HW-W2-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status BN
DataItem KS0HW-W2-IN-BN-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status BR
DataItem KS0HW-W2-IN-BR-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status NC
DataItem KS0HW-W2-IN-NC-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line other status
DataItem KS0HW-W2-IN-OTH-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status SB
DataItem KS0HW-W2-IN-SB-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status SP
DataItem KS0HW-W2-IN-SP-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status TC
DataItem KS0HW-W2-IN-TC-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Copies for LOCAL Ptr
DataItem KS0HW-W2-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 1
DataItem KS0HW-W2-PARM-REC-1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 2
DataItem KS0HW-W2-PARM-REC-2 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 3
DataItem KS0HW-W2-PARM-REC-3 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production month
DataItem KS0HW-W2-PRDCTN-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production year
DataItem KS0HW-W2-PRDCTN-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// KS_PRBM_CD
DataItem KS0HW-W2-PROB-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Marketing Region Code
DataItem KS0HW-W2-PROD-REG-CD char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Quota Category Code
DataItem KS0HW-W2-QOTA-CAT-CD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report Title Field
DataItem KS0HW-W2-RPT-TITLE char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR
DataItem KS0HW-W2-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_CD
DataItem KS0HW-W2-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE_SESN_YR_RNG
DataItem KS0HW-W2-SESN-YR-RNG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sort by style nbr flag
DataItem KS0HW-W2-SORT-STY-NBR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sort by style name flag
DataItem KS0HW-W2-SORT-STY-NM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0HW-W2-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 1
DataItem KS0HW-W2-STY-TYP-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 2
DataItem KS0HW-W2-STY-TYP-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 3
DataItem KS0HW-W2-STY-TYP-CD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Team Code
DataItem KS0HW-W2-TEAM-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// US Made Flag
DataItem KS0HW-W2-US-MADE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CAUSERID
DataItem KS0HW-W2-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close-out br status
DataItem KS0HW-W3-CO-BR-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close-out nc status
DataItem KS0HW-W3-CO-NC-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close-out tc status
DataItem KS0HW-W3-CO-TC-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Country code
DataItem KS0HW-W3-CTRY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Xdv_div_cd
DataItem KS0HW-W3-DIV-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Experimental style flag
DataItem KS0HW-W3-EXP-STYLE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem KS0HW-W3-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS 1ST SUBHEADING CODE
DataItem KS0HW-W3-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS 2ND SUBHEADING CODE 1
DataItem KS0HW-W3-HTS-2ND-SHDG-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS 2ND SUBHEADING CODE 2
DataItem KS0HW-W3-HTS-2ND-SHDG-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS 2ND SUBHEADING CODE byte 1
DataItem KS0HW-W3-HTS-2ND-SHDG-CD21 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS 2ND SUBHEADING CODE byte 2
DataItem KS0HW-W3-HTS-2ND-SHDG-CD22 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS CHAPTER CODE
DataItem KS0HW-W3-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HS HEADING CODE
DataItem KS0HW-W3-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_RNG_FL
DataItem KS0HW-W3-HTS-RNG-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// HS STATUS CODE
DataItem KS0HW-W3-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line bn status
DataItem KS0HW-W3-IN-BN-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line br status
DataItem KS0HW-W3-IN-BR-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line nc status
DataItem KS0HW-W3-IN-NC-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line other status
DataItem KS0HW-W3-IN-OTH-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line sb status
DataItem KS0HW-W3-IN-SB-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line sp status
DataItem KS0HW-W3-IN-SP-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line tc status
DataItem KS0HW-W3-IN-TC-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL Parm 2
DataItem KS0HW-W3-JCLPARM-2 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number copies for LOCAL print
DataItem KS0HW-W3-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Features code
DataItem KS0HW-W3-PRBM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Marketing Region Code
DataItem KS0HW-W3-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quota category code
DataItem KS0HW-W3-QOTA-CAT-CD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rule number
DataItem KS0HW-W3-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0HW-W3-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0HW-W3-SESN-YR-RNG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0HW-W3-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 1
DataItem KS0HW-W3-STY-TYP-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style Type Code 2
DataItem KS0HW-W3-STY-TYP-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 3
DataItem KS0HW-W3-STY-TYP-CD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0HW-W3-TEAM-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// U.S. Made flag
DataItem KS0HW-W3-US-MADE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CAUSERID
DataItem KS0HW-W3-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_1ST_SHDG_CD
DataItem KS0HW-W4-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD1
DataItem KS0HW-W4-HTS-2ND-SHDG-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_CPTR_CD
DataItem KS0HW-W4-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_HDG_CD
DataItem KS0HW-W4-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_STAT_CD
DataItem KS0HW-W4-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number copies
DataItem KS0HW-W4-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parm Record 1
DataItem KS0HW-W4-PARM-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print-all flag
DataItem KS0HW-W4-PRINT-ALL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status code
DataItem KS0HW-W4-STATUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id
DataItem KS0HW-W4-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0HW-W5-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Origin country code
DataItem KS0HW-W5-CTRY-CD char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem KS0HW-W5-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID deliver month
DataItem KS0HW-W5-DLVR-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory code
DataItem KS0HW-W5-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KS0HW-W5-FILLER char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem KS0HW-W5-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Copies for LOCAL Ptr
DataItem KS0HW-W5-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 1
DataItem KS0HW-W5-PARM-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID leading zero
DataItem KS0HW-W5-POID-ZERO num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production century
DataItem KS0HW-W5-PRDCTN-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production month
DataItem KS0HW-W5-PRDCTN-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production year
DataItem KS0HW-W5-PRDCTN-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0HW-W5-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CAUSERID
DataItem KS0HW-W5-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem KS0HW-W6-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number copies
DataItem KS0HW-W6-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parm Record
DataItem KS0HW-W6-PARM-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print-all flag
DataItem KS0HW-W6-PRINT-ALL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE_SESN_CD
DataItem KS0HW-W6-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem KS0HW-W6-SESN-YR-RNG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// status code
DataItem KS0HW-W6-STAT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id
DataItem KS0HW-W6-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close-out status BR
DataItem KS0HW-W7-CO-BR-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close-out status NC
DataItem KS0HW-W7-CO-NC-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Close-out status TC
DataItem KS0HW-W7-CO-TC-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Include Binding Ruling column
DataItem KS0HW-W7-COL-BRULE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Include Binding Ruling xref cd
DataItem KS0HW-W7-COL-BRULE-XREF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Include CF5523/Type column
DataItem KS0HW-W7-COL-CF5523 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Include Duty Rate column
DataItem KS0HW-W7-COL-DUTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Include Foxing column
DataItem KS0HW-W7-COL-FOXING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Include HS Nbr column
DataItem KS0HW-W7-COL-HS-NBR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem KS0HW-W7-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Include Features column
DataItem KS0HW-W7-COMMENTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Origin country code
DataItem KS0HW-W7-CTRY-CD char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem KS0HW-W7-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Division Code
DataItem KS0HW-W7-DIV-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID deliver month
DataItem KS0HW-W7-DLVR-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0HW-W7-EXP-STYLE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory code
DataItem KS0HW-W7-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem KS0HW-W7-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC Description
DataItem KS0HW-W7-GPC-DESC char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_1ST_SHDG_CD
DataItem KS0HW-W7-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD1
DataItem KS0HW-W7-HTS-2ND-SHDG-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD2
DataItem KS0HW-W7-HTS-2ND-SHDG-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD2 char 1
DataItem KS0HW-W7-HTS-2ND-SHDG-CD21 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_2ND_SHDG_CD2 char 2
DataItem KS0HW-W7-HTS-2ND-SHDG-CD22 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_CPTR_CD
DataItem KS0HW-W7-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_HDG_CD
DataItem KS0HW-W7-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_RNG_FL
DataItem KS0HW-W7-HTS-RNG-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// KS_HTS_STAT_CD
DataItem KS0HW-W7-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status BN
DataItem KS0HW-W7-IN-BN-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status BR
DataItem KS0HW-W7-IN-BR-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status NC
DataItem KS0HW-W7-IN-NC-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status other
DataItem KS0HW-W7-IN-OTH-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status SB
DataItem KS0HW-W7-IN-SB-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status SP
DataItem KS0HW-W7-IN-SP-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// In-line status TC
DataItem KS0HW-W7-IN-TC-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Copies for LOCAL Ptr
DataItem KS0HW-W7-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 1
DataItem KS0HW-W7-PARM-REC-1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 2
DataItem KS0HW-W7-PARM-REC-2 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 3
DataItem KS0HW-W7-PARM-REC-3 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production month
DataItem KS0HW-W7-PRDCTN-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production year
DataItem KS0HW-W7-PRDCTN-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// KS_PRBM_CD
DataItem KS0HW-W7-PROB-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Marketing Region Code
DataItem KS0HW-W7-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quota Category Code
DataItem KS0HW-W7-QOTA-CAT-CD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report Title Field
DataItem KS0HW-W7-RPT-TITLE char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KS_RULE_NBR
DataItem KS0HW-W7-RULE-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_CD
DataItem KS0HW-W7-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE_SESN_YR_RNG
DataItem KS0HW-W7-SESN-YR-RNG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sort by STY-NBR flag
DataItem KS0HW-W7-SORT-STY-NBR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sort by STY-NM flag
DataItem KS0HW-W7-SORT-STY-NM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem KS0HW-W7-STY-NBR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 1
DataItem KS0HW-W7-STY-TYP-CD1 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 2
DataItem KS0HW-W7-STY-TYP-CD2 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Style Type Code 3
DataItem KS0HW-W7-STY-TYP-CD3 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Team Code
DataItem KS0HW-W7-TEAM-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// US Made Flag
DataItem KS0HW-W7-US-MADE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CAUSERID
DataItem KS0HW-W7-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Origin country code
DataItem KS0HW-W8-CTRY-CD char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Division Code
DataItem KS0HW-W8-DIV-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem KS0HW-W8-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Copies for LOCAL Ptr
DataItem KS0HW-W8-LOCAL-COPIES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Parm Record 1
DataItem KS0HW-W8-PARM-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Marketing Region Code
DataItem KS0HW-W8-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quota Category Code
DataItem KS0HW-W8-QOTA-CAT-CD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_CD
DataItem KS0HW-W8-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE_SESN_YR_RNG
DataItem KS0HW-W8-SESN-YR-RNG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CAUSERID
DataItem KS0HW-W8-USERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YEAR
DataItem KS0HW-YEAR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// century part of year
DataItem KS0HW-YEAR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SEASON description
DataItem KS0HW-YEAR-DESC-CHAR char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// last 2 digits of year
DataItem KS0HW-YEAR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

