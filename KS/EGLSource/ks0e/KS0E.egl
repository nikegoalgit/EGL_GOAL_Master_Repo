package ks0e;

import corpcom1.CACHGFL;
import corpcom2.XX0XW01;
import corpcom3.XPKS-00001;
import corpcom4.XSKS-S0001;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import ks.common.*;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VHSCHP01;
import vv.common.VHSHDG01;
//*** PROGRAM=KS0E ****
// This application displays the HS Chapter Headings. The user
// will be required to enter the CHAPT NBR in the map heading
// in order to bring up a list of all the headings associated
// with the chapter number. By entering a heading number, the
// user will have the cursor positioned on a particular Chapter
// Nbr/Hdg in the list. The user may also enter an entire HS
// NBR or pieces of one in the HS: field and then press ENTER.
// This will result in a transfer to another level at which
// they can see more information about the HS NBR they entered
// (ie. transfer to KS0E, KS0F OR KS0G).
// 
// By pressing PF13 without selecting any lines, the user will
// be transferred to the HS Chapter Heading ADD map. PF13 will
// only be visible and useable by those who have that
// authorization.
// 
// By pressing PF14 and selecting any number of lines from the
// current page, the user will be transferred to the HS Chapter
// Heading MAINT map. PF14 will only be visible and useable by
// those who have that authorization.
// 
// By pressing PF15 and selecting or not selecting a line, the
// user will transfer to the HS Chapter Sub-Heading application
// (KS0F).
// 
// By selecting a line and pressing ENTER, the user will be
// automatically transferred to the HS Chapter Sub-Heading
// application (KS0F).
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      12/04/91  bantho  New application.
// C004     04/13/92  dhuffm  Add more description lines.
// C000     08/27/92  SMARIE  Position cursor on first item
//                            line when coming from KS0C.
// C000     10/26/92  KKYLE   Blank out 'page' display when
//                            there is no data to display.
// C066     12/08/92  SMARIE  Remove all SUFX-ID references.
// y2kfix   11-04-97  oricha  y2k modifications:  regen to pick
//                            up xx0xs01 century adjustment.
// *********************
Program KS0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KS0EW00 KS0EW00; // record
  KS0EW01 KS0EW01; // record
  KS0EW02 KS0EW02; // record
  KSWREC KSWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VHSCHP01 VHSCHP01; // record
  VHSHDG01 VHSHDG01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KS0EM.KS0EM001,  // forms
      KS0EM.KS0EM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0EM001 initial; /* M001 input/output*/
    set KS0EM002 initial; /* M002 input/output*/
    set KS0EW00 empty; /* Working storage*/
    set KS0EW01 empty; /* M001 display storage*/
    set KS0EW02 empty; /* M002 display storage*/
    set SQLCA empty; /* sql communication area*/
    set TA1REC empty; /* error diagnosis information*/
    set TAEREC empty; /* error diagnosis parameters*/
    set TA5REC empty; /* temperary storage parameters*/
    set XX0XW01 empty; /* date/time subroutine parameters*/
    ;
    KS0EW00.KS0EW-SWF = "Y"; /* Format the map switch*/
    KS0EW00.KS0EW-SWR = "Y"; /* Request for data switch*/
    KS0EW00.KS0EW-SWD = "1"; /* Set to map 1 display*/
    converseLib.validationFailed(0); /* Set message blank*/
    KS0EW00.KS0EW-STAT = "A"; /* set default status code*/
    KS0EM001.KS0EM-STAT = "A"; /* default status code on map*/
    ;
    if (KSWREC.KS-HTS-CPTR-CD == " ") /* if no cptr cd passed in kswrec*/
      KS0EW00.KS0EW-SWF = "N"; /* do not format the map*/
      KS0EW00.KS0EW-SWR = "N"; /* do not request data*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0E-00000; /* Converse the main process*/
    ;
    KS0E-00000: KS0E-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0E-00000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end KS0E

// Main process to display a map
Function KS0E-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) If specified, display the first map.*/
  /* 2) Otherwise, if specified, display the second map.*/
  /* 3) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-SWD == "1") /* Map 1 was requested*/
    ;
    KS0E-10000(); /* Display map 1*/
    ;
  else
    ;
    if (KS0EW00.KS0EW-SWD == "2") /* Map 2 was requested*/
      ;
      KS0E-20000(); /* Display map 2*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
      /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      ;
      KSWREC.XXXPRCNM = "00000"; /* Module identification*/
      KSWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = KS0EW00.KS0EW-SWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
      /* ------------------------------------------------------------*/
      /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
      ;
      COMMAREA.CATOAP = "KS0A"; /* TO application*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
    ;
  end
  ;
  ;
end // end KS0E-00000

// Main process to display a map
Function KS0E-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0E-11000(); /* Obtain the data to display*/
  ;
  KS0E-12000(); /* Format and display the map*/
  ;
  KS0E-13000(); /* Check attention identifier*/
  ;
  KS0E-14000(); /* Reset fields to normal intensity*/
  ;
  KS0E-15000(); /* Verify the data that was entered*/
  ;
  KS0E-16000(); /* Process valid input request*/
  ;
  ;
end // end KS0E-10000

// Obtain the data to display
Function KS0E-11000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.XXXTSLEN = 757; /* Temporary storage page length*/
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO == 0) /* No message to display*/
    KS0EW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage*/
  /* ------------------------------------------------------------*/
  ;
  KS0E-11100(); /* Purge any temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* clear map 1 working storage*/
  /* ------------------------------------------------------------*/
  ;
  set KS0EW01 empty; /* clear map 1 working storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  KS0E-11300(); /* Select set and open cursor*/
  ;
  if (converseVar.validationMsgNum != 0) /* if not successful*/
    return; /* return to prev process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-IX2 = 1; /* set screen line index*/
  KS0EW00.KS0EW-IXM = 1; /* Display line index*/
  KS0EW00.KS0EW-SWC = "N"; /* End of cursor switch*/
  ;
  while (KS0EW00.KS0EW-SWC == "N") /* Until end of cursor*/
    ;
    KS0E-11400(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0EW00.KS0EW-SWC == "N") /* Not end of cursor*/
      KS0E-11500(); /* Save data in display storage*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0EW00.KS0EW-IX2 >= 15) /* Page is full*/
      ;
      KS0E-11600(); /* Add page to temporary storage*/
      ;
      KS0EW00.KS0EW-IX2 = 1; /* Display line index*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-IX2 > 1) /* Page was formatted*/
    KS0E-11600(); /* Add page to temporary storage*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  KS0E-11700(); /* Close the selected set cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.TA5TSQIX == 0) /* No pages formatted*/
    KSWREC.XXXPRCNM = "11000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    KS0EW00.KS0EW-SWF = "N"; /* do not format the map*/
    set KS0EM001.KS0EM-HTS-CPTR-CD cursor; /* put cursor on cptr cd*/
    set KS0EM001.XXXLITPG invisible, skip; /* "PAGE' literal*/
    KS0EM001.XXXTSPAG = " "; /* current page*/
    set KS0EM001.XXXLITOF invisible, skip; /* "OF' literal*/
    KS0EM001.TA5TSQIX = " "; /* highest page*/
    if (COMMAREA.CACHGFL == "Y")
      set KS0EM001.KS0EM-PF14 bold, skip;
    end
    if (COMMAREA.CAADDFL == "Y")
      set KS0EM001.KS0EM-PF13 bold, skip;
    end
    KS0EW00.KS0EW-IXM = 1; /* initialize index*/
    while (KS0EW00.KS0EW-IXM <= 14) /* clear detail lines*/
      KS0EM001.KS0EMSEL[KS0EW-IXM] = " ";
      set KS0EM001.KS0EMSEL[KS0EW-IXM] invisible, skip;
      KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM] = " ";
      KS0EM001.KS0EM-DTL-HTS-HDG-DESC[KS0EW-IXM] = " ";
      KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* set index up by 1*/
    end
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-SWR = "N"; /* Request for data switch*/
  ;
end // end KS0E-11000

// purge temporary storage
Function KS0E-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KS0EW00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (KS0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0E-11100

// select set and open cursor
Function KS0E-11300()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* Clear row storage area*/
  ;
  /* ------------------------------------------------------------*/
  /* Set the chapter number for the select. If we were passed a*/
  /* chapter number in kswrec, use it. If not, use the one in*/
  /* ks0ew00.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.KS-HTS-CPTR-CD > " ") /* cptr nbr present in pass area ?*/
    VHSHDG01.KS-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    KS0EW00.KS0EW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    KS0EW01.KS0EW-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    KS0EM001.KS0EM-HTS-CPTR-CD = KSWREC.KS-HTS-CPTR-CD;
    KS0E-15210(); /* get short chapter description*/
    if (VAGen_SQLCODE == 0) /* if successful*/
      KS0EW00.KS0EW-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC;
      KS0EW01.KS0EW-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC;
      KS0EM001.KS0EM-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC;
    else
      KS0EW01.KS0EW-HTS-CPTR-SDESC = " ";
    end
    if (converseVar.validationMsgNum != 0) /* if not successful*/
      return; /* return to prev process*/
    end
  else
    VHSHDG01.KS-HTS-CPTR-CD = KS0EW00.KS0EW-HTS-CPTR-CD;
    KS0EW01.KS0EW-HTS-CPTR-SDESC = KS0EW00.KS0EW-HTS-CPTR-SDESC;
  end
  ;
  try
    call "IO6100" ("S1", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select SET*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0E-11300

// fetch next row
Function KS0E-11400()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* clear work record*/
  ;
  try
    call "IO6100" ("N1", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      KS0EW00.KS0EW-SWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  KS0EW00.KS0EW-SWC = "Y"; /* Indicate end of cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSCHP01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0E-11400

// save data in display storage
Function KS0E-11500()
  /* -------------------------------------------------------------*/
  /* first, we need to determine if this row is the correct chapter*/
  /* -------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-HTS-CPTR-CD > " ") /* specific chapter wanted ?*/
    if (VHSHDG01.KS-HTS-CPTR-CD == KS0EW00.KS0EW-HTS-CPTR-CD) /* right cptr ?*/
       /* next sentence               /* we'll take this one*/
    else
      return; /* bypass this one*/
    end
  else
    return; /* bypass this one*/
  end
  ;
  /* -------------------------------------------------------------*/
  /* second, we need to determine if this row is the correct status*/
  /* -------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-STAT == " ") /* active and inactive wanted?*/
     /* next sentence                /* let's take this one*/
  else
    if (KS0EW00.KS0EW-STAT == "A") /* only active wanted?*/
      if (VHSHDG01.XXXSTAT == "A") /* this row active?*/
         /* next sentence            /* let's take this one*/
      else
        return; /* bypass this one*/
      end
    else
      if (VHSHDG01.XXXSTAT == "I") /* this row inactive?*/
         /* next sentence          /* let's take this one*/
      else
        return; /* bypass this one*/
      end
    end
  end
  ;
  KS0EW01.KS0EW-STAT = KS0EW00.KS0EW-STAT; /* save status wanted*/
  ;
  /* ------------------------------------------------------------*/
  /* next, we need to determine if there is enough room on this*/
  /* page to hold all the description lines in this row.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-IX1 = 1; /* initialize index*/
  KS0EW00.KS0EW-DESC-CNTR = 0; /* initialize DESC CNTR*/
  ;
  while (KS0EW00.KS0EW-IX1 <= 7)
    if (VHSHDG01.KS-HTS-HDG-DESC[KS0EW-IX1] > " ") /* something in line?*/
      KS0EW00.KS0EW-DESC-CNTR = KS0EW00.KS0EW-DESC-CNTR + 1; /* count it*/
    end
    KS0EW00.KS0EW-IX1 = KS0EW00.KS0EW-IX1 + 1; /* set index up by 1*/
  end
  ;
  ;
  /* add desc line cntr to page index*/
  ;
  KS0EW00.KS0EW-DESC-CNTR = KS0EW00.KS0EW-DESC-CNTR + KS0EW00.KS0EW-IX2;
  ;
  if (KS0EW00.KS0EW-DESC-CNTR > 15) /* if it will not fit*/
    KS0E-11600(); /* add page already formatted*/
                                    /* to temp storage*/
    set KS0EW01 empty; /* clear tsq record area*/
    KS0EW00.KS0EW-IX1 = 1; /* reset index*/
    KS0EW00.KS0EW-IX2 = 1; /* reset index*/
  end
  ;
  ;
  /* ------------------------------------------------------------*/
  /* at this point, we know that we can fit this row on the page,*/
  /* so save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW01.KS0EW-HTS-CPTR-CD = VHSHDG01.KS-HTS-CPTR-CD; /* cptr cd*/
  KS0EW01.KS0EW-HTS-CPTR-SDESC = KS0EW00.KS0EW-HTS-CPTR-SDESC;
  KS0EW01.KS0EW-STAT = KS0EW00.KS0EW-STAT; /* status code*/
  ;
  KS0EW00.KS0EW-IX1 = 1; /* initialize desc index*/
  ;
  while (KS0EW00.KS0EW-IX1 <= 7 /* for a max of 5 times*/
   && VHSHDG01.KS-HTS-HDG-DESC[KS0EW-IX1] > " ") /* if data in desc line*/
    if (KS0EW00.KS0EW-IX1 == 1) /* first desc line for this chapter?*/
      KS0EW01.KS0EW-DTL-CPTR-CD[KS0EW-IX2] = VHSHDG01.KS-HTS-CPTR-CD; /* heading*/
      KS0EW01.KS0EW-DTL-HDG-CD[KS0EW-IX2] = VHSHDG01.KS-HTS-HDG-CD; /* chapter cd*/
    else
      KS0EW01.KS0EW-DTL-HDG-CD[KS0EW-IX2] = " "; /* chapter cd*/
    end
    KS0EW01.KS0EW-DTL-HDG-DESC[KS0EW-IX2] = VHSHDG01.KS-HTS-HDG-DESC[KS0EW-IX1]; /* desc line*/
    KS0EW00.KS0EW-IX1 = KS0EW00.KS0EW-IX1 + 1; /* increment index*/
    KS0EW00.KS0EW-IX2 = KS0EW00.KS0EW-IX2 + 1; /* increment index*/
  end
  ;
  KS0EW00.KS0EW-IX2 = KS0EW00.KS0EW-IX2 + 1; /* increment index to*/
                                          /* to allow for blank line*/
                                          /* between chapters*/
  ;
end // end KS0E-11500

// add page to temp storage
Function KS0E-11600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW01.XXXTSLEN = KS0EW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (KS0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
     /* build table of chapter nbrs and ts page nbrs;*/
    ;
    KS0EW00.KS0EW-IX1 = 1; /* initialize index*/
    if (TA5REC.TA5TSQIX == 1) /* first page written?*/
      KS0EW00.KS0EW-HDG-TSQ-PAGE-TBL = " "; /* clear table*/
      KS0EW00.KS0EW-IX3 = 1; /* initialize index*/
    end
    ;
    while (KS0EW00.KS0EW-IX1 <= 14) /* for a max of 14 times*/
      if (KS0EW01.KS0EW-DTL-CPTR-HDG-CD[KS0EW-IX1] > " ") /* hdg nbr present*/
        KS0EW00.KS0EW-CPTR-HDG-CD[KS0EW-IX3] = KS0EW01.KS0EW-DTL-CPTR-HDG-CD[KS0EW-IX1]; /* save hdg nbr*/
        KS0EW00.KS0EW-TS-PAGE-NBR[KS0EW-IX3] = TA5REC.TA5TSQIX; /* save page nbr*/
        KS0EW00.KS0EW-IX1 = KS0EW00.KS0EW-IX1 + 1; /* increment index*/
        KS0EW00.KS0EW-IX3 = KS0EW00.KS0EW-IX3 + 1; /* increment index*/
      else
        KS0EW00.KS0EW-IX1 = KS0EW00.KS0EW-IX1 + 1; /* increment index*/
      end
    end
    ;
    if (KS0EW00.KS0EW-IX3 > 100) /* table getting full?*/
      converseLib.validationFailed(84); /* internal table full*/
    end
    ;
    set KS0EW01 empty; /* M001 display storage*/
    ;
    KS0EW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "11600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0E-11600

// close selected set
Function KS0E-11700()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6100" ("C1", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "11700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0E-11700

// Format and converse the map
Function KS0E-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0EW00.KS0EW-SWF == "Y") /* Map must be formatted*/
      ;
      KS0E-12100(); /* format data on map*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0EM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
      ;
    else
      ;
      KS0EM001.XXXPRCNM = COMMAREA.CAMSG; /* message text*/
      ;
    end
    ;
    KS0EM001.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0EM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0EM001 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0EM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0EM001.CAITEM; /* Application data*/
  ;
end // end KS0E-12000

// format the display data
Function KS0E-12100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0EM001 initial; /* M001 input/output area*/
  ;
  KS0EW00.KS0EW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* if we have just come back from a change and there is no data*/
  /* to display, set the last changed heading field to blanks in*/
  /* order by bypass the setting of the cursor routine which reads*/
  /* the TSQ.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.TA5TSQIX == 0) /* no data read ?*/
    KS0EW00.KS0EW-LAST-CHGD-HDG = " "; /* bypass reading tsq*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a chapter number is passed, put the cursor on that*/
  /* chapter/heading nbr.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.KSW-HTS-NBR > " ") /* something passed*/
    KS0EW00.KS0EW-CPTR-HDG-BKDN = KSWREC.KSW-HTS-NBR;
    KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-BKDN; /* set last changed cptr/hdg*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If we have just returned from changing a heading(s), we need*/
  /* to position the cursor on the last heading changed.*/
  /* The following code finds the tsq page that the heading is on.*/
  /* This is also applicable for adds.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-LAST-CHGD-HDG > " ") /* just back from change?*/
    KS0EW00.KS0EW-IX3 = 1; /* initialize index*/
    while (KS0EW-IX3 <= 100)
      if (KS0EW00.KS0EW-LAST-CHGD-HDG < 
      KS0EW00.KS0EW-CPTR-HDG-CD[KS0EW-IX3])
        KS0EW00.KS0EW-IX3 = KS0EW00.KS0EW-IX3 - 1; /* take prev one*/
        if (KS0EW00.KS0EW-IX3 < 1) /* if less than 1*/
          KS0EW00.KS0EW-IX3 = 1; /* set to 1*/
        end
        KS0EW00.XXXTSPAG = KS0EW00.KS0EW-TS-PAGE-NBR[KS0EW-IX3]; /* set ts page nbr*/
        KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-CD[KS0EW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
        KS0EW00.KS0EW-IX3 = 100; /* quit the search*/
      else
        if (KS0EW00.KS0EW-CPTR-HDG-CD[KS0EW-IX3] == " ") /* hdg nbr blank?*/
          KS0EW00.KS0EW-IX3 = KS0EW00.KS0EW-IX3 - 1; /* take prev one*/
          if (KS0EW00.KS0EW-IX3 < 1) /* if less than 1*/
            KS0EW00.KS0EW-IX3 = 1; /* set to 1*/
          end
          KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-CD[KS0EW-IX3]; /* for the cursor*/
                                  /* positioning routine*/
          KS0EW00.XXXTSPAG = KS0EW00.KS0EW-TS-PAGE-NBR[KS0EW-IX3]; /* set ts page nbr*/
          KS0EW00.KS0EW-IX3 = 100; /* quit the search*/
        end
      end
      KS0EW00.KS0EW-IX3 = KS0EW00.KS0EW-IX3 + 1; /* set index up by 1*/
    end
    KS0E-12110(); /* read tsq page*/
    set KS0EM001.XXXLITPG skip; /* "PAGE" literal*/
    KS0EM001.XXXTSPAG = KS0EW00.XXXTSPAG; /* Current page*/
    set KS0EM001.XXXLITOF skip; /* "OF" literal*/
    KS0EM001.TA5TSQIX = KS0EW00.TA5TSQIX; /* Highest page*/
  else
    /* ------------------------------------------------------------*/
    /* If the page in storage is not the page to be displayed,*/
    /* obtain the desired page from temporary storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (KS0EW00.TA5TSQIX > 0) /* Pages were formatted*/
      ;
      if (KS0EW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
        ;
        /* ------------------------------------------------------------*/
        /* If the current page has been changed, update the page in*/
        /* storage before obtaining the next one to display.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0EW00.KS0EW-SWU == "Y") /* Current page was changed*/
          ;
          KS0E-12120(); /* Update temporary storage page*/
          ;
          KS0EW00.KS0EW-SWU = "N"; /* Storage update switch*/
          ;
        end
        ;
        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/
        ;
        if (KS0EW00.XXXTSPAG > KS0EW00.TA5TSQIX) /* Desired greater highest*/
          KS0EW00.XXXTSPAG = KS0EW00.TA5TSQIX; /* Default to highest*/
        end
        ;
        KS0E-12110(); /* read tsq page*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/
      ;
      set KS0EM001.XXXLITPG skip; /* "PAGE" literal*/
      KS0EM001.XXXTSPAG = KS0EW00.XXXTSPAG; /* Current page*/
      set KS0EM001.XXXLITOF skip; /* "OF" literal*/
      KS0EM001.TA5TSQIX = KS0EW00.TA5TSQIX; /* Highest page*/
      ;
    else
      ;
      set KS0EM001.XXXLITPG invisible, skip; /* "PAGE" literal*/
      KS0EM001.XXXTSPAG = " "; /* Current page*/
      set KS0EM001.XXXLITOF invisible, skip; /* "OF" literal*/
      KS0EM001.TA5TSQIX = " "; /* Highest page*/
      ;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EM001.KS0EM-HTS-NBR = KS0EW01.KS0EW-HTS-NBR; /* HTS number*/
  KS0EM001.KS0EM-HTS-CPTR-CD = KS0EW01.KS0EW-HTS-CPTR-CD; /* cptr*/
  KS0EM001.KS0EM-HTS-CPTR-SDESC = KS0EW01.KS0EW-HTS-CPTR-SDESC;
  KS0EM001.KS0EM-HTS-HDG-CD = KS0EW01.KS0EW-HTS-HDG-CD; /* hdg*/
  KS0EM001.KS0EM-HTS-HDG-SDESC = KS0EW01.KS0EW-HTS-HDG-SDESC;
  KS0EM001.KS0EM-STAT = KS0EW01.KS0EW-STAT; /* status code*/
  ;
  KS0EW00.KS0EW-IXM = 1; /* Initialize line index*/
  ;
  while (KS0EW00.KS0EW-IXM <= 14) /* Until screen is full*/
    ;
    KS0EM001.KS0EMSEL[KS0EW-IXM] = " ";
    KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM] = KS0EW01.KS0EW-DTL-CPTR-HDG-CD[KS0EW-IXM];
    KS0EM001.KS0EM-DTL-HTS-HDG-DESC[KS0EW-IXM] = KS0EW01.KS0EW-DTL-HDG-DESC[KS0EW-IXM];
    ;
    KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* the default cursor position is hts nbr.*/
  /* the routine below may change the cursor position.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EM001.KS0EM-DTL-HTS-HDG-CD[1] > " ") /* cd present?*/
    set KS0EM001.KS0EMSEL[1] cursor; /* set cursor pos to 1st sel*/
  else
    set KS0EM001.KS0EM-HTS-NBR cursor, normal;
  end
  ;
  /* ------------------------------------------------------------*/
  /* if we're returning from an add or change, position the cursor*/
  /* on the chapter we just finished with.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-IXM = 1; /* initialize index*/
  ;
  while (KS0EW-IXM <= 14) /* until all lines are processed*/
    if (KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM] > " ") /* cd present?*/
      if (KS0EW00.KS0EW-LAST-CHGD-HDG > " ")
        if (KS0EW00.KS0EW-LAST-CHGD-HDG == 
        KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM]) /* same hdg ?*/
          set KS0EM001.KS0EMSEL[KS0EW-IXM] cursor, normal;
        else
          set KS0EM001.KS0EMSEL[KS0EW-IXM] normal;
        end
      else
        set KS0EM001.KS0EMSEL[KS0EW-IXM] normal;
      end
    else
      set KS0EM001.KS0EMSEL[KS0EW-IXM] invisible, skip;
    end
    KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* set index up by 1*/
  end
  ;
  KS0EW00.KS0EW-LAST-CHGD-HDG = " "; /* clear last cptr*/
  ;
  if (COMMAREA.CACHGFL == "Y")
    set KS0EM001.KS0EM-PF14 bold, skip;
  end
  ;
  if (COMMAREA.CAADDFL == "Y")
    set KS0EM001.KS0EM-PF13 bold, skip;
  end
  ;
end // end KS0E-12100

// read tsq page
Function KS0E-12110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW01.XXXTSLEN = KS0EW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KS0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (KS0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end KS0E-12110

// update tsq page
Function KS0E-12120()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (KS0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  KSWREC.XXXPRCNM = "12120"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end KS0E-12120

// Check attention identifier
Function KS0E-13000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.KSW-HTS-NBR = " ";
  ;
  if (converseVar.eventKey is pakey) /* PA was pressed*/
    ;
    if (KS0EW00.KS0EW-SWR == "Y") /* Request for data pending*/
      set KS0EW01 empty; /* M001 display storage*/
    end
    ;
    KS0EW00.KS0EW-SWF = "N"; /* Format the map switch*/
    KS0EW00.KS0EW-SWR = "Y"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      KS0E-11100(); /* purge temp storage*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
      set KS0EM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      KSWREC.XXXPRCNM = "13000"; /* Module ideKSification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0EM001";
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      KSWREC.KS-HTS-CPTR-CD = KS0EM001.KS0EM-HTS-CPTR-CD;
      COMMAREA.CATOAP = "KS0D"; /* To application*/
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "KS0A"; /* TO application*/
    end
    ;
    KS0E-11100(); /* purge temp storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* PF8  was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* PF15 was not pressed*/
    ;
    KSWREC.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (COMMAREA.CAADDFL == "N") /* chg flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    end
  end
  ;
  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* chg flag = no*/
      KSWREC.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    end
  end
  ;
end // end KS0E-13000

// Reset highlighted fields
Function KS0E-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0EM001.KS0EM-HTS-NBR initialAttributes; /* HTS number*/
  set KS0EM001.KS0EM-HTS-CPTR-CD initialAttributes; /* Chapter cd*/
  set KS0EM001.KS0EM-HTS-CPTR-SDESC initialAttributes; /* Chapter descr*/
  set KS0EM001.KS0EM-HTS-HDG-CD initialAttributes; /* heading cd*/
  set KS0EM001.KS0EM-HTS-HDG-SDESC initialAttributes; /* heading description*/
  set KS0EM001.KS0EM-STAT initialAttributes; /* Status*/
  ;
   /* the attributes for the detail lines are also set in ks0e-12100*/
  ;
  KS0EW00.KS0EW-IXM = 1; /* set index to 1*/
  while (KS0EW00.KS0EW-IXM <= 14) /* for all detail lines*/
    if (KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM] > " ")
      set KS0EM001.KS0EMSEL[KS0EW-IXM] normal;
    else
      set KS0EM001.KS0EMSEL[KS0EW-IXM] invisible, skip;
    end
    set KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM] initialAttributes;
    set KS0EM001.KS0EM-DTL-HTS-HDG-DESC[KS0EW-IXM] initialAttributes;
    KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* set index up by 1*/
  end
  set KS0EM001.CATOAP initialAttributes; /* TO application*/
  set KS0EM001.CAITEM initialAttributes; /* Application data*/
  ;
end // end KS0E-14000

// Verify data that was entered
Function KS0E-15000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "15000"; /* Module identification*/
    set KS0EM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Indicate only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    KS0E-15100(); /* verify scroll request*/
    ;
  else
    ;
    KS0E-15200(); /* verify data in line*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any error was found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end KS0E-15000

// verify scroll request
Function KS0E-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KS0EW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KS0EW00.XXXTSPAG >= KS0EW00.TA5TSQIX) /* and no more pages*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate an error for any data that was modified.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-IXM = 14; /* Initialize line index*/
  ;
  while (KS0EW00.KS0EW-IXM > 0) /* Until end of lines*/
    ;
    if (KS0EM001.KS0EMSEL[KS0EW-IXM] != KS0EW01.KS0EW-SEL[KS0EW-IXM])
      ;
      KSWREC.XXXPRCNM = "15100"; /* Module identification*/
      set KS0EM001.KS0EMSEL[KS0EW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Field may not change*/
      ;
    end
    ;
    KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM - 1; /* Decrement line number*/
    ;
  end
  ;
  if (KS0EM001.KS0EM-STAT != KS0EW01.KS0EW-STAT) /* Status changed*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0EM001.KS0EM-STAT cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
  if (KS0EM001.KS0EM-HTS-HDG-CD != KS0EW01.KS0EW-HTS-HDG-CD) /* hdg chgd*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0EM001.KS0EM-HTS-HDG-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
  if (KS0EM001.KS0EM-HTS-CPTR-CD != KS0EW01.KS0EW-HTS-CPTR-CD) /* cptr chgd*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0EM001.KS0EM-HTS-CPTR-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
  if (KS0EM001.KS0EM-HTS-NBR != KS0EW01.KS0EW-HTS-NBR) /* hts # changed*/
    ;
    KSWREC.XXXPRCNM = "15100"; /* Module identification*/
    set KS0EM001.KS0EM-HTS-NBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
    ;
  end
  ;
end // end KS0E-15100

// verify data in the line
Function KS0E-15200()
  /* ------------------------------------------------------------*/
  /* If an HS Number was entered and ENTER was pressed, transfer*/
  /* to the correct application depending upon how many characters*/
  /* were entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EM001.KS0EM-HTS-NBR > " " /* if hts # entered and*/
   && converseVar.eventKey is enter) /* enter pressed?*/
    ;
    KS0EW00.KS0EW-HTS-NUMBER = KS0EM001.KS0EM-HTS-NBR;
    KS0E-15220(); /* verify hts number*/
    ;
    if (converseVar.validationMsgNum != 0) /* if there were any errors*/
      return; /* return to previous process*/
    end
    ;
    KS0EW00.KS0EW-HTS-NBR = KS0EM001.KS0EM-HTS-NBR;
    ;
    if (KS0EW00.KS0EW-HTS-2ND-SHDG-CD != " "
     || KS0EW00.KS0EW-HTS-1ST-SHDG-CD != " ")
      COMMAREA.CATOAP = "KS0G"; /* set destination application*/
    else
      ;
      if (KS0EW00.KS0EW-HTS-HDG-CD != " ")
        COMMAREA.CATOAP = "KS0F"; /* set destination application*/
      else
        ;
        if (KS0EW00.KS0EW-HTS-CPTR-CD != " ")
          COMMAREA.CATOAP = "KS0E"; /* set destination application*/
        end
      end
    end
    ;
    KSWREC.KSW-HTS-NBR = KS0EM001.KS0EM-HTS-NBR;
    ;
    KS0E-11100(); /* clear temp storage*/
    ;
    XSKS-S0001(); /* exit to another application*/
    ;
    KS0EW00.KS0EW-SWD = "1"; /* set map to be displayed switch*/
    ;
    exit stack;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If status was entered and is not an 'a', 'i' or ' ', then it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EM001.KS0EM-STAT != " ") /* if status not equal space*/
    if (KS0EM001.KS0EM-STAT != "A") /* and not equal 'a'*/
      if (KS0EM001.KS0EM-STAT != "I") /* and not equal 'i'*/
                                  /* then it's invalid*/
        KSWREC.XXXPRCNM = "15200"; /* Module identification*/
        set KS0EM001.KS0EM-STAT cursor, bold; /* Highlight*/
        converseLib.validationFailed(19); /* invalid status code*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the chapter number entered and move in short desc.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EM001.KS0EM-HTS-CPTR-CD > " ")
    KS0EW00.KS0EW-HTS-CPTR-CD = KS0EM001.KS0EM-HTS-CPTR-CD;
    KS0E-15210(); /* select chapter row*/
    if (VAGen_SQLCODE == 0) /* if there were no errors*/
      KS0EM001.KS0EM-HTS-CPTR-CD = VHSCHP01.KS-HTS-CPTR-CD; /* cptr cd to map*/
      KS0EM001.KS0EM-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC; /* short desc to map*/
      KS0EW00.KS0EW-HTS-CPTR-SDESC = VHSCHP01.KS-HTS-CPTR-SDESC; /* short desc to save*/
    else
      set KS0EM001.KS0EM-HTS-CPTR-CD cursor, bold;
      KS0EM001.KS0EM-HTS-CPTR-SDESC = " ";
      converseLib.validationFailed(34); /* set error nbr*/
    end
  else
    set KS0EM001.KS0EM-HTS-CPTR-CD cursor, bold;
    KS0EM001.KS0EM-HTS-CPTR-SDESC = " ";
    converseLib.validationFailed(34); /* set error nbr*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* if there were any errors*/
    KS0EW00.KS0EW-IXM = 1; /* clear detail lines*/
    while (KS0EW00.KS0EW-IXM <= 14)
      set KS0EM001.KS0EMSEL[KS0EW-IXM] invisible, skip;
      KS0EM001.KS0EMSEL[KS0EW-IXM] = " ";
      KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM] = " ";
      KS0EM001.KS0EM-DTL-HTS-HDG-DESC[KS0EW-IXM] = " ";
      KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1;
    end
    return; /* return to previous process*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* if there were any errors*/
    return; /* return to previous process*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If selection was entered and is not a "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-IXM = 14; /* set index*/
  ;
  while (KS0EW00.KS0EW-IXM >= 1)
    if (KS0EM001.KS0EMSEL[KS0EW-IXM] != KS0EW01.KS0EW-SEL[KS0EW-IXM]
     && KS0EM001.KS0EMSEL[KS0EW-IXM] != "S") /* and is not a "S"*/
      ;
      KSWREC.XXXPRCNM = "15200"; /* Module identification*/
      set KS0EM001.KS0EMSEL[KS0EW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" may be entered*/
      ;
    end
    KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM - 1; /* decrement index*/
  end
  ;
end // end KS0E-15200

// select a chapter row
Function KS0E-15210()
  /* ------------------------------------------------------------*/
  /* select table row*/
  /* ------------------------------------------------------------*/
  ;
  set VHSCHP01 empty; /* clear work record*/
  ;
  VHSCHP01.KS-HTS-CPTR-CD = KS0EM001.KS0EM-HTS-CPTR-CD; /* cptr cd*/
  ;
  try
    call "IO6080" ("S ", SQLCA, VHSCHP01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  /* ------------------------------------------------------------*/
  /* If row exists, return*/
  /* If data not found, return an error message to the user.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(34); /* set error msg*/
        KS0EW00.KS0EW-SWR = "N"; /* do not format the map*/
        KS0EM001.KS0EM-HTS-CPTR-SDESC = " "; /* clear short desc*/
        set KS0EM001.KS0EM-HTS-CPTR-CD cursor, bold; /* set cursor*/
        KS0EW00.KS0EW-IXM = 1; /* set index to 1*/
        while (KS0EW00.KS0EW-IXM <= 13) /* for all detail lines*/
          set KS0EM001.KS0EMSEL[KS0EW-IXM] invisible, skip;
          KS0EM001.KS0EMSEL[KS0EW-IXM] = " ";
          KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM] = " ";
          KS0EM001.KS0EM-DTL-HTS-HDG-DESC[KS0EW-IXM] = " ";
          KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* set index up by 1*/
        end
        return; /* Return to previous process*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "15210"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CHAPTER ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSCHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSCHP01.KS-HTS-CPTR-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0E-15210

// verify format of hts number
Function KS0E-15220()
  /* ------------------------------------------------------------*/
  /* Verify the format of the HTS nbr entered.*/
  /* ------------------------------------------------------------*/
  /*  */
  /* ------------------------------------------------------------*/
  /* correct format is ===> 9999.99.9999*/
  /* this routine verifies that there is a ' ' or '.' in positions*/
  /* 5 and 8. If any of the other positions contain a '.', it*/
  /* is in error.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-IXM = 1; /* initialize index*/
  ;
  while (KS0EW00.KS0EW-IXM <= 14)
    if (KS0EW00.KS0EW-IXM == 5 /* these 3 positions must be blank or*/
     || KS0EW00.KS0EW-IXM == 8 /* equal '.'. if not, it's in error*/
     || KS0EW00.KS0EW-IXM == 14)
      if (KS0EW00.KS0EW-IXM == 5 /* these 3 positions must be blank or*/
       || KS0EW00.KS0EW-IXM == 8) /* equal '.'. if not, it's in error*/
        if (KS0EW00.KS0EW-HTS-BYTE[KS0EW-IXM] != " ")
          if (KS0EW00.KS0EW-HTS-BYTE[KS0EW-IXM] != ".")
            KSWREC.XXXPRCNM = "15220"; /* Module id*/
            set KS0EM001.KS0EM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      else
        if (KS0EW00.KS0EW-IXM == 14) /* equal ' '. if not, it's in error*/
          if (KS0EW00.KS0EW-HTS-BYTE[KS0EW-IXM] != " ")
            KSWREC.XXXPRCNM = "15220"; /* Module id*/
            set KS0EM001.KS0EM-HTS-NBR cursor, bold;
            converseLib.validationFailed(35); /* Invalid HTS nbr*/
          end
        end
      end
    else
      if (KS0EW00.KS0EW-HTS-BYTE[KS0EW-IXM] == ".")
        KSWREC.XXXPRCNM = "15220"; /* Module id*/
        set KS0EM001.KS0EM-HTS-NBR cursor, bold;
        converseLib.validationFailed(35); /* Invalid HTS nbr*/
      end
    end
    KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* set index up by 1*/
  end
  ;
end // end KS0E-15220

// Process valid input request
Function KS0E-16000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    KS0EW00.XXXTSPAG = KS0EW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    KS0EW00.XXXTSPAG = KS0EW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* if enter was pressed and a heading was entered, find that heading*/
  /* in the table and position the cursor on that heading.*/
  /*  */
  /* if enter was pressed and a selection was made, move selected*/
  /* chapter and heading numbers to kswrec and xfer to KS0F.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* enter pressed?*/
    ;
    if (KS0EM001.KS0EM-HTS-CPTR-CD != KS0EW01.KS0EW-HTS-CPTR-CD /* cptr*/
     || KS0EM001.KS0EM-STAT != KS0EW01.KS0EW-STAT)              /* or status changed*/
      KS0EW00.KS0EW-SWF = "Y"; /* format the map*/
      KS0EW00.KS0EW-SWR = "Y"; /* yes, request new data*/
      KS0EW00.KS0EW-HTS-CPTR-CD = KS0EM001.KS0EM-HTS-CPTR-CD;
      if (KS0EM001.KS0EM-HTS-HDG-CD > " ") /* heading cd entered?*/
        KS0EW00.KS0EW-CPTR-BKDN = KS0EM001.KS0EM-HTS-CPTR-CD; /* save cptr cd*/
        KS0EW00.KS0EW-HDG-BKDN = KS0EM001.KS0EM-HTS-HDG-CD; /* save hdg cd*/
        KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-BKDN; /* save cptr/hdg cds*/
      else
        KS0EW00.KS0EW-LAST-CHGD-HDG = " ";
      end
      KS0EW00.KS0EW-STAT = KS0EM001.KS0EM-STAT; /* save new status*/
      set KS0EW01 empty; /* clear tsq rec area*/
      return; /* return*/
    end
    if (KS0EM001.KS0EM-HTS-HDG-CD > " ") /* heading cd entered?*/
      KS0EW00.KS0EW-CPTR-BKDN = KS0EM001.KS0EM-HTS-CPTR-CD; /* save cptr cd*/
      KS0EW00.KS0EW-HDG-BKDN = KS0EM001.KS0EM-HTS-HDG-CD; /* save hdg cd*/
      KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-BKDN; /* save cptr/hdg cds*/
      KS0EW00.KS0EW-SWR = "Y"; /* yes, request new data*/
      KS0EW00.KS0EW-SWF = "Y"; /* format the map*/
      return; /* return*/
    end
    ;
    KS0EW00.KS0EW-IXM = 1; /* reset index*/
    while (KS0EW00.KS0EW-IXM <= 14) /* Until end of lines*/
      ;
      if (KS0EM001.KS0EMSEL[KS0EW-IXM] == "S") /* this line selected?*/
        ;
        KS0EW00.KS0EW-CPTR-HDG-BKDN = KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM]; /* work area*/
        KSWREC.KS-HTS-CPTR-CD = KS0EW00.KS0EW-CPTR-BKDN; /* chapter cd*/
        KSWREC.KS-HTS-HDG-CD = KS0EW00.KS0EW-HDG-BKDN; /* heading cd*/
        KS0E-11100(); /* clear temp storage*/
        ;
        COMMAREA.CATOAP = "KS0F"; /* set destination application*/
        ;
        XSKS-S0001(); /* exit to another application*/
        ;
        KS0EW00.KS0EW-SWD = "1"; /* set map to be displayed switch*/
        ;
        exit stack;
        ;
      end
      KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* Increment line index*/
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf13) /* F13 pressed?*/
    KS0EW00.KS0EW-SWD = "2"; /* Map to be displayed switch*/
    KS0EW00.KS0EW-FNC = "A"; /* set function switch*/
    KS0EW00.KS0EW-SAVE-ADD-CNT = 0; /* set add cntr to control*/
                                         /* msg on map 2*/
    KS0EW00.KS0EW-HTS-CPTR-CD = KS0EM001.KS0EM-HTS-CPTR-CD;
  end
  ;
  KS0EW00.KS0EW-NEXT-SEL-HDG = " "; /* clear sel field save*/
  ;
  if (converseVar.eventKey is pf14) /* F14 pressed?*/
    KS0EW00.KS0EW-SWR = "Y"; /* data is requested*/
    KS0EW00.KS0EW-SWD = "2"; /* Map to be displayed switch*/
    KS0EW00.KS0EW-FNC = "C"; /* set function switch*/
    KS0EW00.KS0EW-IXM = 1; /* reset index*/
    while (KS0EW00.KS0EW-IXM <= 14) /* Until end of lines*/
      ;
      if (KS0EM001.KS0EMSEL[KS0EW-IXM] == "S") /* this line selected?*/
        if (KS0EW00.KS0EW-NEXT-SEL-HDG == " ") /* first one blank*/
          KS0EW00.KS0EW-SELECTED-HDGS[KS0EW-IXM] = KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM]; /* save selected hdgs*/
          KS0EW00.KS0EW-NEXT-SEL-HDG = KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM]; /* save next heading to change*/
          KS0EW00.KS0EW-SEL-INDEX = KS0EW00.KS0EW-IXM; /* selected idx*/
        else
          KS0EW00.KS0EW-SELECTED-HDGS[KS0EW-IXM] = KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM]; /* save selected hdgs*/
        end
      end
      KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* Increment line index*/
      ;
    end
    if (KS0EW00.KS0EW-NEXT-SEL-HDG == " ") /* if none were selected*/
      converseLib.validationFailed(43); /* set error msg nbr*/
      KS0EW00.KS0EW-SWR = "N"; /* do not request data*/
      KS0EW00.KS0EW-SWF = "N"; /* do not format map*/
      KS0EW00.KS0EW-SWD = "1"; /* Map to be displayed switch*/
      return; /* return*/
    end
  end
  ;
  if (converseVar.eventKey is pf15) /* F15 pressed?*/
    set KSWREC empty; /* clear pass record*/
    KSWREC.KS-HTS-CPTR-CD = KS0EM001.KS0EM-HTS-CPTR-CD;
    KSWREC.KS-HTS-HDG-CD = KS0EM001.KS0EM-HTS-HDG-CD;
    ;
    KS0EW00.KS0EW-IXM = 1; /* reset index*/
    while (KS0EW00.KS0EW-IXM <= 14) /* Until end of lines*/
      ;
      if (KS0EM001.KS0EMSEL[KS0EW-IXM] == "S") /* this line selected?*/
        ;
        KSWREC.KSW-HTS-NBR = KS0EM001.KS0EM-DTL-HTS-HDG-CD[KS0EW-IXM];
        KS0EW00.KS0EW-IXM = 15; /* end the search*/
        ;
      end
      KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* Increment line index*/
    end
    KS0E-11100(); /* clear temp storage*/
    ;
    COMMAREA.CATOAP = "KS0F"; /* set destination application*/
    ;
    XSKS-S0001(); /* exit to another application*/
    ;
    KS0EW00.KS0EW-SWD = "1"; /* set map to be displayed switch*/
    ;
    exit stack;
    ;
  end
  ;
  if (converseVar.eventKey is pf21) /* PF21 pressed?*/
    ;
    COMMAREA.CATOAP = "KS0A"; /* set destination application*/
    ;
    KS0E-11100(); /* clear temp storage*/
    ;
    XSKS-S0001(); /* exit to another application*/
    ;
    KS0EW00.KS0EW-SWD = "1"; /* set map to be displayed switch*/
    ;
    exit stack;
  end
end // end KS0E-16000

// display the selected table row
Function KS0E-20000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0E-21000(); /* Obtain the data to display*/
  ;
  KS0E-22000(); /* Format and display the map*/
  ;
  KS0E-23000(); /* Check attention identifier*/
  ;
  KS0E-24000(); /* Reset fields to normal intensity*/
  ;
  KS0E-25000(); /* Verify the data that was entered*/
  ;
  KS0E-26000(); /* Process valid input request*/
  ;
  ;
end // end KS0E-20000

// obtain the data to display
Function KS0E-21000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-SWR != "Y") /* Data was not requested*/
    if (converseVar.validationMsgNum != 0) /* or an error was found*/
      return; /* Return to previous process*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* if an add function was requested, there will be no data to*/
  /* display, so return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-FNC == "A") /* if add function ?*/
    return;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Clear the map display storage area and save the key fields.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0EW02 empty; /* M002 display storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Obtain the table row to be displayed.*/
  /* ------------------------------------------------------------*/
  ;
  KS0E-21100(); /* Obtain the table row*/
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    ;
    KS0E-21200(); /* Save in display storage*/
    ;
  else
    ;
    KSWREC.XXXPRCNM = "21000"; /* Module identification*/
    KSWREC.XXXMSGNO = 18; /* No data was found to display*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-SWR = "N"; /* Request for data switch*/
  ;
end // end KS0E-21000

// select requested table row
Function KS0E-21100()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* Clear row storage area*/
  ;
  KS0EW00.KS0EW-CPTR-HDG-BKDN = KS0EW00.KS0EW-NEXT-SEL-HDG;
  VHSHDG01.KS-HTS-CPTR-CD = KS0EW00.KS0EW-CPTR-BKDN;
  VHSHDG01.KS-HTS-HDG-CD = KS0EW00.KS0EW-HDG-BKDN;
  ;
  try
    call "IO6100" ("S ", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "21100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FROM TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end KS0E-21100

// save data in display storage
Function KS0E-21200()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW02.CACHGFL = "Y"; /* Indicate modifiable data*/
  ;
  KS0EW02.KS0EW-HTS-CPTR-CD = VHSHDG01.KS-HTS-CPTR-CD; /* cptr cd*/
  KS0EW02.KS0EW-HTS-HDG-CD = VHSHDG01.KS-HTS-HDG-CD; /* hdg cd*/
  KS0EW02.KS0EW-HTS-HDG-SDESC = VHSHDG01.KS-HTS-HDG-SDESC;
  KS0EW02.KS0EW-HTS-HDG-DESC[1] = VHSHDG01.KS-HTS-HDG-DESC[1];
  KS0EW02.KS0EW-HTS-HDG-DESC[2] = VHSHDG01.KS-HTS-HDG-DESC[2];
  KS0EW02.KS0EW-HTS-HDG-DESC[3] = VHSHDG01.KS-HTS-HDG-DESC[3];
  KS0EW02.KS0EW-HTS-HDG-DESC[4] = VHSHDG01.KS-HTS-HDG-DESC[4];
  KS0EW02.KS0EW-HTS-HDG-DESC[5] = VHSHDG01.KS-HTS-HDG-DESC[5];
  KS0EW02.KS0EW-HTS-HDG-DESC[6] = VHSHDG01.KS-HTS-HDG-DESC[6];
  KS0EW02.KS0EW-HTS-HDG-DESC[7] = VHSHDG01.KS-HTS-HDG-DESC[7];
  KS0EW02.KS0EW-STAT = VHSHDG01.XXXSTAT;
  KS0EW02.KS0EW-USER = VHSHDG01.XXXUSRID;
  KS0EW02.KS0EW-CREATE-DT = VHSHDG01.ZZZSDT;
  KS0EW02.KS0EW-MOD-DT = VHSHDG01.ZZZCHGDT;
  KS0EW00.KS0EW-SAVE-CHG-CNT = VHSHDG01.ZZZCHGCT; /* save for later*/
  ;
end // end KS0E-21200

// format and converse the map
Function KS0E-22000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If requested, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-SWF == "Y") /* map must be formatted*/
    KS0E-22100(); /* format the data on the map*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0EM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0EM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
    else
      KS0EM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    KS0EM002.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0EM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0EM002 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0EM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0EM002.CAITEM; /* Application data*/
  ;
end // end KS0E-22000

// format the display area
Function KS0E-22100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0EM002 initial; /* M002 input/output area*/
  ;
  KS0EW00.KS0EW-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-FNC == "A") /* add requested?*/
    KS0EM002.KS0EM-MAP-DESC = "ADD   "; /* title*/
    KS0EM002.KS0EM-HTS-CPTR-CD = KS0EW00.KS0EW-HTS-CPTR-CD;
    KS0EM002.KS0EM-HTS-CPTR-SDESC = KS0EW00.KS0EW-HTS-CPTR-SDESC;
    KS0EM002.KS0EM-CREATE-DT = VGVar.currentShortGregorianDate;
    KS0EM002.KS0EM-MOD-DT = VGVar.currentShortGregorianDate;
    KS0EM002.KS0EM-USER = COMMAREA.CAUSERID;
    if (KS0EW00.KS0EW-SAVE-ADD-CNT > 0) /* if we have added one before ?*/
      converseLib.validationFailed(1); /* update successful*/
    else
      converseLib.validationFailed(48); /* please enter new hs chapter number*/
    end
    set KS0EM002.KS0EM-HTS-HDG-CD cursor, initialAttributes; /* allow entry*/
  else
    KS0EM002.KS0EM-MAP-DESC = "CHANGE"; /* title*/
    KS0EM002.KS0EM-CREATE-DT = KS0EW02.KS0EW-CREATE-DT;
    KS0EM002.KS0EM-MOD-DT = KS0EW02.KS0EW-MOD-DT;
    KS0EM002.KS0EM-USER = KS0EW02.KS0EW-USER;
    KS0EM002.KS0EM-HTS-CPTR-CD = KS0EW02.KS0EW-HTS-CPTR-CD;
    KS0EM002.KS0EM-HTS-CPTR-SDESC = KS0EW00.KS0EW-HTS-CPTR-SDESC;
    KS0EM002.KS0EM-HTS-HDG-CD = KS0EW02.KS0EW-HTS-HDG-CD;
    set KS0EM002.KS0EM-HTS-CPTR-CD skip; /* protect cptr cd*/
    set KS0EM002.KS0EM-HTS-HDG-CD skip; /* protect hgd cd*/
    set KS0EM002.KS0EM-HTS-HDG-SDESC cursor; /* cursor position*/
    KS0EM002.KS0EM-HTS-HDG-SDESC = KS0EW02.KS0EW-HTS-HDG-SDESC;
    KS0EM002.KS0EM-HTS-HDG-DESC[1] = KS0EW02.KS0EW-HTS-HDG-DESC[1];
    KS0EM002.KS0EM-HTS-HDG-DESC[2] = KS0EW02.KS0EW-HTS-HDG-DESC[2];
    KS0EM002.KS0EM-HTS-HDG-DESC[3] = KS0EW02.KS0EW-HTS-HDG-DESC[3];
    KS0EM002.KS0EM-HTS-HDG-DESC[4] = KS0EW02.KS0EW-HTS-HDG-DESC[4];
    KS0EM002.KS0EM-HTS-HDG-DESC[5] = KS0EW02.KS0EW-HTS-HDG-DESC[5];
    KS0EM002.KS0EM-HTS-HDG-DESC[6] = KS0EW02.KS0EW-HTS-HDG-DESC[6];
    KS0EM002.KS0EM-HTS-HDG-DESC[7] = KS0EW02.KS0EW-HTS-HDG-DESC[7];
    KS0EM002.KS0EM-STAT = KS0EW02.KS0EW-STAT;
  end
  ;
  KS0EM002.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  if (KS0EM002.KS0EM-STAT == " ")
    KS0EM002.KS0EM-STAT = "A"; /* default status code*/
  end
  ;
  if (KS0EM002.KS0EM-STAT == "A")
    KS0EM002.KS0EM-STAT-DESC = "ACTIVE  ";
  else
    KS0EM002.KS0EM-STAT-DESC = "INACTIVE";
  end
  ;
end // end KS0E-22100

// check attention identifier
Function KS0E-23000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0EW00.KS0EW-SWR == "Y") /* Request for data*/
      set KS0EW02 empty; /* M002 display storage*/
    end
    ;
    KS0EW00.KS0EW-SWF = "Y"; /* Format the map switch*/
    KS0EW00.KS0EW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      KS0E-11100(); /* Purge any temporary storage*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
      set KS0EM002.CATOAP cursor, bold; /* Highlight*/
      ;
      KS0EW00.KS0EW-SWD = "2"; /* Map to be displayed switch*/
      KS0EW00.KS0EW-SWF = "N"; /* do not format the map*/
      KS0EW00.KS0EW-SWF = "N"; /* do not request data*/
      ;
    else
      ;
      KSWREC.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0DM002";
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      ;
      KS0EW00.KS0EW-SWD = "1"; /* Map to be displayed switch*/
      KS0EW00.KS0EW-SWF = "Y"; /* Format the map switch*/
      KS0EW00.KS0EW-SWR = "Y"; /* request for data switch*/
      KS0EW00.KS0EW-CPTR-BKDN = VHSHDG01.KS-HTS-CPTR-CD;
      KS0EW00.KS0EW-HDG-BKDN = VHSHDG01.KS-HTS-HDG-CD;
      KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-BKDN;
      ;
       /* clear selected headings*/
      ;
      KS0EW00.KS0EW-IXM = 1;
      ;
      while (KS0EW00.KS0EW-IXM <= 14)
        KS0EW00.KS0EW-SELECTED-HDGS[KS0EW-IXM] = " ";
        KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1;
      end
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "KS0A";
    end
    ;
    KS0E-11100(); /* Purge any temporary storage*/
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    KS0EW00.KS0EW-SWD = "1"; /* Map to be displayed switch*/
    KS0EW00.KS0EW-SWF = "Y"; /* Format the map switch*/
    KS0EW00.KS0EW-SWR = "Y"; /* request for data switch*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    KSWREC.XXXPRCNM = "23000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pa2) /* PA2 key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end KS0E-23000

// reset highlighted fields
Function KS0E-24000()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0EM002.KS0EM-MAP-DESC initialAttributes;
  set KS0EM002.KS0EM-HTS-CPTR-CD initialAttributes;
  set KS0EM002.KS0EM-HTS-HDG-CD initialAttributes;
  set KS0EM002.KS0EM-HTS-CPTR-SDESC initialAttributes;
  set KS0EM002.KS0EM-HTS-HDG-SDESC initialAttributes;
  set KS0EM002.KS0EM-HTS-HDG-DESC[1] initialAttributes;
  set KS0EM002.KS0EM-HTS-HDG-DESC[2] initialAttributes;
  set KS0EM002.KS0EM-HTS-HDG-DESC[3] initialAttributes;
  set KS0EM002.KS0EM-HTS-HDG-DESC[4] initialAttributes;
  set KS0EM002.KS0EM-HTS-HDG-DESC[5] initialAttributes;
  set KS0EM002.KS0EM-STAT initialAttributes;
  set KS0EM002.KS0EM-STAT-DESC initialAttributes;
  set KS0EM002.KS0EM-CREATE-DT initialAttributes;
  set KS0EM002.KS0EM-MOD-DT initialAttributes;
  set KS0EM002.KS0EM-USER initialAttributes;
  ;
  set KS0EM002.CATOAP initialAttributes; /* commarea to application*/
  set KS0EM002.CAITEM initialAttributes; /* commarea application data*/
  ;
end // end KS0E-24000

// verify data that was entered
Function KS0E-25000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "25000"; /* Module identification*/
    set KS0EM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  KS0EW00.KS0EW-DATA-CHGD-SW = "Y"; /* initialize change switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If this is a change function and*/
  /* If data on the screen was not changed, set switch to 'n'.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-FNC == "C") /* if change function*/
    if (KS0EM002.KS0EM-HTS-HDG-SDESC == 
    KS0EW02.KS0EW-HTS-HDG-SDESC   /* if all data*/
     && KS0EM002.KS0EM-HTS-HDG-DESC[1] == 
    KS0EW02.KS0EW-HTS-HDG-DESC[1] /* the same ?*/
     && KS0EM002.KS0EM-HTS-HDG-DESC[2] == 
    KS0EW02.KS0EW-HTS-HDG-DESC[2] 
     && KS0EM002.KS0EM-HTS-HDG-DESC[3] == 
    KS0EW02.KS0EW-HTS-HDG-DESC[3] 
     && KS0EM002.KS0EM-HTS-HDG-DESC[4] == 
    KS0EW02.KS0EW-HTS-HDG-DESC[4] 
     && KS0EM002.KS0EM-HTS-HDG-DESC[5] == 
    KS0EW02.KS0EW-HTS-HDG-DESC[5] 
     && KS0EM002.KS0EM-HTS-HDG-DESC[6] == 
    KS0EW02.KS0EW-HTS-HDG-DESC[6] 
     && KS0EM002.KS0EM-HTS-HDG-DESC[7] == 
    KS0EW02.KS0EW-HTS-HDG-DESC[7] 
     && KS0EM002.KS0EM-STAT ==    
    KS0EW02.KS0EW-STAT)          
      KS0EW00.KS0EW-DATA-CHGD-SW = "N"; /* indicate data unchgd*/
      return;
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If status was changed, verify the entered code.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EM002.KS0EM-STAT == " ") /* if status not entered*/
    KS0EM002.KS0EM-STAT = "A"; /* default to 'a'*/
  end
  ;
  if (KS0EM002.KS0EM-STAT != "A") /* if status not equal to 'a' and*/
    if (KS0EM002.KS0EM-STAT != "I") /* if status not equal to 'i'*/
      KS0EM002.KS0EM-STAT-DESC = " "; /* clear descr field*/
      set KS0EM002.KS0EM-STAT cursor, bold; /* highlight*/
      converseLib.validationFailed(23); /* set msg nbr*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If description lines were entered, format them so that there*/
  /* are no blank lines. (ie. if user enters only the last line,*/
  /* then move that line to line 1).*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EM002.KS0EM-HTS-HDG-DESC[1] == " ") /* if all 5 lines are*/
    if (KS0EM002.KS0EM-HTS-HDG-DESC[2] == " ") /* blank*/
      if (KS0EM002.KS0EM-HTS-HDG-DESC[3] == " ")
        if (KS0EM002.KS0EM-HTS-HDG-DESC[4] == " ")
          if (KS0EM002.KS0EM-HTS-HDG-DESC[5] == " ")
            if (KS0EM002.KS0EM-HTS-HDG-DESC[6] == " ")
              if (KS0EM002.KS0EM-HTS-HDG-DESC[7] == " ")
                set KS0EM002.KS0EM-HTS-HDG-DESC[1] cursor, bold;
                converseLib.validationFailed(37); /* set msg nbr*/
              end
            end
          end
        end
      end
    end
  end
  ;
  KS0EW00.KS0EW-LINE[1] = KS0EM002.KS0EM-HTS-HDG-DESC[1];
  KS0EW00.KS0EW-LINE[2] = KS0EM002.KS0EM-HTS-HDG-DESC[2];
  KS0EW00.KS0EW-LINE[3] = KS0EM002.KS0EM-HTS-HDG-DESC[3];
  KS0EW00.KS0EW-LINE[4] = KS0EM002.KS0EM-HTS-HDG-DESC[4];
  KS0EW00.KS0EW-LINE[5] = KS0EM002.KS0EM-HTS-HDG-DESC[5];
  KS0EW00.KS0EW-LINE[6] = KS0EM002.KS0EM-HTS-HDG-DESC[6];
  KS0EW00.KS0EW-LINE[7] = KS0EM002.KS0EM-HTS-HDG-DESC[7];
  ;
  KS0EM002.KS0EM-HTS-HDG-DESC[1] = " "; /* clear screen lines*/
  KS0EM002.KS0EM-HTS-HDG-DESC[2] = " ";
  KS0EM002.KS0EM-HTS-HDG-DESC[3] = " ";
  KS0EM002.KS0EM-HTS-HDG-DESC[4] = " ";
  KS0EM002.KS0EM-HTS-HDG-DESC[5] = " ";
  KS0EM002.KS0EM-HTS-HDG-DESC[6] = " ";
  KS0EM002.KS0EM-HTS-HDG-DESC[7] = " ";
  ;
  KS0EW00.KS0EW-IX1 = 1; /* set index for w-s*/
  KS0EW00.KS0EW-IX2 = 1; /* set index for screen*/
  ;
  /* ------------------------------------------------------------*/
  /* the following code will compress the description lines from*/
  /* working-storage to the screen.*/
  /* ------------------------------------------------------------*/
  ;
  while (KS0EW00.KS0EW-IX1 <= 7)
    if (KS0EW00.KS0EW-LINE[KS0EW-IX1] == " ") /* if this line blank*/
      KS0EW00.KS0EW-IX1 = KS0EW00.KS0EW-IX1 + 1; /* set index up by 1*/
    else
      KS0EM002.KS0EM-HTS-HDG-DESC[KS0EW-IX2] = KS0EW00.KS0EW-LINE[KS0EW-IX1];
      KS0EW00.KS0EW-IX1 = KS0EW00.KS0EW-IX1 + 1; /* set index up by 1*/
      KS0EW00.KS0EW-IX2 = KS0EW00.KS0EW-IX2 + 1; /* set index up by 1*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* if the heading number short description not entered,*/
  /* indicate error.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EM002.KS0EM-HTS-HDG-SDESC == " ") /* if equal spaces*/
    set KS0EM002.KS0EM-HTS-HDG-SDESC cursor, bold; /* highlight*/
    converseLib.validationFailed(45); /* set msg nbr*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* if add requested and the chapter number is not entered,*/
  /* indicate error.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-FNC == "A") /* if add requested*/
    if (KS0EM002.KS0EM-HTS-HDG-CD == " ") /* if equal spaces*/
      set KS0EM002.KS0EM-HTS-HDG-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(44); /* set msg nbr*/
    else
      KS0EW00.KS0EW-HTS-NUMBER = KS0EM002.KS0EM-HTS-HDG-CD;
      if (KS0EW00.KS0EW-HTS-BYTE[1] == " "
       || KS0EW00.KS0EW-HTS-BYTE[2] == " ")
        set KS0EM002.KS0EM-HTS-HDG-CD cursor, bold; /* highlight*/
        converseLib.validationFailed(44); /* set msg nbr*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end KS0E-25000

// process valid input request
Function KS0E-26000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-SWF = "Y"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* Obtain the current date and time.*/
  /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Obtain date and time*/
  ;
  /* ------------------------------------------------------------*/
  /* If this is an 'update' function, update the table row.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0EW00.KS0EW-FNC == "C") /* is this an change request?*/
    ;
    if (KS0EW00.KS0EW-DATA-CHGD-SW == "Y") /* if any data changed*/
      ;
      KS0EW00.KS0EW-DATA-CHGD-SW = "N"; /* turn off data chgd sw*/
      ;
      /* ------------------------------------------------------------*/
      /* Update the changed data in the table row.*/
      /* ------------------------------------------------------------*/
      ;
      KS0E-26100(); /* Update table row*/
      ;
      KS0EW00.KS0EW-SWR = "Y"; /* Request for data switch*/
      ;
      if (converseVar.validationMsgNum != 0) /* if not successful*/
        KS0EW00.KS0EW-SWD = "2"; /* request map 2*/
        KS0EW00.KS0EW-SWF = "Y"; /* request format map 2*/
        return;
      end
      /* ------------------------------------------------------------*/
      /* Indicate that the table update was successfully completed.*/
      /* ------------------------------------------------------------*/
      ;
      KS0EW00.KS0EW-CPTR-BKDN = VHSHDG01.KS-HTS-CPTR-CD;
      KS0EW00.KS0EW-HDG-BKDN = VHSHDG01.KS-HTS-HDG-CD;
      KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-BKDN;
      ;
      KSWREC.XXXPRCNM = "26000"; /* Module identification*/
      KSWREC.XXXMSGNO = 1; /* Table update was completed*/
    else
      ;
      KS0EW00.KS0EW-SWR = "N"; /* do not request data*/
      KS0EW00.KS0EW-SWF = "N"; /* do not format map 2*/
      KS0EW00.KS0EW-CPTR-BKDN = KS0EM002.KS0EM-HTS-CPTR-CD;
      KS0EW00.KS0EW-HDG-BKDN = KS0EM002.KS0EM-HTS-HDG-CD;
      KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-BKDN;
      ;
    end
    ;
    KS0E-26300(); /* Search for next selection*/
    ;
    /* ------------------------------------------------------------*/
    /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    ;
    set KS0EW01 empty; /* clear working storage*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* code following is for adding chapters to the table.*/
    /* ------------------------------------------------------------*/
    ;
    KS0E-26200(); /* add row to table*/
    ;
    if (converseVar.validationMsgNum != 0) /* if not successful*/
      KS0EW00.KS0EW-SWD = "2"; /* request map 2*/
      KS0EW00.KS0EW-SWF = "N"; /* do not format map 2*/
      KS0EW00.KS0EW-SWR = "N"; /* do not request data*/
      KSWREC.XXXMSGNO = 1; /* successful update*/
      return;
    end
    ;
    KS0EW00.KS0EW-CPTR-BKDN = VHSHDG01.KS-HTS-CPTR-CD;
    KS0EW00.KS0EW-HDG-BKDN = VHSHDG01.KS-HTS-HDG-CD;
    KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-BKDN;
    ;
  end
end // end KS0E-26000

// update changed table row
Function KS0E-26100()
  /* ------------------------------------------------------------*/
  /* select table row first to see if it exists*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* clear work record*/
  ;
  VHSHDG01.KS-HTS-CPTR-CD = KS0EM002.KS0EM-HTS-CPTR-CD; /* hdg cd*/
  VHSHDG01.KS-HTS-HDG-CD = KS0EM002.KS0EM-HTS-HDG-CD; /* hdg cd*/
  ;
  try
    call "IO6100" ("S ", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  /* ------------------------------------------------------------*/
  /* If row exists, check change count*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (VHSHDG01.ZZZCHGCT != KS0EW00.KS0EW-SAVE-CHG-CNT) /**/
        converseLib.validationFailed(12); /* set error msg*/
        return; /* Return to previous process*/
      else
         /* next sentence*/
      end
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data from the map in the table row.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-CPTR-BKDN = KS0EM002.KS0EM-HTS-CPTR-CD;
  KS0EW00.KS0EW-HDG-BKDN = KS0EM002.KS0EM-HTS-HDG-CD;
  KS0EW00.KS0EW-LAST-CHGD-HDG = KS0EW00.KS0EW-CPTR-HDG-BKDN;
  ;
  VHSHDG01.KS-HTS-CPTR-CD = KS0EM002.KS0EM-HTS-CPTR-CD; /* cptr cd*/
  VHSHDG01.KS-HTS-HDG-CD = KS0EM002.KS0EM-HTS-HDG-CD; /* hdg cd*/
  VHSHDG01.KS-HTS-HDG-SDESC = KS0EM002.KS0EM-HTS-HDG-SDESC;
  VHSHDG01.KS-HTS-HDG-DESC[1] = KS0EM002.KS0EM-HTS-HDG-DESC[1];
  VHSHDG01.KS-HTS-HDG-DESC[2] = KS0EM002.KS0EM-HTS-HDG-DESC[2];
  VHSHDG01.KS-HTS-HDG-DESC[3] = KS0EM002.KS0EM-HTS-HDG-DESC[3];
  VHSHDG01.KS-HTS-HDG-DESC[4] = KS0EM002.KS0EM-HTS-HDG-DESC[4];
  VHSHDG01.KS-HTS-HDG-DESC[5] = KS0EM002.KS0EM-HTS-HDG-DESC[5];
  VHSHDG01.KS-HTS-HDG-DESC[6] = KS0EM002.KS0EM-HTS-HDG-DESC[6];
  VHSHDG01.KS-HTS-HDG-DESC[7] = KS0EM002.KS0EM-HTS-HDG-DESC[7];
  VHSHDG01.XXXSTAT = KS0EM002.KS0EM-STAT;
  VHSHDG01.XXXUSRID = COMMAREA.CAUSERID;
  ;
  VHSHDG01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VHSHDG01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  /* ------------------------------------------------------------*/
  /* Update the changed row in the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6100" ("U ", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      KS0EW00.KS0EW-SWR = "Y"; /* Request for data switch*/
      KS0EW00.KS0EW-SWF = "Y"; /* format the map switch*/
      KS0EW00.KS0EW-SWD = "2"; /* display map 2*/
      ;
      KSWREC.XXXPRCNM = "26100"; /* Module identification*/
      KSWREC.XXXMSGNO = 12; /* Data was updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26100"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSHDG01.KS-HTS-CPTR-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0E-26100

// add a table row
Function KS0E-26200()
  /* ------------------------------------------------------------*/
  /* select table row first to see if it exists*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* clear work record*/
  ;
  VHSHDG01.KS-HTS-CPTR-CD = KS0EM002.KS0EM-HTS-CPTR-CD; /* cptr cd*/
  VHSHDG01.KS-HTS-HDG-CD = KS0EM002.KS0EM-HTS-HDG-CD; /* hdg cd*/
  ;
  try
    call "IO6100" ("S ", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  /* ------------------------------------------------------------*/
  /* If row exists, return with error msg*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      converseLib.validationFailed(38); /* set error msg*/
      set KS0EM002.KS0EM-HTS-HDG-CD cursor, bold; /* set cursor position*/
      return; /* Return to previous process*/
    else
       /* next sentence*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the data from the map in the table row.*/
  /* ------------------------------------------------------------*/
  ;
  set VHSHDG01 empty; /* clear work record*/
  ;
  VHSHDG01.KS-HTS-CPTR-CD = KS0EM002.KS0EM-HTS-CPTR-CD; /* cptr cd*/
  VHSHDG01.KS-HTS-HDG-CD = KS0EM002.KS0EM-HTS-HDG-CD; /* hdg cd*/
  VHSHDG01.KS-HTS-HDG-SDESC = KS0EM002.KS0EM-HTS-HDG-SDESC;
  VHSHDG01.KS-HTS-HDG-DESC[1] = KS0EM002.KS0EM-HTS-HDG-DESC[1];
  VHSHDG01.KS-HTS-HDG-DESC[2] = KS0EM002.KS0EM-HTS-HDG-DESC[2];
  VHSHDG01.KS-HTS-HDG-DESC[3] = KS0EM002.KS0EM-HTS-HDG-DESC[3];
  VHSHDG01.KS-HTS-HDG-DESC[4] = KS0EM002.KS0EM-HTS-HDG-DESC[4];
  VHSHDG01.KS-HTS-HDG-DESC[5] = KS0EM002.KS0EM-HTS-HDG-DESC[5];
  VHSHDG01.KS-HTS-HDG-DESC[6] = KS0EM002.KS0EM-HTS-HDG-DESC[6];
  VHSHDG01.KS-HTS-HDG-DESC[7] = KS0EM002.KS0EM-HTS-HDG-DESC[7];
  VHSHDG01.XXXSTAT = KS0EM002.KS0EM-STAT;
  VHSHDG01.XXXUSRID = COMMAREA.CAUSERID;
  ;
  VHSHDG01.ZZZSDT = XX0XW01.XX0XWDAT; /* Set-up date*/
  VHSHDG01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  VHSHDG01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  ;
  /* ------------------------------------------------------------*/
  /* add the row in the table.*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO6100" ("A ", SQLCA, VHSHDG01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      KS0EW00.KS0EW-SAVE-ADD-CNT = KS0EW00.KS0EW-SAVE-ADD-CNT + 1;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not added, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  KSWREC.XXXPRCNM = "26200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = KSWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUSTM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHSHDG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VHSHDG01.KS-HTS-HDG-CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end KS0E-26200

// search for next selection
Function KS0E-26300()
  /* ------------------------------------------------------------*/
  /* restore index value of last selected chapter, which was*/
  /* just changed.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-SEL-INDEX; /* restore index value*/
  KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* set up by 1*/
  ;
  /* ------------------------------------------------------------*/
  /* Determine if another line was selected for viewing.*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-NEXT-SEL-HDG = " "; /* clear next selected hdg*/
  ;
  while (KS0EW00.KS0EW-NEXT-SEL-HDG == " " /* until a hdg is found*/
   && KS0EW00.KS0EW-IXM <= 14) /* and index <= 14*/
    ;
    if (KS0EW00.KS0EW-SELECTED-HDGS[KS0EW-IXM] > " ") /* Line selected?*/
      KS0EW00.KS0EW-NEXT-SEL-HDG = KS0EW00.KS0EW-SELECTED-HDGS[KS0EW-IXM]; /* next hdg to chg*/
      KS0EW00.KS0EW-SEL-INDEX = KS0EW00.KS0EW-IXM; /* save index value*/
      KS0EW00.KS0EW-SWR = "Y"; /* Request for data switch*/
      KS0EW00.KS0EW-SWF = "Y"; /* Request format map 2*/
      return; /* process next chapter*/
    else
      KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* set up by 1*/
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* clear table of selected chapters*/
  /* ------------------------------------------------------------*/
  ;
  KS0EW00.KS0EW-IXM = 1; /* initialize index*/
  ;
  while (KS0EW00.KS0EW-IXM <= 14) /* while index <= 14*/
    KS0EW00.KS0EW-SELECTED-HDGS[KS0EW-IXM] = " "; /* clear field*/
    KS0EW00.KS0EW-IXM = KS0EW00.KS0EW-IXM + 1; /* set up by 1*/
  end
  ;
  KS0EW00.KS0EW-SWR = "Y"; /* Request for data switch*/
  KS0EW00.KS0EW-SWF = "Y"; /* format the map*/
  KS0EW00.KS0EW-SWD = "1"; /* Map to be displayed switch*/
  exit stack; /* go display screen #1*/
  ;
end // end KS0E-26300

//*** RECORD=KS0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0EW00 type basicRecord
  10 KS0EW-IXM KS0EW-IXM ; 
  10 KS0EW-IX1 KS0EW-IX1 ; 
  10 KS0EW-IX2 KS0EW-IX2 ; 
  10 KS0EW-IX3 KS0EW-IX3 ; 
  10 KS0EW-DESC-CNTR KS0EW-DESC-CNTR ; 
  10 KS0EW-STAT KS0EW-STAT ; 
  10 KS0EW-DATA-CHGD-SW KS0EW-DATA-CHGD-SW ; 
  10 KS0EW-SAVE-CHG-CNT KS0EW-SAVE-CHG-CNT ; 
  10 KS0EW-SAVE-ADD-CNT KS0EW-SAVE-ADD-CNT ; 
  10 KS0EW-NEXT-SEL-HDG KS0EW-NEXT-SEL-HDG ; 
  10 KS0EW-LAST-CHGD-HDG KS0EW-LAST-CHGD-HDG ; 
  10 KS0EW-HTS-HDG-SDESC KS0EW-HTS-HDG-SDESC ; 
  10 KS0EW-HTS-CPTR-SDESC KS0EW-HTS-CPTR-SDESC ; 
  10 KS0EW-LINE KS0EW-LINE [7] ; 
  10 KS0EW-SWC KS0EW-SWC ; 
  10 KS0EW-SWD KS0EW-SWD ; 
  10 KS0EW-SWF KS0EW-SWF ; 
  10 KS0EW-SWR KS0EW-SWR ; 
  10 KS0EW-SWU KS0EW-SWU ; 
  10 KS0EW-FNC KS0EW-FNC ; 
  10 KS0EW-FND KS0EW-FND ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KS0EW-HTS-NUMBER KS0EW-HTS-NUMBER ; 
    15 KS0EW-HTS-BYTE KS0EW-HTS-BYTE [14] ; 
  10 * char(1) ; 
  10 KS0EW-HTS-NBR KS0EW-HTS-NBR ; 
    15 KS0EW-HTS-CPTR-CD KS0EW-HTS-CPTR-CD ; 
    15 KS0EW-HTS-HDG-CD KS0EW-HTS-HDG-CD ; 
    15 * char(1) ; 
    15 KS0EW-HTS-1ST-SHDG-CD KS0EW-HTS-1ST-SHDG-CD ; 
    15 * char(1) ; 
    15 KS0EW-HTS-2ND-SHDG-CD KS0EW-HTS-2ND-SHDG-CD ; 
    15 KS0EW-HTS-STAT-CD KS0EW-HTS-STAT-CD ; 
    15 * char(1) ; 
    15 * char(1) ; // suffix
  10 * char(1) ; 
  10 KS0EW-SELECTED-HDGS KS0EW-SELECTED-HDGS [14] ; 
  10 KS0EW-SEL-INDEX KS0EW-SEL-INDEX ; 
  10 KS0EW-HDG-TSQ-PAGE-TBL KS0EW-HDG-TSQ-PAGE-TBL ; 
    15 KS0EW-CPTR-HDG-CD KS0EW-CPTR-HDG-CD [100] ; 
    15 KS0EW-TS-PAGE-NBR KS0EW-TS-PAGE-NBR [100] ; 
  10 KS0EW-CPTR-HDG-BKDN KS0EW-CPTR-HDG-BKDN ; 
    15 KS0EW-CPTR-BKDN KS0EW-CPTR-BKDN ; 
    15 KS0EW-HDG-BKDN KS0EW-HDG-BKDN ; 
end // end KS0EW00

//*** RECORD=KS0EW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record KS0EW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(757) ; 
    10 KS0EW-HTS-NBR KS0EW-HTS-NBR ; 
    10 KS0EW-HTS-CPTR-CD KS0EW-HTS-CPTR-CD ; 
    10 KS0EW-HTS-CPTR-SDESC KS0EW-HTS-CPTR-SDESC ; 
    10 KS0EW-HTS-HDG-CD KS0EW-HTS-HDG-CD ; 
    10 KS0EW-HTS-HDG-SDESC KS0EW-HTS-HDG-SDESC ; 
    10 KS0EW-STAT KS0EW-STAT ; 
    10 KS0EW-SEL KS0EW-SEL [14] ; 
    10 KS0EW-DTL-CPTR-HDG-CD KS0EW-DTL-CPTR-HDG-CD [14] ; 
      15 KS0EW-DTL-CPTR-CD KS0EW-DTL-CPTR-CD ; 
      15 KS0EW-DTL-HDG-CD KS0EW-DTL-HDG-CD ; 
    10 KS0EW-DTL-HDG-DESC KS0EW-DTL-HDG-DESC [14] ; 
end // end KS0EW01

//*** RECORD=KS0EW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record KS0EW02 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 KS0EW-HTS-CPTR-CD KS0EW-HTS-CPTR-CD ; 
  10 KS0EW-HTS-CPTR-SDESC KS0EW-HTS-CPTR-SDESC ; 
  10 KS0EW-HTS-HDG-CD KS0EW-HTS-HDG-CD ; 
  10 KS0EW-HTS-HDG-SDESC KS0EW-HTS-HDG-SDESC ; 
  10 KS0EW-HTS-HDG-DESC KS0EW-HTS-HDG-DESC [7] ; 
  10 KS0EW-STAT KS0EW-STAT ; 
  10 KS0EW-STAT-DESC KS0EW-STAT-DESC ; 
  10 KS0EW-CREATE-DT KS0EW-CREATE-DT ; 
  10 KS0EW-MOD-DT KS0EW-MOD-DT ; 
  10 KS0EW-USER KS0EW-USER ; 
end // end KS0EW02

// chapter breakdown
DataItem KS0EW-CPTR-BKDN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter/heading breakdown area
DataItem KS0EW-CPTR-HDG-BKDN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter number
DataItem KS0EW-CPTR-HDG-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s.heading creation date
DataItem KS0EW-CREATE-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed switch
DataItem KS0EW-DATA-CHGD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map function indicator
DataItem KS0EW-DESC-CNTR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// detail line chapter number
DataItem KS0EW-DTL-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line chapter/heading cd
DataItem KS0EW-DTL-CPTR-HDG-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line heading number
DataItem KS0EW-DTL-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. chapter description 1
DataItem KS0EW-DTL-HDG-DESC char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function switch
DataItem KS0EW-FNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found switch
DataItem KS0EW-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading breakdown
DataItem KS0EW-HDG-BKDN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter/tsq page table
DataItem KS0EW-HDG-TSQ-PAGE-TBL char(800)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 1
DataItem KS0EW-HTS-1ST-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub heading part 2
DataItem KS0EW-HTS-2ND-SHDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number table
DataItem KS0EW-HTS-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter number
DataItem KS0EW-HTS-CPTR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chapter short desc
DataItem KS0EW-HTS-CPTR-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading heading
DataItem KS0EW-HTS-HDG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s.heading description
DataItem KS0EW-HTS-HDG-DESC char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s.heading short description
DataItem KS0EW-HTS-HDG-SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number
DataItem KS0EW-HTS-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s. number
DataItem KS0EW-HTS-NUMBER char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status
DataItem KS0EW-HTS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0EW-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0EW-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0EW-IX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KS0EW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// last changed heading
DataItem KS0EW-LAST-CHGD-HDG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map m002 screen line work area
DataItem KS0EW-LINE char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s.heading modification date
DataItem KS0EW-MOD-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next selected heading cd
DataItem KS0EW-NEXT-SEL-HDG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save add count
DataItem KS0EW-SAVE-ADD-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save change count
DataItem KS0EW-SAVE-CHG-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection character
DataItem KS0EW-SEL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save index for changes
DataItem KS0EW-SEL-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// chapters selected for changes
DataItem KS0EW-SELECTED-HDGS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s.heading status
DataItem KS0EW-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// h.s.heading status description
DataItem KS0EW-STAT-DESC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KS0EW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem KS0EW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KS0EW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0EW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem KS0EW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temporary storage page
DataItem KS0EW-TS-PAGE-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// h.s.heading user
DataItem KS0EW-USER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

