package ks0a;

import corpcom2.XX0XW02;
import corpcom3.XPKS-00001;
import corpcom4.XSKS-S0001;
import corpcom5.COMMAREA;
import corpx1.XGPABRV;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import ks.common.*;
//*** PROGRAM=KS0A ****
// This application displays the Customs Main Menu.
// It provides entry to the subordinate applications.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/21/91  CEPPLE  New application.
// 000      06/30/92  CEPPLE  Add option 5 to application map.
// 000      04/12/93  DHUFFM  Add option 7 to application map.
// 000      02/27/95  SLEWIS  Add option 8 to application map.
// 000      07/10/97  RCORLE  Modified for Equipment
// KS#00    04/11/00  vkumar  Added option 9 to the application
// KS#00    08/21/00  VKUMAR  Added option 10
// *********************
Program KS0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KS0AW00 KS0AW00; // record
  KS0AW01 KS0AW01; // record
  KSWREC KSWREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KS0AT; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use KS0AM.KS0AM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPKS-00001: XPKS-00001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/
    ;
    set KS0AM001 initial; /* M001 input/output*/
    set KS0AW00 empty; /* Working storage*/
    set KS0AW01 empty; /* M001 display storage*/
    ;
    KS0AW00.KS0AW-SWF = "Y"; /* Format the map switch*/
    KS0AW00.KS0AW-SWR = "N"; /* Request for data switch*/
    converseLib.validationFailed(0);
    ;
    /* ------------------------------------------------------------*/
    /* If data was passed in the COMMAREA, use as the initial key.*/
    /* ------------------------------------------------------------*/
    ;
    if (COMMAREA.XGPCD > " ") /* Data was passed*/
      ;
      KS0AW00.KS0AW-SWR = "Y"; /* Request for data switch*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0A-00000; /* Converse the main process*/
    ;
    ;
    KS0A-00000: KS0A-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    goto KS0A-00000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end KS0A

// Main process to display a map
Function KS0A-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  KS0A-10000(); /* Obtain the data to display*/
  ;
  KS0A-20000(); /* Format and display the map*/
  ;
  KS0A-30000(); /* Check attention identifier*/
  ;
  KS0A-40000(); /* Reset fields to normal intensity*/
  ;
  KS0A-50000(); /* Verify the data that was entered*/
  ;
  KS0A-60000(); /* Process valid input request*/
  ;
  ;
end // end KS0A-00000

// Obtain the data to display
Function KS0A-10000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0AW00.KS0AW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Clear the map display storage area and save the key fields.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0AW01 empty; /* M001 display storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  KS0AW00.KS0AW-SWR = "N"; /* Request for data switch*/
  ;
  ;
end // end KS0A-10000

// Format and converse the map
Function KS0A-20000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    KSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0AW00.KS0AW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (KS0AW00.KS0AW-SWF == "Y") /* Map must be formatted*/
      ;
      set KS0AM001 initial; /* M001 input/output area*/
      KS0AW00.KS0AW-SWF = "N"; /* Format the map switch*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KS0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  KS0AM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KS0AM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (KSWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    if (KSWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (KSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KSWREC.XXXMSGNO);
      end /* Message number*/
      ;
    end
    ;
    KS0AM001.XXXPRCNM = KSWREC.XXXPRCNM; /* Module identification*/
    ;
    set KS0AM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse KS0AM001 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  KSWREC.XXXPRCNM = " "; /* Module identification*/
  KSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = KS0AM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KS0AM001.CAITEM; /* Application data*/
  ;
  ;
end // end KS0A-20000

// Check attention identifier
Function KS0A-30000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (KS0AW00.KS0AW-SWR == "Y") /* Request for data pending*/
      set KS0AW01 empty; /* M001 display storage*/
    end
    ;
    KS0AW00.KS0AW-SWF = "Y"; /* Format the map switch*/
    KS0AW00.KS0AW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0AM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSKS-S0001(); /* Exit to another application*/
      ;
      set KS0AM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      KSWREC.XXXPRCNM = "30000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "KS0AM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end
    ;
    XSKS-S0001(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    KSWREC.XXXPRCNM = "30000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end KS0A-30000

// Reset highlighted fields
Function KS0A-40000()
  /* ------------------------------------------------------------*/
  /* Reset field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set KS0AM001.KS0AM-SEL initialAttributes; /* Menu selection*/
  set KS0AM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set KS0AM001.CAITEM initialAttributes; /* FAST PATH application data*/
  ;
  ;
  ;
end // end KS0A-40000

// Verify data that was entered
Function KS0A-50000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    KSWREC.XXXPRCNM = "50000"; /* Module identification*/
    set KS0AM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Indicate only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Verify the menu selection that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0AM001.KS0AM-SEL in KS0AT.KS0AM-SEL) /* Selection in table*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    KSWREC.XXXPRCNM = "50000"; /* Module identification*/
    set KS0AM001.KS0AM-SEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any error was found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end KS0A-50000

// Process valid input request
Function KS0A-60000()
  /* ------------------------------------------------------------*/
  /* Invoke the application indicated by the table entry.*/
  /* ------------------------------------------------------------*/
  ;
  if (KS0AM001.KS0AM-SEL in KS0AT.KS0AM-SEL)
    COMMAREA.CATOAP = KS0AT.CATOAP[sysVar.arrayIndex];
  end
  ;
  XSKS-S0001(); /* Exit to another application*/
  ;
  /* ------------------------------------------------------------*/
  /* If the request failed, display the returned error message.*/
  /* ------------------------------------------------------------*/
  ;
  COMMAREA.CATOAP = " "; /* TO application*/
  ;
  set KS0AM001.KS0AM-SEL cursor, bold; /* Highlight*/
  ;
  ;
end // end KS0A-60000

//*** RECORD=KS0AW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KS0AW00 type basicRecord
  10 KS0AW-SWF KS0AW-SWF ; 
  10 KS0AW-SWR KS0AW-SWR ; 
end // end KS0AW00

//*** RECORD=KS0AW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record KS0AW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 XGPABRV XGPABRV ; 
end // end KS0AW01

// Format the map switch
DataItem KS0AW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KS0AW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

