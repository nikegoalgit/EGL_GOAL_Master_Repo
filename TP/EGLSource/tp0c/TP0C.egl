package tp0c;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import tp.common.*;
import ts.common.*;
//*** PROGRAM=TP0C ****
// THIS APPLICATION SUMMARIZES THE FASTPICK PLAN BY STYLE,
// COLOR,SIZE.
// THE USER CAN SELECT A STYLE, COLOR AND SIZE TO DO FURTHER
// INQUIRY
// BY TRANSFERRING TO TP0D.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/30/96  LDAVI3  New application.
// FASTPICK 01/29/97  OVAZQU  Calculate total nbr of containers
//                            and sku's.
// *********************
Program TP0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TP0CW00 TP0CW00; // record
  TP0CW01 TP0CW01; // record
  TP0CW02 TP0CW02; // record
  TP10REC TP10REC; // record
  TPWREC TPWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use TP0CM.TP0CM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TP0C0001: TP0C0001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set TP0CM001 initial; /* initialize map*/
    set SQLCA empty; /* SQL communication area*/
    set TP0CW00 empty; /* application working storage*/
    set TP0CW01 empty; /* application working storage*/
    set TP0CW02 empty; /* TEMP STORAGE PAGE*/
    set TP10REC empty; /* io module   pass data*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/


    TP0CW02.XXX-TEMP-STG-LNTH = 1000; /* Temporary storage length*/
    TP0CW01.XXX-INX-LMT-NBR = 10; /* Number of lines on a page*/
    TP0CW01.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    TP0CW01.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    TP0CW00.TPW-TO-DT-IND = "N"; /* inquiry not selected - yet*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TP0C0002; /* Converse the main process*/


    TP0C0002: TP0C0002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TP0C0002; /* Converse the main process*/


  end // end main
end // end TP0C

// Determine which map to display
Function TP0C0001()
  XPTP001(); /* application init*/
end // end TP0C0001

// Main process to display a map
Function TP0C0002()
  TP0CS100-GETDATA(); /* call nikeboth to get data*/

  TP0CS200-FORMAT(); /* write data to ts and format page 1*/

  TP0CS250-RUNMODE();
  converse TP0CM001 ;

  TP0CS300-PFKEYS(); /* check pfkeys*/

  TP0CS500-INPUT(); /* verify request*/

  TP0CS600-SCROLL(); /* PROCESS PF7 AND PF8*/


end // end TP0C0002

// Add page to temporary storage
Function TP0CS-TS-ADD()
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/
  XXX-TEMP-STG-LNTH = 1000; /* set tsq length*/

   /* ------------------------------------------------------------*/
   /* call subroutine to write page to temp-storage.*/
   /* ------------------------------------------------------------*/

  try
    call "TA0050" (TP0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TP0CW02 empty; /* M001 display storage*/

    XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX;
    TA5REC.TA5TSQIX = 0; /* init tsq page index*/

    XXX-TEMP-STG-LNTH = 1000; /* set tsq length*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0CS-TS-ADD

// Purge any temporary storage
Function TP0CS-TS-PURG()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TP0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/


  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0CS-TS-PURG

// Read temporary storage page
Function TP0CS-TS-READ()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/


  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5TSQIX = XXX-CURR-PAGE-NBR; /* Page number*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/

  XXX-TEMP-STG-LNTH = 1000; /* tsq length*/

  try
    call "TA0050" (TP0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/


  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0CS-TS-READ

// obtain data to display
Function TP0CS100-GETDATA()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* reset the page number to display.*/
   /* ------------------------------------------------------------*/
  XXX-CURR-PAGE-NBR = 1; /* Page number to display*/
  XXX-HI-PAGE-NBR = 1; /* set max page number*/

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  TP0CS-TS-PURG(); /* Purge any temporary storage*/

  XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  TA5REC.TA5TSQIX = 0; /* init tsq page index*/


   /* ------------------------------------------------------------*/
   /* set-up parameters for call to nikeboth io subroutine.*/
   /* ------------------------------------------------------------*/
  set TP10REC empty; /* INIT IO WORK AREA*/
  TP10REC.XWHCD = TPWREC.XWH-WHSE-CD; /* warehouse code*/
  TP10REC.TP10-CALLING-PGM = "TP0C"; /**/
  TP10REC.TP10-XHDCDFL = "N"; /* REQUEST NON-SPECIAL HANDLING*/
  if (TPWREC.TPW-SEL-RUN-MODE == "PP") /* SCHEDULING OR PLANNING*/
    TP10REC.TP10-RUN-MODE = "P"; /* PLANNING MODE*/
  else
    TP10REC.TP10-RUN-MODE = "S"; /* SCHEDULEING*/
  end

   /* ------------------------------------------------------------*/
   /* FIRST CALL TO GET TOTAL UNITS, ORDERS AND CARTONS and sku's*/
   /* for the WHOLE FASTPICK PLAN.*/
   /* ------------------------------------------------------------*/
  TP10REC.TPW-RQST-TYP = "PT"; /* request all product data*/
  call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/

  TP0CW00.TPW-SAVE-TOT-UNITS = TP10REC.TP10-TOT-UNITS;
  TP0CW00.TPW-SAVE-TOT-UOM-UNITS = TP10REC.TP10-TOT-UOM-UNITS;
  TP0CW00.TPW-SAVE-TOT-ORDERS = TP10REC.TP10-TOT-ORDERS;
  TP0CW00.TPW-SAVE-TOT-CARTONS = 0;
  TP0CW00.TPW-SAVE-TOT-SKUS = 0;

   /* ------------------------------------------------------------*/
   /* NOW OPEN CURSOR TO FETCH TOTALS BY STYLE, COLOR*/
   /* ------------------------------------------------------------*/
  TP10REC.TPW-RQST-TYP = "S3"; /* request all product data*/
  call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/

   /* ------------------------------------------------------------*/
   /* check to see if there is any data to display.*/
   /* ------------------------------------------------------------*/
  if (TP10REC.TPW-RTRN-SQLCD != 0)
    return; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* if there is data to display -*/
   /* write data to temp-storage pages.*/
   /* ------------------------------------------------------------*/
  XXX-INX-FLD-NBR = 0; /* initialize line index*/

  TP10REC.TPW-RQST-TYP = "N3"; /* fetch first record*/
  call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/

  while (TP10REC.TPW-RTRN-SQLCD == 0) /* do until no more records*/

    XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;
    TP0CW02.SY1STNBR[XXX-INX-FLD-NBR] = TP10REC.SY1STNBR; /* STYLE*/
    TP0CW02.SY2CLRID[XXX-INX-FLD-NBR] = TP10REC.SY2CLRID; /* COLOR*/
    TP0CW02.TP10-SIZE[XXX-INX-FLD-NBR] = TP10REC.TP10-SIZE; /* SIZE DESCRIPTION*/
    TP0CW02.PK1NBCTN[XXX-INX-FLD-NBR] = TP10REC.PK1NBCTN; /* NUMBER OF CARTONS*/
    TP0CW02.PK5TIQTY[XXX-INX-FLD-NBR] = TP10REC.PK5TIQTY; /* TOTAL units ORDERED*/
    TP0CW02.TP10-XUMCNV[XXX-INX-FLD-NBR] = TP10REC.TP10-XUMCNV; /* uom cnv factor*/
    TP0CW02.TP10-UOM-UNITS[XXX-INX-FLD-NBR] = TP10REC.TP10-UOM-UNITS; /* units * uom*/
    TP0CW00.TPW-SAVE-TOT-CARTONS = TP0CW00.TPW-SAVE-TOT-CARTONS + TP10REC.PK1NBCTN;
    TP0CW00.TPW-SAVE-TOT-SKUS = TP0CW00.TPW-SAVE-TOT-SKUS + 1;

    if (XXX-INX-FLD-NBR == 11) /* if page is full*/
      TP0CW02.TPW-LINES-ON-PAGE = 11;
      TP0CS-TS-ADD(); /* write full page to temp storage*/
      XXX-INX-FLD-NBR = 0; /* point to first item of new page*/
    end

    call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/
  end

   /* ------------------------------------------------------------*/
   /* add any partially formatted page.*/
   /* ------------------------------------------------------------*/
  if (XXX-INX-FLD-NBR > 0) /* if more items*/
    TP0CW02.TPW-LINES-ON-PAGE = XXX-INX-FLD-NBR;
    TP0CS-TS-ADD(); /* write partial page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  XXX-CURR-PAGE-NBR = 1; /* set first page to display*/
  XXX-RQT-DATA-FL = "N"; /**/

end // end TP0CS100-GETDATA

// obtain data to display
Function TP0CS200-FORMAT()
  if (converseVar.eventKey not pf5)
    set TP0CM001 initial;
  end
  /* ------------------------------------------------------------*/
  /* Format header info*/
  /* ------------------------------------------------------------*/
  TP0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TP0CM001.XWHCD = TPWREC.XWH-WHSE-CD; /* warehouse code*/
  TP0CM001.TOTPAGE = XXX-HI-PAGE-NBR; /* last page*/

   /* ------------------------------------------------------------*/
   /* perform process to read temp storage and move data to map.*/
   /* ------------------------------------------------------------*/

  TP0CS210-MAPPIT(); /* Format the data in the map*/

end // end TP0CS200-FORMAT

// obtain data to display
Function TP0CS210-MAPPIT()
  XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* If returning from tp0d - start display with the page that*/
   /* the user was last looking at.*/
   /* ------------------------------------------------------------*/
  if (TPWREC.TPWFRMAP == "TP0D") /* if returning from detail inquiry*/
    XXX-CURR-PAGE-NBR = TPWREC.TPW-SAVE-PAGENO; /* save page nbr*/
    TPWREC.TPW-SAVE-PAGENO = 0; /* reinitialize to 0*/
    TPWREC.TPWFRMAP = "TP0C"; /* reset from application*/
  end
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (XXX-CURR-PAGE-NBR > TP0CW01.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        TP0CW01.XXX-CURR-PAGE-NBR = XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      TP0CS-TS-READ(); /* Read temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    TP0CM001.TP10-TOT-UNITS = TP0CW00.TPW-SAVE-TOT-UNITS;
    TP0CM001.TP10-TOT-UOM-UNITS = TP0CW00.TPW-SAVE-TOT-UOM-UNITS;
    TP0CM001.TP10-TOT-ORDERS = TP0CW00.TPW-SAVE-TOT-ORDERS;
    TP0CM001.TP10-TOT-CARTONS = TP0CW00.TPW-SAVE-TOT-CARTONS;
    TP0CM001.TP10-TOT-SKUS = TP0CW00.TPW-SAVE-TOT-SKUS;


    TP0CM001.PAGE = XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    TP0CM001.TOTPAGE = XXX-HI-PAGE-NBR;
                                   /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (XXX-INX-FLD-NBR <= TP0CW02.TPW-LINES-ON-PAGE)
                                  /* Until screen is full*/
    set TP0CM001.TPW-SELECT[XXX-INX-FLD-NBR] normal;
    TP0CM001.SY1STNBR[XXX-INX-FLD-NBR] = TP0CW02.SY1STNBR[XXX-INX-FLD-NBR];
    TP0CM001.SY2CLRID[XXX-INX-FLD-NBR] = TP0CW02.SY2CLRID[XXX-INX-FLD-NBR];
    TP0CM001.TP10-SIZE[XXX-INX-FLD-NBR] = TP0CW02.TP10-SIZE[XXX-INX-FLD-NBR];
    TP0CM001.TP-CARTONS[XXX-INX-FLD-NBR] = TP0CW02.PK1NBCTN[XXX-INX-FLD-NBR];
    TP0CM001.PK5TIQTY[XXX-INX-FLD-NBR] = TP0CW02.PK5TIQTY[XXX-INX-FLD-NBR];
    TP0CM001.TP10-XUMCNV[XXX-INX-FLD-NBR] = TP0CW02.TP10-XUMCNV[XXX-INX-FLD-NBR];
    TP0CM001.TP10-UOM-UNITS[XXX-INX-FLD-NBR] = TP0CW02.TP10-UOM-UNITS[XXX-INX-FLD-NBR];

    XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

  end

end // end TP0CS210-MAPPIT

// obtain data to display
Function TP0CS250-RUNMODE()
  /* SET MAP COLOR and title*/
  if (TPWREC.TPW-SEL-RUN-MODE == "PK") /* If picking-selection mode*/
    TP0CM001.TP0CM-RUN-MODE-LIT = "P I C K I N G";
    set TP0CM-LIT1 magenta;
    set TP0CM-LIT2 magenta;
    set TP0CM-LIT2A magenta;
    set TP0CM-LIT3A magenta;
    set TP0CM-LIT3 magenta;
    set TP0CM-LIT4 magenta;
    set TP0CM-LIT4 magenta;
    set TP0CM-LIT11 magenta;
    set TP0CM-LIT12 magenta;
    set TP0CM-LIT13 magenta;
    set TP0CM-LIT5 magenta, underline;
    set TP0CM-LIT6 magenta, underline;
    set TP0CM-LIT7 magenta, underline;
    set TP0CM-LIT8 magenta, underline;
    set TP0CM-LIT9 magenta, underline;
    set TP0CM-LIT10 magenta, underline;
    set TP0CM-LIT14 magenta, underline;
    set TP0CM-LIT15 magenta, underline;

  end

end // end TP0CS250-RUNMODE

// Check attention identifier
Function TP0CS300-PFKEYS()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    XSPF1(); /* Exit to the HELP facility*/

    TP0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    TP0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = "TP0B"; /* Fast Pick*/
    COMMAREA.CAFROMAP = "TP0C"; /* Fast Pick*/
    TPWREC.TPWFRMAP = "TP0C"; /* Fast Pick*/
    COMMAREA.CAUSERA = TPWREC.TPWGRPLV; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    TP0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TP0CM001.XXXPRCNM = "TP0CS300"; /* Error location*/

    exit stack; /* EXIT TO DISPLAY MAP*/

  end

  if (converseVar.eventKey is enter) /* enter was pressed*/
    TP0CS500-INPUT(); /* process inquiry requests*/
  end


  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7
   && converseVar.eventKey not pf19
   && converseVar.eventKey not pf8
   && converseVar.eventKey not pf20
   && converseVar.eventKey not pf5
  )
    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    TP0CM001.XXXPRCNM = "TP0CS300"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll requested, determine if valid.*/
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && XXX-CURR-PAGE-NBR < 2)      /* and no previous pages*/

    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && XXX-CURR-PAGE-NBR >= XXX-HI-PAGE-NBR)
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If err - display.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If pf5 - update plan to tag orders.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* tag orders to plan*/
    TP0CS550-TAG();
    XXX-CURR-PAGE-NBR = 1; /* reset screen to page 1*/
  end



end // end TP0CS300-PFKEYS

// obtain data to display
Function TP0CS500-INPUT()
  /* -------------------------------------------*/
  /* edit the Action codes on the current page*/
  /* USER CAN ENTER EITHER AN 'I' OR 'S'*/
  /* TO INQUIRE ON A SPECIFIC COLOR AND STYLE.*/
  /* -------------------------------------------*/
  XXX-INX-FLD-NBR = 1;

  while (XXX-INX-FLD-NBR <= TP0CW02.TPW-LINES-ON-PAGE)
    if (TP0CM001.TPW-SELECT[XXX-INX-FLD-NBR] == "I"
     || TP0CM001.TPW-SELECT[XXX-INX-FLD-NBR] == "S"
     || TP0CM001.TPW-SELECT[XXX-INX-FLD-NBR] <= " ")
      /* next sentence;*/
    else
      set TP0CM001.TPW-SELECT[XXX-INX-FLD-NBR] cursor, bold;
      TA1REC.TA1PGMNO = "514"; /* module identificAtion*/
      converseLib.validationFailed(35); /* invAlid Action*/
      exit stack; /* Exit to redisplAy mAp*/

    end
    XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;

  end

  /* -------------------------------------------*/
  /* now, act on the first request encountered*/
  /* -------------------------------------------*/
  XXX-INX-FLD-NBR = 1;

  while (XXX-INX-FLD-NBR <= TP0CW02.TPW-LINES-ON-PAGE)
    if (TP0CM001.TPW-SELECT[XXX-INX-FLD-NBR] == "I"
     || TP0CM001.TPW-SELECT[XXX-INX-FLD-NBR] == "S")
      TPWREC.SY1STNBR = TP0CM001.SY1STNBR[XXX-INX-FLD-NBR];
      TPWREC.SY2CLRID = TP0CM001.SY2CLRID[XXX-INX-FLD-NBR];
      TP0CW00.TPW-TO-DT-IND = "Y";
      COMMAREA.CATOAP = "TP0D"; /* Fast Pick*/
      COMMAREA.CAFROMAP = "TP0C"; /* Fast Pick*/
      TPWREC.TPWFRMAP = "TP0C"; /* Fast Pick*/
      TPWREC.TPW-SAVE-PAGENO = XXX-CURR-PAGE-NBR; /* save page nbr*/
      COMMAREA.CAUSERA = TPWREC.TPWGRPLV; /* COMMAREA user area*/

      XSEXIT(); /* Invoke selected application*/
    end
    XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;

  end

end // end TP0CS500-INPUT

// Check attention identifier
Function TP0CS550-TAG()
  TP10REC.XWHCD = TPWREC.XWH-WHSE-CD; /* warehouse code*/
  TP10REC.TP10-CALLING-PGM = "TP0C"; /**/

  if (TPWREC.TPW-SEL-RUN-MODE == "PP")
    TP10REC.TP10-RUN-MODE = "P";
  else
    TP10REC.TP10-RUN-MODE = "S";
  end

    /* ------------------------------------------------------------*/
    /* call subroutine to change the status of orders in the*/
    /* fastpick plan.*/
    /* ------------------------------------------------------------*/
  TP10REC.TPW-RQST-TYP = "TG"; /* request all product data*/
  TP10REC.TP10-XHDCDFL = "N"; /**/
  call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/
  if (TP10REC.TPW-RTRN-CD == 0)
    if (TP10REC.TP10-RUN-MODE == "P")
      VAGen_EZEMSG = "ORDERS TAGGED TO PLAN";
    else
      VAGen_EZEMSG = "ORDERS TAGGED TO SCHEDULE";
    end
  else
    VAGen_EZEMSG = TP10REC.TPW-RTRN-MSG;
  end
  exit stack;
end // end TP0CS550-TAG

// obtain data to display
Function TP0CS600-SCROLL()
   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    XXX-CURR-PAGE-NBR = XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/

    XXX-RQT-DATA-FL = "N"; /* read database*/
    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    XXX-CURR-PAGE-NBR = XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/

    XXX-RQT-DATA-FL = "N"; /* read database*/
    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If first page was requested, move 1 to the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* first page requested*/

    XXX-CURR-PAGE-NBR = 1;
                                   /* point to 1st page*/

    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If last  page was requested, move hi page to page nbr.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* last page requested*/

    move XXX-HI-PAGE-NBR to XXX-CURR-PAGE-NBR withV60Compat;
                                   /* point to last page*/

    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

end // end TP0CS600-SCROLL

//*** RECORD=TP0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TP0CW00 type basicRecord
  10 TP0CWFDT TP0CWFDT ; 
    15 TP0CWFCC TP0CWFCC ; 
    15 TP0CWFRD TP0CWFRD ; 
      20 TP0CWFYY TP0CWFYY ; 
      20 TP0CWFMM TP0CWFMM ; 
      20 TP0CWFDD TP0CWFDD ; 
  10 TP0CWTDT TP0CWTDT ; 
    15 TP0CWTCC TP0CWTCC ; 
    15 * num(6) ; 
      20 TP0CWTYY TP0CWTYY ; 
      20 TP0CWTMM TP0CWTMM ; 
      20 TP0CWTDD TP0CWTDD ; 
  10 TPW-SAVE-TOT-UNITS TPW-SAVE-TOT-UNITS ; 
  10 TPW-SAVE-TOT-UOM-UNITS TPW-SAVE-TOT-UOM-UNITS ; 
  10 TPW-SAVE-TOT-ORDERS TPW-SAVE-TOT-ORDERS ; 
  10 TPW-SAVE-TOT-CARTONS TPW-SAVE-TOT-CARTONS ; 
  10 TPW-SAVE-TOT-SKUS TPW-SAVE-TOT-SKUS ; 
  10 TPW-TO-DT-IND TPW-TO-DT-IND ; 
end // end TP0CW00

//*** RECORD=TP0CW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TP0CW01 type basicRecord
  5 TP0CW-WORK-STORAGE TP0CW-WORK-STORAGE ; 
    10 TPW-CNT TPW-CNT ; 
    10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
    10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
    10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
    10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
    10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
    10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
    10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
end // end TP0CW01

//*** RECORD=TP0CW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TP0CW02 type basicRecord
  3 TP0CW-TSQ-PAGE TP0CW-TSQ-PAGE ; 
    10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
    10 TPW-LINES-ON-PAGE TPW-LINES-ON-PAGE ; 
    10 TP0CW-TSQ-LINE TP0CW-TSQ-LINE [11] ; 
      15 TPW-SELECT TPW-SELECT ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 TP10-SIZE TP10-SIZE ; 
      15 PK1NBCTN PK1NBCTN ; 
      15 PK5TIQTY PK5TIQTY ; 
      15 TP10-XUMCNV TP10-XUMCNV ; 
      15 TP10-UOM-UNITS TP10-UOM-UNITS ; 
    10 * char(3749) ; 
end // end TP0CW02

DataItem TP0CW-TSQ-LINE char(31)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TP0CW-TSQ-PAGE char(4096)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TP0CW-WORK-STORAGE char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map from century
DataItem TP0CWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from day
DataItem TP0CWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from date-ccyymmdd
DataItem TP0CWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from month
DataItem TP0CWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from date yymmdd
DataItem TP0CWFRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from year
DataItem TP0CWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to century
DataItem TP0CWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to day
DataItem TP0CWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to date-ccyymmdd
DataItem TP0CWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to month
DataItem TP0CWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to year
DataItem TP0CWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

