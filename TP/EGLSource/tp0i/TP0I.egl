package tp0i;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import dg.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import tp.common.*;
import ts.common.*;
//*** PROGRAM=TP0I ****
// Fast Pick - Select by Order.
// 
// -------   --------  ------  --------------------------------
// CONTROL     DATE    USERID  DESCRIPTION OF CHANGE
// -------   --------  ------  --------------------------------
// Fastpick  02/29/96  SCHASE  New application.
// Fastpick  09/11/96  OVAZQU  Allow for selection of orders
//                             determined to be planned ("L")
//                             by the nightly batch run.
// Fastpick  10/15/96  OVAZQU  Do not allow b-grade or closeout
//                             pool orders to be selected.
// *********************
Program TP0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP8REC OP8REC; // record
  OPBREC OPBREC; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PKIREC PKIREC; // record
  PKNREC PKNREC; // record
  PKWREC PKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TP0IW00 TP0IW00; // record
  TP0IW01 TP0IW01; // record
  TP10REC TP10REC; // record
  TP1REC TP1REC; // record
  TPWREC TPWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use TP0IM.TP0IM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTP001: XPTP001();

    TP0I0001: TP0I0001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SQLCA empty; /* SQL communication area*/
    set OP1REC empty; /* Order header*/
    set OP2REC empty; /* Order item*/
    set OP3REC empty; /* Order item/size*/
    set OP8REC empty; /* Formatted rec for DB1000*/
    set OPBREC empty; /* Parm rec for DB1000*/
    set PK4REC empty; /* Pick Pool header*/
    set PK5REC empty; /* Pick Pool item*/
    set PKWREC empty; /* Picking work record*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TP1REC empty; /* Fast Pick*/
    set TP10REC empty; /* TP0010 Iomod work record*/
    set TP0IW00 empty; /* Working storage*/
    set TP0IW01 empty; /* M001 display storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    TP0IW01.XWH-WHSE-CD = TPWREC.XWH-WHSE-CD;


    TP0I0002: TP0I0002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TP0I0002; /* Converse the main process*/


  end // end main
end // end TP0I

// Determine which map to display
Function TP0I0001()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* ------------------------------------------------------------*/

  set TP0IM001 initial; /* Clear map storage area*/

  TP0IM001.XXXRVNBR = "00"; /* Revision number*/
  TP0IM001.XWHABRV = TPWREC.XWHABRV; /* Warehouse abrv*/
  TP0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TP0IM001.XWH-WHSE-CD = TPWREC.XWH-WHSE-CD; /* Warehouse*/

  if (TPWREC.TPW-SEL-RUN-MODE == "PP") /* Fast Pick Planning*/
    TP0IM001.TP0IM-RUN-MODE-LIT = "PICK PLANNING";
    set TP0IM001.TP0IM-XWHCD-LIT blue;
    set TP0IM001.TP0IM-ORDER-LIT blue;
    set TP0IM001.TP0IM-DTL-LIT blue;
  else /* Fast Pick Selection*/
    TP0IM001.TP0IM-RUN-MODE-LIT = "P I C K I N G";
    set TP0IM001.TP0IM-XWHCD-LIT magenta;
    set TP0IM001.TP0IM-ORDER-LIT magenta;
    set TP0IM001.TP0IM-DTL-LIT magenta;
  end

  converseLib.validationFailed(63); /* Please enter order nbr*/


end // end TP0I0001

// Main process to display a map
Function TP0I0002()
  converse TP0IM001 ;
  TP0IS300-PFKEYS(); /* check pfkeys*/

  TP0IS400-INPUT(); /* verify request*/

  TP0IS200-FORMAT(); /* write data to ts and format page 1*/


end // end TP0I0002

// Add fast pick record
Function TP0IS-A-VFASTP01()
   /* ------------------------------------------------------------*/
   /* Add fast pick record*/
   /* ------------------------------------------------------------*/

  try
    call "VFASTP01" ("A ", SQLCA, TP1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "ADD RECORD";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFASTP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-A-VFASTP01

// Close cursor for pool item
Function TP0IS-C1-VPOOLI01()
   /* ------------------------------------------------------------*/
   /* Close cursor on vpooli01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "CLOSE CURSOR";
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-C1-VPOOLI01

// Close cursor for fastpick
Function TP0IS-C2-VFASTP01()
   /* ------------------------------------------------------------*/
   /* Close cursor on vfastp01*/
   /* ------------------------------------------------------------*/

  try
    call "VFASTP01" ("C2", SQLCA, TP1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "CLOSE CURSOR";
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFASTP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-C2-VFASTP01

// Close cursor for order item
Function TP0IS-CS-VITEM001()
   /* ------------------------------------------------------------*/
   /* Close cursor on vpooli01*/
   /* ------------------------------------------------------------*/

  try
    call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "CLOSE CURSOR";
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-CS-VITEM001

// Retrieve order item/size rec
Function TP0IS-DB1000()
   /* ------------------------------------------------------------*/
   /* Retrieve order line item size quantities*/
   /* ------------------------------------------------------------*/

  OP8REC.OP8TASK = "S "; /* Retrieve item/size record*/
  OP8REC.OP8LOC = "TP0IS-DB1000";
  OP8REC.OP8LOCAT[1] = "DB1000";
  OP8REC.OP8LOCAT[2] = " ";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "NONE";

  try
    call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (OPBREC.OPBSZRC == 0) /* Check for good return*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Terminate function*/
  TA1REC.TA1PGMNM = "TP0I";
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1LOCAT[1] = "S";
  TA1REC.TA1LOCAT[2] = "TP0IS-DB1000";
  TA1REC.TA1LOCAT[3] = "DB1000";
  TA1REC.TA1LOCAT[4] = OPBREC.OPBSZRC;
  TA1REC.TA1MAP = "TP0IM001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "FORMATER"; /* Table view name*/
  TA1REC.TA1TBLKE = OP3REC.OP2KEY;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-DB1000

// Select order from fastpick
Function TP0IS-FASTP-ORDER()
   /* ------------------------------------------------------------*/
   /* Select order from fastpick*/
   /* ------------------------------------------------------------*/

  set TP1REC empty; /* Initialize record*/

  TP1REC.XWHCD = TPWREC.XWH-WHSE-CD;
  TP1REC.PK1CUOID = TP0IM001.PK1CUOID;
  TP1REC.PK1NORID = TP0IM001.PK1NORID;

  TP0IS-S2-VFASTP01(); /* Declare fastpick cursor*/

  TP0IS-N2-VFASTP01(); /* Fetch fastpick record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Order found*/

    TP0IW00.TP0IW-ORDER-FOUND = "Y";

  end

  TP0IS-C2-VFASTP01(); /* Close fastpick cursor*/


end // end TP0IS-FASTP-ORDER

// Format from order header
Function TP0IS-FASTP-ORHDR()
   /* ------------------------------------------------------------*/
   /* Format the fast pick record from the order header record.*/
   /* ------------------------------------------------------------*/

  set TP1REC empty; /* Initialize record*/

  TP1REC.XWHCD = OP1REC.XWHCD; /* Warehouse code*/
  TP1REC.PK1CUOID = OP1REC.OP1CUOID; /* Customer order nbr*/
  TP1REC.PK1NORID = OP1REC.OP1NORID; /* Sub order nbr*/

  if (TPWREC.TPW-SEL-RUN-MODE == "PP") /* Fast Pick Planning*/
    TP1REC.TP1-FP-STAT-IND = "2"; /* Tagged to planning*/
  else /* Fast Pick Selection*/
    TP1REC.TP1-FP-STAT-IND = "4"; /* Tagged to selection*/
  end

  TP1REC.TF1CARCD = OP1REC.TF1CARCD; /* Carrier code*/
  TP1REC.KUCCOID = OP1REC.KUCCOID; /* Customer code*/


end // end TP0IS-FASTP-ORHDR

// Format from order item
Function TP0IS-FASTP-ORITM()
   /* ------------------------------------------------------------*/
   /* Format the fast pick record from the order item record.*/
   /* ------------------------------------------------------------*/

  set OP3REC empty;

  OP3REC.OP2KEY = OP2REC.OP2KEY;

  TP0IS-DB1000(); /* Get order item/size record*/

  TP1REC.XGPCD = OP2REC.XGPCD; /* Product code*/
  TP1REC.SY1STNBR = OP2REC.SY1STNBR; /* Style*/
  TP1REC.SY2CLRID = OP2REC.SY2CLRID; /* Color*/
  TP1REC.XDMCD = OP2REC.XDMCD; /* Dimension*/
  TP1REC.XQACD = OP2REC.XQACD; /* quality*/
  TP1REC.PC2INSEG = OP2REC.PC2INSEG;
  TP1REC.XEGCD = OP2REC.XEGCD; /* Engr diff*/
  TP1REC.XPGCD = OP2REC.XPGCD; /* Pkg type*/
  TP1REC.XOWCD = OP2REC.XOWCD; /* Own grp*/
  TP1REC.XUMCD = OP2REC.XUMCD; /* Unit of measure code*/

  TP1REC.XHD-HNDL-CD[1] = OP2REC.XHDCD[1]; /* Special handle codes*/
  TP1REC.XHD-HNDL-CD[2] = OP2REC.XHDCD[2];
  TP1REC.XHD-HNDL-CD[3] = OP2REC.XHDCD[3];

  if (TP1REC.XHD-HNDL-CD[1] > "   " /* Non-blank handle code*/
   || TP1REC.XHD-HNDL-CD[2] > "   " 
   || TP1REC.XHD-HNDL-CD[3] > "   ")
    TP1REC.OP1SPHDF = "Y"; /* Special Handling*/
  else /* Blank handle code*/
    TP1REC.OP1SPHDF = "N"; /* Non-special handling*/
  end

  TP0IS-SIZE-SCALE(); /* Get size scale*/

  if (PKNREC.SY1UNPCS > 0)
    TP1REC.SY1UNPCS = PKNREC.SY1UNPCS; /* Units per case*/
  else
    TP1REC.SY1UNPCS = 1; /* Default to 1*/
  end

  if (TP1REC.XUMCD in XUMTBL.XUMCD /* Valid UOM code*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    TP1REC.XUMCONVF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
  else /* Invalid UOM code*/
    TP1REC.XUMCONVF = 1; /* Default to 1*/
  end

  TP0IW01.TP0IWIDX = 1; /* Initialize work index*/
  while (TP0IW01.TP0IWIDX <= 40) /* Spin through qtys*/
    if (OP3REC.OP3SZAFL[TP0IWIDX] > " ") /* Size record present*/
      TP1REC.PK5TIQTY = OP3REC.OP3ALQT[TP0IWIDX]; /* item qty*/
      TP1REC.SY-SZ-ID = TP0IW01.TP0IWIDX; /* size id*/
      TP1REC.SY4IDDSC = PKIREC.SY4IDDSC[TP0IWIDX]; /* sz desc*/
      TP1REC.PK1NBCTN = OP3REC.OP3ALQT[TP0IWIDX] / TP1REC.SY1UNPCS;
      TP0IW01.TP0IW-REMINDER = OP3REC.OP3ALQT[TP0IWIDX] -       (TP1REC.PK1NBCTN * TP1REC.SY1UNPCS);

      if (TP1REC.PK1NBCTN > 0) /* More than one full carton*/
        TP1REC.PK5ITMFC = TP1REC.PK1NBCTN * TP1REC.SY1UNPCS;
      else
        TP1REC.PK5ITMFC = 0;
      end

      TP1REC.PK5ITMRP = TP1REC.PK5TIQTY - TP1REC.PK5ITMFC;

      TP0IS-A-VFASTP01(); /* Add Fast Pick record*/

    end
    TP0IW01.TP0IWIDX = TP0IW01.TP0IWIDX + 1; /* Increment index*/
  end


end // end TP0IS-FASTP-ORITM

// Format from pool header
Function TP0IS-FASTP-POOLH()
   /* ------------------------------------------------------------*/
   /* Format the fast pick record from the pool header record.*/
   /* ------------------------------------------------------------*/

  set TP1REC empty; /* Initialize record*/

  TP1REC.XWHCD = PK4REC.XWHCD; /* Warehouse code*/
  TP1REC.PK1CUOID = PK4REC.PK1CUOID; /* Customer order nbr*/
  TP1REC.PK1NORID = PK4REC.PK1NORID; /* Sub order nbr*/

  if (TPWREC.TPW-SEL-RUN-MODE == "PP") /* Fast Pick Planning*/
    TP1REC.TP1-FP-STAT-IND = "2"; /* Tagged to planning*/
  else /* Fast Pick Selection*/
    TP1REC.TP1-FP-STAT-IND = "4"; /* Tagged to selection*/
  end

  TP1REC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/
  TP1REC.KUCCOID = PK4REC.KUCCOID; /* Customer code*/


end // end TP0IS-FASTP-POOLH

// Format from pool item
Function TP0IS-FASTP-POOLI()
   /* ------------------------------------------------------------*/
   /* Format the fast pick record from the pool item record.*/
   /* ------------------------------------------------------------*/

  TP1REC.XGPCD = PK5REC.XGPCD; /* Product code*/
  TP1REC.SY1STNBR = PK5REC.SY1STNBR; /* Style*/
  TP1REC.SY2CLRID = PK5REC.SY2CLRID; /* Color*/
  TP1REC.XDMCD = PK5REC.XDMCD; /* Dimension*/
  TP1REC.XQACD = PK5REC.XQACD; /* quality*/
  TP1REC.PC2INSEG = PK5REC.PC2INSEG;
  TP1REC.XEGCD = PK5REC.XEGCD; /* Engr diff*/
  TP1REC.XPGCD = PK5REC.XPGCD; /* Pkg type*/
  TP1REC.XOWCD = PK5REC.XOWCD; /* Own grp*/
  TP1REC.XUMCD = PK5REC.XUMCD; /* Unit of measure code*/

  if (PK5REC.SY1UNPCS > 0)
    TP1REC.SY1UNPCS = PK5REC.SY1UNPCS; /* Units per case*/
  else
    TP1REC.SY1UNPCS = 1; /* Units per case*/
  end

  TP1REC.XHD-HNDL-CD[1] = PK5REC.XHDCD[1]; /* Special handle codes*/
  TP1REC.XHD-HNDL-CD[2] = PK5REC.XHDCD[2];
  TP1REC.XHD-HNDL-CD[3] = PK5REC.XHDCD[3];

  if (TP1REC.XHD-HNDL-CD[1] > "   " /* Non-blank handling*/
   || TP1REC.XHD-HNDL-CD[2] > "   " 
   || TP1REC.XHD-HNDL-CD[3] > "   ")
    TP1REC.OP1SPHDF = "Y"; /* Special handling*/
  else /* Blank handling*/
    TP1REC.OP1SPHDF = "N"; /* Non-special handling*/
  end

  TP0IS-SIZE-SCALE(); /* Get size scale*/

  if (TP1REC.XUMCD in XUMTBL.XUMCD /* Valid UOM code*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    TP1REC.XUMCONVF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
  else /* Invalid UOM code*/
    TP1REC.XUMCONVF = 1; /* Default to 1*/
  end

  TP0IW01.TP0IWIDX = 1; /* Initialize work index*/
  while (TP0IW01.TP0IWIDX <= 40) /* Spin through qtys*/
    if (PK5REC.PK1QTY[TP0IWIDX] > 0) /* Size qty > 0*/

      TP1REC.PK5TIQTY = PK5REC.PK1QTY[TP0IWIDX]; /* item qty*/
      TP1REC.SY-SZ-ID = TP0IW01.TP0IWIDX; /* size id*/
      TP1REC.SY4IDDSC = PKIREC.SY4IDDSC[TP0IWIDX]; /* sz desc*/
      TP1REC.PK1NBCTN = PK5REC.PK1QTY[TP0IWIDX] / TP1REC.SY1UNPCS;
      TP0IW01.TP0IW-REMINDER = PK5REC.PK1QTY[TP0IWIDX] -       (TP1REC.PK1NBCTN * TP1REC.SY1UNPCS);

      if (PK5REC.PK5ITMFC > 0) /* fc qty?*/
        TP1REC.PK5ITMFC = TP1REC.PK1NBCTN * TP1REC.SY1UNPCS; /* Fc units*/
        TP1REC.PK5ITMRP = TP0IW01.TP0IW-REMINDER; /* Rp units*/
      else
        TP1REC.PK5ITMFC = 0; /* Fc units*/
        TP1REC.PK5ITMRP = PK5REC.PK1QTY[TP0IWIDX]; /* Rp units*/
      end
      if (TP0IW01.TP0IW-REMINDER > 0)
        TP1REC.PK1NBCTN = TP1REC.PK1NBCTN + 1;
      end

      TP0IS-A-VFASTP01(); /* Add Fast Pick record*/

    end
    TP0IW01.TP0IWIDX = TP0IW01.TP0IWIDX + 1; /* increment index*/
  end


end // end TP0IS-FASTP-POOLI

// Fetch next pool item record
Function TP0IS-N1-VPOOLI01()
   /* ------------------------------------------------------------*/
   /* Fetch next pool item record*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of file*/
        TP0IW00.TP0IW-EOF-ITEMS = "Y";
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-N1-VPOOLI01

// Fetch next fastpick record
Function TP0IS-N2-VFASTP01()
   /* ------------------------------------------------------------*/
   /* Fetch next fastpick record*/
   /* ------------------------------------------------------------*/

  try
    call "VFASTP01" ("N2", SQLCA, TP1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of file*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFASTP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-N2-VFASTP01

// Select order from order header
Function TP0IS-ORDER-HEADER()
   /* ------------------------------------------------------------*/
   /* Select order from order header*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Initialize record*/

  OP1REC.OP1CUOID = TP0IM001.PK1CUOID;
  OP1REC.OP1NORID = TP0IM001.PK1NORID;
  TP0IW01.TP0IW-OP1CUOID = TP0IM001.PK1CUOID;
  OP1REC.OP1PARTN = TP0IW01.TP0IW-OP1PARTN;

  TP0IS-S-VORHDR01(); /* Select unique order header*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    TP0IW00.TP0IW-ORDER-FOUND = "Y";

    if (OP1REC.XGPCD == "03" /* Apparel*/
     && OP1REC.XOSCD == "AL" /* Order allocated*/
     && OP1REC.XAHCD == "  ") /* Order not on hold*/
      TP0IS-ORDER-ITEMS(); /* Read order item records*/
    else
      converseLib.validationFailed(501); /* Order not available for selection*/
    end

  end


end // end TP0IS-ORDER-HEADER

// Read order item records
Function TP0IS-ORDER-ITEMS()
   /* ------------------------------------------------------------*/
   /* Read order item records*/
   /* ------------------------------------------------------------*/

  set OP2REC empty; /* Initialize record*/

  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = OP1REC.OP1NORID;

  TP0IS-SS-VITEM001(); /* Open cursor for order item*/

  TP0IW00.TP0IW-EOF-ITEMS = "N"; /* Init eof - vitem001*/

  TP0IS-SN-VITEM001(); /* Fetch next order item record*/

  while (TP0IW00.TP0IW-EOF-ITEMS == "N") /* While not end of items*/

    TP0IS-FASTP-ORHDR(); /* Format header info*/
    TP0IS-FASTP-ORITM(); /* Format item info*/
    TP0IS-SN-VITEM001(); /* Fetch next order item record*/

  end

  TP0IS-CS-VITEM001(); /* Close cursor for order item*/


end // end TP0IS-ORDER-ITEMS

// Select order from pool header
Function TP0IS-POOL-HEADER()
   /* ------------------------------------------------------------*/
   /* Select order from pool header*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Initialize record*/

  PK4REC.XWHCD = TPWREC.XWH-WHSE-CD;
  PK4REC.PK1CUOID = TP0IM001.PK1CUOID;
  PK4REC.PK1NORID = TP0IM001.PK1NORID;

  TP0IS-S-VPOOLH01(); /* Select unique pool header*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

    TP0IW00.TP0IW-ORDER-FOUND = "Y";

    XPPK005(); /* see if order is b-grade/closeout*/

    if ((PK4REC.PK4SLIND == " " /* (not selected yet*/
     || PK4REC.PK4SLIND == "L") /* or selected for plan)*/
     && PK4REC.XGPCD == "03"    /* apparel*/
     && PK4REC.PK4STKTF != "Y"  /* not stock transfer*/
     && PK4REC.PK4ORHLD != "Y"  /* not order on hold*/
     && PK4REC.PK4CUHLD != "Y"  /* not cust on hold*/
     && PKWREC.PKW-ORDER-TYP-IND == " ") /* no b-grade/closeout*/

      TP0IS-POOL-ITEMS(); /* Read pool item records*/

      TP0IS-U-POOLH-IND(); /* update pk-sel-ind in poolh01*/

    else
      converseLib.validationFailed(501); /* order not available for selection*/
    end
  end


end // end TP0IS-POOL-HEADER

// Read pool item records
Function TP0IS-POOL-ITEMS()
   /* ------------------------------------------------------------*/
   /* Read order item records*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Initialize record*/

  PK5REC.XWHCD = PK4REC.XWHCD;
  PK5REC.PK1CUOID = PK4REC.PK1CUOID;
  PK5REC.PK1NORID = PK4REC.PK1NORID;

  TP0IS-S1-VPOOLI01(); /* Open cursor for pool item*/

  TP0IW00.TP0IW-EOF-ITEMS = "N"; /* Init eof - vpooli01*/

  TP0IS-N1-VPOOLI01(); /* Fetch next pool item record*/

  while (TP0IW00.TP0IW-EOF-ITEMS == "N") /* While not end of items*/

    TP0IS-FASTP-POOLH(); /* Format header info*/
    TP0IS-FASTP-POOLI(); /* Format item info*/
    TP0IS-N1-VPOOLI01(); /* Fetch next pool item record*/

  end

  TP0IS-C1-VPOOLI01(); /* Close cursor for pool item*/


end // end TP0IS-POOL-ITEMS

// Select unique order header
Function TP0IS-S-VORHDR01()
   /* ------------------------------------------------------------*/
   /* Select unique on vorhdr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "SELECT UNIQUE";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-S-VORHDR01

// Select unique size scale
Function TP0IS-S-VPKSCL01()
   /* ------------------------------------------------------------*/
   /* Select unique size scale record*/
   /* ------------------------------------------------------------*/

  try
    call "IO1820" ("S ", SQLCA, PKIREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "SELECT UNIQUE";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSCL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-S-VPKSCL01

// Select unique style
Function TP0IS-S-VPKSTY01()
   /* ------------------------------------------------------------*/
   /* Select unique style record*/
   /* ------------------------------------------------------------*/

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "SELECT UNIQUE";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-S-VPKSTY01

// Select unique pool header
Function TP0IS-S-VPOOLH01()
   /* ------------------------------------------------------------*/
   /* Select unique on vpoolh01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "SELECT UNIQUE";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-S-VPOOLH01

// Open cursor for pool item
Function TP0IS-S1-VPOOLI01()
   /* ------------------------------------------------------------*/
   /* Open cursor on vpooli01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "OPEN CURSOR";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-S1-VPOOLI01

// Open cursor for fastpick
Function TP0IS-S2-VFASTP01()
   /* ------------------------------------------------------------*/
   /* Open cursor on vfastp01*/
   /* ------------------------------------------------------------*/

  try
    call "VFASTP01" ("S2", SQLCA, TP1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "OPEN CURSOR";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFASTP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-S2-VFASTP01

// Retrieve size scale
Function TP0IS-SIZE-SCALE()
   /* ------------------------------------------------------------*/
   /* Select unique style to obtain size scale code*/
   /* ------------------------------------------------------------*/

  set PKNREC empty; /* Initialize record*/

  PKNREC.XGPCD = TP1REC.XGPCD; /* Product code*/
  PKNREC.SY1STNBR = TP1REC.SY1STNBR; /* Style*/
  PKNREC.SY2CLRID = TP1REC.SY2CLRID; /* Color*/
  PKNREC.XDMCD = TP1REC.XDMCD; /* Dimension*/

  TP0IS-S-VPKSTY01(); /* Select unique style*/

  if (converseVar.validationMsgNum == 0) /* Style was found*/
    set PKIREC empty; /* Initialize record*/
    PKIREC.SY4SZSCL = PKNREC.SY4SZSCL; /* Size scale code*/
    TP0IS-S-VPKSCL01(); /* Select size scale*/
  end


end // end TP0IS-SIZE-SCALE

// Fetch next order item record
Function TP0IS-SN-VITEM001()
   /* ------------------------------------------------------------*/
   /* Fetch next order item record*/
   /* ------------------------------------------------------------*/

  try
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of file*/
        TP0IW00.TP0IW-EOF-ITEMS = "Y";
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-SN-VITEM001

// Open cursor for order item
Function TP0IS-SS-VITEM001()
   /* ------------------------------------------------------------*/
   /* Open cursor on vitem001*/
   /* ------------------------------------------------------------*/

  try
    call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "OPEN CURSOR";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Terminate function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end TP0IS-SS-VITEM001

// Update sel-ind in pool hdr
Function TP0IS-U-POOLH-IND()
  /* ------------------------------------------------------------*/
  /* call subroutine to change the status of orders in pool hdr*/
  /* ------------------------------------------------------------*/

  set TP10REC empty; /* reset TP0010 Iomod work record*/

  TP10REC.TP10-CALLING-PGM = "TP0I";
  TP10REC.XWHCD = PK4REC.XWHCD; /* warehouse code*/
  TP10REC.PK1CUOID = PK4REC.PK1CUOID; /* order nbr*/
  TP10REC.PK1NORID = PK4REC.PK1NORID; /* sub-order nbr*/
  TP10REC.TPW-RQST-TYP = "UP"; /* request all product data*/

  if (TPWREC.TPW-SEL-RUN-MODE == "PP")
    TP10REC.TP10-RUN-MODE = "P";
  else
    TP10REC.TP10-RUN-MODE = "S";
  end

  TP0IS-U-VPOOLH01(); /* call iomod to update sel-ind in poolh*/

  if (TP10REC.TPW-RTRN-CD != 0)
    VAGen_EZEMSG = TP10REC.TPW-RTRN-MSG;
  end

end // end TP0IS-U-POOLH-IND

// Update pool hdr
Function TP0IS-U-VPOOLH01()
  /* ------------------------------------------------------------*/
  /* call subroutine to change the status of orders in pool hdr*/
  /* ------------------------------------------------------------*/

  call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/

   /* ------------------------------------------------------------*/
   /* Check return codes*/
   /* ------------------------------------------------------------*/
  if (TP10REC.TPW-RTRN-CD == 0)

    if (TP10REC.TPW-RTRN-SQLCD == 0)
      /* next sentence*/
    else
      if (TP10REC.TPW-RTRN-SQLCD == -911)
        converseLib.validationFailed(108); /* contention*/
      else
        converseLib.validationFailed(29); /* unexpected return*/
      end
      return;
    end
  else
    VAGen_EZEMSG = TP10REC.TPW-RTRN-MSG;
    converseLib.validationFailed(29); /* unexpected return*/
    return;
  end


end // end TP0IS-U-VPOOLH01

// Format the map heading
Function TP0IS110-HEADING()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* ------------------------------------------------------------*/

  set TP0IM001 initial; /* Clear map storage area*/

  TP0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TP0IM001.XWH-WHSE-CD = TPWREC.XWH-WHSE-CD;
                                             /* Warehouse code*/
  TP0IM001.XWHABRV = TPWREC.XWHABRV; /* Warehouse abbreviation*/
  TP0IM001.XXXRVNBR = "00"; /* Revision number*/

  if (TPWREC.TPW-SEL-RUN-MODE == "PP") /* Fast Pick Planning*/
    TP0IM001.TP0IM-RUN-MODE-LIT = "PICK PLANNING";
    set TP0IM001.TP0IM-XWHCD-LIT blue;
    set TP0IM001.TP0IM-ORDER-LIT blue;
    set TP0IM001.TP0IM-DTL-LIT blue;
  else /* Fast Pick Selection*/
    TP0IM001.TP0IM-RUN-MODE-LIT = "P I C K I N G";
    set TP0IM001.TP0IM-XWHCD-LIT magenta;
    set TP0IM001.TP0IM-ORDER-LIT magenta;
    set TP0IM001.TP0IM-DTL-LIT magenta;
  end


end // end TP0IS110-HEADING

// Format the output display
Function TP0IS200-FORMAT()
   /* ------------------------------------------------------------*/
   /* If first time through or no errors, format the map heading.*/
   /* Indicate sound audible alarm for any error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* or no error messages*/

    TP0IS110-HEADING(); /* Format map heading area*/

  end

  if (converseVar.validationMsgNum != 0) /* Error message to display*/

    set TP0IM001 alarm; /* Indicate sound alarm*/

  end


end // end TP0IS200-FORMAT

// Check attention identifier
Function TP0IS300-PFKEYS()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    XSPF1(); /* Exit to the HELP facility*/

    TP0IM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    TP0IM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* Fast Pick menu*/
    COMMAREA.CAUSERA = TPWREC.TPWGRPLV; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    TP0IM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    return; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter) /* Enter was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/

    return; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If err - display.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end TP0IS300-PFKEYS

// Input edits
Function TP0IS400-INPUT()
   /* ------------------------------------------------------------*/
   /* Input edits*/
   /* ------------------------------------------------------------*/

  if (TP0IM001.PK1CUOID == 0 /* Order number not entered*/
   || TP0IM001.PK1NORID == 0)

    converseLib.validationFailed(194); /* Order number required*/
  else

    TP0IW00.TP0IW-ORDER-FOUND = "N"; /* Initialize order found*/
    TP0IS-FASTP-ORDER(); /* Check for order on Fastpick*/
    if (TP0IW00.TP0IW-ORDER-FOUND == "N") /* Not found on fastpick*/

      TP0IS-POOL-HEADER(); /* Try pool header*/
      if (TP0IW00.TP0IW-ORDER-FOUND == "N") /* Not found on pool header*/
        TP0IS-ORDER-HEADER(); /* Try order header*/
      end
    else
      converseLib.validationFailed(44); /* Order already on fastpick*/
    end

    if (converseVar.validationMsgNum == 0) /* No errors yet*/

      if (TP0IW00.TP0IW-ORDER-FOUND == "N") /* Order not found anywhere*/
        converseLib.validationFailed(164); /* Error message*/
      else
        converseLib.validationFailed(93); /* Record was added*/
      end
    end
  end


end // end TP0IS400-INPUT

//*** RECORD=TP0IW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record TP0IW00 type basicRecord
  10 XWH-WHSE-CD XWH-WHSE-CD ; 
  10 TP0IW-EOF-ITEMS TP0IW-EOF-ITEMS ; 
  10 TP0IW-ORDER-FOUND TP0IW-ORDER-FOUND ; 
  10 XXXLOCID XXXLOCID ; 
end // end TP0IW00

//*** RECORD=TP0IW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// ***********************
Record TP0IW01 type basicRecord
  5 * char(59) ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 XWHABRV XWHABRV ; 
    10 TP0IWIDX TP0IWIDX ; 
    10 TP0IW-REMINDER TP0IW-REMINDER ; 
    10 TP0IW-OP1CUOID TP0IW-OP1CUOID ; 
      15 * num(8) ; 
      15 TP0IW-OP1PARTN char(1) ; // work field: op-ord-part-char
    10 * char(28) ; 
end // end TP0IW01

// end of items switch
DataItem TP0IW-EOF-ITEMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field: op-cust-ord-id
DataItem TP0IW-OP1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order found switch
DataItem TP0IW-ORDER-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TP0IW-REMINDER num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index 1
DataItem TP0IWIDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

