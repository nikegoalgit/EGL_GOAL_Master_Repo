package tp0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import pk.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import tp.common.*;
//*** PROGRAM=TP0B ****
// This application displays orders on the pool header.
// The user can then select orders to the fastpick plan.
// 
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/30/93  xxxxxx  New application.
// *********************
Program TP0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TP0BW00 TP0BW00; // record
  TP0BW01 TP0BW01; // record
  TP0BW02 TP0BW02; // record
  TP10REC TP10REC; // record
  TPWREC TPWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TP0BM.TP0BM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TP0B0001: TP0B0001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set TP0BM001 initial; /* Map input/output*/
    set SQLCA empty; /* SQL communication area*/
    set TP0BW00 empty; /* application working storage*/
    set TP0BW01 empty; /* application working storage*/
    set TP0BW02 empty; /* temp storage page definition*/
    set TP10REC empty; /* nikeboth io pass data*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/


    TP0BW02.XXX-TEMP-STG-LNTH = 1040; /* Temporary storage length*/
    TP0BW01.XXX-INX-LMT-NBR = 11; /* Number of lines on a page*/
    TP0BW01.XXX-RQT-DATA-FL = "Y"; /* Request for database access*/
    TP0BW01.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/
  
    /* ------------------------------------------------------------*/
    /* Format header info*/
    /* ------------------------------------------------------------*/
    if (TPWREC.TPWFRMAP == "TP0A")
      TP0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
      TP0BM001.XWHCD = TPWREC.XWH-WHSE-CD; /* warehouse code*/
    end

    TP0B0002: TP0B0002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TP0B0002; /* Converse the main process*/

  end // end main
end // end TP0B

// Determine which map to display
Function TP0B0001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /* ------------------------------------------------------------*/

  XPTP001(); /* application init*/

end // end TP0B0001

// Main process to display a map
Function TP0B0002()
  TP0BS100-GETDATA(); /* build pages in temp storage*/
  TP0BS200-FORMAT(); /* move page to map*/
  TP0BS250-RUNMODE(); /* planning or scheduling ?*/
  converse TP0BM001 ;
  TP0BS300-PFKEYS(); /* check pfkeys*/
  TP0BS500-INPUT(); /* verify selection criteria*/
  TP0BS600-SCROLL(); /* process pf7 and pf8*/
end // end TP0B0002

// Add page to temporary storage
Function TP0BS-TS-ADD()
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/
  XXX-TEMP-STG-LNTH = 1040; /* set tsq length*/

   /* ------------------------------------------------------------*/
   /* call subroutine to write page to temp-storage.*/
   /* ------------------------------------------------------------*/

  try
    call "TA0050" (TP0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TP0BW02 empty; /* M001 display storage*/

    XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX;
    TA5REC.TA5TSQIX = 0; /* init tsq page index*/

    XXX-TEMP-STG-LNTH = 1040; /* set tsq length*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0BS-TS-ADD

// Purge any temporary storage
Function TP0BS-TS-PURG()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TP0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/


  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0BS-TS-PURG

// Read temporary storage page
Function TP0BS-TS-READ()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/


  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5TSQIX = XXX-CURR-PAGE-NBR; /* Page number*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/

  XXX-TEMP-STG-LNTH = 1040; /* tsq length*/

  try
    call "TA0050" (TP0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/


  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0BS-TS-READ

// Add page to temporary storage
Function TP0BS-TS-UPDATE()
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/
  XXX-TEMP-STG-LNTH = 1040; /* set tsq length*/
  TA5REC.TA5TSQIX = XXX-CURR-PAGE-NBR; /* Page number*/

   /* ------------------------------------------------------------*/
   /* call subroutine to re-write page to temp-storage.*/
   /* ------------------------------------------------------------*/

  try
    call "TA0050" (TP0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    XXX-TEMP-STG-LNTH = 1040; /* set tsq length*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0BS-TS-UPDATE

// obtain data to display
Function TP0BS100-GETDATA()
  if (converseVar.eventKey is enter)
    /* ------------------------------------------------------------*/
    /* If data was not requested or an error was found, return to*/
    /* the previous process.*/
    /* ------------------------------------------------------------*/

    if (XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
     || converseVar.validationMsgNum != 0) /* or an error was found*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* reset the page number to display.*/
    /* ------------------------------------------------------------*/
    XXX-CURR-PAGE-NBR = 1; /* Page number to display*/

    /* ------------------------------------------------------------*/
    /* Purge any pages from temporary storage and save key fields.*/
    /* ------------------------------------------------------------*/

    TP0BS-TS-PURG(); /* Purge any temporary storage*/

    /* ------------------------------------------------------------*/
    /* set flag to fromat the map*/
    /* ------------------------------------------------------------*/
    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    TA5REC.TA5TSQIX = 0; /* init tsq page index*/
    XXX-HI-PAGE-NBR = 0; /* init page counter*/
    /* ------------------------------------------------------------*/
    /* restore selection criteria if coming from tp0c or tp0d*/
    /* ------------------------------------------------------------*/
    if (TPWREC.TPWFRMAP == "TP0C" || 
    TPWREC.TPWFRMAP == "TP0D")
      TP0BS110-RESTORE();
    end
    /* ------------------------------------------------------------*/
    /* set up io request information*/
    /* ------------------------------------------------------------*/
    TP0BS120-SETUP();

    call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/

    /* ------------------------------------------------------------*/
    /* check to see if there is any data to display.*/
    /* ------------------------------------------------------------*/
    if (TP10REC.TPW-RTRN-SQLCD != 0)
      return; /* Exit to display map*/
    end

    /* ------------------------------------------------------------*/
    /* if there is data to display -*/
    /* write data to temp-storage pages.*/
    /* ------------------------------------------------------------*/

    XXX-INX-FLD-NBR = 0; /* initialize line indexte*/

    TP10REC.TPW-RQST-TYP = "N1"; /* fetch first record*/
    call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/

    while (TP10REC.TPW-RTRN-SQLCD == 0) /* do until no more records*/
      if (TP10REC.TP10-PRODS > TP10REC.TPW-MAX-PRODS) /* if order has too many*/
                                  /* products - skip it*/
      else /* else move to temp storage*/
        XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;
        TP0BW02.TP10-ACTION[XXX-INX-FLD-NBR] = TP10REC.TP10-ACTION; /**/
        TP0BW02.TP10-DNSB[XXX-INX-FLD-NBR] = TP10REC.TP10-DNSB; /**/
        TP0BW02.TF1CARCD[XXX-INX-FLD-NBR] = TP10REC.TF1CARCD; /**/
        TP0BW02.TP10-ORDER-NBR[XXX-INX-FLD-NBR] = TP10REC.TP10-ORDER-NBR; /**/
        TP0BW02.PK1CUOID[XXX-INX-FLD-NBR] = TP10REC.PK1CUOID; /**/
        TP0BW02.PK1NORID[XXX-INX-FLD-NBR] = TP10REC.PK1NORID; /**/
        TP0BW02.CU-CO-NM[XXX-INX-FLD-NBR] = TP10REC.CU-CO-NM; /**/
        TP0BW02.TP10-EXISTS-IND[XXX-INX-FLD-NBR] = TP10REC.TP10-EXISTS-IND; /**/
        TP0BW02.TP10-STATUS-IND[XXX-INX-FLD-NBR] = TP10REC.TP10-STATUS-IND; /**/

        TP0BW02.TP10-FC-QTY[XXX-INX-FLD-NBR] = TP10REC.TP10-FC-QTY; /**/
        TP0BW02.TP10-RP-QTY[XXX-INX-FLD-NBR] = TP10REC.TP10-RP-QTY; /**/

        TP0BW02.TP10-PRODS[XXX-INX-FLD-NBR] = TP10REC.TP10-PRODS; /**/

        TP0BW02.TP10-UOM-FL[XXX-INX-FLD-NBR] = TP10REC.TP10-UOM-FL; /**/

        if (XXX-INX-FLD-NBR == 11) /* if page is full*/
          TP0BW02.TPW-LINES-ON-PAGE = 11;
          TP0BS-TS-ADD(); /* write full page to temp storage*/
          XXX-INX-FLD-NBR = 0; /* point to first item of new page*/
        end
      end
      call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/
    end

    /* ------------------------------------------------------------*/
    /* add any partially formatted page.*/
    /* ------------------------------------------------------------*/
    if (XXX-INX-FLD-NBR > 0) /* if more items*/
      TP0BW02.TPW-LINES-ON-PAGE = XXX-INX-FLD-NBR;
      TP0BS-TS-ADD(); /* write partial page to temp storage*/
    end


    /* ------------------------------------------------------------*/
    /* Indicate that the request for data is complete.*/
    /* ------------------------------------------------------------*/

    XXX-CURR-PAGE-NBR = 1; /* set first page to display*/

    XXX-RQT-DATA-FL = "N"; /* dont rebuild tsq's*/

  end

end // end TP0BS100-GETDATA

// obtain data to display
Function TP0BS110-RESTORE()
   /* ------------------------------------------------------------------*/
   /* if returning from tp0c or tp0d - restore selection criteria*/
   /* ------------------------------------------------------------------*/
  TP0BM001.TPW-MIN-UNITS = TPWREC.TPW-MIN-UNITS; /**/
  TP0BM001.TPW-MAX-PRODS = TPWREC.TPW-MAX-PRODS; /**/
  TP0BW00.TPWFDT = TPWREC.TPW-FROM-DT; /* braek out date*/
  TP0BW00.TPWTDT = TPWREC.TPW-TO-DT; /* break out date*/

   /* ---------------------------------------------------------*/
   /* break out date for screen display*/
   /* ---------------------------------------------------------*/
  TP0BM001.TP0BMFMM = TP0BW00.TPWFMM;
  TP0BM001.TP0BMFDD = TP0BW00.TPWFDD;
  TP0BM001.TP0BMFYY = TP0BW00.TPWFYY;

  TP0BM001.TP0BMTMM = TP0BW00.TPWTMM;
  TP0BM001.TP0BMTDD = TP0BW00.TPWTDD;
  TP0BM001.TP0BMTYY = TP0BW00.TPWTYY;

  TPWREC.TPWFRMAP = "TP0B";
end // end TP0BS110-RESTORE

// initialize io module request d
Function TP0BS120-SETUP()
    /* ------------------------------------------------------------*/
    /* initialize tp10rec to read vpoolh01.*/
    /* ------------------------------------------------------------*/
  set TP10REC empty; /* io module pass area*/
  set TP0BW02 empty; /* tsq page*/

  if (TPWREC.TPW-SEL-RUN-MODE == "PP") /* picking or scheduling ?*/
    TP10REC.TP10-RUN-MODE = "P"; /* picking*/
  else
    TP10REC.TP10-RUN-MODE = "S"; /* scheduling*/
  end

  TP0BM001.XWHCD = TPWREC.XWH-WHSE-CD; /* map whse-cd*/
  TP10REC.XWHCD = TPWREC.XWH-WHSE-CD; /* io data*/
  TP10REC.TP10-CALLING-PGM = "TP0B"; /* io module*/
  TP10REC.TP10-XHDCDFL = "N"; /* request non-special handling*/

  TP10REC.TPW-MIN-UNITS = TP0BM001.TPW-MIN-UNITS; /* io min units*/
  TPWREC.TPW-MIN-UNITS = TP0BM001.TPW-MIN-UNITS; /* commarea min units*/

  TP10REC.TPW-MAX-PRODS = TP0BM001.TPW-MAX-PRODS; /* io max units*/
  TPWREC.TPW-MAX-PRODS = TP0BM001.TPW-MAX-PRODS; /* commarea max units*/

    /* ------------------------------------------------------------*/
    /* if processing enter - use data in working storage*/
    /* ------------------------------------------------------------*/
  if (TPWREC.TPWFRMAP == "TP0B")
    TP10REC.TPW-FROM-DT = TP0BW00.TPWFDT;
    TPWREC.TPW-FROM-DT = TP0BW00.TPWFDT;
    TP0BW01.TPW-SAVE-FROM-DT = TP0BW00.TPWFRD;

    TP10REC.TPW-TO-DT = TP0BW00.TPWTDT;
    TPWREC.TPW-TO-DT = TP0BW00.TPWTDT;
    TP0BW01.TPW-SAVE-TO-DT = TP0BW00.TPWTOD;
  end

    /* ------------------------------------------------------------*/
    /* if coming from the menu - initialze selection criteria in*/
    /* the commarea (tpwrec) and in the io module pass record(tp10rec)*/
    /* ------------------------------------------------------------*/
  if (TPWREC.TPWFRMAP == "TP0A")
    TP10REC.TPW-RQST-TYP = "S1"; /* display all orders already*/
                                  /* in the fastpick plan*/
    TP10REC.TPW-MIN-UNITS = 01;
    TP10REC.TPW-MAX-PRODS = 9999;
    TP10REC.TPW-FROM-DT = 0;
    TP10REC.TPW-TO-DT = 19991231;

    TPWREC.TPW-MIN-UNITS = 0;
    TPWREC.TPW-MAX-PRODS = 0;
    TPWREC.TPW-FROM-DT = 0;
    TPWREC.TPW-TO-DT = 19991231;
    TP0BW01.TPW-SAVE-FROM-DT = 0;
    TP0BW01.TPW-SAVE-TO-DT = 991231;
  else
    if (TPWREC.TPW-MIN-UNITS == 0 &&  /* if selection criteria has not*/
    TPWREC.TPW-MAX-PRODS == 0)        /* been entered*/
      TP10REC.TPW-RQST-TYP = "S1"; /* display all orders already*/
                                  /* in the fastpick plan*/
    else
      TP10REC.TPW-RQST-TYP = "S2"; /* request all orders*/
    end
  end
end // end TP0BS120-SETUP

// move data from temp-storage to
Function TP0BS200-FORMAT()
  if (XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/

    set TP0BM001 initial;
    /* ------------------------------------------------------------*/
    /* Format header info*/
    /* ------------------------------------------------------------*/
    TP0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    TP0BM001.XXXPRCNM = "TP0BM001"; /* map name*/
    TP0BM001.XWHCD = TPWREC.XWH-WHSE-CD; /* warehouse code*/
    TP0BS110-RESTORE(); /* format selection criteria*/


    /* ------------------------------------------------------------*/
    /* perform process to read temp storage and move data to map.*/
    /* ------------------------------------------------------------*/

    TP0BM001.TOTPAGE = XXX-HI-PAGE-NBR; /* last page*/

    TP0BS210-MAPIT(); /* Format the data in the map*/
  end
end // end TP0BS200-FORMAT

// obtain data to display
Function TP0BS210-MAPIT()
  XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (XXX-CURR-PAGE-NBR > TP0BW01.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        TP0BW01.XXX-CURR-PAGE-NBR = XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      TP0BS-TS-READ(); /* Read temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TP0BM001.PAGE = XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    TP0BM001.TOTPAGE = XXX-HI-PAGE-NBR;
                                   /* Highest page*/

  end
   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (XXX-INX-FLD-NBR <= TP0BW02.TPW-LINES-ON-PAGE)
                                  /* Until screen is full*/
    TP0BM001.TP10-ACTION[XXX-INX-FLD-NBR] = TP0BW02.TP10-ACTION[XXX-INX-FLD-NBR];
    set TP0BM001.TP10-ACTION[XXX-INX-FLD-NBR] normal;
    TP0BM001.TP10-EXISTS-IND[XXX-INX-FLD-NBR] = TP0BW02.TP10-EXISTS-IND[XXX-INX-FLD-NBR];

    if (TP0BW02.TP10-EXISTS-IND[XXX-INX-FLD-NBR] == "*")
      if (TP0BW02.TP10-STATUS-IND[XXX-INX-FLD-NBR] == "1" ||  /* if untagged*/
      TP0BW02.TP10-STATUS-IND[XXX-INX-FLD-NBR] == "3")        /* if untagged*/
        set TP0BM001.TP10-EXISTS-IND[XXX-INX-FLD-NBR] red; /* set ind to red*/
      end
    end

    TP0BM001.TP10-DNSB[XXX-INX-FLD-NBR] = TP0BW02.TP10-DNSB[XXX-INX-FLD-NBR];
    TP0BM001.TP10-ORDER-NBR[XXX-INX-FLD-NBR] = TP0BW02.TP10-ORDER-NBR[XXX-INX-FLD-NBR];
    TP0BM001.TF1CARCD[XXX-INX-FLD-NBR] = TP0BW02.TF1CARCD[XXX-INX-FLD-NBR];
    TP0BM001.CU-CO-NM[XXX-INX-FLD-NBR] = TP0BW02.CU-CO-NM[XXX-INX-FLD-NBR];
    TP0BM001.TP10-PRODS[XXX-INX-FLD-NBR] = TP0BW02.TP10-PRODS[XXX-INX-FLD-NBR];
    TP0BM001.TP10-FC-QTY[XXX-INX-FLD-NBR] = TP0BW02.TP10-FC-QTY[XXX-INX-FLD-NBR];
    TP0BM001.TP10-RP-QTY[XXX-INX-FLD-NBR] = TP0BW02.TP10-RP-QTY[XXX-INX-FLD-NBR];
    TP0BM001.TP10-UOM-FL[XXX-INX-FLD-NBR] = TP0BW02.TP10-UOM-FL[XXX-INX-FLD-NBR];

    XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/
  end
end // end TP0BS210-MAPIT

// SET COLOR ATTRIBUTES
Function TP0BS250-RUNMODE()
  /* SET MAP COLOR and title*/
  if (TPWREC.TPW-SEL-RUN-MODE == "PK") /* If picking-selection mode*/
    TP0BM001.TP0BM-RUN-MODE-LIT = "P I C K I N G";
    set TP0BM-LIT01 magenta;
    set TP0BM-LIT02 magenta;
    set TP0BM-LIT03 magenta;
    set TP0BM-LIT04 magenta;
    set TP0BM-LIT05 magenta;
    set TP0BM-LIT13 magenta;
    set TP0BM-LIT14 magenta;
    set TP0BM-LIT15 magenta;
    set TP0BM-LIT06 magenta, underline;
    set TP0BM-LIT07 magenta, underline;
    set TP0BM-LIT08 magenta, underline;
    set TP0BM-LIT09 magenta, underline;
    set TP0BM-LIT10 magenta, underline;
    set TP0BM-LIT11 magenta, underline;
    set TP0BM-LIT12 magenta, underline;
    set TP0BM-LIT16 magenta;
    set TP0BM-LIT17 magenta;
  end


end // end TP0BS250-RUNMODE

// Check attention identifier
Function TP0BS300-PFKEYS()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    XSPF1(); /* Exit to the HELP facility*/

    TP0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    TP0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TP0BS350-DEL-UNTAG(); /* delete untagged orders from fastpick*/

    COMMAREA.CATOAP = "TP0A"; /* Fast Pick menu*/
    TPWREC.TPWFRMAP = "TP0B"; /* Fast Pick menu*/
    COMMAREA.CAUSERA = TPWREC.TPWGRPLV; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    TP0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TP0BM001.XXXPRCNM = "TP0BS300"; /* Error location*/

    exit stack; /* EXIT TO DISPLAY SELECTION MENU*/

  end

  if (converseVar.eventKey is pf10) /* PF10 was pressed*/

    if (XXX-HI-PAGE-NBR > 0)
      TP0BS520-ACTION-CD(); /* PROCESS ACTION CODES ON CURRENT PAG*/
      TP0BS530-UPDATE(); /* spin thru all tsq pages and update*/
                                   /* fastpick table*/
    end
    COMMAREA.CATOAP = "TP0C"; /* Fast Pick menu*/
    COMMAREA.CAFROMAP = "TP0B"; /* Fast Pick menu*/
    TPWREC.TPWFRMAP = "TP0B"; /* Fast Pick menu*/
    COMMAREA.CAUSERA = TPWREC.TPWGRPLV; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    TP0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TP0BM001.XXXPRCNM = "TP0BS300"; /* Error location*/

    exit stack; /* EXIT TO DISPLAY SELECTION MENU*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF22 was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    TP0BM001.XXXPRCNM = "TP0BS300"; /* Process name*/

    exit stack; /* EXIT TO REDISPLAY MAP*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll requested, determine if valid.*/
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && XXX-CURR-PAGE-NBR < 2)      /* and no previous pages*/

    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && XXX-CURR-PAGE-NBR >= XXX-HI-PAGE-NBR)
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If err - display.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end TP0BS300-PFKEYS

// UPDATE FASTPICK
Function TP0BS350-DEL-UNTAG()
     /* -----------------------------------------------------------*/
     /* initialize tp10rec to delete untagged orders on fastpick*/
     /* -----------------------------------------------------------*/
  set TP10REC empty; /* io module pass area*/

  if (TPWREC.TPW-SEL-RUN-MODE == "PP") /* picking or scheduling ?*/
    TP10REC.TP10-RUN-MODE = "P"; /* picking*/
  else
    TP10REC.TP10-RUN-MODE = "S"; /* scheduling*/
  end

  TP10REC.XWHCD = TPWREC.XWH-WHSE-CD; /* io data*/
  TP10REC.TP10-CALLING-PGM = "TP0B"; /* io module*/
  TP10REC.TP10-XHDCDFL = "N"; /* request non-special handling*/
  TP10REC.TPW-RQST-TYP = "DU"; /* delete request*/
  call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/
    /* ------------------------------------------------------------*/
    /* check to see if delete was ok.*/
    /* ------------------------------------------------------------*/
  if (TP10REC.TPW-RTRN-SQLCD != 0)
    return; /* Exit to display map*/
  end
end // end TP0BS350-DEL-UNTAG

// EDIT INPUT DATA
Function TP0BS500-INPUT()
  /* -------------------------------------------------------------------*/
  /* COMARE WHAT'S BEEN SAVED TO WHAT'S COMING IN FROM SCREEN   ------*/
  /* IF IT'S CHANGED - VERIFY THE NEW DATA*/
  /* IF THE NEW DATA IS GOOD, A SWITCH GETS SET IN 410 TO ACCESS THE*/
  /* POOL HEADER AND GET NEW DATA FOR THE NEW CRITERIA.*/
  /* -------------------------------------------------------------------*/
  if (converseVar.eventKey is enter)
    TP0BW00.TPWFRD = TP0BW01.TPW-SAVE-FROM-DT;
    TP0BW00.TPWTOD = TP0BW01.TPW-SAVE-TO-DT;
    if (TP0BW00.TPWFYY != TP0BM001.TP0BMFYY || 
    TP0BW00.TPWFMM != TP0BM001.TP0BMFMM || 
    TP0BW00.TPWFDD != TP0BM001.TP0BMFDD || 
    TP0BW00.TPWTYY != TP0BM001.TP0BMTYY || 
    TP0BW00.TPWTMM != TP0BM001.TP0BMTMM || 
    TP0BW00.TPWTDD != TP0BM001.TP0BMTDD || 
    TPWREC.TPW-MIN-UNITS != TP0BM001.TPW-MIN-UNITS || 
    TPWREC.TPW-MAX-PRODS != TP0BM001.TPW-MAX-PRODS)

      TP0BS510-VERIFY-DT(); /* verify new dates that were entered*/
    else
      if (XXX-HI-PAGE-NBR > 0)
        TP0BS520-ACTION-CD(); /* edit the action code for a's or d's*/
        TP0BS530-UPDATE(); /* process the adds or deletes*/
      end
    end
  end
end // end TP0BS500-INPUT

// EDIT FROM AND TO DATES
Function TP0BS510-VERIFY-DT()
    /* -------------------------------------------*/
    /* Verify the to date.*/
    /* -------------------------------------------*/

  TP0BW00.TPWTMM = TP0BM001.TP0BMTMM;
  TP0BW00.TPWTDD = TP0BM001.TP0BMTDD;
  TP0BW00.TPWTYY = TP0BM001.TP0BMTYY;
  TP0BW00.TPWTCC = 0;

  set TA2REC empty;

  if (TP0BW00.TPWFDT != 0)
    if (TP0BW00.TPWTYY > 50
     && TP0BW00.TPWTYY <= 99)

      TP0BW00.TPWTCC = 19;
    else

      TP0BW00.TPWTCC = 20;
    end
    TA2REC.TA2GRGGN = TP0BW00.TPWTDT;
    TA2REC.TA2DTOPT = "GREGGREG"; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    TP0BS540-EDIT-DATE(); /* VALIDATE THE DATE*/
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "520";
      converseLib.validationFailed(158);
      set TP0BM001.TP0BMTYY bold;
      set TP0BM001.TP0BMTMM bold;
      set TP0BM001.TP0BMTDD cursor, bold;
    end
  end

    /* ---------------------------------------------*/
    /* Verify the from date.*/
    /* ---------------------------------------------*/

  TP0BW00.TPWFMM = TP0BM001.TP0BMFMM;
  TP0BW00.TPWFDD = TP0BM001.TP0BMFDD;
  TP0BW00.TPWFYY = TP0BM001.TP0BMFYY;
  TP0BW00.TPWFCC = 0;

  if (TP0BW00.TPWFDT != 0)
    if (TP0BW00.TPWFYY > 50
     && TP0BW00.TPWFYY <= 99)

      TP0BW00.TPWFCC = 19;
    else

      TP0BW00.TPWFCC = 20;
    end
    TA2REC.TA2GRGGN = TP0BW00.TPWFDT;
    TA2REC.TA2DTOPT = "GREGGREG"; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    TP0BS540-EDIT-DATE(); /* VALIDATE THE DATE*/
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "520";
      converseLib.validationFailed(158);
      set TP0BM001.TP0BMFYY bold;
      set TP0BM001.TP0BMFMM bold;
      set TP0BM001.TP0BMFDD cursor, bold;
    end
  end

    /* -------------------------------------------------*/
    /* Set up date for comparison. FROM date must be*/
    /* less than the TO date.*/
    /* -------------------------------------------------*/

  if (TP0BM001.TP0BMFMM == 0
   && TP0BM001.TP0BMFDD == 0
   && TP0BM001.TP0BMFYY == 0)

    TP0BW00.TPWFCC = 0;
  else

    if (TP0BW00.TPWFYY > 50 /* Set up 'FROM' century*/
     && TP0BW00.TPWFYY <= 99)

      TP0BW00.TPWFCC = 19;
    else

      TP0BW00.TPWFCC = 20;
    end
  end

  if (TP0BM001.TP0BMTMM == 0
   && TP0BM001.TP0BMTDD == 0
   && TP0BM001.TP0BMTYY == 0)

    TP0BW00.TPWTCC = 0;
  else

    if (TP0BW00.TPWTYY > 50 /* Set up 'TO' century*/
     && TP0BW00.TPWTYY <= 99)

      TP0BW00.TPWTCC = 19;
    else

      TP0BW00.TPWTCC = 20;
    end
  end

    /* -------------------------------------------------------*/
    /* Check that the beginning date is less than the to date*/
    /* -------------------------------------------------------*/

  if (TP0BW00.TPWFDT > TP0BW00.TPWTDT) /* FROM date > TO date*/

    TA1REC.TA1LOC = "520"; /* Module identification*/
    converseLib.validationFailed(286); /* From DNSB date must be < TO date*/
    set TP0BM001.TP0BMFMM cursor, bold;
    set TP0BM001.TP0BMFDD bold;
    set TP0BM001.TP0BMFYY bold;
    set TP0BM001.TP0BMTMM bold;
    set TP0BM001.TP0BMTDD bold;
    set TP0BM001.TP0BMTYY bold;

  else
    XXX-RQT-DATA-FL = "Y"; /* rebuild tsq pages*/
  end
end // end TP0BS510-VERIFY-DT

// obtain data to display
Function TP0BS520-ACTION-CD()
  /* -------------------------------------------*/
  /* edit the Action codes on the current page*/
  /* -------------------------------------------*/
  XXX-INX-FLD-NBR = 1;

  while (XXX-INX-FLD-NBR <= TP0BW02.TPW-LINES-ON-PAGE)
    if (TP0BM001.TP10-ACTION[XXX-INX-FLD-NBR] == "A"
     || TP0BM001.TP10-ACTION[XXX-INX-FLD-NBR] == "D"
     || TP0BM001.TP10-ACTION[XXX-INX-FLD-NBR] <= " ")
      TP0BW02.TP10-ACTION[XXX-INX-FLD-NBR] = TP0BM001.TP10-ACTION[XXX-INX-FLD-NBR]; /* next sentence;*/
    else
      set TP0BM001.TP10-ACTION[XXX-INX-FLD-NBR] cursor, bold;
      TA1REC.TA1PGMNO = "514"; /* module identificAtion*/
      converseLib.validationFailed(35); /* invAlid Action*/
      exit stack; /* Exit to redisplAy mAp*/

    end
    XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;

  end
  TP0BS-TS-UPDATE();
end // end TP0BS520-ACTION-CD

// UPDATE FASTPICK
Function TP0BS530-UPDATE()
  /* ------------------------------------------------------------*/
  /* now, read all tsq pages and update the fastpick table*/
  /* per the action codes ( adds and deletes)*/
  /* ------------------------------------------------------------*/
  TP0BW00.TPW-CURR-PAGE-NBR-SV = XXX-CURR-PAGE-NBR;
  XXX-CURR-PAGE-NBR = 1; /* point to first page*/

  while (XXX-CURR-PAGE-NBR <= XXX-HI-PAGE-NBR)
    TP0BS-TS-READ();
    XXX-INX-FLD-NBR = 1; /* point to first line*/
    while (XXX-INX-FLD-NBR <= TP0BW02.TPW-LINES-ON-PAGE)
      if (TP0BW02.TP10-ACTION[XXX-INX-FLD-NBR] == "A") /* if Add to fAst*/
        set TP10REC empty;
  /* -------------------------------------------------*/
  /* set the run mode for the database updates*/
  /* -------------------------------------------------*/
        if (TPWREC.TPW-SEL-RUN-MODE == "PP")
          TP10REC.TP10-RUN-MODE = "P";
        else
          TP10REC.TP10-RUN-MODE = "S";
        end

        TP10REC.TPW-RQST-TYP = "A "; /* request type = A*/
        TP10REC.TP10-XHDCDFL = "N";
        TP10REC.XWHCD = TP0BM001.XWHCD;
        TP10REC.PK1CUOID = TP0BW02.PK1CUOID[XXX-INX-FLD-NBR];
        TP10REC.PK1NORID = TP0BW02.PK1NORID[XXX-INX-FLD-NBR];
        call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* cAll nikeboth io routine*/

        if (TP10REC.TPW-RTRN-CD != 0)
          VAGen_EZEMSG = "TP0010 FAILED               ";
          exit stack; /* EXIT TO DISPLAY MAP*/
        end
        TP0BM001.TP10-ACTION[XXX-INX-FLD-NBR] = " ";
        TP0BW02.TP10-ACTION[XXX-INX-FLD-NBR] = " ";
        TP0BM001.TP10-EXISTS-IND[XXX-INX-FLD-NBR] = "*";
        set TP0BM001.TP10-EXISTS-IND[XXX-INX-FLD-NBR] red;
        TP0BW02.TP10-EXISTS-IND[XXX-INX-FLD-NBR] = "*";
        TP0BW02.TP10-STATUS-IND[XXX-INX-FLD-NBR] = "1";
        VAGen_EZEMSG = "FASTPICK UPDATES PROCESSED  ";

        XXX-RQT-DATA-FL = "N"; /* don't rebuild tsq's*/
      else

        if (TP0BW02.TP10-ACTION[XXX-INX-FLD-NBR] == "D")
                                   /* if delete fastpick*/
          set TP10REC empty;
          if (TPWREC.TPW-SEL-RUN-MODE == "PP")
            TP10REC.TP10-RUN-MODE = "P";
          else
            TP10REC.TP10-RUN-MODE = "S";
          end

          TP10REC.TPW-RQST-TYP = "D "; /* request type = d*/
          TP10REC.TP10-XHDCDFL = "N";
          TP10REC.XWHCD = TP0BM001.XWHCD;
          TP10REC.PK1CUOID = TP0BW02.PK1CUOID[XXX-INX-FLD-NBR];
          TP10REC.PK1NORID = TP0BW02.PK1NORID[XXX-INX-FLD-NBR];
          call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* cAll nikeboth io routine*/
          TP0BM001.TP10-ACTION[XXX-INX-FLD-NBR] = " ";
          TP0BW02.TP10-ACTION[XXX-INX-FLD-NBR] = " ";
          TP0BM001.TP10-EXISTS-IND[XXX-INX-FLD-NBR] = " ";
          TP0BW02.TP10-EXISTS-IND[XXX-INX-FLD-NBR] = " ";
          VAGen_EZEMSG = "FASTPICK UPDATES PROCESSED  ";

          XXX-RQT-DATA-FL = "N"; /* don't rebuild tsq's*/

        end
      end
      XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;
    end
    TP0BS-TS-UPDATE(); /* update the tsq page*/
    XXX-CURR-PAGE-NBR = XXX-CURR-PAGE-NBR + 1; /* point to the next*/
  end /* when done processing all pages*/
  XXX-CURR-PAGE-NBR = TP0BW00.TPW-CURR-PAGE-NBR-SV;
                                   /* reread curr page*/
  TP0BS-TS-READ();
end // end TP0BS530-UPDATE

// Read temporary storage page
Function TP0BS540-EDIT-DATE()
   /* ------------------------------------------------------------*/
   /* validate don't ship before date 'to'*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

    return; /* Normal return code*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "DNSB TO DATE";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "S540"; /* MODULE IDENTIFICATION*/
    converseLib.validationFailed(29); /* System error occurred*/

    return; /* exit to display map*/

  end


end // end TP0BS540-EDIT-DATE

// PROCESS PAGING REQUEST
Function TP0BS600-SCROLL()
   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    TP0BS520-ACTION-CD();
                  /* update current tsq page with any action codes entered*/
    XXX-CURR-PAGE-NBR = XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/

    XXX-RQT-DATA-FL = "N"; /* DONT READ DATABASE*/
    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    TP0BS520-ACTION-CD();
              /* UPDATE CURRENT TSQ PAGE WITH ANY ACTION CODES ENTERED*/
    XXX-CURR-PAGE-NBR = XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/

    XXX-RQT-DATA-FL = "N"; /* DONT READ DATABASEP FLAG*/
    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If first page was requested, move 1 to the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* first page requested*/

    XXX-CURR-PAGE-NBR = 1;
                                   /* point to 1st page*/

    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If last  page was requested, move hi page to page nbr.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* last  page requested*/

    move XXX-HI-PAGE-NBR to XXX-CURR-PAGE-NBR withV60Compat;
                                   /* point to last page*/

    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

end // end TP0BS600-SCROLL

//*** RECORD=TP0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TP0BW00 type basicRecord
  3 * char(19) ; // Map from date-ccyymmdd
    10 TPWFDT TPWFDT ; 
      15 TPWFCC TPWFCC ; 
      15 TPWFRD TPWFRD ; 
        20 TPWFYY TPWFYY ; 
        20 TPWFMM TPWFMM ; 
        20 TPWFDD TPWFDD ; 
    10 TPWTDT TPWTDT ; 
      15 TPWTCC TPWTCC ; 
      15 TPWTOD TPWTOD ; 
        20 TPWTYY TPWTYY ; 
        20 TPWTMM TPWTMM ; 
        20 TPWTDD TPWTDD ; 
    10 TPW-CURR-PAGE-NBR-SV TPW-CURR-PAGE-NBR-SV ; 
    10 TPW-UPDT-TSQ-IND TPW-UPDT-TSQ-IND ; 
end // end TP0BW00

//*** RECORD=TP0BW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TP0BW01 type basicRecord
  3 TP0BW-WORK-STORAGE TP0BW-WORK-STORAGE ; 
    10 TPW-SAVE-FROM-DT TPW-SAVE-FROM-DT ; 
    10 TPW-SAVE-TO-DT TPW-SAVE-TO-DT ; 
    10 TPW-SAVE-UNITS TPW-SAVE-UNITS ; 
    10 TPW-SAVE-PRODS TPW-SAVE-PRODS ; 
    10 TPW-CNT TPW-CNT ; 
    10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
    10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
    10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
    10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
    10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
    10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
    10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
end // end TP0BW01

//*** RECORD=TP0BW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TP0BW02 type basicRecord
  3 TP0BW-TSQ-PAGE TP0BW-TSQ-PAGE ; 
    10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
    10 TPW-LINES-ON-PAGE TPW-LINES-ON-PAGE ; 
    10 TP0BW-TSQ-LINE TP0BW-TSQ-LINE [11] ; 
      15 TP10-ACTION TP10-ACTION ; 
      15 TP10-EXISTS-IND TP10-EXISTS-IND ; 
      15 TP10-STATUS-IND TP10-STATUS-IND ; 
      15 TP10-DNSB TP10-DNSB ; 
      15 TP10-ORDER-NBR TP10-ORDER-NBR ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 TF1CARCD TF1CARCD ; 
      15 CU-CO-NM CU-CO-NM ; 
      15 TP10-PRODS TP10-PRODS ; 
      15 TP10-TOT-QTY TP10-TOT-QTY ; 
      15 TP10-FC-QTY TP10-FC-QTY ; 
      15 TP10-RP-QTY TP10-RP-QTY ; 
      15 TP10-UOM-FL TP10-UOM-FL ; 
end // end TP0BW02

DataItem TP0BW-TSQ-LINE char(94)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem TP0BW-TSQ-PAGE char(1040)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TP0BW-WORK-STORAGE char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

