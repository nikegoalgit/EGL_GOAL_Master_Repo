package tp0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import tp.common.*;
import ts.common.*;
//*** PROGRAM=TP0G ****
// This application display all fastpick orders associated
// with a particular style, color and size.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/30/93  xxxxxx  New application.
// *********************
Program TP0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TP0GW00 TP0GW00; // record
  TP0GW01 TP0GW01; // record
  TP0GW02 TP0GW02; // record
  TP10REC TP10REC; // record
  TPWREC TPWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use TP0GM.TP0GM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TP0G0001: TP0G0001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set TP0GM001 initial; /* M001 input/output*/
    set SQLCA empty; /* SQL communication area*/
    set TP0GW00 empty; /* application working storage*/
    set TP0GW01 empty; /* application working storage*/
    set TP0GW02 empty; /* nikeboth io pass data*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/


    TP0GW02.XXX-TEMP-STG-LNTH = 2000; /* Temporary storage length*/
    TP0GW01.XXX-INX-LMT-NBR = 13; /* Number of lines on a page*/
    TP0GW01.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    TP0GW01.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    TP0GW00.TPW-DSPLY-MSG-FL = "N"; /* no message to display*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TP0G0002; /* Converse the main process*/


    TP0G0002: TP0G0002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TP0G0002; /* Converse the main process*/


  end // end main
end // end TP0G

// Determine which map to display
Function TP0G0001()
  XPTP001(); /* application init*/
end // end TP0G0001

// Main process to display a map
Function TP0G0002()
  TP0GS100-GETDATA(); /* call nikeboth to get Data*/

  TP0GS200-FORMAT(); /* write Data to ts and format page 1*/

  TP0GS250-RUNMODE();
  converse TP0GM001 ;

  TP0GS300-PFKEYS(); /* check pfkeys*/

  TP0GS400-INPUT(); /* process input request*/

  TP0GS500-SCROLL(); /* process pf7 and pf8*/


end // end TP0G0002

// Add page to temporary storage
Function TP0GS-TS-ADD()
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/
  XXX-TEMP-STG-LNTH = 2000; /* set tsq length*/

   /* ------------------------------------------------------------*/
   /* call subroutine to write page to temp-storage.*/
   /* ------------------------------------------------------------*/

  try
    call "TA0050" (TP0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TP0GW02 empty; /* M001 display storage*/

    XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX;
    TA5REC.TA5TSQIX = 0; /* init tsq page index*/

    XXX-TEMP-STG-LNTH = 2000; /* set tsq length*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0GS-TS-ADD

// Purge any temporary storage
Function TP0GS-TS-PURG()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TP0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/


  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0GS-TS-PURG

// Read temporary storage page
Function TP0GS-TS-READ()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/


  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5TSQIX = XXX-CURR-PAGE-NBR; /* Page number*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/

  XXX-TEMP-STG-LNTH = 2000; /* tsq length*/

  try
    call "TA0050" (TP0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/


  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TP0GS-TS-READ

// obtain data to display
Function TP0GS100-GETDATA()
  if (converseVar.eventKey is enter)
    /* ------------------------------------------------------------*/
    /* If data was not requested or an error was found, return to*/
    /* the previous process.*/
    /* ------------------------------------------------------------*/

    if (XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
     || converseVar.validationMsgNum != 0) /* or an error was found*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* reset the page number to display.*/
    /* ------------------------------------------------------------*/
    XXX-CURR-PAGE-NBR = 1; /* Page number to display*/

    /* ------------------------------------------------------------*/
    /* Purge any pages from temporary storage and save key fields.*/
    /* ------------------------------------------------------------*/

    TP0GS-TS-PURG(); /* Purge any temporary storage*/

    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    TA5REC.TA5TSQIX = 0; /* init tsq page index*/
    XXX-HI-PAGE-NBR = 0; /* init page counter*/
    /* ------------------------------------------------------------*/
    /* set-up parameters for call to nikeboth io subroutine.*/
    /* ------------------------------------------------------------*/
    set TP10REC empty; /* init display storage*/
    set TP0GW02 empty; /* init display storage*/

    TP0GM001.XWHCD = TPWREC.XWH-WHSE-CD; /* warehouse code*/
    TP10REC.XWHCD = TPWREC.XWH-WHSE-CD; /* warehouse code*/
    TP10REC.TP10-XHDCDFL = "Y";
    TP10REC.SY1STNBR = TPWREC.SY1STNBR;
    TP10REC.SY2CLRID = TPWREC.SY2CLRID;
    TP10REC.TP10-CALLING-PGM = "TP0G"; /**/

    if (TPWREC.TPW-SEL-RUN-MODE == "PP")
      TP10REC.TP10-RUN-MODE = "P";
    else
      TP10REC.TP10-RUN-MODE = "S";
    end
    /* ------------------------------------------------------------*/
    /* FIRST CALL TO GET TOTAL orders for the style, color*/
    /* ------------------------------------------------------------*/
    TP10REC.TPW-RQST-TYP = "TO"; /* request all product data*/
    call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/
    TP0GW00.TP10-TOT-ORDERS = TP10REC.TP10-TOT-ORDERS;

    /* ------------------------------------------------------------*/
    /* first call to open cursor.*/
    /* ------------------------------------------------------------*/
    TP10REC.TPW-RQST-TYP = "S4"; /* request all product data*/

    call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/

    /* ------------------------------------------------------------*/
    /* check to see if there is any data to display.*/
    /* ------------------------------------------------------------*/
    if (TP10REC.TPW-RTRN-SQLCD != 0)
      return; /* Exit to display map*/
    end

    /* ------------------------------------------------------------*/
    /* if there is data to display -*/
    /* write data to temp-storage pages.*/
    /* ------------------------------------------------------------*/

    XXX-INX-FLD-NBR = 0; /* initialize line indexte*/

    TP10REC.TPW-RQST-TYP = "N4"; /* fetch first record*/
    call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* call nikeboth*/

    TP0GW00.TPW-PREV-STKTF = 0;
    TP0GW00.TPW-PREV-ORD = 0;

    while (TP10REC.TPW-RTRN-SQLCD == 0) /* do until no more records*/
      XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;
      if (TP10REC.PK1CUOID == TP0GW00.TPW-PREV-STKTF &&  /* if same order*/
      TP10REC.PK1NORID == TP0GW00.TPW-PREV-ORD &&        
      XXX-INX-FLD-NBR > 1)                               /* not first line*/
        TP0GW02.TF1CARCD[XXX-INX-FLD-NBR] = " "; /* blank when same*/
        TP0GW02.CU-CO-NM[XXX-INX-FLD-NBR] = " ";
        TP0GW02.TP10-ORDER-NBR[XXX-INX-FLD-NBR] = " ";
      else
        TP0GW02.TF1CARCD[XXX-INX-FLD-NBR] = TP10REC.TF1CARCD; /**/
        TP0GW02.CU-CO-NM[XXX-INX-FLD-NBR] = TP10REC.CU-CO-NM; /**/
        TP0GW02.TP10-ORDER-NBR[XXX-INX-FLD-NBR] = TP10REC.TP10-ORDER-NBR; /**/
        TP0GW00.TPW-PREV-STKTF = TP10REC.PK1CUOID;
        TP0GW00.TPW-PREV-ORD = TP10REC.PK1NORID;
      end
      TP0GW02.PK1CUOID[XXX-INX-FLD-NBR] = TP10REC.PK1CUOID; /**/
      TP0GW02.PK1NORID[XXX-INX-FLD-NBR] = TP10REC.PK1NORID; /**/

      TP0GW02.SY1STNBR[XXX-INX-FLD-NBR] = TP10REC.SY1STNBR; /**/
      TP0GW02.SY2CLRID[XXX-INX-FLD-NBR] = TP10REC.SY2CLRID; /**/
      TP0GW02.TP10-SIZE[XXX-INX-FLD-NBR] = TP10REC.TP10-SIZE; /**/
      TP0GW02.TPW-XHDCD1[XXX-INX-FLD-NBR] = TP10REC.TPW-XHDCD1; /**/
      TP0GW02.TP10-TOT-QTY[XXX-INX-FLD-NBR] = TP10REC.TP10-TOT-QTY; /**/


      if (XXX-INX-FLD-NBR == 13) /* if page is full*/
        TP0GW02.TPW-LINES-ON-PAGE = 13;
        TP0GS-TS-ADD(); /* write full page to temp storage*/
        XXX-INX-FLD-NBR = 0; /* point to first item of new page*/
      end
      call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/
    end

    /* ------------------------------------------------------------*/
    /* add any partially formatted page.*/
    /* ------------------------------------------------------------*/
    if (XXX-INX-FLD-NBR > 0) /* if more items*/
      TP0GW02.TPW-LINES-ON-PAGE = XXX-INX-FLD-NBR;
      TP0GS-TS-ADD(); /* write partial page to temp storage*/
    end


    /* ------------------------------------------------------------*/
    /* Indicate that the request for data is complete.*/
    /* ------------------------------------------------------------*/

    XXX-CURR-PAGE-NBR = 1; /* set first page to display*/

    XXX-RQT-DATA-FL = "N"; /* dont rebuild tsq's*/

  end

end // end TP0GS100-GETDATA

// obtain data to display
Function TP0GS200-FORMAT()
  if (XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/

    set TP0GM001 initial;
    /* ------------------------------------------------------------*/
    /* Format header info*/
    /* ------------------------------------------------------------*/
    TP0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    TP0GM001.XXXPRCNM = "TP0GM001"; /* map name*/
    TP0GM001.XWHCD = TPWREC.XWH-WHSE-CD; /* warehouse code*/
    TP0GM001.TP0G-T-STYLE = TPWREC.SY1STNBR;
    TP0GM001.TP0G-T-COLOR = TPWREC.SY2CLRID;
    TP0GM001.TP10-TOT-ORDERS = TP0GW00.TP10-TOT-ORDERS;

    if (TP0GW00.TPW-DSPLY-MSG-FL == "Y")
      VAGen_EZEMSG = TP0GW00.TPW-MESSAGE;
      TP0GW00.TPW-DSPLY-MSG-FL = "N";
    end
  end

   /* ------------------------------------------------------------*/
   /* perform process to read temp storage and move data to map.*/
   /* ------------------------------------------------------------*/

  TP0GM001.TOTPAGE = XXX-HI-PAGE-NBR; /* last page*/

  TP0GS210-MAPIT(); /* Format the data in the map*/
end // end TP0GS200-FORMAT

// obtain data to display
Function TP0GS210-MAPIT()
  XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (XXX-CURR-PAGE-NBR > TP0GW01.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        TP0GW01.XXX-CURR-PAGE-NBR = XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      TP0GS-TS-READ(); /* Read temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TP0GM001.PAGE = XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    TP0GM001.TOTPAGE = XXX-HI-PAGE-NBR;
                                   /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (XXX-INX-FLD-NBR <= TP0GW02.TPW-LINES-ON-PAGE)
                                  /* Until screen is full*/
    TP0GM001.TF1CARCD[XXX-INX-FLD-NBR] = TP0GW02.TF1CARCD[XXX-INX-FLD-NBR];
    TP0GM001.CU-CO-NM[XXX-INX-FLD-NBR] = TP0GW02.CU-CO-NM[XXX-INX-FLD-NBR];
    TP0GM001.TP10-ORDER-NBR[XXX-INX-FLD-NBR] = TP0GW02.TP10-ORDER-NBR[XXX-INX-FLD-NBR];
    TP0GM001.SY1STNBR[XXX-INX-FLD-NBR] = TP0GW02.SY1STNBR[XXX-INX-FLD-NBR];
    TP0GM001.SY2CLRID[XXX-INX-FLD-NBR] = TP0GW02.SY2CLRID[XXX-INX-FLD-NBR];
    TP0GM001.TP10-SIZE[XXX-INX-FLD-NBR] = TP0GW02.TP10-SIZE[XXX-INX-FLD-NBR];
    TP0GM001.TPW-XHDCD1[XXX-INX-FLD-NBR] = TP0GW02.TPW-XHDCD1[XXX-INX-FLD-NBR];
    TP0GM001.TP10-TOT-QTY[XXX-INX-FLD-NBR] = TP0GW02.TP10-TOT-QTY[XXX-INX-FLD-NBR];
    if (TP0GM001.TF1CARCD[XXX-INX-FLD-NBR] > " ")
      set TP0GM001.TP10-ACTION[XXX-INX-FLD-NBR] normal;
    end

    XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;
  end

end // end TP0GS210-MAPIT

// obtain data to display
Function TP0GS250-RUNMODE()
  /* SET MAP COLOR and title*/
  if (TPWREC.TPW-SEL-RUN-MODE == "PK") /* If picking-selection mode*/
    TP0GM001.TP0GM-RUN-MODE-LIT = "P I C K I N G";
    set TP0GM-LIT01 magenta;
    set TP0GM-LIT02 magenta;
    set TP0GM-LIT2 magenta;
    set TP0GM-LIT03 magenta;
    set TP0GM-LIT04 magenta;
    set TP0GM-LIT04A magenta;
    set TP0GM-LIT05 magenta;
    set TP0GM-LIT06 magenta, underline;
    set TP0GM-LIT07 magenta, underline;
    set TP0GM-LIT08 magenta, underline;
    set TP0GM-LIT09 magenta, underline;
    set TP0GM-LIT10 magenta, underline;
    set TP0GM-LIT11 magenta, underline;
    set TP0GM-LIT12 magenta, underline;
    set TP0GM-LIT13 magenta, underline;
    set TP0GM-LIT14 magenta, underline;

  end

end // end TP0GS250-RUNMODE

// Check attention identifier
Function TP0GS300-PFKEYS()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    XSPF1(); /* Exit to the HELP facility*/

    TP0GM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    TP0GM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = "TP0F"; /* Fast Pick menu*/
    TPWREC.TPWFRMAP = "TP0G"; /* Fast Pick menu*/
    COMMAREA.CAUSERA = TPWREC.TPWGRPLV; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    TP0GM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TP0GM001.XXXPRCNM = "TP0GS300"; /* Error location*/

    exit stack; /* EXIT TO DISPLAY SELECTION MENU*/

  end

  if (converseVar.eventKey is pf5) /* PF3 was pressed*/

    COMMAREA.CATOAP = "TP0E"; /* Fast Pick menu*/
    TPWREC.TPWFRMAP = "TP0G"; /* Fast Pick menu*/
    COMMAREA.CAUSERA = TPWREC.TPWGRPLV; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    TP0GM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TP0GM001.XXXPRCNM = "TP0GS300"; /* Error location*/

    exit stack; /* EXIT TO DISPLAY SELECTION MENU*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    TP0GM001.XXXPRCNM = "TP0GS300"; /* Process name*/

    exit stack; /* EXIT TO REDISPLAY MAP*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll requested, determine if valid.*/
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && XXX-CURR-PAGE-NBR < 2)      /* and no previous pages*/

    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && XXX-CURR-PAGE-NBR >= XXX-HI-PAGE-NBR)
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If err - display.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end TP0GS300-PFKEYS

Function TP0GS400-INPUT()
  if (converseVar.eventKey is enter)
  /* -------------------------------------------*/
  /* edit the Action codes on the current page*/
  /* USER CAN ENTER A 'D' TO DELETE AN ORDER*/
  /* FROM THE FASCTPICK PLAN.*/
  /* -------------------------------------------*/
    XXX-INX-FLD-NBR = 1;

    while (XXX-INX-FLD-NBR <= TP0GW02.TPW-LINES-ON-PAGE)
      if (TP0GM001.TP10-ACTION[XXX-INX-FLD-NBR] == "D"
       || TP0GM001.TP10-ACTION[XXX-INX-FLD-NBR] <= " ")
        /* next sentence;*/
      else
        set TP0GM001.TP10-ACTION[XXX-INX-FLD-NBR] cursor, bold;
        TA1REC.TA1PGMNO = "514"; /* module identificAtion*/
        converseLib.validationFailed(35); /* invAlid Action*/
        exit stack; /* Exit to redisplAy mAp*/

      end
      XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;

    end

  /* -------------------------------------------*/
  /* now, act on the first request encountered*/
  /* -------------------------------------------*/
    XXX-INX-FLD-NBR = 1;

    while (XXX-INX-FLD-NBR <= TP0GW02.TPW-LINES-ON-PAGE)
      if (TP0GM001.TP10-ACTION[XXX-INX-FLD-NBR] == "D")
        TP0GS430-DELETE();
        XXX-RQT-DATA-FL = "Y";
        XXX-MAP-FMAT-FL = "Y";
      end
      XXX-INX-FLD-NBR = XXX-INX-FLD-NBR + 1;

    end

  end

end // end TP0GS400-INPUT

// obtain data to display
Function TP0GS430-DELETE()
  /* -------------------------------------------------*/
  /* set the run mode for the database updates*/
  /* -------------------------------------------------*/
  set TP10REC empty;

  if (TPWREC.TPW-SEL-RUN-MODE == "PP") /* PLANNING OR SCHEDULING*/
    TP10REC.TP10-RUN-MODE = "P";
  else
    TP10REC.TP10-RUN-MODE = "S";
  end

  TP10REC.TPW-RQST-TYP = "D "; /* request type delete*/
  TP10REC.XWHCD = TP0GM001.XWHCD; /* WHSE CODE*/
  TP10REC.PK1CUOID = TP0GW02.PK1CUOID[XXX-INX-FLD-NBR];
  TP10REC.PK1NORID = TP0GW02.PK1NORID[XXX-INX-FLD-NBR];
  call "TP0010" (TP10REC) {isNoRefresh = yes, isExternal = yes}; /* cAll nikeboth io routine*/
  if (TP10REC.TPW-RTRN-CD == 0)
    TP0GW00.TPW-MESSAGE = "ORDER HAS BEEN DELETED      ";
    TP0GW00.TPW-DSPLY-MSG-FL = "Y";
  end

end // end TP0GS430-DELETE

// obtain data to display
Function TP0GS500-SCROLL()
   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    XXX-CURR-PAGE-NBR = XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/

    XXX-RQT-DATA-FL = "N"; /* read database*/
    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    XXX-CURR-PAGE-NBR = XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/

    XXX-RQT-DATA-FL = "N"; /* read databasep flag*/
    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If first page was requested, move 1 to the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* first page requested*/

    XXX-CURR-PAGE-NBR = 1;
                                   /* point to 1st page*/

    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If last  page was requested, move hi page to the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* last page requested*/

    move XXX-HI-PAGE-NBR to XXX-CURR-PAGE-NBR withV60Compat;
                                   /* point to last page*/

    XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

end // end TP0GS500-SCROLL

//*** RECORD=TP0GW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TP0GW00 type basicRecord
  3 * char(112) ; // Map from date-ccyymmdd
    10 TPWFDT TPWFDT ; 
      15 TPWFCC TPWFCC ; 
      15 TPWFRD TPWFRD ; 
        20 TPWFYY TPWFYY ; 
        20 TPWFMM TPWFMM ; 
        20 TPWFDD TPWFDD ; 
    10 TPWTDT TPWTDT ; 
      15 TPWTCC TPWTCC ; 
      15 TPWTOD TPWTOD ; 
        20 TPWTYY TPWTYY ; 
        20 TPWTMM TPWTMM ; 
        20 TPWTDD TPWTDD ; 
    10 TPW-CURR-PAGE-NBR-SV TPW-CURR-PAGE-NBR-SV ; 
    10 TPW-UPDT-TSQ-IND TPW-UPDT-TSQ-IND ; 
    10 TP10-TOT-ORDERS TP10-TOT-ORDERS ; 
    10 TPW-PREV-STKTF TPW-PREV-STKTF ; 
    10 TPW-PREV-ORD TPW-PREV-ORD ; 
    10 TPW-DSPLY-MSG-FL TPW-DSPLY-MSG-FL ; 
    10 TPW-MESSAGE TPW-MESSAGE ; 
end // end TP0GW00

//*** RECORD=TP0GW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TP0GW01 type basicRecord
  3 TP0GW-WORK-STORAGE TP0GW-WORK-STORAGE ; 
    10 TPW-SAVE-FROM-DT TPW-SAVE-FROM-DT ; 
    10 TPW-SAVE-TO-DT TPW-SAVE-TO-DT ; 
    10 TPW-SAVE-UNITS TPW-SAVE-UNITS ; 
    10 TPW-SAVE-PRODS TPW-SAVE-PRODS ; 
    10 TPW-CNT TPW-CNT ; 
    10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
    10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
    10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
    10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
    10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
    10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
    10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
end // end TP0GW01

//*** RECORD=TP0GW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TP0GW02 type basicRecord
  3 TP0GW-TSQ-PAGE TP0GW-TSQ-PAGE ; 
    7 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
    7 TPW-LINES-ON-PAGE TPW-LINES-ON-PAGE ; 
    7 TP0GW-TSQ-LINE TP0GW-TSQ-LINE [13] ; 
      10 PK1CUOID PK1CUOID ; 
      10 PK1NORID PK1NORID ; 
      10 TP10-ACTION TP10-ACTION ; 
      10 TF1CARCD TF1CARCD ; 
      10 CU-CO-NM CU-CO-NM ; 
      10 TP10-ORDER-NBR TP10-ORDER-NBR ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 TP10-SIZE TP10-SIZE ; 
      10 TPW-XHDCD1 TPW-XHDCD1 ; 
      10 TP10-TOT-QTY TP10-TOT-QTY ; 
    7 * char(3076) ; 
end // end TP0GW02

DataItem TP0GW-TSQ-LINE char(78)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TP0GW-TSQ-PAGE char(4096)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TP0GW-WORK-STORAGE char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

