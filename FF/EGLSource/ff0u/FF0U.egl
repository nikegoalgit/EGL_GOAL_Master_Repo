package ff0u;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0U ****
// This application displays a list of product lines and their
// production targets. The user can select a line, push "enter"
// and the program will transfer control to "FF04", SET LINE
// PRDCTN TRGT.  "R" will be displayed beside all lines which
// have been 'reviewed' since the last submit of the production
// forecast.
// 
// The user must specify the 'DATE RANGE', 'TYPE', and 'DIVI-
// SION GROUP'.  He can either look at both 'TYPES' of lines
// as one target, or look at either 'inline' lines or 'makeup'
// lines separately.  The program will bring back a list of all
// lines, meeting the specifications.  Also, the program will
// search each line per month in date range, and retrieve the
// line targets for display.  (zeroes will show if no targets
// are found.)  The total of all line targets per month will
// be accumulated.  The total production domestic target per
// month will be retrieved and a variance between 'TOTAL' and
// 'TARGET' will be calculated.  The 'TOTAL', 'TARGET', and
// 'VARIANCE' amounts on every page will be the same.  These
// amounts refer to the entire set of lines.
// 
// If the user doesn't know the code for the 'TYPE' he wishes
// to use, he can enter a '?' to ask for help.  The program
// will bring up a pop-up window to show all the 'TYPES', then
// the user can select the correct code from there.
// 
// The user may scroll forward and backward to view all lines
// by pressing PF7 and PF8.  He may exit to any allowed appli-
// cation, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/01/89  RHETRI  New application.
// FF2030   09/04/90  RHETRI  Chg date edit to allow any date.
// FF2036   10/04/90  RHETRI  Remove MLINE calls.
// FF175    12/12/96  DSMITH  Changed date range fill character
//                            to '0'.
// *********************
Program FF0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0UW00 FF0UW00; // record
  FF0UW01 FF0UW01; // record
  FF0UW02 FF0UW02; // record
  FF0UW03 FF0UW03; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF4REC FF4REC; // record
  FF5REC FF5REC; // record
  FF6REC FF6REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use YPGTBL; // table
  use FF0UM.FF0UM001,  // forms
      FF0UM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0UM001 initial; /* M001 input/output*/
    set FF0UW00 empty; /* Working storage*/
    set FF0UW01 empty; /* M001 display storage*/
    set FF0UW02 empty; /* Mask for M001 storage*/
    set FF0UW03 empty; /* Totals for display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0UW00.FF0UWSWF = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* If type is missing, default it to '01'.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ") /* If type is missing*/

      FFWREC.YPGCD = "01"; /* default to '01'*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end

    end

     /* ------------------------------------------------------------*/
     /* If complete key is present, request data.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO > 0 /* Beginning month exists*/
     && FFWREC.FFAENDMO > 0 /* and ending month exists*/
     && FFWREC.YPGCD > " "  /* and type exists*/
     && FFWREC.YSMXDV > " ") /* and div grp exists*/

      FF0UW00.FF0UWSWR = "Y"; /* Request for data switch*/

    else

      FF0UW00.FF0UWSWR = "N"; /* No data requested*/

    end

     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPCCD = " "; /* Clear cat code*/
    FFWREC.XPCABRV = " "; /* Clear cat name*/
    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FFWREC.SY1STNBR = " "; /* Clear style code*/
    FFWREC.SY1SSTNM = " "; /* Clear style name*/
    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0U001; /* Converse the main process*/


    FF0U001: FF0U001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0U001; /* Converse the main process*/


  end // end main
end // end FF0U

// Main process to display a map
Function FF0U001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0U100(); /* Obtain the data to display*/

  FF0U200(); /* Format and display the map*/

  FF0U300(); /* Check attention identifier*/

  FF0U400(); /* Reset fields to normal intensity*/

  FF0U500(); /* Verify the entered data*/

  FF0U600(); /* Process valid input request*/


end // end FF0U001

// Obtain the data to display
Function FF0U100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0UW00.FF0UWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FF0UW00.XXXTSLEN = 1005; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FF0U110(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Expand date range to set of YYMMs.*/
   /* ------------------------------------------------------------*/

  FF0U120(); /* Expand dates*/

   /* ------------------------------------------------------------*/
   /* Obtain data for lines.*/
   /* ------------------------------------------------------------*/

  FF0U130(); /* Open FFXRF*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FF0UW00.FF0UWSWC == "N") /* Until end of cursor*/

    FF0U140(); /* Fetch FFXRF*/

    if (FF0UW00.FF0UWSWC == "N") /* If line was found*/

      FF0U150(); /* Obtain and process target amts*/

      /* ------------------------------------------------------------*/
       /* Save data in display storage.*/
      /* ------------------------------------------------------------*/

      FF0U160(); /* Save data*/

      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/

      if (FF0UW00.FF0UWIXM > 13) /* Page is full*/
        FF0U170(); /* Add page to temporary storage*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for DFCAST.VFFXRF01.*/
   /* ------------------------------------------------------------*/

  FF0U180(); /* Close FFXRF*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FF0UW00.FF0UWIXM > 1) /* Page was formatted*/
    FF0U170(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0UW00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  else

    FF0UW00.XXXTSPAG = 1; /* Desired page number*/

    /* ------------------------------------------------------------*/
     /* Format totals, Obtain MONTH targets, & calculate variance.*/
    /* ------------------------------------------------------------*/

    FF0U190(); /* Obtain totals*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0UW00.FF0UWSWR = "N"; /* Request for data switch*/


end // end FF0U100

// Purge any temporary storage
Function FF0U110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF0UW01 empty; /* M001 display storage*/
  set FF0UW03 empty; /* Totals for map display fields*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FF0UW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FF0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U110

// Expand date range to YYMMs
Function FF0U120()
   /* ------------------------------------------------------------*/
   /* Call XSFFS30 to expand date range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FFWREC.FFAENDMO; /* Ending date*/

  XSFFS30(); /* Expand the range*/

  FF0UW03.FF0UWNBM = FFZREC.FFZNUMMO; /* Hold number of months*/


end // end FF0U120

// Open FFXRF
Function FF0U130()
   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type*/

  try
    call "IO4000" ("S3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FF0UW00.FF0UWIXM = 1; /* Display line index*/
    FF0UW00.FF0UWSWC = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U130

// Fetch FFXRF
Function FF0U140()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF0U141(); /* Obtain reviewed flag*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FF0UW00.FF0UWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U140

// Obtain reviewed flag info
Function FF0U141()
   /* ------------------------------------------------------------*/
   /* Obtain the reviewed flag information.  We must Select*/
   /* unique to find out what the reviewed flag should be.*/
   /* ------------------------------------------------------------*/

  FF0UW00.FF0UWHFL = " "; /* default to space*/

  FF0US01(); /* Select FFXRF*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    /* ------------------------------------------------------------*/
     /* The flag can only be a 'y' or a 'n'. If you did not get a*/
     /* zero return code, it is because there were two rows out*/
     /* there - one with a 'y' and one with a 'n'.  If this occurs,*/
     /* the line will be considered NOT reviewed, so nothing is*/
     /* moved to the hold field and it defaults to space.  If you*/
     /* did get a zero return code, check for a 'y'.*/
    /* ------------------------------------------------------------*/

    if (FF2REC.FF2LRVFL == "Y") /* if reviewed flag equal 'yes'*/

      FF0UW00.FF0UWHFL = "R"; /* move 'r' to hold*/

    end
  end


end // end FF0U141

// Obtain targets for display
Function FF0U150()
   /* ------------------------------------------------------------*/
   /* Clear work fields.*/
   /* ------------------------------------------------------------*/

  set FF0UW02 empty; /* clear line work fields*/

   /* ------------------------------------------------------------*/
   /* Obtain targets for each month in range.*/
   /* ------------------------------------------------------------*/

  FF0UW00.FF0UWCNT = 1; /* set counter*/

  while (FF0UW00.FF0UWCNT <= FFZREC.FFZNUMMO) /* count LE nbr mos*/

    /* ------------------------------------------------------------*/
     /* Select MLTYP.*/
    /* ------------------------------------------------------------*/
    FF0U151(); /* Select MLTYP*/

    FFXREC.FFXNUMB = FF6REC.FF4RTRGT; /* Load wk fld*/

    FF0U152(); /* Translate target and add to tots*/

    FF0UW00.FF0UWCNT = FF0UW00.FF0UWCNT + 1; /* add 1 to counter*/

  end

   /* ------------------------------------------------------------*/
   /* Translate the total for this line.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0UW02.FF0UWLNT; /* Load work field*/

  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF0UW02.FF0UWAMT[FF0UWCNT] = FFXREC.FFXCHAR; /* Line total*/


end // end FF0U150

// Select summed MLTYP
Function FF0U151()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format FFFREC. (Only one month is retrieved at a time.)*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FF0UWCNT]; /* month*/
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FF0UWCNT]; /* month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF6REC.XPLCD = FF2REC.XPLCD; /* line*/
  FF6REC.YPGCD = FFWREC.YPGCD; /* type*/

   /* ------------------------------------------------------------*/
   /* Select MLTYP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUMMED ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U151

// Translate trgts & add to tots
Function FF0U152()
   /* ------------------------------------------------------------*/
   /* If there is a target, translate it, and add it to totals.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If there is a target to translate*/

    if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
     || FFXREC.FFXNUMB <= -1000000) /* Use millions*/

      XSFFS12(); /* Translation number*/

    else /* Use thousands*/

      XSFFS14(); /* Translation number*/

    end

    FF0UW02.FF0UWAMT[FF0UWCNT] = FFXREC.FFXCHAR; /* Load mask*/

    /* ------------------------------------------------------------*/
     /* Add to total for this line.*/
    /* ------------------------------------------------------------*/

    FF0UW02.FF0UWLNT = FF0UW02.FF0UWLNT + FFXREC.FFXNUMB; /* Add to tot*/

    /* ------------------------------------------------------------*/
     /* Add to total for this month (column).*/
    /* ------------------------------------------------------------*/

    FF0UW00.FF0UWFDA = FF0UW03.FF0UWCLT[FF0UWCNT]; /* Load cl tot*/
    FF0UW00.FF0UWFDA = FF0UW00.FF0UWFDA + FFXREC.FFXNUMB; /* Add to tot*/
    FF0UW03.FF0UWCLT[FF0UWCNT] = FF0UW00.FF0UWFDA; /* Restore tot*/

  end
end // end FF0U152

// Save data in display storage
Function FF0U160()
   /* ------------------------------------------------------------*/
   /* If first line on page, save beginning and ending months.*/
   /* ------------------------------------------------------------*/

  if (FF0UW00.FF0UWIXM == 1) /* First line on page*/

    FF0UW01.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning month*/
    FF0UW01.FFZEYYMM = FFWREC.FFAENDMO; /* Ending month*/

    FF0UW00.FF0UWCNT = 1; /* Set counter to 1*/
    while (FF0UW00.FF0UWCNT <= FFZREC.FFZNUMMO) /* While counter LE nbr mos*/

      FF0UW01.FFZIYYMM[FF0UWCNT] = FFZREC.FFZIYYMM[FF0UWCNT];
      FF0UW00.FF0UWCNT = FF0UW00.FF0UWCNT + 1; /* Add 1 to counter*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0UW00.FF0UWSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  FF0UW01.XPLCD[FF0UWIXM] = FF2REC.XPLCD; /* Save line cd for xfer*/

  XPLREC.XPLCD = FF2REC.XPLCD; /* Format xpl key*/
  XPLREC.XGPCD = COMMAREA.XGPCD; /* Format xpl key*/
  if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
    FF0UW01.XPLABRV[FF0UWIXM] = XPLTBL.XPLABRV[sysVar.arrayIndex];
  end

  FF0UW01.FF2LRVFL[FF0UWIXM] = FF0UW00.FF0UWHFL; /* Reviewed flag*/

  FF0UW01.FF0UWLIN[FF0UWIXM] = FF0UW02.FF0UWMSK; /* Line mask to map*/

  FF0UW00.FF0UWIXM = FF0UW00.FF0UWIXM + 1; /* Increment line index*/


end // end FF0U160

// Add page to temporary storage
Function FF0U170()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FF0UW01.XXXTSLEN = FF0UW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FF0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FF0UW01 empty; /* M001 display storage*/

    FF0UW00.FF0UWIXM = 1; /* Display line index*/

    FF0UW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "170"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U170

// Close FFXRF
Function FF0U180()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "180"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U180

// Obtain & process MONTH data
Function FF0U190()
   /* ------------------------------------------------------------*/
   /* Use MONTH for trgt fields, move totals, & calc variance.*/
   /* ------------------------------------------------------------*/

  FF0UW00.FF0UWCNT = 1; /* set counter*/

  while (FF0UW00.FF0UWCNT <= FFZREC.FFZNUMMO) /* count LE nbr mos*/

    /* ------------------------------------------------------------*/
     /* Clear fields.*/
    /* ------------------------------------------------------------*/

    set FF4REC empty;

    FF0UW00.FF0UWFDA = 0; /* Clear work field*/

    /* ------------------------------------------------------------*/
     /* Format keys.*/
    /* ------------------------------------------------------------*/

    FF4REC.FF4FCTMO = FFZREC.FFZINDMO[FF0UWCNT]; /* month*/

    /* ------------------------------------------------------------*/
     /* Select MONTH.*/
    /* ------------------------------------------------------------*/

    FF0U191(); /* Select MONTH*/

    /* ------------------------------------------------------------*/
     /* Save targets.  (If not found, you are moving zeroes.)*/
    /* ------------------------------------------------------------*/

    FF0U192(); /* Save Target fields*/

    /* ------------------------------------------------------------*/
     /* Translate TOTALS.*/
    /* ------------------------------------------------------------*/

    FF0U193(); /* Translate totals*/

    /* ------------------------------------------------------------*/
     /* Calculate VARIANCE.*/
    /* ------------------------------------------------------------*/

    FF0U194(); /* calculate variance*/

    /* ------------------------------------------------------------*/
     /* Add one to counter.*/
    /* ------------------------------------------------------------*/

    FF0UW00.FF0UWCNT = FF0UW00.FF0UWCNT + 1; /* add 1 to counter*/

  end

  FF0U195(); /* Translate and load totals*/


end // end FF0U190

// Select MONTH
Function FF0U191()
   /* ------------------------------------------------------------*/
   /* Select MONTH.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3720" ("S ", SQLCA, FF4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "191"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMONTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF4REC.FF4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U191

// Save & accm TARGETS
Function FF0U192()
   /* ------------------------------------------------------------*/
   /* Store and accumulate targets.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.YPGCD == "* ") /* if type equals all*/
    FFXREC.FFXNUMB = FF4REC.FF4RTRGT - FF4REC.FF4NLTGT;
  end

  if (FFWREC.YPGCD == "01") /* if type equals 'inline'*/
    /* ------------------------------------------------------------*/
     /* Calculate inline target: prdcnt trgt - nil trgt - mkup trgt*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF4REC.FF4RTRGT; /* load work field*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF4REC.FF4NLTGT;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF4REC.FF4MKTGT;
  end

  if (FFWREC.YPGCD == "02") /* if type equals 'makeup'*/
    FFXREC.FFXNUMB = FF4REC.FF4MKTGT; /* Load translation fld*/
  end

  FF0UW03.FF0UWHTG = FFXREC.FFXNUMB; /* Hold trgt for var calc*/

  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF0UW03.FF0UWTGT[FF0UWCNT] = FFXREC.FFXCHAR; /* Load trgt amt*/

  FF0UW03.FF0UWTTB = FF0UW03.FF0UWTTB + FFXREC.FFXNUMB;
                                   /* accm trgt grd tot*/


end // end FF0U192

// Translate TOTALS
Function FF0U193()
   /* ------------------------------------------------------------*/
   /* Translate TOTALS.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0UW03.FF0UWCLT[FF0UWCNT];
                                   /* Load translation fld*/

  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end


  FF0UW03.FF0UWTOT[FF0UWCNT] = FFXREC.FFXCHAR; /* Load tot amt*/

  FF0UW03.FF0UWTTA = FF0UW03.FF0UWTTA + FFXREC.FFXNUMB; /* accm TOT grd tot*/

end // end FF0U193

// Calculate VARIANCE
Function FF0U194()
   /* ------------------------------------------------------------*/
   /* Calculate VARIANCE.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0UW03.FF0UWCLT[FF0UWCNT]; /* load total fld*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0UW03.FF0UWHTG; /* subtract hold trgt*/

  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF0UW03.FF0UWVAR[FF0UWCNT] = FFXREC.FFXCHAR; /* Load variance*/

  FF0UW03.FF0UWTTC = FF0UW03.FF0UWTTC + FFXREC.FFXNUMB; /* accm grand var*/


end // end FF0U194

// Translate and load grand tots
Function FF0U195()
   /* ------------------------------------------------------------*/
   /* Translate and load Grand TOTAL.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0UW03.FF0UWTTA; /* Load translation fld*/

  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF0UW03.FF0UWTOT[FF0UWCNT] = FFXREC.FFXCHAR; /* Load amt*/

   /* ------------------------------------------------------------*/
   /* Translate and load Grand Total for TARGET.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0UW03.FF0UWTTB; /* Load translation fld*/

  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF0UW03.FF0UWTGT[FF0UWCNT] = FFXREC.FFXCHAR; /* Load amt*/

   /* ------------------------------------------------------------*/
   /* Translate and load Grand Total for Variance.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0UW03.FF0UWTTC; /* Load translation fld*/

  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF0UW03.FF0UWVAR[FF0UWCNT] = FFXREC.FFXCHAR; /* Load amt*/


end // end FF0U195

// Format and converse the map
Function FF0U200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0UW00.FF0UWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0UW00.FF0UWSWF == "Y") /* Map must be formatted*/
      FF0U210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0UM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0UM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0UM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0UM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0UM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0UM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0UM001.CAITEM; /* Application data*/


end // end FF0U200

// Format the display data
Function FF0U210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0UM001 initial; /* M001 input/output area*/

  FF0UW00.FF0UWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FF0UW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FF0UW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FF0UW00.XXXTSPAG > FF0UW00.TA5TSQIX) /* Desired greater highest*/
        FF0UW00.XXXTSPAG = FF0UW00.TA5TSQIX; /* Default to highest*/
      end

      FF0U211(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FF0UM001.XXXLITPG skip; /* "PAGE" literal*/
    FF0UM001.XXXTSPAG = FF0UW00.XXXTSPAG; /* Current page*/
    set FF0UM001.XXXLITOF skip; /* "OF" literal*/
    FF0UM001.TA5TSQIX = FF0UW00.TA5TSQIX; /* Highest page*/

    set FF0UM001.FF0UMNMA skip; /* Make "TOTAL" visable*/
    set FF0UM001.FF0UMNMB skip; /* Make "TARGET" visable*/
    set FF0UM001.FF0UMNMC skip; /* Make "VARIANCE" visable*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0UM001.FFZBYYMM = FF0UW01.FFZBYYMM; /* Beginning month*/
  FF0UM001.FFZEYYMM = FF0UW01.FFZEYYMM; /* Ending month*/

  FF0UM001.YPGCD = FFWREC.YPGCD; /* Type*/
  FF0UM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0UM001.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FF0UM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Abbreviation*/

  if (FF0UW01.XPLABRV[1] > " ") /* if line exists*/
    set FF0UM001.FF0UMSEL[1] cursor; /* place cursor*/
  end

  FF0UW00.FF0UWIXM = 1; /* Initialize line index*/
  while (FF0UW00.FF0UWIXM <= 13 /* Until screen is full*/
   && FF0UW01.XPLABRV[FF0UWIXM] > " ") /* and line exists*/

    set FF0UM001.FF0UMSEL[FF0UWIXM] normal; /* Make "SEL" visable*/
    FF0UM001.XPLABRV[FF0UWIXM] = FF0UW01.XPLABRV[FF0UWIXM];
    FF0UM001.FF2LRVFL[FF0UWIXM] = FF0UW01.FF2LRVFL[FF0UWIXM];
    FF0UM001.FF0UWLIN[FF0UWIXM] = FF0UW01.FF0UWLIN[FF0UWIXM];

    FF0UW00.FF0UWIXM = FF0UW00.FF0UWIXM + 1; /* Increment line index*/

  end

  FF0UW00.FF0UWCNT = 1; /* Initialize counter*/
  while (FF0UW00.FF0UWCNT <= FF0UW03.FF0UWNBM) /* while cnt LE nbr mo*/

    FF0UM001.FF0UWRMO[FF0UWCNT] = FF0UW01.FFZIYYMM[FF0UWCNT];

    FF0UM001.FF0UWTOT[FF0UWCNT] = FF0UW03.FF0UWTOT[FF0UWCNT];
    FF0UM001.FF0UWTGT[FF0UWCNT] = FF0UW03.FF0UWTGT[FF0UWCNT];
    FF0UM001.FF0UWVAR[FF0UWCNT] = FF0UW03.FF0UWVAR[FF0UWCNT];

    FF0UW00.FF0UWCNT = FF0UW00.FF0UWCNT + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Move one more set, past nbr of months, to pick up totals.*/
   /* ------------------------------------------------------------*/

  if (FF0UW03.FF0UWNBM > 0) /* If any months exist*/

    FF0UM001.FF0UWRMO[FF0UWCNT] = "TOTL"; /* Load "TOTL" to header*/

    FF0UM001.FF0UWTOT[FF0UWCNT] = FF0UW03.FF0UWTOT[FF0UWCNT];
    FF0UM001.FF0UWTGT[FF0UWCNT] = FF0UW03.FF0UWTGT[FF0UWCNT];
    FF0UM001.FF0UWVAR[FF0UWCNT] = FF0UW03.FF0UWVAR[FF0UWCNT];

  end

end // end FF0U210

// Obtain TSQ Record
Function FF0U211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FF0UW01.XXXTSLEN = FF0UW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FF0UW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FF0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U211

// Check attention identifier
Function FF0U300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF0UW00.FF0UWSWR == "Y") /* Request for data*/
      set FF0UW01 empty; /* M001 display storage*/
    end

    FF0UW00.FF0UWSWF = "Y"; /* Format the map switch*/
    FF0UW00.FF0UWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0UM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FF0U110(); /* Purge temporary storage*/

      XSFFS01(); /* Exit to another application*/

      set FF0UM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf18) /* or PF18 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0UM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FF00"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FF0V"; /* TO application*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FF0I"; /* TO application*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FF02"; /* TO application*/
    end

    FF0U110(); /* Purge temporary storage*/

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0U300

// Reset highlighted fields
Function FF0U400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0UM001.FFZBYYMM initialAttributes; /* Beginning month*/
  set FF0UM001.FFZEYYMM initialAttributes; /* Ending month*/
  set FF0UM001.YPGCD initialAttributes; /* Type*/
  set FF0UM001.YSMXDV initialAttributes; /* Division group*/

  FF0UW00.FF0UWIXM = 1; /* Initialize line index*/

  while (FF0UW00.FF0UWIXM <= 13 /* Until end of lines*/
   && FF0UM001.XPLABRV[FF0UWIXM] > " ") /* or end of display*/

    if (FF0UM001.XPLABRV[FF0UWIXM] > " ") /* Line exists*/
      set FF0UM001.FF0UMSEL[FF0UWIXM] normal; /* Reset select flag*/
    end

    FF0UW00.FF0UWIXM = FF0UW00.FF0UWIXM + 1; /* Increment line index*/

  end

  set FF0UM001.CATOAP initialAttributes; /* TO application*/
  set FF0UM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0UM001.YPGCD == "?") /* Type list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/

  if (FF0UM001.YPGCD == "?") /* Type list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* Prdcnt fcst flag*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0UM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0UM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FF0UM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0UM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0UM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF0U400

// Verify the entered data
Function FF0U500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0UM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0UM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FF0U510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/

    if (FF0UM001.FFZBYYMM != FF0UW01.FFZBYYMM /* Beginning date changed*/
     || FF0UM001.FFZEYYMM != FF0UW01.FFZEYYMM /* or ending date changed*/
     || FF0UM001.YPGCD != FFWREC.YPGCD        /* or type changed*/
     || FF0UM001.YSMXDV != FFWREC.YSMXDV      /* or division group changed*/
                                              
     || FF0UM001.FFZBYYMM == 0                /* Beginning date missing*/
     || FF0UM001.FFZEYYMM == 0                /* Ending date missing*/
     || FF0UM001.YPGCD == " "                 /* or type missing*/
     || FF0UM001.YSMXDV == " ")               /* or division group missing*/

      FF0U520(); /* Verify the key fields*/
      FF0U530(); /* Verify relationship*/

    else

      /* ------------------------------------------------------------*/
       /* Otherwise, if page was formatted, verify selections.*/
      /* ------------------------------------------------------------*/

      if (FF0UW00.TA5TSQIX > 0) /* Page was formatted*/

        FF0UW00.FF0UWIXM = 13; /* Initialize line index*/

        while (FF0UW00.FF0UWIXM > 0) /* Until end of lines*/

          FF0U540(); /* Verify selections*/

          FF0UW00.FF0UWIXM = FF0UW00.FF0UWIXM - 1; /* Decrement line number*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0U500

// Verify scroll request
Function FF0U510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FF0UW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FF0UW00.XXXTSPAG >= FF0UW00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0U511(); /* Highlight any selection*/

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0UM001.YSMXDV != FFWREC.YSMXDV) /* Division group changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0UM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FF0UM001.YPGCD != FFWREC.YPGCD) /* Type changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0UM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FF0UM001.FFZEYYMM != FF0UW01.FFZEYYMM) /* Ending date changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0UM001.FFZEYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FF0UM001.FFZBYYMM != FF0UW01.FFZBYYMM) /* Beginning date changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0UM001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end


end // end FF0U510

// Highlight any selection
Function FF0U511()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0UW00.FF0UWIXM = 13; /* Initialize line index*/

  while (FF0UW00.FF0UWIXM > 0) /* Until end of lines*/

    if (FF0UM001.FF0UMSEL[FF0UWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FF0UM001.FF0UMSEL[FF0UWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end


    FF0UW00.FF0UWIXM = FF0UW00.FF0UWIXM - 1; /* Decrement line number*/

  end


end // end FF0U511

// Verify the key fields
Function FF0U520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0U511(); /* Highlight any selection*/

   /* ------------------------------------------------------------*/
   /* Verify division group.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Row storage area*/

  YSMREC.YSMSUMCD = FF0UM001.YSMXDV; /* Division group code*/
  TA1REC.TA1PGMNM = "FF0U520 "; /* Calling program*/

  XSFFS20(); /* Verify division group*/

   /* ------------------------------------------------------------*/
   /* If not found, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/

    FF0UM001.YSMSMDSC = YSMREC.YSMSMDSC; /* Abbreviation*/

  else

    FF0UM001.YSMSMDSC = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0UM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify type.*/
   /* ------------------------------------------------------------*/

  if (FF0UM001.YPGCD == "*") /* type equal 'all'*/

    FF0UM001.YPGABRV = "*ALL*"; /* Abbreviation*/

  else

    if (FF0UM001.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF0UM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      FF0UM001.YPGABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0UM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the beginning and ending dates in the entered range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF0UM001.FFZBYYMM; /* Beginning date*/
  FFZREC.FFZEYYMM = FF0UM001.FFZEYYMM; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0UM001.FFZEYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0UM001.FFZBYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end


end // end FF0U520

// Verify FFXRF
Function FF0U530()
   /* ------------------------------------------------------------*/
   /* Verify that key is in FFXRF.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If there are no errors*/

    /* ------------------------------------------------------------*/
     /* Clear the row storage area.*/
    /* ------------------------------------------------------------*/

    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/

    FF2REC.XPCCD = "*"; /* category*/
    FF2REC.XPLCD = "*"; /* line*/
    FF2REC.YPGCD = FF0UM001.YPGCD; /* type*/
    FF2REC.YSMXDV = FF0UM001.YSMXDV; /* div grp*/

    /* ------------------------------------------------------------*/
     /* Select the row to display from the table.*/
    /* ------------------------------------------------------------*/

    FF0U531(); /* Open cursor for DFCAST.VFFXRF01*/

    FF0U532(); /* fetch FFXRF*/

    /* ------------------------------------------------------------*/
     /* If successful, close FFXRF.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE != 0) /* Row not found code*/

      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0UM001.YSMXDV bold; /* Highlight*/
      set FF0UM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Indicate invalid relationship*/

    end

    FF0U533(); /* close cursor*/

  end


end // end FF0U530

// Open  DFCAST.VFFXRF01
Function FF0U531()
   /* ------------------------------------------------------------*/
   /* Open FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "531"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U531

// Fetch DFCAST.VFFXRF01
Function FF0U532()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "532"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U532

// Close DFCAST.VFFXRF01
Function FF0U533()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "533"; /* Module identification*/

  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0U533

// Verify selection
Function FF0U540()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FF0UM001.FF0UMSEL[FF0UWIXM] > " ") /* Selection was entered*/

    if (FF0UM001.FF0UMSEL[FF0UWIXM] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FF0UM001.FF0UMSEL[FF0UWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    else

      FF0UW00.FF0UWIX2 = FF0UW00.FF0UWIXM - 1; /* Set counter*/

      while (FF0UW00.FF0UWIX2 > 0) /* While counter greater than 0*/
        if (FF0UM001.FF0UMSEL[FF0UWIX2] > " ") /* Valid selection character*/

          FFWREC.XXXMODID = "540"; /* Module identification*/
          set FF0UM001.FF0UMSEL[FF0UWIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(73); /* More than one selection*/

        end

        FF0UW00.FF0UWIX2 = FF0UW00.FF0UWIX2 - 1; /* Decrement counter*/

      end
    end
  end


end // end FF0U540

// Process valid input request
Function FF0U600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0UW00.FF0UWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/

  if (FF0UM001.FFZBYYMM != FF0UW01.FFZBYYMM /* Beginning month changed*/
   || FF0UM001.FFZEYYMM != FF0UW01.FFZEYYMM /* or ending month changed*/
   || FF0UM001.YPGCD != FFWREC.YPGCD        /* or type changed*/
   || FF0UM001.YSMXDV != FFWREC.YSMXDV)     /* or division group changed*/

    /* ------------------------------------------------------------*/
     /* Update the modifiable data in the FF system commarea.*/
    /* ------------------------------------------------------------*/

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* Ending month*/
    FFWREC.YPGCD = FF0UM001.YPGCD; /* Type code*/
    FFWREC.YPGABRV = FF0UM001.YPGABRV; /* Type name*/
    FFWREC.YSMXDV = FF0UM001.YSMXDV; /* Division group code*/
    FFWREC.YSMSMDSC = FF0UM001.YSMSMDSC; /* Division group name*/

    FF0UW00.FF0UWSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FF0UW00.XXXTSPAG = FF0UW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FF0UW00.XXXTSPAG = FF0UW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If line was selected, transfer to display the forecast.*/
   /* ------------------------------------------------------------*/

  if ("S" in FF0UM001.FF0UMSEL) /* Line selected*/

    FFWREC.XPLCD = FF0UW01.XPLCD[sysVar.arrayIndex]; /* Move line code*/
    FFWREC.XPLABRV = FF0UW01.XPLABRV[sysVar.arrayIndex]; /* Move line name*/

    COMMAREA.CATOAP = "FF04"; /* TO application*/

    FF0U610(); /* Transfer to display forecast*/

  end


end // end FF0U600

// Transfer to display forecast
Function FF0U610()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage and transfer control to the*/
   /* forecast application.*/
   /* ------------------------------------------------------------*/

  FF0U110(); /* Purge any temporary storage*/

  XSFFS01(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/

  exit stack; /* Exit to display map*/


end // end FF0U610

// Select FFXRF
Function FF0US01()
   /* ------------------------------------------------------------*/
   /* Select FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("SL", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or more than one row found, return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* More than one row found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0US01

//*** RECORD=FF0UW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0UW00 type basicRecord
  10 FF0UWIXM FF0UWIXM ; 
  10 FF0UWIX2 FF0UWIX2 ; 
  10 FF0UWSWC FF0UWSWC ; 
  10 FF0UWSWF FF0UWSWF ; 
  10 FF0UWSWR FF0UWSWR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 FF0UWCNT FF0UWCNT ; 
  10 FF0UWFDA FF0UWFDA ; 
  10 FF0UWHFL FF0UWHFL ; 
  10 * num(1) ; 
end // end FF0UW00

//*** RECORD=FF0UW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0UW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1005) ; 
    10 FFZBYYMM FFZBYYMM ; 
    10 FFZEYYMM FFZEYYMM ; 
    10 FFZIYYMM FFZIYYMM [12] ; 
    10 XPLCD XPLCD [13] ; 
    10 FF2LRVFL FF2LRVFL [13] ; 
    10 XPLABRV XPLABRV [13] ; 
    10 FF0UWLIN FF0UWLIN [13] ; 
end // end FF0UW01

//*** RECORD=FF0UW02 ****
// Mask for map line display
// ***********************
Record FF0UW02 type basicRecord
  5 FF0UWMSK FF0UWMSK ; 
    10 FF0UWGRP FF0UWGRP [13] ; 
      15 FF0UWAMT FF0UWAMT ; 
      15 * char(1) ; 
  5 * char(1) ; 
  5 FF0UWLNT FF0UWLNT ; 
end // end FF0UW02

//*** RECORD=FF0UW03 ****
// Storage for total fields
// ***********************
Record FF0UW03 type basicRecord
  5 FF0UWNBM FF0UWNBM ; 
  5 * char(1) ; 
  5 FF0UWTOT FF0UWTOT [13] ; 
  5 FF0UWTGT FF0UWTGT [13] ; 
  5 FF0UWVAR FF0UWVAR [13] ; 
  5 * char(1) ; 
  5 FF0UWCLT FF0UWCLT [12] ; 
  5 FF0UWHTG FF0UWHTG ; 
  5 * char(1) ; 
  5 FF0UWTTA FF0UWTTA ; 
  5 FF0UWTTB FF0UWTTB ; 
  5 FF0UWTTC FF0UWTTC ; 
  5 * char(1) ; 
end // end FF0UW03

// FF_PRDCTN_TRGT amts
DataItem FF0UWAMT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Accum column tots
DataItem FF0UWCLT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Counter for loops
DataItem FF0UWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem FF0UWFDA int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working storage group
DataItem FF0UWGRP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold reviewed flag
DataItem FF0UWHFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold trgt for var calc
DataItem FF0UWHTG int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem FF0UWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FF0UWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Trgt amts & tot for 12 months
DataItem FF0UWLIN char(64)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Line total work field
DataItem FF0UWLNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line mask
DataItem FF0UWMSK char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold number of months
DataItem FF0UWNBM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FF0UWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0UWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0UWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Targets for range
DataItem FF0UWTGT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Totals for range
DataItem FF0UWTOT char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Accum grand Totals
DataItem FF0UWTTA int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Accum grand TArgets
DataItem FF0UWTTB int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Accum grand VAriances
DataItem FF0UWTTC int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variances for range
DataItem FF0UWVAR char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

