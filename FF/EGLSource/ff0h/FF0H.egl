package ff0h;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import fh.common.*;
import pg.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0H ****
// This user can only enter this application by, first, going
// through FF0S and selecting a global adjustment.
// 
// This application displays demand, forecast and inventory
// information summarized at the category or style group level
// with selected global adjustment figures applied.
// 
// The user may scroll forward or back to view each of the
// worksheet pages or scroll left and right to see various
// forecast months.
// 
// The user may update the worksheet for each product in the
// category or style group with the global adjustment figures
// by pressing PF15 on map 6 only.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key from any map.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/25/90  SPOPA   New application.
// FIX      06/04/90  SPOPA   Use YPGCD from FFWREC instead of
//                            '*' when selecting from VSYSHP01.
// FIX      06/14/90  SPOPA   Correct HIST SEAS IDX calculate.
// FF#33    06/28/90  SPOPA   Do not calculate prop forecast if
//                            FCST MO not the same as current.
// FF#59    07/16/90  LDELUH  Add wildcard of actl buy month
//                            to call to FF2930.
//                    SFORD   Backed out prior mo. MSTR SLS
//                            FCST from curr mo./CONTP_MO
// FF#116   07/31/90  SFORD   Fixed beginning inventory balance
//                            to match ending inventory balance
//                            of the prior month.
// FF#134   08/14/90  SFORD   Add Select statement to get/save
//                            the summed header data where
//                            HDR.FF_CONTP_MO = ITM.FF_FCST_MO
//                            also turned on switch for a CICS
//                            interrupt when Batch job complete
// FF#153   08/28/90  LDELUH  Make current & master qtys equal
//                            for prop, demand, & sales in some
//                            months.
// FF#???   09/12/90  SFORD   Enhanced program to get and load
//                            history data for the DEMAND qtys
//                            on from VFHCAT01 & VFHLIN01
// FF#128   09/26/90  SFORD   Re-calc fill rate for actual mos
//                            & show Dom Prod FCST to include
//                            buy month.
// FF#1037  09/27/90  RHETRI  send curnt dt to io mod in fhsrec
// Fix      10/15/90  JJUCH   Qualify category when accessing
//                            DFHIST.VSYSHP01 with 'SG' func.
// FF#112   10/24/90  SFORD   Use non-rounded values for the
//                            computational fields.
// FF#fix   11/02/90  SFORD   re-set the pass record with the
//                            wildcard fields when calling
//                            FF2930 with select next D.B. row
//                            in module FF0H110.
// FF#???   11/09/90  SFORD   Loaded fcst fut % from D.B. due
//                            to table changes.
// FF#fix   11/02/90  SFORD   move curr prop to mstr prop
// FF#201   12/21/90  SFORD   Enhance to handle multi year's
//                            worth of seasons
// FF#189   02/21/91  LDELUH  Chg calls for NIL prdctn fcst.
// FF#283   02/17/92  LDELUH  Chg calc of fut rto for lt contp
//                            to include cancels.
// FF#285   03/05/92  LDELUH  Add alternate cat indicator.
// FF1111   05/19/92  LDELUH  Allow varying length seasons.
// FF       09/01/93  mdange  Add logic to submit either test
//                            or prod JCL.
// FH140    01/31/94  JJUCH   Change to use authorize future
//                            when calculating hist fill rate,
//                            hist futr % and seas index.
//          12/17/96  CWHIT1  FIX 0 FILL FOR YR 2000
// *********************
Program FF0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0HW00 FF0HW00; // record
  FF0HW01 FF0HW01; // record
  FF0HW02 FF0HW02; // record
  FF0HW03 FF0HW03; // record
  FF0HW04 FF0HW04; // record
  FF0HW05 FF0HW05; // record
  FF0HW06 FF0HW06; // record
  FF0HW07 FF0HW07; // record
  FF0HW08 FF0HW08; // record
  FF0HW09 FF0HW09; // record
  FF0HW10 FF0HW10; // record
  FF2REC FF2REC; // record
  FF7REC FF7REC; // record
  FF8REC FF8REC; // record
  FFFREC FFFREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFTREC FFTREC; // record
  FFUREC FFUREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FH1REC FH1REC; // record
  FH3REC FH3REC; // record
  FH5REC FH5REC; // record
  FH6REC FH6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FF0HT; // table
  use FF0HT5O {deleteAfterUse = yes}; // table
  use FF0HM.FF0HM001,  // forms
      FF0HM.FF0HM002, 
      FF0HM.FF0HM003, 
      FF0HM.FF0HM004, 
      FF0HM.FF0HM005, 
      FF0HM.FF0HM006, 
      FF0HM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FF0HW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0HW00.FF0HWBEG = 1; /* Beginning column*/
    FF0HW00.FF0HWPAG = 1; /* Page number*/
    FF0HW00.FF0HWSEA = 1; /* Season displayed ctr*/

    FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/
    FF0HW00.FF0HWSWR = "Y"; /* Request for data switch*/
    move "N" to FF0HW00.FF0HWSWO[1] for all; /* Data Obtained switch for each year*/
    FF0HW00.FF0HWSWS = "N"; /* First Season Switch*/

    FFWREC.FFWENDM1 = 0;
    FFWREC.FFWENDM2 = 0;
    FFWREC.FFWENDM3 = 0;
    FFWREC.FFWENDM4 = 0;

     /* ------------------------------------------------------------*/
     /* Flow to determine what application transferred control.*/
     /* ------------------------------------------------------------*/

    goto FF0H000; /* Check the FROM application*/


    FF0H000: FF0H000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0H001; /* Converse the main process*/


    FF0H001: FF0H001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0H001; /* Converse the main process*/


  end // end main
end // end FF0H

// Check the FROM application
Function FF0H000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FF0S" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FF0H") /* or same application*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end FF0H000

// Main process to display a map
Function FF0H001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, if specified, display the fourth map.*/
   /* 5) Otherwise, if specified, display the fifth map.*/
   /* 6) Otherwise, if specified, display the sixth map.*/
   /* 7) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWPAG == 1 /* Page 1 was requested*/
   || FF0HW00.FF0HWSWR == "Y") /* or data was requested*/
    FF0H100(); /* Display map 1*/
  else

    if (FF0HW00.FF0HWPAG == 2) /* Page 2 was requested*/
      FF0H200(); /* Display map 2*/
    else

      if (FF0HW00.FF0HWPAG == 3) /* Page 3 was requested*/
        FF0H300(); /* Display map 3*/
      else

        if (FF0HW00.FF0HWPAG == 4) /* Page 4 was requested*/
          FF0H400(); /* Display map 4*/
        else

          if (FF0HW00.FF0HWPAG == 5) /* Page 5 was requested*/
            FF0H500(); /* Display map 5*/
          else

            if (FF0HW00.FF0HWPAG == 6) /* Page 6 was requested*/
              FF0H600(); /* Display map 6*/
            else

              /* --------------------------------------------------------*/
               /* Write the error to the Error Diagnosis Reporting.*/
              /* --------------------------------------------------------*/

              FFWREC.XXXMODID = "001"; /* Module identification*/
              FFWREC.XXXMSGNO = 1; /* System error occurred*/

              TA1REC.TA1FUNC = "RETN"; /* Termination function*/
              TA1REC.TA1TYPE = "APPL"; /* Type of error*/
              TA1REC.TA1LOC = "INVALID PAGE NUMBER REQUESTED";
              TA1REC.TA1MAPNO = FF0HW00.FF0HWPAG; /* Page number*/
              TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
              TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

              call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

              /* --------------------------------------------------------*/
               /* Exit to display the application system menu.*/
              /* --------------------------------------------------------*/

              COMMAREA.CATOAP = "FF0A"; /* TO application*/

              XSFFS01(); /* Exit to another application*/

              /* --------------------------------------------------------*/
               /* Abnormally terminate the transaction if exit failed.*/
              /* --------------------------------------------------------*/

              TA1REC.TA1FUNC = "ABND"; /* Termination function*/
              TA1REC.TA1LOC = "EXIT TO APPLICATION MENU FAILED";

              call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

            end
          end
        end
      end
    end
  end


end // end FF0H001

// Display CURRENT DEMAND FUTURES
Function FF0H100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0H110(); /* Obtain the data to display*/

  FF0H120(); /* Format and display the map*/

  FF0H130(); /* Check attention identifier*/

  FF0H140(); /* Reset fields to normal intensity*/

  FF0H150(); /* Verify the entered data*/

  FF0H160(); /* Process valid input request*/


end // end FF0H100

// Obtain the data to display
Function FF0H110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* ========> Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Process 2nd & 3rd year if requested.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSWS == "Y") /* 1st yr season formatted switch*/

    FF0H119(); /* Process 2nd & 3rd year of seasons*/

    return; /* ========> Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage and total areas.*/
   /* ------------------------------------------------------------*/

  set FF0HW01 empty; /* M001 display storage*/
  set FF0HW02 empty; /* M002 display storage*/
  set FF0HW03 empty; /* M003 display storage*/
  set FF0HW04 empty; /* M004 display storage*/
  set FF0HW05 empty; /* M005 display storage*/
  set FF0HW06 empty; /* M006 display storage*/
  set FF0HW07 empty; /* Season subtotals*/
  set FF0HW08 empty; /* Grand totals*/
  set FF0HW09 empty; /* Print request parameters*/
  set FF0HW10 empty; /* Global update parameters*/

  FF0HW01.CACHGFL = "N"; /* Data was obtained switch*/

   /* ------------------------------------------------------------*/
   /* Select the row from the product cross-reference table.*/
   /* ------------------------------------------------------------*/

  FF0H111(); /* Select product cross-reference*/

   /* ------------------------------------------------------------*/
   /* Calculate number of months in each season.*/
   /* ------------------------------------------------------------*/

   /* calc & save year ending month*/
  FF0HW00.FF0HWDAT = FF2REC.FF2SEASN[1];
  FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM + 11;
  if (FF0HW00.FF0HWDMM > 12)
    FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM - 12;
    FF0HW00.FF0HWDAT = FF0HW00.FF0HWDAT + 100;
  end
  FF0HW00.FF0HWYEM = FF0HW00.FF0HWDAT; /* year end month*/

   /* calc months in each season*/
  FF0HW00.FF2NSEAS = FF2REC.FF2NSEAS; /* save number of sesns*/
  FF0HW00.FF0HWSIX = 1; /* season index*/
  FF0HW00.FF0HWNIX = 2; /* next index*/
  FF0HW00.FF0HWMSC = 1; /* months in season counter*/
  FF0HW00.FF0HWDAT = FF2REC.FF2SEASN[1];
  while (FF0HW00.FF0HWSIX <= FF0HW00.FF2NSEAS)
    FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM + 1;
    if (FF0HW00.FF0HWDMM > 12)
      FF0HW00.FF0HWDMM = 1;
      FF0HW00.FF0HWDAT = FF0HW00.FF0HWDAT + 100;
    end
    FF0HW00.FF0HWMSC = FF0HW00.FF0HWMSC + 1;
    if (FF0HW00.FF0HWDAT > FF0HW00.FF0HWYEM)
      FF0HW00.FF0HWMSC = FF0HW00.FF0HWMSC - 1;
      FF0HW00.FF0HWMIS[FF0HWSIX] = FF0HW00.FF0HWMSC;
      FF0HW00.FF0HWSIX = FF0HW00.FF0HWSIX + 1;
    else
      if (FF0HW00.FF0HWDAT == FF2REC.FF2SEASN[FF0HWNIX])
        FF0HW00.FF0HWMSC = FF0HW00.FF0HWMSC - 1;
        FF0HW00.FF0HWMIS[FF0HWSIX] = FF0HW00.FF0HWMSC;
        FF0HW00.FF0HWSIX = FF0HW00.FF0HWSIX + 1;
        FF0HW00.FF0HWNIX = FF0HW00.FF0HWNIX + 1;
        FF0HW00.FF0HWMSC = 1;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Get/save header summary worksheet data row for "CURR MO"*/
   /* and save the data obtained.*/
   /* ------------------------------------------------------------*/

  FF0HS70(); /* ===> Get hdr sum ws "curr mo"*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FF0H112(); /* Open summary worksheet cursor*/

  FF0HW00.FF0HWCOL = 1; /* Current column*/
  FF0HW00.FF0HWFMO = 1; /* Number months formatted*/
  FF0HW00.FF0HWSIX = 1; /* Season index*/
  FF0HW00.FF0HWMSC = 0; /* Months in sesn counter*/
  FF0HW00.FF0HWSCT = 1; /* Sesn count*/

  FF0HW00.FF0HWSWC = "N"; /* Summary cursor EOF switch*/
  FF0HW00.FF0HWSWS = "N"; /* First season switch*/
  FF0HW00.FF0HWSW1 = "Y"; /* First time through switch*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FF0HW00.FF0HWSWC == "N") /* Until end of cursor*/

    /* ------------------------------------------------------------*/
      /* The next two statements are used for the re-calc of*/
      /* fill rate within the subroutine FF2930*/
    /* ------------------------------------------------------------*/

    FFQREC.FFQMBYMO = -1; /* Main buy mo*/
    FFQREC.FFQABYMO = -1; /* Actl buy mo*/

    FF0H113(); /* Fetch next summary worksheet*/

    if (FF0HW00.FF0HWFMO > 12) /* Twelve months were formatted*/
      FF0HW00.FF0HWSWC = "Y"; /* End of cursor switch*/
    end

    if (FF0HW00.FF0HWSW1 == "N") /* Not first time through*/

      if (FF0HW00.FF0HWSWC == "Y" /* End of cursor*/
       || FF0HW00.FF0HWMSC == FF0HW00.FF0HWMIS[FF0HWSIX]) /* or sesn end*/

        if (FF0HW00.FF0HWSWS == "N") /* First season switch*/

          FF0H114(); /* Format carryover quantities*/

          FF0HW00.FF0HWSWS = "Y"; /* First season switch*/

        end

        FF0H115(); /* Calculate season totals*/

        if (FF0HW00.FF0HWSWC == "N") /* If not end of cursor*/
          FF0HW00.FF0HWSIX = FF0HW00.FF0HWSIX + 1; /* Incrmt sesn ix*/
          FF0HW00.FF0HWMSC = 0; /* Clear mos in sesn counter*/
        end

      end

    end

    if (FF0HW00.FF0HWSWC == "N") /* Not end of cursor*/

      if (FF0HW00.FF0HWSW1 == "Y") /* First time through*/

        /* ============ Next Sentence =============>*/

      else

        FF0HW00.FF0HWFMO = FF0HW00.FF0HWFMO + 1; /* Number months formatted*/
        FF0HW00.FF0HWMSC = FF0HW00.FF0HWMSC + 1; /* Months in sesn counter*/

      end

      FF0H117(); /* Save item information*/

      FF0HW00.FF0HWSW1 = "N"; /* First time through switch*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FF0H118(); /* Close summary worksheet cursor*/

   /* ------------------------------------------------------------*/
   /* Determine the maximum beginning column for scrolling.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWMAX = FF0HW00.FF0HWCOL - 8; /* Maximum beginning column*/

  if (FF0HW00.FF0HWMAX < 1) /* Maximum LT minimum*/
    FF0HW00.FF0HWMAX = 1; /* Default to minimum*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSW1 == "Y") /* No worksheet found*/

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWSWR = "N"; /* Request for data switch*/
  FF0HW01.CACHGFL = "Y"; /* Data was obtained switch*/

end // end FF0H110

// Select product cross-reference
Function FF0H111()
   /* ------------------------------------------------------------*/
   /* Select the product cross-reference table row.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT PRODUCT CROSS-REFERENCE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0H111

// Open summary worksheet cursor
Function FF0H112()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Worksheet header*/
  set FFRREC empty; /* Worksheet item*/

  FFQREC.XWSCD = "01"; /* Worksheet type code*/
  FFQREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FFQREC.XPCCD = FFWREC.XPCCD; /* Product category code*/

  if (FFWREC.SYBSTGNB == " ") /* Style group number*/

    FFQREC.SYBSTGNB = "*"; /* Any style group*/
  else
    FFQREC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/

  end

   /* ------------------------------------------------------------*/
   /* Determine beginning date  & ending date for year's of season*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSWS == "N") /* Format First 1st yr season switch*/

    /* ------------------------------------------------------------*/
        /* Use the parameter beginning date from Pass record*/
        /* and calc ending date for the first year's seasons*/
    /* ------------------------------------------------------------*/

    FF0HW00.FF0HWDAT = FFWREC.FFABEGMO; /* Begin mo*/

    FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM - 1; /* Decrement month*/

    if (FF0HW00.FF0HWDMM < 1) /* Month LT minimum*/

      FF0HW00.FF0HWDMM = 12; /* Reset month*/
      FF0HW00.FF0HWDYY = FF0HW00.FF0HWDYY - 1; /* Decrement year*/

    end

    FFRREC.FF4FCTMO = FF0HW00.FF0HWDAT; /* Fcst mo*/

    FF0HW00.FF0HWDYY = FF0HW00.FF0HWDYY + 1; /* Increment year*/
    FFQREC.FFAENDMO = FF0HW00.FF0HWDAT; /* Fcst mo*/
    FF0HW00.FFAENDMO = FF0HW00.FF0HWDAT; /* Fcst xmo*/

  else


    /* ------------------------------------------------------------*/
        /* Use the ending date + 1 for the beginning date and*/
        /* calc the ending date for the 2nd & 3rd year's season.*/
    /* ------------------------------------------------------------*/

    FF0HW00.FF0HWDAT = FF0HW00.FFAENDMO; /* restore last Fcst xmo*/

    FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM + 1; /* Increment month*/
    if (FF0HW00.FF0HWDMM > 12) /* Month > 12*/

      FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM - 12; /* Decrement months*/
      FF0HW00.FF0HWDYY = FF0HW00.FF0HWDYY + 1; /* increment year*/

    end
    FFRREC.FF4FCTMO = FF0HW00.FF0HWDAT; /* Fcst mo*/

    FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM + 11; /* Increment month*/
    if (FF0HW00.FF0HWDMM > 12) /* Month > 12*/

      FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM - 12; /* Decrement months*/
      FF0HW00.FF0HWDYY = FF0HW00.FF0HWDYY + 1; /* increment year*/

    end
    FFQREC.FFAENDMO = FF0HW00.FF0HWDAT; /* Fcst ending month*/
    FF0HW00.FFAENDMO = FF0HW00.FF0HWDAT; /* Fcst xmo*/

  end

  FFQREC.FFQMBYMO = -1; /* Main buy mo*/
  FFQREC.FFQABYMO = -1; /* Actl buy mo*/
  FFQREC.ZZZCHGDT = -1; /* Change date*/
  FFQREC.ZZZCHGTM = -1; /* Change time*/

  try
    call "FF2930" ("S1", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0H112

// Fetch next summary worksheet
Function FF0H113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "FF2930" ("N1", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FF0HW00.FF0HWSWC = "Y"; /* Header cursor EOF switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT SUMMARY WORKSHEET";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0H113

// Format carryover quantities
Function FF0H114()
   /* ------------------------------------------------------------*/
   /* Determine where to display the carryover quantities.*/
   /* ------------------------------------------------------------*/

  if (FF0HW01.FFQCURMO in FF0HW01.FF4FCTMO) /* Find current month*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

  else

    FFWREC.XXXMODID = "114"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FF0HW00.FF0HWDAT = FF0HW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FF0HW00.FF0HWDAT; /* Current month*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FORMAT CARRYOVER QUANTITIES";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

  if (FF0HW01.FFABEGMO == FF0HW01.FFQCURMO) /* Beg mo EQ curr*/

    FFXREC.FFXNUMB = FF0HW01.FFQOCOFU + FF0HW01.FFQLCOFU; /* Caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW01.FF0HMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW01.FF0HWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0HW01.FFQOCOPR + FF0HW01.FFQLCOPR; /* Caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW01.FF0HMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW01.FF0HWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0HW01.FF0HWFCO[sysVar.arrayIndex] + FF0HW01.FF0HWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  else

    FFXREC.FFXNUMB = FF0HW01.FFQLCOFU; /* Lst caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW01.FF0HMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW01.FF0HWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0HW01.FFQLCOPR; /* Lst caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW01.FF0HMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW01.FF0HWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0HW01.FF0HWFCO[sysVar.arrayIndex] + FF0HW01.FF0HWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

    FFXREC.FFXNUMB = FF0HW01.FFQOCOFU; /* Oth caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW01.FF0HMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW01.FF0HWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0HW01.FFQOCOPR; /* Oth caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW01.FF0HMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW01.FF0HWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0HW01.FF0HWFCO[sysVar.arrayIndex] + FF0HW01.FF0HWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end


end // end FF0H114

// Calculate season totals
Function FF0H115()
   /* ------------------------------------------------------------*/
   /* Calculate the M001 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FF0HW01.FF0HMMON[FF0HWCOL] = "  SUB"; /* Subtotal literal*/
  FF0HW01.FF0HMSCT[FF0HWCOL] = FF0HW00.FF0HWSCT; /* Sesn count*/

  FFXREC.FFXNUMB = FF0HW07.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRPFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRPFUDM = FF0HW08.FFRPFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRAFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRAFUDM = FF0HW08.FFRAFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRIFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRIFUDM = FF0HW08.FFRIFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRCFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRCFUDM = FF0HW08.FFRCFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FF0HWFUT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWFUT = FF0HW08.FF0HWFUT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRPNFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRPNFDM = FF0HW08.FFRPNFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRANFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRANFDM = FF0HW08.FFRANFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRINFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRINFDM = FF0HW08.FFRINFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRCNFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRCNFDM = FF0HW08.FFRCNFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FF0HWNFT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWNFT = FF0HW08.FF0HWNFT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M002 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW07.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRPPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRPPRDM = FF0HW08.FFRPPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRAPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRAPRDM = FF0HW08.FFRAPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRIPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRIPRDM = FF0HW08.FFRIPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRCPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRCPRDM = FF0HW08.FFRCPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FF0HWPRT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWPRT = FF0HW08.FF0HWPRT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRPNPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRPNPDM = FF0HW08.FFRPNPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRANPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRANPDM = FF0HW08.FFRANPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRINPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRINPDM = FF0HW08.FFRINPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRCNPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRCNPDM = FF0HW08.FFRCNPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FF0HWNPT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWNPT = FF0HW08.FF0HWNPT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M003 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWTDP = FF0HW08.FF0HWTDP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDA[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWTDA = FF0HW08.FF0HWTDA + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDI[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWTDI = FF0HW08.FF0HWTDI + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWTDC = FF0HW08.FF0HWTDC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWTDT = FF0HW08.FF0HWTDT + FFXREC.FFXROUND; /* accum total*/

  if (FF0HW03.FF0HWTDT[FF0HWCOL] != 0) /* Total demand NE zero*/
    FF0HW00.FF0HWPCT = FF0HW03.FF0HWTDC[FF0HWCOL] * 100; /* Cancellation %*/
    FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT / FF0HW03.FF0HWTDT[FF0HWCOL], -mathLib.decimals(FF0HW00.FF0HWPCT));
    FF0HW03.FF0HWCAP[FF0HWCOL] = FF0HW00.FF0HWPCT;
  end

  FFXREC.FFXNUMB = FF0HW07.FF0HWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTAF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTAF[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWTAF = FF0HW08.FF0HWTAF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTAP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTAP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWTAP = FF0HW08.FF0HWTAP + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M004 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDFU[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDFU[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWDFU = FF0HW08.FF0HWDFU + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDNF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDNF[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWDNF = FF0HW08.FF0HWDNF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDTF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDTF[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWDTF = FF0HW08.FF0HWDTF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDPR[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDPR[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWDPR = FF0HW08.FF0HWDPR + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDNP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDNP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWDNP = FF0HW08.FF0HWDNP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDTP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDTP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWDTP = FF0HW08.FF0HWDTP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMPCF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FFRCPRFC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRCPRFC = FF0HW08.FFRCPRFC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF6PRPFC; /* Mstr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMPRF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF6PRPFC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF6PRPFC = FF0HW08.FF6PRPFC + FFXREC.FFXROUND; /* accum total*/

  if (FF0HW07.FFRCDMFC != 0) /* Subtotal NE zero*/
    FF0HW00.FF0HWPCT = mathLib.round(FF0HW07.FF0HWFRF * 100 / FF0HW07.FFRCDMFC, -mathLib.decimals(FF0HW00.FF0HWPCT));
    FF0HW04.FF0HWDFF[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Fcst fut %*/
  end
  FF0HW08.FF0HWFRF = FF0HW08.FF0HWFRF + FF0HW07.FF0HWFRF; /* accum total*/

  if (FF0HW07.FF0HWHDM > 0) /* Subtotal GT zero*/
    FF0HW00.FF0HWPCT = mathLib.round(FF0HW07.FF0HWHFU * 100 / FF0HW07.FF0HWHDM, -mathLib.decimals(FF0HW00.FF0HWPCT));
    FF0HW04.FF0HWDHF[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Hist fut %*/
  end
  FF0HW08.FF0HWHFU = FF0HW08.FF0HWHFU + FF0HW07.FF0HWHFU; /* accum total*/

  if (FF0HW07.FFRCPRFC != 0) /* Subtotal NE zero*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWCOL - FF0HW07.FF0HWNMO; /* Season begin*/
    while (FF0HW00.FF0HWIXC <= FF0HW00.FF0HWCOL) /* Until end of season*/
      if (FF0HW04.FFRCPRFC[FF0HWIXC] >= 0) /* Curr prop fcst GE zero*/
        FF0HW00.FF0HWPCT = FF0HW04.FFRCPRFC[FF0HWIXC] * 100;
        FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT / FF0HW07.FFRCPRFC, -mathLib.decimals(FF0HW00.FF0HWPCT));
        FF0HW04.FF0HWDFI[FF0HWIXC] = FF0HW00.FF0HWPCT; /* Fcst idx*/
      end
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Next month of season*/
    end
  end

  if (FF0HW07.FF0HWHPR != 0) /* Subtotal NE zero*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWCOL - FF0HW07.FF0HWNMO; /* Season begin*/
    FF0HW04.FF0HWHPR[FF0HWCOL] = FF0HW07.FF0HWHPR; /* Subtotal*/
    while (FF0HW00.FF0HWIXC <= FF0HW00.FF0HWCOL) /* Until end of season*/
      if (FF0HW04.FF0HWHPR[FF0HWIXC] >= 0) /* Hist prop qty GE zero*/
        FF0HW00.FF0HWPCT = FF0HW04.FF0HWHPR[FF0HWIXC] * 100;
        FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT / FF0HW07.FF0HWHPR, -mathLib.decimals(FF0HW00.FF0HWPCT));
        FF0HW04.FF0HWDHI[FF0HWIXC] = FF0HW00.FF0HWPCT; /* Hist idx*/
      end
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Next month of season*/
    end
  end
  FF0HW08.FF0HWHPR = FF0HW08.FF0HWHPR + FF0HW07.FF0HWHPR; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M005 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW07.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMFCD[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FFRCDMFC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRCDMFC = FF0HW08.FFRCDMFC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMMDM[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FF0HWMDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWMDM = FF0HW08.FF0HWMDM + FFXREC.FFXROUND; /* accum total*/

  if (FF0HW05.FFRCDMFC[FF0HWCOL] != 0) /* Subtotal NE zero*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWCOL - FF0HW07.FF0HWNMO; /* Season begin*/
    while (FF0HW00.FF0HWIXC <= FF0HW00.FF0HWCOL) /* Until end of season*/
      FF0HW00.FF0HWPCT = FF0HW05.FFRCDMFC[FF0HWIXC] * 100; /* Curr dmd fcst*/
      FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT / FF0HW05.FFRCDMFC[FF0HWCOL], -mathLib.decimals(FF0HW00.FF0HWPCT));
      FF0HW05.FF0HWFSI[FF0HWIXC] = FF0HW00.FF0HWPCT; /* Fcst seas idx*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Next month of season*/
    end
  end

  if (FF0HW07.FF0HWHDM > 0) /* Subtotal GT zero*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWCOL - FF0HW07.FF0HWNMO; /* Season begin*/
    FF0HW05.FF0HWHDM[FF0HWCOL] = FF0HW07.FF0HWHDM; /* Subtotal*/
    while (FF0HW00.FF0HWIXC <= FF0HW00.FF0HWCOL) /* Until end of season*/
      FF0HW00.FF0HWPCT = FF0HW05.FF0HWHDM[FF0HWIXC] * 100; /* Hist dmd qty*/
      FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT / FF0HW05.FF0HWHDM[FF0HWCOL], -mathLib.decimals(FF0HW00.FF0HWPCT));
      FF0HW05.FF0HWHSI[FF0HWIXC] = FF0HW00.FF0HWPCT; /* Hist seas idx*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Next month of season*/
    end
  end
  FF0HW08.FF0HWHDM = FF0HW08.FF0HWHDM + FF0HW07.FF0HWHDM; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF7RVFCT; /* Rvse dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMRVF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FF7RVFCT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF7RVFCT = FF0HW08.FF7RVFCT + FFXREC.FFXROUND; /* accum total*/

  if (FF0HW07.FF7RVFCT != 0) /* Subtotal NE zero*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWCOL - FF0HW07.FF0HWNMO; /* Season begin*/
    while (FF0HW00.FF0HWIXC <= FF0HW00.FF0HWCOL) /* Until end of season*/
      FF0HW00.FF0HWPCT = FF0HW05.FF7RVFCT[FF0HWIXC] * 100; /* Rvse dmd fcst*/
      FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT / FF0HW05.FF7RVFCT[FF0HWCOL], -mathLib.decimals(FF0HW00.FF0HWPCT));
      FF0HW05.FF0HWRSI[FF0HWIXC] = FF0HW00.FF0HWPCT; /* Revd seas idx*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Next month of season*/
    end
  end

  FF0HW00.FF0HWPCT = mathLib.round(FF0HW07.FF0HWFFR / FF0HW07.FF0HWNMO, -mathLib.decimals(FF0HW00.FF0HWPCT));
  FF0HW05.FF0HWFFR[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Fcst fill rt*/
  FF0HW05.FF0HMFFR[FF0HWCOL] = mathLib.round(FF0HW05.FF0HWFFR[FF0HWCOL] / 1, -mathLib.decimals(FF0HW05.FF0HMFFR[FF0HWCOL]));
  FF0HW08.FF0HWFFR = FF0HW08.FF0HWFFR + FF0HW07.FF0HWFFR; /* accum total*/

  FF0HW00.FF0HWPCT = mathLib.round(FF0HW07.FF0HWHFR / FF0HW07.FF0HWNMO, -mathLib.decimals(FF0HW00.FF0HWPCT));
  FF0HW05.FF0HWHFR[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Hist fill rt*/
  FF0HW08.FF0HWHFR = FF0HW08.FF0HWHFR + FF0HW07.FF0HWHFR; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMCSF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FH5MSHQT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FH5MSHQT = FF0HW08.FH5MSHQT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMMSL[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FF6SLFCT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF6SLFCT = FF0HW08.FF6SLFCT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M006 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW07.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMINB[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF6BEINV[FF0HWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FF0HW08.FF6BEINV = FF0HW08.FF6BEINV + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMDUE[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FFRPRDDU[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRPRDDU = FF0HW08.FFRPRDDU + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMQBY[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FFRSUBBY[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRSUBBY = FF0HW08.FFRSUBBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMTBY[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FFRTENBY[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRTENBY = FF0HW08.FFRTENBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMSUP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF0HWSUP[FF0HWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FF0HW08.FF0HWSUP = FF0HW08.FF0HWSUP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMBAL[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FG4BALSH[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FG4BALSH = FF0HW08.FG4BALSH + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMINE[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF0HWINE[FF0HWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FF0HW08.FF0HWINE = FF0HW08.FF0HWINE + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMSTK[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF6SFSTK[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF6SFSTK = FF0HW08.FF6SFSTK + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMSBY[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF6SUGBY[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF6SUGBY = FF0HW08.FF6SUGBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMFCT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF6PRFCT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF6PRFCT = FF0HW08.FF6PRFCT + FFXREC.FFXROUND; /* accum total*/

  FF0HW00.FF0HWASL = FF0HW07.FF6SLFCT * 12 * 2; /* Inv turns*/
  FF0HW00.FF0HWAIN = FF0HW07.FF6BEINV + FF0HW07.FF0HWINE;
  FF0HW00.FF0HWAIN = FF0HW00.FF0HWAIN * FF0HW07.FF0HWNMO;
  if (FF0HW00.FF0HWAIN != 0) /* Inventory NE zero*/
    FF0HW06.FF0HWTUR[FF0HWCOL] = mathLib.round(FF0HW00.FF0HWASL / FF0HW00.FF0HWAIN, -mathLib.decimals(FF0HW06.FF0HWTUR[FF0HWCOL]));
  end

  FFXREC.FFXNUMB = FF0HW07.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMDIR[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FFRDIRSH[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FFRDIRSH = FF0HW08.FFRDIRSH + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0HW07.FF0HWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMNIL[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF0HWNIL[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW08.FF0HWNIL = FF0HW08.FF0HWNIL + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Accumulate the number of months for accum total averaging.*/
   /* ------------------------------------------------------------*/

  FF0HW08.FF0HWNMO = FF0HW08.FF0HWNMO + FF0HW07.FF0HWNMO;
                                   /* Number of months*/

   /* ------------------------------------------------------------*/
   /* Increment the current column and clear the subtotal fields.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWCOL = FF0HW00.FF0HWCOL + 1; /* Current column*/
  set FF0HW07 empty; /* Season subtotals*/

   /* ------------------------------------------------------------*/
   /* First season does not have an accum column so skip logic.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSCT == 1) /* Current column*/
    FF0HW00.FF0HWSCT = FF0HW00.FF0HWSCT + 1; /* Sesn counter*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M001 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FF0HW01.FF0HMMON[FF0HWCOL] = "ACCUM"; /* accum total literal*/
  FF0HW01.FF0HMSCT[FF0HWCOL] = FF0HW00.FF0HWSCT; /* Sesn count*/

  FFXREC.FFXNUMB = FF0HW08.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRPFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRAFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRIFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRCFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FF0HWFUT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRPNFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRANFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRINFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRCNFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FF0HWNFT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M002 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW08.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRPPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRAPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRIPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRCPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FF0HWPRT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRPNPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRANPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRINPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRCNPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FF0HWNPT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M003 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDA[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDI[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0HW03.FF0HWTDT[FF0HWCOL] != 0) /* Total demand NE zero*/
    FF0HW00.FF0HWPCT = FF0HW03.FF0HWTDC[FF0HWCOL] * 100; /* Cancellation %*/
    FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT / FF0HW03.FF0HWTDT[FF0HWCOL], -mathLib.decimals(FF0HW00.FF0HWPCT));
    FF0HW03.FF0HWCAP[FF0HWCOL] = FF0HW00.FF0HWPCT;
  end

  FFXREC.FFXNUMB = FF0HW08.FF0HWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTAF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTAF[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTAP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTAP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M004 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDFU[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDFU[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDNF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDNF[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDTF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDTF[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDPR[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDPR[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDNP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDNP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDTP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDTP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMPCF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FFRCPRFC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF6PRPFC; /* Mstr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMPRF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF6PRPFC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0HW08.FFRCDMFC != 0) /* accum total NE zero*/
    FF0HW00.FF0HWPCT = mathLib.round(FF0HW08.FF0HWFRF * 100 / FF0HW08.FFRCDMFC, -mathLib.decimals(FF0HW00.FF0HWPCT));
    FF0HW04.FF0HWDFF[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Fcst fut %*/
  end

  if (FF0HW08.FF0HWHFU > 0 /* accum total GT zero*/
   && FF0HW08.FF0HWHDM > 0) /* accum total GT zero*/
    FF0HW00.FF0HWPCT = mathLib.round(FF0HW08.FF0HWHFU * 100 / FF0HW08.FF0HWHDM, -mathLib.decimals(FF0HW00.FF0HWPCT));
    FF0HW04.FF0HWDHF[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Hist fut %*/
  end

  if (FF0HW08.FFRCPRFC != 0) /* accum total NE zero*/
    FF0HW04.FF0HWDFI[FF0HWCOL] = 100; /* Fcst prop idx*/
  end

  if (FF0HW08.FF0HWHPR != 0) /* accum total NE zero*/
    FF0HW04.FF0HWDHI[FF0HWCOL] = 100; /* Hist prop idx*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M005 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW08.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMFCD[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FFRCDMFC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMMDM[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FF0HWMDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0HW08.FFRCDMFC != 0) /* accum total NE zero*/
    FF0HW05.FF0HWFSI[FF0HWCOL] = 100; /* Fcst seas idx*/
  end

  if (FF0HW08.FF0HWHDM != 0) /* accum total NE zero*/
    FF0HW05.FF0HWHSI[FF0HWCOL] = 100; /* Hist seas idx*/
  end

  FFXREC.FFXNUMB = FF0HW08.FF7RVFCT; /* Rvse dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMRVF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FF7RVFCT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0HW05.FF7RVFCT[FF0HWCOL] != 0) /* accum total NE zero*/
    FF0HW05.FF0HWRSI[FF0HWCOL] = 100; /* Revd seas idx*/
  end

  FF0HW00.FF0HWPCT = mathLib.round(FF0HW08.FF0HWFFR / FF0HW08.FF0HWNMO, -mathLib.decimals(FF0HW00.FF0HWPCT));
  FF0HW05.FF0HWFFR[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Fcst fill rt*/
  FF0HW05.FF0HMFFR[FF0HWCOL] = mathLib.round(FF0HW05.FF0HWFFR[FF0HWCOL] / 1, -mathLib.decimals(FF0HW05.FF0HMFFR[FF0HWCOL]));

  FF0HW00.FF0HWPCT = mathLib.round(FF0HW08.FF0HWHFR / FF0HW08.FF0HWNMO, -mathLib.decimals(FF0HW00.FF0HWPCT));
  FF0HW05.FF0HWHFR[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Hist fill rt*/

  FFXREC.FFXNUMB = FF0HW08.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMCSF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FH5MSHQT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMMSL[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FF6SLFCT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M006 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW08.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMINB[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF6BEINV[FF0HWCOL] = FFXREC.FFXNUMB; /* Actual number*/

  FFXREC.FFXNUMB = FF0HW08.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMDUE[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FFRPRDDU[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMQBY[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FFRSUBBY[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMTBY[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FFRTENBY[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMSUP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF0HWSUP[FF0HWCOL] = FFXREC.FFXNUMB; /* Actual number*/

  FFXREC.FFXNUMB = FF0HW08.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMBAL[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FG4BALSH[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMINE[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF0HWINE[FF0HWCOL] = FFXREC.FFXNUMB; /* Actual number*/

  FFXREC.FFXNUMB = FF0HW08.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMSTK[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF6SFSTK[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMSBY[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF6SUGBY[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMFCT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF6PRFCT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FF0HW00.FF0HWASL = FF0HW08.FF6SLFCT * 12 * 2; /* Inv turns*/
  FF0HW00.FF0HWAIN = FF0HW08.FF6BEINV + FF0HW08.FF0HWINE;
  FF0HW00.FF0HWAIN = FF0HW00.FF0HWAIN * FF0HW08.FF0HWNMO;
  if (FF0HW00.FF0HWAIN != 0) /* Inventory NE zero*/
    FF0HW06.FF0HWTUR[FF0HWCOL] = mathLib.round(FF0HW00.FF0HWASL / FF0HW00.FF0HWAIN, -mathLib.decimals(FF0HW06.FF0HWTUR[FF0HWCOL]));
  end

  FFXREC.FFXNUMB = FF0HW08.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMDIR[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FFRDIRSH[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0HW08.FF0HWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMNIL[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF0HWNIL[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FF0HW00.FF0HWCOL = FF0HW00.FF0HWCOL + 1; /* Current column*/
  FF0HW00.FF0HWSCT = FF0HW00.FF0HWSCT + 1; /* Sesn count*/


end // end FF0H115

// Save header information
Function FF0H116()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date/time*/

   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month to date.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* Subroutine parameters*/

  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/

  TA9REC.TA9ENDDT = XX0XW01.XX0XWDAT; /* Ending date*/

  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    FFWREC.XXXMODID = "116"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS TO DATE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

  if (TA9REC.TA9DTDIF == 0) /* No working days to date*/
    FF0HW00.FF0HWDTD = 1; /* Default to 1 working day*/
  else
    FF0HW00.FF0HWDTD = TA9REC.TA9DTDIF; /* Working days to date*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* Subroutine parameters*/

  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/

  FF0HW00.FF0HWDAT = XX0XW01.XX0XWCYM; /* Current CCYYMM*/
  FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM + 1; /* Increment month*/
  if (FF0HW00.FF0HWDMM > 12) /* Month GT maximum*/
    FF0HW00.FF0HWDMM = 1; /* Reset to minimum*/
    FF0HW00.FF0HWDYY = FF0HW00.FF0HWDYY + 1; /* Increment year*/
  end
  TA9REC.TA9ENDDT = FF0HW00.FF0HWDAT * 100; /* Ending date*/
  TA9REC.TA9ENDDD = 01; /* Ending day*/

  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    FFWREC.XXXMODID = "116"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS IN MONTH";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

  FF0HW00.FF0HWDIM = TA9REC.TA9DTDIF; /* Working days in month*/

   /* ------------------------------------------------------------*/
   /* Save the information from the worksheet header row.*/
   /* ------------------------------------------------------------*/

  FF0HW01.FFABEGMO = FFQREC.FFABEGMO; /* Begin mo*/
  FF0HW01.FFQMBYMO = FFQREC.FFQMBYMO; /* Main buy mo*/
  FF0HW01.FFQCURMO = FFQREC.FFQCURMO; /* Current mo*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOFU; /* Lst caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FFQLCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOPR; /* Lst caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FFQLCOPR = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOFU; /* Oth caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FFQOCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOPR; /* Oth caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FFQOCOPR = FFXREC.FFXROUND; /* Rounded number*/
  FF0HW01.FFQLCOFP = FFQREC.FFQLCOFP; /* Lst caov futpct*/
  FF0HW01.FFQLCOPP = FFQREC.FFQLCOPP; /* Lst caov propct*/
  FF0HW01.FFQOCOFP = FFQREC.FFQOCOFP; /* Oth caov futpct*/
  FF0HW01.FFQOCOPP = FFQREC.FFQOCOPP; /* Oth caov propct*/
  FF0HW01.FF2PRIND = FFQREC.FF2PRIND; /* Prop yr ind*/
  FF0HW04.FF2FUIND = FFQREC.FF2FUIND; /* Futr yr ind*/
  FF0HW05.FF2DMIND = FFQREC.FF2DMIND; /* Dmd yr ind*/
  FF0HW06.SY2SSCIN = FFQREC.SY2SSCIN; /* Sfty stk cls ind*/

   /* ------------------------------------------------------------*/
   /* Establish the year indicators used to calculate history.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF2PRIND = FF0HW01.FF2PRIND; /* Prop yr ind*/
  FF0HW00.FF2FUIND = FF0HW04.FF2FUIND; /* Futr yr ind*/
  FF0HW00.FF2DMIND = FF0HW05.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Format selection information in the parameters statement.*/
   /* ------------------------------------------------------------*/

  FF0HW09.XPLCD = FFWREC.XPLCD; /* Product line code*/

  FF0HW09.YPGCD = FFWREC.YPGCD; /* Product type group code*/

  FF0HW09.XPCCD = FFWREC.XPCCD; /* Product category code*/

  FF0HW09.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0HW09.SYBSTGNM = FFWREC.SYBSTGNM; /* Short name*/

  FF0HW09.XWSCD = "01"; /* Wrksht typ cd*/

  FF0HW09.FF0HWCDT = -1; /* Change date*/
  FF0HW09.FF0HWCTM = -1; /* Change time*/
  FF0HW09.FF0HWBYM = -1; /* Main buy mo*/

  FF0HW09.FF0HWGNB = FFWREC.FFTGCNBR; /* Global change number*/
  FF0HW09.FF0HWTYP = "N"; /* Combine types?*/

   /* ------------------------------------------------------------*/
   /* Calculate the Prior Month for FF_CONTP_MO*/
    /* and save it in a field called --> FF0HWPMO*/
   /* ------------------------------------------------------------*/

  FF0HW01.FF0HWCMO = FFQREC.FFQCURMO; /* Current mo*/

  if (FF0HW01.FF0HWCMM == 1) /* Current mo*/
    FF0HW01.FF0HWPCY = FF0HW01.FF0HWCCY - 1;
    FF0HW01.FF0HWPMM = 12;
  else
    FF0HW01.FF0HWPCY = FF0HW01.FF0HWCCY; /* curr to prior*/
    FF0HW01.FF0HWPMM = FF0HW01.FF0HWCMM - 1; /* decrement month*/
  end



end // end FF0H116

// Process worksheet items
Function FF0H117()
   /* ------------------------------------------------------------*/
   /* Obtain related info for month and save in display storage.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.SYBSTGNB == " ") /* No style group*/

    if (FFRREC.FF4FCTMO >= FFQREC.FFQCURMO) /* Fcst mo GE current*/

      FF0HS01(); /* Select category adjustments*/

      FF0HW04.FFTFUADJ = FFTREC.FFTFUADJ; /* Futr tot adj*/
      FF0HW05.FFTFRADJ = FFTREC.FFTFRADJ; /* Fill rate adj*/
      FF0HW06.FFTSSAJA = FFTREC.FFTSSAJA; /* Sfty stk adj A*/
      FF0HW06.FFTSSAJB = FFTREC.FFTSSAJB; /* Sfty stk adj B*/
      FF0HW06.FFTSSAJC = FFTREC.FFTSSAJC; /* Sfty stk adj C*/
      FF0HW06.FFTSSAJD = FFTREC.FFTSSAJD; /* Sfty stk adj D*/

    end

    FF0HS02(); /* Sum domestic category forecast*/

    FF0HW04.FF6PRPFC[FF0HWCOL] = FF7REC.FF6PRPFC; /* Mstr prop fcst*/

    FF0HS18(); /* ===> Back out Mstr Sls Fcst*/

    FF0HW05.FF6SLFCT[FF0HWCOL] = FF7REC.FF6SLFCT; /* Mstr sls fcst*/

    if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
      FF0HW05.FF7RVFCT[FF0HWCOL] = FF7REC.FF7RVFCT; /* Rvse dmd fcst*/
    end

    FF0HW06.FF6PRFCT[FF0HWCOL] = FF7REC.FF6PRFCT; /* Dom prod fcst*/

    if (FFRREC.FF4FCTMO > FF0HW01.FFQMBYMO) /* If GT buy month*/
      FF0HS03(); /* Sum NIL cat fcst GT buy*/
    else
      FF0HS25(); /* Sum NIL cat fcst LE buy*/
    end

    FF0HW06.FF0HWNIL[FF0HWCOL] = FF7REC.FF6PRFCT; /* NIL production*/

    FF0HS04(); /* Sum invoice/order quantities*/

    if (FF0HW00.FF0HWCOL > 1) /* Not first column*/

      FF0HS05(); /* Sum one year ago history*/

    end

    if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/

      FF0HS06(); /* Sum category shipment history*/

      FF0HW00.FH5MSHQT = FH6REC.FH5MSHQT - FH6REC.FH5RTSQT;
      FF0HW05.FH5MSHQT[FF0HWCOL] = FF0HW00.FH5MSHQT; /* Shipped*/

    else

      FF0HS07(); /* Sum next three months forecast*/

      FF0HW00.FF0HWASL = FF7REC.FF6SLFCT; /* Sales forecast*/

    end

  else

    if (FFRREC.FF4FCTMO >= FFQREC.FFQCURMO) /* Fcst mo GE current*/

      FF0HS08(); /* Select style group adjustments*/

      FF0HW04.FFTFUADJ = FFUREC.FFTFUADJ; /* Futr tot adj*/
      FF0HW05.FFTFRADJ = FFUREC.FFTFRADJ; /* Fill rate adj*/
      FF0HW06.FFTSSAJA = FFUREC.FFTSSAJA; /* Sfty stk adj A*/
      FF0HW06.FFTSSAJB = FFUREC.FFTSSAJB; /* Sfty stk adj B*/
      FF0HW06.FFTSSAJC = FFUREC.FFTSSAJC; /* Sfty stk adj C*/
      FF0HW06.FFTSSAJD = FFUREC.FFTSSAJD; /* Sfty stk adj D*/

    end

    if (FF0HW00.FF0HWCOL > 1) /* Not first column*/

      FF0HS02(); /* Sum domestic category forecast*/

      FF0HW05.FF7RVFCT[FF0HWCOL] = FF7REC.FF7RVFCT; /* Rvse dmd fcst*/

    end

    FF0HS09(); /* Sum domestic group forecast*/

    FF0HW04.FF6PRPFC[FF0HWCOL] = FF8REC.FF6PRPFC; /* Mstr prop fcst*/

    FF0HS19(); /* ===> Back out Mstr Sls Fcst*/

    FF0HW05.FF6SLFCT[FF0HWCOL] = FF8REC.FF6SLFCT; /* Mstr sls fcst*/

    FF0HW06.FF6PRFCT[FF0HWCOL] = FF8REC.FF6PRFCT; /* Dom prod fcst*/

    if (FFRREC.FF4FCTMO > FF0HW01.FFQMBYMO) /* If GT buy month*/
      FF0HS10(); /* Sum NIL group fcst GT buy*/
    else
      FF0HS30(); /* Sum NIL group fcst LE buy*/
    end

    FF0HW06.FF0HWNIL[FF0HWCOL] = FF8REC.FF6PRFCT; /* NIL production*/

    FF0HS04(); /* Sum invoice/order quantities*/

    if (FF0HW00.FF0HWCOL > 1) /* Not first column*/

      FF0HS05(); /* Sum one year ago history*/

      FF0HS06(); /* Sum two years ago history*/

    end

    if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/

      FF0HS11(); /* Sum group shipment history*/

      FF0HW00.FH5MSHQT = FH5REC.FH5MSHQT - FH5REC.FH5RTSQT;
      FF0HW05.FH5MSHQT[FF0HWCOL] = FF0HW00.FH5MSHQT; /* Shipped*/

    else

      FF0HS12(); /* Sum next three months forecast*/

      FF0HW00.FF0HWASL = FF8REC.FF6SLFCT; /* Sales forecast*/

    end

  end

  if (FF0HW06.FFTSSAJA != 0 /* Sfty stk adj A NE zero*/
   || FF0HW06.FFTSSAJB != 0 /* or sfty stk adj B NE zero*/
   || FF0HW06.FFTSSAJC != 0 /* or sfty stk adj C NE zero*/
   || FF0HW06.FFTSSAJD != 0) /* or sfty stk adj D NE zero*/

    FF0HW00.FF6SFSTK = FFRREC.FF6SFSTK; /* Sfty stk*/

    if (FF0HW06.FFTSSAJA != 0) /* Sfty stk adj A NE zero*/

      FFQREC.SY2SSCIN = "A"; /* Safety stock class indicator*/

      FF0HS13(); /* Summarize safety stock class*/

      FF0HW06.FF0HWSSA = FFRREC.FF6SFSTK; /* Sfty stk*/

    end

    if (FF0HW06.FFTSSAJB != 0) /* Sfty stk adj B NE zero*/

      FFQREC.SY2SSCIN = "B"; /* Safety stock class indicator*/

      FF0HS13(); /* Summarize safety stock class*/

      FF0HW06.FF0HWSSB = FFRREC.FF6SFSTK; /* Sfty stk*/

    end

    if (FF0HW06.FFTSSAJC != 0) /* Sfty stk adj C NE zero*/

      FFQREC.SY2SSCIN = "C"; /* Safety stock class indicator*/

      FF0HS13(); /* Summarize safety stock class*/

      FF0HW06.FF0HWSSC = FFRREC.FF6SFSTK; /* Sfty stk*/

    end

    if (FF0HW06.FFTSSAJD != 0) /* Sfty stk adj D NE zero*/

      FFQREC.SY2SSCIN = "D"; /* Safety stock class indicator*/

      FF0HS13(); /* Summarize safety stock class*/

      FF0HW06.FF0HWSSD = FFRREC.FF6SFSTK; /* Sfty stk*/

    end

    FFRREC.FF6SFSTK = FF0HW00.FF6SFSTK; /* Sfty stk*/

  end

  FF0HS14(); /* Save item information*/

  FF0HW00.FF0HWCOL = FF0HW00.FF0HWCOL + 1; /* Current column*/

end // end FF0H117

// Close summary worksheet cursor
Function FF0H118()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "FF2930" ("C1", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "118"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0H118

// Process 2nd & 3rd year's sesns
Function FF0H119()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FF0HW01.CACHGFL = "N"; /* Data was obtained switch*/
  FF0HW00.FF0HWFMO = 0; /* ===>  number of months formatted*/

  FF0H112(); /* Open summary worksheet cursor*/

  FF0HW00.FF0HWSWC = "N"; /* Summary cursor EOF switch*/
  FF0HW00.FF0HWSIX = 1; /* Season index*/
  FF0HW00.FF0HWMSC = 0; /* Mos in sesn counter*/

  FF0H113(); /* Fetch next summary worksheet*/
   /* -------======> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FF0HW00.FF0HWSWC == "N" /* Until end of cursor*/
   && FF0HW00.FF0HWFMO <= 12) /* ===> months formatted*/

    if (FF0HW00.FF0HWMSC == FF0HW00.FF0HWMIS[FF0HWSIX]) /* If sesn end*/

      FF0H115(); /* Calculate season totals*/

      FF0HW00.FF0HWSIX = FF0HW00.FF0HWSIX + 1; /* Incrmt sesn index*/
      FF0HW00.FF0HWMSC = 0; /* Mos in sesn counter*/

    end

    FF0HW00.FF0HWFMO = FF0HW00.FF0HWFMO + 1; /* ===> months formatted*/
    FF0HW00.FF0HWMSC = FF0HW00.FF0HWMSC + 1; /* Mos in sesn counter*/

    FF0H117(); /* ====> Save item information*/

    /* ------------------------------------------------------------*/
      /* The next two statements re-set fields used in the re-calc*/
      /* of fill rate within the subroutine ff2930*/
    /* ------------------------------------------------------------*/

    FFQREC.FFQMBYMO = -1; /* Main buy mo*/
    FFQREC.FFQABYMO = FFWREC.FFQMBYMO; /* Actl buy mo*/

    FF0H113(); /* Fetch next summary worksheet*/
    /* -------======> Driving Read*/

  end /* ===> Until end of cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FF0H118(); /* Close summary worksheet cursor*/

  FF0H115(); /* Calculate season totals*/

   /* ------------------------------------------------------------*/
   /* Determine the maximum beginning column for scrolling.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWMAX = FF0HW00.FF0HWCOL - 8; /* Maximum beginning column*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWSWR = "N"; /* Request for data switch*/
  FF0HW01.CACHGFL = "Y"; /* Data was obtained switch*/

  exit stack; /* ===> to process the current map*/


end // end FF0H119

// Format and converse the map
Function FF0H120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0HW00.FF0HWSWF == "Y") /* Map must be formatted*/
      FF0H121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FF0H122(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0HM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0HM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0HM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0HM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0HM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0HM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0HM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0HM001.CAITEM; /* Application data*/


end // end FF0H120

// Format the display data
Function FF0H121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0HM001 initial; /* M001 input/output area*/

  FF0HW00.FF0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HM001.FF0HWPAG = FF0HW00.FF0HWPAG; /* Page number*/

  FF0HM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0HM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0HM001.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0HM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0HM001.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0HM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0HM001.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0HM001.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0HM001.FFQMBYMO = FF0HW01.FFQMBYMO; /* Main buy mo*/

   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0HW01.CACHGFL != "Y") /* No modifiable data exists*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Format the percentage fields in the CARRYOVER % lines.*/
   /* ------------------------------------------------------------*/

  FF0HM001.FFQOCOFP = FF0HW01.FFQOCOFP; /* Oth caov futpct*/
  FF0HM001.FFQLCOFP = FF0HW01.FFQLCOFP; /* Lst caov futpct*/
  FF0HM001.FFQOCOPP = FF0HW01.FFQOCOPP; /* Oth caov propct*/
  FF0HM001.FFQLCOPP = FF0HW01.FFQLCOPP; /* Lst caov propct*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWRSA = 0; /* Right scroll amount*/
  FF0HW00.FF0HWIXC = 1; /* Column index*/

  FF0HW00.FF0HWCOL = FF0HW00.FF0HWBEG; /* Beginning column*/
  FF0HW00.FF0HWEND = FF0HW00.FF0HWBEG + 7; /* Ending column*/

  while (FF0HW00.FF0HWIXC <= 8) /* ===> Map column index*/

    if (FF0HW00.FF0HWIXC == 1)
      FF0HM001.FF0HWSEA = FF0HW01.FF0HMSCT[FF0HWCOL];
      FF0HW01.FF0HMBSF[FF0HWCOL] = "Y";
    else
      FF0HW01.FF0HMBSF[FF0HWCOL] = "N";
    end

    set FF0HM001.FF0HMMON[FF0HWIXC] skip; /* Forecast month*/

    FF0HM001.FF0HMMON[FF0HWIXC] = FF0HW01.FF0HMMON[FF0HWCOL];
    FF0HM001.FF0HMFCO[FF0HWIXC] = FF0HW01.FF0HMFCO[FF0HWCOL];
    FF0HM001.FF0HMPCO[FF0HWIXC] = FF0HW01.FF0HMPCO[FF0HWCOL];
    FF0HM001.FF0HMFUP[FF0HWIXC] = FF0HW01.FF0HMFUP[FF0HWCOL];
    FF0HM001.FF0HMFUA[FF0HWIXC] = FF0HW01.FF0HMFUA[FF0HWCOL];
    FF0HM001.FF0HMFUI[FF0HWIXC] = FF0HW01.FF0HMFUI[FF0HWCOL];
    FF0HM001.FF0HMFUC[FF0HWIXC] = FF0HW01.FF0HMFUC[FF0HWCOL];
    FF0HM001.FF0HMFUT[FF0HWIXC] = FF0HW01.FF0HMFUT[FF0HWCOL];
    FF0HM001.FF0HMNFP[FF0HWIXC] = FF0HW01.FF0HMNFP[FF0HWCOL];
    FF0HM001.FF0HMNFA[FF0HWIXC] = FF0HW01.FF0HMNFA[FF0HWCOL];
    FF0HM001.FF0HMNFI[FF0HWIXC] = FF0HW01.FF0HMNFI[FF0HWCOL];
    FF0HM001.FF0HMNFC[FF0HWIXC] = FF0HW01.FF0HMNFC[FF0HWCOL];
    FF0HM001.FF0HMNFT[FF0HWIXC] = FF0HW01.FF0HMNFT[FF0HWCOL];


    if (FF0HW01.FF0HMMON[FF0HWCOL] == "  SUB" /**/
     && FF0HW00.FF0HWIXC <= 8                 /**/
     && FF0HW01.FF0HMSCT[FF0HWCOL] == 1)      /* first season*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM001.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "ACCUM") /* ===> end of season data*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM001.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    FF0HW00.FF0HWCOL = FF0HW00.FF0HWCOL + 1; /* Current column*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
    FF0HW00.FF0HWRSA = FF0HW00.FF0HWRSA + 1; /* Right scroll amount*/

  end


end // end FF0H121

// Check change authorization
Function FF0H122()
   /* ------------------------------------------------------------*/
   /* If no data was obtained, autoskip page and scroll amount.*/
   /* ------------------------------------------------------------*/

  if (FF0HW01.CACHGFL != "Y") /* No data was obtained*/

    set FF0HM001.FF0HWPAG skip, bold; /* Page number*/

  end


end // end FF0H122

// Check attention identifier
Function FF0H130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0HM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0HM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0S"; /* Return to application*/
      COMMAREA.CAITEM = "FF0HM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0C"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0H130

// Reset highlighted fields
Function FF0H140()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0HM001.FF0HWPAG initialAttributes; /* Page number*/

  set FF0HM001.CATOAP initialAttributes; /* TO application*/
  set FF0HM001.CAITEM initialAttributes; /* Application data*/


end // end FF0H140

// Verify the entered data
Function FF0H150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0HM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FF0HM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0H151(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0H152(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0H153(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0H154(); /* Verify M001 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0H150

// Verify page request
Function FF0H151()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no more pages.*/
   /* ------------------------------------------------------------*/

  if (FF0HW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0HM001.FF0HWPAG < 1 /* Less than minimum*/
   || FF0HM001.FF0HWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    set FF0HM001.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0H151

// Verify scroll request
Function FF0H152()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (FF0HW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "152"; /* Module identification*/

    if (converseVar.eventKey is pf10) /* Scroll left request*/

      converseLib.validationFailed(23); /* Unable to scroll left*/
    else
      converseLib.validationFailed(24); /* Unable to scroll right*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0HW00.FF0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0HW00.FF2NSEAS == 1 /* One season per year*/
     && FF0HW00.FF0HWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "152"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FF0HW00.FF0HWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "152"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FF0HW00.FF0HWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "152"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FF0HW00.FF0HWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "152"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM001.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    set FF0HM001.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H152

// Verify print request
Function FF0H153()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no data to process.*/
   /* ------------------------------------------------------------*/

  if (FF0HW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(208); /* No data to process*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM001.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    set FF0HM001.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H153

// Verify M001 changed fields
Function FF0H154()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM001.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FF0HM001.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H154

// Process valid input request
Function FF0H160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0HW00.FF0HWPAD = +1; /* Page direction*/

    if (FF0HM001.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page specified*/

      FF0HW00.FF0HWPAG = FF0HM001.FF0HWPAG; /* Page number*/
    else
      FF0HW00.FF0HWPAG = FF0HW00.FF0HWPAG + FF0HW00.FF0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0HW00.FF0HWDIX = FF0HW00.FF0HWBEG - 1;
    FF0HW00.FF0HWLSA = 1;

    while (FF0HW00.FF0HWDIX > 0
     && FF0HW01.FF0HMBSF[FF0HWDIX] != "Y")
      FF0HW00.FF0HWLSA = FF0HW00.FF0HWLSA + 1;
      FF0HW00.FF0HWDIX = FF0HW00.FF0HWDIX - 1;
    end

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG - FF0HW00.FF0HWLSA;

    if (FF0HW00.FF0HWBEG < 1) /* Beginning LT minimum*/

      FF0HW00.FF0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "160"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG + FF0HW00.FF0HWRSA;

    if (FF0HW00.FF0HWCOL <= 60) /* columns not yet all obtained*/

      FF0HS20(); /* check for 2nd or 3rd year*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0H161(); /* Submit print request*/

    return; /* Return to previous process*/

  end

end // end FF0H160

// Submit print worksheet request
Function FF0H161()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF0H162(); /* format production jcl*/
    else
      FF0H163(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "161"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF0H161

// Submit prod JCL FF1901
Function FF0H162()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0HT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/

      FF0HW09.FF0HWBGM = FFWREC.FFABEGMO;
      FF0HW09.FF2NSEAS = FF0HW00.FF2NSEAS;
      FF0HW09.FF0HWMIS[1] = FF0HW00.FF0HWMIS[1];
      FF0HW09.FF0HWMIS[2] = FF0HW00.FF0HWMIS[2];
      FF0HW09.FF0HWMIS[3] = FF0HW00.FF0HWMIS[3];
      FF0HW09.FF0HWMIS[4] = FF0HW00.FF0HWMIS[4];
      TA6REC.TARJCL[TA6INDEX] = FF0HW09.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0HT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0HT.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0HT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Background Job Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF0H162

// Submit test JCL FF1901
Function FF0H163()
   /* submit test jcl*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0HT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/

      FF0HW09.FF0HWBGM = FFWREC.FFABEGMO;
      FF0HW09.FF2NSEAS = FF0HW00.FF2NSEAS;
      FF0HW09.FF0HWMIS[1] = FF0HW00.FF0HWMIS[1];
      FF0HW09.FF0HWMIS[2] = FF0HW00.FF0HWMIS[2];
      FF0HW09.FF0HWMIS[3] = FF0HW00.FF0HWMIS[3];
      FF0HW09.FF0HWMIS[4] = FF0HW00.FF0HWMIS[4];
      TA6REC.TARJCL[TA6INDEX] = FF0HW09.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0HT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0HT5O.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0HT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Background Job Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "163"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF0H163

// Display CURRENT DEMAND PROP
Function FF0H200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0H220(); /* Format and display the map*/

  FF0H230(); /* Check attention identifier*/

  FF0H240(); /* Reset fields to normal intensity*/

  FF0H250(); /* Verify the entered data*/

  FF0H260(); /* Process valid input request*/


end // end FF0H200

// Format and converse the map
Function FF0H220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0HW00.FF0HWSWF == "Y") /* Map must be formatted*/
      FF0H221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0HM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0HM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0HM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0HM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0HM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0HM002 alarm; /* Indicate sound alarm*/

  end

  converse FF0HM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0HM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0HM002.CAITEM; /* Application data*/


end // end FF0H220

// Format the display data
Function FF0H221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0HM002 initial; /* M002 input/output area*/

  FF0HW00.FF0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HM002.FF0HWPAG = FF0HW00.FF0HWPAG; /* Page number*/

  FF0HM002.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0HM002.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0HM002.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0HM002.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0HM002.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0HM002.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0HM002.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0HM002.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0HM002.FFQMBYMO = FF0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWRSA = 0; /* Right scroll amount*/
  FF0HW00.FF0HWIXC = 1; /* Column index*/

  FF0HW00.FF0HWCOL = FF0HW00.FF0HWBEG; /* Beginning column*/
  FF0HW00.FF0HWEND = FF0HW00.FF0HWBEG + 7; /* Ending column*/

  while (FF0HW00.FF0HWIXC <= 8) /* ===> Column index*/

    if (FF0HW00.FF0HWIXC == 1)
      FF0HM002.FF0HWSEA = FF0HW01.FF0HMSCT[FF0HWCOL];
      FF0HW01.FF0HMBSF[FF0HWCOL] = "Y";
    else
      FF0HW01.FF0HMBSF[FF0HWCOL] = "N";
    end

    set FF0HM002.FF0HMMON[FF0HWIXC] skip; /* Forecast month*/

    FF0HM002.FF0HMMON[FF0HWIXC] = FF0HW01.FF0HMMON[FF0HWCOL];
    FF0HM002.FF0HMPRP[FF0HWIXC] = FF0HW02.FF0HMPRP[FF0HWCOL];
    FF0HM002.FF0HMPRA[FF0HWIXC] = FF0HW02.FF0HMPRA[FF0HWCOL];
    FF0HM002.FF0HMPRI[FF0HWIXC] = FF0HW02.FF0HMPRI[FF0HWCOL];
    FF0HM002.FF0HMPRC[FF0HWIXC] = FF0HW02.FF0HMPRC[FF0HWCOL];
    FF0HM002.FF0HMPRT[FF0HWIXC] = FF0HW02.FF0HMPRT[FF0HWCOL];
    FF0HM002.FF0HMNPP[FF0HWIXC] = FF0HW02.FF0HMNPP[FF0HWCOL];
    FF0HM002.FF0HMNPA[FF0HWIXC] = FF0HW02.FF0HMNPA[FF0HWCOL];
    FF0HM002.FF0HMNPI[FF0HWIXC] = FF0HW02.FF0HMNPI[FF0HWCOL];
    FF0HM002.FF0HMNPC[FF0HWIXC] = FF0HW02.FF0HMNPC[FF0HWCOL];
    FF0HM002.FF0HMNPT[FF0HWIXC] = FF0HW02.FF0HMNPT[FF0HWCOL];

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "  SUB" /**/
     && FF0HW00.FF0HWIXC <= 8                 /**/
     && FF0HW01.FF0HMSCT[FF0HWCOL] == 1)      /* first season*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM002.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "ACCUM") /* ===> end of season data*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM002.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    FF0HW00.FF0HWCOL = FF0HW00.FF0HWCOL + 1; /* Current column*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
    FF0HW00.FF0HWRSA = FF0HW00.FF0HWRSA + 1; /* Right scroll amount*/

  end


end // end FF0H221

// Check attention identifier
Function FF0H230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0HM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0HM002.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0S"; /* Return to application*/
      COMMAREA.CAITEM = "FF0HM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0C"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0H230

// Reset highlighted fields
Function FF0H240()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0HM002.FF0HWPAG initialAttributes; /* Page number*/

  set FF0HM002.CATOAP initialAttributes; /* TO application*/
  set FF0HM002.CAITEM initialAttributes; /* Application data*/


end // end FF0H240

// Verify the entered data
Function FF0H250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0HM002.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "250"; /* Module identification*/
    set FF0HM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0H251(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0H252(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/
    FF0H253(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0H254(); /* Verify M002 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0H250

// Verify page request
Function FF0H251()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0HM002.FF0HWPAG < 1 /* Less than minimum*/
   || FF0HM002.FF0HWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FF0HM002.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0H251

// Verify scroll request
Function FF0H252()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0HW00.FF0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0HW00.FF2NSEAS == 1 /* One season per year*/
     && FF0HW00.FF0HWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "252"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FF0HW00.FF0HWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "252"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FF0HW00.FF0HWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "252"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FF0HW00.FF0HWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "252"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM002.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    set FF0HM002.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H252

// Verify print request
Function FF0H253()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM002.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "253"; /* Module identification*/
    set FF0HM002.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H253

// Verify M002 changed fields
Function FF0H254()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM002.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "254"; /* Module identification*/
    set FF0HM002.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H254

// Process valid input request
Function FF0H260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FF0HM002.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page specified*/

      if (FF0HM002.FF0HWPAG < FF0HW00.FF0HWPAG) /* Page backward*/

        FF0HW00.FF0HWPAD = -1; /* Page direction*/
      else
        FF0HW00.FF0HWPAD = +1; /* Page direction*/

      end

      FF0HW00.FF0HWPAG = FF0HM002.FF0HWPAG; /* Page number*/

    else

      FF0HW00.FF0HWPAG = FF0HW00.FF0HWPAG + FF0HW00.FF0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0HW00.FF0HWDIX = FF0HW00.FF0HWBEG - 1;
    FF0HW00.FF0HWLSA = 1;

    while (FF0HW00.FF0HWDIX > 0
     && FF0HW01.FF0HMBSF[FF0HWDIX] != "Y")
      FF0HW00.FF0HWLSA = FF0HW00.FF0HWLSA + 1;
      FF0HW00.FF0HWDIX = FF0HW00.FF0HWDIX - 1;
    end

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG - FF0HW00.FF0HWLSA;

    if (FF0HW00.FF0HWBEG < 1) /* Beginning LT minimum*/

      FF0HW00.FF0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "260"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG + FF0HW00.FF0HWRSA;

    if (FF0HW00.FF0HWCOL <= 60) /* columns not yet all obtained*/

      FF0HS20(); /* check for 2nd or 3rd year*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0H161(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FF0H260

// Display CURRENT DEMAND TOTAL
Function FF0H300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0H320(); /* Format and display the map*/

  FF0H330(); /* Check attention identifier*/

  FF0H340(); /* Reset fields to normal intensity*/

  FF0H350(); /* Verify the entered data*/

  FF0H360(); /* Process valid input request*/


end // end FF0H300

// Format and converse the map
Function FF0H320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0HW00.FF0HWSWF == "Y") /* Map must be formatted*/
      FF0H321(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0HM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0HM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0HM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0HM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0HM003.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0HM003 alarm; /* Indicate sound alarm*/

  end

  converse FF0HM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0HM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0HM003.CAITEM; /* Application data*/


end // end FF0H320

// Format the display data
Function FF0H321()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0HM003 initial; /* M003 input/output area*/

  FF0HW00.FF0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HM003.FF0HWPAG = FF0HW00.FF0HWPAG; /* Page number*/

  FF0HM003.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0HM003.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0HM003.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0HM003.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0HM003.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0HM003.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0HM003.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0HM003.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0HM003.FFQMBYMO = FF0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWRSA = 0; /* Right scroll amount*/
  FF0HW00.FF0HWIXC = 1; /* Column index*/

  FF0HW00.FF0HWCOL = FF0HW00.FF0HWBEG; /* Beginning column*/
  FF0HW00.FF0HWEND = FF0HW00.FF0HWBEG + 7; /* Ending column*/

  while (FF0HW00.FF0HWIXC <= 8) /* ===> Column index*/

    if (FF0HW00.FF0HWIXC == 1)
      FF0HM003.FF0HWSEA = FF0HW01.FF0HMSCT[FF0HWCOL];
      FF0HW01.FF0HMBSF[FF0HWCOL] = "Y";
    else
      FF0HW01.FF0HMBSF[FF0HWCOL] = "N";
    end

    set FF0HM003.FF0HMMON[FF0HWIXC] skip; /* Forecast month*/

    FF0HM003.FF0HMMON[FF0HWIXC] = FF0HW01.FF0HMMON[FF0HWCOL];
    FF0HM003.FF0HMTDP[FF0HWIXC] = FF0HW03.FF0HMTDP[FF0HWCOL];
    FF0HM003.FF0HMTDA[FF0HWIXC] = FF0HW03.FF0HMTDA[FF0HWCOL];
    FF0HM003.FF0HMTDI[FF0HWIXC] = FF0HW03.FF0HMTDI[FF0HWCOL];
    FF0HM003.FF0HMTDC[FF0HWIXC] = FF0HW03.FF0HMTDC[FF0HWCOL];
    FF0HM003.FF0HMTDT[FF0HWIXC] = FF0HW03.FF0HMTDT[FF0HWCOL];
    FF0HM003.FF0HWCAP[FF0HWIXC] = FF0HW03.FF0HWCAP[FF0HWCOL];
    FF0HM003.FF0HMTAF[FF0HWIXC] = FF0HW03.FF0HMTAF[FF0HWCOL];
    FF0HM003.FF0HMTAP[FF0HWIXC] = FF0HW03.FF0HMTAP[FF0HWCOL];

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "  SUB" /**/
     && FF0HW00.FF0HWIXC <= 8                 /**/
     && FF0HW01.FF0HMSCT[FF0HWCOL] == 1)      /* first season*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM003.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "ACCUM") /* ===> end of season data*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM003.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    FF0HW00.FF0HWCOL = FF0HW00.FF0HWCOL + 1; /* Current column*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
    FF0HW00.FF0HWRSA = FF0HW00.FF0HWRSA + 1; /* Right scroll amount*/

  end


end // end FF0H321

// Check attention identifier
Function FF0H330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0HM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0HM003.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0S"; /* Return to application*/
      COMMAREA.CAITEM = "FF0HM003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0C"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0H330

// Reset highlighted fields
Function FF0H340()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0HM003.FF0HWPAG initialAttributes; /* Page number*/

  set FF0HM003.CATOAP initialAttributes; /* TO application*/
  set FF0HM003.CAITEM initialAttributes; /* Application data*/


end // end FF0H340

// Verify the entered data
Function FF0H350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0HM003.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "350"; /* Module identification*/
    set FF0HM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0H351(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0H352(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0H353(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0H354(); /* Verify M003 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0H350

// Verify page request
Function FF0H351()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0HM003.FF0HWPAG < 1 /* Less than minimum*/
   || FF0HM003.FF0HWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "351"; /* Module identification*/
    set FF0HM003.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0H351

// Verify scroll request
Function FF0H352()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0HW00.FF0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0HW00.FF2NSEAS == 1 /* One season per year*/
     && FF0HW00.FF0HWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "352"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FF0HW00.FF0HWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "352"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FF0HW00.FF0HWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "352"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FF0HW00.FF0HWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "352"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM003.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    set FF0HM003.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H352

// Verify print request
Function FF0H353()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM003.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "353"; /* Module identification*/
    set FF0HM003.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H353

// Verify M003 changed fields
Function FF0H354()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM003.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "354"; /* Module identification*/
    set FF0HM003.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H354

// Process valid input request
Function FF0H360()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FF0HM003.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page specified*/

      if (FF0HM003.FF0HWPAG < FF0HW00.FF0HWPAG) /* Page backward*/

        FF0HW00.FF0HWPAD = -1; /* Page direction*/
      else
        FF0HW00.FF0HWPAD = +1; /* Page direction*/

      end

      FF0HW00.FF0HWPAG = FF0HM003.FF0HWPAG; /* Page number*/

    else

      FF0HW00.FF0HWPAG = FF0HW00.FF0HWPAG + FF0HW00.FF0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0HW00.FF0HWDIX = FF0HW00.FF0HWBEG - 1;
    FF0HW00.FF0HWLSA = 1;

    while (FF0HW00.FF0HWDIX > 0
     && FF0HW01.FF0HMBSF[FF0HWDIX] != "Y")
      FF0HW00.FF0HWLSA = FF0HW00.FF0HWLSA + 1;
      FF0HW00.FF0HWDIX = FF0HW00.FF0HWDIX - 1;
    end

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG - FF0HW00.FF0HWLSA;

    if (FF0HW00.FF0HWBEG < 1) /* Beginning LT minimum*/

      FF0HW00.FF0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "360"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG + FF0HW00.FF0HWRSA;

    if (FF0HW00.FF0HWCOL <= 60) /* columns not yet all obtained*/

      FF0HS20(); /* check for 2nd or 3rd year*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0H161(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FF0H360

// Display DEMAND FORECAST
Function FF0H400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0H420(); /* Format and display the map*/

  FF0H430(); /* Check attention identifier*/

  FF0H440(); /* Reset fields to normal intensity*/

  FF0H450(); /* Verify the entered data*/

  FF0H460(); /* Process valid input request*/


end // end FF0H400

// Format and converse the map
Function FF0H420()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0HW00.FF0HWSWF == "Y") /* Map must be formatted*/
      FF0H421(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0HM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0HM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0HM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0HM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0HM004.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0HM004 alarm; /* Indicate sound alarm*/

  end

  converse FF0HM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0HM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0HM004.CAITEM; /* Application data*/


end // end FF0H420

// Format the display data
Function FF0H421()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0HM004 initial; /* M001 input/output area*/

  FF0HW00.FF0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HM004.FF0HWPAG = FF0HW00.FF0HWPAG; /* Page number*/

  FF0HM004.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0HM004.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0HM004.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0HM004.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0HM004.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0HM004.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0HM004.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0HM004.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0HM004.FFQMBYMO = FF0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the future year indicator in the HIST FUT % line.*/
   /* ------------------------------------------------------------*/

  if (FF2REC.FF2ALCAT != "  ")
    FF0HM004.FF0HMFAI = "A"; /* Futr alt cat indicator*/
    FF0HM004.FF0HMPAI = "A"; /* Prop alt cat indicator*/
  end

  FF0HM004.FF2FUIND = FF0HW04.FF2FUIND; /* Futr yr ind*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWRSA = 0; /* Right scroll amount*/
  FF0HW00.FF0HWIXC = 1; /* Column index*/

  FF0HW00.FF0HWCOL = FF0HW00.FF0HWBEG; /* Beginning column*/
  FF0HW00.FF0HWEND = FF0HW00.FF0HWBEG + 7; /* Ending column*/

  while (FF0HW00.FF0HWIXC <= 8) /* ===> Column index*/

    if (FF0HW00.FF0HWIXC == 1)
      FF0HM004.FF0HWSEA = FF0HW01.FF0HMSCT[FF0HWCOL];
      FF0HW01.FF0HMBSF[FF0HWCOL] = "Y";
    else
      FF0HW01.FF0HMBSF[FF0HWCOL] = "N";
    end

    set FF0HM004.FF0HMMON[FF0HWIXC] skip; /* Forecast month*/

    FF0HM004.FF0HMMON[FF0HWIXC] = FF0HW01.FF0HMMON[FF0HWCOL];
    FF0HM004.FF0HMDFU[FF0HWIXC] = FF0HW04.FF0HMDFU[FF0HWCOL];
    FF0HM004.FF0HMDNF[FF0HWIXC] = FF0HW04.FF0HMDNF[FF0HWCOL];
    FF0HM004.FF0HMDTF[FF0HWIXC] = FF0HW04.FF0HMDTF[FF0HWCOL];
    FF0HM004.FF0HMDPR[FF0HWIXC] = FF0HW04.FF0HMDPR[FF0HWCOL];
    FF0HM004.FF0HMDNP[FF0HWIXC] = FF0HW04.FF0HMDNP[FF0HWCOL];
    FF0HM004.FF0HMDTP[FF0HWIXC] = FF0HW04.FF0HMDTP[FF0HWCOL];
    FF0HM004.FF0HMDCP[FF0HWIXC] = FF0HW04.FF0HMDCP[FF0HWCOL];
    FF0HM004.FF0HMPCF[FF0HWIXC] = FF0HW04.FF0HMPCF[FF0HWCOL];
    FF0HM004.FF0HMPRF[FF0HWIXC] = FF0HW04.FF0HMPRF[FF0HWCOL];
    FF0HM004.FF0HWDFF[FF0HWIXC] = FF0HW04.FF0HWDFF[FF0HWCOL];
    FF0HM004.FF0HWDHF[FF0HWIXC] = FF0HW04.FF0HWDHF[FF0HWCOL];
    FF0HM004.FF0HWDFI[FF0HWIXC] = FF0HW04.FF0HWDFI[FF0HWCOL];
    FF0HM004.FF0HWDHI[FF0HWIXC] = FF0HW04.FF0HWDHI[FF0HWCOL];

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "  SUB" /**/
     && FF0HW00.FF0HWIXC <= 8                 /**/
     && FF0HW01.FF0HMSCT[FF0HWCOL] == 1)      /* first season*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM004.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "ACCUM") /* ===> end of season data*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM004.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    FF0HW00.FF0HWCOL = FF0HW00.FF0HWCOL + 1; /* Current column*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
    FF0HW00.FF0HWRSA = FF0HW00.FF0HWRSA + 1; /* Right scroll amount*/

  end


end // end FF0H421

// Check attention identifier
Function FF0H430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0HM004.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0HM004.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* Return to application*/
      COMMAREA.CAITEM = "FF0HM004"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0C"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "430"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0H430

// Reset highlighted fields
Function FF0H440()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0HM004.FF0HWPAG initialAttributes; /* Page number*/

  set FF0HM004.CATOAP initialAttributes; /* TO application*/
  set FF0HM004.CAITEM initialAttributes; /* Application data*/


end // end FF0H440

// Verify the entered data
Function FF0H450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0HM004.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "450"; /* Module identification*/
    set FF0HM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0H451(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0H452(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/
    FF0H453(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0H454(); /* Verify M004 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0H450

// Verify page request
Function FF0H451()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0HM004.FF0HWPAG < 1 /* Less than minimum*/
   || FF0HM004.FF0HWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "451"; /* Module identification*/
    set FF0HM004.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0H451

// Verify scroll request
Function FF0H452()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0HW00.FF0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0HW00.FF2NSEAS == 1 /* One season per year*/
     && FF0HW00.FF0HWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "452"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FF0HW00.FF0HWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "452"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FF0HW00.FF0HWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "452"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FF0HW00.FF0HWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "452"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM004.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    set FF0HM004.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

end // end FF0H452

// Verify print request
Function FF0H453()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM004.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "453"; /* Module identification*/
    set FF0HM004.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H453

// Verify M004 changed fields
Function FF0H454()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM004.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "454"; /* Module identification*/
    set FF0HM004.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H454

// Process valid input request
Function FF0H460()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FF0HM004.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page specified*/

      if (FF0HM004.FF0HWPAG < FF0HW00.FF0HWPAG) /* Page backward*/

        FF0HW00.FF0HWPAD = -1; /* Page direction*/
      else
        FF0HW00.FF0HWPAD = +1; /* Page direction*/

      end

      FF0HW00.FF0HWPAG = FF0HM004.FF0HWPAG; /* Page number*/

    else

      FF0HW00.FF0HWPAG = FF0HW00.FF0HWPAG + FF0HW00.FF0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0HW00.FF0HWDIX = FF0HW00.FF0HWBEG - 1;
    FF0HW00.FF0HWLSA = 1;

    while (FF0HW00.FF0HWDIX > 0
     && FF0HW01.FF0HMBSF[FF0HWDIX] != "Y")
      FF0HW00.FF0HWLSA = FF0HW00.FF0HWLSA + 1;
      FF0HW00.FF0HWDIX = FF0HW00.FF0HWDIX - 1;
    end

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG - FF0HW00.FF0HWLSA;

    if (FF0HW00.FF0HWBEG < 1) /* Beginning LT minimum*/

      FF0HW00.FF0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "460"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG + FF0HW00.FF0HWRSA;

    if (FF0HW00.FF0HWCOL <= 60) /* columns not yet all obtained*/

      FF0HS20(); /* check for 2nd or 3rd year*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0H161(); /* Submit print request*/

    return; /* Return to previous process*/

  end



end // end FF0H460

// Display SALES FORECAST
Function FF0H500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0H520(); /* Format and display the map*/

  FF0H530(); /* Check attention identifier*/

  FF0H540(); /* Reset fields to normal intensity*/

  FF0H550(); /* Verify the entered data*/

  FF0H560(); /* Process valid input request*/


end // end FF0H500

// Format and converse the map
Function FF0H520()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0HW00.FF0HWSWF == "Y") /* Map must be formatted*/
      FF0H521(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0HM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0HM005.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0HM005.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0HM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0HM005.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0HM005 alarm; /* Indicate sound alarm*/

  end

  converse FF0HM005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0HM005.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0HM005.CAITEM; /* Application data*/


end // end FF0H520

// Format the display data
Function FF0H521()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0HM005 initial; /* M001 input/output area*/

  FF0HW00.FF0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HM005.FF0HWPAG = FF0HW00.FF0HWPAG; /* Page number*/

  FF0HM005.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0HM005.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0HM005.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0HM005.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0HM005.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0HM005.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0HM005.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0HM005.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0HM005.FFQMBYMO = FF0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the demand year indicator in the HIST SEAS IDX line.*/
   /* ------------------------------------------------------------*/

  if (FF2REC.FF2ALCAT != "  ")
    FF0HM005.FF0HMDAI = "A"; /* Demand alt cat indicator*/
  end

  FF0HM005.FF2DMIND = FF0HW05.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWRSA = 0; /* Right scroll amount*/
  FF0HW00.FF0HWIXC = 1; /* Column index*/

  FF0HW00.FF0HWCOL = FF0HW00.FF0HWBEG; /* Beginning column*/
  FF0HW00.FF0HWEND = FF0HW00.FF0HWBEG + 7; /* Ending column*/

  while (FF0HW00.FF0HWIXC <= 8) /* ===> Column index*/

    if (FF0HW00.FF0HWIXC == 1)
      FF0HM005.FF0HWSEA = FF0HW01.FF0HMSCT[FF0HWCOL];
      FF0HW01.FF0HMBSF[FF0HWCOL] = "Y";
    else
      FF0HW01.FF0HMBSF[FF0HWCOL] = "N";
    end

    set FF0HM005.FF0HMMON[FF0HWIXC] skip; /* Forecast month*/

    FF0HM005.FF0HMMON[FF0HWIXC] = FF0HW01.FF0HMMON[FF0HWCOL];
    FF0HM005.FF0HMFCD[FF0HWIXC] = FF0HW05.FF0HMFCD[FF0HWCOL];
    FF0HM005.FF0HMMDM[FF0HWIXC] = FF0HW05.FF0HMMDM[FF0HWCOL];
    FF0HM005.FF0HWFSI[FF0HWIXC] = FF0HW05.FF0HWFSI[FF0HWCOL];
    FF0HM005.FF0HWHSI[FF0HWIXC] = FF0HW05.FF0HWHSI[FF0HWCOL];
    FF0HM005.FF0HWRSI[FF0HWIXC] = FF0HW05.FF0HWRSI[FF0HWCOL];
    FF0HM005.FF0HMRVF[FF0HWIXC] = FF0HW05.FF0HMRVF[FF0HWCOL];
    FF0HM005.FF0HMFFR[FF0HWIXC] = FF0HW05.FF0HMFFR[FF0HWCOL];
    FF0HM005.FF0HWHFR[FF0HWIXC] = FF0HW05.FF0HWHFR[FF0HWCOL];
    FF0HM005.FF0HMCSF[FF0HWIXC] = FF0HW05.FF0HMCSF[FF0HWCOL];
    FF0HM005.FF0HMMSL[FF0HWIXC] = FF0HW05.FF0HMMSL[FF0HWCOL];

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "  SUB" /**/
     && FF0HW00.FF0HWIXC <= 8                 /**/
     && FF0HW01.FF0HMSCT[FF0HWCOL] == 1)      /* first season*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM005.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "ACCUM") /* ===> end of season data*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM005.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    FF0HW00.FF0HWCOL = FF0HW00.FF0HWCOL + 1; /* Current column*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
    FF0HW00.FF0HWRSA = FF0HW00.FF0HWRSA + 1; /* Right scroll amount*/

  end


end // end FF0H521

// Check attention identifier
Function FF0H530()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0HM005.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0HM005.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* Return to application*/
      COMMAREA.CAITEM = "FF0HM005"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0C"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0H530

// Reset highlighted fields
Function FF0H540()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0HM005.FF0HWPAG initialAttributes; /* Page number*/

  set FF0HM005.CATOAP initialAttributes; /* TO application*/
  set FF0HM005.CAITEM initialAttributes; /* Application data*/


end // end FF0H540

// Verify the entered data
Function FF0H550()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0HM005.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "550"; /* Module identification*/
    set FF0HM005.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0H551(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0H552(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0H553(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0H554(); /* Verify M005 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0H550

// Verify page request
Function FF0H551()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0HM005.FF0HWPAG < 1 /* Less than minimum*/
   || FF0HM005.FF0HWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "551"; /* Module identification*/
    set FF0HM005.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0H551

// Verify scroll request
Function FF0H552()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0HW00.FF0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0HW00.FF2NSEAS == 1 /* One season per year*/
     && FF0HW00.FF0HWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "552"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FF0HW00.FF0HWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "552"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FF0HW00.FF0HWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "552"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FF0HW00.FF0HWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "552"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM005.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    set FF0HM005.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H552

// Verify print request
Function FF0H553()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM005.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "553"; /* Module identification*/
    set FF0HM005.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H553

// Verify M005 changed fields
Function FF0H554()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM005.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "554"; /* Module identification*/
    set FF0HM005.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H554

// Process valid input request
Function FF0H560()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FF0HM005.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page specified*/

      if (FF0HM005.FF0HWPAG < FF0HW00.FF0HWPAG) /* Page backward*/

        FF0HW00.FF0HWPAD = -1; /* Page direction*/
      else
        FF0HW00.FF0HWPAD = +1; /* Page direction*/

      end

      FF0HW00.FF0HWPAG = FF0HM005.FF0HWPAG; /* Page number*/

    else

      FF0HW00.FF0HWPAG = FF0HW00.FF0HWPAG + FF0HW00.FF0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0HW00.FF0HWDIX = FF0HW00.FF0HWBEG - 1;
    FF0HW00.FF0HWLSA = 1;

    while (FF0HW00.FF0HWDIX > 0
     && FF0HW01.FF0HMBSF[FF0HWDIX] != "Y")
      FF0HW00.FF0HWLSA = FF0HW00.FF0HWLSA + 1;
      FF0HW00.FF0HWDIX = FF0HW00.FF0HWDIX - 1;
    end

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG - FF0HW00.FF0HWLSA;

    if (FF0HW00.FF0HWBEG < 1) /* Beginning LT minimum*/

      FF0HW00.FF0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "560"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG + FF0HW00.FF0HWRSA;

    if (FF0HW00.FF0HWCOL <= 60) /* columns not yet all obtained*/

      FF0HS20(); /* check for 2nd or 3rd year*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0H161(); /* Submit print request*/

    return; /* Return to previous process*/

  end

end // end FF0H560

// Display INVENTORY POSITION
Function FF0H600()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0H620(); /* Format and display the map*/

  FF0H630(); /* Check attention identifier*/

  FF0H640(); /* Reset fields to normal intensity*/

  FF0H650(); /* Verify the entered data*/

  FF0H660(); /* Process valid input request*/


end // end FF0H600

// Format and converse the map
Function FF0H620()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0HW00.FF0HWSWF == "Y") /* Map must be formatted*/
      FF0H621(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0HM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0HM006.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0HM006.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0HM006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0HM006.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0HM006 alarm; /* Indicate sound alarm*/

  end

  converse FF0HM006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0HM006.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0HM006.CAITEM; /* Application data*/


end // end FF0H620

// Format the display data
Function FF0H621()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0HM006 initial; /* M001 input/output area*/

  FF0HW00.FF0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HM006.FF0HWPAG = FF0HW00.FF0HWPAG; /* Page number*/

  FF0HM006.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0HM006.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0HM006.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0HM006.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0HM006.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0HM006.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0HM006.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0HM006.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0HM006.FFQMBYMO = FF0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the safety stock indicator in the SFTY STOCK line.*/
   /* ------------------------------------------------------------*/

  FF0HM006.SY2SSCIN = FF0HW06.SY2SSCIN; /* Sfty stk ind*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWRSA = 0; /* Right scroll amount*/
  FF0HW00.FF0HWIXC = 1; /* Column index*/

  FF0HW00.FF0HWCOL = FF0HW00.FF0HWBEG; /* Beginning column*/
  FF0HW00.FF0HWEND = FF0HW00.FF0HWBEG + 7; /* Ending column*/

  while (FF0HW00.FF0HWIXC <= 8) /* ===> Column index*/

    if (FF0HW00.FF0HWIXC == 1)
      FF0HM006.FF0HWSEA = FF0HW01.FF0HMSCT[FF0HWCOL];
      FF0HW01.FF0HMBSF[FF0HWCOL] = "Y";
    else
      FF0HW01.FF0HMBSF[FF0HWCOL] = "N";
    end

    set FF0HM006.FF0HMMON[FF0HWIXC] skip; /* Forecast month*/

    FF0HM006.FF0HMMON[FF0HWIXC] = FF0HW01.FF0HMMON[FF0HWCOL];
    FF0HM006.FF0HMCSF[FF0HWIXC] = FF0HW05.FF0HMCSF[FF0HWCOL];
    FF0HM006.FF0HMMSL[FF0HWIXC] = FF0HW05.FF0HMMSL[FF0HWCOL];
    FF0HM006.FF0HMDUE[FF0HWIXC] = FF0HW06.FF0HMDUE[FF0HWCOL];
    FF0HM006.FF0HMQBY[FF0HWIXC] = FF0HW06.FF0HMQBY[FF0HWCOL];
    FF0HM006.FF0HMTBY[FF0HWIXC] = FF0HW06.FF0HMTBY[FF0HWCOL];
    FF0HM006.FF0HMBAL[FF0HWIXC] = FF0HW06.FF0HMBAL[FF0HWCOL];
    FF0HM006.FF0HMSBY[FF0HWIXC] = FF0HW06.FF0HMSBY[FF0HWCOL];
    FF0HM006.FF0HMFCT[FF0HWIXC] = FF0HW06.FF0HMFCT[FF0HWCOL];
    FF0HM006.FF0HWTUR[FF0HWIXC] = FF0HW06.FF0HWTUR[FF0HWCOL];
    FF0HM006.FF0HMDIR[FF0HWIXC] = FF0HW06.FF0HMDIR[FF0HWCOL];
    FF0HM006.FF0HMNIL[FF0HWIXC] = FF0HW06.FF0HMNIL[FF0HWCOL];

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "  SUB" /* Season subtotal*/
     || FF0HW01.FF0HMMON[FF0HWCOL] == "GRAND") /* or grand total*/

       /* NEXT SENTENCE*/

    else

      FF0HM006.FF0HMINB[FF0HWIXC] = FF0HW06.FF0HMINB[FF0HWCOL];
      FF0HM006.FF0HMSUP[FF0HWIXC] = FF0HW06.FF0HMSUP[FF0HWCOL];
      FF0HM006.FF0HMINE[FF0HWIXC] = FF0HW06.FF0HMINE[FF0HWCOL];
      FF0HM006.FF0HMSTK[FF0HWIXC] = FF0HW06.FF0HMSTK[FF0HWCOL];

    end

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "  SUB" /**/
     && FF0HW00.FF0HWIXC <= 8                 /**/
     && FF0HW01.FF0HMSCT[FF0HWCOL] == 1)      /* first season*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM006.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    if (FF0HW01.FF0HMMON[FF0HWCOL] == "ACCUM") /* ===> end of season data*/
      FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      while (FF0HW00.FF0HWIXC <= 8) /* Column index*/
        set FF0HM006.FF0HMMON[FF0HWIXC] skip, invisible; /* Forecast month*/
        FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
      end
    end

    FF0HW00.FF0HWCOL = FF0HW00.FF0HWCOL + 1; /* Current column*/
    FF0HW00.FF0HWIXC = FF0HW00.FF0HWIXC + 1; /* Column index*/
    FF0HW00.FF0HWRSA = FF0HW00.FF0HWRSA + 1; /* Right scroll amount*/

  end


end // end FF0H621

// Check attention identifier
Function FF0H630()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0HM006.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0HM006.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "630"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* Return to application*/
      COMMAREA.CAITEM = "FF0HM006"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0C"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "630"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0H630

// Reset highlighted fields
Function FF0H640()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0HM006.FF0HWPAG initialAttributes; /* Page number*/

  set FF0HM006.CATOAP initialAttributes; /* TO application*/
  set FF0HM006.CAITEM initialAttributes; /* Application data*/


end // end FF0H640

// Verify the entered data
Function FF0H650()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0HM006.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "650"; /* Module identification*/
    set FF0HM006.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0H651(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0H652(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to update was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* Update masters*/
    FF0H653(); /* Verify update request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0H654(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0H655(); /* Verify M006 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0H650

// Verify page request
Function FF0H651()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0HM006.FF0HWPAG < 1 /* Less than minimum*/
   || FF0HM006.FF0HWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "651"; /* Module identification*/
    set FF0HM006.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0H651

// Verify scroll request
Function FF0H652()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0HW00.FF0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0HW00.FF2NSEAS == 1 /* One season per year*/
     && FF0HW00.FF0HWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "652"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FF0HW00.FF0HWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "652"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FF0HW00.FF0HWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "652"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    if (FF0HW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FF0HW00.FF0HWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "652"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM006.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    set FF0HM006.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

end // end FF0H652

// Verify update request
Function FF0H653()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM006.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "653"; /* Module identification*/
    set FF0HM006.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H653

// Verify print request
Function FF0H654()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM006.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "654"; /* Module identification*/
    set FF0HM006.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H654

// Verify M006 changed fields
Function FF0H655()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0HM006.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "655"; /* Module identification*/
    set FF0HM006.FF0HWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0H655

// Process valid input request
Function FF0H660()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0HW00.FF0HWPAD = -1; /* Page direction*/

    if (FF0HM006.FF0HWPAG != FF0HW00.FF0HWPAG) /* Page specified*/

      FF0HW00.FF0HWPAG = FF0HM006.FF0HWPAG; /* Page number*/
    else
      FF0HW00.FF0HWPAG = FF0HW00.FF0HWPAG + FF0HW00.FF0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0HW00.FF0HWDIX = FF0HW00.FF0HWBEG - 1;
    FF0HW00.FF0HWLSA = 1;

    while (FF0HW00.FF0HWDIX > 0
     && FF0HW01.FF0HMBSF[FF0HWDIX] != "Y")
      FF0HW00.FF0HWLSA = FF0HW00.FF0HWLSA + 1;
      FF0HW00.FF0HWDIX = FF0HW00.FF0HWDIX - 1;
    end

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG - FF0HW00.FF0HWLSA;

    if (FF0HW00.FF0HWBEG < 1) /* Beginning LT minimum*/

      FF0HW00.FF0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "660"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0HW00.FF0HWBEG = FF0HW00.FF0HWBEG + FF0HW00.FF0HWRSA;

    if (FF0HW00.FF0HWCOL <= 60) /* columns not yet all obtained*/

      FF0HS20(); /* check for 2nd or 3rd year*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If update was requested, apply the global adjustments.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* Update masters*/

    XX0XS01(); /* Obtain current date/time*/

    FF0H661(); /* Apply the global adjustments*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

    FFWREC.XXXMODID = "660"; /* Module identification*/
    FFWREC.XXXMSGNO = 287; /* Global adjustments applied*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0H161(); /* Submit print request*/

    return; /* Return to previous process*/

  end

end // end FF0H660

// Apply the global adjustments
Function FF0H661()
   /* ------------------------------------------------------------*/
   /* Call the subroutine to apply the global adjustments.*/
   /* ------------------------------------------------------------*/

  set FF0HW10 empty; /* Subroutine parameters*/

  FF0HW10.FFTGCNBR = FFWREC.FFTGCNBR; /* Glbl nbr*/
  FF0HW10.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0HW10.XPCCD = FFWREC.XPCCD; /* Product category code*/

  if (FFWREC.SYBSTGNB == " ") /* No style group number*/

    FF0HW10.FF0HWLVL = "1"; /* Subroutine update level*/
  else
    FF0HW10.FF0HWLVL = "2"; /* Subroutine update level*/
    FF0HW10.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/

  end

  FF0HW10.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF0HW10.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "FF1700" (FF0HW10, SQLCA, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && FF0HW10.FF0HWRCD == "0")       /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "661"; /* Module identification*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && FF0HW10.FF0HWRCD == "2"        /* and unexpected DB2 error*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(47); /* Data in use by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

     /* NEXT SENTENCE*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "APPLY THE GLOBAL ADJUSTMENTS";
    TAEREC.TAEDESC1 = "SUBROUTINE FF1700 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(1); /* System error occurred*/

  exit stack; /* Exit to display map*/


end // end FF0H661

// Select category adjustments
Function FF0HS01()
   /* ------------------------------------------------------------*/
   /* Select the row from the global change by category table.*/
   /* ------------------------------------------------------------*/

  set FFTREC empty; /* Clear row storage area*/

  FFTREC.FFTGCNBR = FFWREC.FFTGCNBR; /* Global change number*/
  FFTREC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/

  try
    call "IO3670" ("S ", SQLCA, FFTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CATEGORY ADJUSTMENTS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFTREC.FFTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS01

// Sum domestic category forecast
Function FF0HS02()
   /* ------------------------------------------------------------*/
   /* Select the row from the category by month master table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM DOMESTIC CATEGORY FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS02

// Sum NIL cat fcst GT buy
Function FF0HS03()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by category table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "20"; /* Division group code*/
  FF7REC.XCTCD = "*"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NIL CATEGORY FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS03

// Sum invoice/order quantities
Function FF0HS04()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0HS04"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWHIN = FH3REC.FH2SHP; /* Invoiced qty*/

  if (FFFREC.FFFBEGMO < 199206) /* before 199206 use actual future*/
    FF0HW00.FF0HWHOR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Ordered qty*/
    FF0HW00.FF0HWHOR = FF0HW00.FF0HWHOR + FH3REC.FH1ALQTY;
    FF0HW00.FF0HWHOR = FF0HW00.FF0HWHOR + FH3REC.FH3CNCL;
  else
    FF0HW00.FF0HWHOR = FH3REC.FH-FRZ-PRAL-QTY +                        FH3REC.FH-FRZ-ALOC-QTY +                        FH3REC.FH-FRZ-SHP-QTY +                        FH3REC.FH-FRZ-CNCL-QTY;
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0HS04"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWHIN = FF0HW00.FF0HWHIN + FH3REC.FH2SHP; /* Invoiced qty*/

  FF0HW00.FF0HWHOR = FF0HW00.FF0HWHOR + FH3REC.FH2SHP; /* Ordered qty*/
  FF0HW00.FF0HWHOR = FF0HW00.FF0HWHOR + FH3REC.FH1PAQTY;
  FF0HW00.FF0HWHOR = FF0HW00.FF0HWHOR + FH3REC.FH1ALQTY;
  FF0HW00.FF0HWHOR = FF0HW00.FF0HWHOR + FH3REC.FH3CNCL;


end // end FF0HS04

// Sum one year ago history
Function FF0HS05()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0HS05"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical futures quantity.*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FF0HW00.FF0HWHFU = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist futr qty*/
    FF0HW00.FF0HWHFU = FF0HW00.FF0HWHFU + FH3REC.FH1ALQTY;
    FF0HW00.FF0HWHFU = FF0HW00.FF0HWHFU + FH3REC.FH3CNCL;
  else
    FF0HW00.FF0HWHFU = FH3REC.FH-FRZ-PRAL-QTY +                       FH3REC.FH-FRZ-ALOC-QTY +                       FH3REC.FH-FRZ-SHP-QTY +                       FH3REC.FH-FRZ-CNCL-QTY;
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0HS05"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWHPR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist prop qty*/
  FF0HW00.FF0HWHPR = FF0HW00.FF0HWHPR + FH3REC.FH1ALQTY;
  FF0HW00.FF0HWHPR = FF0HW00.FF0HWHPR + FH3REC.FH3CNCL;

   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWHDM = FF0HW00.FF0HWHFU + FF0HW00.FF0HWHPR;
                                   /* Hist demand qty*/


end // end FF0HS05

// Sum category shipment history
Function FF0HS06()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by category table.*/
   /* ------------------------------------------------------------*/

  set FH6REC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/

  FH6REC.XDVCD = "10"; /* Division group code*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH6REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH6REC.XLCCD = "10"; /* Life cycle code*/
  FH6REC.XQACD = "01"; /* Quality code*/
  FH6REC.XCTCD = "USA"; /* Foreign country code*/
  FH6REC.YSMXOT = "*"; /* Order type group code*/
  FH6REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0HS06"; /* Calling process*/

  XSFFS52(); /* Summarize VCTSHP01 quantities*/


end // end FF0HS06

// Sum next three months category
Function FF0HS07()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by category table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FF0HW00.FF0HWDAT = FFRREC.FF4FCTMO; /* Forecast month*/
  FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM + 1; /* Beginning month*/
  if (FF0HW00.FF0HWDMM > 12) /* Month GT maximum*/
    FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM - 12; /* Decrement month*/
    FF0HW00.FF0HWDYY = FF0HW00.FF0HWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFBEGMO = FF0HW00.FF0HWDAT; /* Beginning month*/

  FF0HW00.FF0HWDAT = FFRREC.FF4FCTMO; /* Forecast month*/
  FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM + 3; /* Ending month*/
  if (FF0HW00.FF0HWDMM > 12) /* Month GT maximum*/
    FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM - 12; /* Decrement month*/
    FF0HW00.FF0HWDYY = FF0HW00.FF0HWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFENDMO = FF0HW00.FF0HWDAT; /* Ending month*/

  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NEXT THREE MONTHS CATEGORY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS07

// Select style group adjustments
Function FF0HS08()
   /* ------------------------------------------------------------*/
   /* Select the row from the global change by style group table.*/
   /* ------------------------------------------------------------*/

  set FFUREC empty; /* Clear row storage area*/

  FFUREC.FFTGCNBR = FFWREC.FFTGCNBR; /* Global change number*/
  FFUREC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/

  try
    call "IO3690" ("S ", SQLCA, FFUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT STYLE GROUP ADJUSTMENTS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFUREC.FFUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS08

// Sum domestic group forecast
Function FF0HS09()
   /* ------------------------------------------------------------*/
   /* Select the row from the month master by style/color table.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FF8REC.YSMXDV = "10"; /* Division group code*/
  FF8REC.XCTCD = "USA"; /* Foreign country code*/
  FF8REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group*/
  FF8REC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/

  try
    call "IO3730" ("S ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM DOMESTIC GROUP FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS09

// Sum NIL group fcst GT buy
Function FF0HS10()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by style group table.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FF8REC.YSMXDV = "20"; /* Division group code*/
  FF8REC.XCTCD = "*"; /* Foreign country code*/
  FF8REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NIL GROUP FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS10

// Sum group shipment history
Function FF0HS11()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by style/color table.*/
   /* ------------------------------------------------------------*/

  set FH5REC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "SG"; /* Function code*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/

  FH5REC.SY1STNBR = FFWREC.SYBSTGNB; /* Style group number*/
  FH5REC.XPRCD = FFWREC.YPGCD; /* Product type code*/
  FH5REC.XDVCD = FFWREC.XPCCD; /* Category code*/
  FH5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Current date*/
  FH5REC.XLCCD = "10"; /* Life cycle code*/
  FH5REC.XQACD = "01"; /* Quality code*/
  FH5REC.YSMXOT = "*"; /* Order type group code*/
  FH5REC.FH1PNAC = "*"; /* National account flag*/

  TA1REC.TA1PGMNM = "FF0HS11"; /* Calling process*/

  XSFFS54(); /* Summarize VSYSHP01 quantities*/


end // end FF0HS11

// Sum next three months group
Function FF0HS12()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by style/color table.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FF0HW00.FF0HWDAT = FFRREC.FF4FCTMO; /* Forecast month*/
  FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM + 1; /* Beginning month*/
  if (FF0HW00.FF0HWDMM > 12) /* Month GT maximum*/
    FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM - 12; /* Decrement month*/
    FF0HW00.FF0HWDYY = FF0HW00.FF0HWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFBEGMO = FF0HW00.FF0HWDAT; /* Beginning month*/

  FF0HW00.FF0HWDAT = FFRREC.FF4FCTMO; /* Forecast month*/
  FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM + 3; /* Ending month*/
  if (FF0HW00.FF0HWDMM > 12) /* Month GT maximum*/
    FF0HW00.FF0HWDMM = FF0HW00.FF0HWDMM - 12; /* Decrement month*/
    FF0HW00.FF0HWDYY = FF0HW00.FF0HWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFENDMO = FF0HW00.FF0HWDAT; /* Ending month*/

  FF8REC.YSMXDV = "10"; /* Division group code*/
  FF8REC.XCTCD = "USA"; /* Foreign country code*/
  FF8REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NEXT THREE MONTHS GROUP";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS12

// Summarize safety stock class
Function FF0HS13()
   /* ------------------------------------------------------------*/
   /* Summarize safety stock quantity for the indicated class.*/
   /* ------------------------------------------------------------*/

  try
    call "FF2930" ("SS", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUMMARIZE SAFETY STOCK CLASS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS13

// ==> Save item information <==
Function FF0HS14()
   /* ------------------------------------------------------------*/
   /* If no room for subtotal/accum total, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWCOL > 61) /* No room for totals*/

    FFWREC.XXXMODID = "S14"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "SHORT RANGE WORKSHEETS EXCEEDS 3 YEARS";
    TAEREC.TAEDESC2 = FFQREC.FFQKEY2; /* Selection parameters*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "SAVE ITEM INFORMATION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the M001 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FFZINDMO = FFRREC.FF4FCTMO; /* Forecast month*/
  FF0HW01.FF4FCTMO[FF0HWCOL] = FF0HW00.FFZINDMO; /* Forecast month*/
  FF0HW01.FF0HMMON[FF0HWCOL] = FF0HW00.FF0HWMON; /* Forecast YYMM*/
  FF0HW01.FF0HMSCT[FF0HWCOL] = FF0HW00.FF0HWSCT; /* Season count*/


   /* ---> Non-National ACCTs Future*/
   /* ---> -------------------------*/
   /* ---> pre-allocated*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* ===> Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    set FH3REC empty; /* ===> Init call record*/
    FH3REC.FH1PNAC = "N"; /* ===> National account flag*/
    FH3REC.YSMXOT = "FT"; /* ===> Order type group code*/
    FF0HS71(); /* =======> get history QTYs for fut*/
                                   /* non-national (cat )*/
    FFXREC.FFXNUMB = FH3REC.FH1PAQTY; /* ===> Pral Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRPFUDM; /* Pral futr dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRPFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRPFUDM = FF0HW07.FFRPFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> allocated*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH1ALQTY; /* alloc Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRAFUDM; /* Aloc futr dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRAFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRAFUDM = FF0HW07.FFRAFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> invoiced*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH2SHP; /* shp  Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRIFUDM; /* Ivc futr dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRIFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRIFUDM = FF0HW07.FFRIFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> cancelled*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH3CNCL; /* cncl Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRCFUDM; /* Cncl futr dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRCFUDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRCFUDM = FF0HW07.FFRCFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FF0HW01.FFRPFUDM[FF0HWCOL]; /* Futures tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRAFUDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRIFUDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRCFUDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMFUT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FF0HWFUT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWFUT = FF0HW07.FF0HWFUT + FFXREC.FFXROUND; /* Subtotal*/
  end


   /* ---> National ACCTs Future*/
   /* ---> ---------------------*/
   /* ---> pre-allocated*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* ===> Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    set FH3REC empty; /* ===> Init call record*/
    FH3REC.FH1PNAC = "Y"; /* ===> National account flag*/
    FH3REC.YSMXOT = "FT"; /* ===> Order type group code*/
    FF0HS71(); /* =======> get history QTYs for fut*/
                                   /* national (cat )*/
    FFXREC.FFXNUMB = FH3REC.FH1PAQTY; /* ===> Pral Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRPNFDM; /* Pral natl fdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRPNFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRPNFDM = FF0HW07.FFRPNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> allocated*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH1ALQTY; /* alloc Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRANFDM; /* Aloc natl fdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRANFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRANFDM = FF0HW07.FFRANFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> invoiced*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH2SHP; /* shp  Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRINFDM; /* Ivc natl fdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRINFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRINFDM = FF0HW07.FFRINFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> cancelled*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH3CNCL; /* cncl Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRCNFDM; /* Cncl natl fdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FFRCNFDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRCNFDM = FF0HW07.FFRCNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FF0HW01.FFRPNFDM[FF0HWCOL]; /* Natl acct fut tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRANFDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRINFDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRCNFDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW01.FF0HMNFT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW01.FF0HWNFT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWNFT = FF0HW07.FF0HWNFT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M002 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

   /* ---> Non-National Acct Prop.*/
   /* ---> -----------------------*/
   /* ---> pre-allocated*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    set FH3REC empty; /* ===> Init call record*/
    FH3REC.FH1PNAC = "N"; /* National account flag*/
    FH3REC.YSMXOT = "PR"; /* Order type group code*/
    FF0HS71(); /* =======> get history QTYs for fut*/
                                   /* non-national (cat )*/
    FFXREC.FFXNUMB = FH3REC.FH1PAQTY; /* Pral Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRPPRDM; /* Pral prop dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRPPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRPPRDM = FF0HW07.FFRPPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> allocated*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH1ALQTY; /* alloc Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRAPRDM; /* Aloc prop dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRAPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRAPRDM = FF0HW07.FFRAPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> invoiced*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH2SHP; /* shp  Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRIPRDM; /* Ivc prop dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRIPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRIPRDM = FF0HW07.FFRIPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> cancelled*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH3CNCL; /* cncl Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRCPRDM; /* Cncl prop dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRCPRDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRCPRDM = FF0HW07.FFRCPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FF0HW02.FFRPPRDM[FF0HWCOL]; /* Prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRAPRDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRIPRDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRCPRDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMPRT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FF0HWPRT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWPRT = FF0HW07.FF0HWPRT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> National Acct Prop.*/
   /* ---> -------------------*/
   /* ---> pre-allocated*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    set FH3REC empty; /* ===> Init call record*/
    FH3REC.FH1PNAC = "Y"; /* National account flag*/
    FH3REC.YSMXOT = "PR"; /* Order type group code*/
    FF0HS71(); /* =======> get history QTYs for fut*/
                                   /* national (cat )*/
    FFXREC.FFXNUMB = FH3REC.FH1PAQTY; /* Pral Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRPNPDM; /* Pral natl pdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRPNPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRPNPDM = FF0HW07.FFRPNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> allocated*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH1ALQTY; /* alloc Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRANPDM; /* Aloc natl pdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRANPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRANPDM = FF0HW07.FFRANPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> invoiced*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH2SHP; /* shipped Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRINPDM; /* Invoice natl pdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRINPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRINPDM = FF0HW07.FFRINPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> cancelled*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   && FFWREC.SYBSTGNB == " ")            /* ===> style group not requested*/
    FFXREC.FFXNUMB = FH3REC.FH3CNCL; /* cncl Qtys "history"*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRCNPDM; /* Cncl natl pdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FFRCNPDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRCNPDM = FF0HW07.FFRCNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FF0HW02.FFRPNPDM[FF0HWCOL]; /* Natl acct prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRANPDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRINPDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRCNPDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW02.FF0HMNPT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW02.FF0HWNPT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWNPT = FF0HW07.FF0HWNPT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M003 information from the previous maps.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0HW01.FFRPFUDM[FF0HWCOL]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRPNFDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRPPRDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRPNPDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWTDP = FF0HW07.FF0HWTDP + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0HW01.FFRAFUDM[FF0HWCOL]; /* Total allocated*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRANFDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRAPRDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRANPDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDA[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDA[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWTDA = FF0HW07.FF0HWTDA + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0HW01.FFRIFUDM[FF0HWCOL]; /* Total invoiced*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRINFDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRIPRDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRINPDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDI[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDI[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWTDI = FF0HW07.FF0HWTDI + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0HW01.FFRCFUDM[FF0HWCOL]; /* Total cancelled*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRCNFDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRCPRDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRCNPDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDC[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWTDC = FF0HW07.FF0HWTDC + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ===>Total demand*/
      /* --------------*/
  FFXREC.FFXNUMB = FF0HW03.FF0HWTDP[FF0HWCOL]; /* Total demand*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW03.FF0HWTDA[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW03.FF0HWTDI[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW03.FF0HWTDC[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTDT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTDT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWTDT = FF0HW07.FF0HWTDT + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FF0HW03.FF0HWTDT[FF0HWCOL] != 0) /* Total demand NE zero*/
    FF0HW00.FF0HWPCT = FF0HW03.FF0HWTDC[FF0HWCOL] * 100; /* Cancellation %*/
    FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT / FF0HW03.FF0HWTDT[FF0HWCOL], -mathLib.decimals(FF0HW00.FF0HWPCT));
    FF0HW03.FF0HWCAP[FF0HWCOL] = FF0HW00.FF0HWPCT;
  end

   /* ===>Tot active fut*/
      /* --------------*/
  FFXREC.FFXNUMB = FF0HW01.FFRPFUDM[FF0HWCOL]; /* Tot active fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRAFUDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRIFUDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRPNFDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRANFDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRINFDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTAF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTAF[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWTAF = FF0HW07.FF0HWTAF + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ===>Tot active prop*/
      /* --------------*/
  FFXREC.FFXNUMB = FF0HW02.FFRPPRDM[FF0HWCOL]; /* Tot active prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRAPRDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRIPRDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRPNPDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRANPDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRINPDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW03.FF0HMTAP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW03.FF0HWTAP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWTAP = FF0HW07.FF0HWTAP + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M004 information from the previous maps.*/
   /* ------------------------------------------------------------*/

   /* ===>Fut dmd*/
      /* -------*/
  if (FFRREC.FF4FCTMO > FF0HW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Fut dmd*/
  else
    FFXREC.FFXNUMB = FF0HW01.FFRPFUDM[FF0HWCOL]; /* Fut dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRAFUDM[FF0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRIFUDM[FF0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDFU[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDFU[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWDFU = FF0HW07.FF0HWDFU + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ===>Natl fut*/
      /* --------*/
  if (FFRREC.FF4FCTMO > FF0HW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Natl fut*/
  else
    FFXREC.FFXNUMB = FF0HW01.FFRPNFDM[FF0HWCOL]; /* Natl fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRANFDM[FF0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFRINFDM[FF0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDNF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDNF[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWDNF = FF0HW07.FF0HWDNF + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ===>Total fut*/
      /* ---------*/
  if (FFRREC.FF4FCTMO > FF0HW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = FFRREC.FFRCDMFC - FFRREC.FFRCPRFC; /* Total fut*/
  else
    FFXREC.FFXNUMB = FF0HW04.FF0HWDFU[FF0HWCOL]; /* Total fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW04.FF0HWDNF[FF0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDTF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDTF[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWDTF = FF0HW07.FF0HWDTF + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ===>Prop dmd*/
      /* --------*/
  FFXREC.FFXNUMB = FF0HW02.FFRPPRDM[FF0HWCOL]; /* Prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRAPRDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRIPRDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDPR[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDPR[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWDPR = FF0HW07.FF0HWDPR + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0HW02.FFRPNPDM[FF0HWCOL]; /* Natl prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRANPDM[FF0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW02.FFRINPDM[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDNP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDNP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWDNP = FF0HW07.FF0HWDNP + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0HW04.FF0HWDPR[FF0HWCOL]; /* Total prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW04.FF0HWDNP[FF0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMDTP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF0HWDTP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWDTP = FF0HW07.FF0HWDTP + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FF0HW01.FF4FCTMO[FF0HWCOL] == FF0HW01.FFQCURMO /* Fcst mo EQ contp*/
   && FF0HW01.FF4FCTMO[FF0HWCOL] == XX0XW01.XX0XWCYM) /* and EQ current*/
    FFXREC.FFXNUMB = FF0HW04.FF0HWDPR[FF0HWCOL] * FF0HW00.FF0HWDIM;
    if (FF0HW00.FF0HWDTD == 0) /* avoid divide by 0*/
      FFXREC.FFXNUMB = 0;
    else
      FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FF0HW00.FF0HWDTD, -mathLib.decimals(FFXREC.FFXNUMB));
    end
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW04.FF0HWDNP[FF0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0HW04.FF0HMDCP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW04.FF0HWDCP[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ===>Mstr prop fcst*/
      /* --------------*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO) /* Fcst mo LT current*/
    FFXREC.FFXNUMB = FF0HW04.FF0HWDTP[FF0HWCOL]; /* Mstr = curr*/
  else
    FFXREC.FFXNUMB = FFRREC.FFRCPRFC; /* Curr to Mstr prop fcst*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMPRF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FF6PRPFC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FF0HW07.FF6PRPFC = FF0HW07.FF6PRPFC + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ===>Fcst fut %*/
      /* ----------*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
      if (FFRREC.FFRCDMFC != 0) /* and curr dmd fcst NE zero*/
        FF0HW00.FF0HWPCT = FF0HW04.FF0HWDTF[FF0HWCOL];
        FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT * 100 / FFRREC.FFRCDMFC, -mathLib.decimals(FF0HW00.FF0HWPCT));
        FF0HW04.FF0HWDFF[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Fcst fut %*/
        FF0HW07.FF0HWFRF = FF0HW07.FF0HWFRF + FF0HW04.FF0HWDTF[FF0HWCOL];
      end
    else
      if (FF0HW03.FF0HWTDT[FF0HWCOL] != 0) /* and total net books NE zero*/
        FF0HW00.FF0HWPCT = FF0HW01.FF0HWFUT[FF0HWCOL]         + FF0HW01.FF0HWNFT[FF0HWCOL];
        FF0HW00.FF0HWPCT = FF0HW00.FF0HWPCT * 100;
        FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT         / FF0HW03.FF0HWTDT[FF0HWCOL], -mathLib.decimals(FF0HW00.FF0HWPCT));
        FF0HW04.FF0HWDFF[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Fcst fut %*/
        FF0HW07.FF0HWFRF = FF0HW07.FF0HWFRF + FF0HW01.FF0HWFUT[FF0HWCOL]         + FF0HW01.FF0HWNFT[FF0HWCOL];
      end
    end

    if (FF0HW04.FFTFUADJ != 0) /* Futr tot adj NE zero*/

      /* ------------------------------------------------------------*/
          /* Make adjustments to the Fcst fut % and related fields*/
          /* based on global data parameter and the buy mo date*/
      /* ------------------------------------------------------------*/

      FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT * FF0HW04.FFTFUADJ / 100, -mathLib.decimals(FF0HW00.FF0HWPCT));
      FF0HW00.FF0HWPCT = FF0HW00.FF0HWPCT + FF0HW04.FF0HWDFF[FF0HWCOL];
      FF0HW04.FF0HWDFF[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Fcst fut %*/

      if (FFRREC.FF4FCTMO > FF0HW01.FFQMBYMO) /* ===> Fcst mo GT buy*/
        /* ===> adjust futures (calc.)*/
        FFXREC.FFXNUMB = mathLib.round(FFRREC.FFRCDMFC * FF0HW00.FF0HWPCT / 100, -mathLib.decimals(FFXREC.FFXNUMB));
        FF0HW04.FF0HWDTF[FF0HWCOL] = FFXREC.FFXNUMB;
                                   /* Rounded number*/
        XSFFS10(); /* Translate to thousands*/
        FF0HW04.FF0HMDTF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
        FFRREC.FFRCPRFC = FFRREC.FFRCDMFC - FF0HW04.FF0HWDTF[FF0HWCOL];

      else
        /* ===> adjust DMD*/
        if (FF0HW00.FF0HWPCT == 0 /* ===> fut %*/
         || FF0HW04.FF0HWDTF[FF0HWCOL] == 0) /* ===> tot futures*/
          /* ======== Next Sentence =========>*/
        else
          FFRREC.FFRCDMFC = mathLib.round(FF0HW04.FF0HWDTF[FF0HWCOL] * 100 /           FF0HW00.FF0HWPCT, -mathLib.decimals(FFRREC.FFRCDMFC));
          FFRREC.FFRCPRFC = FFRREC.FFRCDMFC - FF0HW04.FF0HWDTF[FF0HWCOL];
        end

      end /* ===> Fcst mo GT buy check*/

    end /* ===> Futr tot adj NE zero*/
  end

   /* ===>Curr prop fcst*/
      /* --------------*/
  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRCPRFC; /* Curr prop fcst*/
  else
    FFXREC.FFXNUMB = FF0HW04.FF0HWDTP[FF0HWCOL]; /* Curr prop fcst*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW04.FF0HMPCF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW04.FFRCPRFC[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FF0HW07.FFRCPRFC = FF0HW07.FFRCPRFC + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    if (FF0HW00.FF0HWHDM > 0) /* Hist demand GT zero*/
      FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWHFU * 100 / FF0HW00.FF0HWHDM, -mathLib.decimals(FF0HW00.FF0HWPCT));
      FF0HW04.FF0HWDHF[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Hist fut %*/
    end
    FF0HW07.FF0HWHFU = FF0HW07.FF0HWHFU + FF0HW00.FF0HWHFU; /* Subtotal*/
  end

  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW04.FF0HWHPR[FF0HWCOL] = FF0HW00.FF0HWHPR; /* Hist prop qty*/
    FF0HW07.FF0HWHPR = FF0HW07.FF0HWHPR + FF0HW00.FF0HWHPR; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M005 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

   /* ===>Curr dmd fcst*/
      /* -------------*/
  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRCDMFC; /* Curr dmd fcst*/
    FF0HW05.FFRCDMFC[FF0HWCOL] = FFRREC.FFRCDMFC; /* Rounded number*/
  else
    FFXREC.FFXNUMB = FF0HW03.FF0HWTDT[FF0HWCOL]; /* Curr dmd fcst*/
    FF0HW05.FFRCDMFC[FF0HWCOL] = FF0HW03.FF0HWTDT[FF0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMFCD[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRCDMFC = FF0HW07.FFRCDMFC + FF0HW05.FFRCDMFC[FF0HWCOL];
  end

  FFXREC.FFXNUMB = FF0HW05.FF7RVFCT[FF0HWCOL]; /* Rvse dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMRVF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FF7RVFCT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF7RVFCT = FF0HW07.FF7RVFCT + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW05.FF0HWHDM[FF0HWCOL] = FF0HW00.FF0HWHDM; /* Hist demand*/
    FF0HW07.FF0HWHDM = FF0HW07.FF0HWHDM + FF0HW00.FF0HWHDM; /* Subtotal*/
  end

   /* ===> Fcst fill rate*/
       /* --------------*/
  if (FFRREC.FF7FLLRT == 0 /* No fcst fill rt*/
   && FF0HW00.FF0HWHOR != 0) /* and ordered NE zero*/
    FF0HW00.FF0HWPCT = FF0HW00.FF0HWHIN * 100; /* Hist invoiced*/
    FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT / FF0HW00.FF0HWHOR, -mathLib.decimals(FF0HW00.FF0HWPCT));
    FFRREC.FF7FLLRT = FF0HW00.FF0HWPCT; /* Fcst fill rt*/
  end
  FF0HW05.FF0HWFFR[FF0HWCOL] = FFRREC.FF7FLLRT; /* Fcst fill rt*/
  if (FF0HW05.FFTFRADJ != 0) /* Fill rt adj NE zero*/
    FF0HW00.FF0HWPCT = FF0HW05.FF0HWFFR[FF0HWCOL];
    FF0HW00.FF0HWPCT = mathLib.round(FF0HW00.FF0HWPCT * FF0HW05.FFTFRADJ / 100, -mathLib.decimals(FF0HW00.FF0HWPCT));
    FF0HW00.FF0HWPCT = FF0HW00.FF0HWPCT + FF0HW05.FF0HWFFR[FF0HWCOL];
    FF0HW05.FF0HWFFR[FF0HWCOL] = FF0HW00.FF0HWPCT; /* Fcst fill rt*/
  end
  FF0HW05.FF0HMFFR[FF0HWCOL] = mathLib.round(FF0HW05.FF0HWFFR[FF0HWCOL] / 1, -mathLib.decimals(FF0HW05.FF0HMFFR[FF0HWCOL]));
   /* ---> prior to curr will be added to totals on re-calc*/
  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FF0HW07.FF0HWFFR = FF0HW07.FF0HWFFR + FF0HW05.FF0HWFFR[FF0HWCOL];
  end

  if (FFRREC.FF4FCTMO == FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FF0HS63(); /* ====> Re-calc fill rate for months*/
                                   /* prior to curr*/
  end


  if (FF0HW00.FF0HWHOR != 0) /* Ordered NE zero*/
    FF0HW00.FF0HWPCT = FF0HW00.FF0HWHIN * 100; /* Hist fill rt*/
    FF0HW05.FF0HWHFR[FF0HWCOL] = mathLib.round(FF0HW00.FF0HWPCT / FF0HW00.FF0HWHOR, -mathLib.decimals(FF0HW05.FF0HWHFR[FF0HWCOL]));
  end
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWHFR = FF0HW07.FF0HWHFR + FF0HW05.FF0HWHFR[FF0HWCOL];
  end

   /* ===> Curr sls fcst*/
       /* -------------*/
  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0HW05.FFRCDMFC[FF0HWCOL]; /* Curr sls fcst*/
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0HW05.FF0HWFFR[FF0HWCOL] / 100, -mathLib.decimals(FFXREC.FFXNUMB));
    FF0HW05.FH5MSHQT[FF0HWCOL] = FFXREC.FFXNUMB;
  else
    FFXREC.FFXNUMB = FF0HW05.FH5MSHQT[FF0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMCSF[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FH5MSHQT = FF0HW07.FH5MSHQT + FF0HW05.FH5MSHQT[FF0HWCOL];
  end

   /* ===> Mstr sls fcst*/
       /* -------------*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   || FFRREC.FF4FCTMO > FF0HW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = FF0HW05.FH5MSHQT[FF0HWCOL];
    FF0HW05.FF6SLFCT[FF0HWCOL] = FF0HW05.FH5MSHQT[FF0HWCOL];
  else
    FFXREC.FFXNUMB = FF0HW05.FF6SLFCT[FF0HWCOL]; /* Mstr sls fcst*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMMSL[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column sub-total*/
    FF0HW07.FF6SLFCT = FF0HW07.FF6SLFCT + FF0HW05.FF6SLFCT[FF0HWCOL];
  end

   /* ===> Mstr dmd fcst*/
       /* -------------*/
  if (FFRREC.FF4FCTMO < FF0HW01.FFQCURMO /* Fcst mo LT current*/
   || FFRREC.FF4FCTMO > FF0HW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = FF0HW05.FFRCDMFC[FF0HWCOL];
  else
    if (FFRREC.FF7FLLRT != 0) /* Fcst fill rt NE zero*/
      FF0HW00.FF0HWPCT = FF0HW05.FF6SLFCT[FF0HWCOL] * 100;
      FFXREC.FFXNUMB = mathLib.round(FF0HW00.FF0HWPCT / FFRREC.FF7FLLRT, -mathLib.decimals(FFXREC.FFXNUMB));
    else
      FFXREC.FFXNUMB = 0; /* Mstr dmd fcst*/
    end
  end
  XSFFS10(); /* Translate to thousands*/
  FF0HW05.FF0HMMDM[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW05.FF0HWMDM[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWMDM = FF0HW07.FF0HWMDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M006 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    if (FFRREC.FF4FCTMO == FF0HW01.FFQCURMO)
      FFXREC.FFXNUMB = FFRREC.FF6BEINV; /* Beg inv*/
    else
      FFXREC.FFXNUMB = FF0HW06.FF0HWINE[FF0HWIXP]; /* Beg inv*/
    end
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW00.FF6SUGBY;

    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMINB[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FF6BEINV[FF0HWCOL] = FFXREC.FFXNUMB; /* Actual number*/
    FF0HW07.FF6BEINV = FF0HW07.FF6BEINV + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    if (FFRREC.FF4FCTMO == FF0HW01.FFQCURMO) /* Fcst mo EQ current*/
      FFXREC.FFXNUMB = FFRREC.FFRPRDDU + FF0HW07.FFRPRDDU; /* Prod due*/
      FF0HW07.FFRPRDDU = 0; /* Clear prior months subtotal*/
    else
      FFXREC.FFXNUMB = FFRREC.FFRPRDDU; /* Prod due*/
    end
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMDUE[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FFRPRDDU[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0HW07.FFRPRDDU = FF0HW07.FFRPRDDU + FFXREC.FFXROUND; /* Subtotal*/
  else
    FF0HW07.FFRPRDDU = FF0HW07.FFRPRDDU + FFRREC.FFRPRDDU; /* Subtotal*/
  end

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRSUBBY; /* Sbmt qtb*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMQBY[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FFRSUBBY[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0HW07.FFRSUBBY = FF0HW07.FFRSUBBY + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRTENBY; /* Tntv qtb*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMTBY[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FFRTENBY[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0HW07.FFRTENBY = FF0HW07.FFRTENBY + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0HW06.FF6BEINV[FF0HWCOL]; /* Supply*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW06.FFRPRDDU[FF0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW06.FFRSUBBY[FF0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW06.FFRTENBY[FF0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMSUP[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FF0HWSUP[FF0HWCOL] = FFXREC.FFXNUMB; /* Actual number*/
    FF0HW07.FF0HWSUP = FF0HW07.FF0HWSUP + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0HW05.FH5MSHQT[FF0HWCOL]; /* Bal to shp*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0HW03.FF0HWTDI[FF0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMBAL[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FG4BALSH[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0HW07.FG4BALSH = FF0HW07.FG4BALSH + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0HW06.FF0HWSUP[FF0HWCOL]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0HW06.FG4BALSH[FF0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMINE[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FF0HWINE[FF0HWCOL] = FFXREC.FFXNUMB; /* Actual number*/
    FF0HW07.FF0HWINE = FF0HW07.FF0HWINE + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    if (FF0HW06.FFTSSAJA != 0) /* Sfty stk adj A NE zero*/
      FFRREC.FF6SFSTK = FFRREC.FF6SFSTK - FF0HW06.FF0HWSSA;
      FF0HW00.FF6SFSTK = FF0HW06.FF0HWSSA;
      FF0HW00.FF6SFSTK = mathLib.round(FF0HW00.FF6SFSTK * FF0HW06.FFTSSAJA / 100, -mathLib.decimals(FF0HW00.FF6SFSTK));
      FF0HW00.FF6SFSTK = FF0HW00.FF6SFSTK + FF0HW06.FF0HWSSA;
      FFRREC.FF6SFSTK = FFRREC.FF6SFSTK + FF0HW00.FF6SFSTK; /* Sfty stk*/
    end
    if (FF0HW06.FFTSSAJB != 0) /* Sfty stk adj B NE zero*/
      FFRREC.FF6SFSTK = FFRREC.FF6SFSTK - FF0HW06.FF0HWSSB;
      FF0HW00.FF6SFSTK = FF0HW06.FF0HWSSB;
      FF0HW00.FF6SFSTK = mathLib.round(FF0HW00.FF6SFSTK * FF0HW06.FFTSSAJB / 100, -mathLib.decimals(FF0HW00.FF6SFSTK));
      FF0HW00.FF6SFSTK = FF0HW00.FF6SFSTK + FF0HW06.FF0HWSSB;
      FFRREC.FF6SFSTK = FFRREC.FF6SFSTK + FF0HW00.FF6SFSTK; /* Sfty stk*/
    end
    if (FF0HW06.FFTSSAJC != 0) /* Sfty stk adj C NE zero*/
      FFRREC.FF6SFSTK = FFRREC.FF6SFSTK - FF0HW06.FF0HWSSC;
      FF0HW00.FF6SFSTK = FF0HW06.FF0HWSSC;
      FF0HW00.FF6SFSTK = mathLib.round(FF0HW00.FF6SFSTK * FF0HW06.FFTSSAJC / 100, -mathLib.decimals(FF0HW00.FF6SFSTK));
      FF0HW00.FF6SFSTK = FF0HW00.FF6SFSTK + FF0HW06.FF0HWSSC;
      FFRREC.FF6SFSTK = FFRREC.FF6SFSTK + FF0HW00.FF6SFSTK; /* Sfty stk*/
    end
    if (FF0HW06.FFTSSAJD != 0) /* Sfty stk adj D NE zero*/
      FFRREC.FF6SFSTK = FFRREC.FF6SFSTK - FF0HW06.FF0HWSSD;
      FF0HW00.FF6SFSTK = FF0HW06.FF0HWSSD;
      FF0HW00.FF6SFSTK = mathLib.round(FF0HW00.FF6SFSTK * FF0HW06.FFTSSAJD / 100, -mathLib.decimals(FF0HW00.FF6SFSTK));
      FF0HW00.FF6SFSTK = FF0HW00.FF6SFSTK + FF0HW06.FF0HWSSD;
      FFRREC.FF6SFSTK = FFRREC.FF6SFSTK + FF0HW00.FF6SFSTK; /* Sfty stk*/
    end
    FFXREC.FFXNUMB = FFRREC.FF6SFSTK; /* Sfty stk*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMSTK[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FF6SFSTK[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0HW07.FF6SFSTK = FF0HW07.FF6SFSTK + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FF6SUGBY; /* Sugg qtb*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMSBY[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FF6SUGBY[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

    if (FFRREC.FF4FCTMO > FF0HW01.FFQMBYMO) /* Fcst mo GT buy*/
      FF0HW07.FF6SUGBY = FF0HW07.FF6SUGBY + FFXREC.FFXROUND; /* Subtotal*/
      FF0HW00.FF6SUGBY = FF0HW06.FF6SUGBY[FF0HWCOL];
    else
      FF0HW00.FF6SUGBY = 0;
    end
  end

  if (FFRREC.FF4FCTMO >= FF0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0HW06.FF6PRFCT[FF0HWCOL]; /* Dom prod fcst*/
    XSFFS10(); /* Translate to thousands*/
    FF0HW06.FF0HMFCT[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0HW06.FF6PRFCT[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0HW07.FF6PRFCT = FF0HW07.FF6PRFCT + FFXREC.FFXROUND; /* Subtotal*/
  end

  FF0HW00.FF0HWASL = FF0HW00.FF0HWASL * 12; /* Inv turns*/
  FF0HW00.FF0HWAIN = FF0HW06.FF0HWINE[FF0HWCOL] * 3;
  if (FF0HWAIN != 0) /* Inventory NE zero*/
    FF0HW06.FF0HWTUR[FF0HWCOL] = mathLib.round(FF0HW00.FF0HWASL / FF0HW00.FF0HWAIN, -mathLib.decimals(FF0HW06.FF0HWTUR[FF0HWCOL]));
  end

  FFXREC.FFXNUMB = FFRREC.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMDIR[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FFRDIRSH[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FFRDIRSH = FF0HW07.FFRDIRSH + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0HW06.FF0HWNIL[FF0HWCOL]; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FF0HW06.FF0HMNIL[FF0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0HW06.FF0HWNIL[FF0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWNIL = FF0HW07.FF0HWNIL + FFXREC.FFXROUND; /* Subtotal*/
  end


   /* ------------------------------------------------------------*/
   /* Save prior month index.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWIXP = FF0HW00.FF0HWCOL;

   /* ------------------------------------------------------------*/
   /* Calculate the number of months for subtotal averaging.*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF0HWCOL > 1) /* Not first column*/
    FF0HW07.FF0HWNMO = FF0HW07.FF0HWNMO + 1; /* Number of months*/
  end

   /* **                                                        ***/
   /* ********************** End of FF0HS14 ***********************/
end // end FF0HS14

// Back out Mstr Sls Fcst
Function FF0HS18()

   /* ------------------------------------------------------------*/
   /* Check to see if the calculated/saved prev fcst mo equal*/
   /* to the fetched row's fcst mo. If it is then save the QTYs*/
   /* in order to back them out of the curr month.*/
   /* ------------------------------------------------------------*/

  if (FF0HW01.FF0HWPMO == FFRREC.FF4FCTMO) /* prior fcst mo eq fcst mo*/
    FF0HW00.FF0HWSF = FF7REC.FF6SLFCT; /* save Mstr sls fcst*/
  end


   /* ------------------------------------------------------------*/
   /* Use the saved master sales forecast from the prior month*/
   /* and Back it out of the Master sales forecast for the*/
   /* Curr month.*/
   /* ------------------------------------------------------------*/

  if (FFRREC.FF4FCTMO == FFQREC.FFQCURMO) /* ===> Fcst mo eq current*/
    FF7REC.FF6SLFCT = FF7REC.FF6SLFCT - FF0HW00.FF0HWSF;
  end

end // end FF0HS18

// Back out Mstr Sls Fcst
Function FF0HS19()

   /* ------------------------------------------------------------*/
   /* Check to see if the calculated/saved prev fcst mo equal*/
   /* to the fetched row's fcst mo. If it is then save the QTYs*/
   /* in order to back them out of the curr month.*/
   /* ------------------------------------------------------------*/

  if (FF0HW01.FF0HWPMO == FFRREC.FF4FCTMO) /* prior fcst mo eq fcst mo*/
    FF0HW00.FF0HWSF = FF8REC.FF6SLFCT; /* save Mstr sls fcst*/
  end


   /* ------------------------------------------------------------*/
   /* Use the saved master sales forecast from the prior month*/
   /* and Back it out of the Master sales forecast for the*/
   /* Curr month.*/
   /* ------------------------------------------------------------*/

  if (FFRREC.FF4FCTMO == FFQREC.FFQCURMO) /* ===> Fcst mo eq current*/
    FF8REC.FF6SLFCT = FF8REC.FF6SLFCT - FF0HW00.FF0HWSF;
  end

end // end FF0HS19

// Determine/set scroll request
Function FF0HS20()
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* and determine whether new data must be selected*/
   /* ------------------------------------------------------------*/

  if (FF0HW00.FF2NSEAS == 1) /* One season per year*/
    if (FF0HW00.FF0HWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FF0HW00.FF0HWCOL > 14)     /* columns not yet all obtained*/
      FF0HW00.FF0HWSWR = "Y"; /* Request for data switch*/
      FF0HW00.FF0HWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end

    if (FF0HW00.FF0HWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FF0HW00.FF0HWCOL > 28)     /* columns not yet all obtained*/
      FF0HW00.FF0HWSWR = "Y"; /* Request for data switch*/
      FF0HW00.FF0HWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end

  if (FF0HW00.FF2NSEAS == 2) /* Two seasons per year*/
    if (FF0HW00.FF0HWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FF0HW00.FF0HWCOL > 16)     /* columns not yet all obtained*/
      FF0HW00.FF0HWSWR = "Y"; /* Request for data switch*/
      FF0HW00.FF0HWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end

    if (FF0HW00.FF0HWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FF0HW00.FF0HWCOL > 32)     /* columns not yet all obtained*/
      FF0HW00.FF0HWSWR = "Y"; /* Request for data switch*/
      FF0HW00.FF0HWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end

  if (FF0HW00.FF2NSEAS == 3) /* Three seasons per year*/
    if (FF0HW00.FF0HWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FF0HW00.FF0HWCOL > 18)     /* columns not yet all obtained*/
      FF0HW00.FF0HWSWR = "Y"; /* Request for data switch*/
      FF0HW00.FF0HWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end

    if (FF0HW00.FF0HWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FF0HW00.FF0HWCOL > 36)     /* columns not yet all obtained*/
      FF0HW00.FF0HWSWR = "Y"; /* Request for data switch*/
      FF0HW00.FF0HWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end

  if (FF0HW00.FF2NSEAS == 4) /* Four seasons per year*/
    if (FF0HW00.FF0HWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FF0HW00.FF0HWCOL > 20)     /* columns not yet all obtained*/
      FF0HW00.FF0HWSWR = "Y"; /* Request for data switch*/
      FF0HW00.FF0HWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end

    if (FF0HW00.FF0HWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FF0HW00.FF0HWCOL > 40)     /* columns not yet all obtained*/
      FF0HW00.FF0HWSWR = "Y"; /* Request for data switch*/
      FF0HW00.FF0HWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end


end // end FF0HS20

// Sum NIL cat fcst LE buy
Function FF0HS25()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by category table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "20"; /* Division group code*/
  FF7REC.XCTCD = "0000"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NIL CATEGORY FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS25

// Sum NIL group fcst LE buy
Function FF0HS30()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by style group table.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FF8REC.YSMXDV = "20"; /* Division group code*/
  FF8REC.XCTCD = "0000"; /* Foreign country code*/
  FF8REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NIL GROUP FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0HS30

// Calc fill rate prior to curr
Function FF0HS63()
   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd*/
     /* - first determine which if any carry over QTYs to use*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = 0; /* ===> init W.S. Accumulator*/

  if (FF0HW01.FFQCURMO in FF0HW01.FF4FCTMO) /* Find current month*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

  else

    FFWREC.XXXMODID = "S63"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FF0HW00.FF0HWDAT = FF0HW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FF0HW00.FF0HWDAT; /* Current month*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN WORKSHEET ITEMS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd)*/
   /* ------------------------------------------------------------*/

  if (FF0HW01.FFABEGMO == FF0HW01.FFQCURMO) /* Beg mo EQ curr*/

    if (FF0HW03.FF0HWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FF0HW05.FF0HWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FF0HW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
      FF0HW05.FF0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0HW03.FF0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0HW05.FF0HWFFR[sysVar.arrayIndex]));
    end
    FF0HW05.FF0HMFFR[sysVar.arrayIndex] = mathLib.round(FF0HW05.FF0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FF0HW05.FF0HMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FF0HW07.FF0HWFFR = FF0HW07.FF0HWFFR + FF0HW05.FF0HWFFR[sysVar.arrayIndex];
    end

  else /* ==================> not Beg mo EQ*/
                                   /* curr*/

    if (FF0HW03.FF0HWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FF0HW05.FF0HWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FF0HW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
      FF0HW05.FF0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0HW03.FF0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0HW05.FF0HWFFR[sysVar.arrayIndex]));
    end
    FF0HW05.FF0HMFFR[sysVar.arrayIndex] = mathLib.round(FF0HW05.FF0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FF0HW05.FF0HMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FF0HW07.FF0HWFFR = FF0HW07.FF0HWFFR + FF0HW05.FF0HWFFR[sysVar.arrayIndex];
    end


    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior 2nd month*/

    if (FF0HW03.FF0HWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FF0HW05.FF0HWFFR[sysVar.arrayIndex] = 0;
    else
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FF0HW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFQOCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0HW01.FFQOCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
      FF0HW05.FF0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0HW03.FF0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0HW05.FF0HWFFR[sysVar.arrayIndex]));
    end
    FF0HW05.FF0HMFFR[sysVar.arrayIndex] = mathLib.round(FF0HW05.FF0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FF0HW05.FF0HMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FF0HW07.FF0HWFFR = FF0HW07.FF0HWFFR + FF0HW05.FF0HWFFR[sysVar.arrayIndex];
    end


    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/

    while (sysVar.arrayIndex > 0) /* ===>until all prior to curr months processed*/

      if (FF0HW03.FF0HWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
        FF0HW05.FF0HWFFR[sysVar.arrayIndex] = 0;
      else
        FFXREC.FFXNUMB = FF0HW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
        /* ====> no carry over QTYs to apply*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
        FF0HW05.FF0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0HW03.FF0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0HW05.FF0HWFFR[sysVar.arrayIndex]));
      end
      FF0HW05.FF0HMFFR[sysVar.arrayIndex] = mathLib.round(FF0HW05.FF0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FF0HW05.FF0HMFFR[sysVar.arrayIndex]));
      if (sysVar.arrayIndex > 1) /* Not first column*/
        FF0HW07.FF0HWFFR = FF0HW07.FF0HWFFR + FF0HW05.FF0HWFFR[sysVar.arrayIndex];
      end
      sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/
    end


  end


   /* **                                                        ***/
   /* ********************** End of FF0HS63 ***********************/
end // end FF0HS63

// Get/save W.S. HDR Row "CURR MO
Function FF0HS70()
   /* ------------------------------------------------------------*/
   /* Get header summary worksheet data row for "CURR MO"*/
   /* and save the data obtained in W.S.*/
   /* Note: This process is done here to get the SUMMED values*/
         /* selected from the header/item join for the row with*/
         /* CURR MO/CONT MO = FCST MO.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for search for row.*/
   /* ------------------------------------------------------------*/

  FF0HW00.FF0HWSWC = "N"; /* ===> Summary cursor EOF switch*/

  FF0H112(); /* ===> Open summary worksheet cursor*/

  FF0H113(); /* ===> Fetch next summary worksheet*/
   /* ===> Prime Read*/

  while (FF0HW00.FF0HWSWC == "N") /* ===> Until end of cursor*/

    if (FFQREC.FFQCURMO == FFRREC.FF4FCTMO) /* ===> if current month*/

      FF0H116(); /* ===> Save header information*/

      FF0HW00.FF0HWSWC = "Y"; /* ===> Summary cursor EOF switch*/

    else

      FF0H113(); /* ===> Fetch next summary worksheet*/
      /* ===> Driving Read*/

    end /* ===> Header CURR MO = Item FCST MO*/

  end /* ===> Until end of cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FF0H118(); /* Close summary worksheet cursor*/


end // end FF0HS70

// Sum invoice/order quantities
Function FF0HS71()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/


  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO;
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO;

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
   /* ----> loaded in the calling process group --->*/
   /* MOVE 'FT' TO FH3REC.YSMXOT      ; Order type group code*/
   /* MOVE '*' TO FH3REC.FH1PNAC      ; National account flag*/
   /* ----> loaded in the calling process group*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS71"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/



end // end FF0HS71

//*** RECORD=FF0HW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0HW00 type basicRecord
  10 FF0HWAIN FF0HWAIN ; 
  10 FF0HWASL FF0HWASL ; 
  10 FF0HWBEG FF0HWBEG ; 
  10 FF0HWCOL FF0HWCOL ; 
  10 FF0HWEND FF0HWEND ; 
  10 FF0HWMAX FF0HWMAX ; 
  10 FF0HWSIX FF0HWSIX ; 
  10 FF0HWNIX FF0HWNIX ; 
  10 FF0HWDIX FF0HWDIX ; 
  10 FF0HWDAT FF0HWDAT ; 
    15 FF0HWDYY FF0HWDYY ; 
    15 FF0HWDMM FF0HWDMM ; 
  10 FF0HWDIM FF0HWDIM ; 
  10 FF0HWDTD FF0HWDTD ; 
  10 FF0HWFMO FF0HWFMO ; 
  10 FF0HWHIN FF0HWHIN ; 
  10 FF0HWHOR FF0HWHOR ; 
  10 FF0HWHDM FF0HWHDM ; 
  10 FF0HWHFU FF0HWHFU ; 
  10 FF0HWHPR FF0HWHPR ; 
  10 FF0HWIXC FF0HWIXC ; 
  10 FF0HWIXL FF0HWIXL ; 
  10 FF0HWIXP FF0HWIXP ; 
  10 FF0HWIXS FF0HWIXS ; 
  10 FF0HWPAD FF0HWPAD ; 
  10 FF0HWPAG FF0HWPAG ; 
  10 FF0HWPCT FF0HWPCT ; 
  10 FF0HWSWF FF0HWSWF ; 
  10 FF0HWSWC FF0HWSWC ; 
  10 FF0HWSWR FF0HWSWR ; 
  10 FF0HWSWO FF0HWSWO [3] ; 
  10 FF0HWSWS FF0HWSWS ; 
  10 FF0HWSW1 FF0HWSW1 ; 
  10 FF0HWTFD FF0HWTFD ; 
  10 FF0HWTFI FF0HWTFI ; 
  10 FF0HWTUD FF0HWTUD ; 
  10 FF0HWTUI FF0HWTUI ; 
  10 FF2FUIND FF2FUIND ; 
  10 FF2PRIND FF2PRIND ; 
  10 FF2DMIND FF2DMIND ; 
  10 FF6BEINV FF6BEINV ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF0HWPMO FF0HWPMO ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF0HWSEA FF0HWSEA ; 
  10 FFAENDMO FFAENDMO ; 
  10 FFZINDMO FFZINDMO ; 
    15 * char(2) ; 
    15 FF0HWMON FF0HWMON ; 
  10 FF0HWSF FF0HWSF ; 
  10 FH1PAQTY FH1PAQTY ; 
  10 FH1ALQTY FH1ALQTY ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 XDVCD XDVCD ; 
  10 XLCCD XLCCD ; 
  10 FF0HWYEM FF0HWYEM ; 
  10 FF0HWMIS FF0HWMIS [4] ; 
  10 FF0HWMSC FF0HWMSC ; 
  10 FF2NSEAS FF2NSEAS ; 
  10 FF0HWRSA FF0HWRSA ; 
  10 FF0HWLSA FF0HWLSA ; 
  10 FF0HWSCT FF0HWSCT ; 
end // end FF0HW00

//*** RECORD=FF0HW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0HW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFQMBYMO FFQMBYMO ; 
  10 FFQCURMO FFQCURMO ; 
  10 * char(1) ; 
  10 FF0HWCMO FF0HWCMO ; 
    15 * num(3) ; 
    15 FF0HWCCY FF0HWCCY ; 
    15 FF0HWCMM FF0HWCMM ; 
  10 * char(1) ; 
  10 FF0HWPMO FF0HWPMO ; 
    15 * num(3) ; 
    15 FF0HWPCY FF0HWPCY ; 
    15 FF0HWPMM FF0HWPMM ; 
  10 * num(1) ; 
  10 FF2PRIND FF2PRIND ; 
  10 FFQLCOFU FFQLCOFU ; 
  10 FFQLCOPR FFQLCOPR ; 
  10 FFQOCOFU FFQOCOFU ; 
  10 FFQOCOPR FFQOCOPR ; 
  10 FFQLCOFP FFQLCOFP ; 
  10 FFQLCOPP FFQLCOPP ; 
  10 FFQOCOFP FFQOCOFP ; 
  10 FFQOCOPP FFQOCOPP ; 
  10 FF4FCTMO FF4FCTMO [61] ; 
  10 FF0HMMON FF0HMMON [61] ; 
  10 FF0HMSCT FF0HMSCT [61] ; 
  10 FF0HMBSF FF0HMBSF [61] ; 
  10 FF0HWFCO FF0HWFCO [61] ; 
  10 FF0HMFCO FF0HMFCO [61] ; 
  10 FF0HWPCO FF0HWPCO [61] ; 
  10 FF0HMPCO FF0HMPCO [61] ; 
  10 FFRPFUDM FFRPFUDM [61] ; 
  10 FF0HMFUP FF0HMFUP [61] ; 
  10 FFRAFUDM FFRAFUDM [61] ; 
  10 FF0HMFUA FF0HMFUA [61] ; 
  10 FFRIFUDM FFRIFUDM [61] ; 
  10 FF0HMFUI FF0HMFUI [61] ; 
  10 FFRCFUDM FFRCFUDM [61] ; 
  10 FF0HMFUC FF0HMFUC [61] ; 
  10 FF0HWFUT FF0HWFUT [61] ; 
  10 FF0HMFUT FF0HMFUT [61] ; 
  10 FFRPNFDM FFRPNFDM [61] ; 
  10 FF0HMNFP FF0HMNFP [61] ; 
  10 FFRANFDM FFRANFDM [61] ; 
  10 FF0HMNFA FF0HMNFA [61] ; 
  10 FFRINFDM FFRINFDM [61] ; 
  10 FF0HMNFI FF0HMNFI [61] ; 
  10 FFRCNFDM FFRCNFDM [61] ; 
  10 FF0HMNFC FF0HMNFC [61] ; 
  10 FF0HWNFT FF0HWNFT [61] ; 
  10 FF0HMNFT FF0HMNFT [61] ; 
end // end FF0HW01

//*** RECORD=FF0HW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record FF0HW02 type basicRecord
  10 FFRPPRDM FFRPPRDM [61] ; 
  10 FF0HMPRP FF0HMPRP [61] ; 
  10 FFRAPRDM FFRAPRDM [61] ; 
  10 FF0HMPRA FF0HMPRA [61] ; 
  10 FFRIPRDM FFRIPRDM [61] ; 
  10 FF0HMPRI FF0HMPRI [61] ; 
  10 FFRCPRDM FFRCPRDM [61] ; 
  10 FF0HMPRC FF0HMPRC [61] ; 
  10 FF0HWPRT FF0HWPRT [61] ; 
  10 FF0HMPRT FF0HMPRT [61] ; 
  10 FFRPNPDM FFRPNPDM [61] ; 
  10 FF0HMNPP FF0HMNPP [61] ; 
  10 FFRANPDM FFRANPDM [61] ; 
  10 FF0HMNPA FF0HMNPA [61] ; 
  10 FFRINPDM FFRINPDM [61] ; 
  10 FF0HMNPI FF0HMNPI [61] ; 
  10 FFRCNPDM FFRCNPDM [61] ; 
  10 FF0HMNPC FF0HMNPC [61] ; 
  10 FF0HWNPT FF0HWNPT [61] ; 
  10 FF0HMNPT FF0HMNPT [61] ; 
end // end FF0HW02

//*** RECORD=FF0HW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record FF0HW03 type basicRecord
  10 FF0HWTDP FF0HWTDP [61] ; 
  10 FF0HMTDP FF0HMTDP [61] ; 
  10 FF0HWTDA FF0HWTDA [61] ; 
  10 FF0HMTDA FF0HMTDA [61] ; 
  10 FF0HWTDI FF0HWTDI [61] ; 
  10 FF0HMTDI FF0HMTDI [61] ; 
  10 FF0HWTDC FF0HWTDC [61] ; 
  10 FF0HMTDC FF0HMTDC [61] ; 
  10 FF0HWTDT FF0HWTDT [61] ; 
  10 FF0HMTDT FF0HMTDT [61] ; 
  10 FF0HWCAP FF0HWCAP [61] ; 
  10 FF0HWTAF FF0HWTAF [61] ; 
  10 FF0HMTAF FF0HMTAF [61] ; 
  10 FF0HWTAP FF0HWTAP [61] ; 
  10 FF0HMTAP FF0HMTAP [61] ; 
end // end FF0HW03

//*** RECORD=FF0HW04 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record FF0HW04 type basicRecord
  10 FFTFUADJ FFTFUADJ ; 
  10 FF2FUIND FF2FUIND ; 
  10 FF0HWDFU FF0HWDFU [61] ; 
  10 FF0HMDFU FF0HMDFU [61] ; 
  10 FF0HWDNF FF0HWDNF [61] ; 
  10 FF0HMDNF FF0HMDNF [61] ; 
  10 FF0HWDTF FF0HWDTF [61] ; 
  10 FF0HMDTF FF0HMDTF [61] ; 
  10 FF0HWDPR FF0HWDPR [61] ; 
  10 FF0HMDPR FF0HMDPR [61] ; 
  10 FF0HWDNP FF0HWDNP [61] ; 
  10 FF0HMDNP FF0HMDNP [61] ; 
  10 FF0HWDTP FF0HWDTP [61] ; 
  10 FF0HMDTP FF0HMDTP [61] ; 
  10 FF0HWDCP FF0HWDCP [61] ; 
  10 FF0HMDCP FF0HMDCP [61] ; 
  10 FFRCPRFC FFRCPRFC [61] ; 
  10 FF0HMPCF FF0HMPCF [61] ; 
  10 FF6PRPFC FF6PRPFC [61] ; 
  10 FF0HMPRF FF0HMPRF [61] ; 
  10 FF0HWDFF FF0HWDFF [61] ; 
  10 FF0HWDHF FF0HWDHF [61] ; 
  10 FF0HWDFI FF0HWDFI [61] ; 
  10 FF0HWDHI FF0HWDHI [61] ; 
  10 FF0HWHPR FF0HWHPR [61] ; 
end // end FF0HW04

//*** RECORD=FF0HW05 ****
// ------------------------
// Map 005 display storage.
// ------------------------
// ***********************
Record FF0HW05 type basicRecord
  10 FFTFRADJ FFTFRADJ ; 
  10 FF2DMIND FF2DMIND ; 
  10 FFRCDMFC FFRCDMFC [61] ; 
  10 FF0HMFCD FF0HMFCD [61] ; 
  10 FF0HWMDM FF0HWMDM [61] ; 
  10 FF0HMMDM FF0HMMDM [61] ; 
  10 FF7RVFCT FF7RVFCT [61] ; 
  10 FF0HMRVF FF0HMRVF [61] ; 
  10 FF0HWHDM FF0HWHDM [61] ; 
  10 FF0HWFSI FF0HWFSI [61] ; 
  10 FF0HWHSI FF0HWHSI [61] ; 
  10 FF0HWRSI FF0HWRSI [61] ; 
  10 FF0HWFFR FF0HWFFR [61] ; 
  10 FF0HMFFR FF0HMFFR [61] ; 
  10 FF0HWHFR FF0HWHFR [61] ; 
  10 FH5MSHQT FH5MSHQT [61] ; 
  10 FF0HMCSF FF0HMCSF [61] ; 
  10 FF6SLFCT FF6SLFCT [61] ; 
  10 FF0HMMSL FF0HMMSL [61] ; 
end // end FF0HW05

//*** RECORD=FF0HW06 ****
// ------------------------
// Map 006 display storage.
// ------------------------
// ***********************
Record FF0HW06 type basicRecord
  10 FFTSSAJA FFTSSAJA ; 
  10 FFTSSAJB FFTSSAJB ; 
  10 FFTSSAJC FFTSSAJC ; 
  10 FFTSSAJD FFTSSAJD ; 
  10 FF0HWSSA FF0HWSSA ; 
  10 FF0HWSSB FF0HWSSB ; 
  10 FF0HWSSC FF0HWSSC ; 
  10 FF0HWSSD FF0HWSSD ; 
  10 SY2SSCIN SY2SSCIN ; 
  10 FF6BEINV FF6BEINV [61] ; 
  10 FF0HMINB FF0HMINB [61] ; 
  10 FFRPRDDU FFRPRDDU [61] ; 
  10 FF0HMDUE FF0HMDUE [61] ; 
  10 FFRSUBBY FFRSUBBY [61] ; 
  10 FF0HMQBY FF0HMQBY [61] ; 
  10 FFRTENBY FFRTENBY [61] ; 
  10 FF0HMTBY FF0HMTBY [61] ; 
  10 FF0HWSUP FF0HWSUP [61] ; 
  10 FF0HMSUP FF0HMSUP [61] ; 
  10 FG4BALSH FG4BALSH [61] ; 
  10 FF0HMBAL FF0HMBAL [61] ; 
  10 FF0HWINE FF0HWINE [61] ; 
  10 FF0HMINE FF0HMINE [61] ; 
  10 FF6SFSTK FF6SFSTK [61] ; 
  10 FF0HMSTK FF0HMSTK [61] ; 
  10 FFRSSFCT FFRSSFCT [61] ; 
  10 FF6SUGBY FF6SUGBY [61] ; 
  10 FF0HMSBY FF0HMSBY [61] ; 
  10 FF6PRFCT FF6PRFCT [61] ; 
  10 FF0HMFCT FF0HMFCT [61] ; 
  10 FF0HWTUR FF0HWTUR [61] ; 
  10 FFRDIRSH FFRDIRSH [61] ; 
  10 FF0HMDIR FF0HMDIR [61] ; 
  10 FF0HWNIL FF0HWNIL [61] ; 
  10 FF0HMNIL FF0HMNIL [61] ; 
end // end FF0HW06

//*** RECORD=FF0HW07 ****
// -----------------
// Season subtotals.
// -----------------
// ***********************
Record FF0HW07 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FF0HWFUT FF0HWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FF0HWNFT FF0HWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FF0HWPRT FF0HWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FF0HWNPT FF0HWNPT ; 
  10 FF0HWTDP FF0HWTDP ; 
  10 FF0HWTDA FF0HWTDA ; 
  10 FF0HWTDI FF0HWTDI ; 
  10 FF0HWTDC FF0HWTDC ; 
  10 FF0HWTDT FF0HWTDT ; 
  10 FF0HWTAF FF0HWTAF ; 
  10 FF0HWTAP FF0HWTAP ; 
  10 FF0HWDFU FF0HWDFU ; 
  10 FF0HWDNF FF0HWDNF ; 
  10 FF0HWDTF FF0HWDTF ; 
  10 FF0HWDPR FF0HWDPR ; 
  10 FF0HWDNP FF0HWDNP ; 
  10 FF0HWDTP FF0HWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FF0HWHDM FF0HWHDM ; 
  10 FF0HWHFU FF0HWHFU ; 
  10 FF0HWHPR FF0HWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FF0HWMDM FF0HWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FF0HWFFR FF0HWFFR ; 
  10 FF0HWHFR FF0HWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FF0HWSUP FF0HWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FF0HWINE FF0HWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FF0HWNIL FF0HWNIL ; 
  10 FF0HWFRF FF0HWFRF ; 
  10 FF0HWNMO FF0HWNMO ; 
end // end FF0HW07

//*** RECORD=FF0HW08 ****
// ---------------------
// Product accum totals.
// ---------------------
// ***********************
Record FF0HW08 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FF0HWFUT FF0HWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FF0HWNFT FF0HWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FF0HWPRT FF0HWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FF0HWNPT FF0HWNPT ; 
  10 FF0HWTDP FF0HWTDP ; 
  10 FF0HWTDA FF0HWTDA ; 
  10 FF0HWTDI FF0HWTDI ; 
  10 FF0HWTDC FF0HWTDC ; 
  10 FF0HWTDT FF0HWTDT ; 
  10 FF0HWTAF FF0HWTAF ; 
  10 FF0HWTAP FF0HWTAP ; 
  10 FF0HWDFU FF0HWDFU ; 
  10 FF0HWDNF FF0HWDNF ; 
  10 FF0HWDTF FF0HWDTF ; 
  10 FF0HWDPR FF0HWDPR ; 
  10 FF0HWDNP FF0HWDNP ; 
  10 FF0HWDTP FF0HWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FF0HWHDM FF0HWHDM ; 
  10 FF0HWHFU FF0HWHFU ; 
  10 FF0HWHPR FF0HWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FF0HWMDM FF0HWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FF0HWFFR FF0HWFFR ; 
  10 FF0HWHFR FF0HWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FF0HWSUP FF0HWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FF0HWINE FF0HWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FF0HWNIL FF0HWNIL ; 
  10 FF0HWFRF FF0HWFRF ; 
  10 FF0HWNMO FF0HWNMO ; 
end // end FF0HW08

//*** RECORD=FF0HW09 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1901 - Print Short Range Summary/Global Worksheets.
// ------------------------------------------------------------
// ***********************
Record FF0HW09 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SYBSTGNM SYBSTGNM ; 
    10 XWSCD XWSCD ; 
    10 FF0HWCDT FF0HWCDT ; 
    10 FF0HWCTM FF0HWCTM ; 
    10 FF0HWBYM FF0HWBYM ; 
    10 FF0HWBGM FF0HWBGM ; 
    10 FF0HWGNB FF0HWGNB ; 
    10 FF2NSEAS FF2NSEAS ; 
    10 FF0HWMIS FF0HWMIS [4] ; 
    10 FF0HWSEL FF0HWSEL ; 
    10 FF0HWTYP FF0HWTYP ; 
    10 * char(9) ; 
end // end FF0HW09

//*** RECORD=FF0HW10 ****
// -----------------------------------------------------------
// Parameters passed to FF1700 - Apply The Global Adjustments.
// -----------------------------------------------------------
// ***********************
Record FF0HW10 type basicRecord
  10 FF0HWRCD FF0HWRCD ; 
  10 FF0HWLVL FF0HWLVL ; 
  10 FFTGCNBR FFTGCNBR ; 
  10 YPGCD YPGCD ; 
  10 XPCCD XPCCD ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
end // end FF0HW10

// FF_BAL_TO_SHP
DataItem FF0HMBAL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Begin screen flag
DataItem FF0HMBSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fh-mo-shp-qty
DataItem FF0HMCSF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// CALC PROP FCST
DataItem FF0HMDCP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FF0HMDFU char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_DIRSHP_QTY
DataItem FF0HMDIR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL FUT
DataItem FF0HMDNF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FF0HMDNP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FF0HMDPR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL FUT
DataItem FF0HMDTF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FF0HMDTP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_DUE
DataItem FF0HMDUE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_DMD_FCST
DataItem FF0HMFCD char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FF0HMFCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_FCST
DataItem FF0HMFCT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FCST FILL RT
DataItem FF0HMFFR num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_FUTR_DMD
DataItem FF0HMFUA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_FUTR_DMD
DataItem FF0HMFUC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_FUTR_DMD
DataItem FF0HMFUI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_FUTR_DMD
DataItem FF0HMFUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FF0HMFUT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_BEG_INV
DataItem FF0HMINB char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FF0HMINE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// MSTR DMD FCST
DataItem FF0HMMDM char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Individual month YYMM
DataItem FF0HMMON char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SLS_FCST
DataItem FF0HMMSL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_FDMD
DataItem FF0HMNFA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_FDMD
DataItem FF0HMNFC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_FDMD
DataItem FF0HMNFI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_FDMD
DataItem FF0HMNFP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FF0HMNFT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FF0HMNIL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_PDMD
DataItem FF0HMNPA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_PDMD
DataItem FF0HMNPC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_PDMD
DataItem FF0HMNPI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_PDMD
DataItem FF0HMNPP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FF0HMNPT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_PROP_FCST
DataItem FF0HMPCF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FF0HMPCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_PROP_DMD
DataItem FF0HMPRA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_PROP_DMD
DataItem FF0HMPRC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PROP_FCST
DataItem FF0HMPRF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_PROP_DMD
DataItem FF0HMPRI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_PROP_DMD
DataItem FF0HMPRP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FF0HMPRT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SBMT_QTB
DataItem FF0HMQBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_RVSE_DMD_FCST
DataItem FF0HMRVF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SUGG_QTB
DataItem FF0HMSBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Season counter
DataItem FF0HMSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_SFTY_STK
DataItem FF0HMSTK char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SUPPLY
DataItem FF0HMSUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FF0HMTAF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FF0HMTAP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_TNTV_QTB
DataItem FF0HMTBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FF0HMTDA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FF0HMTDC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FF0HMTDI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FF0HMTDP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FF0HMTDT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Average inventory work area
DataItem FF0HWAIN bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Average sales work area
DataItem FF0HWASL bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning column number
DataItem FF0HWBEG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_FCST_BMO
DataItem FF0HWBGM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// FF_MAIN_BUY_MO
DataItem FF0HWBYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// CANCELLATION %
DataItem FF0HWCAP decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_CONTP_MO "CCYY" re-formated
DataItem FF0HWCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change date
DataItem FF0HWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_CONTP_MO  "MM"  re-formated
DataItem FF0HWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_CONTP_MO        re-formated
DataItem FF0HWCMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current column number
DataItem FF0HWCOL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// change time
DataItem FF0HWCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area
DataItem FF0HWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CALC PROP FCST
DataItem FF0HWDCP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FUT %
DataItem FF0HWDFF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST PROP IDX
DataItem FF0HWDFI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FF0HWDFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST FUT %
DataItem FF0HWDHF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST PROP IDX
DataItem FF0HWDHI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days in month
DataItem FF0HWDIM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Decrement index
DataItem FF0HWDIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work month
DataItem FF0HWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL FUT
DataItem FF0HWDNF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FF0HWDNP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FF0HWDPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days to date
DataItem FF0HWDTD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FUT
DataItem FF0HWDTF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FF0HWDTP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Date work year
DataItem FF0HWDYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending column number
DataItem FF0HWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FF0HWFCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FILL RT
DataItem FF0HWFFR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months formatted
DataItem FF0HWFMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Futr rto futures
DataItem FF0HWFRF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCST SEAS IDX
DataItem FF0HWFSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FF0HWFUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_GLBL_NBR
DataItem FF0HWGNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Historical demand quantity
DataItem FF0HWHDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST FILL RT
DataItem FF0HWHFR decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Historical futures quantity
DataItem FF0HWHFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical invoiced quantity
DataItem FF0HWHIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical ordered quantity
DataItem FF0HWHOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical prop quantity
DataItem FF0HWHPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST SEAS IDX
DataItem FF0HWHSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FF0HWINE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map columns
DataItem FF0HWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map lines
DataItem FF0HWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for prior months
DataItem FF0HWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for subsequent months
DataItem FF0HWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Left scroll amount
DataItem FF0HWLSA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subroutine update level
DataItem FF0HWLVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum beginning column
DataItem FF0HWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// MSTR DMD FCST
DataItem FF0HWMDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Months in season
DataItem FF0HWMIS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Individual month YYMM
DataItem FF0HWMON char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Months in sesn counter
DataItem FF0HWMSC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FF0HWNFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FF0HWNIL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Next index
DataItem FF0HWNIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of months for averaging
DataItem FF0HWNMO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FF0HWNPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Page direction
DataItem FF0HWPAD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page number
DataItem FF0HWPAG num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FF0HWPCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Percent calculation work area
DataItem FF0HWPCT bin(18,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO "CCYY"
DataItem FF0HWPCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO  "MM"
DataItem FF0HWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO
DataItem FF0HWPMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FF0HWPRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Subroutine return code
DataItem FF0HWRCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Right scroll amount
DataItem FF0HWRSA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REVD SEAS IDX
DataItem FF0HWRSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Season counter
DataItem FF0HWSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current season displayed
DataItem FF0HWSEA num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// menu selection number
DataItem FF0HWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save FF_SLS_FCST (Prior mo)
DataItem FF0HWSF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season index
DataItem FF0HWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Class A safety stock quantity
DataItem FF0HWSSA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Class B safety stock quantity
DataItem FF0HWSSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Class C safety stock quantity
DataItem FF0HWSSC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Class D safety stock quantity
DataItem FF0HWSSD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUPPLY
DataItem FF0HWSUP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// First time through switch
DataItem FF0HWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summary cursor EOF switch
DataItem FF0HWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0HWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rqst for data switch each year
DataItem FF0HWSWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0HWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First season switch
DataItem FF0HWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FF0HWTAF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FF0HWTAP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FF0HWTDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FF0HWTDC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FF0HWTDI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FF0HWTDP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FF0HWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total frozen demand
DataItem FF0HWTFD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total frozen indices
DataItem FF0HWTFI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total unfrozen demand
DataItem FF0HWTUD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total unfrozen indices
DataItem FF0HWTUI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INV TURNS
DataItem FF0HWTUR decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// combine types?
DataItem FF0HWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year end month
DataItem FF0HWYEM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

