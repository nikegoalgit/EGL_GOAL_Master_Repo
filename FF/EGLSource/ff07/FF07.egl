package ff07;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF07 ****
// This application displays each month that has a completed
// buy and shows the user the buy existing levels. (line,
// category or product) The user is able to select a month to
// view at whichever level a completed buy exists.
// 
// The user has to specify the line and type group or category
// and type group, but not both. If both line and category were
// entered, the program must ensure that the category is within
// that line. The range must be indicated. For the line and
// type group fields, a wild card '*' can be used.
// 
// The user may exit to any allowed application, via fast path
// of PF key.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/30/89  jjuch   New application.
//          12/19/96  CWHIT1  REGEN FOR YR 2000
// *********************
Program FF07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF07W00 FF07W00; // record
  FF07W01 FF07W01; // record
  FF2REC FF2REC; // record
  FF4REC FF4REC; // record
  FF5REC FF5REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use FF07M.FF07M001,  // forms
      FF07M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF07M001 initial; /* M001 input/output*/
    set FF07W00 empty; /* Working storage*/
    set FF07W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    if (FFWREC.YPGCD == "  ") /* No type group*/

      FFWREC.YPGCD = "01"; /* Default value*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end /* Abbreviation*/

    end

    FF07W00.XCTCD = "USA "; /* Country code*/
    FF07W00.FF07WTYP[1] = "01"; /* Type group 'Inline'*/
    FF07W00.FF07WTYP[2] = "02"; /* Type group 'Makeup'*/

    FF07W00.FF07WSWF = "Y"; /* Format the map switch*/
    FF07W00.FF07WSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* if key fields entered, request data.*/
     /* ------------------------------------------------------------*/

    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    FF07W01.FFZBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
    FF07W01.FFZENDMO = FFWREC.FFAENDMO; /* Ending month*/

    if (FFWREC.FFABEGMO > 0 /* Beginning month passed*/
     && FFWREC.FFAENDMO > 0) /* Ending month passed*/

      if (FFWREC.YPGCD > "  " /* Type group passed*/
       && FFWREC.XPCCD > "  ") /* Category passed*/
        FF07W00.FF07WSWR = "Y"; /* Request for data switch*/

      else

        if (FFWREC.XPLCD > "  " /* Product line passed*/
         && FFWREC.YPGCD > "  ") /* Type group passed*/
          FF07W00.FF07WSWR = "Y"; /* Request for data switch*/

        end

      end


    end

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF07.*/
     /* ------------------------------------------------------------*/

    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF07001; /* Converse the main process*/


    FF07001: FF07001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF07001; /* Converse the main process*/


  end // end main
end // end FF07

// Inquire/maintain a table row
Function FF07001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF07100(); /* Obtain the data to display*/

  FF07200(); /* Format and display the map*/

  FF07300(); /* Check attention identifier*/

  FF07400(); /* Reset fields to normal intensity*/

  FF07500(); /* Verify the entered data*/

  FF07600(); /* Process valid input request*/


end // end FF07001

// Obtain the data to display
Function FF07100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF07W00.FF07WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area.*/
   /* ------------------------------------------------------------*/

  set FF07W01 empty; /* M001 display storage*/

   /* ------------------------------------------------------------*/
   /* Save the search key informations in the map*/
   /* ------------------------------------------------------------*/

  FF07W01.FFZBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FF07W01.FFZENDMO = FFWREC.FFAENDMO; /* Ending month*/

   /* ------------------------------------------------------------*/
   /* Fill up the buy months on the screen.*/
   /* ------------------------------------------------------------*/

  FF07W00.FF07WIXM = 1; /* Initialize display index*/
  FF07W01.FF07WBMO[1] = FF07W01.FFZBEGMO;

  while (FF07W00.FF07WIXM < 12
   && FF07W01.FF07WBMO[FF07WIXM] < FF07W01.FFZENDMO) /* End of range*/

    FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment the display index*/

    FF07W01.FF07WBMO[FF07WIXM] = FF07W01.FFZBEGMO + FF07W00.FF07WIXM - 1;

    if (FF07W01.FF07WBMM[FF07WIXM] > 12)
      FF07W01.FF07WBYY[FF07WIXM] = FF07W01.FF07WBYY[FF07WIXM] + 1;
      FF07W01.FF07WBMM[FF07WIXM] = FF07W01.FF07WBMM[FF07WIXM] - 12;
    end

  end

   /* ------------------------------------------------------------*/
   /* Obtain the buy perform flag for each level.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Product category were specified. Type group is either*/
    /* specified or wildcard.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XPCCD > "  ")
    FF07110(); /* Process specified category*/
  else
    /* ------------------------------------------------------------*/
        /* Request all lines.*/
    /* ------------------------------------------------------------*/
    if (FFWREC.XPLCD == "*")
      FF07120(); /* Process all lines*/
    else
      /* ------------------------------------------------------------*/
        /* Product line was specified and all type groups or one*/
        /* type group was specified.*/
      /* ------------------------------------------------------------*/
      if (FFWREC.XPLCD > "  ")
        FF07130(); /* Process one line and type groups*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    FF07W00.FF07WSWR = "N"; /* Request for data switch*/
  end


end // end FF07100

// Process 1 specified cat
Function FF07110()

   /* --------------------------------------------------------*/
   /* Obtain buy performed flag by category from VMCAT001*/
   /* --------------------------------------------------------*/

  FF07W00.FF07WIXM = 1; /* Initialize display index*/

  while (FF07W00.FF07WIXM <= 12
   && FF07W01.FF07WBMO[FF07WIXM] <= FF07W01.FFZENDMO
   && FF07W01.FF07WBMO[FF07WIXM] > 0)

    FF07S40(); /* Retrieve buy flag for the specified cat*/

    FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment display index*/

  end

   /* -------------------------------------------------------*/
   /* Retrieve the related product line for the specified*/
   /* category and type group*/
   /* -------------------------------------------------------*/

  FF07S50();
                                   /* Retrieve line from the VFFXRF01 table*/

  FF07W00.FF07WIXM = 1; /* Initialize the display index*/

  while (FF07W00.FF07WIXM <= 12                         
   && FF07W01.FF07WBMO[FF07WIXM] <= FF07W01.FFZENDMO /* Until end of range*/
   && FF07W01.FF07WBMO[FF07WIXM] > 0)

    FF07S10(); /* Retrieve buy flag for line from VMLINE01*/

    if (FF07W00.FF07WSWB != "Y") /* Buy wasn't performed at line level*/

      FF07S20(); /* Retrieve buy flag for type group from VMLTYP01*/

    end

    FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment display index*/

  end


end // end FF07110

// Process all lines
Function FF07120()
   /* --------------------------------------------------------*/
     /* Select and open the cursor*/
   /* --------------------------------------------------------*/

  FF07121(); /* Select and open cursor for VMONTH01*/

   /* --------------------------------------------------------*/
     /* Fetch the next row in the cursor*/
   /* --------------------------------------------------------*/

  FF07W00.FF07WSWC = "N"; /* Initialize end of cursor switch*/
  FF07W00.FF07WIXM = 1; /* Initialize display index*/

  while (FF07W00.FF07WSWC != "Y") /* End of cursor*/

    FF07122(); /* Fetch next row from VMONTH01*/

    FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment the index*/

  end

   /* --------------------------------------------------------*/
     /* Close the cursor*/
   /* --------------------------------------------------------*/

  FF07123(); /* Close cursor for VMONTH01*/


   /* ---------------------------------------------------------*/
     /* Check if category was specified. if it was, obtain*/
     /* the related buy perform flag from VMCAT001 table.*/
     /* Otherwise, obtain all the category codes from VFFXRF01*/
     /* table and check the buy flag of each category.*/
   /* ---------------------------------------------------------*/

  FF07W00.FF07WIXM = 1;

  while (FF07W00.FF07WIXM <= 12)

    FF07W00.FF07WCBF[FF07WIXM] = "N";
                                   /* Initialize cat buy performd flg*/
    FF07W00.FF07WPBF[FF07WIXM] = "N";
                                   /* Initialize prd buy performd flg*/

    FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment display index*/

  end

  if (FFWREC.XPCCD == "  ") /* Check if category entered*/

    FF07S30();
                                   /* Retrieve buy flags for all categories*/

  else

    FF07W00.FF07WIXM = 1; /* Initialize display index*/

    while (FF07W00.FF07WIXM <= 12
     && FF07W01.FF07WBMO[FF07WIXM] <= FF07W01.FFZENDMO
     && FF07W01.FF07WBMO[FF07WIXM] > 0)

      FF07S40(); /* Retrieve buy flag for the specified cat*/

      FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment display index*/

    end

  end


end // end FF07120

// Select & open for VMONTH01
Function FF07121()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF4REC empty; /* Clear row storage area*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = FF07W01.FFZBEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FF07W01.FFZENDMO; /* Ending month*/

  try
    call "IO3720" (FFFREC, SQLCA, FF4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMONTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF4REC.FF4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07121

// Fetch next row in VMONTH01
Function FF07122()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3720" ("N1", SQLCA, FF4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FF4REC.FF4BPFFL != "Y") /* No buy performed at company level*/

        FF07S10(); /* Retrieve buy flag for all lines*/

        if (FF07W00.FF07WSWB != "Y")
                                   /* No buy performed at line level*/

          FF07S20(); /* Retrieve buy flag for type group*/

        end

      else

        FF07W01.FF07MLFL[FF07WIXM] = "Y"; /* Turn on buy flag by line*/

      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF07W00.FF07WSWC = "Y"; /* End of table*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "122"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMONTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF4REC.FF4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07122

// Close the cursor for VMONTH01
Function FF07123()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3720" ("C1", SQLCA, FF4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "123"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMONTH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07123

// Process 1 line and all types
Function FF07130()

  FF07W00.FF07WIXM = 1; /* Initialize display index*/

  while (FF07W00.FF07WIXM <= 12
   && FF07W01.FF07WBMO[FF07WIXM] <= FF07W01.FFZENDMO
   && FF07W01.FF07WBMO[FF07WIXM] > 0)

    /* --------------------------------------------------------*/
     /* Obtain buy performed flag by line from VMLINE01 table*/
    /* --------------------------------------------------------*/

    FF07S10(); /* Retrieve buy flag for the line*/

    if (FF07W00.FF07WSWB != "Y") /* Buy wasn't performed at line level*/

      /* --------------------------------------------------------*/
       /* Obtain buy performed flag by type group from VMLTYP01*/
      /* --------------------------------------------------------*/

      FF07S20();
                                   /* Retrieve buy flag for all type groups*/

    end

    FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment display index*/

  end

   /* ---------------------------------------------------------*/
     /* Check if category was specified. if it was, obtain*/
     /* the related buy perform flag from VMCAT001 table.*/
     /* Otherwise, obtain all the category codes from VFFXRF01*/
     /* table and check the buy flag of each category.*/
   /* ---------------------------------------------------------*/

  FF07W00.FF07WIXM = 1;

  while (FF07W00.FF07WIXM <= 12)

    FF07W00.FF07WCBF[FF07WIXM] = "N";
                                   /* Initialize cat buy performd flg*/
    FF07W00.FF07WPBF[FF07WIXM] = "N";
                                   /* Initialize prd buy performd flg*/

    FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment display index*/

  end

  if (FFWREC.XPCCD == "  ") /* Check if category entered*/

    FF07S30();
                                   /* Retrieve buy flags for all categories*/

  else

    FF07W00.FF07WIXM = 1; /* Initialize display index*/

    while (FF07W00.FF07WIXM <= 12
     && FF07W01.FF07WBMO[FF07WIXM] <= FF07W01.FFZENDMO
     && FF07W01.FF07WBMO[FF07WIXM] > 0)

      FF07S40(); /* Retrieve buy flag for the specified cat*/

      FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment display index*/

    end

  end


end // end FF07130

// Format and converse the map
Function FF07200()

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF07W00.FF07WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF07W00.FF07WSWF == "Y") /* Map must be formatted*/
      FF07210(); /* Format the data on the map*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF07M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF07M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF07M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF07M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF07M001 alarm; /* Indicate sound alarm*/

  end

  converse FF07M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF07M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF07M001.CAITEM; /* Application data*/


end // end FF07200

// Format the display data
Function FF07210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF07M001 initial; /* M001 input/output area*/

  FF07W00.FF07WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FF07M001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF07M001.XPLABRV = FFWREC.XPLABRV; /* Line abbreviation*/
  FF07M001.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF07M001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
  FF07M001.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF07M001.XPCABRV = FFWREC.XPCABRV; /* Category abbreviation*/

  if (FF07W01.FFZBYYMM != 0)
    FF07M001.FFZBYYMM = FF07W01.FFZBYYMM; /* Beginning month*/
  end

  if (FF07W01.FFZEYYMM != 0)
    FF07M001.FFZEYYMM = FF07W01.FFZEYYMM; /* Ending month*/
  end

  FF07W00.FF07WIXM = 1;

  while (FF07W00.FF07WIXM <= 12
   && FF07W01.FF07WBMO[FF07WIXM] > 0)

    FF07M001.FF07MBMO[FF07WIXM] = FF07W01.FF07MBMO[FF07WIXM];
    FF07M001.FF07MLFL[FF07WIXM] = FF07W01.FF07MLFL[FF07WIXM];
    FF07M001.FF07MCFL[FF07WIXM] = FF07W01.FF07MCFL[FF07WIXM];
    FF07M001.FF07MPFL[FF07WIXM] = FF07W01.FF07MPFL[FF07WIXM];

    set FF07M001.FF07MSEL[FF07WIXM] normal; /* Unprotect*/

    FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1; /* Increment display index*/

  end

end // end FF07210

// Check attention identifier
Function FF07300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF07W00.FF07WSWR == "Y") /* Request for data*/
      set FF07W01 empty; /* M001 display storage*/
    end

    FF07W00.FF07WSWF = "Y"; /* Format the map switch*/
    FF07W00.FF07WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF07M001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14) /* or PF14 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF07M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF07300

// Reset highlighted fields
Function FF07400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF07M001.XPLCD initialAttributes; /* Product line code*/
  set FF07M001.YPGCD initialAttributes; /* Type group code*/
  set FF07M001.XPCCD initialAttributes; /* Category code*/
  set FF07M001.FFZBYYMM initialAttributes; /* Beginning month*/
  set FF07M001.FFZEYYMM initialAttributes; /* Ending month*/
  set FF07M001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF07M001.CAITEM initialAttributes; /* Commarea application data*/

  FF07W00.FF07WIXM = 1;

  while (FF07W00.FF07WIXM <= 12
   && FF07M001.FF07MBMO[FF07WIXM] > 0)

    set FF07M001.FF07MSEL[FF07WIXM] normal; /* Unprotect*/

    FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1;
  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.XPLCD == "?" /* Line list requested*/
   || FF07M001.YPGCD == "?" /* or type group list requested*/
   || FF07M001.XPCCD == "?") /* or category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.XPLCD == "?") /* Line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = XPLREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF07M001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FF07M001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FF07M001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF07M001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF07M001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of YPG codes.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.YPGCD == "?") /* YPG list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF07M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF07M001.YPGABRV = FFWREC.YPGABRV;
    else
      FF07M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF07M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];

    end

    set FF07M001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = XPCREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF07M001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF07M001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF07M001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF07M001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF07M001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF07400

// Verify the entered data
Function FF07500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF07M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the selection made.*/
   /* ------------------------------------------------------------*/

  FF07W00.FF07WIXM = 12; /* Initialize display index*/

  while (FF07W00.FF07WIXM >= 1)
    FF07510(); /* Verify the selection*/
    FF07W00.FF07WIXM = FF07W00.FF07WIXM - 1; /* Decrement the year index*/
  end

   /* ------------------------------------------------------------*/
   /* Verify that either line/type grp or cat/type grp were*/
   /* entered along with range.  Key fields are not allowed*/
   /* to be spaces or zeros.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.FFZEYYMM == 0) /* End range not entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF07M001.FFZEYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF07M001.FFZBYYMM == 0) /* Beg range not entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF07M001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF07M001.YPGCD == "  ") /* Type group not entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF07M001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF07M001.XPCCD == "  ") /* Cat not entered*/
    if (FF07M001.XPLCD == "  ") /* LINE NOT ENTERED*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      set FF07M001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* If any missing fields*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the month range.*/
   /* ------------------------------------------------------------*/

  FF07520(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If category entered verify.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.XPCCD > "  ") /* Category was entered*/
    FF07530(); /* Verify the category*/
  else
    FF07M001.XPCABRV = "     "; /* Clear the abbreviation*/
  end

   /* ------------------------------------------------------------*/
   /* If type group entered verify.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.YPGCD > "  ") /* Type group was entered*/
    FF07540(); /* verify the type group*/
  else
    FF07M001.YPGABRV = "      "; /* Clear the abbreviation*/
  end

   /* ------------------------------------------------------------*/
   /* If line code entered verify.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.XPLCD > "  ") /* Product line was entered*/
    FF07550(); /* verify the product line*/
  else
    FF07M001.XPLABRV = "      "; /* Clear the abbreviation*/
  end

   /* ------------------------------------------------------------*/
   /* Verify line/type grp or cat/type grp relationship.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (FF07M001.XPCCD > "  "
     && FF07M001.YPGCD > "  ")
      FF07S50();
                                   /* Check the consistency of these fields*/
      if (FF07W00.FF07WEXF == "Y") /* Good relationship*/
        if (FF07M001.XPLCD != "*") /* Line code not wildcard*/
          FF07M001.XPLCD = FF2REC.XPLCD;
          FFWREC.XPLCD = FF2REC.XPLCD;
          if (FF07M001.XPLCD in XPLTBL.XPLCD)
            FF07M001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
          FFWREC.XPLABRV = FF07M001.XPLABRV;
        end
      else
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF07M001.YPGCD bold; /* Highlight*/
        set FF07M001.XPCCD cursor, bold; /* Hifhlight*/
      end
    else
      if (FF07M001.YPGCD > "  "
       && FF07M001.XPLCD > "  ")
        FF07S50();
                                   /* Check the consistency of these fields*/
        if (FF07W00.FF07WEXF == "N")
          FFWREC.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(203); /* Inconsistent relationship*/
          set FF07M001.XPLCD bold; /* Highlight*/
          set FF07M001.YPGCD cursor, bold; /* Hifhlight*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF07500

// Verify selection field
Function FF07510()

   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/

   /* ------------------------------------------------------------*/

  if (FF07M001.FF07MSEL[FF07WIXM] != " " /* select field is not a ' '*/
   && FF07M001.FF07MSEL[FF07WIXM] != "S") /* and is not a "S"*/

    FFWREC.XXXMODID = "510"; /* Module identification*/

    converseLib.validationFailed(41); /* Indicate only "S" may be used*/
    set FF07M001.FF07MSEL[FF07WIXM] cursor, bold; /* Highlight*/

  else

    /* ------------------------------------------------------------*/
     /* If multiple selections were made, indicate that only one*/
     /* line may be selected at a time.*/
    /* ------------------------------------------------------------*/

    FF07W00.FF07WIND = FF07W00.FF07WIXM - 1;

    while (FF07W00.FF07WIND >= 1)

      if (FF07M001.FF07MSEL[FF07WIND] > " " /* Invalid value or 's'*/
       && FF07M001.FF07MSEL[FF07WIXM] > " ")

        FFWREC.XXXMODID = "510"; /* Module identification*/

        converseLib.validationFailed(136); /* Indicate more than one line selected*/
        set FF07M001.FF07MSEL[FF07WIXM] cursor, bold; /* Highlight*/

      end

      FF07W00.FF07WIND = FF07W00.FF07WIND - 1; /* decrement the 2nd index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If one line is selected, it is not allowed to change any*/
   /* key field.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.FF07MSEL[FF07WIXM] == "S")

    if (FF07M001.FFZEYYMM != FF07W01.FFZEYYMM) /* Ending month change*/

      FFWREC.XXXMODID = "510"; /* Module identification*/

      converseLib.validationFailed(130); /* Indicate modification not allowed*/
      set FF07M001.FFZEYYMM cursor, bold; /* Highlight*/

    end

    if (FF07M001.FFZBYYMM != FF07W01.FFZBYYMM) /* Beginning month change*/

      FFWREC.XXXMODID = "510"; /* Module identification*/

      converseLib.validationFailed(130); /* Indicate modification not allowed*/
      set FF07M001.FFZBYYMM cursor, bold; /* Highlight*/

    end

    if (FF07M001.XPCCD != FFWREC.XPCCD) /* Category changed*/

      FFWREC.XXXMODID = "510"; /* Module identification*/

      converseLib.validationFailed(130); /* Indicate modification not allowed*/
      set FF07M001.XPCCD cursor, bold; /* Highlight*/

    end

    if (FF07M001.YPGCD != FFWREC.YPGCD) /* Type group changed*/

      FFWREC.XXXMODID = "510"; /* Module identification*/

      converseLib.validationFailed(130); /* Indicate modification not allowed*/
      set FF07M001.YPGCD cursor, bold; /* Highlight*/

    end

    if (FF07M001.XPLCD != FFWREC.XPLCD) /* Product line changed*/

      FFWREC.XXXMODID = "510"; /* Module identification*/

      converseLib.validationFailed(130); /* Indicate modification not allowed*/
      set FF07M001.XPLCD cursor, bold; /* Highlight*/

    end

  end

end // end FF07510

// verify the range
Function FF07520()
   /* ------------------------------------------------------------*/
   /* The beginning month must be greater than the current month*/
   /* and less than or equal to the current plus 30 month*/
   /* The ending month must be greater than or equal to the*/
   /* beginning month, not greater than the beginning plus 11*/
   /* month and not greater than the current plus 30 months.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Clear storage row*/

  FFZREC.FFZBYYMM = FF07M001.FFZBYYMM; /* Beginning month*/
  FFZREC.FFZEYYMM = FF07M001.FFZEYYMM; /* Ending month*/
  FFZREC.FFZMONTH = 1; /* Number of month*/
  FFZREC.FFZSRANG = "Y"; /* Short range flag*/

  XSFFS30(); /* Verify the range*/

  if (FFZREC.FFZENDRC != "0") /* Check error code*/

    FFWREC.XXXMODID = "520"; /* Module identification*/

    set FF07M001.FFZEYYMM cursor, bold; /* Hightlight*/

    if (FFZREC.FFZENDRC == "1") /* No ending month entered*/

      converseLib.validationFailed(8); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "2") /* Invalid ending month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "3") /* Ending month out of range*/

      converseLib.validationFailed(151); /* Indicate invalid date entered*/

    end

  end

  if (FFZREC.FFZBEGRC != "0") /* Check error code*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF07M001.FFZBYYMM cursor, bold; /* hightlight*/

    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/

      converseLib.validationFailed(8); /* Indicate required field*/

    end

    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

  end

  if (converseVar.validationMsgNum == 0)

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Save converted dates*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO;

  end
end // end FF07520

// verify the category
Function FF07530()

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FF07M001.XPCCD;

  if (FF07M001.XPCCD > "  ")
    FF07M001.XPCABRV = "******";
  end

  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FF07M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "530"; /* Module identification*/

    set FF07M001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FF07530

// verify the type group
Function FF07540()

  if (FF07M001.YPGCD == "*") /* Wild cardwas entered*/

    FF07M001.YPGABRV = "ALL";

    return; /* Return to the previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.YPGCD == "  ") /* No type group*/
    FF07M001.YPGABRV = "      ";
  else
    FF07M001.YPGABRV = "******";
  end

  if (FF07M001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and active for FF system*/

    FF07M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "540"; /* Module identification*/

    set FF07M001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

end // end FF07540

// verify the product line
Function FF07550()
  if (FF07M001.XPLCD == "* ") /* Wild card was entered*/

    FF07M001.XPLABRV = "ALL";

    return; /* Return to the previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  XPLREC.XPLCD = FF07M001.XPLCD;

  if (FF07M001.XPLCD > "  ")
    FF07M001.XPLABRV = "******";
  end

  if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FF07M001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "550"; /* Module identification*/

    set FF07M001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FF07550

// Process valid input request
Function FF07600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF07W00.FF07WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the key fields changed, determine if a key was entered.*/
   /* ------------------------------------------------------------*/

  if (FF07M001.XPLCD != FFWREC.XPLCD        /* Product line changed*/
   || FF07M001.YPGCD != FFWREC.YPGCD        /* or type group changed*/
   || FF07M001.XPCCD != FFWREC.XPCCD        /* or category changed*/
   || FF07M001.FFZBYYMM != FF07W01.FFZBYYMM /* or Beginning month changed*/
   || FF07M001.FFZEYYMM != FF07W01.FFZEYYMM) /* or ending month changed*/

    FFWREC.XPLCD = FF07M001.XPLCD; /* Product line*/
    FFWREC.YPGCD = FF07M001.YPGCD; /* Type group*/
    FFWREC.XPCCD = FF07M001.XPCCD; /* Category*/
    FFWREC.XPLABRV = FF07M001.XPLABRV; /* Product line abbreviation*/
    FFWREC.YPGABRV = FF07M001.YPGABRV; /* Type group abbreviation*/
    FFWREC.XPCABRV = FF07M001.XPCABRV; /* Category abbreviation*/

    /* ------------------------------------------------------------*/
     /* If the key field was entered, request the data to display.*/
     /* Otherwise, clear existing data from map display storage.*/
    /* ------------------------------------------------------------*/

    if (FF07M001.FFZBYYMM > 0 /* Beginning month was entered*/
     && FF07M001.FFZEYYMM > 0) /* Ending month was entered*/
      if (FF07M001.YPGCD > "  " /* Type group was entered*/
       && FF07M001.XPCCD > "  ") /* Category was entered*/
        FF07W00.FF07WSWR = "Y"; /* Request for data switch*/
      else
        if (FF07M001.XPLCD > "  " /* Product line was entered*/
         && FF07M001.YPGCD > "  ") /* Type group was entered*/
          FF07W00.FF07WSWR = "Y"; /* Request for data switch*/
        end
      end
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and transfer*/
   /* to the maintain b-grade & closeout index application.*/
   /* ------------------------------------------------------------*/

  if ("S" in FF07M001.FF07MSEL) /* Line was selected*/


    FFWREC.XPLCD = FF07M001.XPLCD; /* Line code*/
    FFWREC.YPGCD = FF07M001.YPGCD; /* Type group code*/
    FFWREC.XPCCD = FF07M001.XPCCD; /* Category code*/
    FFWREC.FFABEGMO = FF07W01.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FF07W01.FFZENDMO; /* ending month*/
    FFWREC.FFQMBYMO = FF07W01.FF07WBMO[sysVar.arrayIndex]; /* Buy month*/

    COMMAREA.CATOAP = "FF08"; /* set index application*/

    XSFFS01();

    set FF07M001.FF07MSEL[sysVar.arrayIndex] cursor, bold; /* highlight*/

    FF07W00.FF07WSWF = "Y"; /* format the map switch*/
    FF07W00.FF07WSWR = "N"; /* request for data switch*/

  end


end // end FF07600

// Retrieve buy flag for line
Function FF07S10()

   /* ----------------------------------------------------------*/
      /* Select and open the cursor*/
   /* ----------------------------------------------------------*/

  FF07S11(); /* Select and open cursor for VMLINE01*/

   /* ----------------------------------------------------------*/
      /* Fetch the next row in the cursor*/
   /* ----------------------------------------------------------*/

  FF07W00.FF07WSWL = "N";

  FF07W00.FF07WSWB = "N";

  while (FF07W00.FF07WSWL != "Y" /* Until end of cursor*/
   && FF07W00.FF07WSWB != "Y") /* or buy performed*/

    FF07S12(); /* Fetch next row in VMLINE01*/

  end

   /* ----------------------------------------------------------*/
      /* Close the cursor*/
   /* ----------------------------------------------------------*/

  FF07S13(); /* Close the cursor for VMLINE01*/


end // end FF07S10

// Select & open for VMLINE01
Function FF07S11()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF5REC empty; /* Clear row storage area*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = FF07W01.FF07WBMO[FF07WIXM]; /* Beginning month*/
  FFFREC.FFFENDMO = FF07W01.FF07WBMO[FF07WIXM]; /* Ending month*/

  FF5REC.FF4BPFFL = "Y"; /* Buy performed flag*/

  if (FFWREC.XPLCD == "  ")

    FF5REC.XPLCD = FF2REC.XPLCD; /* Product line from VFFXRF01*/

  else

    FF5REC.XPLCD = FFWREC.XPLCD; /* Product line from screen*/

  end

  try
    call "IO3710" (FFFREC, SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07S11

// Fetch next row in VMLINE01
Function FF07S12()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3710" ("N1", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF07W00.FF07WSWB = "Y"; /* Buy performed at line level*/

      FF07W01.FF07MLFL[FF07WIXM] = "Y"; /* Turn on the line flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF07W00.FF07WSWL = "Y"; /* End of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07S12

// Close the cursor for VMLINE01
Function FF07S13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3710" ("C1", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S13"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF07S13

// Retrieve buy flag for type grp
Function FF07S20()

   /* ----------------------------------------------------------*/
      /* Select and open the cursor*/
   /* ----------------------------------------------------------*/

  FF07S21(); /* Select and open cursor for VMLTYP01*/

   /* ----------------------------------------------------------*/
      /* Fetch the next row in the cursor*/
   /* ----------------------------------------------------------*/

  FF07W00.FF07WSWT = "N"; /* Initialize the end of cursor switch*/

  FF07W00.FF07WSWB = "N"; /* Initialize the buy exist switch*/

  while (FF07W00.FF07WSWT != "Y" /* Until end of cursor*/
   && FF07W00.FF07WSWB != "Y") /* or buy performed*/

    FF07S22(); /* Fetch next row in VMLTYP01*/

  end

   /* ----------------------------------------------------------*/
      /* Close the cursor*/
   /* ----------------------------------------------------------*/

  FF07S23(); /* Close the cursor for VMLTYP01*/


end // end FF07S20

// Select & open for VMLTYP01
Function FF07S21()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* Clear row storage area*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = FF07W01.FF07WBMO[FF07WIXM]; /* Beginning month*/
  FFFREC.FFFENDMO = FF07W01.FF07WBMO[FF07WIXM]; /* Ending month*/

  if (FFWREC.XPLCD == "  ")

    FF6REC.XPLCD = FF2REC.XPLCD; /* Product line from VFFXRF01*/

  else

    FF6REC.XPLCD = FFWREC.XPLCD; /* Product line from screen*/

  end
  FF6REC.YPGCD = FFWREC.YPGCD; /* Type group*/
  FF6REC.FF4BPFFL = "Y"; /* Buy performed flag*/

  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07S21

// Fetch next row in VMLTYP01
Function FF07S22()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("N1", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF07W00.FF07WSWB = "Y"; /* Buy performed at line level*/

      FF07W01.FF07MLFL[FF07WIXM] = "Y"; /* Turn on the line flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF07W00.FF07WSWT = "Y"; /* End of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07S22

// Close the cursor for VMLTYP01
Function FF07S23()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("C1", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S23"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF07S23

// Retrieve buy flgs for all cats
Function FF07S30()

   /* ----------------------------------------------------------*/
      /* Select and open the cursor*/
   /* ----------------------------------------------------------*/

  FF07S31(); /* Select and open cursor for VFFXRF01*/

   /* ----------------------------------------------------------*/
      /* Fetch the next row in the cursor*/
   /* ----------------------------------------------------------*/

  FF07W00.FF07WSWX = "N";

  while (FF07W00.FF07WSWX != "Y") /* Until end of cursor*/

    FF07S32(); /* Fetch next row in VFFXRF01*/

    if (FF07W00.FF07WSWX != "Y")

      FF07W00.FF07WIXM = 1;

      while (FF07W00.FF07WIXM <= 12
       && FF07W01.FF07WBMO[FF07WIXM] <= FF07W01.FFZENDMO
       && FF07W01.FF07WBMO[FF07WIXM] > 0
       && FF07W00.FF07WCBF[FF07WIXM] != "Y"
       && FF07W00.FF07WPBF[FF07WIXM] != "Y")

        FF07S40(); /* Retrieve buy flag for each category*/

        FF07W00.FF07WIXM = FF07W00.FF07WIXM + 1;

      end

    end

  end

   /* ----------------------------------------------------------*/
      /* Close the cursor*/
   /* ----------------------------------------------------------*/

  FF07S33(); /* Close the cursor for VFFXRF01*/


end // end FF07S30

// Select & open for VFFXRF01
Function FF07S31()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF2REC.XPCCD = "*"; /* Category code*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07S31

// Fetch next row in VFFXRF01
Function FF07S32()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF07W00.FF07WSWX = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S32"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07S32

// Close the cursor for VFFXRF01
Function FF07S33()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S33"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF07S33

// Retrieve buy flag for the cat
Function FF07S40()

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.FF4FCTMO = FF07W01.FF07WBMO[FF07WIXM]; /* Forecast month*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.XCTCD = FF07W00.XCTCD; /* Country code*/

  if (FFWREC.XPCCD > "  ") /* Category was specified*/

    FF7REC.XPCCD = FFWREC.XPCCD; /* Category from screen*/

    if (FFWREC.YPGCD == "* ") /* Wild card*/

      FF7REC.YPGCD = FF07W00.FF07WTYP[1]; /* Inline*/
      FF07S41(); /* Select a single row*/
      FF7REC.YPGCD = FF07W00.FF07WTYP[2]; /* Makeup*/

    else

      FF7REC.YPGCD = FFWREC.YPGCD; /* Type group*/

    end

  else

    FF7REC.XPCCD = FF2REC.XPCCD; /* Category from VFFXRF01*/

    if (FFWREC.YPGCD == "* ") /* Wild card*/

      FF7REC.YPGCD = FF2REC.YPGCD; /* Type group from VFFXRF01*/

    else

      FF7REC.YPGCD = FFWREC.YPGCD; /* Type group from screen*/

    end

  end

  FF07S41(); /* Select a single row*/


end // end FF07S40

// Select & open for VMCAT001
Function FF07S41()

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FF7REC.FF7CBYFL == "Y") /* Buy performed at cat level*/

        FF07W01.FF07MCFL[FF07WIXM] = "Y";
        FF07W00.FF07WCBF[FF07WIXM] = "Y"; /* Buy performed at line level*/

      end

      if (FF7REC.FF7PBYFL == "Y") /* Buy performed at cat level*/

        FF07W01.FF07MPFL[FF07WIXM] = "Y";
        FF07W00.FF07WPBF[FF07WIXM] = "Y"; /* Buy performed at line level*/

      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF07W00.FF07WSWC = "Y"; /* End of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07S41
// Retrieve line from VFFXRF01
Function FF07S50()

  FF07W00.FF07WEXF = "N"; /* Initialize the line exist flag*/

   /* ------------------------------------------------------------*/
   /* Select the row with the providing category and type group.*/
   /* ------------------------------------------------------------*/

  FF07S51();

   /* ------------------------------------------------------------*/
   /* Fetch the first row in the VFFXRF01 table.*/
   /* ------------------------------------------------------------*/

  FF07S52();

   /* ------------------------------------------------------------*/
   /* Close the cursor for the VFFXRF01 table.*/
   /* ------------------------------------------------------------*/

  FF07S53();

end // end FF07S50

// Select & open for VFFXRF01
Function FF07S51()

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF2REC.YPGCD = FF07M001.YPGCD; /* Type group code*/

  if (FF07M001.XPCCD == "  ")
    FF2REC.XPCCD = "*"; /* Wild card*/
    if (FF07M001.XPLCD == "  ")
      FF2REC.XPLCD = "*"; /* Wild card*/
    else
      FF2REC.XPLCD = FF07M001.XPLCD; /* Product line*/
    end
  else
    FF2REC.XPCCD = FF07M001.XPCCD; /* Category code*/
    FF2REC.XPLCD = "*"; /* Wild card*/
  end

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S50"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07S51
// Fetch the 1st row in VFFXRF01
Function FF07S52()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF07W00.FF07WEXF = "Y"; /* Turn the line exist flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S52"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF07S52

// Close cursor for VFFXRF01
Function FF07S53()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S53"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF07S53

//*** RECORD=FF07W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF07W00 type basicRecord
  10 FF07WSWF FF07WSWF ; 
  10 FF07WSWR FF07WSWR ; 
  10 FF07WSWC FF07WSWC ; 
  10 FF07WSWX FF07WSWX ; 
  10 FF07WSWL FF07WSWL ; 
  10 FF07WSWT FF07WSWT ; 
  10 FF07WSWB FF07WSWB ; 
  10 FF07WEXF FF07WEXF ; 
  10 FF07WCBF FF07WCBF [12] ; 
  10 FF07WPBF FF07WPBF [12] ; 
  10 FF07WIXM FF07WIXM ; 
  10 FF07WIND FF07WIND ; 
  10 XCTCD XCTCD ; 
  10 FF07WTYP FF07WTYP [2] ; 
end // end FF07W00

//*** RECORD=FF07W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF07W01 type basicRecord
  10 FFZBEGMO FFZBEGMO ; 
    15 FFZBCC FFZBCC ; 
    15 FFZBYYMM FFZBYYMM ; 
  10 FFZENDMO FFZENDMO ; 
    15 FFZECC FFZECC ; 
    15 FFZEYYMM FFZEYYMM ; 
  10 FF07MSEL FF07MSEL [12] ; 
  10 FF07WBMO FF07WBMO [12] ; 
    15 FF07WBCC FF07WBCC ; 
    15 FF07MBMO FF07MBMO ; 
      20 FF07WBYY FF07WBYY ; 
      20 FF07WBMM FF07WBMM ; 
  10 FF07MLFL FF07MLFL [12] ; 
  10 FF07MCFL FF07MCFL [12] ; 
  10 FF07MPFL FF07MPFL [12] ; 
end // end FF07W01

// Buy YYMM
DataItem FF07MBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy flag at category level
DataItem FF07MCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy flag at line level
DataItem FF07MLFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy flag at product level
DataItem FF07MPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection field
DataItem FF07MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy century
DataItem FF07WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning MM
DataItem FF07WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy month
DataItem FF07WBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning YY
DataItem FF07WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CAT buy flag switch
DataItem FF07WCBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line existing flag
DataItem FF07WEXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display index
DataItem FF07WIND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display index
DataItem FF07WIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prod buy flag switch
DataItem FF07WPBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy flag switch
DataItem FF07WSWB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor sw - comp & cat
DataItem FF07WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF07WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor switch - line
DataItem FF07WSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF07WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor switch - type
DataItem FF07WSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor switch - xref
DataItem FF07WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type group codes
DataItem FF07WTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

