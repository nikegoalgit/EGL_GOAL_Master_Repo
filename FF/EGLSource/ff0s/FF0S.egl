package ff0s;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0S ****
// This application obtains a specific category/type group or
// style group/type grp then displays a list of global adjusts
// that were created that day for given category or style grp.
// The user can then select one and press ENTER to be sent to
// application FF0H to view the effect of the global adjusment
// selected before any global updates actually take place.  The
// user may scroll forward or back to view all the global
// adjustments.
// 
// The user may select a displayed global adjustment & press
// ENTER to go to application FF0H, PF14 to application FF0C,
// or exit to any allowed application via Fast Path.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/25/89  LDELUH  New application.
//          12/21/89  SFORD   Load pass record for FF0H with
//                            xref data (# of months in season
//                                       , beg month)
// ff175    12/19/96  dsmith  regenerated for year 2000.
// *********************
Program FF0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0SW00 FF0SW00; // record
  FF0SW01 FF0SW01; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FFTREC FFTREC; // record
  FFUREC FFUREC; // record
  FFWREC FFWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use FF0SM.FF0SM001,  // forms
      FF0SM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0SM001 initial; /* M001 input/output*/
    set FF0SW00 empty; /* Working storage*/
    set FF0SW01 empty; /* M001 display storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/

    FF0SW00.FF0SWFMS = "Y"; /* Format the map switch*/
    FF0SW00.FF0SWRDS = "N"; /* Request for data switch*/
    FF0SW00.CACHGFL = "N"; /* Set data not obtained*/

    if (FFWREC.YPGCD == " ") /* Type group not known*/
      FFWREC.YPGCD = "01"; /* Default value*/
      FFWREC.YPGABRV = "******";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    if (FFWREC.SYBSTGNB != "      " /* Style group passed from another appl*/
     && FFWREC.YPGCD != "  ")       /* & type group passed*/
      FF0SW00.FF0SWRDS = "Y"; /* Request for data switch "on"*/
    else
      if (FFWREC.YPGCD != "  "
       && FFWREC.XPCCD != "  ")
                                     /* Cat/type grp passed from another appl*/
        FF0SW00.FF0SWRDS = "Y"; /* Request for data switch "on"*/
      end
    end

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0S.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPLCD = "  ";
    FFWREC.XPLABRV = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0S001; /* Converse the main process*/


    FF0S001: FF0S001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0S001; /* Converse the main process*/


  end // end main
end // end FF0S

// Main process to display a map
Function FF0S001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0S100(); /* Obtain the data to display*/

  FF0S200(); /* Format and display the map*/

  FF0S300(); /* Check attention identifier*/

  FF0S400(); /* Reset fields to normal intensity*/

  FF0S500(); /* Verify the entered data*/

  FF0S600(); /* Process valid input request*/


end // end FF0S001

// Obtain the data to display
Function FF0S100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0SW00.FF0SWRDS == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

  FF0SW00.CACHGFL = "N"; /* Set data not obtained*/

   /* ------------------------------------------------------------*/
   /* Obtain data & build temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FF0S110(); /* Build up the temporary storage*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0SW00.TA5TSQIX == 0) /* No pages formatted*/
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    return; /* Exit to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FF0SW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0SW00.FF0SWRDS = "N"; /* Request for data switch "off"*/
  FF0SW00.CACHGFL = "Y"; /* Set data obtained*/


end // end FF0S100

// Build up the temporary storage
Function FF0S110()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FF0SW00.XXXTSLEN = 390; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FF0S111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain & format global rows into temporary storage area.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.SYBSTGNB != " "
   && FFWREC.YPGCD != " ")
    FF0S112();
  else
    if (FFWREC.XPCCD != " "
     && FFWREC.YPGCD != " ")
      FF0S113();
    end
  end


end // end FF0S110

// Purge any temporary storage
Function FF0S111()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF0SW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FF0SW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FF0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0S111

// Obtain & format FFUREC rows
Function FF0S112()
   /* ------------------------------------------------------------*/
   /* Select & open cursor for FFUREC set to be formatted using*/
   /* style group & type group.*/
   /* ------------------------------------------------------------*/

  FF0SS01(); /* Select set & open FFUREC csr*/

  while (FF0SW00.FF0SWECS == "N") /* Until end of cursor*/
    FF0SS02(); /* Fetch selected FFUREC row*/
    if (FF0SW00.FF0SWMIX > 15) /* Page is full*/
      FF0SS04(); /* Add page to temporary storage*/
    end
  end

  if (FF0SW00.FF0SWMIX > 1) /* Page was formatted*/
    FF0SS04(); /* Add page to temporary storage*/
  end

  FF0SS05(); /* Close FFUREC cursor*/


end // end FF0S112

// Select & format FFTREC
Function FF0S113()
   /* ------------------------------------------------------------*/
   /* Select & open cursor for FFTREC set to be formatted using*/
   /* category & type group.*/
   /* ------------------------------------------------------------*/

  FF0SS06(); /* Select set & open FFTREC csr*/

  while (FF0SW00.FF0SWECS == "N") /* Until end of cursor*/
    FF0SS07(); /* Fetch selected FFTREC row*/
    if (FF0SW00.FF0SWMIX > 15) /* Page is full*/
      FF0SS04(); /* Add page to temporary storage*/
    end
  end

  if (FF0SW00.FF0SWMIX > 1) /* Page was formatted*/
    FF0SS04(); /* Add page to temporary storage*/
  end

  FF0SS08(); /* Close FFTREC cursor*/


end // end FF0S113

// Format and converse the map
Function FF0S200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0SW00.FF0SWRDS == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0SW00.FF0SWFMS == "Y") /* map must be formatted*/
      FF0S210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH and map*/
   /* information.*/
   /* ------------------------------------------------------------*/

  FF0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0SM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0SM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0SM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0SM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0SM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "   "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0SM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0SM001.CAITEM; /* Application data*/


end // end FF0S200

// Format the display data
Function FF0S210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0SM001 initial; /* M001 input/output area*/

  FF0SW00.FF0SWFMS = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FF0SW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FF0SW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (FF0SW00.XXXTSPAG > FF0SW00.TA5TSQIX) /* Desired greater highest*/
        FF0SW00.XXXTSPAG = FF0SW00.TA5TSQIX; /* Default to highest*/
      end
      FF0SS15(); /* Obtain temporary storage page*/
    end
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set FF0SM001.XXXLITPG skip;
    set FF0SM001.XXXLITOF skip;
    FF0SM001.XXXTSPAG = FF0SW00.XXXTSPAG; /* Current page*/
    FF0SM001.TA5TSQIX = FF0SW00.TA5TSQIX; /* Highest page*/
  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0SM001.YPGCD = FFWREC.YPGCD;
  FF0SM001.YPGABRV = FFWREC.YPGABRV;
  FF0SM001.XPCCD = FFWREC.XPCCD;
  FF0SM001.XPCABRV = FFWREC.XPCABRV;
  FF0SM001.SYBSTGNB = FFWREC.SYBSTGNB;
  FF0SM001.SYBSTGNM = FFWREC.SYBSTGNM;

  FF0SW00.FF0SWMIX = 1; /* Initialize line index*/

  while (FF0SW00.FF0SWMIX <= 15 /* Until screen is full*/
   && FF0SW01.FF0SWCDT[FF0SWMIX] > 0) /* or end of data*/
    if (FF0SW00.FF0SWMIX == 1) /* First select field*/
      set FF0SM001.FF0SMSEL[FF0SWMIX] cursor, normal; /* Position cursor*/
    else
      set FF0SM001.FF0SMSEL[FF0SWMIX] normal; /* Unprotect*/
    end
    FF0SM001.FF0SMCDT[FF0SWMIX] = FF0SW01.FF0SWCDT[FF0SWMIX];
    FF0SM001.FF0SMCTM[FF0SWMIX] = FF0SW01.FF0SWCTM[FF0SWMIX];
    FF0SM001.XXXUSRID[FF0SWMIX] = FF0SW01.XXXUSRID[FF0SWMIX];
    FF0SW00.FF0SWMIX = FF0SW00.FF0SWMIX + 1; /* Increment line index*/
  end


end // end FF0S210

// Check attention identifier
Function FF0S300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FF0SW00.FF0SWRDS == "Y") /* Request for data*/
      set FF0SW01 empty; /* M001 display storage*/
    end
    FF0SW00.FF0SWFMS = "Y"; /* Format the map switch*/
    FF0SW00.FF0SWRDS = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (FF0SM001.CATOAP == "FF0H")
        set FF0SM001.CATOAP cursor, bold; /* Highlight*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(189); /* No fast path allowed*/
      else
        FF0S111(); /* Purge temporary storage*/
        XSFFS01(); /* Exit to another application*/
        set FF0SM001.CATOAP cursor, bold; /* Highlight*/
        FF0SW00.FF0SWFMS = "Y"; /* Format the map switch*/
        FF0SW00.FF0SWRDS = "N"; /* Request for data switch*/
      end
    else
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0SM001"; /* Application find code*/
    end
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end
    FF0S111(); /* Purge temporary storage*/
    XSFFS01(); /* Exit to another application*/
    FF0SW00.FF0SWFMS = "Y"; /* Format the map switch*/
    FF0SW00.FF0SWRDS = "N"; /* Request for data switch*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF13(GLOBAL-ADJ) was requested transfer to FF0C.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Global-Adj*/
    COMMAREA.CATOAP = "FF0C"; /* To application*/
    FF0S111(); /* Purge any temp storage*/
    XSFFS01(); /* Transfer to application*/
    /* ------------------------------------------------------------*/
     /* If transfer request failed display returned error message.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "    "; /* Clear to application*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7
   && converseVar.eventKey not pf8)
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end


end // end FF0S300

// Reset highlighted fields
Function FF0S400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0SM001.YPGCD initialAttributes;
  set FF0SM001.XPCCD initialAttributes;
  set FF0SM001.SYBSTGNB initialAttributes;

  FF0SW00.FF0SWMIX = 1; /* Initialize line index*/

  while (FF0SW00.FF0SWMIX <= 15 /* Until end of lines*/
   && FF0SM001.FF0SMCDT[FF0SWMIX] > 0) /* or end of display*/
    set FF0SM001.FF0SMSEL[FF0SWMIX] normal; /* Reset select flag*/
    FF0SW00.FF0SWMIX = FF0SW00.FF0SWMIX + 1; /* Increment line index*/
  end

  set FF0SM001.CATOAP initialAttributes; /* TO application*/
  set FF0SM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no pop-up window lists were reqeusted, return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.YPGCD == "?" /* Type group lies requested*/
   || FF0SM001.XPCCD == "?") /* Category list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF0SM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF0SM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF0SM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0SM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end
    set FF0SM001.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0SM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0SM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF0SM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0SM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF0S400

// Verify the entered data
Function FF0S500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.CAITEM > " ") /* Application data was entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0SM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    FF0S510(); /* Verify scroll request*/
  else
    /* ------------------------------------------------------------*/
     /* If it is not a scroll request & the search key was*/
     /* changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    if (FF0SM001.YPGCD != FFWREC.YPGCD       /* Type group changed*/
     || FF0SM001.XPCCD != FFWREC.XPCCD       /* or category changed*/
     || FF0SM001.SYBSTGNB != FFWREC.SYBSTGNB /* or style grp changed*/
     || FF0SW00.CACHGFL == "N")              /* Data not obtained*/
      FF0S520(); /* Verify the key fields*/
    else
      /* ------------------------------------------------------------*/
       /* Otherwise, if page was formatted, verify data in the line.*/
      /* ------------------------------------------------------------*/
      if (FF0SW00.TA5TSQIX > 0) /* Page was formatted*/
        FF0SW00.FF0SWSSW = "N"; /* Initialize select switch*/
        FF0SW00.FF0SWSSI = 0; /* Initialize save select ix*/
        FF0SW00.FF0SWMIX = 15; /* Initialize line index*/
        while (FF0SW00.FF0SWMIX > 0) /* Until end of lines*/
          FF0S530(); /* Verify data in the line*/
          FF0SW00.FF0SWMIX = FF0SW00.FF0SWMIX - 1; /* Decrement line number*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0S500

// Verify scroll request
Function FF0S510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FF0SW00.XXXTSPAG < 2)       /* and no previous pages*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FF0SW00.XXXTSPAG >= FF0SW00.TA5TSQIX) /* and no more pages*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0SW00.FF0SWMIX = 15; /* Initialize line index*/

  while (FF0SW00.FF0SWMIX > 0) /* Until end of lines*/
    if (FF0SM001.FF0SMSEL[FF0SWMIX] > " ") /* Selection entered*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FF0SM001.FF0SMSEL[FF0SWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FF0SW00.FF0SWMIX = FF0SW00.FF0SWMIX - 1; /* Decrement line number*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.YPGCD != FFWREC.YPGCD) /* Type group changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0SM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0SM001.XPCCD != FFWREC.XPCCD) /* Category changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0SM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0SM001.SYBSTGNB != FFWREC.SYBSTGNB) /* Style grp changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0SM001.SYBSTGNB cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end


end // end FF0S510

// Verify the key fields
Function FF0S520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered since selections*/
   /* are not allowed when key fields are changed.*/
   /* ------------------------------------------------------------*/

  FF0SW00.FF0SWMIX = 15; /* Initialize line index*/

  while (FF0SW00.FF0SWMIX > 0) /* Until end of lines*/
    if (FF0SM001.FF0SMSEL[FF0SWMIX] > " ") /* Selection entered*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0SM001.FF0SMSEL[FF0SWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FF0SW00.FF0SWMIX = FF0SW00.FF0SWMIX - 1; /* Decrement line number*/
  end

   /* ------------------------------------------------------------*/
   /* Verify that either category/type group or style group*/
   /* were entered.  Key fields are not allowed to be spaces*/
   /* or zeros.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.SYBSTGNB == " ") /* Style group not entered*/
    if (FF0SM001.YPGCD == " ") /* Type group not entered*/
      if (FF0SM001.XPCCD == " ") /* Category not entered*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        set FF0SM001.SYBSTGNB cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Indicate missing*/
      else
        FFWREC.XXXMODID = "520"; /* Module identification*/
        set FF0SM001.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Indicate missing*/
      end
    else
      if (FF0SM001.XPCCD == " ") /* Category not entered*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        set FF0SM001.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Indicate missing*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If style group was entered verify that it is valid.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.SYBSTGNB > " " /* Style group was entered*/
   && FF0SM001.YPGCD != " ")  /* & type group entered*/
    set FF3REC empty;
    FF3REC.SYBSTGNB = FF0SM001.SYBSTGNB;
    FF3REC.YPGCD = FF0SM001.YPGCD;
    FF3REC.YSMXDV = "10";
    FF3REC.XLCCD = "*";
    TA1REC.TA1PGMNM = "FF0S";
    XSFFS22(); /* Validate style group*/
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
        FF0SM001.SYBSTGNM = FF3REC.SYBSTGNM; /* Short desc*/
        FF0SM001.XPCCD = FF3REC.XPCCD;
      else
        /* ------------------------------------------------------------*/
         /* If not found, indicate invalid.*/
        /* ------------------------------------------------------------*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          FF0SM001.SYBSTGNM = "            "; /* Short desc*/
          FFWREC.XXXMODID = "520"; /* Module identification*/
          set FF0SM001.SYBSTGNB cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Indicate invalid*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            FF0SM001.SYBSTGNM = "            "; /* Short desc*/
            FFWREC.XXXMODID = "520"; /* Module identification*/
            set FF0SM001.SYBSTGNB cursor, bold; /* Highlight*/
            converseLib.validationFailed(47); /* Indicate not available*/
          else
            FF0SM001.SYBSTGNM = "            "; /* Short desc*/
            FFWREC.XXXMODID = "520"; /* Module identification*/
            set FF0SM001.SYBSTGNB cursor, bold; /* Highlight*/
            converseLib.validationFailed(1); /* System error occured*/
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.XPCCD > " ") /* Category was entered*/
    if (FF0SM001.XPCCD in XPCTBL.XPCCD /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      FF0SM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF0SM001.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0SM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0SM001.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.YPGCD > " ") /* Type group was entered*/
    if (FF0SM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF0SM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF0SM001.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0SM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0SM001.YPGABRV = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF0SM001.XPCABRV != " " /* Category valid*/
     && FF0SM001.YPGABRV != " ") /* & type grp valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.XPLCD = "*";
      FF2REC.XPCCD = FF0SM001.XPCCD;
      FF2REC.YPGCD = FF0SM001.YPGCD;
      FF2REC.YSMXDV = "10";

      FF0SS20(); /* Select & open FF2REC "S1" csr*/

      FF0SS21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF0SM001.YPGCD cursor, bold; /* Highlight*/
        set FF0SM001.XPCCD bold; /* Highlight*/
      end

      FFWREC.FFWMSESN = FF2REC.FF2NSEAS;
      FFWREC.FFABEGMO = FF2REC.FF2SEASN;
      FFWREC.XPLCD = FF2REC.XPLCD;
      if (FFWREC.XPLCD in XPLTBL.XPLCD)
        FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end

      FF0SS22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF0S520

// Verify data in the line
Function FF0S530()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.FF0SMSEL[FF0SWMIX] > " " /* Selection was entered*/
   && FF0SM001.FF0SMSEL[FF0SWMIX] != "S") /* and is not a "S"*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FF0SM001.FF0SMSEL[FF0SWMIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(41); /* Indicate only "S" may be used*/
  end

  if (FF0SM001.FF0SMSEL[FF0SWMIX] > " ") /* Selection made*/
    if (FF0SW00.FF0SWSSW == "Y") /* Selection already made*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0SM001.FF0SMSEL[FF0SWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(136); /* Indicate more than one line selected*/
    else
      FF0SW00.FF0SWSSW = "Y"; /* Indicate selection made*/
      FF0SW00.FF0SWSSI = FF0SW00.FF0SWMIX; /* Save select index*/
    end
  end


end // end FF0S530

// Process valid input request
Function FF0S600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0SW00.FF0SWFMS = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FF system commarea.*/
   /* ------------------------------------------------------------*/

  if (FF0SM001.YPGCD != FFWREC.YPGCD /* Type group changed*/
   || FF0SM001.XPCCD != FFWREC.XPCCD /* or category changed*/
   || FF0SM001.SYBSTGNB != FFWREC.SYBSTGNB) /* or style grp changed*/
    FFWREC.YPGCD = FF0SM001.YPGCD;
    FFWREC.YPGABRV = FF0SM001.YPGABRV;
    FFWREC.XPCCD = FF0SM001.XPCCD;
    FFWREC.XPCABRV = FF0SM001.XPCABRV;
    FFWREC.SYBSTGNB = FF0SM001.SYBSTGNB;
    FFWREC.SYBSTGNM = FF0SM001.SYBSTGNM;
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/
    if (FFWREC.SYBSTGNB != " " /* Style group entered*/
     && FFWREC.YPGCD != "  ")  /* & type group entered*/
      FF0S111(); /* Purge any temp storage*/
      FF0SW00.FF0SWRDS = "Y"; /* Request for data switch*/
    else
      if (FFWREC.YPGCD != "  " /* Type group entered*/
       && FFWREC.XPCCD != "  ") /* and category entered*/
        FF0S111(); /* Purge any temp storage*/
        FF0SW00.FF0SWRDS = "Y"; /* Request for data switch*/
      else
        FF0SW00.FF0SWRDS = "N"; /* Request for data switch*/
      end
    end
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    FF0SW00.XXXTSPAG = FF0SW00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    FF0SW00.XXXTSPAG = FF0SW00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* ENTER was requested so send key data of selected global*/
   /* adjustment to FF0H.*/
   /* ------------------------------------------------------------*/

  if (FF0SW00.FF0SWSSW == "Y") /* A selection was made*/
    COMMAREA.CATOAP = "FF0H"; /* To application*/
    FFWREC.FFTGCNBR = FF0SW01.FFTGCNBR[FF0SWSSI];
    FF0S111(); /* Purge any temp storage*/
    if (FFWREC.XPLCD == " "
     || FFWREC.XPCCD == " "
     || FFWREC.YPGCD == " ")
      FF0S610(); /* Obtain missing ffwrec fields*/
    end
    XSFFS01(); /* Transfer to application*/
    /* ------------------------------------------------------------*/
     /* If transfer request failed display returned error message.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "    "; /* Clear to application*/
    exit stack; /* Exit to display map*/
  else
    FFWREC.XXXMODID = "600"; /* Module identification*/
    converseLib.validationFailed(154); /* Indicate selection missing*/
    exit stack; /* Exit to display map*/
  end


end // end FF0S600

// Obtain missing FFWREC fields
Function FF0S610()
   /* ------------------------------------------------------------*/
   /* Obtain missing line & category codes & their abbreviations*/
   /* for given style group.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.SYBSTGNB != " " /* Style grp was entered*/
   && FFWREC.YPGCD != " ")   /* & type group entered*/
    set FF3REC empty;
    FF3REC.SYBSTGNB = FFWREC.SYBSTGNB;
    FF3REC.YPGCD = FFWREC.YPGCD;
    FF3REC.YSMXDV = "10";
    FF3REC.XLCCD = "*";
    TA1REC.TA1PGMNM = "FF0S";
    XSFFS22(); /* Validate style group*/
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
        FFWREC.XPCCD = FF3REC.XPCCD;
        if (FFWREC.XPCCD in XPCTBL.XPCCD)
          FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
        end
        FFWREC.XPLCD = FF3REC.XPLCD;
        if (FFWREC.XPLCD in XPLTBL.XPLCD)
          FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        end
      else
        /* ------------------------------------------------------------*/
         /* If not found, indicate invalid.*/
        /* ------------------------------------------------------------*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          FF0SM001.SYBSTGNM = "            "; /* Short desc*/
          FFWREC.XXXMODID = "610"; /* Module identification*/
          set FF0SM001.SYBSTGNB cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Indicate invalid*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            FF0SM001.SYBSTGNM = "            "; /* Short desc*/
            FFWREC.XXXMODID = "610"; /* Module identification*/
            set FF0SM001.SYBSTGNB cursor, bold; /* Highlight*/
            converseLib.validationFailed(47); /* Indicate not available*/
          else
            FF0SM001.SYBSTGNM = "            "; /* Short desc*/
            FFWREC.XXXMODID = "610"; /* Module identification*/
            set FF0SM001.SYBSTGNB cursor, bold; /* Highlight*/
            converseLib.validationFailed(1); /* System error occured*/
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain missing line code & abrv for given cat/type group.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage*/

  FF2REC.XPLCD = "*";
  FF2REC.XPCCD = FFWREC.XPCCD;
  FF2REC.YPGCD = FFWREC.YPGCD;
  FF2REC.YSMXDV = "10";

  FF0SS20(); /* Select & open FF2REC "S1" csr*/

  FF0SS21(); /* Fetch first FF2REC "S1" csr*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    FFWREC.XXXMODID = "610"; /* Module identification*/
    converseLib.validationFailed(203); /* Inconsistent relationship*/
    set FF0SM001.YPGCD cursor, bold; /* Highlight*/
    set FF0SM001.XPCCD bold; /* Highlight*/
  end

  FFWREC.FFWMSESN = 12 / FF2REC.FF2NSEAS; /* ====> # of months in season*/
  FFWREC.FFABEGMO = FF2REC.FF2SEASN; /* ===> First Season begin month*/
  FFWREC.XPLCD = FF2REC.XPLCD;
  if (FFWREC.XPLCD in XPLTBL.XPLCD)
    FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
  end

  FF0SS22(); /* Close FF2REC "S1" csr*/


end // end FF0S610

// Select & open FFUREC cursor
Function FF0SS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFUREC empty; /* Clear row storage area*/

  FFUREC.SYBSTGNB = FFWREC.SYBSTGNB;
  FFUREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3690" ("S1", SQLCA, FFUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0SW00.FF0SWMIX = 1; /* Initialize display index*/
      FF0SW00.FF0SWECS = "N";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE GROUP GLOBALS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFUREC.FFUKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS01

// Fetch next FFUREC row
Function FF0SS02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3690" ("N1", SQLCA, FFUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0SS03(); /* Save in display storage*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FF0SW00.FF0SWECS = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FFUREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGSGRP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS02

// Save data in display storage
Function FF0SS03()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.SYBSTGNB != " ")
    FF0SW01.FF0SWCDT[FF0SWMIX] = FFUREC.ZZZSDT; /* Create date*/
    FF0SW01.FF0SWCTM[FF0SWMIX] = FFUREC.ZZZSTM; /* Create time*/
    FF0SW01.XXXUSRID[FF0SWMIX] = FFUREC.XXXUSRID; /* User-id*/
    FF0SW01.FFTGCNBR[FF0SWMIX] = FFUREC.FFTGCNBR; /* Global number*/
  else
    FF0SW01.FF0SWCDT[FF0SWMIX] = FFTREC.ZZZSDT; /* Create date*/
    FF0SW01.FF0SWCTM[FF0SWMIX] = FFTREC.ZZZSTM; /* Create time*/
    FF0SW01.XXXUSRID[FF0SWMIX] = FFTREC.XXXUSRID; /* User-id*/
    FF0SW01.FFTGCNBR[FF0SWMIX] = FFTREC.FFTGCNBR; /* Global number*/
  end

  FF0SW00.FF0SWMIX = FF0SW00.FF0SWMIX + 1; /* Increment display index*/


end // end FF0SS03

// add page to temp storage
Function FF0SS04()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FF0SW01.XXXTSLEN = FF0SW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FF0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set FF0SW01 empty; /* M001 display storage*/
    FF0SW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FF0SW00.FF0SWMIX = 1; /* Map line number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS04

// Close FFUREC cursor
Function FF0SS05()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3690" ("C1", SQLCA, FFUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S05"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFUREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGSGRP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS05

// Select & open FFTREC cursor
Function FF0SS06()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFTREC empty; /* Clear row storage area*/

  FFTREC.XPCCD = FFWREC.XPCCD;
  FFTREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3670" ("S1", SQLCA, FFTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0SW00.FF0SWMIX = 1; /* Initialize display index*/
      FF0SW00.FF0SWECS = "N";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN CATEGORY GLOBALS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFTREC.FFTKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS06

// Fetch next FFtREC row
Function FF0SS07()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3670" ("N1", SQLCA, FFTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0SS03(); /* Save in display storage*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FF0SW00.FF0SWECS = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FFTREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGCAT001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS07

// Close FFTREC cursor
Function FF0SS08()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3670" ("C1", SQLCA, FFTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S08"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFTREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGCAT001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS08

// Read temporary storage page
Function FF0SS15()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FF0SW01.XXXTSLEN = FF0SW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FF0SW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FF0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S15"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS15

// Select & open FF2REC "S1" csr
Function FF0SS20()
   /* ------------------------------------------------------------*/
   /* Select the requested rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELATIONSHIP      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS20

// Fetch next FF2REC "S1" csr
Function FF0SS21()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Rows not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS21

// Close FF2REC "S1" csr
Function FF0SS22()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FF2REC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0SS22

//*** RECORD=FF0SW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0SW00 type basicRecord
  10 FF0SWMIX FF0SWMIX ; 
  10 FF0SWFMS FF0SWFMS ; 
  10 FF0SWRDS FF0SWRDS ; 
  10 FF0SWECS FF0SWECS ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 CACHGFL CACHGFL ; 
  10 FF0SWWDT FF0SWWDT ; 
    15 FF0SWWCC FF0SWWCC ; 
    15 FF0SWWYM FF0SWWYM ; 
      20 FF0SWWYY FF0SWWYY ; 
      20 FF0SWWMM FF0SWWMM ; 
  10 FF0SWCRD FF0SWCRD ; 
    15 FF0SWCRC FF0SWCRC ; 
    15 FF0SWCRY FF0SWCRY ; 
    15 FF0SWCRM FF0SWCRM ; 
    15 FF0SWCDY FF0SWCDY ; 
  10 FF0SWCHM FF0SWCHM ; 
  10 FF0SWVDT FF0SWVDT ; 
    15 FF0SWVYM FF0SWVYM ; 
    15 FF0SWVDD FF0SWVDD ; 
  10 FF0SWSSW FF0SWSSW ; 
  10 FF0SWSSI FF0SWSSI ; 
end // end FF0SW00

//*** RECORD=FF0SW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0SW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(390) ; 
    10 FF0SWSEL FF0SWSEL [15] ; 
    10 FF0SWCDT FF0SWCDT [15] ; 
    10 FF0SWCTM FF0SWCTM [15] ; 
    10 XXXUSRID XXXUSRID [15] ; 
    10 FFTGCNBR FFTGCNBR [15] ; 
end // end FF0SW01

// change date ccyymmdd
DataItem FF0SWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create day
DataItem FF0SWCDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create hours/minutes
DataItem FF0SWCHM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create century
DataItem FF0SWCRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create ccyymmdd
DataItem FF0SWCRD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create month
DataItem FF0SWCRM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create year
DataItem FF0SWCRY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change time hhmm
DataItem FF0SWCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor switch
DataItem FF0SWECS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0SWFMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map lines index
DataItem FF0SWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0SWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work sheet selection indicator
DataItem FF0SWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save select index
DataItem FF0SWSSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection switch
DataItem FF0SWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// validate day
DataItem FF0SWVDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate date
DataItem FF0SWVDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate year/month
DataItem FF0SWVYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FF0SWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyymm
DataItem FF0SWWDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FF0SWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year/month
DataItem FF0SWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FF0SWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

