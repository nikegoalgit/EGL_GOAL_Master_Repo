package ff09;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF09 ****
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application via FAST PATH.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/15/89  LDELUH  New application.
// FF#134   08/16/90  SFORD   Set Job complete msg = 'y'
//                            for parm sent to TA0P
// FF#185   01/02/91  SFORD   Set up new request options for
// FF#186                     summary worksheet reports print
// FF#210   02/08/91  MDANGE  Add four year indices report.
//                            FF2231.
// FF#185   02/18/91  SFORD   Change begin date edit to verify
//                            using 'SM' in VFFXRF01 select.
// FF#224   05/08/91  LDELUH  Remove option to pring all prod
//                            worksheets for a requested cat.
// FF#225   05/13/91  JJUCH   Add new report - cat clsout rpt.
// fix      06/04/91  JJUCH   add disp for TA0431.
// FF#252   11/06/91  LDELUH  Add new report - cat bgrd rpt.
// FF#251   12/06/91  KSANFO  Add new report - 4 YR INDICES
//                            REPORT BY LINE.
// FF#254   12/16/91  LDELUH  Add new target summary rpts.
// FF#278   02/13/92  LDELUH  Remove begin month parm from
//                            b-grade & closeout reports.
// FF1111   04/24/92  LDELUH  Allow for varying seasons for
//                            S.R. summary & target wrksht
//                            prints.
// FF277    09/08/92  JJUCH   Add buy balance & exception rpts.
// FF350    10/26/92  KSTOKK  Add new Seas Summ Rpt by Sty Grp.
// FF359    11/09/92  KSTOKK  Add type code processing.
// FF353    11/11/92  JJUCH   Change both 4 year indices rpts
//                            to variable no. of year rpts
// Fix      12/04/92  JJUCH   Change the screen title of the
//                            indices reports.
// Fix      01/25/93  JJUCH   Fix the bug of editing season end
//                            end month.
// FF       09/02/93  mdange  Add logic to submit either test
//                            or prod JCL.
// FIX      12/15/94  KGRAHA  Move '10' to YSMXDV in FF09S09.
//          04/15/96  LDAVI4  Added report type processing
//                            for 'By Line' and By Category'
//                            Seasonal reports.
//          12/18/96  CWHIT1  FIX CODE IN 094 & 104 FOR YR 2000
// ff848    05/15/97  dsmit0  added code for total report
// ff1191   08/14/97  VBALAK  Provided option for type totals
//                            and grand totals.
// ff1293   11/04/97  rkudpi  Changed test Jcls in FF09T51,
//                            FF09T6O, FF09T63 for compliance
//                            with new MDE
// ff50     1/8/98   vbalak   changed code to introduce need/
//                            ship month based options,m003
// ff50     6/26/98  cwhite   changed code to introduce need/
//                            ship month based options,m012
// *********************
Program FF09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF09W00 FF09W00; // record
  FF09W01 FF09W01; // record
  FF09W03 FF09W03; // record
  FF09W04 FF09W04; // record
  FF09W05 FF09W05; // record
  FF09W06 FF09W06; // record
  FF09W07 FF09W07; // record
  FF09W08 FF09W08; // record
  FF09W09 FF09W09; // record
  FF09W10 FF09W10; // record
  FF09W11 FF09W11; // record
  FF09W12 FF09W12; // record
  FF09W13 FF09W13; // record
  FF09W14 FF09W14; // record
  FF09W15 FF09W15; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FFFREC FFFREC; // record
  FFQREC FFQREC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FF09T02; // table
  use FF09T03; // table
  use FF09T04; // table
  use FF09T05; // table
  use FF09T06; // table
  use FF09T07; // table
  use FF09T08; // table
  use FF09T09; // table
  use FF09T1O; // table
  use FF09T11; // table
  use FF09T12; // table
  use FF09T13; // table
  use FF09T14; // table
  use FF09T15 {deleteAfterUse = yes}; // table
  use FF09T16 {deleteAfterUse = yes}; // table
  use FF09T17 {deleteAfterUse = yes}; // table
  use FF09T18 {deleteAfterUse = yes}; // table
  use FF09T5O {deleteAfterUse = yes}; // table
  use FF09T51 {deleteAfterUse = yes}; // table
  use FF09T52 {deleteAfterUse = yes}; // table
  use FF09T53 {deleteAfterUse = yes}; // table
  use FF09T54 {deleteAfterUse = yes}; // table
  use FF09T55 {deleteAfterUse = yes}; // table
  use FF09T56 {deleteAfterUse = yes}; // table
  use FF09T57 {deleteAfterUse = yes}; // table
  use FF09T58 {deleteAfterUse = yes}; // table
  use FF09T59 {deleteAfterUse = yes}; // table
  use FF09T6O {deleteAfterUse = yes}; // table
  use FF09T61 {deleteAfterUse = yes}; // table
  use FF09T62 {deleteAfterUse = yes}; // table
  use FF09T63 {deleteAfterUse = yes}; // table
  use FF09T64 {deleteAfterUse = yes}; // table
  use FF09T65 {deleteAfterUse = yes}; // table
  use FF09T66 {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use FF09M.FF09M002,  // forms
      FF09M.FF09M003, 
      FF09M.FF09M004, 
      FF09M.FF09M005, 
      FF09M.FF09M006, 
      FF09M.FF09M007, 
      FF09M.FF09M008, 
      FF09M.FF09M009, 
      FF09M.FF09M010, 
      FF09M.FF09M011, 
      FF09M.FF09M012, 
      FF09M.FF09M013, 
      FF09M.FF09M014, 
      FF09M.FF09M099, 
      FF09M.TA0PM001, 
      FF09M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set FF09M002 initial; /* M002 input/output*/
    set FF09M003 initial; /* M003 input/output*/
    set FF09M004 initial; /* M004 input/output*/
    set FF09M005 initial; /* M005 input/output*/
    set FF09M006 initial; /* M006 input/output*/
    set FF09M007 initial; /* M007 input/output*/
    set FF09M008 initial; /* M008 input/output*/
    set FF09M009 initial; /* M009 input/output*/
    set FF09M010 initial; /* M010 input/output*/
    set FF09M009 initial; /* M011 input/output*/
    set FF09M012 initial; /* M012 input/output*/
    set FF09M099 initial; /* M099 input/output*/
    set FF09W00 empty; /* Working storage*/
    set FF09W01 empty; /* Working storage*/
    set XX0XW01 empty; /* Date/time parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date edit parameters*/
    set TA6REC empty; /* Print subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Indicate that the report distribution must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the report menu.*/
     /* ------------------------------------------------------------*/

    FF09W01.FF09WIXL = 14; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF09001; /* Converse the main process*/


    FF09001: FF09001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF09001; /* Converse the main process*/


  end // end main
end // end FF09

// Main process to display a map
Function FF09001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FF09W01.FF09WSWX != "Y") /* EXIT not requested*/

    if (FF09W01.FF09MSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/
      FF09010(); /* Specify report distribution*/
    end

    if (FF09W01.FF09MSEL[2] == "S") /* Line 2 was selected*/
      FF09020(); /* Variance Exception Report*/
    end

    if (FF09W01.FF09MSEL[3] == "S") /* Line 3 was selected*/
      FF09030(); /* Seasonal Forecast Summary Rpt*/
    end

    if (FF09W01.FF09MSEL[4] == "S") /* Line 4 was selected*/
      FF09120(); /* Seasonal Forecast Sum for range*/
    end

    if (FF09W01.FF09MSEL[5] == "S") /* Line 4 was selected*/
      FF09040(); /* Sesn Comp by Cat Report*/
    end

    if (FF09W01.FF09MSEL[6] == "S") /* Line 5 was selected*/
      FF09050(); /* Sesn Comp by Line Report*/
    end

    if (FF09W01.FF09MSEL[7] == "S") /* Line 6 was selected*/
      FF09060(); /* Print closeout report*/
    end

    if (FF09W01.FF09MSEL[8] == "S") /* Line 7 was selected*/
      FF09070(); /* Print b-grade report*/
    end

    if (FF09W01.FF09MSEL[9] == "S") /* Line 8 was selected*/
      FF09080(); /* Print summary worksheets*/
    end

    if (FF09W01.FF09MSEL[10] == "S") /* Line 9 was selected*/
      FF09090(); /* Print 4 Year Indices by Cat Report*/
    end

    if (FF09W01.FF09MSEL[11] == "S") /* Line 10 was selected*/
      FF09100(); /* Print 4 Year Indices by Line Report*/
    end

    if (FF09W01.FF09MSEL[12] == "S") /* Line 11 was selected*/
      FF09110(); /* Print Target worksheets*/
    end

    if (FF09W01.FF09MSEL[13] == "S") /* Line 13 was selected*/
      FF09130(); /* Print buy balance report*/
    end

    if (FF09W01.FF09MSEL[14] == "S") /* Line 14 was selected*/
      FF09140(); /* Print buy exception report*/
    end

  end

  FF09W01.FF09WSWX = "N"; /* Reset exit requested switch*/

  FF09990(); /* Report Request Menu*/


end // end FF09001

// Specify report distribution
Function FF09010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        FF09W01.FF09MSEL[1] = "*"; /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      FF09W01.FF09MSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/


end // end FF09010

// Variance Exception Report
Function FF09020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09021(); /* Format and display the map*/

  FF09022(); /* Check attention identifier*/

  FF09025(); /* Process valid input request*/


end // end FF09020

// Format and display the map
Function FF09021()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M002 alarm; /* Indicate sound alarm*/

  end

  converse FF09M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09021

// Check attention identifier
Function FF09022()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[2] = "C"; /* Indicate selection cancelled*/

    set FF09M002 initial; /* M002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "022"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09022

// Process valid input request
Function FF09025()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF090251(); /* format production jcl*/
    else
      FF090252(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "025"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09025

// Submit prod JCL FF1401
Function FF090251()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = FF09T02.TARJCL[FF09WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FF09T02.TARTYPE[FF09WIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T02.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "025"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[2] = "*"; /* Indicate function completed*/

    set FF09M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090251

// Submit test JCL FF1401
Function FF090252()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = FF09T5O.TARJCL[FF09WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FF09T5O.TARTYPE[FF09WIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T5O.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "025"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[2] = "*"; /* Indicate function completed*/

    set FF09M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090252

// Seasonal Fcst Summary Rpt
Function FF09030()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09031(); /* Format and display the map*/

  FF09032(); /* Check attention identifier*/

  FF09033(); /* Reset fields to normal intensity*/

  FF09034(); /* Verify the data that was entered*/

  FF09035(); /* Process valid input request*/


end // end FF09030

// Format and display the map
Function FF09031()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M003.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M003.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M003 alarm; /* Indicate sound alarm*/

  end

  converse FF09M003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09031

// Check attention identifier
Function FF09032()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[3] = "C"; /* Indicate selection cancelled*/

    set FF09M003 initial; /* M003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "032"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09032

// Reset highlighted fields
Function FF09033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M003.XPLCD initialAttributes; /* Line*/
  set FF09M003.YPGCD initialAttributes; /* Type group*/
  set FF09M003.XPCCD initialAttributes; /* Category*/
  set FF09M003.FF09MBMO initialAttributes; /* Range begin month*/
  set FF09M003.FF09MXMO initialAttributes; /* Range end month*/
  set FF09M003.XPRCD[1] initialAttributes; /* Product type code*/
  set FF09M003.XPRCD[2] initialAttributes; /* Product type code*/
  set FF09M003.XPRCD[3] initialAttributes; /* Product type code*/
  set FF09M003.XPRCD[4] initialAttributes; /* Product type code*/
  set FF09M003.FF09M-COMB-TYP-CDS initialAttributes; /* Combine indicator*/


   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.XPLCD == "?" /* Line code list requested*/
   || FF09M003.YPGCD == "?" /* Type group list requested*/
   || FF09M003.XPCCD == "?" /* Category code list requested*/
   || FF09M003.XPRCD == "?") /* Type code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "033"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M003.XPLCD = "  "; /* Code*/
      FF09M003.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M003.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M003.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M003.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Type Group Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M003.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M003.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M003.YPGCD = "  "; /* Code*/
      FF09M003.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M003.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Category Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M003.XPCCD = "  "; /* Code*/
      FF09M003.XPCABRV = "  "; /* Abbreviation*/
    else
      FF09M003.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF09M003.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M003.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Type Codes*/
   /* ------------------------------------------------------------*/

  if (FF09M003.XPRCD[1] == "?") /* product type requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF09M003.XPRCD[1] = "  "; /**/
    else
      FF09M003.XPRCD[1] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/

    end

    set FF09M003.XPRCD[1] cursor; /* Establish cursor position*/

  end


  if (FF09M003.XPRCD[2] == "?") /* product type requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF09M003.XPRCD[2] = "  "; /**/
    else
      FF09M003.XPRCD[2] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/

    end

    set FF09M003.XPRCD[2] cursor; /* Establish cursor position*/

  end


  if (FF09M003.XPRCD[3] == "?") /* product type requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF09M003.XPRCD[3] = "  "; /**/
    else
      FF09M003.XPRCD[3] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/

    end

    set FF09M003.XPRCD[3] cursor; /* Establish cursor position*/

  end


  if (FF09M003.XPRCD[4] == "?") /* product type requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF09M003.XPRCD[4] = "  "; /**/
    else
      FF09M003.XPRCD[4] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/

    end

    set FF09M003.XPRCD[4] cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "033"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09033

// Verify the entered data
Function FF09034()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.XPLCD == " ") /* Line not entered*/
    if (FF09M003.XPCCD == " ") /* & category not entered*/
      FFWREC.XXXMODID = "034"; /* Module identification*/
      set FF09M003.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

  if (FF09M003.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF09M003.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M003.FF09MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF09M003.FF09MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M003.FF09MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF09M003.FF09MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* tcs -beg-*/
  if (FF09M003.FF09M-NEED-SHIP-SEL != "N" /* Need month selection*/
   && FF09M003.FF09M-NEED-SHIP-SEL != "S") /* ship month selection*/
    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF09M003.FF09M-NEED-SHIP-SEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* tcs -end-*/

   /* ------------------------------------------------------------*/
   /* Verify product type codes and combine type code indicator.*/
   /* Look for combine type codes indicator equal 'N' or type*/
   /* codes entered with report type not by style/color.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.FF09M-COMB-TYP-CDS == "N") /* Combine type codes EQ 'N'*/
    if (FF09M003.FF09M-RPT-BY[2] == "S") /* Report by style/color*/
        /* continue*/
    else
      converseLib.validationFailed(324); /* can't print this report*/
      FFWREC.XXXMODID = "034"; /* error module id*/
      set FF09M003.FF09M-RPT-BY[1] cursor, bold; /* highlight*/
      set FF09M003.FF09M-COMB-TYP-CDS bold;
    end
  end

  if (FF09M003.XPRCD[1] == " " /* Type code(s) not entered*/
   && FF09M003.XPRCD[2] == " " 
   && FF09M003.XPRCD[3] == " " 
   && FF09M003.XPRCD[4] == " ")

   /* continue*/
  else /* Type code(s) entered*/

    if (FF09M003.FF09M-RPT-BY[2] == "S") /* Report by style/color*/

      FF09S-06(); /* Validate type codes*/

    else /* Not report by style/color*/

      set FF09M003.FF09M-RPT-BY[1] cursor, bold; /* highlight*/

      if (FF09M003.XPRCD[1] > " ") /* Type code entered*/
        set FF09M003.XPRCD[1] bold; /* highlight*/
      end
      if (FF09M003.XPRCD[2] > " ") /* Type code entered*/
        set FF09M003.XPRCD[2] bold; /* highlight*/
      end
      if (FF09M003.XPRCD[3] > " ") /* Type code entered*/
        set FF09M003.XPRCD[3] bold; /* highlight*/
      end
      if (FF09M003.XPRCD[4] > " ") /* Type code entered*/
        set FF09M003.XPRCD[4] bold; /* highlight*/
      end

      converseLib.validationFailed(324); /* inconsistent relationship*/
      FFWREC.XXXMODID = "034"; /* error module id*/
    end
  end

  if (FF09M003.FF09M-RPT-BY[2] == "S") /* Report by style/color*/

    FF09S-07(); /* Validate combine type codes indicator*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.YPGCD > " "  /* Type group entered*/
   || FF09M003.XPLCD > " "  /* or line entered*/
   || FF09M003.XPCCD > " "  /* or category entered*/
   || FF09M003.FF09MBMO > 0 /* or range beg mo entered*/
   || FF09M003.FF09MXMO > 0) /* or range end mo entered*/
    FF09S01(); /* Verify parameters*/
  end


   /* ------------------------------------------------------------*/
   /* Verify that one and only one report sequence was selected.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.FF09M-RPT-BY[1] > " " /* Style group rpt selected*/
   || FF09M003.FF09M-RPT-BY[2] > " ") /* Style/color rpt selected*/

    FF09W01.FF09WIXM = 2; /* Map line index*/

    while (FF09W01.FF09WIXM > 0) /* Until end of lines*/

      if (FF09M003.FF09M-RPT-BY[FF09WIXM] > " ") /* Line was selected*/

        if (FF09M003.FF09M-RPT-BY[FF09WIXM] == "S")

          FF09W01.FF09WNIX = FF09W01.FF09WIXM - 1; /* Next index*/

          while (FF09W01.FF09WNIX > 0) /* Until end of lines*/

            if (FF09M003.FF09M-RPT-BY[FF09WNIX] > " ") /* Line was selected*/

              FFWREC.XXXMODID = "034"; /* Module identification*/
              set FF09M003.FF09M-RPT-BY[FF09WIXM] cursor, bold; /**/
              converseLib.validationFailed(73); /* More than one selection*/

            end

            FF09W01.FF09WNIX = FF09W01.FF09WNIX - 1; /* Next index*/

          end

        else

          FFWREC.XXXMODID = "034"; /* Module identification*/
          set FF09M003.FF09M-RPT-BY[FF09WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(41); /* Invalid selection code*/

        end

      end

      FF09W01.FF09WIXM = FF09W01.FF09WIXM - 1; /* Map line index*/

    end

  else

    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF09M003.FF09M-RPT-BY[1] cursor, bold; /* Position cursor*/
    converseLib.validationFailed(154); /* No selection was made*/

  end


   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end FF09034

// Process valid input request
Function FF09035()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* next sentence*/
  else

    FFWREC.XXXMODID = "035"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/

   /* tcs -beg-*/
  if (FF09M003.FF09M-RPT-BY[1] == "S") /* By style group*/
    if (FF09M003.FF09M-NEED-SHIP-SEL == "S")
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        FF090351(); /* format production jcl*/
      else
        FF090353(); /* format development jcl*/
      end
    else
      if (FF09M003.FF09M-NEED-SHIP-SEL == "N")
        if (TA3REC.TA3RGNID == "03") /* if on production system*/
          FF090355(); /* format production jcl*/
        else
          FF090357(); /* format development jcl*/
        end
      end
    end
  end

  if (FF09M003.FF09M-RPT-BY[2] == "S") /* By style/color*/
    if (FF09M003.FF09M-NEED-SHIP-SEL == "S")
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        FF090352(); /* format production jcl*/
      else
        FF090354(); /* format development jcl*/
      end
    else
      if (FF09M003.FF09M-NEED-SHIP-SEL == "N")
        if (TA3REC.TA3RGNID == "03") /* if on production system*/
          FF090356(); /* format production jcl*/
        else
          FF090358(); /* format development jcl*/
        end
      end
    end
  end
   /* tcs -end-*/
end // end FF09035

// Submit Prod JCL FF2281
Function FF090351()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T15.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W15 empty; /* Parameters work area*/

      FF09W15.YPGCD = FF09M003.YPGCD; /* Type group*/

      if (FF09M003.XPCCD != " ") /* Category entered*/
        FF09W15.XPCCD = FF09M003.XPCCD; /* Category*/
      else
        FF09W15.XPLCD = FF09M003.XPLCD; /* Line*/
      end

      FF09W15.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W15.FF09WXMO = FFZREC.FFZENDMO; /* End month*/
      /* tcs -beg-*/
      FF09W15.FF09W-COMB-TYP-CDS = FF09M003.FF09M-COMB-TYP-CDS; /* COMB-TYP-CD*/
      FF09W15.FF09W-NEED-SHIP-SEL = FF09M003.FF09M-NEED-SHIP-SEL; /* need/ship selection*/

      /* tcs -end-*/
      TA6REC.TARJCL[TA6INDEX] = FF09W15.TARJCL; /* JCL*/

    else
      /* ----------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ----------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T15.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T15.TARTYPE[FF09WIXT]; /* Typ*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T15.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/

    else

      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[3] = "*"; /* Indicate function completed*/

    set FF09M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090351

// Submit prod JCL FF2201
Function FF090352()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T03.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W03 empty; /* Parameters work area*/

      FF09W03.YPGCD = FF09M003.YPGCD; /* Type group*/

      if (FF09M003.XPCCD != " ") /* Category entered*/
        FF09W03.XPCCD = FF09M003.XPCCD; /* Category*/
      else
        FF09W03.XPLCD = FF09M003.XPLCD; /* Line*/
      end

      FF09W03.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W03.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      FF09W03.FF09W-COMB-TYP-CDS = FF09M003.FF09M-COMB-TYP-CDS;

      /* tcs -beg-*/
      FF09W03.FF09W-NEED-SHIP-SEL = FF09M003.FF09M-NEED-SHIP-SEL;
      /* tcs -end-*/

      if (FF09M003.XPRCD[1] > " " /* type code*/
       || FF09M003.XPRCD[2] > " " /* type code*/
       || FF09M003.XPRCD[3] > " " /* type code*/
       || FF09M003.XPRCD[4] > " ") /* type code*/
        FF09W03.XPRCD[1] = FF09M003.XPRCD[1]; /* type code*/
        FF09W03.XPRCD[2] = FF09M003.XPRCD[2]; /* type code*/
        FF09W03.XPRCD[3] = FF09M003.XPRCD[3]; /* type code*/
        FF09W03.XPRCD[4] = FF09M003.XPRCD[4]; /* type code*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF09W03.TARJCL; /* Parameters*/

    else

      /* ----------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ----------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T03.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T03.TARTYPE[FF09WIXT]; /* Typ*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T03.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/

    else

      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[3] = "*"; /* Indicate function completed*/

    set FF09M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090352

// Submit test JCL FF2281
Function FF090353()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T63.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W15 empty; /* Parameters work area*/

      FF09W15.YPGCD = FF09M003.YPGCD; /* Type group*/

      if (FF09M003.XPCCD != " ") /* Category entered*/
        FF09W15.XPCCD = FF09M003.XPCCD; /* Category*/
      else
        FF09W15.XPLCD = FF09M003.XPLCD; /* Line*/
      end

      FF09W15.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W15.FF09WXMO = FFZREC.FFZENDMO; /* End month*/
      /* tcs -beg*/
      FF09W15.FF09W-COMB-TYP-CDS = FF09M003.FF09M-COMB-TYP-CDS; /* COMB-TYP-CD*/
      FF09W15.FF09W-NEED-SHIP-SEL = FF09M003.FF09M-NEED-SHIP-SEL; /* NEED/SHIP MONTH SELECTION*/
      /* tcs -end-*/
      TA6REC.TARJCL[TA6INDEX] = FF09W15.TARJCL; /* JCL*/

    else
      /* ----------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ----------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T63.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T63.TARTYPE[FF09WIXT]; /* Typ*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T63.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/

    else

      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[3] = "*"; /* Indicate function completed*/

    set FF09M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090353

// Submit test JCL FF2201
Function FF090354()
   /* Submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T51.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W03 empty; /* Parameters work area*/

      FF09W03.YPGCD = FF09M003.YPGCD; /* Type group*/

      if (FF09M003.XPCCD != " ") /* Category entered*/
        FF09W03.XPCCD = FF09M003.XPCCD; /* Category*/
      else
        FF09W03.XPLCD = FF09M003.XPLCD; /* Line*/
      end

      FF09W03.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W03.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      FF09W03.FF09W-COMB-TYP-CDS = FF09M003.FF09M-COMB-TYP-CDS;

      /* tcs -beg-*/
      FF09W03.FF09W-NEED-SHIP-SEL = FF09M003.FF09M-NEED-SHIP-SEL;
      /* tcs -end-*/


      if (FF09M003.XPRCD[1] > " " /* type code*/
       || FF09M003.XPRCD[2] > " " /* type code*/
       || FF09M003.XPRCD[3] > " " /* type code*/
       || FF09M003.XPRCD[4] > " ") /* type code*/
        FF09W03.XPRCD[1] = FF09M003.XPRCD[1]; /* type code*/
        FF09W03.XPRCD[2] = FF09M003.XPRCD[2]; /* type code*/
        FF09W03.XPRCD[3] = FF09M003.XPRCD[3]; /* type code*/
        FF09W03.XPRCD[4] = FF09M003.XPRCD[4]; /* type code*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF09W03.TARJCL; /* Parameters*/

    else

      /* ----------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ----------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T51.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T51.TARTYPE[FF09WIXT]; /* Typ*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T51.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/

    else

      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[3] = "*"; /* Indicate function completed*/

    set FF09M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090354

// Submit Prod JCL FF2291
Function FF090355()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T16.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W15 empty; /* Parameters work area*/

      FF09W15.YPGCD = FF09M003.YPGCD; /* Type group*/

      if (FF09M003.XPCCD != " ") /* Category entered*/
        FF09W15.XPCCD = FF09M003.XPCCD; /* Category*/
      else
        FF09W15.XPLCD = FF09M003.XPLCD; /* Line*/
      end

      FF09W15.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W15.FF09WXMO = FFZREC.FFZENDMO; /* End month*/
   /* TCS -BEG-*/
      FF09W15.FF09W-COMB-TYP-CDS = FF09M003.FF09M-COMB-TYP-CDS; /* need/ship based*/
      FF09W15.FF09W-NEED-SHIP-SEL = FF09M003.FF09M-NEED-SHIP-SEL; /* need/ship based*/
   /* TCS -END-*/

      TA6REC.TARJCL[TA6INDEX] = FF09W15.TARJCL; /* JCL*/

    else
      /* ----------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ----------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T16.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T16.TARTYPE[FF09WIXT]; /* Typ*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T16.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/

    else

      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[3] = "*"; /* Indicate function completed*/

    set FF09M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090355

// Submit prod JCL FF2201
Function FF090356()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    /* tcs -beg-*/
    if (FF09T17.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W03 empty; /* Parameters work area*/

      FF09W03.YPGCD = FF09M003.YPGCD; /* Type group*/

      if (FF09M003.XPCCD != " ") /* Category entered*/
        FF09W03.XPCCD = FF09M003.XPCCD; /* Category*/
      else
        FF09W03.XPLCD = FF09M003.XPLCD; /* Line*/
      end

      FF09W03.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W03.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      FF09W03.FF09W-COMB-TYP-CDS = FF09M003.FF09M-COMB-TYP-CDS;

      /* tcs -beg-*/
      FF09W03.FF09W-NEED-SHIP-SEL = FF09M003.FF09M-NEED-SHIP-SEL;
      /* tcs -end-*/



      if (FF09M003.XPRCD[1] > " " /* type code*/
       || FF09M003.XPRCD[2] > " " /* type code*/
       || FF09M003.XPRCD[3] > " " /* type code*/
       || FF09M003.XPRCD[4] > " ") /* type code*/
        FF09W03.XPRCD[1] = FF09M003.XPRCD[1]; /* type code*/
        FF09W03.XPRCD[2] = FF09M003.XPRCD[2]; /* type code*/
        FF09W03.XPRCD[3] = FF09M003.XPRCD[3]; /* type code*/
        FF09W03.XPRCD[4] = FF09M003.XPRCD[4]; /* type code*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF09W03.TARJCL; /* Parameters*/

    else

      /* ----------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ----------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T17.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T17.TARTYPE[FF09WIXT]; /* Typ*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T17.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/

    else

      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[3] = "*"; /* Indicate function completed*/

    set FF09M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090356

// Submit test JCL FF2311N
Function FF090357()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T64.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W15 empty; /* Parameters work area*/

      FF09W15.YPGCD = FF09M003.YPGCD; /* Type group*/

      if (FF09M003.XPCCD != " ") /* Category entered*/
        FF09W15.XPCCD = FF09M003.XPCCD; /* Category*/
      else
        FF09W15.XPLCD = FF09M003.XPLCD; /* Line*/
      end

      FF09W15.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W15.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      /* tcs -beg*/
      FF09W15.FF09W-COMB-TYP-CDS = FF09M003.FF09M-COMB-TYP-CDS;
      FF09W15.FF09W-NEED-SHIP-SEL = FF09M003.FF09M-NEED-SHIP-SEL;
      /* tcs -end-*/

      TA6REC.TARJCL[TA6INDEX] = FF09W15.TARJCL; /* JCL*/

    else
      /* ----------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ----------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T64.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T64.TARTYPE[FF09WIXT]; /* Typ*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T64.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/

    else

      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[3] = "*"; /* Indicate function completed*/

    set FF09M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090357

// Submit test JCL FF2201
Function FF090358()
   /* Submit test JCL ff2201 for need month*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T65.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W03 empty; /* Parameters work area*/

      FF09W03.YPGCD = FF09M003.YPGCD; /* Type group*/

      if (FF09M003.XPCCD != " ") /* Category entered*/
        FF09W03.XPCCD = FF09M003.XPCCD; /* Category*/
      else
        FF09W03.XPLCD = FF09M003.XPLCD; /* Line*/
      end

      FF09W03.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W03.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      FF09W03.FF09W-COMB-TYP-CDS = FF09M003.FF09M-COMB-TYP-CDS;

      /* tcs -beg-*/
      FF09W03.FF09W-NEED-SHIP-SEL = FF09M003.FF09M-NEED-SHIP-SEL;
      /* tcs -end-*/


      if (FF09M003.XPRCD[1] > " " /* type code*/
       || FF09M003.XPRCD[2] > " " /* type code*/
       || FF09M003.XPRCD[3] > " " /* type code*/
       || FF09M003.XPRCD[4] > " ") /* type code*/
        FF09W03.XPRCD[1] = FF09M003.XPRCD[1]; /* type code*/
        FF09W03.XPRCD[2] = FF09M003.XPRCD[2]; /* type code*/
        FF09W03.XPRCD[3] = FF09M003.XPRCD[3]; /* type code*/
        FF09W03.XPRCD[4] = FF09M003.XPRCD[4]; /* type code*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF09W03.TARJCL; /* Parameters*/

    else

      /* ----------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ----------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T65.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T65.TARTYPE[FF09WIXT]; /* Typ*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T65.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/

    else

      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[3] = "*"; /* Indicate function completed*/

    set FF09M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090358

// Sesn Comp by Cat Report
Function FF09040()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09041(); /* Format and display the map*/

  FF09042(); /* Check attention identifier*/

  FF09043(); /* Reset fields to normal intensity*/

  FF09044(); /* Verify the data that was entered*/

  FF09045(); /* Process valid input request*/


end // end FF09040

// Format and display the map
Function FF09041()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M004.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M004.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M004.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M004.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M004.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M004 alarm; /* Indicate sound alarm*/

  end

  converse FF09M004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09041

// Check attention identifier
Function FF09042()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[5] = "C"; /* Indicate selection cancelled*/

    set FF09M004 initial; /* M004 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "042"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09042

// Reset highlighted fields
Function FF09043()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M004.XPLCD initialAttributes; /* Line*/
  set FF09M004.FF09MBMO initialAttributes; /* Range begin month*/
  set FF09M004.FF09MXMO initialAttributes; /* Range end month*/
  set FF09M004.FF09MSMM[1] initialAttributes; /* Season end month*/
  set FF09M004.FF09MSMM[2] initialAttributes; /* Season end month*/
  set FF09M004.FF09MSMM[3] initialAttributes; /* Season end month*/
  set FF09M004.FF09MSMM[4] initialAttributes; /* Season end month*/
  set FF09M004.FF09MINL initialAttributes; /* Report type inline*/
  set FF09M004.FF09MMKP initialAttributes; /* Report type makeup*/
  set FF09M004.FF09MCBN initialAttributes; /* Report type combined*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.XPLCD == "?") /* Line code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "043"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M004.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M004.XPLCD = "  "; /* Code*/
      FF09M004.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M004.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M004.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M004.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "043"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09043

// Verify the entered data
Function FF09044()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  set FF09W04 empty; /* clear working storage*/

  if (FF09M004.FF09MSMM[1] == 0 /* season end months not entered*/
   && FF09M004.FF09MSMM[2] == 0 
   && FF09M004.FF09MSMM[3] == 0 
   && FF09M004.FF09MSMM[4] == 0)
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF09M004.FF09MSMM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M004.XPLCD == " ") /* Line not entered*/
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF09M004.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M004.FF09MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF09M004.FF09MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M004.FF09MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF09M004.FF09MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M004.FF09MINL == " " /* Report type not entered*/
   && FF09M004.FF09MMKP == " " 
   && FF09M004.FF09MCBN == " ")
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF09M004.FF09MINL cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  else
    FF09S-08(); /* Verify report type selection*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF09M004.XPLCD > " "  /* line entered*/
   || FF09M004.FF09MBMO > 0 /* or range beg mo entered*/
   || FF09M004.FF09MXMO > 0) /* or range end mo entered*/
    FF09S02(); /* Verify parameters*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    FF09W04.FF09WBMO = FFZREC.FFZBEGMO; /* move begin month*/
    FF09W04.FF09WXMO = FFZREC.FFZENDMO; /* move end month*/
    FF09S51(); /* edit the season end months*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF09044

// Process valid input request
Function FF09045()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF090451(); /* format production jcl*/
    else
      FF090452(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "045"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09045

// Submit prod JCL FF2211
Function FF090451()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T04.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W04.XPLCD = FF09M004.XPLCD; /* Line*/
      FF09W04.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W04.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF09M004.FF09MINL == "S")
        FF09W04.FF09WRPT = "01"; /* Inline report type*/
      end

      if (FF09M004.FF09MMKP == "S")
        FF09W04.FF09WRPT = "02"; /* Makeup report type*/
      end

      if (FF09M004.FF09MCBN == "S")
        FF09W04.FF09WRPT = "00"; /* Combined report type*/
      end


      TA6REC.TARJCL[TA6INDEX] = FF09W04.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T04.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T04.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T04.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "045"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[5] = "*"; /* Indicate function completed*/

    set FF09M004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090451

// Submit test JCL FF2211
Function FF090452()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T52.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W04.XPLCD = FF09M004.XPLCD; /* Line*/
      FF09W04.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W04.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF09M004.FF09MINL == "S")
        FF09W04.FF09WRPT = "01"; /* Inline report type*/
      end

      if (FF09M004.FF09MMKP == "S")
        FF09W04.FF09WRPT = "02"; /* Makeup report type*/
      end

      if (FF09M004.FF09MCBN == "S")
        FF09W04.FF09WRPT = "00"; /* Combined report type*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF09W04.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T52.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T52.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T52.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "045"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[5] = "*"; /* Indicate function completed*/

    set FF09M004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090452

// Sesn Comp by Line Report
Function FF09050()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09051(); /* Format and display the map*/

  FF09052(); /* Check attention identifier*/

  FF09053(); /* Reset fields to normal intensity*/

  FF09054(); /* Verify the data that was entered*/

  FF09055(); /* Process valid input request*/


end // end FF09050

// Format and display the map
Function FF09051()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M005.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M005.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M005.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M005.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M005.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M005 alarm; /* Indicate sound alarm*/

  end

  converse FF09M005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09051

// Check attention identifier
Function FF09052()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[6] = "C"; /* Indicate selection cancelled*/

    set FF09M005 initial; /* M005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "052"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09052

// Reset highlighted fields
Function FF09053()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M005.FF09MBMO initialAttributes; /* Range begin month*/
  set FF09M005.FF09MXMO initialAttributes; /* Range end month*/
  set FF09M005.FF09MSMM[1] initialAttributes; /* Season end month*/
  set FF09M005.FF09MSMM[2] initialAttributes; /* Season end month*/
  set FF09M005.FF09MSMM[3] initialAttributes; /* Season end month*/
  set FF09M005.FF09MSMM[4] initialAttributes; /* Season end month*/
  set FF09M005.FF09MINL initialAttributes; /* Inline report type*/
  set FF09M005.FF09MMKP initialAttributes; /* Makeup report type*/
  set FF09M005.FF09MCBN initialAttributes; /* Combined report type*/

end // end FF09053

// Verify the entered data
Function FF09054()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  set FF09W05 empty; /* initialize working storage record*/

  if (FF09M005.FF09MSMM[1] == 0 /* season end months not entered*/
   && FF09M005.FF09MSMM[2] == 0 
   && FF09M005.FF09MSMM[3] == 0 
   && FF09M005.FF09MSMM[4] == 0)
    FFWREC.XXXMODID = "054"; /* Module identification*/
    set FF09M005.FF09MSMM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M005.FF09MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "054"; /* Module identification*/
    set FF09M005.FF09MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M005.FF09MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "054"; /* Module identification*/
    set FF09M005.FF09MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M005.FF09MINL == " " /* Report type not entered*/
   && FF09M005.FF09MMKP == " " 
   && FF09M005.FF09MCBN == " ")
    FFWREC.XXXMODID = "054"; /* Module identification*/
    set FF09M005.FF09MINL cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  else
    FF09S-09(); /* Verify report type selection*/
  end
   /* ------------------------------------------------------------*/
   /* Edit the parameters*/
   /* ------------------------------------------------------------*/

  if (FF09M005.FF09MBMO > 0 /* and range beg mo entered*/
   && FF09M005.FF09MXMO > 0) /* and range end mo entered*/
    FF09S03(); /* Verify parameters*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    FF09W05.FF09WBMO = FFZREC.FFZBEGMO; /* move begin month*/
    FF09W05.FF09WXMO = FFZREC.FFZENDMO; /* move end month*/
    FF09S52(); /* edit the season end months*/
  end
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF09054

// Process valid input request
Function FF09055()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF090551(); /* format production jcl*/
    else
      FF090552(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "055"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09055

// Submit prod JCL FF2201
Function FF090551()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T05.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W05.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W05.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF09M005.FF09MINL == "S")
        FF09W05.FF09WRPT = "01"; /* Inline report type*/
      end

      if (FF09M005.FF09MMKP == "S")
        FF09W05.FF09WRPT = "02"; /* Makeup report type*/
      end

      if (FF09M005.FF09MCBN == "S")
        FF09W05.FF09WRPT = "00"; /* Combined report type*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF09W05.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T05.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T05.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T05.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "055"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[6] = "*"; /* Indicate function completed*/

    set FF09M005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090551

// Submit test JCL FF2201
Function FF090552()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T53.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W05.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W05.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF09M005.FF09MINL == "S")
        FF09W05.FF09WRPT = "01"; /* Inline report type*/
      end

      if (FF09M005.FF09MMKP == "S")
        FF09W05.FF09WRPT = "02"; /* Makeup report type*/
      end

      if (FF09M005.FF09MCBN == "S")
        FF09W05.FF09WRPT = "00"; /* Combined report type*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF09W05.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T53.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T53.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T53.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "055"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[6] = "*"; /* Indicate function completed*/

    set FF09M005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090552

// Category closeout report
Function FF09060()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09061(); /* Format and display the map*/

  FF09062(); /* Check attention identifier*/

  FF09063(); /* Reset fields to normal intensity*/

  FF09064(); /* Verify the data that was entered*/

  FF09065(); /* Process valid input request*/


end // end FF09060

// Format and display the map
Function FF09061()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* validate beginning month*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date*/
  FF09S13(); /* get FFCTL data*/
  FF09S14(); /* calc cur/comtp month*/

  if (FF09W01.FF09WCY1 == 0)
    FF09W01.FF09WCUR-DT = VGVar.currentShortGregorianDate; /* current date to ws*/
    FF09M006.FF09MBMO = FF09W01.FF09WCUR-YYMM; /* current dt to screen*/
  else
   /* calculated date*/
    FF09M006.FF09MBMO = FF09WYM1; /* to screen*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M006.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M006.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M006.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M006.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M006.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M006.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M006 alarm; /* Indicate sound alarm*/

  end

  converse FF09M006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09061

// Check attention identifier
Function FF09062()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[7] = "C"; /* Indicate selection cancelled*/

    set FF09M006 initial; /* m006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "062"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09062

// Reset highlighted fields
Function FF09063()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M006.XPLCD initialAttributes; /* Line*/
  set FF09M006.YPGCD initialAttributes; /* Type group*/
  set FF09M006.XPCCD initialAttributes; /* Category*/
  set FF09M006.FF09MEMO[1] initialAttributes; /* season 1 end date*/
  set FF09M006.FF09MEMO[2] initialAttributes; /* season 2 end date*/
  set FF09M006.FF09MEMO[3] initialAttributes; /* season 3 end date*/
  set FF09M006.FF09MEMO[4] initialAttributes; /* season 4 end date*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M006.XPLCD == "?" /* Line code list requested*/
   || FF09M006.YPGCD == "?" /* Type group list requested*/
   || FF09M006.XPCCD == "?") /* Category code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "063"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M006.XPLCD == "?") /* Line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE    "; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M006.XPLCD = "  "; /* Code*/
      FF09M006.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M006.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M006.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M006.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M006.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M006.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M006.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M006.YPGCD = "  "; /* Code*/
      FF09M006.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M006.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M006.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M006.XPCCD = "  "; /* Code*/
      FF09M006.XPCABRV = "  "; /* Abbreviation*/
    else
      FF09M006.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF09M006.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M006.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "063"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09063

// Verify the entered data
Function FF09064()
   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M006.YPGCD > " " /* Type group was entered*/
   && FF09M006.YPGCD != "*") /* and not wild card*/
    if (FF09M006.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M006.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M006.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "064"; /* Module identification*/
      set FF09M006.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    if (FF09M006.YPGCD == "*") /* If wild card*/
      FF09M006.YPGABRV = "ALL";
    else
      FF09M006.YPGABRV = " "; /* Clear abrv*/
      FFWREC.XXXMODID = "064"; /* Module identification*/
      set FF09M006.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M006.XPCCD > " ") /* Category was entered*/
    if (FF09M006.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M006.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M006.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "064"; /* Module identification*/
      set FF09M006.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M006.XPCABRV = " "; /* Clear abbrv*/
    if (FF09M006.XPLCD == " ") /* line was not entered*/
      FFWREC.XXXMODID = "064"; /* Module identification*/
      set FF09M006.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M006.XPLCD > " " /* Line was entered*/
   && FF09M006.XPLCD != "*") /* and not wild card*/
    if (FF09M006.XPLCD in XPLTBL.XPLCD           /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M006.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M006.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "064"; /* Module identification*/
      set FF09M006.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    if (FF09M006.XPLCD == "*") /* if wild card*/
      FF09M006.XPLABRV = "ALL";
    else
      FF09M006.XPLABRV = " "; /* Clear abbrv*/
      if (FF09M006.XPCCD == " ") /* category was not entered*/
        FFWREC.XXXMODID = "064"; /* Module identification*/
        set FF09M006.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Indicate invalid*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Check the inconsisiten relationship between line and cat*/
   /* ------------------------------------------------------------*/

  if (FF09M006.XPLCD == "*" /* Line was wild card*/
   && FF09M006.XPCCD > " ") /* and category was entered*/
    FFWREC.XXXMODID = "064"; /* Module identification*/
    set FF09M006.XPLCD cursor, bold; /* Highlight*/
    set FF09M006.XPCCD bold; /* Highlight*/
    converseLib.validationFailed(203); /* Indicate inconsistent relationship*/
  end



   /* ------------------------------------------------------------*/
   /* validate season lengths*/
   /* ------------------------------------------------------------*/

                                   /* determine the number of seasons*/
                                   /* entered,look backwards until data*/
                                   /* found*/

  FF09W01.FF09WSDT[1] = "    "; /* spaces to season end dates*/
  FF09W01.FF09WSDT[2] = "    "; /* spaces to season end dates*/
  FF09W01.FF09WSDT[3] = "    "; /* spaces to season end dates*/
  FF09W01.FF09WSDT[4] = "    "; /* spaces to season end dates*/
  FF09W01.FF09WNSS = 0; /* zero out number of seasons*/
  FF09W01.FF09WSIX = 4; /* index*/
  while (FF09W01.FF09WSIX > 0)
    if (FF09M006.FF09MEMO[FF09WSIX] > 0)
      FF09W01.FF09WNSS = FF09W01.FF09WSIX; /* number of seasons*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 4; /* force out of loop*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 1;
    end
  end

     /* look for season end months greater than 12*/

  FF09WSIX = 1; /* 0 to index*/
  while (FF09W01.FF09WSIX <= FF09WNSS)
    if (FF09M006.FF09MEMO[FF09WSIX] > 12)
      FFWREC.XXXMODID = "064"; /* Module identification*/
      set FF09M006.FF09MEMO[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    exit stack; /* get out*/
  end

     /* look for no seasons entered*/

  if (FF09W01.FF09WNSS == 0) /* no season lengths found*/

   /* ------------------------------------------------------------*/
   /* calculate season end months at 6 month interval if season*/
   /* end months were not entered*/
   /* ------------------------------------------------------------*/
    FF09W01.FF09WYM1 = FF09M006.FF09MBMO; /* beg dte to work area*/
                                   /* begin dte on screen*/
    FF09W01.FF09WYM1 = FF09W01.FF09WYM1 - 1; /* get sesn end from*/
                                   /* begin dte on screen*/
    if (FF09WMM1 == 00)
      FF09W01.FF09WYM1 = FF09W01.FF09WYM1 - 88;
    end
    FF09W01.FF09WHYM = FF09W01.FF09WYM1;
                                   /* save orig sesn end*/
    FF09WSIX = 1;
    FF09W01.FF09WSLN = 6;

    FF09WYM1 = FF09WHYM + FF09WSLN; /* add 6 to get sesn 1 end*/

    if (FF09WMM1 > 12)
      FF09WYM1 = FF09WYM1 + 88; /* convert to next year*/
    end
    FF09M006.FF09MEMO[FF09WSIX] = FF09WYM1; /* to map*/
    FF09W01.FF09WSDT[FF09WSIX] = FF09WYM1; /* to w01*/

    FF09WSIX = FF09WSIX + 1;

    FF09WYM1 = FF09WHYM + 100; /* get last sesn end*/

    if (FF09WMM1 > 12)
      FF09WYM1 = FF09WYM1 + 88; /* convert to next year*/
    end
    FF09M006.FF09MEMO[FF09WSIX] = FF09WYM1; /* to map*/
    FF09W01.FF09WSDT[FF09WSIX] = FF09WYM1; /* to w01*/


  else
              /* ** season end months were entered ****/

    FF09W01.FF09WSIX = 1; /* index*/
    while (FF09W01.FF09WSIX <= FF09W01.FF09WNSS) /* for number of seasons*/
      if (FF09M006.FF09MEMO[FF09WSIX] == 0) /* check for embedded zeros*/
        FFWREC.XXXMODID = "064"; /* Module identification*/
        set FF09M006.FF09MEMO[FF09WSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(440); /* embedded zero msg*/
        exit stack; /* go display map*/
      else
        FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
      end
    end
      /* ------------------------------------------------------------*/
       /* Verify that last season is 12 months past begin date month*/
      /* ------------------------------------------------------------*/
    FF09W01.FF09WSIX = FF09W01.FF09WNSS; /* last season number*/
    FF09W01.FF09WYM1 = FF09M006.FF09MBMO; /* begin date to work area*/

    if (FF09W01.FF09WMM1 < FF09M006.FF09MEMO[FF09WSIX])
                                   /* bgn mo < last sesn mo*/
      FF09W01.FF09WSMM[1] = FF09M006.FF09MEMO[FF09WSIX];
    else
      FF09W01.FF09WSMM[1] = FF09M006.FF09MEMO[FF09WSIX] + 12;
    end

    FF09W01.FF09WMM1 = FF09W01.FF09WSMM[1] - FF09W01.FF09WMM1; /* last sesn mo*/
                                  /* minus begn sesn mo*/
    if (FF09W01.FF09WMM1 == 11)
        /* next sentence*/
    else
      FFWREC.XXXMODID = "064"; /* Module identification*/
      set FF09M006.FF09MEMO[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* last season must complete year*/
      exit stack; /* go display map*/
    end
      /* ------------------------------------------------------------*/
       /* Verify that season end months are valid.*/
      /* ------------------------------------------------------------*/
    FF09WSIX = 1; /* reset index*/
    FF09W01.FF09WYM1 = FF09M006.FF09MBMO; /* begin date to work area*/
    FF09W01.FF09WHYM = FF09M006.FF09MBMO; /* save begin date*/

      /* set up season end YYMM in ff09w06*/

    FF09W01.FF09WSYY[1] = FF09W01.FF09WYY1; /* move year*/
    while (FF09WSIX <= FF09W01.FF09WNSS)
      FF09W01.FF09WSMM[FF09WSIX] = FF09M006.FF09MEMO[FF09WSIX]; /* move month*/

      if (FF09W01.FF09WMM1 > FF09W01.FF09WSMM[FF09WSIX] /* bgn mo > end*/
       && FF09W01.FF09WYY1 == FF09W01.FF09WHYY)         /* mo & yr not yet bumpd*/
        FF09WHYY = FF09WHYY + 1; /* bump year by 1*/
      end

      FF09W01.FF09WSYY[FF09WSIX] = FF09W01.FF09WHYY; /* move year*/
      FF09WSIX = FF09WSIX + 1; /* bump index*/
    end

    FF09WSIX = 1;
    FF09WNIX = 2;

    while (FF09WNIX <= FF09W01.FF09WNSS)
      if (FF09W01.FF09WSDT[FF09WSIX] /* sesn > next sesn*/
       >= FF09W01.FF09WSDT[FF09WNIX])
        FFWREC.XXXMODID = "064"; /* Module identification*/
        set FF09M006.FF09MEMO[FF09WSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* season must > following season*/
        FF09WSIX = 0;
      end
      FF09WSIX = FF09WSIX + 1; /* bump index*/
      FF09WNIX = FF09WNIX + 1; /* bump index2*/
    end

  end
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end FF09064

// Process valid input request
Function FF09065()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF090651(); /* format production jcl*/
    else
      FF090652(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "065"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09065

// Submit prod JCL FF2241
Function FF090651()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T06.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W06.XPLCD = FF09M006.XPLCD; /* Line code*/
      FF09W06.XPCCD = FF09M006.XPCCD; /* Category code*/
      FF09W06.YPGCD = FF09M006.YPGCD; /* Type group code*/
      FF09W06.FF09WEYM[1] = FF09W01.FF09WSDT[1]; /* sesn end month*/
      FF09W06.FF09WEYM[2] = FF09W01.FF09WSDT[2]; /* sesn end month*/
      FF09W06.FF09WEYM[3] = FF09W01.FF09WSDT[3]; /* sesn end month*/
      FF09W06.FF09WEYM[4] = FF09W01.FF09WSDT[4]; /* sesn end month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W06.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T06.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T06.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T06.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "065"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[7] = "*"; /* Indicate function completed*/

    set FF09M006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090651

// Submit test JCL FF2241
Function FF090652()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T54.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W06.XPLCD = FF09M006.XPLCD; /* Line code*/
      FF09W06.XPCCD = FF09M006.XPCCD; /* Category code*/
      FF09W06.YPGCD = FF09M006.YPGCD; /* Type group code*/
      FF09W06.FF09WEYM[1] = FF09W01.FF09WSDT[1]; /* sesn end month*/
      FF09W06.FF09WEYM[2] = FF09W01.FF09WSDT[2]; /* sesn end month*/
      FF09W06.FF09WEYM[3] = FF09W01.FF09WSDT[3]; /* sesn end month*/
      FF09W06.FF09WEYM[4] = FF09W01.FF09WSDT[4]; /* sesn end month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W06.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T54.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T54.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T54.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "065"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[7] = "*"; /* Indicate function completed*/

    set FF09M006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090652

// Cat B-Grade Report
Function FF09070()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09071(); /* Format and display the map*/

  FF09072(); /* Check attention identifier*/

  FF09073(); /* Reset fields to normal intensity*/

  FF09074(); /* Verify the data that was entered*/

  FF09075(); /* Process valid input request*/


end // end FF09070

// Format and display the map
Function FF09071()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* validate beginning month*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date*/
  FF09S13(); /* get FFCTL data*/
  FF09S14(); /* calc cur/comtp month*/

  if (FF09W01.FF09WCY1 == 0)
    FF09W01.FF09WCUR-DT = VGVar.currentShortGregorianDate; /* current date to ws*/
    FF09M007.FF09MBMO = FF09W01.FF09WCUR-YYMM; /* current dt to screen*/
  else
   /* calculated date*/
    FF09M007.FF09MBMO = FF09WYM1; /* to screen*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M007.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M007.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M007.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M007.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M007.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M007.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M007.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M007 alarm; /* Indicate sound alarm*/

  end

  converse FF09M007 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09071

// Check attention identifier
Function FF09072()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[8] = "C"; /* Indicate selection cancelled*/

    set FF09M007 initial; /* m007 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "072"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09072

// Reset highlighted fields
Function FF09073()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M007.XPLCD initialAttributes; /* Line*/
  set FF09M007.YPGCD initialAttributes; /* Type group*/
  set FF09M007.XPCCD initialAttributes; /* Category*/
  set FF09M007.FF09MEMO[1] initialAttributes; /* season end month*/
  set FF09M007.FF09MEMO[2] initialAttributes; /* season end month*/
  set FF09M007.FF09MEMO[3] initialAttributes; /* season end month*/
  set FF09M007.FF09MEMO[4] initialAttributes; /* season end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M007.XPLCD == "?" /* Line code list requested*/
   || FF09M007.YPGCD == "?" /* Type group list requested*/
   || FF09M007.XPCCD == "?") /* Category code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "073"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M007.XPLCD == "?") /* Line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE    "; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M007.XPLCD = "  "; /* Code*/
      FF09M007.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M007.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M007.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M007.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M007.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M007.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M007.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M007.YPGCD = "  "; /* Code*/
      FF09M007.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M007.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M007.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M007.XPCCD = "  "; /* Code*/
      FF09M007.XPCABRV = "  "; /* Abbreviation*/
    else
      FF09M007.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF09M007.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M007.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "073"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09073

// Verify the entered data
Function FF09074()
   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M007.YPGCD > " " /* Type group was entered*/
   && FF09M007.YPGCD != "*") /* and not wild card*/
    if (FF09M007.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M007.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M007.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "074"; /* Module identification*/
      set FF09M007.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    if (FF09M007.YPGCD == "*") /* If wild card*/
      FF09M007.YPGABRV = "ALL";
    else
      FF09M007.YPGABRV = " "; /* Clear abrv*/
      FFWREC.XXXMODID = "074"; /* Module identification*/
      set FF09M007.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M007.XPCCD > " ") /* Category was entered*/
    if (FF09M007.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M007.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M007.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "074"; /* Module identification*/
      set FF09M007.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M007.XPCABRV = " "; /* Clear abbrv*/
    if (FF09M007.XPLCD == " ") /* line was not entered*/
      FFWREC.XXXMODID = "074"; /* Module identification*/
      set FF09M007.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M007.XPLCD > " " /* Line was entered*/
   && FF09M007.XPLCD != "*") /* and not wild card*/
    if (FF09M007.XPLCD in XPLTBL.XPLCD           /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M007.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M007.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "074"; /* Module identification*/
      set FF09M007.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    if (FF09M007.XPLCD == "*") /* if wild card*/
      FF09M007.XPLABRV = "ALL";
    else
      FF09M007.XPLABRV = " "; /* Clear abbrv*/
      if (FF09M007.XPCCD == " ") /* category was not entered*/
        FFWREC.XXXMODID = "074"; /* Module identification*/
        set FF09M007.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Indicate invalid*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Check the inconsisiten relationship between line and cat*/
   /* ------------------------------------------------------------*/

  if (FF09M007.XPLCD == "*" /* Line was wild card*/
   && FF09M007.XPCCD > " ") /* and category was entered*/
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set FF09M007.XPLCD cursor, bold; /* Highlight*/
    set FF09M007.XPCCD bold; /* Highlight*/
    converseLib.validationFailed(203); /* Indicate inconsistent relationship*/
  end

   /* ------------------------------------------------------------*/
   /* validate season lengths*/
   /* ------------------------------------------------------------*/

                                   /* determine the number of seasons*/
                                   /* entered,look backwards until data*/
                                   /* found*/

  FF09W01.FF09WSDT[1] = "    "; /* spaces to season end dates*/
  FF09W01.FF09WSDT[2] = "    "; /* spaces to season end dates*/
  FF09W01.FF09WSDT[3] = "    "; /* spaces to season end dates*/
  FF09W01.FF09WSDT[4] = "    "; /* spaces to season end dates*/
  FF09W01.FF09WNSS = 0; /* zero out number of seasons*/
  FF09W01.FF09WSIX = 4; /* index*/
  while (FF09W01.FF09WSIX > 0)
    if (FF09M007.FF09MEMO[FF09WSIX] > 0)
      FF09W01.FF09WNSS = FF09W01.FF09WSIX; /* number of seasons*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 4; /* force out of loop*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 1;
    end
  end

     /* look for season end months greater than 12*/

  FF09WSIX = 1; /* 0 to index*/
  while (FF09W01.FF09WSIX <= FF09WNSS)
    if (FF09M007.FF09MEMO[FF09WSIX] > 12)
      FFWREC.XXXMODID = "074"; /* Module identification*/
      set FF09M007.FF09MEMO[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    exit stack; /* get out*/
  end

     /* look for no seasons entered*/

  if (FF09W01.FF09WNSS == 0) /* no season lengths found*/

   /* ------------------------------------------------------------*/
   /* calculate season end months at 6 month interval if season*/
   /* end months were not entered*/
   /* ------------------------------------------------------------*/
    FF09W01.FF09WYM1 = FF09M007.FF09MBMO; /* beg dte to work area*/
                                   /* begin dte on screen*/
    FF09W01.FF09WYM1 = FF09W01.FF09WYM1 - 1; /* get sesn end from*/
                                   /* begin dte on screen*/
    if (FF09WMM1 == 00)
      FF09W01.FF09WYM1 = FF09W01.FF09WYM1 - 88;
    end
    FF09W01.FF09WHYM = FF09W01.FF09WYM1;
                                   /* save orig sesn end*/
    FF09WSIX = 1;
    FF09W01.FF09WSLN = 6;

    FF09WYM1 = FF09WHYM + FF09WSLN; /* add 6 to get sesn 1 end*/

    if (FF09WMM1 > 12)
      FF09WYM1 = FF09WYM1 + 88; /* convert to next year*/
    end
    FF09M007.FF09MEMO[FF09WSIX] = FF09WYM1; /* to map*/
    FF09W01.FF09WSDT[FF09WSIX] = FF09WYM1; /* to w01*/

    FF09WSIX = FF09WSIX + 1;

    FF09WYM1 = FF09WHYM + 100; /* get last sesn end*/

    if (FF09WMM1 > 12)
      FF09WYM1 = FF09WYM1 + 88; /* convert to next year*/
    end
    FF09M007.FF09MEMO[FF09WSIX] = FF09WYM1; /* to map*/
    FF09W01.FF09WSDT[FF09WSIX] = FF09WYM1; /* to w01*/


  else
              /* ** season end months were entered ****/

    FF09W01.FF09WSIX = 1; /* index*/
    while (FF09W01.FF09WSIX <= FF09W01.FF09WNSS) /* for number of seasons*/
      if (FF09M007.FF09MEMO[FF09WSIX] == 0) /* check for embedded zeros*/
        FFWREC.XXXMODID = "074"; /* Module identification*/
        set FF09M007.FF09MEMO[FF09WSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(440); /* embedded zero msg*/
        exit stack; /* go display map*/
      else
        FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
      end
    end
      /* ------------------------------------------------------------*/
       /* Verify that last season is 12 months past begin date month*/
      /* ------------------------------------------------------------*/
    FF09W01.FF09WSIX = FF09W01.FF09WNSS; /* last season number*/
    FF09W01.FF09WYM1 = FF09M007.FF09MBMO; /* begin date to work area*/

    if (FF09W01.FF09WMM1 < FF09M007.FF09MEMO[FF09WSIX])
                                   /* bgn mo < last sesn mo*/
      FF09W01.FF09WSMM[1] = FF09M007.FF09MEMO[FF09WSIX];
    else
      FF09W01.FF09WSMM[1] = FF09M007.FF09MEMO[FF09WSIX] + 12;
    end

    FF09W01.FF09WMM1 = FF09W01.FF09WSMM[1] - FF09W01.FF09WMM1; /* last sesn mo*/
                                  /* minus begn sesn mo*/
    if (FF09W01.FF09WMM1 == 11)
        /* next sentence*/
    else
      FFWREC.XXXMODID = "074"; /* Module identification*/
      set FF09M007.FF09MEMO[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* last season must complete year*/
      exit stack; /* go display map*/
    end
      /* ------------------------------------------------------------*/
       /* Verify that season end months are valid.*/
      /* ------------------------------------------------------------*/
    FF09WSIX = 1; /* reset index*/
    FF09W01.FF09WYM1 = FF09M007.FF09MBMO; /* begin date to work area*/
    FF09W01.FF09WHYM = FF09M007.FF09MBMO; /* save begin date*/

      /* set up season end YYMM in ff09w07*/

    FF09W01.FF09WSYY[1] = FF09W01.FF09WYY1; /* move year*/
    while (FF09WSIX <= FF09W01.FF09WNSS)
      FF09W01.FF09WSMM[FF09WSIX] = FF09M007.FF09MEMO[FF09WSIX]; /* move month*/

      if (FF09W01.FF09WMM1 > FF09W01.FF09WSMM[FF09WSIX] /* bgn mo > end*/
       && FF09W01.FF09WYY1 == FF09W01.FF09WHYY)         /* mo & yr not yet bumpd*/
        FF09WHYY = FF09WHYY + 1; /* bump year by 1*/
      end

      FF09W01.FF09WSYY[FF09WSIX] = FF09W01.FF09WHYY; /* move year*/
      FF09WSIX = FF09WSIX + 1; /* bump index*/
    end

    FF09WSIX = 1;
    FF09WNIX = 2;

    while (FF09WNIX <= FF09W01.FF09WNSS)
      if (FF09W01.FF09WSDT[FF09WSIX] /* sesn > next sesn*/
       >= FF09W01.FF09WSDT[FF09WNIX])
        FFWREC.XXXMODID = "074"; /* Module identification*/
        set FF09M007.FF09MEMO[FF09WSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* season must > following season*/
        FF09WSIX = 0;
      end
      FF09WSIX = FF09WSIX + 1; /* bump index*/
      FF09WNIX = FF09WNIX + 1; /* bump index2*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end FF09074

// Process valid input request
Function FF09075()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF090751(); /* format production jcl*/
    else
      FF090752(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "075"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09075

// Submit prod JCL FF2251
Function FF090751()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T07.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W07.XPLCD = FF09M007.XPLCD; /* Line code*/
      FF09W07.XPCCD = FF09M007.XPCCD; /* Category code*/
      FF09W07.YPGCD = FF09M007.YPGCD; /* Type group code*/
      FF09W07.FF09WEYM[1] = FF09W01.FF09WSDT[1]; /* season end month*/
      FF09W07.FF09WEYM[2] = FF09W01.FF09WSDT[2]; /* season end month*/
      FF09W07.FF09WEYM[3] = FF09W01.FF09WSDT[3]; /* season end month*/
      FF09W07.FF09WEYM[4] = FF09W01.FF09WSDT[4]; /* season end month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W07.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T07.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T07.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T07.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "075"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[8] = "*"; /* Indicate function completed*/

    set FF09M007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090751

// Submit test JCL FF2251
Function FF090752()
   /* submit test jcl*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T55.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W07.XPLCD = FF09M007.XPLCD; /* Line code*/
      FF09W07.XPCCD = FF09M007.XPCCD; /* Category code*/
      FF09W07.YPGCD = FF09M007.YPGCD; /* Type group code*/
      FF09W07.FF09WEYM[1] = FF09W01.FF09WSDT[1]; /* season end month*/
      FF09W07.FF09WEYM[2] = FF09W01.FF09WSDT[2]; /* season end month*/
      FF09W07.FF09WEYM[3] = FF09W01.FF09WSDT[3]; /* season end month*/
      FF09W07.FF09WEYM[4] = FF09W01.FF09WSDT[4]; /* season end month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W07.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T55.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T55.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T55.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "075"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[8] = "*"; /* Indicate function completed*/

    set FF09M007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090752

// Summary Reports
Function FF09080()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09081(); /* Format and display the map*/

  FF09082(); /* Check attention identifier*/

  FF09083(); /* Reset fields to normal intensity*/

  FF09084(); /* Verify the data that was entered*/

  FF09085(); /* Process valid input request*/


end // end FF09080

// Format and display the map
Function FF09081()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    FF09M008.FF09MTYP = "N"; /* default type ?*/
    FF09M008.YPGCD = "01"; /* default product type grp cd ?*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M008.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M008.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M008.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M008.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M008.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M008.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M008.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M008 alarm; /* Indicate sound alarm*/

  end

  converse FF09M008 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09081

// Check attention identifier
Function FF09082()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[9] = "C"; /* Indicate selection cancelled*/

    set FF09M008 initial; /* M008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "082"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09082

// Reset highlighted fields
Function FF09083()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M008.XPLCD initialAttributes; /* Line*/
  set FF09M008.YPGCD initialAttributes; /* Type group*/
  set FF09M008.XPCCD initialAttributes; /* Category*/
  set FF09M008.FF09MBMO initialAttributes; /* Range begin month*/
  set FF09M008.FF09MTYP initialAttributes; /* combine type?*/
  set FF09M008.FF09MSMM[1] initialAttributes; /* sesn end months*/
  set FF09M008.FF09MSMM[2] initialAttributes; /* sesn end months*/
  set FF09M008.FF09MSMM[3] initialAttributes; /* sesn end months*/
  set FF09M008.FF09MSMM[4] initialAttributes; /* sesn end months*/

  set FF09M008.FF09MSEL[1] initialAttributes; /* Selection*/
  set FF09M008.FF09MSEL[2] initialAttributes; /* Selection*/
  set FF09M008.FF09MSEL[3] initialAttributes; /* Selection*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.XPLCD == "?" /* Line code list requested*/
   || FF09M008.YPGCD == "?" /* Type group list requested*/
   || FF09M008.XPCCD == "?") /* Category code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "083"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M008.XPLCD = "  "; /* Code*/
      FF09M008.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M008.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M008.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M008.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M008.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M008.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M008.YPGCD = "  "; /* Code*/
      FF09M008.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M008.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M008.XPCCD = "  "; /* Code*/
      FF09M008.XPCABRV = "  "; /* Abbreviation*/
    else
      FF09M008.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF09M008.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M008.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "083"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09083

// Verify the entered data
Function FF09084()
   /* ------------------------------------------------------------*/
   /* check report selections made then verify the entered*/
   /* data.*/
   /* ------------------------------------------------------------*/

  set FF09W08 empty; /* initialize w.s./pass record*/

  if (FF09M008.FF09MSEL[1] != "S" /* summary report was selected*/
   && FF09M008.FF09MSEL[1] > " ") /* summary report was selected*/
    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF09M008.FF09MSEL[1] cursor, bold; /* ===> selection error*/
    converseLib.validationFailed(41); /* must be an "S"*/
  end

  if (FF09M008.FF09MSEL[2] != "S" /* summary report was selected*/
   && FF09M008.FF09MSEL[2] > " ") /* summary report was selected*/
    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF09M008.FF09MSEL[2] cursor, bold; /* ===> selection error*/
    converseLib.validationFailed(41); /* must be an "S"*/
  end

  if (FF09M008.FF09MSEL[3] != "S" /* summary report was selected*/
   && FF09M008.FF09MSEL[3] > " ") /* summary report was selected*/
    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF09M008.FF09MSEL[3] cursor, bold; /* ===> selection error*/
    converseLib.validationFailed(41); /* must be an "S"*/
  end


   /* ------------------------------------------------------------*/
   /* If a report selection was made then verify the entered*/
   /* data.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.FF09MSEL[1] == "S" /* summary report was selected*/
   && FF09M008.FF09MSEL[3] == "S" /* summary report was selected*/
   || FF09M008.FF09MSEL[2] == "S" /* summary report was selected*/
   && FF09M008.FF09MSEL[3] == "S" /* summary report was selected*/
   || FF09M008.FF09MSEL[1] == "S" /* summary report was selected*/
   && FF09M008.FF09MSEL[2] == "S") /* summary report was selected*/

    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF09M008.FF09MSEL[2] cursor, bold; /* ===> selection error*/
    converseLib.validationFailed(136); /* mult-options not allowed*/
  end

  if (FF09M008.FF09MSEL[1] == " " /* summary report was selected*/
   && FF09M008.FF09MSEL[2] == " " /* summary report was selected*/
   && FF09M008.FF09MSEL[3] == " ") /* summary report was selected*/

    set FF09M008.FF09MSEL[1] cursor, bold; /* ===> selection error*/
    set FF09M008.FF09MSEL[2] bold; /* ===> selection error*/
    set FF09M008.FF09MSEL[3] bold; /* ===> selection error*/
    FFWREC.XXXMODID = "084"; /* Module identification*/
    converseLib.validationFailed(60); /* No option was selected*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the parameter fields if they were entered*/
   /* ------------------------------------------------------------*/

  if (FF09M008.FF09MTYP != "Y" /* combine types*/
   && FF09M008.FF09MTYP != "N") /* combine types*/
    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF09M008.FF09MTYP cursor, bold; /* Highlight*/
    converseLib.validationFailed(153); /* Indicate missing*/
  end

  if (FF09M008.YPGCD > "  " /* type grp entered*/
   && FF09M008.FF09MTYP == "Y") /* combine types requested*/

    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF09M008.YPGCD cursor, bold; /* Highlight*/
    set FF09M008.FF09MTYP bold; /* Highlight*/
    converseLib.validationFailed(203); /* Inconsistent relationship*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Now that the higher levels have been verified.*/
   /* Verify the next level of entered data.*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

   /* If end mos entered then beg mo must be entered*/
  if (FF09M008.FF09MSMM[1] != 0
   && FF09M008.FF09MBMO == 0)
    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF09M008.FF09MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* Check to see if sesn end months entered when required to be*/
  if (FF09M008.FF09MSMM[1] == 0) /* Sesn end months not entered*/
    if (FF09M008.FF09MSEL[1] != "S") /* category reports not selected*/
  /* AND FF09M008.FF09MSEL(3) ^= 'S' /* total  reports not selected*/
      FFWREC.XXXMODID = "084"; /* Module identification*/
      set FF09M008.FF09MSMM[1] cursor, bold; /* Highlight*/
      set FF09M008.FF09MSMM[2] bold; /* Highlight*/
      set FF09M008.FF09MSMM[3] bold; /* Highlight*/
      set FF09M008.FF09MSMM[4] bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  /* END;*/
    if (FF09M008.FF09MBMO != 0) /* begin month entered*/
      if (FF09M008.XPCCD == " " /* no category*/
       || FF09M008.XPCCD == "* ")
        FFWREC.XXXMODID = "084"; /* Module identification*/
        set FF09M008.FF09MSMM[1] cursor, bold; /* Highlight*/
        set FF09M008.FF09MSMM[2] bold; /* Highlight*/
        set FF09M008.FF09MSMM[3] bold; /* Highlight*/
        set FF09M008.FF09MSMM[4] bold; /* Highlight*/
        converseLib.validationFailed(8); /* Indicate missing*/
      end
    end
    if (FF09M008.FF09MSEL[1] == "S" /* category reports selected*/
     && FF09M008.FF09MTYP == "Y")   /* combine types requested*/
      FFWREC.XXXMODID = "084"; /* Module identification*/
      set FF09M008.FF09MSMM[1] cursor, bold; /* Highlight*/
      set FF09M008.FF09MSMM[2] bold; /* Highlight*/
      set FF09M008.FF09MSMM[3] bold; /* Highlight*/
      set FF09M008.FF09MSMM[4] bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

   /* Check to see if begin month entered when required to be*/
  if (FF09M008.FF09MBMO == 0) /* Range begin month not entered*/
    if (FF09M008.FF09MSEL[1] != "S") /* category reports not selected*/
  /* IF FF09M008.FF09MSEL(3) ^= 'S';/* totaly reports not selected*/
      FFWREC.XXXMODID = "084"; /* Module identification*/
      set FF09M008.FF09MBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
  /* END;*/
    end
    if (FF09M008.FF09MSEL[1] == "S" /* category reports selected*/
     && FF09M008.FF09MTYP == "Y")   /* combine types requested*/
      FFWREC.XXXMODID = "084"; /* Module identification*/
      set FF09M008.FF09MBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

  if (FF09M008.FF09MSEL[1] == "S") /* category reports selected*/
    FF09S07(); /* Verify parameters*/
  end

  if (FF09M008.FF09MSEL[2] == "S") /* line reports selected*/
    FF09S08(); /* Verify parameters*/
  end

  if (FF09M008.FF09MSEL[3] == "S") /* total reports selected*/
    FF09S08(); /* Verify parameters*/
  end


   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF09084

// Process valid input request
Function FF09085()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF090851(); /* format production jcl*/
    else
      FF090852(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "085"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09085

// Submit prod JCL FF1901
Function FF090851()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T08.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09S10(); /* ===> load the parameter pass record*/

      TA6REC.TARJCL[TA6INDEX] = FF09W08.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T08.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T08.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T08.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "085"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[9] = "*"; /* Indicate function completed*/

    set FF09M008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090851

// Submit test JCL FF1901
Function FF090852()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T56.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09S10(); /* ===> load the parameter pass record*/

      TA6REC.TARJCL[TA6INDEX] = FF09W08.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T56.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T56.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T56.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "085"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[9] = "*"; /* Indicate function completed*/

    set FF09M008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090852

// Four year indices report
Function FF09090()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09091(); /* Format and display the map*/

  FF09092(); /* Check attention identifier*/

  FF09093(); /* Reset fields to normal intensity*/

  FF09094(); /* Verify the data that was entered*/

  FF09095(); /* Process valid input request*/


end // end FF09090

// Format and display the map
Function FF09091()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M009.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M009.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M009.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M009.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M009.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M009.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M009.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M009 alarm; /* Indicate sound alarm*/

  end

  converse FF09M009 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09091

// Check attention identifier
Function FF09092()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[10] = "C"; /* * Indicate selection cancelled*/

    set FF09M009 initial; /* M009 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "092"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09092

// Reset highlighted fields
Function FF09093()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M009.XPLCD initialAttributes; /* Line*/
  set FF09M009.YPGCD initialAttributes; /* Type group*/
  set FF09M009.XPCCD initialAttributes; /* Category*/
  set FF09M009.FF09TYSL initialAttributes; /* Total type reports selection*/
  set FF09M009.FF09MBYY initialAttributes; /* Begin fiscal year*/
  set FF09M009.FF09MNYR initialAttributes; /* No. of years*/
  set FF09M009.FF09MSMM[1] initialAttributes; /* Season  end month*/
  set FF09M009.FF09MSMM[2] initialAttributes; /* Season  end month*/
  set FF09M009.FF09MSMM[3] initialAttributes; /* Season  end month*/
  set FF09M009.FF09MSMM[4] initialAttributes; /* Season  end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M009.XPLCD == "?" /* Line code list requested*/
   || FF09M009.YPGCD == "?" /* Type group list requested*/
   || FF09M009.XPCCD == "?") /* Category code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "093"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M009.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M009.XPLCD = "  "; /* Code*/
      FF09M009.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M009.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M009.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M009.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M009.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M009.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M009.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M009.YPGCD = "  "; /* Code*/
      FF09M009.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M009.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M009.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M009.XPCCD = "  "; /* Code*/
      FF09M009.XPCABRV = "  "; /* Abbreviation*/
    else
      FF09M009.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF09M009.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M009.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "093"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09093

// Verify the entered data
Function FF09094()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  set FF09W09 empty; /* initialize working storage record*/

  if (FF09M009.XPLCD == " ") /* Line not entered*/
    if (FF09M009.XPCCD == " ") /* & category not entered*/
      FFWREC.XXXMODID = "094"; /* Module identification*/
      set FF09M009.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

  if (FF09M009.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "094"; /* Module identification*/
    set FF09M009.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF09M009.YPGCD > " " /* Type group entered*/
   || FF09M009.XPLCD > " " /* or line entered*/
   || FF09M009.XPCCD > " ") /* or category entered*/
    FF09S11(); /* Verify parameters*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    if (FF09M009.FF09TYSL != "S"
     && FF09M009.FF09TYSL > " ") /* summary report selected*/
      FFWREC.XXXMODID = "094"; /* module identification*/
      set FF09M009.FF09TYSL cursor, bold; /* selection error*/
      converseLib.validationFailed(41); /* must be an 'S'*/
    end
  /* IF FF09M009.FF09MBYY > 0;*/
    FF09S57(); /* Verify year*/
    FF09W01.FF09WHDT = FF09W01.FF09WHDT - 100;
    FF09W09.FF09WBMO = FF09W01.FF09WHDT; /* move begin month*/
    FF09W09.FF09WXMO = FF09W01.FF09WHDT; /* move end month*/
    FF09W09.FF09WXMM = 5; /* move May , end fiscal*/
    if (FF09W09.FF09WXYY == 99)
      FF09W09.FF09WXYY = 0; /* move 1*/
      FF09W09.FF09WXCC = FF09W09.FF09WXCC + 1; /* add 1 to century*/
    else
      FF09W09.FF09WXYY = FF09W09.FF09WXYY + 1; /* add 1 to get fiscal end*/
    end
   /* ELSE;*/
   /* MOVE 0 TO FF09W09.FF09WBMO;/* move begin month*/
   /* MOVE 0 TO FF09W09.FF09WXMO;/* move begin month*/
   /* END;*/

    if (FF09M009.FF09MNYR > 4
     || FF09M009.FF09MNYR < 1)
      FFWREC.XXXMODID = "094"; /* Module identification*/
      set FF09M009.FF09MNYR cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate missing*/
    end

    if (FF09M009.FF09MSMM[1] == 0 /* season end months not entered*/
     && FF09M009.FF09MSMM[2] == 0 
     && FF09M009.FF09MSMM[3] == 0 
     && FF09M009.FF09MSMM[4] == 0)
      FF09W09.FF09WEMM[1] = 8;
                                                   /* move default quarters*/
      FF09W09.FF09WEMM[2] = 11;
      FF09W09.FF09WEMM[3] = 2;
      FF09W09.FF09WEMM[4] = 5;
    else
      if (FF09M009.FF09MBYY == 0)
        FF09S59(); /* get current fiscal year*/
        FF09S53(); /* edit the season end months*/
        FF09W09.FF09WBMO = 0; /* reset begin month*/
        FF09W09.FF09WXMO = 0; /* reset end month*/
        move 0 to FF09W09.FF09WECC[1] for all; /* reset season end month century*/
        move 0 to FF09W09.FF09WEYY[1] for all; /* reset season end month year*/
      else
        FF09S53(); /* edit the season end months*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF09094

// Process valid input request
Function FF09095()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF090951(); /* format production jcl*/
    else
      FF090952(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "095"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09095

// Submit prod JCL FF2231
Function FF090951()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T09.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W09.YPGCD = FF09M009.YPGCD; /* Type group*/

      if (FF09M009.XPCCD != " ") /* Category entered*/
        FF09W09.XPCCD = FF09M009.XPCCD; /* Category*/
      else
        FF09W09.XPLCD = FF09M009.XPLCD; /* Line*/
      end

      FF09W09.FF09WNYR = FF09M009.FF09MNYR; /* No. of year*/

      FF09W09.FF09WYSL = FF09M009.FF09TYSL; /* Type total selection*/

      TA6REC.TARJCL[TA6INDEX] = FF09W09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T09.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T09.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T09.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "095"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[10] = "*"; /* * Indicate function completed*/

    set FF09M009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090951

// Submit test JCL FF2231
Function FF090952()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T57.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W09.YPGCD = FF09M009.YPGCD; /* Type group*/

      if (FF09M009.XPCCD != " ") /* Category entered*/
        FF09W09.XPCCD = FF09M009.XPCCD; /* Category*/
      else
        FF09W09.XPLCD = FF09M009.XPLCD; /* Line*/
      end

      FF09W09.FF09WNYR = FF09M009.FF09MNYR; /* No. of year*/

      FF09W09.FF09WYSL = FF09M009.FF09TYSL; /* type total selection*/

      TA6REC.TARJCL[TA6INDEX] = FF09W09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T57.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T57.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T57.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "095"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[10] = "*"; /* * Indicate function completed*/

    set FF09M009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF090952

// Four year indices report
Function FF09100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09101(); /* Format and display the map*/

  FF09102(); /* Check attention identifier*/

  FF09103(); /* Reset fields to normal intensity*/

  FF09104(); /* Verify the data that was entered*/

  FF09105(); /* Process valid input request*/


end // end FF09100

// Format and display the map
Function FF09101()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M010.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M010.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M010.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M010.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M010 alarm; /* Indicate sound alarm*/

  end

  converse FF09M010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09101

// Check attention identifier
Function FF09102()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[11] = "C"; /* Indicate selection cancelled*/

    set FF09M010 initial; /* M010 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "102"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09102

// Reset highlighted fields
Function FF09103()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M010.XPLCD initialAttributes; /* Line*/
  set FF09M010.YPGCD initialAttributes; /* Type group*/
  set FF09M010.FF09TYSL initialAttributes; /* Type group*/
  set FF09M010.FF09MBYY initialAttributes; /* Begin year*/
  set FF09M010.FF09MNYR initialAttributes; /* No. of years*/
  set FF09M010.FF09MSMM[1] initialAttributes; /* season end month*/
  set FF09M010.FF09MSMM[2] initialAttributes; /* season end month*/
  set FF09M010.FF09MSMM[3] initialAttributes; /* season end month*/
  set FF09M010.FF09MSMM[4] initialAttributes; /* season end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M010.XPLCD == "?" /* Line code list requested*/
   || FF09M010.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "103"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M010.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M010.XPLCD = "  "; /* Code*/
      FF09M010.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M010.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M010.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M010.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M010.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M010.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M010.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M010.YPGCD = "  "; /* Code*/
      FF09M010.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M010.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "103"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09103

// Verify the entered data
Function FF09104()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  set FF09W10 empty; /* intialize working storage*/

  if (FF09M010.XPLCD == " ") /* Line not entered*/
    FFWREC.XXXMODID = "104"; /* Module identification*/
    set FF09M010.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M010.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "104"; /* Module identification*/
    set FF09M010.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end


   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF09M010.YPGCD > " " /* Type group entered*/
   || FF09M010.XPLCD > " ") /* or line entered*/
    FF09S15(); /* Verify parameters*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    if (FF09M010.FF09TYSL != "S" /* Type total report selected*/
     && FF09M010.FF09TYSL > " ")
      FFWREC.XXXMODID = "104"; /* module identification*/
      set FF09M010.FF09TYSL cursor, bold; /* selection error*/
      converseLib.validationFailed(41); /* must be an 'S'*/
    end
   /* IF FF09M010.FF09MBYY > 0;*/
    FF09S58(); /* Verify year*/
    FF09W01.FF09WHDT = FF09W01.FF09WHDT - 100;
    FF09W10.FF09WBMO = FF09W01.FF09WHDT; /* move begin month*/
    FF09W10.FF09WXMO = FF09W01.FF09WHDT; /* move end month*/
    FF09W10.FF09WXMM = 5; /* move May , end fiscal*/
    if (FF09W10.FF09WXYY == 99)
      FF09W10.FF09WXYY = 0; /* move 1*/
      FF09W10.FF09WXCC = FF09W10.FF09WXCC + 1; /* add 1 to century*/
    else
      FF09W10.FF09WXYY = FF09W10.FF09WXYY + 1; /* add 1 to get fiscal end*/
    end
   /* ELSE;*/
   /* MOVE 0 TO FF09W10.FF09WBMO;/* move begin month*/
   /* MOVE 0 TO FF09W10.FF09WXMO;/* move end month*/
   /* END;*/

    if (FF09M010.FF09MNYR > 4
     || FF09M010.FF09MNYR < 1)
      FFWREC.XXXMODID = "104"; /* Module identification*/
      set FF09M010.FF09MNYR cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate missing*/
    end

    if (FF09M010.FF09MSMM[1] == 0 /* season end months not entered*/
     && FF09M010.FF09MSMM[2] == 0 
     && FF09M010.FF09MSMM[3] == 0 
     && FF09M010.FF09MSMM[4] == 0)
      FF09W10.FF09WEMM[1] = 8;
                                   /* move default quarters*/
      FF09W10.FF09WEMM[2] = 11;
      FF09W10.FF09WEMM[3] = 2;
      FF09W10.FF09WEMM[4] = 5;
    else
      if (FF09M010.FF09MBYY == 0)
        FF09S61(); /* get curretn fiscal year*/
        FF09S54(); /* edit the season end months*/
        FF09W10.FF09WBMO = 0; /* reset begin month*/
        FF09W10.FF09WXMO = 0; /* reset end month*/
        move 0 to FF09W10.FF09WECC[1] for all; /* reset season end month century*/
        move 0 to FF09W10.FF09WEYY[1] for all; /* reset season end month year*/
      else
        FF09S54(); /* edit the season end months*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF09104

// Process valid input request
Function FF09105()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF091051(); /* format production jcl*/
    else
      FF091052(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "105"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09105

// Submit prod JCL FF2261
Function FF091051()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T1O.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W10.YPGCD = FF09M010.YPGCD; /* Type group*/

      FF09W10.XPLCD = FF09M010.XPLCD; /* Line*/

      FF09W10.FF09WNYR = FF09M010.FF09MNYR; /* No. of years*/

      FF09W10.FF09WYSL = FF09M010.FF09TYSL; /* Type total selection*/

      TA6REC.TARJCL[TA6INDEX] = FF09W10.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T1O.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T1O.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T1O.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "105"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[11] = "*"; /* Indicate function completed*/

    set FF09M010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091051

// Submit test JCL FF2261
Function FF091052()
   /* submit test jcl*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T58.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09W10.YPGCD = FF09M010.YPGCD; /* Type group*/

      FF09W10.XPLCD = FF09M010.XPLCD; /* Line*/

      FF09W10.FF09WNYR = FF09M010.FF09MNYR; /* No. of years*/

      FF09W10.FF09WYSL = FF09M010.FF09TYSL; /* Type total selection*/

      TA6REC.TARJCL[TA6INDEX] = FF09W10.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T58.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T58.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T58.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "105"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[11] = "*"; /* Indicate function completed*/

    set FF09M010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091052

// Target Summary Reports
Function FF09110()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09111(); /* Format and display the map*/

  FF09112(); /* Check attention identifier*/

  FF09113(); /* Reset fields to normal intensity*/

  FF09114(); /* Verify the data that was entered*/

  FF09115(); /* Process valid input request*/


end // end FF09110

// Format and display the map
Function FF09111()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    FF09M011.FF09MTYP = "N"; /* default type ?*/
    FF09M011.YPGCD = "01"; /* default product type grp cd ?*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M011.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M011.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M011.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M011.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M011.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M011.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M011.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M011.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M011 alarm; /* Indicate sound alarm*/

  end

  converse FF09M011 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09111

// Check attention identifier
Function FF09112()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[12] = "C"; /* Indicate selection cancelled*/

    set FF09M011 initial; /* M011 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "112"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09112

// Reset highlighted fields
Function FF09113()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M011.XPLCD initialAttributes; /* Line*/
  set FF09M011.YPGCD initialAttributes; /* Type group*/
  set FF09M011.XPCCD initialAttributes; /* Category*/
  set FF09M011.FF09MBMO initialAttributes; /* Range begin month*/
  set FF09M011.FF09MTYP initialAttributes; /* combine type?*/
  set FF09M011.FF09MSMM[1] initialAttributes; /* sesn end month1*/
  set FF09M011.FF09MSMM[2] initialAttributes; /* sesn end month2*/
  set FF09M011.FF09MSMM[3] initialAttributes; /* sesn end month3*/
  set FF09M011.FF09MSMM[4] initialAttributes; /* sesn end month4*/

  set FF09M011.FF09MSEL[1] initialAttributes; /* Selection*/
  set FF09M011.FF09MSEL[2] initialAttributes; /* Selection*/
  set FF09M011.FF09MSEL[3] initialAttributes; /* Selection*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.XPLCD == "?" /* Line code list requested*/
   || FF09M011.YPGCD == "?" /* Type group list requested*/
   || FF09M011.XPCCD == "?") /* Category code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "113"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M011.XPLCD = "  "; /* Code*/
      FF09M011.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M011.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M011.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M011.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M011.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M011.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M011.YPGCD = "  "; /* Code*/
      FF09M011.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M011.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M011.XPCCD = "  "; /* Code*/
      FF09M011.XPCABRV = "  "; /* Abbreviation*/
    else
      FF09M011.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF09M011.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M011.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "113"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09113

// Verify the entered data
Function FF09114()
   /* ------------------------------------------------------------*/
   /* get current date, invoice cut off date and then calculate*/
   /* contemporaneous month.*/
   /* ------------------------------------------------------------*/
  XX0XS01(); /* ===> get data & time*/
  FF09S13(); /* ===> Select VFFCTL01 invoice cutoff*/
                                   /* date*/
  FF09S14(); /* ===> Calc contp month*/

   /* ------------------------------------------------------------*/
   /* check report selections made then verify the entered*/
   /* data.*/
   /* ------------------------------------------------------------*/

  set FF09W11 empty; /* initialize w.s./pass record*/

  if (FF09M011.FF09MSEL[1] != "S" /* Category rpt was selected*/
   && FF09M011.FF09MSEL[1] > " ") /* Category rpt was selected*/
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF09M011.FF09MSEL[1] cursor, bold; /* ===> selection error*/
    converseLib.validationFailed(41); /* must be an "S"*/
  end

  if (FF09M011.FF09MSEL[2] != "S" /* Line rpt was selected*/
   && FF09M011.FF09MSEL[2] > " ") /* Line rpt was selected*/
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF09M011.FF09MSEL[2] cursor, bold; /* ===> selection error*/
    converseLib.validationFailed(41); /* must be an "S"*/
  end

  if (FF09M011.FF09MSEL[3] != "S" /* Type rpt was selected*/
   && FF09M011.FF09MSEL[3] > " ") /* Type rpt was selected*/
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF09M011.FF09MSEL[3] cursor, bold; /* ===> selection error*/
    converseLib.validationFailed(41); /* must be an "S"*/
  end

   /* ------------------------------------------------------------*/
   /* If a report selection was made then verify the entered*/
   /* data.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.FF09MSEL[1] == "S") /* summary report was selected*/
    if (FF09M011.FF09MSEL[2] == "S" /* summary report was selected*/
     || FF09M011.FF09MSEL[3] == "S") /* summary report was selected*/
      FFWREC.XXXMODID = "114"; /* Module identification*/
      set FF09M011.FF09MSEL[1] cursor, bold; /* ===> selection error*/
      set FF09M011.FF09MSEL[2] bold; /* ===> selection error*/
      set FF09M011.FF09MSEL[2] bold; /* ===> selection error*/
      converseLib.validationFailed(136); /* mult-options not allowed*/
    else
      if (FF09M011.FF09MSEL[2] == "S") /* summary report was selected*/
        if (FF09M011.FF09MSEL[3] == "S") /* summary report was selected*/
          FFWREC.XXXMODID = "114"; /* Module identification*/
          set FF09M011.FF09MSEL[2] cursor, bold; /* ===> selection error*/
          set FF09M011.FF09MSEL[1] bold; /* ===> selection error*/
          set FF09M011.FF09MSEL[2] bold; /* ===> selection error*/
          converseLib.validationFailed(136); /* mult-options not allowed*/
        end
      end
    end
  end

  if (FF09M011.FF09MSEL[1] == " " /* summary report was selected*/
   && FF09M011.FF09MSEL[2] == " " /* summary report was selected*/
   && FF09M011.FF09MSEL[3] == " ") /* summary report was selected*/
    set FF09M011.FF09MSEL[1] cursor, bold; /* ===> selection error*/
    set FF09M011.FF09MSEL[2] bold; /* ===> selection error*/
    set FF09M011.FF09MSEL[3] bold; /* ===> selection error*/
    FFWREC.XXXMODID = "114"; /* Module identification*/
    converseLib.validationFailed(60); /* No option was selected*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Now that the higher levels have been verified.*/
   /* Verify the next level of entered data.*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

   /* If sesn end months entered then begin month must also be*/
   /* entered.*/
  if (FF09M011.FF09MSMM[1] != 0
   && FF09M011.FF09MBMO == 0)
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF09M011.FF09MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* If a begin month is entered then season end months must*/
   /* also be entered.*/
  if (FF09M011.FF09MBMO != 0
   && FF09M011.FF09MSMM[1] == 0)
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF09M011.FF09MSMM[1] cursor, bold; /* Highlight*/
    set FF09M011.FF09MSMM[2] bold; /* Highlight*/
    set FF09M011.FF09MSMM[3] bold; /* Highlight*/
    set FF09M011.FF09MSMM[4] bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* Check to see if sesn end months entered when required to be*/
  if (FF09M011.FF09MSMM[1] == 0) /* Sesn end months not entered*/
    if (FF09M011.FF09MSEL[1] != "S") /* category reports not selected*/
      FFWREC.XXXMODID = "114"; /* Module identification*/
      set FF09M011.FF09MSMM[1] cursor, bold; /* Highlight*/
      set FF09M011.FF09MSMM[2] bold; /* Highlight*/
      set FF09M011.FF09MSMM[3] bold; /* Highlight*/
      set FF09M011.FF09MSMM[4] bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
    if (FF09M011.FF09MSEL[1] == "S" /* category reports selected*/
     && FF09M011.FF09MTYP == "Y")   /* combine types requested*/
      FFWREC.XXXMODID = "084"; /* Module identification*/
      set FF09M011.FF09MSMM[1] cursor, bold; /* Highlight*/
      set FF09M011.FF09MSMM[2] bold; /* Highlight*/
      set FF09M011.FF09MSMM[3] bold; /* Highlight*/
      set FF09M011.FF09MSMM[4] bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

   /* Check to see if begin month entered when required to be*/
  if (FF09M011.FF09MBMO == 0) /* Range begin month not entered*/
    if (FF09M011.FF09MSEL[1] != "S") /* category reports not selected*/
      FFWREC.XXXMODID = "114"; /* Module identification*/
      set FF09M011.FF09MBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
    if (FF09M011.FF09MSEL[1] == "S" /* category reports selected*/
     && FF09M011.FF09MTYP == "Y")   /* combine types requested*/
      FFWREC.XXXMODID = "114"; /* Module identification*/
      set FF09M011.FF09MBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the parameter fields if they were entered*/
   /* ------------------------------------------------------------*/

  if (FF09M011.FF09MSEL[1] == "S") /* category reports selected*/
    FF09S20(); /* Verify parameters*/
  end

  if (FF09M011.FF09MSEL[2] == "S") /* line reports selected*/
    FF09S22(); /* Verify parameters*/
  end

  if (FF09M011.FF09MSEL[3] == "S") /* type reports selected*/
    FF09S24(); /* Verify parameters*/
  end

  if (FF09M011.FF09MTYP != "Y" /* combine types*/
   && FF09M011.FF09MTYP != "N") /* combine types*/
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF09M011.FF09MTYP cursor, bold; /* Highlight*/
    converseLib.validationFailed(153); /* Indicate missing*/
  end

  if (FF09M011.YPGCD > "  " /* type grp entered*/
   && FF09M011.FF09MTYP == "Y") /* combine types requested*/

    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF09M011.YPGCD cursor, bold; /* Highlight*/
    set FF09M011.FF09MTYP bold; /* Highlight*/
    converseLib.validationFailed(203); /* Inconsistent relationship*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF09114

// Process valid input request
Function FF09115()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF091151(); /* format production jcl*/
    else
      FF091152(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "115"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09115

// Submit prod JCL FF1911
Function FF091151()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T11.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09S26(); /* ===> load the parameter pass record*/

      TA6REC.TARJCL[TA6INDEX] = FF09W11.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T11.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T11.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T11.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[12] = "*"; /* Indicate function completed*/

    set FF09M011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091151

// Submit test JCL FF1911
Function FF091152()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T59.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF09S26(); /* ===> load the parameter pass record*/

      TA6REC.TARJCL[TA6INDEX] = FF09W11.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T59.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T59.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T59.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[12] = "*"; /* Indicate function completed*/

    set FF09M011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091152

// Seas Forecast summ for range
Function FF09120()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09121(); /* Format and display the map*/

  FF09122(); /* Check attention identifier*/

  FF09123(); /* Reset fields to normal intensity*/

  FF09124(); /* Verify the data that was entered*/

  FF09125(); /* Process valid input request*/


end // end FF09120

// Format and display map
Function FF09121()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M012.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M012.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M012.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M012.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M012.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M012.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

  FF09M012.FF09M-NEED-SHIP-SEL = "S"; /* Initilize default value*/
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M012.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M012.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M012 alarm; /* Indicate sound alarm*/

  end

  converse FF09M012 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09121

// Check attention identifier
Function FF09122()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[4] = "C"; /* * Indicate selection cancelled*/

    set FF09M012 initial; /* m012 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "122"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09122

// Reset highlighted fields
Function FF09123()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M012.XPLCD initialAttributes; /* Line*/
  set FF09M012.YPGCD initialAttributes; /* Type group*/
  set FF09M012.XPCCD initialAttributes; /* Category*/
  set FF09M012.FF09MBMO initialAttributes; /* Range begin month*/
  set FF09M012.FF09MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.XPLCD == "?" /* Line code list requested*/
   || FF09M012.YPGCD == "?" /* Type group list requested*/
   || FF09M012.XPCCD == "?") /* Category code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "123"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M012.XPLCD = "  "; /* Code*/
      FF09M012.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M012.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M012.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M012.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M012.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M012.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M012.YPGCD = "  "; /* Code*/
      FF09M012.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M012.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M012.XPCCD = "  "; /* Code*/
      FF09M012.XPCABRV = "  "; /* Abbreviation*/
    else
      FF09M012.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF09M012.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M012.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "123"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09123

// Validate entered data
Function FF09124()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.XPLCD == " ") /* Line not entered*/
    if (FF09M012.XPCCD == " ") /* & category not entered*/
      FFWREC.XXXMODID = "124"; /* Module identification*/
      set FF09M012.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

  if (FF09M012.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF09M012.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M012.FF09MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF09M012.FF09MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M012.FF09MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF09M012.FF09MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF09M012.FF09M-NEED-SHIP-SEL != "N" /* Need month selection*/
   && FF09M012.FF09M-NEED-SHIP-SEL != "S") /* ship month selecti*/
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF09M012.FF09M-NEED-SHIP-SEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.YPGCD > " "  /* Type group entered*/
   || FF09M012.XPLCD > " "  /* or line entered*/
   || FF09M012.XPCCD > " "  /* or category entered*/
   || FF09M012.FF09MBMO > 0 /* or range beg mo entered*/
   || FF09M012.FF09MXMO > 0) /* or range end mo entered*/
    FF09S56(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF09124

// Process valid input request
Function FF09125()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (FF09M012.FF09M-NEED-SHIP-SEL == "S")
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        FF091251(); /* format production jcl*/
      else
        FF091252(); /* format development jcl*/
      end
    else
      if (FF09M012.FF09M-NEED-SHIP-SEL == "N")
        if (TA3REC.TA3RGNID == "03") /* if on production system*/
          FF091253(); /* format production jcl*/
        else
          FF091254(); /* format development jcl*/
        end
      end
    end
  else

    FFWREC.XXXMODID = "125"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09125

// Submit prod JCL FF2271
Function FF091251()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T12.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W12 empty; /* Parameters work area*/

      FF09W12.YPGCD = FF09M012.YPGCD; /* Type group*/

      if (FF09M012.XPCCD != " ") /* Category entered*/
        FF09W12.XPCCD = FF09M012.XPCCD; /* Category*/
      else
        FF09W12.XPLCD = FF09M012.XPLCD; /* Line*/
      end

      FF09W12.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W12.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W12.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T12.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T12.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T12.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "125"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[4] = "*"; /* * Indicate function completed*/

    set FF09M012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091251

// Submit test JCL FF2271
Function FF091252()
   /* submit test jcl*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T6O.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W12 empty; /* Parameters work area*/

      FF09W12.YPGCD = FF09M012.YPGCD; /* Type group*/

      if (FF09M012.XPCCD != " ") /* Category entered*/
        FF09W12.XPCCD = FF09M012.XPCCD; /* Category*/
      else
        FF09W12.XPLCD = FF09M012.XPLCD; /* Line*/
      end

      FF09W12.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W12.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W12.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T6O.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T6O.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T6O.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "125"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[4] = "*"; /* * Indicate function completed*/

    set FF09M012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091252

// Submit prod JCL FF2271
Function FF091253()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T18.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W12 empty; /* Parameters work area*/

      FF09W12.YPGCD = FF09M012.YPGCD; /* Type group*/

      if (FF09M012.XPCCD != " ") /* Category entered*/
        FF09W12.XPCCD = FF09M012.XPCCD; /* Category*/
      else
        FF09W12.XPLCD = FF09M012.XPLCD; /* Line*/
      end

      FF09W12.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W12.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W12.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T18.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T18.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T18.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "125"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[4] = "*"; /* * Indicate function completed*/

    set FF09M012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091253

// Submit test JCL FF2271
Function FF091254()
   /* submit test jcl*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T66.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W12 empty; /* Parameters work area*/

      FF09W12.YPGCD = FF09M012.YPGCD; /* Type group*/

      if (FF09M012.XPCCD != " ") /* Category entered*/
        FF09W12.XPCCD = FF09M012.XPCCD; /* Category*/
      else
        FF09W12.XPLCD = FF09M012.XPLCD; /* Line*/
      end

      FF09W12.FF09WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF09W12.FF09WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W12.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T66.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T66.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T66.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "125"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[4] = "*"; /* * Indicate function completed*/

    set FF09M012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091254

// Buy balance report
Function FF09130()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09131(); /* Format and display the map*/

  FF09132(); /* Check attention identifier*/

  FF09133(); /* Reset fields to normal intensity*/

  FF09134(); /* Verify the data that was entered*/

  FF09135(); /* Process valid input request*/


end // end FF09130

// Format and display the map
Function FF09131()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    FF09M013.YPGCD = "01"; /* default product type grp cd*/
    if (FF09M013.YPGCD in YPGTBL.YPGCD)
      FF09M013.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M013.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M013.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M013.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M013.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M013.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M013.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M013.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M013.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M013 alarm; /* Indicate sound alarm*/

  end

  converse FF09M013 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09131

// Check attention identifer
Function FF09132()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[13] = "C"; /* Indicate selection cancelled*/

    set FF09M013 initial; /* M011 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "132"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09132

// Reset highlited fields
Function FF09133()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M013.XPLCD initialAttributes; /* Line*/
  set FF09M013.YPGCD initialAttributes; /* Type group*/
  set FF09M013.FF09MABM initialAttributes; /* Actual buy month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M013.XPLCD == "?" /* Line code list requested*/
   || FF09M013.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "133"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M013.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M013.XPLCD = "  "; /* Code*/
      FF09M013.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M013.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M013.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M013.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M013.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M013.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M013.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M013.YPGCD = "  "; /* Code*/
      FF09M013.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M013.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "133"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09133

// Verify the entered data
Function FF09134()
   /* ------------------------------------------------------------*/
   /* Verify the actual buy month .*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZBYYMM = FF09M013.FF09MABM; /* Beginning month*/
  FFZREC.FFZEYYMM = FF09M013.FF09MABM; /* End month*/

  FFZREC.FFZSRANG = "N"; /* Checking against current month*/

  TA1REC.TA1PGMNM = "FF09134"; /* Calling process*/

  XSFFS30(); /* Edit the date range*/

  if (FFZREC.FFZBEGRC == "0") /* Valid beginning month*/

     /* NEXT SENTENCE*/

  else

    FFWREC.XXXMODID = "134"; /* Module identification*/
    set FF09M013.FF09MABM cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Invalid date entered*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that a valid product type group code was entered.*/
   /* ------------------------------------------------------------*/

  if (FF09M013.YPGCD > " " /* Product type group entered*/
   && FF09M013.YPGCD != "*") /* and not wild card*/

    if (FF09M013.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF09M013.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      FF09M013.YPGABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "134"; /* Module identification*/
      set FF09M013.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/

    end

  else

    if (FF09M013.YPGCD == "* ")
      FF09M013.YPGABRV = "ALL"; /* Abbreviation*/
    else

      FF09M013.YPGABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "134"; /* Module identification*/
      set FF09M013.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Required field*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify that a valid product line code was entered.*/
   /* ------------------------------------------------------------*/

  if (FF09M013.XPLCD > " " /* Product line entered*/
   && FF09M013.XPLCD != "* ") /* and not wild card*/

    XPLREC.XPLCD = FF09M013.XPLCD; /* Product line*/
    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC*/

    if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF09M013.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      FF09M013.XPLABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "134"; /* Module identification*/
      set FF09M013.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/

    end

  else

    if (FF09M013.XPLCD == "*") /* Wild card*/
      FF09M013.XPLABRV = "ALL"; /* Abbreviation*/
    else
      FF09M013.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "134"; /* Module identification*/
      set FF09M013.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Required field*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF09134

// Process valid input request
Function FF09135()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF091351(); /* format production jcl*/
    else
      FF091352(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "135"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09135

// Submit prod JCL FF6901
Function FF091351()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T13.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W13 empty;

      FF09W13.XPLCD = FF09M013.XPLCD; /* product line*/
      FF09W13.YPGCD = FF09M013.YPGCD; /* type group*/
      FF09W13.FF09WABM = FFZREC.FFZBEGMO; /* actual buy month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W13.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T13.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T13.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T13.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "135"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[13] = "*"; /* Indicate function completed*/

    set FF09M013 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091351

// Submit test JCL FF6901
Function FF091352()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T61.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W13 empty;

      FF09W13.XPLCD = FF09M013.XPLCD; /* product line*/
      FF09W13.YPGCD = FF09M013.YPGCD; /* type group*/
      FF09W13.FF09WABM = FFZREC.FFZBEGMO; /* actual buy month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W13.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T61.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T61.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T61.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "135"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[13] = "*"; /* Indicate function completed*/

    set FF09M013 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091352

// Buy exception report
Function FF09140()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09141(); /* Format and display the map*/

  FF09142(); /* Check attention identifier*/

  FF09143(); /* Reset fields to normal intensity*/

  FF09144(); /* Verify the data that was entered*/

  FF09145(); /* Process valid input request*/


end // end FF09140

// Format and display the map
Function FF09141()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    FF09M014.YPGCD = "01"; /* default product type grp cd*/
    if (FF09M014.YPGCD in YPGTBL.YPGCD)
      FF09M014.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF09M014.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M014.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF09M014.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF09M014.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF09M014.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF09M014.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M014.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M014.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M014 alarm; /* Indicate sound alarm*/

  end

  converse FF09M014 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FF09141

// Check attention identifer
Function FF09142()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF09W01.FF09MSEL[14] = "C"; /* Indicate selection cancelled*/

    set FF09M014 initial; /* M011 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF09W01.FF09WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "142"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF09142

// Reset highlited fields
Function FF09143()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF09M014.XPLCD initialAttributes; /* Line*/
  set FF09M014.YPGCD initialAttributes; /* Type group*/
  set FF09M014.XPCCD initialAttributes; /* Category*/
  set FF09M014.FF09MABM initialAttributes; /* Actual buy month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF09M014.XPLCD == "?" /* Line code list requested*/
   || FF09M014.YPGCD == "?" /* Type group list requested*/
   || FF09M014.XPCCD == "?") /* Category code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "143"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M014.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M014.XPLCD = "  "; /* Code*/
      FF09M014.XPLABRV = "  "; /* Abbreviation*/
    else
      FF09M014.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF09M014.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M014.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M014.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF09M014.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF09M014.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF09M014.YPGCD = "  "; /* Code*/
      FF09M014.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF09M014.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF09M014.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF09M014.XPCCD = "  "; /* Code*/
      FF09M014.XPCABRV = "  "; /* Abbreviation*/
    else
      FF09M014.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF09M014.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF09M014.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "143"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF09143

// Verify the entered data
Function FF09144()
   /* ------------------------------------------------------------*/
   /* Verify the actual buy month .*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZBYYMM = FF09M014.FF09MABM; /* Beginning month*/
  FFZREC.FFZEYYMM = FF09M014.FF09MABM; /* End month*/

  FFZREC.FFZSRANG = "N"; /* Checking against current month*/

  TA1REC.TA1PGMNM = "FF09144"; /* Calling process*/

  XSFFS30(); /* Edit the date range*/

  if (FFZREC.FFZBEGRC == "0") /* Valid beginning month*/

     /* NEXT SENTENCE*/

  else

    FFWREC.XXXMODID = "144"; /* Module identification*/
    set FF09M014.FF09MABM cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Invalid date entered*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that a valid product category code was entered.*/
   /* ------------------------------------------------------------*/

  if (FF09M014.XPCCD > " ") /* Product category entered*/

    XPCREC.XPCCD = FF09M014.XPCCD; /* Product line*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC*/

    if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF09M014.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      FF09M014.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "144"; /* Module identification*/
      set FF09M014.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/

    end

  else

    FF09M014.XPLABRV = " "; /* Abbreviation*/
    if (FF09M014.XPLCD > " " /* line was entered*/
     && FF09M014.YPGCD > " ") /* type group was entered*/

          /* next sentence*/

    else
      FFWREC.XXXMODID = "144"; /* Module identification*/
      set FF09M014.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Required field*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Verify that a valid product type group code was entered.*/
   /* ------------------------------------------------------------*/

  if (FF09M014.YPGCD > " " /* Product type group entered*/
   && FF09M014.YPGCD != "*") /* and not wild card*/

    if (FF09M014.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF09M014.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      FF09M014.YPGABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "144"; /* Module identification*/
      set FF09M014.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/

    end

  else

    if (FF09M014.YPGCD == "* ")
      FF09M014.YPGABRV = "ALL"; /* Abbreviation*/
    else

      FF09M014.YPGABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "144"; /* Module identification*/
      set FF09M014.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Required field*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify that a valid product line code was entered.*/
   /* ------------------------------------------------------------*/

  if (FF09M014.XPLCD > " " /* Product line entered*/
   && FF09M014.XPLCD != "* ") /* and not wild card*/

    XPLREC.XPLCD = FF09M014.XPLCD; /* Product line*/
    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC*/

    if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF09M014.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      FF09M014.XPLABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "144"; /* Module identification*/
      set FF09M014.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/

    end

  else

    if (FF09M014.XPLCD == "*") /* Wild card*/
      FF09M014.XPLABRV = "ALL"; /* Abbreviation*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the relationship between line, type group and cat.*/
   /* ------------------------------------------------------------*/

  if (FF09M014.XPCCD > "  " /* Category was entered*/
   && FF09M014.YPGCD > "  ") /* Type group was entered*/
    FF09S04(); /* Verify relationship*/

    if (FF09M014.XPLCD == "  ")
      FF09M014.XPLCD = FF2REC.XPLCD;
      if (FF2REC.XPLCD in XPLTBL.XPLCD)
        FF09M014.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
    end

    if (VAGen_SQLCODE == +100 /* Record not found*/
     || FF2REC.XPLCD != FF09M014.XPLCD) /* line code not match*/

      FFWREC.XXXMODID = "144"; /* Module identification*/
      set FF09M014.XPLCD cursor, bold; /* Highlight*/
      set FF09M014.YPGCD bold; /* Highlight*/
      set FF09M014.XPCCD bold; /* Highlight*/
      converseLib.validationFailed(203); /* Invalid date entered*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF09144

// Process valid input request
Function FF09145()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF091451(); /* format production jcl*/
    else
      FF091452(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "145"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF09145

// Submit prod JCL FF6911
Function FF091451()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T14.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W14 empty;

      FF09W14.XPLCD = FF09M014.XPLCD; /* product line*/
      FF09W14.YPGCD = FF09M014.YPGCD; /* type group*/
      FF09W14.XPCCD = FF09M014.XPCCD; /* category*/
      FF09W14.FF09WABM = FFZREC.FFZBEGMO; /* actual buy month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W14.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T14.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T14.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T14.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "145"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[14] = "*"; /* Indicate function completed*/

    set FF09M014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091451

// Submit test JCL FF6911
Function FF091452()
   /* Submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF09W01.FF09WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF09T62.TARTYPE[FF09WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF09W14 empty;

      FF09W14.XPLCD = FF09M014.XPLCD; /* product line*/
      FF09W14.YPGCD = FF09M014.YPGCD; /* type group*/
      FF09W14.XPCCD = FF09M014.XPCCD; /* category*/
      FF09W14.FF09WABM = FFZREC.FFZBEGMO; /* actual buy month*/

      TA6REC.TARJCL[TA6INDEX] = FF09W14.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF09T62.TARJCL[FF09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF09T62.TARTYPE[FF09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF09T62.TARJCL[FF09WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF09W01.FF09WIXT = FF09W01.FF09WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "145"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FF09W01.FF09MSEL[14] = "*"; /* Indicate function completed*/

    set FF09M014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF091452

// Report Request Menu
Function FF09990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF09991(); /* Format and display the map*/

  FF09992(); /* Check attention identifier*/

  FF09993(); /* Reset fields to normal intensity*/

  FF09994(); /* Verify the data that was entered*/

  FF09995(); /* Process valid input request*/


end // end FF09990

// Format and display the map
Function FF09991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set FF09M099 initial; /* M099 input/output*/

    FF09W01.FF09WIXM = 1; /* Initialize map index*/

    while (FF09W01.FF09WIXM <= FF09W01.FF09WIXL) /* Until end of array*/

      FF09M099.FF09MSEL[FF09WIXM] = FF09W01.FF09MSEL[FF09WIXM];

      FF09W01.FF09WIXM = FF09W01.FF09WIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF09M099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF09M099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF09M099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG > " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF09M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF09M099.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF09M099 alarm; /* Indicate sound alarm*/

  end

  converse FF09M099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF09M099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF09M099.CAITEM; /* Application data*/


end // end FF09991

// Check attention identifier
Function FF09992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FF09M099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    FF09S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF09M099.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    FF09S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF09M099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    FF09S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    FF09S99(); /* Exit to display map*/

  end


end // end FF09992

// Reset highlighted fields
Function FF09993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  FF09W01.FF09WIXM = 1; /* Initialize index*/

  while (FF09W01.FF09WIXM <= FF09W01.FF09WIXL) /* Until all lines are reset*/

    set FF09M099.FF09MSEL[FF09WIXM] initialAttributes; /* Reset select field*/

    FF09W01.FF09WIXM = FF09W01.FF09WIXM + 1; /* Increment line index*/

  end

  set FF09M099.CATOAP initialAttributes; /* TO application*/
  set FF09M099.CAITEM initialAttributes; /* Application data*/


end // end FF09993

// Verify the entered data
Function FF09994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "994"; /* Module identification*/
    set FF09M099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  FF09W01.FF09WIXM = FF09W01.FF09WIXL; /* Initialize line index*/

  while (FF09W01.FF09WIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (FF09M099.FF09MSEL[FF09WIXM] != FF09W01.FF09MSEL[FF09WIXM]
     && FF09M099.FF09MSEL[FF09WIXM] != " " /* Line was selected*/
     && FF09M099.FF09MSEL[FF09WIXM] != "S") /* and not with an "S"*/

      FFWREC.XXXMODID = "994"; /* Module identification*/
      set FF09M099.FF09MSEL[FF09WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Only "S" is valid*/

    end

    FF09W01.FF09WIXM = FF09W01.FF09WIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FF09S99(); /* Exit to display map*/
  end


end // end FF09994

// Process valid input request
Function FF09995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move FF09M099.FF09MSEL to FF09W01.FF09MSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If specify distribution selected, indicate to subroutine to*/
   /* display report distribution, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (FF09W01.FF09MSEL[1] == "S") /* Report distribution selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end FF09995

// Validate type codes
Function FF09S-06()
   /* ------------------------------------------------------------*/
   /* Validate type codes and combine type code indicator*/
   /* ------------------------------------------------------------*/

   /* Validate type codes*/

  if (FF09M003.YPGCD == "*" /* Type group wildcarded*/
   || FF09M003.YPGCD == " ") /* Type group code blank*/
    FFWREC.XXXMODID = "-06"; /* error module id*/
    converseLib.validationFailed(203); /* inconsistent relationship*/
    set FF09M003.YPGCD cursor, bold; /* highlight*/
    set FF09M003.XPRCD[1] bold; /* highlight*/
    set FF09M003.XPRCD[2] bold; /* highlight*/
    set FF09M003.XPRCD[3] bold; /* highlight*/
    set FF09M003.XPRCD[4] bold; /* highlight*/
  else /* Specific type group code entered*/

      /* Validate type code (4)*/

    if (FF09M003.XPRCD[4] > " ") /* type code entered*/
      if (FF09M003.XPRCD[4] in XPRTBL.XPRCD) /* type code exists*/
        if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* type code status 'A'*/
          if (XPRTBL.YPGCD[sysVar.arrayIndex] == FF09M003.YPGCD) /* type groups match*/
              /* continue*/
          else /* Type group code doesn't correspond*/
                                     /* correctly to type code*/
            FFWREC.XXXMODID = "-06"; /* error module id*/
            converseLib.validationFailed(203); /* inconsistent relationship*/
            set FF09M003.YPGCD cursor, bold; /* highlight*/
            set FF09M003.XPRCD[4] bold; /* highlight*/
          end
        else /* type code status not 'A'*/
          FFWREC.XXXMODID = "-06"; /* error module id*/
          converseLib.validationFailed(10); /* invalid value*/
          set FF09M003.XPRCD[4] cursor, bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "-06"; /* error module id*/
        converseLib.validationFailed(10); /* invalid value*/
        set FF09M003.XPRCD[4] cursor, bold; /* highlight*/
      end
    end

      /* Validate type code (3)*/

    if (FF09M003.XPRCD[3] > " ") /* type code entered*/
      if (FF09M003.XPRCD[3] in XPRTBL.XPRCD) /* type code exists*/
        if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* type code status 'A'*/
          if (XPRTBL.YPGCD[sysVar.arrayIndex] == FF09M003.YPGCD) /* type groups match*/
              /* continue*/
          else /* Type group code doesn't correspond*/
                                     /* correctly to type code*/
            FFWREC.XXXMODID = "-06"; /* error module id*/
            converseLib.validationFailed(203); /* inconsistent relationship*/
            set FF09M003.YPGCD cursor, bold; /* highlight*/
            set FF09M003.XPRCD[3] bold; /* highlight*/
          end
        else /* type code status not 'A'*/
          FFWREC.XXXMODID = "-06"; /* error module id*/
          converseLib.validationFailed(10); /* invalid value*/
          set FF09M003.XPRCD[3] cursor, bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "-06"; /* error module id*/
        converseLib.validationFailed(10); /* invalid value*/
        set FF09M003.XPRCD[3] cursor, bold; /* highlight*/
      end
    end

      /* Validate type code (2)*/

    if (FF09M003.XPRCD[2] > " ") /* type code entered*/
      if (FF09M003.XPRCD[2] in XPRTBL.XPRCD) /* type code exists*/
        if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* type code status 'A'*/
          if (XPRTBL.YPGCD[sysVar.arrayIndex] == FF09M003.YPGCD) /* type groups match*/
              /* continue*/
          else /* Type group code doesn't correspond*/
                                     /* correctly to type code*/
            FFWREC.XXXMODID = "-06"; /* error module id*/
            converseLib.validationFailed(203); /* inconsistent relationship*/
            set FF09M003.YPGCD cursor, bold; /* highlight*/
            set FF09M003.XPRCD[2] bold; /* highlight*/
          end
        else /* type code status not 'A'*/
          FFWREC.XXXMODID = "-06"; /* error module id*/
          converseLib.validationFailed(10); /* invalid value*/
          set FF09M003.XPRCD[2] cursor, bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "-06"; /* error module id*/
        converseLib.validationFailed(10); /* invalid value*/
        set FF09M003.XPRCD[2] cursor, bold; /* highlight*/
      end
    end

      /* Validate type code (1)*/

    if (FF09M003.XPRCD[1] > " ") /* type code entered*/
      if (FF09M003.XPRCD[1] in XPRTBL.XPRCD) /* type code exists*/
        if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* type code status 'A'*/
          if (XPRTBL.YPGCD[sysVar.arrayIndex] == FF09M003.YPGCD) /* type groups match*/
              /* continue*/
          else /* Type group code doesn't correspond*/
                                     /* correctly to type code*/
            FFWREC.XXXMODID = "-06"; /* error module id*/
            converseLib.validationFailed(203); /* inconsistent relationship*/
            set FF09M003.YPGCD cursor, bold; /* highlight*/
            set FF09M003.XPRCD[1] bold; /* highlight*/
          end
        else /* type code status not 'A'*/
          FFWREC.XXXMODID = "-06"; /* error module id*/
          converseLib.validationFailed(10); /* invalid value*/
          set FF09M003.XPRCD[1] cursor, bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "-06"; /* error module id*/
        converseLib.validationFailed(10); /* invalid value*/
        set FF09M003.XPRCD[1] cursor, bold; /* highlight*/
      end
    end
  end


   /* Check for embedded blanks*/

  if (FF09M003.XPRCD[1] == " ")
    if (FF09M003.XPRCD[2] == " ")
      if (FF09M003.XPRCD[3] == " ")
        if (FF09M003.XPRCD[4] == " ")
        /* continue*/
        else
          FFWREC.XXXMODID = "-06"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FF09M003.XPRCD[1] cursor, bold; /* highlight*/
          set FF09M003.XPRCD[2] bold; /* highlight*/
          set FF09M003.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "-06"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FF09M003.XPRCD[1] cursor, bold; /* highlight*/
        set FF09M003.XPRCD[2] bold; /* highlight*/
      end
    else
      FFWREC.XXXMODID = "-06"; /* error module id*/
      converseLib.validationFailed(10); /* invalid*/
      set FF09M003.XPRCD[1] cursor, bold; /* highlight*/
    end
  else
    if (FF09M003.XPRCD[2] == " ")
      if (FF09M003.XPRCD[3] == " ")
        if (FF09M003.XPRCD[4] == " ")
        /* continue*/
        else
          FFWREC.XXXMODID = "-06"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FF09M003.XPRCD[2] cursor, bold; /* highlight*/
          set FF09M003.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "-06"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FF09M003.XPRCD[2] cursor, bold; /* highlight*/
      end
    else
      if (FF09M003.XPRCD[3] == " ")
        if (FF09M003.XPRCD[4] == " ")
        /* continue*/
        else
          FFWREC.XXXMODID = "-06"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FF09M003.XPRCD[3] cursor, bold; /* highlight*/
        end
      end
    end
  end

   /* Check for duplicates*/

  if (FF09M003.XPRCD[3] > " "
   && FF09M003.XPRCD[3] == FF09M003.XPRCD[4])
    FFWREC.XXXMODID = "-06"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FF09M003.XPRCD[3] cursor, bold; /* highlight*/
    set FF09M003.XPRCD[4] bold; /* highlight*/
  end
  if (FF09M003.XPRCD[2] > " "
   && FF09M003.XPRCD[2] == FF09M003.XPRCD[4])
    FFWREC.XXXMODID = "-06"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FF09M003.XPRCD[2] cursor, bold; /* highlight*/
    set FF09M003.XPRCD[4] bold; /* highlight*/
  end
  if (FF09M003.XPRCD[2] > " "
   && FF09M003.XPRCD[2] == FF09M003.XPRCD[3])
    FFWREC.XXXMODID = "-06"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FF09M003.XPRCD[2] cursor, bold; /* highlight*/
    set FF09M003.XPRCD[3] bold; /* highlight*/
  end
  if (FF09M003.XPRCD[1] > " "
   && FF09M003.XPRCD[1] == FF09M003.XPRCD[4])
    FFWREC.XXXMODID = "-06"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FF09M003.XPRCD[1] cursor, bold; /* highlight*/
    set FF09M003.XPRCD[4] bold; /* highlight*/
  end
  if (FF09M003.XPRCD[1] > " "
   && FF09M003.XPRCD[1] == FF09M003.XPRCD[3])
    FFWREC.XXXMODID = "-06"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FF09M003.XPRCD[1] cursor, bold; /* highlight*/
    set FF09M003.XPRCD[3] bold; /* highlight*/
  end
  if (FF09M003.XPRCD[1] > " "
   && FF09M003.XPRCD[1] == FF09M003.XPRCD[2])
    FFWREC.XXXMODID = "-06"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FF09M003.XPRCD[1] cursor, bold; /* highlight*/
    set FF09M003.XPRCD[2] bold; /* highlight*/
  end

end // end FF09S-06

// Validate comb typ cd indicator
Function FF09S-07()

   /* Validate combine type codes indicator*/

  if (FF09M003.FF09M-COMB-TYP-CDS != "Y" /* not 'Y'*/
   && FF09M003.FF09M-COMB-TYP-CDS != "N") /* not 'N'*/
    if (FF09M003.FF09M-COMB-TYP-CDS != " ") /* not ' '*/
      FFWREC.XXXMODID = "-07"; /* error module id*/
      converseLib.validationFailed(10); /* invalid value*/
      set FF09M003.FF09M-COMB-TYP-CDS cursor, bold; /* highlight*/
    else /* combine type codes ' '*/
      FFWREC.XXXMODID = "-07"; /* error module id*/
      converseLib.validationFailed(08); /* required value*/
      set FF09M003.FF09M-COMB-TYP-CDS cursor, bold; /* highlight*/
    end
  end

end // end FF09S-07

// Verify report type
Function FF09S-08()
   /* --------------------------------------------------------------------*/
   /* Verify only one report type selected*/
   /* --------------------------------------------------------------------*/

  if (FF09M004.FF09MINL != " "
   && FF09M004.FF09MMKP != " "
   && FF09M004.FF09MCBN != " ")
    FFWREC.XXXMODID = "-08";
    set FF09M004.FF09MINL cursor, bold; /* highlight*/
    converseLib.validationFailed(508); /* select only one report type*/
  end

  if (FF09M004.FF09MINL != " "
   && FF09M004.FF09MMKP != " ")
    FFWREC.XXXMODID = "-08";
    set FF09M004.FF09MINL cursor, bold; /* highlight*/
    converseLib.validationFailed(508); /* select only one report type*/
  end

  if (FF09M004.FF09MINL != " "
   && FF09M004.FF09MCBN != " ")
    FFWREC.XXXMODID = "-08";
    set FF09M004.FF09MINL cursor, bold; /* highlight*/
    converseLib.validationFailed(508); /* select only one report type*/
  end

  if (FF09M004.FF09MMKP != " "
   && FF09M004.FF09MCBN != " ")
    FFWREC.XXXMODID = "-08";
    set FF09M004.FF09MMKP cursor, bold; /* highlight*/
    converseLib.validationFailed(508); /* select only one report type*/
  end

end // end FF09S-08

// verify report type
Function FF09S-09()
   /* ---------------------------------------------------------------------*/
   /* Verify only one report type selected*/
   /* ---------------------------------------------------------------------*/

  if (FF09M005.FF09MINL != " "
   && FF09M005.FF09MMKP != " "
   && FF09M005.FF09MCBN != " ")
    FFWREC.XXXMODID = "-09";
    set FF09M005.FF09MINL cursor, bold; /* Highlight*/
    converseLib.validationFailed(508); /* Select only one report type*/
  end

  if (FF09M005.FF09MINL != " "
   && FF09M005.FF09MMKP != " ")
    FFWREC.XXXMODID = "-09";
    set FF09M005.FF09MINL cursor, bold; /* Highlight*/
    converseLib.validationFailed(508); /* Select only one report type*/
  end

  if (FF09M005.FF09MINL != " "
   && FF09M005.FF09MCBN != " ")
    FFWREC.XXXMODID = "-09";
    set FF09M005.FF09MINL cursor, bold; /* Highlight*/
    converseLib.validationFailed(508); /* Select only one report type*/
  end

  if (FF09M005.FF09MMKP != " "
   && FF09M005.FF09MCBN != " ")
    FFWREC.XXXMODID = "-09";
    set FF09M005.FF09MMKP cursor, bold; /* Highlight*/
    converseLib.validationFailed(508); /* Select only one report type*/
  end

end // end FF09S-09

// Verify parameters
Function FF09S01()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.XPCCD > " ") /* Category was entered*/
    if (FF09M003.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M003.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M003.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S01"; /* Module identification*/
      set FF09M003.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M003.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.YPGCD > " ") /* Type group was entered*/
    if (FF09M003.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M003.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M003.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S01"; /* Module identification*/
      set FF09M003.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M003.YPGABRV = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.XPLCD == "*") /* Wildcard line code*/
    FF09M003.XPLABRV = "ALL";
  else
    if (FF09M003.XPLCD > " ") /* Line was entered*/
      if (FF09M003.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF09M003.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF09M003.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S01"; /* Module identification*/
        set FF09M003.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF09M003.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  if (FF09M003.FF09MBMO != 0
   && FF09M003.FF09MBMO != 0)
    if (FF09M003.FF09MBMO > FF09M003.FF09MXMO
     && FF09M003.FF09MXMO > 9000)
      FFWREC.XXXMODID = "S01"; /* Module identification*/
      set FF09M003.FF09MBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(250); /* Begin cannot be gt end*/
    else
      set FFZREC empty;
      FFZREC.FFZBYYMM = FF09M003.FF09MBMO;
      FFZREC.FFZEYYMM = FF09M003.FF09MXMO;
      FFZREC.FFZCHK12 = "Y";
      FFZREC.FFZSRANG = "Y";
      TA1REC.TA1PGMNM = "FF09";

      XSFFS30();

      if (FFZREC.FFZBEGRC == 0) /* No begin month error*/
        if (FFZREC.FFZNUMMO != 6 /* but not a 6 month range*/
         && FFZREC.FFZNUMMO != 12) /* or a 12 month range*/
          FFWREC.XXXMODID = "S01"; /* Module identification*/
          set FF09M003.FF09MXMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(241); /* Only 6 & 12 month ranges*/
        end
      else
        if (FFZREC.FFZBEGRC == 3) /* Out of range*/
          FFWREC.XXXMODID = "S01"; /* Module identification*/
          set FF09M003.FF09MBMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(151); /* Out of range*/
        else
          FFWREC.XXXMODID = "S01"; /* Module identification*/
          set FF09M003.FF09MBMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Invalid value*/
        end
      end

      if (FFZREC.FFZENDRC != 0) /* End month error*/
        if (FFZREC.FFZENDRC == 3) /* Out of range*/
          FFWREC.XXXMODID = "S01"; /* Module identification*/
          set FF09M003.FF09MXMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(151); /* Out of range*/
        else
          FFWREC.XXXMODID = "S01"; /* Module identification*/
          set FF09M003.FF09MXMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Invalid value*/
        end
      end
    end
  end


end // end FF09S01

// Verify parameters
Function FF09S02()
   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M004.XPLCD == "*") /* Wildcard line code*/
    FF09M004.XPLABRV = "ALL";
  else
    if (FF09M004.XPLCD > " ") /* Line was entered*/
      if (FF09M004.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF09M004.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF09M004.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S02"; /* Module identification*/
        set FF09M004.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF09M004.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  if (FF09M004.FF09MBMO != 0
   && FF09M004.FF09MXMO != 0)
    if (FF09M004.FF09MBMO > FF09M004.FF09MXMO
     && FF09M004.FF09MXMO > 9000)
      FFWREC.XXXMODID = "S02"; /* Module identification*/
      set FF09M004.FF09MBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(250); /* Begin cannot be gt end*/
    else
      set FFZREC empty;
      FFZREC.FFZBYYMM = FF09M004.FF09MBMO;
      FFZREC.FFZEYYMM = FF09M004.FF09MXMO;
      FFZREC.FFZCHK12 = "Y";
      FFZREC.FFZSRANG = "Y";
      TA1REC.TA1PGMNM = "FF09";

      XSFFS30();

      if (FFZREC.FFZBEGRC == 0) /* No begin month error*/
         /* next sentence*/
      else
        if (FFZREC.FFZBEGRC == 3) /* Out of range*/
          FFWREC.XXXMODID = "S02"; /* Module identification*/
          set FF09M004.FF09MBMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(151); /* Out of range*/
        else
          FFWREC.XXXMODID = "S02"; /* Module identification*/
          set FF09M004.FF09MBMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Invalid value*/
        end
      end

      if (FFZREC.FFZENDRC != 0) /* End month error*/
        if (FFZREC.FFZENDRC == 3) /* Out of range*/
          FFWREC.XXXMODID = "S02"; /* Module identification*/
          set FF09M004.FF09MXMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(151); /* Out of range*/
        else
          FFWREC.XXXMODID = "S02"; /* Module identification*/
          set FF09M004.FF09MXMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Invalid value*/
        end
      end
    end
  end


end // end FF09S02

// Verify parameters
Function FF09S03()
   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  if (FF09M005.FF09MBMO > FF09M005.FF09MXMO
   && FF09M005.FF09MXMO > 9000)
    FFWREC.XXXMODID = "S03"; /* Module identification*/
    set FF09M005.FF09MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(250); /* Begin cannot be gt end*/
  else
    set FFZREC empty;
    FFZREC.FFZBYYMM = FF09M005.FF09MBMO;
    FFZREC.FFZEYYMM = FF09M005.FF09MXMO;
    FFZREC.FFZCHK12 = "Y";
    FFZREC.FFZSRANG = "Y";
    TA1REC.TA1PGMNM = "FF09";

    XSFFS30();

    if (FFZREC.FFZBEGRC == 0) /* No begin month error*/
       /* NEXT SENTENCE*/
    else
      if (FFZREC.FFZBEGRC == 3) /* Out of range*/
        FFWREC.XXXMODID = "S03"; /* Module identification*/
        set FF09M005.FF09MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* Out of range*/
      else
        FFWREC.XXXMODID = "S03"; /* Module identification*/
        set FF09M005.FF09MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value*/
      end
    end

    if (FFZREC.FFZENDRC != 0) /* End month error*/
      if (FFZREC.FFZENDRC == 3) /* Out of range*/
        FFWREC.XXXMODID = "S03"; /* Module identification*/
        set FF09M005.FF09MXMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* Out of range*/
      else
        FFWREC.XXXMODID = "S03"; /* Module identification*/
        set FF09M005.FF09MXMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value*/
      end
    end
  end


end // end FF09S03

// Verify line/typ/cat relatinshp
Function FF09S04()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPCCD = FF09M014.XPCCD;
  FF2REC.YPGCD = FF09M014.YPGCD;
  FF2REC.YSMXDV = "10";

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      return;
    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF09S04

// Verify parameters cat  reports
Function FF09S07()
   /* ------------------------------------------------------------*/
             /* Catagory Summary Reports Requested*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If begin month was entered verify that it is a valid date.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.FF09MBMO != 0) /* Begin month entered*/

    set TA2REC empty; /* Clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
    TA2REC.TA2GRTYP = "E"; /* Type*/
    FF09W01.FF09WVYM = FF09M008.FF09MBMO;
    FF09W01.FF09WVDD = 01; /* Default day field*/
    TA2REC.TA2GRGEN = FF09W01.FF09WVDT;

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date routine*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (TA2RTNCD == 0) /* Normal return code*/

        FF09S09(); /* ===> get min beg month*/

      else
        FFWREC.XXXMODID = "S07"; /* Module identification*/
        set FF09M008.FF09MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "S07 EDIT BEGIN MONTH";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
      FFWREC.XXXMODID = "S07"; /* Module identification*/
      converseLib.validationFailed(1); /* System error occured*/
      exit stack; /* Exit to display map*/
    end
  else
    FFWREC.FFABEGMO = 0;
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.XPLCD > " " /* line code entered*/
   && FF09M008.XPLCD != "*") /* line code entered*/
    if (FF09M008.XPLCD in XPLTBL.XPLCD           /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M008.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M008.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S07"; /* Module identification*/
      set FF09M008.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M008.XPLABRV = " ";
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.YPGCD > " " /* Type group was entered*/
   && FF09M008.YPGCD != "*") /* Type group was entered*/
    if (FF09M008.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M008.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M008.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S07"; /* Module identification*/
      set FF09M008.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M008.YPGABRV = " "; /* Clear abrv*/
  end


   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.XPCCD > " " /* Category was entered*/
   && FF09M008.XPCCD != "*") /* Category was entered*/
    if (FF09M008.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M008.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M008.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S07"; /* Module identification*/
      set FF09M008.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M008.XPCABRV = " "; /* Clear abbrv*/
  end

  if (converseVar.validationMsgNum != 0) /* Error found*/
    return; /* get out*/
  end

   /* ------------------------------------------------------------*/
   /* Verify season end months.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.FF09MBMO == 0
   && FF09M008.FF09MSMM[1] == 0
   && FF09M008.FF09MSMM[2] == 0
   && FF09M008.FF09MSMM[3] == 0
   && FF09M008.FF09MSMM[4] == 0)
    /* NEXT SENTENCE*/
  else
    FF09S50(); /* Verify sesn end months if they exist*/
  end

   /* **                                                        ***/
   /* ********************** End of FF09S07 ***********************/
end // end FF09S07

// Verify parameters line reports
Function FF09S08()
   /* ------------------------------------------------------------*/
                /* Line Summary Reports Requested*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If begin month was entered verify that it is a valid date.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.FF09MBMO != 0) /* Begin month entered*/

    set TA2REC empty; /* Clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
    TA2REC.TA2GRTYP = "E"; /* Type*/
    FF09W01.FF09WVYM = FF09M008.FF09MBMO;
    FF09W01.FF09WVDD = 01; /* Default day field*/
    TA2REC.TA2GRGEN = FF09W01.FF09WVDT;

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date routine*/

    if (sysVar.errorCode == "00000000") /* Call successful*/

      if (TA2RTNCD == 0) /* Normal return code*/

        FF09S09(); /* ===> verify beg mo form VFFXRF01*/

      else
        FFWREC.XXXMODID = "S08"; /* Module identification*/
        set FF09M008.FF09MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end

    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "S08 EDIT BEGIN MONTH";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
      FFWREC.XXXMODID = "S08"; /* Module identification*/
      converseLib.validationFailed(1); /* System error occured*/
      exit stack; /* Exit to display map*/
    end

  else
    FFWREC.FFABEGMO = 0;
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.XPLCD > " " /* line code entered*/
   && FF09M008.XPLCD != "*") /* line code entered*/
    if (FF09M008.XPLCD in XPLTBL.XPLCD           /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M008.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M008.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S08"; /* Module identification*/
      set FF09M008.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M008.XPLABRV = " ";
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.YPGCD > " " /* Type group was entered*/
   && FF09M008.YPGCD != "*") /* Type group was entered*/
    if (FF09M008.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M008.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M008.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S08"; /* Module identification*/
      set FF09M008.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M008.YPGABRV = " "; /* Clear abrv*/
  end


   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.XPCCD > " ") /* Category was entered*/
    /* ------------------------------------------------------------*/
     /* indicate invalid.*/
    /* ------------------------------------------------------------*/
    FF09M008.XPCABRV = " "; /* Abbreviation*/
    FFWREC.XXXMODID = "S08"; /* Module identification*/
    set FF09M008.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/
  else
    FF09M008.XPCABRV = " "; /* Clear abbrv*/
  end

  if (converseVar.validationMsgNum != 0) /* errors found*/
    return;
  end
   /* ------------------------------------------------------------*/
   /* If sesn end months entered verify that they are valid.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.FF09MSMM[1] != 0) /* Sesn end months entered*/
    FF09S50(); /* Verify sesn end months*/
  end

   /* **                                                        ***/
   /* ********************** End of FF09S08 ***********************/
end // end FF09S08

// Select "SM" min begmo VFFXRF01
Function FF09S09()
   /* ------------------------------------------------------------*/
   /* Get the minimum begin dat from FFXRF01 table*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/
  set FFFREC empty;

  if (FF09M008.XPLCD == "*"
   || FF09M008.XPLCD == " ")
    FF2REC.XPLCD = "*";
  else
    FF2REC.XPLCD = FF09M008.XPLCD;
  end

  if (FF09M008.XPCCD == "*"
   || FF09M008.XPCCD == " ")
    FF2REC.XPCCD = "*";
  else
    FF2REC.XPCCD = FF09M008.XPCCD;
  end

  if (FF09M008.YPGCD == "*"
   || FF09M008.YPGCD == " ")
    FF2REC.YPGCD = "*";
  else
    FF2REC.YPGCD = FF09M008.YPGCD;
  end

  FFFREC.FFFFUNCD = "SM";
  FF2REC.YSMXDV = "10"; /* division code*/
  XX0XS01(); /* ===> get data & time*/
  FF09S13(); /* ===> Select VFFCTL01 invoice cutoff*/
                                   /* date*/
  FF09S14(); /* ===> Calc contp month*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" (FFFREC, SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (TA2REC.TA2GRCYM < FFFREC.FFFBEGMO
       || TA2REC.TA2GRCYM > FF09W01.FF09WCY1) /* ===> contp. month*/
        FFWREC.XXXMODID = "S09"; /* Module identification*/
        set FF09M008.FF09MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      else
        FF09W08.FF09WBGM = TA2REC.TA2GRCYM;
      end
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, return to previous process.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == -305) /* No rows found*/
      FFWREC.XXXMODID = "S09"; /* Module identification*/
      converseLib.validationFailed(18); /* Indicate no data to display*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of FF09S09 ***********************/
end // end FF09S09

// load parameter pass record
Function FF09S10()
   /* ------------------------------------------------------------*/
      /* Load the parameter pass record*/
   /* Format the variable parameters entered by the user.*/
   /* ------------------------------------------------------------*/

  if (FF09M008.YPGCD != " " /* Type group*/
   && FF09M008.YPGCD != "*" /* Type group*/
   && FF09M008.FF09MTYP == "N") /* ===> combine type not requested*/
    FF09W08.YPGCD = FF09M008.YPGCD; /* Type group*/
  else
    FF09W08.YPGCD = "  "; /* Type group*/
  end

  if (FF09M008.XPCCD != " " /* Category entered*/
   && FF09M008.XPCCD != "*") /* Category entered*/
    FF09W08.XPCCD = FF09M008.XPCCD; /* Category*/
    FF09W08.XPLCD = "  "; /* Line*/
  else
    FF09W08.XPCCD = "  "; /* Category*/
    if (FF09M008.XPLCD != " " /* Line entered*/
     && FF09M008.XPLCD != "*") /* Line entered*/
      FF09W08.XPLCD = FF09M008.XPLCD; /* Line*/
    else
      FF09W08.XPLCD = "  "; /* Line*/
    end
  end

  if (FF09M008.FF09MSEL[1] == "S")
    FF09W08.FF09WSEL = "C"; /* ===> catagory reports requested*/
  end

  if (FF09M008.FF09MSEL[2] == "S")
    FF09W08.FF09WSEL = "L"; /* ===> line     reports requested*/
  end

  if (FF09M008.FF09MSEL[3] == "S")
    FF09W08.FF09WSEL = "G"; /* ===> grand tot rpt requested*/
  end

  FF09W08.FF09MTYP = FF09M008.FF09MTYP; /* ===> combine type?*/

  FF09W08.XWSCD = "01";
  FF09W08.FF09WCDT = -1;
  FF09W08.FF09WCTM = -1;
  FF09W08.FF09WBYM = -1;


end // end FF09S10

// Verify parms - indices by cat
Function FF09S11()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M009.XPCCD > " ") /* Category was entered*/
    if (FF09M009.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M009.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M009.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S11"; /* Module identification*/
      set FF09M009.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M009.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M009.YPGCD > " ") /* Type group was entered*/
    if (FF09M009.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M009.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      if (FF09M009.YPGCD == "*") /* wild card*/
        FF09M009.YPGABRV = "ALL"; /* Clear abrv*/
      else
         /* ------------------------------------------------------------*/
          /* If not found or inactive, indicate invalid.*/
         /* ------------------------------------------------------------*/
        FF09M009.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S11"; /* Module identification*/
        set FF09M009.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    end
  else
    FF09M009.YPGABRV = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M009.XPLCD == "*") /* Wildcard line code*/
    FF09M009.XPLABRV = "ALL";
  else
    if (FF09M009.XPLCD > " ") /* Line was entered*/
      if (FF09M009.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF09M009.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF09M009.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S11"; /* Module identification*/
        set FF09M009.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF09M009.XPLABRV = " "; /* Clear abbrv*/
    end
  end


end // end FF09S11

// Select "S"  Unique    VFFCTL01
Function FF09S13()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffctl01 table row*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF09S13

// Calc curr/contp month
Function FF09S14()
   /* ------------------------------------------------------------*/
     /* Curr month calculation , stored in FF09W01.FF09WCY1*/
   /* ------------------------------------------------------------*/

  if (FF1REC.FF1IVCDT != 0) /* ===> Invoice cutoff date*/
    FF09W01.FF09WDT1 = FF1REC.FF1IVCDT;

    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* ===> curr >  ivc date*/
      /* ======= Next Sentence =============>*/
    else

      if (FF09W01.FF09WMM1 == 1)
        FF09W01.FF09WMM1 = 12;

        if (FF09W01.FF09WYY1 == 0)
          FF09W01.FF09WYY1 = 99;
          FF09W01.FF09WCC1 = FF09W01.FF09WCC1 - 1;
        else
          FF09W01.FF09WYY1 = FF09W01.FF09WYY1 - 1;
        end

      else
        FF09W01.FF09WMM1 = FF09W01.FF09WMM1 - 1;
      end

    end
  else
    FF09W01.FF09WCY1 = 0;
  end


end // end FF09S14

// Verify parms - INDCS by lin
Function FF09S15()

   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M010.YPGCD == "*") /* Wildcard line code*/
    FF09M010.YPGABRV = "ALL";
  else
    if (FF09M010.YPGCD > " ") /* Type group was entered*/
      if (FF09M010.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF09M010.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
        FF09M010.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S15"; /* Module identification*/
        set FF09M010.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF09M010.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M010.XPLCD == "*") /* Wildcard line code*/
    FF09M010.XPLABRV = "ALL";
  else
    if (FF09M010.XPLCD > " ") /* Line was entered*/
      if (FF09M010.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF09M010.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF09M010.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S15"; /* Module identification*/
        set FF09M010.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF09M010.XPLABRV = " "; /* Clear abbrv*/
    end
  end


end // end FF09S15

// Verify parameters cat  reports
Function FF09S20()
   /* ------------------------------------------------------------*/
             /* Catagory Target Reports Requested*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If begin month was entered verify that it is a valid date.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.FF09MBMO != 0) /* Begin month entered*/

    set TA2REC empty; /* Clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
    TA2REC.TA2GRTYP = "E"; /* Type*/
    FF09W01.FF09WVYM = FF09M011.FF09MBMO;
    FF09W01.FF09WVDD = 01; /* Default day field*/
    TA2REC.TA2GRGEN = FF09W01.FF09WVDT;

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date routine*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (TA2RTNCD == 0) /* Normal return code*/

        FF09S21(); /* ===> get min beg month*/

      else
        FFWREC.XXXMODID = "S20"; /* Module identification*/
        set FF09M011.FF09MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "S20 EDIT BEGIN MONTH";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
      FFWREC.XXXMODID = "S20"; /* Module identification*/
      converseLib.validationFailed(1); /* System error occured*/
      exit stack; /* Exit to display map*/
    end
  else
    FFWREC.FFABEGMO = 0;
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Verify season end months*/
   /* ------------------------------------------------------------*/

  FF09S23(); /* Verify sesn end months*/

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.XPLCD > " " /* line code entered*/
   && FF09M011.XPLCD != "*") /* line code entered*/
    if (FF09M011.XPLCD in XPLTBL.XPLCD           /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M011.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M011.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S20"; /* Module identification*/
      set FF09M011.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M011.XPLABRV = " ";
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.YPGCD > " " /* Type group was entered*/
   && FF09M011.YPGCD != "*") /* Type group was entered*/
    if (FF09M011.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M011.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M011.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S20"; /* Module identification*/
      set FF09M011.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M011.YPGABRV = " "; /* Clear abrv*/
  end


   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.XPCCD > " " /* Category was entered*/
   && FF09M011.XPCCD != "*") /* Category was entered*/
    if (FF09M011.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M011.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M011.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S20"; /* Module identification*/
      set FF09M011.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M011.XPCABRV = " "; /* Clear abbrv*/
  end


end // end FF09S20

// Select "SM" min begmo VFFXRF01
Function FF09S21()
   /* ------------------------------------------------------------*/
   /* Get the minimum begin dat from SWHDR01 table*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.XWSCD = "05"; /* Target wrksht type*/

  if (FF09M011.XPLCD == " ")
    FFQREC.XPLCD = "*";
  else
    FFQREC.XPLCD = FF09M011.XPLCD;
  end

  if (FF09M011.XPCCD == " ")
    FFQREC.XPCCD = "*";
  else
    FFQREC.XPCCD = FF09M011.XPCCD;
  end

  if (FF09M011.YPGCD == " ")
    FFQREC.YPGCD = "*";
  else
    FFQREC.YPGCD = FF09M011.YPGCD;
  end

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("SM", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (TA2REC.TA2GRCYM < FFQREC.FFABEGMO
       || TA2REC.TA2GRCYM > FFQREC.FFQCURMO) /* ===> contp. month*/
        FFWREC.XXXMODID = "S21"; /* Module identification*/
        set FF09M011.FF09MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      else
        FF09W11.FF09WBGM = TA2REC.TA2GRCYM;
      end
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, return to previous process.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == -305) /* No rows found*/
      FFWREC.XXXMODID = "S21"; /* Module identification*/
      converseLib.validationFailed(18); /* Indicate no data to display*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF09S21

// Verify parameters line reports
Function FF09S22()
   /* ------------------------------------------------------------*/
                /* Line Summary Reports Requested*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If begin month was entered verify that it is a valid date.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.FF09MBMO != 0) /* Begin month entered*/

    set TA2REC empty; /* Clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
    TA2REC.TA2GRTYP = "E"; /* Type*/
    FF09W01.FF09WVYM = FF09M011.FF09MBMO;
    FF09W01.FF09WVDD = 01; /* Default day field*/
    TA2REC.TA2GRGEN = FF09W01.FF09WVDT;

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date routine*/

    if (sysVar.errorCode == "00000000") /* Call successful*/

      if (TA2RTNCD == 0) /* Normal return code*/

        FF09S21(); /* get min beg month*/

      else
        FFWREC.XXXMODID = "S22"; /* Module identification*/
        set FF09M011.FF09MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end

    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "S22 EDIT BEGIN MONTH";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
      FFWREC.XXXMODID = "S22"; /* Module identification*/
      converseLib.validationFailed(1); /* System error occured*/
      exit stack; /* Exit to display map*/
    end

  else
    FFWREC.FFABEGMO = 0;
  end

   /* ------------------------------------------------------------*/
   /* If sesn end months entered verify that they are valid.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.FF09MSMM[1] != 0) /* Sesn end months entered*/
    FF09S23(); /* Verify sesn end months*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.XPLCD > " " /* line code entered*/
   && FF09M011.XPLCD != "*") /* line code entered*/
    if (FF09M011.XPLCD in XPLTBL.XPLCD           /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M011.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M011.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S22"; /* Module identification*/
      set FF09M011.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M011.XPLABRV = " ";
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.YPGCD > " " /* Type group was entered*/
   && FF09M011.YPGCD != "*") /* Type group was entered*/
    if (FF09M011.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M011.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M011.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S22"; /* Module identification*/
      set FF09M011.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M011.YPGABRV = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* Clear category code if entered.*/
   /* ------------------------------------------------------------*/

  FF09M011.XPCCD = "  "; /* Clear cat code*/
  FF09M011.XPCABRV = "  "; /* Clear cat abrv*/


end // end FF09S22

// Verify sesn end months
Function FF09S23()
   /* ------------------------------------------------------------*/
   /* Validate season end months*/
   /* ------------------------------------------------------------*/

   /* Determine number of seasons entered by looking backwards*/
   /* until data found.*/

  FF09W01.FF09WCMO[1] = 0; /* zeros to season end date1*/
  FF09W01.FF09WCMO[2] = 0; /* zeros to season end date2*/
  FF09W01.FF09WCMO[3] = 0; /* zeros to season end date3*/
  FF09W01.FF09WCMO[4] = 0; /* zeros to season end date4*/
  FF09W11.FF2NSEAS = 0; /* zero out number of seasons*/
  FF09W01.FF09WSIX = 4; /* index*/
  while (FF09W01.FF09WSIX > 0)
    if (FF09M011.FF09MSMM[FF09WSIX] > 0)
      FF09W11.FF2NSEAS = FF09W01.FF09WSIX; /* number of seasons*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 4; /* force out of loop*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 1;
    end
  end

   /* Look for season end months greater than 12*/

  FF09W01.FF09WSIX = 1; /* Set index to 1*/
  while (FF09W01.FF09WSIX <= FF09W11.FF2NSEAS)
    if (FF09M011.FF09MSMM[FF09WSIX] > 12)
      FFWREC.XXXMODID = "S23"; /* Module identification*/
      set FF09M011.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Default to cat target seasons if end months not entered*/

  if (FF09W11.FF2NSEAS == 0) /* no season lengths found*/

    FF09S60(); /* Open SWHDR cursor*/
    FF09W01.FF09WQCS = "N"; /* SWHDR cursor switch*/
    FF09W01.FF09WSIX = 1; /* Season index*/
    FF09S62(); /* Fetch SWHDR cursor*/
    if (FF09W01.FF09WQCS == "N") /* If not end of SWHDR csr*/
      if (FF09M011.FF09MBMO != 0 /* If beg month not entered*/
       && FF09W11.FF09WBGM != FFQREC.FFABEGMO)
        FFWREC.XXXMODID = "S23"; /* Module identification*/
        set FF09M011.FF09MSMM[1] cursor, bold; /* Highlight*/
        set FF09M011.FF09MSMM[2] bold;
        set FF09M011.FF09MSMM[3] bold;
        set FF09M011.FF09MSMM[4] bold;
        converseLib.validationFailed(442); /* Sesn end mos required*/
        return; /* get out*/
      end
      /* calculate year end month*/
      FFWREC.FFABEGMO = FFQREC.FFABEGMO;
      FF09W01.FF09WCY2 = FFQREC.FFABEGMO;
      FF09W01.FF09WMM2 = FF09W01.FF09WMM2 + 11;
      if (FF09W01.FF09WMM2 > 12)
        FF09W01.FF09WMM2 = FF09W01.FF09WMM2 - 12;
        FF09W01.FF09WCY2 = FF09W01.FF09WCY2 + 100;
      end
      FF09W01.FF09WXMO = FF09W01.FF09WCY2;
      FF09S62(); /* Fetch SWHDR cursor*/
    end
     /* calculate & save season end months*/
    while (FF09W01.FF09WQCS == "N" /* If not end of SWHDR csr*/
     && FFQREC.FFABEGMO < FF09W01.FF09WXMO) /* and not year end*/
      FF09W11.FF2NSEAS = FF09W11.FF2NSEAS + 1;
      FF09W01.FF09WCY2 = FFQREC.FFABEGMO;
      FF09W01.FF09WMM2 = FF09W01.FF09WMM2 - 1;
      if (FF09W01.FF09WMM2 == 0)
        FF09W01.FF09WMM2 = 12;
        FF09W01.FF09WCY2 = FF09W01.FF09WCY2 - 100;
      end
      FF09W01.FF09WCMO[FF09WSIX] = FF09W01.FF09WCY2;
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
      FF09S62(); /* Fetch SWHDR cursor*/
    end
    FF09W01.FF09WCMO[FF09WSIX] = FF09W01.FF09WXMO;
    FF09W11.FF2NSEAS = FF09W11.FF2NSEAS + 1;
    FF09S64(); /* Close SWHDR cursor*/
  else

    /* Check for embedded zeros*/

    FF09W01.FF09WSIX = 1; /* index*/
    while (FF09W01.FF09WSIX <= FF09W11.FF2NSEAS) /* for number of seasons*/
      if (FF09M011.FF09MSMM[FF09WSIX] == 0) /* check for embedded zeros*/
        FFWREC.XXXMODID = "S23"; /* Module identification*/
        set FF09M011.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(440); /* embedded zero msg*/
        return; /* return to previous routine*/
      else
        FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
      end
    end

    /* Verify that last season is 12 months past begin date month*/

    FF09W01.FF09WSIX = FF09W11.FF2NSEAS; /* last season number*/
    FF09W01.FF09WCY2 = FF09W11.FF09WBGM; /* begin date to work area*/

    FF09W01.FF09WMM2 = FF09W01.FF09WMM2 + 11;
    if (FF09W01.FF09WMM2 > 12)
      FF09W01.FF09WMM2 = FF09W01.FF09WMM2 - 12;
      FF09W01.FF09WCY2 = FF09W01.FF09WCY2 + 100;
    end
    if (FF09M011.FF09MSMM[FF09WSIX] != FF09W01.FF09WMM2)
      FFWREC.XXXMODID = "S23"; /* Module identification*/
      set FF09M011.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* last season must complete year*/
      return; /* return to previous routine*/
    end

    if (converseVar.validationMsgNum > 0) /* errors found*/
      return; /* get out*/
    end

    /* Verify that season end months are valid*/

    FF09W01.FF09WSIX = 1; /* reset season index*/
    FF09W01.FF09WCY2 = FF09W11.FF09WBGM; /* begin date to work*/
    if (FF09M011.FF09MSMM[1] > 0)
      FF09W01.FF09WCMO[1] = FF09W11.FF09WBGM;
    end
    if (FF09M011.FF09MSMM[2] > 0)
      FF09W01.FF09WCMO[2] = FF09W11.FF09WBGM;
    end
    if (FF09M011.FF09MSMM[3] > 0)
      FF09W01.FF09WCMO[3] = FF09W11.FF09WBGM;
    end
    if (FF09M011.FF09MSMM[4] > 0)
      FF09W01.FF09WCMO[4] = FF09W11.FF09WBGM;
    end

    while (FF09W01.FF09WSIX <= FF09W11.FF2NSEAS)
      FF09W01.FF09WCMM[FF09WSIX] = FF09M011.FF09MSMM[FF09WSIX]; /* move month*/
      if (FF09W01.FF09WMM2 > FF09W01.FF09WCMM[FF09WSIX]) /* bgn mo > end*/
        FF09W01.FF09WCMO[FF09WSIX] = FF09W01.FF09WCMO[FF09WSIX] + 100; /* increment year*/
      end
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* bump index*/
    end

    FF09W01.FF09WSIX = 1;
    FF09W01.FF09WNIX = 2;

    while (FF09W01.FF09WNIX <= FF09W11.FF2NSEAS)
      if (FF09W01.FF09WCMO[FF09WSIX] /* sesn > next sesn*/
       >= FF09W01.FF09WCMO[FF09WNIX])
        FFWREC.XXXMODID = "S23"; /* Module identification*/
        set FF09M011.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* season must > following season*/
        return; /* return to previous routine*/
      end
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* increment sesn index*/
      FF09W01.FF09WNIX = FF09W01.FF09WNIX + 1; /* increment next sesn index*/
    end

     /* MAKE SURE CONTP MONTH IS IN FIRST END MONTH RANGE*/

    if (FF09W01.FF09WCY1 > FF09W01.FF09WCMO[1])
      FFWREC.XXXMODID = "S23"; /* Module identification*/
      set FF09M011.FF09MBMO cursor, bold; /* Highlight*/
      set FF09M011.FF09MSMM[1] bold;
      converseLib.validationFailed(453); /* contp not in first range*/
      return; /* return to previous routine*/
    end

  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

  /* Calculate & save number of months in each season*/

  FF09W01.FF09WSIX = 1; /* season index*/
  FF09W01.FF09WMSC = 0; /* mos in sesn counter*/
  FF09W01.FF09WCY2 = FF09W11.FF09WBGM; /* begin month*/

  while (FF09W01.FF09WSIX <= FF09W11.FF2NSEAS
   && FF09W01.FF09WCMO[FF09WSIX] != 0)
    while (FF09W01.FF09WCY2 <= FF09W01.FF09WCMO[FF09WSIX])
      FF09W01.FF09WMSC = FF09W01.FF09WMSC + 1;
      FF09W01.FF09WMM2 = FF09W01.FF09WMM2 + 1;
      if (FF09W01.FF09WMM2 > 12)
        FF09W01.FF09WMM2 = 01;
        FF09W01.FF09WCY2 = FF09W01.FF09WCY2 + 100;
      end
    end
    FF09W11.FF09WMIS[FF09WSIX] = FF09W01.FF09WMSC;
    FF09W01.FF09WMSC = 0;
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* Season index*/
  end


end // end FF09S23

// Verify parameters type reports
Function FF09S24()
   /* ------------------------------------------------------------*/
                /* Type Summary Reports Requested*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If begin month was entered verify that it is a valid date.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.FF09MBMO != 0) /* Begin month entered*/

    set TA2REC empty; /* Clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
    TA2REC.TA2GRTYP = "E"; /* Type*/
    FF09W01.FF09WVYM = FF09M011.FF09MBMO;
    FF09W01.FF09WVDD = 01; /* Default day field*/
    TA2REC.TA2GRGEN = FF09W01.FF09WVDT;

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date routine*/

    if (sysVar.errorCode == "00000000") /* Call successful*/

      if (TA2RTNCD == 0) /* Normal return code*/

        FF09S21(); /* get min beg month*/

      else
        FFWREC.XXXMODID = "S22"; /* Module identification*/
        set FF09M011.FF09MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end

    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "S22 EDIT BEGIN MONTH";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
      FFWREC.XXXMODID = "S22"; /* Module identification*/
      converseLib.validationFailed(1); /* System error occured*/
      exit stack; /* Exit to display map*/
    end

  else
    FFWREC.FFABEGMO = 0;
  end


   /* ------------------------------------------------------------*/
   /* If sesn end months entered verify that they are valid.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.FF09MSMM[1] != 0) /* Sesn end months entered*/
    FF09S23(); /* Verify sesn end months*/
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.YPGCD > " " /* Type group was entered*/
   && FF09M011.YPGCD != "*") /* Type group was entered*/
    if (FF09M011.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M011.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M011.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S22"; /* Module identification*/
      set FF09M011.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M011.YPGABRV = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* Clear any values in line or category.*/
   /* ------------------------------------------------------------*/

  FF09M011.XPLCD = "  "; /* Clear line code*/
  FF09M011.XPLABRV = "  "; /* Clear line abrv*/
  FF09M011.XPCCD = "  "; /* Clear cat code*/
  FF09M011.XPCABRV = "  "; /* Clear cat abrv*/


end // end FF09S24

// load parameter pass record
Function FF09S26()
   /* ------------------------------------------------------------*/
      /* Load the parameter pass record*/
   /* Format the variable parameters entered by the user.*/
   /* ------------------------------------------------------------*/

  if (FF09M011.YPGCD != " " /* Type group*/
   && FF09M011.YPGCD != "*" /* Type group*/
   && FF09M011.FF09MTYP == "N") /* ===> combine type not requested*/
    FF09W11.YPGCD = FF09M011.YPGCD; /* Type group*/
  else
    FF09W11.YPGCD = "  "; /* Type group*/
  end


  if (FF09M011.XPCCD != " " /* Category entered*/
   && FF09M011.XPCCD != "*") /* Category entered*/
    FF09W11.XPCCD = FF09M011.XPCCD; /* Category*/
    FF09W11.XPLCD = "  "; /* Line*/
  else
    FF09W11.XPCCD = "  "; /* Category*/

    if (FF09M011.XPLCD != " " /* Line entered*/
     && FF09M011.XPLCD != "*") /* Line entered*/
      FF09W11.XPLCD = FF09M011.XPLCD; /* Line*/
    else
      FF09W11.XPLCD = "  "; /* Line*/
    end

  end

  if (FF09M011.FF09MSEL[1] == "S")
    FF09W11.FF09WSEL = "C"; /* ===> catagory reports requested*/
  end

  if (FF09M011.FF09MSEL[2] == "S")
    FF09W11.FF09WSEL = "L"; /* ===> line     reports requested*/
  end

  if (FF09M011.FF09MSEL[3] == "S")
    FF09W11.FF09WSEL = "T"; /* ===> type     reports requested*/
  end

  FF09W11.FF09WTYP = FF09M011.FF09MTYP; /* ===> combine type?*/


end // end FF09S26

// Verify sesn end months
Function FF09S50()
   /* ------------------------------------------------------------*/
   /* Validate season end months*/
   /* ------------------------------------------------------------*/

   /* Determine number of seasons entered by looking backwards*/
   /* until data found.*/

  FF09W01.FF09WCMO[1] = 0; /* zeros to season end date1*/
  FF09W01.FF09WCMO[2] = 0; /* zeros to season end date2*/
  FF09W01.FF09WCMO[3] = 0; /* zeros to season end date3*/
  FF09W01.FF09WCMO[4] = 0; /* zeros to season end date4*/
  FF09W08.FF2NSEAS = 0; /* zero out number of seasons*/
  FF09W01.FF09WSIX = 4; /* index*/
  while (FF09W01.FF09WSIX > 0)
    if (FF09M008.FF09MSMM[FF09WSIX] > 0)
      FF09W08.FF2NSEAS = FF09W01.FF09WSIX; /* number of seasons*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 4; /* force out of loop*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 1;
    end
  end

   /* Look for season end months greater than 12*/

  FF09W01.FF09WSIX = 1; /* Set index to 1*/
  while (FF09W01.FF09WSIX <= FF09W08.FF2NSEAS)
    if (FF09M008.FF09MSMM[FF09WSIX] > 12)
      FFWREC.XXXMODID = "S50"; /* Module identification*/
      set FF09M008.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Default to category seasons if end months not entered*/

  if (FF09W08.FF2NSEAS == 0) /* no season lengths found*/

    FF09S55(); /* get sesn months from ffxrf*/
    FF09W08.FF2NSEAS = FF2REC.FF2NSEAS;
      /* make first season beg month the beg month for map*/
      /* if a begin month was not entered*/
    if (FF09M008.FF09MBMO == 0) /* If begin month not entered*/
      FF09W08.FF09WBGM = FF2REC.FF2SEASN[1];
      FF09W01.FF09WCY2 = FF09W08.FF09WBGM;
      FF09M008.FF09MBMO = FF09W01.FF09WYM1;
    else
      if (FF09W08.FF09WBGM != FF2REC.FF2SEASN[1])
        FFWREC.XXXMODID = "S50"; /* Module identification*/
        set FF09M008.FF09MSMM[1] cursor, bold; /* Highlight*/
        set FF09M008.FF09MSMM[2] bold; /**/
        set FF09M008.FF09MSMM[3] bold; /**/
        set FF09M008.FF09MSMM[4] bold; /**/
        converseLib.validationFailed(442); /* Sesn end mos required*/
        return; /* Return to previous process*/
      end
    end
    FF09W01.FF09WCY2 = FF09W08.FF09WBGM;
      /* obtain correct line code & abrv*/
    FFWREC.XPLCD = FF2REC.XPLCD;
    if (FFWREC.XPLCD in XPLTBL.XPLCD)
      FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
    end
      /* calculate season end months using FFXRF beg months*/
    FF09W01.FF09WSIX = 1; /* season index*/
    while (FF09W01.FF09WSIX <= FF2REC.FF2NSEAS)
      if (FF09W01.FF09WSIX == FF2REC.FF2NSEAS)
        FF09W01.FF09WCY2 = FF2REC.FF2SEASN[1];
        FF09W01.FF09WMM2 = FF09W01.FF09WMM2 + 11;
        if (FF09W01.FF09WMM2 > 12)
          FF09W01.FF09WMM2 = FF09W01.FF09WMM2 - 12;
          FF09W01.FF09WCY2 = FF09W01.FF09WCY2 + 100;
        else
            /* next sentence*/
        end
      else
        FF09W01.FF09WNIX = FF09W01.FF09WSIX + 1; /* next season index*/
        FF09W01.FF09WCY2 = FF2REC.FF2SEASN[FF09WNIX];
        FF09W01.FF09WMM2 = FF09W01.FF09WMM2 - 1;
        if (FF09W01.FF09WMM2 == 0)
          FF09W01.FF09WMM2 = 12;
          FF09W01.FF09WCY2 = FF09W01.FF09WCY2 - 100;
        else
            /* next sentence*/
        end
      end
      FF09M008.FF09MSMM[FF09WSIX] = FF09W01.FF09WMM2;
      FF09W01.FF09WCMO[FF09WSIX] = FF09W01.FF09WCY2;
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end

  else /* ** season end months were entered ****/

    /* Check for embedded zeros*/

    FF09W01.FF09WSIX = 1; /* index*/
    while (FF09W01.FF09WSIX <= FF09W08.FF2NSEAS) /* for number of seasons*/
      if (FF09M008.FF09MSMM[FF09WSIX] == 0) /* check for embedded zeros*/
        FFWREC.XXXMODID = "S50"; /* Module identification*/
        set FF09M008.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(440); /* embedded zero msg*/
        return; /* return to previous routine*/
      else
        FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
      end
    end

    /* Verify that last season is 12 months past begin date month*/

    FF09W01.FF09WSIX = FF09W08.FF2NSEAS; /* last season number*/
    FF09W01.FF09WCY2 = FF09W08.FF09WBGM; /* begin date to work area*/

    FF09W01.FF09WMM2 = FF09W01.FF09WMM2 + 11;
    if (FF09W01.FF09WMM2 > 12)
      FF09W01.FF09WMM2 = FF09W01.FF09WMM2 - 12;
      FF09W01.FF09WCY2 = FF09W01.FF09WCY2 + 100;
    end
    if (FF09M008.FF09MSMM[FF09WSIX] != FF09W01.FF09WMM2)
      FFWREC.XXXMODID = "S50"; /* Module identification*/
      set FF09M008.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* last season must complete year*/
      return; /* return to previous routine*/
    end

    if (converseVar.validationMsgNum > 0) /* errors found*/
      return; /* get out*/
    end

    /* Verify that season end months are valid*/

    FF09W01.FF09WSIX = 1; /* reset season index*/
    FF09W01.FF09WCY2 = FF09W08.FF09WBGM; /* begin date to work*/
    if (FF09M008.FF09MSMM[1] > 0)
      FF09W01.FF09WCMO[1] = FF09W08.FF09WBGM;
    end
    if (FF09M008.FF09MSMM[2] > 0)
      FF09W01.FF09WCMO[2] = FF09W08.FF09WBGM;
    end
    if (FF09M008.FF09MSMM[3] > 0)
      FF09W01.FF09WCMO[3] = FF09W08.FF09WBGM;
    end
    if (FF09M008.FF09MSMM[4] > 0)
      FF09W01.FF09WCMO[4] = FF09W08.FF09WBGM;
    end

    while (FF09W01.FF09WSIX <= FF09W08.FF2NSEAS)
      FF09W01.FF09WCMM[FF09WSIX] = FF09M008.FF09MSMM[FF09WSIX]; /* move month*/
      if (FF09W01.FF09WMM2 > FF09W01.FF09WCMM[FF09WSIX]) /* bgn mo > end*/
        FF09W01.FF09WCMO[FF09WSIX] = FF09W01.FF09WCMO[FF09WSIX] + 100; /* increment year*/
      end
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* bump index*/
    end

    FF09W01.FF09WSIX = 1;
    FF09W01.FF09WNIX = 2;

    while (FF09W01.FF09WNIX <= FF09W08.FF2NSEAS)
      if (FF09W01.FF09WCMO[FF09WSIX] /* sesn > next sesn*/
       >= FF09W01.FF09WCMO[FF09WNIX])
        FFWREC.XXXMODID = "S50"; /* Module identification*/
        set FF09M008.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* season must > following season*/
        return; /* return to previous routine*/
      end
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* increment sesn index*/
      FF09W01.FF09WNIX = FF09W01.FF09WNIX + 1; /* increment next sesn index*/
    end

    /* Make sure contp month is in first end month range*/

  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

  /* Calculate & save number of months in each season*/

  FF09W01.FF09WSIX = 1; /* season index*/
  FF09W01.FF09WMSC = 0; /* mos in sesn counter*/
  FF09W01.FF09WCY2 = FF09W08.FF09WBGM; /* begin month*/

  while (FF09W01.FF09WSIX <= FF09W08.FF2NSEAS
   && FF09W01.FF09WCMO[FF09WSIX] != 0)
    while (FF09W01.FF09WCY2 <= FF09W01.FF09WCMO[FF09WSIX])
      FF09W01.FF09WMSC = FF09W01.FF09WMSC + 1;
      FF09W01.FF09WMM2 = FF09W01.FF09WMM2 + 1;
      if (FF09W01.FF09WMM2 > 12)
        FF09W01.FF09WMM2 = 01;
        FF09W01.FF09WCY2 = FF09W01.FF09WCY2 + 100;
      end
    end
    FF09W08.FF09WMIS[FF09WSIX] = FF09W01.FF09WMSC;
    FF09W01.FF09WMSC = 0;
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* Season index*/
  end


end // end FF09S50

// Verify season end months
Function FF09S51()
   /* ------------------------------------------------------------*/
   /* Validate season end months*/
   /* ------------------------------------------------------------*/

   /* Determine number of seasons entered by looking backwards*/
   /* until data found.*/

  FF09W01.FF09WMSC = 0; /* zero out season counter*/
  FF09W01.FF09WSIX = 4; /* index*/
  while (FF09W01.FF09WSIX > 0)
    if (FF09M004.FF09MSMM[FF09WSIX] > 0)
      FF09W01.FF09WMSC = FF09W01.FF09WSIX; /* number of seasons*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 4; /* force out of loop*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 1;
    end
  end

   /* Look for season end months greater than 12*/

  FF09W01.FF09WSIX = 1; /* Set index to 1*/
  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC)
    if (FF09M004.FF09MSMM[FF09WSIX] > 12)
      FFWREC.XXXMODID = "S51"; /* Module identification*/
      set FF09M004.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Check for embedded zeros*/

  FF09W01.FF09WSIX = 1; /* index*/
  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC) /* for number of seasons*/
    if (FF09M004.FF09MSMM[FF09WSIX] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "S51"; /* Module identification*/
      set FF09M004.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* embedded zero msg*/
      return; /* return to previous routine*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

   /* Verify that last season = the end month*/

  FF09W01.FF09WSIX = FF09W01.FF09WMSC; /* last season number*/
  FF09W01.FF09WCY1 = FF09W04.FF09WXMO; /* end date to work area*/

  if (FF09M004.FF09MSMM[FF09WSIX] != FF09W04.FF09WXMM)
    FFWREC.XXXMODID = "S51"; /* Module identification*/
    set FF09M004.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(447); /* last season must complete year*/
    return; /* return to previous routine*/
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Verify that season end months are valid*/

  FF09W01.FF09WSIX = 1; /* reset season index*/

  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC)
    FF09W04.FF09WEMM[FF09WSIX] = FF09M004.FF09MSMM[FF09WSIX]; /* move month*/
    FF09W04.FF09WEYY[FF09WSIX] = FF09W04.FF09WBYY; /* move year from begin month*/
    FF09W04.FF09WECC[FF09WSIX] = FF09W04.FF09WBCC; /* move century from begin month*/
    if (FF09W04.FF09WBMM > FF09W04.FF09WEMM[FF09WSIX]) /* bgn mo > end*/
      if (FF09W04.FF09WEYY[FF09WSIX] == 99) /* increment century*/
        FF09W04.FF09WEYY[FF09WSIX] = 00;
        FF09W04.FF09WECC[FF09WSIX] = FF09W04.FF09WECC[FF09WSIX] + 1;
      else
        FF09W04.FF09WEYY[FF09WSIX] = FF09W04.FF09WEYY[FF09WSIX] + 1; /* increment year*/
      end
    end
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* bump index*/
  end

  FF09W01.FF09WSIX = 1;
  FF09W01.FF09WNIX = 2;

  while (FF09W01.FF09WNIX <= FF09W01.FF09WMSC)
    if (FF09W04.FF09WEMO[FF09WSIX] /* sesn > next sesn*/
     >= FF09W04.FF09WEMO[FF09WNIX])
      FFWREC.XXXMODID = "S51"; /* Module identification*/
      set FF09M004.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(444); /* season must > following season*/
      return; /* return to previous routine*/
    end
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* increment sesn index*/
    FF09W01.FF09WNIX = FF09W01.FF09WNIX + 1; /* increment next sesn index*/
  end

end // end FF09S51

// Verify season end months
Function FF09S52()
   /* ------------------------------------------------------------*/
   /* Validate season end months*/
   /* ------------------------------------------------------------*/

   /* Determine number of seasons entered by looking backwards*/
   /* until data found.*/

  FF09W01.FF09WMSC = 0; /* zero out season counter*/
  FF09W01.FF09WSIX = 4; /* index*/
  while (FF09W01.FF09WSIX > 0)
    if (FF09M005.FF09MSMM[FF09WSIX] > 0)
      FF09W01.FF09WMSC = FF09W01.FF09WSIX; /* number of seasons*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 4; /* force out of loop*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 1;
    end
  end

   /* Look for season end months greater than 12*/

  FF09W01.FF09WSIX = 1; /* Set index to 1*/
  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC)
    if (FF09M005.FF09MSMM[FF09WSIX] > 12)
      FFWREC.XXXMODID = "S52"; /* Module identification*/
      set FF09M005.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Check for embedded zeros*/

  FF09W01.FF09WSIX = 1; /* index*/
  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC) /* for number of seasons*/
    if (FF09M005.FF09MSMM[FF09WSIX] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "S52"; /* Module identification*/
      set FF09M005.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* embedded zero msg*/
      return; /* return to previous routine*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

   /* Verify that last season = the end month*/

  FF09W01.FF09WSIX = FF09W01.FF09WMSC; /* last season number*/
  FF09W01.FF09WCY1 = FF09W05.FF09WXMO; /* end date to work area*/

  if (FF09M005.FF09MSMM[FF09WSIX] != FF09W05.FF09WXMM)
    FFWREC.XXXMODID = "S52"; /* Module identification*/
    set FF09M005.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(447); /* last season must complete year*/
    return; /* return to previous routine*/
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Verify that season end months are valid*/

  FF09W01.FF09WSIX = 1; /* reset season index*/

  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC) /* LE number of seasons*/
    FF09W05.FF09WEMM[FF09WSIX] = FF09M005.FF09MSMM[FF09WSIX]; /* move month*/
    FF09W05.FF09WEYY[FF09WSIX] = FF09W05.FF09WBYY; /* move year from begin month*/
    FF09W05.FF09WECC[FF09WSIX] = FF09W05.FF09WBCC; /* move century from begin month*/
    if (FF09W05.FF09WBMM > FF09W05.FF09WEMM[FF09WSIX]) /* bgn mo > end*/
      if (FF09W05.FF09WEYY[FF09WSIX] == 99) /* increment century*/
        FF09W05.FF09WEYY[FF09WSIX] = 00;
        FF09W05.FF09WECC[FF09WSIX] = FF09W05.FF09WECC[FF09WSIX] + 1;
      else
        FF09W05.FF09WEYY[FF09WSIX] = FF09W05.FF09WEYY[FF09WSIX] + 1; /* increment year*/
      end
    end
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* bump index*/
  end

  FF09W01.FF09WSIX = 1;
  FF09W01.FF09WNIX = 2;

  while (FF09W01.FF09WNIX <= FF09W01.FF09WMSC) /* LE number of seasons*/
    if (FF09W05.FF09WEMO[FF09WSIX] /* sesn > next sesn*/
     >= FF09W05.FF09WEMO[FF09WNIX])
      FFWREC.XXXMODID = "S52"; /* Module identification*/
      set FF09M005.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(444); /* season must > following season*/
      return; /* return to previous routine*/
    end
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* increment sesn index*/
    FF09W01.FF09WNIX = FF09W01.FF09WNIX + 1; /* increment next sesn index*/
  end

end // end FF09S52

// Verify season end months
Function FF09S53()
   /* ------------------------------------------------------------*/
   /* Validate season end months*/
   /* ------------------------------------------------------------*/

   /* Determine number of seasons entered by looking backwards*/
   /* until data found.*/

  FF09W01.FF09WMSC = 0; /* zero out season counter*/
  FF09W01.FF09WSIX = 4; /* index*/
  while (FF09W01.FF09WSIX > 0)
    if (FF09M009.FF09MSMM[FF09WSIX] > 0)
      FF09W01.FF09WMSC = FF09W01.FF09WSIX; /* number of seasons*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 4; /* force out of loop*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 1;
    end
  end

   /* Look for season end months greater than 12*/

  FF09W01.FF09WSIX = 1; /* Set index to 1*/
  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC)
    if (FF09M009.FF09MSMM[FF09WSIX] > 12)
      FFWREC.XXXMODID = "S53"; /* Module identification*/
      set FF09M009.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Check for embedded zeros*/

  FF09W01.FF09WSIX = 1; /* index*/
  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC) /* for number of seasons*/
    if (FF09M009.FF09MSMM[FF09WSIX] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "S53"; /* Module identification*/
      set FF09M009.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* embedded zero msg*/
      return; /* return to previous routine*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

   /* Verify that last season = the end month*/

  FF09W01.FF09WSIX = FF09W01.FF09WMSC; /* last season number*/
  FF09W01.FF09WCY1 = FF09W09.FF09WXMO; /* end date to work area*/

  if (FF09M009.FF09MSMM[FF09WSIX] != FF09W09.FF09WXMM)
    FFWREC.XXXMODID = "S53"; /* Module identification*/
    set FF09M009.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(447); /* last season must complete year*/
    return; /* return to previous routine*/
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Verify that season end months are valid*/

  FF09W01.FF09WSIX = 1; /* reset season index*/

  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC) /* LE number of seasons*/
    FF09W09.FF09WEMM[FF09WSIX] = FF09M009.FF09MSMM[FF09WSIX]; /* move month*/
    FF09W09.FF09WEYY[FF09WSIX] = FF09W09.FF09WBYY; /* move year from begin month*/
    FF09W09.FF09WECC[FF09WSIX] = FF09W09.FF09WBCC; /* move century from begin month*/
    if (FF09W09.FF09WBMM > FF09W09.FF09WEMM[FF09WSIX]) /* bgn mo > end*/
      if (FF09W09.FF09WEYY[FF09WSIX] == 99) /* increment century*/
        FF09W09.FF09WEYY[FF09WSIX] = 00;
        FF09W09.FF09WECC[FF09WSIX] = FF09W09.FF09WECC[FF09WSIX] + 1;
      else
        FF09W09.FF09WEYY[FF09WSIX] = FF09W09.FF09WEYY[FF09WSIX] + 1; /* increment year*/
      end
    end
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* bump index*/
  end

  FF09W01.FF09WSIX = 1;
  FF09W01.FF09WNIX = 2;

  while (FF09W01.FF09WNIX <= FF09W01.FF09WMSC) /* LE number of seasons*/
    if (FF09W09.FF09WEMO[FF09WSIX] /* sesn > next sesn*/
     >= FF09W09.FF09WEMO[FF09WNIX])
      FFWREC.XXXMODID = "S53"; /* Module identification*/
      set FF09M009.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(444); /* season must > following season*/
      return; /* return to previous routine*/
    end
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* increment sesn index*/
    FF09W01.FF09WNIX = FF09W01.FF09WNIX + 1; /* increment next sesn index*/
  end

end // end FF09S53

// Verify season end months
Function FF09S54()
   /* ------------------------------------------------------------*/
   /* Validate season end months*/
   /* ------------------------------------------------------------*/

   /* Determine number of seasons entered by looking backwards*/
   /* until data found.*/

  FF09W01.FF09WMSC = 0; /* zero out season counter*/
  FF09W01.FF09WSIX = 4; /* index*/
  while (FF09W01.FF09WSIX > 0)
    if (FF09M010.FF09MSMM[FF09WSIX] > 0)
      FF09W01.FF09WMSC = FF09W01.FF09WSIX; /* number of seasons*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 4; /* force out of loop*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX - 1;
    end
  end

   /* Look for season end months greater than 12*/

  FF09W01.FF09WSIX = 1; /* Set index to 1*/
  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC)
    if (FF09M010.FF09MSMM[FF09WSIX] > 12)
      FFWREC.XXXMODID = "S54"; /* Module identification*/
      set FF09M010.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Check for embedded zeros*/

  FF09W01.FF09WSIX = 1; /* index*/
  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC) /* for number of seasons*/
    if (FF09M010.FF09MSMM[FF09WSIX] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "S54"; /* Module identification*/
      set FF09M010.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* embedded zero msg*/
      return; /* return to previous routine*/
    else
      FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1;
    end
  end

   /* Verify that last season = the end month*/

  FF09W01.FF09WSIX = FF09W01.FF09WMSC; /* last season number*/
  FF09W01.FF09WCY1 = FF09W10.FF09WXMO; /* end date to work area*/

  if (FF09M010.FF09MSMM[FF09WSIX] != FF09W10.FF09WXMM)
    FFWREC.XXXMODID = "S54"; /* Module identification*/
    set FF09M010.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(447); /* last season must complete year*/
    return; /* return to previous routine*/
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Verify that season end months are valid*/

  FF09W01.FF09WSIX = 1; /* reset season index*/

  while (FF09W01.FF09WSIX <= FF09W01.FF09WMSC) /* LE number of seasons*/
    FF09W10.FF09WEMM[FF09WSIX] = FF09M010.FF09MSMM[FF09WSIX]; /* move month*/
    FF09W10.FF09WEYY[FF09WSIX] = FF09W10.FF09WBYY; /* move year from begin month*/
    FF09W10.FF09WECC[FF09WSIX] = FF09W10.FF09WBCC; /* move century from begin month*/
    if (FF09W10.FF09WBMM > FF09W10.FF09WEMM[FF09WSIX]) /* bgn mo > end*/
      if (FF09W10.FF09WEYY[FF09WSIX] == 99) /* increment century*/
        FF09W10.FF09WEYY[FF09WSIX] = 00;
        FF09W10.FF09WECC[FF09WSIX] = FF09W10.FF09WECC[FF09WSIX] + 1;
      else
        FF09W10.FF09WEYY[FF09WSIX] = FF09W10.FF09WEYY[FF09WSIX] + 1; /* increment year*/
      end
    end
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* bump index*/
  end

  FF09W01.FF09WSIX = 1;
  FF09W01.FF09WNIX = 2;

  while (FF09W01.FF09WNIX <= FF09W01.FF09WMSC) /* LE number of seasons*/
    if (FF09W10.FF09WEMO[FF09WSIX] /* sesn > next sesn*/
     >= FF09W10.FF09WEMO[FF09WNIX])
      FFWREC.XXXMODID = "S54"; /* Module identification*/
      set FF09M010.FF09MSMM[FF09WSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(444); /* season must > following season*/
      return; /* return to previous routine*/
    end
    FF09W01.FF09WSIX = FF09W01.FF09WSIX + 1; /* increment sesn index*/
    FF09W01.FF09WNIX = FF09W01.FF09WNIX + 1; /* increment next sesn index*/
  end

end // end FF09S54

// Obtain FFXRF seasons
Function FF09S55()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YPGCD = FF09M008.YPGCD; /* Type group code*/
  FF2REC.XPCCD = FF09M008.XPCCD; /* Category code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FFWREC.XXXMODID = "S55"; /* Module identification*/
      set FF09M008.YPGCD cursor, bold; /* Highlight*/
      set FF09M008.XPCCD bold; /* Highlight*/
      FFWREC.XXXMSGNO = 187; /* No category found*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S55"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF09S55

Function FF09S56()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.XPCCD > " ") /* Category was entered*/
    if (FF09M012.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF09M012.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M012.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S56"; /* Module identification*/
      set FF09M012.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M012.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered & changed verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.YPGCD > " ") /* Type group was entered*/
    if (FF09M012.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF09M012.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF09M012.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S56"; /* Module identification*/
      set FF09M012.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF09M012.YPGABRV = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.XPLCD == "*") /* Wildcard line code*/
    FF09M012.XPLABRV = "ALL";
  else
    if (FF09M012.XPLCD > " ") /* Line was entered*/
      if (FF09M012.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF09M012.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF09M012.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S56"; /* Module identification*/
        set FF09M012.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF09M012.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  if (FF09M012.FF09MBMO != 0
   && FF09M012.FF09MBMO != 0)
    if (FF09M012.FF09MBMO > FF09M012.FF09MXMO
     && FF09M012.FF09MXMO > 9000)
      FFWREC.XXXMODID = "S56"; /* Module identification*/
      set FF09M012.FF09MBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(250); /* Begin cannot be gt end*/
    else
      set FFZREC empty;
      FFZREC.FFZBYYMM = FF09M012.FF09MBMO;
      FFZREC.FFZEYYMM = FF09M012.FF09MXMO;
      FFZREC.FFZCHK12 = "Y";
      FFZREC.FFZSRANG = "Y";
      TA1REC.TA1PGMNM = "FF09";

      XSFFS30();

      if (FFZREC.FFZBEGRC == 0) /* No begin month error*/
         /* next sentence*/
      else
        if (FFZREC.FFZBEGRC == 3) /* Out of range*/
          FFWREC.XXXMODID = "S56"; /* Module identification*/
          set FF09M012.FF09MBMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(151); /* Out of range*/
        else
          FFWREC.XXXMODID = "S56"; /* Module identification*/
          set FF09M012.FF09MBMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Invalid value*/
        end
      end

      if (FFZREC.FFZENDRC != 0) /* End month error*/
        if (FFZREC.FFZENDRC == 3) /* Out of range*/
          FFWREC.XXXMODID = "S56"; /* Module identification*/
          set FF09M012.FF09MXMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(151); /* Out of range*/
        else
          FFWREC.XXXMODID = "S56"; /* Module identification*/
          set FF09M012.FF09MXMO cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Invalid value*/
        end
      end
    end
  end


end // end FF09S56

// Verify year
Function FF09S57()

   /* ------------------------------------------------------------*/
   /* Convert format of beginning month from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "E"; /* type*/
  TA2REC.TA2GRGDD = 01; /* dd to be validated*/

  FF09W01.FF09WHMM = 06; /* month*/
  FF09W01.FF09WHYY = FF09M009.FF09MBYY; /* year*/
  FF09W01.FF09WHCC = 0; /* century*/
  TA2REC.TA2GRGYM = FF09W01.FF09WHDT; /* Beginning yymm to be validatd*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* Normal return code*/
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

      FF09W01.FF09WHDT = TA2REC.TA2GRCYM; /* Convert beginning month*/

    else

      FFWREC.XXXMODID = "S57"; /* Module identification*/
      converseLib.validationFailed(10); /* System error occurred*/
      set FF09M009.FF09MBYY cursor, bold; /* highlight*/

    end

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "EDIT THE BEGINNING YEAR";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FFWREC.XXXMODID = "S57"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    exit stack; /* exit to display map*/

  end

end // end FF09S57

// Verify year
Function FF09S58()

   /* ------------------------------------------------------------*/
   /* Convert format of beginning month from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "E"; /* type*/
  TA2REC.TA2GRGDD = 01; /* dd to be validated*/

  FF09W01.FF09WHMM = 06; /* month*/
  FF09W01.FF09WHYY = FF09M010.FF09MBYY; /* year*/
  FF09W01.FF09WHCC = 0; /* century*/
  TA2REC.TA2GRGYM = FF09W01.FF09WHDT; /* Beginning yymm to be validatd*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* Normal return code*/
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

      FF09W01.FF09WHDT = TA2REC.TA2GRCYM; /* Convert beginning month*/

    else

      FFWREC.XXXMODID = "S58"; /* Module identification*/
      converseLib.validationFailed(10); /* System error occurred*/
      set FF09M010.FF09MBYY cursor, bold; /* highlight*/

    end

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "EDIT THE BEGINNING YEAR";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FFWREC.XXXMODID = "S58"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    exit stack; /* exit to display map*/

  end

end // end FF09S58

// Get the current fiscal year
Function FF09S59()
  XX0XS01(); /* get current date*/

  FF09W01.FF09WHDT = XX0XW01.XX0XWCYM;

  if (XX0XW01.XX0XWMM < 06)
    if (FF09W01.FF09WHYY == 0)
      FF09W01.FF09WHYY = 99;
      FF09W01.FF09WHCC = FF09W01.FF09WHCC - 1;
    else
      FF09W01.FF09WHYY = FF09W01.FF09WHYY - 1;
    end
  end
  FF09W01.FF09WHMM = 06;
  FF09W09.FF09WBMO = FF09W01.FF09WHDT; /* Beginning month*/

  FF09W01.FF09WHDT = XX0XW01.XX0XWCYM;

  if (XX0XW01.XX0XWMM < 06)

  else
    if (XX0XW01.XX0XWYY == 99)
      FF09W01.FF09WHYY = 0;
      FF09W01.FF09WHCC = FF09W01.FF09WHCC + 1;
    else
      FF09W01.FF09WHYY = FF09W01.FF09WHYY + 1;
    end
  end
  FF09W01.FF09WHMM = 05;

  FF09W09.FF09WXMO = FF09W01.FF09WHDT; /* Ending month*/
end // end FF09S59

// Obtain SWHDR rows
Function FF09S60()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.YPGCD = FF09M011.YPGCD; /* Type group code*/
  FFQREC.XPCCD = FF09M011.XPCCD; /* Category code*/
  FFQREC.XWSCD = "05"; /* Worksheet type code*/
  FFQREC.FFABEGMO = -1;
  FFQREC.SY2SSCIN = "*";
  FFQREC.FFQMBYMO = -1;
  FFQREC.ZZZCHGDT = -1;
  FFQREC.ZZZCHGTM = -1;

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("S1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S60"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF09S60

// Get current fiscal year
Function FF09S61()
  XX0XS01(); /* get current date*/

  FF09W01.FF09WHDT = XX0XW01.XX0XWCYM;

  if (XX0XW01.XX0XWMM < 06)
    if (FF09W01.FF09WHYY == 0)
      FF09W01.FF09WHYY = 99;
      FF09W01.FF09WHCC = FF09W01.FF09WHCC - 1;
    else
      FF09W01.FF09WHYY = FF09W01.FF09WHYY - 1;
    end
  end
  FF09W01.FF09WHMM = 06;
  FF09W10.FF09WBMO = FF09W01.FF09WHDT; /* Beginning month*/

  FF09W01.FF09WHDT = XX0XW01.XX0XWCYM;

  if (XX0XW01.XX0XWMM < 06)

  else
    if (XX0XW01.XX0XWYY == 99)
      FF09W01.FF09WHYY = 0;
      FF09W01.FF09WHCC = FF09W01.FF09WHCC + 1;
    else
      FF09W01.FF09WHYY = FF09W01.FF09WHYY + 1;
    end
  end
  FF09W01.FF09WHMM = 05;

  FF09W10.FF09WXMO = FF09W01.FF09WHDT; /* Ending month*/
end // end FF09S61

// Fetch SWHDR row
Function FF09S62()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("N1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      FF09W01.FF09WQCS = "Y";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S62"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF09S62

// Close SWHDR cursor
Function FF09S64()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("C1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S64"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFQREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF09S64

// Clear selections and exit
Function FF09S99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  FF09W01.FF09WIXM = 1; /* Initialize map index*/

  while (FF09W01.FF09WIXM <= FF09W01.FF09WIXL) /* Until end of array*/

    if (FF09W01.FF09MSEL[FF09WIXM] == "S") /* Entry is selected*/
      FF09W01.FF09MSEL[FF09WIXM] = " "; /* Reset entry*/
    end

    FF09W01.FF09WIXM = FF09W01.FF09WIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end FF09S99

//*** RECORD=FF09W00 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record FF09W00 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(4) ; 
    10 FF09W-JOB-ID-FOUR-CHAR FF09W-JOB-ID-FOUR-CHAR ; 
      15 FF09W-RPT-DIST-FORM FF09W-RPT-DIST-FORM ; 
      15 * char(1) ; 
      15 FF09W-JOB-ID-ONE-CHAR FF09W-JOB-ID-ONE-CHAR ; 
    10 * char(1) ; 
    10 FF09W-RPT-DIST-PROGRAM FF09W-RPT-DIST-PROGRAM ; 
    10 * char(2) ; 
    10 FF09W-RUN-PROGRAM-ID FF09W-RUN-PROGRAM-ID ; 
    10 FF09W-EXEC-PROC-ID FF09W-EXEC-PROC-ID ; 
    10 FF09W-DATASET-DISP FF09W-DATASET-DISP ; 
    10 * char(2) ; 
    10 FF09W-PRINT-DATASET-ID FF09W-PRINT-DATASET-ID ; 
    10 * char(49) ; 
  5 TARTYPE TARTYPE ; 
end // end FF09W00

//*** RECORD=FF09W01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF09W01 type basicRecord
  10 FF09W-JOB-ID-FOUR-CHAR FF09W-JOB-ID-FOUR-CHAR ; 
  10 FF09W-RPT-DIST-FORM FF09W-RPT-DIST-FORM ; 
  10 FF09W-JOB-ID-ONE-CHAR FF09W-JOB-ID-ONE-CHAR ; 
  10 FF09W-DATASET-DISP FF09W-DATASET-DISP ; 
  10 FF09MSEL FF09MSEL [98] ; 
  10 FF09WIXL FF09WIXL ; 
  10 FF09WIXM FF09WIXM ; 
  10 FF09WIXT FF09WIXT ; 
  10 FF09WSIX FF09WSIX ; 
  10 FF09WNIX FF09WNIX ; 
  10 FF09WSWX FF09WSWX ; 
  10 FF09WMSC FF09WMSC ; 
  10 FF09WQCS FF09WQCS ; 
  10 FF09WVDT FF09WVDT ; 
    15 FF09WVYM FF09WVYM ; 
    15 FF09WVDD FF09WVDD ; 
  10 FF09WSDT FF09WSDT [4] ; 
    15 FF09WSYY FF09WSYY ; 
    15 FF09WSMM FF09WSMM ; 
  10 FF09WSLN FF09WSLN ; 
  10 FF09WNSS FF09WNSS ; 
  10 * num(1) ; 
  10 FF09WCUR-DT FF09WCUR-DT ; 
    15 FF09WCUR-YYMM FF09WCUR-YYMM ; 
      20 FF09WCUR-YY FF09WCUR-YY ; 
      20 FF09WCUR-MM FF09WCUR-MM ; 
    15 FF09WCUR-DD FF09WCUR-DD ; 
  10 FF09WDT1 FF09WDT1 ; 
    15 * num(1) ; 
    15 FF09WCY1 FF09WCY1 ; 
      20 FF09WCC1 FF09WCC1 ; 
      20 FF09WYM1 FF09WYM1 ; 
        25 FF09WYY1 FF09WYY1 ; 
        25 FF09WMM1 FF09WMM1 ; 
    15 FF09WDD1 FF09WDD1 ; 
  10 FF09WDT2 FF09WDT2 ; 
    15 FF09WCT2 num(1) ; 
    15 FF09WCY2 FF09WCY2 ; 
      20 FF09WCC2 FF09WCC2 ; 
      20 FF09WYM2 FF09WYM2 ; 
        25 FF09WYY2 FF09WYY2 ; 
        25 FF09WMM2 FF09WMM2 ; 
    15 FF09WDD2 FF09WDD2 ; 
  10 FF09WHDT FF09WHDT ; 
    15 FF09WHCC FF09WHCC ; 
    15 FF09WHYM FF09WHYM ; 
      20 FF09WHYY FF09WHYY ; 
      20 FF09WHMM FF09WHMM ; 
  10 FF09WCMO FF09WCMO [4] ; 
    15 FF09WCCY FF09WCCY ; 
    15 FF09WCMM FF09WCMM ; 
  10 FF09WXMO FF09WXMO ; 
end // end FF09W01

//*** RECORD=FF09W03 ****
// ------------------------------------------------------------
// Parameters for FF2201 - Seasonal Fcst Summary by Style/Color
// ------------------------------------------------------------
// 1/7/97 vbalak included need-month-sel
// ***********************
Record FF09W03 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF09WBMO FF09WBMO ; 
    10 * char(1) ; 
    10 FF09WXMO FF09WXMO ; 
    10 * char(1) ; 
    10 XPRCD XPRCD [4] ; 
    10 * char(1) ; 
    10 FF09W-COMB-TYP-CDS FF09W-COMB-TYP-CDS ; 
    10 FF09W-NEED-SHIP-SEL FF09W-NEED-SHIP-SEL ; 
    10 * char(46) ; 
end // end FF09W03

//*** RECORD=FF09W04 ****
// ------------------------------------------------------------
// Parameters for ff2211 - Seasonal Comparison by Category Rpt.
// ------------------------------------------------------------
// ***********************
Record FF09W04 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 FF09WBMO FF09WBMO ; 
      15 FF09WBCC FF09WBCC ; 
      15 FF09WBYY FF09WBYY ; 
      15 FF09WBMM FF09WBMM ; 
    10 * char(1) ; 
    10 FF09WXMO FF09WXMO ; 
      15 FF09WXCC FF09WXCC ; 
      15 FF09WXYY FF09WXYY ; 
      15 FF09WXMM FF09WXMM ; 
    10 FF09WEMO FF09WEMO [4] ; 
      15 FF09WECC FF09WECC ; 
      15 FF09WEYY FF09WEYY ; 
      15 FF09WEMM FF09WEMM ; 
    10 FF09WRPT FF09WRPT ; 
    10 * char(38) ; 
end // end FF09W04

//*** RECORD=FF09W05 ****
// ------------------------------------------------------------
// Parameters for ff2221 - Seasonal Comparison by Line report.
// ------------------------------------------------------------
// ***********************
Record FF09W05 type basicRecord
  5 TARJCL TARJCL ; 
    10 FF09WBMO FF09WBMO ; 
      15 FF09WBCC FF09WBCC ; 
      15 FF09WBYY FF09WBYY ; 
      15 FF09WBMM FF09WBMM ; 
    10 * char(1) ; 
    10 FF09WXMO FF09WXMO ; 
      15 FF09WXCC FF09WXCC ; 
      15 FF09WXYY FF09WXYY ; 
      15 FF09WXMM FF09WXMM ; 
    10 FF09WEMO FF09WEMO [4] ; 
      15 FF09WECC FF09WECC ; 
      15 FF09WEYY FF09WEYY ; 
      15 FF09WEMM FF09WEMM ; 
    10 FF09WRPT FF09WRPT ; 
    10 * char(41) ; 
end // end FF09W05

//*** RECORD=FF09W06 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1901 - Print Short Range Summary/Global Worksheets.
// ------------------------------------------------------------
// ***********************
Record FF09W06 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 YPGCD YPGCD ; 
    10 FF09WEYM FF09WEYM [4] ; 
    10 * char(58) ; 
end // end FF09W06

//*** RECORD=FF09W07 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF225D - Print Category B-Grade Report.
// ------------------------------------------------------------
// ***********************
Record FF09W07 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 YPGCD YPGCD ; 
    10 FF09WEYM FF09WEYM [4] ; 
    10 * char(58) ; 
end // end FF09W07

//*** RECORD=FF09W08 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1901 - Print Short Range Summary/Global Worksheets.
// ------------------------------------------------------------
// ***********************
Record FF09W08 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SYBSTGNM SYBSTGNM ; 
    10 XWSCD XWSCD ; 
    10 FF09WCDT FF09WCDT ; 
    10 FF09WCTM FF09WCTM ; 
    10 FF09WBYM FF09WBYM ; 
    10 FF09WBGM FF09WBGM ; 
    10 FF09WGNB FF09WGNB ; 
    10 FF2NSEAS FF2NSEAS ; 
    10 FF09WMIS FF09WMIS [4] ; 
    10 FF09WSEL FF09WSEL ; 
    10 FF09MTYP FF09MTYP ; 
    10 * char(9) ; 
end // end FF09W08

//*** RECORD=FF09W09 ****
// ------------------------------------------------------------
// Parameters for FF2231 - Four year indices report.
// ------------------------------------------------------------
// ***********************
Record FF09W09 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 FF09WBMO FF09WBMO ; 
      15 FF09WBCC FF09WBCC ; 
      15 FF09WBYY FF09WBYY ; 
      15 FF09WBMM FF09WBMM ; 
    10 FF09WXMO FF09WXMO ; 
      15 FF09WXCC FF09WXCC ; 
      15 FF09WXYY FF09WXYY ; 
      15 FF09WXMM FF09WXMM ; 
    10 FF09WEMO FF09WEMO [4] ; 
      15 FF09WECC FF09WECC ; 
      15 FF09WEYY FF09WEYY ; 
      15 FF09WEMM FF09WEMM ; 
    10 FF09WNYR FF09WNYR ; 
    10 FF09WYSL FF09WYSL ; 
    10 * char(34) ; 
end // end FF09W09

//*** RECORD=FF09W10 ****
// ------------------------------------------------------------
// Parameters for FF2261 - FOUR YEAR INDICES BY LINE REPORT.
// ------------------------------------------------------------
// ***********************
Record FF09W10 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 FF09WBMO FF09WBMO ; 
      15 FF09WBCC FF09WBCC ; 
      15 FF09WBYY FF09WBYY ; 
      15 FF09WBMM FF09WBMM ; 
    10 FF09WXMO FF09WXMO ; 
      15 FF09WXCC FF09WXCC ; 
      15 FF09WXYY FF09WXYY ; 
      15 FF09WXMM FF09WXMM ; 
    10 FF09WEMO FF09WEMO [4] ; 
      15 FF09WECC FF09WECC ; 
      15 FF09WEYY FF09WEYY ; 
      15 FF09WEMM FF09WEMM ; 
    10 FF09WNYR FF09WNYR ; 
    10 FF09WYSL FF09WYSL ; 
    10 * char(37) ; 
end // end FF09W10

//*** RECORD=FF09W11 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1911 - Print Target Worksheet.
// ------------------------------------------------------------
// ***********************
Record FF09W11 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 XPCCD XPCCD ; 
    10 FF09WBGM FF09WBGM ; 
    10 FF2NSEAS FF2NSEAS ; 
    10 FF09WMIS FF09WMIS [4] ; 
    10 FF09WSEL FF09WSEL ; 
    10 FF09WTYP FF09WTYP ; 
    10 * char(56) ; 
end // end FF09W11

//*** RECORD=FF09W12 ****
// ------------------------------------------------------------
// Parameters for ff2271 - Seasonal Fcst for a range report.
// ------------------------------------------------------------
// ***********************
Record FF09W12 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF09WBMO FF09WBMO ; 
    10 * char(1) ; 
    10 FF09WXMO FF09WXMO ; 
    10 * char(58) ; 
end // end FF09W12

//*** RECORD=FF09W13 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF6901 - Buy balance report by category.
// ------------------------------------------------------------
// ***********************
Record FF09W13 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 FF09WABM FF09WABM ; 
    10 * char(70) ; 
end // end FF09W13

//*** RECORD=FF09W14 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF6911 - Buy exception report by product.
// ------------------------------------------------------------
// ***********************
Record FF09W14 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 XPCCD XPCCD ; 
    10 FF09WABM FF09WABM ; 
    10 * char(68) ; 
end // end FF09W14

//*** RECORD=FF09W15 ****
// ------------------------------------------------------------
// Parameters for FF2281 - Seasonal Fcst Summary by Style/Group
// ------------------------------------------------------------
// 01/02/98    vbalak    introduced ff09w-need-ship-sel
// ***********************
Record FF09W15 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF09WBMO FF09WBMO ; 
    10 * char(1) ; 
    10 FF09WXMO FF09WXMO ; 
    10 * char(1) ; 
    10 XPRCD XPRCD [4] ; 
    10 * char(1) ; 
    10 FF09W-COMB-TYP-CDS FF09W-COMB-TYP-CDS ; 
    10 FF09W-NEED-SHIP-SEL FF09W-NEED-SHIP-SEL ; 
    10 * char(46) ; 
end // end FF09W15

// Menu selection field
DataItem FF09MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Combine types?
DataItem FF09MTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Combine type code indicator
DataItem FF09W-COMB-TYP-CDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data set disposition
DataItem FF09W-DATASET-DISP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXEC procedure identification
DataItem FF09W-EXEC-PROC-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JOB identification
DataItem FF09W-JOB-ID-FOUR-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JOB identification (col 6)
DataItem FF09W-JOB-ID-ONE-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need ship month selection
DataItem FF09W-NEED-SHIP-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report file identification
DataItem FF09W-PRINT-DATASET-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution form
DataItem FF09W-RPT-DIST-FORM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution program
DataItem FF09W-RPT-DIST-PROGRAM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RUN program identification
DataItem FF09W-RUN-PROGRAM-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPC_PROD_CAT_CD
DataItem FF09WABM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// range begin cc
DataItem FF09WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_FCST_BMO
DataItem FF09WBGM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// range begin mm
DataItem FF09WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// range begin month
DataItem FF09WBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// actual buy month
DataItem FF09WBYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// range begin yy
DataItem FF09WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FF09WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FF09WCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted ccyy
DataItem FF09WCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change date
DataItem FF09WCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted mm
DataItem FF09WCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted ccyymm
DataItem FF09WCMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change time
DataItem FF09WCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current day
DataItem FF09WCUR-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date
DataItem FF09WCUR-DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current month
DataItem FF09WCUR-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current yy
DataItem FF09WCUR-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current yy
DataItem FF09WCUR-YYMM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current work ccyymm
DataItem FF09WCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date    ccyymm
DataItem FF09WCY2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem FF09WDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem FF09WDD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FF09WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work date
DataItem FF09WDT2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// century
DataItem FF09WECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FF09WEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end months
DataItem FF09WEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end months
DataItem FF09WEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FF09WEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_GLBL_NBR
DataItem FF09WGNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// hold century
DataItem FF09WHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold date
DataItem FF09WHDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold month
DataItem FF09WHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold year and month
DataItem FF09WHYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold year
DataItem FF09WHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Limit for map fields index
DataItem FF09WIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FF09WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem FF09WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months in season
DataItem FF09WMIS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FF09WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FF09WMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Months in sesn counter
DataItem FF09WMSC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Next index
DataItem FF09WNIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of sesaons
DataItem FF09WNSS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// no. of years
DataItem FF09WNYR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of FFQREC csr switch
DataItem FF09WQCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF09WRPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work area for sesn end dates
DataItem FF09WSDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Menu selection number
DataItem FF09WSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season index
DataItem FF09WSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season length
DataItem FF09WSLN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// work area month
DataItem FF09WSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Exit requested switch
DataItem FF09WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work area year
DataItem FF09WSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Combine types?
DataItem FF09WTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// validate day
DataItem FF09WVDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate date
DataItem FF09WVDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate year/month
DataItem FF09WVYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// range end cc
DataItem FF09WXCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// range end mm
DataItem FF09WXMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// range end month
DataItem FF09WXMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// range end yy
DataItem FF09WXYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yymm
DataItem FF09WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yymm
DataItem FF09WYM2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TYPE TOTAL REPORT SELECTION
DataItem FF09WYSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year
DataItem FF09WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FF09WYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

