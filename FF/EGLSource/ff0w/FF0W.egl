package ff0w;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0W ****
// This application allows the user to view the production
// forecast model runs for a particular date range and status.
// The models can be deleted (canceled), printed, selected for
// a master, or 'de-selected' as a master.  The user indicates
// his choice with a code beside the model he wishes to affect.
// 
// The user must specify the 'RANGE' and 'STATUS'.  He may
// scroll forward and backward to view all models by pressing
// PF7 and PF8.  He may exit to any allowed application, via
// FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/10/89  RHETRI  New application.
//          07/30/90  RHETRI  Chgn date routine call to allow
//                            buy month in range
//          09/25/90  RHETRI  Add model run number to screen
// FF175    12/11/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FF0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0WW00 FF0WW00; // record
  FF0WW01 FF0WW01; // record
  FF0WW02 FF0WW02; // record
  FF0WW03 FF0WW03; // record
  FF0WW04 FF0WW04; // record
  FF0WW05 FF0WW05; // record
  FF1REC FF1REC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  FG1REC FG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XMSTBL; // table
  use FF0WM.FF0WM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0WM001 initial; /* M001 input/output*/
    set FF0WW00 empty; /* Working storage*/
    set FF0WW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0WW00.FF0WWSWF = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* If key exists, request data.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO > 0 /* Begin month exists*/
     && FFWREC.FFAENDMO > 0) /* End month exists*/

      FF0WW00.FF0WWSWR = "Y"; /* Request for data switch*/

    else

      FF0WW00.FF0WWSWR = "N"; /* Request for data switch*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0W001; /* Converse the main process*/


    FF0W001: FF0W001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0W001; /* Converse the main process*/


  end // end main
end // end FF0W

// Main process to display a map
Function FF0W001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0W100(); /* Obtain the data to display*/

  FF0W200(); /* Format and display the map*/

  FF0W300(); /* Check attention identifier*/

  FF0W400(); /* Reset fields to normal intensity*/

  FF0W500(); /* Verify the entered data*/

  FF0W600(); /* Process valid input request*/


end // end FF0W001

// Obtain the data to display
Function FF0W100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0WW00.FF0WWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FF0WW00.XXXTSLEN = 569; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FF0W110(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain models for display.*/
   /* ------------------------------------------------------------*/

  FF0W120(); /* Open PMHDR*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWSW1 = "Y"; /* First time through switch*/

  while (FF0WW00.FF0WWSWC == "N") /* Until end of cursor*/

    FF0W130(); /* Fetch PMHDR*/

    /* ------------------------------------------------------------*/
     /* Save data in display storage.*/
    /* ------------------------------------------------------------*/

    if (FF0WW00.FF0WWSW1 == "Y") /* First time through switch*/

      FF0W140(); /* Save Sugg Fcst model info*/
      FF0WW00.FF0WWSW1 = "N"; /* First time through switch*/

    else

      FF0W150(); /* Save data*/

    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (FF0WW00.FF0WWIXM > 3) /* Page is full*/
      FF0W160(); /* Add page to temporary storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FF0WW00.FF0WWIXM > 1 /* Page was formatted*/
   || FF0WW00.FF0WWSFS == "Y") /* Sug fcst switch*/
    FF0W160(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for DFCAST.VPMHDR01.*/
   /* ------------------------------------------------------------*/

  FF0W170(); /* Close PMHDR*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0WW00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FF0WW00.XXXTSPAG = 1; /* Desired page number*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWSWR = "N"; /* Request for data switch*/


end // end FF0W100

// Purge any temporary storage
Function FF0W110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF0WW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FF0WW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FF0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W110

// Open PMHDR
Function FF0W120()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FG1REC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FG1REC.FG1BEGMO = FFWREC.FFABEGMO; /* Begin month*/
  FG1REC.FG1ENDMO = FFWREC.FFAENDMO; /* End month*/
  FG1REC.XMSCD = "*"; /* Model status*/
  FG1REC.FG1MDIND = "*"; /* Model type indicator*/

   /* ------------------------------------------------------------*/
   /* Open cursor for PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("S1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize fields, and return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FF0WW00.FF0WWSWC = "N"; /* End of cursor switch*/
    FF0WW00.FF0WWSWM = "N"; /* Model selected switch*/
    FF0WW00.XMSABRV = "01"; /* Default status to 'not run'*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W120

// Fetch PMHDR
Function FF0W130()
   /* ------------------------------------------------------------*/
   /* Fetch PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("N1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, check for select, and return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FG1REC.XMSCD == "03") /* If model was 'selected'*/
        FF0WW00.FF0WWSWM = "Y"; /* Model selected switch*/
      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FF0WW00.FF0WWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W130

// Save SUGG FORECAST
Function FF0W140()
   /* ------------------------------------------------------------*/
   /* First line on page, save beginning and ending months.*/
   /* ------------------------------------------------------------*/

  FF0WW01.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning month*/
  FF0WW01.FFZEYYMM = FFWREC.FFAENDMO; /* Ending month*/

  if (FF0WW00.FF0WWSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.  If*/
   /* 'Sug Fcst' not found, indicate that a system error occured.*/
   /* ------------------------------------------------------------*/

  if (FG1REC.FG1MDIND == "S") /* If model is the Sug FCST*/

    if (FG1REC.XMSCD in XMSTBL.XMSCD)
      FF0WW01.XMSABRV = XMSTBL.XMSABRV[sysVar.arrayIndex];
    end /* save*/
    FF0WW00.FG1MODNB = FG1REC.FG1MODNB; /* save run nbr*/

  else

    FFWREC.XXXMODID = "140"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/

  end

   /* ------------------------------------------------------------*/
   /* Set model counter to one.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWIXM = 1; /* set counter to 1*/
  FF0WW00.FF0WWSFS = "Y"; /* set Sug fcst switch on*/


end // end FF0W140

// Save data in display storage
Function FF0W150()
   /* ------------------------------------------------------------*/
   /* First line on page, save beginning and ending months.*/
   /* ------------------------------------------------------------*/

  if (FF0WW00.FF0WWIXM == 1) /* If first line on page*/

    FF0WW01.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning month*/
    FF0WW01.FFZEYYMM = FFWREC.FFAENDMO; /* Ending month*/

  end

   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0WW00.FF0WWSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Convert date to MM-DD-YY.*/
   /* ------------------------------------------------------------*/

  FF0WS01(); /* Convert date*/

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  FF0WW01.ZZZSTM[FF0WWIXM] = FG1REC.ZZZSTM;

  if (FG1REC.XMSCD in XMSTBL.XMSCD)
    FF0WW01.FF0WWSTA[FF0WWIXM] = XMSTBL.XMSABRV[sysVar.arrayIndex];
  end

  FF0WW01.XXXUSRID[FF0WWIXM] = FG1REC.XXXUSRID;
  FF0WW01.FG1MODNB[FF0WWIXM] = FG1REC.FG1MODNB;
  FF0WW01.YPGCD[FF0WWIXM] = FG1REC.YPGCD;

  FF0W151(); /* Format lines*/
  FF0W152(); /* Format categories*/
  FF0W153(); /* Format line exceptions*/
  FF0W154(); /* Format safety stock codes*/

  FF0WW00.FF0WWIXM = FF0WW00.FF0WWIXM + 1; /* Increment set index*/


end // end FF0W150

// Format line codes
Function FF0W151()
   /* ------------------------------------------------------------*/
   /* Initialize line mask.*/
   /* ------------------------------------------------------------*/

  set FF0WW02 empty; /* Initialize mask*/

   /* ------------------------------------------------------------*/
   /* Format line codes in mask, then move to storage.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWCNT = 1; /* Set counter*/

  while (FF0WW00.FF0WWCNT <= 10 /* While counter LE 10*/
   && FG1REC.FG1LINCD[FF0WWCNT] > " ") /* and line code exists*/

    FF0WW02.FF0WWILN[FF0WWCNT] = FG1REC.FG1LINCD[FF0WWCNT];

    FF0WW00.FF0WWCNT = FF0WW00.FF0WWCNT + 1; /* add 1 to counter*/

  end

  FF0WW01.FF0WWLIN[FF0WWIXM] = FF0WW02.FF0WWILM;


end // end FF0W151

// Format category codes
Function FF0W152()
   /* ------------------------------------------------------------*/
   /* Initialize category mask.*/
   /* ------------------------------------------------------------*/

  set FF0WW03 empty; /* Initialize mask*/

   /* ------------------------------------------------------------*/
   /* Format line codes in mask, then move to storage.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWCNT = 1; /* Set counter*/

  while (FF0WW00.FF0WWCNT <= 30 /* While counter LE 30*/
   && FG1REC.FG1CATCD[FF0WWCNT] > " ") /* and cat code exists*/

    FF0WW00.FF0WWSUB = 1; /* Set subscript*/

    while (FF0WW00.FF0WWSUB <= 10 /* While sub LE 10*/
     && FG1REC.FG1CATCD[FF0WWCNT] > " ") /* and cat code exists*/

      FF0WW03.FF0WWCAT[FF0WWSUB] = FG1REC.FG1CATCD[FF0WWCNT];

      FF0WW00.FF0WWCNT = FF0WW00.FF0WWCNT + 1; /* add 1 to counter*/
      FF0WW00.FF0WWSUB = FF0WW00.FF0WWSUB + 1; /* add 1 to subscript*/

    end

    /* ------------------------------------------------------------*/
     /* Move mask to working storage.*/
    /* ------------------------------------------------------------*/

    if (FF0WW00.FF0WWCNT <= 11) /* If sub less or equal 11*/
      FF0WW01.FF0WWCTA[FF0WWIXM] = FF0WW03.FF0WWCAM; /* 1st row*/
    else

      if (FF0WW00.FF0WWCNT <= 21) /* If sub less or equal 21*/
        FF0WW01.FF0WWCTB[FF0WWIXM] = FF0WW03.FF0WWCAM; /* 2st row*/
      else

        FF0WW01.FF0WWCTC[FF0WWIXM] = FF0WW03.FF0WWCAM; /* 3rd row*/
      end

      set FF0WW03 empty; /* Initialize mask*/

    end

  end


end // end FF0W152

// Format excpt line codes
Function FF0W153()
   /* ------------------------------------------------------------*/
   /* Initialize line mask.*/
   /* ------------------------------------------------------------*/

  set FF0WW04 empty; /* Initialize mask*/

   /* ------------------------------------------------------------*/
   /* Format exception line codes in mask, then move to storage.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWCNT = 1; /* Set counter*/

  while (FF0WW00.FF0WWCNT <= 10 /* While counter LE 10*/
   && FG1REC.FG1EXLIN[FF0WWCNT] > " ") /* and except line exists*/

    FF0WW00.FF0WWSUB = 1; /* Set subscript*/

    while (FF0WW00.FF0WWSUB <= 5 /* While sub LE 5*/
     && FG1REC.FG1EXLIN[FF0WWCNT] > " ") /* and except line exists*/

      FF0WW04.FF0WWLEX[FF0WWSUB] = FG1REC.FG1EXLIN[FF0WWCNT];

      FF0WW00.FF0WWCNT = FF0WW00.FF0WWCNT + 1; /* add 1 to counter*/
      FF0WW00.FF0WWSUB = FF0WW00.FF0WWSUB + 1; /* add 1 to subscript*/

    end

    /* ------------------------------------------------------------*/
     /* Move mask to working storage.*/
    /* ------------------------------------------------------------*/

    if (FF0WW00.FF0WWCNT <= 6) /* If sub less or equal 6*/
      FF0WW01.FF0WWEXA[FF0WWIXM] = FF0WW04.FF0WWLEM; /* 1st row*/
    else

      FF0WW01.FF0WWEXB[FF0WWIXM] = FF0WW04.FF0WWLEM; /* 2nd row*/
    end

    set FF0WW04 empty; /* Initialize mask*/

  end


end // end FF0W153

// Format safety stock codes
Function FF0W154()
   /* ------------------------------------------------------------*/
   /* Initialize safety stock mask.*/
   /* ------------------------------------------------------------*/

  set FF0WW05 empty; /* Initialize mask*/

   /* ------------------------------------------------------------*/
   /* Format safety stock codes in mask, then move to storage.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWCNT = 1; /* Set counter*/

  while (FF0WW00.FF0WWCNT <= 4 /* While counter LE 4*/
   && FG1REC.FG1SSCLS[FF0WWCNT] > " ") /* and sfty stk exists*/

    FF0WW05.FF0WWSST[FF0WWCNT] = FG1REC.FG1SSCLS[FF0WWCNT];

    FF0WW00.FF0WWCNT = FF0WW00.FF0WWCNT + 1; /* add 1 to counter*/

  end

  FF0WW01.FF0WWSSK[FF0WWIXM] = FF0WW05.FF0WWSSM;


end // end FF0W154

// Add page to temporary storage
Function FF0W160()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FF0WW01.XXXTSLEN = FF0WW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FF0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FF0WW01 empty; /* M001 display storage*/

    FF0WW00.FF0WWIXM = 1; /* Display line index*/
    FF0WW00.FF0WWSFS = "N"; /* Set Sug fcst switch off*/

    FF0WW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W160

// Close PMHDR
Function FF0W170()
   /* ------------------------------------------------------------*/
   /* Close PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("C1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "170"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W170

// Format and converse the map
Function FF0W200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0WW00.FF0WWSWF == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0WW00.FF0WWSWF == "Y") /* Map must be formatted*/
      FF0W210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0WM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0WM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0WM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0WM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0WM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0WM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0WM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0WM001.CAITEM; /* Application data*/


end // end FF0W200

// Format the display data
Function FF0W210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0WM001 initial; /* M001 input/output area*/

  FF0WW00.FF0WWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FF0WW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FF0WW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FF0WW00.XXXTSPAG > FF0WW00.TA5TSQIX) /* Desired greater highest*/
        FF0WW00.XXXTSPAG = FF0WW00.TA5TSQIX; /* Default to highest*/
      end

      FF0W211(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FF0WM001.XXXLITPG skip; /* "PAGE" literal*/
    FF0WM001.XXXTSPAG = FF0WW00.XXXTSPAG; /* Current page*/
    set FF0WM001.XXXLITOF skip; /* "OF" literal*/
    FF0WM001.TA5TSQIX = FF0WW00.TA5TSQIX; /* Highest page*/

    set FF0WM001.FF0WMSMR cursor; /* Place cursor*/

  end

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FF0WM001.FFZBYYMM = FF0WW01.FFZBYYMM; /* Beginning month*/
  FF0WM001.FFZEYYMM = FF0WW01.FFZEYYMM; /* Ending month*/

   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  if (FF0WW00.TA5TSQIX > 0) /* Pages were formatted*/
    /* ------------------------------------------------------------*/
     /* Format 'SEL OPTION' and 'ORIGINAL SUG PRDCTN FCST'.*/
    /* ------------------------------------------------------------*/

    FF0WM001.XMSABRV = FF0WW01.XMSABRV; /* Status code name*/
    FF0WM001.FF0WMNBR = FF0WW00.FG1MODNB; /* Model run number*/
    set FF0WM001.FF0WMN01 skip; /* Show field*/
    set FF0WM001.FF0WMN02 skip; /* Show field*/
    set FF0WM001.FF0WMN03 skip; /* Show field*/
    set FF0WM001.FF0WMSMR normal; /* Make "SEL" visable*/

    /* ------------------------------------------------------------*/
     /* Format, up to three models.*/
    /* ------------------------------------------------------------*/

    FF0WW00.FF0WWIXM = 1; /* Initialize line index*/

    while (FF0WW00.FF0WWIXM <= 3 /* Until screen is full*/
     && FF0WW01.FF0WWSDT[FF0WWIXM] > 0) /* and date exists*/

      set FF0WM001.FF0WMSEL[FF0WWIXM] normal; /* Make "SEL" visable*/
      set FF0WM001.FF0WMNDT[FF0WWIXM] skip; /* Show field*/
      set FF0WM001.FF0WMNTM[FF0WWIXM] skip; /* Show field*/
      set FF0WM001.FF0WMNST[FF0WWIXM] skip; /* Show field*/
      set FF0WM001.FF0WMNID[FF0WWIXM] skip; /* Show field*/
      set FF0WM001.FF0WMNRN[FF0WWIXM] skip; /* Show field*/
      set FF0WM001.FF0WMNLN[FF0WWIXM] skip; /* Show field*/
      set FF0WM001.FF0WMNCT[FF0WWIXM] skip; /* Show field*/
      set FF0WM001.FF0WMNLX[FF0WWIXM] skip; /* Show field*/
      set FF0WM001.FF0WMNSS[FF0WWIXM] skip; /* Show field*/
      set FF0WM001.FF0WMTYP[FF0WWIXM] skip; /* Show field*/

      FF0WM001.FF0WWSDT[FF0WWIXM] = FF0WW01.FF0WWSDT[FF0WWIXM];
      FF0WM001.ZZZSTM[FF0WWIXM] = FF0WW01.ZZZSTM[FF0WWIXM];
      FF0WM001.FF0WWSTA[FF0WWIXM] = FF0WW01.FF0WWSTA[FF0WWIXM];
      FF0WM001.XXXUSRID[FF0WWIXM] = FF0WW01.XXXUSRID[FF0WWIXM];
      FF0WM001.FG1MODNB[FF0WWIXM] = FF0WW01.FG1MODNB[FF0WWIXM];
      FF0WM001.FF0WWLIN[FF0WWIXM] = FF0WW01.FF0WWLIN[FF0WWIXM];
      FF0WM001.FF0WWCTA[FF0WWIXM] = FF0WW01.FF0WWCTA[FF0WWIXM];
      FF0WM001.FF0WWEXA[FF0WWIXM] = FF0WW01.FF0WWEXA[FF0WWIXM];
      FF0WM001.FF0WWCTB[FF0WWIXM] = FF0WW01.FF0WWCTB[FF0WWIXM];
      FF0WM001.FF0WWEXB[FF0WWIXM] = FF0WW01.FF0WWEXB[FF0WWIXM];
      FF0WM001.FF0WWSSK[FF0WWIXM] = FF0WW01.FF0WWSSK[FF0WWIXM];
      FF0WM001.FF0WWCTC[FF0WWIXM] = FF0WW01.FF0WWCTC[FF0WWIXM];
      FF0WM001.YPGCD[FF0WWIXM] = FF0WW01.YPGCD[FF0WWIXM];

      FF0WW00.FF0WWIXM = FF0WW00.FF0WWIXM + 1; /* Increment set index*/

    end

  end


end // end FF0W210

// Obtain TSQ Record
Function FF0W211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FF0WW01.XXXTSLEN = FF0WW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FF0WW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FF0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W211

// Check attention identifier
Function FF0W300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF0WW00.FF0WWSWR == "Y") /* Request for data*/
      set FF0WW01 empty; /* M001 display storage*/
    end

    FF0WW00.FF0WWSWF = "Y"; /* Format the map switch*/
    FF0WW00.FF0WWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0WM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FF0W110(); /* Purge temporary storage*/

      XSFFS01(); /* Exit to another application*/

      set FF0WM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf17) /* or PF17 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0WM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0Y"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FF0X"; /* TO application*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FF0Z"; /* TO application*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FF01"; /* TO application*/
    end

    FF0W110(); /* Purge temporary storage*/

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0W300

// Reset highlighted fields
Function FF0W400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0WM001.FFZBYYMM initialAttributes; /* Beginning month*/
  set FF0WM001.FFZEYYMM initialAttributes; /* Ending month*/

  FF0WW00.FF0WWIXM = 1; /* Initialize line index*/

  if (FF0WM001.FF0WWSDT[FF0WWIXM] > 0) /* If any model exists*/
    set FF0WM001.FF0WMSMR normal; /* Reset select flag*/
  end

  while (FF0WW00.FF0WWIXM <= 3 /* Until end of lines*/
   && FF0WM001.FF0WWSDT[FF0WWIXM] > 0) /* and line exists*/

    set FF0WM001.FF0WMSEL[FF0WWIXM] normal; /* Reset select flag*/

    FF0WW00.FF0WWIXM = FF0WW00.FF0WWIXM + 1; /* Increment line index*/

  end

  set FF0WM001.CATOAP initialAttributes; /* TO application*/
  set FF0WM001.CAITEM initialAttributes; /* Application data*/


end // end FF0W400

// Verify the entered data
Function FF0W500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0WM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0WM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FF0W510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/

    if (FF0WM001.FFZBYYMM != FF0WW01.FFZBYYMM /* Beginning date changed*/
     || FF0WM001.FFZEYYMM != FF0WW01.FFZEYYMM) /* or ending date changed*/

      FF0W520(); /* Verify the key fields*/

    else

      /* ------------------------------------------------------------*/
       /* Else, if page was formatted, verify any selected options.*/
      /* ------------------------------------------------------------*/

      if (FF0WW00.TA5TSQIX > 0) /* Page was formatted*/

        FF0WW00.FF0WWIXM = 3; /* Initialize index*/

        while (FF0WW00.FF0WWIXM > 0) /* Until end of lines*/

          if (FF0WM001.FF0WMSEL[FF0WWIXM] > " ") /* If option entered*/
            FF0W530(); /* Verify selected option*/
          end

          FF0WW00.FF0WWIXM = FF0WW00.FF0WWIXM - 1; /* Decrement line number*/

        end

        if (FF0WM001.FF0WMSMR > " ") /* If option entered*/
          FF0W540(); /* Verify Sug Fcst*/
        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0W500

// Verify scroll request
Function FF0W510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FF0WW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FF0WW00.XXXTSPAG >= FF0WW00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0W511(); /* Highlight selections*/

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0WM001.FFZEYYMM != FF0WW01.FFZEYYMM) /* Ending date changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0WM001.FFZEYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FF0WM001.FFZBYYMM != FF0WW01.FFZBYYMM) /* Beginning date changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0WM001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end


end // end FF0W510

// Highlight any selection
Function FF0W511()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWIXM = 3; /* Initialize line index*/

  while (FF0WW00.FF0WWIXM > 0) /* Until end of lines*/

    if (FF0WM001.FF0WMSEL[FF0WWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end


    FF0WW00.FF0WWIXM = FF0WW00.FF0WWIXM - 1; /* Decrement line number*/

  end

  if (FF0WM001.FF0WMSMR > " ") /* Option entered*/

    FFWREC.XXXMODID = "511"; /* Module identification*/
    set FF0WM001.FF0WMSMR cursor, bold; /* Highlight*/
    converseLib.validationFailed(219); /* Modifications not allowed*/

  end


end // end FF0W511

// Verify the key fields
Function FF0W520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0W511(); /* Highlight any selection*/

   /* ------------------------------------------------------------*/
   /* Verify the beginning and ending dates in the entered range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZMONTH = 5; /* Beginning month offset*/
  FFZREC.FFZBYYMM = FF0WM001.FFZBYYMM; /* Beginning date*/
  FFZREC.FFZEYYMM = FF0WM001.FFZEYYMM; /* Ending date*/

  XSFFS35(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0WM001.FFZEYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0WM001.FFZBYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end


end // end FF0W520

// Verify selected option
Function FF0W530()
   /* ------------------------------------------------------------*/
   /* Verify selected options.*/
   /* ------------------------------------------------------------*/

  if (FF0WM001.FF0WMSEL[FF0WWIXM] == "C") /* If 'cancel' selected*/

    if (FF0WM001.FF0WWSTA[FF0WWIXM] != "NOTRUN") /* If status NE 'notrun'*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(226); /* Indicate invalid option*/

    else

      if (FF0WW00.FG1MDIND[FF0WWIXM] == "S") /* If model is suggested buy*/

        FFWREC.XXXMODID = "530"; /* Module identification*/
        set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(226); /* Indicate invalid option*/

      end
    end
  end


  if (FF0WM001.FF0WMSEL[FF0WWIXM] == "P") /* If 'print' selected*/

    if (FF0WM001.FF0WWSTA[FF0WWIXM] == "NOTRUN") /* If status equal 'notrun'*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(226); /* Indicate invalid option*/

    end
  end

  if (FF0WM001.FF0WMSEL[FF0WWIXM] == "S") /* If 'select' selected*/

    if (FF0WM001.FF0WWSTA[FF0WWIXM] != "TSTRUN")
                                   /* If status not equal 'run'*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(226); /* Indicate invalid option*/

    else

      if (FF0WW00.FF0WWSWM == "Y") /* If a model is already 'selected'*/

        FFWREC.XXXMODID = "530"; /* Module identification*/
        set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(227); /* Indicate 'select' already exists*/

      end
    end
  end

  if (FF0WM001.FF0WMSEL[FF0WWIXM] == "D") /* If 'de-sel' selected*/

    if (FF0WM001.FF0WWSTA[FF0WWIXM] != "SELCTD") /* If status NE 'select'*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(226); /* Indicate invalid option*/

    end

  end



  if (FF0WW00.FF0WWIXM == 3) /* If verifing the bottom model*/
    if (FF0WM001.FF0WMSEL[2] > " " /* Option entered*/
     || FF0WM001.FF0WMSEL[1] > " " /* Option entered*/
     || FF0WM001.FF0WMSMR > " ")   /* Option entered*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end
  end

  if (FF0WW00.FF0WWIXM == 2) /* If verifing the middle model*/
    if (FF0WM001.FF0WMSEL[1] > " " /* Option entered*/
     || FF0WM001.FF0WMSMR > " ")   /* Option entered*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end
  end

  if (FF0WW00.FF0WWIXM == 1 /* If verifing the top model*/
   && FF0WM001.FF0WMSMR > " ") /* Option entered*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FF0WM001.FF0WMSEL[FF0WWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(73); /* More than one selection*/

  end


end // end FF0W530

// Verify SUG BUY options
Function FF0W540()
   /* ------------------------------------------------------------*/
   /* Verify any option made for SUG production forecast.*/
   /* ------------------------------------------------------------*/

  if (FF0WM001.FF0WMSMR == "C") /* If 'cancel' selected*/

    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FF0WM001.FF0WMSMR cursor, bold; /* Highlight*/
    converseLib.validationFailed(226); /* Indicate invalid option*/

  end

  if (FF0WM001.FF0WMSMR == "P") /* If 'print' selected*/

    if (FF0WM001.XMSABRV == "NOTRUN") /* If status equal 'notrun'*/

      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FF0WM001.FF0WMSMR cursor, bold; /* Highlight*/
      converseLib.validationFailed(226); /* Indicate invalid option*/

    end

  end

  if (FF0WM001.FF0WMSMR == "S") /* If 'select' selected*/

    if (FF0WM001.XMSABRV != "TSTRUN") /* If status not equal 'run'*/

      FFWREC.XXXMODID = "540"; /* Module identification*/
         /* SET FF0WM001.FF0WMSEL(FF0WWIXM) CURSOR,BRIGHT; Highlight*/
      set FF0WM001.FF0WMSMR cursor, bold; /* Highlight*/
      converseLib.validationFailed(226); /* Indicate invalid option*/

    else

      if (FF0WW00.FF0WWSWM == "Y") /* If a model is already 'selected'*/

        FFWREC.XXXMODID = "540"; /* Module identification*/
        set FF0WM001.FF0WMSMR cursor, bold; /* Highlight*/
        converseLib.validationFailed(227); /* Indicate model already selected*/

      end
    end
  end

  if (FF0WM001.FF0WMSMR == "D") /* If 'de-sel' selected*/

    if (FF0WM001.XMSABRV != "SELCTD") /* If status not equal 'select'*/

      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FF0WM001.FF0WMSMR cursor, bold; /* Highlight*/
      converseLib.validationFailed(226); /* Indicate invalid option*/

    end

  end


end // end FF0W540

// Process valid input request
Function FF0W600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/

  if (FF0WM001.FFZBYYMM != FF0WW01.FFZBYYMM /* Beginning month changed*/
   || FF0WM001.FFZEYYMM != FF0WW01.FFZEYYMM) /* or ending month changed*/

    /* ------------------------------------------------------------*/
     /* Update the modifiable data in the FF system commarea.*/
    /* ------------------------------------------------------------*/

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* Ending month*/

    FF0WW00.FF0WWSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FF0WW00.XXXTSPAG = FF0WW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FF0WW00.XXXTSPAG = FF0WW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If Cancel was selected option, delete model.*/
   /* ------------------------------------------------------------*/

  FF0WW00.FF0WWIXM = 1; /* Set counter*/
  while (FF0WW00.FF0WWIXM <= 3) /* While less or equal 3*/

    if (FF0WM001.FF0WMSEL[FF0WWIXM] == "C") /* if cancel selected*/

      set FG1REC empty; /* Clear record*/
      FG1REC.FG1MODNB = FF0WM001.FG1MODNB[FF0WWIXM];

      FF0W610(); /* delete model*/

      FF0WW00.FF0WWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 34; /* Indicate cancel complete*/

    end

    FF0WW00.FF0WWIXM = FF0WW00.FF0WWIXM + 1; /* Add one to counter*/

  end

   /* ------------------------------------------------------------*/
   /* If 'S', 'D', or 'P' was the option, update the model.*/
   /* ------------------------------------------------------------*/

  if ("S" in FF0WM001.FF0WMSMR /* if select selected*/
   || "D" in FF0WM001.FF0WMSMR /* if de-sel selected*/
   || "P" in FF0WM001.FF0WMSMR) /* if print selected*/
    /* ------------------------------------------------------------*/
     /* This is the 'Original Sug Prdctn Fcst' model.*/
    /* ------------------------------------------------------------*/

    set FG1REC empty; /* Clear record*/
    FG1REC.FG1MODNB = FF0WW00.FG1MODNB;
    FFWREC.FG1MODNB = FG1REC.FG1MODNB;

    FF0W620(); /* update model*/

    FF0WW00.FF0WWSWR = "Y"; /* Request for data switch*/

    FFWREC.XXXMODID = "600"; /* Module identification*/

    if ("P" in FF0WM001.FF0WMSMR) /* if print selected*/
      FFWREC.XXXMSGNO = 288; /* Indicate Please sel level*/
    else
      FFWREC.XXXMSGNO = 32; /* Indicate update complete*/
    end

  else
    if ("S" in FF0WM001.FF0WMSEL /* if select selected*/
     || "D" in FF0WM001.FF0WMSEL /* if de-sel selected*/
     || "P" in FF0WM001.FF0WMSEL) /* if print selected*/
      /* ------------------------------------------------------------*/
       /* These are the other three models that appear on a page.*/
      /* ------------------------------------------------------------*/

      set FG1REC empty; /* Clear record*/
      FG1REC.FG1MODNB = FF0WM001.FG1MODNB[sysVar.arrayIndex];
      FFWREC.FG1MODNB = FF0WM001.FG1MODNB[sysVar.arrayIndex];

      FF0W620(); /* update model*/

      FF0WW00.FF0WWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "600"; /* Module identification*/

      if ("P" in FF0WM001.FF0WMSEL) /* if print selected*/
        FFWREC.XXXMSGNO = 288; /* Indicate Please sel level*/
      else
        FFWREC.XXXMSGNO = 32; /* Indicate update complete*/
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* If 'p' was the selected option, transfer to Report Request.*/
   /* ------------------------------------------------------------*/

  if ("P" in FF0WM001.FF0WMSMR) /* if print selected*/

    COMMAREA.CATOAP = "FF01"; /* TO application*/
    FF0W630(); /* Transfer to report request*/

  else
    if ("P" in FF0WM001.FF0WMSEL) /* if print selected*/

      COMMAREA.CATOAP = "FF01"; /* TO application*/
      FF0W630(); /* Transfer to report request*/

    end
  end


end // end FF0W600

// Select and Delete PMHDR
Function FF0W610()
   /* ------------------------------------------------------------*/
   /* Select PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("S ", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, delete model, and return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF0W611(); /* Delete model*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W610

// Delete PMHDR
Function FF0W611()
   /* ------------------------------------------------------------*/
   /* Fetch PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("D ", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W611

// Select and Update PMHDR
Function FF0W620()
   /* ------------------------------------------------------------*/
   /* Select PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("S ", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, update row, and return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF0W621(); /* Update PMHDR*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W620

// Update PMHDR
Function FF0W621()
   /* ------------------------------------------------------------*/
   /* Update PMHDR.*/
   /* ------------------------------------------------------------*/

  if (FF0WM001.FF0WMSMR == "S" /* if option is 'S'*/
   || "S" in FF0WM001.FF0WMSEL) /* if option is 'S'*/
    FG1REC.XMSCD = "03"; /* move 'select' to status*/
  else
    if (FF0WM001.FF0WMSMR == "D" /* if option is 'D'*/
     || "D" in FF0WM001.FF0WMSEL) /* if option is 'D'*/
      FG1REC.XMSCD = "02"; /* move 'de-sel' to status*/
    else
      if (FF0WM001.FF0WMSMR == "P" /* if option is 'p'*/
       || "P" in FF0WM001.FF0WMSEL) /* if option is 'p'*/
        FG1REC.FG1PRTFL = "Y"; /* move 'y' to print flag*/
      end
    end
  end

  FG1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FG1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

   /* ------------------------------------------------------------*/
   /* Update PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("U ", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF0WW00.FF0WWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "621"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0W621

// Transfer to display forecast
Function FF0W630()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage and transfer control to the*/
   /* forecast application.*/
   /* ------------------------------------------------------------*/

  FF0W110(); /* Purge any temporary storage*/

  XSFFS01(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/

  exit stack; /* Exit to display map*/


end // end FF0W630

// Convert date to MM-DD-YY
Function FF0WS01()
   /* --------------------------------------------------------*/
   /* Convert format of date to MM-DD-YY.*/
   /* --------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "G"; /* type*/
  TA2REC.TA2GRGGN = FG1REC.ZZZSDT; /* date to be converted*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/

    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

      FF0WW01.FF0WWSDT[FF0WWIXM] = TA2REC.TA2GRGB; /* Save converted date*/

    end

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FF0WS01 CONVERT THE FUTURE CUTOFF DATE";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FFWREC.XXXMODID = "S01"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    exit stack; /* exit to display map*/

  end

end // end FF0WS01

//*** RECORD=FF0WW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0WW00 type basicRecord
  10 FF0WWIXM FF0WWIXM ; 
  10 FF0WWIX2 FF0WWIX2 ; 
  10 FF0WWSWC FF0WWSWC ; 
  10 FF0WWSWF FF0WWSWF ; 
  10 FF0WWSWR FF0WWSWR ; 
  10 FF0WWSWS FF0WWSWS ; 
  10 FF0WWSWM FF0WWSWM ; 
  10 FF0WWSW1 FF0WWSW1 ; 
  10 FF0WWSFS FF0WWSFS ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 FF0WWOPT FF0WWOPT ; 
  10 FG1MODNB FG1MODNB [4] ; 
  10 FG1MDIND FG1MDIND [4] ; 
  10 * num(1) ; 
  10 FF0WWCNT FF0WWCNT ; 
  10 FF0WWSUB FF0WWSUB ; 
  10 XMSCD XMSCD ; 
  10 XMSABRV XMSABRV ; 
  10 * num(1) ; 
end // end FF0WW00

//*** RECORD=FF0WW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0WW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(569) ; 
    10 FFZBYYMM FFZBYYMM ; 
    10 FFZEYYMM FFZEYYMM ; 
    10 XMSABRV XMSABRV ; 
    10 FF0WWSDT FF0WWSDT [3] ; 
    10 ZZZSTM ZZZSTM [3] ; 
    10 FF0WWSTA FF0WWSTA [3] ; 
    10 XXXUSRID XXXUSRID [3] ; 
    10 FG1MODNB FG1MODNB [3] ; 
    10 FF0WWLIN FF0WWLIN [3] ; 
    10 FF0WWCTA FF0WWCTA [3] ; 
    10 FF0WWEXA FF0WWEXA [3] ; 
    10 FF0WWCTB FF0WWCTB [3] ; 
    10 FF0WWEXB FF0WWEXB [3] ; 
    10 FF0WWSSK FF0WWSSK [3] ; 
    10 FF0WWCTC FF0WWCTC [3] ; 
    10 YPGCD YPGCD [3] ; 
end // end FF0WW01

//*** RECORD=FF0WW02 ****
// Mask for all included lines
// ***********************
Record FF0WW02 type basicRecord
  5 FF0WWILM FF0WWILM ; 
    10 * char(3) [10] ; 
      15 FF0WWILN FF0WWILN ; 
      15 * char(1) ; 
end // end FF0WW02

//*** RECORD=FF0WW03 ****
// Mask for one category row
// ***********************
Record FF0WW03 type basicRecord
  5 FF0WWCAM FF0WWCAM ; 
    10 * char(3) [10] ; 
      15 FF0WWCAT FF0WWCAT ; 
      15 * char(1) ; 
end // end FF0WW03

//*** RECORD=FF0WW04 ****
// Mask for one ln excpt row
// ***********************
Record FF0WW04 type basicRecord
  5 FF0WWLEM FF0WWLEM ; 
    10 * char(3) [5] ; 
      15 FF0WWLEX FF0WWLEX ; 
      15 * char(1) ; 
end // end FF0WW04

//*** RECORD=FF0WW05 ****
// Mask for all safety stock codes
// ***********************
Record FF0WW05 type basicRecord
  5 FF0WWSSM FF0WWSSM ; 
    10 * char(3) [4] ; 
      15 FF0WWSST FF0WWSST ; 
      15 * char(2) ; 
end // end FF0WW05

// Cat mask
DataItem FF0WWCAM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CAtegories
DataItem FF0WWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Counter for loops
DataItem FF0WWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st row categories
DataItem FF0WWCTA char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd row categories
DataItem FF0WWCTB char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd row categories
DataItem FF0WWCTC char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st lines exceptions
DataItem FF0WWEXA char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd lines exceptions
DataItem FF0WWEXB char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Included line mask
DataItem FF0WWILM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Included lines
DataItem FF0WWILN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem FF0WWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FF0WWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line excepts mask
DataItem FF0WWLEM char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line excepts
DataItem FF0WWLEX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Lines included
DataItem FF0WWLIN char(29)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Hold status code
DataItem FF0WWOPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set up date
DataItem FF0WWSDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Suggested forecast switch
DataItem FF0WWSFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// safety stock
DataItem FF0WWSSK char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sfty stk mask
DataItem FF0WWSSM char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sfty stk
DataItem FF0WWSST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Model status
DataItem FF0WWSTA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Another counter for loops
DataItem FF0WWSUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FF0WWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0WWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Model selected switch
DataItem FF0WWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0WWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prior selection entered switch
DataItem FF0WWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

