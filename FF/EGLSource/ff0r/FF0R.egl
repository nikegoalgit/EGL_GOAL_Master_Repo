package ff0r;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import fh.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0R ****
// This application is part of the Footwear Forcast System  -
// Short Range.
// 
// The user may enter this application via the Short Range Menu
// (FF0A), the Work Sheet Select Screen (FF0B), the Set Hist
// Future Ind screen (FF0D), the Set Hist Prop Ind screen
// (FF0R), or Fast Path.
// 
// This application displays Historical seasonal demand infor-
// mation for 1, 2, and combined years ago and any previously
// set hist seasonal indicator for a given category/type group.
// an alternate category code may also be displayed if it
// exists for the given category.
// 
// The user may press PF16 to have the alternate categories
// demand data if an alternate category has been set for the
// given category. By pressing PF17 the user returns to the
// original categories data on display.
// 
// The user may change the hist indicatory for the original
// category by selecting one of the three displayed regardless
// of whether the original category or alternate category data
// is displayed.
// 
// The user may scroll left and right to see each month in the
// short range seasons for the category.
// 
// The user may PF14 to application FF0D, PF15 to application
// FF0r, or exit to any allowed application via Fast Path.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          07/14/89  CNEWMA  New application.
//          11/20/90  MDANGE  FF135 Remove combined year option
//                            and replace with a user created
//                            index option.
// ff175    12/19/96  dsmith  regenerated for year 2000.
// *********************
Program FF0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0RW00 FF0RW00; // record
  FF0RW01 FF0RW01; // record
  FF0RW02 FF0RW02; // record
  FF0RW03 FF0RW03; // record
  FF2REC FF2REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FH3REC FH3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use FF0RM.FF0RM001,  // forms
      FF0RM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FF0RM001 initial; /* M001 input/output*/
    set FF0RW00 empty; /* working storage*/
    set FF0RW01 empty; /* working storage*/
    set FF0RW02 empty; /* working storage*/
    set FF0RW03 empty; /* temp working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0RW00.FF0RWDRF = "N";

    if (FFWREC.YPGCD == " ") /* type group not passed*/
      FFWREC.YPGCD = "01";
      FFWREC.YPGABRV = "******";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end


    if (FFWREC.XPCCD != " " /* category found*/
     && FFWREC.YPGCD != " ") /* type group code found*/
      FF0RW00.FF0RWDRF = "Y"; /* data requested*/
    end

    FF0RW00.FF0RWCAT = "Y"; /* Original cat data requested*/
    FF0RW00.FF0RWNCF = "Y"; /* New cat flag*/
    FF0RW00.FF0RWPGN = 1; /* Page number*/
    FF0RW00.FF0RWFMF = "Y"; /* Format the Map*/
    FF0RW00.CACHGFL = "N";

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0R.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPLCD = "  ";
    FFWREC.XPLABRV = "  ";
    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0R001; /* Converse the main process*/


    FF0R001: FF0R001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0R001; /* Converse the main process*/


  end // end main
end // end FF0R

// Inquire/maintain a table row
Function FF0R001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0R100(); /* Obtain the data to display*/

  FF0R200(); /* Format and display the map*/

  FF0R300(); /* Check attention identifier*/

  FF0R400(); /* Reset fields to normal intensity*/

  FF0R500(); /* Verify the entered data*/

  FF0R600(); /* Process valid input request*/


end // end FF0R001

// Obtain Data to Display
Function FF0R100()
   /* ------------------------------------------------------------*/
   /* if data not requested or an error occured, return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0RW00.FF0RWDRF != "Y" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    return;
  end

  FF0RW00.CACHGFL = "N";

  FF0RW00.FF0RWSCR = FF0RW00.FF0RWCAT; /* save cat req*/

   /* ------------------------------------------------------------*/
   /* Obtain original category data*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWCAT = "Y"; /* Original category requested*/
  set FF0RW02 empty; /* clear display storage*/
  FF0R110(); /* Obtain Season Data*/

  if (FF2REC.FF2NSEAS == 0) /* no seasons available*/
    converseLib.validationFailed(174); /* 'seasons not set up'*/
    FFWREC.XXXMODID = "100"; /* module identification*/
    return; /* return to previous process*/
  end

  if (FF0RW00.FF0RWCAT == "Y") /* ;    /* orig cat requested*/
    FF0R115(); /* determine season lengths*/
  end

  FF0RW02.XPCCD = FF0RM001.XPCCD; /* orig cat code*/
  FF0RW00.FF0RWCTS = 1; /* season counter*/
  FF0RW00.FF0RWIX3 = 0; /* initialize index*/
  FF0RW00.FF0RWIX4 = 1; /* initialize master month range index*/

  while (FF0RW00.FF0RWCTS <= FF0RW01.FF2NSEAS) /* season cnt LE nbr seasons*/

    FF0R120(); /* Obtain Detail Data*/

    FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1; /* increment index*/
    FF0R130(); /* monthly qty calcs (orig cat)*/

    FF0R140(); /* season qty and pct calcs (orig cat)*/

    FF0RW00.FF0RWCTS = FF0RW00.FF0RWCTS + 1; /* increment season counter*/
  end
  FF0R121(); /* get user created percentages*/

   /* ------------------------------------------------------------*/
   /* If alternate category code exists, Obtain data - perform*/
   /* calculations.*/
   /* ------------------------------------------------------------*/

  if (FF0RW01.FF2ALCAT != " ") /* alt cat code exists*/

    FF0RW00.FF0RWCAT = "N"; /* alternate category requested*/
    set FF0RW03 empty; /* clear display storage*/
    FF0R110(); /* Obtain Season Data*/

    FF0RW03.XPCCD = FF0RW01.FF2ALCAT; /* alt cat code*/
    FF0RW00.FF0RWCTS = 1; /* season counter*/
    FF0RW00.FF0RWIX3 = 0; /* initialize index*/
    FF0RW00.FF0RWIX4 = 1; /* initialize master mo range index*/

    while (FF0RW00.FF0RWCTS <= FF0RW01.FF2NSEAS) /* number of seasons*/

      FF0R120(); /* Obtain Detail Data*/

      FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1; /* increment index*/
      FF0R150(); /* monthly qty calcs (alt cat)*/

      FF0R160(); /* season qty and pct calcs (alt cat)*/

      FF0RW00.FF0RWCTS = FF0RW00.FF0RWCTS + 1; /* increment season counter*/
    end
    set FFDREC empty;
    FFDREC.XPCCD = FF0RW01.FF2ALCAT; /* alt cat code*/
    FF0R127(); /* get user created percentages - alt*/
                                   /* cat*/
  end

   /* ------------------------------------------------------------*/
   /* If category or type group was changed, set flag to view*/
   /* original data.*/
   /* ------------------------------------------------------------*/

  if (FF0RW00.FF0RWNCF == "Y") /* new category requested*/
    FF0RW00.FF0RWCAT = "Y"; /* set to orig cat*/
    FFWREC.XXXMSGNO = 162; /* view orig cat msg*/
    FF0RW00.FF0RWNCF = "N"; /* reset flag*/
    FF0RW00.FF0RWPGN = 1; /* orig cat pg 1*/
  else
    FF0RW00.FF0RWCAT = FF0RW00.FF0RWSCR;
  end

   /* ------------------------------------------------------------*/
   /* Save Map fields in Working Storage*/
   /* ------------------------------------------------------------*/

  FF0RW01.FF0RWMBM = FF0RM001.FF2SEASN; /* season begin month*/
  FF0RW00.FF0RWFMF = "Y"; /* format the map*/

  FF0RW00.FF0RWDRF = "N"; /* data not requested*/

  FF0RW00.CACHGFL = "Y";


end // end FF0R100

// Obtain Season Data
Function FF0R110()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Set up key - Footwear Forecast XREF Table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* initialize record*/

  if (FF0RW00.FF0RWCAT == "Y") /* orig cat requested*/
    FF2REC.XPCCD = FFWREC.XPCCD; /* category code*/
  else
    FF2REC.XPCCD = FF0RW01.FF2ALCAT; /* category code*/
  end

  FF2REC.YPGCD = FFWREC.YPGCD; /* type group*/
  FF2REC.YSMXDV = "10"; /* division group code*/
  FF2REC.XPLCD = "*"; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (FF0RW00.FF0RWCAT == "Y") /* orig cat requested*/

        if (FF2REC.FF2ALCAT != " ")
          FF0RW01.FF2ALCAT = FF2REC.FF2ALCAT; /* alternate category*/
          if (FF0RW01.FF2ALCAT in XPCTBL.XPCCD)
            FF0RW01.FF0RWACA = XPCTBL.XPCABRV[sysVar.arrayIndex];
          end
        else
          FF0RW01.FF2ALCAT = " "; /* alternate category*/
          FF0RW01.FF0RWACA = "      "; /* alt cat abrv*/
        end

        if (FF2REC.FF2PRIND != " ")
          FF0RW01.FF2PRIND = FF2REC.FF2PRIND; /* future year ind*/
          FF0RW01.FF0RWIND = FF2REC.FF2PRIND; /* future year ind map*/
        end

      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0R110

// Determine Season lengths
Function FF0R115()

     /* Calculate seasons lengths, page layouts, working storage position*/

  FF0RW01.FF2GROUP = FF2REC.FF2GROUP; /* save record group*/
  FF0RM001.FF2SEASN = FF2REC.FF2SEASN[1]; /* season beg month*/
  FF0RW01.FF2NSEAS = FF2REC.FF2NSEAS; /* number of months*/

  FF0RW00.FF0RWIX1 = 1; /* initialize index*/
  while (FF0RW00.FF0RWIX1 <= 4)
    FF0RW01.FF2SEASN[FF0RWIX1] = FF2REC.FF2SEASN[FF0RWIX1];
    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
  end

  if (FF2REC.FF2ALCAT != " ")
    FF0RW01.FF2ALCAT = FF2REC.FF2ALCAT; /* alternate category*/
    if (FF0RW01.FF2ALCAT in XPCTBL.XPCCD)
      FF0RW01.FF0RWACA = XPCTBL.XPCABRV[sysVar.arrayIndex];
    end
  else
    FF0RW01.FF2ALCAT = " "; /* alternate category*/
    FF0RW01.FF0RWACA = "      "; /* alt cat abrv*/
  end

  /* IF FF2REC.FF2FUIND NE ' ';*/
  /* MOVE FF2REC.FF2FUIND TO FF0RW01.FF2FUIND;/* future year ind*/
  /* MOVE FF2REC.FF2FUIND TO FF0RW01.FF0RWIND;*/
  /* /* future year ind - map*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* calculate how many months long each season is and store*/
   /* ------------------------------------------------------------*/

  FF0RW01.FF0RWMNS[1] = 0;
  FF0RW01.FF0RWMNS[2] = 0;
  FF0RW01.FF0RWMNS[3] = 0;
  FF0RW01.FF0RWMNS[4] = 0;
  FF0RW00.FF0RWCNT = 1; /* month counter*/
  FF0RW00.FF0RWIX3 = FF2REC.FF2NSEAS; /* index max*/

  FF0RW00.FF0RWIX1 = 1;
  FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX1 + 1;
  while (FF0RW00.FF0RWIX1 <= FF0RW00.FF0RWIX3)

    FF0RW00.FF0RWKD1 = FF2REC.FF2SEASN[FF0RWIX1];
    if (FF2REC.FF2NSEAS == 1) /* only one season exists*/
      FF0RW01.FF0RWMNS[FF0RWIX1] = 12; /* default*/
      FF0RW01.FF0RWSTM[FF0RWIX1] = 1; /* season start map*/
    else
      if (FF0RW00.FF0RWIX2 > FF0RW00.FF0RWIX3) /* +1 index GT season max*/
        FF0RW00.FF0RWKD2 = FF2REC.FF2SEASN[1]; /* plus one year*/
      else
        FF0RW00.FF0RWKD2 = FF2REC.FF2SEASN[FF0RWIX2];
      end

      if (FF0RW00.FF0RWKM2 < FF0RW00.FF0RWKM1)
        FF0RW00.FF0RWKM2 = FF0RW00.FF0RWKM2 + 12; /* add 12 months*/
      end

      FF0RW01.FF0RWMNS[FF0RWIX1] = FF0RW00.FF0RWKM2 - FF0RW00.FF0RWKM1;
      FF0RW00.FF0RWCNT = FF0RW00.FF0RWCNT + FF0RW01.FF0RWMNS[FF0RWIX1];
      FF0RW01.FF0RWSTM[FF0RWIX1] = FF0RW00.FF0RWCNT -            FF0RW01.FF0RWMNS[FF0RWIX1]; /* seas start map*/
    end
    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 1; /* increment index*/

  end

   /* calculate page layout and WS positions*/

  FF0RW00.FF0RWCUR = 1; /* current season*/
  FF0RW00.FF0RWCMO = 1; /* curr season start month*/
  FF0RW00.FF0RWPGN = 1; /* set page number to 1*/
  FF0RW00.FF0RWMXP = 0; /* max pages*/

  FF0RW00.FF0RWIX1 = 1;
  FF0RW00.FF0RWIX2 = 1;
  while (FF0RW00.FF0RWIX1 <= FF0RW00.FF0RWIX3) /* while LE number of seasons*/

    FF0RW01.FF0RWTOT[FF0RWIX1] = FF0RWIX1 * 13; /* total positon WS*/
    FF0RW01.FF0RWSTW[FF0RWIX1] = FF0RWIX1 * 13 - 12; /* start position WS*/

    if (FF0RW01.FF0RWMNS[FF0RWIX1] > 6) /* season longer than one map*/
      FF0RW00.FF0RWMXP = FF0RW00.FF0RWMXP + 2; /* max pages*/
        /* first page*/
      FF0RW01.FF0RWTMP[FF0RWIX2] = "N"; /* total on map*/
      FF0RW01.FF0RWMPG[FF0RWIX2] = 6;
                                                          /* months on page*/

      FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 1; /* increment index*/

        /* second page*/
      FF0RW01.FF0RWTMP[FF0RWIX2] = "Y"; /* total on map*/
      FF0RW01.FF0RWMPG[FF0RWIX2] = FF0RW01.FF0RWMNS[FF0RWIX1] - 6;
    else
      FF0RW00.FF0RWMXP = FF0RW00.FF0RWMXP + 1; /* max pages*/
        /* one page season*/
      FF0RW01.FF0RWTMP[FF0RWIX2] = "Y"; /* total on map*/
      FF0RW01.FF0RWMPG[FF0RWIX2] = FF0RW01.FF0RWMNS[FF0RWIX1];
                                                          /* months on page*/
    end
    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 1; /* increment index*/

  end

end // end FF0R115

// Obtain Detail Data
Function FF0R120()
   /* ------------------------------------------------------------*/
   /* Calculate months in seasons - one and two yrs ago*/
   /* ------------------------------------------------------------*/

  FF0R122(); /* calculate months*/

   /* ------------------------------------------------------------*/
   /* Set up key data - Call subroutine (ff5500)*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIX1 = 1; /* initialize index*/

  while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[FF0RWCTS]) /* months in season*/

     /* set up key for future monthly qtys - one year ago*/

    set FH3REC empty; /* initialize record*/

    FF0RW00.FF0RWYRF = "Y"; /* one year ago*/
    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "N"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0R120"; /* calling process*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0RW01.FF2ALCAT; /* category code*/
    end

    if (FF0RW00.FF0RWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM11[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM11[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM12[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM12[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM13[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM13[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM14[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM14[FF0RWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat*/
      FF0R126(); /* store orig cat qtys*/
    else
      FF0R128(); /* store alt cat qtys*/
    end

     /* set up key for future nat'l monthly qtys - one year ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "Y"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0R120"; /* calling process*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0RW01.FF2ALCAT; /* category code*/
    end

    if (FF0RW00.FF0RWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM11[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM11[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM12[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM12[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM13[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM13[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM14[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM14[FF0RWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat*/
      FF0R126(); /* store orig cat qtys*/
    else
      FF0R128(); /* store alt cat qtys*/
    end

     /* set up key for prop monthly qtys - one year ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "PR"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "*"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0R120"; /* calling process*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0RW01.FF2ALCAT; /* category code*/
    end

    if (FF0RW00.FF0RWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM11[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM11[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM12[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM12[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM13[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM13[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM14[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM14[FF0RWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat*/
      FF0R126(); /* store orig cat qtys*/
    else
      FF0R128(); /* store alt cat qtys*/
    end

     /* set up key for future monthly qtys - two years ago*/

    set FH3REC empty; /* initialize record*/

    FF0RW00.FF0RWYRF = "N"; /* one year ago*/
    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "N"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0R120"; /* calling process*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0RW01.FF2ALCAT; /* category code*/
    end

    if (FF0RW00.FF0RWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM21[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM21[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM22[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM22[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM23[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM23[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM24[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM24[FF0RWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat*/
      FF0R126(); /* store orig cat qtys*/
    else
      FF0R128(); /* store alt cat qtys*/
    end

     /* set up key for future nat'l monthly qtys - two years ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "Y"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0R120"; /* calling process*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0RW01.FF2ALCAT; /* category code*/
    end

    if (FF0RW00.FF0RWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM21[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM21[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM22[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM22[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM23[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM23[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM24[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM24[FF0RWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat*/
      FF0R126(); /* store orig cat qtys*/
    else
      FF0R128(); /* store alt cat qtys*/
    end

     /* set up key for prop monthly qtys - two years ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "PR"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "*"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0R120"; /* calling process*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0RW01.FF2ALCAT; /* category code*/
    end

    if (FF0RW00.FF0RWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM21[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM21[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM22[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM22[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM23[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM23[FF0RWIX1];
                                   /* end month range*/
    end

    if (FF0RW00.FF0RWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0RW01.FF0RWM24[FF0RWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0RW01.FF0RWM24[FF0RWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0RW00.FF0RWCAT == "Y") /* orig cat*/
      FF0R126(); /* store orig cat qtys*/
    else
      FF0R128(); /* store alt cat qtys*/
    end

    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

  end


end // end FF0R120

// Get user created percentages
Function FF0R121()
   /* ------------------------------------------------------------*/
   /* Retrieve user created percentages from vrcmth01 for season*/
   /* ------------------------------------------------------------*/

  set FFDREC empty;
  FFDREC.XPCCD = FFWREC.XPCCD;
  FF0R123(); /* select vrcmth01 's1'*/
  FF0R124(); /* fetch vrcmth01 'n1'*/
  if (SQLCA.VAGen_SQLCODE == 0)
    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= 12 /* months in season*/
     && SQLCA.VAGen_SQLCODE == 0)

      FF0RW02.FF0RWUQT[FF0RWIX1] = FFDREC.FFDPDPCT;
      FF0RW02.FF0RWSQT[FF0RWIX1] = FFDREC.FFDPDPCT;
                                   /* sav table value*/
      FF0R124(); /* fetch vrcmth01 'n1'*/

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

    end
  else
    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= 12) /* months in season*/

      FF0RW02.FF0RWUQT[FF0RWIX1] = 0;
      FF0RW02.FF0RWSQT[FF0RWIX1] = 0; /* sav table value*/

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

    end
  end

  FF0R125(); /* close vrcmth01 'c1'*/
end // end FF0R121

// Calculate Months
Function FF0R122()
   /* ------------------------------------------------------------*/
   /* Calculate each month in a season for one and two years ago*/
   /* ------------------------------------------------------------*/

  if (FF0RW00.FF0RWCTS == 1) /* season one available*/

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[1]) /* months in season 1*/

      if (FF0RW00.FF0RWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0RW00.FF0RWDT = FF0RW01.FF2SEASN[1]; /* work area*/
        FF0RW01.FF0RWMTS[FF0RWIX4] = FF0RW00.FF0RWDT; /* master rang*/
        FF0RW00.FF0RWYY = FF0RW00.FF0RWYY - 1; /* calculate one year ago*/
        FF0RW01.FF0RWM11[1] = FF0RW00.FF0RWDT;
      else

        FF0RW00.FF0RWMM = FF0RW00.FF0RWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0RW00.FF0RWMM > 12)
          FF0RW00.FF0RWYY = FF0RW00.FF0RWYY + 1;
          FF0RW00.FF0RWMM = FF0RW00.FF0RWMM - 12;
        end

        FF0RW01.FF0RWM11[FF0RWIX1] = FF0RW00.FF0RWDT;
        FF0RW01.FF0RWMTS[FF0RWIX4] = FF0RW01.FF0RWM11[FF0RWIX1] + 100;
      end

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
      FF0RW00.FF0RWIX4 = FF0RW00.FF0RWIX4 + 1; /* increment index*/

    end

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[1]) /* months in season 1*/

      if (FF0RW00.FF0RWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0RW00.FF0RWDT = FF0RW01.FF2SEASN[1]; /* work area*/
        FF0RW00.FF0RWYY = FF0RW00.FF0RWYY - 2; /* calculate two years ago*/
        FF0RW01.FF0RWM21[1] = FF0RW00.FF0RWDT;
      else

        FF0RW00.FF0RWMM = FF0RW00.FF0RWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0RW00.FF0RWMM > 12)
          FF0RW00.FF0RWYY = FF0RW00.FF0RWYY + 1;
          FF0RW00.FF0RWMM = FF0RW00.FF0RWMM - 12;
        end

        FF0RW01.FF0RWM21[FF0RWIX1] = FF0RW00.FF0RWDT;
      end

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

    end

    if (FF0RW00.FF0RWIX1 <= 12) /* months in season less than 12*/
      while (FF0RW00.FF0RWIX1 <= 12)
        FF0RW01.FF0RWM11[FF0RWIX1] = 0; /* month in season*/
        FF0RW01.FF0RWM12[FF0RWIX1] = 0; /* month in season*/
        FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
      end
    end
  end

  if (FF0RW00.FF0RWCTS == 2) /* season two available*/

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[2]) /* months in season 2*/

      if (FF0RW00.FF0RWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0RW00.FF0RWDT = FF0RW01.FF2SEASN[2]; /* work area*/
        FF0RW01.FF0RWMTS[FF0RWIX4] = FF0RW00.FF0RWDT; /* master rang*/
        FF0RW00.FF0RWYY = FF0RW00.FF0RWYY - 1; /* calculate one year ago*/
        FF0RW01.FF0RWM12[1] = FF0RW00.FF0RWDT;
      else

        FF0RW00.FF0RWMM = FF0RW00.FF0RWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0RW00.FF0RWMM > 12)
          FF0RW00.FF0RWYY = FF0RW00.FF0RWYY + 1;
          FF0RW00.FF0RWMM = FF0RW00.FF0RWMM - 12;
        end

        FF0RW01.FF0RWM12[FF0RWIX1] = FF0RW00.FF0RWDT;
        FF0RW01.FF0RWMTS[FF0RWIX4] = FF0RW01.FF0RWM12[FF0RWIX1] + 100;

      end

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
      FF0RW00.FF0RWIX4 = FF0RW00.FF0RWIX4 + 1; /* increment index*/

    end

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[2]) /* months in season 2*/

      if (FF0RW00.FF0RWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0RW00.FF0RWDT = FF0RW01.FF2SEASN[2]; /* work area*/
        FF0RW00.FF0RWYY = FF0RW00.FF0RWYY - 2; /* calculate two years ago*/
        FF0RW01.FF0RWM22[1] = FF0RW00.FF0RWDT;
      else

        FF0RW00.FF0RWMM = FF0RW00.FF0RWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0RW00.FF0RWMM > 12)
          FF0RW00.FF0RWYY = FF0RW00.FF0RWYY + 1;
          FF0RW00.FF0RWMM = FF0RW00.FF0RWMM - 12;
        end

        FF0RW01.FF0RWM22[FF0RWIX1] = FF0RW00.FF0RWDT;

      end

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

    end

    if (FF0RW00.FF0RWIX1 <= 12) /* months in season less than 12*/
      while (FF0RW00.FF0RWIX1 <= 12)
        FF0RW01.FF0RWM12[FF0RWIX1] = 0; /* month in season*/
        FF0RW01.FF0RWM22[FF0RWIX1] = 0; /* month in season*/
        FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
      end
    end
  end

  if (FF0RW00.FF0RWCTS == 3) /* season three available*/

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[3]) /* months in season 3*/

      if (FF0RW00.FF0RWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0RW00.FF0RWDT = FF0RW01.FF2SEASN[3]; /* work area*/
        FF0RW01.FF0RWMTS[FF0RWIX4] = FF0RW00.FF0RWDT; /* master rang*/
        FF0RW00.FF0RWYY = FF0RW00.FF0RWYY - 1; /* calculate one year ago*/
        FF0RW01.FF0RWM13[1] = FF0RW00.FF0RWDT;
      else

        FF0RW00.FF0RWMM = FF0RW00.FF0RWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0RW00.FF0RWMM > 12)
          FF0RW00.FF0RWYY = FF0RW00.FF0RWYY + 1;
          FF0RW00.FF0RWMM = FF0RW00.FF0RWMM - 12;
        end

        FF0RW01.FF0RWM13[FF0RWIX1] = FF0RW00.FF0RWDT;
        FF0RW01.FF0RWMTS[FF0RWIX4] = FF0RW01.FF0RWM13[FF0RWIX1] + 100;
      end

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
      FF0RW00.FF0RWIX4 = FF0RW00.FF0RWIX4 + 1; /* increment index*/

    end

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[3]) /* months in season 1-3*/

      if (FF0RW00.FF0RWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0RW00.FF0RWDT = FF0RW01.FF2SEASN[3]; /* work area*/
        FF0RW00.FF0RWYY = FF0RW00.FF0RWYY - 2; /* calculate two years ago*/
        FF0RW01.FF0RWM23[1] = FF0RW00.FF0RWDT;
      else

        FF0RW00.FF0RWMM = FF0RW00.FF0RWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0RW00.FF0RWMM > 12)
          FF0RW00.FF0RWYY = FF0RW00.FF0RWYY + 1;
          FF0RW00.FF0RWMM = FF0RW00.FF0RWMM - 12;
        end

        FF0RW01.FF0RWM23[FF0RWIX1] = FF0RW00.FF0RWDT;

      end

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

    end


    if (FF0RW00.FF0RWIX1 <= 12) /* months in season less than 12*/
      while (FF0RW00.FF0RWIX1 <= 12)
        FF0RW01.FF0RWM13[FF0RWIX1] = 0; /* month in season*/
        FF0RW01.FF0RWM23[FF0RWIX1] = 0; /* month in season*/
        FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
      end
    end
  end

  if (FF0RW00.FF0RWCTS == 4) /* season four available*/

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[4]) /* months in season 4*/

      if (FF0RW00.FF0RWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0RW00.FF0RWDT = FF0RW01.FF2SEASN[4]; /* work area*/
        FF0RW01.FF0RWMTS[FF0RWIX4] = FF0RW00.FF0RWDT; /* master rang*/
        FF0RW00.FF0RWYY = FF0RW00.FF0RWYY - 1; /* calculate one year ago*/
        FF0RW01.FF0RWM14[1] = FF0RW00.FF0RWDT;
      else

        FF0RW00.FF0RWMM = FF0RW00.FF0RWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0RW00.FF0RWMM > 12)
          FF0RW00.FF0RWYY = FF0RW00.FF0RWYY + 1;
          FF0RW00.FF0RWMM = FF0RW00.FF0RWMM - 12;
        end

        FF0RW01.FF0RWM14[FF0RWIX1] = FF0RW00.FF0RWDT;
        FF0RW01.FF0RWMTS[FF0RWIX4] = FF0RW01.FF0RWM14[FF0RWIX1] + 100;
      end

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
      FF0RW00.FF0RWIX4 = FF0RW00.FF0RWIX4 + 1; /* increment index*/

    end

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[4]) /* months in season 4*/

      if (FF0RW00.FF0RWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0RW00.FF0RWDT = FF0RW01.FF2SEASN[4]; /* work area*/
        FF0RW00.FF0RWYY = FF0RW00.FF0RWYY - 2; /* calculate two years ago*/
        FF0RW01.FF0RWM24[1] = FF0RW00.FF0RWDT;
      else

        FF0RW00.FF0RWMM = FF0RW00.FF0RWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0RW00.FF0RWMM > 12)
          FF0RW00.FF0RWYY = FF0RW00.FF0RWYY + 1;
          FF0RW00.FF0RWMM = FF0RW00.FF0RWMM - 12;
        end

        FF0RW01.FF0RWM24[FF0RWIX1] = FF0RW00.FF0RWDT;

      end

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

    end


    if (FF0RW00.FF0RWIX1 <= 12) /* months in season less than 12*/
      while (FF0RW00.FF0RWIX1 <= 12)
        FF0RW01.FF0RWM14[FF0RWIX1] = 0; /* month in season*/
        FF0RW01.FF0RWM24[FF0RWIX1] = 0; /* month in season*/
        FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
      end
    end
  end


end // end FF0R122

// Select 's1' vrcmth01
Function FF0R123()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  FFDREC.FFABEGMO = FF0RW01.FF0RWMTS[1];
  FFDREC.FFAENDMO = FF0RW01.FF0RWMTS[12];
  FFFREC.FFFBEGMO = FFDREC.FFABEGMO;
  FFFREC.FFFENDMO = FFDREC.FFAENDMO;

  FFFFUNCD = "S1";

   /* ------------------------------------------------------------*/
   /* load ffdrec record*/
   /* ------------------------------------------------------------*/

  FFDREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* select set dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "123"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DFCAST.VRCMTH01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0R123

// Fetch 'n1' vrcmth01
Function FF0R124()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vrcmth01 row*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "N1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "124"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VRCMTH01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0R124

// Close'c1' vrcmth01
Function FF0R125()
   /* ------------------------------------------------------------*/
   /* close dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "125"; /* MODULE IDENTIFICATION*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VRCMTH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0R125

// Store Orig Cat Historical Qtys
Function FF0R126()
   /* ------------------------------------------------------------*/
   /* Save Original Category Historical Qtys in Working Storage*/
   /* ------------------------------------------------------------*/

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC != "Y") /* non-nat'l data*/
      if (FF0RW00.FF0RWYRF == "Y") /* one year ago*/

        if (FF0RW00.FF0RWCTS == 1) /* season one*/
          FF0RW02.FF0RWA11[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW02.FF0RWB11[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW02.FF0RWC11[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW02.FF0RWD11[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 2) /* season two*/
          FF0RW02.FF0RWA12[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW02.FF0RWB12[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW02.FF0RWC12[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW02.FF0RWD12[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 3) /* season three*/
          FF0RW02.FF0RWA13[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW02.FF0RWB13[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW02.FF0RWC13[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW02.FF0RWD13[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 4) /* season four*/
          FF0RW02.FF0RWA14[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW02.FF0RWB14[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW02.FF0RWC14[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW02.FF0RWD14[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      else

          /* two years ago*/

        if (FF0RW00.FF0RWCTS == 1) /* season one*/
          FF0RW02.FF0RWA21[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW02.FF0RWB21[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW02.FF0RWC21[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW02.FF0RWD21[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 2) /* season two*/
          FF0RW02.FF0RWA22[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW02.FF0RWB22[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW02.FF0RWC22[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW02.FF0RWD22[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 3) /* season three*/
          FF0RW02.FF0RWA23[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW02.FF0RWB23[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW02.FF0RWC23[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW02.FF0RWD23[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 4) /* season four*/
          FF0RW02.FF0RWA24[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW02.FF0RWB24[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW02.FF0RWC24[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW02.FF0RWD24[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC == "Y") /* nat'l data*/
      if (FF0RW00.FF0RWYRF == "Y") /* one year ago*/

        if (FF0RW00.FF0RWCTS == 1) /* season one*/
          FF0RW02.FF0RWE11[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW02.FF0RWF11[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW02.FF0RWG11[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW02.FF0RWH11[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 2) /* season two*/
          FF0RW02.FF0RWE12[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW02.FF0RWF12[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW02.FF0RWG12[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW02.FF0RWH12[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 3) /* season three*/
          FF0RW02.FF0RWE13[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW02.FF0RWF13[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW02.FF0RWG13[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW02.FF0RWH13[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 4) /* season three*/
          FF0RW02.FF0RWE14[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW02.FF0RWF14[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW02.FF0RWG14[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW02.FF0RWH14[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      else

           /* two years ago*/

        if (FF0RW00.FF0RWCTS == 1) /* season one*/
          FF0RW02.FF0RWE21[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW02.FF0RWF21[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW02.FF0RWG21[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW02.FF0RWH21[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 2) /* season two*/
          FF0RW02.FF0RWE22[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW02.FF0RWF22[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW02.FF0RWG22[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW02.FF0RWH22[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 3) /* season three*/
          FF0RW02.FF0RWE23[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW02.FF0RWF23[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW02.FF0RWG23[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW02.FF0RWH23[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 4) /* season four*/
          FF0RW02.FF0RWE24[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW02.FF0RWF24[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW02.FF0RWG24[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW02.FF0RWH24[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "PR") /* prop data*/
    if (FF0RW00.FF0RWYRF == "Y") /* one year ago*/

      if (FF0RW00.FF0RWCTS == 1) /* season one*/
        FF0RW02.FF0RWI11[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW02.FF0RWJ11[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW02.FF0RWK11[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW02.FF0RWL11[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 2) /* season two*/
        FF0RW02.FF0RWI12[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW02.FF0RWJ12[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW02.FF0RWK12[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW02.FF0RWL12[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 3) /* season three*/
        FF0RW02.FF0RWI13[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW02.FF0RWJ13[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW02.FF0RWK13[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW02.FF0RWL13[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 4) /* season three*/
        FF0RW02.FF0RWI14[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW02.FF0RWJ14[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW02.FF0RWK14[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW02.FF0RWL14[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

    else

         /* two years ago*/

      if (FF0RW00.FF0RWCTS == 1) /* season one*/
        FF0RW02.FF0RWI21[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW02.FF0RWJ21[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW02.FF0RWK21[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW02.FF0RWL21[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 2) /* season two*/
        FF0RW02.FF0RWI22[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW02.FF0RWJ22[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW02.FF0RWK22[FF0RWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0RW02.FF0RWL22[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 3) /* season three*/
        FF0RW02.FF0RWI23[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW02.FF0RWJ23[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW02.FF0RWK23[FF0RWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0RW02.FF0RWL23[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 4) /* season four*/
        FF0RW02.FF0RWI24[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW02.FF0RWJ24[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW02.FF0RWK24[FF0RWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0RW02.FF0RWL24[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

    end
  end


end // end FF0R126

// Get user created %'s - alt cat
Function FF0R127()
   /* ------------------------------------------------------------*/
   /* Retrieve user created percentages from vrcmth01 for season*/
   /* for alternate category*/
   /* ------------------------------------------------------------*/

  FF0R123(); /* select vrcmth01 's1'*/
  FF0R124(); /* fetch vrcmth01 'n1'*/
  if (SQLCA.VAGen_SQLCODE == 0)
    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= 12 /* months in season*/
     && SQLCA.VAGen_SQLCODE == 0)

      FF0RW03.FF0RWAQT[FF0RWIX1] = FFDREC.FFDPDPCT;
      FF0R124(); /* fetch vrcmth01 'n1'*/

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

    end
  else
    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= 12) /* months in season*/

      FF0RW03.FF0RWAQT[FF0RWIX1] = 0;
      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

    end
  end

  FF0R125(); /* close vrcmth01 'c1'*/
end // end FF0R127

// Store Alt Cat Historical Qtys
Function FF0R128()
   /* ------------------------------------------------------------*/
   /* Save Alternate Category Historical Qtys in Working Storage*/
   /* ------------------------------------------------------------*/

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC != "Y") /* non-nat'l data*/
      if (FF0RW00.FF0RWYRF == "Y") /* one year ago*/

        if (FF0RW00.FF0RWCTS == 1) /* season one*/
          FF0RW03.FF0RWA11[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW03.FF0RWB11[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW03.FF0RWC11[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW03.FF0RWD11[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 2) /* season two*/
          FF0RW03.FF0RWA12[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW03.FF0RWB12[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW03.FF0RWC12[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW03.FF0RWD12[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 3) /* season three*/
          FF0RW03.FF0RWA13[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW03.FF0RWB13[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW03.FF0RWC13[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW03.FF0RWD13[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 4) /* season four*/
          FF0RW03.FF0RWA14[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW03.FF0RWB14[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW03.FF0RWC14[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW03.FF0RWD14[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      else

          /* two years ago*/

        if (FF0RW00.FF0RWCTS == 1) /* season one*/
          FF0RW03.FF0RWA21[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW03.FF0RWB21[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW03.FF0RWC21[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW03.FF0RWD21[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 2) /* season two*/
          FF0RW03.FF0RWA22[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW03.FF0RWB22[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW03.FF0RWC22[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW03.FF0RWD22[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 3) /* season three*/
          FF0RW03.FF0RWA23[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW03.FF0RWB23[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW03.FF0RWC23[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW03.FF0RWD23[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 4) /* season four*/
          FF0RW03.FF0RWA24[FF0RWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0RW03.FF0RWB24[FF0RWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0RW03.FF0RWC24[FF0RWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0RW03.FF0RWD24[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC == "Y") /* nat'l data*/
      if (FF0RW00.FF0RWYRF == "Y") /* one year ago*/

        if (FF0RW00.FF0RWCTS == 1) /* season one*/
          FF0RW03.FF0RWE11[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW03.FF0RWF11[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW03.FF0RWG11[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW03.FF0RWH11[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 2) /* season two*/
          FF0RW03.FF0RWE12[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW03.FF0RWF12[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW03.FF0RWG12[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW03.FF0RWH12[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 3) /* season three*/
          FF0RW03.FF0RWE13[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW03.FF0RWF13[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW03.FF0RWG13[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW03.FF0RWH13[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 4) /* season four*/
          FF0RW03.FF0RWE14[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW03.FF0RWF14[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW03.FF0RWG14[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW03.FF0RWH14[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      else

           /* two years ago*/

        if (FF0RW00.FF0RWCTS == 1) /* season one*/
          FF0RW03.FF0RWE21[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW03.FF0RWF21[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW03.FF0RWG21[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW03.FF0RWH21[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 2) /* season two*/
          FF0RW03.FF0RWE22[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW03.FF0RWF22[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW03.FF0RWG22[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW03.FF0RWH22[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 3) /* season three*/
          FF0RW03.FF0RWE23[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW03.FF0RWF23[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW03.FF0RWG23[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW03.FF0RWH23[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0RW00.FF0RWCTS == 4) /* season four*/
          FF0RW03.FF0RWE24[FF0RWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0RW03.FF0RWF24[FF0RWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0RW03.FF0RWG24[FF0RWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0RW03.FF0RWH24[FF0RWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "PR") /* prop data*/
    if (FF0RW00.FF0RWYRF == "Y") /* one year ago*/

      if (FF0RW00.FF0RWCTS == 1) /* season one*/
        FF0RW03.FF0RWI11[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW03.FF0RWJ11[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW03.FF0RWK11[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW03.FF0RWL11[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 2) /* season two*/
        FF0RW03.FF0RWI12[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW03.FF0RWJ12[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW03.FF0RWK12[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW03.FF0RWL12[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 3) /* season three*/
        FF0RW03.FF0RWI13[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW03.FF0RWJ13[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW03.FF0RWK13[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW03.FF0RWL13[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 4) /* season four*/
        FF0RW03.FF0RWI14[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW03.FF0RWJ14[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW03.FF0RWK14[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW03.FF0RWL14[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

    else

         /* two years ago*/

      if (FF0RW00.FF0RWCTS == 1) /* season one*/
        FF0RW03.FF0RWI21[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW03.FF0RWJ21[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW03.FF0RWK21[FF0RWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0RW03.FF0RWL21[FF0RWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 2) /* season two*/
        FF0RW03.FF0RWI22[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW03.FF0RWJ22[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW03.FF0RWK22[FF0RWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0RW03.FF0RWL22[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 3) /* season three*/
        FF0RW03.FF0RWI23[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW03.FF0RWJ23[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW03.FF0RWK23[FF0RWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0RW03.FF0RWL23[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0RW00.FF0RWCTS == 4) /* season four*/
        FF0RW03.FF0RWI24[FF0RWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0RW03.FF0RWJ24[FF0RWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0RW03.FF0RWK24[FF0RWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0RW03.FF0RWL24[FF0RWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

    end
  end


end // end FF0R128

// Monthly qty calcs - orig cat
Function FF0R130()
   /* ------------------------------------------------------------*/
   /* Calculations for monthly qtys for original category*/
   /* ------------------------------------------------------------*/

  if (FF0RW00.FF0RWCTS == 1) /* season one*/

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    FF0RW00.FF0RWIX3 = FF0RW01.FF0RWSTW[1]; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[1]) /* months in season*/
      /* calculate qtys for one season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWA11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWB11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWC11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWD11[FF0RWIX1];
      FF0RW02.FF0RWFQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWE11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWF11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWG11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWH11[FF0RWIX1];
      FF0RW02.FF0RWNQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWI11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWJ11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWK11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWL11[FF0RWIX1];
      FF0RW02.FF0RWPQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWFQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWNQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWPQ1[FF0RWIX3];
      FF0RW02.FF0RWTQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWA21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWB21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWC21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWD21[FF0RWIX1];
      FF0RW02.FF0RWFQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWE21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWF21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWG21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWH21[FF0RWIX1];
      FF0RW02.FF0RWNQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWI21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWJ21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWK21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWL21[FF0RWIX1];
      FF0RW02.FF0RWPQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWFQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWNQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWPQ2[FF0RWIX3];
      FF0RW02.FF0RWTQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1;

    end
  end

  if (FF0RW00.FF0RWCTS == 2) /* season two*/

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    FF0RW00.FF0RWIX3 = FF0RW01.FF0RWSTW[2]; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[2]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWA12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWB12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWC12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWD12[FF0RWIX1];
      FF0RW02.FF0RWFQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWE12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWF12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWG12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWH12[FF0RWIX1];
      FF0RW02.FF0RWNQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWI12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWJ12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWK12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWL12[FF0RWIX1];
      FF0RW02.FF0RWPQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWFQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWNQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWPQ1[FF0RWIX3];
      FF0RW02.FF0RWTQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWA22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWB22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWC22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWD22[FF0RWIX1];
      FF0RW02.FF0RWFQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWE22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWF22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWG22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWH22[FF0RWIX1];
      FF0RW02.FF0RWNQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWI22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWJ22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWK22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWL22[FF0RWIX1];
      FF0RW02.FF0RWPQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWFQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWNQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWPQ2[FF0RWIX3];
      FF0RW02.FF0RWTQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1;

    end
  end

  if (FF0RW00.FF0RWCTS == 3) /* season three*/

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    FF0RW00.FF0RWIX3 = FF0RW01.FF0RWSTW[3]; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[3]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWA13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWB13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWC13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWD13[FF0RWIX1];
      FF0RW02.FF0RWFQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWE13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWF13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWG13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWH13[FF0RWIX1];
      FF0RW02.FF0RWNQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWI13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWJ13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWK13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWL13[FF0RWIX1];
      FF0RW02.FF0RWPQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWFQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWNQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWPQ1[FF0RWIX3];
      FF0RW02.FF0RWTQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWA23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWB23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWC23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWD23[FF0RWIX1];
      FF0RW02.FF0RWFQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWE23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWF23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWG23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWH23[FF0RWIX1];
      FF0RW02.FF0RWNQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWI23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWJ23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWK23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWL23[FF0RWIX1];
      FF0RW02.FF0RWPQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWFQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWNQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWPQ2[FF0RWIX3];
      FF0RW02.FF0RWTQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1;

    end

  end


  if (FF0RW00.FF0RWCTS == 4) /* season four*/

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    FF0RW00.FF0RWIX3 = FF0RW01.FF0RWSTW[4]; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[4]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWA14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWB14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWC14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWD14[FF0RWIX1];
      FF0RW02.FF0RWFQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWE14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWF14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWG14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWH14[FF0RWIX1];
      FF0RW02.FF0RWNQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWI14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWJ14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWK14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWL14[FF0RWIX1];
      FF0RW02.FF0RWPQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWFQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWNQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWPQ1[FF0RWIX3];
      FF0RW02.FF0RWTQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWA24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWB24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWC24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWD24[FF0RWIX1];
      FF0RW02.FF0RWFQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWE24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWF24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWG24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWH24[FF0RWIX1];
      FF0RW02.FF0RWNQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWI24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWJ24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWK24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWL24[FF0RWIX1];
      FF0RW02.FF0RWPQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWFQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWNQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW02.FF0RWPQ2[FF0RWIX3];
      FF0RW02.FF0RWTQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1;

    end

  end

  if (FF0RW00.FF0RWIX1 <= 12) /* limit of months in season*/
    FF0R132(); /* move zero qtys and pcts*/
  end


end // end FF0R130

// Clear original cat qtys
Function FF0R132()
  while (FF0RW00.FF0RWIX1 <= 6)

    FF0RW02.FF0RWFP1[FF0RWIX3] = 0; /* future pct*/
    FF0RW02.FF0RWFQ1[FF0RWIX3] = 0; /* future qty*/
    FF0RW02.FF0RWNP1[FF0RWIX3] = 0; /* future nat'l pct*/
    FF0RW02.FF0RWNQ1[FF0RWIX3] = 0; /* future nat'l qty*/
    FF0RW02.FF0RWPP1[FF0RWIX3] = 0; /* prop pct*/
    FF0RW02.FF0RWPQ1[FF0RWIX3] = 0; /* prop qty*/
    FF0RW02.FF0RWTP1[FF0RWIX3] = 0; /* total pct*/
    FF0RW02.FF0RWTQ1[FF0RWIX3] = 0; /* total qty*/
    FF0RW02.FF0RWFP2[FF0RWIX3] = 0; /* future pct*/
    FF0RW02.FF0RWFQ2[FF0RWIX3] = 0; /* future qty*/
    FF0RW02.FF0RWNP2[FF0RWIX3] = 0; /* future nat'l pct*/
    FF0RW02.FF0RWNQ2[FF0RWIX3] = 0; /* future nat'l qty*/
    FF0RW02.FF0RWPP2[FF0RWIX3] = 0; /* prop pct*/
    FF0RW02.FF0RWPQ2[FF0RWIX3] = 0; /* prop qty*/
    FF0RW02.FF0RWTP2[FF0RWIX3] = 0; /* total pct*/
    FF0RW02.FF0RWTQ2[FF0RWIX3] = 0; /* total qty*/

  /* IF FF0RWIX3 LE 12;*/
  /* MOVE 0 TO FF0RW02.FF0RWUQT(FF0RWIX3); /* user created percents*/
  /* END;*/

    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1; /* increment index*/

  end


end // end FF0R132

// Seas qty/pcts calcs - orig cat
Function FF0R140()
   /* ------------------------------------------------------------*/
   /* Perform monthly pcts and season pcts and qtys calculations*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Calculate Season Qtys*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIX1 = FF0RW01.FF0RWSTW[FF0RWCTS]; /* sesn start pos*/
  FF0RW00.FF0RWIX2 = FF0RW01.FF0RWMNS[FF0RWCTS]; /* sesn start pos*/
  FF0RW00.FF0RWIX5 = FF0RW01.FF0RWTOT[FF0RWCTS]; /* sesn start pos*/
  FF0RW00.FF0RWIX6 = 1; /* month counter*/

  while (FF0RW00.FF0RWIX6 <= FF0RW00.FF0RWIX2) /* months in season*/

        /* one year ago*/

    FF0RW02.FF0RWFQ1[FF0RWIX5] = FF0RW02.FF0RWFQ1[FF0RWIX5] + FF0RW02.FF0RWFQ1[FF0RWIX1];
    FF0RW02.FF0RWNQ1[FF0RWIX5] = FF0RW02.FF0RWNQ1[FF0RWIX5] + FF0RW02.FF0RWNQ1[FF0RWIX1];
    FF0RW02.FF0RWPQ1[FF0RWIX5] = FF0RW02.FF0RWPQ1[FF0RWIX5] + FF0RW02.FF0RWPQ1[FF0RWIX1];
    FF0RW02.FF0RWTQ1[FF0RWIX5] = FF0RW02.FF0RWTQ1[FF0RWIX5] + FF0RW02.FF0RWTQ1[FF0RWIX1];

        /* two years ago*/

    FF0RW02.FF0RWFQ2[FF0RWIX5] = FF0RW02.FF0RWFQ2[FF0RWIX5] + FF0RW02.FF0RWFQ2[FF0RWIX1];
    FF0RW02.FF0RWNQ2[FF0RWIX5] = FF0RW02.FF0RWNQ2[FF0RWIX5] + FF0RW02.FF0RWNQ2[FF0RWIX1];
    FF0RW02.FF0RWPQ2[FF0RWIX5] = FF0RW02.FF0RWPQ2[FF0RWIX5] + FF0RW02.FF0RWPQ2[FF0RWIX1];
    FF0RW02.FF0RWTQ2[FF0RWIX5] = FF0RW02.FF0RWTQ2[FF0RWIX5] + FF0RW02.FF0RWTQ2[FF0RWIX1];

    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    FF0RW00.FF0RWIX6 = FF0RW00.FF0RWIX6 + 1; /* increment index*/

  end


   /* ------------------------------------------------------------*/
   /* Calculate Monthly Pcts*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIX1 = FF0RW01.FF0RWSTW[FF0RWCTS]; /* sesn start pos*/
  FF0RW00.FF0RWIX6 = 1; /* month counter*/

  while (FF0RW00.FF0RWIX6 <= FF0RW00.FF0RWIX2) /* months in season*/

        /* one year ago*/
        /* calc future pct = month fut qty / season fut qty*/

    if (FF0RW02.FF0RWFQ1[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW02.FF0RWFQ1[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW02.FF0RWFQ1[FF0RWIX1] * 100;
      FF0RW02.FF0RWFP1[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWFQ1[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWFP1[FF0RWIX1]));
    end

        /* calc nat'l fut pct = month natl fut qty / sesn natl fut*/

    if (FF0RW02.FF0RWNQ1[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW02.FF0RWNQ1[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW02.FF0RWNQ1[FF0RWIX1] * 100;
      FF0RW02.FF0RWNP1[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWNQ1[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWNP1[FF0RWIX1]));
    end

        /* calc prop pct = month prop qty / season prop qty*/

    if (FF0RW02.FF0RWPQ1[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW02.FF0RWPQ1[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW02.FF0RWPQ1[FF0RWIX1] * 100;
      FF0RW02.FF0RWPP1[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWPQ1[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWPP1[FF0RWIX1]));
    end

        /* calc total pct = calc prop pct*/

    FF0RW02.FF0RWTP1[FF0RWIX1] = FF0RW02.FF0RWPP1[FF0RWIX1];

        /* two years ago*/
        /* calc future pct = month fut qty / season fut qty*/

    if (FF0RW02.FF0RWFQ2[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW02.FF0RWFQ2[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW02.FF0RWFQ2[FF0RWIX1] * 100;
      FF0RW02.FF0RWFP2[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWFQ2[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWFP2[FF0RWIX1]));
    end

        /* calc nat'l fut pct = month natl fut qty / sesn natl fut*/

    if (FF0RW02.FF0RWNQ2[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW02.FF0RWNQ2[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW02.FF0RWNQ2[FF0RWIX1] * 100;
      FF0RW02.FF0RWNP2[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWNQ2[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWNP2[FF0RWIX1]));
    end

        /* calc prop pct = month prop qty / season prop qty*/

    if (FF0RW02.FF0RWPQ2[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW02.FF0RWPQ2[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW02.FF0RWPQ2[FF0RWIX1] * 100;
      FF0RW02.FF0RWPP2[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWPQ2[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWPP2[FF0RWIX1]));
    end

        /* calc total pct = calc prop pct*/

    FF0RW02.FF0RWTP2[FF0RWIX1] = FF0RW02.FF0RWPP2[FF0RWIX1];


    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    FF0RW00.FF0RWIX6 = FF0RW00.FF0RWIX6 + 1; /* increment index*/

  end

    /* ----------------------------------------------------------*/
     /* Calculate Season Pcts*/
    /* ----------------------------------------------------------*/

     /* calc season fut pct = season fut qty / season dmd qty*/

  if (FF0RW02.FF0RWFQ1[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW02.FF0RWTQ1[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW02.FF0RWFQ1[FF0RWIX5] * 100;
    FF0RW02.FF0RWFP1[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWTQ1[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWFP1[FF0RWIX5]));
  end

  if (FF0RW02.FF0RWFQ2[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW02.FF0RWTQ2[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW02.FF0RWFQ2[FF0RWIX5] * 100;
    FF0RW02.FF0RWFP2[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWTQ2[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWFP2[FF0RWIX5]));
  end

     /* calc sesn natl fut pct = sesn natl fut qty / sesn dmd qty*/

  if (FF0RW02.FF0RWNQ1[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW02.FF0RWTQ1[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW02.FF0RWNQ1[FF0RWIX5] * 100;
    FF0RW02.FF0RWNP1[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWTQ1[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWNP1[FF0RWIX5]));
  end

  if (FF0RW02.FF0RWNQ2[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW02.FF0RWTQ2[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW02.FF0RWNQ2[FF0RWIX5] * 100;
    FF0RW02.FF0RWNP2[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWTQ2[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWNP2[FF0RWIX5]));
  end

     /* calc season prop pct = season prop qty / season dmd qty*/

  if (FF0RW02.FF0RWPQ1[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW02.FF0RWTQ1[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW02.FF0RWPQ1[FF0RWIX5] * 100;
    FF0RW02.FF0RWPP1[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWTQ1[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWPP1[FF0RWIX5]));
  end

  if (FF0RW02.FF0RWPQ2[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW02.FF0RWTQ2[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW02.FF0RWPQ2[FF0RWIX5] * 100;
    FF0RW02.FF0RWPP2[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW02.FF0RWTQ2[FF0RWIX5], -mathLib.decimals(FF0RW02.FF0RWPP2[FF0RWIX5]));
  end

     /* Calc Total Demand pct = 100*/

  if (FF0RW02.FF0RWPQ1[FF0RWIX5] != 0)
    FF0RW02.FF0RWTP1[FF0RWIX5] = FF0RW02.FF0RWTP1[FF0RWIX5] + 100;
  end

  if (FF0RW02.FF0RWPQ2[FF0RWIX5] != 0)
    FF0RW02.FF0RWTP2[FF0RWIX5] = FF0RW02.FF0RWTP2[FF0RWIX5] + 100;
  end


end // end FF0R140

// Monthly qty calcs - alt cat
Function FF0R150()
   /* ------------------------------------------------------------*/
   /* Calculations for monthly qtys for alternate category*/
   /* ------------------------------------------------------------*/

  if (FF0RW00.FF0RWCTS == 1) /* season one*/

    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    FF0RWIX3 = FF0RW01.FF0RWSTW[1]; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[1]) /* months in season*/
      /* calculate qtys for one season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWA11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWB11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWC11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWD11[FF0RWIX1];
      FF0RW03.FF0RWFQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWE11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWF11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWG11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWH11[FF0RWIX1];
      FF0RW03.FF0RWNQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWI11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWJ11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWK11[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWL11[FF0RWIX1];
      FF0RW03.FF0RWPQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWFQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWNQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWPQ1[FF0RWIX3];
      FF0RW03.FF0RWTQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWA21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWB21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWC21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWD21[FF0RWIX1];
      FF0RW03.FF0RWFQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWE21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWF21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWG21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWH21[FF0RWIX1];
      FF0RW03.FF0RWNQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWI21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWJ21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWK21[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWL21[FF0RWIX1];
      FF0RW03.FF0RWPQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWFQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWNQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWPQ2[FF0RWIX3];
      FF0RW03.FF0RWTQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

      FF0RW00.FF0RWIX1 = FF0RWIX1 + 1;
      FF0RW00.FF0RWIX3 = FF0RWIX3 + 1;

    end

  end


  if (FF0RW00.FF0RWCTS == 2) /* season two*/


    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    FF0RWIX3 = FF0RW01.FF0RWSTW[2]; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[2]) /* months in season*/
       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWA12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWB12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWC12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWD12[FF0RWIX1];
      FF0RW03.FF0RWFQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWE12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWF12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWG12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWH12[FF0RWIX1];
      FF0RW03.FF0RWNQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWI12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWJ12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWK12[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWL12[FF0RWIX1];
      FF0RW03.FF0RWPQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWFQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWNQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWPQ1[FF0RWIX3];
      FF0RW03.FF0RWTQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWA22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWB22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWC22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWD22[FF0RWIX1];
      FF0RW03.FF0RWFQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWE22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWF22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWG22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWH22[FF0RWIX1];
      FF0RW03.FF0RWNQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWI22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWJ22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWK22[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWL22[FF0RWIX1];
      FF0RW03.FF0RWPQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWFQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWNQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWPQ2[FF0RWIX3];
      FF0RW03.FF0RWTQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

      FF0RW00.FF0RWIX1 = FF0RWIX1 + 1;
      FF0RW00.FF0RWIX3 = FF0RWIX3 + 1;

    end

  end

  if (FF0RW00.FF0RWCTS == 3) /* season three*/


    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    FF0RWIX3 = FF0RW01.FF0RWSTW[3]; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[3]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWA13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWB13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWC13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWD13[FF0RWIX1];
      FF0RW03.FF0RWFQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWE13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWF13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWG13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWH13[FF0RWIX1];
      FF0RW03.FF0RWNQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWI13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWJ13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWK13[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWL13[FF0RWIX1];
      FF0RW03.FF0RWPQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWFQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWNQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWPQ1[FF0RWIX3];
      FF0RW03.FF0RWTQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWA23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWB23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWC23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWD23[FF0RWIX1];
      FF0RW03.FF0RWFQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWE23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWF23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWG23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWH23[FF0RWIX1];
      FF0RW03.FF0RWNQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWI23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWJ23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWK23[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWL23[FF0RWIX1];
      FF0RW03.FF0RWPQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWFQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWNQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWPQ2[FF0RWIX3];
      FF0RW03.FF0RWTQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1;

    end

  end

  if (FF0RW00.FF0RWCTS == 4) /* season four*/


    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    FF0RWIX3 = FF0RW01.FF0RWSTW[4]; /* initialize index*/

    while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMNS[4]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWA14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWB14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWC14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWD14[FF0RWIX1];
      FF0RW03.FF0RWFQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWE14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWF14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWG14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWH14[FF0RWIX1];
      FF0RW03.FF0RWNQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWI14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWJ14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWK14[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWL14[FF0RWIX1];
      FF0RW03.FF0RWPQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWFQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWNQ1[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWPQ1[FF0RWIX3];
      FF0RW03.FF0RWTQ1[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWA24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWB24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWC24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWD24[FF0RWIX1];
      FF0RW03.FF0RWFQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate nat'l future qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWE24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWF24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWG24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWH24[FF0RWIX1];
      FF0RW03.FF0RWNQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate prop qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWI24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWJ24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWK24[FF0RWIX1];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWL24[FF0RWIX1];
      FF0RW03.FF0RWPQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

       /* calculate total qtys*/

      FF0RW00.FF0RWCWK = 0; /* initialize work field*/
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWFQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWNQ2[FF0RWIX3];
      FF0RW00.FF0RWCWK = FF0RW00.FF0RWCWK + FF0RW03.FF0RWPQ2[FF0RWIX3];
      FF0RW03.FF0RWTQ2[FF0RWIX3] = FF0RW00.FF0RWCWK;

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1;

    end

  end

  if (FF0RW00.FF0RWIX1 <= 12) /* limit of months in season*/
    FF0R152(); /* move zero qtys and pcts*/
  end


end // end FF0R150

// Clear alt cat qtys
Function FF0R152()
  while (FF0RW00.FF0RWIX1 <= 6)

    FF0RW03.FF0RWFP1[FF0RWIX3] = 0; /* future pct*/
    FF0RW03.FF0RWFQ1[FF0RWIX3] = 0; /* future qty*/
    FF0RW03.FF0RWNP1[FF0RWIX3] = 0; /* future nat'l pct*/
    FF0RW03.FF0RWNQ1[FF0RWIX3] = 0; /* future nat'l qty*/
    FF0RW03.FF0RWPP1[FF0RWIX3] = 0; /* prop pct*/
    FF0RW03.FF0RWPQ1[FF0RWIX3] = 0; /* prop qty*/
    FF0RW03.FF0RWTP1[FF0RWIX3] = 0; /* total pct*/
    FF0RW03.FF0RWTQ1[FF0RWIX3] = 0; /* total qty*/
    FF0RW03.FF0RWFP2[FF0RWIX3] = 0; /* future pct*/
    FF0RW03.FF0RWFQ2[FF0RWIX3] = 0; /* future qty*/
    FF0RW03.FF0RWNP2[FF0RWIX3] = 0; /* future nat'l pct*/
    FF0RW03.FF0RWNQ2[FF0RWIX3] = 0; /* future nat'l qty*/
    FF0RW03.FF0RWPP2[FF0RWIX3] = 0; /* prop pct*/
    FF0RW03.FF0RWPQ2[FF0RWIX3] = 0; /* prop qty*/
    FF0RW03.FF0RWTP2[FF0RWIX3] = 0; /* total pct*/
    FF0RW03.FF0RWTQ2[FF0RWIX3] = 0; /* total qty*/

    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    FF0RW00.FF0RWIX3 = FF0RW00.FF0RWIX3 + 1; /* increment index*/

  end


end // end FF0R152

// Seas qty/pcts calcs - orig cat
Function FF0R160()
   /* ------------------------------------------------------------*/
   /* Perform monthly pcts and season pcts and qtys calculations*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Calculate Season Qtys*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIX1 = FF0RW01.FF0RWSTW[FF0RWCTS]; /* sesn start pos*/
  FF0RW00.FF0RWIX2 = FF0RW01.FF0RWMNS[FF0RWCTS]; /* sesn start pos*/
  FF0RW00.FF0RWIX5 = FF0RW01.FF0RWTOT[FF0RWCTS]; /* sesn start pos*/
  FF0RW00.FF0RWIX6 = 1; /* month counter*/

  while (FF0RW00.FF0RWIX6 <= FF0RW00.FF0RWIX2) /* months in season*/

        /* one year ago*/

    FF0RW03.FF0RWFQ1[FF0RWIX5] = FF0RW03.FF0RWFQ1[FF0RWIX5] + FF0RW03.FF0RWFQ1[FF0RWIX1];
    FF0RW03.FF0RWNQ1[FF0RWIX5] = FF0RW03.FF0RWNQ1[FF0RWIX5] + FF0RW03.FF0RWNQ1[FF0RWIX1];
    FF0RW03.FF0RWPQ1[FF0RWIX5] = FF0RW03.FF0RWPQ1[FF0RWIX5] + FF0RW03.FF0RWPQ1[FF0RWIX1];
    FF0RW03.FF0RWTQ1[FF0RWIX5] = FF0RW03.FF0RWTQ1[FF0RWIX5] + FF0RW03.FF0RWTQ1[FF0RWIX1];

        /* two years ago*/

    FF0RW03.FF0RWFQ2[FF0RWIX5] = FF0RW03.FF0RWFQ2[FF0RWIX5] + FF0RW03.FF0RWFQ2[FF0RWIX1];
    FF0RW03.FF0RWNQ2[FF0RWIX5] = FF0RW03.FF0RWNQ2[FF0RWIX5] + FF0RW03.FF0RWNQ2[FF0RWIX1];
    FF0RW03.FF0RWPQ2[FF0RWIX5] = FF0RW03.FF0RWPQ2[FF0RWIX5] + FF0RW03.FF0RWPQ2[FF0RWIX1];
    FF0RW03.FF0RWTQ2[FF0RWIX5] = FF0RW03.FF0RWTQ2[FF0RWIX5] + FF0RW03.FF0RWTQ2[FF0RWIX1];

    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    FF0RW00.FF0RWIX6 = FF0RW00.FF0RWIX6 + 1; /* increment index*/

  end


   /* ------------------------------------------------------------*/
   /* Calculate Monthly Pcts*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIX1 = FF0RW01.FF0RWSTW[FF0RWCTS]; /* sesn start pos*/
  FF0RW00.FF0RWIX6 = 1; /* month counter*/

  while (FF0RW00.FF0RWIX6 <= FF0RW00.FF0RWIX2) /* months in season*/

        /* one year ago*/
        /* calc future pct = month fut qty / season fut qty*/

    if (FF0RW03.FF0RWFQ1[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW03.FF0RWFQ1[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW03.FF0RWFQ1[FF0RWIX1] * 100;
      FF0RW03.FF0RWFP1[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWFQ1[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWFP1[FF0RWIX1]));
    end

        /* calc nat'l fut pct = month natl fut qty / sesn natl fut*/

    if (FF0RW03.FF0RWNQ1[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW03.FF0RWNQ1[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW03.FF0RWNQ1[FF0RWIX1] * 100;
      FF0RW03.FF0RWNP1[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWNQ1[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWNP1[FF0RWIX1]));
    end

        /* calc prop pct = month prop qty / season prop qty*/

    if (FF0RW03.FF0RWPQ1[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW03.FF0RWPQ1[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW03.FF0RWPQ1[FF0RWIX1] * 100;
      FF0RW03.FF0RWPP1[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWPQ1[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWPP1[FF0RWIX1]));
    end

        /* calc total pct = calc prop pct*/

    FF0RW03.FF0RWTP1[FF0RWIX1] = FF0RW03.FF0RWPP1[FF0RWIX1];

        /* two years ago*/
        /* calc future pct = month fut qty / season fut qty*/

    if (FF0RW03.FF0RWFQ2[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW03.FF0RWFQ2[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW03.FF0RWFQ2[FF0RWIX1] * 100;
      FF0RW03.FF0RWFP2[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWFQ2[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWFP2[FF0RWIX1]));
    end

        /* calc nat'l fut pct = month natl fut qty / sesn natl fut*/

    if (FF0RW03.FF0RWNQ2[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW03.FF0RWNQ2[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW03.FF0RWNQ2[FF0RWIX1] * 100;
      FF0RW03.FF0RWNP2[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWNQ2[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWNP2[FF0RWIX1]));
    end

        /* calc prop pct = month prop qty / season prop qty*/

    if (FF0RW03.FF0RWPQ2[FF0RWIX1] > 0 /* gt zeroes*/
     && FF0RW03.FF0RWPQ2[FF0RWIX5] > 0) /* gt zeroes*/
      FF0RW00.FF0RWCWK = 0; /* clear work area*/
      FF0RW00.FF0RWCWK = FF0RW03.FF0RWPQ2[FF0RWIX1] * 100;
      FF0RW03.FF0RWPP2[FF0RWIX1] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWPQ2[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWPP2[FF0RWIX1]));
    end

        /* calc total pct = calc prop pct*/

    FF0RW03.FF0RWTP2[FF0RWIX1] = FF0RW03.FF0RWPP2[FF0RWIX1];


    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    FF0RW00.FF0RWIX6 = FF0RW00.FF0RWIX6 + 1; /* increment index*/

  end

    /* ----------------------------------------------------------*/
     /* Calculate Season Pcts*/
    /* ----------------------------------------------------------*/

     /* calc season fut pct = season fut qty / season dmd qty*/

  if (FF0RW03.FF0RWFQ1[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW03.FF0RWTQ1[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW03.FF0RWFQ1[FF0RWIX5] * 100;
    FF0RW03.FF0RWFP1[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWTQ1[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWFP1[FF0RWIX5]));
  end

  if (FF0RW03.FF0RWFQ2[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW03.FF0RWTQ2[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW03.FF0RWFQ2[FF0RWIX5] * 100;
    FF0RW03.FF0RWFP2[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWTQ2[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWFP2[FF0RWIX5]));
  end

     /* calc sesn natl fut pct = sesn natl fut qty / sesn dmd qty*/

  if (FF0RW03.FF0RWNQ1[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW03.FF0RWTQ1[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW03.FF0RWNQ1[FF0RWIX5] * 100;
    FF0RW03.FF0RWNP1[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWTQ1[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWNP1[FF0RWIX5]));
  end

  if (FF0RW03.FF0RWNQ2[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW03.FF0RWTQ2[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW03.FF0RWNQ2[FF0RWIX5] * 100;
    FF0RW03.FF0RWNP2[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWTQ2[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWNP2[FF0RWIX5]));
  end

     /* calc season prop pct = season prop qty / season dmd qty*/

  if (FF0RW03.FF0RWPQ1[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW03.FF0RWTQ1[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW03.FF0RWPQ1[FF0RWIX5] * 100;
    FF0RW03.FF0RWPP1[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWTQ1[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWPP1[FF0RWIX5]));
  end

  if (FF0RW03.FF0RWPQ2[FF0RWIX5] > 0 /* gt zeroes*/
   && FF0RW03.FF0RWTQ2[FF0RWIX5] > 0) /* gt zeroes*/
    FF0RW00.FF0RWCWK = 0; /* clear work area*/
    FF0RW00.FF0RWCWK = FF0RW03.FF0RWPQ2[FF0RWIX5] * 100;
    FF0RW03.FF0RWPP2[FF0RWIX5] = mathLib.round(FF0RW00.FF0RWCWK / FF0RW03.FF0RWTQ2[FF0RWIX5], -mathLib.decimals(FF0RW03.FF0RWPP2[FF0RWIX5]));
  end

     /* Calc Total Demand pct = 100*/

  if (FF0RW03.FF0RWPQ1[FF0RWIX5] != 0)
    FF0RW03.FF0RWTP1[FF0RWIX5] = FF0RW03.FF0RWTP1[FF0RWIX5] + 100;
  end

  if (FF0RW03.FF0RWPQ2[FF0RWIX5] != 0)
    FF0RW03.FF0RWTP2[FF0RWIX5] = FF0RW03.FF0RWTP2[FF0RWIX5] + 100;
  end


end // end FF0R160

// Format and Converse Map
Function FF0R200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0RW00.FF0RWDRF == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0RW00.FF0RWFMF == "Y") /* map must be formatted*/
      FF0R210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FF0RM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0RM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    FF0RM001.XXXMODID = FFWREC.XXXMODID; /* module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end
                                   /* message number moved to ezemno*/
    set FF0RM001 alarm;
  end

  converse FF0RM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FF0RM001.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* error message number*/
  COMMAREA.CATOAP = FF0RM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0RM001.CAITEM; /* Application data*/


end // end FF0R200

// Format Data to Display
Function FF0R210()
   /* ------------------------------------------------------------*/
   /* Set map clear*/
   /* ------------------------------------------------------------*/

  set FF0RM001 initial; /* clear screen*/

   /* ------------------------------------------------------------*/
   /* Move category code and abrv to screen*/
   /* ------------------------------------------------------------*/

  FF0RM001.XPCCD = FFWREC.XPCCD; /* category code*/
  FF0RM001.XPCABRV = FFWREC.XPCABRV; /* category abrv*/

   /* ------------------------------------------------------------*/
   /* Move type group code and abrv to screen*/
   /* ------------------------------------------------------------*/

  FF0RM001.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF0RM001.YPGABRV = FFWREC.YPGABRV; /* type group abrv*/

   /* ------------------------------------------------------------*/
   /* If Alternate category code exists, display it on screen*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWFMF = "N"; /* reset flag*/

  if (FF0RW01.FF2ALCAT != " ") /* alt cat code exists*/
    FF0RM001.FF2ALCAT = FF0RW01.FF2ALCAT; /* alt cat code*/
    FF0RM001.FF0RMACD = FF0RW01.FF0RWACA; /* alt cat abrv*/
  else
    FF0RM001.FF2ALCAT = " "; /* alt cat code*/
    FF0RM001.FF0RMACD = "      "; /* alt cat abrv*/
  end

   /* ------------------------------------------------------------*/
   /* If Historical Indicator already exists and not updated,*/
   /* place an 's' next to the appropriate field on the map.*/
   /* ------------------------------------------------------------*/

  if (FF0RW01.FF0RWIND == "1") /* hist demand eq one yr ago*/
    FF0RM001.FF0RMSEL[1] = "S"; /* set selection code*/
    set FF0RM001.FF0RMSEL[1] cursor; /* set cursor*/
  else
    FF0RM001.FF0RMSEL[1] = " "; /* set selection code*/
  end

  if (FF0RW01.FF0RWIND == "2") /* hist demand eq two yrs ago*/
    FF0RM001.FF0RMSEL[2] = "S"; /* set selection code*/
    set FF0RM001.FF0RMSEL[2] cursor; /* set cursor*/
  else
    FF0RM001.FF0RMSEL[2] = " "; /* set selection code*/
  end

  if (FF0RW01.FF0RWIND == "U") /* hist demand eq combined yrs*/
    FF0RM001.FF0RMSEL[3] = "S"; /* set selection code*/
    set FF0RM001.FF0RMSEL[3] cursor; /* set cursor*/
  else
    FF0RM001.FF0RMSEL[3] = " "; /* set selection code*/
  end

  if (FF0RW00.CACHGFL == "N")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Set selection fields normal*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIX1 = 1; /* initialize index*/

  while (FF0RW00.FF0RWIX1 <= 3) /* nbr of selections*/
    set FF0RM001.FF0RMSEL[FF0RWIX1] normal;
    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Move user percents to screen,Set user percentages normal*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIX2 = FF0RW01.FF0RWSTM[FF0RWCUR]; /* init start*/
  if (FF0RW00.FF0RWCMO == 1) /* first page of sesn*/
     /* next sentence*/
  else
    FF0RWIX2 = FF0RW01.FF0RWSTM[FF0RWCUR] + 6; /* add 6 to start*/
  end


  FF0RW00.FF0RWIX1 = 1; /* initialize index*/
  while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMPG[FF0RWPGN]) /* months on page*/
    if (FF0RW00.FF0RWCAT == "Y") /* original category requested*/
      FF0RM001.FF0RMUQT[FF0RWIX1] = FF0RW02.FF0RWUQT[FF0RWIX2];
      if (FF0RW01.FF2ALCAT == " ") /* no alt cat exists*/
        set FF0RM001.FF0RMUQT[FF0RWIX1] normal;
      else
        set FF0RM001.FF0RMUQT[FF0RWIX1] skip;
      end
    else
      FF0RM001.FF0RMUQT[FF0RWIX1] = FF0RW03.FF0RWAQT[FF0RWIX2];
      set FF0RM001.FF0RMUQT[FF0RWIX1] skip;
    end
    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Move Months in season to map*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWDT = FF0RW01.FF2SEASN[1]; /* work beg date*/
  FF0RW00.FF0RWMNC = FF0RW00.FF0RWMM; /* display month*/
  FF0RW00.FF0RWYRC = FF0RW00.FF0RWYY; /* display year*/
  FF0RM001.FF2SEASN = FF0RW00.FF0RWYMC; /* display date*/
  FF0RW01.FF0RWMBM = FF0RW00.FF0RWYMC; /* save date*/

  if (FF0RW00.FF0RWCUR == 1) /* season one*/
    FF0RWIX1 = FF0RW00.FF0RWCMO; /* sesn start position*/
    FF0RW00.FF0RWIX2 = 1; /* initialize index*/

    while (FF0RW00.FF0RWIX2 <= FF0RW01.FF0RWMPG[FF0RWPGN])
       /* month from one year ago*/
      FF0RW00.FF0RWDT = FF0RW01.FF0RWM11[FF0RWIX1]; /* date work area*/
      FF0RW01.FF0RWDMM = FF0RW00.FF0RWMM; /* display month*/
      FF0RW01.FF0RWDYY = FF0RW00.FF0RWYY; /* display year*/
      FF0RM001.FF0RMMO1[FF0RWIX2] = FF0RW01.FF0RWDDT; /* one yr ago disp*/
       /* current year month*/
      FF0RW01.FF0RWDYY = FF0RW01.FF0RWDYY + 1; /* current year*/
      FF0RM001.FF0RMMOU[FF0RWIX2] = FF0RW01.FF0RWDDT; /* user created mo*/
       /* month from 2 years ago*/
      FF0RW00.FF0RWDT = FF0RW01.FF0RWM21[FF0RWIX1]; /* date work area*/
      FF0RW01.FF0RWDMM = FF0RW00.FF0RWMM; /* display month*/
      FF0RW01.FF0RWDYY = FF0RW00.FF0RWYY; /* display year*/
      FF0RM001.FF0RMMO2[FF0RWIX2] = FF0RW01.FF0RWDDT; /* two yr ago disp*/

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 1;
    end
  end

  if (FF0RW00.FF0RWCUR == 2) /* season two*/
    FF0RWIX1 = FF0RW00.FF0RWCMO; /* sesn start position*/
    FF0RW00.FF0RWIX2 = 1; /* initialize index*/

    while (FF0RW00.FF0RWIX2 <= FF0RW01.FF0RWMPG[FF0RWPGN])
                                   /* months in season*/
       /* month from one year ago*/
      FF0RW00.FF0RWDT = FF0RWM12[FF0RWIX1]; /* date work area*/
      FF0RW01.FF0RWDMM = FF0RW00.FF0RWMM; /* display month*/
      FF0RW01.FF0RWDYY = FF0RW00.FF0RWYY; /* display year*/
      FF0RM001.FF0RMMO1[FF0RWIX2] = FF0RW01.FF0RWDDT;
                                   /* 1 yr ago disp*/
       /* current year month*/
      FF0RW01.FF0RWDYY = FF0RW01.FF0RWDYY + 1; /* current year month*/
      FF0RM001.FF0RMMOU[FF0RWIX2] = FF0RW01.FF0RWDDT; /* user created mo*/
       /* month from two years ago*/
      FF0RW00.FF0RWDT = FF0RWM22[FF0RWIX1]; /* date work area*/
      FF0RW01.FF0RWDMM = FF0RW00.FF0RWMM; /* display month*/
      FF0RW01.FF0RWDYY = FF0RW00.FF0RWYY; /* display year*/
      FF0RM001.FF0RMMO2[FF0RWIX2] = FF0RW01.FF0RWDDT;
                                   /* 2 yr ago disp*/

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 1;
    end
  end


  if (FF0RW00.FF0RWCUR == 3) /* season three*/
    FF0RWIX1 = FF0RW00.FF0RWCMO; /* sesn start position*/
    FF0RW00.FF0RWIX2 = 1; /* initialize index*/

    while (FF0RW00.FF0RWIX2 <= FF0RW01.FF0RWMPG[FF0RWPGN])
                                   /* months in season*/
       /* month from one year ago*/
      FF0RW00.FF0RWDT = FF0RWM13[FF0RWIX1]; /* date work area*/
      FF0RW01.FF0RWDMM = FF0RW00.FF0RWMM; /* display month*/
      FF0RW01.FF0RWDYY = FF0RW00.FF0RWYY; /* display year*/
      FF0RM001.FF0RMMO1[FF0RWIX2] = FF0RW01.FF0RWDDT; /* one yr ago disp*/
       /* current year month*/
      FF0RW01.FF0RWDYY = FF0RW01.FF0RWDYY + 1; /* increment one yr ago*/
      FF0RM001.FF0RMMOU[FF0RWIX2] = FF0RW01.FF0RWDDT; /* user created mo*/
       /* month from one year ago*/
      FF0RW00.FF0RWDT = FF0RWM23[FF0RWIX1]; /* date work area*/
      FF0RW01.FF0RWDMM = FF0RW00.FF0RWMM; /* display month*/
      FF0RW01.FF0RWDYY = FF0RW00.FF0RWYY; /* display year*/
      FF0RM001.FF0RMMO2[FF0RWIX2] = FF0RW01.FF0RWDDT; /* two yr ago disp*/

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 1;
    end
  end

  if (FF0RW00.FF0RWCUR == 4) /* season four*/
    FF0RWIX1 = FF0RW00.FF0RWCMO; /* sesn start position*/
    FF0RW00.FF0RWIX2 = 1; /* initialize index*/

    while (FF0RW00.FF0RWIX2 <= FF0RW01.FF0RWMPG[FF0RWPGN])
                                   /* months in season*/
       /* month from one year ago*/
      FF0RW00.FF0RWDT = FF0RWM14[FF0RWIX1]; /* date work area*/
      FF0RW01.FF0RWDMM = FF0RW00.FF0RWMM; /* display month*/
      FF0RW01.FF0RWDYY = FF0RW00.FF0RWYY; /* display year*/
      FF0RM001.FF0RMMO1[FF0RWIX2] = FF0RW01.FF0RWDDT; /* one yr ago disp*/
       /* current year month*/
      FF0RW01.FF0RWDYY = FF0RW01.FF0RWDYY + 1; /* increment one yr ago*/
      FF0RM001.FF0RMMOU[FF0RWIX2] = FF0RW01.FF0RWDDT; /* user created mo*/
       /* month from one year ago*/
      FF0RW00.FF0RWDT = FF0RWM24[FF0RWIX1]; /* date work area*/
      FF0RW01.FF0RWDMM = FF0RW00.FF0RWMM; /* display month*/
      FF0RW01.FF0RWDYY = FF0RW00.FF0RWYY; /* display year*/
      FF0RM001.FF0RMMO2[FF0RWIX2] = FF0RW01.FF0RWDDT; /* two yr ago disp*/

      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1;
      FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* If Months in Season LT 6, clear headings on map*/
   /* ------------------------------------------------------------*/

  FF0RWIX1 = 1;
  while (FF0RWIX1 <= 6) /* positions on screen*/
    if (FF0RM001.FF0RMMO1[FF0RWIX1] == " ") /* one yr ago disp*/
      FF0RM001.FF0RMHDG[FF0RWIX1] = " "; /* hdg month*/
      set FF0RM001.FF0RMHDG[FF0RWIX1] invisible, skip;
      FF0RM001.FF0RMMO1[FF0RWIX1] = " "; /* hdg month*/
      FF0RM001.FF0RMMO2[FF0RWIX1] = " "; /* hdg month*/
      FF0RM001.FF0RMMOU[FF0RWIX1] = " "; /* hdg month*/
      FF0RM001.FF0RMFP1[FF0RWIX1] = 0;
      FF0RM001.FF0RMNP1[FF0RWIX1] = 0;
      FF0RM001.FF0RMPP1[FF0RWIX1] = 0;
      FF0RM001.FF0RMTP1[FF0RWIX1] = 0;
      FF0RM001.FF0RMFQ1[FF0RWIX1] = " ";
      FF0RM001.FF0RMNQ1[FF0RWIX1] = " ";
      FF0RM001.FF0RMPQ1[FF0RWIX1] = " ";
      FF0RM001.FF0RMTQ1[FF0RWIX1] = " ";
      FF0RM001.FF0RMFP2[FF0RWIX1] = 0;
      FF0RM001.FF0RMNP2[FF0RWIX1] = 0;
      FF0RM001.FF0RMPP2[FF0RWIX1] = 0;
      FF0RM001.FF0RMTP2[FF0RWIX1] = 0;
      FF0RM001.FF0RMFQ2[FF0RWIX1] = " ";
      FF0RM001.FF0RMNQ2[FF0RWIX1] = " ";
      FF0RM001.FF0RMPQ2[FF0RWIX1] = " ";
      FF0RM001.FF0RMTQ2[FF0RWIX1] = " ";
      FF0RM001.FF0RMUQT[FF0RWIX1] = 0;
      set FF0RM001.FF0RMUQT[FF0RWIX1] initialAttributes;
    else
      FF0RM001.FF0RMHDG[FF0RWIX1] = "PCT  QTY"; /* hdg month 6*/
    end
    FF0RWIX1 = FF0RWIX1 + 1;
  end

  if (FF0RW01.FF0RWTMP[FF0RWPGN] == "N")
    FF0RM001.FF0RMTT1 = " "; /* no total on page*/
    FF0RM001.FF0RMTT2 = " "; /* no total on page*/
    FF0RM001.FF0RMTT3 = " "; /* no total on page*/
    set FF0RM001.FF0RMTT1 invisible, skip;
    set FF0RM001.FF0RMTT2 invisible, skip;
    set FF0RM001.FF0RMTT3 invisible, skip;
  else
    FF0RM001.FF0RMTT1 = "TOTAL  TOTAL"; /**/
    FF0RM001.FF0RMTT2 = " PCT "; /**/
    FF0RM001.FF0RMTT3 = " QTY "; /**/
  end

   /* ------------------------------------------------------------*/
   /* Move requested category's season data to map*/
   /* ------------------------------------------------------------*/

  if (FF0RW00.FF0RWCAT == "Y") /* original category requested*/

    FF0R212(); /* format original category data*/

  end

  if (FF0RW00.FF0RWCAT == "N") /* alternate category requested*/

    FF0R214(); /* format alternate category data*/

  end


end // end FF0R210

// Move original cat data to map
Function FF0R212()
   /* ------------------------------------------------------------*/
   /* Move season data to map*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIXM = 1; /* initialize index*/

  FF0RWIX1 = FF0RW01.FF0RWSTW[FF0RWCUR]; /* start indx*/

  if (FF0RW00.FF0RWCMO == 1) /* page starts with 1st month*/
   /* next sentence*/
  else
    FF0RW00.FF0RWIX1 = FF0RWIX1 + 6; /* add 6 to ws start pos*/
  end
                                   /* max months per seas*/
  while (FF0RWIXM <= FF0RW01.FF0RWMPG[FF0RWPGN]) /* max mos/sesn*/

     /* future pct and qty - yr1*/
    FF0RM001.FF0RMFP1[FF0RWIXM] = FF0RW02.FF0RWFP1[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW02.FF0RWFQ1[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMFQ1[FF0RWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr1*/
    FF0RM001.FF0RMNP1[FF0RWIXM] = FF0RW02.FF0RWNP1[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW02.FF0RWNQ1[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMNQ1[FF0RWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr1*/
    FF0RM001.FF0RMPP1[FF0RWIXM] = FF0RW02.FF0RWPP1[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW02.FF0RWPQ1[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMPQ1[FF0RWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr1*/
    FF0RM001.FF0RMTP1[FF0RWIXM] = FF0RW02.FF0RWTP1[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW02.FF0RWTQ1[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMTQ1[FF0RWIXM] = FFXREC.FFXCHAR;
     /* future pct and qty - yr2*/
    FF0RM001.FF0RMFP2[FF0RWIXM] = FF0RW02.FF0RWFP2[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW02.FF0RWFQ2[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMFQ2[FF0RWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr2*/
    FF0RM001.FF0RMNP2[FF0RWIXM] = FF0RW02.FF0RWNP2[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW02.FF0RWNQ2[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMNQ2[FF0RWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr2*/
    FF0RM001.FF0RMPP2[FF0RWIXM] = FF0RW02.FF0RWPP2[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW02.FF0RWPQ2[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMPQ2[FF0RWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr2*/
    FF0RM001.FF0RMTP2[FF0RWIXM] = FF0RW02.FF0RWTP2[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW02.FF0RWTQ2[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMTQ2[FF0RWIXM] = FFXREC.FFXCHAR;

    FF0RW00.FF0RWIXM = FF0RW00.FF0RWIXM + 1; /* increment index*/
    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

  end

   /* season totals - yr1*/

  if (FF0RW01.FF0RWTMP[FF0RWPGN] == "N") /* total not on map - return*/
    return;
  end

  FF0RWIX1 = FF0RW01.FF0RWTOT[FF0RWCUR];

  FF0RM001.FF0RMMY1 = FF0RW02.FF0RWFP1[FF0RWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW02.FF0RWFQ1[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMNY1 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0RM001.FF0RMOY1 = FF0RW02.FF0RWNP1[FF0RWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW02.FF0RWNQ1[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMPY1 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0RM001.FF0RMQY1 = FF0RW02.FF0RWPP1[FF0RWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW02.FF0RWPQ1[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMRY1 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0RM001.FF0RMSY1 = FF0RW02.FF0RWTP1[FF0RWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW02.FF0RWTQ1[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMTY1 = FFXREC.FFXCHAR; /* seas total qty*/

   /* season totals - yr2*/

  FF0RM001.FF0RMMY2 = FF0RW02.FF0RWFP2[FF0RWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW02.FF0RWFQ2[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMNY2 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0RM001.FF0RMOY2 = FF0RW02.FF0RWNP2[FF0RWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW02.FF0RWNQ2[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMPY2 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0RM001.FF0RMQY2 = FF0RW02.FF0RWPP2[FF0RWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW02.FF0RWPQ2[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMRY2 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0RM001.FF0RMSY2 = FF0RW02.FF0RWTP2[FF0RWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW02.FF0RWTQ2[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMTY2 = FFXREC.FFXCHAR; /* seas total qty*/

end // end FF0R212

// Move alternate cat data to map
Function FF0R214()
   /* ------------------------------------------------------------*/
   /* Move season data to map*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIXM = 1; /* initialize index*/

  FF0RWIX1 = FF0RW01.FF0RWSTW[FF0RWCUR];

  if (FF0RW00.FF0RWCMO == 1) /* page starts with 1st month*/
   /* next sentence*/
  else
    FF0RW00.FF0RWIX1 = FF0RWIX1 + 6;
  end

  while (FF0RW00.FF0RWIXM <= FF0RW01.FF0RWMPG[FF0RWPGN])
                                   /* max months per seas*/
     /* future pct and qty - yr1*/
    FF0RM001.FF0RMFP1[FF0RWIXM] = FF0RW03.FF0RWFP1[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW03.FF0RWFQ1[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMFQ1[FF0RWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr1*/
    FF0RM001.FF0RMNP1[FF0RWIXM] = FF0RW03.FF0RWNP1[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW03.FF0RWNQ1[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMNQ1[FF0RWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr1*/
    FF0RM001.FF0RMPP1[FF0RWIXM] = FF0RW03.FF0RWPP1[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW03.FF0RWPQ1[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMPQ1[FF0RWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr1*/
    FF0RM001.FF0RMTP1[FF0RWIXM] = FF0RW03.FF0RWTP1[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW03.FF0RWTQ1[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMTQ1[FF0RWIXM] = FFXREC.FFXCHAR;
     /* future pct and qty - yr2*/
    FF0RM001.FF0RMFP2[FF0RWIXM] = FF0RW03.FF0RWFP2[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW03.FF0RWFQ2[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMFQ2[FF0RWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr2*/
    FF0RM001.FF0RMNP2[FF0RWIXM] = FF0RW03.FF0RWNP2[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW03.FF0RWNQ2[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMNQ2[FF0RWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr2*/
    FF0RM001.FF0RMPP2[FF0RWIXM] = FF0RW03.FF0RWPP2[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW03.FF0RWPQ2[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMPQ2[FF0RWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr2*/
    FF0RM001.FF0RMTP2[FF0RWIXM] = FF0RW03.FF0RWTP2[FF0RWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0RW03.FF0RWTQ2[FF0RWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0RM001.FF0RMTQ2[FF0RWIXM] = FFXREC.FFXCHAR;

    FF0RW00.FF0RWIXM = FF0RW00.FF0RWIXM + 1; /* increment index*/
    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/

  end

   /* season totals - yr1*/

  if (FF0RW01.FF0RWTMP[FF0RWPGN] == "N") /* total not on map - return*/
    return;
  end

  FF0RWIX1 = FF0RW01.FF0RWTOT[FF0RWCUR]; /* seas tot pos*/

  FF0RM001.FF0RMMY1 = FF0RW03.FF0RWFP1[FF0RWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW03.FF0RWFQ1[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMNY1 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0RM001.FF0RMOY1 = FF0RW03.FF0RWNP1[FF0RWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW03.FF0RWNQ1[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMPY1 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0RM001.FF0RMQY1 = FF0RW03.FF0RWPP1[FF0RWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW03.FF0RWPQ1[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMRY1 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0RM001.FF0RMSY1 = FF0RW03.FF0RWTP1[FF0RWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW03.FF0RWTQ1[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMTY1 = FFXREC.FFXCHAR; /* seas total qty*/

   /* season totals - yr2*/

  FF0RM001.FF0RMMY2 = FF0RW03.FF0RWFP2[FF0RWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW03.FF0RWFQ2[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMNY2 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0RM001.FF0RMOY2 = FF0RW03.FF0RWNP2[FF0RWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW03.FF0RWNQ2[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMPY2 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0RM001.FF0RMQY2 = FF0RW03.FF0RWPP2[FF0RWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW03.FF0RWPQ2[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMRY2 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0RM001.FF0RMSY2 = FF0RW03.FF0RWTP2[FF0RWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0RW03.FF0RWTQ2[FF0RWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0RM001.FF0RMTY2 = FFXREC.FFXCHAR; /* seas total qty*/

end // end FF0R214

// Check Attention Identifier
Function FF0R300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FF0RW00.FF0RWDRF == "Y") /* data requested*/
      set FF0RW02 empty; /* clear display storage*/
      set FF0RW03 empty; /* clear display storage*/
    end
    COMMAREA.CATOAP = " "; /* clear to application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    FF0RW00.FF0RWDRF = "N"; /* data not requested*/
    FF0RW00.FF0RWFMF = "Y"; /* format the map*/
    exit stack; /* return to show error msg*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSFFS01();
      set FF0RM001.CATOAP cursor, bold; /* Highlight*/

    else

      converseLib.validationFailed(36); /* 'PF Keys not valid with Fast Path'*/
      FFWREC.XXXMODID = "300"; /* module identification*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF5 is pressed, go to Production Menu*/
   /* If PF13 is pressed, go to FF0m*/
   /* If PF14 is pressed, go to FF0d*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* pf3 was pressed*/
   || converseVar.eventKey is pf5  /* pf5 was pressed*/
   || converseVar.eventKey is pf13 /* pf13 was pressed*/
   || converseVar.eventKey is pf14) /* pf14 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0RM001"; /* APPLICATION FIND CODE*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "FF0A";
    end

    if (converseVar.eventKey is pf13) /* pf13 was pressed*/
      COMMAREA.CATOAP = "FF0M"; /* Season Pcts*/
    end

    if (converseVar.eventKey is pf14) /* pf14 was pressed*/
      COMMAREA.CATOAP = "FF0D"; /* Future Pcts*/
    end

    XSFFS01();
    exit stack;

  end

  if (converseVar.eventKey is pf10 /* pf10 was pressed*/
   || converseVar.eventKey is pf11 /* pf11 was pressed*/
   || converseVar.eventKey is pf16 /* pf16 was pressed*/
   || converseVar.eventKey is pf17) /* pf17 was pressed*/
    return;
  end

  if (converseVar.eventKey not enter) /* enter was not pressed*/

    converseLib.validationFailed(3); /* Indicate PF key not valid*/
    FFWREC.XXXMODID = "300"; /* Process name*/
    if (converseVar.eventKey is pa1 /* pa1 was pressed*/
     || converseVar.eventKey is pa3) /* pa3 was pressed*/
      converseLib.clearScreen();
      
    end

    exit stack;

  end


end // end FF0R300

// Reset Highlighted Fields
Function FF0R400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0RM001.XPCCD initialAttributes; /* category code*/
  set FF0RM001.YPGCD initialAttributes; /* type grp code*/
  set FF0RM001.FF2SEASN initialAttributes; /* season beg month*/
  set FF0RM001.FF2ALCAT initialAttributes; /* alternate category code*/

  FF0RW00.FF0RWIXM = 1; /* Initialize map index*/

  while (FF0RW00.FF0RWIXM <= 3) /* number of selection codes*/
    set FF0RM001.FF0RMSEL[FF0RWIXM] normal; /* selection*/
    FF0RW00.FF0RWIXM = FF0RW00.FF0RWIXM + 1; /* increment index*/
  end

  FF0RW00.FF0RWIXM = 1; /* Initialize map index*/

  while (FF0RW00.FF0RWIXM <= FF0RW01.FF0RWMPG[FF0RWPGN]) /* reset user %'s*/
    if (FF0RW00.FF0RWCAT == "Y") /* original cat selected*/
      if (FF0RM001.FF2ALCAT == " ") /* no alt cat entered*/
        set FF0RM001.FF0RMUQT[FF0RWIXM] normal;
      else
        set FF0RM001.FF0RMUQT[FF0RWIXM] skip;
      end
    else
      set FF0RM001.FF0RMUQT[FF0RWIXM] skip;
    end
    FF0RW00.FF0RWIXM = FF0RW00.FF0RWIXM + 1; /* increment index*/
  end

  set FF0RM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF0RM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FF0RM001.XPCCD == "?" /* category code list requested*/
   || FF0RM001.YPGCD == "?") /* type group code list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "400"; /* Module identification*/
      FFWREC.XXXMSGNO = 116; /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0RM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0RM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0RM001.XPCABRV = FFWREC.XPCABRV; /* Description*/
    else
      FF0RM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0RM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Description*/

    end

    set FF0RM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Type Group codes.*/
   /* ------------------------------------------------------------*/

  if (FF0RM001.YPGCD == "?") /* Type Group list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0RM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0RM001.YPGABRV = FFWREC.YPGABRV; /* Description*/
    else
      FF0RM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0RM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Description*/

    end

    set FF0RM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested list has been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  FFWREC.XXXMSGNO = 97; /* Indicate press ENTER*/

  exit stack;


end // end FF0R400

// Verify the entered data
Function FF0R500()
   /* ------------------------------------------------------------*/
   /* Edit Item (if entered)*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* item entered*/
    FFWREC.XXXMODID = "500"; /* module identification*/
    set FF0RM001.CAITEM cursor, bold; /* set cursor*/
    converseLib.validationFailed(40); /* 'Enter only with Option'*/
  end

   /* ------------------------------------------------------------*/
   /* Reset modified fields flags*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWDMF = "N"; /* reset data modified flag*/

   /* ------------------------------------------------------------*/
   /* If Data fields were modified, set flag.*/
   /* ------------------------------------------------------------*/

  if (FF0RM001.XPCCD != FFWREC.XPCCD /* category code changed*/
   || FF0RM001.YPGCD != FFWREC.YPGCD /* type group code changed*/
   || FF0RM001.FF2ALCAT != FF0RW01.FF2ALCAT) /* alt category code changed*/
    FF0RW00.FF0RWDMF = "Y"; /* data modified*/
  end

  FF0RW00.FF0RWUPR = "N"; /* update not requested*/

  if (FF0RM001.FF0RMSEL[1] == "S"
   && FF0RW01.FF2PRIND != "1")
    FF0RW01.FF0RWIND = "1"; /* map save*/
    FF0RW00.FF0RWUPR = "Y"; /* update requested*/
    FF0RW00.FF0RWDMF = "Y"; /* data modified*/
  else
    if (FF0RM001.FF0RMSEL[2] == "S"
     && FF0RW01.FF2PRIND != "2")
      FF0RW01.FF0RWIND = "2"; /* map save*/
      FF0RW00.FF0RWUPR = "Y"; /* update requested*/
      FF0RW00.FF0RWDMF = "Y"; /* data modified*/
    else
      if (FF0RM001.FF0RMSEL[3] == "S"
       && FF0RW01.FF2PRIND != "U")
        FF0RW01.FF0RWIND = "U"; /* map save*/
        FF0RW00.FF0RWUPR = "Y"; /* update requested*/
      else
        FF0RW01.FF0RWIND = FF0RW01.FF2PRIND; /* reset to original*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Save user created percentages in working storage*/
   /* ------------------------------------------------------------*/

  if (FF0RW00.FF0RWCUR > 0) /* data has been obtained*/

    FF0RW00.FF0RWIX2 = FF0RW01.FF0RWSTM[FF0RWCUR]; /* init WS start*/

    if (FF0RW00.FF0RWCMO == 1) /* at start of season*/
        /* next sentence*/
    else
      FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 6; /* add 6 to index*/
    end

    if (FF0RW00.FF0RWCAT == "Y") /* original cat requested*/
      FF0RW00.FF0RWIX1 = 1; /* initialize index*/
      while (FF0RW00.FF0RWIX1 <= FF0RW01.FF0RWMPG[FF0RWPGN])
                                   /* number of months on page*/
        if (FF0RM001.FF0RMUQT[FF0RWIX1] != FF0RW02.FF0RWUQT[FF0RWIX2])
          FF0RW02.FF0RWUQT[FF0RWIX2] = FF0RM001.FF0RMUQT[FF0RWIX1];
        end
        FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
        FF0RW00.FF0RWIX2 = FF0RW00.FF0RWIX2 + 1; /* increment index*/
      end

   /* ------------------------------------------------------------*/
   /* if any month's value was changed, set the update switch*/
   /* ------------------------------------------------------------*/
      FF0RW00.FF0RWIX1 = 1; /* initialize index*/
      while (FF0RW00.FF0RWIX1 <= 12) /* twelve months*/

        if (FF0RW02.FF0RWUQT[FF0RWIX1] != FF0RW02.FF0RWSQT[FF0RWIX1]
         && FF0RM001.FF0RMSEL[3] == "S")
          FF0RW00.FF0RWUPR = "Y"; /* update requested*/
        end
        FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
      end
    end

  end


   /* ------------------------------------------------------------*/
   /* If PF10 (scroll left) or PF11 (scroll right) were pressed,*/
   /* verify that the scroll request is valid.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/
    if (FF0RW00.FF0RWDMF == "Y") /* Data modified*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(5); /* 'Scrolling not allowed when data*/
                                   /* modified'*/

    else

      if (FF0RW00.FF0RWPGN < 2) /* and no previous pages*/
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(23); /* 'data at border'*/
      end
    end
  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/
    if (FF0RW00.FF0RWDMF == "Y") /* Data modified*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(5); /* 'Scrolling not allowed when data*/
                                   /* modified'*/

    else

      if (FF0RW00.FF0RWPGN >= FF0RW00.FF0RWMXP) /* and no more pages*/
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(24); /* No more pages to display*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* verify that all selection codes are 's' or ' '.*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWIX1 = 3; /* initialize index*/
  FF0RW00.FF0RWSCT = 0; /* initialize counter*/

  while (FF0RW00.FF0RWIX1 > 0)
    if (FF0RM001.FF0RMSEL[FF0RWIX1] == "S")
      FF0RW00.FF0RWSCT = FF0RW00.FF0RWSCT + 1; /* increment selection cnt*/
    else
      if (FF0RM001.FF0RMSEL[FF0RWIX1] != " ") /* not equal space*/
        converseLib.validationFailed(41); /* 'must be s or space'*/
        FFWREC.XXXMODID = "500"; /* module identification*/
        set FF0RM001.FF0RMSEL[FF0RWIX1] cursor, bold; /* set cursor*/
      end
    end
    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 - 1; /* decrement index*/
  end

   /* ------------------------------------------------------------*/
   /* If selection was made, verify that only one indicator was*/
   /* chosen. If more than one chosen, display error message*/
   /* ------------------------------------------------------------*/

  if (FF0RW00.FF0RWSCT > 1)
    converseLib.validationFailed(73); /* 'Only one option may be chosen'*/
    FFWREC.XXXMODID = "500"; /* module identification*/
    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    FF0RW00.FF0RWFSF = "Y"; /* first selection flag*/
    while (FF0RW00.FF0RWIX1 <= 3)
      if (FF0RM001.FF0RMSEL[FF0RWIX1] == "S") /* selection made*/
        if (FF0RW00.FF0RWFSF == "Y") /* selection made*/
          FF0RW00.FF0RWFSF = "N";
        else
          set FF0RM001.FF0RMSEL[FF0RWIX1] cursor, bold; /* set cursor*/
        end
      end
      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Alternate Category code has been changed and isn't*/
   /* a space, verify it's validity.*/
   /* ------------------------------------------------------------*/

  if (FF0RM001.FF2ALCAT != FF0RW01.FF2ALCAT /* alternate category changed*/
   && FF0RM001.FF2ALCAT != " ")             /* alternate category not space*/
    FF0R510(); /* verify alt cat for ftwr fcstg*/
  end

   /* ------------------------------------------------------------*/
   /* If Type Group code has been changed, verify its validity.*/
   /* ------------------------------------------------------------*/

  if (FF0RM001.YPGCD != FFWREC.YPGCD) /* Type Group code changed*/
    if (FF0RM001.YPGCD in YPGTBL.YPGCD           /* if code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* status is active*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* valid for forecasting*/
      FF0RM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* move abrv to map*/
    else
      FF0RM001.YPGABRV = " "; /* clear description*/
      converseLib.validationFailed(10); /* 'invalid value entered'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0RM001.YPGCD cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Category code has changed, verify its validity.*/
   /* ------------------------------------------------------------*/

  if (FF0RM001.XPCCD != FFWREC.XPCCD) /* Category code changed*/
    FF0R520(); /* verify orig cat for ftwr fcstg*/
  end

   /* ------------------------------------------------------------*/
   /* if PF16 was pressed, the alternate category code must*/
   /* be present; otherwise, display error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    if (FF0RM001.FF2ALCAT == " ") /* alternate category not entered*/
      converseLib.validationFailed(150); /* ' alternate category code not*/
                                   /* entered'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0RM001.FF2ALCAT cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF16 or PF17 was pressed and data was changed, display*/
   /* error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17) /* PF17 was pressed*/
    if (FF0RW00.FF0RWDMF == "Y") /* data was modified*/
      converseLib.validationFailed(111);
                                   /* 'function not allowed - data changed'*/
      FFWREC.XXXMODID = "500"; /* module identification*/

      FF0RW00.FF0RWIX1 = 3; /* initialize index*/
      while (FF0RW00.FF0RWIX1 > 0)
        if (FF0RM001.FF0RMSEL[FF0RWIX1] != FF0RW01.FF0RWSEL[FF0RWIX1])
          set FF0RM001.FF0RMSEL[FF0RWIX1] cursor, bold; /* set cursor*/
        end
        FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 - 1; /* decrement index*/
      end

      if (FF0RM001.FF2ALCAT != FF0RW01.FF2ALCAT)
                                   /* alt category code changed*/
        set FF0RM001.FF2ALCAT cursor, bold; /* set cursor*/
      end
      if (FF0RM001.FF2SEASN != FF0RW01.FF0RWMBM) /* beg month changed*/
        set FF0RM001.FF2SEASN cursor, bold; /* set cursor*/
      end
      if (FF0RM001.YPGCD != FFWREC.YPGCD) /* type group code changed*/
        set FF0RM001.YPGCD cursor, bold; /* set cursor*/
      end
      if (FF0RM001.XPCCD != FFWREC.XPCCD) /* category code changed*/
        set FF0RM001.XPCCD cursor, bold; /* set cursor*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if Category code or type group were not entered on screen*/
   /* highlight appropriate field and display error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/

    if (FF0RM001.YPGCD == " ") /* Type Group code not entered*/
      converseLib.validationFailed(8); /* 'Required field, please enter'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0RM001.YPGCD cursor, bold; /* set cursor*/
    end

    if (FF0RM001.XPCCD == " ") /* Category code not entered*/
      converseLib.validationFailed(8); /* 'Required field, please enter'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0RM001.XPCCD cursor, bold; /* set cursor*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If user created %'s modified check for all seasons = 100%*/
   /* ------------------------------------------------------------*/

  if (FF0RM001.FF0RMSEL[3] == "S"
   && converseVar.eventKey is enter)
    FF0RWIXM = 1;
    while (FF0RWIXM <= FF0RW01.FF2NSEAS)
      FF0R505(); /* check user percentages*/
      FF0RWIXM = FF0RWIXM + 1; /* increment index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end



end // end FF0R500

// Check user created percentages
Function FF0R505()
   /* ------------------------------------------------------------*/
   /* If user created %'s modified check for all seasons = 100%*/
   /* ------------------------------------------------------------*/

  FF0RWIX1 = 1; /* initialize index*/
  FF0RW00.FF0RWNUM = 0; /* initialize work field*/
  while (FF0RW00.FF0RWIX1 < FF0RWIXM) /* while lt current season*/
                                   /* accumulate season lengths*/
    FF0RW00.FF0RWNUM = FF0RWNUM + FF0RW01.FF0RWMNS[FF0RWIX1];
    FF0RW00.FF0RWIX1 = FF0RWIX1 + 1; /* increment index*/
  end

  FF0RWIX6 = FF0RWNUM + FF0RWMNS[FF0RWIXM]; /* accum current sesn length*/
                                  /* to get last mo in next sesn*/
  FF0RWNUM = FF0RWNUM + 1; /* begining of next season*/
  move FF0RWNUM to FF0RWIX1 withV60Compat; /* initialize index to start of*/
                                  /* current season*/

  FF0RW01.FF0RWNMX = 0; /* while in range of mos for this*/

  while (FF0RW00.FF0RWIX1 <= FF0RWIX6) /* while in range of mos for this*/
                                   /* season*/
    if (FF0RM001.FF2ALCAT == " ") /* no alt cat chosen*/
      FF0RW01.FF0RWNMX = FF0RW01.FF0RWNMX + FF0RW02.FF0RWUQT[FF0RWIX1];
    else
      FF0RW01.FF0RWNMX = FF0RW01.FF0RWNMX + FF0RW03.FF0RWAQT[FF0RWIX1];
    end
    FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
  end

  if (FF0RW01.FF0RWNMX != 100) /* user created %'s not = 100*/
    if (FF0RM001.FF2ALCAT == " ") /* no alt cat chosen*/
      if (FF0RW00.FF0RWCAT == "Y") /* original cat requested*/
        set FF0RM001.FF0RMUQT[1] cursor;
        converseLib.validationFailed(386); /* user created percents must be > 0*/
        FFWREC.XXXMODID = "505"; /* module identification*/
      else
        set FF0RM001.FF0RMSEL[3] cursor;
        converseLib.validationFailed(388); /* orig cat user created index invalid*/
        FFWREC.XXXMODID = "505"; /* module identification*/
      end
    else
      FF0RM001.FF0RMSEL[1] = "S"; /* alt index invalid reset to 1*/
      FF0RM001.FF0RMSEL[3] = " ";
      FF0RW01.FF0RWIND = "1"; /* map save*/
      FF0RW00.FF0RWUPR = "Y"; /* update requested*/
      FFWREC.XXXMSGNO = 387; /* indicate reset to 1 after update*/
      FFWREC.XXXMODID = "505"; /* module identification*/
      set FF0RM001.FF0RMSEL[1] cursor;
    end
  end

end // end FF0R505

// Verify alt cat for FF
Function FF0R510()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Set up key - Footwear Forecast XREF Table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* initialize record*/

  FF2REC.XPCCD = FF0RM001.FF2ALCAT; /* alt cat code*/
  FF2REC.YPGCD = FF0RM001.YPGCD; /* type group*/
  FF2REC.YSMXDV = "10"; /* division group code*/
  FF2REC.XPLCD = "*"; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XPCREC.XPCCD = FF0RM001.FF2ALCAT;
      XPCREC.XGPCD = COMMAREA.XGPCD;
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* if code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* status is active*/
        FF0RM001.FF0RMACD = XPCTBL.XPCABRV[sysVar.arrayIndex];
        set FFDREC empty;
        FFDREC.XPCCD = FF0RM001.FF2ALCAT;
        FF0R127(); /* get user created %, alt cat*/
      else
        converseLib.validationFailed(10); /* 'invalid value entered'*/
        FFWREC.XXXMODID = "510"; /* module identification*/
        set FF0RM001.FF2ALCAT cursor, bold; /* set cursor*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      converseLib.validationFailed(10); /* 'invalid value entered'*/
      FFWREC.XXXMODID = "510"; /* module identification*/
      set FF0RM001.FF2ALCAT cursor, bold; /* set cursor*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0R510

// Verify orig cat for FF
Function FF0R520()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Set up key - Footwear Forecast XREF Table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* initialize record*/

  FF2REC.XPCCD = FF0RM001.XPCCD; /* orig cat code*/
  FF2REC.YPGCD = FF0RM001.YPGCD; /* type group*/
  FF2REC.YSMXDV = "10"; /* division group code*/
  FF2REC.XPLCD = "*"; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XPCREC.XPCCD = FF0RM001.XPCCD;
      XPCREC.XGPCD = COMMAREA.XGPCD;
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* if code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* status is active*/
        FF0RM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
        FF0RW00.FF0RWNCF = "Y"; /* new cat requested*/
      else
        FF0RM001.XPCABRV = "      ";
        converseLib.validationFailed(10); /* 'invalid value entered'*/
        FFWREC.XXXMODID = "520"; /* module identification*/
        set FF0RM001.XPCCD cursor, bold; /* set cursor*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      FF0RM001.XPCABRV = "      ";
      converseLib.validationFailed(10); /* 'invalid value entered'*/
      FFWREC.XXXMODID = "520"; /* module identification*/
      set FF0RM001.XPCCD cursor, bold; /* set cursor*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0R520

// Process Valid Input Request
Function FF0R600()
   /* ------------------------------------------------------------*/
   /* Indicate map must be formatted*/
   /* ------------------------------------------------------------*/

  FF0RW00.FF0RWFMF = "Y"; /* Format map*/

   /* ------------------------------------------------------------*/
   /* If PF10, decrement the page requested and return to the*/
   /* calling process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* PF10 was pressed*/
    if (FF0RW00.FF0RWCAT == "Y") /* original category data*/
      FFWREC.XXXMSGNO = 162; /* 'viewing original category data'*/
    else
      if (FF0RW00.FF0RWCAT == "N") /* alternate category data*/
        FFWREC.XXXMSGNO = 163; /* 'viewing alt category data'*/
      end
    end
    if (FF0RW01.FF0RWMNS[FF0RWCUR] > 6) /* current season longer than 6*/
      if (FF0RW01.FF0RWTMP[FF0RWPGN] == "Y") /* total on current page*/
        FF0RW00.FF0RWCMO = 1; /* season start month*/
        FF0RW00.FF0RWPGN = FF0RW00.FF0RWPGN - 1; /* subtract 1 curr page*/
      else
        FF0RW00.FF0RWCUR = FF0RW00.FF0RWCUR - 1;
                                   /* sub 1 from curr season*/
        FF0RW00.FF0RWPGN = FF0RW00.FF0RWPGN - 1; /* subtract 1 curr page*/
        if (FF0RW01.FF0RWMNS[FF0RWCUR] > 6) /* prev season longer than 6*/
          FF0RW00.FF0RWCMO = 7; /* season start month*/
        else
          FF0RW00.FF0RWCMO = 1; /* season start month*/
        end
      end
    else
      FF0RW00.FF0RWCUR = FF0RW00.FF0RWCUR - 1; /* sub 1 from curr season*/
      FF0RW00.FF0RWPGN = FF0RW00.FF0RWPGN - 1; /* subtract 1 curr page*/
      if (FF0RW01.FF0RWMNS[FF0RWCUR] > 6) /* prev season longer than 6*/
        FF0RW00.FF0RWCMO = 7; /* season start month*/
      else
        FF0RW00.FF0RWCMO = 1; /* season start month*/
      end
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If PF11, increment the page requested and return to the*/
   /* calling process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* PF11 was pressed*/
    if (FF0RW00.FF0RWCAT == "Y") /* original category data*/
      FFWREC.XXXMSGNO = 162; /* 'viewing original category data'*/
    else
      if (FF0RW00.FF0RWCAT == "N") /* alternate category data*/
        FFWREC.XXXMSGNO = 163; /* 'viewing alt category data'*/
      end
    end
    if (FF0RW01.FF0RWTMP[FF0RWPGN] == "Y") /* total on current page*/
      FF0RW00.FF0RWCUR = FF0RW00.FF0RWCUR + 1; /* add 1 curr season*/
      FF0RW00.FF0RWCMO = 1; /* season start month*/
      FF0RW00.FF0RWPGN = FF0RW00.FF0RWPGN + 1; /* add 1 curr page*/
    else
      FF0RW00.FF0RWPGN = FF0RW00.FF0RWPGN + 1; /* add 1 curr page*/
      FF0RW00.FF0RWCMO = 7; /* season start month*/
    end
    return;
  end


   /* ------------------------------------------------------------*/
   /* If PF16 was pressed, display alternate category data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* pf16 was pressed*/

    FF0RW00.FF0RWCAT = "N"; /* set for alternate cat data*/
    FF0RW00.FF0RWPGN = 1; /* set page nbr*/
    FF0RW00.FF0RWCUR = 1; /* set current season*/
    FF0RW00.FF0RWCMO = 1; /* set season start month*/
    FFWREC.XXXMSGNO = 163; /* 'viewing alt category data'*/
    FFWREC.XXXMODID = "600"; /* module identification*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If PF17 was pressed, display original category data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* pf17 was pressed*/

    FF0RW00.FF0RWCAT = "Y"; /* set for original cat data*/
    FF0RW00.FF0RWPGN = 1; /* set page nbr*/
    FF0RW00.FF0RWCUR = 1; /* set current season*/
    FF0RW00.FF0RWCMO = 1; /* set season start month*/
    FFWREC.XXXMSGNO = 162; /* 'viewing original category data'*/
    FFWREC.XXXMODID = "600"; /* module identification*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FF system COMMAREA.*/
   /* ------------------------------------------------------------*/
  if (FF0RM001.XPCCD != FFWREC.XPCCD /* category code changed*/
   || FF0RM001.YPGCD != FFWREC.YPGCD) /* type group code changed*/
    FFWREC.XPCCD = FF0RM001.XPCCD; /* category code*/
    FFWREC.YPGCD = FF0RM001.YPGCD; /* type group code*/
    FFWREC.XPCABRV = FF0RM001.XPCABRV; /* category abrv*/
    FFWREC.YPGABRV = FF0RM001.YPGABRV; /* type abrv*/
    FF0RW01.FF0RWMBM = FF0RM001.FF2SEASN; /* map beg month*/
    FF0RW01.FF2ALCAT = FF0RM001.FF2ALCAT; /* alt cat code*/
    FF0RW01.FF0RWACA = FF0RM001.FF0RMACD; /* alt cat abrv*/
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/
    if (FF0RM001.XPCCD != " " /* cat entered*/
     && FF0RM001.YPGCD != " ") /* & type grp entered*/
      FF0RW00.FF0RWDRF = "Y"; /* data requested*/
    else
      FF0RW00.FF0RWDRF = "N"; /* data requested*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If alternate category or history future indicator were*/
   /* changed, perform update and display data.*/
   /* ------------------------------------------------------------*/

  if (FF0RM001.FF2ALCAT != FF0RW01.FF2ALCAT /* alternate category changed*/
   || FF0RW00.FF0RWUPR == "Y")              /* update requested*/
    FF0R610(); /* update table row*/
    FF0RW01.FF2ALCAT = FF0RM001.FF2ALCAT; /* alt cat code*/
    if (FFWREC.XXXMSGNO == 0)
      FFWREC.XXXMSGNO = 032; /* 'update successful'*/
      FFWREC.XXXMODID = "600"; /* module identification*/
    end
    /* ------------------------------------------------------------*/
     /* commit all changes to protected resources*/
    /* ------------------------------------------------------------*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/

    FF0RW00.FF0RWDRF = "Y"; /* data requested*/
  end

  FF0R620(); /* set data to display*/


end // end FF0R600

// update user created %'s
Function FF0R605()

  set FFCREC empty;

  FFCREC.FFABEGMO = FF0RW01.FF0RWMTS[1]; /* beg month in range*/
  FFCREC.FFAENDMO = FF0RW01.FF0RWMTS[12]; /* end month in range*/

  FF0R606(); /* select dfcast.vrcat001 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (FFCREC.FFCPDIND != "U")
      FF0R607(); /* update dfcast.vrcat001 row*/
    end
    FFDREC.XPCCD = FFWREC.XPCCD;
    FF0R123(); /* select 's1' dfcast.vrcmth01*/
    FF0R124(); /* fetch 'n1' dfcast.vrcmth01*/
    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= 12
     && SQLCA.VAGen_SQLCODE == 0)
      if (FF0RW02.FF0RWUQT[FF0RWIX1] != FFDREC.FFDPDPCT)
        FFDREC.FFDPDPCT = FF0RW02.FF0RWUQT[FF0RWIX1];
        FF0RW02.FF0RWSQT[FF0RWIX1] = FF0RW02.FF0RWUQT[FF0RWIX1];
        FF0R611(); /* update dfcast.vrcmth01*/
      end
      FF0R124(); /* fetch 'n1' dfcast.vrcmth01*/
      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    end
    FF0R125(); /* close 'c1' dfcast.vrcmth01*/
  else
    FF0R612(); /* add dfcast.vrcat001 row*/
    set FFDREC empty;
    FFDREC.FFABEGMO = FFCREC.FFABEGMO;
    FFDREC.FFAENDMO = FFCREC.FFAENDMO;
    FF0RW00.FF0RWIX1 = 1; /* initialize index*/
    while (FF0RW00.FF0RWIX1 <= 12
     && SQLCA.VAGen_SQLCODE == 0)
      FFDREC.FFDPDPCT = FF0RW02.FF0RWUQT[FF0RWIX1];
      FF0RW02.FF0RWSQT[FF0RWIX1] = FF0RW02.FF0RWUQT[FF0RWIX1];
      FF0R613(); /* add dfcast.vrcmth01 row*/
      FF0RW00.FF0RWIX1 = FF0RW00.FF0RWIX1 + 1; /* increment index*/
    end
  end

end // end FF0R605

// select vrcat001
Function FF0R606()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/

  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/

  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "606"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0R606

// update dfcast.vrcat001
Function FF0R607()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/

  FFCREC.FFCPDIND = "U"; /* user created data indicator*/

  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3760" ("U ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF0RW00.FF0RWDRF = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "607"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "607"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0R607

// update table row
Function FF0R610()
   /* ------------------------------------------------------------*/
   /* Set record to original category data*/
   /* ------------------------------------------------------------*/

  set FF2REC empty;
  FF2REC.FF2GROUP = FF0RW01.FF2GROUP;

   /* ------------------------------------------------------------*/
   /* Obtain current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  FF2REC.FF2ALCAT = FF0RM001.FF2ALCAT; /* alternate cat code*/

  if (FF0RM001.FF0RMSEL[1] == "S") /* one year ago selected*/
    FF2REC.FF2PRIND = "1"; /* demand indicator*/
    FF0RW01.FF2PRIND = "1"; /* saved demand indicator*/
  end

  if (FF0RM001.FF0RMSEL[2] == "S") /* one year ago selected*/
    FF2REC.FF2PRIND = "2"; /* demand indicator*/
    FF0RW01.FF2PRIND = "2"; /* saved demand indicator*/
  end

  if (FF0RM001.FF0RMSEL[3] == "S") /* one year ago selected*/
    FF2REC.FF2PRIND = "U"; /* demand indicator*/
    FF0RW01.FF2PRIND = "U"; /* saved demand indicator*/
    if (FF0RW00.FF0RWCAT == "Y" /* original category requested*/
     && FF0RM001.FF2ALCAT == " ") /* no alternate cat code*/
      FF0R605(); /* update vrcmth01 with percents*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Update Cross Reference Table Row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("U ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* database updated by another user*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes made by user*/
        FFWREC.XXXMODID = "610"; /* Module identification*/
        FFWREC.XXXMSGNO = 46; /* 'database updated by another user'*/
        FF0RW00.FF0RWDRF = "Y"; /* data requested*/
        exit stack; /* Exit to display map*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    converseLib.validationFailed(47); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(01); /* error, notify progamming staff*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FFWREC.XXXMODID = "610"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0R610

// update dfcast.vrcmth01
Function FF0R611()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/

  FFDREC.FF4FCTMO = FF0RW01.FF0RWMTS[FF0RWIX1]; /* move fcst month*/

  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3770" ("U ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF0RW00.FF0RWDRF = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "611"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0R611

// add dfcast.vrcat001
Function FF0R612()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/

  FFCREC.FFCPDIND = "U"; /* set user created indicator*/

  FFCREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3760" ("A ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0R612

// add dfcast.vrcmth01
Function FF0R613()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/

  FFDREC.YPGCD = FFWREC.YPGCD;
  FFDREC.XPCCD = FFWREC.XPCCD;
  FFDREC.FF4FCTMO = FF0RW01.FF0RWMTS[FF0RWIX1];

  FFDREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3770" ("A ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0R613

// determine data request
Function FF0R620()
   /* ------------------------------------------------------------*/
   /* If viewing alternate category and alternate category code*/
   /* changed to spaces, display original category data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FF0RW00.FF0RWCAT == "N") /* alternate category displayed*/
      if (FF0RM001.FF2ALCAT == " ") /* alt category code spaces*/
        FF0RW00.FF0RWPGN = 1; /* first season - orig cat*/
        FF0RW00.FF0RWCUR = 1; /* current season*/
        FF0RW00.FF0RWCMO = 1; /* season start month*/
        FF0RW00.FF0RWCAT = "Y"; /* orig cat requested*/
        FF0RW00.FF0RWDRF = "Y"; /* data requested*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If viewing alternate category and alternate category code*/
   /* changed to non-spaces, exit to obtain data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FF0RW00.FF0RWCAT == "N") /* alternate category displayed*/
      if (FF0RM001.FF2ALCAT != FF0RW01.FF2ALCAT) /* alt cat changed*/
        FF0RW00.FF0RWPGN = 1; /* first season - alt cat*/
        FF0RW00.FF0RWCUR = 1; /* current season*/
        FF0RW00.FF0RWCMO = 1; /* season start month*/
        FF0RW00.FF0RWDRF = "Y"; /* data requested*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If viewing original category and alternate category code*/
   /* changed to non-spaces, exit to obtain data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FF0RW00.FF0RWCAT == "Y") /* original cat data displayed*/
      if (FF0RM001.FF2ALCAT != FF0RW01.FF2ALCAT
       && FF0RM001.FF2ALCAT != " ") /* alt category code spaces*/
        FF0RW00.FF0RWPGN = 1; /* first season - orig cat*/
        FF0RW00.FF0RWCUR = 1; /* current season*/
        FF0RW00.FF0RWCMO = 1; /* season start month*/
        FF0RW00.FF0RWDRF = "Y"; /* data requested*/
        return;
      end
    end
  end


end // end FF0R620

//*** RECORD=FF0RW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// FF135 11/20/90 MDANGE -
// Added FF0RWIX4 index for master range of months
// ***********************
Record FF0RW00 type basicRecord
  10 FF0RWFMF FF0RWFMF ; 
  10 FF0RWDRF FF0RWDRF ; 
  10 FF0RWDMF FF0RWDMF ; 
  10 FF0RWBMF FF0RWBMF ; 
  10 FF0RWBMA FF0RWBMA ; 
  10 FF0RWFSF FF0RWFSF ; 
  10 FF0RWUPR FF0RWUPR ; 
  10 FF0RWNCF FF0RWNCF ; 
  10 FF0RWYRF FF0RWYRF ; 
  10 FF0RWRCT FF0RWRCT ; 
  10 FF0RWSCT FF0RWSCT ; 
  10 FF0RWCTS FF0RWCTS ; 
  10 FF0RWCMS FF0RWCMS ; 
  10 FF0RWMMS FF0RWMMS [3] ; 
  10 FF0RWPGN FF0RWPGN ; 
  10 FF0RWCAT FF0RWCAT ; 
  10 FF0RWCWK FF0RWCWK ; 
  10 FF0RWCMO FF0RWCMO ; 
  10 FF0RWMXP FF0RWMXP ; 
  10 FF0RWCUR FF0RWCUR ; 
  10 FF0RWNUM FF0RWNUM ; 
  10 FF0RWCDT FF0RWCDT ; 
    15 FF0RWYMC FF0RWYMC ; 
      20 FF0RWYRC FF0RWYRC ; 
      20 FF0RWMNC FF0RWMNC ; 
    15 FF0RWDAY FF0RWDAY ; 
  10 FF0RWDT FF0RWDT ; 
    15 FF0RWYY FF0RWYY ; 
    15 FF0RWMM FF0RWMM ; 
  10 FF0RWIX1 FF0RWIX1 ; 
  10 FF0RWIX2 FF0RWIX2 ; 
  10 FF0RWIX3 FF0RWIX3 ; 
  10 FF0RWIX4 FF0RWIX4 ; 
  10 FF0RWIX5 FF0RWIX5 ; 
  10 FF0RWIX6 FF0RWIX6 ; 
  10 FF0RWIXM FF0RWIXM ; 
  10 FF0RWCNT FF0RWCNT ; 
  10 CACHGFL CACHGFL ; 
  10 FF0RWSCR FF0RWSCR ; 
  10 FF0RWKD1 FF0RWKD1 ; 
    15 FF0RWKC1 FF0RWKC1 ; 
    15 FF0RWKM1 FF0RWKM1 ; 
  10 FF0RWKD2 FF0RWKD2 ; 
    15 FF0RWKC2 FF0RWKC2 ; 
    15 FF0RWKM2 FF0RWKM2 ; 
end // end FF0RW00

//*** RECORD=FF0RW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// Some of the fields in this record follow this format:
// FF0rWXYZ
// 
// X being one of the following codes:
//             M = FUTURE TOTAL PCT
//             N = FUTURE TOTAL QTY
//             O = NAT'L TOTAL PCT
//             P = NAT'L TOTAL QTY
//             Q = PROP TOTAL PCT
//             R = PROP TOTAL QTY
//             S = TOTAL PCT
//             T = TOTAL QTY
// 
// YZ being one of the following codes:
//             Y1 = One Year Ago
//             Y2 = Two Years Ago
//             CB = Combined Years
// 
// FF135 11/20/90 MDANGE
// Added FF0RWNMX accumulator for user created percentages
// Added FF0RWMTS array for current months in index
// ***********************
Record FF0RW01 type basicRecord
  10 FF2GROUP FF2GROUP ; 
  10 FF0RWMBM FF0RWMBM ; 
  10 FF2ALCAT FF2ALCAT ; 
  10 FF0RWACA FF0RWACA ; 
  10 FF0RWSEL FF0RWSEL [3] ; 
  10 FF2SEASN FF2SEASN [4] ; 
  10 FF0RWMNS FF0RWMNS [4] ; 
  10 FF0RWTMP FF0RWTMP [5] ; 
  10 FF0RWTOT FF0RWTOT [4] ; 
  10 FF0RWMPG FF0RWMPG [5] ; 
  10 FF0RWSTW FF0RWSTW [4] ; 
  10 FF0RWSTM FF0RWSTM [4] ; 
  10 FF0RWM11 FF0RWM11 [12] ; 
  10 FF0RWM12 FF0RWM12 [12] ; 
  10 FF0RWM13 FF0RWM13 [12] ; 
  10 FF0RWM14 FF0RWM14 [12] ; 
  10 FF0RWM21 FF0RWM21 [12] ; 
  10 FF0RWM22 FF0RWM22 [12] ; 
  10 FF0RWM23 FF0RWM23 [12] ; 
  10 FF0RWM24 FF0RWM24 [12] ; 
  10 FF0RWDDT FF0RWDDT ; 
    15 FF0RWDYY FF0RWDYY ; 
    15 FF0RWDMM FF0RWDMM ; 
  10 FF2NSEAS FF2NSEAS ; 
  10 FF0RWWNS FF0RWWNS ; 
  10 FF2PRIND FF2PRIND ; 
  10 FF0RWIND FF0RWIND ; 
  10 FF0RWNMX FF0RWNMX ; 
  10 FF0RWMTS FF0RWMTS [12] ; 
end // end FF0RW01

//*** RECORD=FF0RW02 ****
// ----------------------------------------------
// Application working storage for orig cat data.
// ----------------------------------------------
// 
// Some of the fields in this record follow this format:
// FF0rWXYZ.
// 
// X being one of the following codes:
//          A = PRE-ALLOCATED FUTURE QTY
//          B = ALLOCATED FUTURE QTY
//          C = SHIP FUTURE QTY
//          D = CANCEL FUTURE QTY
//          E = PRE-ALLOCATED NAT'L QTY
//          F = ALLOCATED NAT'L QTY
//          G = SHIP NAT'L QTY
//          H = CANCEL NAT'L QTY
//          I = PRE-ALLOCATED PROP QTY
//          J = ALLOCATED PROP QTY
//          K = SHIP PROP QTY
//          L = CANCEL PROP QTY
// 
// Y being one of the following codes:
//          1 = One Year Ago
//          2 = Two Years Ago
// 
// Z being one of the following codes:
//          1 = Season One
//          2 = Season Two
//          3 = Season Three
// FF135 11/20/90 MDANGE
// Deleted fields for combined values
// Added FF0RWUQT array for user created percentages
// Added FF0RWsQT array of saved table values - user percentage
// ***********************
Record FF0RW02 type basicRecord
  10 XPCCD XPCCD ; 
  10 FF0RWSN1 FF0RWSN1 ; 
    15 FF0RWMS1 FF0RWMS1 [12] ; 
      20 FF0RWA11 FF0RWA11 ; 
      20 FF0RWB11 FF0RWB11 ; 
      20 FF0RWC11 FF0RWC11 ; 
      20 FF0RWD11 FF0RWD11 ; 
      20 FF0RWE11 FF0RWE11 ; 
      20 FF0RWF11 FF0RWF11 ; 
      20 FF0RWG11 FF0RWG11 ; 
      20 FF0RWH11 FF0RWH11 ; 
      20 FF0RWI11 FF0RWI11 ; 
      20 FF0RWJ11 FF0RWJ11 ; 
      20 FF0RWK11 FF0RWK11 ; 
      20 FF0RWL11 FF0RWL11 ; 
      20 FF0RWA21 FF0RWA21 ; 
      20 FF0RWB21 FF0RWB21 ; 
      20 FF0RWC21 FF0RWC21 ; 
      20 FF0RWD21 FF0RWD21 ; 
      20 FF0RWE21 FF0RWE21 ; 
      20 FF0RWF21 FF0RWF21 ; 
      20 FF0RWG21 FF0RWG21 ; 
      20 FF0RWH21 FF0RWH21 ; 
      20 FF0RWI21 FF0RWI21 ; 
      20 FF0RWJ21 FF0RWJ21 ; 
      20 FF0RWK21 FF0RWK21 ; 
      20 FF0RWL21 FF0RWL21 ; 
  10 * char(1) ; 
  10 FF0RWSN2 FF0RWSN2 ; 
    15 FF0RWMS2 FF0RWMS2 [12] ; 
      20 FF0RWA12 FF0RWA12 ; 
      20 FF0RWB12 FF0RWB12 ; 
      20 FF0RWC12 FF0RWC12 ; 
      20 FF0RWD12 FF0RWD12 ; 
      20 FF0RWE12 FF0RWE12 ; 
      20 FF0RWF12 FF0RWF12 ; 
      20 FF0RWG12 FF0RWG12 ; 
      20 FF0RWH12 FF0RWH12 ; 
      20 FF0RWI12 FF0RWI12 ; 
      20 FF0RWJ12 FF0RWJ12 ; 
      20 FF0RWK12 FF0RWK12 ; 
      20 FF0RWL12 FF0RWL12 ; 
      20 FF0RWA22 FF0RWA22 ; 
      20 FF0RWB22 FF0RWB22 ; 
      20 FF0RWC22 FF0RWC22 ; 
      20 FF0RWD22 FF0RWD22 ; 
      20 FF0RWE22 FF0RWE22 ; 
      20 FF0RWF22 FF0RWF22 ; 
      20 FF0RWG22 FF0RWG22 ; 
      20 FF0RWH22 FF0RWH22 ; 
      20 FF0RWI22 FF0RWI22 ; 
      20 FF0RWJ22 FF0RWJ22 ; 
      20 FF0RWK22 FF0RWK22 ; 
      20 FF0RWL22 FF0RWL22 ; 
  10 * char(1) ; 
  10 FF0RWSN3 FF0RWSN3 ; 
    15 FF0RWMS3 FF0RWMS3 [12] ; 
      20 FF0RWA13 FF0RWA13 ; 
      20 FF0RWB13 FF0RWB13 ; 
      20 FF0RWC13 FF0RWC13 ; 
      20 FF0RWD13 FF0RWD13 ; 
      20 FF0RWE13 FF0RWE13 ; 
      20 FF0RWF13 FF0RWF13 ; 
      20 FF0RWG13 FF0RWG13 ; 
      20 FF0RWH13 FF0RWH13 ; 
      20 FF0RWI13 FF0RWI13 ; 
      20 FF0RWJ13 FF0RWJ13 ; 
      20 FF0RWK13 FF0RWK13 ; 
      20 FF0RWL13 FF0RWL13 ; 
      20 FF0RWA23 FF0RWA23 ; 
      20 FF0RWB23 FF0RWB23 ; 
      20 FF0RWC23 FF0RWC23 ; 
      20 FF0RWD23 FF0RWD23 ; 
      20 FF0RWE23 FF0RWE23 ; 
      20 FF0RWF23 FF0RWF23 ; 
      20 FF0RWG23 FF0RWG23 ; 
      20 FF0RWH23 FF0RWH23 ; 
      20 FF0RWI23 FF0RWI23 ; 
      20 FF0RWJ23 FF0RWJ23 ; 
      20 FF0RWK23 FF0RWK23 ; 
      20 FF0RWL23 FF0RWL23 ; 
  10 FF0RWSN4 FF0RWSN4 ; 
    15 FF0RWMS4 FF0RWMS4 [12] ; 
      20 FF0RWA14 FF0RWA14 ; 
      20 FF0RWB14 FF0RWB14 ; 
      20 FF0RWC14 FF0RWC14 ; 
      20 FF0RWD14 FF0RWD14 ; 
      20 FF0RWE14 FF0RWE14 ; 
      20 FF0RWF14 FF0RWF14 ; 
      20 FF0RWG14 FF0RWG14 ; 
      20 FF0RWH14 FF0RWH14 ; 
      20 FF0RWI14 FF0RWI14 ; 
      20 FF0RWJ14 FF0RWJ14 ; 
      20 FF0RWK14 FF0RWK14 ; 
      20 FF0RWL14 FF0RWL14 ; 
      20 FF0RWA24 FF0RWA24 ; 
      20 FF0RWB24 FF0RWB24 ; 
      20 FF0RWC24 FF0RWC24 ; 
      20 FF0RWD24 FF0RWD24 ; 
      20 FF0RWE24 FF0RWE24 ; 
      20 FF0RWF24 FF0RWF24 ; 
      20 FF0RWG24 FF0RWG24 ; 
      20 FF0RWH24 FF0RWH24 ; 
      20 FF0RWI24 FF0RWI24 ; 
      20 FF0RWJ24 FF0RWJ24 ; 
      20 FF0RWK24 FF0RWK24 ; 
      20 FF0RWL24 FF0RWL24 ; 
  10 * char(1) ; 
  10 FF0RWFP1 FF0RWFP1 [52] ; 
  10 FF0RWFQ1 FF0RWFQ1 [52] ; 
  10 FF0RWNP1 FF0RWNP1 [52] ; 
  10 FF0RWNQ1 FF0RWNQ1 [52] ; 
  10 FF0RWPP1 FF0RWPP1 [52] ; 
  10 FF0RWPQ1 FF0RWPQ1 [52] ; 
  10 FF0RWTP1 FF0RWTP1 [52] ; 
  10 FF0RWTQ1 FF0RWTQ1 [52] ; 
  10 * char(1) ; 
  10 FF0RWFP2 FF0RWFP2 [52] ; 
  10 FF0RWFQ2 FF0RWFQ2 [52] ; 
  10 FF0RWNP2 FF0RWNP2 [52] ; 
  10 FF0RWNQ2 FF0RWNQ2 [52] ; 
  10 FF0RWPP2 FF0RWPP2 [52] ; 
  10 FF0RWPQ2 FF0RWPQ2 [52] ; 
  10 FF0RWTP2 FF0RWTP2 [52] ; 
  10 FF0RWTQ2 FF0RWTQ2 [52] ; 
  10 FF0RWUQT FF0RWUQT [12] ; 
  10 FF0RWSQT FF0RWSQT [12] ; 
end // end FF0RW02

//*** RECORD=FF0RW03 ****
// ---------------------------------------------
// Application working storage for alt cat data.
// ---------------------------------------------
// 
// Some of the fields in this record follow this format:
// FF0rWXYZ.
// 
// X being one of the following codes:
//          A = PRE-ALLOCATED FUTURE QTY
//          B = ALLOCATED FUTURE QTY
//          C = SHIP FUTURE QTY
//          D = CANCEL FUTURE QTY
//          E = PRE-ALLOCATED NAT'L QTY
//          F = ALLOCATED NAT'L QTY
//          G = SHIP NAT'L QTY
//          H = CANCEL NAT'L QTY
//          I = PRE-ALLOCATED PROP QTY
//          J = ALLOCATED PROP QTY
//          K = SHIP PROP QTY
//          L = CANCEL PROP QTY
// 
// Y being one of the following codes:
//          1 = One Year Ago
//          2 = Two Years Ago
// 
// Z being one of the following codes:
//          1 = Season One
//          2 = Season Two
//          3 = Season Three
// FF135 11/20/90 MDANGE
// Deleted fields for combined values
// Added FF0RWAQT array for alt category user created percents
// ***********************
Record FF0RW03 type basicRecord
  10 XPCCD XPCCD ; 
  10 FF0RWSN1 FF0RWSN1 ; 
    15 FF0RWMS1 FF0RWMS1 [12] ; 
      20 FF0RWA11 FF0RWA11 ; 
      20 FF0RWB11 FF0RWB11 ; 
      20 FF0RWC11 FF0RWC11 ; 
      20 FF0RWD11 FF0RWD11 ; 
      20 FF0RWE11 FF0RWE11 ; 
      20 FF0RWF11 FF0RWF11 ; 
      20 FF0RWG11 FF0RWG11 ; 
      20 FF0RWH11 FF0RWH11 ; 
      20 FF0RWI11 FF0RWI11 ; 
      20 FF0RWJ11 FF0RWJ11 ; 
      20 FF0RWK11 FF0RWK11 ; 
      20 FF0RWL11 FF0RWL11 ; 
      20 FF0RWA21 FF0RWA21 ; 
      20 FF0RWB21 FF0RWB21 ; 
      20 FF0RWC21 FF0RWC21 ; 
      20 FF0RWD21 FF0RWD21 ; 
      20 FF0RWE21 FF0RWE21 ; 
      20 FF0RWF21 FF0RWF21 ; 
      20 FF0RWG21 FF0RWG21 ; 
      20 FF0RWH21 FF0RWH21 ; 
      20 FF0RWI21 FF0RWI21 ; 
      20 FF0RWJ21 FF0RWJ21 ; 
      20 FF0RWK21 FF0RWK21 ; 
      20 FF0RWL21 FF0RWL21 ; 
  10 * char(1) ; 
  10 FF0RWSN2 FF0RWSN2 ; 
    15 FF0RWMS2 FF0RWMS2 [12] ; 
      20 FF0RWA12 FF0RWA12 ; 
      20 FF0RWB12 FF0RWB12 ; 
      20 FF0RWC12 FF0RWC12 ; 
      20 FF0RWD12 FF0RWD12 ; 
      20 FF0RWE12 FF0RWE12 ; 
      20 FF0RWF12 FF0RWF12 ; 
      20 FF0RWG12 FF0RWG12 ; 
      20 FF0RWH12 FF0RWH12 ; 
      20 FF0RWI12 FF0RWI12 ; 
      20 FF0RWJ12 FF0RWJ12 ; 
      20 FF0RWK12 FF0RWK12 ; 
      20 FF0RWL12 FF0RWL12 ; 
      20 FF0RWA22 FF0RWA22 ; 
      20 FF0RWB22 FF0RWB22 ; 
      20 FF0RWC22 FF0RWC22 ; 
      20 FF0RWD22 FF0RWD22 ; 
      20 FF0RWE22 FF0RWE22 ; 
      20 FF0RWF22 FF0RWF22 ; 
      20 FF0RWG22 FF0RWG22 ; 
      20 FF0RWH22 FF0RWH22 ; 
      20 FF0RWI22 FF0RWI22 ; 
      20 FF0RWJ22 FF0RWJ22 ; 
      20 FF0RWK22 FF0RWK22 ; 
      20 FF0RWL22 FF0RWL22 ; 
  10 * char(1) ; 
  10 FF0RWSN3 FF0RWSN3 ; 
    15 FF0RWMS3 FF0RWMS3 [12] ; 
      20 FF0RWA13 FF0RWA13 ; 
      20 FF0RWB13 FF0RWB13 ; 
      20 FF0RWC13 FF0RWC13 ; 
      20 FF0RWD13 FF0RWD13 ; 
      20 FF0RWE13 FF0RWE13 ; 
      20 FF0RWF13 FF0RWF13 ; 
      20 FF0RWG13 FF0RWG13 ; 
      20 FF0RWH13 FF0RWH13 ; 
      20 FF0RWI13 FF0RWI13 ; 
      20 FF0RWJ13 FF0RWJ13 ; 
      20 FF0RWK13 FF0RWK13 ; 
      20 FF0RWL13 FF0RWL13 ; 
      20 FF0RWA23 FF0RWA23 ; 
      20 FF0RWB23 FF0RWB23 ; 
      20 FF0RWC23 FF0RWC23 ; 
      20 FF0RWD23 FF0RWD23 ; 
      20 FF0RWE23 FF0RWE23 ; 
      20 FF0RWF23 FF0RWF23 ; 
      20 FF0RWG23 FF0RWG23 ; 
      20 FF0RWH23 FF0RWH23 ; 
      20 FF0RWI23 FF0RWI23 ; 
      20 FF0RWJ23 FF0RWJ23 ; 
      20 FF0RWK23 FF0RWK23 ; 
      20 FF0RWL23 FF0RWL23 ; 
  10 FF0RWSN4 FF0RWSN4 ; 
    15 FF0RWMS4 FF0RWMS4 [12] ; 
      20 FF0RWA14 FF0RWA14 ; 
      20 FF0RWB14 FF0RWB14 ; 
      20 FF0RWC14 FF0RWC14 ; 
      20 FF0RWD14 FF0RWD14 ; 
      20 FF0RWE14 FF0RWE14 ; 
      20 FF0RWF14 FF0RWF14 ; 
      20 FF0RWG14 FF0RWG14 ; 
      20 FF0RWH14 FF0RWH14 ; 
      20 FF0RWI14 FF0RWI14 ; 
      20 FF0RWJ14 FF0RWJ14 ; 
      20 FF0RWK14 FF0RWK14 ; 
      20 FF0RWL14 FF0RWL14 ; 
      20 FF0RWA24 FF0RWA24 ; 
      20 FF0RWB24 FF0RWB24 ; 
      20 FF0RWC24 FF0RWC24 ; 
      20 FF0RWD24 FF0RWD24 ; 
      20 FF0RWE24 FF0RWE24 ; 
      20 FF0RWF24 FF0RWF24 ; 
      20 FF0RWG24 FF0RWG24 ; 
      20 FF0RWH24 FF0RWH24 ; 
      20 FF0RWI24 FF0RWI24 ; 
      20 FF0RWJ24 FF0RWJ24 ; 
      20 FF0RWK24 FF0RWK24 ; 
      20 FF0RWL24 FF0RWL24 ; 
  10 * char(1) ; 
  10 FF0RWFP1 FF0RWFP1 [52] ; 
  10 FF0RWFQ1 FF0RWFQ1 [52] ; 
  10 FF0RWNP1 FF0RWNP1 [52] ; 
  10 FF0RWNQ1 FF0RWNQ1 [52] ; 
  10 FF0RWPP1 FF0RWPP1 [52] ; 
  10 FF0RWPQ1 FF0RWPQ1 [52] ; 
  10 FF0RWTP1 FF0RWTP1 [52] ; 
  10 FF0RWTQ1 FF0RWTQ1 [52] ; 
  10 * char(1) ; 
  10 FF0RWFP2 FF0RWFP2 [52] ; 
  10 FF0RWFQ2 FF0RWFQ2 [52] ; 
  10 FF0RWNP2 FF0RWNP2 [52] ; 
  10 FF0RWNQ2 FF0RWNQ2 [52] ; 
  10 FF0RWPP2 FF0RWPP2 [52] ; 
  10 FF0RWPQ2 FF0RWPQ2 [52] ; 
  10 FF0RWTP2 FF0RWTP2 [52] ; 
  10 FF0RWTQ2 FF0RWTQ2 [52] ; 
  10 FF0RWAQT FF0RWAQT [12] ; 
end // end FF0RW03

// pre-alloc future - yr 1
DataItem FF0RWA11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 1
DataItem FF0RWA12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 1
DataItem FF0RWA13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 1
DataItem FF0RWA14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0RWA21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0RWA22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0RWA23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0RWA24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alt cat abrv
DataItem FF0RWACA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user created percentages
DataItem FF0RWAQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0RWB11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0RWB12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0RWB13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0RWB14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0RWB21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0RWB22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0RWB23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0RWB24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin month available flag
DataItem FF0RWBMA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin month found flag
DataItem FF0RWBMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship future - yr 1
DataItem FF0RWC11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 1
DataItem FF0RWC12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 1
DataItem FF0RWC13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 1
DataItem FF0RWC14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0RWC21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0RWC22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0RWC23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0RWC24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// original cat viewed
DataItem FF0RWCAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// converted beg date
DataItem FF0RWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current month in season
DataItem FF0RWCMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculated months in season
DataItem FF0RWCMS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month counter
DataItem FF0RWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season counter
DataItem FF0RWCTS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current season number
DataItem FF0RWCUR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculations work area
DataItem FF0RWCWK bin(18,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0RWD11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0RWD12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0RWD13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0RWD14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0RWD21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0RWD22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0RWD23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0RWD24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beg date day
DataItem FF0RWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display date
DataItem FF0RWDDT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified flag
DataItem FF0RWDMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display month
DataItem FF0RWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data request flag
DataItem FF0RWDRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg date ccyymm work area
DataItem FF0RWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display year
DataItem FF0RWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0RWE11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0RWE12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0RWE13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0RWE14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0RWE21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0RWE22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0RWE23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0RWE24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0RWF11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0RWF12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0RWF13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0RWF14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0RWF21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0RWF22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0RWF23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0RWF24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format Map flag
DataItem FF0RWFMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// future percent one yr
DataItem FF0RWFP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future percent two yrs ago
DataItem FF0RWFP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future quantity one yr
DataItem FF0RWFQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future quantity two yrs ago
DataItem FF0RWFQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first selection flag
DataItem FF0RWFSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0RWG11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0RWG12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0RWG13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0RWG14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0RWG21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0RWG22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0RWG23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0RWG24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0RWH11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0RWH12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0RWH13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0RWH14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0RWH21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0RWH22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0RWH23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0RWH24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0RWI11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0RWI12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0RWI13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0RWI14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0RWI21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0RWI22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0RWI23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0RWI24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_PROP_YR_IND from map
DataItem FF0RWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index one for stored fields
DataItem FF0RWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FF0RWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index three for stored fields
DataItem FF0RWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index four
DataItem FF0RWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index five
DataItem FF0RWIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index six
DataItem FF0RWIX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem FF0RWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0RWJ11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0RWJ12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0RWJ13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0RWJ14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0RWJ21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0RWJ22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0RWJ23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0RWJ24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0RWK11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0RWK12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0RWK13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0RWK14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0RWK21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0RWK22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0RWK23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0RWK24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyy
DataItem FF0RWKC1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyy
DataItem FF0RWKC2 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 1
DataItem FF0RWKD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 2
DataItem FF0RWKD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem FF0RWKM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem FF0RWKM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0RWL11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0RWL12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0RWL13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0RWL14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0RWL21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0RWL22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0RWL23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0RWL24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month - one yr ago - seas 1
DataItem FF0RWM11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - one yr ago - seas 2
DataItem FF0RWM12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - one yr ago - seas 3
DataItem FF0RWM13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - one yr ago - seas 4
DataItem FF0RWM14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 1
DataItem FF0RWM21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 2
DataItem FF0RWM22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 3
DataItem FF0RWM23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 4
DataItem FF0RWM24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// map season begin month
DataItem FF0RWMBM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beg date month
DataItem FF0RWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Maximum months in season
DataItem FF0RWMMS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion month
DataItem FF0RWMNC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// months in season
DataItem FF0RWMNS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// months on page
DataItem FF0RWMPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// months in season one
DataItem FF0RWMS1 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// months in season two
DataItem FF0RWMS2 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// months in season three
DataItem FF0RWMS3 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// months in season four
DataItem FF0RWMS4 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// master range of months
DataItem FF0RWMTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max pages (2-5)
DataItem FF0RWMXP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new category flag
DataItem FF0RWNCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user percentage accumulator
DataItem FF0RWNMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future % - one yr
DataItem FF0RWNP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future % -  two yrs ago
DataItem FF0RWNP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future qty one yr
DataItem FF0RWNQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future qty two yrs ago
DataItem FF0RWNQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work number
DataItem FF0RWNUM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page nbr
DataItem FF0RWPGN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop % - one yr
DataItem FF0RWPP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop % -  two yrs ago
DataItem FF0RWPP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop qty one yr
DataItem FF0RWPQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop qty two yrs ago
DataItem FF0RWPQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row count
DataItem FF0RWRCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved cat request flag
DataItem FF0RWSCR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection cnt
DataItem FF0RWSCT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection field
DataItem FF0RWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr one
DataItem FF0RWSN1 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr two
DataItem FF0RWSN2 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr three
DataItem FF0RWSN3 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr four
DataItem FF0RWSN4 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user created % saved from tab
DataItem FF0RWSQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season start map
DataItem FF0RWSTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season start ws
DataItem FF0RWSTW num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total on page ind (y or n)
DataItem FF0RWTMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total position on page
DataItem FF0RWTOT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total % - one year
DataItem FF0RWTP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total % - two year
DataItem FF0RWTP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty - one year
DataItem FF0RWTQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty - two year
DataItem FF0RWTQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update requested flag
DataItem FF0RWUPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user created percentage
DataItem FF0RWUQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work nbr of seasons
DataItem FF0RWWNS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion yymm
DataItem FF0RWYMC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion year
DataItem FF0RWYRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year flag
DataItem FF0RWYRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg date year
DataItem FF0RWYY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

