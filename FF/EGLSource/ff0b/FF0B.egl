package ff0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import fk.common.*;
import fy.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0B ****
// This application obtains a specific category/type group,
// product, or work sheet number then displays a list of
// existing work sheets for that category, single product,
// or work sheet number along with what type of work sheet
// they are.  The user can also specify a specific work sheet
// type or safety stock class or wild card one or both to
// obtain all work sheet types or safety stock classes.  The
// user may scroll forward or back to view all the work sheets
// obtained.  The user can then select which work sheet they
// wish to view and is sent to application FF0E to view it.
// 
// In addition the user may enter a product development
// product (life cycle "05") & PF18 to create an empty work
// sheet that they wish to alter via FF0E.
// 
// The user may select a displayed work sheet & press ENTER to
// go to application FF0E, PF13 to application FF0C, PF14 to
// application ff0D, PF15 to application FF0S, PF16 to appli-
// cation FF0G, PF17 to application FF0J, PF19 to print a
// selected work sheet, or exit to any allowed application
// via Fast Path.
// 
// This application uses FFWREC.FFQMBYMO field to store actual
// buy month.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/18/89  LDELUH  New application.
// TA06/06  06/06/90  SPOPA   Default to show first page if the
//                            previous worksheet product cannot
//                            be found after return from FF0E.
//  FF#059  07/03/90  LDELUH  Replace main with actual buy mo.
//  FF#121  07/24/90  CROSS   Add direct paging feature
//  FF#151  07/25/90  CROSS   Fix to desc look up
//  FF#134  08/14/90  SFORD   SET Job copletion msg flag = 'y'
//   FIX    08/27/90  SFORD   Fixed calc. of buy month
//   FIX    02/26/91  LDELUH  If BUY wrksht type may need to go
//                            to SYCLR to verify style in 520.
//   FIX    03/37/91  MDANGE  Change to submit FF297D on any
//                            exit from application.
//  FF#229  06/06/91  LDELUH  Allow availability specialists
//                            inquiry access only.
//  FF#1111 03/11/92  LDELUH  PF18 needs to handle varying
//   & 282                    length seasons.  also when pf18
//                            line code not put on worksheet.
//  FF#369  06/23/93  mwalke  deleted w/s type and added season
//  part 1                    code and year, and proj clsout mo
//  FF#369  08/05/93  mwalke  if buy w/s type use buy qty; else
//  part 2                    use season code and year.
//  FF      09/05/93  mdange  add logic to submit either test
//                            or prod JCL.
//  Fix     11/01/93  JJUCH   Use the current business month
//                            for contmp. month on wrksht hdr
//                            instead of the calendar current
//                            month when create ws for closeout
//                            product.
// FF-174   08/14/96  LDAVI4  Change ff0bs37 to use the
//                            contemporary mo when it is
//                            greater than the actual buy mo.
//                            This to retrieve the tentative
//                            buy quantity when actual buy mo
//                            does not equal forecast mo on the
//                            item table.
// FF-564   11/14/96  DPACK   Comment out submit of job FF2971
// yr 2000  12/04/96  cwhit1  fix leading 0's for year 2000
//          03/11/97  cwhit1  use msty to populate wrksht flds
// FF703    02/26/98  SVARGH  delete product description when
//                            you reenter ff0b from ff0e,by
//                            moving spaces to the description
// field.
// FFMAINT  07/12/96  VANNAM  INCLUDED THE CENTURY DEDUCTION
//                            LOGIC IN FF0BS32 PROCESS
// *********************
Program FF0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0BW00 FF0BW00; // record
  FF0BW01 FF0BW01; // record
  FF0BW02 FF0BW02; // record
  FF0BW03 FF0BW03; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF9REC FF9REC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XWSTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use FF0BT {deleteAfterUse = yes}; // table
  use FF0BT02 {deleteAfterUse = yes}; // table
  use FF0BT5O {deleteAfterUse = yes}; // table
  use FF0BT51 {deleteAfterUse = yes}; // table
  use FF0BM.FF0BM001,  // forms
      FF0BM.TA0PM001, 
      FF0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0BM001 initial; /* M001 input/output*/
    set TA0PM001 initial; /* M001 input/output*/
    set FF0BW00 empty; /* Working storage*/
    set FF0BW01 empty; /* M001 display storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date & time convert parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA6REC empty; /* Print subroutine parameters*/

    FF0BW00.FF0BWFMS = "Y"; /* Format the map switch*/
    FF0BW00.FF0BWRDS = "N"; /* Request for data switch*/
    FF0BW00.CACHGFL = "N"; /* Set data not obtained*/

    if (COMMAREA.CAFROMAP == "FF0E")
      FF0BW00.SY1STNBR = FFWREC.SY1STNBR;
      FF0BW00.SY2CLRID = FFWREC.SY2CLRID;
      FF0BW00.XDMCD = FFWREC.XDMCD;
      FFWREC.SY1STNBR = " ";
      FFWREC.SY2CLRID = " ";
      FFWREC.XDMCD = " ";
    end

    if (FFWREC.YPGCD == " ") /* Type group not known*/
      FFWREC.YPGCD = "01"; /* Default value*/
      FFWREC.YPGABRV = "******";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    if (FFWREC.SY2CLRID == " ") /* Color not known*/
      FFWREC.SY2CLRID = "00 "; /* Default value*/
    end

    if (FFWREC.XDMCD == " ") /* Dimension not known*/
      FFWREC.XDMCD = "00"; /* Default value*/
    end

    if (FFWREC.FFEWSNBR != 0) /* W/S nbr entered*/
      FFWREC.XWSCD = "04"; /* Set type to 04 PFCST*/
    end

    if (FFWREC.XWSCD == "  ") /* Work sheet type code*/
      FFWREC.XWSCD = "01"; /* Default value*/
    end

    FFWREC.XWSABRV = "******";
    if (FFWREC.XWSCD in XWSTBL.XWSCD)
      FFWREC.XWSABRV = XWSTBL.XWSABRV[sysVar.arrayIndex];
    end

    FF0BW00.FF0BWSSC = "*"; /* Save safety stock class*/

    if (FFWREC.FFQMBYMO == -1)
      FFWREC.FFQMBYMO = 0;
    end

    if (FFWREC.XWSCD == "03") /* If "BUY" work sheet type*/
      FF0BW00.FF0BWWMO = FFWREC.FFQMBYMO;
      FF0BW00.FF0BWABM = FF0BW00.FF0BWWYM; /* Save actl buy month*/
    else
      FFWREC.FFQMBYMO = 0;
    end

    if (FFWREC.FFEWSNBR > 0) /* Work sheet nbr passed from another*/
                                     /* appl*/
      if (FFWREC.XWSCD == "03") /* If "BUY" work sheet type*/
        if (FFWREC.FFQMBYMO == 0) /* and actl buy mo missing*/
          FF0BW00.FF0BWRDS = "N"; /* Request for data switch "off"*/
        else
          FF0BW00.FF0BWRDS = "Y"; /* Request for data switch "on"*/
        end
      else
        FF0BW00.FF0BWRDS = "Y"; /* Request for data switch "on"*/
      end
    else
      if (FFWREC.SY1STNBR != "      "
       && FFWREC.SY2CLRID != "   " /* Product passed from another appl*/
       && FFWREC.XDMCD != "  ")   
        if (FFWREC.XWSCD == "03") /* If "BUY" work sheet type*/
          if (FFWREC.FFQMBYMO == 0) /* and actl buy mo missing*/
            FF0BW00.FF0BWRDS = "N"; /* Request for data switch "off"*/
          else
            FF0BW00.FF0BWRDS = "Y"; /* Request for data switch "on"*/
          end
        else
          FF0BW00.FF0BWRDS = "Y"; /* Request for data switch "on"*/
        end
      else
        if (FFWREC.YPGCD != "  "
         && FFWREC.XPCCD != "  ")
                                     /* Cat/type grp passed from another appl*/
          if (FFWREC.XWSCD == "03") /* If "BUY" work sheet type*/
            if (FFWREC.FFQMBYMO == 0) /* and actl buy mo missing*/
              FF0BW00.FF0BWRDS = "N"; /* Request for data switch "off"*/
            else
              FF0BW00.FF0BWRDS = "Y"; /* Request for data switch "on"*/
            end
          else
            FF0BW00.FF0BWRDS = "Y"; /* Request for data switch "on"*/
          end
        end
      end
    end

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0B.*/
     /* ------------------------------------------------------------*/

    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0B001; /* Converse the main process*/


    FF0B001: FF0B001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0B001; /* Converse the main process*/


  end // end main
end // end FF0B

// Main process to display a map
Function FF0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0B100(); /* Obtain the data to display*/

  FF0B200(); /* Format and display the map*/

  FF0B300(); /* Check attention identifier*/

  FF0B400(); /* Reset fields to normal intensity*/

  FF0B500(); /* Verify the entered data*/

  FF0B600(); /* Process valid input request*/


end // end FF0B001

// Obtain the data to display
Function FF0B100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0BW00.FF0BWRDS == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

  FF0BW00.CACHGFL = "N"; /* Set data not obtained*/

   /* ------------------------------------------------------------*/
   /* Obtain data & build temporary storage queue.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FF0E") /* If coming from ff0e*/
    COMMAREA.CAFROMAP = "    "; /* do not rebuild temp storage*/
    FF0BW00.XXXTSLEN = 952; /**/
    FF0BW00.TA5TSQIX = FFWREC.TA5TSQIX; /* get nbr of tsq pgs*/
  else
    FF0B110(); /* Build up the temporary storage*/
    if (FFWREC.XXXMSGNO != 0)
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0BW00.TA5TSQIX == 0) /* No pages formatted*/
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    return; /* Exit to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FF0BW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0BW00.FF0BWRDS = "N"; /* Request for data switch "off"*/
  FF0BW00.CACHGFL = "Y"; /* Set data obtained*/


end // end FF0B100

// Build up the temporary storage
Function FF0B110()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FF0BW00.XXXTSLEN = 952; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FF0B111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain & format FFQREC rows into temporary storage area.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.FFEWSNBR > 0)
    FF0B112();
  else
    if (FFWREC.SY1STNBR != " ")
      FF0B113();
    else
      if (FFWREC.XPCCD != " "
       && FFWREC.YPGCD != " ")
        FF0B114();
      end
    end
  end


end // end FF0B110

// Purge any temporary storage
Function FF0B111()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF0BW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FFWREC.TA5TSQIX = 0;
  FF0BW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FF0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0B111

// Select & format FFQREC
Function FF0B112()

   /* ------------------------------------------------------------*/
   /* Select row to be formatted using work sheet number.*/
   /* ------------------------------------------------------------*/

  FF0BS01(); /* Select FFQREC "S "*/

  if (FFWREC.XXXMSGNO != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Format the data onto a page.*/
   /* ------------------------------------------------------------*/

  if (FF0BW00.FF0BWMIX > 1) /* Page was formatted*/
    FF0BS04(); /* Add page to temp storage*/
  end


end // end FF0B112

// Obtain & format FFQREC rows
Function FF0B113()
   /* ------------------------------------------------------------*/
   /* Select & open cursor for FFQREC S4 set to be formatted*/
   /* using style, color, dimension.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XPCCD == "  "
   || FFWREC.XPLCD == "  "
   || FFWREC.YPGCD == "  ")
    FF0BS05(); /* Obtain cat/typ grp/line*/
    if (FFWREC.XXXMSGNO != 0)
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If a buy work sheet was requested*/
   /* Select & open cursor for FFQREC SC set to be formatted*/
   /* Otherwise*/
   /* Select & open cursor for FFQREC S4 set to be formatted.*/
   /* ------------------------------------------------------------*/
  if (FFWREC.XWSCD == "03") /* buy work sheet requested*/
    FF0BS40(); /* Select set & open FFQREC "SC"*/
  else
    FF0BS06(); /* Select set & open FFQREC "S4"*/
  end
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  while (FF0BW00.FF0BWECS == "N") /* Until end of cursor*/
    if (FFWREC.XWSCD == "03") /* buy work sheet requested*/
      FF0BS41(); /* Fetch selected FFQREC "SC" row*/
    else
      FF0BS07(); /* Fetch selected FFQREC "S4" row*/
    end
    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    if (FF0BW00.FF0BWMIX > 14) /* Page is full*/
      FF0BS04(); /* Add page to temporary storage*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (FF0BW00.FF0BWMIX > 1) /* Page was formatted*/
    FF0BS04(); /* Add page to temporary storage*/
  end
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected FFQREC set.*/
   /* ------------------------------------------------------------*/
  if (FFWREC.XWSCD == "03") /* buy work sheet requested*/
    FF0BS43(); /* Close FFQREC "SC" cursor*/
  else
    FF0BS08(); /* Close FFQREC "S4" cursor*/
  end


end // end FF0B113

// Select & format FFQREC
Function FF0B114()
   /* ------------------------------------------------------------*/
   /* If buy work sheet requested*/
   /* Select & open cursor for FFQREC "SB", for catg and typ grp*/
   /* Otherwise;*/
   /* Select & open cursor for FFQREC "S3", for catg and typ grp*/
   /* ------------------------------------------------------------*/
  if (FFWREC.XWSCD == "03") /* buy work sheet requested*/
    FF0BS50(); /* Select set & open FFQREC "SB"*/
  else
    FF0BS10(); /* Select set & open FFQREC "S3"*/
  end
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  while (FF0BW00.FF0BWECS == "N") /* Until end of cursor*/
    if (FFWREC.XWSCD == "03") /* buy work sheet requested*/
      FF0BS51(); /* Fetch selected FFQREC "SB" row*/
    else
      FF0BS11(); /* Fetch selected FFQREC "S3" row*/
    end
    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    if (FF0BW00.FF0BWMIX > 14) /* Page is full*/
      FF0BS04(); /* Add page to temporary storage*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (FF0BW00.FF0BWMIX > 1) /* Page was formatted*/
    FF0BS04(); /* Add page to temporary storage*/
  end
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected FFQREC set.*/
   /* ------------------------------------------------------------*/
  if (FFWREC.XWSCD == "03") /* buy work sheet requested*/
    FF0BS53(); /* Close FFQREC "SB" cursor*/
  else
    FF0BS12(); /* Close FFQREC "S3" cursor*/
  end


end // end FF0B114

// Format and converse the map
Function FF0B200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0BW00.FF0BWRDS == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0BW00.FF0BWFMS == "Y") /* map must be formatted*/
      FF0B210(); /* Format the data on the map*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH and map*/
   /* information.*/
   /* ------------------------------------------------------------*/

  FF0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0BM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0BM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0BM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0BM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "   "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0BM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0BM001.CAITEM; /* Application data*/


end // end FF0B200

// Format the display data
Function FF0B210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0BM001 initial; /* M001 input/output area*/

  FF0BW00.FF0BWFMS = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If control was returned from FF0E, attempt to position the*/
   /* user on the same page as when control was transferred.*/
   /* ------------------------------------------------------------*/

  if (FF0BW00.TA5TSQIX == 0) /* Pages not  formatted*/
    set FF0BM001.XXXTSPAG skip, invisible; /* Curr ts page*/
  else
    set FF0BM001.XXXTSPAG initialAttributes; /* Curr ts page*/
  end

  if (FF0BW00.TA5TSQIX > 0) /* Pages were formatted*/

    set FF0BM001.FF0BMSEL[1] cursor; /* Initial cursor position*/

    if (FF0BW00.SY1STNBR != "  ") /* Previously selected style*/

      FF0BW00.FF0BWPFS = "N"; /* Product found switch*/
      FF0BW00.XXXTSPAG = 1; /* Initial page number*/

      while (FF0BW00.FF0BWPFS == "N" /* Until product pg found*/
       && FF0BW00.XXXTSPAG <= FF0BW00.TA5TSQIX) /* or end of pgs*/

        FF0BS20(); /* Obtain temp storage page*/

        FF0BW00.FF0BWMIX = 1; /* Initialize line index*/

        while (FF0BW00.FF0BWMIX <= 14  /* Until screen is full*/
         && FF0BW00.FF0BWPFS == "N" /* or product pg found*/
         && FF0BW01.SY1STNBR[FF0BWMIX] > "  ") /* or end of data*/

          if (FF0BW01.SY1STNBR[FF0BWMIX] == FF0BW00.SY1STNBR
           && FF0BW01.SY2CLRID[FF0BWMIX] == FF0BW00.SY2CLRID
           && FF0BW01.XDMCD[FF0BWMIX] == FF0BW00.XDMCD)

            FF0BW00.FF0BWPFS = "Y"; /* Product found switch*/

            set FF0BM001.FF0BMSEL[FF0BWMIX] cursor; /* Position cursor*/

          end

          FF0BW00.FF0BWMIX = FF0BW00.FF0BWMIX + 1; /* Increment line ix*/

        end

        if (FF0BW00.FF0BWPFS == "N") /* Product not found*/
          FF0BW00.XXXTSPAG = FF0BW00.XXXTSPAG + 1; /* Next page number*/
        end

      end

      if (FF0BW00.FF0BWPFS == "N") /* Product not found*/

        FF0BW00.XXXTSPAG = 1; /* Default to first page*/

        FFWREC.XXXMODID = "210"; /* Module identification*/
        FFWREC.XXXMSGNO = 230; /* Previous product not found*/

      end

      FF0BW00.SY1STNBR = "     "; /* Clear previous style*/
      FF0BW00.SY2CLRID = "  "; /* and previous color*/
      FF0BW00.XDMCD = "  "; /* and previous dimension*/

    end

    /* ------------------------------------------------------------*/
     /* If the page in storage is not the page to be displayed,*/
     /* obtain the desired page from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (FF0BW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      FF0BS20(); /* Obtain temporary storage page*/
    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FF0BM001.XXXLITPG skip;
    set FF0BM001.XXXLITOF skip;
    FF0BM001.XXXTSPAG = FF0BW00.XXXTSPAG; /* Current page*/
    FF0BM001.TA5TSQIX = FF0BW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0BM001.XPLCD = FFWREC.XPLCD;
  FF0BM001.XPLABRV = FFWREC.XPLABRV;
  FF0BM001.YPGCD = FFWREC.YPGCD;
  FF0BM001.YPGABRV = FFWREC.YPGABRV;
  FF0BM001.XPCCD = FFWREC.XPCCD;
  FF0BM001.XPCABRV = FFWREC.XPCABRV;
  FF0BM001.FF0BMSTY = FFWREC.SY1STNBR;
  FF0BM001.FF0BMCLR = FFWREC.SY2CLRID;
  FF0BM001.FF0BMDIM = FFWREC.XDMCD;
   /* BEGIN TCS*/
  if (FFWREC.SY1STNBR == "          ")
    FF0BM001.FF0BMSNM = "            ";
    FF0BM001.FF0BMCNM = "             ";
  else
    FF0BM001.FF0BMSNM = FFWREC.SY1SSTNM;
    FF0BM001.FF0BMCNM = FFWREC.SY2CLRAB;
  end
   /* END TCS*/
  FF0BM001.FF0BMWSN = FFWREC.FFEWSNBR;
  FF0BM001.FF0BMWTC = FFWREC.XWSCD;
  FF0BM001.FF0BMWTA = FFWREC.XWSABRV;
  FF0BM001.FF0BMSSC = FF0BW00.FF0BWSSC;
  if (FFWREC.XWSCD == "03") /* buy worksheet*/
    FF0BM001.FF0BMHDR1 = " BUY ";
    FF0BM001.FF0BMHDR2 = " QTY ";
  else
    FF0BM001.FF0BMHDR1 = "SEASN";
    FF0BM001.FF0BMHDR2 = "CD YR";
  end

  if (FF0BW00.FF0BWABM != 0)
    FF0BM001.FF0BMABM = FF0BW00.FF0BWABM;
  end

  FF0BW00.FF0BWMIX = 1; /* Initialize line index*/

  while (FF0BW00.FF0BWMIX <= 14 /* Until screen is full*/
   && FF0BW01.SY1STNBR[FF0BWMIX] > " ") /* or end of data*/

    set FF0BM001.FF0BMSEL[FF0BWMIX] normal; /* Unprotect*/
    FF0BM001.FF0BMCOF[FF0BWMIX] = FF0BW01.FF0BWCOF[FF0BWMIX];
    FF0BM001.SY1STNBR[FF0BWMIX] = FF0BW01.SY1STNBR[FF0BWMIX];
    FF0BM001.SY2CLRID[FF0BWMIX] = FF0BW01.SY2CLRID[FF0BWMIX];
    FF0BM001.XDMCD[FF0BWMIX] = FF0BW01.XDMCD[FF0BWMIX];
    FF0BM001.SY1SSTNM[FF0BWMIX] = FF0BW01.SY1SSTNM[FF0BWMIX];
    FF0BM001.FF0BMCLA[FF0BWMIX] = FF0BW01.FF0BWCLA[FF0BWMIX];
    FF0BM001.FF0BMCDT[FF0BWMIX] = FF0BW01.FF0BWCDT[FF0BWMIX];
    FF0BM001.FF0BMCTM[FF0BWMIX] = FF0BW01.FF0BWCTM[FF0BWMIX];
    FF0BM001.FF0BMCMO[FF0BWMIX] = FF0BW01.FF0BMCMO[FF0BWMIX];
    FF0BM001.XXXUSER[FF0BWMIX] = FF0BW01.XXXUSER[FF0BWMIX];
    FF0BM001.SY2SSCIN[FF0BWMIX] = FF0BW01.SY2SSCIN[FF0BWMIX];
    FF0BM001.FF0BWSNB[FF0BWMIX] = FF0BW01.FF0BWSNB[FF0BWMIX];

    FF0BW00.FF0BWMIX = FF0BW00.FF0BWMIX + 1; /* Increment line index*/

  end


end // end FF0B210

// Check attention identifier
Function FF0B300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FF0BW00.FF0BWRDS == "Y") /* Request for data*/
      set FF0BW01 empty; /* M001 display storage*/
    end
    FF0BW00.FF0BWFMS = "Y"; /* Format the map switch*/
    FF0BW00.FF0BWRDS = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (FF0BM001.CATOAP == "FF0E")
        set FF0BM001.CATOAP cursor, bold; /* Highlight*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(189); /* No fast path allowed*/
      else
        if (COMMAREA.CACHGFL == "Y") /* If user allowed chgs*/
          FF0B630(); /* submit FF297D*/
        end
        FF0B111(); /* Purge temporary storage*/
        FFWREC.FFQMBYMO = 0; /* Clear actl out of main*/
        XSFFS01(); /* Exit to another application*/
        set FF0BM001.CATOAP cursor, bold; /* Highlight*/
        FF0BW00.FF0BWFMS = "Y"; /* Format the map switch*/
        FF0BW00.FF0BWRDS = "N"; /* Request for data switch*/
      end
    else
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    if (COMMAREA.CACHGFL == "Y") /* If user allowed chgs*/
      FF0B630(); /* submit FF297D*/
    end
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0BM001"; /* Application find code*/
    end
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end
    FF0B111(); /* Purge temporary storage*/
    FFWREC.FFQMBYMO = 0; /* Clear actl out of main*/
    XSFFS01(); /* Exit to another application*/
    FF0BW00.FF0BWFMS = "Y"; /* Format the map switch*/
    FF0BW00.FF0BWRDS = "N"; /* Request for data switch*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF13, 14, 16, 17, or 18 was pressed & user is allowed*/
   /* inquiry only send error msg.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14*/
   || converseVar.eventKey is pf16 /* or PF16*/
   || converseVar.eventKey is pf17 /* or PF17*/
   || converseVar.eventKey is pf18) /* or PF18*/
    if (COMMAREA.CACHGFL == "N") /* and user not allowed chgs*/
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(403); /* Indicate invalid for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF13(GLOBL) was requested transfer to FF0C.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Global*/
    if (COMMAREA.CACHGFL == "Y") /* If user allowed chgs*/
      FF0B630(); /* submit FF297D*/
    end
    COMMAREA.CATOAP = "FF0C"; /* To application*/
    FF0B111(); /* Purge any temp storage*/
    FFWREC.FFQMBYMO = 0; /* Clear actl out of main*/
    XSFFS01(); /* Transfer to application*/
    /* ------------------------------------------------------------*/
     /* If transfer request failed display returned error message.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "    "; /* Clear to application*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF14(FUT %) was requested transfer to FF0D.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Futures %*/
    if (COMMAREA.CACHGFL == "Y") /* If user allowed chgs*/
      FF0B630(); /* submit FF297D*/
    end
    COMMAREA.CATOAP = "FF0D"; /* To application*/
    FF0B111(); /* Purge any temp storage*/
    FFWREC.FFQMBYMO = 0; /* Clear actl out of main*/
    XSFFS01(); /* Transfer to application*/
    /* ------------------------------------------------------------*/
     /* If transfer request failed display returned error message.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "    "; /* Clear to application*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF15(SUM) was requested transfer to FF0L.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* Summary select*/
    if (COMMAREA.CACHGFL == "Y") /* If user allowed chgs*/
      FF0B630(); /* submit FF297D*/
    end
    COMMAREA.CATOAP = "FF0L"; /* To application*/
    FF0B111(); /* Purge any temp storage*/
    XSFFS01(); /* Transfer to application*/
    /* ------------------------------------------------------------*/
     /* If transfer request failed display returned error message.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "    "; /* Clear to application*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF16(BUY) was requested transfer to FF0G.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Submit buy*/
    if (COMMAREA.CACHGFL == "Y") /* If user allowed chgs*/
      FF0B630(); /* submit FF297D*/
    end
    COMMAREA.CATOAP = "FF0G"; /* To application*/
    FF0B111(); /* Purge any temp storage*/
    FFWREC.FFQMBYMO = 0; /* Clear actl out of main*/
    XSFFS01(); /* Transfer to application*/
    /* ------------------------------------------------------------*/
     /* If transfer request failed display returned error message.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "    "; /* Clear to application*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF17(CAT-SEL) was requested transfer to FF0J.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* Category selection*/
    if (COMMAREA.CACHGFL == "Y") /* If user allowed chgs*/
      FF0B630(); /* submit FF297D*/
    end
    COMMAREA.CATOAP = "FF0J"; /* To application*/
    FF0B111(); /* Purge any temp storage*/
    FFWREC.FFQMBYMO = 0; /* Clear actl out of main*/
    XSFFS01(); /* Transfer to application*/
    /* ------------------------------------------------------------*/
     /* If transfer request failed display returned error message.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "    "; /* Clear to application*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7
   && converseVar.eventKey not pf8
   && converseVar.eventKey not pf18
   && converseVar.eventKey not pf19)
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end


end // end FF0B300

// Reset highlighted fields
Function FF0B400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0BM001.YPGCD initialAttributes;
  set FF0BM001.XPCCD initialAttributes;
  set FF0BM001.FF0BMSTY initialAttributes;
  set FF0BM001.FF0BMCLR initialAttributes;
  set FF0BM001.FF0BMDIM initialAttributes;
  set FF0BM001.FF0BMWSN initialAttributes;
  set FF0BM001.FF0BMWTC initialAttributes;
  set FF0BM001.FF0BMSSC initialAttributes;
  set FF0BM001.FF0BMABM initialAttributes;

  FF0BW00.FF0BWMIX = 1; /* Initialize line index*/

  while (FF0BW00.FF0BWMIX <= 14 /* Until end of lines*/
   && FF0BM001.SY1STNBR[FF0BWMIX] > " ") /* or end of display*/
    set FF0BM001.FF0BMSEL[FF0BWMIX] normal; /* Reset select flag*/
    FF0BW00.FF0BWMIX = FF0BW00.FF0BWMIX + 1; /* Increment line index*/
  end

  set FF0BM001.CATOAP initialAttributes; /* TO application*/
  set FF0BM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.YPGCD == "?" /* Type group lies requested*/
   || FF0BM001.XPCCD == "?" /* Category list requested*/
   || FF0BM001.FF0BMWTC == "?") /* Work sheet type list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF0BM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF0BM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF0BM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0BM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0BM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0BM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF0BM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0BM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF0BM001.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of work sheet type codes.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.FF0BMWTC == "?") /* W/S type list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  W/S TYPE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWS01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0BM001.FF0BMWTC = FFWREC.XWSCD; /* Restore prior code*/
      FF0BM001.FF0BMWTA = FFWREC.XWSABRV; /* Description*/
    else
      FF0BM001.FF0BMWTC = XWSTBL.XWSCD[XX0XWPIX]; /* Selected code*/
      FF0BM001.FF0BMWTA = XWSTBL.XWSABRV[XX0XWPIX]; /* Description*/
    end
    set FF0BM001.FF0BMWTC cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF0B400

// Verify the entered data
Function FF0B500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.CAITEM > " ") /* Application data was entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0BM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    FF0B510(); /* Verify scroll request*/
  else
    /* ------------------------------------------------------------*/
     /* If it is not a scroll request & the search key was*/
     /* changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    if (FF0BM001.YPGCD != FFWREC.YPGCD        /* Type group changed*/
     || FF0BM001.XPCCD != FFWREC.XPCCD        /* or category changed*/
     || FF0BM001.FF0BMSTY != FFWREC.SY1STNBR  /* or style changed*/
     || FF0BM001.FF0BMCLR != FFWREC.SY2CLRID  /* or color changed*/
     || FF0BM001.FF0BMDIM != FFWREC.XDMCD     /* or dim changed*/
     || FF0BM001.FF0BMWSN != FFWREC.FFEWSNBR  /* or w/s nbr changed*/
     || FF0BM001.FF0BMWTC != FFWREC.XWSCD     /* or w/s type changed*/
     || FF0BM001.FF0BMSSC != FF0BW00.FF0BWSSC /* or s.s. class changed*/
     || FF0BM001.FF0BMABM != FF0BW00.FF0BWABM /* or actl buy mo changed*/
     || FF0BW00.CACHGFL == "N")               /* or data not obtained*/
      FF0B520(); /* Verify the key fields*/
    else
      /* ------------------------------------------------------------*/
       /* Otherwise, if page was formatted, verify data in the line.*/
      /* ------------------------------------------------------------*/
      if (FF0BW00.TA5TSQIX > 0 /* Page was formatted*/
       || FF0BW00.CACHGFL == "Y")
        FF0BW00.FF0BWSSW = "N"; /* Initialize select switch*/
        FF0BW00.FF0BWSSI = 0; /* Initialize save select ix*/
        FF0BW00.FF0BWMIX = 14; /* Initialize line index*/
        while (FF0BW00.FF0BWMIX > 0) /* Until end of lines*/
          FF0B530(); /* Verify data in the line*/
          FF0BW00.FF0BWMIX = FF0BW00.FF0BWMIX - 1; /* Decrement line number*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0B500

// Verify scroll request
Function FF0B510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FF0BW00.XXXTSPAG < 2)       /* and no previous pages*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FF0BW00.XXXTSPAG >= FF0BW00.TA5TSQIX) /* and no more pages*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0BW00.FF0BWMIX = 14; /* Initialize line index*/

  while (FF0BW00.FF0BWMIX > 0) /* Until end of lines*/
    if (FF0BM001.FF0BMSEL[FF0BWMIX] > " ") /* Selection entered*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FF0BM001.FF0BMSEL[FF0BWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FF0BW00.FF0BWMIX = FF0BW00.FF0BWMIX - 1; /* Decrement line number*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.YPGCD != FFWREC.YPGCD) /* Type group changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0BM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0BM001.XPCCD != FFWREC.XPCCD) /* Category changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0BM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0BM001.FF0BMSTY != FFWREC.SY1STNBR) /* Style changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0BM001.FF0BMSTY cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0BM001.FF0BMCLR != FFWREC.SY2CLRID) /* Color changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0BM001.FF0BMCLR cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0BM001.FF0BMDIM != FFWREC.XDMCD) /* Dim changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0BM001.FF0BMDIM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0BM001.FF0BMWSN != FFWREC.FFEWSNBR) /* Work sheet number changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0BM001.FF0BMWSN cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0BM001.FF0BMWTC != FFWREC.XWSCD) /* W/S type changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0BM001.FF0BMWTC cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0BM001.FF0BMSSC != FF0BW00.FF0BWSSC) /* S.S. class changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0BM001.FF0BMSSC cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0BM001.FF0BMABM != FF0BW00.FF0BWABM) /* Actl buy month changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0BM001.FF0BMABM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end


end // end FF0B510

// Verify the key fields
Function FF0B520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered since selections*/
   /* are not allowed when key fields are changed.*/
   /* ------------------------------------------------------------*/

  FF0BW00.FF0BWMIX = 14; /* Initialize line index*/

  while (FF0BW00.FF0BWMIX > 0) /* Until end of lines*/
    if (FF0BM001.FF0BMSEL[FF0BWMIX] > " ") /* Selection entered*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0BM001.FF0BMSEL[FF0BWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FF0BW00.FF0BWMIX = FF0BW00.FF0BWMIX - 1; /* Decrement line number*/
  end

   /* ------------------------------------------------------------*/
   /* Verify that either work sheet nbr, product, or category/*/
   /* type group were entered along with w/s type.  If w/s type*/
   /* is "03" main buy month must be entered.  Key fields are not*/
   /* allowed to be spaces or zeros.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (FF0BM001.FF0BMWTC == " ") /* W/S type not entered*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0BM001.FF0BMWTC cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    else
      if (FF0BM001.FF0BMWTC == "03" /* "BUY" w/s type*/
       && FF0BM001.FF0BMABM == 0)   /* Actl buy month not entered*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        set FF0BM001.FF0BMABM cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Indicate missing*/
      end
      if (FF0BM001.FF0BMWSN == 0) /* W/S nbr not entered*/
        if (FF0BM001.FF0BMSTY == " ") /* Style not entered*/
          if (FF0BM001.YPGCD == " ") /* Type group not entered*/
            if (FF0BM001.XPCCD == " ") /* Category not entered*/
              FFWREC.XXXMODID = "520"; /* Module identification*/
              set FF0BM001.FF0BMSTY cursor, bold; /* Highlight*/
              converseLib.validationFailed(8); /* Indicate missing*/
            else
              FFWREC.XXXMODID = "520"; /* Module identification*/
              set FF0BM001.YPGCD cursor, bold; /* Highlight*/
              converseLib.validationFailed(8); /* Indicate missing*/
            end
          else
            if (FF0BM001.XPCCD == " ") /* Category not entered*/
              FFWREC.XXXMODID = "520"; /* Module identification*/
              set FF0BM001.XPCCD cursor, bold; /* Highlight*/
              converseLib.validationFailed(8); /* Indicate missing*/
            end
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF18 (create-ws) was requested verify that product was*/
   /* entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* W/S create*/
    if (FF0BM001.FF0BMDIM == " ") /* Dim not enteredd*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0BM001.FF0BMDIM cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
    if (FF0BM001.FF0BMCLR == " ") /* Color not entered*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0BM001.FF0BMCLR cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
    if (FF0BM001.FF0BMSTY == " ") /* Style not entered*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0BM001.FF0BMSTY cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If actl buy month was entered verify that it is a valid*/
   /* date.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.FF0BMABM > 0) /* Actl buy month entered*/
    if (FF0BM001.FF0BMWTC == "03") /* "buy" work sheet type*/
      set TA2REC empty; /* Clear row storage area*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
      TA2REC.TA2GRTYP = "E"; /* Type*/
      FF0BW00.FF0BWVYM = FF0BM001.FF0BMABM;
      FF0BW00.FF0BWVDD = 01; /* Default day field*/
      TA2REC.TA2GRGEN = FF0BW00.FF0BWVDT;
      try
        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Date routine*/
      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (TA2RTNCD == 0) /* Normal return code*/
          FFWREC.FFQMBYMO = TA2REC.TA2GRCYM;
        else /* Abnormal return code*/
          FFWREC.XXXMODID = "520"; /* Module identification*/
          set FF0BM001.FF0BMABM cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Indicate invalid*/
        end
      else
        TAEREC.TAEDESC1 = sysVar.errorCode;
        TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "520 EDIT MAIN BUY MONTH";
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        converseLib.validationFailed(1); /* System error occured*/
        exit stack; /* Exit to display map*/
      end
    else
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0BM001.FF0BMABM cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Only with "buy"*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If safety stock class was entered verify that it is*/
   /* wildcard (*), A, B, C, or D.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.FF0BMSSC > " ") /* S.S. class was entered*/
    if (FF0BM001.FF0BMSSC != "*" /* Wild card*/
     && FF0BM001.FF0BMSSC != "A" /* Class A*/
     && FF0BM001.FF0BMSSC != "B" /* Class B*/
     && FF0BM001.FF0BMSSC != "C" /* Class C*/
     && FF0BM001.FF0BMSSC != "D") /* Class D*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0BM001.FF0BMSSC = "*"; /* Default value*/
  end

   /* ------------------------------------------------------------*/
   /* If work sheet number was entered verify that work sheet*/
   /* type code is "04", otherwise set it to "04".*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.FF0BMWSN > 0) /* Work sheet nbr was entered*/
    if (FF0BM001.FF0BMWTC != "04") /* Not PFCST w/s type*/
      FF0BM001.FF0BMWTC = "04"; /* Set to PFCST w/s type*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If work sheet type was entered verify that it it a valid*/
   /* type code.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.FF0BMWTC > " ") /* W/S type was entered*/
    if (FF0BM001.FF0BMWTC in XWSTBL.XWSCD /* Code in table*/
     && XWSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      FF0BM001.FF0BMWTA = XWSTBL.XWSABRV[sysVar.arrayIndex]; /* Abbrev*/
      if (FF0BM001.FF0BMWTC != "01" /* CURRNT w/s type*/
       && FF0BM001.FF0BMWTC != "02" /* MASTER w/s type*/
       && FF0BM001.FF0BMWTC != "03" /* BUY w/s type*/
       && FF0BM001.FF0BMWTC != "04" /* PFCST w/s type*/
       && FF0BM001.FF0BMWTC != "09") /* WORK w/s type*/
        set FF0BM001.FF0BMWTC cursor, bold; /* Highlight*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        converseLib.validationFailed(185); /* Invalid w/s type for screen*/
      end
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF0BM001.FF0BMWTA = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0BM001.FF0BMWTC cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0BM001.FF0BMWTA = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* If product was entered verify that it is valid.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.FF0BMSTY > " ") /* Style was entered*/
    set FF3REC empty; /* Clear row storage area*/
    FF3REC.SY1STNBR = FF0BM001.FF0BMSTY;
    FF3REC.SY2CLRID = FF0BM001.FF0BMCLR;
    FF3REC.XDMCD = FF0BM001.FF0BMDIM;
    FF0BS03(); /* Obtain product descriptions*/
    /* ------------------------------------------------------------*/
     /* If not found, indicate invalid.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
      FF0BM001.FF0BMSNM = FF3REC.SY1SSTNM; /* Short desc*/
      FF0BM001.FF0BMCNM = FF3REC.SY2CLRAB; /* Short desc*/
      FF0BM001.XPCCD = FF3REC.XPCCD; /* Cat code*/
      FF0BM001.XPLCD = FF3REC.XPLCD; /* Line code*/
      FF0BM001.YPGCD = FF3REC.YPGCD; /* Type grp code*/
      FF0BW00.XPRCD = FF3REC.XPRCD; /* Type code*/
      if (converseVar.eventKey is pf18)
        FF0BW00.FF0BWSSC = FF3REC.SY2SSCIN; /* Save ss class*/
        FF0BM001.YPGCD = FF3REC.YPGCD; /* Save type grp*/
        FF0BM001.XPCCD = FF3REC.XPCCD; /* Save cat*/
        FF0BM001.XPLCD = FF3REC.XPLCD; /* Save line*/
      end
    else /* +100 on FF3REC*/
      if (converseVar.eventKey is pf18 /* PF18 was pressed*/
       || FF0BM001.FF0BMWTC == "03")   /* BUY worksheet type*/
        set PG2REC empty; /* Clear row storage area*/
        PG2REC.XGPCD = "02";
        PG2REC.SY1STNBR = FF0BM001.FF0BMSTY;
        PG2REC.SY2CLRID = FF0BM001.FF0BMCLR;
        PG2REC.XDMCD = FF0BM001.FF0BMDIM;
        FF0BS23(); /* Obtain product descriptions*/
        /* ------------------------------------------------------------*/
         /* If not found, indicate invalid.*/
        /* ------------------------------------------------------------*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
          FF0BM001.FF0BMSNM = PG2REC.SY1SSTNM; /* Short desc*/
          FF0BM001.FF0BMCNM = PG2REC.SY2CLRAB; /* Short desc*/
          FF0BM001.XPLCD = PG2REC.XPLCD;
          FF0BM001.XPCCD = PG2REC.XPCCD;
          FF0BW00.FF0BWSSC = PG2REC.SY2SSCIN; /* Save ss class*/
          FF0BW00.XPRCD = PG2REC.XPRCD; /* Type code*/
          if (PG2REC.XPRCD in XPRTBL.XPRCD
           && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            if (XPRTBL.YPGCD[sysVar.arrayIndex] in YPGTBL.YPGCD
             && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A"
             && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y")
              FF0BM001.YPGCD = YPGTBL.YPGCD[sysVar.arrayIndex];
            else
              FF0BM001.FF0BMSNM = "            "; /* Short desc*/
              FF0BM001.FF0BMCNM = "            "; /* Short desc*/
              FFWREC.XXXMODID = "520"; /* Module identification*/
              set FF0BM001.FF0BMSTY cursor, bold; /* Highlight*/
              set FF0BM001.FF0BMCLR bold; /* Highlight*/
              set FF0BM001.FF0BMDIM bold; /* Highlight*/
              FF0BM001.XPLCD = "  ";
              FF0BM001.XPLABRV = "  ";
              FF0BM001.XPCCD = "  ";
              FF0BM001.XPCABRV = "  ";
              converseLib.validationFailed(10); /* Indicate invalid*/
            end
          else
            FF0BM001.FF0BMSNM = "            "; /* Short desc*/
            FF0BM001.FF0BMCNM = "            "; /* Short desc*/
            FFWREC.XXXMODID = "520"; /* Module identification*/
            set FF0BM001.FF0BMSTY cursor, bold; /* Highlight*/
            set FF0BM001.FF0BMCLR bold; /* Highlight*/
            set FF0BM001.FF0BMDIM bold; /* Highlight*/
            FF0BM001.XPLCD = "  ";
            FF0BM001.XPLABRV = "  ";
            FF0BM001.XPCCD = "  ";
            FF0BM001.XPCABRV = "  ";
            converseLib.validationFailed(10); /* Indicate invalid*/
          end
        end
      else
        FF0BM001.FF0BMSNM = "            "; /* Short desc*/
        FF0BM001.FF0BMCNM = "            "; /* Short desc*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        set FF0BM001.FF0BMSTY cursor, bold; /* Highlight*/
        set FF0BM001.FF0BMCLR bold; /* Highlight*/
        set FF0BM001.FF0BMDIM bold; /* Highlight*/
        FF0BM001.XPLCD = "  ";
        FF0BM001.XPLABRV = "  ";
        FF0BM001.XPCCD = "  ";
        FF0BM001.XPCABRV = "  ";
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    end
  else
    FF0BM001.FF0BMSNM = " "; /* Clear short desc*/
    FF0BM001.FF0BMCNM = " "; /* Clear short desc*/
  end

   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.XPCCD > " ") /* Category was entered*/
    if (FF0BM001.XPCCD in XPCTBL.XPCCD /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      FF0BM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF0BM001.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0BM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0BM001.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.YPGCD > " ") /* Type group was entered*/
    if (FF0BM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF0BM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF0BM001.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0BM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0BM001.YPGABRV = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group & obtain*/
   /* line code for display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF0BM001.YPGABRV != " " /* Type group valid*/
     && FF0BM001.XPCABRV != " ") /* Category valid*/
      set FF2REC empty; /* Clear row storage*/
      FF2REC.XPLCD = "*";
      FF2REC.XPCCD = FF0BM001.XPCCD;
      FF2REC.YPGCD = FF0BM001.YPGCD;
      FF2REC.YSMXDV = "10";
      FF0B521(); /* Select & open FF2REC "S1" csr*/
      FF0B522(); /* Fetch first FF2REC "S1" csr*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        FFWREC.XPLCD = FF2REC.XPLCD;
        if (FFWREC.XPLCD in XPLTBL.XPLCD)
          FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        end
      else /* Row not found*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF0BM001.YPGCD cursor, bold; /* Highlight*/
        set FF0BM001.XPCCD bold; /* Highlight*/
      end
      FF0B523(); /* Close FF2REC "S1" csr*/
    end
  end


end // end FF0B520

// Select & open FF2REC "S1" csr
Function FF0B521()
   /* ------------------------------------------------------------*/
   /* Select the requested rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "521"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELATIONSHIP      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0B521

// Fetch next FF2REC "S1" csr
Function FF0B522()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Rows not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "522"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0B522

// Close FF2REC "S1" csr
Function FF0B523()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "523"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FF2REC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0B523

// Verify data in the line
Function FF0B530()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.FF0BMSEL[FF0BWMIX] > " " /* Selection was entered*/
   && FF0BM001.FF0BMSEL[FF0BWMIX] != "S") /* and is not a "S"*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FF0BM001.FF0BMSEL[FF0BWMIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(41); /* Indicate only "S" may be used*/
  end

  if (FF0BM001.FF0BMSEL[FF0BWMIX] > " ") /* Selection made*/
    if (FF0BW00.FF0BWSSW == "Y") /* Selection already made*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0BM001.FF0BMSEL[FF0BWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(136); /* Indicate more than one line selected*/
    else
      FF0BW00.FF0BWSSW = "Y"; /* Indicate selection made*/
      FF0BW00.FF0BWSSI = FF0BW00.FF0BWMIX; /* Save select index*/
    end
  end


end // end FF0B530

// Process valid input request
Function FF0B600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0BW00.FF0BWFMS = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FF system commarea.*/
   /* ------------------------------------------------------------*/

  if (FF0BM001.YPGCD != FFWREC.YPGCD        /* Type group changed*/
   || FF0BM001.XPCCD != FFWREC.XPCCD        /* or category changed*/
   || FF0BM001.FF0BMSTY != FFWREC.SY1STNBR  /* or style changed*/
   || FF0BM001.FF0BMCLR != FFWREC.SY2CLRID  /* or color changed*/
   || FF0BM001.FF0BMDIM != FFWREC.XDMCD     /* or dim changed*/
   || FF0BM001.FF0BMWSN != FFWREC.FFEWSNBR  /* or w/s nbr changed*/
   || FF0BM001.FF0BMWTC != FFWREC.XWSCD     /* or w/s type changed*/
   || FF0BM001.FF0BMSSC != FF0BW00.FF0BWSSC /* or s.s. class changed*/
   || FF0BM001.FF0BMABM != FF0BW00.FF0BWABM) /* or actl buy mo changed*/
    FFWREC.YPGCD = FF0BM001.YPGCD;
    FFWREC.YPGABRV = FF0BM001.YPGABRV;
    FFWREC.XPCCD = FF0BM001.XPCCD;
    FFWREC.XPCABRV = FF0BM001.XPCABRV;
    FFWREC.SY1STNBR = FF0BM001.FF0BMSTY;
    FFWREC.SY2CLRID = FF0BM001.FF0BMCLR;
    FFWREC.XDMCD = FF0BM001.FF0BMDIM;
    FFWREC.SY1SSTNM = FF0BM001.FF0BMSNM;
    FFWREC.SY2CLRAB = FF0BM001.FF0BMCNM;
    FFWREC.FFEWSNBR = FF0BM001.FF0BMWSN;
    FFWREC.XWSCD = FF0BM001.FF0BMWTC;
    FFWREC.XWSABRV = FF0BM001.FF0BMWTA;
    FF0BW00.FF0BWSSC = FF0BM001.FF0BMSSC;
    FF0BW00.FF0BWABM = FF0BM001.FF0BMABM;

    /* ------------------------------------------------------------*/
     /* If PF18(CREATE-WS) was requested create empty work sheet*/
     /* headers & items for the product development if they do not*/
     /* already exist, purge any existing pages from temp storage*/
     /* and set request for data switch on.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf18) /* Work sheet create*/
      FF0B610(); /* Create prod devl work sheet*/
      FF0B111(); /* Purge any temp storage*/
      FF0BW00.FF0BWRDS = "Y"; /* Request data*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (FFWREC.FFEWSNBR > 0) /* Work sheet number entered*/
      FF0B111(); /* Purge any temp storage*/
      FF0BW00.FF0BWRDS = "Y"; /* Request for data switch*/
    else
      if (FFWREC.SY1STNBR != " ") /* Style entered*/
        FF0B111(); /* Purge any temp storage*/
        FF0BW00.FF0BWRDS = "Y"; /* Request for data switch*/
      else
        if (FFWREC.YPGCD != "  " /* Type group entered*/
         && FFWREC.XPCCD != "  ") /* and category entered*/
          FF0B111(); /* Purge any temp storage*/
          FF0BW00.FF0BWRDS = "Y"; /* Request for data switch*/
        else
          FF0BW00.FF0BWRDS = "N"; /* Request for data switch*/
        end
      end
    end
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    if (FF0BM001.XXXTSPAG != FF0BW00.XXXTSPAG) /* user chg'd page# on-line*/
      FF0BW00.XXXTSPAG = FF0BM001.XXXTSPAG;
      return;
    else
      FF0BW00.XXXTSPAG = FF0BW00.XXXTSPAG - 1; /* Decrement page number*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    if (FF0BM001.XXXTSPAG != FF0BW00.XXXTSPAG) /* user chg'd page# on-line*/
      FF0BW00.XXXTSPAG = FF0BM001.XXXTSPAG;
      return;
    else
      FF0BW00.XXXTSPAG = FF0BW00.XXXTSPAG + 1; /* Increment page number*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* ENTER was requested so send key data of selected work*/
   /* sheet to FF0E.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (FF0BW00.FF0BWSSW == "Y") /* A selection was made*/
      FFWREC.SY1STNBR = FF0BW01.SY1STNBR[FF0BWSSI];
      FFWREC.SY2CLRID = FF0BW01.SY2CLRID[FF0BWSSI];
      FFWREC.XDMCD = FF0BW01.XDMCD[FF0BWSSI];
      FFWREC.SY1SSTNM = FF0BW01.SY1SSTNM[FF0BWSSI];
      FFWREC.SY2CLRAB = FF0BW01.FF0BWCLA[FF0BWSSI];
      FFWREC.TA5TSQIX = FF0BW00.TA5TSQIX;

      if (FFWREC.XWSCD == "01") /* If currnt type w/s*/
        FFWREC.ZZZCHGDT = -1; /* Change date*/
        FFWREC.ZZZCHGTM = -1; /* Change time*/
        FFWREC.FFQMBYMO = -1; /* Actl buy mo*/
      else
        FFWREC.ZZZCHGDT = FF0BW01.FF0BWCDT[FF0BWSSI];
        FFWREC.ZZZCHGTM = FF0BW01.FF0BWCTM[FF0BWSSI];
        if (FFWREC.XWSCD != "03") /* If not buy type w/s*/
          FFWREC.FFQMBYMO = -1;
        end
      end

      COMMAREA.CATOAP = "FF0E"; /* To application*/
      XSFFS01(); /* Transfer to application*/
      /* ------------------------------------------------------------*/
       /* If transfer request failed display returned error message.*/
      /* ------------------------------------------------------------*/
      COMMAREA.CATOAP = "    "; /* Clear to application*/
      exit stack; /* Exit to display map*/
    else
      FFWREC.XXXMODID = "600"; /* Module identification*/
      converseLib.validationFailed(154); /* Indicate selection missing*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF19(PRT) was requested submit batch JCL for printing*/
   /* of selected work sheet.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* Work sheet print*/
    if (FF0BW00.FF0BWSSW == "Y") /* A selection was made*/
      FF0B620(); /* Submit batch JCL*/
    else
      FFWREC.XXXMODID = "600"; /* Module identification*/
      converseLib.validationFailed(154); /* Indicate selection missing*/
      exit stack; /* Exit to display map*/
    end
  end


end // end FF0B600

// Create prod devl w/s
Function FF0B610()
   /* ------------------------------------------------------------*/
   /* Verify that work sheet not exist yet for the product.*/
   /* ------------------------------------------------------------*/

  FF0BS25(); /* Verify w/s non-existence*/

  if (FFWREC.XXXMSGNO != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Obtain season begin months for category/type group.*/
   /* ------------------------------------------------------------*/

  FF0BS27(); /* Obtain sesn begin months*/

  if (FFWREC.XXXMSGNO != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* For each season begin month create a blank work sheet*/
   /* header.*/
   /* ------------------------------------------------------------*/

  FF0BW00.FF0BWSIX = 1; /* Initialize season index*/

  while (FF0BW00.FF0BWSIX <= 4
   && FF0BW00.FF2SEASN[FF0BWSIX] != 0)
    FF0BS30(); /* Obtain & save next w/s nbr*/
    XX0XS01(); /* Convert system date & time*/
    FF0BS31(); /* Updt next w/s nbr*/
    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit DB2*/
    FF0BS34(); /* get invoice cutoff date*/
    FF0BS36(); /* determine current business mo*/
    FF0BS32(); /* Insert w/s header*/
    /* ------------------------------------------------------------*/
     /* Create a blank work sheet item for the month prior to*/
     /* sesn-1 begin month of first header.*/
    /* ------------------------------------------------------------*/
    if (FF0BW00.FF0BWSIX == 1) /* First w/s header*/
      FF0BW00.FF0BWSFM = FF0BW00.FF0BWSFM - 1;
      if (FF0BW00.FF0BWSFM < 1)
        FF0BW00.FF0BWSFM = 12;
        if (FF0BW00.FF0BWSFY == 00)
          FF0BW00.FF0BWSFY = 99;
          FF0BW00.FF0BWSFC = FF0BW00.FF0BWSFC - 1;
        else
          FF0BW00.FF0BWSFY = FF0BW00.FF0BWSFY - 1;
        end
      end
      set FF9REC empty; /* set to empty*/
      FF0BS33(); /* Insert prior month w/s item*/
    end
    /* ------------------------------------------------------------*/
     /* For each month in the season create blank work sheet*/
     /* items.*/
    /* ------------------------------------------------------------*/
    while (FF0BW00.FF0BWSFD <= FFQREC.FFAENDMO)
      FF0BS38(); /* Get MSTY data*/
      FF0BS33(); /* Insert w/s item*/
    end
    FF0BW00.FF0BWSIX = FF0BW00.FF0BWSIX + 1; /* Increment season index*/
  end
  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit DB2*/


end // end FF0B610

// Submit batch JCL FF180d
Function FF0B620()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF0B621(); /* format production jcl*/
    else
      FF0B622(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "620"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF0B620

// Submit prod jcl FF1801
Function FF0B621()
   /* ------------------------------------------------------------*/
   /* Initialize the work area & index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize JCL index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (FF0BT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      set FF0BW02 empty; /* Parms work area*/
      FF0BW02.XPLCD = FFWREC.XPLCD;
      FF0BW02.XPLABRV = FFWREC.XPLABRV;
      FF0BW02.YPGCD = FFWREC.YPGCD;
      FF0BW02.YPGABRV = FFWREC.YPGABRV;
      FF0BW02.XPCCD = FFWREC.XPCCD;
      FF0BW02.XPCABRV = FFWREC.XPCABRV;
      FF0BW02.SY1STNBR = FF0BW01.SY1STNBR[FF0BWSSI];
      FF0BW02.SY2CLRID = FF0BW01.SY2CLRID[FF0BWSSI];
      FF0BW02.XDMCD = FF0BW01.XDMCD[FF0BWSSI];
      FF0BW02.SY1SSTNM = FF0BW01.SY1SSTNM[FF0BWSSI];
      FF0BW02.SY2CLRAB = FF0BW01.FF0BWCLA[FF0BWSSI];
      FF0BW02.XWSCD = FFWREC.XWSCD;
      if (FFWREC.XWSCD == "01") /* If currnt type w/s*/
        FF0BW02.FF0BWZDT = -1; /* Change date*/
        FF0BW02.FF0BWZTM = -1; /* Change time*/
        FF0BW02.FF0BWABY = -1; /* Actl buy mo*/
      else
        FF0BW02.FF0BWZDT = FF0BW01.FF0BWCDT[FF0BWSSI];
        FF0BW02.FF0BWZTM = FF0BW01.FF0BWCTM[FF0BWSSI];
        if (FFWREC.XWSCD == "03") /* If buy type w/s*/
          FF0BW02.FF0BWABY = FFWREC.FFQMBYMO;
        else
          FF0BW02.FF0BWABY = -1;
        end
      end
      /* ------------------------------------------------------------*/
       /* Move parameters to JCL.*/
      /* ------------------------------------------------------------*/
      TA6REC.TARJCL[TA6INDEX] = FF0BW02.TARJCL; /* Parameters*/
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      TA6REC.TARJCL[TA6INDEX] = FF0BT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0BT.TARTYPE[TA6INDEX]; /* Type*/
    end
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    if (FF0BT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/

end // end FF0B621

// Submit test jcl FF1801
Function FF0B622()
   /* submit test jcl*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area & index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize JCL index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (FF0BT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      set FF0BW02 empty; /* Parms work area*/
      FF0BW02.XPLCD = FFWREC.XPLCD;
      FF0BW02.XPLABRV = FFWREC.XPLABRV;
      FF0BW02.YPGCD = FFWREC.YPGCD;
      FF0BW02.YPGABRV = FFWREC.YPGABRV;
      FF0BW02.XPCCD = FFWREC.XPCCD;
      FF0BW02.XPCABRV = FFWREC.XPCABRV;
      FF0BW02.SY1STNBR = FF0BW01.SY1STNBR[FF0BWSSI];
      FF0BW02.SY2CLRID = FF0BW01.SY2CLRID[FF0BWSSI];
      FF0BW02.XDMCD = FF0BW01.XDMCD[FF0BWSSI];
      FF0BW02.SY1SSTNM = FF0BW01.SY1SSTNM[FF0BWSSI];
      FF0BW02.SY2CLRAB = FF0BW01.FF0BWCLA[FF0BWSSI];
      FF0BW02.XWSCD = FFWREC.XWSCD;
      if (FFWREC.XWSCD == "01") /* If currnt type w/s*/
        FF0BW02.FF0BWZDT = -1; /* Change date*/
        FF0BW02.FF0BWZTM = -1; /* Change time*/
        FF0BW02.FF0BWABY = -1; /* Actl buy mo*/
      else
        FF0BW02.FF0BWZDT = FF0BW01.FF0BWCDT[FF0BWSSI];
        FF0BW02.FF0BWZTM = FF0BW01.FF0BWCTM[FF0BWSSI];
        if (FFWREC.XWSCD == "03") /* If buy type w/s*/
          FF0BW02.FF0BWABY = FFWREC.FFQMBYMO;
        else
          FF0BW02.FF0BWABY = -1;
        end
      end
      /* ------------------------------------------------------------*/
       /* Move parameters to JCL.*/
      /* ------------------------------------------------------------*/
      TA6REC.TARJCL[TA6INDEX] = FF0BW02.TARJCL; /* Parameters*/
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      TA6REC.TARJCL[TA6INDEX] = FF0BT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0BT5O.TARTYPE[TA6INDEX]; /* Type*/
    end
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    if (FF0BT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/

end // end FF0B622

// Submit FF297d on any exit
Function FF0B630()

  if (FFWREC.XPCCD == " " /* if no category or line exist return*/
   || FFWREC.XPLCD == " ")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  /* SET TA3REC EMPTY;*/
  /* MOVE 'ASSIGN ' TO TA3REC.TA3OPTN;*/
  /* CALL TA0230 TA3REC (NOMAPS,NONCSP,REPLY;*/

  /* IF EZERT8 EQ '00000000'          /* Call successful*/
  /* AND TA3REC.TA3RTNCD EQ 0;      /* Good return code*/
  /* IF TA3REC.TA3RGNID EQ '03';    /* if on production system*/
  /* PERFORM FF0B631;             /* format production jcl*/
  /* ELSE;*/
  /* PERFORM FF0B632;             /* format development jcl*/
  /* END;*/
  /* ELSE;*/
  /* ;*/
  /* MOVE '630' TO FFWREC.XXXMODID; /* module identification*/
  /* MOVE 87 TO FFWREC.XXXMSGNO;    /* Error encountered with print request*/
  /* EZEFLO;*/
  /* END;*/

end // end FF0B630

// Select single FFQREC row
Function FF0BS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Work sheet nbr*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("S ", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BW00.FF0BWMIX = 1; /* Initialize display index*/
      FFWREC.XPCCD = FFQREC.XPCCD;
      if (FFQREC.XPCCD in XPCTBL.XPCCD)
        FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
      FFWREC.YPGCD = FFQREC.YPGCD;
      if (FFQREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
      FFWREC.XPLCD = FFQREC.XPLCD;
      if (FFQREC.XPLCD in XPLTBL.XPLCD)
        FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
      FF0BS02(); /* Save in display storage*/
      if (FFQREC.XWSCD == "04") /* PFCST w/s type*/
        return; /* Return to previous process*/
      else
        FFWREC.XXXMODID = "S01"; /* Module identification*/
        set FF0BM001.FF0BMWTC cursor, bold; /* Highlight*/
        set FF0BM001.FF0BMWSN bold; /* Highlight*/
        FFWREC.XXXMSGNO = 184; /* Must be type 04*/
        return; /* Return to previous process*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WORK SHEET USING W/S NBR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS01

// Save data in display storage
Function FF0BS02()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  FF0BW01.SY1STNBR[FF0BWMIX] = FFQREC.SY1STNBR; /* Style*/
  FF0BW01.SY2CLRID[FF0BWMIX] = FFQREC.SY2CLRID; /* Color*/
  FF0BW01.XDMCD[FF0BWMIX] = FFQREC.XDMCD; /* Dim*/
  FF0BW01.FF0BWCDT[FF0BWMIX] = FFQREC.ZZZCHGDT; /* Create date*/
  FF0BW01.FF0BWCTM[FF0BWMIX] = FFQREC.ZZZCHGTM;
  FF0BW01.XXXUSER[FF0BWMIX] = FFQREC.XXXUSRID; /* User-id*/
  FF0BW01.SY2SSCIN[FF0BWMIX] = FFQREC.SY2SSCIN; /* Safety stock class*/

   /* set work index to previous entry*/
  FF0BW00.FF0BWIDX = FF0BW00.FF0BWMIX - 1;
  if (FF0BW00.FF0BWIDX == 0 /* for first look up*/
   /* if key not equal previous key, perform look up*/
   || FFQREC.SY1STNBR != FF0BW01.SY1STNBR[FF0BWIDX]
   || FFQREC.SY2CLRID != FF0BW01.SY2CLRID[FF0BWIDX]
   || FFQREC.XDMCD != FF0BW01.XDMCD[FF0BWIDX])
    set PG2REC empty; /* Clear row storage area*/
    PG2REC.XGPCD = "02";
    PG2REC.SY1STNBR = FFQREC.SY1STNBR;
    PG2REC.SY2CLRID = FFQREC.SY2CLRID;
    PG2REC.XDMCD = FFQREC.XDMCD;
    FF0BS23(); /* Obtain product descriptions*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
      FF0BW01.SY1SSTNM[FF0BWMIX] = PG2REC.SY1SSTNM;
      FF0BW01.FF0BWCLA[FF0BWMIX] = PG2REC.SY2CLRAB;
      if (FF0BM001.FF0BMWTC == "03") /* buy worksheet requested*/
        FF0BS37(); /* fetch vswitm01 rec*/
        FFXREC.FFXNUMB = FFRREC.FFRTENBY; /* tent buy qty*/
        XSFFS10(); /* translate to thousands (char)*/
        FF0BW01.FF0BWSNB[FF0BWMIX] = FFXREC.FFXCHAR;
      else
        FF0BW01.XSECD[FF0BWMIX] = PG2REC.XSECD;
        FF0BW00.XSNYR = PG2REC.XSNYR;
        FF0BW00.FF0BWSNYR = FF0BW00.XSNYR;
        FF0BW01.FF0BWSYR[FF0BWMIX] = FF0BW00.FF0BWSNYY;
      end
      FF0BW00.FF0BWPDT = PG2REC.SY2PDCMO;
      FF0BW01.FF0BMCMO[FF0BWMIX] = FF0BW00.FF0BWPYM;
    else /* +100 on pg2REC*/
      set PG4REC empty; /* Clear row storage area*/
      PG4REC.PG4STNBR = FFQREC.SY1STNBR;
      FF0BS35(); /* Obtain product descriptions*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
        FF0BW01.SY1SSTNM[FF0BWMIX] = PG4REC.SY1SSTNM;
        FF0BW01.FF0BWCLA[FF0BWMIX] = " ";
        if (FF0BM001.FF0BMWTC == "03") /* buy worksheet requested*/
          FF0BS37(); /* fetch vswitm01 rec*/
          FFXREC.FFXNUMB = FFRREC.FFRTENBY; /* tent buy qty*/
          XSFFS10(); /* translate to thousands (char)*/
          FF0BW01.FF0BWSNB[FF0BWMIX] = FFXREC.FFXCHAR;
        else
          FF0BW01.XSECD[FF0BWMIX] = PG4REC.XSECD;
          FF0BW00.XSNYR = PG4REC.XSNYR;
          FF0BW00.FF0BWSNYR = FF0BW00.XSNYR;
          FF0BW01.FF0BWSYR[FF0BWMIX] = FF0BW00.FF0BWSNYY;
        end
        FF0BW00.FF0BWPDT = PG4REC.SY2PDCMO;
        FF0BW01.FF0BMCMO[FF0BWMIX] = FF0BW00.FF0BWPYM;
      end
    end
  else /* key is same as prev key*/
     /* copy prev desc to current desc*/
    FF0BW01.SY1SSTNM[FF0BWMIX] = FF0BW01.SY1SSTNM[FF0BWIDX];
    FF0BW01.FF0BWCLA[FF0BWMIX] = FF0BW01.FF0BWCLA[FF0BWIDX];
    if (FF0BM001.FF0BMWTC == "03") /* buy worksheet requested*/
      FF0BS37(); /* fetch vswitm01 rec*/
      FFXREC.FFXNUMB = FFRREC.FFRTENBY; /* tent buy qty*/
      XSFFS10(); /* translate to thousands (char)*/
      FF0BW01.FF0BWSNB[FF0BWMIX] = FFXREC.FFXCHAR;
    else
      FF0BW01.XSECD[FF0BWMIX] = FF0BW01.XSECD[FF0BWIDX];
      FF0BW01.FF0BWSYR[FF0BWMIX] = FF0BW01.FF0BWSYR[FF0BWIDX];
    end
    FF0BW01.FF0BMCMO[FF0BWMIX] = FF0BW01.FF0BMCMO[FF0BWIDX];
  end

  if (FFQREC.XLCCD == "20") /* Closed out product*/
    FF0BW01.FF0BWCOF[FF0BWMIX] = "*"; /* Closeout flag*/
  else
    FF0BW01.FF0BWCOF[FF0BWMIX] = " "; /* Closeout flag*/
  end

  FF0BW00.FF0BWMIX = FF0BW00.FF0BWMIX + 1; /* Increment display index*/


end // end FF0BS02

// obtain product descriptions
Function FF0BS03()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* FF3REC not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS03

// add page to temp storage
Function FF0BS04()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FF0BW01.XXXTSLEN = FF0BW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FF0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set FF0BW01 empty; /* M001 display storage*/
    FF0BW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FF0BW00.FF0BWMIX = 1; /* Map line number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS04

// Obtain cat/type grp/line
Function FF0BS05()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* Clear row storage area*/
  FF3REC.SY1STNBR = FFWREC.SY1STNBR;
  FF3REC.SY2CLRID = FFWREC.SY2CLRID;
  FF3REC.XDMCD = FFWREC.XDMCD;

  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FFWREC.XPCCD = FF3REC.XPCCD;
      if (FFWREC.XPCCD in XPCTBL.XPCCD)
        FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
      FFWREC.YPGCD = FF3REC.YPGCD;
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
      FFWREC.XPLCD = FF3REC.XPLCD;
      if (FFWREC.XPLCD in XPLTBL.XPLCD)
        FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FFWREC.XXXMODID = "S05"; /* Module identification*/
      set FF0BM001.FF0BMSTY cursor, bold; /* Highlight*/
      set FF0BM001.FF0BMCLR bold; /* Highlight*/
      set FF0BM001.FF0BMDIM bold; /* Highlight*/
      converseLib.validationFailed(22); /* Invalid style/color*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN CATEGORY/TYPE GROUP";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS05

// Select & open FFQREC "S4" csr
Function FF0BS06()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.SY1STNBR = FFWREC.SY1STNBR;
  FFQREC.SY2CLRID = FFWREC.SY2CLRID;
  FFQREC.XDMCD = FFWREC.XDMCD;
  FFQREC.XWSCD = FFWREC.XWSCD;
  FFQREC.SY2SSCIN = FF0BW00.FF0BWSSC;
  FFQREC.FFABEGMO = -1;
  FFQREC.FFQMBYMO = -1;
  FFQREC.FFQABYMO = -1;

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("S4", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BW00.FF0BWMIX = 1; /* Initialize display index*/
      FF0BW00.FF0BWECS = "N";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WORK SHEET USING STYLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS06

// Fetch next FFQREC "S4" row
Function FF0BS07()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("N4", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BS02(); /* Save in display storage*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FF0BW00.FF0BWECS = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS07

// Close FFQREC "S4" cursor
Function FF0BS08()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("C4", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S08"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFQREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS08

// Select & open FFQREC "S3" csr
Function FF0BS10()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.XPCCD = FFWREC.XPCCD;
  FFQREC.YPGCD = FFWREC.YPGCD;
  FFQREC.XWSCD = FFWREC.XWSCD;
  FFQREC.SY2SSCIN = FF0BW00.FF0BWSSC;
  FFQREC.FFABEGMO = -1;
  FFQREC.FFQMBYMO = -1;
  FFQREC.FFQABYMO = -1;

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("S3", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BW00.FF0BWMIX = 1; /* Initialize display index*/
      FF0BW00.FF0BWECS = "N";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WORK SHEET USING CATEGORY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS10

// Fetch next FFQREC "S3" row
Function FF0BS11()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("N3", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BS02(); /* Save in display storage*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FF0BW00.FF0BWECS = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS11

// Close FFQREC "S3" cursor
Function FF0BS12()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("C3", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFQREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS12

// Read temporary storage page
Function FF0BS20()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FF0BW01.XXXTSLEN = FF0BW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FF0BW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FF0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S20"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS20

// obtain product descriptions
Function FF0BS23()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* PG2REC not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS23

// Verify worksheet not exist yet
Function FF0BS25()
   /* ------------------------------------------------------------*/
   /* Select & open cursor for FFQREC S4 set using style, color,*/
   /* dimension.*/
   /* ------------------------------------------------------------*/

  FFWREC.XWSCD = "01";
  if (FF0BW00.FF0BWSSC == " ")
    FF0BW00.FF0BWSSC = "*";
  end

  FF0BS06(); /* Select set & open FFQREC "S4"*/

   /* ------------------------------------------------------------*/
   /* Fetch "S4" row to check for existence.*/
   /* ------------------------------------------------------------*/
  FF0BS07(); /* Fetch selected FFQREC "S4" row*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected FFQREC set.*/
   /* ------------------------------------------------------------*/
  FF0BS08(); /* Close FFQREC "S4" cursor*/

  if (FF0BW00.FF0BWECS == "N")
    FFWREC.XXXMODID = "S25"; /* Module identification*/
    set FF0BM001.FF0BMSTY cursor, bold; /* Highlight*/
    set FF0BM001.FF0BMCLR bold; /* Highlight*/
    set FF0BM001.FF0BMDIM bold; /* Highlight*/
    converseLib.validationFailed(280); /* Work sheet already exists*/
    exit stack; /* Exit to display map*/
  end


end // end FF0BS25

// Obtain sesn begin months
Function FF0BS27()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF2REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (FF2REC.FF2SEASN[1] > 0)
        FFWREC.FFABEGMO = FF2REC.FF2SEASN[1];
        FF0BW00.FF2SEASN[1] = FF2REC.FF2SEASN[1];
        FF0BW00.FF2SEASN[2] = FF2REC.FF2SEASN[2];
        FF0BW00.FF2SEASN[3] = FF2REC.FF2SEASN[3];
        FF0BW00.FF2SEASN[4] = FF2REC.FF2SEASN[4];
        return; /* Return to previous process*/
      else
        FFWREC.XXXMODID = "S27"; /* Module identification*/
        set FF0BM001.YPGCD cursor, bold; /* Highlight*/
        set FF0BM001.XPCCD bold; /* Highlight*/
        FFWREC.XXXMSGNO = 174; /* No seasons found*/
        return; /* Return to previous process*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FFWREC.XXXMODID = "S27"; /* Module identification*/
      set FF0BM001.YPGCD cursor, bold; /* Highlight*/
      set FF0BM001.XPCCD bold; /* Highlight*/
      FFWREC.XXXMSGNO = 187; /* No category found*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S27"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN SEASON BEGIN MOS ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS27

// Obtain & save next w/s nbr
Function FF0BS30()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas & indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BW00.FF0BWSWN = FF1REC.FF1WSNBR;
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN NEXT WORK SHEET NBR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS30

// Update next w/s nbr
Function FF0BS31()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas & indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ------------------------------------------------------------*/
   /* Update the row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3660" ("U3", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE NEXT WORK SHEET NBR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS31

// Insert work sheet header
Function FF0BS32()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas & indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.FFEWSNBR = FF0BW00.FF0BWSWN; /* W/S nbr*/
  FFQREC.SY1STNBR = FFWREC.SY1STNBR; /* Style*/
  FFQREC.SY2CLRID = FFWREC.SY2CLRID; /* Color*/
  FFQREC.XDMCD = FFWREC.XDMCD; /* Dim*/
  FFQREC.XPCCD = FFWREC.XPCCD; /* Category*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* Type group*/
  FFQREC.XPLCD = FFWREC.XPLCD; /* Line*/
  FFQREC.XPRCD = FF0BW00.XPRCD; /* Type*/
  FFQREC.XLCCD = "10"; /* Life cycle code*/
  FFQREC.XWSCD = "01"; /* W/S type*/
  FFQREC.FFABEGMO = FF0BW00.FF2SEASN[FF0BWSIX]; /* Sesn beg mo*/
  FF0BW00.FF0BWSFD = FF0BW00.FF2SEASN[FF0BWSIX]; /* Save fcst mo*/
  FFQREC.SY2SSCIN = " "; /* S.S. class*/
  FFQREC.FF2FUIND = "1"; /* Futures yr ind*/
  FFQREC.FF2DMIND = "1"; /* Demand yr ind*/
  FFQREC.FF2PRIND = "1"; /* Prop yr ind*/
  FFQREC.FFQFCMFL = "N"; /* Fcstr comments flag*/
  FFQREC.FFQSCMFL = "N"; /* Sched comments flag*/
  FFQREC.XXXUSRID = COMMAREA.CAUSERID; /* User id*/
  FFQREC.FFQDMDDT = XX0XW01.XX0XWDAT; /* Demand as of date*/
  FFQREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FFQREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFQREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Set up time*/
  FFQREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FFQREC.FFQCURMO = FF0BW00.FF0BW-CCYYMM; /* Current month*/

   /* ------------------------------------------------------------*/
   /* Calculate main buy month.*/
   /* ------------------------------------------------------------*/
  FF0BW00.FF0BWWBD = FF1REC.FF1FUTDT;
  FF0BW00.FF0BWWMO = FF0BW00.FF0BWWBM;

  FF0BW00.FF0BWWMM = FF0BW00.FF0BWWMM + 5; /* Add five months*/
  if (FF0BW00.FF0BWWMM > 12)
    FF0BW00.FF0BWWMM = FF0BW00.FF0BWWMM - 12;
    if (FF0BW00.FF0BWWYY == 99)
      FF0BW00.FF0BWWCC = FF0BW00.FF0BWWCC + 1;
      FF0BWWYY = 00;
    else
      FF0BW00.FF0BWWYY = FF0BW00.FF0BWWYY + 1;
    end
  end

  FFQREC.FFQMBYMO = FF0BW00.FF0BWWMO;

   /* ------------------------------------------------------------*/
   /* Calculate season end month.*/
   /* ------------------------------------------------------------*/

  if (FF0BW00.FF0BWSIX == 4)
    FF0BW00.FF0BWWMO = FF0BW00.FF2SEASN[1];
    FF0BW00.FF0BWWMM = FF0BW00.FF0BWWMM + 11;
    if (FF0BW00.FF0BWWMM > 12)
      FF0BW00.FF0BWWMM = FF0BW00.FF0BWWMM - 12;
      if (FF0BW00.FF0BWWYY == 99)
        FF0BW00.FF0BWWCC = FF0BW00.FF0BWWCC + 1;
        FF0BWWYY = 00;
      else
        FF0BW00.FF0BWWYY = FF0BW00.FF0BWWYY + 1;
      end
    end
  else
    FF0BW00.FF0BWNSI = FF0BW00.FF0BWSIX + 1; /* Calc next sesn ix*/
    if (FF0BW00.FF2SEASN[FF0BWNSI] == 0)
      FF0BW00.FF0BWWMO = FF0BW00.FF2SEASN[1];
      FF0BW00.FF0BWWMM = FF0BW00.FF0BWWMM + 11;
      if (FF0BW00.FF0BWWMM > 12)
        FF0BW00.FF0BWWMM = FF0BW00.FF0BWWMM - 12;
        if (FF0BW00.FF0BWWYY == 99)
          FF0BW00.FF0BWWCC = FF0BW00.FF0BWWCC + 1;
          FF0BWWYY = 00;
        else
          FF0BW00.FF0BWWYY = FF0BW00.FF0BWWYY + 1;
        end
      end
    else
      FF0BW00.FF0BWWMO = FF0BW00.FF2SEASN[FF0BWNSI];
      FF0BW00.FF0BWWMO = FF0BW00.FF0BWWMO - 1;
      if (FF0BW00.FF0BWWMM == 0)
        FF0BW00.FF0BWWMM = 12;
        if (FF0BW00.FF0BWWYY == 0)
          FF0BW00.FF0BWWYY = 99;
   /* 07/12/99 - Y2K fix*/
          FF0BW00.FF0BWWCC = FF0BW00.FF0BWWCC - 1;
        else
          FF0BW00.FF0BWWYY = FF0BW00.FF0BWWYY - 1;
        end
      end
    end
  end

  FFQREC.FFAENDMO = FF0BW00.FF0BWWMO;

   /* ------------------------------------------------------------*/
   /* Add the requested row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("A ", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S32"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD WORK SHEET HEADER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS32

// Insert work sheet item
Function FF0BS33()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas & indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFRREC empty; /* Clear row storage area*/

  FFRREC.FFRSUBBY = FF9REC.FFRSUBBY;
  FFRREC.FFRPRDDU = FF9REC.FFRPRDDU;
  FFRREC.FFEWSNBR = FF0BW00.FF0BWSWN; /* W/S nbr*/
  FFRREC.FF4FCTMO = FF0BW00.FF0BWSFD; /* Fcst month*/
  FFRREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FFRREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFRREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Add the requested row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3820" ("A ", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BW00.FF0BWSFM = FF0BW00.FF0BWSFM + 1; /* Increase saved fcst month*/
      if (FF0BW00.FF0BWSFM > 12)
        FF0BW00.FF0BWSFM = FF0BW00.FF0BWSFM - 12;
        if (FF0BW00.FF0BWSFY == 99)
          FF0BW00.FF0BWSFC = FF0BW00.FF0BWSFC + 1;
          FF0BWSFY = 00;
        else
          FF0BW00.FF0BWSFY = FF0BW00.FF0BWSFY + 1;
        end
      end
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S33"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD WORK SHEET ITEM";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS33

// Obtain ivc cutoff date
Function FF0BS34()
   /* ------------------------------------------------------------*/
   /* obtain next work sheet number dfcast.vffctl01*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S34"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0BS34

// read product desc from PG4REC
Function FF0BS35()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* PG4REC not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS35

// Determine current business mo
Function FF0BS36()
  FF0BW00.FF0BW-DAT = FF1REC.FF1IVCDT; /* invoice cutoff date*/

  if (XX0XW01.XX0XWDAT >= FF0BW00.FF0BW-DAT) /* curr dt > ivc dt*/

  else
    if (FF0BW00.FF0BW-MM == 1)
      FF0BW00.FF0BW-MM = 12;
      FF0BW00.FF0BW-CCYY = FF0BW00.FF0BW-CCYY - 1;
    else
      FF0BW00.FF0BW-CCYYMM = FF0BW00.FF0BW-CCYYMM - 1;
    end
  end
end // end FF0BS36

// fetch vswitm01 rec
Function FF0BS37()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas & indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFRREC empty; /* Clear row storage area*/

  FFRREC.FFEWSNBR = FFQREC.FFEWSNBR; /* W/S nbr*/
  if (FFQREC.FFQCURMO > FFQREC.FFQABYMO)
    FFRREC.FF4FCTMO = FFQREC.FFQCURMO; /* contemporary mo*/
  else
    FFRREC.FF4FCTMO = FFQREC.FFQABYMO; /* actl buy mo*/
  end

   /* ------------------------------------------------------------*/
   /* fetch the requested row from vswitm01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3820" ("S ", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no record*/
        FFRREC.FFRTENBY = 0;
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S37"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH WORK SHEET ITEM";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS37

// Select & open FFQREC "SB" csr
Function FF0BS38()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

  FF9REC.YSMXDV = "10"; /* DIV GRP CODE*/
  FF9REC.XCTCD = "USA"; /* FOREIGN COUNTRY CODE*/
  FF9REC.SY1STNBR = FFWREC.SY1STNBR; /* STYLE NUMBER*/
  FF9REC.SY2CLRID = FFWREC.SY2CLRID; /* COLOR ID*/
  FF9REC.XDMCD = FFWREC.XDMCD; /* DIM CD*/
  FF9REC.FF4FCTMO = FF0BW00.FF0BWSFD; /* FORECAST MONTH*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" ("S ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BW00.FF0BWMIX = 1; /* Initialize display index*/
      FF0BW00.FF0BWECS = "N";
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* Normal return code*/
      FF9REC.FFRSUBBY = 0;
      FF9REC.FFRPRDDU = 0;
      FF0BW00.FF0BWMIX = 1; /* Initialize display index*/
      FF0BW00.FF0BWECS = "N";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S38"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WORK SHEET USING CATEGORY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS38

// Select & open FFQREC "SC" csr
Function FF0BS40()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.SY1STNBR = FFWREC.SY1STNBR;
  FFQREC.SY2CLRID = FFWREC.SY2CLRID;
  FFQREC.XDMCD = FFWREC.XDMCD;
  FFQREC.XWSCD = FFWREC.XWSCD;
  FFQREC.SY2SSCIN = FF0BW00.FF0BWSSC;
  FFQREC.FFABEGMO = -1;
  FFQREC.FFQMBYMO = -1;

  if (FFWREC.FFQMBYMO > 0) /* Actl buy mo entered*/
    FFQREC.FFQABYMO = FFWREC.FFQMBYMO; /* select table row*/
  else
    FFQREC.FFQABYMO = -1;
  end

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("SC", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BW00.FF0BWMIX = 1; /* Initialize display index*/
      FF0BW00.FF0BWECS = "N";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WORK SHEET USING STYLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS40

// Fetch next FFQREC "SC" row
Function FF0BS41()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("NC", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BS02(); /* Save in display storage*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FF0BW00.FF0BWECS = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS41

// Close FFQREC "SC" cursor
Function FF0BS43()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("CC", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S43"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFQREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS43

// Select & open FFQREC "SB" csr
Function FF0BS50()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.XPCCD = FFWREC.XPCCD;
  FFQREC.YPGCD = FFWREC.YPGCD;
  FFQREC.XWSCD = FFWREC.XWSCD;
  FFQREC.SY2SSCIN = FF0BW00.FF0BWSSC;
  FFQREC.FFABEGMO = -1;
  FFQREC.FFQMBYMO = -1;

  if (FFWREC.FFQMBYMO > 0) /* actl buy month enterd*/
    FFQREC.FFQABYMO = FFWREC.FFQMBYMO;
  else
    FFQREC.FFQABYMO = -1;
  end

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("SB", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BW00.FF0BWMIX = 1; /* Initialize display index*/
      FF0BW00.FF0BWECS = "N";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S50"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WORK SHEET USING CATEGORY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS50

// Fetch next FFQREC "SB" row
Function FF0BS51()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("NB", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0BS02(); /* Save in display storage*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FF0BW00.FF0BWECS = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S51"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS51

// Close FFQREC "SB" cursor
Function FF0BS53()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("CB", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S53"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFQREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0BS53

//*** RECORD=FF0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0BW00 type basicRecord
  10 FF0BWMIX FF0BWMIX ; 
  10 FF0BWIDX FF0BWIDX ; 
  10 FF0BWFMS FF0BWFMS ; 
  10 FF0BWRDS FF0BWRDS ; 
  10 FF0BWECS FF0BWECS ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 CACHGFL CACHGFL ; 
  10 FF0BWWMO FF0BWWMO ; 
    15 FF0BWWCC FF0BWWCC ; 
    15 FF0BWWYM FF0BWWYM ; 
      20 FF0BWWYY FF0BWWYY ; 
      20 FF0BWWMM FF0BWWMM ; 
  10 FF0BWWBD FF0BWWBD ; 
    15 FF0BWWBM FF0BWWBM ; 
    15 * num(2) ; 
  10 FF0BWCRD FF0BWCRD ; 
    15 FF0BWCRC FF0BWCRC ; 
    15 FF0BWCRY FF0BWCRY ; 
    15 FF0BWCRM FF0BWCRM ; 
    15 FF0BWCDY FF0BWCDY ; 
  10 FF0BWCHM FF0BWCHM ; 
  10 FF0BWVDT FF0BWVDT ; 
    15 FF0BWVYM FF0BWVYM ; 
    15 FF0BWVDD FF0BWVDD ; 
  10 FF0BWSSW FF0BWSSW ; 
  10 FF0BWSSI FF0BWSSI ; 
  10 FF0BWSSC FF0BWSSC ; 
  10 FF2SEASN FF2SEASN [4] ; 
  10 FF0BWSIX FF0BWSIX ; 
  10 FF0BWNSI FF0BWNSI ; 
  10 FF0BWSWN FF0BWSWN ; 
  10 FF0BWSFD FF0BWSFD ; 
    15 FF0BWSFC FF0BWSFC ; 
    15 FF0BWSFY FF0BWSFY ; 
    15 FF0BWSFM FF0BWSFM ; 
  10 FF0BWABM FF0BWABM ; 
  10 FF0BWWIX FF0BWWIX ; 
  10 XPRCD XPRCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 FF0BWPFS FF0BWPFS ; 
  10 FF0BWPDT FF0BWPDT ; 
    15 FF0BWPCC FF0BWPCC ; 
    15 FF0BWPYM FF0BWPYM ; 
  10 XSNYR XSNYR ; 
  10 FF0BWSNYR FF0BWSNYR ; 
    15 FF0BWSNCC FF0BWSNCC ; 
    15 FF0BWSNYY FF0BWSNYY ; 
  10 FF0BW-DAT FF0BW-DAT ; 
    15 * num(1) ; // filler
    15 FF0BW-CCYYMM FF0BW-CCYYMM ; 
      20 FF0BW-CCYY FF0BW-CCYY ; 
      20 FF0BW-MM FF0BW-MM ; 
    15 FF0BW-DD FF0BW-DD ; 
end // end FF0BW00

//*** RECORD=FF0BW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0BW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(952) ; 
    10 FF0BWSEL FF0BWSEL [14] ; 
    10 FF0BWCOF FF0BWCOF [14] ; 
    10 SY1STNBR SY1STNBR [14] ; 
    10 SY2CLRID SY2CLRID [14] ; 
    10 XDMCD XDMCD [14] ; 
    10 SY1SSTNM SY1SSTNM [14] ; 
    10 FF0BWCLA FF0BWCLA [14] ; 
    10 FF0BWCDT FF0BWCDT [14] ; 
    10 FF0BWCTM FF0BWCTM [14] ; 
    10 FF0BWSNB FF0BWSNB [14] ; 
      15 XSECD XSECD ; 
      15 * char(1) ; // space
      15 FF0BWSYR FF0BWSYR ; 
    10 FF0BMCMO FF0BMCMO [14] ; 
    10 XXXUSER XXXUSER [14] ; 
    10 SY2SSCIN SY2SSCIN [14] ; 
end // end FF0BW01

//*** RECORD=FF0BW02 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1801 - Print Short Range Forecast Worksheet.
// ------------------------------------------------------------
// ***********************
Record FF0BW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 XPLABRV XPLABRV ; 
    10 YPGCD YPGCD ; 
    10 YPGABRV YPGABRV ; 
    10 XPCCD XPCCD ; 
    10 XPCABRV XPCABRV ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XWSCD XWSCD ; 
    10 FF0BWZDT FF0BWZDT ; 
    10 FF0BWZTM FF0BWZTM ; 
    10 FF0BWABY FF0BWABY ; 
end // end FF0BW02

//*** RECORD=FF0BW03 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF2971 - Update cat and line demand.
// ------------------------------------------------------------
// ***********************
Record FF0BW03 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 YPGCD YPGCD ; 
    10 * char(74) ; 
end // end FF0BW03

// proj dom cls YYMM
DataItem FF0BMCMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work ccyy
DataItem FF0BW-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyymm
DataItem FF0BW-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyymmdd
DataItem FF0BW-DAT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work dd
DataItem FF0BW-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem FF0BW-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// actl buy month YYMM
DataItem FF0BWABM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// actual buy ccyymm
DataItem FF0BWABY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change date ccyymmdd
DataItem FF0BWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create day
DataItem FF0BWCDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create hours/minutes
DataItem FF0BWCHM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// color abbrv
DataItem FF0BWCLA char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// closeout flag
DataItem FF0BWCOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create century
DataItem FF0BWCRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create ccyymmdd
DataItem FF0BWCRD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create month
DataItem FF0BWCRM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create year
DataItem FF0BWCRY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change time hhmm
DataItem FF0BWCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor switch
DataItem FF0BWECS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0BWFMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem FF0BWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map lines index
DataItem FF0BWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// next season index
DataItem FF0BWNSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work proj dom closeout cc
DataItem FF0BWPCC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work proj dom closeout dt
DataItem FF0BWPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product found switch
DataItem FF0BWPFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work proj dom closeout yymm
DataItem FF0BWPYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem FF0BWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work sheet selection indicator
DataItem FF0BWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save fcst century
DataItem FF0BWSFC num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save fcst month dt
DataItem FF0BWSFD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save fcst month
DataItem FF0BWSFM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save fcst year
DataItem FF0BWSFY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season index
DataItem FF0BWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season code and year
DataItem FF0BWSNB char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season cc
DataItem FF0BWSNCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem FF0BWSNYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season yr
DataItem FF0BWSNYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// safety stock class
DataItem FF0BWSSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save select index
DataItem FF0BWSSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection switch
DataItem FF0BWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved w/s nbr
DataItem FF0BWSWN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year
DataItem FF0BWSYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// validate day
DataItem FF0BWVDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate date
DataItem FF0BWVDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate year/month
DataItem FF0BWVYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work buy date ccyymmdd
DataItem FF0BWWBD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work buy ccyymm
DataItem FF0BWWBM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FF0BWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work sheet index
DataItem FF0BWWIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FF0BWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyymm
DataItem FF0BWWMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year/month
DataItem FF0BWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FF0BWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change date ccyymmdd
DataItem FF0BWZDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change time hhmm
DataItem FF0BWZTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

