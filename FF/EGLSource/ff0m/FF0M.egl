package ff0m;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import fh.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0M ****
// This application is part of the Footwear Forcast System  -
// Short Range.
// 
// The user may enter this application via the Short Range Menu
// (FF0A), the Work Sheet Select Screen (FF0B), the Set Hist
// Future Ind screen (FF0D), the Set Hist Prop Ind screen
// (FF0R), or Fast Path.
// 
// This application displays Historical seasonal demand infor-
// mation for 1, 2, and combined years ago and any previously
// set hist seasonal indicator for a given category/type group.
// an alternate category code may also be displayed if it
// exists for the given category.
// 
// The user may press PF16 to have the alternate categories
// demand data if an alternate category has been set for the
// given category. By pressing PF17 the user returns to the
// original categories data on display.
// 
// The user may change the hist indicatory for the original
// category by selecting one of the three displayed regardless
// of whether the original category or alternate category data
// is displayed.
// 
// The user may scroll left and right to see each month in the
// short range seasons for the category.
// 
// The user may PF14 to application FF0D, PF15 to application
// FF0r, or exit to any allowed application via Fast Path.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          07/14/89  CNEWMA  New application.
// FF135    11/29/90  MDANG   Removed combined years option and
//                            added user created index option.
// fh140    02/09/94  JJUCH   Change to use authorized future.
// ff175    12/19/96  dsmith  regenerated for year 2000.
// *********************
Program FF0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0MW00 FF0MW00; // record
  FF0MW01 FF0MW01; // record
  FF0MW02 FF0MW02; // record
  FF0MW03 FF0MW03; // record
  FF2REC FF2REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FH3REC FH3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use FF0MM.FF0MM001,  // forms
      FF0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FF0MM001 initial; /* M001 input/output*/
    set FF0MW00 empty; /* working storage*/
    set FF0MW01 empty; /* working storage*/
    set FF0MW02 empty; /* working storage*/
    set FF0MW03 empty; /* temp working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0MW00.FF0MWDRF = "N";

    if (FFWREC.YPGCD == " ") /* type group code not passed*/
      FFWREC.YPGCD = "01";
      FFWREC.YPGABRV = "******";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    if (FFWREC.XPCCD != " " /* category found*/
     && FFWREC.YPGCD != " ") /* type group code found*/
      FF0MW00.FF0MWDRF = "Y"; /* data requested*/
    end

    FF0MW00.FF0MWCAT = "Y"; /* Original cat data requested*/
    FF0MW00.FF0MWNCF = "Y"; /* New cat flag*/
    FF0MW00.FF0MWPGN = 1; /* Page number*/
    FF0MW00.FF0MWFMF = "Y"; /* Format the Map*/
    FF0MW00.CACHGFL = "N";

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0M.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPLCD = "  ";
    FFWREC.XPLABRV = "  ";
    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0M001; /* Converse the main process*/


    FF0M001: FF0M001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0M001; /* Converse the main process*/


  end // end main
end // end FF0M

// Inquire/maintain a table row
Function FF0M001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0M100(); /* Obtain the data to display*/

  FF0M200(); /* Format and display the map*/

  FF0M300(); /* Check attention identifier*/

  FF0M400(); /* Reset fields to normal intensity*/

  FF0M500(); /* Verify the entered data*/

  FF0M600(); /* Process valid input request*/


end // end FF0M001

// Obtain Data to Display
Function FF0M100()
   /* ------------------------------------------------------------*/
   /* if data not requested or an error occured, return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0MW00.FF0MWDRF != "Y" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    return;
  end

  FF0MW00.CACHGFL = "N";

  FF0MW00.FF0MWSCR = FF0MW00.FF0MWCAT; /* save cat req*/

   /* ------------------------------------------------------------*/
   /* Obtain original category data*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWCAT = "Y"; /* Original category requested*/
  set FF0MW02 empty; /* clear display storage*/
  FF0M110(); /* Obtain Season Data*/

  if (FF2REC.FF2NSEAS == 0) /* no seasons available*/
    converseLib.validationFailed(174); /* 'seasons not set up'*/
    FFWREC.XXXMODID = "100"; /* module identification*/
    return; /* return to previous process*/
  end

  if (FF0MW00.FF0MWCAT == "Y") /* original cat requested*/
    FF0M115(); /* determine season lengths*/
  end

  FF0MW02.XPCCD = FF0MM001.XPCCD; /* orig cat code*/
  FF0MW00.FF0MWCTS = 1; /* season counter*/
  FF0MW00.FF0MWIX3 = 0; /* initialize index*/
  FF0MW00.FF0MWIX4 = 1; /* initialize master mo range index*/

  while (FF0MW00.FF0MWCTS <= FF0MW01.FF2NSEAS) /* season cnt LE nbr seasons*/

    FF0M120(); /* Obtain Detail Data*/

    FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1; /* increment index*/
    FF0M130(); /* monthly qty calcs (orig cat)*/

    FF0M140(); /* season qty and pct calcs (orig cat)*/

    FF0MW00.FF0MWCTS = FF0MW00.FF0MWCTS + 1; /* increment season counter*/
  end

  FF0M121(); /* get user created index*/

   /* ------------------------------------------------------------*/
   /* If alternate category code exists, Obtain data - perform*/
   /* calculations.*/
   /* ------------------------------------------------------------*/

  if (FF0MW01.FF2ALCAT != " ") /* alt cat code exists*/

    FF0MW00.FF0MWCAT = "N"; /* alternate category requested*/
    set FF0MW03 empty; /* clear display storage*/
    FF0M110(); /* Obtain Season Data*/

    FF0MW03.XPCCD = FF0MW01.FF2ALCAT; /* alt cat code*/
    FF0MW00.FF0MWCTS = 1; /* season counter*/
    FF0MW00.FF0MWIX3 = 0; /* initialize index*/
    FF0MW00.FF0MWIX4 = 1; /* initialize master mo range index*/

    while (FF0MW00.FF0MWCTS <= FF0MW01.FF2NSEAS) /* number of seasons*/

      FF0M120(); /* Obtain Detail Data*/

      FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1; /* increment index*/
      FF0M150(); /* monthly qty calcs (alt cat)*/

      FF0M160(); /* season qty and pct calcs (alt cat)*/

      FF0MW00.FF0MWCTS = FF0MW00.FF0MWCTS + 1; /* increment season counter*/
    end
    set FFDREC empty;
    FFDREC.XPCCD = FF0MW01.FF2ALCAT;
    FF0M127(); /* get user created index - alt cat*/
  end

   /* ------------------------------------------------------------*/
   /* If category or type group was changed, set flag to view*/
   /* original data.*/
   /* ------------------------------------------------------------*/

  if (FF0MW00.FF0MWNCF == "Y") /* new category requested*/
    FF0MW00.FF0MWCAT = "Y"; /* set to orig cat*/
    FFWREC.XXXMSGNO = 162; /* view orig cat msg*/
    FF0MW00.FF0MWNCF = "N"; /* reset flag*/
    FF0MW00.FF0MWPGN = 1; /* orig cat pg 1*/
  else
    FF0MW00.FF0MWCAT = FF0MW00.FF0MWSCR;
  end

   /* ------------------------------------------------------------*/
   /* Save Map fields in Working Storage*/
   /* ------------------------------------------------------------*/

  FF0MW01.FF0MWMBM = FF0MM001.FF2SEASN; /* season begin month*/
  FF0MW00.FF0MWFMF = "Y"; /* format the map*/

  FF0MW00.FF0MWDRF = "N"; /* data not requested*/

  FF0MW00.CACHGFL = "Y";


end // end FF0M100

// Obtain Season Data
Function FF0M110()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Set up key - Footwear Forecast XREF Table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* initialize record*/

  if (FF0MW00.FF0MWCAT == "Y") /* orig cat requested*/
    FF2REC.XPCCD = FFWREC.XPCCD; /* category code*/
  else
    FF2REC.XPCCD = FF0MW01.FF2ALCAT; /* category code*/
  end

  FF2REC.YPGCD = FFWREC.YPGCD; /* type group*/
  FF2REC.YSMXDV = "10"; /* division group code*/
  FF2REC.XPLCD = "*"; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (FF0MW00.FF0MWCAT == "Y") /* orig cat requested*/

        if (FF2REC.FF2ALCAT != " ")
          FF0MW01.FF2ALCAT = FF2REC.FF2ALCAT; /* alternate category*/
          if (FF0MW01.FF2ALCAT in XPCTBL.XPCCD)
            FF0MW01.FF0MWACA = XPCTBL.XPCABRV[sysVar.arrayIndex];
          end
        else
          FF0MW01.FF2ALCAT = " "; /* alternate category*/
          FF0MW01.FF0MWACA = "      "; /* alt cat abrv*/
        end

        if (FF2REC.FF2DMIND != " ")
          FF0MW01.FF2DMIND = FF2REC.FF2DMIND; /* future year ind*/
          FF0MW01.FF0MWIND = FF2REC.FF2DMIND; /* future year ind map*/
        end

      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0M110

// Determine Season lengths
Function FF0M115()

     /* Calculate seasons lengths, page layouts, working storage position*/

  FF0MW01.FF2GROUP = FF2REC.FF2GROUP; /* save record group*/
  FF0MM001.FF2SEASN = FF2REC.FF2SEASN[1]; /* season beg month*/
  FF0MW01.FF2NSEAS = FF2REC.FF2NSEAS; /* number of months*/

  FF0MW00.FF0MWIX1 = 1; /* initialize index*/
  while (FF0MW00.FF0MWIX1 <= 4)
    FF0MW01.FF2SEASN[FF0MWIX1] = FF2REC.FF2SEASN[FF0MWIX1];
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
  end

  if (FF2REC.FF2ALCAT != " ")
    FF0MW01.FF2ALCAT = FF2REC.FF2ALCAT; /* alternate category*/
    if (FF0MW01.FF2ALCAT in XPCTBL.XPCCD)
      FF0MW01.FF0MWACA = XPCTBL.XPCABRV[sysVar.arrayIndex];
    end
  else
    FF0MW01.FF2ALCAT = " "; /* alternate category*/
    FF0MW01.FF0MWACA = "      "; /* alt cat abrv*/
  end

  /* IF FF2REC.FF2FUIND NE ' ';*/
  /* MOVE FF2REC.FF2FUIND TO FF0MW01.FF2FUIND;/* future year ind*/
  /* MOVE FF2REC.FF2FUIND TO FF0MW01.FF0MWIND;*/
  /* /* future year ind - map*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* calculate how many months long each season is and store*/
   /* ------------------------------------------------------------*/

  FF0MW01.FF0MWMNS[1] = 0;
  FF0MW01.FF0MWMNS[2] = 0;
  FF0MW01.FF0MWMNS[3] = 0;
  FF0MW01.FF0MWMNS[4] = 0;
  FF0MW00.FF0MWCNT = 1; /* month counter*/
  FF0MW00.FF0MWIX3 = FF2REC.FF2NSEAS; /* index max*/

  FF0MW00.FF0MWIX1 = 1;
  FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX1 + 1;
  while (FF0MW00.FF0MWIX1 <= FF0MW00.FF0MWIX3)

    FF0MW00.FF0MWKD1 = FF2REC.FF2SEASN[FF0MWIX1];
    if (FF2REC.FF2NSEAS == 1) /* only one season exists*/
      FF0MW01.FF0MWMNS[FF0MWIX1] = 12; /* default*/
      FF0MW01.FF0MWSTM[FF0MWIX1] = 1; /* season start map*/
    else
      if (FF0MW00.FF0MWIX2 > FF0MW00.FF0MWIX3) /* +1 index GT season max*/
        FF0MW00.FF0MWKD2 = FF2REC.FF2SEASN[1]; /* plus one year*/
      else
        FF0MW00.FF0MWKD2 = FF2REC.FF2SEASN[FF0MWIX2];
      end

      if (FF0MW00.FF0MWKM2 < FF0MW00.FF0MWKM1)
        FF0MW00.FF0MWKM2 = FF0MW00.FF0MWKM2 + 12; /* add 12 months*/
      end

      FF0MW01.FF0MWMNS[FF0MWIX1] = FF0MW00.FF0MWKM2 - FF0MW00.FF0MWKM1;
      FF0MW00.FF0MWCNT = FF0MW00.FF0MWCNT + FF0MW01.FF0MWMNS[FF0MWIX1];
      FF0MW01.FF0MWSTM[FF0MWIX1] = FF0MW00.FF0MWCNT -            FF0MW01.FF0MWMNS[FF0MWIX1]; /* seas start map*/
    end
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 1; /* increment index*/

  end

   /* calculate page layout and WS positions*/

  FF0MW00.FF0MWCUR = 1; /* current season*/
  FF0MW00.FF0MWCMO = 1; /* curr season start month*/
  FF0MW00.FF0MWPGN = 1; /* set page number to 1*/
  FF0MW00.FF0MWMXP = 0; /* max pages*/

  FF0MW00.FF0MWIX1 = 1;
  FF0MW00.FF0MWIX2 = 1;
  while (FF0MW00.FF0MWIX1 <= FF0MW00.FF0MWIX3) /* while LE number of seasons*/

    FF0MW01.FF0MWTOT[FF0MWIX1] = FF0MWIX1 * 13; /* total positon WS*/
    FF0MW01.FF0MWSTW[FF0MWIX1] = FF0MWIX1 * 13 - 12; /* start position WS*/

    if (FF0MW01.FF0MWMNS[FF0MWIX1] > 6) /* season longer than one map*/
      FF0MW00.FF0MWMXP = FF0MW00.FF0MWMXP + 2; /* max pages*/
        /* first page*/
      FF0MW01.FF0MWTMP[FF0MWIX2] = "N"; /* total on map*/
      FF0MW01.FF0MWMPG[FF0MWIX2] = 6;
                                                          /* months on page*/

      FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 1; /* increment index*/

        /* second page*/
      FF0MW01.FF0MWTMP[FF0MWIX2] = "Y"; /* total on map*/
      FF0MW01.FF0MWMPG[FF0MWIX2] = FF0MW01.FF0MWMNS[FF0MWIX1] - 6;
    else
      FF0MW00.FF0MWMXP = FF0MW00.FF0MWMXP + 1; /* max pages*/
        /* one page season*/
      FF0MW01.FF0MWTMP[FF0MWIX2] = "Y"; /* total on map*/
      FF0MW01.FF0MWMPG[FF0MWIX2] = FF0MW01.FF0MWMNS[FF0MWIX1];
                                                          /* months on page*/
    end
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 1; /* increment index*/

  end

end // end FF0M115

// Obtain Detail Data
Function FF0M120()
   /* ------------------------------------------------------------*/
   /* Calculate months in seasons - one and two yrs ago*/
   /* ------------------------------------------------------------*/

  FF0M122(); /* calculate months*/

   /* ------------------------------------------------------------*/
   /* Set up key data - Call subroutine (ff5500)*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIX1 = 1; /* initialize index*/

  while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[FF0MWCTS]) /* months in season*/

     /* set up key for future monthly qtys - one year ago*/

    set FH3REC empty; /* initialize record*/

    FF0MW00.FF0MWYRF = "Y"; /* one year ago*/
    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "N"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0M120"; /* calling process*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0MW01.FF2ALCAT; /* category code*/
    end

    if (FF0MW00.FF0MWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM11[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM11[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM12[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM12[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM13[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM13[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM14[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM14[FF0MWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat*/
      FF0M126(); /* store orig cat qtys*/
    else
      FF0M128(); /* store alt cat qtys*/
    end

     /* set up key for future nat'l monthly qtys - one year ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "Y"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0M120"; /* calling process*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0MW01.FF2ALCAT; /* category code*/
    end

    if (FF0MW00.FF0MWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM11[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM11[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM12[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM12[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM13[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM13[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM14[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM14[FF0MWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat*/
      FF0M126(); /* store orig cat qtys*/
    else
      FF0M128(); /* store alt cat qtys*/
    end

     /* set up key for prop monthly qtys - one year ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "PR"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "*"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0M120"; /* calling process*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0MW01.FF2ALCAT; /* category code*/
    end

    if (FF0MW00.FF0MWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM11[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM11[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM12[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM12[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM13[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM13[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM14[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM14[FF0MWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat*/
      FF0M126(); /* store orig cat qtys*/
    else
      FF0M128(); /* store alt cat qtys*/
    end

     /* set up key for future monthly qtys - two years ago*/

    set FH3REC empty; /* initialize record*/

    FF0MW00.FF0MWYRF = "N"; /* one year ago*/
    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "N"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0M120"; /* calling process*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0MW01.FF2ALCAT; /* category code*/
    end

    if (FF0MW00.FF0MWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM21[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM21[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM22[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM22[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM23[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM23[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM24[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM24[FF0MWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat*/
      FF0M126(); /* store orig cat qtys*/
    else
      FF0M128(); /* store alt cat qtys*/
    end

     /* set up key for future nat'l monthly qtys - two years ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "Y"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0M120"; /* calling process*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0MW01.FF2ALCAT; /* category code*/
    end

    if (FF0MW00.FF0MWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM21[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM21[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM22[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM22[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM23[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM23[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM24[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM24[FF0MWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat*/
      FF0M126(); /* store orig cat qtys*/
    else
      FF0M128(); /* store alt cat qtys*/
    end

     /* set up key for prop monthly qtys - two years ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "PR"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "*"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0M120"; /* calling process*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0MW01.FF2ALCAT; /* category code*/
    end

    if (FF0MW00.FF0MWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM21[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM21[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM22[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM22[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM23[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM23[FF0MWIX1];
                                   /* end month range*/
    end

    if (FF0MW00.FF0MWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0MW01.FF0MWM24[FF0MWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0MW01.FF0MWM24[FF0MWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0MW00.FF0MWCAT == "Y") /* orig cat*/
      FF0M126(); /* store orig cat qtys*/
    else
      FF0M128(); /* store alt cat qtys*/
    end

    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

  end


end // end FF0M120

// get user created percents
Function FF0M121()
   /* ------------------------------------------------------------*/
   /* Retrieve user created percentages from vrcmth01 for season*/
   /* ------------------------------------------------------------*/

  set FFDREC empty;
  FFDREC.XPCCD = FFWREC.XPCCD;
  FF0M123(); /* select vrcmth01 's1'*/
  FF0M124(); /* fetch vrcmth01 'n1'*/
  if (SQLCA.VAGen_SQLCODE == 0)
    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= 12 /* months in season*/
     && SQLCA.VAGen_SQLCODE == 0)

      FF0MW02.FF0MWUQT[FF0MWIX1] = FFDREC.FFDDMPCT;
      FF0MW02.FF0MWSQT[FF0MWIX1] = FFDREC.FFDDMPCT;
                                   /* sav table value*/
      FF0M124(); /* fetch vrcmth01 'n1'*/

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

    end
  else
    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= 12) /* months in season*/

      FF0MW02.FF0MWUQT[FF0MWIX1] = 0;
      FF0MW02.FF0MWSQT[FF0MWIX1] = 0; /* sav table value*/

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

    end
  end

  FF0M125(); /* close vrcmth01 'c1'*/
end // end FF0M121

// Calculate Months
Function FF0M122()
   /* ------------------------------------------------------------*/
   /* Calculate each month in a season for one and two years ago*/
   /* ------------------------------------------------------------*/

  if (FF0MW00.FF0MWCTS == 1) /* season one available*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[1]) /* months in season 1*/

      if (FF0MW00.FF0MWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0MW00.FF0MWDT = FF0MW01.FF2SEASN[1]; /* work area*/
        FF0MW01.FF0MWMTS[FF0MWIX4] = FF0MW00.FF0MWDT; /* master rang*/
        FF0MW00.FF0MWYY = FF0MW00.FF0MWYY - 1; /* calculate one year ago*/
        FF0MW01.FF0MWM11[1] = FF0MW00.FF0MWDT;
      else

        FF0MW00.FF0MWMM = FF0MW00.FF0MWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0MW00.FF0MWMM > 12)
          FF0MW00.FF0MWYY = FF0MW00.FF0MWYY + 1;
          FF0MW00.FF0MWMM = FF0MW00.FF0MWMM - 12;
        end

        FF0MW01.FF0MWM11[FF0MWIX1] = FF0MW00.FF0MWDT;
        FF0MW01.FF0MWMTS[FF0MWIX4] = FF0MW01.FF0MWM11[FF0MWIX1] + 100;
      end

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
      FF0MW00.FF0MWIX4 = FF0MW00.FF0MWIX4 + 1; /* increment index*/

    end

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[1]) /* months in season 1*/

      if (FF0MW00.FF0MWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0MW00.FF0MWDT = FF0MW01.FF2SEASN[1]; /* work area*/
        FF0MW00.FF0MWYY = FF0MW00.FF0MWYY - 2; /* calculate two years ago*/
        FF0MW01.FF0MWM21[1] = FF0MW00.FF0MWDT;
      else

        FF0MW00.FF0MWMM = FF0MW00.FF0MWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0MW00.FF0MWMM > 12)
          FF0MW00.FF0MWYY = FF0MW00.FF0MWYY + 1;
          FF0MW00.FF0MWMM = FF0MW00.FF0MWMM - 12;
        end

        FF0MW01.FF0MWM21[FF0MWIX1] = FF0MW00.FF0MWDT;
      end

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

    end

    if (FF0MW00.FF0MWIX1 <= 12) /* months in season less than 12*/
      while (FF0MW00.FF0MWIX1 <= 12)
        FF0MW01.FF0MWM11[FF0MWIX1] = 0; /* month in season*/
        FF0MW01.FF0MWM12[FF0MWIX1] = 0; /* month in season*/
        FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
      end
    end
  end

  if (FF0MW00.FF0MWCTS == 2) /* season two available*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[2]) /* months in season 2*/

      if (FF0MW00.FF0MWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0MW00.FF0MWDT = FF0MW01.FF2SEASN[2]; /* work area*/
        FF0MW01.FF0MWMTS[FF0MWIX4] = FF0MW00.FF0MWDT; /* master rang*/
        FF0MW00.FF0MWYY = FF0MW00.FF0MWYY - 1; /* calculate one year ago*/
        FF0MW01.FF0MWM12[1] = FF0MW00.FF0MWDT;
      else

        FF0MW00.FF0MWMM = FF0MW00.FF0MWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0MW00.FF0MWMM > 12)
          FF0MW00.FF0MWYY = FF0MW00.FF0MWYY + 1;
          FF0MW00.FF0MWMM = FF0MW00.FF0MWMM - 12;
        end

        FF0MW01.FF0MWM12[FF0MWIX1] = FF0MW00.FF0MWDT;
        FF0MW01.FF0MWMTS[FF0MWIX4] = FF0MW01.FF0MWM12[FF0MWIX1] + 100;

      end

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
      FF0MW00.FF0MWIX4 = FF0MW00.FF0MWIX4 + 1; /* increment index*/

    end

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[2]) /* months in season 2*/

      if (FF0MW00.FF0MWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0MW00.FF0MWDT = FF0MW01.FF2SEASN[2]; /* work area*/
        FF0MW00.FF0MWYY = FF0MW00.FF0MWYY - 2; /* calculate two years ago*/
        FF0MW01.FF0MWM22[1] = FF0MW00.FF0MWDT;
      else

        FF0MW00.FF0MWMM = FF0MW00.FF0MWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0MW00.FF0MWMM > 12)
          FF0MW00.FF0MWYY = FF0MW00.FF0MWYY + 1;
          FF0MW00.FF0MWMM = FF0MW00.FF0MWMM - 12;
        end

        FF0MW01.FF0MWM22[FF0MWIX1] = FF0MW00.FF0MWDT;

      end

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

    end

    if (FF0MW00.FF0MWIX1 <= 12) /* months in season less than 12*/
      while (FF0MW00.FF0MWIX1 <= 12)
        FF0MW01.FF0MWM12[FF0MWIX1] = 0; /* month in season*/
        FF0MW01.FF0MWM22[FF0MWIX1] = 0; /* month in season*/
        FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
      end
    end
  end

  if (FF0MW00.FF0MWCTS == 3) /* season three available*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[3]) /* months in season 3*/

      if (FF0MW00.FF0MWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0MW00.FF0MWDT = FF0MW01.FF2SEASN[3]; /* work area*/
        FF0MW01.FF0MWMTS[FF0MWIX4] = FF0MW00.FF0MWDT; /* master rang*/
        FF0MW00.FF0MWYY = FF0MW00.FF0MWYY - 1; /* calculate one year ago*/
        FF0MW01.FF0MWM13[1] = FF0MW00.FF0MWDT;
      else

        FF0MW00.FF0MWMM = FF0MW00.FF0MWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0MW00.FF0MWMM > 12)
          FF0MW00.FF0MWYY = FF0MW00.FF0MWYY + 1;
          FF0MW00.FF0MWMM = FF0MW00.FF0MWMM - 12;
        end

        FF0MW01.FF0MWM13[FF0MWIX1] = FF0MW00.FF0MWDT;
        FF0MW01.FF0MWMTS[FF0MWIX4] = FF0MW01.FF0MWM13[FF0MWIX1] + 100;
      end

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
      FF0MW00.FF0MWIX4 = FF0MW00.FF0MWIX4 + 1; /* increment index*/

    end

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[3]) /* months in season 1-3*/

      if (FF0MW00.FF0MWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0MW00.FF0MWDT = FF0MW01.FF2SEASN[3]; /* work area*/
        FF0MW00.FF0MWYY = FF0MW00.FF0MWYY - 2; /* calculate two years ago*/
        FF0MW01.FF0MWM23[1] = FF0MW00.FF0MWDT;
      else

        FF0MW00.FF0MWMM = FF0MW00.FF0MWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0MW00.FF0MWMM > 12)
          FF0MW00.FF0MWYY = FF0MW00.FF0MWYY + 1;
          FF0MW00.FF0MWMM = FF0MW00.FF0MWMM - 12;
        end

        FF0MW01.FF0MWM23[FF0MWIX1] = FF0MW00.FF0MWDT;

      end

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

    end


    if (FF0MW00.FF0MWIX1 <= 12) /* months in season less than 12*/
      while (FF0MW00.FF0MWIX1 <= 12)
        FF0MW01.FF0MWM13[FF0MWIX1] = 0; /* month in season*/
        FF0MW01.FF0MWM23[FF0MWIX1] = 0; /* month in season*/
        FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
      end
    end
  end

  if (FF0MW00.FF0MWCTS == 4) /* season four available*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[4]) /* months in season 4*/

      if (FF0MW00.FF0MWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0MW00.FF0MWDT = FF0MW01.FF2SEASN[4]; /* work area*/
        FF0MW01.FF0MWMTS[FF0MWIX4] = FF0MW00.FF0MWDT; /* master rang*/
        FF0MW00.FF0MWYY = FF0MW00.FF0MWYY - 1; /* calculate one year ago*/
        FF0MW01.FF0MWM14[1] = FF0MW00.FF0MWDT;
      else

        FF0MW00.FF0MWMM = FF0MW00.FF0MWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0MW00.FF0MWMM > 12)
          FF0MW00.FF0MWYY = FF0MW00.FF0MWYY + 1;
          FF0MW00.FF0MWMM = FF0MW00.FF0MWMM - 12;
        end

        FF0MW01.FF0MWM14[FF0MWIX1] = FF0MW00.FF0MWDT;
        FF0MW01.FF0MWMTS[FF0MWIX4] = FF0MW01.FF0MWM14[FF0MWIX1] + 100;
      end

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
      FF0MW00.FF0MWIX4 = FF0MW00.FF0MWIX4 + 1; /* increment index*/

    end

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[4]) /* months in season 4*/

      if (FF0MW00.FF0MWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0MW00.FF0MWDT = FF0MW01.FF2SEASN[4]; /* work area*/
        FF0MW00.FF0MWYY = FF0MW00.FF0MWYY - 2; /* calculate two years ago*/
        FF0MW01.FF0MWM24[1] = FF0MW00.FF0MWDT;
      else

        FF0MW00.FF0MWMM = FF0MW00.FF0MWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0MW00.FF0MWMM > 12)
          FF0MW00.FF0MWYY = FF0MW00.FF0MWYY + 1;
          FF0MW00.FF0MWMM = FF0MW00.FF0MWMM - 12;
        end

        FF0MW01.FF0MWM24[FF0MWIX1] = FF0MW00.FF0MWDT;

      end

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

    end


    if (FF0MW00.FF0MWIX1 <= 12) /* months in season less than 12*/
      while (FF0MW00.FF0MWIX1 <= 12)
        FF0MW01.FF0MWM14[FF0MWIX1] = 0; /* month in season*/
        FF0MW01.FF0MWM24[FF0MWIX1] = 0; /* month in season*/
        FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
      end
    end
  end


end // end FF0M122

// select 's1' vrcmth01
Function FF0M123()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  FFDREC.FFABEGMO = FF0MW01.FF0MWMTS[1];
  FFDREC.FFAENDMO = FF0MW01.FF0MWMTS[12];
  FFFREC.FFFBEGMO = FFDREC.FFABEGMO;
  FFFREC.FFFENDMO = FFDREC.FFAENDMO;

  FFFFUNCD = "S1";

   /* ------------------------------------------------------------*/
   /* load ffdrec record*/
   /* ------------------------------------------------------------*/

  FFDREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* select set dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "123"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DFCAST.VRCMTH01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0M123

// fetch 'n1' vrcmth01
Function FF0M124()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vrcmth01 row*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "N1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "124"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VRCMTH01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0M124

// close 'c1' vrcmth01
Function FF0M125()
   /* ------------------------------------------------------------*/
   /* close dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "125"; /* MODULE IDENTIFICATION*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VRCMTH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0M125

// Store Orig Cat Historical Qtys
Function FF0M126()
   /* ------------------------------------------------------------*/
   /* Save Original Category Historical Qtys in Working Storage*/
   /* ------------------------------------------------------------*/

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC != "Y") /* non-nat'l data*/

      if (FFFREC.FFFBEGMO >= 199206) /* Before 199206 use actual future*/
        FH3REC.FH1PAQTY = FH3REC.FH-FRZ-PRAL-QTY; /* Frozen future*/
        FH3REC.FH1ALQTY = FH3REC.FH-FRZ-ALOC-QTY;
        FH3REC.FH2SHP = FH3REC.FH-FRZ-SHP-QTY;
        FH3REC.FH3CNCL = FH3REC.FH-FRZ-CNCL-QTY;
      end

      if (FF0MW00.FF0MWYRF == "Y") /* one year ago*/

        if (FF0MW00.FF0MWCTS == 1) /* season one*/
          FF0MW02.FF0MWA11[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW02.FF0MWB11[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW02.FF0MWC11[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW02.FF0MWD11[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 2) /* season two*/
          FF0MW02.FF0MWA12[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW02.FF0MWB12[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW02.FF0MWC12[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW02.FF0MWD12[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 3) /* season three*/
          FF0MW02.FF0MWA13[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW02.FF0MWB13[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW02.FF0MWC13[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW02.FF0MWD13[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 4) /* season four*/
          FF0MW02.FF0MWA14[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW02.FF0MWB14[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW02.FF0MWC14[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW02.FF0MWD14[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      else

          /* two years ago*/

        if (FF0MW00.FF0MWCTS == 1) /* season one*/
          FF0MW02.FF0MWA21[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW02.FF0MWB21[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW02.FF0MWC21[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW02.FF0MWD21[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 2) /* season two*/
          FF0MW02.FF0MWA22[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW02.FF0MWB22[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW02.FF0MWC22[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW02.FF0MWD22[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 3) /* season three*/
          FF0MW02.FF0MWA23[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW02.FF0MWB23[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW02.FF0MWC23[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW02.FF0MWD23[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 4) /* season four*/
          FF0MW02.FF0MWA24[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW02.FF0MWB24[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW02.FF0MWC24[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW02.FF0MWD24[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC == "Y") /* nat'l data*/

      if (FFFREC.FFFBEGMO >= 199206) /* Before 199206 use actual future*/
        FH3REC.FH1PAQTY = FH3REC.FH-FRZ-PRAL-QTY; /* Frozen future*/
        FH3REC.FH1ALQTY = FH3REC.FH-FRZ-ALOC-QTY;
        FH3REC.FH2SHP = FH3REC.FH-FRZ-SHP-QTY;
        FH3REC.FH3CNCL = FH3REC.FH-FRZ-CNCL-QTY;
      end

      if (FF0MW00.FF0MWYRF == "Y") /* one year ago*/

        if (FF0MW00.FF0MWCTS == 1) /* season one*/
          FF0MW02.FF0MWE11[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW02.FF0MWF11[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW02.FF0MWG11[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW02.FF0MWH11[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 2) /* season two*/
          FF0MW02.FF0MWE12[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW02.FF0MWF12[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW02.FF0MWG12[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW02.FF0MWH12[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 3) /* season three*/
          FF0MW02.FF0MWE13[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW02.FF0MWF13[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW02.FF0MWG13[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW02.FF0MWH13[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 4) /* season three*/
          FF0MW02.FF0MWE14[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW02.FF0MWF14[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW02.FF0MWG14[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW02.FF0MWH14[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      else

           /* two years ago*/

        if (FF0MW00.FF0MWCTS == 1) /* season one*/
          FF0MW02.FF0MWE21[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW02.FF0MWF21[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW02.FF0MWG21[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW02.FF0MWH21[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 2) /* season two*/
          FF0MW02.FF0MWE22[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW02.FF0MWF22[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW02.FF0MWG22[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW02.FF0MWH22[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 3) /* season three*/
          FF0MW02.FF0MWE23[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW02.FF0MWF23[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW02.FF0MWG23[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW02.FF0MWH23[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 4) /* season four*/
          FF0MW02.FF0MWE24[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW02.FF0MWF24[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW02.FF0MWG24[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW02.FF0MWH24[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "PR") /* prop data*/
    if (FF0MW00.FF0MWYRF == "Y") /* one year ago*/

      if (FF0MW00.FF0MWCTS == 1) /* season one*/
        FF0MW02.FF0MWI11[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW02.FF0MWJ11[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW02.FF0MWK11[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW02.FF0MWL11[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 2) /* season two*/
        FF0MW02.FF0MWI12[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW02.FF0MWJ12[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW02.FF0MWK12[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW02.FF0MWL12[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 3) /* season three*/
        FF0MW02.FF0MWI13[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW02.FF0MWJ13[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW02.FF0MWK13[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW02.FF0MWL13[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 4) /* season four*/
        FF0MW02.FF0MWI14[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW02.FF0MWJ14[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW02.FF0MWK14[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW02.FF0MWL14[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

    else

         /* two years ago*/

      if (FF0MW00.FF0MWCTS == 1) /* season one*/
        FF0MW02.FF0MWI21[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW02.FF0MWJ21[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW02.FF0MWK21[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW02.FF0MWL21[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 2) /* season two*/
        FF0MW02.FF0MWI22[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW02.FF0MWJ22[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW02.FF0MWK22[FF0MWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0MW02.FF0MWL22[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 3) /* season three*/
        FF0MW02.FF0MWI23[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW02.FF0MWJ23[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW02.FF0MWK23[FF0MWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0MW02.FF0MWL23[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 4) /* season four*/
        FF0MW02.FF0MWI24[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW02.FF0MWJ24[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW02.FF0MWK24[FF0MWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0MW02.FF0MWL24[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

    end
  end


end // end FF0M126

// get user created %'s alt cat
Function FF0M127()
   /* ------------------------------------------------------------*/
   /* Retrieve user created percentages from vrcmth01 for season*/
   /* for alternate category*/
   /* ------------------------------------------------------------*/

  FF0M123(); /* select vrcmth01 's1'*/
  FF0M124(); /* fetch vrcmth01 'n1'*/
  if (SQLCA.VAGen_SQLCODE == 0)
    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= 12 /* months in season*/
     && SQLCA.VAGen_SQLCODE == 0)

      FF0MW03.FF0MWAQT[FF0MWIX1] = FFDREC.FFDDMPCT;
      FF0M124(); /* fetch vrcmth01 'n1'*/

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

    end
  else
    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= 12) /* months in season*/

      FF0MW03.FF0MWAQT[FF0MWIX1] = 0;
      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

    end
  end

  FF0M125(); /* close vrcmth01 'c1'*/
end // end FF0M127

// Store Alt Cat Historical Qtys
Function FF0M128()
   /* ------------------------------------------------------------*/
   /* Save Alternate Category Historical Qtys in Working Storage*/
   /* ------------------------------------------------------------*/

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC != "Y") /* non-nat'l data*/

      if (FFFREC.FFFBEGMO >= 199206) /* Before 199206 use actual future*/
        FH3REC.FH1PAQTY = FH3REC.FH-FRZ-PRAL-QTY; /* Frozen future*/
        FH3REC.FH1ALQTY = FH3REC.FH-FRZ-ALOC-QTY;
        FH3REC.FH2SHP = FH3REC.FH-FRZ-SHP-QTY;
        FH3REC.FH3CNCL = FH3REC.FH-FRZ-CNCL-QTY;
      end

      if (FF0MW00.FF0MWYRF == "Y") /* one year ago*/

        if (FF0MW00.FF0MWCTS == 1) /* season one*/
          FF0MW03.FF0MWA11[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW03.FF0MWB11[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW03.FF0MWC11[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW03.FF0MWD11[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 2) /* season two*/
          FF0MW03.FF0MWA12[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW03.FF0MWB12[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW03.FF0MWC12[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW03.FF0MWD12[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 3) /* season three*/
          FF0MW03.FF0MWA13[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW03.FF0MWB13[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW03.FF0MWC13[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW03.FF0MWD13[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 4) /* season four*/
          FF0MW03.FF0MWA14[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW03.FF0MWB14[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW03.FF0MWC14[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW03.FF0MWD14[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      else

          /* two years ago*/

        if (FF0MW00.FF0MWCTS == 1) /* season one*/
          FF0MW03.FF0MWA21[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW03.FF0MWB21[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW03.FF0MWC21[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW03.FF0MWD21[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 2) /* season two*/
          FF0MW03.FF0MWA22[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW03.FF0MWB22[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW03.FF0MWC22[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW03.FF0MWD22[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 3) /* season three*/
          FF0MW03.FF0MWA23[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW03.FF0MWB23[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW03.FF0MWC23[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW03.FF0MWD23[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 4) /* season four*/
          FF0MW03.FF0MWA24[FF0MWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0MW03.FF0MWB24[FF0MWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0MW03.FF0MWC24[FF0MWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0MW03.FF0MWD24[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC == "Y") /* nat'l data*/

      if (FFFREC.FFFBEGMO >= 199206) /* Before 199206 use actual future*/
        FH3REC.FH1PAQTY = FH3REC.FH-FRZ-PRAL-QTY; /* Frozen future*/
        FH3REC.FH1ALQTY = FH3REC.FH-FRZ-ALOC-QTY;
        FH3REC.FH2SHP = FH3REC.FH-FRZ-SHP-QTY;
        FH3REC.FH3CNCL = FH3REC.FH-FRZ-CNCL-QTY;
      end

      if (FF0MW00.FF0MWYRF == "Y") /* one year ago*/

        if (FF0MW00.FF0MWCTS == 1) /* season one*/
          FF0MW03.FF0MWE11[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW03.FF0MWF11[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW03.FF0MWG11[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW03.FF0MWH11[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 2) /* season two*/
          FF0MW03.FF0MWE12[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW03.FF0MWF12[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW03.FF0MWG12[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW03.FF0MWH12[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 3) /* season three*/
          FF0MW03.FF0MWE13[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW03.FF0MWF13[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW03.FF0MWG13[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW03.FF0MWH13[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 4) /* season four*/
          FF0MW03.FF0MWE14[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW03.FF0MWF14[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW03.FF0MWG14[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW03.FF0MWH14[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      else

           /* two years ago*/

        if (FF0MW00.FF0MWCTS == 1) /* season one*/
          FF0MW03.FF0MWE21[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW03.FF0MWF21[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW03.FF0MWG21[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW03.FF0MWH21[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 2) /* season two*/
          FF0MW03.FF0MWE22[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW03.FF0MWF22[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW03.FF0MWG22[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW03.FF0MWH22[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 3) /* season three*/
          FF0MW03.FF0MWE23[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW03.FF0MWF23[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW03.FF0MWG23[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW03.FF0MWH23[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0MW00.FF0MWCTS == 4) /* season four*/
          FF0MW03.FF0MWE24[FF0MWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0MW03.FF0MWF24[FF0MWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0MW03.FF0MWG24[FF0MWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0MW03.FF0MWH24[FF0MWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "PR") /* prop data*/
    if (FF0MW00.FF0MWYRF == "Y") /* one year ago*/

      if (FF0MW00.FF0MWCTS == 1) /* season one*/
        FF0MW03.FF0MWI11[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW03.FF0MWJ11[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW03.FF0MWK11[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW03.FF0MWL11[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 2) /* season two*/
        FF0MW03.FF0MWI12[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW03.FF0MWJ12[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW03.FF0MWK12[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW03.FF0MWL12[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 3) /* season three*/
        FF0MW03.FF0MWI13[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW03.FF0MWJ13[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW03.FF0MWK13[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW03.FF0MWL13[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 4) /* season four*/
        FF0MW03.FF0MWI14[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW03.FF0MWJ14[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW03.FF0MWK14[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW03.FF0MWL14[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

    else

         /* two years ago*/

      if (FF0MW00.FF0MWCTS == 1) /* season one*/
        FF0MW03.FF0MWI21[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW03.FF0MWJ21[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW03.FF0MWK21[FF0MWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0MW03.FF0MWL21[FF0MWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 2) /* season two*/
        FF0MW03.FF0MWI22[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW03.FF0MWJ22[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW03.FF0MWK22[FF0MWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0MW03.FF0MWL22[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 3) /* season three*/
        FF0MW03.FF0MWI23[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW03.FF0MWJ23[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW03.FF0MWK23[FF0MWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0MW03.FF0MWL23[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0MW00.FF0MWCTS == 4) /* season three*/
        FF0MW03.FF0MWI24[FF0MWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0MW03.FF0MWJ24[FF0MWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0MW03.FF0MWK24[FF0MWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0MW03.FF0MWL24[FF0MWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

    end
  end


end // end FF0M128

// Monthly qty calcs - orig cat
Function FF0M130()
   /* ------------------------------------------------------------*/
   /* Calculations for monthly qtys for original category*/
   /* ------------------------------------------------------------*/

  if (FF0MW00.FF0MWCTS == 1) /* season one*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    FF0MW00.FF0MWIX3 = FF0MW01.FF0MWSTW[1]; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[1]) /* months in season*/
      /* calculate qtys for one season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWA11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWB11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWC11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWD11[FF0MWIX1];
      FF0MW02.FF0MWFQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWE11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWF11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWG11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWH11[FF0MWIX1];
      FF0MW02.FF0MWNQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWI11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWJ11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWK11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWL11[FF0MWIX1];
      FF0MW02.FF0MWPQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWFQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWNQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWPQ1[FF0MWIX3];
      FF0MW02.FF0MWTQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWA21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWB21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWC21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWD21[FF0MWIX1];
      FF0MW02.FF0MWFQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWE21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWF21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWG21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWH21[FF0MWIX1];
      FF0MW02.FF0MWNQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWI21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWJ21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWK21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWL21[FF0MWIX1];
      FF0MW02.FF0MWPQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWFQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWNQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWPQ2[FF0MWIX3];
      FF0MW02.FF0MWTQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1;

    end
  end

  if (FF0MW00.FF0MWCTS == 2) /* season two*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    FF0MW00.FF0MWIX3 = FF0MW01.FF0MWSTW[2]; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[2]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWA12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWB12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWC12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWD12[FF0MWIX1];
      FF0MW02.FF0MWFQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWE12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWF12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWG12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWH12[FF0MWIX1];
      FF0MW02.FF0MWNQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWI12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWJ12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWK12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWL12[FF0MWIX1];
      FF0MW02.FF0MWPQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWFQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWNQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWPQ1[FF0MWIX3];
      FF0MW02.FF0MWTQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWA22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWB22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWC22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWD22[FF0MWIX1];
      FF0MW02.FF0MWFQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWE22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWF22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWG22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWH22[FF0MWIX1];
      FF0MW02.FF0MWNQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWI22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWJ22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWK22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWL22[FF0MWIX1];
      FF0MW02.FF0MWPQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWFQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWNQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWPQ2[FF0MWIX3];
      FF0MW02.FF0MWTQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1;

    end
  end

  if (FF0MW00.FF0MWCTS == 3) /* season three*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    FF0MW00.FF0MWIX3 = FF0MW01.FF0MWSTW[3]; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[3]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWA13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWB13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWC13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWD13[FF0MWIX1];
      FF0MW02.FF0MWFQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWE13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWF13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWG13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWH13[FF0MWIX1];
      FF0MW02.FF0MWNQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWI13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWJ13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWK13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWL13[FF0MWIX1];
      FF0MW02.FF0MWPQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWFQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWNQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWPQ1[FF0MWIX3];
      FF0MW02.FF0MWTQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWA23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWB23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWC23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWD23[FF0MWIX1];
      FF0MW02.FF0MWFQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWE23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWF23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWG23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWH23[FF0MWIX1];
      FF0MW02.FF0MWNQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWI23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWJ23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWK23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWL23[FF0MWIX1];
      FF0MW02.FF0MWPQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWFQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWNQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWPQ2[FF0MWIX3];
      FF0MW02.FF0MWTQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1;

    end

  end


  if (FF0MW00.FF0MWCTS == 4) /* season four*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    FF0MW00.FF0MWIX3 = FF0MW01.FF0MWSTW[4]; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[4]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWA14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWB14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWC14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWD14[FF0MWIX1];
      FF0MW02.FF0MWFQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWE14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWF14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWG14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWH14[FF0MWIX1];
      FF0MW02.FF0MWNQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWI14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWJ14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWK14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWL14[FF0MWIX1];
      FF0MW02.FF0MWPQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWFQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWNQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWPQ1[FF0MWIX3];
      FF0MW02.FF0MWTQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWA24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWB24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWC24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWD24[FF0MWIX1];
      FF0MW02.FF0MWFQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWE24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWF24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWG24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWH24[FF0MWIX1];
      FF0MW02.FF0MWNQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWI24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWJ24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWK24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWL24[FF0MWIX1];
      FF0MW02.FF0MWPQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWFQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWNQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW02.FF0MWPQ2[FF0MWIX3];
      FF0MW02.FF0MWTQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1;

    end

  end

  if (FF0MW00.FF0MWIX1 <= 12) /* limit of months in season*/
    FF0M132(); /* move zero qtys and pcts*/
  end


end // end FF0M130

// Clear original cat qtys
Function FF0M132()
  while (FF0MW00.FF0MWIX1 <= 12)

    FF0MW02.FF0MWFP1[FF0MWIX3] = 0; /* future pct*/
    FF0MW02.FF0MWFQ1[FF0MWIX3] = 0; /* future qty*/
    FF0MW02.FF0MWNP1[FF0MWIX3] = 0; /* future nat'l pct*/
    FF0MW02.FF0MWNQ1[FF0MWIX3] = 0; /* future nat'l qty*/
    FF0MW02.FF0MWPP1[FF0MWIX3] = 0; /* prop pct*/
    FF0MW02.FF0MWPQ1[FF0MWIX3] = 0; /* prop qty*/
    FF0MW02.FF0MWTP1[FF0MWIX3] = 0; /* total pct*/
    FF0MW02.FF0MWTQ1[FF0MWIX3] = 0; /* total qty*/
    FF0MW02.FF0MWFP2[FF0MWIX3] = 0; /* future pct*/
    FF0MW02.FF0MWFQ2[FF0MWIX3] = 0; /* future qty*/
    FF0MW02.FF0MWNP2[FF0MWIX3] = 0; /* future nat'l pct*/
    FF0MW02.FF0MWNQ2[FF0MWIX3] = 0; /* future nat'l qty*/
    FF0MW02.FF0MWPP2[FF0MWIX3] = 0; /* prop pct*/
    FF0MW02.FF0MWPQ2[FF0MWIX3] = 0; /* prop qty*/
    FF0MW02.FF0MWTP2[FF0MWIX3] = 0; /* total pct*/
    FF0MW02.FF0MWTQ2[FF0MWIX3] = 0; /* total qty*/

  /* IF FF0MWIX3 LE 12;*/
  /* MOVE 0 TO FF0MW02.FF0MWUQT(FF0MWIX3); /* user created percent*/
  /* END;*/

    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1; /* increment index*/

  end


end // end FF0M132

// Seas qty/pcts calcs - orig cat
Function FF0M140()
   /* ------------------------------------------------------------*/
   /* Perform monthly pcts and season pcts and qtys calculations*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Calculate Season Qtys*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIX1 = FF0MW01.FF0MWSTW[FF0MWCTS]; /* sesn start pos*/
  FF0MW00.FF0MWIX2 = FF0MW01.FF0MWMNS[FF0MWCTS]; /* months in sesn*/
  FF0MW00.FF0MWIX5 = FF0MW01.FF0MWTOT[FF0MWCTS]; /* sesn total pos*/
  FF0MW00.FF0MWIX6 = 1; /* month counter*/

  while (FF0MW00.FF0MWIX6 <= FF0MW00.FF0MWIX2) /* months in season*/

        /* one year ago*/

    FF0MW02.FF0MWFQ1[FF0MWIX5] = FF0MW02.FF0MWFQ1[FF0MWIX5]     + FF0MW02.FF0MWFQ1[FF0MWIX1];
    FF0MW02.FF0MWNQ1[FF0MWIX5] = FF0MW02.FF0MWNQ1[FF0MWIX5]     + FF0MW02.FF0MWNQ1[FF0MWIX1];
    FF0MW02.FF0MWPQ1[FF0MWIX5] = FF0MW02.FF0MWPQ1[FF0MWIX5]     + FF0MW02.FF0MWPQ1[FF0MWIX1];
    FF0MW02.FF0MWTQ1[FF0MWIX5] = FF0MW02.FF0MWTQ1[FF0MWIX5]     + FF0MW02.FF0MWTQ1[FF0MWIX1];

        /* two years ago*/

    FF0MW02.FF0MWFQ2[FF0MWIX5] = FF0MW02.FF0MWFQ2[FF0MWIX5]     + FF0MW02.FF0MWFQ2[FF0MWIX1];
    FF0MW02.FF0MWNQ2[FF0MWIX5] = FF0MW02.FF0MWNQ2[FF0MWIX5]     + FF0MW02.FF0MWNQ2[FF0MWIX1];
    FF0MW02.FF0MWPQ2[FF0MWIX5] = FF0MW02.FF0MWPQ2[FF0MWIX5]     + FF0MW02.FF0MWPQ2[FF0MWIX1];
    FF0MW02.FF0MWTQ2[FF0MWIX5] = FF0MW02.FF0MWTQ2[FF0MWIX5]     + FF0MW02.FF0MWTQ2[FF0MWIX1];

    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    FF0MW00.FF0MWIX6 = FF0MW00.FF0MWIX6 + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate Monthly Pcts*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIX1 = FF0MW01.FF0MWSTW[FF0MWCTS]; /* sesn start pos*/
  FF0MW00.FF0MWIX6 = 1; /* month counter*/

  while (FF0MW00.FF0MWIX6 <= FF0MW00.FF0MWIX2) /* months in season*/

        /* one year ago*/
        /* calc future pct = month fut qty / season fut qty*/

    if (FF0MW02.FF0MWFQ1[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW02.FF0MWFQ1[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW02.FF0MWFQ1[FF0MWIX1] * 100;
      FF0MW02.FF0MWFP1[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWFQ1[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWFP1[FF0MWIX1]));
    end

        /* calc nat'l fut pct = month natl fut qty / sesn natl fut*/

    if (FF0MW02.FF0MWNQ1[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW02.FF0MWNQ1[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW02.FF0MWNQ1[FF0MWIX1] * 100;
      FF0MW02.FF0MWNP1[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWNQ1[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWNP1[FF0MWIX1]));
    end

        /* calc prop pct = month prop qty / season prop qty*/

    if (FF0MW02.FF0MWPQ1[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW02.FF0MWPQ1[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW02.FF0MWPQ1[FF0MWIX1] * 100;
      FF0MW02.FF0MWPP1[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWPQ1[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWPP1[FF0MWIX1]));
    end

        /* calc total pct = month dmd qty / season dmd qty*/

    if (FF0MW02.FF0MWTQ1[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW02.FF0MWTQ1[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW02.FF0MWTQ1[FF0MWIX1] * 100;
      FF0MW02.FF0MWTP1[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWTQ1[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWTP1[FF0MWIX1]));
    end

        /* two years ago*/
        /* calc future pct = month fut qty / season fut qty*/

    if (FF0MW02.FF0MWFQ2[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW02.FF0MWFQ2[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW02.FF0MWFQ2[FF0MWIX1] * 100;
      FF0MW02.FF0MWFP2[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWFQ2[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWFP2[FF0MWIX1]));
    end

        /* calc nat'l fut pct = month natl fut qty / sesn natl fut*/

    if (FF0MW02.FF0MWNQ2[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW02.FF0MWNQ2[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW02.FF0MWNQ2[FF0MWIX1] * 100;
      FF0MW02.FF0MWNP2[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWNQ2[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWNP2[FF0MWIX1]));
    end

        /* calc prop pct = month prop qty / season prop qty*/

    if (FF0MW02.FF0MWPQ2[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW02.FF0MWPQ2[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW02.FF0MWPQ2[FF0MWIX1] * 100;
      FF0MW02.FF0MWPP2[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWPQ2[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWPP2[FF0MWIX1]));
    end

        /* calc total pct = month dmd qty / season dmd qty*/

    if (FF0MW02.FF0MWTQ2[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW02.FF0MWTQ2[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW02.FF0MWTQ2[FF0MWIX1] * 100;
      FF0MW02.FF0MWTP2[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWTQ2[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWTP2[FF0MWIX1]));
    end

    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    FF0MW00.FF0MWIX6 = FF0MW00.FF0MWIX6 + 1; /* increment index*/

  end

    /* ----------------------------------------------------------*/
     /* Calculate Season Pcts*/
    /* ----------------------------------------------------------*/

     /* calc season fut pct = sesn fut qty / sesn dmd qty*/

  if (FF0MW02.FF0MWFQ1[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW02.FF0MWTQ1[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW02.FF0MWFQ1[FF0MWIX5] * 100;
    FF0MW02.FF0MWFP1[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWTQ1[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWFP1[FF0MWIX5]));
  end

  if (FF0MW02.FF0MWFQ2[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW02.FF0MWTQ2[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW02.FF0MWFQ2[FF0MWIX5] * 100;
    FF0MW02.FF0MWFP2[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWTQ2[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWFP2[FF0MWIX5]));
  end


     /* calc season natl fut pct = sesn natl fut qty / sesn dmd*/

  if (FF0MW02.FF0MWNQ1[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW02.FF0MWTQ1[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW02.FF0MWNQ1[FF0MWIX5] * 100;
    FF0MW02.FF0MWNP1[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWTQ1[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWNP1[FF0MWIX5]));
  end

  if (FF0MW02.FF0MWNQ2[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW02.FF0MWTQ2[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = FF0MW02.FF0MWNQ2[FF0MWIX5] * 100;
    FF0MW02.FF0MWNP2[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWTQ2[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWNP2[FF0MWIX5]));
  end


     /* calc season prop pct = sesn prop qty / sesn dmd qty*/

  if (FF0MW02.FF0MWPQ1[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW02.FF0MWTQ1[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW02.FF0MWPQ1[FF0MWIX5] * 100;
    FF0MW02.FF0MWPP1[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWTQ1[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWPP1[FF0MWIX5]));
  end

  if (FF0MW02.FF0MWPQ2[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW02.FF0MWTQ2[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW02.FF0MWPQ2[FF0MWIX5] * 100;
    FF0MW02.FF0MWPP2[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW02.FF0MWTQ2[FF0MWIX5], -mathLib.decimals(FF0MW02.FF0MWPP2[FF0MWIX5]));
  end


     /* calc season dmd pct = 100*/

  if (FF0MW02.FF0MWTQ1[FF0MWIX5] != 0)
    FF0MW02.FF0MWTP1[FF0MWIX5] = FF0MW02.FF0MWTP1[FF0MWIX5] + 100;
  end

  if (FF0MW02.FF0MWTQ2[FF0MWIX5] != 0)
    FF0MW02.FF0MWTP2[FF0MWIX5] = FF0MW02.FF0MWTP2[FF0MWIX5] + 100;
  end

end // end FF0M140

// Monthly qty calcs - alt cat
Function FF0M150()
   /* ------------------------------------------------------------*/
   /* Calculations for monthly qtys for alternate category*/
   /* ------------------------------------------------------------*/

  if (FF0MW00.FF0MWCTS == 1) /* season one*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    FF0MWIX3 = FF0MW01.FF0MWSTW[1]; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[1]) /* months in season*/
      /* calculate qtys for one season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWA11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWB11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWC11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWD11[FF0MWIX1];
      FF0MW03.FF0MWFQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWE11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWF11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWG11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWH11[FF0MWIX1];
      FF0MW03.FF0MWNQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWI11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWJ11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWK11[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWL11[FF0MWIX1];
      FF0MW03.FF0MWPQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWFQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWNQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWPQ1[FF0MWIX3];
      FF0MW03.FF0MWTQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWA21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWB21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWC21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWD21[FF0MWIX1];
      FF0MW03.FF0MWFQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWE21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWF21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWG21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWH21[FF0MWIX1];
      FF0MW03.FF0MWNQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWI21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWJ21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWK21[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWL21[FF0MWIX1];
      FF0MW03.FF0MWPQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWFQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWNQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWPQ2[FF0MWIX3];
      FF0MW03.FF0MWTQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1;

    end

  end


  if (FF0MW00.FF0MWCTS == 2) /* season two*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    FF0MWIX3 = FF0MW01.FF0MWSTW[2]; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[2]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWA12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWB12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWC12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWD12[FF0MWIX1];
      FF0MW03.FF0MWFQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWE12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWF12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWG12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWH12[FF0MWIX1];
      FF0MW03.FF0MWNQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWI12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWJ12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWK12[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWL12[FF0MWIX1];
      FF0MW03.FF0MWPQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWFQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWNQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWPQ1[FF0MWIX3];
      FF0MW03.FF0MWTQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWA22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWB22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWC22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWD22[FF0MWIX1];
      FF0MW03.FF0MWFQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWE22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWF22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWG22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWH22[FF0MWIX1];
      FF0MW03.FF0MWNQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWI22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWJ22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWK22[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWL22[FF0MWIX1];
      FF0MW03.FF0MWPQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWFQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWNQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWPQ2[FF0MWIX3];
      FF0MW03.FF0MWTQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1;

    end

  end


  if (FF0MW00.FF0MWCTS == 3) /* season three*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    FF0MWIX3 = FF0MW01.FF0MWSTW[3]; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[3]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWA13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWB13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWC13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWD13[FF0MWIX1];
      FF0MW03.FF0MWFQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWE13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWF13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWG13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWH13[FF0MWIX1];
      FF0MW03.FF0MWNQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWI13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWJ13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWK13[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWL13[FF0MWIX1];
      FF0MW03.FF0MWPQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWFQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWNQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWPQ1[FF0MWIX3];
      FF0MW03.FF0MWTQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWA23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWB23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWC23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWD23[FF0MWIX1];
      FF0MW03.FF0MWFQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWE23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWF23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWG23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWH23[FF0MWIX1];
      FF0MW03.FF0MWNQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWI23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWJ23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWK23[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWL23[FF0MWIX1];
      FF0MW03.FF0MWPQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWFQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWNQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWPQ2[FF0MWIX3];
      FF0MW03.FF0MWTQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1;

    end

  end


  if (FF0MW00.FF0MWCTS == 4) /* season four*/

    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    FF0MWIX3 = FF0MW01.FF0MWSTW[4]; /* initialize index*/

    while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMNS[4]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWA14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWB14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWC14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWD14[FF0MWIX1];
      FF0MW03.FF0MWFQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWE14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWF14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWG14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWH14[FF0MWIX1];
      FF0MW03.FF0MWNQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWI14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWJ14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWK14[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWL14[FF0MWIX1];
      FF0MW03.FF0MWPQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWFQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWNQ1[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWPQ1[FF0MWIX3];
      FF0MW03.FF0MWTQ1[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWA24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWB24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWC24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWD24[FF0MWIX1];
      FF0MW03.FF0MWFQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate nat'l future qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWE24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWF24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWG24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWH24[FF0MWIX1];
      FF0MW03.FF0MWNQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate prop qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWI24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWJ24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWK24[FF0MWIX1];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWL24[FF0MWIX1];
      FF0MW03.FF0MWPQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

       /* calculate total qtys*/

      FF0MW00.FF0MWCWK = 0; /* initialize work field*/
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWFQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWNQ2[FF0MWIX3];
      FF0MW00.FF0MWCWK = FF0MW00.FF0MWCWK + FF0MW03.FF0MWPQ2[FF0MWIX3];
      FF0MW03.FF0MWTQ2[FF0MWIX3] = FF0MW00.FF0MWCWK;

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1;

    end

  end

  if (FF0MW00.FF0MWIX1 <= 12) /* limit of months in season*/
    FF0M152(); /* move zero qtys and pcts*/
  end


end // end FF0M150

// Clear alt cat qtys
Function FF0M152()
  while (FF0MW00.FF0MWIX1 <= 12)

    FF0MW03.FF0MWFP1[FF0MWIX3] = 0; /* future pct*/
    FF0MW03.FF0MWFQ1[FF0MWIX3] = 0; /* future qty*/
    FF0MW03.FF0MWNP1[FF0MWIX3] = 0; /* future nat'l pct*/
    FF0MW03.FF0MWNQ1[FF0MWIX3] = 0; /* future nat'l qty*/
    FF0MW03.FF0MWPP1[FF0MWIX3] = 0; /* prop pct*/
    FF0MW03.FF0MWPQ1[FF0MWIX3] = 0; /* prop qty*/
    FF0MW03.FF0MWTP1[FF0MWIX3] = 0; /* total pct*/
    FF0MW03.FF0MWTQ1[FF0MWIX3] = 0; /* total qty*/
    FF0MW03.FF0MWFP2[FF0MWIX3] = 0; /* future pct*/
    FF0MW03.FF0MWFQ2[FF0MWIX3] = 0; /* future qty*/
    FF0MW03.FF0MWNP2[FF0MWIX3] = 0; /* future nat'l pct*/
    FF0MW03.FF0MWNQ2[FF0MWIX3] = 0; /* future nat'l qty*/
    FF0MW03.FF0MWPP2[FF0MWIX3] = 0; /* prop pct*/
    FF0MW03.FF0MWPQ2[FF0MWIX3] = 0; /* prop qty*/
    FF0MW03.FF0MWTP2[FF0MWIX3] = 0; /* total pct*/
    FF0MW03.FF0MWTQ2[FF0MWIX3] = 0; /* total qty*/

    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    FF0MW00.FF0MWIX3 = FF0MW00.FF0MWIX3 + 1; /* increment index*/

  end


end // end FF0M152

// Seas qty/pcts calcs - alt cat
Function FF0M160()
   /* ------------------------------------------------------------*/
   /* Perform monthly pcts and season pcts and qtys calculations*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Calculate Season Qtys*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIX1 = FF0MW01.FF0MWSTW[FF0MWCTS]; /* sesn start pos*/
  FF0MW00.FF0MWIX2 = FF0MW01.FF0MWMNS[FF0MWCTS]; /* months in sesn*/
  FF0MW00.FF0MWIX5 = FF0MW01.FF0MWTOT[FF0MWCTS]; /* sesn total pos*/
  FF0MW00.FF0MWIX6 = 1; /* monthly counter*/

  while (FF0MW00.FF0MWIX6 <= FF0MW00.FF0MWIX2) /* months in seasons*/

        /* one year ago*/

    FF0MW03.FF0MWFQ1[FF0MWIX5] = FF0MW03.FF0MWFQ1[FF0MWIX5] + FF0MW03.FF0MWFQ1[FF0MWIX1];
    FF0MW03.FF0MWNQ1[FF0MWIX5] = FF0MW03.FF0MWNQ1[FF0MWIX5] + FF0MW03.FF0MWNQ1[FF0MWIX1];
    FF0MW03.FF0MWPQ1[FF0MWIX5] = FF0MW03.FF0MWPQ1[FF0MWIX5] + FF0MW03.FF0MWPQ1[FF0MWIX1];
    FF0MW03.FF0MWTQ1[FF0MWIX5] = FF0MW03.FF0MWTQ1[FF0MWIX5] + FF0MW03.FF0MWTQ1[FF0MWIX1];

        /* two years ago*/

    FF0MW03.FF0MWFQ2[FF0MWIX5] = FF0MW03.FF0MWFQ2[FF0MWIX5] + FF0MW03.FF0MWFQ2[FF0MWIX1];
    FF0MW03.FF0MWNQ2[FF0MWIX5] = FF0MW03.FF0MWNQ2[FF0MWIX5] + FF0MW03.FF0MWNQ2[FF0MWIX1];
    FF0MW03.FF0MWPQ2[FF0MWIX5] = FF0MW03.FF0MWPQ2[FF0MWIX5] + FF0MW03.FF0MWPQ2[FF0MWIX1];
    FF0MW03.FF0MWTQ2[FF0MWIX5] = FF0MW03.FF0MWTQ2[FF0MWIX5] + FF0MW03.FF0MWTQ2[FF0MWIX1];

    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    FF0MW00.FF0MWIX6 = FF0MW00.FF0MWIX6 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate Monthly Pcts*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIX1 = FF0MW01.FF0MWSTW[FF0MWCTS]; /* sesn start pos*/
  FF0MW00.FF0MWIX6 = 1; /* monthly counter*/

  while (FF0MW00.FF0MWIX6 <= FF0MW00.FF0MWIX2) /* months in seasons*/

        /* one year ago*/
        /* calc future pct = month fut qty / season fut qty*/

    if (FF0MW03.FF0MWFQ1[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW03.FF0MWFQ1[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW03.FF0MWFQ1[FF0MWIX1] * 100;
      FF0MW03.FF0MWFP1[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWFQ1[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWFP1[FF0MWIX1]));
    end

        /* calc nat'l fut pct = month natl fut qty / sesn natl fut*/

    if (FF0MW03.FF0MWNQ1[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW03.FF0MWNQ1[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW03.FF0MWNQ1[FF0MWIX1] * 100;
      FF0MW03.FF0MWNP1[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWNQ1[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWNP1[FF0MWIX1]));
    end

        /* calc prop pct = month prop qty / season prop qty*/

    if (FF0MW03.FF0MWPQ1[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW03.FF0MWPQ1[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW03.FF0MWPQ1[FF0MWIX1] * 100;
      FF0MW03.FF0MWPP1[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWPQ1[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWPP1[FF0MWIX1]));
    end

        /* calc total pct = month dmd qty / season dmd qty*/

    if (FF0MW03.FF0MWTQ1[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW03.FF0MWTQ1[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW03.FF0MWTQ1[FF0MWIX1] * 100;
      FF0MW03.FF0MWTP1[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWTQ1[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWTP1[FF0MWIX1]));
    end

        /* two years ago*/
        /* calc future pct = month fut qty / season fut qty*/

    if (FF0MW03.FF0MWFQ2[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW03.FF0MWFQ2[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW03.FF0MWFQ2[FF0MWIX1] * 100;
      FF0MW03.FF0MWFP2[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWFQ2[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWFP2[FF0MWIX1]));
    end

        /* calc nat'l fut pct = month natl fut qty / sesn natl fut*/

    if (FF0MW03.FF0MWNQ2[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW03.FF0MWNQ2[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW03.FF0MWNQ2[FF0MWIX1] * 100;
      FF0MW03.FF0MWNP2[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWNQ2[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWNP2[FF0MWIX1]));
    end

        /* calc prop pct = month prop qty / season prop qty*/

    if (FF0MW03.FF0MWPQ2[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW03.FF0MWPQ2[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW03.FF0MWPQ2[FF0MWIX1] * 100;
      FF0MW03.FF0MWPP2[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWPQ2[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWPP2[FF0MWIX1]));
    end

        /* calc total pct = month dmd qty / season dmd qty*/

    if (FF0MW03.FF0MWTQ2[FF0MWIX1] > 0 /* gt zeroes*/
     && FF0MW03.FF0MWTQ2[FF0MWIX5] > 0) /* gt zeroes*/
      FF0MW00.FF0MWCWK = 0; /* clear work area*/
      FF0MW00.FF0MWCWK = FF0MW03.FF0MWTQ2[FF0MWIX1] * 100;
      FF0MW03.FF0MWTP2[FF0MWIX1] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWTQ2[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWTP2[FF0MWIX1]));
    end

    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    FF0MW00.FF0MWIX6 = FF0MW00.FF0MWIX6 + 1; /* increment index*/

  end

    /* ----------------------------------------------------------*/
     /* Calculate Season Pcts*/
    /* ----------------------------------------------------------*/

     /* calc season fut pct = sesn fut qty / sesn dmd qty*/

  if (FF0MW03.FF0MWFQ1[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW03.FF0MWTQ1[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW03.FF0MWFQ1[FF0MWIX5] * 100;
    FF0MW03.FF0MWFP1[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWTQ1[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWFP1[FF0MWIX5]));
  end

  if (FF0MW03.FF0MWFQ2[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW03.FF0MWTQ2[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW03.FF0MWFQ2[FF0MWIX5] * 100;
    FF0MW03.FF0MWFP2[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWTQ2[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWFP2[FF0MWIX5]));
  end


     /* calc season natl fut pct = sesn natl fut qty / sesn dmd*/

  if (FF0MW03.FF0MWNQ1[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW03.FF0MWTQ1[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW03.FF0MWNQ1[FF0MWIX5] * 100;
    FF0MW03.FF0MWNP1[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWTQ1[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWNP1[FF0MWIX5]));
  end

  if (FF0MW03.FF0MWNQ2[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW03.FF0MWTQ2[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = FF0MW03.FF0MWNQ2[FF0MWIX5] * 100;
    FF0MW03.FF0MWNP2[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWTQ2[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWNP2[FF0MWIX5]));
  end

     /* calc season prop pct = sesn prop qty / sesn dmd qty*/

  if (FF0MW03.FF0MWPQ1[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW03.FF0MWTQ1[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW03.FF0MWPQ1[FF0MWIX5] * 100;
    FF0MW03.FF0MWPP1[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWTQ1[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWPP1[FF0MWIX5]));
  end

  if (FF0MW03.FF0MWPQ2[FF0MWIX5] > 0 /* gt zeroes*/
   && FF0MW03.FF0MWTQ2[FF0MWIX5] > 0) /* gt zeroes*/
    FF0MW00.FF0MWCWK = 0;
    FF0MW00.FF0MWCWK = FF0MW03.FF0MWPQ2[FF0MWIX5] * 100;
    FF0MW03.FF0MWPP2[FF0MWIX5] = mathLib.round(FF0MW00.FF0MWCWK / FF0MW03.FF0MWTQ2[FF0MWIX5], -mathLib.decimals(FF0MW03.FF0MWPP2[FF0MWIX5]));
  end

     /* calc season dmd pct = 100*/

  if (FF0MW03.FF0MWTQ1[FF0MWIX5] != 0)
    FF0MW03.FF0MWTP1[FF0MWIX5] = FF0MW03.FF0MWTP1[FF0MWIX5] + 100;
  end

  if (FF0MW03.FF0MWTQ2[FF0MWIX5] != 0)
    FF0MW03.FF0MWTP2[FF0MWIX5] = FF0MW03.FF0MWTP2[FF0MWIX5] + 100;
  end

end // end FF0M160

// Format and Converse Map
Function FF0M200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0MW00.FF0MWDRF == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0MW00.FF0MWFMF == "Y") /* map must be formatted*/
      FF0M210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FF0MM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0MM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    FF0MM001.XXXMODID = FFWREC.XXXMODID; /* module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end
                                   /* message number moved to ezemno*/
    set FF0MM001 alarm;
  end

  converse FF0MM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FF0MM001.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* error message number*/
  COMMAREA.CATOAP = FF0MM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0MM001.CAITEM; /* Application data*/


end // end FF0M200

// Format Data to Display
Function FF0M210()
   /* ------------------------------------------------------------*/
   /* Set map clear*/
   /* ------------------------------------------------------------*/

  set FF0MM001 initial; /* clear screen*/

   /* ------------------------------------------------------------*/
   /* Move category code and abrv to screen*/
   /* ------------------------------------------------------------*/

  FF0MM001.XPCCD = FFWREC.XPCCD; /* type group code*/
  FF0MM001.XPCABRV = FFWREC.XPCABRV; /* type group abrv*/

   /* ------------------------------------------------------------*/
   /* Move type group code and abrv to screen*/
   /* ------------------------------------------------------------*/

  FF0MM001.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF0MM001.YPGABRV = FFWREC.YPGABRV; /* type group abrv*/

   /* ------------------------------------------------------------*/
   /* If Alternate category code exists, display it on screen*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWFMF = "N"; /* reset switch*/

  if (FF0MW01.FF2ALCAT != " ") /* alt cat code exists*/
    FF0MM001.FF2ALCAT = FF0MW01.FF2ALCAT; /* alt cat code*/
    FF0MM001.FF0MMACD = FF0MW01.FF0MWACA; /* alt cat abrv*/
  else
    FF0MM001.FF2ALCAT = "  "; /* alt cat code*/
    FF0MM001.FF0MMACD = "      "; /* alt cat abrv*/
  end

   /* ------------------------------------------------------------*/
   /* If Historical Indicator already exists and not updated,*/
   /* place an 's' next to the appropriate field on the map.*/
   /* ------------------------------------------------------------*/

  if (FF0MW01.FF0MWIND == "1") /* hist demand eq one yr ago*/
    FF0MM001.FF0MMSEL[1] = "S"; /* set selection code*/
    set FF0MM001.FF0MMSEL[1] cursor; /* set cursor*/
  else
    FF0MM001.FF0MMSEL[1] = " "; /* set selection code*/
  end

  if (FF0MW01.FF0MWIND == "2") /* hist demand eq two yrs ago*/
    FF0MM001.FF0MMSEL[2] = "S"; /* set selection code*/
    set FF0MM001.FF0MMSEL[2] cursor; /* set cursor*/
  else
    FF0MM001.FF0MMSEL[2] = " "; /* set selection code*/
  end

  if (FF0MW01.FF0MWIND == "U") /* hist demand eq combined yrs*/
    FF0MM001.FF0MMSEL[3] = "S"; /* set selection code*/
    set FF0MM001.FF0MMSEL[3] cursor; /* set cursor*/
  else
    FF0MM001.FF0MMSEL[3] = " "; /* set selection code*/
  end

  if (FF0MW00.CACHGFL == "N")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Set selection fields normal*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIX1 = 1; /* initialize index*/

  while (FF0MW00.FF0MWIX1 <= 3) /* nbr of selections*/
    set FF0MM001.FF0MMSEL[FF0MWIX1] normal;
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Move user percents to screen,Set user percentages normal*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIX2 = FF0MW01.FF0MWSTM[FF0MWCUR]; /* init start*/
  if (FF0MW00.FF0MWCMO == 1) /* first page of sesn*/
     /* next sentence*/
  else
    FF0MWIX2 = FF0MW01.FF0MWSTM[FF0MWCUR] + 6; /* add 6 to start*/
  end


  FF0MW00.FF0MWIX1 = 1; /* initialize index*/
  while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMPG[FF0MWPGN]) /* months on page*/
    if (FF0MW00.FF0MWCAT == "Y") /* original category requested*/
      FF0MM001.FF0MMUQT[FF0MWIX1] = FF0MW02.FF0MWUQT[FF0MWIX2];
      if (FF0MW01.FF2ALCAT == " ") /* no alt cat exists*/
        set FF0MM001.FF0MMUQT[FF0MWIX1] normal;
      else
        set FF0MM001.FF0MMUQT[FF0MWIX1] skip;
      end
    else
      FF0MM001.FF0MMUQT[FF0MWIX1] = FF0MW03.FF0MWAQT[FF0MWIX2];
      set FF0MM001.FF0MMUQT[FF0MWIX1] skip;
    end
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Move Months in season to map*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWDT = FF0MW01.FF2SEASN[1]; /* work beg date*/
  FF0MW00.FF0MWMNC = FF0MW00.FF0MWMM; /* display month*/
  FF0MW00.FF0MWYRC = FF0MW00.FF0MWYY; /* display year*/
  FF0MM001.FF2SEASN = FF0MW00.FF0MWYMC; /* display date*/
  FF0MW01.FF0MWMBM = FF0MW00.FF0MWYMC; /* save date*/

  if (FF0MW00.FF0MWCUR == 1) /* season one*/
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWCMO; /* sesn start position*/
    FF0MW00.FF0MWIX2 = 1; /* index map*/

    while (FF0MW00.FF0MWIX2 <= FF0MW01.FF0MWMPG[FF0MWPGN])
                                   /* * months om page*/
       /* month from one year ago*/
      FF0MW00.FF0MWDT = FF0MW01.FF0MWM11[FF0MWIX1]; /* date work area*/
      FF0MW01.FF0MWDMM = FF0MW00.FF0MWMM; /* display month*/
      FF0MW01.FF0MWDYY = FF0MW00.FF0MWYY; /* display year*/
      FF0MM001.FF0MMMO1[FF0MWIX2] = FF0MW01.FF0MWDDT; /* one yr ago disp*/
       /* current year month*/
      FF0MW01.FF0MWDYY = FF0MW01.FF0MWDYY + 1; /* current year*/
      FF0MM001.FF0MMMOU[FF0MWIX2] = FF0MW01.FF0MWDDT; /* user created mo*/
       /* month from 2 years ago*/
      FF0MW00.FF0MWDT = FF0MW01.FF0MWM21[FF0MWIX1]; /* date work area*/
      FF0MW01.FF0MWDMM = FF0MW00.FF0MWMM; /* display month*/
      FF0MW01.FF0MWDYY = FF0MW00.FF0MWYY; /* display year*/
      FF0MM001.FF0MMMO2[FF0MWIX2] = FF0MW01.FF0MWDDT; /* two yr ago disp*/

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 1;
    end
  end

  if (FF0MW00.FF0MWCUR == 2) /* season two*/
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWCMO; /* sesn start position*/
    FF0MW00.FF0MWIX2 = 1; /* index map*/

    while (FF0MW00.FF0MWIX2 <= FF0MW01.FF0MWMPG[FF0MWPGN])
                                   /* * months on page*/
       /* month from one year ago*/
      FF0MW00.FF0MWDT = FF0MWM12[FF0MWIX1]; /* date work area*/
      FF0MW01.FF0MWDMM = FF0MW00.FF0MWMM; /* display month*/
      FF0MW01.FF0MWDYY = FF0MW00.FF0MWYY; /* display year*/
      FF0MM001.FF0MMMO1[FF0MWIX2] = FF0MW01.FF0MWDDT;
                                   /* 1 yr ago disp*/
       /* current year month*/
      FF0MW01.FF0MWDYY = FF0MW01.FF0MWDYY + 1; /* current year month*/
      FF0MM001.FF0MMMOU[FF0MWIX2] = FF0MW01.FF0MWDDT; /* user created mo*/
       /* month from two years ago*/
      FF0MW00.FF0MWDT = FF0MWM22[FF0MWIX1]; /* date work area*/
      FF0MW01.FF0MWDMM = FF0MW00.FF0MWMM; /* display month*/
      FF0MW01.FF0MWDYY = FF0MW00.FF0MWYY; /* display year*/
      FF0MM001.FF0MMMO2[FF0MWIX2] = FF0MW01.FF0MWDDT;
                                   /* 2 yr ago disp*/

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 1;
    end
  end

  if (FF0MW00.FF0MWCUR == 3) /* season three*/
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWCMO; /* sesn start position*/
    FF0MW00.FF0MWIX2 = 1; /* index map*/

    while (FF0MW00.FF0MWIX2 <= FF0MW01.FF0MWMPG[FF0MWPGN])
                                   /* * months on page*/
       /* month from one year ago*/
      FF0MW00.FF0MWDT = FF0MWM13[FF0MWIX1]; /* date work area*/
      FF0MW01.FF0MWDMM = FF0MW00.FF0MWMM; /* display month*/
      FF0MW01.FF0MWDYY = FF0MW00.FF0MWYY; /* display year*/
      FF0MM001.FF0MMMO1[FF0MWIX2] = FF0MW01.FF0MWDDT; /* one yr ago disp*/
       /* current year month*/
      FF0MW01.FF0MWDYY = FF0MW01.FF0MWDYY + 1; /* increment one yr ago*/
      FF0MM001.FF0MMMOU[FF0MWIX2] = FF0MW01.FF0MWDDT; /* user created mo*/
       /* month from one year ago*/
      FF0MW00.FF0MWDT = FF0MWM23[FF0MWIX1]; /* date work area*/
      FF0MW01.FF0MWDMM = FF0MW00.FF0MWMM; /* display month*/
      FF0MW01.FF0MWDYY = FF0MW00.FF0MWYY; /* display year*/
      FF0MM001.FF0MMMO2[FF0MWIX2] = FF0MW01.FF0MWDDT; /* two yr ago disp*/

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 1;
    end
  end


  if (FF0MW00.FF0MWCUR == 4) /* season four*/
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWCMO; /* sesn start position*/
    FF0MW00.FF0MWIX2 = 1; /* index map*/

    while (FF0MW00.FF0MWIX2 <= FF0MW01.FF0MWMPG[FF0MWPGN])
                                   /* * months on page*/
       /* month from one year ago*/
      FF0MW00.FF0MWDT = FF0MWM14[FF0MWIX1]; /* date work area*/
      FF0MW01.FF0MWDMM = FF0MW00.FF0MWMM; /* display month*/
      FF0MW01.FF0MWDYY = FF0MW00.FF0MWYY; /* display year*/
      FF0MM001.FF0MMMO1[FF0MWIX2] = FF0MW01.FF0MWDDT; /* one yr ago disp*/
       /* current year month*/
      FF0MW01.FF0MWDYY = FF0MW01.FF0MWDYY + 1; /* increment one yr ago*/
      FF0MM001.FF0MMMOU[FF0MWIX2] = FF0MW01.FF0MWDDT; /* user created mo*/
       /* month from one year ago*/
      FF0MW00.FF0MWDT = FF0MWM24[FF0MWIX1]; /* date work area*/
      FF0MW01.FF0MWDMM = FF0MW00.FF0MWMM; /* display month*/
      FF0MW01.FF0MWDYY = FF0MW00.FF0MWYY; /* display year*/
      FF0MM001.FF0MMMO2[FF0MWIX2] = FF0MW01.FF0MWDDT; /* two yr ago disp*/

      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
      FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* If Months in Season LT 6, clear headings on map*/
   /* ------------------------------------------------------------*/

  FF0MWIX1 = 1;
  while (FF0MWIX1 <= 6) /* positions on screen*/
    if (FF0MM001.FF0MMMO1[FF0MWIX1] == " ") /* one year ago disp*/
      FF0MM001.FF0MMHDG[FF0MWIX1] = " "; /* hdg month*/
      set FF0MM001.FF0MMHDG[FF0MWIX1] invisible, skip; /* hdg month*/
      FF0MM001.FF0MMMO1[FF0MWIX1] = " "; /* hdg month*/
      FF0MM001.FF0MMMO2[FF0MWIX1] = " "; /* hdg month*/
      FF0MM001.FF0MMMOU[FF0MWIX1] = " "; /* hdg month*/
      FF0MM001.FF0MMFP1[FF0MWIX1] = 0;
      FF0MM001.FF0MMNP1[FF0MWIX1] = 0;
      FF0MM001.FF0MMPP1[FF0MWIX1] = 0;
      FF0MM001.FF0MMTP1[FF0MWIX1] = 0;
      FF0MM001.FF0MMFQ1[FF0MWIX1] = " ";
      FF0MM001.FF0MMNQ1[FF0MWIX1] = " ";
      FF0MM001.FF0MMPQ1[FF0MWIX1] = " ";
      FF0MM001.FF0MMTQ1[FF0MWIX1] = " ";
      FF0MM001.FF0MMFP2[FF0MWIX1] = 0;
      FF0MM001.FF0MMNP2[FF0MWIX1] = 0;
      FF0MM001.FF0MMPP2[FF0MWIX1] = 0;
      FF0MM001.FF0MMTP2[FF0MWIX1] = 0;
      FF0MM001.FF0MMFQ2[FF0MWIX1] = " ";
      FF0MM001.FF0MMNQ2[FF0MWIX1] = " ";
      FF0MM001.FF0MMPQ2[FF0MWIX1] = " ";
      FF0MM001.FF0MMTQ2[FF0MWIX1] = " ";
      FF0MM001.FF0MMUQT[FF0MWIX1] = 0;
      set FF0MM001.FF0MMUQT[FF0MWIX1] initialAttributes;
    else
      FF0MM001.FF0MMHDG[FF0MWIX1] = "PCT  QTY"; /* hdg month 6*/
    end
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1;
  end

  if (FF0MW01.FF0MWTMP[FF0MWPGN] == "N")
    FF0MM001.FF0MMTT1 = " "; /* no total on page*/
    FF0MM001.FF0MMTT2 = " "; /* no total on page*/
    FF0MM001.FF0MMTT3 = " "; /* no total on page*/
    set FF0MM001.FF0MMTT1 invisible, skip; /* no total on page*/
    set FF0MM001.FF0MMTT2 invisible, skip; /* no total on page*/
    set FF0MM001.FF0MMTT3 invisible, skip; /* no total on page*/
  else
    FF0MM001.FF0MMTT1 = "TOTAL  TOTAL"; /* total on page*/
    FF0MM001.FF0MMTT2 = " PCT "; /* total on page*/
    FF0MM001.FF0MMTT3 = " QTY "; /* total on page*/
  end

   /* ------------------------------------------------------------*/
   /* Move requested category's season data to map*/
   /* ------------------------------------------------------------*/

  if (FF0MW00.FF0MWCAT == "Y") /* original category requested*/

    FF0M212(); /* format original category data*/

  end

  if (FF0MW00.FF0MWCAT == "N") /* alternate category requested*/

    FF0M214(); /* format alternate category data*/

  end

end // end FF0M210

// Move original cat data to map
Function FF0M212()
   /* ------------------------------------------------------------*/
   /* Move season data to map*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIXM = 1; /* initialize index*/

  FF0MW00.FF0MWIX1 = FF0MW01.FF0MWSTW[FF0MWCUR]; /* start WS*/

  if (FF0MW00.FF0MWCMO == 1) /* page starts with first month*/
     /* next sentence*/
  else
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 6; /* add 6 to start WS pos*/
  end

  while (FF0MW00.FF0MWIXM <= FF0MW01.FF0MWMPG[FF0MWPGN])
                                   /* max months per seas*/
     /* future pct and qty - yr1*/
    FF0MM001.FF0MMFP1[FF0MWIXM] = FF0MW02.FF0MWFP1[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW02.FF0MWFQ1[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMFQ1[FF0MWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr1*/
    FF0MM001.FF0MMNP1[FF0MWIXM] = FF0MW02.FF0MWNP1[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW02.FF0MWNQ1[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMNQ1[FF0MWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr1*/
    FF0MM001.FF0MMPP1[FF0MWIXM] = FF0MW02.FF0MWPP1[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW02.FF0MWPQ1[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMPQ1[FF0MWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr1*/
    FF0MM001.FF0MMTP1[FF0MWIXM] = FF0MW02.FF0MWTP1[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW02.FF0MWTQ1[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMTQ1[FF0MWIXM] = FFXREC.FFXCHAR;
     /* future pct and qty - yr2*/
    FF0MM001.FF0MMFP2[FF0MWIXM] = FF0MW02.FF0MWFP2[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW02.FF0MWFQ2[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMFQ2[FF0MWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr2*/
    FF0MM001.FF0MMNP2[FF0MWIXM] = FF0MW02.FF0MWNP2[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW02.FF0MWNQ2[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMNQ2[FF0MWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr2*/
    FF0MM001.FF0MMPP2[FF0MWIXM] = FF0MW02.FF0MWPP2[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW02.FF0MWPQ2[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMPQ2[FF0MWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr2*/
    FF0MM001.FF0MMTP2[FF0MWIXM] = FF0MW02.FF0MWTP2[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW02.FF0MWTQ2[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMTQ2[FF0MWIXM] = FFXREC.FFXCHAR;

    FF0MW00.FF0MWIXM = FF0MW00.FF0MWIXM + 1; /* increment index*/
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

  end

   /* season totals - yr1*/

  if (FF0MW01.FF0MWTMP[FF0MWPGN] == "N") /* total not on map - return*/
    return;
  end

  FF0MW00.FF0MWIX1 = FF0MW01.FF0MWTOT[FF0MWCUR]; /**/

  FF0MM001.FF0MMMY1 = FF0MW02.FF0MWFP1[FF0MWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW02.FF0MWFQ1[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMNY1 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0MM001.FF0MMOY1 = FF0MW02.FF0MWNP1[FF0MWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW02.FF0MWNQ1[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMPY1 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0MM001.FF0MMQY1 = FF0MW02.FF0MWPP1[FF0MWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW02.FF0MWPQ1[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMRY1 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0MM001.FF0MMSY1 = FF0MW02.FF0MWTP1[FF0MWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW02.FF0MWTQ1[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMTY1 = FFXREC.FFXCHAR; /* seas total qty*/

   /* season totals - yr2*/

  FF0MM001.FF0MMMY2 = FF0MW02.FF0MWFP2[FF0MWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW02.FF0MWFQ2[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMNY2 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0MM001.FF0MMOY2 = FF0MW02.FF0MWNP2[FF0MWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW02.FF0MWNQ2[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMPY2 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0MM001.FF0MMQY2 = FF0MW02.FF0MWPP2[FF0MWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW02.FF0MWPQ2[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMRY2 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0MM001.FF0MMSY2 = FF0MW02.FF0MWTP2[FF0MWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW02.FF0MWTQ2[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMTY2 = FFXREC.FFXCHAR; /* seas total qty*/

end // end FF0M212

// Move alternate cat data to map
Function FF0M214()
   /* ------------------------------------------------------------*/
   /* Move season data to map*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIXM = 1; /* initialize index*/

  FF0MW00.FF0MWIX1 = FF0MW01.FF0MWSTW[FF0MWCUR]; /* start WS*/

  if (FF0MW00.FF0MWCMO == 1) /* page starts with first month*/
     /* next sentence*/
  else
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 6; /* add 6 to start WS pos*/
  end

  while (FF0MW00.FF0MWIXM <= FF0MW01.FF0MWMPG[FF0MWPGN])
                                   /* max months per seas*/
     /* future pct and qty - yr1*/
    FF0MM001.FF0MMFP1[FF0MWIXM] = FF0MW03.FF0MWFP1[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW03.FF0MWFQ1[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMFQ1[FF0MWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr1*/
    FF0MM001.FF0MMNP1[FF0MWIXM] = FF0MW03.FF0MWNP1[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW03.FF0MWNQ1[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMNQ1[FF0MWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr1*/
    FF0MM001.FF0MMPP1[FF0MWIXM] = FF0MW03.FF0MWPP1[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW03.FF0MWPQ1[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMPQ1[FF0MWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr1*/
    FF0MM001.FF0MMTP1[FF0MWIXM] = FF0MW03.FF0MWTP1[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW03.FF0MWTQ1[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMTQ1[FF0MWIXM] = FFXREC.FFXCHAR;
     /* future pct and qty - yr2*/
    FF0MM001.FF0MMFP2[FF0MWIXM] = FF0MW03.FF0MWFP2[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW03.FF0MWFQ2[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMFQ2[FF0MWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr2*/
    FF0MM001.FF0MMNP2[FF0MWIXM] = FF0MW03.FF0MWNP2[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW03.FF0MWNQ2[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMNQ2[FF0MWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr2*/
    FF0MM001.FF0MMPP2[FF0MWIXM] = FF0MW03.FF0MWPP2[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW03.FF0MWPQ2[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMPQ2[FF0MWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr2*/
    FF0MM001.FF0MMTP2[FF0MWIXM] = FF0MW03.FF0MWTP2[FF0MWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0MW03.FF0MWTQ2[FF0MWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0MM001.FF0MMTQ2[FF0MWIXM] = FFXREC.FFXCHAR;

    FF0MW00.FF0MWIXM = FF0MW00.FF0MWIXM + 1; /* increment index*/
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

  end

   /* season totals - yr1*/

  if (FF0MW01.FF0MWTMP[FF0MWPGN] == "N") /* total not on map - return*/
    return;
  end

  FF0MWIX1 = FF0MW01.FF0MWTOT[FF0MWCUR]; /* total sesn position*/

  FF0MM001.FF0MMMY1 = FF0MW03.FF0MWFP1[FF0MWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW03.FF0MWFQ1[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMNY1 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0MM001.FF0MMOY1 = FF0MW03.FF0MWNP1[FF0MWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW03.FF0MWNQ1[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMPY1 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0MM001.FF0MMQY1 = FF0MW03.FF0MWPP1[FF0MWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW03.FF0MWPQ1[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMRY1 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0MM001.FF0MMSY1 = FF0MW03.FF0MWTP1[FF0MWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW03.FF0MWTQ1[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMTY1 = FFXREC.FFXCHAR; /* seas total qty*/

   /* season totals - yr2*/

  FF0MM001.FF0MMMY2 = FF0MW03.FF0MWFP2[FF0MWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW03.FF0MWFQ2[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMNY2 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0MM001.FF0MMOY2 = FF0MW03.FF0MWNP2[FF0MWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW03.FF0MWNQ2[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMPY2 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0MM001.FF0MMQY2 = FF0MW03.FF0MWPP2[FF0MWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW03.FF0MWPQ2[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMRY2 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0MM001.FF0MMSY2 = FF0MW03.FF0MWTP2[FF0MWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0MW03.FF0MWTQ2[FF0MWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0MM001.FF0MMTY2 = FFXREC.FFXCHAR; /* seas total qty*/

end // end FF0M214

// Check Attention Identifier
Function FF0M300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FF0MW00.FF0MWDRF == "Y") /* data requested*/
      set FF0MW02 empty; /* clear display storage*/
      set FF0MW03 empty; /* clear display storage*/
    end
    COMMAREA.CATOAP = " "; /* clear to application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    FF0MW00.FF0MWDRF = "N"; /* data not requested*/
    FF0MW00.FF0MWFMF = "Y"; /* format the map*/
    exit stack; /* return to show error msg*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSFFS01();
      set FF0MM001.CATOAP cursor, bold; /* Highlight*/

    else

      converseLib.validationFailed(36); /* 'PF Keys not valid with Fast Path'*/
      FFWREC.XXXMODID = "300"; /* module identification*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF5 is pressed, go to Production Menu*/
   /* If PF14 is pressed, go to FF0D*/
   /* If PF15 is pressed, go to FF0R*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* pf3 was pressed*/
   || converseVar.eventKey is pf5  /* pf5 was pressed*/
   || converseVar.eventKey is pf14 /* pf14 was pressed*/
   || converseVar.eventKey is pf15) /* pf15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0MM001"; /* APPLICATION FIND CODE*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "FF0A";
    end

    if (converseVar.eventKey is pf14) /* pf14 was pressed*/
      COMMAREA.CATOAP = "FF0D"; /* Future Pcts*/
    end

    if (converseVar.eventKey is pf15) /* pf15 was pressed*/
      COMMAREA.CATOAP = "FF0R"; /* Prop Pcts*/
    end

    XSFFS01();
    exit stack;

  end

  if (converseVar.eventKey is pf10 /* pf10 was pressed*/
   || converseVar.eventKey is pf11 /* pf11 was pressed*/
   || converseVar.eventKey is pf16 /* pf16 was pressed*/
   || converseVar.eventKey is pf17) /* pf17 was pressed*/
    return;
  end

  if (converseVar.eventKey not enter) /* enter was not pressed*/

    converseLib.validationFailed(3); /* Indicate PF key not valid*/
    FFWREC.XXXMODID = "300"; /* Process name*/
    if (converseVar.eventKey is pa1 /* pa1 was pressed*/
     || converseVar.eventKey is pa3) /* pa3 was pressed*/
      converseLib.clearScreen();
      
    end

    exit stack;

  end


end // end FF0M300

// Reset Highlighted Fields
Function FF0M400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0MM001.XPCCD initialAttributes; /* category code*/
  set FF0MM001.YPGCD initialAttributes; /* type grp code*/
  set FF0MM001.FF2SEASN initialAttributes; /* season beg month*/
  set FF0MM001.FF2ALCAT initialAttributes; /* alternate category code*/

  FF0MW00.FF0MWIXM = 1; /* Initialize map index*/

  while (FF0MW00.FF0MWIXM <= 3) /* number of selection codes*/
    set FF0MM001.FF0MMSEL[FF0MWIXM] normal; /* selection*/
    FF0MW00.FF0MWIXM = FF0MW00.FF0MWIXM + 1; /* increment index*/
  end

  FF0MW00.FF0MWIXM = 1; /* Initialize map index*/

  while (FF0MW00.FF0MWIXM <= FF0MW01.FF0MWMPG[FF0MWPGN]) /* reset user %'s*/
    if (FF0MW00.FF0MWCAT == "Y") /* original cat selected*/
      if (FF0MM001.FF2ALCAT == " ") /* no alt cat entered*/
        set FF0MM001.FF0MMUQT[FF0MWIXM] normal;
      else
        set FF0MM001.FF0MMUQT[FF0MWIXM] skip;
      end
    else
      set FF0MM001.FF0MMUQT[FF0MWIXM] skip;
    end
    FF0MW00.FF0MWIXM = FF0MW00.FF0MWIXM + 1; /* increment index*/
  end

  set FF0MM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF0MM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FF0MM001.XPCCD == "?" /* category code list requested*/
   || FF0MM001.YPGCD == "?") /* type group code list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "400"; /* Module identification*/
      FFWREC.XXXMSGNO = 116; /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0MM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0MM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0MM001.XPCABRV = FFWREC.XPCABRV; /* Description*/
    else
      FF0MM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0MM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Description*/

    end

    set FF0MM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Type Group codes.*/
   /* ------------------------------------------------------------*/

  if (FF0MM001.YPGCD == "?") /* Type Group list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0MM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0MM001.YPGABRV = FFWREC.YPGABRV; /* Description*/
    else
      FF0MM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0MM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Description*/

    end

    set FF0MM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested list has been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  FFWREC.XXXMSGNO = 97; /* Indicate press ENTER*/

  exit stack;


end // end FF0M400

// Verify the entered data
Function FF0M500()
   /* ------------------------------------------------------------*/
   /* Edit Item (if entered)*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* item entered*/
    FFWREC.XXXMODID = "500"; /* module identification*/
    set FF0MM001.CAITEM cursor, bold; /* set cursor*/
    converseLib.validationFailed(40); /* 'Enter only with Option'*/
  end

   /* ------------------------------------------------------------*/
   /* Reset modified fields flags*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWDMF = "N"; /* reset data modified flag*/

   /* ------------------------------------------------------------*/
   /* If Data fields were modified, set flag.*/
   /* ------------------------------------------------------------*/

  if (FF0MM001.XPCCD != FFWREC.XPCCD /* category code changed*/
   || FF0MM001.YPGCD != FFWREC.YPGCD /* type group code changed*/
   || FF0MM001.FF2ALCAT != FF0MW01.FF2ALCAT) /* alt category code changed*/
    FF0MW00.FF0MWDMF = "Y"; /* data modified*/
  end

  FF0MW00.FF0MWUPR = "N"; /* update not requested*/

  if (FF0MM001.FF0MMSEL[1] == "S"
   && FF0MW01.FF2DMIND != "1")
    FF0MW01.FF0MWIND = "2"; /* save map sel*/
    FF0MW00.FF0MWUPR = "Y"; /* update requested*/
    FF0MW00.FF0MWDMF = "Y"; /* data modified*/
  else
    if (FF0MM001.FF0MMSEL[2] == "S"
     && FF0MW01.FF2DMIND != "2")
      FF0MW01.FF0MWIND = "2"; /* save map sel*/
      FF0MW00.FF0MWUPR = "Y"; /* update requested*/
      FF0MW00.FF0MWDMF = "Y"; /* data modified*/
    else
      if (FF0MM001.FF0MMSEL[3] == "S"
       && FF0MW01.FF2DMIND != "U")
        FF0MW01.FF0MWIND = "U"; /* save map sel*/
        FF0MW00.FF0MWUPR = "Y"; /* update requested*/
      else
        FF0MW01.FF0MWIND = FF0MW01.FF2DMIND; /* reset*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Save user created percentages in working storage*/
   /* ------------------------------------------------------------*/

  if (FF0MW00.FF0MWCUR > 0) /* data has been obtained*/
    FF0MW00.FF0MWIX2 = FF0MW01.FF0MWSTM[FF0MWCUR]; /* init WS start*/

    if (FF0MW00.FF0MWCMO == 1) /* at start of season*/
        /* next sentence*/
    else
      FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 6; /* add 6 to index*/
    end

    if (FF0MW00.FF0MWCAT == "Y") /* original cat requested*/
      FF0MW00.FF0MWIX1 = 1; /* initialize index*/
      while (FF0MW00.FF0MWIX1 <= FF0MW01.FF0MWMPG[FF0MWPGN])
                                   /* number of months on page*/
        if (FF0MM001.FF0MMUQT[FF0MWIX1] != FF0MW02.FF0MWUQT[FF0MWIX2])
          FF0MW02.FF0MWUQT[FF0MWIX2] = FF0MM001.FF0MMUQT[FF0MWIX1];
        end
        FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
        FF0MW00.FF0MWIX2 = FF0MW00.FF0MWIX2 + 1; /* increment index*/
      end

   /* ------------------------------------------------------------*/
   /* If any month's value was changed, set the update switch*/
   /* ------------------------------------------------------------*/
      FF0MW00.FF0MWIX1 = 1; /* initialize index*/

      while (FF0MW00.FF0MWIX1 <= 12) /* twelve months*/

        if (FF0MW02.FF0MWUQT[FF0MWIX1] != FF0MW02.FF0MWSQT[FF0MWIX1]
         && FF0MM001.FF0MMSEL[3] == "S")
          FF0MW00.FF0MWUPR = "Y"; /* update requested*/
        end

        FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF10 (scroll left) or PF11 (scroll right) were pressed,*/
   /* verify that the scroll request is valid.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/
    if (FF0MW00.FF0MWDMF == "Y") /* Data modified*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(5); /* 'Scrolling not allowed when data*/
                                   /* modified'*/

    else

      if (FF0MW00.FF0MWPGN < 2) /* and no previous pages*/
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(23); /* 'data at border'*/
      end
    end
  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/
    if (FF0MW00.FF0MWDMF == "Y") /* Data modified*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(5); /* 'Scrolling not allowed when data*/
                                   /* modified'*/

    else

      if (FF0MW00.FF0MWPGN >= FF0MW00.FF0MWMXP) /* and no more pages*/
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(24); /* No more pages to display*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* verify that all selection codes are 's' or ' '.*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWIX1 = 3; /* initialize index*/
  FF0MW00.FF0MWSCT = 0; /* initialize counter*/

  while (FF0MW00.FF0MWIX1 > 0)
    if (FF0MM001.FF0MMSEL[FF0MWIX1] == "S")
      FF0MW00.FF0MWSCT = FF0MW00.FF0MWSCT + 1; /* increment selection cnt*/
    else
      if (FF0MM001.FF0MMSEL[FF0MWIX1] != " ") /* not equal space*/
        converseLib.validationFailed(41); /* 'must be s or space'*/
        FFWREC.XXXMODID = "500"; /* module identification*/
        set FF0MM001.FF0MMSEL[FF0MWIX1] cursor, bold; /* set cursor*/
      end
    end
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 - 1; /* decrement index*/
  end

   /* ------------------------------------------------------------*/
   /* If selection was made, verify that only one indicator was*/
   /* chosen. If more than one chosen, display error message*/
   /* ------------------------------------------------------------*/

  if (FF0MW00.FF0MWSCT > 1)
    converseLib.validationFailed(73); /* 'Only one option may be chosen'*/
    FFWREC.XXXMODID = "500"; /* module identification*/
    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    FF0MW00.FF0MWFSF = "Y"; /* first selection flag*/
    while (FF0MW00.FF0MWIX1 <= 3)
      if (FF0MM001.FF0MMSEL[FF0MWIX1] == "S") /* selection made*/
        if (FF0MW00.FF0MWFSF == "Y") /* selection made*/
          FF0MW00.FF0MWFSF = "N";
        else
          set FF0MM001.FF0MMSEL[FF0MWIX1] cursor, bold; /* set cursor*/
        end
      end
      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Alternate Category code has been changed and isn't*/
   /* a space, verify it's validity.*/
   /* ------------------------------------------------------------*/

  if (FF0MM001.FF2ALCAT != FF0MW01.FF2ALCAT /* alternate category changed*/
   && FF0MM001.FF2ALCAT != " ")             /* alternate category not space*/
    FF0M510(); /* verify alt cat for ftwr fcstg*/
  end

   /* ------------------------------------------------------------*/
   /* If Type Group code has been changed, verify its validity.*/
   /* ------------------------------------------------------------*/

  if (FF0MM001.YPGCD != FFWREC.YPGCD) /* Type Group code changed*/
    if (FF0MM001.YPGCD in YPGTBL.YPGCD           /* if code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* status is active*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* valid for forecasting*/
      FF0MM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* move abrv to map*/
    else
      FF0MM001.YPGABRV = " "; /* clear description*/
      converseLib.validationFailed(10); /* 'invalid value entered'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0MM001.YPGCD cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Category code has changed, verify its validity.*/
   /* ------------------------------------------------------------*/

  if (FF0MM001.XPCCD != FFWREC.XPCCD) /* Category code changed*/
    FF0M520(); /* verify orig cat for ftwr fcstg*/
  end

   /* ------------------------------------------------------------*/
   /* if PF16 was pressed, the alternate category code must*/
   /* be present; otherwise, display error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    if (FF0MM001.FF2ALCAT == " ") /* alternate category not entered*/
      converseLib.validationFailed(150); /* ' alternate category code not*/
                                   /* entered'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0MM001.FF2ALCAT cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF16 or PF17 was pressed and data was changed, display*/
   /* error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17) /* PF17 was pressed*/
    if (FF0MW00.FF0MWDMF == "Y") /* data was modified*/
      converseLib.validationFailed(111);
                                   /* 'function not allowed - data changed'*/
      FFWREC.XXXMODID = "500"; /* module identification*/

      FF0MW00.FF0MWIX1 = 3; /* initialize index*/
      while (FF0MW00.FF0MWIX1 > 0)
        if (FF0MM001.FF0MMSEL[FF0MWIX1] != FF0MW01.FF0MWSEL[FF0MWIX1])
          set FF0MM001.FF0MMSEL[FF0MWIX1] cursor, bold; /* set cursor*/
        end
        FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 - 1; /* decrement index*/
      end

      if (FF0MM001.FF2ALCAT != FF0MW01.FF2ALCAT)
                                   /* alt category code changed*/
        set FF0MM001.FF2ALCAT cursor, bold; /* set cursor*/
      end
      if (FF0MM001.FF2SEASN != FF0MW01.FF0MWMBM) /* beg month changed*/
        set FF0MM001.FF2SEASN cursor, bold; /* set cursor*/
      end
      if (FF0MM001.YPGCD != FFWREC.YPGCD) /* type group code changed*/
        set FF0MM001.YPGCD cursor, bold; /* set cursor*/
      end
      if (FF0MM001.XPCCD != FFWREC.XPCCD) /* category code changed*/
        set FF0MM001.XPCCD cursor, bold; /* set cursor*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if Category code or type group were not entered on screen*/
   /* highlight appropriate field and display error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/

    if (FF0MM001.YPGCD == " ") /* Type Group code not entered*/
      converseLib.validationFailed(8); /* 'Required field, please enter'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0MM001.YPGCD cursor, bold; /* set cursor*/
    end

    if (FF0MM001.XPCCD == " ") /* Category code not entered*/
      converseLib.validationFailed(8); /* 'Required field, please enter'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0MM001.XPCCD cursor, bold; /* set cursor*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If user created %'s modified check for all seasons = 100%*/
   /* ------------------------------------------------------------*/

  if (FF0MM001.FF0MMSEL[3] == "S"
   && converseVar.eventKey is enter)
    FF0MW00.FF0MWIXM = 1; /* initialize index*/
    while (FF0MW00.FF0MWIXM <= FF0MW01.FF2NSEAS)
      FF0M505(); /* check user percentages*/
      FF0MW00.FF0MWIXM = FF0MW00.FF0MWIXM + 1; /* increment index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FF0M500

// Check user created percentages
Function FF0M505()
   /* ------------------------------------------------------------*/
   /* If user created %'s modified check for all seasons = 100%*/
   /* ------------------------------------------------------------*/

  FF0MWIX1 = 1; /* initialize index*/
  FF0MW00.FF0MWNUM = 0; /* initialize work field*/
  while (FF0MW00.FF0MWIX1 < FF0MWIXM) /* while lt current season*/
                                   /* accumulate season lengths*/
    FF0MW00.FF0MWNUM = FF0MWNUM + FF0MW01.FF0MWMNS[FF0MWIX1];
    FF0MW00.FF0MWIX1 = FF0MWIX1 + 1; /* increment index*/
  end

  FF0MWIX6 = FF0MWNUM + FF0MWMNS[FF0MWIXM]; /* accum current sesn length*/
                                  /* to get last mo in next sesn*/
  FF0MWNUM = FF0MWNUM + 1; /* begining of next season*/
  move FF0MWNUM to FF0MWIX1 withV60Compat; /* initialize index to start of*/
                                  /* current season*/

  FF0MW01.FF0MWNMX = 0; /* while in range of mos for this*/

  while (FF0MW00.FF0MWIX1 <= FF0MWIX6) /* while in range of mos for this*/
                                   /* season*/
    if (FF0MM001.FF2ALCAT == " ") /* no alt cat chosen*/
      FF0MW01.FF0MWNMX = FF0MW01.FF0MWNMX + FF0MW02.FF0MWUQT[FF0MWIX1];
    else
      FF0MW01.FF0MWNMX = FF0MW01.FF0MWNMX + FF0MW03.FF0MWAQT[FF0MWIX1];
    end
    FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
  end

  if (FF0MW01.FF0MWNMX != 100) /* user created %'s not = 100*/
    if (FF0MM001.FF2ALCAT == " ") /* no alt cat chosen*/
      if (FF0MW00.FF0MWCAT == "Y") /* original cat requested*/
        set FF0MM001.FF0MMUQT[1] cursor;
        converseLib.validationFailed(386); /* user created percents must be > 0*/
        FFWREC.XXXMODID = "505"; /* module identification*/
      else
        set FF0MM001.FF0MMSEL[3] cursor;
        converseLib.validationFailed(388); /* orig cat user created index invalid*/
        FFWREC.XXXMODID = "505"; /* module identification*/
      end
    else
      FF0MM001.FF0MMSEL[1] = "S"; /* alt index invalid reset to 1*/
      FF0MM001.FF0MMSEL[3] = " ";
      FF0MW01.FF0MWIND = "1"; /* map save*/
      FF0MW00.FF0MWUPR = "Y"; /* update requested*/
      FFWREC.XXXMSGNO = 387; /* indicate reset to 1 after update*/
      FFWREC.XXXMODID = "505"; /* module identification*/
      set FF0MM001.FF0MMSEL[1] cursor;
    end
  end

end // end FF0M505

// Verify alt cat for FF
Function FF0M510()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Set up key - Footwear Forecast XREF Table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* initialize record*/

  FF2REC.XPCCD = FF0MM001.FF2ALCAT; /* alt cat code*/
  FF2REC.YPGCD = FF0MM001.YPGCD; /* type group*/
  FF2REC.YSMXDV = "10"; /* division group code*/
  FF2REC.XPLCD = "*"; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XPCREC.XPCCD = FF0MM001.FF2ALCAT;
      XPCREC.XGPCD = COMMAREA.XGPCD;
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* if code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* status is active*/
        FF0MM001.FF0MMACD = XPCTBL.XPCABRV[sysVar.arrayIndex];
        set FFDREC empty;
        FFDREC.XPCCD = FF0MM001.FF2ALCAT;
        FF0M127(); /* get user created %, alt cat*/
      else
        converseLib.validationFailed(10); /* 'invalid value entered'*/
        FFWREC.XXXMODID = "510"; /* module identification*/
        set FF0MM001.FF2ALCAT cursor, bold; /* set cursor*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      converseLib.validationFailed(10); /* 'invalid value entered'*/
      FFWREC.XXXMODID = "510"; /* module identification*/
      set FF0MM001.FF2ALCAT cursor, bold; /* set cursor*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0M510

// Verify orig cat for FF
Function FF0M520()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Set up key - Footwear Forecast XREF Table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* initialize record*/

  FF2REC.XPCCD = FF0MM001.XPCCD; /* orig cat code*/
  FF2REC.YPGCD = FF0MM001.YPGCD; /* type group*/
  FF2REC.YSMXDV = "10"; /* division group code*/
  FF2REC.XPLCD = "*"; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XPCREC.XPCCD = FF0MM001.XPCCD;
      XPCREC.XGPCD = COMMAREA.XGPCD;
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* if code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* status is active*/
        FF0MM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
        FF0MW00.FF0MWNCF = "Y"; /* new cat requested*/
      else
        FF0MM001.XPCABRV = "      ";
        converseLib.validationFailed(10); /* 'invalid value entered'*/
        FFWREC.XXXMODID = "520"; /* module identification*/
        set FF0MM001.XPCCD cursor, bold; /* set cursor*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      FF0MM001.XPCABRV = "      ";
      converseLib.validationFailed(10); /* 'invalid value entered'*/
      FFWREC.XXXMODID = "520"; /* module identification*/
      set FF0MM001.XPCCD cursor, bold; /* set cursor*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0M520

// Process Valid Input Request
Function FF0M600()
   /* ------------------------------------------------------------*/
   /* Indicate map must be formatted*/
   /* ------------------------------------------------------------*/

  FF0MW00.FF0MWFMF = "Y"; /* Format map*/

   /* ------------------------------------------------------------*/
   /* If PF10, decrement the page requested and return to the*/
   /* calling process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* PF10 was pressed*/
    if (FF0MW00.FF0MWCAT == "Y") /* original category data*/
      FFWREC.XXXMSGNO = 162; /* 'viewing original category data'*/
    else
      if (FF0MW00.FF0MWCAT == "N") /* alternate category data*/
        FFWREC.XXXMSGNO = 163; /* 'viewing alt category data'*/
      end
    end
    if (FF0MW01.FF0MWMNS[FF0MWCUR] > 6) /* current season longer than 6*/
      if (FF0MW01.FF0MWTMP[FF0MWPGN] == "Y") /* total on current page*/
        FF0MW00.FF0MWCMO = 1; /* season start month*/
        FF0MW00.FF0MWPGN = FF0MW00.FF0MWPGN - 1; /* subtract 1 curr page*/
      else
        FF0MW00.FF0MWCUR = FF0MW00.FF0MWCUR - 1;
                                   /* sub 1 from curr season*/
        FF0MW00.FF0MWPGN = FF0MW00.FF0MWPGN - 1; /* subtract 1 curr page*/
        if (FF0MW01.FF0MWMNS[FF0MWCUR] > 6) /* prev season longer than 6*/
          FF0MW00.FF0MWCMO = 7; /* season start month*/
        else
          FF0MW00.FF0MWCMO = 1; /* season start month*/
        end
      end
    else
      FF0MW00.FF0MWCUR = FF0MW00.FF0MWCUR - 1; /* sub 1 from curr season*/
      FF0MW00.FF0MWPGN = FF0MW00.FF0MWPGN - 1; /* subtract 1 curr page*/
      if (FF0MW01.FF0MWMNS[FF0MWCUR] > 6) /* prev season longer than 6*/
        FF0MW00.FF0MWCMO = 7; /* season start month*/
      else
        FF0MW00.FF0MWCMO = 1; /* season start month*/
      end
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If PF11, increment the page requested and return to the*/
   /* calling process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* PF11 was pressed*/
    if (FF0MW00.FF0MWCAT == "Y") /* original category data*/
      FFWREC.XXXMSGNO = 162; /* 'viewing original category data'*/
    else
      if (FF0MW00.FF0MWCAT == "N") /* alternate category data*/
        FFWREC.XXXMSGNO = 163; /* 'viewing alt category data'*/
      end
    end
    if (FF0MW01.FF0MWTMP[FF0MWPGN] == "Y") /* total on current page*/
      FF0MW00.FF0MWCUR = FF0MW00.FF0MWCUR + 1; /* add 1 curr season*/
      FF0MW00.FF0MWCMO = 1; /* season start month*/
      FF0MW00.FF0MWPGN = FF0MW00.FF0MWPGN + 1; /* add 1 curr page*/
    else
      FF0MW00.FF0MWPGN = FF0MW00.FF0MWPGN + 1; /* add 1 curr page*/
      FF0MW00.FF0MWCMO = 7; /* season start month*/
    end
    return;
  end


   /* ------------------------------------------------------------*/
   /* If PF16 was pressed, display alternate category data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* pf16 was pressed*/

    FF0MW00.FF0MWCAT = "N"; /* set for alternate cat data*/
    FF0MW00.FF0MWPGN = 1; /* set page nbr*/
    FF0MW00.FF0MWCUR = 1; /* set current season*/
    FF0MW00.FF0MWCMO = 1; /* set sesn start month*/
    FFWREC.XXXMSGNO = 163; /* 'viewing alt category data'*/
    FFWREC.XXXMODID = "600"; /* module identification*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If PF17 was pressed, display original category data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* pf17 was pressed*/

    FF0MW00.FF0MWCAT = "Y"; /* set for original cat data*/
    FF0MW00.FF0MWPGN = 1; /* set page nbr*/
    FF0MW00.FF0MWCUR = 1; /* set current season*/
    FF0MW00.FF0MWCMO = 1; /* set sesn start month*/
    FFWREC.XXXMSGNO = 162; /* 'viewing original category data'*/
    FFWREC.XXXMODID = "600"; /* module identification*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FF system COMMAREA.*/
   /* ------------------------------------------------------------*/
  if (FF0MM001.XPCCD != FFWREC.XPCCD /* category code changed*/
   || FF0MM001.YPGCD != FFWREC.YPGCD) /* type group code changed*/
    FFWREC.XPCCD = FF0MM001.XPCCD; /* category code*/
    FFWREC.YPGCD = FF0MM001.YPGCD; /* type group code*/
    FFWREC.XPCABRV = FF0MM001.XPCABRV; /* category abrv*/
    FFWREC.YPGABRV = FF0MM001.YPGABRV; /* type abrv*/
    FF0MW01.FF0MWMBM = FF0MM001.FF2SEASN; /* map beg month*/
    FF0MW01.FF2ALCAT = FF0MM001.FF2ALCAT; /* alt cat code*/
    FF0MW01.FF0MWACA = FF0MM001.FF0MMACD; /* alt cat abrv*/
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/
    if (FF0MM001.XPCCD != " " /* cat entered*/
     && FF0MM001.YPGCD != " ") /* & type grp entered*/
      FF0MW00.FF0MWDRF = "Y"; /* data requested*/
    else
      FF0MW00.FF0MWDRF = "N"; /* data requested*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If alternate category or history future indicator were*/
   /* changed, perform update and display data.*/
   /* ------------------------------------------------------------*/

  if (FF0MM001.FF2ALCAT != FF0MW01.FF2ALCAT /* alternate category changed*/
   || FF0MW00.FF0MWUPR == "Y")              /* update requested*/
    FF0M610(); /* update table row*/
    FF0MW01.FF2ALCAT = FF0MM001.FF2ALCAT; /* alt cat code*/
    if (FFWREC.XXXMSGNO == 0)
      FFWREC.XXXMSGNO = 032; /* 'update successful'*/
      FFWREC.XXXMODID = "600"; /* module identification*/
    end
    /* ------------------------------------------------------------*/
     /* commit all changes to protected resources*/
    /* ------------------------------------------------------------*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/

    FF0MW00.FF0MWDRF = "Y"; /* data requested*/
  end

  FF0M620(); /* set data to display*/


end // end FF0M600

// update user created %'s
Function FF0M605()
  set FFCREC empty;

  FFCREC.FFABEGMO = FF0MW01.FF0MWMTS[1]; /* beg month in range*/
  FFCREC.FFAENDMO = FF0MW01.FF0MWMTS[12]; /* end month in range*/

  FF0M606(); /* select dfcast.vrcat001 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (FFCREC.FFCDMIND != "U")
      FF0M607(); /* update dfcast.vrcat001 row*/
    end
    FFDREC.XPCCD = FFWREC.XPCCD;
    FF0M123(); /* select 's1' dfcast.vrcmth01*/
    FF0M124(); /* fetch 'n1' dfcast.vrcmth01*/
    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= 12
     && SQLCA.VAGen_SQLCODE == 0)
      if (FF0MW02.FF0MWUQT[FF0MWIX1] != FFDREC.FFDDMPCT)
        FFDREC.FFDDMPCT = FF0MW02.FF0MWUQT[FF0MWIX1];
        FF0MW02.FF0MWSQT[FF0MWIX1] = FF0MW02.FF0MWUQT[FF0MWIX1];
        FF0M611(); /* update dfcast.vrcmth01*/
      end
      FF0M124(); /* fetch 'n1' dfcast.vrcmth01*/
      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    end
    FF0M125(); /* close 'c1' dfcast.vrcmth01*/
  else
    FF0M612(); /* add dfcast.vrcat001 row*/
    set FFDREC empty;
    FFDREC.FFABEGMO = FFCREC.FFABEGMO;
    FFDREC.FFAENDMO = FFCREC.FFAENDMO;
    FF0MW00.FF0MWIX1 = 1; /* initialize index*/
    while (FF0MW00.FF0MWIX1 <= 12
     && SQLCA.VAGen_SQLCODE == 0)
      FFDREC.FFDDMPCT = FF0MW02.FF0MWUQT[FF0MWIX1];
      FF0MW02.FF0MWSQT[FF0MWIX1] = FF0MW02.FF0MWUQT[FF0MWIX1];
      FF0M613(); /* add dfcast.vrcmth01 row*/
      FF0MW00.FF0MWIX1 = FF0MW00.FF0MWIX1 + 1; /* increment index*/
    end
  end

end // end FF0M605

// select vrcat001
Function FF0M606()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/

  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/

  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "606"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0M606

// upd vrcat001 row
Function FF0M607()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/

  FFCREC.FFCDMIND = "U"; /* user created data indicator*/

  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3760" ("U ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF0MW00.FF0MWDRF = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "607"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "607"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0M607

// update table row
Function FF0M610()
   /* ------------------------------------------------------------*/
   /* Set record to original category data*/
   /* ------------------------------------------------------------*/

  set FF2REC empty;
  FF2REC.FF2GROUP = FF0MW01.FF2GROUP;

   /* ------------------------------------------------------------*/
   /* Obtain current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  FF2REC.FF2ALCAT = FF0MM001.FF2ALCAT; /* alternate cat code*/

  if (FF0MM001.FF0MMSEL[1] == "S") /* one year ago selected*/
    FF2REC.FF2DMIND = "1"; /* demand indicator*/
    FF0MW01.FF2DMIND = "1"; /* saved demand indicator*/
  end

  if (FF0MM001.FF0MMSEL[2] == "S") /* one year ago selected*/
    FF2REC.FF2DMIND = "2"; /* demand indicator*/
    FF0MW01.FF2DMIND = "2"; /* saved demand indicator*/
  end

  if (FF0MM001.FF0MMSEL[3] == "S") /* one year ago selected*/
    FF2REC.FF2DMIND = "U"; /* demand indicator*/
    FF0MW01.FF2DMIND = "U"; /* saved demand indicator*/
    if (FF0MW00.FF0MWCAT == "Y" /* original cat requested*/
     && FF0MM001.FF2ALCAT == " ") /* no alt cat code*/
      FF0M605(); /* update vrcmth01 with percents*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Update Cross Reference Table Row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("U ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* database updated by another user*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes made by user*/
        FFWREC.XXXMODID = "610"; /* Module identification*/
        FFWREC.XXXMSGNO = 46; /* 'database updated by another user'*/
        FF0MW00.FF0MWDRF = "Y"; /* data requested*/
        exit stack; /* Exit to display map*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    converseLib.validationFailed(47); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(01); /* error, notify progamming staff*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FFWREC.XXXMODID = "610"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0M610

// update vrcmth01
Function FF0M611()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/

  FFDREC.FF4FCTMO = FF0MW01.FF0MWMTS[FF0MWIX1]; /* move fcst month*/

  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3770" ("U ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF0MW00.FF0MWDRF = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "611"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0M611

// add vrcat001
Function FF0M612()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/

  FFCREC.FFCDMIND = "U"; /* set user created indicator*/

  FFCREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3760" ("A ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0M612

// add vrcmth01
Function FF0M613()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/

  FFDREC.YPGCD = FFWREC.YPGCD;
  FFDREC.XPCCD = FFWREC.XPCCD;
  FFDREC.FF4FCTMO = FF0MW01.FF0MWMTS[FF0MWIX1];

  FFDREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3770" ("A ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0M613

// determine data request
Function FF0M620()
   /* ------------------------------------------------------------*/
   /* If viewing alternate category and alternate category code*/
   /* changed to spaces, display original category data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FF0MW00.FF0MWCAT == "N") /* alternate category displayed*/
      if (FF0MM001.FF2ALCAT == " ") /* alt category code spaces*/
        FF0MW00.FF0MWPGN = 1; /* first season - orig cat*/
        FF0MW00.FF0MWCUR = 1; /* current season*/
        FF0MW00.FF0MWCMO = 1; /* season start month*/
        FF0MW00.FF0MWCAT = "Y"; /* orig cat requested*/
        FF0MW00.FF0MWDRF = "Y"; /* data requested*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If viewing alternate category and alternate category code*/
   /* changed to non-spaces, exit to obtain data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FF0MW00.FF0MWCAT == "N") /* alternate category displayed*/
      if (FF0MM001.FF2ALCAT != FF0MW01.FF2ALCAT) /* alt cat changed*/
        FF0MW00.FF0MWPGN = 1; /* first season - alt cat*/
        FF0MW00.FF0MWCUR = 1; /* current season*/
        FF0MW00.FF0MWCMO = 1; /* season start month*/
        FF0MW00.FF0MWDRF = "Y"; /* data requested*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If viewing original category and alternate category code*/
   /* changed to non-spaces, exit to obtain data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FF0MW00.FF0MWCAT == "Y") /* original cat data displayed*/
      if (FF0MM001.FF2ALCAT != FF0MW01.FF2ALCAT
       && FF0MM001.FF2ALCAT != " ") /* alt category code spaces*/
        FF0MW00.FF0MWPGN = 1; /* first season - orig cat*/
        FF0MW00.FF0MWCUR = 1; /* current season*/
        FF0MW00.FF0MWCMO = 1; /* season start month*/
        FF0MW00.FF0MWDRF = "Y"; /* data requested*/
        return;
      end
    end
  end


end // end FF0M620

//*** RECORD=FF0MW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// FF135 MDANGE 11/29/90
// Added FF0mwix4 - new index for master range of months
// ***********************
Record FF0MW00 type basicRecord
  10 FF0MWFMF FF0MWFMF ; 
  10 FF0MWDRF FF0MWDRF ; 
  10 FF0MWDMF FF0MWDMF ; 
  10 FF0MWBMF FF0MWBMF ; 
  10 FF0MWBMA FF0MWBMA ; 
  10 FF0MWFSF FF0MWFSF ; 
  10 FF0MWUPR FF0MWUPR ; 
  10 FF0MWNCF FF0MWNCF ; 
  10 FF0MWYRF FF0MWYRF ; 
  10 FF0MWRCT FF0MWRCT ; 
  10 FF0MWSCT FF0MWSCT ; 
  10 FF0MWCTS FF0MWCTS ; 
  10 FF0MWCMS FF0MWCMS ; 
  10 FF0MWMMS FF0MWMMS [3] ; 
  10 FF0MWCMO FF0MWCMO ; 
  10 FF0MWMXP FF0MWMXP ; 
  10 FF0MWCUR FF0MWCUR ; 
  10 FF0MWPGN FF0MWPGN ; 
  10 FF0MWCAT FF0MWCAT ; 
  10 FF0MWCWK FF0MWCWK ; 
  10 FF0MWNUM FF0MWNUM ; 
  10 FF0MWCDT FF0MWCDT ; 
    15 FF0MWYMC FF0MWYMC ; 
      20 FF0MWYRC FF0MWYRC ; 
      20 FF0MWMNC FF0MWMNC ; 
    15 FF0MWDAY FF0MWDAY ; 
  10 FF0MWDT FF0MWDT ; 
    15 FF0MWYY FF0MWYY ; 
    15 FF0MWMM FF0MWMM ; 
  10 FF0MWIX1 FF0MWIX1 ; 
  10 FF0MWIX2 FF0MWIX2 ; 
  10 FF0MWIX3 FF0MWIX3 ; 
  10 FF0MWIX4 FF0MWIX4 ; 
  10 FF0MWIX5 FF0MWIX5 ; 
  10 FF0MWIX6 FF0MWIX6 ; 
  10 FF0MWIXM FF0MWIXM ; 
  10 CACHGFL CACHGFL ; 
  10 FF0MWSCR FF0MWSCR ; 
  10 FF0MWCNT FF0MWCNT ; 
  10 FF0MWKD1 FF0MWKD1 ; 
    15 FF0MWKC1 FF0MWKC1 ; 
    15 FF0MWKM1 FF0MWKM1 ; 
  10 FF0MWKD2 FF0MWKD2 ; 
    15 FF0MWKC2 FF0MWKC2 ; 
    15 FF0MWKM2 FF0MWKM2 ; 
end // end FF0MW00

//*** RECORD=FF0MW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// Some of the fields in this record follow this format:
// FF0MWXYZ
// 
// X being one of the following codes:
//             M = FUTURE TOTAL PCT
//             N = FUTURE TOTAL QTY
//             O = NAT'L TOTAL PCT
//             P = NAT'L TOTAL QTY
//             Q = PROP TOTAL PCT
//             R = PROP TOTAL QTY
//             S = TOTAL PCT
//             T = TOTAL QTY
// 
// YZ being one of the following codes:
//             Y1 = One Year Ago
//             Y2 = Two Years Ago
// FF135 MDANGE 11/29/90
// Added FF0MWNMX - user percentage accumulator
// Added FF0MWMTS - master range of months
// ***********************
Record FF0MW01 type basicRecord
  10 FF2GROUP FF2GROUP ; 
  10 FF0MWMBM FF0MWMBM ; 
  10 FF2ALCAT FF2ALCAT ; 
  10 FF0MWACA FF0MWACA ; 
  10 FF0MWSEL FF0MWSEL [3] ; 
  10 FF2SEASN FF2SEASN [4] ; 
  10 FF0MWMNS FF0MWMNS [4] ; 
  10 FF0MWTMP FF0MWTMP [5] ; 
  10 FF0MWTOT FF0MWTOT [4] ; 
  10 FF0MWMPG FF0MWMPG [5] ; 
  10 FF0MWSTW FF0MWSTW [4] ; 
  10 FF0MWSTM FF0MWSTM [4] ; 
  10 FF0MWM11 FF0MWM11 [12] ; 
  10 FF0MWM12 FF0MWM12 [12] ; 
  10 FF0MWM13 FF0MWM13 [12] ; 
  10 FF0MWM14 FF0MWM14 [12] ; 
  10 FF0MWM21 FF0MWM21 [12] ; 
  10 FF0MWM22 FF0MWM22 [12] ; 
  10 FF0MWM23 FF0MWM23 [12] ; 
  10 FF0MWM24 FF0MWM24 [12] ; 
  10 FF0MWDDT FF0MWDDT ; 
    15 FF0MWDYY FF0MWDYY ; 
    15 FF0MWDMM FF0MWDMM ; 
  10 FF2NSEAS FF2NSEAS ; 
  10 FF0MWWNS FF0MWWNS ; 
  10 FF2DMIND FF2DMIND ; 
  10 FF0MWIND FF0MWIND ; 
  10 FF0MWNMX FF0MWNMX ; 
  10 FF0MWMTS FF0MWMTS [12] ; 
end // end FF0MW01

//*** RECORD=FF0MW02 ****
// ----------------------------------------------
// Application working storage for orig cat data.
// ----------------------------------------------
// 
// Some of the fields in this record follow this format:
// FF0MWXYZ.
// 
// X being one of the following codes:
//          A = PRE-ALLOCATED FUTURE QTY
//          B = ALLOCATED FUTURE QTY
//          C = SHIP FUTURE QTY
//          D = CANCEL FUTURE QTY
//          E = PRE-ALLOCATED NAT'L QTY
//          F = ALLOCATED NAT'L QTY
//          G = SHIP NAT'L QTY
//          H = CANCEL NAT'L QTY
//          I = PRE-ALLOCATED PROP QTY
//          J = ALLOCATED PROP QTY
//          K = SHIP PROP QTY
//          L = CANCEL PROP QTY
// 
// Y being one of the following codes:
//          1 = One Year Ago
//          2 = Two Years Ago
// 
// Z being one of the following codes:
//          1 = Season One
//          2 = Season Two
//          3 = Season Three
// 
// FF135 MDANGE 11/29/90
// Deleted fields for combined values
// Added FF0MWUQT - user created percentages
// Added FF0MWsQT - user created percentages, saved from table
// ***********************
Record FF0MW02 type basicRecord
  10 XPCCD XPCCD ; 
  10 FF0MWSN1 FF0MWSN1 ; 
    15 FF0MWMS1 FF0MWMS1 [12] ; 
      20 FF0MWA11 FF0MWA11 ; 
      20 FF0MWB11 FF0MWB11 ; 
      20 FF0MWC11 FF0MWC11 ; 
      20 FF0MWD11 FF0MWD11 ; 
      20 FF0MWE11 FF0MWE11 ; 
      20 FF0MWF11 FF0MWF11 ; 
      20 FF0MWG11 FF0MWG11 ; 
      20 FF0MWH11 FF0MWH11 ; 
      20 FF0MWI11 FF0MWI11 ; 
      20 FF0MWJ11 FF0MWJ11 ; 
      20 FF0MWK11 FF0MWK11 ; 
      20 FF0MWL11 FF0MWL11 ; 
      20 FF0MWA21 FF0MWA21 ; 
      20 FF0MWB21 FF0MWB21 ; 
      20 FF0MWC21 FF0MWC21 ; 
      20 FF0MWD21 FF0MWD21 ; 
      20 FF0MWE21 FF0MWE21 ; 
      20 FF0MWF21 FF0MWF21 ; 
      20 FF0MWG21 FF0MWG21 ; 
      20 FF0MWH21 FF0MWH21 ; 
      20 FF0MWI21 FF0MWI21 ; 
      20 FF0MWJ21 FF0MWJ21 ; 
      20 FF0MWK21 FF0MWK21 ; 
      20 FF0MWL21 FF0MWL21 ; 
  10 * char(1) ; 
  10 FF0MWSN2 FF0MWSN2 ; 
    15 FF0MWMS2 FF0MWMS2 [12] ; 
      20 FF0MWA12 FF0MWA12 ; 
      20 FF0MWB12 FF0MWB12 ; 
      20 FF0MWC12 FF0MWC12 ; 
      20 FF0MWD12 FF0MWD12 ; 
      20 FF0MWE12 FF0MWE12 ; 
      20 FF0MWF12 FF0MWF12 ; 
      20 FF0MWG12 FF0MWG12 ; 
      20 FF0MWH12 FF0MWH12 ; 
      20 FF0MWI12 FF0MWI12 ; 
      20 FF0MWJ12 FF0MWJ12 ; 
      20 FF0MWK12 FF0MWK12 ; 
      20 FF0MWL12 FF0MWL12 ; 
      20 FF0MWA22 FF0MWA22 ; 
      20 FF0MWB22 FF0MWB22 ; 
      20 FF0MWC22 FF0MWC22 ; 
      20 FF0MWD22 FF0MWD22 ; 
      20 FF0MWE22 FF0MWE22 ; 
      20 FF0MWF22 FF0MWF22 ; 
      20 FF0MWG22 FF0MWG22 ; 
      20 FF0MWH22 FF0MWH22 ; 
      20 FF0MWI22 FF0MWI22 ; 
      20 FF0MWJ22 FF0MWJ22 ; 
      20 FF0MWK22 FF0MWK22 ; 
      20 FF0MWL22 FF0MWL22 ; 
  10 * char(1) ; 
  10 FF0MWSN3 FF0MWSN3 ; 
    15 FF0MWMS3 FF0MWMS3 [12] ; 
      20 FF0MWA13 FF0MWA13 ; 
      20 FF0MWB13 FF0MWB13 ; 
      20 FF0MWC13 FF0MWC13 ; 
      20 FF0MWD13 FF0MWD13 ; 
      20 FF0MWE13 FF0MWE13 ; 
      20 FF0MWF13 FF0MWF13 ; 
      20 FF0MWG13 FF0MWG13 ; 
      20 FF0MWH13 FF0MWH13 ; 
      20 FF0MWI13 FF0MWI13 ; 
      20 FF0MWJ13 FF0MWJ13 ; 
      20 FF0MWK13 FF0MWK13 ; 
      20 FF0MWL13 FF0MWL13 ; 
      20 FF0MWA23 FF0MWA23 ; 
      20 FF0MWB23 FF0MWB23 ; 
      20 FF0MWC23 FF0MWC23 ; 
      20 FF0MWD23 FF0MWD23 ; 
      20 FF0MWE23 FF0MWE23 ; 
      20 FF0MWF23 FF0MWF23 ; 
      20 FF0MWG23 FF0MWG23 ; 
      20 FF0MWH23 FF0MWH23 ; 
      20 FF0MWI23 FF0MWI23 ; 
      20 FF0MWJ23 FF0MWJ23 ; 
      20 FF0MWK23 FF0MWK23 ; 
      20 FF0MWL23 FF0MWL23 ; 
  10 FF0MWSN4 FF0MWSN4 ; 
    15 FF0MWMS4 FF0MWMS4 [12] ; 
      20 FF0MWA14 FF0MWA14 ; 
      20 FF0MWB14 FF0MWB14 ; 
      20 FF0MWC14 FF0MWC14 ; 
      20 FF0MWD14 FF0MWD14 ; 
      20 FF0MWE14 FF0MWE14 ; 
      20 FF0MWF14 FF0MWF14 ; 
      20 FF0MWG14 FF0MWG14 ; 
      20 FF0MWH14 FF0MWH14 ; 
      20 FF0MWI14 FF0MWI14 ; 
      20 FF0MWJ14 FF0MWJ14 ; 
      20 FF0MWK14 FF0MWK14 ; 
      20 FF0MWL14 FF0MWL14 ; 
      20 FF0MWA24 FF0MWA24 ; 
      20 FF0MWB24 FF0MWB24 ; 
      20 FF0MWC24 FF0MWC24 ; 
      20 FF0MWD24 FF0MWD24 ; 
      20 FF0MWE24 FF0MWE24 ; 
      20 FF0MWF24 FF0MWF24 ; 
      20 FF0MWG24 FF0MWG24 ; 
      20 FF0MWH24 FF0MWH24 ; 
      20 FF0MWI24 FF0MWI24 ; 
      20 FF0MWJ24 FF0MWJ24 ; 
      20 FF0MWK24 FF0MWK24 ; 
      20 FF0MWL24 FF0MWL24 ; 
  10 * char(1) ; 
  10 FF0MWFP1 FF0MWFP1 [52] ; 
  10 FF0MWFQ1 FF0MWFQ1 [52] ; 
  10 FF0MWNP1 FF0MWNP1 [52] ; 
  10 FF0MWNQ1 FF0MWNQ1 [52] ; 
  10 FF0MWPP1 FF0MWPP1 [52] ; 
  10 FF0MWPQ1 FF0MWPQ1 [52] ; 
  10 FF0MWTP1 FF0MWTP1 [52] ; 
  10 FF0MWTQ1 FF0MWTQ1 [52] ; 
  10 * char(1) ; 
  10 FF0MWFP2 FF0MWFP2 [52] ; 
  10 FF0MWFQ2 FF0MWFQ2 [52] ; 
  10 FF0MWNP2 FF0MWNP2 [52] ; 
  10 FF0MWNQ2 FF0MWNQ2 [52] ; 
  10 FF0MWPP2 FF0MWPP2 [52] ; 
  10 FF0MWPQ2 FF0MWPQ2 [52] ; 
  10 FF0MWTP2 FF0MWTP2 [52] ; 
  10 FF0MWTQ2 FF0MWTQ2 [52] ; 
  10 FF0MWUQT FF0MWUQT [12] ; 
  10 FF0MWSQT FF0MWSQT [12] ; 
end // end FF0MW02

//*** RECORD=FF0MW03 ****
// ---------------------------------------------
// Application working storage for alt cat data.
// ---------------------------------------------
// 
// Some of the fields in this record follow this format:
// FF0MWXYZ.
// 
// X being one of the following codes:
//          A = PRE-ALLOCATED FUTURE QTY
//          B = ALLOCATED FUTURE QTY
//          C = SHIP FUTURE QTY
//          D = CANCEL FUTURE QTY
//          E = PRE-ALLOCATED NAT'L QTY
//          F = ALLOCATED NAT'L QTY
//          G = SHIP NAT'L QTY
//          H = CANCEL NAT'L QTY
//          I = PRE-ALLOCATED PROP QTY
//          J = ALLOCATED PROP QTY
//          K = SHIP PROP QTY
//          L = CANCEL PROP QTY
// 
// Y being one of the following codes:
//          1 = One Year Ago
//          2 = Two Years Ago
// 
// Z being one of the following codes:
//          1 = Season One
//          2 = Season Two
//          3 = Season Three
// FF135 MDANGE 11/29/90
// Deleted combined year fields
// Added FF0MWAQT - user created percentages - alternate cat
// ***********************
Record FF0MW03 type basicRecord
  10 XPCCD XPCCD ; 
  10 FF0MWSN1 FF0MWSN1 ; 
    15 FF0MWMS1 FF0MWMS1 [12] ; 
      20 FF0MWA11 FF0MWA11 ; 
      20 FF0MWB11 FF0MWB11 ; 
      20 FF0MWC11 FF0MWC11 ; 
      20 FF0MWD11 FF0MWD11 ; 
      20 FF0MWE11 FF0MWE11 ; 
      20 FF0MWF11 FF0MWF11 ; 
      20 FF0MWG11 FF0MWG11 ; 
      20 FF0MWH11 FF0MWH11 ; 
      20 FF0MWI11 FF0MWI11 ; 
      20 FF0MWJ11 FF0MWJ11 ; 
      20 FF0MWK11 FF0MWK11 ; 
      20 FF0MWL11 FF0MWL11 ; 
      20 FF0MWA21 FF0MWA21 ; 
      20 FF0MWB21 FF0MWB21 ; 
      20 FF0MWC21 FF0MWC21 ; 
      20 FF0MWD21 FF0MWD21 ; 
      20 FF0MWE21 FF0MWE21 ; 
      20 FF0MWF21 FF0MWF21 ; 
      20 FF0MWG21 FF0MWG21 ; 
      20 FF0MWH21 FF0MWH21 ; 
      20 FF0MWI21 FF0MWI21 ; 
      20 FF0MWJ21 FF0MWJ21 ; 
      20 FF0MWK21 FF0MWK21 ; 
      20 FF0MWL21 FF0MWL21 ; 
  10 * char(1) ; 
  10 FF0MWSN2 FF0MWSN2 ; 
    15 FF0MWMS2 FF0MWMS2 [12] ; 
      20 FF0MWA12 FF0MWA12 ; 
      20 FF0MWB12 FF0MWB12 ; 
      20 FF0MWC12 FF0MWC12 ; 
      20 FF0MWD12 FF0MWD12 ; 
      20 FF0MWE12 FF0MWE12 ; 
      20 FF0MWF12 FF0MWF12 ; 
      20 FF0MWG12 FF0MWG12 ; 
      20 FF0MWH12 FF0MWH12 ; 
      20 FF0MWI12 FF0MWI12 ; 
      20 FF0MWJ12 FF0MWJ12 ; 
      20 FF0MWK12 FF0MWK12 ; 
      20 FF0MWL12 FF0MWL12 ; 
      20 FF0MWA22 FF0MWA22 ; 
      20 FF0MWB22 FF0MWB22 ; 
      20 FF0MWC22 FF0MWC22 ; 
      20 FF0MWD22 FF0MWD22 ; 
      20 FF0MWE22 FF0MWE22 ; 
      20 FF0MWF22 FF0MWF22 ; 
      20 FF0MWG22 FF0MWG22 ; 
      20 FF0MWH22 FF0MWH22 ; 
      20 FF0MWI22 FF0MWI22 ; 
      20 FF0MWJ22 FF0MWJ22 ; 
      20 FF0MWK22 FF0MWK22 ; 
      20 FF0MWL22 FF0MWL22 ; 
  10 * char(1) ; 
  10 FF0MWSN3 FF0MWSN3 ; 
    15 FF0MWMS3 FF0MWMS3 [12] ; 
      20 FF0MWA13 FF0MWA13 ; 
      20 FF0MWB13 FF0MWB13 ; 
      20 FF0MWC13 FF0MWC13 ; 
      20 FF0MWD13 FF0MWD13 ; 
      20 FF0MWE13 FF0MWE13 ; 
      20 FF0MWF13 FF0MWF13 ; 
      20 FF0MWG13 FF0MWG13 ; 
      20 FF0MWH13 FF0MWH13 ; 
      20 FF0MWI13 FF0MWI13 ; 
      20 FF0MWJ13 FF0MWJ13 ; 
      20 FF0MWK13 FF0MWK13 ; 
      20 FF0MWL13 FF0MWL13 ; 
      20 FF0MWA23 FF0MWA23 ; 
      20 FF0MWB23 FF0MWB23 ; 
      20 FF0MWC23 FF0MWC23 ; 
      20 FF0MWD23 FF0MWD23 ; 
      20 FF0MWE23 FF0MWE23 ; 
      20 FF0MWF23 FF0MWF23 ; 
      20 FF0MWG23 FF0MWG23 ; 
      20 FF0MWH23 FF0MWH23 ; 
      20 FF0MWI23 FF0MWI23 ; 
      20 FF0MWJ23 FF0MWJ23 ; 
      20 FF0MWK23 FF0MWK23 ; 
      20 FF0MWL23 FF0MWL23 ; 
  10 FF0MWSN4 FF0MWSN4 ; 
    15 FF0MWMS4 FF0MWMS4 [12] ; 
      20 FF0MWA14 FF0MWA14 ; 
      20 FF0MWB14 FF0MWB14 ; 
      20 FF0MWC14 FF0MWC14 ; 
      20 FF0MWD14 FF0MWD14 ; 
      20 FF0MWE14 FF0MWE14 ; 
      20 FF0MWF14 FF0MWF14 ; 
      20 FF0MWG14 FF0MWG14 ; 
      20 FF0MWH14 FF0MWH14 ; 
      20 FF0MWI14 FF0MWI14 ; 
      20 FF0MWJ14 FF0MWJ14 ; 
      20 FF0MWK14 FF0MWK14 ; 
      20 FF0MWL14 FF0MWL14 ; 
      20 FF0MWA24 FF0MWA24 ; 
      20 FF0MWB24 FF0MWB24 ; 
      20 FF0MWC24 FF0MWC24 ; 
      20 FF0MWD24 FF0MWD24 ; 
      20 FF0MWE24 FF0MWE24 ; 
      20 FF0MWF24 FF0MWF24 ; 
      20 FF0MWG24 FF0MWG24 ; 
      20 FF0MWH24 FF0MWH24 ; 
      20 FF0MWI24 FF0MWI24 ; 
      20 FF0MWJ24 FF0MWJ24 ; 
      20 FF0MWK24 FF0MWK24 ; 
      20 FF0MWL24 FF0MWL24 ; 
  10 * char(1) ; 
  10 FF0MWFP1 FF0MWFP1 [52] ; 
  10 FF0MWFQ1 FF0MWFQ1 [52] ; 
  10 FF0MWNP1 FF0MWNP1 [52] ; 
  10 FF0MWNQ1 FF0MWNQ1 [52] ; 
  10 FF0MWPP1 FF0MWPP1 [52] ; 
  10 FF0MWPQ1 FF0MWPQ1 [52] ; 
  10 FF0MWTP1 FF0MWTP1 [52] ; 
  10 FF0MWTQ1 FF0MWTQ1 [52] ; 
  10 * char(1) ; 
  10 FF0MWFP2 FF0MWFP2 [52] ; 
  10 FF0MWFQ2 FF0MWFQ2 [52] ; 
  10 FF0MWNP2 FF0MWNP2 [52] ; 
  10 FF0MWNQ2 FF0MWNQ2 [52] ; 
  10 FF0MWPP2 FF0MWPP2 [52] ; 
  10 FF0MWPQ2 FF0MWPQ2 [52] ; 
  10 FF0MWTP2 FF0MWTP2 [52] ; 
  10 FF0MWTQ2 FF0MWTQ2 [52] ; 
  10 FF0MWAQT FF0MWAQT [12] ; 
end // end FF0MW03

// pre-alloc future - yr 1
DataItem FF0MWA11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 1
DataItem FF0MWA12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 1
DataItem FF0MWA13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 1
DataItem FF0MWA14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0MWA21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0MWA22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0MWA23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0MWA24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alt cat abrv
DataItem FF0MWACA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user created %'s alt category
DataItem FF0MWAQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0MWB11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0MWB12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0MWB13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0MWB14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0MWB21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0MWB22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0MWB23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0MWB24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin month available flag
DataItem FF0MWBMA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin month found flag
DataItem FF0MWBMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship future - yr 1
DataItem FF0MWC11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 1
DataItem FF0MWC12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 1
DataItem FF0MWC13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 1
DataItem FF0MWC14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0MWC21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0MWC22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0MWC23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0MWC24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// original cat viewed
DataItem FF0MWCAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// converted beg date
DataItem FF0MWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current month in season
DataItem FF0MWCMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculated months in season
DataItem FF0MWCMS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month counter
DataItem FF0MWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season counter
DataItem FF0MWCTS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current season number 1 - 4
DataItem FF0MWCUR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculations work area
DataItem FF0MWCWK bin(18,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0MWD11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0MWD12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0MWD13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0MWD14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0MWD21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0MWD22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0MWD23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0MWD24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beg date day
DataItem FF0MWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display date
DataItem FF0MWDDT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified flag
DataItem FF0MWDMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display month
DataItem FF0MWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data request flag
DataItem FF0MWDRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg date ccyymm work area
DataItem FF0MWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display year
DataItem FF0MWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0MWE11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0MWE12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0MWE13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0MWE14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0MWE21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0MWE22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0MWE23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0MWE24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0MWF11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0MWF12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0MWF13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0MWF14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0MWF21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0MWF22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0MWF23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0MWF24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format Map flag
DataItem FF0MWFMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// future percent one yr
DataItem FF0MWFP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future percent two yrs ago
DataItem FF0MWFP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future quantity one yr
DataItem FF0MWFQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future quantity two yrs ago
DataItem FF0MWFQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first selection flag
DataItem FF0MWFSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0MWG11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0MWG12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0MWG13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0MWG14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0MWG21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0MWG22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0MWG23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0MWG24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0MWH11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0MWH12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0MWH13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0MWH14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0MWH21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0MWH22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0MWH23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0MWH24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0MWI11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0MWI12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0MWI13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0MWI14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0MWI21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0MWI22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0MWI23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0MWI24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_DMD_YR_IND from screen
DataItem FF0MWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index one for stored fields
DataItem FF0MWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FF0MWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index three for stored fields
DataItem FF0MWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index four for master mo range
DataItem FF0MWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index four for master mo range
DataItem FF0MWIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index four for master mo range
DataItem FF0MWIX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem FF0MWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0MWJ11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0MWJ12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0MWJ13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0MWJ14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0MWJ21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0MWJ22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0MWJ23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0MWJ24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0MWK11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0MWK12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0MWK13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0MWK14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0MWK21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0MWK22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0MWK23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0MWK24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyy 1
DataItem FF0MWKC1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyy 2
DataItem FF0MWKC2 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 1
DataItem FF0MWKD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 2
DataItem FF0MWKD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm 1
DataItem FF0MWKM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm 2
DataItem FF0MWKM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0MWL11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0MWL12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0MWL13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0MWL14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0MWL21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0MWL22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0MWL23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0MWL24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month - one yr ago - seas 1
DataItem FF0MWM11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - one yr ago - seas 2
DataItem FF0MWM12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - one yr ago - seas 3
DataItem FF0MWM13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - one yr ago - seas 4
DataItem FF0MWM14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 1
DataItem FF0MWM21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 2
DataItem FF0MWM22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 3
DataItem FF0MWM23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 4
DataItem FF0MWM24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// map season begin month
DataItem FF0MWMBM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beg date month
DataItem FF0MWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Maximum months in season
DataItem FF0MWMMS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion month
DataItem FF0MWMNC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// months in season
DataItem FF0MWMNS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// months on page
DataItem FF0MWMPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// months in season one
DataItem FF0MWMS1 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// months in season two
DataItem FF0MWMS2 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// months in season three
DataItem FF0MWMS3 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// months in season four
DataItem FF0MWMS4 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// master range of months
DataItem FF0MWMTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max pages (2 - 5)
DataItem FF0MWMXP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New category flag
DataItem FF0MWNCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user percentage accumulator
DataItem FF0MWNMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future % - one yr
DataItem FF0MWNP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future % -  two yrs ago
DataItem FF0MWNP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future qty one yr
DataItem FF0MWNQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future qty two yrs ago
DataItem FF0MWNQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work number
DataItem FF0MWNUM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page nbr
DataItem FF0MWPGN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop % - one yr
DataItem FF0MWPP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop % -  two yrs ago
DataItem FF0MWPP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop qty one yr
DataItem FF0MWPQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop qty two yrs ago
DataItem FF0MWPQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row count
DataItem FF0MWRCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved cat request flag
DataItem FF0MWSCR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection cnt
DataItem FF0MWSCT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection field
DataItem FF0MWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr one
DataItem FF0MWSN1 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr two
DataItem FF0MWSN2 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr three
DataItem FF0MWSN3 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr four
DataItem FF0MWSN4 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user created %'s sav from tab
DataItem FF0MWSQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season start map
DataItem FF0MWSTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season start ws
DataItem FF0MWSTW num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total on page ind (y or n)
DataItem FF0MWTMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total position on page
DataItem FF0MWTOT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total % - one year
DataItem FF0MWTP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total % - two year
DataItem FF0MWTP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty - one year
DataItem FF0MWTQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty - two year
DataItem FF0MWTQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update requested flag
DataItem FF0MWUPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user created percents
DataItem FF0MWUQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work nbr of seasons
DataItem FF0MWWNS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion yymm
DataItem FF0MWYMC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion year
DataItem FF0MWYRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year flag
DataItem FF0MWYRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg date year
DataItem FF0MWYY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

