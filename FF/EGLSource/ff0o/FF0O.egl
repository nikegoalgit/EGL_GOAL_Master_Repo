package ff0o;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import fh.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0O ****
// The user can enter this application via the S.R. Menu (ff0a)
// , the Set closeout Forecast screen (FF0n), or Fast Path.
// 
// This application displays current demand, b-grade forecast,
// and inventory qtys for a given category/type group so that
// user can view or revise the b-grade forecast.
// 
// The user may scroll left and right to view all the short
// range forecast months.
// 
// The user may PF13 to application FF0n, PF14 to have
// displayed b-grade forecast qtys saved, or exit to any
// allowed application via Fast Path.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/23/89  RGILLI  New application.
//  FF#43   06/18/90  LDELUH  Change sales prior to current
//                            to be actual shipped qty.
//  FF129   07/26/90  CROSS   Add totals line to map
//  FF#FIX  07/27/90  SFORD   Fixed calc. of buy month
//  FF#102  10/31/90  SFORD   Re-calc B-Grade qtys prior to
//                            display.
//  FF#210   1/17/91  MDANGE  Add PF15 to sum the bgrade fcst
//                            qty for all cats in the line to
//                            bgrade fcst qty on VMLINE01.
//  FF#222   4/10/91  MDANGE  Change to calculate production
//                            forecast quantity in all months
//                            LE buy month unless production
//                            due quantity exists.
//                            Change recalculation of balance
//                            to ship in current month.  It
//                            should not add balance to ship of
//                            prior 2 months just alloc & preal
//                            Change to not calculate current
//                            forecast when a master forecast
//                            already exits.
//                            Add PF16 key to recalculate the
//                            current sales forecasts for all
//                            months.
//  FF#???   4/30/91  MDANGE  Change to include one more season
//                            of months for processing.
//  FF       2/04/92  MDANGE  Change to not calculate a bgrade
//                            production forecast in the
//                            current month.
//  FF#278  02/17/92  LDELUH  Fix beg month edits to not error
//                            whenever user enters it.
//  FF#279  02/17/92  LDELUH  Do not subtotal & grand total
//                            beg inv, supply, & end inv.
//  FF1111  05/19/92  MDANGE  Fix for varying seasons.
//  FF402   05/04/93  JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
//  FF-432  10/15/93  KGRAHA  Removed carryover from current
//                            month for viewing on screen and
//                            put it back for database update.
//          12/12/96  CWHIT1  add yr 2000 code changes
// FF1614   02/24/98  BMUSTI  Checked y2k compliancy while
//                            calculating  buy month.
// *********************
Program FF0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0OW00 FF0OW00; // record
  FF0OW01 FF0OW01; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF5REC FF5REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FF9REC FF9REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FH3REC FH3REC; // record
  FH6REC FH6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use FF0OM.FF0OM001,  // forms
      FF0OM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FF0OM001 initial; /* M001 input/output*/
    set FF0OW00 empty; /* Working storage*/
    set FF0OW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0OW00.FF0OWCPG = 1; /* current page*/
    FF0OW00.FF0OWSWR = "N"; /* Request for data switch*/
    FF0OW00.FF0OWSWF = "Y"; /* format screen data switch*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    if (FFWREC.XPCCD > " ")
      FF0OW00.FF0OWSWR = "Y"; /* set data request flag*/
    end

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0O.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPLCD = "  ";
    FFWREC.XPLABRV = "  ";
    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0O001; /* Converse the main process*/

    FF0O001: FF0O001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0O001; /* Converse the main process*/


  end // end main
end // end FF0O

// Inquire/maintain a table row
Function FF0O001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0O100(); /* Obtain the data to display*/

  FF0O200(); /* Format and display the map*/

  FF0O300(); /* Check attention identifier*/

  FF0O400(); /* Reset fields to normal intensity*/

  FF0O500(); /* Verify the entered data*/

  FF0O600(); /* Process valid input request*/


end // end FF0O001

// Obtain the data to display
Function FF0O100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0OW00.FF0OWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* set map display/database storage records*/
   /* ------------------------------------------------------------*/

  set FF0OW01 empty; /* init w/s display record*/

   /* ------------------------------------------------------------*/
   /* select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/

  FF0O110(); /* select dfcast.vffxrf01 row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* dfcast.vffxrf01 row not found*/

    set FF0OM001 initial;

    FF0OM001.XPCCD = FFWREC.XPCCD;
    FF0OM001.XPCABRV = FFWREC.XPCABRV;
    FF0OM001.YPGCD = FFWREC.YPGCD;
    FF0OM001.YPGABRV = FFWREC.YPGABRV;

    FFWREC.XXXMODID = "100"; /* module id*/
    converseLib.validationFailed(187); /* msg requested data not found*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* obtain the*/
   /* current year/month using routine xx0xs01.  determine the*/
   /* buy month date*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf14 /* leave user on page he was viewing*/
   || converseVar.eventKey not pf16)
    FF0OW00.FF0OWCPG = 1; /* init current page number*/
  end

  XX0XS01(); /* get current date*/
  FF0OS05(); /* get data DFCAST.VFFCTL01*/
  FF0OS07(); /* calc curr bus & buy dates*/

   /* ------------------------------------------------------------*/
   /* Determine the begin month. Either the begin month from*/
   /* screen or default to current month.*/
   /* ------------------------------------------------------------*/

  if (FF0OM001.FF0OMBMO == 0000) /* beg month on screen not entered*/
    FF0OW00.FF0OWFCT = FF0OW01.FF0OWCDT; /* move current to beg*/
    FF0OW01.FF0OWSDT = FF0OW01.FF0OWCDT;
                                   /* move current to screen date*/
  else
    FF0OW01.FF0OWSYM = FF0OM001.FF0OMBMO; /* move screen YYMM to ws*/
    FF0OW01.FF0OWSCC = FF0OW01.FF0OWCCC;
                                   /* move century from curr date*/
    FF0OW00.FF0OWFCT = FF0OW01.FF0OWSDT; /* move screen to beg*/
  end

  FF0O120(); /* determine season lengths*/

   /* ------------------------------------------------------------*/
   /* determine/load month range starting with ff2seasn(1)*/
   /* begin month, page nbr, and month location on page.*/
   /* ------------------------------------------------------------*/

  FF0O130(); /* determine/load month range*/

   /* ------------------------------------------------------------*/
   /* obtain the summarized qtys from the dfhist.vfhcat01 for*/
   /* each fcst month. (include 2 months prior to the season*/
   /* begin month for display and calculations)*/
   /* ------------------------------------------------------------*/

  FF0OW01.XLCCD = "10"; /* active life cycle code*/
  FF0O140(); /* select dfhist.vfhcat01 row*/
  FF0O145(); /* select dfhist.vctshp01 row*/
  FF0OW01.XLCCD = "20"; /* closeout life cycle code*/
  FF0O140(); /* select dfhist.vfhcat01 row*/
  FF0O145(); /* select dfhist.vctshp01 row*/

   /* ------------------------------------------------------------*/
   /* obtain the b-grade qtys from the dfcast.vmcat001 for*/
   /* each fcst month. (include the prior month of the season*/
   /* begin month for display only)*/
   /* ------------------------------------------------------------*/

  FF0O150(); /* select set on dfcast.vmcat001*/

  FF0O160(); /* fetch first dfcast.vmcat001 row*/

  while (SQLCA.VAGen_SQLCODE == 0)

    FF0OW00.FF0OWLIX = 1; /* load index*/

    while (FF0OW00.FF0OWLIX <= FF0OW00.FF0OWMAX)

      if (FF7REC.FF4FCTMO == FF0OW01.FF0OWBDT[FF0OWLIX])

        if (FF0OW01.FF0OWBDT[FF0OWLIX] == FF0OW00.FF0OWPDT) /* prev mo*/
          FF0OW00.FF0OWCOV = FF7REC.FF5BGFCT; /* carryover*/
        end

         /* load dfcast.vmcat01 qtys in ff0ow01*/


        if (FF0OW01.FF0OWBDT[FF0OWLIX] >= FF0OW01.FF0OWCDT) /* ===> curr mo*/

          if (FF0OW01.FF0OWBDT[FF0OWLIX] == FF0OW01.FF0OWCDT) /* curr mo*/
            FF7REC.FF5BGFCT = FF7REC.FF5BGFCT - FF0OW00.FF0OWCOV; /* caov*/
          end

          if (converseVar.eventKey is pf16
           && FF0OW01.FF0OWBDT[FF0OWLIX] > FF0OW01.FF0OWBYD)
                                   /* gt buy month*/
            FF0O170(); /* ====> calc. the b-grade curr sls*/
                                   /* forcast*/
            FF0OW01.FF0OWUCS[FF0OWLIX] = FF0OW01.FF5BGFCT; /* cur sls*/
            FF0OW01.FF0OWOCS[FF0OWLIX] = FF0OW01.FF5BGFCT; /* cur sls*/
            FF0OW01.FF0OWUMS[FF0OWLIX] = FF7REC.FF5BGFCT; /* mst sls*/
          else
            FF0OW01.FF0OWUCS[FF0OWLIX] = FF7REC.FF5BGFCT; /* cur sls*/
            FF0OW01.FF0OWOCS[FF0OWLIX] = FF7REC.FF5BGFCT; /* cur sls*/
            FF0OW01.FF0OWUMS[FF0OWLIX] = FF7REC.FF5BGFCT; /* mst sls*/
          end
        else
          FF0OW01.FF0OWUCS[FF0OWLIX] = 0; /* cur sls*/
          FF0OW01.FF0OWOCS[FF0OWLIX] = 0; /* cur sls*/
          FF0OW01.FF0OWUMS[FF0OWLIX] = 0; /* mst sls*/
        end

        FF0OW01.FF7BGPCT[FF0OWLIX] = FF7REC.FF7BGPCT; /* bg pct*/
        FF0OW01.FF7BGINV[FF0OWLIX] = FF7REC.FF7BGINV; /* bg binv*/
        FF0OW01.FF0OWUBI[FF0OWLIX] = FF7REC.FF7BGINV;
        FF0OW01.FF0OWUBD[FF0OWLIX] = FF7REC.FF7BGPDU; /* bg pdue*/
        FF0OW01.FF6PRFCT[FF0OWLIX] = FF7REC.FF6PRFCT; /* prod fcst*/
        FF0OW01.FG4ONORD[FF0OWLIX] = FF7REC.FG4ONORD; /* on order*/
        FF0OW01.FF7CBYFL[FF0OWLIX] = FF7REC.FF7CBYFL; /* buy flag*/
        FF0OW01.ZZZCHGCT[FF0OWLIX] = FF7REC.ZZZCHGCT;

      end

      FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1;

    end

    FF0O160(); /* fetch next dfcast.vmcat001 row*/

  end

  FF0O180(); /* close dfcast.vmcat001 set*/

   /* ------------------------------------------------------------*/
   /* calculate the additional qtys for each forecast month*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWLIX = 1; /* load index*/

  while (FF0OW00.FF0OWLIX <= FF0OW00.FF0OWMAX)

     /* b-grade product fcst:*/

    if (FF0OW00.FF0OWLIX > 2)
      if (FF0OW01.FF0OWBDT[FF0OWLIX] > FF0OW01.FF0OWCDT)
        if (FF0OW01.FF0OWUBD[FF0OWLIX] != 0) /* bg pdue exists*/
          /* NEXT SENTENCE*/
        else
          FF0OW00.FF0OWMIX = FF0OW00.FF0OWLIX - 2; /* Month index*/
          if (FF0OW01.FF7BGPCT[FF0OWMIX] > 0)
            FF0OW00.FF0OWNM4 = mathLib.round(FF0OW01.FF7BGPCT[FF0OWMIX] / 100, -mathLib.decimals(FF0OW00.FF0OWNM4));
            if (FF0OW01.FF7CBYFL[FF0OWMIX] == "Y")
              FF0OW00.FF0OWNM2 = FF0OW01.FG4ONORD[FF0OWMIX];
              FF0OW00.FF0OWNM3 = mathLib.round(FF0OW00.FF0OWNM2 * FF0OW00.FF0OWNM4, -mathLib.decimals(FF0OW00.FF0OWNM3));
              FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM3 +               FF0OW01.FH2SHP[FF0OWMIX];
              FF0OW01.FF0OWUBF[FF0OWLIX] = FF0OW00.FF0OWNM3;
            else
              FF0OW00.FF0OWNM2 = FF0OW01.FF6PRFCT[FF0OWMIX];
              FF0OW00.FF0OWNM3 = mathLib.round(FF0OW00.FF0OWNM2 * FF0OW00.FF0OWNM4, -mathLib.decimals(FF0OW00.FF0OWNM3));
              FF0OW01.FF0OWUBF[FF0OWLIX] = FF0OW00.FF0OWNM3;
            end
            if (FF0OW01.FF0OWUBF[FF0OWLIX] < 0)
              FF0OW01.FF0OWUBF[FF0OWLIX] = 0;
            end
          else
            FF0OW01.FF0OWUBF[FF0OWLIX] = 0;
          end
        end
      end
    end

     /* supply :  begin inv + bgd due + bdg fcst*/

    FF0OW00.FF0OWNM1 = FF0OW01.FF7BGINV[FF0OWLIX];
    FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUBD[FF0OWLIX];
    FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;
    FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUBF[FF0OWLIX];
    FF0OW01.FF0OWUSU[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM3;

     /* balance to ship : cur sls fcst - invoiced*/
     /* note: if current begin date add carryover*/
           /* (prealloc + alloc) from 2 months prior*/

    if (FF0OW01.FF0OWBDT[FF0OWLIX] == FF0OW01.FF0OWCDT
     && FF0OW00.FF0OWLIX > 2)
      FF0OW00.FF0OWMIX = FF0OW00.FF0OWLIX - 1; /* month index*/
      FF0OW00.FF0OWNM1 = FF0OW01.FH1PAQTY[FF0OWMIX];
      FF0OW00.FF0OWNM2 = FF0OW01.FH1ALQTY[FF0OWMIX];
      FF0OW00.FF0OWMIX = FF0OW00.FF0OWLIX - 2; /* month index*/
      FF0OW00.FF0OWNM1 = FF0OW00.FF0OWNM1 + FF0OW01.FH1PAQTY[FF0OWMIX];
      FF0OW00.FF0OWNM2 = FF0OW00.FF0OWNM2 + FF0OW01.FH1ALQTY[FF0OWMIX];
      FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2; /* carryover*/
      FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM3 + FF0OW01.FF0OWUCS[FF0OWLIX];
      FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM3 - FF0OW01.FH2SHP[FF0OWLIX];
      FF0OW01.FF0OWUBS[FF0OWLIX] = FF0OW00.FF0OWNM3;
    else
      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUCS[FF0OWLIX];
      FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM1 - FF0OW01.FH2SHP[FF0OWLIX];
      FF0OW01.FF0OWUBS[FF0OWLIX] = FF0OW00.FF0OWNM3;
    end

     /* end inventory :   supply - bal to ship*/

    FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUSU[FF0OWLIX];
    FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUBS[FF0OWLIX];
    FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM1 - FF0OW00.FF0OWNM2;
    FF0OW01.FF0OWUEI[FF0OWLIX] = FF0OW00.FF0OWNM3;

     /* beg inventory after current month:   end inventory of prior*/

    if (FF0OW01.FF0OWBDT[FF0OWLIX] >= FF0OW01.FF0OWCDT)
      FF0OW00.FF0OWMIX = FF0OW00.FF0OWLIX + 1;
      if (FF0OW00.FF0OWMIX <= FF0OW00.FF0OWMAX)
        FF0OW01.FF7BGINV[FF0OWMIX] = FF0OW01.FF0OWUEI[FF0OWLIX];
      end
    end

    FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1;

  end

   /* ------------------------------------------------------------*/
   /* load map storage record - ff0ow01*/
   /* ------------------------------------------------------------*/

  FF0O190(); /* load database storage record*/

   /* ------------------------------------------------------------*/
   /* if no system errors, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    FF0OW00.FF0OWSWR = "N"; /* init Req for data switch*/
  end


   /* **                                                        ***/
   /* ********************** End of FF0O100 ***********************/
end // end FF0O100

// Select set on dfcast.vffxrf01
Function FF0O110()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPCCD = FFWREC.XPCCD;
  FF2REC.YPGCD = FFWREC.YPGCD;
  FF2REC.YSMXDV = "10";

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0O110

// Determine season lengths
Function FF0O120()
   /* ------------------------------------------------------------*/
   /* determine the number of months per page,*/
   /* determine season lengths, months on each page and number of*/
   /* pages*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWMAX = 26; /* 2 years of data plus 2 prior*/
   /* ------------------------------------------------------------*/
   /* calculate how many months long each season is and store*/
   /* ------------------------------------------------------------*/

  FF0OW01.FF0OWMNS[1] = 0;
  FF0OW01.FF0OWMNS[2] = 0;
  FF0OW01.FF0OWMNS[3] = 0;
  FF0OW01.FF0OWMNS[4] = 0;
  if (FF0OW00.FF0OWEMO[1] == 0
   && FF0OW00.FF0OWEMO[2] == 0
   && FF0OW00.FF0OWEMO[3] == 0
   && FF0OW00.FF0OWEMO[4] == 0)
    FF0OW01.FF0OWMNS[1] = 6; /* default to 6 month seasons*/
    FF0OW01.FF0OWMNS[2] = 6;
    FF0OW01.FF0OWMNS[3] = 6;
    FF0OW01.FF0OWMNS[4] = 6;
    FF0OW00.FF0OWNSS = 2; /* number of seasons*/
  else

    FF0OW00.FF0OWIX4 = 0; /* index second year*/
    FF0OW00.FF0OWIX1 = 0; /* prior end month*/
    FF0OW00.FF0OWIX2 = 1; /* end month index*/
    while (FF0OW00.FF0OWIX2 <= FF0OW00.FF0OWNSS)

      if (FF0OW00.FF0OWIX1 == 0) /* first end month*/
        FF0OW00.FF0OWKD1 = FF0OW01.FF0OWSMM; /* start month*/
        FF0OW00.FF0OWKD2 = FF0OW00.FF0OWEMO[1];
        if (FF0OW00.FF0OWKM2 < FF0OW00.FF0OWKM1)
          FF0OW00.FF0OWKM2 = FF0OW00.FF0OWKM2 + 12; /* add 12 months*/
        end

        FF0OW01.FF0OWMNS[1] = FF0OW00.FF0OWKM2 - FF0OW00.FF0OWKM1;
        FF0OW01.FF0OWMNS[1] = FF0OW01.FF0OWMNS[1] + 1;
        FF0OW00.FF0OWIX4 = 1 + FF0OW00.FF0OWNSS; /* second year season*/
        FF0OW01.FF0OWMNS[FF0OWIX4] = FF0OW01.FF0OWMNS[1];
      else
        FF0OW00.FF0OWKD1 = FF0OW00.FF0OWEMO[FF0OWIX1];
        FF0OW00.FF0OWKD2 = FF0OW00.FF0OWEMO[FF0OWIX2];

        if (FF0OW00.FF0OWKM2 < FF0OW00.FF0OWKM1)
          FF0OW00.FF0OWKM2 = FF0OW00.FF0OWKM2 + 12; /* add 12 months*/
        end

        FF0OW01.FF0OWMNS[FF0OWIX2] = FF0OW00.FF0OWKM2 - FF0OW00.FF0OWKM1;
        FF0OW00.FF0OWIX4 = FF0OWIX2 + FF0OW00.FF0OWNSS; /* second year season*/
        FF0OW01.FF0OWMNS[FF0OWIX4] = FF0OW01.FF0OWMNS[FF0OWIX2];
      end
      FF0OW00.FF0OWIX1 = FF0OW00.FF0OWIX1 + 1; /* increment index*/
      FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 + 1; /* increment index*/

    end
  end

   /* calculate page layout and WS positions*/

  FF0OW00.FF0OWCPG = 1; /* set page number to 1*/
  FF0OW01.FF0OWNPG = 0; /* max pages*/

  FF0OW00.FF0OWIX3 = FF0OW00.FF0OWNSS * 2; /* 2 years of data*/
  FF0OW00.FF0OWIX1 = 1;
  FF0OW00.FF0OWIX2 = 1;
  while (FF0OW00.FF0OWIX1 <= FF0OW00.FF0OWIX3) /* while LE number of seasons*/

    if (FF0OW01.FF0OWMNS[FF0OWIX1] > 6) /* season longer than one map*/
      FF0OW01.FF0OWNPG = FF0OW01.FF0OWNPG + 2; /* max pages*/
        /* first page*/
      FF0OW01.FF0OWTMP[FF0OWIX2] = "N"; /* total on map*/
      FF0OW01.FF0OWMPG[FF0OWIX2] = 6;
                                   /* months on page*/

      FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 + 1; /* increment index*/

        /* second page*/
      FF0OW01.FF0OWTMP[FF0OWIX2] = "Y"; /* total on map*/
      FF0OW01.FF0OWMPG[FF0OWIX2] = FF0OW01.FF0OWMNS[FF0OWIX1] - 6;
    else
      FF0OW01.FF0OWNPG = FF0OW01.FF0OWNPG + 1; /* max pages*/
        /* one page season*/
      FF0OW01.FF0OWTMP[FF0OWIX2] = "Y"; /* total on map*/
      FF0OW01.FF0OWMPG[FF0OWIX2] = FF0OW01.FF0OWMNS[FF0OWIX1];
                                   /* months on page*/
    end
    FF0OW00.FF0OWIX1 = FF0OW00.FF0OWIX1 + 1; /* increment index*/
    FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 + 1; /* increment index*/

  end

   /* ********************** End of FF0O130 ***********************/
end // end FF0O120

// load requested month range
Function FF0O130()

   /* ------------------------------------------------------------*/
   /* Determine 1 month prior to begin month*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWPDT = FF0OW01.FF0OWCDT; /* prev date*/

  if (FF0OW00.FF0OWPMM > 1)
    FF0OW00.FF0OWPMM = FF0OW00.FF0OWPMM - 1;
  else
    if (FF0OW00.FF0OWPMM == 01)
      FF0OW00.FF0OWPMM = 12;
    end
    if (FF0OW00.FF0OWPYY == 00)
      FF0OW00.FF0OWPCC = 19;
      FF0OW00.FF0OWPYY = 99;
    else
      FF0OW00.FF0OWPYY = FF0OW00.FF0OWPYY - 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine 2 months prior to begin month*/
   /* ------------------------------------------------------------*/

  if (FF0OW00.FF0OWFMM > 2)
    FF0OW00.FF0OWFMM = FF0OW00.FF0OWFMM - 2;
  else
    if (FF0OW00.FF0OWFMM == 01)
      FF0OW00.FF0OWFMM = 11;
    else
      FF0OW00.FF0OWFMM = 12;
    end
    if (FF0OW00.FF0OWFYY == 00)
      FF0OW00.FF0OWFCC = 19;
      FF0OW00.FF0OWFYY = 99;
    else
      FF0OW00.FF0OWFYY = FF0OW00.FF0OWFYY - 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* load month descriptions per requested category*/
   /* (include 2 months prior to the season begin month for*/
    /* display and calculations)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* the indexes listed below are used to determine the page nbr*/
   /* and location of the month on the map, also the load index*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWPGX = 0; /* page index*/
  FF0OW00.FF0OWMIX = 0; /* month index*/
  FF0OW00.FF0OWPIX = 1; /* process index*/
  FF0OW00.FF0OWIXM = FF0OW01.FF0OWMPG[1]; /* months per page*/
  FF0OW00.FF0OWIXM = FF0OW00.FF0OWIXM + 2;
                                   /* mos per pg(include prior 2 mo)*/

  FF0OW00.FF0OWLIX = 1; /* load index*/

  while (FF0OW00.FF0OWLIX <= FF0OW00.FF0OWMAX)

    FF0OW01.FF0OWPGN[FF0OWLIX] = FF0OW00.FF0OWPGX; /* page location*/
    FF0OW01.FF0OWMOL[FF0OWLIX] = FF0OW00.FF0OWMIX; /* month location*/
    FF0OW01.FF0OWHDM[FF0OWLIX] = FF0OW00.FF0OWFMM; /* month heading*/
    FF0OW01.FF0OWHDY[FF0OWLIX] = FF0OW00.FF0OWFYY; /* year heading*/
    FF0OW01.FF0OWBDT[FF0OWLIX] = FF0OW00.FF0OWFCT; /* ccyymm fcst mo*/

    /* ------------------------------------------------------------*/
     /* determine next forecast month*/
    /* ------------------------------------------------------------*/

    FF0OW00.FF0OWFMM = FF0OW00.FF0OWFMM + 1;
    if (FF0OW00.FF0OWFMM > 12)
      FF0OW00.FF0OWFMM = 1;
      if (FF0OW00.FF0OWFYY == 99)
        FF0OW00.FF0OWFCC = 20;
        FF0OW00.FF0OWFYY = 00;
      else
        FF0OW00.FF0OWFYY = FF0OW00.FF0OWFYY + 1;
      end
    end

    /* ------------------------------------------------------------*/
     /* determine next page number and month location on map*/
    /* ------------------------------------------------------------*/

    if (FF0OW00.FF0OWPIX >= FF0OW00.FF0OWIXM) /* nbr on months per page*/
      FF0OW00.FF0OWPIX = 0; /* init process index*/
      FF0OW00.FF0OWMIX = 0; /* init month index*/
      if (FF0OW00.FF0OWLIX >= FF0OW00.FF0OWMAX) /* end of months*/
         /* NEXT SENTENCE*/
      else
        FF0OW00.FF0OWPGX = FF0OW00.FF0OWPGX + 1; /* increment page nbr*/
        FF0OW00.FF0OWIXM = FF0OW01.FF0OWMPG[FF0OWPGX];
      end
    end

    FF0OW00.FF0OWPIX = FF0OW00.FF0OWPIX + 1;
    FF0OW00.FF0OWMIX = FF0OW00.FF0OWMIX + 1;

    /* ------------------------------------------------------------*/
     /* the first entry is the w/s table contains a zero page nbr*/
     /* and 0 month location. this entry is used for calculations*/
     /* only.*/
    /* ------------------------------------------------------------*/

    if (FF0OW00.FF0OWLIX == 1)
      FF0OW00.FF0OWPGX = 1;
    end

    FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1;

  end

end // end FF0O130

// summarize dfhist.vfhcat01
Function FF0O140()
   /* ------------------------------------------------------------*/
   /* load fh3rec record defaults*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* division code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* product type group*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FH3REC.XLCCD = FF0OW01.XLCCD; /* life cycle code*/
  FH3REC.XQACD = "02"; /* quality code*/
  FH3REC.XCTCD = "USA"; /* country code*/
  FH3REC.YSMXOT = "*"; /* order type group code*/
  FH3REC.FH1PNAC = "*"; /* national account flag*/
  FH3REC.XDSCD = "*"; /* direct ship code*/
  TA1REC.TA1PGMNM = "FF0O140"; /* calling process name*/

   /* ------------------------------------------------------------*/
   /* obtain the summarized qtys from the dfhist.vfhcat01 for*/
   /* each fcst month. (include the prior month of the season*/
   /* begin month for display only)*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWLIX = 1; /* load index*/

  while (FF0OW00.FF0OWLIX <= FF0OW00.FF0OWMAX)

    FFFREC.FFFBEGMO = FF0OW01.FF0OWBDT[FF0OWLIX];
    FFFREC.FFFENDMO = FF0OW01.FF0OWBDT[FF0OWLIX];

    XSFFS50(); /* select dfhist.vfhcat01 row*/

    FF0OW00.FF0OWNM1 = FF0OW01.FH1PAQTY[FF0OWLIX];
    FF0OW01.FH1PAQTY[FF0OWLIX] = FF0OW00.FF0OWNM1 + FH3REC.FH1PAQTY;

    FF0OW00.FF0OWNM1 = FF0OW01.FH1ALQTY[FF0OWLIX];
    FF0OW01.FH1ALQTY[FF0OWLIX] = FF0OW00.FF0OWNM1 + FH3REC.FH1ALQTY;

    FF0OW00.FF0OWNM1 = FF0OW01.FH2SHP[FF0OWLIX];
    FF0OW01.FH2SHP[FF0OWLIX] = FF0OW00.FF0OWNM1 + FH3REC.FH2SHP;

    FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1;

  end


end // end FF0O140

// summarize dfhist.vctshp01
Function FF0O145()
   /* ------------------------------------------------------------*/
   /* load fh6rec record defaults*/
   /* ------------------------------------------------------------*/

  set FH6REC empty; /* Clear row storage area*/

  FH6REC.XPRCD = FFWREC.YPGCD; /* product type group*/
  FH6REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FH6REC.XLCCD = FF0OW01.XLCCD; /* life cycle code*/
  FH6REC.XQACD = "02"; /* quality code*/
  FH6REC.YSMXOT = "*"; /* order type group code*/
  TA1REC.TA1PGMNM = "FF0O145"; /* calling process name*/

   /* ------------------------------------------------------------*/
   /* obtain the summarized qtys from the dfhist.vctshp01 for*/
   /* each fcst month. (include the prior month of the season*/
   /* begin month for display only)*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWLIX = 1; /* load index*/

  while (FF0OW00.FF0OWLIX <= FF0OW00.FF0OWMAX
   && FF0OW01.FF0OWBDT[FF0OWLIX] < FF0OW01.FF0OWCDT)

    FFFREC.FFFBEGMO = FF0OW01.FF0OWBDT[FF0OWLIX];
    FFFREC.FFFENDMO = FF0OW01.FF0OWBDT[FF0OWLIX];

    XSFFS52(); /* select dfhist.vctshp01 row*/

    FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUCS[FF0OWLIX];
    FF0OW00.FF0OWNM1 = FF0OW00.FF0OWNM1 + FH6REC.FH5MSHQT; /* curr sls*/
    FF0OW01.FF0OWUCS[FF0OWLIX] = FF0OW00.FF0OWNM1 - FH6REC.FH5RTSQT;

    FF0OW01.FF0OWUMS[FF0OWLIX] = FF0OW01.FF0OWUCS[FF0OWLIX]; /* Mstr*/

    FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1;

  end


end // end FF0O145

// Select set on dfcast.vmcat001
Function FF0O150()
   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "S1"; /* function code*/

  FFFREC.FFFBEGMO = FF0OW01.FF0OWBDT[1]; /* begin month range*/
  FFFREC.FFFENDMO = FF0OW01.FF0OWBDT[FF0OWMAX]; /* end month range*/

   /* ------------------------------------------------------------*/
   /* load ff7rec record - dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF7REC.XCTCD = "USA "; /* country code*/
  FF7REC.YSMXDV = "10"; /* div domestic*/

   /* ------------------------------------------------------------*/
   /* select set dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0O150

// fetch dfcast.vmcat001 row
Function FF0O160()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vmcat001 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("N1", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "160"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DFCAST.VMCAT001 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0O160

// re-calc b-grade sls fcst
Function FF0O170()
   /* ------------------------------------------------------------*/
     /* Re-calc the b-grade curr sls fcst based on the ratio*/
     /* using sales forecast ratio from the line level.*/
   /* ------------------------------------------------------------*/

  set FF5REC empty;
  FF5REC.FF4FCTMO = FF0OW01.FF0OWBDT[FF0OWLIX];
  FF0O171(); /* ====> select unique VMLINE01*/

  if (SQLCA.VAGen_SQLCODE == 100 /* ===> not found*/
   || FF5REC.FF5BGFCT == 0)      /* ===>*/

    FF0OW01.FF5BGFCT = 0;

  else /* ===> calc using sales fcst ratios*/

    /* ------------------------------------------------------------*/
     /* Select DFCAST.VMLTYP01 row for both*/
        /* types (in-line and make-up)*/
    /* ------------------------------------------------------------*/

    set FF6REC empty;

    if (FFWREC.YPGCD == "02") /* ===> product type group code*/
      FF6REC.YPGCD = "01"; /* ===> product type group code*/
    else
      FF6REC.YPGCD = "02"; /* ===> product type group code*/
    end

    FF6REC.XPLCD = FF2REC.XPLCD; /* ===> line code*/
    FF6REC.FF4FCTMO = FF0OW01.FF0OWBDT[FF0OWLIX]; /* begin month*/

    FF0O172(); /* ====> select unique VMLTYP01*/

    FF0OW01.FF6SLFCT = FF6REC.FF6SLFCT;


    /* ------------------------------------------------------------*/
     /* Select DFCAST.VMLTYP01 row for both*/
        /* types (in-line and make-up)*/
    /* ------------------------------------------------------------*/

    set FF6REC empty;

    FF6REC.YPGCD = FFWREC.YPGCD; /* ===> product type group code*/
    FF6REC.XPLCD = FF2REC.XPLCD; /* ===> line code*/
    FF6REC.FF4FCTMO = FF0OW01.FF0OWBDT[FF0OWLIX]; /* begin month*/


    FF0O172(); /* ====> select unique VMLTYP01*/

    FF0OW01.FF6SLFCT = FF0OW01.FF6SLFCT + FF6REC.FF6SLFCT;


    if (FF6REC.FF6SLFCT == 0
     || FF0OW01.FF6SLFCT == 0)

      FF0OW01.FF5BGFCT = 0;

    else

      /* ------------------------------------------------------------*/
           /* Now get the ratios need for B-Grade type qtys calc.*/
      /* ===> calc the line, type / line       sales forecast ratio*/
      /* ===> calc the cat,  type / line, type sales forecast ratio*/

      /* ------------------------------------------------------------*/

      /* ===> calc the line type / line sales forecast ratio*/
      FF0OW01.FF0OWLNR = FF6REC.FF6SLFCT / FF0OW01.FF6SLFCT;

      /* ===> calc the cat type / line type sales forecast ratio*/
      FF0OW01.FF0OWCLR = FF7REC.FF6SLFCT / FF6REC.FF6SLFCT;

      /* ------------------------------------------------------------*/
       /* Calc the B-Grade qty for given type in relation to the*/
       /* ratio of "LINE TYPE" to "LINE"*/
                /* "CAT TYPE" to "LINE TYPE".*/
        /* ie) Catagory B-Grade qtys = B-Grade FCST OF MLINE01*/
                                  /* * line type to line ratio*/
                                  /* * cat  type to line type ratio*/
      /* ------------------------------------------------------------*/

      FF0OW01.FF5BGFCT = FF5REC.FF5BGFCT * FF0OW01.FF0OWLNR * FF0OW01.FF0OWCLR;

    end /* ===> division by zero check*/

  end /* ===> VMLINE01 data found check*/

   /* **                                                        ***/
   /* ********************** End of FF0O170 ***********************/
end // end FF0O170

// select unique DFCAST.VMLINE01
Function FF0O171()
   /* ------------------------------------------------------------*/
   /* Format key data*/
   /* ------------------------------------------------------------*/

  FF5REC.XPLCD = FF2REC.XPLCD; /* line code*/

   /* ------------------------------------------------------------*/
   /* Select unique dfcast.vmline01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3710" ("S ", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "171"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0O171

// select unique DFCAST.VMLTYP01
Function FF0O172()
   /* ------------------------------------------------------------*/
   /* Select unique DFCAST.VMLTYP01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("S ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "172"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0O172

// close dfcast.vmcat001 table
Function FF0O180()
   /* ------------------------------------------------------------*/
   /* close dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("C1", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "170"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0O180

// Save display data - ff0ow01
Function FF0O190()

   /* ------------------------------------------------------------*/
   /* set modifiable data*/
   /* ------------------------------------------------------------*/

  FF0OW01.CACHGFL = "Y";

   /* ------------------------------------------------------------*/
   /* translate quantities from unit to thousands using routine*/
   /* xsffs10*/
   /* ------------------------------------------------------------*/

  FF0O191();

   /* ------------------------------------------------------------*/
   /* calculate/translate subtotals for all seasons*/
   /* ------------------------------------------------------------*/

  FF0O192();

   /* ------------------------------------------------------------*/
   /* calculate/translate grand total for all seasons*/
   /* ------------------------------------------------------------*/

  FF0O193();


end // end FF0O190

// translate forecast detail qtys
Function FF0O191()

   /* ------------------------------------------------------------*/
   /* translate forecast detail qtys from units to thousand using*/
   /* routine xsffs10*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 2; /* init index*/

  while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX)

    if (FF0OW01.FH1PAQTY[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FH1PAQTY[FF0OWIDX];
      XSFFS10(); /* translate pre-alloc qty*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWPAL[FF0OWIDX] = FFXREC.FFXCHAR;
        FF0OW01.FF0OWPAX[FF0OWIDX] = FFXREC.FFXROUND;
      end
    end

    if (FF0OW01.FH1ALQTY[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FH1ALQTY[FF0OWIDX];
      XSFFS10(); /* translate allocated qty*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWALC[FF0OWIDX] = FFXREC.FFXCHAR;
        FF0OW01.FF0OWALX[FF0OWIDX] = FFXREC.FFXROUND;
      end
    end

    if (FF0OW01.FH2SHP[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FH2SHP[FF0OWIDX];
      XSFFS10(); /* translate invoice qty*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWINV[FF0OWIDX] = FFXREC.FFXCHAR;
        FF0OW01.FF0OWINX[FF0OWIDX] = FFXREC.FFXROUND;
      end
    end


    if (FF0OW01.FF0OWUCS[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUCS[FF0OWIDX];
      XSFFS10(); /* translate cur sls fcst*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWCSL[FF0OWIDX] = FFXREC.FFXCHAR; /* maint. field*/
        FF0OW01.FF0OWOCL[FF0OWIDX] = FFXREC.FFXCHAR; /* orig.  field*/
      end
    end

    if (FF0OW01.FF0OWUMS[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUMS[FF0OWIDX];
      XSFFS10(); /* translate mstr sls fcst*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWMSL[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF7BGINV[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF7BGINV[FF0OWIDX];
      XSFFS10(); /* translate begin inv*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWBIN[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUBD[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUBD[FF0OWIDX];
      XSFFS10(); /* translate bdg prod due*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWBPD[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUBF[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUBF[FF0OWIDX];
      XSFFS10(); /* translate bdg prod fcst*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWBPF[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUSU[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSU[FF0OWIDX];
      XSFFS10(); /* translate supply*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSPY[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUBS[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUBS[FF0OWIDX];
      XSFFS10(); /* translate balance to ship*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWBSH[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUEI[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUEI[FF0OWIDX];
      XSFFS10(); /* translate end inventory*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWEIN[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1;

  end

end // end FF0O191

// calculate/translate subtotals
Function FF0O192()

   /* ------------------------------------------------------------*/
   /* calculate / translate subtotals for all seasons*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 3; /* table index*/

  while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX) /* process table entries*/

    FF0OW00.FF0OWLIX = FF0OW01.FF0OWPGN[FF0OWIDX]; /* set load index*/

    if (FF0OW01.FF0OWTMP[FF0OWLIX] == "N") /* no subtotal on this page*/
      FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1; /* sub appears next page*/
    end

     /* pre-alloc subtotal*/

    FF0OW00.FF0OWNM1 = FF0OW01.FH1PAQTY[FF0OWIDX];
    FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSP[FF0OWLIX];
    FF0OW01.FF0OWUSP[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

     /* allocate subtotal*/

    FF0OW00.FF0OWNM1 = FF0OW01.FH1ALQTY[FF0OWIDX];
    FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSA[FF0OWLIX];
    FF0OW01.FF0OWUSA[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

     /* invoiced subtotal*/

    FF0OW00.FF0OWNM1 = FF0OW01.FH2SHP[FF0OWIDX];
    FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSI[FF0OWLIX];
    FF0OW01.FF0OWUSI[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

     /* cur sls fcst subtotal*/

    FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUCS[FF0OWIDX];
    FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSC[FF0OWLIX];
    FF0OW01.FF0OWUSC[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

     /* mstr sls fcst subtotal*/

    FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUMS[FF0OWIDX];
    FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSM[FF0OWLIX];
    FF0OW01.FF0OWUSM[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

    if (FF0OW01.FF0OWBDT[FF0OWIDX] >= FF0OW01.FF0OWCDT)

       /* begin inventory subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF7BGINV[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSB[FF0OWLIX];
      FF0OW01.FF0OWUSB[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

       /* bdg prod due subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUBD[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSD[FF0OWLIX];
      FF0OW01.FF0OWUSD[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

       /* bdg prod fcst subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUBF[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSF[FF0OWLIX];
      FF0OW01.FF0OWUSF[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

       /* supply subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUSU[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSS[FF0OWLIX];
      FF0OW01.FF0OWUSS[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

       /* balance to ship subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUBS[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSL[FF0OWLIX];
      FF0OW01.FF0OWUSL[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

       /* end inventory subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUEI[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSE[FF0OWLIX];
      FF0OW01.FF0OWUSE[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1; /* table index*/

  end

   /* ------------------------------------------------------------*/
   /* translate subtotal qtys from units to thousands using*/
   /* routine xsffs10*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 1;

  while (FF0OW00.FF0OWIDX <= FF0OW01.FF0OWNPG)

    if (FF0OW01.FF0OWUSP[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSP[FF0OWIDX];
      XSFFS10(); /* translate pre-alloc qty*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSPA[FF0OWIDX] = FFXREC.FFXCHAR;
        FF0OW01.FF0OWSPX[FF0OWIDX] = FFXREC.FFXROUND;
      end
    end

    if (FF0OW01.FF0OWUSA[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSA[FF0OWIDX];
      XSFFS10(); /* translate allocated qty*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSAL[FF0OWIDX] = FFXREC.FFXCHAR;
        FF0OW01.FF0OWSAX[FF0OWIDX] = FFXREC.FFXROUND;
      end
    end

    if (FF0OW01.FF0OWUSI[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSI[FF0OWIDX];
      XSFFS10(); /* translate invoice qty*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSIN[FF0OWIDX] = FFXREC.FFXCHAR;
        FF0OW01.FF0OWSIX[FF0OWIDX] = FFXREC.FFXROUND;
      end
    end

    if (FF0OW01.FF0OWUSC[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSC[FF0OWIDX];
      XSFFS10(); /* translate cur sls fcst*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSCS[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUSM[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSM[FF0OWIDX];
      XSFFS10(); /* translate mstr sls fcst*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSMS[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUSB[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSB[FF0OWIDX];
      XSFFS10(); /* translate begin inv*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSBI[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUSD[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSD[FF0OWIDX];
      XSFFS10(); /* translate bdg prod due*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSBD[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUSF[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSF[FF0OWIDX];
      XSFFS10(); /* translate bdg prod fcst*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSBF[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUSS[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSS[FF0OWIDX];
      XSFFS10(); /* translate supply*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSSP[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUSL[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSL[FF0OWIDX];
      XSFFS10(); /* translate balance to ship*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSBL[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    if (FF0OW01.FF0OWUSE[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSE[FF0OWIDX];
      XSFFS10(); /* translate end inventory*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSEI[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1; /* table index*/

  end

end // end FF0O192

// calculate/translate grand tot
Function FF0O193()

   /* ------------------------------------------------------------*/
   /* calculate/translate grand total for all seasons*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 1; /* table index*/

  while (FF0OW00.FF0OWIDX <= FF0OW01.FF0OWNPG) /* number of seasons*/
     /* pre-alloc total*/
    FF0OW01.FF0OWUGP = FF0OW01.FF0OWUGP + FF0OW01.FF0OWUSP[FF0OWIDX];
     /* allocate total*/
    FF0OW01.FF0OWUGA = FF0OW01.FF0OWUGA + FF0OW01.FF0OWUSA[FF0OWIDX];
     /* invoiced total*/
    FF0OW01.FF0OWUGI = FF0OW01.FF0OWUGI + FF0OW01.FF0OWUSI[FF0OWIDX];
     /* cur sls fcst total*/
    FF0OW01.FF0OWUGC = FF0OW01.FF0OWUGC + FF0OW01.FF0OWUSC[FF0OWIDX];
     /* mstr sls fcst total*/
    FF0OW01.FF0OWUGM = FF0OW01.FF0OWUGM + FF0OW01.FF0OWUSM[FF0OWIDX];
     /* begin inventory total*/
    FF0OW01.FF0OWUGB = FF0OW01.FF0OWUGB + FF0OW01.FF0OWUSB[FF0OWIDX];
     /* bdg prod due total*/
    FF0OW01.FF0OWUGD = FF0OW01.FF0OWUGD + FF0OW01.FF0OWUSD[FF0OWIDX];
     /* bdg prod fcst total*/
    FF0OW01.FF0OWUGF = FF0OW01.FF0OWUGF + FF0OW01.FF0OWUSF[FF0OWIDX];
     /* supply total*/
    FF0OW01.FF0OWUGS = FF0OW01.FF0OWUGS + FF0OW01.FF0OWUSS[FF0OWIDX];
     /* balance to ship total*/
    FF0OW01.FF0OWUGL = FF0OW01.FF0OWUGL + FF0OW01.FF0OWUSL[FF0OWIDX];
     /* end inventory total*/
    FF0OW01.FF0OWUGE = FF0OW01.FF0OWUGE + FF0OW01.FF0OWUSE[FF0OWIDX];

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1; /* table index*/

  end

   /* ------------------------------------------------------------*/
   /* translate total qtys from units to thousands using*/
   /* routine xsffs10*/
   /* ------------------------------------------------------------*/

  if (FF0OW01.FF0OWUGP != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGP;
    XSFFS10(); /* translate pre-alloc qty*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGPA = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGA != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGA;
    XSFFS10(); /* translate allocated qty*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGAL = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGI != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGI;
    XSFFS10(); /* translate invoice qty*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGIN = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGC != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGC;
    XSFFS10(); /* translate cur sls fcst*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGCS = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGM != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGM;
    XSFFS10(); /* translate mstr sls fcst*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGMS = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGB != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGB;
    XSFFS10(); /* translate begin inv*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGBI = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGD != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGD;
    XSFFS10(); /* translate bgd prod due*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGBD = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGF != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGF;
    XSFFS10(); /* translate bgd prod fcst*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGBF = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGS != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGS;
    XSFFS10(); /* translate supply*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGSP = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGL != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGL;
    XSFFS10(); /* translate balance to ship*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGBL = FFXREC.FFXCHAR;
    end
  end

  if (FF0OW01.FF0OWUGE != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGE;
    XSFFS10(); /* translate end inventory*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGEI = FFXREC.FFXCHAR;
    end
  end


end // end FF0O193

// Format and converse the map
Function FF0O200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0OW00.FF0OWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0OW00.FF0OWSWF == "Y") /* map must be formatted*/
      FF0O210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0OM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0OM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FF0OM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FF0OM001 alarm; /* Indicate sound alarm*/
  end

  converse FF0OM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FF0OM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0OM001.CAITEM; /* Application data*/


end // end FF0O200

// Format the display data
Function FF0O210()
   /* ------------------------------------------------------------*/
   /* init map ff0om001*/
   /* ------------------------------------------------------------*/

  set FF0OM001 initial; /* M001 input/output area*/

  FF0OW00.FF0OWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format ff0om001 using data from ff0ow01*/
   /* ------------------------------------------------------------*/

  FF0OM001.XPCCD = FFWREC.XPCCD; /* product category code*/
  FF0OM001.XPCABRV = FFWREC.XPCABRV; /* product category short desc*/

  FF0OM001.YPGCD = FFWREC.YPGCD; /* product type grp code*/
  FF0OM001.YPGABRV = FFWREC.YPGABRV; /* product type grp short desc*/

   /* ------------------------------------------------------------*/
   /* if data was not loaded bypass loading the map fields*/
   /* ------------------------------------------------------------*/

  if (FF0OW01.CACHGFL != "Y")
    return;
  end
  FF0OM001.FF0OMBMO = FF0OW01.FF0OWSYM; /* move beg month*/
  FF0OM001.FF0OMEMO[1] = FF0OW00.FF0OWEMM[1]; /* move end month*/
  FF0OM001.FF0OMEMO[2] = FF0OW00.FF0OWEMM[2]; /* move end month*/
  FF0OM001.FF0OMEMO[3] = FF0OW00.FF0OWEMM[3]; /* move end month*/
  FF0OM001.FF0OMEMO[4] = FF0OW00.FF0OWEMM[4]; /* move end month*/

   /* ------------------------------------------------------------*/
   /* display the forecast yy/mm headings and forecast qtys if*/
   /* if forecast yy/mm GE to the current yy/mm*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 2; /* start at second entry in table*/

  while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX) /* process w/s display table*/

    if (FF0OW01.FF0OWPGN[FF0OWIDX] == FF0OW00.FF0OWCPG)

      FF0OW00.FF0OWLIX = FF0OW01.FF0OWMOL[FF0OWIDX];

      FF0OW00.FF0OWFYY = FF0OW01.FF0OWHDY[FF0OWIDX];
      FF0OW00.FF0OWFMM = FF0OW01.FF0OWHDM[FF0OWIDX];

       /* begin month heading*/

      FF0OW00.FF0OWHDY = FF0OW01.FF0OWHDY[FF0OWIDX];
      FF0OW00.FF0OWHDS = "/";
      FF0OW00.FF0OWHDM = FF0OW01.FF0OWHDM[FF0OWIDX];
      FF0OM001.FF0OMHDG[FF0OWLIX] = FF0OW00.FF0OWHDG;

       /* pre-alloc*/
      FF0OM001.FF0OMPAL[FF0OWLIX] = FF0OW01.FF0OWPAL[FF0OWIDX];
       /* allocate*/
      FF0OM001.FF0OMALC[FF0OWLIX] = FF0OW01.FF0OWALC[FF0OWIDX];
       /* invoiced*/
      FF0OM001.FF0OMINV[FF0OWLIX] = FF0OW01.FF0OWINV[FF0OWIDX];
       /* calc total of pre-all + all + ivc, then round to thous*/
      FF0OW00.FF0OWMTL = FF0OW01.FF0OWPAX[FF0OWIDX];
      FF0OW00.FF0OWMTL = FF0OW00.FF0OWMTL + FF0OW01.FF0OWALX[FF0OWIDX];
      FF0OW00.FF0OWMTL = FF0OW00.FF0OWMTL + FF0OW01.FF0OWINX[FF0OWIDX];
      /* ------------------------------------------------------------*/
       /* translate total qty from units to thousand using*/
       /* routine xsffs10*/
      /* ------------------------------------------------------------*/
      if (FF0OW00.FF0OWMTL != 0)
        FFXREC.FFXNUMB = FF0OW00.FF0OWMTL;
        XSFFS10(); /* translate qty to thous*/
        if (FFXREC.FFXRTNCD == "0")
          FF0OM001.FF0OMTOT[FF0OWLIX] = FFXREC.FFXCHAR;
                                   /* move to map*/
        end
      end

       /* cur sls fcst*/
      FF0OM001.FF0OMCSL[FF0OWLIX] = FF0OW01.FF0OWCSL[FF0OWIDX];
       /* mstr sls fcst*/
      FF0OM001.FF0OMMSL[FF0OWLIX] = FF0OW01.FF0OWMSL[FF0OWIDX];

      if (FF0OW01.FF0OWBDT[FF0OWIDX] >= FF0OW01.FF0OWCDT)
         /* begin inventory*/
        FF0OM001.FF0OMBIN[FF0OWLIX] = FF0OW01.FF0OWBIN[FF0OWIDX];
         /* bgd prod due*/
        FF0OM001.FF0OMBPD[FF0OWLIX] = FF0OW01.FF0OWBPD[FF0OWIDX];
         /* bgd prod fcst*/
        FF0OM001.FF0OMBPF[FF0OWLIX] = FF0OW01.FF0OWBPF[FF0OWIDX];
         /* supply*/
        FF0OM001.FF0OMSPY[FF0OWLIX] = FF0OW01.FF0OWSPY[FF0OWIDX];
         /* balance to ship*/
        FF0OM001.FF0OMBSH[FF0OWLIX] = FF0OW01.FF0OWBSH[FF0OWIDX];
         /* end inventory*/
        FF0OM001.FF0OMEIN[FF0OWLIX] = FF0OW01.FF0OWEIN[FF0OWIDX];
      end
    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1; /* increment load index*/

  end

   /* ------------------------------------------------------------*/
   /* if detail forecast qtys are loaded display subtotals*/
   /* and grand total.*/
   /* ------------------------------------------------------------*/

  if (FF0OW00.FF0OWLIX > 0
   && FF0OW01.FF0OWTMP[FF0OWCPG] == "Y") /* subtotal appears on page*/

    FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1;

    FF0OM001.FF0OMHDG[FF0OWLIX] = " SUB ";
     /* pre-alloc*/
    FF0OM001.FF0OMPAL[FF0OWLIX] = FF0OW01.FF0OWSPA[FF0OWCPG];
     /* allocate*/
    FF0OM001.FF0OMALC[FF0OWLIX] = FF0OW01.FF0OWSAL[FF0OWCPG];
     /* invoiced*/
    FF0OM001.FF0OMINV[FF0OWLIX] = FF0OW01.FF0OWSIN[FF0OWCPG];
     /* calc total of pre-all + all + ivc, then round to thous*/
    FF0OW00.FF0OWMTL = FF0OW01.FF0OWSPX[FF0OWCPG];
    FF0OW00.FF0OWMTL = FF0OW00.FF0OWMTL + FF0OW01.FF0OWSAX[FF0OWCPG];
    FF0OW00.FF0OWMTL = FF0OW00.FF0OWMTL + FF0OW01.FF0OWSIX[FF0OWCPG];
    /* ------------------------------------------------------------*/
     /* translate total qty from units to thousand using*/
     /* routine xsffs10*/
    /* ------------------------------------------------------------*/
    if (FF0OW00.FF0OWMTL != 0)
      FFXREC.FFXNUMB = FF0OW00.FF0OWMTL;
      XSFFS10(); /* translate qty to thous*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OM001.FF0OMTOT[FF0OWLIX] = FFXREC.FFXCHAR; /* move to map*/
      end
    end

     /* cur sls fcst*/
    FF0OM001.FF0OMCSL[FF0OWLIX] = FF0OW01.FF0OWSCS[FF0OWCPG];
     /* mstr sls fcst*/
    FF0OM001.FF0OMMSL[FF0OWLIX] = FF0OW01.FF0OWSMS[FF0OWCPG];
     /* begin inventory - do not display*/
     /* bgd prod due*/
    FF0OM001.FF0OMBPD[FF0OWLIX] = FF0OW01.FF0OWSBD[FF0OWCPG];
     /* bgd prod fcst*/
    FF0OM001.FF0OMBPF[FF0OWLIX] = FF0OW01.FF0OWSBF[FF0OWCPG];
     /* supply - do not display*/
     /* balance to ship*/
    FF0OM001.FF0OMBSH[FF0OWLIX] = FF0OW01.FF0OWSBL[FF0OWCPG];
     /* end inventory - do not display*/

  end

  if (FF0OW00.FF0OWLIX > 0)
    /* ------------------------------------------------------------*/
     /* if last season, display grand totals*/
    /* ------------------------------------------------------------*/

    if (FF0OW00.FF0OWCPG == FF0OW01.FF0OWNPG) /* max pages*/

      FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1;

      FF0OM001.FF0OMHDG[FF0OWLIX] = "GRAND";
       /* pre-alloc*/
      FF0OM001.FF0OMPAL[FF0OWLIX] = FF0OW01.FF0OWGPA;
       /* allocate*/
      FF0OM001.FF0OMALC[FF0OWLIX] = FF0OW01.FF0OWGAL;
       /* invoiced*/
      FF0OM001.FF0OMINV[FF0OWLIX] = FF0OW01.FF0OWGIN;
       /* calc total of pre-all + all + ivc, then round to thous*/
      FF0OW00.FF0OWMTL = FF0OW01.FF0OWUGA + FF0OW01.FF0OWUGI +       FF0OW01.FF0OWUGP;
      /* ------------------------------------------------------------*/
       /* translate total qty from units to thousand using*/
       /* routine xsffs10*/
      /* ------------------------------------------------------------*/
      if (FF0OW00.FF0OWMTL != 0)
        FFXREC.FFXNUMB = FF0OW00.FF0OWMTL;
        XSFFS10(); /* translate qty to thous*/
        if (FFXREC.FFXRTNCD == "0")
          FF0OM001.FF0OMTOT[FF0OWLIX] = FFXREC.FFXCHAR;
                                   /* move to map*/
        end
      end

       /* cur sls fcst*/
      FF0OM001.FF0OMCSL[FF0OWLIX] = FF0OW01.FF0OWGCS;
       /* mstr sls fcst*/
      FF0OM001.FF0OMMSL[FF0OWLIX] = FF0OW01.FF0OWGMS;
       /* begin inventory - do not display*/
       /* bgd prod due*/
      FF0OM001.FF0OMBPD[FF0OWLIX] = FF0OW01.FF0OWGBD;
       /* bgd prod fcst*/
      FF0OM001.FF0OMBPF[FF0OWLIX] = FF0OW01.FF0OWGBF;
       /* supply - do not display*/
       /* balance to ship*/
      FF0OM001.FF0OMBSH[FF0OWLIX] = FF0OW01.FF0OWGBL;
       /* end inventory - do not display*/

    end
  end

   /* ------------------------------------------------------------*/
   /* determine detail data to display*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 8; /* init index*/
  while (FF0OW00.FF0OWIDX >= 1)

    if (FF0OM001.FF0OMHDG[FF0OWIDX] == "GRAND"
     || FF0OM001.FF0OMHDG[FF0OWIDX] == " SUB ")
      set FF0OM001.FF0OMHDG[FF0OWIDX] skip;
      set FF0OM001.FF0OMCSL[FF0OWIDX] skip;
    else
      if (FF0OM001.FF0OMHDG[FF0OWIDX] != " ")
        set FF0OM001.FF0OMHDG[FF0OWIDX] skip;

         /* set-up for date compare using the map heading yy/mm*/

        FF0OW00.FF0OWHDG = FF0OM001.FF0OMHDG[FF0OWIDX];
        FF0OW00.FF0OWFYY = FF0OW00.FF0OWHDY;
        FF0OW00.FF0OWFMM = FF0OW00.FF0OWHDM;

        if (FF0OW00.FF0OWFYM >= FF0OW01.FF0OWCYM)
          if (FF0OW00.FF0OWIDX == 1
           && FF0OW00.FF0OWCPG == 1)
            set FF0OM001.FF0OMCSL[FF0OWIDX] skip;
          else
            set FF0OM001.FF0OMCSL[FF0OWIDX] cursor, normal;
          end
        else
          set FF0OM001.FF0OMCSL[FF0OWIDX] skip;
        end
      end
    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX - 1;

  end


end // end FF0O210

// Check attention identifier
Function FF0O300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0OW00.FF0OWSWF = "Y"; /* set map switch*/
    FF0OW00.FF0OWSWR = "Y"; /* data request switch*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0OM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0OM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13 - transfer to closeout forecast application*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/

    COMMAREA.CATOAP = "FF0N"; /* TO application*/

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0OM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf10  /* pf10 was not pressed*/
   && converseVar.eventKey not pf11  /* pf11 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf16) /* pf16 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0O300

// Reset highlighted fields
Function FF0O400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0OM001.XPCCD initialAttributes; /* product category*/
  set FF0OM001.YPGCD initialAttributes; /* product type group*/
  set FF0OM001.FF0OMBMO initialAttributes; /* beginning month*/
  set FF0OM001.FF0OMEMO[1] initialAttributes; /* season end months*/
  set FF0OM001.FF0OMEMO[2] initialAttributes; /* season end months*/
  set FF0OM001.FF0OMEMO[3] initialAttributes; /* season end months*/
  set FF0OM001.FF0OMEMO[4] initialAttributes; /* season end months*/

  if (FF0OW01.CACHGFL == "Y")
    FF0OW00.FF0OWIDX = 8; /* init index*/
    while (FF0OW00.FF0OWIDX >= 1)

      if (FF0OM001.FF0OMHDG[FF0OWIDX] == "GRAND"
       || FF0OM001.FF0OMHDG[FF0OWIDX] == " SUB ")
        set FF0OM001.FF0OMHDG[FF0OWIDX] skip;
        set FF0OM001.FF0OMCSL[FF0OWIDX] skip;
      else
        if (FF0OM001.FF0OMHDG[FF0OWIDX] != " ")
          set FF0OM001.FF0OMHDG[FF0OWIDX] skip;

           /* set-up for date compare using the map heading yy/mm*/

          FF0OW00.FF0OWHDG = FF0OM001.FF0OMHDG[FF0OWIDX];
          FF0OW00.FF0OWFYY = FF0OW00.FF0OWHDY;
          FF0OW00.FF0OWFMM = FF0OW00.FF0OWHDM;

          if (FF0OW00.FF0OWFYM >= FF0OW01.FF0OWCYM)
            if (FF0OW00.FF0OWIDX == 1
             && FF0OW00.FF0OWCPG == 1)
              set FF0OM001.FF0OMCSL[FF0OWIDX] skip;
            else
              set FF0OM001.FF0OMCSL[FF0OWIDX] normal;
            end
          else
            set FF0OM001.FF0OMCSL[FF0OWIDX] skip;
          end
        end
      end

      FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX - 1;

    end
  end

  set FF0OM001.CATOAP initialAttributes;
  set FF0OM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0OM001.XPCCD == "?" /* GPC list requested*/
   || FF0OM001.YPGCD == "?") /* or dimension list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(3); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0OM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD;

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0OM001.XPCCD = FFWREC.XPCCD;
      FF0OM001.XPCABRV = FFWREC.XPCABRV;
    else
      FF0OM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0OM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Description*/
    end

    set FF0OM001.XPCCD cursor; /* Establish cursor position*/

  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group*/
   /* ------------------------------------------------------------*/

  if (FF0OM001.YPGCD == "?") /* product type grp list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0OM001.YPGCD = FFWREC.YPGCD;
      FF0OM001.YPGABRV = FFWREC.YPGABRV;
    else
      FF0OM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0OM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Description*/
    end

    set FF0OM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97);

  exit stack; /* Exit to display map*/


end // end FF0O400

// Verify the entered data
Function FF0O500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0OM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* validate entry fields, if changed and valid re-calculate*/
   /* the qtys, subtotals, and total.*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = FF0OW00.FF0OWMAX;
  FF0OW00.FF0OWDCF = "N";
  FF0OW00.FF0OWERF = "N";

  while (FF0OW00.FF0OWIDX > 2) /* process w/s table*/

    if (FF0OW01.FF0OWPGN[FF0OWIDX] == FF0OW00.FF0OWCPG)
      FF0OW00.FF0OWMIX = FF0OW01.FF0OWMOL[FF0OWIDX];
      if (FF0OW01.FF0OWCSL[FF0OWIDX] != FF0OM001.FF0OMCSL[FF0OWMIX])
        FF0O510(); /* validate forecast qty*/
      end
    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX - 1; /* decrement table index*/

  end

  if (FF0OW00.FF0OWDCF == "Y"
   && FF0OW00.FF0OWERF == "N")
    FF0O520(); /* re-calculate qtys, subtotals, and totals*/
  end

   /* ------------------------------------------------------------*/
   /* If any of the key fields changed, determine if any of the*/
   /* modifiable fields were changed.  if so, display error msg*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf14)

    if (FF0OM001.XPCCD != FFWREC.XPCCD              /* product category changed*/
     || FF0OM001.XPCCD == " "                       /* product category changed*/
     || FF0OM001.YPGCD != FFWREC.YPGCD              /* product type grp changed*/
     || FF0OM001.YPGCD == " "                       /* product type grp changed*/
     || FF0OM001.FF0OMBMO != FF0OW01.FF0OWSYM       /* beg month changed*/
     || FF0OM001.FF0OMEMO[1] != FF0OW00.FF0OWEMM[1] /* end month changed*/
     || FF0OM001.FF0OMEMO[2] != FF0OW00.FF0OWEMM[2] /* end month changed*/
     || FF0OM001.FF0OMEMO[3] != FF0OW00.FF0OWEMM[3] /* end month changed*/
     || FF0OM001.FF0OMEMO[4] != FF0OW00.FF0OWEMM[4]) /* end month changed*/

      FF0O530(); /* Check modifiable fields*/

      FF0O540(); /* validate key entries*/

      if (converseVar.validationMsgNum == 0)
        FF0OW00.FF0OWSWR = "Y"; /* get requested data*/
      end

    end
  end

  if (converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    if (FF0OM001.XPCCD != FFWREC.XPCCD              /* product category changed*/
     || FF0OM001.XPCCD == " "                       /* product category changed*/
     || FF0OM001.YPGCD != FFWREC.YPGCD              /* product type grp changed*/
     || FF0OM001.YPGCD == " "                       /* product type grp changed*/
     || FF0OM001.FF0OMBMO != FF0OW01.FF0OWSYM       /* beg month changed*/
     || FF0OM001.FF0OMEMO[1] != FF0OW00.FF0OWEMM[1] /* end month changed*/
     || FF0OM001.FF0OMEMO[2] != FF0OW00.FF0OWEMM[2] /* end month changed*/
     || FF0OM001.FF0OMEMO[3] != FF0OW00.FF0OWEMM[3] /* end month changed*/
     || FF0OM001.FF0OMEMO[4] != FF0OW00.FF0OWEMM[4]) /* end month changed*/
      FFWREC.XXXMODID = "500";
      converseLib.validationFailed(111);
      set FF0OM001.XPCCD cursor;
    else
      if (converseVar.eventKey is pf15)
        FF0O530(); /* Check modifiable fields*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FF0O500

// validate entry fields
Function FF0O510()

   /* ------------------------------------------------------------*/
   /* validate cur sls fcst*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXCHAR = FF0OM001.FF0OMCSL[FF0OWMIX];

  XSFFS11(); /* validate/translate inv qty*/

  if (FFXREC.FFXRTNCD > "0")
    FF0OW00.FF0OWERF = "Y"; /* set error flag*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0OM001.FF0OMCSL[FF0OWMIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate missing or invalid*/
  else
    FF0OW00.FF0OWDCF = "Y"; /* set data changed flag*/
    FF0OW01.FF0OWUCS[FF0OWIDX] = FFXREC.FFXNUMB;

    XSFFS10();

    FF0OW01.FF0OWCSL[FF0OWIDX] = FFXREC.FFXCHAR;
  end

end // end FF0O510

// re-calculate/translate totals
Function FF0O520()

   /* ------------------------------------------------------------*/
   /* re-calculate detail forecast qtys*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 3; /* table index*/

  while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX)

    if (FF0OW01.FF0OWPGN[FF0OWIDX] >= FF0OW00.FF0OWCPG
     && FF0OW01.FF0OWBDT[FF0OWIDX] >= FF0OW01.FF0OWCDT) /* ge current date*/

       /* beg invntry : end inventory of prior month*/

      if (FF0OW01.FF0OWBDT[FF0OWIDX] != FF0OW01.FF0OWCDT) /* current date*/
        FF0OW00.FF0OWMIX = FF0OW00.FF0OWIDX - 1; /* month index*/
        FF0OW01.FF7BGINV[FF0OWIDX] = FF0OW01.FF0OWUEI[FF0OWMIX];
      end

       /* supply :  beg invntry + bgd prod due + bgd prod fcst*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF7BGINV[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUBD[FF0OWIDX];
      FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;
      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUBF[FF0OWIDX];
      FF0OW01.FF0OWUSU[FF0OWIDX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM3;


       /* balance to ship : cur sls fcst - invoiced*/
       /* note: if current begin date add carryover*/
             /* (prealloc + alloc) from 2 months prior*/

      if (FF0OW01.FF0OWBDT[FF0OWIDX] == FF0OW01.FF0OWCDT
       && FF0OW00.FF0OWLIX > 2)
        FF0OW00.FF0OWMIX = FF0OW00.FF0OWIDX - 1; /* month index*/
        FF0OW00.FF0OWNM1 = FF0OW01.FH1PAQTY[FF0OWMIX];
        FF0OW00.FF0OWNM2 = FF0OW01.FH1ALQTY[FF0OWMIX];
        FF0OW00.FF0OWMIX = FF0OW00.FF0OWIDX - 2; /* month index*/
        FF0OW00.FF0OWNM1 = FF0OW00.FF0OWNM1 + FF0OW01.FH1PAQTY[FF0OWMIX];
        FF0OW00.FF0OWNM2 = FF0OW00.FF0OWNM2 + FF0OW01.FH1ALQTY[FF0OWMIX];
        FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2; /* carryover*/
        FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM3 + FF0OW01.FF0OWUCS[FF0OWIDX];
        FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM3 - FF0OW01.FH2SHP[FF0OWIDX];
        FF0OW01.FF0OWUBS[FF0OWIDX] = FF0OW00.FF0OWNM3;
      else
        FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUCS[FF0OWIDX];
        FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM1 - FF0OW01.FH2SHP[FF0OWIDX];
        FF0OW01.FF0OWUBS[FF0OWIDX] = FF0OW00.FF0OWNM3;
      end

       /* end inventory :   supply - bal to ship*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUSU[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUBS[FF0OWIDX];
      FF0OW00.FF0OWNM3 = FF0OW00.FF0OWNM1 - FF0OW00.FF0OWNM2;
      FF0OW01.FF0OWUEI[FF0OWIDX] = FF0OW00.FF0OWNM3;

    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* translate quantities from unit to thousands using routine*/
   /* xsffs10*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 3; /* init index*/

  while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX)

    if (FF0OW01.FF0OWPGN[FF0OWIDX] >= FF0OW00.FF0OWCPG)

      if (FF0OW01.FF7BGINV[FF0OWIDX] != 0)
        FFXREC.FFXNUMB = FF0OW01.FF7BGINV[FF0OWIDX];
        XSFFS10(); /* translate begin inv*/
        if (FFXREC.FFXRTNCD == "0")
          FF0OW01.FF0OWBIN[FF0OWIDX] = FFXREC.FFXCHAR;
        end
      else
        FF0OW01.FF0OWBIN[FF0OWIDX] = " ";
      end

      if (FF0OW01.FF0OWUSU[FF0OWIDX] != 0)
        FFXREC.FFXNUMB = FF0OW01.FF0OWUSU[FF0OWIDX];
        XSFFS10(); /* translate supply*/
        if (FFXREC.FFXRTNCD == "0")
          FF0OW01.FF0OWSPY[FF0OWIDX] = FFXREC.FFXCHAR;
        end
      else
        FF0OW01.FF0OWSPY[FF0OWIDX] = " ";
      end

      if (FF0OW01.FF0OWUBS[FF0OWIDX] != 0)
        FFXREC.FFXNUMB = FF0OW01.FF0OWUBS[FF0OWIDX];
        XSFFS10(); /* translate balance to ship*/
        if (FFXREC.FFXRTNCD == "0")
          FF0OW01.FF0OWBSH[FF0OWIDX] = FFXREC.FFXCHAR;
        end
      else
        FF0OW01.FF0OWBSH[FF0OWIDX] = " ";
      end

      if (FF0OW01.FF0OWUEI[FF0OWIDX] != 0)
        FFXREC.FFXNUMB = FF0OW01.FF0OWUEI[FF0OWIDX];
        XSFFS10(); /* translate end inventory*/
        if (FFXREC.FFXRTNCD == "0")
          FF0OW01.FF0OWEIN[FF0OWIDX] = FFXREC.FFXCHAR;
        end
      else
        FF0OW01.FF0OWBSH[FF0OWIDX] = " ";
      end
    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* zero/re-calculate subtotals*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 1;

  while (FF0OW00.FF0OWIDX <= FF0OW01.FF0OWNPG)

    FF0OW01.FF0OWUSC[FF0OWIDX] = 0; /* zero cur forecast*/
    FF0OW01.FF0OWUSB[FF0OWIDX] = 0; /* zero begin inv*/
    FF0OW01.FF0OWUSS[FF0OWIDX] = 0; /* zero supply*/
    FF0OW01.FF0OWUSL[FF0OWIDX] = 0; /* balance to ship*/
    FF0OW01.FF0OWUSE[FF0OWIDX] = 0; /* end inventory*/

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1;

  end

  FF0OW00.FF0OWIDX = 3; /* table index*/

  while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX) /* process table entries*/

    FF0OW00.FF0OWLIX = FF0OW01.FF0OWPGN[FF0OWIDX];

    if (FF0OW01.FF0OWTMP[FF0OWLIX] == "N") /* no subtotal on page*/
      FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1;
    end

       /* cur sls fcst subtotal*/

    FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUCS[FF0OWIDX];
    FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSC[FF0OWLIX];
    FF0OW01.FF0OWUSC[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

    if (FF0OW01.FF0OWBDT[FF0OWIDX] >= FF0OW01.FF0OWCDT)

         /* begin inventory subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF7BGINV[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSB[FF0OWLIX];
      FF0OW01.FF0OWUSB[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

         /* supply subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUSU[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSS[FF0OWLIX];
      FF0OW01.FF0OWUSS[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

         /* balance to ship subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUBS[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSL[FF0OWLIX];
      FF0OW01.FF0OWUSL[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

         /* end inventory subtotal*/

      FF0OW00.FF0OWNM1 = FF0OW01.FF0OWUEI[FF0OWIDX];
      FF0OW00.FF0OWNM2 = FF0OW01.FF0OWUSE[FF0OWLIX];
      FF0OW01.FF0OWUSE[FF0OWLIX] = FF0OW00.FF0OWNM1 + FF0OW00.FF0OWNM2;

    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1; /* table index*/

  end

   /* ------------------------------------------------------------*/
   /* translate subtotal qtys from units to thousands using*/
   /* routine xsffs10*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWIDX = 1; /* table index*/

  while (FF0OW00.FF0OWIDX <= FF0OW01.FF0OWNPG)

    if (FF0OW01.FF0OWUSC[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSC[FF0OWIDX];
      XSFFS10(); /* translate cur sls fcst*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSCS[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    else
      FF0OW01.FF0OWSCS[FF0OWIDX] = " ";
    end

    if (FF0OW01.FF0OWUSB[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSB[FF0OWIDX];
      XSFFS10(); /* translate begin inv*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSBI[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    else
      FF0OW01.FF0OWSBI[FF0OWIDX] = " ";
    end

    if (FF0OW01.FF0OWUSS[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSS[FF0OWIDX];
      XSFFS10(); /* translate supply*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSSP[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    else
      FF0OW01.FF0OWSSP[FF0OWIDX] = " ";
    end

    if (FF0OW01.FF0OWUSL[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSL[FF0OWIDX];
      XSFFS10(); /* translate balance to ship*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSBL[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    else
      FF0OW01.FF0OWSBL[FF0OWIDX] = " ";
    end

    if (FF0OW01.FF0OWUSE[FF0OWIDX] != 0)
      FFXREC.FFXNUMB = FF0OW01.FF0OWUSE[FF0OWIDX];
      XSFFS10(); /* translate end inventory*/
      if (FFXREC.FFXRTNCD == "0")
        FF0OW01.FF0OWSEI[FF0OWIDX] = FFXREC.FFXCHAR;
      end
    else
      FF0OW01.FF0OWSEI[FF0OWIDX] = " ";
    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* calculate grand total for all seasons*/
   /* ------------------------------------------------------------*/

  FF0OW01.FF0OWUGC = 0; /* zero cur forecast*/
  FF0OW01.FF0OWUGB = 0; /* zero begin inv*/
  FF0OW01.FF0OWUGS = 0; /* zero supply*/
  FF0OW01.FF0OWUGL = 0; /* balance to ship*/
  FF0OW01.FF0OWUGE = 0; /* end inventory*/

  FF0OW00.FF0OWIDX = 1; /* table index*/

  while (FF0OW00.FF0OWIDX <= FF0OW01.FF0OWNPG) /* number of pages*/
     /* cur sls fcst total*/
    FF0OW01.FF0OWUGC = FF0OW01.FF0OWUGC + FF0OW01.FF0OWUSC[FF0OWIDX];
     /* mstr sls fcst total*/
    FF0OW01.FF0OWUGM = FF0OW01.FF0OWUGM + FF0OW01.FF0OWUSM[FF0OWIDX];
     /* begin inventory total*/
    FF0OW01.FF0OWUGB = FF0OW01.FF0OWUGB + FF0OW01.FF0OWUSB[FF0OWIDX];
     /* supply total*/
    FF0OW01.FF0OWUGS = FF0OW01.FF0OWUGS + FF0OW01.FF0OWUSS[FF0OWIDX];
     /* balance to ship total*/
    FF0OW01.FF0OWUGL = FF0OW01.FF0OWUGL + FF0OW01.FF0OWUSL[FF0OWIDX];
     /* end inventory total*/
    FF0OW01.FF0OWUGE = FF0OW01.FF0OWUGE + FF0OW01.FF0OWUSE[FF0OWIDX];

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1; /* table index*/

  end

   /* ------------------------------------------------------------*/
   /* translate total qtys from units to thousands using*/
   /* routine xsffs10*/
   /* ------------------------------------------------------------*/

  if (FF0OW01.FF0OWUGC != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGC;
    XSFFS10(); /* translate cur sls fcst*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGCS = FFXREC.FFXCHAR;
    end
  else
    FF0OW01.FF0OWGCS = " ";
  end

  if (FF0OW01.FF0OWUGB != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGB;
    XSFFS10(); /* translate begin inv*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGBI = FFXREC.FFXCHAR;
    end
  else
    FF0OW01.FF0OWGBI = " ";
  end

  if (FF0OW01.FF0OWUGS != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGS;
    XSFFS10(); /* translate supply*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGSP = FFXREC.FFXCHAR;
    end
  else
    FF0OW01.FF0OWGSP = " ";
  end

  if (FF0OW01.FF0OWUGL != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGL;
    XSFFS10(); /* translate balance to ship*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGBL = FFXREC.FFXCHAR;
    end
  else
    FF0OW01.FF0OWGBL = " ";
  end

  if (FF0OW01.FF0OWUGE != 0)
    FFXREC.FFXNUMB = FF0OW01.FF0OWUGE;
    XSFFS10(); /* translate end inventory*/
    if (FFXREC.FFXRTNCD == "0")
      FF0OW01.FF0OWGEI = FFXREC.FFXCHAR;
    end
  else
    FF0OW01.FF0OWGEI = " ";
  end

end // end FF0O520

// Check modifiable fields
Function FF0O530()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed for the season displayed*/
   /* highlight the field in error and display error message*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWDCF = "N"; /* init data changed*/
  FF0OW00.FF0OWIDX = 2; /* start at second entry in table*/
  FF0OW00.FF0OWLIX = 1; /* map index*/

  while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX) /* process w/s display table*/

    if (FF0OW01.FF0OWPGN[FF0OWIDX] == FF0OW00.FF0OWCPG)
      if (FF0OW01.FF0OWCSL[FF0OWIDX] != FF0OW01.FF0OWOCL[FF0OWIDX])
        FF0OW00.FF0OWDCF = "Y"; /* data changed*/
        set FF0OM001.FF0OMCSL[FF0OWLIX] cursor, bold; /* highlight changed*/
      end
      FF0OW00.FF0OWLIX = FF0OW00.FF0OWLIX + 1; /* increment map index*/
    end

    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1; /* increment load index*/

  end

  if (FF0OW00.FF0OWDCF == "Y") /* data modified*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(111); /* cant modify data*/
    return;
  end

end // end FF0O530

// validate key field entries
Function FF0O540()

   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* validate product type group code*/
   /* ------------------------------------------------------------*/

  if (FF0OM001.YPGCD != " ")

    if (FF0OM001.YPGCD in YPGTBL.YPGCD) /* Code in table*/
      if (YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FF0OM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      else
        FF0OM001.YPGABRV = " "; /* Clear description*/
        FFWREC.XXXMODID = "540"; /* Module identification*/
        set FF0OM001.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(9); /* Inactive status*/
      end
    else
      FF0OM001.YPGABRV = " "; /* Clear description*/
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FF0OM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* invalid value entered*/
    end
  else
    FF0OM001.YPGABRV = " "; /* Clear description*/
    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FF0OM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* value required*/
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (FF0OM001.XPCCD != " ")
    set XPCREC empty; /* Row storage area*/

    XPCREC.XPCCD = FF0OM001.XPCCD; /* Category code*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY) /* Code in table*/
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FF0OM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      else
        FF0OM001.XPCABRV = " "; /* Clear description*/
        FFWREC.XXXMODID = "540"; /* Module identification*/
        set FF0OM001.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(9); /* status inactive*/
      end
    else
      FF0OM001.XPCABRV = " "; /* Clear description*/
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FF0OM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* invalid value entered*/
    end
  else
    FF0OM001.XPCABRV = " "; /* Clear description*/
    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FF0OM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* required field enter value*/
  end

   /* ------------------------------------------------------------*/
   /* validate beginning month*/
   /* ------------------------------------------------------------*/

  if (FF0OM001.FF0OMBMO > 0000)
    FF0OW00.FF0OWHYM = FF0OM001.FF0OMBMO;
    if (FF0OW00.FF0OWHMM > 0
     && FF0OW00.FF0OWHMM < 13)
      if (FF0OW01.FF0OWCDT == 0)
        XX0XS01(); /* get current date*/
        FF0OS05(); /* get FFCTL data*/
        FF0OS07(); /* calc cur bus & buy dates*/
      end

      if (FF0OW00.FF0OWHYY > 70)
        FF0OW00.FF0OWHCC = 19;
      else
        FF0OW00.FF0OWHCC = 20;
      end

      if (FF0OW00.FF0OWHDT > FF0OW01.FF0OWCDT) /* if beg > curr*/
        FFWREC.XXXMODID = "540"; /* Module identification*/
        set FF0OM001.FF0OMBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(346); /* invalid value entered*/
      end
    else
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FF0OM001.FF0OMBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* invalid value entered*/
    end
  end

  if (converseVar.validationMsgNum == 0)
    if (FF0OM001.FF0OMEMO[1] > 0
     || FF0OM001.FF0OMEMO[2] > 0
     || FF0OM001.FF0OMEMO[3] > 0
     || FF0OM001.FF0OMEMO[4] > 0)
      if (FF0OM001.FF0OMBMO > 0000)
        FF0OW01.FF0OWSDT = FF0OW00.FF0OWHDT; /* move begin to WS*/
      else
        XX0XS01(); /* get current date*/
        FF0OS05(); /* get FFCTL data*/
        FF0OS07(); /* calc cur bus & buy dates*/
        FF0OW01.FF0OWSDT = FF0OW01.FF0OWCDT; /* move curr to beg WS*/
      end
      FF0O545(); /* validate season end months*/
    end
  end
end // end FF0O540

// Validate Season end months
Function FF0O545()
   /* ------------------------------------------------------------*/
   /* Validate season end months*/
   /* ------------------------------------------------------------*/

   /* Determine number of seasons entered by looking backwards*/
   /* until data found.*/

  FF0OW00.FF0OWNSS = 0; /* zero out season counter*/
  FF0OW00.FF0OWIX2 = 4; /* index*/
  while (FF0OW00.FF0OWIX2 > 0)
    if (FF0OM001.FF0OMEMO[FF0OWIX2] > 0)
      FF0OW00.FF0OWNSS = FF0OW00.FF0OWIX2; /* number of seasons*/
      FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 - 4; /* force out of loop*/
    else
      FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 - 1;
    end
  end

   /* Look for season end months greater than 12*/

  FF0OW00.FF0OWIX2 = 1; /* Set index to 1*/
  while (FF0OW00.FF0OWIX2 <= FF0OW00.FF0OWNSS)
    if (FF0OM001.FF0OMEMO[FF0OWIX2] > 12)
      FFWREC.XXXMODID = "545"; /* Module identification*/
      set FF0OM001.FF0OMEMO[FF0OWIX2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 + 1;
    else
      FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Check for embedded zeros*/

  FF0OW00.FF0OWIX2 = 1; /* index*/
  while (FF0OW00.FF0OWIX2 <= FF0OW00.FF0OWNSS) /* for number of seasons*/
    if (FF0OM001.FF0OMEMO[FF0OWIX2] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "545"; /* Module identification*/
      set FF0OM001.FF0OMEMO[FF0OWIX2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* embedded zero msg*/
      return; /* return to previous routine*/
    else
      FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 + 1;
    end
  end

   /* calculate the end month*/

  FF0OW01.FF0OWXDT = FF0OW01.FF0OWSDT; /* move begin to end*/
  FF0OW01.FF0OWXMM = FF0OW01.FF0OWXMM + 11; /* add 11 months*/
  if (FF0OW01.FF0OWXMM > 12)
    FF0OW01.FF0OWXMM = FF0OW01.FF0OWXMM - 12; /* subtract  12*/
    FF0OW01.FF0OWXYY = FF0OW01.FF0OWXYY + 1; /* add 1 to year*/
  end

   /* Verify that last season = the end month*/

  FF0OW00.FF0OWIX2 = FF0OW00.FF0OWNSS; /* last season number*/

  if (FF0OM001.FF0OMEMO[FF0OWIX2] != FF0OW01.FF0OWXMM)
    FFWREC.XXXMODID = "545"; /* Module identification*/
    set FF0OM001.FF0OMEMO[FF0OWIX2] cursor, bold; /* Highlight*/
    converseLib.validationFailed(447); /* last season must complete year*/
    return; /* return to previous routine*/
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

  FF0OW00.FF0OWEMO[1] = 0; /* reinit end months*/
  FF0OW00.FF0OWEMO[2] = 0;
  FF0OW00.FF0OWEMO[3] = 0;
  FF0OW00.FF0OWEMO[4] = 0;
   /* Verify that season end months are valid*/

  FF0OW00.FF0OWIX2 = 1; /* reset season index*/

  while (FF0OW00.FF0OWIX2 <= FF0OW00.FF0OWNSS)
    FF0OW00.FF0OWEMM[FF0OWIX2] = FF0OM001.FF0OMEMO[FF0OWIX2]; /* move month*/
    FF0OW00.FF0OWEYY[FF0OWIX2] = FF0OW01.FF0OWSYY; /* move year from begin month*/
    FF0OW00.FF0OWECC[FF0OWIX2] = FF0OW01.FF0OWSCC; /* move century from begin month*/
    if (FF0OW01.FF0OWSMM > FF0OW00.FF0OWEMM[FF0OWIX2]) /* bgn mo > end*/
      if (FF0OW00.FF0OWEYY[FF0OWIX2] == 99) /* increment century*/
        FF0OW00.FF0OWEYY[FF0OWIX2] = 00;
        FF0OW00.FF0OWECC[FF0OWIX2] = FF0OW00.FF0OWECC[FF0OWIX2] + 1;
      else
        FF0OW00.FF0OWEYY[FF0OWIX2] = FF0OW00.FF0OWEYY[FF0OWIX2] + 1; /* increment year*/
      end
    end
    FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 + 1; /* bump index*/
  end

  FF0OW00.FF0OWIX2 = 1;
  FF0OW00.FF0OWIX3 = 2;

  while (FF0OW00.FF0OWIX3 <= FF0OW00.FF0OWNSS)
    if (FF0OW00.FF0OWEMO[FF0OWIX2] /* sesn > next sesn*/
     >= FF0OW00.FF0OWEMO[FF0OWIX3])
      FFWREC.XXXMODID = "545"; /* Module identification*/
      set FF0OM001.FF0OMEMO[FF0OWIX2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(444); /* season must > following season*/
      return; /* return to previous routine*/
    end
    FF0OW00.FF0OWIX2 = FF0OW00.FF0OWIX2 + 1; /* increment sesn index*/
    FF0OW00.FF0OWIX3 = FF0OW00.FF0OWIX3 + 1; /* increment next sesn index*/
  end

end // end FF0O545

// Process valid input request
Function FF0O600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  FFWREC.XPCCD = FF0OM001.XPCCD; /* product category code*/
  XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
  XPCREC.XPCCD = FF0OM001.XPCCD; /* product category code*/
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
    FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  end
  FFWREC.YPGCD = FF0OM001.YPGCD; /* product type group code*/
  if (FF0OM001.YPGCD in YPGTBL.YPGCD)
    FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  end
                                   /* Product type grp desc*/

  if (FF0OW00.FF0OWSWR == "Y")
    FF0OW00.FF0OWP15 = " "; /* reset p15 safety*/
    exit stack;
  end
   /* ------------------------------------------------------------*/
   /* verify scroll left request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* display next season*/
    FFWREC.XXXMODID = "600";
    if (FF0OW00.FF0OWCPG > 1)
      FF0OW00.FF0OWCPG = FF0OW00.FF0OWCPG - 1;
      FFWREC.XXXMSGNO = 15; /* display message left scroll*/
    else
      FFWREC.XXXMSGNO = 23; /* unable to scroll left*/
    end

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* verify scroll right request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* display next season*/
    FFWREC.XXXMODID = "600";
    if (FF0OW00.FF0OWCPG < FF0OW01.FF0OWNPG) /* max pages*/
      FF0OW00.FF0OWCPG = FF0OW00.FF0OWCPG + 1;
      FFWREC.XXXMSGNO = 14; /* display message right scroll*/
    else
      FFWREC.XXXMSGNO = 24; /* unable to scroll right*/
    end

    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Apply database changes:  dfcast.vmcat001*/
   /* Compare curr to mstr*/
           /* curr to orig saved curr*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* save requested by user*/

    XX0XS01(); /* Obtain date and time*/


    /* ------------------------------------------------------------*/
              /* Process DFCAST.VMLINE01 table*/
    /* ------------------------------------------------------------*/

    FF0OW00.FF0OWDCF = "N"; /* data changed*/

    /* ------------------------------------------------------------*/
                 /* Process DFCAST.VMCAT001 table*/
    /* ------------------------------------------------------------*/

    FF0OW00.FF0OWIDX = 3; /* table index*/
    while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX)

      if (FF0OW01.FF0OWBDT[FF0OWIDX] >= FF0OW01.FF0OWCDT) /* ===> curr month*/

        if (FF0OW01.FF0OWUCS[FF0OWIDX] != FF0OW01.FF0OWUMS[FF0OWIDX]
         || FF0OW01.FF0OWUCS[FF0OWIDX] != FF0OW01.FF0OWOCS[FF0OWIDX]
         || FF0OW01.FF7BGINV[FF0OWIDX] != FF0OW01.FF0OWUBI[FF0OWIDX])
          FF0OW00.FF0OWDCF = "Y"; /* data updated*/

          set FF7REC empty;
          FF7REC.XPCCD = FFWREC.XPCCD; /* product category*/
          FF7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
          FF0O640(); /* select dfcast.vmcat001*/

          if (SQLCA.VAGen_SQLCODE == 0)
            FF0O650(); /* update dfcast.vmcat001*/
          else
            FF0O660(); /* add dfcast.vmcat001*/
          end

        end

      end /* ===> GE curr mo check*/

      FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1;

    end /* ===> While more month rows to process*/

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/

    if (FF0OW00.FF0OWDCF == "Y")

      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 32; /* Indicate update completed*/

      FF0OW00.FF0OWSWR = "Y"; /* request for data switch*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all changes*/

    end

  end

  if (converseVar.eventKey is pf15) /* sum close out fcsts for cat to line*/

    if (FF0OW00.FF0OWP15 == "Y") /* second press of PF15*/
      FF0O625(); /* sum close out qtys*/
      FF0OW00.FF0OWP15 = " ";
    else
      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 396; /* give warning - press again*/
      FF0OW00.FF0OWP15 = "Y";
    end
  else
    FF0OW00.FF0OWP15 = " ";
  end

  if (converseVar.eventKey is pf16) /* recalc current sales forecasts*/
    FF0OW00.FF0OWSWR = "Y"; /* request for data switch*/
  end
end // end FF0O600

// PF15 sum fcst to line
Function FF0O625()
   /* ------------------------------------------------------------*/
   /* sum close out forecasts for all categories in a line and*/
   /* replace closeout forecast quantity on vmline01*/
   /* ------------------------------------------------------------*/

  FF0O631(); /* select scan vffxrf01*/
  FF0O632(); /* fetch  scan 1 vffxrf01*/
  while (SQLCA.VAGen_SQLCODE == 0)
    FF0OW00.FF0OWIDX = 3; /* table index*/
    while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX)
      if (FF0OW01.FF0OWBDT[FF0OWIDX] >= FF0OW01.FF0OWCDT) /* ===> curr month*/
        set FF7REC empty;
        FF7REC.XPCCD = FF2REC.XPCCD;
        FF7REC.YPGCD = FF2REC.YPGCD;
        FF0O640(); /* select unique vmcat001*/
        if (SQLCA.VAGen_SQLCODE == 0)
          FF0OW00.FF0OWLTT[FF0OWIDX] = FF0OW00.FF0OWLTT[FF0OWIDX] + FF7REC.FF5BGFCT;
        end
      end /* ===> GE curr mo check*/
      FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1;
    end
    FF0O632(); /* fetch  scan 1 vffxrf01*/
  end
  FF0O633(); /* close  scan 1 vffxrf01*/
   /* ------------------------------------------------------------*/
   /* update the master line close out forecast for all months.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/
  FF0OW00.FF0OWIDX = 3; /* update vmline01 fcst months*/
  while (FF0OW00.FF0OWIDX <= FF0OW00.FF0OWMAX)
    if (FF0OW01.FF0OWBDT[FF0OWIDX] >= FF0OW01.FF0OWCDT) /* ===> curr month*/
      set FF5REC empty;
      FF5REC.FF4FCTMO = FF0OW01.FF0OWBDT[FF0OWIDX];
      FF0O171(); /* select unique vmline01*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FF0O634(); /* add vmline01*/
      else
        FF0O635(); /* update vmline01*/
      end
      FF0OW00.FF0OWLTT[FF0OWIDX] = 0;
    end /* ===> GE curr mo check*/
    FF0OW00.FF0OWIDX = FF0OW00.FF0OWIDX + 1;
  end
   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "625"; /* Module identification*/
  FFWREC.XXXMSGNO = 32; /* Indicate update completed*/
  FF0OW00.FF0OWSWR = "Y"; /* request for data switch*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

end // end FF0O625

// Select set VFFXRF01
Function FF0O631()
   /* ------------------------------------------------------------*/
   /* Select set dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/

   /* select all categories for the line*/
   /* line value already in ff2rec from previous call*/
  FF2REC.XPCCD = "*";
  FF2REC.YPGCD = "*";
  FF2REC.YSMXDV = "10";

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0O631

// Fetch set VFFXRF01
Function FF0O632()
   /* ------------------------------------------------------------*/
   /* fetch set dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "632"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0O632

// close set VFFXRF01
Function FF0O633()
   /* ------------------------------------------------------------*/
   /* close set dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  converseLib.validationFailed(1); /* Indicate system error*/
  FFWREC.XXXMODID = "633"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0O633

// Add vmline01
Function FF0O634()
   /* ------------------------------------------------------------*/
   /* Format key data*/
   /* ------------------------------------------------------------*/
  set FF5REC empty;

  FF5REC.XPLCD = FF2REC.XPLCD; /* line code*/
  FF5REC.FF4FCTMO = FF0OW01.FF0OWBDT[FF0OWIDX]; /* forecast month*/
  FF5REC.FF4BPFFL = "N"; /* buy flag*/
  FF5REC.FF5BGFCT = FF0OW00.FF0OWLTT[FF0OWIDX]; /* bg fcst qty*/
  FF5REC.FF5COFCT = 0; /* clsout fcst qty*/
  FF5REC.FF4RTRGT = 0; /* prod fcst qty*/
  FF5REC.ZZZSDT = XX0XW01.XX0XWDAT;
  FF5REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF5REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ------------------------------------------------------------*/
   /* Add dfcast.vmline01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3710" ("A ", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "634"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD    THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0O634

// Update VMLINE01
Function FF0O635()

   /* ------------------------------------------------------------*/
   /* Update VMLINE01 with summed close out forecast qty*/
   /* ------------------------------------------------------------*/

  FF5REC.FF5BGFCT = FF0OW00.FF0OWLTT[FF0OWIDX]; /* vmline bg fcst*/
  FF5REC.FF4FCTMO = FF0OW01.FF0OWBDT[FF0OWIDX]; /* fcst month*/
  FF5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* update dfcast.vmline01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3710" ("U ", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      FF0OW00.FF0OWSWR = "Y"; /* request for data*/
      FFWREC.XXXMODID = "635";
      FFWREC.XXXMSGNO = 20; /* indicate updated by another*/
      exit stack;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "635"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0O635

// select unique dfcast.vmcat001
Function FF0O640()
   /* ------------------------------------------------------------*/
   /* Format key data*/
   /* ------------------------------------------------------------*/

  FF7REC.FF4FCTMO = FF0OW01.FF0OWBDT[FF0OWIDX]; /* date*/
  FF7REC.XCTCD = "USA "; /* country*/
  FF7REC.YSMXDV = "10"; /* division domestic*/

   /* ------------------------------------------------------------*/
   /* Select unique dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "640"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FF0O640

// Update dfcast.vmcat001 row
Function FF0O650()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

   /* cur sls fcst qty/begin inventory*/

  if (FF0OW01.FF0OWBDT[FF0OWIDX] == FF0OW01.FF0OWCDT) /* curr mo*/
    FF0OW01.FF0OWUCS[FF0OWIDX] = FF0OW01.FF0OWUCS[FF0OWIDX]                              + FF0OW00.FF0OWCOV; /* add carryover back*/
  end
  FF7REC.FF5BGFCT = FF0OW01.FF0OWUCS[FF0OWIDX];
  FF7REC.FF7BGINV = FF0OW01.FF7BGINV[FF0OWIDX];

  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* load saved change date*/

  FF7REC.ZZZCHGCT = FF0OW01.ZZZCHGCT[FF0OWIDX]; /* saved change count*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF0OW00.FF0OWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "650"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "650"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VMCAT001 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0O650

// add fdcast.vmcat001 row
Function FF0O660()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty;

  FF7REC.FF4FCTMO = FF0OW01.FF0OWBDT[FF0OWIDX]; /* date*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF7REC.XCTCD = "USA "; /* country*/
  FF7REC.YSMXDV = "10"; /* division domestic*/
  FF7REC.FF7FRZFL = "N";
  FF7REC.FF7CBYFL = "N";
  FF7REC.FF7PBYFL = "N";
  FF7REC.FF7CATFL = "N";

  if (FFWREC.YPGCD == "01") /* If inlines*/
    FF7REC.FF7FURAT = 0;
    FF7REC.FF7FLLRT = 92;
  else
    if (FFWREC.YPGCD == "02") /* If makeups*/
      FF7REC.FF7FURAT = 100;
      FF7REC.FF7FLLRT = 100;
    end
  end

   /* cur sls fcst qty/begin inventory*/

  FF7REC.FF5BGFCT = FF0OW01.FF0OWUCS[FF0OWIDX];
  FF7REC.FF7BGINV = FF0OW01.FF7BGINV[FF0OWIDX];

  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ------------------------------------------------------------*/
   /* add dfcast.vmcat001 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "660"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VMCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0O660

// Get FFCTL data
Function FF0OS05()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffctl01 table row*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0OS05

// Calc cur bus & buy dates
Function FF0OS07()
   /* ------------------------------------------------------------*/
     /* Curr month calculation , stored in FF0OW01.FF0OWCDT*/
   /* ------------------------------------------------------------*/

  if (FF1REC.FF1IVCDT != 0) /* ===> Invoice cutoff date*/
    FF0OW00.FF0OWDT1 = FF1REC.FF1IVCDT;

    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* ===> curr >  ivc date*/
      FF0OW01.FF0OWCDT = FF0OW00.FF0OWCY1;
    else

      if (FF0OW00.FF0OWMM1 == 1)
        FF0OW00.FF0OWMM1 = 12;

        if (FF0OW00.FF0OWYY1 == 0)
          FF0OW00.FF0OWYY1 = 99;
          FF0OW00.FF0OWCC1 = FF0OW00.FF0OWCC1 - 1;
          FF0OW01.FF0OWCDT = FF0OW00.FF0OWCY1;
        else
          FF0OW00.FF0OWYY1 = FF0OW00.FF0OWYY1 - 1;
          FF0OW01.FF0OWCDT = FF0OW00.FF0OWCY1;
        end

      else
        FF0OW00.FF0OWMM1 = FF0OW00.FF0OWMM1 - 1;
        FF0OW01.FF0OWCDT = FF0OW00.FF0OWCY1;
      end

    end
  else
    FF0OW01.FF0OWCDT = 0;
  end


   /* ------------------------------------------------------------*/
     /* Buy month calculation ,*/
   /* ------------------------------------------------------------*/

  FF0OW00.FF0OWWBD = FF1REC.FF1FUTDT;
  FF0OW00.FF0OWFMO = FF0OW00.FF0OWWBM;
  FF0OW00.FF0OWFMM = FF0OW00.FF0OWFMM + 5;
  /* begin tcs*/
  if (FF0OW00.FF0OWFMM > 12)
    FF0OW00.FF0OWFMM = FF0OW00.FF0OWFMM - 12;
    if (FF0OW00.FF0OWFYY == 99)
      FF0OW00.FF0OWFCC = FF0OW00.FF0OWFCC + 1;
      FF0OW00.FF0OWFYY = 00;
    else
      FF0OW00.FF0OWFYY = FF0OW00.FF0OWFYY + 1;
    end
  end
  /* end tcs*/

  FF0OW01.FF0OWBYD = FF0OW00.FF0OWFCT; /* buy month date*/


end // end FF0OS07

//*** RECORD=FF0OW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// FF210 MDANGE 1/17/91
//  Add FF0OWLTT accumulator for bgrade fcst quantity for all
//  categories for the line.
//  Add FF0OWP15 flag for safety on PF15.
//  categories for the line.
//  Add FF0OWHDT hold date for comparing beginning to current.
// ***********************
Record FF0OW00 type basicRecord
  10 FF0OWDCF FF0OWDCF ; 
  10 FF0OWERF FF0OWERF ; 
  10 FF0OWCHG FF0OWCHG ; 
  10 FF0OWSWR FF0OWSWR ; 
  10 FF0OWSWF FF0OWSWF ; 
  10 FF0OWP15 FF0OWP15 ; 
  10 FF0OWCPG FF0OWCPG ; 
  10 FF0OWLTT FF0OWLTT [26] ; 
  10 FF0OWNSS FF0OWNSS ; 
  10 FF0OWEMO FF0OWEMO [4] ; 
    15 FF0OWECC FF0OWECC ; 
    15 FF0OWEYY FF0OWEYY ; 
    15 FF0OWEMM FF0OWEMM ; 
  10 FF0OWNM1 FF0OWNM1 ; 
  10 FF0OWNM2 FF0OWNM2 ; 
  10 FF0OWNM3 FF0OWNM3 ; 
  10 FF0OWNM4 FF0OWNM4 ; 
  10 FF0OWMTL FF0OWMTL ; 
  10 FF0OWMAX FF0OWMAX ; 
  10 FF0OWIDX FF0OWIDX ; 
  10 FF0OWLIX FF0OWLIX ; 
  10 FF0OWIXM FF0OWIXM ; 
  10 FF0OWPIX FF0OWPIX ; 
  10 FF0OWPGX FF0OWPGX ; 
  10 FF0OWMIX FF0OWMIX ; 
  10 FF0OWIX1 FF0OWIX1 ; 
  10 FF0OWIX2 FF0OWIX2 ; 
  10 FF0OWIX3 FF0OWIX3 ; 
  10 FF0OWIX4 FF0OWIX4 ; 
  10 FF0OWHDG FF0OWHDG ; 
    15 FF0OWHDY FF0OWHDY ; 
    15 FF0OWHDS FF0OWHDS ; 
    15 FF0OWHDM FF0OWHDM ; 
  10 FF0OWFCT FF0OWFCT ; 
    15 * num(3) ; 
    15 FF0OWFMO FF0OWFMO ; 
      20 FF0OWFCC FF0OWFCC ; 
      20 FF0OWFYM FF0OWFYM ; 
        25 FF0OWFYY FF0OWFYY ; 
        25 FF0OWFMM FF0OWFMM ; 
  10 FF0OWWBD FF0OWWBD ; 
    15 FF0OWWBM FF0OWWBM ; 
    15 * num(2) ; 
  10 FF0OWADJ FF0OWADJ ; 
  10 FF0OWDT1 FF0OWDT1 ; 
    15 * num(1) ; 
    15 FF0OWCY1 FF0OWCY1 ; 
      20 FF0OWCC1 FF0OWCC1 ; 
      20 FF0OWYY1 FF0OWYY1 ; 
      20 FF0OWMM1 FF0OWMM1 ; 
    15 FF0OWDD1 FF0OWDD1 ; 
  10 FF0OWHDT FF0OWHDT ; 
    15 FF0OWHCC FF0OWHCC ; 
    15 FF0OWHYM FF0OWHYM ; 
      20 FF0OWHYY FF0OWHYY ; 
      20 FF0OWHMM FF0OWHMM ; 
  10 FF0OWKD1 FF0OWKD1 ; 
    15 FF0OWKC1 FF0OWKC1 ; 
    15 FF0OWKM1 FF0OWKM1 ; 
  10 FF0OWKD2 FF0OWKD2 ; 
    15 FF0OWKC2 FF0OWKC2 ; 
    15 FF0OWKM2 FF0OWKM2 ; 
  10 FF0OWPDT FF0OWPDT ; 
    15 FF0OWPCC FF0OWPCC ; 
    15 FF0OWPYM FF0OWPYM ; 
      20 FF0OWPYY FF0OWPYY ; 
      20 FF0OWPMM FF0OWPMM ; 
  10 FF0OWCOV FF0OWCOV ; 
end // end FF0OW00

//*** RECORD=FF0OW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// MDANGE FF210 1/29/91
//  Add FF0NWSDT to hold beginning date from screen.
// ***********************
Record FF0OW01 type basicRecord
  5 FF0OWGP1 FF0OWGP1 ; 
    10 CACHGFL CACHGFL ; 
    10 FF0OWNPG FF0OWNPG ; 
    10 FF0OWMNS FF0OWMNS [8] ; 
    10 FF0OWTMP FF0OWTMP [10] ; 
    10 FF0OWMPG FF0OWMPG [10] ; 
    10 FF0OWCDT FF0OWCDT ; 
      15 FF0OWCCC FF0OWCCC ; 
      15 FF0OWCYM FF0OWCYM ; 
        20 FF0OWCYY FF0OWCYY ; 
        20 FF0OWCMM FF0OWCMM ; 
    10 FF0OWSDT FF0OWSDT ; 
      15 FF0OWSCC FF0OWSCC ; 
      15 FF0OWSYM FF0OWSYM ; 
        20 FF0OWSYY FF0OWSYY ; 
        20 FF0OWSMM FF0OWSMM ; 
    10 FF0OWXDT FF0OWXDT ; 
      15 FF0OWXCC FF0OWXCC ; 
      15 FF0OWXYM FF0OWXYM ; 
        20 FF0OWXYY FF0OWXYY ; 
        20 FF0OWXMM FF0OWXMM ; 
    10 FF0OWBYD FF0OWBYD ; 
    10 XLCCD XLCCD ; 
    10 FF0OWBMO FF0OWBMO [26] ; 
      15 FF0OWPGN FF0OWPGN ; 
      15 FF0OWMOL FF0OWMOL ; 
      15 FF0OWHDM FF0OWHDM ; 
      15 FF0OWHDY FF0OWHDY ; 
      15 FF0OWBDT FF0OWBDT ; 
      15 FH1PAQTY FH1PAQTY ; 
      15 FF0OWPAL FF0OWPAL ; 
      15 FF0OWPAX FF0OWPAX ; 
      15 FH1ALQTY FH1ALQTY ; 
      15 FF0OWALC FF0OWALC ; 
      15 FF0OWALX FF0OWALX ; 
      15 FH2SHP FH2SHP ; 
      15 FF0OWINV FF0OWINV ; 
      15 FF0OWINX FF0OWINX ; 
      15 FF0OWOCS FF0OWOCS ; 
      15 FF0OWOCL FF0OWOCL ; 
      15 FF0OWUCS FF0OWUCS ; 
      15 FF0OWCSL FF0OWCSL ; 
      15 FF0OWUMS FF0OWUMS ; 
      15 FF0OWMSL FF0OWMSL ; 
      15 FF7BGPCT FF7BGPCT ; 
      15 FF7BGINV FF7BGINV ; 
      15 FF0OWUBI FF0OWUBI ; 
      15 FF0OWBIN FF0OWBIN ; 
      15 FF0OWUBD FF0OWUBD ; 
      15 FF0OWBPD FF0OWBPD ; 
      15 FF0OWUBF FF0OWUBF ; 
      15 FF0OWBPF FF0OWBPF ; 
      15 FF6PRFCT FF6PRFCT ; 
      15 FF7CBYFL FF7CBYFL ; 
      15 FG4ONORD FG4ONORD ; 
      15 FF0OWUSU FF0OWUSU ; 
      15 FF0OWSPY FF0OWSPY ; 
      15 FF0OWUBS FF0OWUBS ; 
      15 FF0OWBSH FF0OWBSH ; 
      15 FF0OWUEI FF0OWUEI ; 
      15 FF0OWEIN FF0OWEIN ; 
      15 ZZZCHGCT ZZZCHGCT ; 
    10 FF0OWSUB FF0OWSUB [10] ; 
      15 FF0OWUSP FF0OWUSP ; 
      15 FF0OWSPA FF0OWSPA ; 
      15 FF0OWSPX FF0OWSPX ; 
      15 FF0OWUSA FF0OWUSA ; 
      15 FF0OWSAL FF0OWSAL ; 
      15 FF0OWSAX FF0OWSAX ; 
      15 FF0OWUSI FF0OWUSI ; 
      15 FF0OWSIN FF0OWSIN ; 
      15 FF0OWSIX FF0OWSIX ; 
      15 FF0OWUSC FF0OWUSC ; 
      15 FF0OWSCS FF0OWSCS ; 
      15 FF0OWUSM FF0OWUSM ; 
      15 FF0OWSMS FF0OWSMS ; 
      15 FF0OWUSB FF0OWUSB ; 
      15 FF0OWSBI FF0OWSBI ; 
      15 FF0OWUSD FF0OWUSD ; 
      15 FF0OWSBD FF0OWSBD ; 
      15 FF0OWUSF FF0OWUSF ; 
      15 FF0OWSBF FF0OWSBF ; 
      15 FF0OWUSS FF0OWUSS ; 
      15 FF0OWSSP FF0OWSSP ; 
      15 FF0OWUSL FF0OWUSL ; 
      15 FF0OWSBL FF0OWSBL ; 
      15 FF0OWUSE FF0OWUSE ; 
      15 FF0OWSEI FF0OWSEI ; 
    10 FF0OWTOT FF0OWTOT ; 
      15 FF0OWUGP FF0OWUGP ; 
      15 FF0OWGPA FF0OWGPA ; 
      15 FF0OWUGA FF0OWUGA ; 
      15 FF0OWGAL FF0OWGAL ; 
      15 FF0OWUGI FF0OWUGI ; 
      15 FF0OWGIN FF0OWGIN ; 
      15 FF0OWUGC FF0OWUGC ; 
      15 FF0OWGCS FF0OWGCS ; 
      15 FF0OWUGM FF0OWUGM ; 
      15 FF0OWGMS FF0OWGMS ; 
      15 FF0OWUGB FF0OWUGB ; 
      15 FF0OWGBI FF0OWGBI ; 
      15 FF0OWUGD FF0OWUGD ; 
      15 FF0OWGBD FF0OWGBD ; 
      15 FF0OWUGF FF0OWUGF ; 
      15 FF0OWGBF FF0OWGBF ; 
      15 FF0OWUGS FF0OWUGS ; 
      15 FF0OWGSP FF0OWGSP ; 
      15 FF0OWUGL FF0OWUGL ; 
      15 FF0OWGBL FF0OWGBL ; 
      15 FF0OWUGE FF0OWUGE ; 
      15 FF0OWGEI FF0OWGEI ; 
    10 FF0OWLNR FF0OWLNR ; 
    10 FF0OWCLR FF0OWCLR ; 
    10 FF5BGFCT FF5BGFCT ; 
    10 FF6SLFCT FF6SLFCT ; 
end // end FF0OW01

// adjustment quantity
DataItem FF0OWADJ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fh-aloc-qty thousands
DataItem FF0OWALC char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fh-aloc-qty thous num
DataItem FF0OWALX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season begin dates
DataItem FF0OWBDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ff_bgrd_inv thousands
DataItem FF0OWBIN char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin month range qtys
DataItem FF0OWBMO char(193)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// b-grade prod thousands
DataItem FF0OWBPD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// b-grade prod fcst thousands
DataItem FF0OWBPF char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// balance to ship thousands
DataItem FF0OWBSH char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy month date ccyymm
DataItem FF0OWBYD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FF0OWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current century
DataItem FF0OWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current year/month
DataItem FF0OWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update data flag
DataItem FF0OWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales fcst ratio      cat/line
DataItem FF0OWCLR decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current month
DataItem FF0OWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// curr mo - 1 carryover amount
DataItem FF0OWCOV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page number
DataItem FF0OWCPG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cur b-grade fcst thousands
DataItem FF0OWCSL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current work ccyymm
DataItem FF0OWCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current year/month
DataItem FF0OWCYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current year
DataItem FF0OWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data change flag
DataItem FF0OWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work day
DataItem FF0OWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FF0OWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// end century
DataItem FF0OWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end inverntory thousands
DataItem FF0OWEIN char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end month
DataItem FF0OWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entered season end months
DataItem FF0OWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem FF0OWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year
DataItem FF0OWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin century
DataItem FF0OWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF FCST date
DataItem FF0OWFCT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// begin month
DataItem FF0OWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin ccyymm
DataItem FF0OWFMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FF0OWFYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year
DataItem FF0OWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc tot thousands
DataItem FF0OWGAL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// b-grade prod thousands
DataItem FF0OWGBD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// b-grade prod fcst thousands
DataItem FF0OWGBF char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg inv tot thousands
DataItem FF0OWGBI char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// balance to ship tot thousands
DataItem FF0OWGBL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cur b-grade fcst tot thousands
DataItem FF0OWGCS char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end inverntory tot thousands
DataItem FF0OWGEI char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice tot thousands
DataItem FF0OWGIN char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mstr b-grd fcst tot thousands
DataItem FF0OWGMS char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0OWGP1 char(6708)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pre alloc tot thousands
DataItem FF0OWGPA char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// supply tot thousands
DataItem FF0OWGSP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold century
DataItem FF0OWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map display field yy/mm
DataItem FF0OWHDG char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading month
DataItem FF0OWHDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem FF0OWHDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold date
DataItem FF0OWHDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// heading year
DataItem FF0OWHDY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold month
DataItem FF0OWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold yymm
DataItem FF0OWHYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold year
DataItem FF0OWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FF0OWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice thousands
DataItem FF0OWINV char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice thous num
DataItem FF0OWINX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0OWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0OWIX2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0OWIX3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0OWIX4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max index
DataItem FF0OWIXM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0OWKC1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0OWKC2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 1
DataItem FF0OWKD1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 2
DataItem FF0OWKD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem FF0OWKM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem FF0OWKM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load index
DataItem FF0OWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales fcst ratio line typ/line
DataItem FF0OWLNR decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Acumm -total bgrade fcst qty
DataItem FF0OWLTT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max months
DataItem FF0OWMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month index
DataItem FF0OWMIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FF0OWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of months each season
DataItem FF0OWMNS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month location
DataItem FF0OWMOL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month per page
DataItem FF0OWMPG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mstr b-grade fcst thousands
DataItem FF0OWMSL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field for map totals
DataItem FF0OWMTL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FF0OWNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FF0OWNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 3
DataItem FF0OWNM3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent numeric work field
DataItem FF0OWNM4 decimal(6,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of pages
DataItem FF0OWNPG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of season end months
DataItem FF0OWNSS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old cur b-grade fcst thousands
DataItem FF0OWOCL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old/saved cur b-grade fcst
DataItem FF0OWOCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Safety for PF15
DataItem FF0OWP15 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fh-pral-qty thousands
DataItem FF0OWPAL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fh-pral-qty thous num
DataItem FF0OWPAX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev century
DataItem FF0OWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous month (curr mo - 1)
DataItem FF0OWPDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pg number
DataItem FF0OWPGN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page index
DataItem FF0OWPGX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process index
DataItem FF0OWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev month
DataItem FF0OWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev year and month
DataItem FF0OWPYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev year
DataItem FF0OWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc sub thousands
DataItem FF0OWSAL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alloc sub thous num
DataItem FF0OWSAX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// b-grade prod thousands
DataItem FF0OWSBD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// b-grade prod fcst thousands
DataItem FF0OWSBF char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg inv sub thousands
DataItem FF0OWSBI char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// balance to ship sub thousands
DataItem FF0OWSBL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start century
DataItem FF0OWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cur b-grade fcst sub thousands
DataItem FF0OWSCS char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start/beg date from screen
DataItem FF0OWSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end inverntory subthousands
DataItem FF0OWSEI char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice sub thousands
DataItem FF0OWSIN char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice sub thous num
DataItem FF0OWSIX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start month
DataItem FF0OWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mstr b-grd fcst sub thousands
DataItem FF0OWSMS char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pre alloc sub thousands
DataItem FF0OWSPA char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pre alloc sub thous num
DataItem FF0OWSPX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// supply thousands
DataItem FF0OWSPY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// supply sub thousands
DataItem FF0OWSSP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season subtotals
DataItem FF0OWSUB char(148)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0OWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0OWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start year/month
DataItem FF0OWSYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start year
DataItem FF0OWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal on page Y or N
DataItem FF0OWTMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season total
DataItem FF0OWTOT char(121)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// b-grade prod due unit
DataItem FF0OWUBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// b-grade prod fcst unit
DataItem FF0OWUBF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save begin inv
DataItem FF0OWUBI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// balance to ship
DataItem FF0OWUBS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cur b-grade fcst
DataItem FF0OWUCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end inventory
DataItem FF0OWUEI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc tot units
DataItem FF0OWUGA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beg inv tot unit
DataItem FF0OWUGB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cur b-grade fcst tot units
DataItem FF0OWUGC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// b-grade prod due unit
DataItem FF0OWUGD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end inventory tot unit
DataItem FF0OWUGE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// b-grade prod fcst unit
DataItem FF0OWUGF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice tot units
DataItem FF0OWUGI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// balance to ship tot units
DataItem FF0OWUGL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mstr b-grade fcst tot units
DataItem FF0OWUGM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre alloc tot units
DataItem FF0OWUGP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// supply tot units
DataItem FF0OWUGS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mstr b-grade fcst
DataItem FF0OWUMS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc sub units
DataItem FF0OWUSA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// balance to ship sub units
DataItem FF0OWUSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cur b-grade fcst sub units
DataItem FF0OWUSC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// b-grade prod due unit
DataItem FF0OWUSD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end inventory sub unit
DataItem FF0OWUSE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// b-grade prod fcst unit
DataItem FF0OWUSF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice sub units
DataItem FF0OWUSI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// balance to ship sub units
DataItem FF0OWUSL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mstr b-grade fcst sub units
DataItem FF0OWUSM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// supply
DataItem FF0OWUSP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// supply sub units
DataItem FF0OWUSS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// supply
DataItem FF0OWUSU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work buy date ccyymmdd
DataItem FF0OWWBD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work buy ccyymm
DataItem FF0OWWBM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end century
DataItem FF0OWXCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end date
DataItem FF0OWXDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end month
DataItem FF0OWXMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year/month
DataItem FF0OWXYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year
DataItem FF0OWXYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FF0OWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

