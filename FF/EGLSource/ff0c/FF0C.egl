package ff0c;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0C ****
// This application displays existing future percents and fore-
// casted fill rates for the entered category or style group.
// The user is then allowed to enter an adjustment for any of
// these percents or rates.  The user may also enter adjust-
// ments for safety stock factors for any of the months shown.
// 
// The user can enter this application via the S.R. Menu
// (FF0A), the Glogal Select screen (FF0S), the S/R Global
// Work Sheet screen (FF0H), or Fast Path.
// 
// The user must specify the 'type' and 'category', or the
// 'type' and 'style group.  if he doesn't know the code for a
// 'type' or a 'category', he can enter a '?' to ask for help.
// The program will bring up a pop-up window to show a list of
// 'categories' or 'types', then he can make a selection from
// the window screen.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/15/89  RHETRI  New application.
//  FF#59   07/16/90  LDELUH  Add wildcard of actl buy mo to
//                            call to FF2930.
//   FIX    09/06/90  LDELUH  Fix truncation of fill rate.
//   FIX    10/10/90  trober  use values in mcat001 when
//                            date gt main buy month.
//  FF#201  12/21/90  SFORD   Add ending month for FF2930 call
//          12/18/96  CWHIT1  YR 2000 FIX, FF0C115
// *********************
Program FF0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0CW00 FF0CW00; // record
  FF0CW01 FF0CW01; // record
  FF0CW02 FF0CW02; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFTREC FFTREC; // record
  FFUREC FFUREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use FF0CM.FF0CM001,  // forms
      FF0CM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0CM001 initial; /* M001 input/output*/
    set FF0CW00 empty; /* Working storage*/
    set FF0CW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0CW00.FF0CWSWF = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* If type is missing, default it to '01'.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ") /* If type is missing*/
      FFWREC.YPGCD = "01"; /* default type to 01*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* If complete key exists, request data.  (Type has default.)*/
     /* ------------------------------------------------------------*/

    if (FFWREC.XPCCD > " " /* Category exits*/
     || FFWREC.SYBSTGNB > " ") /* Style grp exists*/

      FF0CW00.FF0CWSWR = "Y"; /* Data requested*/

    else

      FF0CW00.FF0CWSWR = "N"; /* No data requested*/

    end

     /* ------------------------------------------------------------*/
     /* Clear otehr FFWREC levels not used in FF0C.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPLCD = "  ";
    FFWREC.SY1STNBR = "      ";
    FFWREC.SY2CLRID = "   ";
    FFWREC.XDMCD = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0C001; /* Converse the main process*/


    FF0C001: FF0C001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0C001; /* Converse the main process*/


  end // end main
end // end FF0C

// Inquire/maintain a table row
Function FF0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0C100(); /* Obtain the data to display*/

  FF0C200(); /* Format and display the map*/

  FF0C300(); /* Check attention identifier*/

  FF0C400(); /* Reset fields to normal intensity*/

  FF0C500(); /* Verify the entered data*/

  FF0C600(); /* Process valid input request*/


end // end FF0C001

// Obtain the data to display
Function FF0C100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0CW00.FF0CWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area*/
   /* ------------------------------------------------------------*/

  set FF0CW01 empty; /* M001 display storage*/

   /* ------------------------------------------------------------*/
   /* Expand date range.*/
   /* ------------------------------------------------------------*/

  FF0C110(); /* expand range to set of yymm*/

   /* ------------------------------------------------------------*/
   /* Initialize the data found switch.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWDSW = "N"; /* clear data found switch*/

   /* ------------------------------------------------------------*/
   /* Clear work fields.*/
   /* ------------------------------------------------------------*/

  set FF0CW02 empty; /* clear storage area*/

   /* ------------------------------------------------------------*/
   /* Obtain data for calculations.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.SYBSTGNB != " ") /* Style group exists*/

    FF0C120(); /* Obtain style grp sum work sheet*/

  else

    FF0C130(); /* Obtain cat sum work sheet*/

  end

   /* ------------------------------------------------------------*/
   /* Check to see if data was found.*/
   /* ------------------------------------------------------------*/

  if (FF0CW00.FF0CWDSW == "Y") /* data found*/

    FF0C140(); /* Calculate fields*/

  else

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data found*/

  end

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete,*/
   /* and modifiable data obtained.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    FF0CW00.FF0CWSWR = "N"; /* Request for data switch*/
    FF0CW01.CACHGFL = "Y"; /* Indicate modifiable data*/
  end


end // end FF0C100

// Expand range to set of YYMM
Function FF0C110()
   /* ------------------------------------------------------------*/
   /* If category was not provided, call FFSTY for it.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XPCCD == " ") /* If category is blank*/

    /* ------------------------------------------------------------*/
     /* Clear the row storage area.*/
    /* ------------------------------------------------------------*/

    set FF3REC empty; /* clear DFCAST.VFFSTY01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFSTY01.*/
    /* ------------------------------------------------------------*/

    FF3REC.SYBSTGNB = FFWREC.SYBSTGNB; /* style group*/
    FF3REC.YSMXDV = "10"; /* div group*/
    FF3REC.XLCCD = "10"; /* life cycle*/
    FF3REC.YPGCD = FFWREC.YPGCD; /* Type group*/

    /* ------------------------------------------------------------*/
     /* Call DFCAST.VFFSTY01.*/
    /* ------------------------------------------------------------*/

    FF0C111(); /* Open FFSTY*/

    FF0C112(); /* Fetch FFSTY*/

    FF0CW00.XPCCD = FF3REC.XPCCD; /* Get category code*/
    FFWREC.XPLCD = FF3REC.XPLCD;

    FF0C113(); /* Close FFSTY*/

    /* ------------------------------------------------------------*/
     /* Get first season begin month from FFXRF01.*/
    /* ------------------------------------------------------------*/

    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/

    FF2REC.XPCCD = FF0CW00.XPCCD; /* category from call*/
    FF2REC.YPGCD = FFWREC.YPGCD; /* type*/
    FF2REC.YSMXDV = FFWREC.YSMXDV; /* default is 10*/

  else

    /* ------------------------------------------------------------*/
     /* Get first season begin month from FFXRF01.*/
    /* ------------------------------------------------------------*/

    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01 with user data.*/
    /* ------------------------------------------------------------*/

    FF2REC.XPCCD = FFWREC.XPCCD; /* category*/
    FF2REC.YPGCD = FFWREC.YPGCD; /* type*/
    FF2REC.YSMXDV = FFWREC.YSMXDV; /* default is 10*/

  end

   /* ------------------------------------------------------------*/
   /* Select DFCAST.VFFXRF01.*/
   /* ------------------------------------------------------------*/

  FF0C114(); /* Select FFXRF*/

  FF0CW00.FF0CWHDT = FF2REC.FF2SEASN; /* hold 1st beg mo to expand*/
  FF0CW00.FF0CWBDT = FF2REC.FF2SEASN; /* hold 1st season beg mo*/
  FFWREC.FFABEGMO = FF2REC.FF2SEASN;
  FFWREC.XPLCD = FF2REC.XPLCD;

   /* ------------------------------------------------------------*/
   /* Determine the dates in the range.*/
   /* ------------------------------------------------------------*/

  FF0C115(); /* Determine dates*/

   /* ------------------------------------------------------------*/
   /* Determine which months to use.*/
   /* ------------------------------------------------------------*/

  FF0C116(); /* Determine valid months*/

end // end FF0C110

// Open DFCAST.VFFSTY01
Function FF0C111()
   /* ------------------------------------------------------------*/
   /* Open FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C111

// Fetch DFCAST.VFFSTY01
Function FF0C112()
   /* ------------------------------------------------------------*/
   /* Fetch FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "122"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C112

// Close DFCAST.VFFSTY01
Function FF0C113()
   /* ------------------------------------------------------------*/
   /* Close the cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "123"; /* Module identification*/

  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXSTY1"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C113

// Select DFCAST.VFFXRF01
Function FF0C114()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.  This row*/
   /* must be there, we verified that it was there in the edit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "124"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C114

// Load YYMM array with range
Function FF0C115()
   /* ------------------------------------------------------------*/
   /* Clear fields used for dates.*/
   /* ------------------------------------------------------------*/

  move 0 to FF0CW01.FF0CWRMO[1] for all; /* clear yymm*/

   /* ------------------------------------------------------------*/
   /* Load the first month.*/
   /* ------------------------------------------------------------*/

  FF0CW01.FF0CWRMO[1] = FF0CW00.FF0CWHDT; /* load yymm*/

   /* ------------------------------------------------------------*/
   /* Expand range to a set of YYMM and store in array.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWCNT = 1; /* set subscript to 1*/

  while (FF0CW00.FF0CWCNT <= 11) /* until hold month not less 11*/

    FF0CWCNT = FF0CWCNT + 1; /* add one to subscript*/

    /* ------------------------------------------------------------*/
     /* load array with the set of YYMM from the range.*/
    /* ------------------------------------------------------------*/

    if (FF0CW00.FF0CWHMM == 12) /* if hold month has reached 12*/

      if (FF0CW00.FF0CWHYY < 57) /* CK CENTURY*/
        FF0CW00.FF0CWHCC = 20;
      else
        FF0CW00.FF0CWHCC = 19;
      end
      FF0CW00.FF0CWHYY = FF0CW00.FF0CWHYY + 1; /* add one to year*/
      FF0CW00.FF0CWHMM = 01; /* move 01 to hold month*/

    else

      FF0CW00.FF0CWHMM = FF0CW00.FF0CWHMM + 1; /* add one to month*/

    end

    FF0CW01.FF0CWRMO[FF0CWCNT] = FF0CW00.FF0CWHDT; /* load yymm*/

  end

end // end FF0C115

// Determine valid months
Function FF0C116()
   /* ------------------------------------------------------------*/
   /* Get current date.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date*/

   /* ------------------------------------------------------------*/
   /* Check if each month in range is equal to or greater than*/
   /* the current month.  If not, do not use.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWCNT = 1; /* set subscript to 1*/

  while (FF0CW00.FF0CWCNT <= 12) /* while sub is not more than 12*/

    if (FF0CW01.FF0CWRMO[FF0CWCNT] == XX0XW01.XX0XWCYM) /* if mo is curr*/

      FF0CW00.FF0CWSTR = FF0CW00.FF0CWCNT; /* set start mo to sub*/

    end

    FF0CWCNT = FF0CWCNT + 1; /* add one to subscript*/

  end

  if (FF0CW00.FF0CWSTR == 0) /* if start is zero*/

    FF0CW00.FF0CWSTR = 1; /* set start mo to 1*/

  end


end // end FF0C116

// Obtain sty grp sum w/s
Function FF0C120()
   /* ------------------------------------------------------------*/
   /* Clear SWHDR01 & SWITM01 records.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* clear DFCAST.VSWHDR01 record*/
  set FFRREC empty; /* clear DFCAST.VSWITM01 record*/

   /* ------------------------------------------------------------*/
   /* Format keys for call to DFCAST.VSWHDR01.*/
   /* ------------------------------------------------------------*/

  FFQREC.XPCCD = "*"; /* category*/
  FFQREC.XPLCD = FFWREC.XPLCD; /* line*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* type group*/
  FFQREC.SYBSTGNB = FFWREC.SYBSTGNB; /* sty grp*/
  FFQREC.XWSCD = "01"; /* Work sheet type cd= currnt*/
  FFQREC.FFQMBYMO = -1; /* main buy month*/
  FFQREC.FFQABYMO = -1; /* actl buy month*/
  FFQREC.FFABEGMO = -1; /* season start month*/
  FFQREC.ZZZCHGDT = -1; /* change date*/
  FFQREC.ZZZCHGTM = -1; /* change time*/
  FFRREC.FF4FCTMO = FFWREC.FFABEGMO; /* beg fcst mo*/
  FFQREC.FFAENDMO = FFRREC.FF4FCTMO + 100; /* end fcst mo*/

   /* ------------------------------------------------------------*/
   /* Open summary work sheet cursor.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWSWS = "N"; /* Set eof switch*/
  FF0CW00.FF0CWCNT = 1; /* Month counter*/

  FF0CS01(); /* Open sum w/s csr*/
  FF0CS02(); /* Fetch first w/s csr*/

   /* ------------------------------------------------------------*/
   /* build table data*/
   /* ------------------------------------------------------------*/

  while (FF0CW00.FF0CWSWS == "N" /* process until eof*/
   && FF0CW00.FF0CWCNT <= 12)

    FF0CW00.FF0CWDSW = "Y"; /* Data found switch*/
    FF0CW02.FF0CWWKQ = 0; /* Clear work field*/
    FF0CW02.FF0CWCDF[FF0CWCNT] = FFRREC.FFRCDMFC; /* cur dmd fcst*/
    FF0CW02.FF0CWFRP[FF0CWCNT] = FFRREC.FF7FLLRT; /* fill rate %*/
    FF0CW01.FF0CWMBM[FF0CWCNT] = FFQREC.FFQMBYMO; /* main buy month*/
    if (FF0CW01.FF0CWRMO[FF0CWCNT] <= FFQREC.FFQMBYMO)
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRPFUDM; /* Pral fut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRAFUDM; /* Aloc fut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRIFUDM; /* Ivc fut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRPNFDM; /* Pral nfut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRANFDM; /* Aloc nfut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRINFDM; /* Ivc nfut*/
      FF0CW02.FF0CWAFT[FF0CWCNT] = FF0CW02.FF0CWWKQ; /* Act fut*/
    else
      FF0C125(); /* select unique dfcast.vmcat001 row*/
      FF0CW02.FF0CWAFT[FF0CWCNT] = FF7REC.FF7FURAT; /* Act fut*/
    end

    FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT + 1; /* add one to sub*/

    FF0CS02(); /* Fetch next sum w/s csr*/
  end

  FF0CS03(); /* close sum w/s csr*/


end // end FF0C120

// Obtain categroy data
Function FF0C125()
   /* ------------------------------------------------------------*/
   /* Clear vmcat001 record.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* clear DFCAST.VMCAT001 RECORD*/
  set FFFREC empty; /* clear io3700 parm record*/

   /* ------------------------------------------------------------*/
   /* Format keys for call to DFCAST.Vmcat001.*/
   /* ------------------------------------------------------------*/

  FF7REC.XPCCD = FFWREC.XPCCD; /* product category code*/
  FF7REC.YPGCD = FFQREC.YPGCD; /* product type code*/
  FF7REC.YSMXDV = "10"; /* division code*/
  FF7REC.XCTCD = "USA"; /* country code*/
  FF7REC.FF4FCTMO = FF0CW01.FF0CWRMO[FF0CWCNT]; /* forcast month*/
  FFFREC.FFFFUNCD = "S"; /* function code*/

  FF0CS04(); /* select unique row*/


end // end FF0C125

// Obtain cat sum w/s
Function FF0C130()
   /* ------------------------------------------------------------*/
   /* Clear SWHDR01 & SWITM01 records.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* clear DFCAST.VSWHDR01 record*/
  set FFRREC empty; /* clear DFCAST.VSWITM01 record*/

   /* ------------------------------------------------------------*/
   /* Format keys for call to DFCAST.VSWHDR01.*/
   /* ------------------------------------------------------------*/

  FFQREC.XPCCD = FFWREC.XPCCD; /* category*/
  FFQREC.XPLCD = FFWREC.XPLCD; /* line*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* type group*/
  FFQREC.SYBSTGNB = "*"; /* sty grp*/
  FFQREC.XWSCD = "01"; /* Work sheet type cd= currnt*/
  FFQREC.FFQMBYMO = -1; /* main buy month*/
  FFQREC.FFQABYMO = -1; /* actl buy month*/
  FFQREC.FFABEGMO = -1; /* season start month*/
  FFQREC.ZZZCHGDT = -1; /* change date*/
  FFQREC.ZZZCHGTM = -1; /* change time*/
  FFRREC.FF4FCTMO = FFWREC.FFABEGMO; /* beg fcst mo*/
  FFQREC.FFAENDMO = FFRREC.FF4FCTMO + 100; /* end fcst mo*/

   /* ------------------------------------------------------------*/
   /* Open summary work sheet cursor.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWSWS = "N"; /* Set sum w/s eof switch*/
  FF0CW00.FF0CWCNT = 1; /* Month counter*/

  FF0CS01(); /* Open sum w/s csr*/
  FF0CS02(); /* Fetch first sum w/s csr*/

   /* ------------------------------------------------------------*/
   /* build table data*/
   /* ------------------------------------------------------------*/

  while (FF0CW00.FF0CWSWS == "N"
   && FF0CW00.FF0CWCNT <= 12) /* Month counter*/

    FF0CW00.FF0CWDSW = "Y"; /* Data found switch*/
    FF0CW02.FF0CWWKQ = 0; /* Clear work field*/
    FF0CW02.FF0CWCDF[FF0CWCNT] = FFRREC.FFRCDMFC; /* cur dmd fcst*/
    FF0CW02.FF0CWFRP[FF0CWCNT] = FFRREC.FF7FLLRT; /* fill rate %*/
    FF0CW01.FF0CWMBM[FF0CWCNT] = FFQREC.FFQMBYMO; /* main buy month*/
    if (FF0CW01.FF0CWRMO[FF0CWCNT] <= FFQREC.FFQMBYMO)
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRPFUDM; /* Pral fut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRAFUDM; /* Aloc fut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRIFUDM; /* Ivc fut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRPNFDM; /* Pral nfut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRANFDM; /* Aloc nfut*/
      FF0CW02.FF0CWWKQ = FF0CW02.FF0CWWKQ + FFRREC.FFRINFDM; /* Ivc nfut*/
      FF0CW02.FF0CWAFT[FF0CWCNT] = FF0CW02.FF0CWWKQ; /* Act fut*/
    else
      FF0C125(); /* select unique dfcast.vmcat001 row*/
      FF0CW02.FF0CWAFT[FF0CWCNT] = FF7REC.FF7FURAT; /* fut-tot-rto*/
    end

    FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT + 1; /* add one to sub*/

    FF0CS02(); /* Fetch next sum w/s csr*/
  end

  FF0CS03(); /* close sum w/s csr*/

end // end FF0C130

// Calculate amounts
Function FF0C140()
   /* ------------------------------------------------------------*/
   /* Calculate fields.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWCNT = FF0CW00.FF0CWSTR; /* set counter to start*/

  while (FF0CW00.FF0CWCNT <= 12) /* while count is 12 or less*/

    /* ------------------------------------------------------------*/
     /* Calculate current future percent:*/

     /* ((curr dmd fcst - curr prop fcst) / curr dmd fcst) * 100*/
    /* ------------------------------------------------------------*/

    if (FF0CW01.FF0CWRMO[FF0CWCNT] <= FF0CW01.FF0CWMBM[FF0CWCNT])
      if (FF0CW02.FF0CWCDF[FF0CWCNT] > 0) /* If dmd fcst gt zero*/
        FF0CW02.FF0CWFDA = 0;
        FF0CW02.FF0CWFDA = FF0CW02.FF0CWAFT[FF0CWCNT];
        FF0CW02.FF0CWFDA = FF0CW02.FF0CWFDA * 100;
        if (FF0CW02.FF0CWFDA > 0)
          FF0CW02.FF0CWFDA = mathLib.round(FF0CW02.FF0CWFDA / FF0CW02.FF0CWCDF[FF0CWCNT], -mathLib.decimals(FF0CW02.FF0CWFDA));
          FF0CW01.FF0CWCFP[FF0CWCNT] = FF0CW02.FF0CWFDA; /* store*/
        end
      end
    else
      FF0CW02.FF0CWFDA = 0;
      FF0CW02.FF0CWFDA = FF0CW02.FF0CWAFT[FF0CWCNT];
      FF0CW01.FF0CWCFP[FF0CWCNT] = FF0CW02.FF0CWFDA; /* store*/
    end

    /* ------------------------------------------------------------*/
     /* Calculate forecasted fill rate:*/
    /* ------------------------------------------------------------*/

    FF0CW01.FF0CWFFR[FF0CWCNT] = mathLib.round(FF0CW02.FF0CWFRP[FF0CWCNT] * 1, -mathLib.decimals(FF0CW01.FF0CWFFR[FF0CWCNT]));

    /* ------------------------------------------------------------*/
     /* Increase counter*/
    /* ------------------------------------------------------------*/

    FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT + 1;

  end


end // end FF0C140

// Format and converse the map
Function FF0C200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0CW00.FF0CWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0CW00.FF0CWSWF == "Y") /* Map must be formatted*/
      FF0C210(); /* load headers*/
      if (FF0CW00.FF0CWDSW == "Y") /* data was found*/
        FF0C220(); /* load fields*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0CM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0CM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0CM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0CM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0CM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "    "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0CM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0CM001.CAITEM; /* Application data*/


end // end FF0C200

// Load the header info
Function FF0C210()
   /* ------------------------------------------------------------*/
   /* Clear the map.*/
   /* ------------------------------------------------------------*/

  set FF0CM001 initial; /* Clear map*/
  FF0CW00.FF0CWSWF = "N"; /* Format map switch*/

   /* ------------------------------------------------------------*/
   /* Load header information.*/
   /* ------------------------------------------------------------*/

  FF0CM001.YPGCD = FFWREC.YPGCD; /* type code*/
  FF0CM001.YPGABRV = FFWREC.YPGABRV; /* type name*/
  FF0CM001.XPCCD = FFWREC.XPCCD; /* category code*/
  FF0CM001.XPCABRV = FFWREC.XPCABRV; /* category name*/
  FF0CM001.SYBSTGNB = FFWREC.SYBSTGNB; /* style grp code*/
  FF0CM001.SYBSTGNM = FFWREC.SYBSTGNM; /* style grp name*/

   /* ------------------------------------------------------------*/
   /* Load column header, if there is data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (FF0CW00.FF0CWDSW == "Y") /* data was found*/

    FF0CW00.FF0CWCNT = FF0CW00.FF0CWSTR; /* set sub to start*/

    while (FF0CW00.FF0CWCNT <= 12) /* while cnt is less or equal 12*/

      FF0CM001.FF0CMRMO[FF0CWCNT] = FF0CW01.FF0CWRMO[FF0CWCNT];
      set FF0CM001.FF0CMRMO[FF0CWCNT] skip; /* make field visable*/

      FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT + 1; /* add 1 to sub*/

    end
  end


end // end FF0C210

// Load the field info
Function FF0C220()
   /* ------------------------------------------------------------*/
   /* Format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWCNT = FF0CW00.FF0CWSTR; /* set counter to zero*/

  set FF0CM001.FF0CMCFA[FF0CWSTR] cursor; /* Place cursor*/

  while (FF0CW00.FF0CWCNT <= 12) /* twelve months in range*/

    FF0CM001.FF0CMCFP[FF0CWCNT] = FF0CW01.FF0CWCFP[FF0CWCNT];
    set FF0CM001.FF0CMCFP[FF0CWCNT] skip; /* make visable*/

    FF0CM001.FF0CMCFA[FF0CWCNT] = FF0CW01.FF0CWCFA[FF0CWCNT];
    set FF0CM001.FF0CMCFA[FF0CWCNT] normal; /* make visable & enterable*/

    FF0CM001.FF0CMFFR[FF0CWCNT] = FF0CW01.FF0CWFFR[FF0CWCNT];
    set FF0CM001.FF0CMFFR[FF0CWCNT] skip; /* make visable*/

    FF0CM001.FF0CMFRA[FF0CWCNT] = FF0CW01.FF0CWFRA[FF0CWCNT];
    set FF0CM001.FF0CMFRA[FF0CWCNT] normal; /* make visable & enterable*/

    FF0CM001.FF0CMSSA[FF0CWCNT] = FF0CW01.FF0CWSSA[FF0CWCNT];
    set FF0CM001.FF0CMSSA[FF0CWCNT] normal; /* make visable & enterable*/

    FF0CM001.FF0CMSSB[FF0CWCNT] = FF0CW01.FF0CWSSB[FF0CWCNT];
    set FF0CM001.FF0CMSSB[FF0CWCNT] normal; /* make visable & enterable*/

    FF0CM001.FF0CMSSC[FF0CWCNT] = FF0CW01.FF0CWSSC[FF0CWCNT];
    set FF0CM001.FF0CMSSC[FF0CWCNT] normal; /* make visable & enterable*/

    FF0CM001.FF0CMSSD[FF0CWCNT] = FF0CW01.FF0CWSSD[FF0CWCNT];
    set FF0CM001.FF0CMSSD[FF0CWCNT] normal; /* make visable & enterable*/

    FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT + 1; /* add to counter*/

  end


end // end FF0C220

// Check attention identifier
Function FF0C300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF0CW00.FF0CWSWR == "Y") /* Data was requested*/
      set FF0CW01 empty; /* clear display storage*/
    end

    FF0CW00.FF0CWSWF = "Y"; /* Format the map switch*/
    FF0CW00.FF0CWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0CM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf14) /* or PF14 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0CM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FF0S"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* determine if either pf15 or pf16 were entered.            -*/
   /* change demand or change future                            -*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   || converseVar.eventKey is pf16) /* or PF16 was pressed*/

    return; /* return to previous process*/

  end
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

end // end FF0C300

// Reset highlighted fields
Function FF0C400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0CM001.SYBSTGNB initialAttributes; /* style grp*/
  set FF0CM001.YPGCD initialAttributes; /* type*/
  set FF0CM001.XPCCD initialAttributes; /* category*/

  if (FF0CW00.FF0CWSTR > 0) /* if start greater than zero*/

    FF0CWCNT = FF0CW00.FF0CWSTR; /* set counter to start*/
    while (FF0CWCNT <= 12) /* if counter is less or equal 12*/

      set FF0CM001.FF0CMCFA[FF0CWCNT] normal; /* cur fut % adj*/
      set FF0CM001.FF0CMFRA[FF0CWCNT] normal; /* fcst fill rate adj*/
      set FF0CM001.FF0CMSSA[FF0CWCNT] normal; /* sfty stk a*/
      set FF0CM001.FF0CMSSB[FF0CWCNT] normal; /* sfty stk b*/
      set FF0CM001.FF0CMSSC[FF0CWCNT] normal; /* sfty stk c*/
      set FF0CM001.FF0CMSSD[FF0CWCNT] normal; /* sfty stk d*/

      FF0CWCNT = FF0CWCNT + 1; /* add one to sub*/

    end
  end

  set FF0CM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF0CM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.YPGCD == "?" /* type list requested*/
   || FF0CM001.XPCCD == "?") /* category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.YPGCD == "?") /* type list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0CM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0CM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FF0CM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0CM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0CM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.XPCCD == "?") /* Line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0CM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0CM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF0CM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0CM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0CM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF0C400

// Verify the entered data
Function FF0C500()
   /* ------------------------------------------------------------*/
   /* If fast path item data was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0CM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If any of the key fields changed, determine if any of the*/
   /* modifiable fields were changed.*/
   /* ------------------------------------------------------------*/

  if (FF0CW01.CACHGFL == "Y") /* if there is any data*/

    FF0CW00.FF0CWCHG = "N"; /* individual fld changed switch*/
    FF0CW00.FF0CWFPA = "N"; /* curr fut % changed switch*/
    FF0CW00.FF0CWCFR = "N"; /* fill rate adh changed switch*/
    FF0CW00.FF0CWCNT = 12; /* initalize subscript*/
    while (FF0CW00.FF0CWCNT > 0) /* count greater than zero*/
      FF0C505(); /* Check curr fut % for changes*/
      FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT - 1; /* subtract from counter*/
    end

    FF0CW00.FF0CWCNT = 12; /* initalize subscript*/
    while (FF0CW00.FF0CWCNT > 0) /* count greater than zero*/
      FF0C510(); /* Check fill rate adj for changes*/
      FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT - 1; /* subtract from counter*/
    end

    FF0CW00.FF0CWCNT = 12; /* initalize subscript*/
    while (FF0CW00.FF0CWCNT > 0) /* count greater than zero*/
      FF0C515(); /* Check safety stock for changes*/
      FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT - 1; /* subtract from counter*/
    end
  end

  if (FF0CM001.SYBSTGNB == " "             /* no style grp*/
   || FF0CM001.XPCCD == " "                /* no category*/
   || FF0CM001.YPGCD == " "                /* no type*/
                                           
   || FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB /* style grp changed*/
   || FF0CM001.XPCCD != FFWREC.XPCCD       /* category changed*/
   || FF0CM001.YPGCD != FFWREC.YPGCD)      /* type changed*/


    FF0C520(); /* verify style grp*/
    FF0C530(); /* verify category*/
    FF0C540(); /* verify type*/
    FF0C550(); /* verify FFSTY*/
    FF0C560(); /* verify FFXRF*/

  end

   /* ------------------------------------------------------------*/
   /* If an error was found in this process, exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    exit stack;
  end


end // end FF0C500

// Check fields
Function FF0C505()
   /* ------------------------------------------------------------*/
   /* If curr fut % was changed or is not zero,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.FF0CMCFA[FF0CWCNT] != 0)

    if (converseVar.eventKey is pf15 /* typed pf15*/
     || converseVar.eventKey is pf16) /* typed pf16*/
       /* ** next sentence ***/
    else
      set FF0CM001.FF0CMCFA[FF0CWCNT] cursor, bold; /* highlight*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(376); /* must be pf15 or pf16*/
    end

    if (converseVar.eventKey is pf15) /* change demand*/
      if (FF0CW01.FF0CWRMO[FF0CWCNT] <= FF0CW01.FF0CWMBM[FF0CWCNT])
         /* ** next sentence ***/
      else
        set FF0CM001.FF0CMCFA[FF0CWCNT] cursor, bold; /* highlight*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        converseLib.validationFailed(377); /* can't chg fut*/
      end
    end

    if (converseVar.eventKey is pf16) /* change future*/
      if (FF0CW01.FF0CWRMO[FF0CWCNT] > FF0CW01.FF0CWMBM[FF0CWCNT])
         /* ** next sentence ***/
      else
        set FF0CM001.FF0CMCFA[FF0CWCNT] cursor, bold; /* highlight*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        converseLib.validationFailed(378); /* can't chg dmd*/
      end
    end

    if (converseVar.validationMsgNum == 0) /* successful edits*/
      FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/
      FF0CW00.FF0CWCHG = "Y"; /* data change switch*/
      FF0CW00.FF0CWFPA = "Y"; /* curr fut % changed switch*/
    else
      FFWREC.FFWMODSW = "N"; /* modified data exit switch*/
      FF0CW00.FF0CWCHG = "N"; /* data change switch*/
    end

    if (FF0CM001.XPCCD != FFWREC.XPCCD /* category changed*/
     || FF0CM001.YPGCD != FFWREC.YPGCD /* type changed*/
     || FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/

      set FF0CM001.FF0CMCFA[FF0CWCNT] cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/
        set FF0CM001.SYBSTGNB cursor, bold; /* highlight*/
      end

      if (FF0CM001.XPCCD != FFWREC.XPCCD) /* category changed*/
        set FF0CM001.XPCCD cursor, bold; /* highlight*/
      end

      if (FF0CM001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF0CM001.YPGCD cursor, bold; /* highlight*/
      end

    end

  end

end // end FF0C505

// Check fields
Function FF0C510()
   /* ------------------------------------------------------------*/
   /* If fcst fill rate was changed or is not zero,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.FF0CMFRA[FF0CWCNT] != 0)

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/
    FF0CW00.FF0CWCHG = "Y"; /* data change switch*/
    FF0CW00.FF0CWCFR = "Y"; /* fill rate adj changed switch*/

    if (FF0CM001.XPCCD != FFWREC.XPCCD /* category changed*/
     || FF0CM001.YPGCD != FFWREC.YPGCD /* type changed*/
     || FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/

      set FF0CM001.FF0CMFRA[FF0CWCNT] cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/
        set FF0CM001.SYBSTGNB cursor, bold; /* highlight*/
      end

      if (FF0CM001.XPCCD != FFWREC.XPCCD) /* category changed*/
        set FF0CM001.XPCCD cursor, bold; /* highlight*/
      end

      if (FF0CM001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF0CM001.YPGCD cursor, bold; /* highlight*/
      end

    else

      if (converseVar.eventKey not enter) /* must use enter key*/
        set FF0CM001.FF0CMFRA[FF0CWCNT] cursor, bold; /* Highlight*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        converseLib.validationFailed(379); /* typed any key other than enter*/
      end

      if (FF0CW00.FF0CWFPA == "Y") /* curr fut % changed switch*/
        set FF0CM001.FF0CMFRA[FF0CWCNT] cursor, bold; /* Highlight*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        converseLib.validationFailed(236); /* Mutually exclusive*/
      end

    end

  end

end // end FF0C510

// Check fields
Function FF0C515()
   /* ------------------------------------------------------------*/
   /* If sfty stk A was changed or is not zero,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.FF0CMSSA[FF0CWCNT] != 0)

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/
    FF0CW00.FF0CWCHG = "Y"; /* data change switch*/

    if (FF0CM001.XPCCD != FFWREC.XPCCD /* category changed*/
     || FF0CM001.YPGCD != FFWREC.YPGCD /* type changed*/
     || FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/

      set FF0CM001.FF0CMSSA[FF0CWCNT] cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/
        set FF0CM001.SYBSTGNB cursor, bold; /* highlight*/
      end

      if (FF0CM001.XPCCD != FFWREC.XPCCD) /* category changed*/
        set FF0CM001.XPCCD cursor, bold; /* highlight*/
      end

      if (FF0CM001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF0CM001.YPGCD cursor, bold; /* highlight*/
      end

    end

    if (converseVar.eventKey not enter) /* must press enter*/
      set FF0CM001.FF0CMSSA[FF0CWCNT] cursor, bold; /* Highlight*/
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(379);
    end
  end

   /* ------------------------------------------------------------*/
   /* If sfty stk B was changed or is not zero,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.FF0CMSSB[FF0CWCNT] != 0)

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/
    FF0CW00.FF0CWCHG = "Y"; /* data change switch*/

    if (FF0CM001.XPCCD != FFWREC.XPCCD /* category changed*/
     || FF0CM001.YPGCD != FFWREC.YPGCD /* type changed*/
     || FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/

      set FF0CM001.FF0CMSSB[FF0CWCNT] cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/
        set FF0CM001.SYBSTGNB cursor, bold; /* highlight*/
      end

      if (FF0CM001.XPCCD != FFWREC.XPCCD) /* category changed*/
        set FF0CM001.XPCCD cursor, bold; /* highlight*/
      end

      if (FF0CM001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF0CM001.YPGCD cursor, bold; /* highlight*/
      end

    end

    if (converseVar.eventKey not enter) /* must press enter*/
      set FF0CM001.FF0CMSSB[FF0CWCNT] cursor, bold; /* Highlight*/
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(379);
    end

  end

   /* ------------------------------------------------------------*/
   /* If sfty stk C was changed or is not zero,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.FF0CMSSC[FF0CWCNT] != 0)

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/
    FF0CW00.FF0CWCHG = "Y"; /* data change switch*/

    if (FF0CM001.XPCCD != FFWREC.XPCCD /* category changed*/
     || FF0CM001.YPGCD != FFWREC.YPGCD /* type changed*/
     || FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/

      set FF0CM001.FF0CMSSC[FF0CWCNT] cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/
        set FF0CM001.SYBSTGNB cursor, bold; /* highlight*/
      end

      if (FF0CM001.XPCCD != FFWREC.XPCCD) /* category changed*/
        set FF0CM001.XPCCD cursor, bold; /* highlight*/
      end

      if (FF0CM001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF0CM001.YPGCD cursor, bold; /* highlight*/
      end

    end

    if (converseVar.eventKey not enter) /* must press enter*/
      set FF0CM001.FF0CMSSC[FF0CWCNT] cursor, bold; /* Highlight*/
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(379);
    end

  end

   /* ------------------------------------------------------------*/
   /* If sfty stk d was changed or is not zero,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.FF0CMSSD[FF0CWCNT] != 0)

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/
    FF0CW00.FF0CWCHG = "Y"; /* data change switch*/

    if (FF0CM001.XPCCD != FFWREC.XPCCD /* category changed*/
     || FF0CM001.YPGCD != FFWREC.YPGCD /* type changed*/
     || FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/

      set FF0CM001.FF0CMSSD[FF0CWCNT] cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp changed*/
        set FF0CM001.SYBSTGNB cursor, bold; /* highlight*/
      end

      if (FF0CM001.XPCCD != FFWREC.XPCCD) /* category changed*/
        set FF0CM001.XPCCD cursor, bold; /* highlight*/
      end

      if (FF0CM001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF0CM001.YPGCD cursor, bold; /* highlight*/
      end

    end

    if (converseVar.eventKey not enter) /* must press enter*/
      set FF0CM001.FF0CMSSD[FF0CWCNT] cursor, bold; /* Highlight*/
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(379);
    end

  end


  if (FF0CW00.FF0CWFPA == "Y" /* curr fut % changed switch*/
   || FF0CW00.FF0CWCFR == "Y") /* fill rate adj changed switch*/

    if (FF0CM001.FF0CMSSA[FF0CWCNT] != 0)
      set FF0CM001.FF0CMSSA[FF0CWCNT] cursor, bold; /* Highlight*/
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(236);
    end

    if (FF0CM001.FF0CMSSB[FF0CWCNT] != 0)
      set FF0CM001.FF0CMSSB[FF0CWCNT] cursor, bold; /* Highlight*/
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(236);
    end

    if (FF0CM001.FF0CMSSC[FF0CWCNT] != 0)
      set FF0CM001.FF0CMSSC[FF0CWCNT] cursor, bold; /* Highlight*/
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(236);
    end

    if (FF0CM001.FF0CMSSD[FF0CWCNT] != 0)
      set FF0CM001.FF0CMSSD[FF0CWCNT] cursor, bold; /* Highlight*/
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(236);
    end

  end


end // end FF0C515

// Check style grp code
Function FF0C520()
   /* ------------------------------------------------------------*/
   /* Verify style group.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.SYBSTGNB > " " /* if style grp exists*/
   && FF0CM001.YPGCD > " ")   /* and type grp exists*/

    set FF3REC empty; /* Row storage area*/

    FF3REC.SYBSTGNB = FF0CM001.SYBSTGNB; /* style group*/
    FF3REC.YSMXDV = "10"; /* div group*/
    FF3REC.YPGCD = FF0CM001.YPGCD; /* type group*/
    FF3REC.XLCCD = "10"; /* life cycle code*/
    TA1REC.TA1PGMNM = "FF0C520 "; /* Calling program*/

    XSFFS22(); /* Verify style group*/

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/

      FF0CM001.SYBSTGNM = FF3REC.SYBSTGNM; /* Abbreviation*/
      FF0CM001.XPCCD = FF3REC.XPCCD;

    else

      FF0CM001.SYBSTGNM = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0CM001.SYBSTGNB cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/

    end

  else

    FF0CM001.SYBSTGNM = " "; /* Abbreviation*/

    /* ------------------------------------------------------------*/
     /* Check if category cd was given.  One of these must exist.*/
    /* ------------------------------------------------------------*/

    if (FF0CM001.XPCCD == " ") /* If no category code*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0CM001.SYBSTGNB cursor, bold; /* Highlight*/
      converseLib.validationFailed(178); /* Indicate one of these must exist*/

    end
  end


end // end FF0C520

// Check category code
Function FF0C530()
   /* ------------------------------------------------------------*/
   /* Verify category code in corporate table.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.XPCCD != " ") /* If cat code exists*/

    XPCREC.XPCCD = FF0CM001.XPCCD; /* format key*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* format key*/

    if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF0CM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/

      FF0CM001.XPCABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0CM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/

    end

  else

    FF0CM001.XPCABRV = " "; /* Abbreviation*/

    /* ------------------------------------------------------------*/
     /* Check if style number was given.  One of these must exist.*/
    /* ------------------------------------------------------------*/

    if (FF0CM001.SYBSTGNB == " ") /* If no style nbr*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0CM001.XPCCD cursor, bold; /* Highlight*/
      set FF0CM001.SYBSTGNB bold; /* Highlight*/
      converseLib.validationFailed(178); /* Indicate one of these must exist*/

    end
  end


end // end FF0C530

// Check type code
Function FF0C540()
   /* ------------------------------------------------------------*/
   /* Verify type code.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.YPGCD in YPGTBL.YPGCD /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FF0CM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate invalid.*/
    /* ------------------------------------------------------------*/

    FF0CM001.YPGABRV = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FF0CM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/

  end


end // end FF0C540

// Verify FFSTY
Function FF0C550()
   /* ------------------------------------------------------------*/
   /* Verify relationship.  If both style group and category*/
   /* were entered, they must be found on the FFSTY table.  (If*/
   /* one or the other of them have an error, don't verify.)*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.SYBSTGNB > " " /* If style group exist*/
   && FF0CM001.XPCCD > " "    /* and category exits*/
   && converseVar.validationMsgNum == 0) /* and no messages pending*/
    /* ------------------------------------------------------------*/
     /* Clear the row storage area.*/
    /* ------------------------------------------------------------*/

    set FF3REC empty; /* clear DFCAST.VFFSTY01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFSTY01.*/
    /* ------------------------------------------------------------*/

    FF3REC.SYBSTGNB = FF0CM001.SYBSTGNB; /* style group*/
    FF3REC.YSMXDV = "10"; /* div group*/
    FF3REC.XLCCD = "10"; /* life cycle*/
    FF3REC.YPGCD = FF0CM001.YPGCD; /* type group*/

    /* ------------------------------------------------------------*/
     /* Call DFCAST.VFFSTY01.*/
    /* ------------------------------------------------------------*/

    FF0C551(); /* Open FFSTY*/

    FF0C552(); /* Fetch FFSTY*/

    if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/

      FF0CM001.YPGABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "550"; /* Module identification*/
      set FF0CM001.SYBSTGNB cursor, bold; /* Highlight*/
      set FF0CM001.YPGCD bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/

    else

      if (FF0CM001.XPCCD != FF3REC.XPCCD) /* if map category NE D/B*/

        /* ------------------------------------------------------------*/
         /* If not equal, indicate invalid.*/
        /* ------------------------------------------------------------*/

        FFWREC.XXXMODID = "550"; /* Module identification*/
        set FF0CM001.SYBSTGNB bold; /* Highlight*/
        set FF0CM001.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(203); /* Indicate invalid*/

      end
    end

    FF0C553(); /* Close FFSTY*/

  end
end // end FF0C550

// Open  DFCAST.VFFSTY01
Function FF0C551()
   /* ------------------------------------------------------------*/
   /* Open FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "551"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C551

// Fetch DFCAST.VFFSTY01
Function FF0C552()
   /* ------------------------------------------------------------*/
   /* Fetch FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "552"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C552

// Close DFCAST.VFFSTY01
Function FF0C553()
   /* ------------------------------------------------------------*/
   /* Close the cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "553"; /* Module identification*/

  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXSTY1"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C553

// Verify FFXRF
Function FF0C560()
   /* ------------------------------------------------------------*/
   /* Verify relationship.  A FFXRF row must exist for key.  If*/
   /* style group was entered and category was not, obtain the*/
   /* category code from FFSTY before calling FFXRF.  (If one*/
   /* or the other code is in error, don't do the check.)*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no messages pending*/

    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

    if (FF0CM001.XPCCD == " ") /* if category is missing*/
      FF2REC.XPCCD = FF3REC.XPCCD; /* category code*/
    else
      FF2REC.XPCCD = FF0CM001.XPCCD;
    end

    /* ------------------------------------------------------------*/
     /* Format keys.*/
    /* ------------------------------------------------------------*/

    FF2REC.YPGCD = FFWREC.YPGCD; /* type group cd*/
    FF2REC.YSMXDV = FFWREC.YSMXDV; /* div group cd*/

    /* ------------------------------------------------------------*/
     /* Call DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/

    FF0C561(); /* Select FFXRF*/

    if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "560"; /* Module identification*/
      set FF0CM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Indicate missing or invalid*/

    end

  end


end // end FF0C560

// Select DFCAST.VFFXRF01
Function FF0C561()
   /* ------------------------------------------------------------*/
   /* Select FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "561"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C561

// Process valid input request
Function FF0C600()
   /* ------------------------------------------------------------*/
   /* indicate that the map must be formated.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/

  if (FF0CM001.YPGCD != FFWREC.YPGCD /* type code*/
   || FF0CM001.XPCCD != FFWREC.XPCCD /* category code*/
   || FF0CM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style grp code*/

    /* ------------------------------------------------------------*/
     /* Update FFWREC.*/
    /* ------------------------------------------------------------*/

    FFWREC.YPGCD = FF0CM001.YPGCD; /* type code*/
    FFWREC.YPGABRV = FF0CM001.YPGABRV; /* type code*/
    FFWREC.XPCCD = FF0CM001.XPCCD; /* category code*/
    FFWREC.XPCABRV = FF0CM001.XPCABRV; /* category code*/
    FFWREC.SYBSTGNB = FF0CM001.SYBSTGNB; /* style grp code*/
    FFWREC.SYBSTGNM = FF0CM001.SYBSTGNM; /* style grp code*/

    FF0CW00.FF0CWSWR = "Y"; /* indicate that data requested*/

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if any data changed, insert rows.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWCNT = FF0CW00.FF0CWSTR; /* set sub to str*/

  if (FF0CW00.FF0CWCHG == "Y") /* if any field was changed*/

    FF0C610(); /* Get global nbr, save it, & then updt it*/

    /* ------------------------------------------------------------*/
     /* Find the months with changes and insert rows for each.*/
    /* ------------------------------------------------------------*/

    while (FF0CW00.FF0CWCNT <= 12) /* sub less than or equal 12*/

      if (FF0CM001.FF0CMCFA[FF0CWCNT] != 0
       || FF0CM001.FF0CMFRA[FF0CWCNT] != 0
       || FF0CM001.FF0CMSSA[FF0CWCNT] != 0
       || FF0CM001.FF0CMSSB[FF0CWCNT] != 0
       || FF0CM001.FF0CMSSC[FF0CWCNT] != 0
       || FF0CM001.FF0CMSSD[FF0CWCNT] != 0)

        if (FF0CM001.SYBSTGNB != " ") /* style group exist*/
          FF0C620(); /* Add DFCAST.VGSGRP01*/
        else
          FF0C630(); /* Add DFCAST.VGCAT001*/
        end

      end

      FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT + 1; /* add to subscript*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If there were any adds, indicate that the updates were*/
   /* were successfully completed.*/
   /* ------------------------------------------------------------*/

  if (FF0CW00.FF0CWCHG == "Y") /* if any fld chgd, we inserted row*/

    FFWREC.FFWMODSW = "N"; /* modified data exit switch*/
    FF0CW00.FF0CWCHG = "N"; /* reset field was changed switch*/

    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 16; /* Indicate transaction completed*/

  end


   /* ------------------------------------------------------------*/
   /* Update  Display Storage area.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FF0CWCNT = FF0CW00.FF0CWSTR; /* set sub to str*/

  while (FF0CW00.FF0CWCNT <= 12) /* sub less than or equal 12*/

    FF0C640(); /* Update display storage*/

    FF0CW00.FF0CWCNT = FF0CW00.FF0CWCNT + 1;

  end

   /* ------------------------------------------------------------*/
   /* Commit all adds to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all adds*/


end // end FF0C600

// Obtain Global nbr & update it
Function FF0C610()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Obtain the next control number.*/
   /* ------------------------------------------------------------*/

  FF0C611(); /* Select DFCAST.VFFCTL01*/

   /* ------------------------------------------------------------*/
   /* Save global number for inserting rows.*/
   /* ------------------------------------------------------------*/

  FF0CW00.FFTGCNBR = FF1REC.FF1GCNBR; /* save number*/

   /* ------------------------------------------------------------*/
   /* Update the control number.*/
   /* ------------------------------------------------------------*/

  FF0C612(); /* update DFCAST.VFFCTL01*/


   /* ------------------------------------------------------------*/
   /* Commit the update.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit the update*/


end // end FF0C610

// Select DFCAST.VFFCTL01
Function FF0C611()
   /* ------------------------------------------------------------*/
   /* Clear row storage for DFCAST.VFFCTL01.*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C611

// Update DFCAST.VFFCTL01
Function FF0C612()
   /* ------------------------------------------------------------*/
   /* Update field.*/
   /* ------------------------------------------------------------*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update FFCTL.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3660" ("U4", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C612

// Insert DFCAST.VGSGRP01
Function FF0C620()
   /* ------------------------------------------------------------*/
   /* Clear row for GSGRP.*/
   /* ------------------------------------------------------------*/

  set FFUREC empty; /* Clear row for format*/

   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FFUREC.FFTGCNBR = FF1REC.FF1GCNBR; /* Global number*/
  FFUREC.FF4FCTMO = FF0CW01.FF0CWRMO[FF0CWCNT]; /* process month*/
  FFUREC.SYBSTGNB = FF0CM001.SYBSTGNB; /* style grp code*/
  FFUREC.YPGCD = FF0CM001.YPGCD; /* type group code*/

  FFUREC.FFTFUADJ = FF0CM001.FF0CMCFA[FF0CWCNT];
  FFUREC.FFTFRADJ = FF0CM001.FF0CMFRA[FF0CWCNT];
  FFUREC.FFTSSAJA = FF0CM001.FF0CMSSA[FF0CWCNT];
  FFUREC.FFTSSAJB = FF0CM001.FF0CMSSB[FF0CWCNT];
  FFUREC.FFTSSAJC = FF0CM001.FF0CMSSC[FF0CWCNT];
  FFUREC.FFTSSAJD = FF0CM001.FF0CMSSD[FF0CWCNT];

  FFUREC.XXXUSRID = COMMAREA.CAUSERID; /* User id*/
  FFUREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFUREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/

   /* ------------------------------------------------------------*/
   /* Insert DFCAST.VGSGRP01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3690" ("A ", SQLCA, FFUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGSGRP01"; /* Table view name*/
  TA1REC.TA1TBLVU = FFUREC.FFUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C620

// Insert DFCAST.VGCAT001
Function FF0C630()
   /* ------------------------------------------------------------*/
   /* Clear the row for VGCAT001.*/
   /* ------------------------------------------------------------*/

  set FFTREC empty; /* Clear row for format*/

   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FFTREC.FFTGCNBR = FF1REC.FF1GCNBR; /* global numer*/
  FFTREC.FF4FCTMO = FF0CW01.FF0CWRMO[FF0CWCNT]; /* process month*/
  FFTREC.YPGCD = FF0CM001.YPGCD; /* type code*/
  FFTREC.XPCCD = FF0CM001.XPCCD; /* category code*/

  FFTREC.FFTFUADJ = FF0CM001.FF0CMCFA[FF0CWCNT];
  FFTREC.FFTFRADJ = FF0CM001.FF0CMFRA[FF0CWCNT];
  FFTREC.FFTSSAJA = FF0CM001.FF0CMSSA[FF0CWCNT];
  FFTREC.FFTSSAJB = FF0CM001.FF0CMSSB[FF0CWCNT];
  FFTREC.FFTSSAJC = FF0CM001.FF0CMSSC[FF0CWCNT];
  FFTREC.FFTSSAJD = FF0CM001.FF0CMSSD[FF0CWCNT];

  FFTREC.XXXUSRID = COMMAREA.CAUSERID; /* User id*/
  FFTREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFTREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/

   /* ------------------------------------------------------------*/
   /* Insert DFCAST.VGCAT001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3670" ("A ", SQLCA, FFTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "630"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VGCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFTREC.FFTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0C630

// Update display storage
Function FF0C640()
  FF0CW01.FF0CWCFA[FF0CWCNT] = FF0CM001.FF0CMCFA[FF0CWCNT];
  FF0CW01.FF0CWFFR[FF0CWCNT] = FF0CM001.FF0CMFFR[FF0CWCNT];
  FF0CW01.FF0CWFRA[FF0CWCNT] = FF0CM001.FF0CMFRA[FF0CWCNT];
  FF0CW01.FF0CWSSA[FF0CWCNT] = FF0CM001.FF0CMSSA[FF0CWCNT];
  FF0CW01.FF0CWSSB[FF0CWCNT] = FF0CM001.FF0CMSSB[FF0CWCNT];
  FF0CW01.FF0CWSSC[FF0CWCNT] = FF0CM001.FF0CMSSC[FF0CWCNT];
  FF0CW01.FF0CWSSD[FF0CWCNT] = FF0CM001.FF0CMSSD[FF0CWCNT];


end // end FF0C640

// Open summary work sheet csr
Function FF0CS01()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "FF2930" ("S1", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0CS01

// Fetch next summary work sheet
Function FF0CS02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "FF2930" ("N1", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FF0CW00.FF0CWSWS = "Y"; /* Header cursor EOF switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT SUMMARY WORKSHEET";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0CS02

// Close summary work sheet csr
Function FF0CS03()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "FF2930" ("C1", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0CS03

// Fetch next summary work sheet
Function FF0CS04()
   /* ------------------------------------------------------------*/
   /* Fetch the unique row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT SUMMARY WORKSHEET";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0CS04

//*** RECORD=FF0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0CW00 type basicRecord
  10 FF0CWSWR FF0CWSWR ; 
  10 FF0CWSWF FF0CWSWF ; 
  10 FF0CWDSW FF0CWDSW ; 
  10 FF0CWCHG FF0CWCHG ; 
  10 FF0CWSWS FF0CWSWS ; 
  10 * char(1) ; 
  10 FF0CWCNT FF0CWCNT ; 
  10 FF0CWSTR FF0CWSTR ; 
  10 * char(1) ; 
  10 XPCCD XPCCD ; 
  10 FFTGCNBR FFTGCNBR ; 
  10 * char(1) ; 
  10 FF0CWBDT FF0CWBDT ; 
  10 * char(1) ; 
  10 FF0CWHDT FF0CWHDT ; 
    15 FF0CWHCC FF0CWHCC ; 
    15 FF0CWHYY FF0CWHYY ; 
    15 FF0CWHMM FF0CWHMM ; 
  10 * char(1) ; 
  10 FF0CWFPA FF0CWFPA ; 
  10 FF0CWCFR FF0CWCFR ; 
end // end FF0CW00

//*** RECORD=FF0CW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0CW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 * char(1) ; 
  10 FF0CWRMO FF0CWRMO [12] ; 
  10 * char(1) ; 
  10 FF0CWMBM FF0CWMBM [12] ; 
  10 FF0CWCFP FF0CWCFP [12] ; 
  10 FF0CWCFA FF0CWCFA [12] ; 
  10 FF0CWFFR FF0CWFFR [12] ; 
  10 FF0CWFRA FF0CWFRA [12] ; 
  10 FF0CWSSA FF0CWSSA [12] ; 
  10 FF0CWSSB FF0CWSSB [12] ; 
  10 FF0CWSSC FF0CWSSC [12] ; 
  10 FF0CWSSD FF0CWSSD [12] ; 
  10 * char(1) ; 
end // end FF0CW01

//*** RECORD=FF0CW02 ****
// ----------------------------
// Calculation fields.
// ----------------------------
// ***********************
Record FF0CW02 type basicRecord
  10 FF0CWAFT FF0CWAFT [12] ; 
  10 FF0CWCDF FF0CWCDF [12] ; 
  10 FF0CWFRP FF0CWFRP [12] ; 
  10 * char(1) ; 
  10 FF0CWFDA FF0CWFDA ; 
  10 FF0CWWKQ FF0CWWKQ ; 
end // end FF0CW02

// active futures
DataItem FF0CWAFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin date
DataItem FF0CWBDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// curr demand fcst
DataItem FF0CWCDF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cur fut percent adj
DataItem FF0CWCFA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cur fut percent
DataItem FF0CWCFP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// change fill rate adj switch
DataItem FF0CWCFR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data change switch
DataItem FF0CWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Counter for loops
DataItem FF0CWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Data found switch
DataItem FF0CWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Calc field
DataItem FF0CWFDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcstd fill rate
DataItem FF0CWFFR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// curr fut % changed switch
DataItem FF0CWFPA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcstd fill rate adj
DataItem FF0CWFRA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// fill rate percent
DataItem FF0CWFRP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold century
DataItem FF0CWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold date
DataItem FF0CWHDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold month
DataItem FF0CWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// hold year
DataItem FF0CWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// main buy months
DataItem FF0CWMBM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMMs for dates
DataItem FF0CWRMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// sfty stk A
DataItem FF0CWSSA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sfty stk B
DataItem FF0CWSSB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sfty stk C
DataItem FF0CWSSC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sfty stk D
DataItem FF0CWSSD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Start sub for months
DataItem FF0CWSTR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end
// Format the map switch
DataItem FF0CWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0CWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sum w/s EOF switch
DataItem FF0CWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work qty field
DataItem FF0CWWKQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

