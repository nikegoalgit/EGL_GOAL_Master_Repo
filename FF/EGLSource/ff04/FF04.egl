package ff04;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF04 ****
// This application displays information concerning a particu-
// lar product line or product line/type.  It allows the user
// to change the 'target' fields and the 'reviewed' switch.
// The program will calculate 'variance', 'suggested end in-
// ventory', 'suggested inventory turns', 'target end invent-
// ory', and 'target inventory turns'.  It retrieves data for
// for the 'sales fcst', 's/buy line', and 'target' fields.
// The program will allow the user to clear the 'target' by use
// of a PF key.  Another feature of the program will allow the
// user to move the 's/buy line' to the 'target' field by use
// of a PF key.  By use of a third PF key, the user can save
// any updated information on the screen in the Data Base.
// 
// The user must specify the 'range', 'type', 'line', and 'div-
// ision group'.  He can either look at both "types" of lines
// as a unit by putting an "*" in 'type', or look at either
// 'inline' lines or 'makeups' lines separately.
// 
// If the user doesn't know the code for a 'line' or 'type', he
// can enter a '?' to ask for help.  The program will bring up
// a pop-up window to show a list of 'lines' or 'types', then
// he can chose one from the window screen.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/15/89  RHETRI  New application.
// FF2033   09/04/90  RHETRI  Chg date edit to allow any date.
// Fix      09/13/90  RHETRI  Cause re-tot for TEI on all mos.
// FF2036   10/04/90  RHETRI  Remove MLINE calls
// Fix      04/30/92  JJUCH   FF04140 change to check -305
//                            instead of +100 when record not
//                            found.
// FF175    12/11/96  DSMITH  Change the date range fill
//                            character to '0'.
// 
// *********************
Program FF04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF04W00 FF04W00; // record
  FF04W01 FF04W01; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF6REC FF6REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use YPGTBL; // table
  use FF04M.FF04M001,  // forms
      FF04M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF04M001 initial; /* M001 input/output*/
    set FF04W00 empty; /* Working storage*/
    set FF04W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF04W00.FF04WSWF = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* If type code is missing, default it to '01'.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ") /* if type code missing*/

      FFWREC.YPGCD = "01"; /* move storage*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end

    end

     /* ------------------------------------------------------------*/
     /* Initialize fields used to expand the range.*/
     /* ------------------------------------------------------------*/

    FF04W00.FF04WCBG = FFWREC.FFABEGMO; /* date routines*/
    FF04W00.FF04WCEG = FFWREC.FFAENDMO; /* date routines*/

     /* ------------------------------------------------------------*/
     /* If complete key is present, request data.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO != 0 /* Range exits*/
     && FFWREC.FFAENDMO != 0 /* Range exits*/
     && FFWREC.XPLCD != " "  /* Line exits*/
     && FFWREC.YPGCD != " "  /* Type exits*/
     && FFWREC.YSMXDV != " ") /* Div grp exists*/

      /* ------------------------------------------------------------*/
       /* Save range on map.*/
      /* ------------------------------------------------------------*/

      FF04M001.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
      FF04M001.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/

      FF04W00.FF04WSWR = "Y"; /* Data requested*/

    else

      /* ------------------------------------------------------------*/
       /* Save range in working storage.*/
      /* ------------------------------------------------------------*/

      FF04W01.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
      FF04W01.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/

      FF04W00.FF04WSWR = "N"; /* No data requested*/

    end

     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPCCD = " "; /* Clear cat code*/
    FFWREC.XPCABRV = " "; /* Clear cat name*/
    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FFWREC.SY1STNBR = " "; /* Clear style code*/
    FFWREC.SY1SSTNM = " "; /* Clear style name*/
    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF04001; /* Converse the main process*/


    FF04001: FF04001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF04001; /* Converse the main process*/


  end // end main
end // end FF04

// Inquire/maintain a table row
Function FF04001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF04100(); /* Obtain the data to display*/

  FF04200(); /* Format and display the map*/

  FF04300(); /* Check attention identifier*/

  FF04400(); /* Reset fields to normal intensity*/

  FF04500(); /* Verify the entered data*/

  FF04600(); /* Process valid input request*/


end // end FF04001

// Obtain the data to display
Function FF04100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF04W00.FF04WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area*/
   /* ------------------------------------------------------------*/

  set FF04W01 empty; /* M001 display storage*/

   /* ------------------------------------------------------------*/
   /* Save range in display storage area.*/
   /* ------------------------------------------------------------*/

  FF04W01.FFABEGMO = FF04M001.FFABEGMO; /* beg month*/
  FF04W01.FFAENDMO = FF04M001.FFAENDMO; /* end month*/

   /* ------------------------------------------------------------*/
   /* Initialize the working storage area.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WTTA = 0; /* Zero fill totals*/
  FF04W00.FF04WTTB = 0; /* Zero fill totals*/
  FF04W00.FF04WTTC = 0; /* Zero fill totals*/
  FF04W00.FF04WTTD = 0; /* Zero fill totals*/
  FF04W00.FF04WTTE = 0; /* Zero fill totals*/
  FF04W00.FF04WTTF = 0; /* Zero fill totals*/
  FF04W00.FF04WTTG = 0; /* Zero fill totals*/
  FF04W00.FF04WTTH = 0; /* Zero fill totals*/

  FF04W00.FF04WHSB = 0; /* initialize s/buy*/
  FF04W00.FF04WHPT = 0; /* initialize prdctn trgt*/
  FF04W00.FF04WHSF = 0; /* initialize sales fcst*/
  move 0 to FF04W00.FF04WHBI[1] for all; /* initialize beginning inv*/
  move 0 to FF04W00.FF04WHOO[1] for all; /* initialize on order*/
  move "   0" to FF04W00.FF04WHTG[1] for all; /* initialize hold for compare*/

  FF04W00.FF04WRTN = "N"; /* clear return code switch*/
  FF04W00.FF04WDSW = "N"; /* clear data found switch*/
  FF04W00.FF04WSUB = 0; /* clear "tot" position pointer*/

   /* ------------------------------------------------------------*/
   /* Expand date range.*/
   /* ------------------------------------------------------------*/

  FF04110(); /* expand range to set of yymm*/

   /* ------------------------------------------------------------*/
   /* Obtain data for reviewed field.*/
   /* ------------------------------------------------------------*/

  FF04120(); /* Obtain review information*/

   /* ------------------------------------------------------------*/
   /* Obtain data for INV TRN  calculations*/
   /* ------------------------------------------------------------*/

  FF04130(); /* Obtain data for calcs*/

   /* ------------------------------------------------------------*/
   /* Obtain data for display and calculations.  FF04WRTN refers*/
   /* to a particular call.  FF04WDSW refers to all the calls*/
   /* for the screen.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WCNT = 0; /* initialize subscript*/
  while (FF04W00.FF04WCNT < FF04W00.FF04WNBR)

    FF04W00.FF04WCNT = FF04W00.FF04WCNT + 1; /* add one to counter*/

    /* ------------------------------------------------------------*/
     /* Select MLTYP.*/
    /* ------------------------------------------------------------*/
    FF04140(); /* Select MLTYP*/

    /* ------------------------------------------------------------*/
     /* Save target for compare in update routine.*/
    /* ------------------------------------------------------------*/
    FFXREC.FFXNUMB = FF6REC.FF4RTRGT; /* production trgt*/

    if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
     || FFXREC.FFXNUMB <= -999500) /* Use millions*/

      XSFFS12(); /* Translation number*/
    else /* Use thousands*/
      XSFFS14(); /* Translation number*/

    end

    FF04W00.FF04WHTG[FF04WCNT] = FFXREC.FFXCHAR; /* for compare*/

    /* ------------------------------------------------------------*/
     /* If data found for this month, do calculations.*/
    /* ------------------------------------------------------------*/
    if (FF04W00.FF04WRTN == "Y") /* Normal return codes*/

      FF04150(); /* Calculate the data*/

      FF04W00.FF04WDSW = "Y"; /* data found*/
      FF04W00.FF04WRTN = "N"; /* clear switch*/

    end

  end

  FF04W00.FF04WST0 = 0; /* clear set-to-zero switch*/
  FF04W00.FF04WCAL = 0; /* clear calculation switch*/

   /* ------------------------------------------------------------*/
   /* Check to see if data was found to display.*/
   /* ------------------------------------------------------------*/
  if (FF04W00.FF04WDSW == "Y") /* data was found*/

    FF04160(); /* Translate and store totals*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate request for data complete.*/
   /* ------------------------------------------------------------*/
  FF04W00.FF04WSWR = "N"; /* Request for data switch*/


end // end FF04100

// Expand range to set of YYMM
Function FF04110()
   /* ------------------------------------------------------------*/
   /* Clear all fields used to expand range.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WHDT = 0; /* clear 'x' date*/
  FF04W00.FF04WBDT = 0; /* clear 'y' date*/
  FF04W00.FF04WEDT = 0; /* clear 'z' date*/
  FF04W00.FF04WNBR = 0; /* clear nbr of months*/
  FF04W00.FF04WNMO = 0; /* clear num month*/
  FF04W00.FF04WNCC = 0; /* clear cc*/
  FF04W01.FF04WRMO = " "; /* clear alpha month*/

   /* ------------------------------------------------------------*/
   /* Expand range to a set of YYMM and store in array.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WBDT = FF04M001.FFABEGMO; /* load beg mo mask*/
  FF04W00.FF04WHDT = FF04M001.FFABEGMO; /* load hold mo mask*/
  FF04W00.FF04WEDT = FF04M001.FFAENDMO; /* load end mo mask*/
  FF04W00.FF04WNBR = 1; /* set subscript to 1*/

  FF04W01.FF04WRMO[1] = FF04W00.FF04WHDT;
                                   /* load alpha month 1st time*/
  FF04W00.FF04WNCC[1] = FF04W00.FF04WCBC;
                                   /* load hold cc to 1st occur*/
  FF04W00.FF04WNMO[1] = FF04W00.FF04WHDT; /* load num mo to 1st occur*/

  if (FF04W00.FF04WBDT == FF04W00.FF04WEDT)
                                   /* if range is only one month long*/
       /* NEXT SENTENCE*/
  else
    if (FF04W00.FF04WBYY == FF04W00.FF04WEYY) /* if begin year = end year*/

      FF04W00.FF04WHCC = FF04W00.FF04WCBC; /* load hold cc with b cc*/
      while (FF04W00.FF04WHMM < FF04W00.FF04WEMM) /* if hold mo ^LT end mo*/
        FF04111();
      end

    else
      FF04W00.FF04WHCC = FF04W00.FF04WCBC; /* load hold cc with b cc*/
      while (FF04W00.FF04WHMM < 12) /* until hold month not less 12*/
        FF04111();
      end
      FF04W00.FF04WHCC = FF04W00.FF04WCEC; /* load hold cc with e cc*/
      FF04W00.FF04WHYY = FF04W00.FF04WEYY; /* move end YY to hold*/
      FF04W00.FF04WHMM = 0; /* load 0 in hold MM*/
      while (FF04W00.FF04WHMM < FF04W00.FF04WEMM) /* if hold MM LT end MM*/
        FF04111();
      end
    end
  end

  FF04W00.FF04WCNT = FF04W00.FF04WNBR;
  FF04W00.FF04WCNT = FF04W00.FF04WCNT + 1; /* add one to subscript*/
  FF04W01.FF04WRMO[FF04WCNT] = "TOTL"; /* load 'tot' to header line*/

   /* ------------------------------------------------------------*/
   /* Expland range three more months for use in calculations.*/
   /* ------------------------------------------------------------*/

  FF04112();


end // end FF04110

// Load YYMM array with range
Function FF04111()
   /* ------------------------------------------------------------*/
   /* load array with the set of YYMM from the range.*/
   /* ------------------------------------------------------------*/

  FF04WNBR = FF04WNBR + 1; /* add one to subscript*/
  FF04WHMM = FF04WHMM + 1; /* add one to month*/

  FF04W01.FF04WRMO[FF04WNBR] = FF04W00.FF04WHDT; /* load alpha yymm*/
  FF04W00.FF04WNMO[FF04WNBR] = FF04W00.FF04WHDT; /* load num yymm*/
  FF04W00.FF04WNCC[FF04WNBR] = FF04W00.FF04WHCC; /* load cc*/


end // end FF04111

// Expand range 3 more months
Function FF04112()
   /* ------------------------------------------------------------*/
   /* Expand range three more months for "SUG INV TRN" and*/
   /* "TGT IN TRN" calculations.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WAVG = FF04W00.FF04WNBR; /* move nbr to avg sub*/

  if (FF04W00.FF04WEMM < 10) /* if end month less than 10*/
    /* ------------------------------------------------------------*/
     /* If month is less than 10, adding three months to it will*/
     /* not take you into the next year.*/
    /* ------------------------------------------------------------*/

    FF04W00.FF04WHMM = FF04W00.FF04WHMM + 1; /* add 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCBC; /* cc*/

    FF04W00.FF04WHMM = FF04W00.FF04WHMM + 1; /* add 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCBC; /* cc*/

    FF04W00.FF04WHMM = FF04W00.FF04WHMM + 1; /* add 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCBC; /* cc*/

  end

  if (FF04W00.FF04WEMM == 10) /* if end month equal 10*/
    /* ------------------------------------------------------------*/
     /* If month is equal 10, the next three months will be 11, 12,*/
     /* and 01 of the next year.*/
    /* ------------------------------------------------------------*/

    FF04W00.FF04WHMM = FF04W00.FF04WHMM + 1; /* add 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCBC; /* cc*/

    FF04W00.FF04WHMM = FF04W00.FF04WHMM + 1; /* add 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCBC; /* cc*/

    FF04W00.FF04WHYY = FF04W00.FF04WHYY + 1; /* add 1 to hold year*/
    FF04W00.FF04WHMM = 1; /* move 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCEC; /* cc*/

  end

  if (FF04W00.FF04WEMM == 11) /* if end month equal 11*/
    /* ------------------------------------------------------------*/
     /* If month is equal 11, the next three months will be 12, and*/
     /* 01 and 02 of the next year.*/
    /* ------------------------------------------------------------*/

    FF04W00.FF04WHMM = FF04W00.FF04WHMM + 1; /* add 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCBC; /* cc*/

    FF04W00.FF04WHYY = FF04W00.FF04WHYY + 1; /* add 1 to hold year*/
    FF04W00.FF04WHMM = 1; /* move 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCEC; /* cc*/

    FF04W00.FF04WHMM = FF04W00.FF04WHMM + 1; /* add 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCBC; /* cc*/

  end

  if (FF04W00.FF04WEMM == 12) /* if end month equal 12*/
    /* ------------------------------------------------------------*/
     /* If month is equal 12, the next three months will be 01, 02,*/
     /* and 03 of the next year.*/
    /* ------------------------------------------------------------*/

    FF04W00.FF04WHYY = FF04W00.FF04WHYY + 1; /* add 1 to hold year*/
    FF04W00.FF04WHMM = 1; /* move 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCEC; /* cc*/

    FF04W00.FF04WHMM = FF04W00.FF04WHMM + 1; /* add 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCEC; /* cc*/

    FF04W00.FF04WHMM = FF04W00.FF04WHMM + 1; /* add 1 to hold month*/
    FF04W00.FF04WAVG = FF04W00.FF04WAVG + 1; /* add 1 to sub*/
    FF04W00.FF04WNMO[FF04WAVG] = FF04W00.FF04WHDT; /* yymm*/
    FF04W00.FF04WNCC[FF04WAVG] = FF04W00.FF04WCBC; /* cc*/

  end
end // end FF04112

// Obtain review flag information
Function FF04120()
   /* ------------------------------------------------------------*/
   /* Obtain the reviewed flag information.  We must Select*/
   /* unique to find out what the reviewed flag should be.*/
   /* ------------------------------------------------------------*/

  FF04W01.FF2LRVFL = "N"; /* default to 'n' - display*/
  FF04W00.FF2LRVFL = "N"; /* default to 'n' - hold*/

  FF04121(); /* Select FFXRF*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    /* ------------------------------------------------------------*/
     /* The flag can only be a 'y' or a 'n'. If you did not get a*/
     /* zero return code, it is because there were two rows out*/
     /* there - one with a 'y' and one with a 'n'.  If this occurs,*/
     /* the line will be considered NOT reviewed, so nothing is*/
     /* moved to the hold field and it defaults to space.  If you*/
     /* did get a zero return code, check for a 'y'.*/
    /* ------------------------------------------------------------*/

    if (FF2REC.FF2LRVFL == "Y") /* if reviewed flag equal 'yes'*/

      FF04W01.FF2LRVFL = "Y"; /* move 'y' to display*/
      FF04W00.FF2LRVFL = "Y"; /* move 'y' to hold*/

    end
  end


end // end FF04120

// Select FFXRF
Function FF04121()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* div grp*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* line*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* type*/

   /* ------------------------------------------------------------*/
   /* Select FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("SL", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or more than one row found, return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* More than one row found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04121

// Obtain data for calculations
Function FF04130()
   /* ------------------------------------------------------------*/
   /* Format fffrec for call.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WMCC = FF04W00.FF04WNCC[1]; /* cc to mask*/
  FF04W00.FF04WMMO = FF04W00.FF04WNMO[1]; /* yymm to mask*/
  FFFREC.FFFBEGMO = FF04W00.FF04WMDT; /* beg month*/

  FF04W00.FF04WMCC = FF04W00.FF04WNCC[FF04WAVG]; /* cc to mask*/
  FF04W00.FF04WMMO = FF04W00.FF04WNMO[FF04WAVG]; /* yymm to mask*/
  FFFREC.FFFENDMO = FF04W00.FF04WMDT; /* end month*/

   /* ------------------------------------------------------------*/
   /* Clear working storage fields.*/
   /* ------------------------------------------------------------*/

  move 0 to FF04W00.FF04WSLS[1] for all; /* initialize sales fcst*/

   /* ------------------------------------------------------------*/
   /* Clear row storage area.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* Clear DFCAST.VMLTYP01 record.*/

   /* ------------------------------------------------------------*/
   /* Format keys for call.*/
   /* ------------------------------------------------------------*/

  FF6REC.XPLCD = FFWREC.XPLCD; /* line*/
  FF6REC.YPGCD = FFWREC.YPGCD; /* type*/

   /* ------------------------------------------------------------*/
   /* OPEN CURSOR FOR DFCAST.VMLTYP01.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "S2"; /* function code*/
  FF04S02(); /* Open MLTYP*/

   /* ------------------------------------------------------------*/
   /* Fetch data into table.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "N2"; /* Fetch next function code*/

  FF04W00.FF04WCNT = 1; /* set counter*/
  FF04W00.FF04WSUB = 2; /* set subscript*/

  while (FF04W00.FF04WCNT <= FF04W00.FF04WAVG)

    /* ------------------------------------------------------------*/
     /* Clear row storage area.*/
    /* ------------------------------------------------------------*/

    set FF6REC empty; /* Clear DFCAST.VMLTYP01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call.*/
    /* ------------------------------------------------------------*/

    FF6REC.XPLCD = FFWREC.XPLCD; /* line*/
    FF6REC.YPGCD = FFWREC.YPGCD; /* type*/

    /* ------------------------------------------------------------*/
     /* Fetch row.*/
    /* ------------------------------------------------------------*/

    FF04S03(); /* Fetch MLTYP*/

    /* ------------------------------------------------------------*/
     /* Store data in working storage.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* call successful*/
      FF04W00.FF04WSLS[FF04WCNT] = FF6REC.FF6SLFCT; /* sales forecast*/
    end

    FF04W00.FF04WCNT = FF04W00.FF04WCNT + 1; /* add one to counter*/
    FF04W00.FF04WSUB = FF04W00.FF04WSUB + 1; /* add one to subscript*/

  end
   /* ------------------------------------------------------------*/
   /* Close cursor for DFCAST.VMLTYP01.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "C2"; /* function code*/
  FF04S04(); /* Close MLTYP*/

end // end FF04130

// Format MLTYP calls
Function FF04140()
   /* ------------------------------------------------------------*/
   /* Clear row storage area for INLINE.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* Clear DFCAST.VMLTYP01 record.*/

   /* ------------------------------------------------------------*/
   /* Format FFFREC for call. Only one month is retrieved at a*/
   /* time.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WMCC = FF04W00.FF04WNCC[FF04WCNT]; /* cc to mask*/
  FF04W00.FF04WMMO = FF04W00.FF04WNMO[FF04WCNT]; /* yymm to mask*/
  FFFREC.FFFBEGMO = FF04W00.FF04WMDT; /* beg month*/
  FFFREC.FFFENDMO = FF04W00.FF04WMDT; /* end month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF6REC.XPLCD = FFWREC.XPLCD; /* line*/
  FF6REC.YPGCD = FFWREC.YPGCD; /* type*/

   /* ------------------------------------------------------------*/
   /* Select MLTYP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0    /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305 /* or row not found*/
    )                              
      if (SQLCA.VAGen_SQLCODE == 0) /* call successful*/
        /* ------------------------------------------------------------*/
         /* Store data in working storage.*/
        /* ------------------------------------------------------------*/

        FF04W00.FF04WHSB = FF6REC.FF6SUGBY; /* sugg buy*/
        FF04W00.FF04WHSF = FF6REC.FF6SLFCT; /* sales forecast*/
        FF04W00.FF04WHPT = FF6REC.FF4RTRGT; /* production trgt*/
        FF04W00.FF04WHBI[FF04WCNT] = FF6REC.FF6BEINV; /* beg inv*/
        FF04W00.FF04WHOO[FF04WCNT] = FF6REC.FG4ONORD; /* on order*/

        FF04W00.FF04WRTN = "Y"; /* a particular row found*/

      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUMMED ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/




end // end FF04140

// Calculate fields
Function FF04150()
   /* ------------------------------------------------------------*/
   /* Indicate modifiable data.*/
   /* ------------------------------------------------------------*/

  FF04W01.CACHGFL = "Y"; /* Indicate modifiable data*/

   /* ------------------------------------------------------------*/
   /* Move S/BUY Line to display storage and add to total.      |*/
   /* ------------------------------------------------------------*/

  FF04W01.FF04WSBY[FF04WCNT] = FF04W00.FF04WHSB;
  FF04W00.FF04WTTA = FF04W00.FF04WTTA + FF04W01.FF04WSBY[FF04WCNT];

   /* ------------------------------------------------------------*/
   /* Line Target can be the amount from the D/B, be set to zero|*/
   /* (if requested), or set to suggested buy (if requested).   |*/
                                                             /* |*/
   /* ------------------------------------------------------------*/

  if (FF04W00.FF04WST0 == "Y") /* if set-to-zero requested*/

    FF04W01.FF04WTGT[FF04WCNT] = 0; /* disp storage*/

  else

    if (FF04W00.FF04WCAL == "Y") /* if dup-sbuy requested*/

      FF04W01.FF04WTGT[FF04WCNT] = FF04W00.FF04WHSB;

    else /* This is the 'normal' routine*/

      FF04W01.FF04WTGT[FF04WCNT] = FF04W00.FF04WHPT; /* disp storage*/

    end

    FF04W00.FF04WTTB = FF04W00.FF04WTTB + FF04W01.FF04WTGT[FF04WCNT];

  end

   /* ------------------------------------------------------------*/
   /* Calculate variance & move to display storage.             |*/
                                                             /* |*/
   /* VARIANCE = S/BUY LINE  -  LINE TARGET                     |*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = 0; /* clear field*/

  FF04W00.FF04WFDA = FF04W00.FF04WFDA + FF04W01.FF04WSBY[FF04WCNT];
  FF04W00.FF04WFDA = FF04W00.FF04WFDA - FF04W01.FF04WTGT[FF04WCNT];

  FF04W01.FF04WVAR[FF04WCNT] = FF04W00.FF04WFDA; /* disp storage*/
  FF04W00.FF04WTTC = FF04W00.FF04WTTC + FF04W00.FF04WFDA; /* totals*/

   /* ------------------------------------------------------------*/
   /* Calculate SUG END INV & move to display storage.          |*/
                                                             /* |*/
   /* SUG END INV =  s/buy + beg inv + on order - sales fcst    |*/
                                                             /* |*/
   /* FF04W00.FF04WHSB    - suggested buy                       |*/
   /* FF04W00.FF04WHBI    - beg inv (last mo's end inv)         |*/
   /* FF04W00.FF04WHOO    - on order                            |*/
   /* FF04W00.FF04WHSF    - sales fcst                          |*/
   /* ------------------------------------------------------------*/

  if (FF04W00.FF04WCNT == 1) /* If first month*/
    FF04W00.FF04WFDA = FF04W00.FF04WHSB + FF04W00.FF04WHBI[FF04WCNT];
  else
    FF04W00.FF04WSUB = FF04W00.FF04WCNT - 1;
    FF04W00.FF04WFDA = FF04W00.FF04WHSB + FF04W01.FF04WSEI[FF04WSUB];
  end

  FF04W00.FF04WFDA = FF04W00.FF04WFDA + FF04W00.FF04WHOO[FF04WCNT];
  FF04W00.FF04WFDA = FF04W00.FF04WFDA - FF04W00.FF04WHSF;

  FF04W01.FF04WSEI[FF04WCNT] = FF04W00.FF04WFDA; /* disp storage*/
  FF04W00.FF04WTTD = FF04W00.FF04WTTD + FF04W00.FF04WFDA; /* totals*/

   /* ------------------------------------------------------------*/
   /* Calculate SUG INV TRN & move to display storage.          |*/
   /* ------------------------------------------------------------*/

  FF04151(); /* Calculate Sug Inv Trn*/

  FF04W00.FF04WTTG = FF04W00.FF04WTTG + FF04W00.FF04WFDC; /* totals*/

   /* ------------------------------------------------------------*/
   /* Calculate TGT END INV & move to display storage.          |*/
                                                             /* |*/
   /* TGT END INV =  prdctn trgt + beg inv + on order - sls fcst|*/
                                                             /* |*/
   /* FF04W00.FF04WHpt    - production target                   |*/
   /* FF04W00.FF04WHBI    - beg inv (last mo's end inv)         |*/
   /* FF04W00.FF04WHOO    - on order                            |*/
   /* FF04W00.FF04WHSF    - sales fcst                          |*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WTGT[FF04WCNT];
  if (FF04W00.FF04WCNT == 1) /* If first month*/
    FF04W00.FF04WFDA = FF04W00.FF04WFDA + FF04W00.FF04WHBI[FF04WCNT];
  else
    FF04W00.FF04WSUB = FF04W00.FF04WCNT - 1;
    FF04W00.FF04WFDA = FF04W00.FF04WFDA + FF04W01.FF04WTEI[FF04WSUB];
  end

  FF04W00.FF04WFDA = FF04W00.FF04WFDA + FF04W00.FF04WHOO[FF04WCNT];
  FF04W00.FF04WFDA = FF04W00.FF04WFDA - FF04W00.FF04WHSF;

  FF04W01.FF04WTEI[FF04WCNT] = FF04W00.FF04WFDA; /* disp storage*/
  FF04W00.FF04WTTE = FF04W00.FF04WTTE + FF04W00.FF04WFDA; /* totals*/

   /* ------------------------------------------------------------*/
   /* Calculate TGT INV TRN & move to display storage.          |*/
   /* ------------------------------------------------------------*/

  FF04152(); /* Calculate Trg Inv Trn*/

  FF04W00.FF04WTTH = FF04W00.FF04WTTH + FF04W00.FF04WFDC; /* totals*/

   /* ------------------------------------------------------------*/
   /* Move SALES FCST to display storage.                       |*/
   /* ------------------------------------------------------------*/

  FF04W01.FF04WSLF[FF04WCNT] = FF04W00.FF04WHSF;
  FF04W00.FF04WTTF = FF04W00.FF04WTTF + FF04W00.FF04WHSF; /* totals*/

end // end FF04150

// Calculate Sug Inv Turns
Function FF04151()
   /* ------------------------------------------------------------*/
   /* Calculate:*/
             /* Sales Average = Sales Fcst for next 3 months * 12*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WNNN = FF04W00.FF04WCNT + 1; /* set counter*/
  FF04W00.FF04WSAV = 0; /* clear field*/
  FF04W00.FF04WFDA = 0; /* clear work field*/
  FF04W00.FF04WFDB = 0; /* clear work field*/
  FF04W00.FF04WFDC = 0; /* clear work field*/

  FF04W00.FF04WSAV = FF04W00.FF04WSAV + FF04W00.FF04WSLS[FF04WNNN];

  FF04W00.FF04WNNN = FF04W00.FF04WNNN + 1; /* add 1 to counter*/
  FF04W00.FF04WSAV = FF04W00.FF04WSAV + FF04W00.FF04WSLS[FF04WNNN];

  FF04W00.FF04WNNN = FF04W00.FF04WNNN + 1; /* add 1 to counter*/
  FF04W00.FF04WSAV = FF04W00.FF04WSAV + FF04W00.FF04WSLS[FF04WNNN];

  FF04W00.FF04WFDA = FF04W00.FF04WSAV * 12; /* Avg sales*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
        /* Average Inventory  =  Ending inventory  *  3*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDB = FF04W01.FF04WSEI[FF04WCNT] * 3; /* Avg Inv*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* INV TURNS  =  Avg sales  /  Avg inv*/
   /* ------------------------------------------------------------*/

  if (FF04W00.FF04WFDB > 0) /* if number is greater than zero*/
    FF04W00.FF04WFDC = mathLib.round(FF04W00.FF04WFDA / FF04W00.FF04WFDB, -mathLib.decimals(FF04W00.FF04WFDC));
  end

  FF04W01.FF04WSIT[FF04WCNT] = FF04W00.FF04WFDC; /* storage*/


end // end FF04151

// Calculate Trg Inv Turns
Function FF04152()
   /* ------------------------------------------------------------*/
   /* Calculate:*/
             /* Sales Average = Sales Fcst for next 3 months * 12*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = 0; /* clear work field*/
  FF04W00.FF04WFDB = 0; /* clear work field*/
  FF04W00.FF04WFDC = 0; /* clear work field*/

  FF04W00.FF04WFDA = FF04W00.FF04WSAV * 12; /* Avg sales*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
        /* Average Inventory  =  Ending inventory  *  3*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDB = FF04W01.FF04WTEI[FF04WCNT] * 3; /* Avg Inv*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* INV TURNS  =  Avg sales  /  Avg inv*/
   /* ------------------------------------------------------------*/

  if (FF04W00.FF04WFDB > 0) /* if number is greater than zero*/
    FF04W00.FF04WFDC = mathLib.round(FF04W00.FF04WFDA / FF04W00.FF04WFDB, -mathLib.decimals(FF04W00.FF04WFDC));
  end

  FF04W01.FF04WTVT[FF04WCNT] = FF04W00.FF04WFDC; /* storage*/


end // end FF04152

// Move totals to storage
Function FF04160()
   /* ------------------------------------------------------------*/
   /* Add one to last count, to be in position for totals.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WSUB = FF04W00.FF04WCNT + 1; /* get tot position*/

   /* ------------------------------------------------------------*/
   /* Move SBUY LINE total to display storage.                  |*/
   /* ------------------------------------------------------------*/

  FF04W01.FF04WSBY[FF04WSUB] = FF04W00.FF04WTTA; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Move LINE TARGET total to display storage.                |*/
   /* ------------------------------------------------------------*/

  FF04W01.FF04WTGT[FF04WSUB] = FF04W00.FF04WTTB; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Move variance total to display storage.                   |*/
   /* ------------------------------------------------------------*/

  FF04W01.FF04WVAR[FF04WSUB] = FF04W00.FF04WTTC; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Move SUG END INV total to display storage.                |*/
   /* ------------------------------------------------------------*/

  FF04W01.FF04WSEI[FF04WSUB] = FF04W00.FF04WTTD; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Calculate Sug Inv Turns total and load.*/
   /* Calculate:  Total turns divided by nbr of months*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W00.FF04WTTG; /* Load total*/
  FF04W00.FF04WFDB = FF04W00.FF04WSUB - 1; /* Get count*/

  FF04W00.FF04WFDC = 0; /* Clear field*/
  if (FF04W00.FF04WFDB > 0)
    FF04W00.FF04WFDC = FF04W00.FF04WFDA / FF04W00.FF04WFDB; /* Get avg*/
  end

  FF04W01.FF04WSIT[FF04WSUB] = FF04W00.FF04WFDC; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Move TGT END INV total to display storage.                |*/
   /* ------------------------------------------------------------*/

  FF04W01.FF04WTEI[FF04WSUB] = FF04W00.FF04WTTE; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Calculate Trg Inv Turns total and load.*/
   /* Calculate:  Total turns divided by nbr of months*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W00.FF04WTTH; /* Load total*/
  FF04W00.FF04WFDB = FF04W00.FF04WSUB - 1; /* Get count*/

  FF04W00.FF04WFDC = 0; /* Clear field*/
  if (FF04W00.FF04WFDB > 0)
    FF04W00.FF04WFDC = mathLib.round(FF04W00.FF04WFDA / FF04W00.FF04WFDB, -mathLib.decimals(FF04W00.FF04WFDC));
  end

  FF04W01.FF04WTVT[FF04WSUB] = FF04W00.FF04WFDC; /* disp storage*/


   /* ------------------------------------------------------------*/
   /* Move sales fcst total to display storage.                 |*/
   /* ------------------------------------------------------------*/

  FF04W01.FF04WSLF[FF04WSUB] = FF04W00.FF04WTTF; /* disp storage*/

end // end FF04160

// Format and converse the map
Function FF04200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF04W00.FF04WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF04W00.FF04WSWF == "Y") /* Map must be formatted*/

      FF04210(); /* load header*/

      FF04WCNT = 1; /* set counter to zero*/

      if (FF04W00.FF04WNBR > 0) /* If range exists*/
        set FF04M001.FF04MTGT[1] cursor; /* Place cursor*/
      end

      while (FF04W00.FF04WCNT <= FF04W00.FF04WNBR /* if cnt LT nbr of mos*/
       && FF04W00.FF04WNBR > 0) /* if nbr greater than zero*/

        FF04220(); /* load fields as thousands*/

        set FF04M001.FF04MTGT[FF04WCNT] normal; /* make field visable*/

        FF04W00.FF04WCNT = FF04W00.FF04WCNT + 1; /* add to counter*/

      end

      if (FF04W00.FF04WNBR > 0) /* if there are totals to load*/

        FF04230(); /* load totals as millions*/

        set FF04M001.FF04MTGT[FF04WCNT] skip; /* make field visable*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF04M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF04M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF04M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF04M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF04M001 alarm; /* Indicate sound alarm*/

  end

  converse FF04M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "    "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF04M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF04M001.CAITEM; /* Application data*/


end // end FF04200

// Load the header info
Function FF04210()
   /* ------------------------------------------------------------*/
   /* Clear the map.*/
   /* ------------------------------------------------------------*/

  set FF04M001 initial; /* Clear map*/
  FF04W00.FF04WSWF = "N"; /* Format map switch*/

   /* ------------------------------------------------------------*/
   /* Load header information.*/
   /* ------------------------------------------------------------*/

  FF04M001.FFABEGMO = FF04W01.FFABEGMO; /* begin month*/
  FF04M001.FFAENDMO = FF04W01.FFAENDMO; /* end month*/

  FF04M001.XPLCD = FFWREC.XPLCD; /* line code*/
  FF04M001.XPLABRV = FFWREC.XPLABRV; /* line name*/
  FF04M001.YPGCD = FFWREC.YPGCD; /* type code*/
  FF04M001.YPGABRV = FFWREC.YPGABRV; /* type name*/
  FF04M001.YSMXDV = FFWREC.YSMXDV; /* div grp code*/
  FF04M001.YSMSMDSC = FFWREC.YSMSMDSC; /* div grp name*/

  FF04M001.FF2LRVFL = FF04W01.FF2LRVFL; /* reviewed switch*/

   /* ------------------------------------------------------------*/
   /* Load column header.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WCNT = 1; /* set sub to zero*/

  while (FF04W00.FF04WCNT <= FF04W00.FF04WNBR) /* until cnt ^Le nbr months*/

    FF04M001.FF04MRMO[FF04WCNT] = FF04W01.FF04WRMO[FF04WCNT];

    FF04W00.FF04WCNT = FF04W00.FF04WCNT + 1; /* add 1 to sub*/

  end

  FF04M001.FF04MRMO[FF04WCNT] = FF04W01.FF04WRMO[FF04WCNT];

end // end FF04210

// Translate and load fields
Function FF04220()
   /* ------------------------------------------------------------*/
   /* Translate S/BUY TARGET & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WSBY[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MSBY[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MSBY[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate TARGET & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WTGT[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MTGT[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MTGT[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate VARIANCE & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WVAR[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MVAR[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MVAR[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate SUG END INV & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WSEI[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MSEI[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MSEI[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Move SUG INV TRN to display storage.  Number needs no*/
   /* translation.*/
   /* ------------------------------------------------------------*/

  FF04M001.FF04MSIT[FF04WCNT] = FF04W01.FF04WSIT[FF04WCNT]; /* map*/
  FF04W01.FF04MSIT[FF04WCNT] = FF04W01.FF04WSIT[FF04WCNT]; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate TGT END INV & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WTEI[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MTEI[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MTEI[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Move TRG INV TRN to display storage.  Number needs no*/
   /* translation.*/
   /* ------------------------------------------------------------*/

  FF04M001.FF04MTVT[FF04WCNT] = FF04W01.FF04WTVT[FF04WCNT]; /* map*/
  FF04W01.FF04MTVT[FF04WCNT] = FF04W01.FF04WTVT[FF04WCNT]; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate SALES FCST & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WSLF[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MSLF[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MSLF[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/


end // end FF04220

// Translate and load totals
Function FF04230()
   /* ------------------------------------------------------------*/
   /* Translate S/BUY TARGET & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WSBY[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MSBY[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MSBY[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate TARGET & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WTGT[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MTGT[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MTGT[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate VARIANCE & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WVAR[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MVAR[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MVAR[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate SUG END INV & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WSEI[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MSEI[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MSEI[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Move SUG INV TRN to display storage.  Number needs no*/
   /* translation.*/
   /* ------------------------------------------------------------*/

  FF04M001.FF04MSIT[FF04WCNT] = FF04W01.FF04WSIT[FF04WCNT]; /* map*/
  FF04W01.FF04MSIT[FF04WCNT] = FF04W01.FF04WSIT[FF04WCNT]; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate TGT END INV & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WTEI[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MTEI[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MTEI[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Move TGT INV TRN to display storage.  Number needs no*/
   /* translation.*/
   /* ------------------------------------------------------------*/

  FF04M001.FF04MTVT[FF04WCNT] = FF04W01.FF04WTVT[FF04WCNT]; /* map*/
  FF04W01.FF04MTVT[FF04WCNT] = FF04W01.FF04WTVT[FF04WCNT]; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate SALES FCST & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WSLF[FF04WCNT];
  FFXREC.FFXNUMB = FF04W00.FF04WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF04M001.FF04MSLF[FF04WCNT] = FFXREC.FFXCHAR; /* map*/
  FF04W01.FF04MSLF[FF04WCNT] = FFXREC.FFXCHAR; /* storage*/


end // end FF04230

// Check attention identifier
Function FF04300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF04W00.FF04WSWR == "Y") /* Data was requested*/
      set FF04W01 empty; /* clear display storage*/
    end

    FF04W00.FF04WSWF = "Y"; /* Format the map switch*/
    FF04W00.FF04WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF04M001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF04M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0U"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FF00"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FF0V"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20  /* and PF20 was not pressed*/
   && converseVar.eventKey not pf21) /* and PF21 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

end // end FF04300

// Reset highlighted fields
Function FF04400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF04M001.FFABEGMO initialAttributes; /* beginning month*/
  set FF04M001.FFAENDMO initialAttributes; /* ending month*/
  set FF04M001.XPLCD initialAttributes; /* line*/
  set FF04M001.YPGCD initialAttributes; /* type*/
  set FF04M001.YSMXDV initialAttributes; /* div grp*/

  FF04W00.FF04WCNT = 0; /* set counter to zero*/
  while (FF04W00.FF04WCNT < FF04W00.FF04WNBR) /* if count less than nbr*/

    FF04W00.FF04WCNT = FF04W00.FF04WCNT + 1; /* add one to sub*/

    set FF04M001.FF04MTGT[FF04WCNT] normal; /* target*/

  end

  set FF04M001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF04M001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.XPLCD == "?" /* line list requested*/
   || FF04M001.YPGCD == "?") /* type list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.XPLCD == "?") /* Line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF04M001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FF04M001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FF04M001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF04M001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF04M001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.YPGCD == "?") /* type list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF04M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF04M001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FF04M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF04M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF04M001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF04400

// Verify the entered data
Function FF04500()
   /* ------------------------------------------------------------*/
   /* If fast path item data was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF04M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If any target field changed, verify.*/
   /* ------------------------------------------------------------*/

  if (FF04W01.CACHGFL == "Y") /* if there is any data*/

    FF04W00.FF04WCNT = FF04W00.FF04WNBR; /* initalize subscript*/
    while (FF04W00.FF04WCNT > 0) /* count greater than zero*/

      FF04510(); /* verify trgt*/

      FF04W00.FF04WCNT = FF04W00.FF04WCNT - 1; /* subtract from counter*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any of the key fields changed, determine if any of the*/
   /* modifiable fields were changed.*/
   /* ------------------------------------------------------------*/

  if (FF04W01.CACHGFL == "Y") /* if there is any data*/

    FF04W00.FF04WCNT = FF04W00.FF04WNBR; /* initalize subscript*/
    while (FF04W00.FF04WCNT > 0) /* count greater than zero*/

      FF04520(); /* Check trgt for changes*/

      FF04W00.FF04WCNT = FF04W00.FF04WCNT - 1; /* subtract from counter*/

    end

  end

  if (FF04M001.FF2LRVFL != FF04W01.FF2LRVFL) /* reviewed fl change*/
    FF04530(); /* verify flag*/
  end

  if (FF04M001.YSMXDV == " "                /* no div grp*/
   || FF04M001.YPGCD == " "                 /* no line*/
   || FF04M001.XPLCD == " "                 /* no type*/
   || FF04M001.FFAENDMO == 0                /* no range*/
   || FF04M001.FFABEGMO == 0                /* no range*/
                                            
   || FF04M001.YSMXDV != FFWREC.YSMXDV      /* div grp changed*/
   || FF04M001.YPGCD != FFWREC.YPGCD        /* type changed*/
   || FF04M001.XPLCD != FFWREC.XPLCD        /* line changed*/
   || FF04M001.FFAENDMO != FF04W01.FFAENDMO /* range changed*/
   || FF04M001.FFABEGMO != FF04W01.FFABEGMO) /* range changed*/

    FF04540(); /* verify div grp*/
    FF04550(); /* verify type*/
    FF04560(); /* verify line*/
    FF04570(); /* verify FFXRF*/
    FF04580(); /* Verify range*/

  end

   /* ------------------------------------------------------------*/
   /* If an update was requested, check if key fields changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf21) /* If update was requested*/
    FF04590(); /* Check for key changes*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found in this process, exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    exit stack;
  end


end // end FF04500

// Verify target fields
Function FF04510()
   /* ------------------------------------------------------------*/
   /* If target field was changed, verify field.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.FF04MTGT[FF04WCNT] != FF04W01.FF04MTGT[FF04WCNT])

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    /* ------------------------------------------------------------*/
     /* Verify Co. trgt.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXCHAR = FF04M001.FF04MTGT[FF04WCNT];
                                   /* send to translate*/

    XSFFS15();

    if (FFXREC.FFXRTNCD != 0) /* If error was found*/

      set FF04M001.FF04MTGT[FF04WCNT] cursor, bold; /* highlight*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(118); /* indicate field is invalid*/

    end

  end

end // end FF04510

// Check target fields
Function FF04520()
   /* ------------------------------------------------------------*/
   /* If target field was changed and the key changed,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.FF04MTGT[FF04WCNT] != FF04W01.FF04MTGT[FF04WCNT])

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    if (FF04M001.FFABEGMO != FF04W01.FFABEGMO /* range changed*/
     || FF04M001.FFAENDMO != FF04W01.FFAENDMO /* range changed*/
     || FF04M001.XPLCD != FFWREC.XPLCD        /* line changed*/
     || FF04M001.YPGCD != FFWREC.YPGCD        /* type changed*/
     || FF04M001.YSMXDV != FFWREC.YSMXDV)     /* div grp changed*/

      set FF04M001.FF04MTGT[FF04WCNT] cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF04M001.YSMXDV != FFWREC.YSMXDV) /* div grp changed*/
        set FF04M001.YSMXDV cursor, bold; /* highlight*/
      end

      if (FF04M001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF04M001.YPGCD cursor, bold; /* highlight*/
      end

      if (FF04M001.XPLCD != FFWREC.XPLCD) /* line changed*/
        set FF04M001.XPLCD cursor, bold; /* highlight*/
      end

      if (FF04M001.FFAENDMO != FF04W01.FFAENDMO) /* range changed*/
        set FF04M001.FFAENDMO cursor, bold; /* highlight*/
      end

      if (FF04M001.FFABEGMO != FF04W01.FFABEGMO) /* range changed*/
        set FF04M001.FFABEGMO cursor, bold; /* highlight*/
      end

    end

  end

end // end FF04520

// Check reviewed field
Function FF04530()
   /* ------------------------------------------------------------*/
   /* If reviewed field was changed and the key changed,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.FF2LRVFL != " ") /* if reviewed flag was entered*/

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    if (FF04M001.FFABEGMO != FF04W01.FFABEGMO /* range changed*/
     || FF04M001.FFAENDMO != FF04W01.FFAENDMO /* range changed*/
     || FF04M001.XPLCD != FFWREC.XPLCD        /* range changed*/
     || FF04M001.YPGCD != FFWREC.YPGCD        /* range changed*/
     || FF04M001.YSMXDV != FFWREC.YSMXDV)     /* range changed*/

      set FF04M001.FF2LRVFL cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF04M001.YSMXDV != FFWREC.YSMXDV) /* div grp changed*/
        set FF04M001.YSMXDV cursor, bold; /* highlight*/
      end

      if (FF04M001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF04M001.YPGCD cursor, bold; /* highlight*/
      end

      if (FF04M001.XPLCD != FFWREC.XPLCD) /* line changed*/
        set FF04M001.XPLCD cursor, bold; /* highlight*/
      end

      if (FF04M001.FFAENDMO != FF04W01.FFAENDMO) /* range changed*/
        set FF04M001.FFAENDMO cursor, bold; /* highlight*/
      end

      if (FF04M001.FFABEGMO != FF04W01.FFABEGMO) /* range changed*/
        set FF04M001.FFABEGMO cursor, bold; /* highlight*/
      end

    end

    if (FF04M001.FF2LRVFL != "Y"
     && FF04M001.FF2LRVFL != "N")

      set FF04M001.FF2LRVFL cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(10); /* Invalid value entered*/

    end

  end

end // end FF04530

// Check div grp code
Function FF04540()
   /* ------------------------------------------------------------*/
   /* Verify division group.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Row storage area*/

  YSMREC.YSMSUMCD = FF04M001.YSMXDV; /* Division group code*/
  TA1REC.TA1PGMNM = "FF04530 "; /* Calling program*/

  XSFFS20(); /* Verify division group*/

   /* ------------------------------------------------------------*/
   /* If not found, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/

    FF04M001.YSMSMDSC = YSMREC.YSMSMDSC; /* Abbreviation*/

  else

    FF04M001.YSMSMDSC = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FF04M001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FF04540

// Check type code
Function FF04550()
   /* ------------------------------------------------------------*/
   /* Verify type code.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.YPGCD == "*") /* Type code equal '*'*/

    FF04M001.YPGABRV = "*ALL*"; /* Abbreviation*/

  else

    if (FF04M001.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF04M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      FF04M001.YPGABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FF04M001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/

    end

  end


end // end FF04550

// Check line code
Function FF04560()
   /* ------------------------------------------------------------*/
   /* Verify line code.*/
   /* ------------------------------------------------------------*/

  XPLREC.XPLCD = FF04M001.XPLCD; /* Format key*/
  XPLREC.XGPCD = COMMAREA.XGPCD; /* Format key*/

  if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FF04M001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FF04M001.XPLABRV = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "550"; /* Module identification*/
    set FF04M001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FF04560

// Verify FFXRF
Function FF04570()
   /* ------------------------------------------------------------*/
   /* Verify that key is in FFXRF.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If there are no errors*/

    /* ------------------------------------------------------------*/
     /* Clear the row storage area.*/
    /* ------------------------------------------------------------*/

    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/

    FF2REC.XPCCD = "*"; /* category*/
    FF2REC.XPLCD = FF04M001.XPLCD; /* line*/
    FF2REC.YPGCD = FF04M001.YPGCD; /* type*/
    FF2REC.YSMXDV = FF04M001.YSMXDV; /* div grp*/

    /* ------------------------------------------------------------*/
     /* Select the row to display from the table.*/
    /* ------------------------------------------------------------*/

    FF04571(); /* Open cursor for DFCAST.VFFXRF01*/

    FF04572(); /* fetch FFXRF*/

    /* ------------------------------------------------------------*/
     /* If successful, close FFXRF.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE != 0) /* Row not found code*/

      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "560"; /* Module identification*/
      set FF04M001.YSMXDV bold; /* Highlight*/
      set FF04M001.YPGCD bold; /* Highlight*/
      set FF04M001.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Indicate invalid relationship*/

    end

    FF04573(); /* close cursor*/

  end


end // end FF04570

// Open  FFXRF
Function FF04571()
   /* ------------------------------------------------------------*/
   /* Open FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "561"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04571

// Fetch FFXRF
Function FF04572()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "562"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04572

// Close FFXRF
Function FF04573()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "563"; /* Module identification*/

  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04573

// Verify range
Function FF04580()
   /* ------------------------------------------------------------*/
   /* Initialize record for calls to date routine.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* clear date edit record*/

  FFZREC.FFZBYYMM = FF04M001.FFABEGMO; /* Beg date*/
  FFZREC.FFZEYYMM = FF04M001.FFAENDMO; /* end date*/
  FFZREC.FFZSRANG = "Y";

   /* ------------------------------------------------------------*/
   /* Edit range.  Send YYMM - receive back CCYYMM.*/
   /* ------------------------------------------------------------*/

  XSFFS30();

  if (FFZREC.FFZENDRC == 0) /* end date was valid*/
    FF04W00.FF04WCEG = FFZREC.FFZENDMO; /* end month*/
  else
    if (FFZREC.FFZENDRC == 1) /* end date was missing*/
      FFWREC.XXXMODID = "570"; /* Module identification*/
      set FF04M001.FFAENDMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    else
      if (FFZREC.FFZENDRC == 2) /* end date was invalid*/
        FFWREC.XXXMODID = "570"; /* Module identification*/
        set FF04M001.FFAENDMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(17); /* Indicate invalid*/
      else
        FFWREC.XXXMODID = "570"; /* Module identification*/
        set FF04M001.FFAENDMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* Indicate out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC == 0) /* beg date was valid*/
    FF04W00.FF04WCBG = FFZREC.FFZBEGMO; /* end month*/
  else
    if (FFZREC.FFZBEGRC == 1) /* beg date was missing*/
      FFWREC.XXXMODID = "570"; /* Module identification*/
      set FF04M001.FFABEGMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    else
      if (FFZREC.FFZBEGRC == 2) /* beg date was invalid*/
        FFWREC.XXXMODID = "570"; /* Module identification*/
        set FF04M001.FFABEGMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(17); /* Indicate invalid*/
      else
        FFWREC.XXXMODID = "570"; /* Module identification*/
        set FF04M001.FFABEGMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* Indicate out of range*/
      end
    end
  end

end // end FF04580

// Check for key changes
Function FF04590()
   /* ------------------------------------------------------------*/
   /* If any key field was changed, return message to user.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.FFABEGMO != FF04W01.FFABEGMO /* range changed*/
   || FF04M001.FFAENDMO != FF04W01.FFAENDMO /* range changed*/
   || FF04M001.XPLCD != FFWREC.XPLCD        /* range changed*/
   || FF04M001.YPGCD != FFWREC.YPGCD        /* range changed*/
   || FF04M001.YSMXDV != FFWREC.YSMXDV)     /* range changed*/

    FFWREC.XXXMODID = "580"; /* Module identification*/
    converseLib.validationFailed(128); /* Can't chg key & request update*/

    if (FF04M001.YSMXDV != FFWREC.YSMXDV) /* div grp changed*/
      set FF04M001.YSMXDV cursor, bold; /* highlight*/
    end

    if (FF04M001.YPGCD != FFWREC.YPGCD) /* type changed*/
      set FF04M001.YPGCD cursor, bold; /* highlight*/
    end

    if (FF04M001.XPLCD != FFWREC.XPLCD) /* line changed*/
      set FF04M001.XPLCD cursor, bold; /* highlight*/
    end

    if (FF04M001.FFAENDMO != FF04W01.FFAENDMO) /* range changed*/
      set FF04M001.FFAENDMO cursor, bold; /* highlight*/
    end

    if (FF04M001.FFABEGMO != FF04W01.FFABEGMO) /* range changed*/
      set FF04M001.FFABEGMO cursor, bold; /* highlight*/
    end

  end

  if (FF04M001.FF2LRVFL != "Y"
   && FF04M001.FF2LRVFL != "N")

    FFWREC.XXXMODID = "580"; /* Module identification*/
    set FF04M001.FF2LRVFL cursor, bold; /* highlight*/
    converseLib.validationFailed(10); /* Invalid value entered*/

  end


end // end FF04590

// Process valid input request
Function FF04600()
   /* ------------------------------------------------------------*/
   /* indicate that the map must be formated.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.FFABEGMO != FF04W01.FFABEGMO /* range changed*/
   || FF04M001.FFAENDMO != FF04W01.FFAENDMO /* range changed*/
   || FF04M001.XPLCD != FFWREC.XPLCD        /* line code*/
   || FF04M001.YPGCD != FFWREC.YPGCD        /* type code*/
   || FF04M001.YSMXDV != FFWREC.YSMXDV)     /* div grp code*/

    /* ------------------------------------------------------------*/
     /* Update key in FFWREC.*/
    /* ------------------------------------------------------------*/

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* begin month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* end month*/

    FFWREC.XPLCD = FF04M001.XPLCD; /* line code*/
    FFWREC.XPLABRV = FF04M001.XPLABRV; /* line name*/
    FFWREC.YPGCD = FF04M001.YPGCD; /* type code*/
    FFWREC.YPGABRV = FF04M001.YPGABRV; /* type name*/
    FFWREC.YSMXDV = FF04M001.YSMXDV; /* div grp code*/
    FFWREC.YSMSMDSC = FF04M001.YSMSMDSC; /* Div grpname*/

    FF04W00.FF04WSWR = "Y"; /* indicate that data requested*/

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If PF19 was pressed,*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19)

    FF04W00.FF04WSWR = "Y"; /* indicate that data requested*/
    FF04W00.FF04WST0 = "Y"; /* indicate set-to-zero request*/

    /* ------------------------------------------------------------*/
     /* Indicate to user that targets were set to zero.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 165; /* Indicate update completed*/

    exit stack; /* exit to display map*/
  end
   /* ------------------------------------------------------------*/
   /* If PF20 was pressed,*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20)

    FF04W00.FF04WSWR = "Y"; /* indicate that data requested*/
    FF04W00.FF04WCAL = "Y"; /* indicate calculation request*/

    /* ------------------------------------------------------------*/
     /* Indicate to user that S/BUY was used for target.*/
    /* ------------------------------------------------------------*/
    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 166; /* Indicate dub-sbuy used*/

    exit stack; /* exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF21 was pressed,*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf21)

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/
    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* Check if 'reviewed' switch changed.*/
    /* ------------------------------------------------------------*/
    if (FF04M001.FF2LRVFL != FF04W00.FF2LRVFL) /* Reviewed switch changed*/

      FF04610(); /* Update DFCAST.VFFXRF01*/

    end

    /* ------------------------------------------------------------*/
     /* Check for type equal '*'.*/
    /* ------------------------------------------------------------*/
    if (FF04M001.YPGCD != "*") /* If type not equal to '*'*/

      /* ------------------------------------------------------------*/
       /* Update the changed data in the table rows.*/
      /* ------------------------------------------------------------*/
      FF04W00.FF04WCNT = 1; /* set subscript*/

      while (FF04W00.FF04WCNT <= FF04W00.FF04WNBR) /* sub LE nbr mos*/

        if (FF04M001.FF04MTGT[FF04WCNT] != FF04W00.FF04WHTG[FF04WCNT])

          FF04620(); /* Select DFCAST.VMLTYP01*/

          FF6REC.FF4RTRGT = FF04W01.FF04WTGT[FF04WCNT];

          if (SQLCA.VAGen_SQLCODE == 0) /* Row was found for update*/
            FF04630(); /* Update DFCAST.VMLTYP01*/
          else
            FF04640(); /* Add DFCAST.VMLTYP01*/
          end

        end

        FF04W00.FF04WCNT = FF04W00.FF04WCNT + 1; /* add to subscript*/

      end

      /* ------------------------------------------------------------*/
       /* Indicate that the updates were successfully completed.*/
      /* ------------------------------------------------------------*/

      FFWREC.FFWMODSW = "N"; /* modified data exit switch*/

      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 32; /* Indicate update completed*/

    else
      /* ------------------------------------------------------------*/
       /* Indicate that no updates are allowed if type equal '*'.*/
      /* ------------------------------------------------------------*/

      FFWREC.FFWMODSW = "N"; /* modified data exit switch*/

      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 307; /* Indicate no updates allowed*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Update Display Storage area.*/
   /* ------------------------------------------------------------*/

  FF04W01.FFABEGMO = FF04M001.FFABEGMO; /* beg month*/
  FF04W01.FFAENDMO = FF04M001.FFAENDMO; /* end month*/

  FF04W01.FF2LRVFL = FF04M001.FF2LRVFL; /* reviewed flag*/

  FF04W00.FF04WTSW = "N"; /* clear re-totaling switch*/

  FF04W00.FF04WCNT = 1; /* set subscript*/
  while (FF04W00.FF04WCNT <= FF04W00.FF04WNBR) /* until ^le nbr month*/

    FF04650(); /* Update display storage*/

    FF04W00.FF04WCNT = FF04W00.FF04WCNT + 1;

  end

  FF04660(); /* Check for re-totaling*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/


end // end FF04600

// Process FFXRF
Function FF04610()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF2REC.XPCCD = "*"; /* category*/
  FF2REC.XPLCD = FF04M001.XPLCD; /* line*/
  FF2REC.YPGCD = FF04M001.YPGCD; /* type*/
  FF2REC.YSMXDV = FF04M001.YSMXDV; /* div grp*/

   /* ------------------------------------------------------------*/
   /* Process FFXRF.*/
   /* ------------------------------------------------------------*/
  FF04611(); /* Open FFXRF*/

  while (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    FF04612(); /* Fetch FFXRF*/

    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      FF04613(); /* Update FFXRF*/
    end

  end

  FF04614(); /* Close FFXRF*/

end // end FF04610

// Open    FFXRF
Function FF04611()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04611

// Fetch   FFXRF
Function FF04612()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04612

// Update  FFXRF
Function FF04613()
   /* ------------------------------------------------------------*/
   /* Update field.*/
   /* ------------------------------------------------------------*/

  FF2REC.FF2LRVFL = FF04M001.FF2LRVFL; /* Update switch*/

  FF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update DFCAST.VFFXRF01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("U ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF04W00.FF04WSWR = "Y"; /* Data requested switch*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "613"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04613

// Close   FFXRF
Function FF04614()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "614"; /* Module identification*/

  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04614

// Select  MLTYP
Function FF04620()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* clear DFCAST.VMLTYP01 record.*/

   /* ------------------------------------------------------------*/
   /* Format keys for call to DFCAST.VMLTYP01.*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WMCC = FF04W00.FF04WNCC[FF04WCNT]; /* cc to mask*/
  FF04W00.FF04WMMO = FF04W00.FF04WNMO[FF04WCNT]; /* yymm to mask*/
  FF6REC.FF4FCTMO = FF04W00.FF04WMDT; /* Range month*/

  FF6REC.XPLCD = FF04M001.XPLCD; /* Line code*/
  FF6REC.YPGCD = FF04M001.YPGCD; /* Type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("S ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "650"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04620

// Update  MLTYP
Function FF04630()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF6REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF6REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update DFCAST.VMLTYP01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("U ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF04W00.FF04WSWR = "Y"; /* Data requested switch*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "660"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "660"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04630

// Add --  MLTYP
Function FF04640()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF6REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FF6REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF6REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update DFCAST.VMLTYP01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("A ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF04W00.FF04WSWR = "Y"; /* Data requested switch*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "670"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF04640

// Update Display storage
Function FF04650()
   /* ------------------------------------------------------------*/
   /* Check if target field changed.*/
   /* ------------------------------------------------------------*/

  if (FF04M001.FF04MTGT[FF04WCNT] != FF04W01.FF04MTGT[FF04WCNT])

    FF04W00.FF04WTSW = "Y"; /* re-totaling required switch*/

    FF04W01.FF04MTGT[FF04WCNT] = FF04M001.FF04MTGT[FF04WCNT];

    FFXREC.FFXCHAR = FF04M001.FF04MTGT[FF04WCNT];
                                   /* send to translate*/
    XSFFS15();
    FF04W01.FF04WTGT[FF04WCNT] = FFXREC.FFXNUMB; /* target (bin)*/

    /* ------------------------------------------------------------*/
     /* Re-calculate Variance.*/
     /* Variance = s/buy Inline - Inline target*/
    /* ------------------------------------------------------------*/

    FF04W00.FF04WFDA = 0; /* clear work field*/

    FF04W00.FF04WFDA = FF04W00.FF04WFDA + FF04W01.FF04WSBY[FF04WCNT];
    FF04W00.FF04WFDA = FF04W00.FF04WFDA - FF04W01.FF04WTGT[FF04WCNT];

    FF04W01.FF04WVAR[FF04WCNT] = FF04W00.FF04WFDA; /* bin store*/

  end

   /* ------------------------------------------------------------*/
   /* Re-Calculate TGT END INV & move to display storage.       |*/
                                                             /* |*/
   /* TGT END INV =  prdctn trgt + beg inv + on order - sls fcst|*/
                                                             /* |*/
   /* FF04W00.FF04WHpt    - production target                   |*/
   /* FF04W00.FF04WHBI    - beg inv (last mo's ending inv)      |*/
   /* FF04W00.FF04WHOO    - on order                            |*/
   /* FF04W01.FF04Wslf    - sales fcst                          |*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDA = FF04W01.FF04WTGT[FF04WCNT];
  if (FF04W00.FF04WCNT == 1)
    FF04W00.FF04WFDA = FF04W00.FF04WFDA + FF04W00.FF04WHBI[FF04WCNT];
  else
    FF04W00.FF04WSUB = FF04WCNT - 1; /* subtract 1 from count*/
    FF04W00.FF04WFDA = FF04W00.FF04WFDA + FF04W01.FF04WTEI[FF04WSUB];
  end

  FF04W00.FF04WFDA = FF04W00.FF04WFDA + FF04W00.FF04WHOO[FF04WCNT];
  FF04W00.FF04WFDA = FF04W00.FF04WFDA - FF04W01.FF04WSLF[FF04WCNT];

  FF04W01.FF04WTEI[FF04WCNT] = FF04W00.FF04WFDA; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Re-Calculate:*/
             /* Sales Average = Sales Fcst for next 3 months * 12*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WNNN = FF04W00.FF04WCNT + 1; /* set counter*/
  FF04W00.FF04WSAV = 0; /* clear field*/
  FF04W00.FF04WFDA = 0; /* clear work field*/
  FF04W00.FF04WFDB = 0; /* clear work field*/
  FF04W00.FF04WFDC = 0; /* clear work field*/

  FF04W00.FF04WSAV = FF04W00.FF04WSAV + FF04W00.FF04WSLS[FF04WNNN];

  FF04W00.FF04WNNN = FF04W00.FF04WNNN + 1; /* add 1 to counter*/
  FF04W00.FF04WSAV = FF04W00.FF04WSAV + FF04W00.FF04WSLS[FF04WNNN];

  FF04W00.FF04WNNN = FF04W00.FF04WNNN + 1; /* add 1 to counter*/
  FF04W00.FF04WSAV = FF04W00.FF04WSAV + FF04W00.FF04WSLS[FF04WNNN];

  FF04W00.FF04WFDA = FF04W00.FF04WSAV * 12; /* Avg sales*/

   /* ------------------------------------------------------------*/
   /* Re-Calculate:*/
        /* Average Inventory  =  Ending inventory  *  3*/
   /* ------------------------------------------------------------*/

  FF04W00.FF04WFDB = FF04W01.FF04WTEI[FF04WCNT] * 3; /* Avg Inv*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* INV TURNS  =  Avg sales  /  Avg inv*/
   /* ------------------------------------------------------------*/

  if (FF04W00.FF04WFDB > 0) /* if number is greater than zero*/
    FF04W00.FF04WFDC = mathLib.round(FF04W00.FF04WFDA / FF04W00.FF04WFDB, -mathLib.decimals(FF04W00.FF04WFDC));
  end

  FF04W01.FF04WTVT[FF04WCNT] = FF04W00.FF04WFDC; /* storage*/


end // end FF04650

// Check if re-totaling required
Function FF04660()
   /* ------------------------------------------------------------*/
   /* Check if re-totaling is required.*/
   /* ------------------------------------------------------------*/

  if (FF04W00.FF04WTSW == "Y") /* re-totaling required*/

    FF04W00.FF04WCNT = 1;
    FF04W00.FF04WTTB = 0;
    FF04W00.FF04WTTC = 0;
    FF04W00.FF04WTTH = 0;
    FF04W00.FF04WTTE = 0;

    /* ---------------------------------------------------*/
     /* Add up target and variance.*/
    /* ---------------------------------------------------*/
    while (FF04W00.FF04WCNT <= FF04W00.FF04WNBR) /* until ^le nbr month*/

      FF04W00.FF04WTTB = FF04W00.FF04WTTB + FF04W01.FF04WTGT[FF04WCNT];
      FF04W00.FF04WTTC = FF04W00.FF04WTTC + FF04W01.FF04WVAR[FF04WCNT];
      FF04W00.FF04WTTE = FF04W00.FF04WTTE + FF04W01.FF04WTEI[FF04WCNT];
      FF04W00.FF04WTTH = FF04W00.FF04WTTH + FF04W01.FF04WTVT[FF04WCNT];

      FF04W00.FF04WCNT = FF04W00.FF04WCNT + 1;

    end

    /* --------------------------------------------------*/
     /* Target*/
    /* --------------------------------------------------*/

    FF04W01.FF04WTGT[FF04WCNT] = FF04W00.FF04WTTB; /* bin store*/

    /* --------------------------------------------------*/
     /* Variance.*/
    /* --------------------------------------------------*/

    FF04W01.FF04WVAR[FF04WCNT] = FF04W00.FF04WTTC; /* bin store*/

    /* --------------------------------------------------*/
     /* Target ending inventory.*/
    /* --------------------------------------------------*/

    FF04W01.FF04WTEI[FF04WCNT] = FF04W00.FF04WTTE; /* bin store*/

    /* ------------------------------------------------------------*/
     /* Calculate Trg Inv Turns total and load.*/
     /* Calculate:  Total turns divided by nbr of months*/
    /* ------------------------------------------------------------*/

    FF04W00.FF04WFDA = FF04W00.FF04WTTH; /* Load total*/
    FF04W00.FF04WFDB = FF04W00.FF04WSUB - 1; /* Get count*/

    if (FF04W00.FF04WFDB > 0)
      FF04W00.FF04WFDC = FF04W00.FF04WFDA / FF04W00.FF04WFDB; /* Get avg*/
    end

    FF04W01.FF04WTVT[FF04WCNT] = FF04W00.FF04WFDC;

  end

end // end FF04660

// Open MLTYP
Function FF04S02()
   /* ------------------------------------------------------------*/
   /* Open VMLTYP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FF04S02

// Fetch MLTYP
Function FF04S03()
   /* ------------------------------------------------------------*/
   /* Fetch VMLTYP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FF04S03

// Close MLTYP
Function FF04S04()
   /* ------------------------------------------------------------*/
   /* Close MLTYP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/

  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FF04S04

//*** RECORD=FF04W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF04W00 type basicRecord
  10 FF04WSWR FF04WSWR ; 
  10 FF04WSWF FF04WSWF ; 
  10 FF04WRTN FF04WRTN ; 
  10 FF04WDSW FF04WDSW ; 
  10 FF04WTSW FF04WTSW ; 
  10 FF04WST0 FF04WST0 ; 
  10 FF04WCAL FF04WCAL ; 
  10 * char(1) ; 
  10 FF2LRVFL FF2LRVFL ; 
  10 FF04WHTG FF04WHTG [12] ; 
  10 * char(1) ; 
  10 FF04WNBR FF04WNBR ; 
  10 FF04WAVG FF04WAVG ; 
  10 FF04WCNT FF04WCNT ; 
  10 FF04WSUB FF04WSUB ; 
  10 FF04WNNN FF04WNNN ; 
  10 * char(1) ; 
  10 FF04WNCC FF04WNCC [15] ; 
  10 FF04WNMO FF04WNMO [15] ; 
  10 * char(1) ; 
  10 FF04WMDT FF04WMDT ; 
    15 FF04WMCC FF04WMCC ; 
    15 FF04WMMO FF04WMMO ; 
  10 * char(1) ; 
  10 FF04WCBG FF04WCBG ; 
    15 * char(2) ; 
    15 FF04WCBC FF04WCBC ; 
    15 FF04WCBD FF04WCBD ; 
  10 * char(1) ; 
  10 FF04WCEG FF04WCEG ; 
    15 * char(2) ; 
    15 FF04WCEC FF04WCEC ; 
    15 FF04WCED FF04WCED ; 
  10 * char(1) ; 
  10 FF04WHCC FF04WHCC ; 
  10 FF04WHDT FF04WHDT ; 
    15 FF04WHYY FF04WHYY ; 
    15 FF04WHMM FF04WHMM ; 
  10 * char(1) ; 
  10 FF04WBDT FF04WBDT ; 
    15 FF04WBYY FF04WBYY ; 
    15 FF04WBMM FF04WBMM ; 
  10 * char(1) ; 
  10 FF04WEDT FF04WEDT ; 
    15 FF04WEYY FF04WEYY ; 
    15 FF04WEMM FF04WEMM ; 
  10 * char(1) ; 
  10 FF04WFDA FF04WFDA ; 
  10 FF04WFDB FF04WFDB ; 
  10 FF04WFDC FF04WFDC ; 
  10 FF04WFDE FF04WFDE ; 
  10 * char(1) ; 
  10 FF04WCIT FF04WCIT ; 
  10 * char(1) ; 
  10 FF04WTTA FF04WTTA ; 
  10 FF04WTTB FF04WTTB ; 
  10 FF04WTTC FF04WTTC ; 
  10 FF04WTTD FF04WTTD ; 
  10 FF04WTTE FF04WTTE ; 
  10 FF04WTTF FF04WTTF ; 
  10 FF04WTTG FF04WTTG ; 
  10 FF04WTTH FF04WTTH ; 
  10 * char(1) ; 
  10 FF04WHSB FF04WHSB ; 
  10 FF04WHPT FF04WHPT ; 
  10 FF04WHSF FF04WHSF ; 
  10 FF04WHBI FF04WHBI [12] ; 
  10 FF04WHOO FF04WHOO [12] ; 
  10 * char(1) ; 
  10 ZZZCHGCT ZZZCHGCT [2] ; 
  10 * char(1) ; 
  10 FF04WSLS FF04WSLS [15] ; 
  10 FF04WSAV FF04WSAV ; 
  10 * char(1) ; 
  10 FF04WNUM FF04WNUM ; 
end // end FF04W00

//*** RECORD=FF04W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF04W01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 * char(1) ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFAENDMO FFAENDMO ; 
  10 * char(1) ; 
  10 FF2LRVFL FF2LRVFL ; 
  10 * char(1) ; 
  10 FF04WRMO FF04WRMO [13] ; 
  10 * char(1) ; 
  10 FF04MSBY FF04MSBY [13] ; 
  10 FF04MTGT FF04MTGT [13] ; 
  10 FF04MVAR FF04MVAR [13] ; 
  10 FF04MSEI FF04MSEI [13] ; 
  10 FF04MSIT FF04MSIT [13] ; 
  10 FF04MTEI FF04MTEI [13] ; 
  10 FF04MTVT FF04MTVT [13] ; 
  10 FF04MSLF FF04MSLF [13] ; 
  10 * char(1) ; 
  10 FF04WSBY FF04WSBY [13] ; 
  10 FF04WTGT FF04WTGT [13] ; 
  10 FF04WVAR FF04WVAR [13] ; 
  10 FF04WSEI FF04WSEI [13] ; 
  10 FF04WSIT FF04WSIT [13] ; 
  10 FF04WTEI FF04WTEI [13] ; 
  10 FF04WTVT FF04WTVT [13] ; 
  10 FF04WSLF FF04WSLF [13] ; 
  10 * char(1) ; 
end // end FF04W01

DataItem FF04MSBY char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Sug end inv
DataItem FF04MSEI char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Sug inv trn
DataItem FF04MSIT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sales forecast
DataItem FF04MSLF char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tgt end inv
DataItem FF04MTEI char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF04MTGT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tgt inv trn
DataItem FF04MTVT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variance
DataItem FF04MVAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sub for 3 mos past range
DataItem FF04WAVG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// begin date
DataItem FF04WBDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// begin month
DataItem FF04WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// begin year
DataItem FF04WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Request calculation
DataItem FF04WCAL char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// converted beg cc
DataItem FF04WCBC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// converted beg date yymm
DataItem FF04WCBD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// converted beg group
DataItem FF04WCBG num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// converted end cc
DataItem FF04WCEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// converted end date yymm
DataItem FF04WCED num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// converted end group
DataItem FF04WCEG num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Hold for INLINE trgt
DataItem FF04WCIT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Counter for loops
DataItem FF04WCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Data found switch
DataItem FF04WDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ending date
DataItem FF04WEDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// ending month
DataItem FF04WEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// ending year
DataItem FF04WEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// work field
DataItem FF04WFDA bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem FF04WFDB bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem FF04WFDC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem FF04WFDE bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning inv
DataItem FF04WHBI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold century
DataItem FF04WHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold date
DataItem FF04WHDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold month
DataItem FF04WHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// on order
DataItem FF04WHOO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// production trgt
DataItem FF04WHPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// suggested buy
DataItem FF04WHSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales fcst
DataItem FF04WHSF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold trgt for compare
DataItem FF04WHTG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold year
DataItem FF04WHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// mask cc
DataItem FF04WMCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// mask for calls
DataItem FF04WMDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// mask yymm
DataItem FF04WMMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// True nbr of mos in range
DataItem FF04WNBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CC for dates
DataItem FF04WNCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// YYMMs for dates
DataItem FF04WNMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// generic subcript
DataItem FF04WNNN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// number mask
DataItem FF04WNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMMs for dates
DataItem FF04WRMO char(4)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Return code switch
DataItem FF04WRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calc sales avg
DataItem FF04WSAV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_SUGG_QTB
DataItem FF04WSBY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sug end inv
DataItem FF04WSEI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sug inv trn
DataItem FF04WSIT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sales forecast
DataItem FF04WSLF int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sales fcst
DataItem FF04WSLS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request set-to-zero
DataItem FF04WST0 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Pointer for tot position
DataItem FF04WSUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Format the map switch
DataItem FF04WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF04WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tgt end inv
DataItem FF04WTEI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Inline target
DataItem FF04WTGT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Re-totaling switch
DataItem FF04WTSW char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Tot s/buy line
DataItem FF04WTTA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot target
DataItem FF04WTTB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot variance
DataItem FF04WTTC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot sug end inv
DataItem FF04WTTD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot tgt end inv
DataItem FF04WTTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot sales fcst
DataItem FF04WTTF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot sug inv turn
DataItem FF04WTTG bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot trg inv turn
DataItem FF04WTTH bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tgt inv trn
DataItem FF04WTVT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variance
DataItem FF04WVAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

