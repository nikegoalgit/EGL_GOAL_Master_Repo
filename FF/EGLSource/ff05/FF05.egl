package ff05;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF05 ****
// This application displays information concerning a particu-
// lar product category.  It allows the user to change the
// 'target' fields and the 'reviewed' switch.  The program will
// calculate 'variance', 'suggested end inventory', 'suggested
// inventory turns', 'target end inventory', and 'target in-
// ventory turns'.  It retrieves data for for the 'sales fcst',
// 's/buy line', and 'target' fields.
// 
// The program will allow the user to clear the 'target' by use
// of a PF key.  Another feature of the program will allow the
// user to move the 's/buy cat' to the 'target' field by use
// of a PF key.  By use of a third PF key, the user can save
// any updated information on the screen in the Data Base.
// 
// The user must specify the 'range', 'type', 'category', and
// 'division group'.  If he doesn't know the code for a 'type'
// or a 'category', he can enter a '?' to ask for help.  The
// The program will bring up a pop-up window to show a list of
// 'categories' or 'types', then he can make a selection from
// the window screen.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/31/89  RHETRI  New application.
// FF2033   09/04/90  RHETRI  Chg date edit to allow any date.
// FF2036   10/05/90  RHETRI  Add update to MLTYP when PF21 &
//                            CATs all reviewed for line.
// FF1119   06/26/92  LDELUH  When add MCAT for makeups set
//                            fill rt & futr rto to 100.
// FF402    05/04/93  JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
// FF175    12/18/96  DSMITH  Change the fill character for
//                            date range to '0'.
// *********************
Program FF05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF05W00 FF05W00; // record
  FF05W01 FF05W01; // record
  FF05W02 FF05W02; // record
  FF05W03 FF05W03; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use XPLTBL; // table
  use YPGTBL; // table
  use FF05M.FF05M001,  // forms
      FF05M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF05M001 initial; /* M001 input/output*/
    set FF05W00 empty; /* Working storage*/
    set FF05W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF05W00.FF05WSWF = "Y"; /* Format the map switch*/
    FFWREC.XCTCD = "USA"; /* country code*/

     /* ------------------------------------------------------------*/
     /* If type is missing, default to '01'.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ") /* if type is missing*/

      FFWREC.YPGCD = "01"; /* default to '01'*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end

    end

     /* ------------------------------------------------------------*/
     /* These fields are used when expanding the date range.*/
     /* ------------------------------------------------------------*/

    FF05W00.FF05WCBG = FFWREC.FFABEGMO; /* date routines*/
    FF05W00.FF05WCEG = FFWREC.FFAENDMO; /* date routines*/

     /* ------------------------------------------------------------*/
     /* If complete key is present, request data.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO != 0 /* Range exits*/
     && FFWREC.FFAENDMO != 0 /* Range exits*/
     && FFWREC.XPCCD != " "  /* Category exits*/
     && FFWREC.YPGCD != " "  /* Type exits*/
     && FFWREC.YSMXDV != " ") /* Div grp exists*/

      /* ------------------------------------------------------------*/
       /* Save range on map.*/
      /* ------------------------------------------------------------*/

      FF05M001.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
      FF05M001.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/

      FF05W00.FF05WSWR = "Y"; /* Data requested*/

    else

      /* ------------------------------------------------------------*/
       /* Save range in working storage.*/
      /* ------------------------------------------------------------*/

      FF05W01.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
      FF05W01.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/

      FF05W00.FF05WSWR = "N"; /* No data requested*/

    end

     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/

    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FFWREC.SY1STNBR = " "; /* Clear style code*/
    FFWREC.SY1SSTNM = " "; /* Clear style name*/
    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF05001; /* Converse the main process*/

    FF05001: FF05001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF05001; /* Converse the main process*/


  end // end main
end // end FF05

// Inquire/maintain a table row
Function FF05001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF05100(); /* Obtain the data to display*/

  FF05200(); /* Format and display the map*/

  FF05300(); /* Check attention identifier*/

  FF05400(); /* Reset fields to normal intensity*/

  FF05500(); /* Verify the entered data*/

  FF05600(); /* Process valid input request*/


end // end FF05001

// Obtain the data to display
Function FF05100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF05W00.FF05WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area*/
   /* ------------------------------------------------------------*/

  set FF05W01 empty; /* M001 display storage*/

   /* ------------------------------------------------------------*/
   /* Save key storage values.*/
   /* ------------------------------------------------------------*/

  FF05W01.FFABEGMO = FF05M001.FFABEGMO; /* begin month*/
  FF05W01.FFAENDMO = FF05M001.FFAENDMO; /* end month*/

   /* ------------------------------------------------------------*/
   /* Obtain data for reviewed switch, and line code and name.*/
   /* ------------------------------------------------------------*/

  FF05110(); /* Obtain rvw sw & line cd*/

   /* ------------------------------------------------------------*/
   /* Initialize the working storage area.*/
   /* ------------------------------------------------------------*/

  set FF05W03 empty; /* Zero fill totals*/

  FF05W00.FF05WRTN = "N"; /* clear return code switch*/
  FF05W00.FF05WDSW = "N"; /* clear data found switch*/
  FF05W00.FF05WSUB = 0; /* clear "tot" position pointer*/

   /* ------------------------------------------------------------*/
   /* Expand date range.*/
   /* ------------------------------------------------------------*/

  FF05120(); /* expand range to set of yymm*/

   /* ------------------------------------------------------------*/
   /* Obtain data for INV TRN  calculations*/
   /* ------------------------------------------------------------*/

  FF05130(); /* Obtain data for calcs*/

   /* ------------------------------------------------------------*/
   /* Obtain data for display and calculations.  FF05WRTN refers*/
   /* to a particular call.  FF05WDSW refers to all the calls*/
   /* for the screen.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WCNT = 0; /* initialize subscript*/

  while (FF05W00.FF05WCNT < FF05W02.FF05WNBR)

    FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1; /* add one to counter*/

    FF05140(); /* Obtain DFCAST.VMCAT001*/

    if (FF05W00.FF05WRTN == "Y") /* Normal return codes*/

      FF05150(); /* Calculate the data*/

      FF05W00.FF05WDSW = "Y"; /* data found*/
      FF05W00.FF05WRTN = "N"; /* clear switch*/

    end

  end

  FF05W00.FF05WST0 = "N"; /* clear set-to-zero switch*/
  FF05W00.FF05WCAL = "N"; /* clear calculation switch*/

   /* ------------------------------------------------------------*/
   /* Check to see if data was found to display.*/
   /* ------------------------------------------------------------*/

  if (FF05W00.FF05WDSW == "Y") /* data was found*/

    FF05160(); /* Translate and store totals*/

    /* ------------------------------------------------------------*/
     /* Indicate request for data complete and that is modifiable*/
     /* data.*/
    /* ------------------------------------------------------------*/

    FF05W00.FF05WSWR = "N"; /* Request for data switch*/
    FF05W01.CACHGFL = "Y"; /* Modifiable Data switch*/

  else

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data found*/

  end



end // end FF05100

// Obtain review info & line cd
Function FF05110()
   /* ------------------------------------------------------------*/
   /* Obtain the reviewed flag information.  We must Select*/
   /* unique to find out what the reviewed flag should be.*/
   /* ------------------------------------------------------------*/

  FF05W01.FF2CRVFL = "N"; /* default to 'n' - display*/
  FF05W00.FF2CRVFL = "N"; /* default to 'n' - hold*/

  FF05111(); /* Select FFXRF for line code*/
  FF05112(); /* Select FFXRF for review flag*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    /* ------------------------------------------------------------*/
     /* The flag can only be a 'y' or a 'n'. If you did not get a*/
     /* zero return code, it is because there were two rows out*/
     /* there - one with a 'y' and one with a 'n'.  If this occurs,*/
     /* the category will be considered NOT reviewed, so nothing is*/
     /* moved to the hold field and it defaults to space.  If you*/
     /* did get a zero return code, check for a 'y'.*/
    /* ------------------------------------------------------------*/

    if (FF2REC.FF2CRVFL == "Y") /* if reviewed flag equal 'yes'*/

      FF05W01.FF2CRVFL = "Y"; /* move 'y' to display*/
      FF05W00.FF2CRVFL = "Y"; /* move 'y' to hold*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain line code abbreviation.*/
   /* ------------------------------------------------------------*/

  XPLREC.XPLCD = FFWREC.XPLCD; /* format key*/
  XPLREC.XGPCD = COMMAREA.XGPCD; /* format key*/

  if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
    FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
  end


end // end FF05110

// Select FFXRF for line code
Function FF05111()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

   /* ------------------------------------------------------------*/
   /* Format keys for call to DFCAST.VFFXRF01.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.YPGCD == "*") /* if type is all*/
    FF2REC.YPGCD = "01"; /* move '01' to record*/
  else
    FF2REC.YPGCD = FFWREC.YPGCD; /* type*/
  end

  FF2REC.XPCCD = FFWREC.XPCCD; /* category*/
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* div grp*/

   /* ------------------------------------------------------------*/
   /* Fetch the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FFWREC.XPLCD = FF2REC.XPLCD; /* save line code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05111

// Select FFXRFfor review flag
Function FF05112()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* div grp*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* type*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* line*/
  FF2REC.XPCCD = FFWREC.XPCCD; /* category*/

   /* ------------------------------------------------------------*/
   /* Select FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("SC", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or more than one row found, return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* More than one row found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05112

// Expand range to set of YYMM
Function FF05120()
   /* ------------------------------------------------------------*/
   /* Clear all fields used to expand range and hold for heading.*/
   /* ------------------------------------------------------------*/

  set FF05W02 empty; /* clear date fields*/

  move " " to FF05W01.FF05WRMO[1] for all; /* clear alpha month*/

   /* ------------------------------------------------------------*/
   /* Expand range to a set of YYMM and store in array.*/
   /* ------------------------------------------------------------*/

  FF05W02.FF05WBDT = FF05M001.FFABEGMO; /* load beg mo mask*/
  FF05W02.FF05WHDT = FF05M001.FFABEGMO; /* load hold mo mask*/
  FF05W02.FF05WEDT = FF05M001.FFAENDMO; /* load end mo mask*/
  FF05W02.FF05WNBR = 1; /* set subscript to 1*/

  FF05W01.FF05WRMO[1] = FF05W02.FF05WHDT;
                                   /* load alpha month 1st time*/
  FF05W02.FF05WNCC[1] = FF05W00.FF05WCBC;
                                   /* load hold cc to 1st occur*/
  FF05W02.FF05WNMO[1] = FF05W02.FF05WHDT; /* load num mo to 1st occur*/

  if (FF05W02.FF05WBDT == FF05W02.FF05WEDT)
                                   /* if range is only one month long*/
       /* NEXT SENTENCE*/
  else
    if (FF05W02.FF05WBYY == FF05W02.FF05WEYY) /* if begin year = end year*/

      FF05W02.FF05WHCC = FF05W00.FF05WCBC; /* load hold cc with b cc*/
      while (FF05W02.FF05WHMM < FF05W02.FF05WEMM) /* if hold mo ^LT end mo*/
        FF05121();
      end

    else
      FF05W02.FF05WHCC = FF05W00.FF05WCBC; /* load hold cc with b cc*/
      while (FF05W02.FF05WHMM < 12) /* until hold month not less 12*/
        FF05121();
      end
      FF05W02.FF05WHCC = FF05W00.FF05WCEC; /* load hold cc with e cc*/
      FF05W02.FF05WHYY = FF05W02.FF05WEYY; /* move end YY to hold*/
      FF05W02.FF05WHMM = 0; /* load 0 in hold MM*/
      while (FF05W02.FF05WHMM < FF05W02.FF05WEMM) /* if hold MM LT end MM*/
        FF05121();
      end
    end
  end

  FF05W00.FF05WCNT = FF05W02.FF05WNBR;
  FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1; /* add one to subscript*/
  FF05W01.FF05WRMO[FF05WCNT] = "TOTL"; /* load 'tot' to header line*/

   /* ------------------------------------------------------------*/
   /* Expland range three more months for use in calculations.*/
   /* ------------------------------------------------------------*/

  FF05122();


end // end FF05120

// Load YYMM array with range
Function FF05121()
   /* ------------------------------------------------------------*/
   /* load array with the set of YYMM from the range.*/
   /* ------------------------------------------------------------*/

  FF05W02.FF05WNBR = FF05W02.FF05WNBR + 1; /* add one to subscript*/
  FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add one to month*/

  FF05W01.FF05WRMO[FF05WNBR] = FF05W02.FF05WHDT; /* load alpha yymm*/
  FF05W02.FF05WNMO[FF05WNBR] = FF05W02.FF05WHDT; /* load num yymm*/
  FF05W02.FF05WNCC[FF05WNBR] = FF05W02.FF05WHCC; /* load cc*/

end // end FF05121

// Expand range 3 more months
Function FF05122()
   /* ------------------------------------------------------------*/
   /* Expand range three more months for "SUG INV TRN" and*/
   /* "TGT IN TRN" calculations.*/
   /* ------------------------------------------------------------*/

  FF05W02.FF05WAVG = FF05W02.FF05WNBR; /* move nbr to avg sub*/

  if (FF05W02.FF05WEMM < 10) /* if end month less than 10*/
    /* ------------------------------------------------------------*/
     /* If the month is less than 10, adding three to it will not*/
     /* take you into the next year.*/
    /* ------------------------------------------------------------*/

    FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCBC; /* cc*/

    FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCBC; /* cc*/

    FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCBC; /* cc*/

  end

  if (FF05W02.FF05WEMM == 10) /* if end month equal 10*/
    /* ------------------------------------------------------------*/
     /* If the month equal 10, then the next three months will be*/
     /* 11, 12, and 01 of the next year.*/
    /* ------------------------------------------------------------*/

    FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCBC; /* cc*/

    FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCBC; /* cc*/

    FF05W02.FF05WHYY = FF05W02.FF05WHYY + 1; /* add 1 to hold year*/
    FF05W02.FF05WHMM = 1; /* move 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCEC; /* cc*/

  end

  if (FF05W02.FF05WEMM == 11) /* if end month equal 11*/
    /* ------------------------------------------------------------*/
     /* If the month equal 11, then the next three months will be*/
     /* 12, and 01 and 02 of the next year.*/
    /* ------------------------------------------------------------*/

    FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCBC; /* cc*/

    FF05W02.FF05WHYY = FF05W02.FF05WHYY + 1; /* add 1 to hold year*/
    FF05W02.FF05WHMM = 1; /* move 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCEC; /* cc*/

    FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCEC; /* cc*/

  end

  if (FF05W02.FF05WEMM == 12) /* if end month equal 12*/
    /* ------------------------------------------------------------*/
     /* If the month equal 12, then the next three months will be*/
     /* 01, 02, and 03 of the next year.*/
    /* ------------------------------------------------------------*/

    FF05W02.FF05WHYY = FF05W02.FF05WHYY + 1; /* add 1 to hold year*/
    FF05W02.FF05WHMM = 1; /* move 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCEC; /* cc*/

    FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCEC; /* cc*/

    FF05W02.FF05WHMM = FF05W02.FF05WHMM + 1; /* add 1 to hold month*/
    FF05W02.FF05WAVG = FF05W02.FF05WAVG + 1; /* add 1 to sub*/
    FF05W02.FF05WNMO[FF05WAVG] = FF05W02.FF05WHDT; /* yymm*/
    FF05W02.FF05WNCC[FF05WAVG] = FF05W00.FF05WCEC; /* cc*/

  end
end // end FF05122

// Obtain data for INV TRN calc
Function FF05130()
   /* ------------------------------------------------------------*/
   /* Obtain data for INV TURN CALC.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* Fetch next function code*/

  FF05W00.FF05WCNT = 1; /* set counter*/
  FF05W00.FF05WSUB = 2; /* set subscript*/

  while (FF05W00.FF05WCNT <= FF05W02.FF05WAVG)

    /* ------------------------------------------------------------*/
     /* Format fffrec for call.*/
    /* ------------------------------------------------------------*/

    FF05W00.FF05WMCC = FF05W02.FF05WNCC[FF05WCNT]; /* cc to mask*/
    FF05W00.FF05WMMO = FF05W02.FF05WNMO[FF05WCNT]; /* yymm to mask*/
    FFFREC.FFFBEGMO = FF05W00.FF05WMDT; /* beg month*/
    FFFREC.FFFENDMO = FF05W00.FF05WMDT; /* end month*/

    /* ------------------------------------------------------------*/
     /* Clear row storage area.*/
    /* ------------------------------------------------------------*/

    set FF7REC empty; /* Clear DFCAST.VMCAT001 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call.*/
    /* ------------------------------------------------------------*/

    FF7REC.YSMXDV = FFWREC.YSMXDV; /* div grp*/
    FF7REC.YPGCD = FFWREC.YPGCD; /* type*/
    FF7REC.XPCCD = FFWREC.XPCCD; /* category*/
    FF7REC.XCTCD = FFWREC.XCTCD; /* country*/

    /* ------------------------------------------------------------*/
     /* Make the call.*/
    /* ------------------------------------------------------------*/

    FF05S01(); /* call D/B*/

    /* ------------------------------------------------------------*/
     /* Store data in working storage.*/
    /* ------------------------------------------------------------*/

    FF05W00.FF05WSLS[FF05WCNT] = FF7REC.FF6SLFCT; /* sales forecast*/

    FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1; /* add one to count*/
    FF05W00.FF05WSUB = FF05W00.FF05WSUB + 1; /* add one to subscript*/

  end


end // end FF05130

// Obtain MCAT data
Function FF05140()
   /* ------------------------------------------------------------*/
   /* Format fffrec for call. Only one month is retrieved at a*/
   /* time.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WMCC = FF05W02.FF05WNCC[FF05WCNT]; /* cc to mask*/
  FF05W00.FF05WMMO = FF05W02.FF05WNMO[FF05WCNT]; /* yymm to mask*/
  FFFREC.FFFBEGMO = FF05W00.FF05WMDT; /* beg month*/
  FFFREC.FFFENDMO = FF05W00.FF05WMDT; /* end month*/

   /* ------------------------------------------------------------*/
   /* Clear row storage area.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear DFCAST.VMCAT001 record.*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF7REC.YSMXDV = FFWREC.YSMXDV; /* div grp*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* type*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* category*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* country*/

   /* ------------------------------------------------------------*/
   /* Call data base.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* Fetch row*/

  FF05S01(); /* call D/B*/

   /* ------------------------------------------------------------*/
   /* Store data in working storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WHSB = FF7REC.FF6SUGBY; /* suggested buy*/
  FF05W00.FF05WHPT = FF7REC.FF4RTRGT; /* production trgt*/
  FF05W00.FF05WHSF = FF7REC.FF6SLFCT; /* sales forecast*/
  FF05W00.FF05WHBI[FF05WCNT] = FF7REC.FF6BEINV; /* beg inv*/
  FF05W00.FF05WHOO[FF05WCNT] = FF7REC.FG4ONORD; /* on order*/

  FF05W00.FF05WRTN = "Y"; /* a particular row found*/

   /* ------------------------------------------------------------*/
   /* Save target for compare in update routine.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF7REC.FF4RTRGT; /* production trgt*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    XSFFS14(); /* Translation number*/

  end

  FF05W00.FF05WHTG[FF05WCNT] = FFXREC.FFXCHAR; /* for compare*/


end // end FF05140

// Calculate fields
Function FF05150()
   /* ------------------------------------------------------------*/
   /* Move S/BUY Line to display storage and add to total.      |*/
   /* ------------------------------------------------------------*/

  FF05W01.FF05WSBY[FF05WCNT] = FF05W00.FF05WHSB; /* disp storage*/
  FF05W03.FF05WTTA = FF05W03.FF05WTTA + FF05W01.FF05WSBY[FF05WCNT];

   /* ------------------------------------------------------------*/
   /* Line Target can be the amount from the D/B, be set to zero|*/
   /* (if requested), or set to suggested buy (if requested).   |*/
                                                             /* |*/
   /* ------------------------------------------------------------*/

  if (FF05W00.FF05WST0 == "Y") /* if set-to-zero requested*/

    FF05W01.FF05WTGT[FF05WCNT] = 0; /* disp storage*/

  else

    if (FF05W00.FF05WCAL == "Y") /* if dup-sbuy requested*/

      FF05W01.FF05WTGT[FF05WCNT] = FF05W00.FF05WHSB; /* disp storage*/

    else /* This is the 'normal' routine*/

      FF05W01.FF05WTGT[FF05WCNT] = FF05W00.FF05WHPT; /* disp storage*/

    end

    FF05W03.FF05WTTB = FF05W03.FF05WTTB + FF05W01.FF05WTGT[FF05WCNT];

  end

   /* ------------------------------------------------------------*/
   /* Calculate variance & move to display storage.             |*/
                                                             /* |*/
   /* VARIANCE = S/BUY LINE  -  LINE TARGET                     |*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = 0; /* clear field*/

  FF05W00.FF05WFDA = FF05W00.FF05WFDA + FF05W01.FF05WSBY[FF05WCNT];
  FF05W00.FF05WFDA = FF05W00.FF05WFDA - FF05W01.FF05WTGT[FF05WCNT];

  FF05W01.FF05WVAR[FF05WCNT] = FF05W00.FF05WFDA; /* disp storage*/
  FF05W03.FF05WTTC = FF05W03.FF05WTTC + FF05W00.FF05WFDA; /* totals*/

   /* ------------------------------------------------------------*/
   /* Calculate SUG END INV & move to display storage.          |*/
                                                             /* |*/
   /* SUG END INV =  s/buy + beg inv + on order - sales fcst    |*/
                                                             /* |*/
   /* FF05W00.FF05WHSB    - suggested buy                       |*/
   /* FF05W00.FF05WHBI    - beg inv (last mo's end inv)         |*/
   /* FF05W00.FF05WHOO    - on order                            |*/
   /* FF05W00.FF05WHSF    - sales fcst                          |*/
   /* ------------------------------------------------------------*/

  if (FF05W00.FF05WCNT == 1) /* If first month*/
    FF05W00.FF05WFDA = FF05W00.FF05WHSB + FF05W00.FF05WHBI;
  else
    FF05W00.FF05WSUB = FF05W00.FF05WCNT - 1; /* count minus 1*/
    FF05W00.FF05WFDA = FF05W00.FF05WHSB + FF05W01.FF05WSEI[FF05WSUB];
  end

  FF05W00.FF05WFDA = FF05W00.FF05WFDA + FF05W00.FF05WHOO[FF05WCNT];
  FF05W00.FF05WFDA = FF05W00.FF05WFDA - FF05W00.FF05WHSF;

  FF05W01.FF05WSEI[FF05WCNT] = FF05W00.FF05WFDA; /* disp storage*/
  FF05W03.FF05WTTD = FF05W03.FF05WTTD + FF05W00.FF05WFDA; /* totals*/

   /* ------------------------------------------------------------*/
   /* Calculate SUG INV TRN & move to display storage.          |*/
   /* ------------------------------------------------------------*/

  FF05151(); /* Calculate Sug Inv Trn*/

  FF05W03.FF05WTTG = FF05W03.FF05WTTG + FF05W00.FF05WFDC; /* totals*/

   /* ------------------------------------------------------------*/
   /* Calculate TGT END INV & move to display storage.          |*/
                                                             /* |*/
   /* TGT END INV =  prdctn trgt + beg inv + on order - sls fcst|*/
                                                             /* |*/
   /* FF05W00.FF05WHPT    - production target                   |*/
   /* FF05W00.FF05WHBI    - beg inv                             |*/
   /* FF05W00.FF05WHOO    - on order                            |*/
   /* FF05W00.FF05WHSF    - sales fcst                          |*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WTGT[FF05WCNT];
  if (FF05W00.FF05WCNT == 1) /* If first month*/
    FF05W00.FF05WFDA = FF05W00.FF05WFDA + FF05W00.FF05WHBI;
  else
    FF05W00.FF05WSUB = FF05W00.FF05WCNT - 1; /* count minus 1*/
    FF05W00.FF05WFDA = FF05W00.FF05WFDA + FF05W01.FF05WTEI[FF05WSUB];
  end

  FF05W00.FF05WFDA = FF05W00.FF05WFDA + FF05W00.FF05WHOO[FF05WCNT];
  FF05W00.FF05WFDA = FF05W00.FF05WFDA - FF05W00.FF05WHSF;

  FF05W01.FF05WTEI[FF05WCNT] = FF05W00.FF05WFDA; /* disp storage*/
  FF05W03.FF05WTTE = FF05W03.FF05WTTE + FF05W00.FF05WFDA; /* totals*/

   /* ------------------------------------------------------------*/
   /* Calculate TGT INV TRN & move to display storage.          |*/
   /* ------------------------------------------------------------*/

  FF05152(); /* Calculate Trg Inv Trn*/

  FF05W03.FF05WTTH = FF05W03.FF05WTTH + FF05W00.FF05WFDC; /* totals*/

   /* ------------------------------------------------------------*/
   /* Move SALES FCST to display storage.                       |*/
   /* ------------------------------------------------------------*/

  FF05W01.FF05WSLF[FF05WCNT] = FF05W00.FF05WHSF; /* disp storage*/
  FF05W03.FF05WTTF = FF05W03.FF05WTTF + FF05W00.FF05WHSF; /* totals*/

end // end FF05150

// Calculate Sug Inv Turns
Function FF05151()
   /* ------------------------------------------------------------*/
   /* Calculate:*/
             /* Sales Average = Sales Fcst for next 3 months * 12*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WNNN = FF05W00.FF05WCNT + 1; /* set counter*/
  FF05W00.FF05WSAV = 0; /* clear field*/
  FF05W00.FF05WFDA = 0; /* clear work field*/
  FF05W00.FF05WFDB = 0; /* clear work field*/
  FF05W00.FF05WFDC = 0; /* clear work field*/

  FF05W00.FF05WSAV = FF05W00.FF05WSAV + FF05W00.FF05WSLS[FF05WNNN];

  FF05W00.FF05WNNN = FF05W00.FF05WNNN + 1; /* add 1 to counter*/
  FF05W00.FF05WSAV = FF05W00.FF05WSAV + FF05W00.FF05WSLS[FF05WNNN];

  FF05W00.FF05WNNN = FF05W00.FF05WNNN + 1; /* add 1 to counter*/
  FF05W00.FF05WSAV = FF05W00.FF05WSAV + FF05W00.FF05WSLS[FF05WNNN];

  FF05W00.FF05WFDA = FF05W00.FF05WSAV * 12; /* Avg sales*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
        /* Average Inventory  =  Ending inventory  *  3*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDB = FF05W01.FF05WSEI[FF05WCNT] * 3; /* Avg Inv*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* INV TURNS  =  Avg sales  /  Avg inv*/
   /* ------------------------------------------------------------*/

  if (FF05W00.FF05WFDB > 0) /* if number is greater than zero*/
    FF05W00.FF05WFDC = mathLib.round(FF05W00.FF05WFDA / FF05W00.FF05WFDB, -mathLib.decimals(FF05W00.FF05WFDC));
  end

  FF05W01.FF05WSIT[FF05WCNT] = FF05W00.FF05WFDC; /* storage*/


end // end FF05151

// Calculate Trg Inv Turns
Function FF05152()
   /* ------------------------------------------------------------*/
   /* Calculate:*/
             /* Sales Average = Sales Fcst for next 3 months * 12*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = 0; /* clear work field*/
  FF05W00.FF05WFDB = 0; /* clear work field*/
  FF05W00.FF05WFDC = 0; /* clear work field*/

  FF05W00.FF05WFDA = FF05W00.FF05WSAV * 12; /* Avg sales*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
        /* Average Inventory  =  Ending inventory  *  3*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDB = FF05W01.FF05WTEI[FF05WCNT] * 3; /* Avg Inv*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* INV TURNS  =  Avg sales  /  Avg inv*/
   /* ------------------------------------------------------------*/

  if (FF05W00.FF05WFDB > 0) /* if number is greater than zero*/
    FF05W00.FF05WFDC = mathLib.round(FF05W00.FF05WFDA / FF05W00.FF05WFDB, -mathLib.decimals(FF05W00.FF05WFDC));
  end

  FF05W01.FF05WTVT[FF05WCNT] = FF05W00.FF05WFDC; /* storage*/


end // end FF05152

// Move totals to storage
Function FF05160()
   /* ------------------------------------------------------------*/
   /* Add one to last count, to be in position for totals.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WSUB = FF05W00.FF05WCNT + 1; /* get tot position*/

   /* ------------------------------------------------------------*/
   /* Move SBUY LINE total to display storage.                  |*/
   /* ------------------------------------------------------------*/

  FF05W01.FF05WSBY[FF05WSUB] = FF05W03.FF05WTTA; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Move LINE TARGET total to display storage.                |*/
   /* ------------------------------------------------------------*/

  FF05W01.FF05WTGT[FF05WSUB] = FF05W03.FF05WTTB; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Move variance total to display storage.                   |*/
   /* ------------------------------------------------------------*/

  FF05W01.FF05WVAR[FF05WSUB] = FF05W03.FF05WTTC; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Move SUG END INV total to display storage.                |*/
   /* ------------------------------------------------------------*/

  FF05W01.FF05WSEI[FF05WSUB] = FF05W03.FF05WTTD; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Calculate Sug Inv Turns total and load.*/
   /* Calculate:  Total turns divided by nbr of months*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W03.FF05WTTG; /* Load total*/
  FF05W00.FF05WFDB = FF05W00.FF05WSUB - 1; /* Get count*/

  FF05W00.FF05WFDC = 0; /* Clear field*/
  if (FF05W00.FF05WFDB > 0)
    FF05W00.FF05WFDC = mathLib.round(FF05W00.FF05WFDA / FF05W00.FF05WFDB, -mathLib.decimals(FF05W00.FF05WFDC));
  end

  FF05W01.FF05WSIT[FF05WSUB] = FF05W00.FF05WFDC; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Move TGT END INV total to display storage.                |*/
   /* ------------------------------------------------------------*/

  FF05W01.FF05WTEI[FF05WSUB] = FF05W03.FF05WTTE; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Calculate Trg Inv Turns total and load.*/
   /* Calculate:  Total turns divided by nbr of months*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W03.FF05WTTH; /* Load total*/
  FF05W00.FF05WFDB = FF05W00.FF05WSUB - 1; /* Get count*/

  FF05W00.FF05WFDC = 0; /* Clear field*/
  if (FF05W00.FF05WFDB > 0)
    FF05W00.FF05WFDC = mathLib.round(FF05W00.FF05WFDA / FF05W00.FF05WFDB, -mathLib.decimals(FF05W00.FF05WFDC));
  end

  FF05W01.FF05WTVT[FF05WSUB] = FF05W00.FF05WFDC; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Move sales fcst total to display storage.                 |*/
   /* ------------------------------------------------------------*/

  FF05W01.FF05WSLF[FF05WSUB] = FF05W03.FF05WTTF; /* disp storage*/

end // end FF05160

// Format and converse the map
Function FF05200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF05W00.FF05WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF05W00.FF05WSWF == "Y") /* Map must be formatted*/

      FF05210(); /* load header*/

      FF05W00.FF05WCNT = 1; /* set counter to one*/

      if (FF05W02.FF05WNBR > 0) /* If range exists*/
        set FF05M001.FF05MTGT[1] cursor; /* Place cursor*/
      end

      while (FF05W00.FF05WCNT <= FF05W02.FF05WNBR /* if cnt LT nbr of mos*/
       && FF05W02.FF05WNBR > 0) /* if nbr greater than zero*/

        FF05220(); /* load fields*/

        set FF05M001.FF05MTGT[FF05WCNT] normal; /* make field visable*/

        FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1; /* add to counter*/

      end

      if (FF05W02.FF05WNBR > 0) /* if there are totals to load*/

        FF05230(); /* load totals*/

        set FF05M001.FF05MTGT[FF05WCNT] skip; /* make field visable*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF05M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF05M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF05M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF05M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF05M001 alarm; /* Indicate sound alarm*/

  end

  converse FF05M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "    "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF05M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF05M001.CAITEM; /* Application data*/


end // end FF05200

// Load the header info
Function FF05210()
   /* ------------------------------------------------------------*/
   /* Clear the map.*/
   /* ------------------------------------------------------------*/

  set FF05M001 initial; /* Clear map*/
  FF05W00.FF05WSWF = "N"; /* Format map switch*/

   /* ------------------------------------------------------------*/
   /* Load header information.*/
   /* ------------------------------------------------------------*/

  FF05M001.FFABEGMO = FF05W01.FFABEGMO; /* begin month*/
  FF05M001.FFAENDMO = FF05W01.FFAENDMO; /* end month*/

  FF05M001.XPLCD = FFWREC.XPLCD; /* line code*/
  FF05M001.XPLABRV = FFWREC.XPLABRV; /* line name*/
  FF05M001.YPGCD = FFWREC.YPGCD; /* type code*/
  FF05M001.YPGABRV = FFWREC.YPGABRV; /* type name*/
  FF05M001.XPCCD = FFWREC.XPCCD; /* category code*/
  FF05M001.XPCABRV = FFWREC.XPCABRV; /* category name*/
  FF05M001.YSMXDV = FFWREC.YSMXDV; /* div grp code*/
  FF05M001.YSMSMDSC = FFWREC.YSMSMDSC; /* div grp name*/

  FF05M001.FF2CRVFL = FF05W01.FF2CRVFL; /* reviewed switch*/

   /* ------------------------------------------------------------*/
   /* Load column header.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WCNT = 0; /* set sub to zero*/

  while (FF05W00.FF05WCNT < FF05W02.FF05WNBR) /* until cnt ^LT nbr months*/

    FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1; /* add 1 to sub*/

    FF05M001.FF05MRMO[FF05WCNT] = FF05W01.FF05WRMO[FF05WCNT];

  end

  FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1; /* add 1 for total*/
  FF05M001.FF05MRMO[FF05WCNT] = FF05W01.FF05WRMO[FF05WCNT];

end // end FF05210

// Translate and load fields
Function FF05220()
   /* ------------------------------------------------------------*/
   /* Translate S/BUY TARGET & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WSBY[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MSBY[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MSBY[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate TARGET & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WTGT[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MTGT[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MTGT[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate VARIANCE & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WVAR[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MVAR[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MVAR[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate SUG END INV & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WSEI[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MSEI[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MSEI[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Move SUG INV TRN to display storage.  Number needs no*/
   /* translation.*/
   /* ------------------------------------------------------------*/

  FF05M001.FF05MSIT[FF05WCNT] = FF05W01.FF05WSIT[FF05WCNT]; /* map*/
  FF05W01.FF05MSIT[FF05WCNT] = FF05W01.FF05WSIT[FF05WCNT]; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate TGT END INV & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WTEI[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MTEI[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MTEI[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Move TGT INV TRN to display storage.  Number needs no*/
   /* translation.*/
   /* ------------------------------------------------------------*/

  FF05M001.FF05MTVT[FF05WCNT] = FF05W01.FF05WTVT[FF05WCNT]; /* map*/
  FF05W01.FF05MTVT[FF05WCNT] = FF05W01.FF05WTVT[FF05WCNT]; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate SALES FCST & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WSLF[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MSLF[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MSLF[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/


end // end FF05220

// Translate and load totals
Function FF05230()
   /* ------------------------------------------------------------*/
   /* Translate S/BUY TARGET & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WSBY[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MSBY[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MSBY[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate TARGET & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WTGT[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MTGT[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MTGT[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate VARIANCE & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WVAR[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MVAR[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MVAR[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate SUG END INV & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WSEI[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MSEI[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MSEI[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Move SUG INV TRN to display storage.  Number needs no*/
   /* translation.*/
   /* ------------------------------------------------------------*/

  FF05M001.FF05MSIT[FF05WCNT] = FF05W01.FF05WSIT[FF05WCNT]; /* map*/
  FF05W01.FF05MSIT[FF05WCNT] = FF05W01.FF05WSIT[FF05WCNT]; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate TGT END INV & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WTEI[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MTEI[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MTEI[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/

   /* ------------------------------------------------------------*/
   /* Move TGT INV TRN to display storage.  Number needs no*/
   /* translation.*/
   /* ------------------------------------------------------------*/

  FF05M001.FF05MTVT[FF05WCNT] = FF05W01.FF05WTVT[FF05WCNT]; /* map*/
  FF05W01.FF05MTVT[FF05WCNT] = FF05W01.FF05WTVT[FF05WCNT]; /* storage*/

   /* ------------------------------------------------------------*/
   /* Translate SALES FCST & move to display storage.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WSLF[FF05WCNT];
  FFXREC.FFXNUMB = FF05W00.FF05WFDA; /* send to translate*/

  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/

    XSFFS12(); /* Translation number*/

  else /* Use thousands*/

    XSFFS14(); /* Translation number*/

  end

  FF05M001.FF05MSLF[FF05WCNT] = FFXREC.FFXCHAR; /* map*/
  FF05W01.FF05MSLF[FF05WCNT] = FFXREC.FFXCHAR; /* storage*/


end // end FF05230

// Check attention identifier
Function FF05300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF05W00.FF05WSWR == "Y") /* Data was requested*/
      set FF05W01 empty; /* clear display storage*/
    end

    FF05W00.FF05WSWF = "Y"; /* Format the map switch*/
    FF05W00.FF05WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF05M001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16) /* or PF16 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF05M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0U"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FF0V"; /* TO application*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FF0I"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20  /* and PF20 was not pressed*/
   && converseVar.eventKey not pf21) /* and PF21 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

end // end FF05300

// Reset highlighted fields
Function FF05400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF05M001.FFABEGMO initialAttributes; /* beginning month*/
  set FF05M001.FFAENDMO initialAttributes; /* ending month*/
  set FF05M001.YSMXDV initialAttributes; /* div grp*/
  set FF05M001.YPGCD initialAttributes; /* type*/
  set FF05M001.XPCCD initialAttributes; /* category*/

  FF05WCNT = 0; /* set counter to zero*/
  while (FF05WCNT < FF05WNBR) /* if counter is less than nbr of mos*/

    FF05WCNT = FF05WCNT + 1; /* add one to sub*/

    set FF05M001.FF05MTGT[FF05WCNT] normal; /* target*/

  end

  set FF05M001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF05M001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.YPGCD == "?" /* type list requested*/
   || FF05M001.XPCCD == "?") /* category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.YPGCD == "?") /* type list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF05M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF05M001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FF05M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF05M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF05M001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.XPCCD == "?") /* Line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF05M001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF05M001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF05M001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF05M001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF05M001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF05400

// Verify the entered data
Function FF05500()
   /* ------------------------------------------------------------*/
   /* If fast path item data was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF05M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If any target fields changed, verify.*/
   /* ------------------------------------------------------------*/

  if (FF05W01.CACHGFL == "Y") /* if there is any data*/

    FF05W00.FF05WCNT = FF05W02.FF05WNBR; /* initalize subscript*/
    while (FF05W00.FF05WCNT > 0) /* count greater than zero*/

      FF05510(); /* Verify trgt*/

      FF05W00.FF05WCNT = FF05W00.FF05WCNT - 1; /* subtract from counter*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any of the key fields changed, determine if any of the*/
   /* modifiable fields were changed.*/
   /* ------------------------------------------------------------*/

  if (FF05W01.CACHGFL == "Y") /* if there is any data*/

    FF05W00.FF05WCNT = FF05W02.FF05WNBR; /* initalize subscript*/
    while (FF05W00.FF05WCNT > 0) /* count greater than zero*/

      FF05520(); /* Check trgt for changes*/

      FF05W00.FF05WCNT = FF05W00.FF05WCNT - 1; /* subtract from counter*/

    end

  end

  if (FF05M001.FF2CRVFL != FF05W01.FF2CRVFL) /* reviewed fl change*/
    FF05530(); /* verify flag*/
  end

  if (FF05M001.YPGCD == " "                 /* no type*/
   || FF05M001.XPCCD == " "                 /* no category*/
   || FF05M001.YSMXDV == " "                /* no div grp*/
   || FF05M001.FFAENDMO == 0                /* no range*/
   || FF05M001.FFABEGMO == 0                /* no range*/
                                            
   || FF05M001.YPGCD != FFWREC.YPGCD        /* type changed*/
   || FF05M001.XPCCD != FFWREC.XPCCD        /* category changed*/
   || FF05M001.YSMXDV != FFWREC.YSMXDV      /* div grp changed*/
   || FF05M001.FFAENDMO != FF05W01.FFAENDMO /* range changed*/
   || FF05M001.FFABEGMO != FF05W01.FFABEGMO) /* range changed*/

    FF05540(); /* verify category*/
    FF05550(); /* verify type*/
    FF05560(); /* verify div grp*/
    FF05570(); /* verify FFXRF*/

  end

  FF05580(); /* Verify range*/

   /* ------------------------------------------------------------*/
   /* If an update was requested, and key fields were changed,*/
   /* indicate problem to user.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf21) /* if an update was requested*/

    FF05590(); /* check for key changes*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found in this process, exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    exit stack;
  end


end // end FF05500

// Verify target fields
Function FF05510()
   /* ------------------------------------------------------------*/
   /* If target field was changed, verify field.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.FF05MTGT[FF05WCNT] != FF05W01.FF05MTGT[FF05WCNT])

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    /* ------------------------------------------------------------*/
     /* Verify Co. trgt.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXCHAR = FF05M001.FF05MTGT[FF05WCNT];
                                   /* send to translate*/

    XSFFS15();

    if (FFXREC.FFXRTNCD != 0) /* If error was found*/

      set FF05M001.FF05MTGT[FF05WCNT] cursor, bold; /* highlight*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(118); /* indicate field is invalid*/

    end

    /* ------------------------------------------------------------*/
     /* Check if update has been requested.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf21) /* If PF21 pressed*/

      set FF05M001.FF05MTGT[FF05WCNT] cursor, bold; /* highlight*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(111); /* indicate modification not allowed*/

    end

  end

end // end FF05510

// Check target fields
Function FF05520()
   /* ------------------------------------------------------------*/
   /* If target field was changed and the key changed,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.FF05MTGT[FF05WCNT] != FF05W01.FF05MTGT[FF05WCNT])

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    if (FF05M001.FFABEGMO != FF05W01.FFABEGMO /* range changed*/
     || FF05M001.FFAENDMO != FF05W01.FFAENDMO /* range changed*/
     || FF05M001.XPCCD != FFWREC.XPCCD        /* category changed*/
     || FF05M001.YPGCD != FFWREC.YPGCD        /* type changed*/
     || FF05M001.YSMXDV != FFWREC.YSMXDV)     /* div grp changed*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      set FF05M001.FF05MTGT[FF05WCNT] cursor, bold; /* highlight*/

      if (FF05M001.XPCCD != FFWREC.XPCCD) /* category changed*/
        set FF05M001.XPCCD cursor, bold; /* highlight*/
      end

      if (FF05M001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF05M001.YPGCD cursor, bold; /* highlight*/
      end

      if (FF05M001.YSMXDV != FFWREC.YSMXDV) /* div grp changed*/
        set FF05M001.YSMXDV cursor, bold; /* highlight*/
      end

      if (FF05M001.FFAENDMO != FF05W01.FFAENDMO) /* range changed*/
        set FF05M001.FFAENDMO cursor, bold; /* highlight*/
      end

      if (FF05M001.FFABEGMO != FF05W01.FFABEGMO) /* range changed*/
        set FF05M001.FFABEGMO cursor, bold; /* highlight*/
      end

    end

  end

end // end FF05520

// Check reviewed field
Function FF05530()
   /* ------------------------------------------------------------*/
   /* If reviewed field was changed and the key changed,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.FF2CRVFL != " ") /* if reviewed flag was entered*/

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    if (FF05M001.FF2CRVFL != "Y"
     && FF05M001.FF2CRVFL != "N")

      set FF05M001.FF2CRVFL cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(153); /* Value must be 'y' or 'n'*/

    end

    if (FF05M001.FFABEGMO != FF05W01.FFABEGMO /* range changed*/
     || FF05M001.FFAENDMO != FF05W01.FFAENDMO /* range changed*/
     || FF05M001.XPCCD != FFWREC.XPCCD        /* category changed*/
     || FF05M001.YPGCD != FFWREC.YPGCD        /* type changed*/
     || FF05M001.YSMXDV != FFWREC.YSMXDV)     /* div grp changed*/

      set FF05M001.FF2CRVFL cursor, bold; /* highlight*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF05M001.XPCCD != FFWREC.XPCCD) /* category changed*/
        set FF05M001.XPCCD cursor, bold; /* highlight*/
      end

      if (FF05M001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FF05M001.YPGCD cursor, bold; /* highlight*/
      end

      if (FF05M001.YSMXDV != FFWREC.YSMXDV) /* div grp changed*/
        set FF05M001.YSMXDV cursor, bold; /* highlight*/
      end

      if (FF05M001.FFAENDMO != FF05W01.FFAENDMO) /* range changed*/
        set FF05M001.FFAENDMO cursor, bold; /* highlight*/
      end

      if (FF05M001.FFABEGMO != FF05W01.FFABEGMO) /* range changed*/
        set FF05M001.FFABEGMO cursor, bold; /* highlight*/
      end

    end

  end

end // end FF05530

// Check category code
Function FF05540()
   /* ------------------------------------------------------------*/
   /* Verify category code in corporate table.*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FF05M001.XPCCD; /* Format key*/
  XPCREC.XGPCD = COMMAREA.XGPCD; /* Format key*/

  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FF05M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FF05M001.XPCABRV = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FF05M001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

end // end FF05540

// Check type code
Function FF05550()
   /* ------------------------------------------------------------*/
   /* Verify type code.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.YPGCD == "*") /* Type code equal '*'*/

    FF05M001.YPGABRV = "*ALL*"; /* Abbreviation*/

  else

    if (FF05M001.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF05M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      FF05M001.YPGABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FF05M001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/

    end

  end


end // end FF05550

// Check div grp code
Function FF05560()
   /* ------------------------------------------------------------*/
   /* Verify division group code.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Row storage area*/

  YSMREC.YSMSUMCD = FF05M001.YSMXDV; /* Division group code*/
  TA1REC.TA1PGMNM = "FF05550 "; /* Calling program*/

  XSFFS20(); /* Verify division group*/

   /* ------------------------------------------------------------*/
   /* If not found, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/

    FF05M001.YSMSMDSC = YSMREC.YSMSMDSC; /* Abbreviation*/

  else

    FF05M001.YSMSMDSC = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "550"; /* Module identification*/
    set FF05M001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FF05560

// Check FFXRF tbl for key
Function FF05570()
   /* ------------------------------------------------------------*/
   /* Verify key is in FFXRF.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If there are no errors*/

    /* ------------------------------------------------------------*/
     /* Clear row storage.*/
    /* ------------------------------------------------------------*/

    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/

    if (FF05M001.YPGCD == "*") /* type is all*/
      FF2REC.YPGCD = "01"; /* type*/
    else
      FF2REC.YPGCD = FF05M001.YPGCD; /* type*/
    end

    FF2REC.XPCCD = FF05M001.XPCCD; /* category*/
    FF2REC.YSMXDV = FF05M001.YSMXDV; /* div grp*/

    /* ------------------------------------------------------------*/
     /* Select the row to display from the table.*/
    /* ------------------------------------------------------------*/

    FF05571(); /* fetch row*/

    if (SQLCA.VAGen_SQLCODE != 0) /* if row now found*/

      /* ------------------------------------------------------------*/
       /* If not found, indicate inconsistent relationship*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "570"; /* Module identification*/
      set FF05M001.XPCCD bold; /* Highlight*/
      set FF05M001.YPGCD bold; /* Highlight*/
      set FF05M001.YSMXDV cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Indicate inconsistent*/

    end
  end

end // end FF05570

// Select FFXRF
Function FF05571()
   /* ------------------------------------------------------------*/
   /* Fetch the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "551"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05571

// Verify range
Function FF05580()
   /* ------------------------------------------------------------*/
   /* Initialize record for calls to date routine.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* clear date edit record*/

  FFZREC.FFZBYYMM = FF05M001.FFABEGMO; /* Beg date*/
  FFZREC.FFZEYYMM = FF05M001.FFAENDMO; /* end date*/
  FFZREC.FFZSRANG = "Y";

   /* ------------------------------------------------------------*/
   /* Edit range.  Send YYMM - receive back CCYYMM.*/
   /* ------------------------------------------------------------*/

  XSFFS30();

  if (FFZREC.FFZENDRC == 0) /* end date was valid*/
    FF05W00.FF05WCEG = FFZREC.FFZENDMO; /* end month*/
  else
    if (FFZREC.FFZENDRC == 1) /* end date was missing*/
      FFWREC.XXXMODID = "570"; /* module identification*/
      set FF05M001.FFAENDMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    else
      if (FFZREC.FFZENDRC == 2) /* end date was invalid*/
        FFWREC.XXXMODID = "570"; /* module identification*/
        set FF05M001.FFAENDMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(17); /* Indicate invalid*/
      else
        FFWREC.XXXMODID = "570"; /* module identification*/
        set FF05M001.FFAENDMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* Indicate out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC == 0) /* beg date was valid*/
    FF05W00.FF05WCBG = FFZREC.FFZBEGMO; /* end month*/
  else
    if (FFZREC.FFZBEGRC == 1) /* beg date was missing*/
      FFWREC.XXXMODID = "570"; /* module identification*/
      set FF05M001.FFABEGMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    else
      if (FFZREC.FFZBEGRC == 2) /* beg date was invalid*/
        FFWREC.XXXMODID = "570"; /* module identification*/
        set FF05M001.FFABEGMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(17); /* Indicate invalid*/
      else
        FFWREC.XXXMODID = "570"; /* module identification*/
        set FF05M001.FFABEGMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* Indicate out of range*/
      end
    end
  end

end // end FF05580

// Check key for change
Function FF05590()
   /* ------------------------------------------------------------*/
   /* If any key field was changed, highlight it and return*/
   /* message.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.FFABEGMO != FF05W01.FFABEGMO /* range changed*/
   || FF05M001.FFAENDMO != FF05W01.FFAENDMO /* range changed*/
   || FF05M001.XPCCD != FFWREC.XPCCD        /* category changed*/
   || FF05M001.YPGCD != FFWREC.YPGCD        /* type changed*/
   || FF05M001.YSMXDV != FFWREC.YSMXDV)     /* div grp changed*/

    FFWREC.XXXMODID = "580"; /* Module identification*/
    converseLib.validationFailed(128); /* Can't chg key & request update*/

    if (FF05M001.XPCCD != FFWREC.XPCCD) /* category changed*/
      set FF05M001.XPCCD cursor, bold; /* highlight*/
    end

    if (FF05M001.YPGCD != FFWREC.YPGCD) /* type changed*/
      set FF05M001.YPGCD cursor, bold; /* highlight*/
    end

    if (FF05M001.YSMXDV != FFWREC.YSMXDV) /* div grp changed*/
      set FF05M001.YSMXDV cursor, bold; /* highlight*/
    end

    if (FF05M001.FFAENDMO != FF05W01.FFAENDMO) /* range changed*/
      set FF05M001.FFAENDMO cursor, bold; /* highlight*/
    end

    if (FF05M001.FFABEGMO != FF05W01.FFABEGMO) /* range changed*/
      set FF05M001.FFABEGMO cursor, bold; /* highlight*/
    end

  end


end // end FF05590

// Process valid input request
Function FF05600()
   /* ------------------------------------------------------------*/
   /* indicate that the map must be formated.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.FFABEGMO != FF05W01.FFABEGMO /* range changed*/
   || FF05M001.FFAENDMO != FF05W01.FFAENDMO /* range changed*/
   || FF05M001.YPGCD != FFWREC.YPGCD        /* type code*/
   || FF05M001.XPCCD != FFWREC.XPCCD        /* category code*/
   || FF05M001.YSMXDV != FFWREC.YSMXDV)     /* div grp code*/

    /* ------------------------------------------------------------*/
     /* Update key in FFWREC.*/
    /* ------------------------------------------------------------*/

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* begin month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* end month*/

    FFWREC.YPGCD = FF05M001.YPGCD; /* type code*/
    FFWREC.YPGABRV = FF05M001.YPGABRV; /* type name*/
    FFWREC.XPLCD = FF05M001.XPLCD; /* line code*/
    FFWREC.XPLABRV = FF05M001.XPLABRV; /* line name*/
    FFWREC.XPCCD = FF05M001.XPCCD; /* category code*/
    FFWREC.XPCABRV = FF05M001.XPCABRV; /* category name*/
    FFWREC.YSMXDV = FF05M001.YSMXDV; /* div grp code*/
    FFWREC.YSMSMDSC = FF05M001.YSMSMDSC; /* div grp name*/

    FF05W00.FF05WSWR = "Y"; /* indicate that data requested*/

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If PF19 was pressed,*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19)

    FF05W00.FF05WSWR = "Y"; /* indicate that data requested*/
    FF05W00.FF05WST0 = "Y"; /* indicate set-to-zero request*/

    /* ------------------------------------------------------------*/
     /* Indicate to user that targets were set to zero.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 165; /* Indicate update completed*/

    return; /* return to previous routine*/

  end
   /* ------------------------------------------------------------*/
   /* If PF20 was pressed,*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20)

    FF05W00.FF05WSWR = "Y"; /* indicate that data requested*/
    FF05W00.FF05WCAL = "Y"; /* indicate calculation request*/

    /* ------------------------------------------------------------*/
     /* Indicate to user that S/BUY was used for target.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 166; /* Indicate dub-sbuy used*/

    return; /* return to previous routine*/

  end
   /* ------------------------------------------------------------*/
   /* If PF21 was pressed,*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf21)

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* Check if 'reviewed' switch changed.*/
    /* ------------------------------------------------------------*/

    if (FF05M001.FF2CRVFL != FF05W00.FF2CRVFL) /* Reviewed switch changed*/

      FF05610(); /* Update DFCAST.VFFXRF01*/
      FF05W00.FF2CRVFL = FF05M001.FF2CRVFL;

    end
    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
    /* ------------------------------------------------------------*/

    if (FF05M001.YPGCD != "*") /* If type not equal to '*'*/

      FF05W00.FF05WCNT = 1; /* set subscript*/

      while (FF05W00.FF05WCNT <= FF05W02.FF05WNBR) /* sub LE nbr mos*/

        if (FF05M001.FF05MTGT[FF05WCNT] != FF05W00.FF05WHTG[FF05WCNT])

          FF05620(); /* Select DFCAST.VMCAT001*/

          FF7REC.FF4RTRGT = FF05W01.FF05WTGT[FF05WCNT];

          if (SQLCA.VAGen_SQLCODE == 0) /* Row was found for update*/
            FF05630(); /* Update DFCAST.VMCAT001*/
          else
            FF05640(); /* Add DFCAST.VMCAT001*/
          end

        end

        FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1; /* add to subscript*/

      end

      /* ------------------------------------------------------------*/
       /* Indicate that the updates were successfully completed.*/
      /* ------------------------------------------------------------*/

      FFWREC.FFWMODSW = "N"; /* modified data exit switch*/

      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 32; /* Indicate update completed*/

      /* ------------------------------------------------------------*/
       /* Check if all categories for line have been reviewed.  If*/
       /* they have been, update MLTYP.*/
      /* ------------------------------------------------------------*/

      FF05650(); /* Check review flags & update*/

    else
      /* ------------------------------------------------------------*/
       /* Indicate that no updates are allowed if type equal '*'.*/
      /* ------------------------------------------------------------*/

      FFWREC.FFWMODSW = "N"; /* modified data exit switch*/

      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 307; /* Indicate no updates allowed*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Update  Display Storage area.*/
   /* ------------------------------------------------------------*/

  FF05W01.FFABEGMO = FF05M001.FFABEGMO; /* begin month*/
  FF05W01.FFAENDMO = FF05M001.FFAENDMO; /* end month*/

  FF05W01.FF2CRVFL = FF05M001.FF2CRVFL; /* reviewed flag*/

  FF05W00.FF05WTSW = "N"; /* clear re-totaling switch*/

  FF05W00.FF05WCNT = 1; /* set subscript*/
  while (FF05W00.FF05WCNT <= FF05W02.FF05WNBR) /* until ^le nbr month*/

    FF05660(); /* Update display storage*/

    FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1;

  end

  FF05670(); /* Check for re-totaling*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

end // end FF05600

// Setup FFXRF
Function FF05610()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

   /* ------------------------------------------------------------*/
   /* Format keys for call to DFCAST.VFFXRF01.*/
   /* ------------------------------------------------------------*/

  FF2REC.XPCCD = FF05M001.XPCCD; /* category*/
  FF2REC.XPLCD = FF05M001.XPLCD; /* line*/
  FF2REC.YPGCD = FF05M001.YPGCD; /* type*/
  FF2REC.YSMXDV = FF05M001.YSMXDV; /* div grp*/

   /* ------------------------------------------------------------*/
   /* Select the row, then update.*/
   /* ------------------------------------------------------------*/

  FF05611(); /* Fetch row*/

  FF05612(); /* Update row*/

end // end FF05610

// Select FFXRF
Function FF05611()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05611

// Update FFXRF
Function FF05612()
   /* ------------------------------------------------------------*/
   /* Update field.*/
   /* ------------------------------------------------------------*/

  FF2REC.FF2CRVFL = FF05M001.FF2CRVFL; /* Update switch*/

  FF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("U ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF05W00.FF05WSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "612"; /* Module identification*/

      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF05612

// Select MCAT
Function FF05620()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* clear DFCAST.VMCAT001 record.*/

   /* ------------------------------------------------------------*/
   /* Format keys for call to DFCAST.VMCAT001.*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WMCC = FF05W02.FF05WNCC[FF05WCNT]; /* cc to mask*/
  FF05W00.FF05WMMO = FF05W02.FF05WNMO[FF05WCNT]; /* yymm to mask*/
  FF7REC.FF4FCTMO = FF05W00.FF05WMDT; /* Range month*/

  FF7REC.YSMXDV = FF05M001.YSMXDV; /* div grp*/
  FF7REC.YPGCD = FF05M001.YPGCD; /* Type code*/
  FF7REC.XPCCD = FF05M001.XPCCD; /* category code*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* country code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CALL DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05620

// Update MCAT
Function FF05630()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update DFCAST.VMCAT001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "640"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "640"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05630

// Add -- MCAT
Function FF05640()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.YPGCD == "01") /* if inlines*/
    FF7REC.FF7FURAT = 0;
    FF7REC.FF7FLLRT = 92;
  else
    if (FF05M001.YPGCD == "02") /* if makeups*/
      FF7REC.FF7FURAT = 100;
      FF7REC.FF7FLLRT = 100;
    end
  end

  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update DFCAST.VMCAT001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "650"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05640

// Check reviewed flags
Function FF05650()
   /* ------------------------------------------------------------*/
   /* Check reviewed flag.*/
   /* ------------------------------------------------------------*/
  FF05651(); /* select FFXRF to ck categ revw fl*/

   /* ------------------------------------------------------------*/
   /* If all categories have been reviewed for the line, update.*/
   /* (You will get 0 here, if CAT flags all 'yes' or all 'no'.)*/
   /* ------------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE == 0 /* if only one value for flag found*/
   && FF2REC.FF2CRVFL == "Y")  /* and the flag is equal to 'yes'*/

    FF05W00.FF05WCNT = 1; /* set subscript*/

    /* ------------------------------------------------------------*/
     /* Loop through the month of the range.*/
    /* ------------------------------------------------------------*/
    while (FF05W00.FF05WCNT <= FF05W02.FF05WNBR) /* sub LE nbr mos*/

      /* ------------------------------------------------------------*/
       /* Loop through categories for line & add up amts for month.*/
      /* ------------------------------------------------------------*/
      FF05652(); /* Open FFXRF*/
      FF05653(); /* Fetch FFXRF*/

      FF05W00.FF05WAMT = 0; /* Clear accumulator*/
      while (SQLCA.VAGen_SQLCODE == 0) /* While rows are found*/

        /* --------------------------------------------------*/
         /* Select MCAT.*/
        /* --------------------------------------------------*/
        FF05654(); /* Select MCAT*/

        /* --------------------------------------------------*/
         /* Accumulate target amounts for all cats per month*/
        /* --------------------------------------------------*/
        FF05W00.FF05WAMT = FF05W00.FF05WAMT + FF7REC.FF4RTRGT;

        FF05653(); /* Fetch FFXRF*/

      end

      FF05657(); /* Close FFXRF*/

      /* --------------------------------------------------*/
       /* Select MLTYP.*/
      /* --------------------------------------------------*/
      FF05655(); /* Select MLTYP*/

      /* --------------------------------------------------*/
       /* Update MLTYP.*/
      /* --------------------------------------------------*/
      FF6REC.FF4RTRGT = FF05W00.FF05WAMT; /* Move CAT amt for updt*/
      FF05656(); /* Update MLTYP*/

      /* --------------------------------------------------*/
       /* Add to month counter.*/
      /* --------------------------------------------------*/
      FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1; /* add to subscript*/

    end
  end


end // end FF05650

// Select FFXRF distinct
Function FF05651()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FF2REC.XPCCD = "*"; /* wildcard category*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* format key*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* format key*/
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* format key*/

   /* ------------------------------------------------------------*/
   /* Select FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("SC", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or too many found, return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0    /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811 /* or too many rows found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "651"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05651

// Open FFXRF
Function FF05652()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Line*/

   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FF05W00.FF05WSWC = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "652"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05652

// Fetch FFXRF
Function FF05653()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "653"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05653

// Select MCAT
Function FF05654()
   /* ------------------------------------------------------------*/
   /* Clear storage for row.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty;

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF7REC.XPCCD = FF2REC.XPCCD; /* Cat code*/
  FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FF05WCNT]; /* month*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* Country*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Div Grp*/

   /* ------------------------------------------------------------*/
   /* Select MCAT.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "654"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05654

// Select MLTYP
Function FF05655()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF6REC.FF4FCTMO = FFZREC.FFZINDMO[FF05WCNT]; /* Month*/
  FF6REC.XPLCD = FFWREC.XPLCD; /* Line code*/
  FF6REC.YPGCD = FFWREC.YPGCD; /* Type code*/

   /* ------------------------------------------------------------*/
   /* Select MLTYP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("S ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "655"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05655

// Update MLTYP
Function FF05656()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF6REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF6REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update DFCAST.VMLTYP01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("U ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "656"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "656"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05656

// Close FFXRF
Function FF05657()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "657"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05657

// Update Display storage
Function FF05660()
   /* ------------------------------------------------------------*/
   /* Check if target field changed.*/
   /* ------------------------------------------------------------*/

  if (FF05M001.FF05MTGT[FF05WCNT] != FF05W01.FF05MTGT[FF05WCNT])

    FF05W01.FF05MTGT[FF05WCNT] = FF05M001.FF05MTGT[FF05WCNT];

    FFXREC.FFXCHAR = FF05M001.FF05MTGT[FF05WCNT];
                                   /* send to translate*/
    XSFFS15();
    FF05W01.FF05WTGT[FF05WCNT] = FFXREC.FFXNUMB; /* target (bin)*/

    /* ------------------------------------------------------------*/
     /* Re-calculate Variance.*/
     /* Variance = s/buy Inline - Inline target*/
    /* ------------------------------------------------------------*/

    FF05W00.FF05WFDA = 0; /* clear work field*/

    FF05W00.FF05WFDA = FF05W00.FF05WFDA + FF05W01.FF05WSBY[FF05WCNT];
    FF05W00.FF05WFDA = FF05W00.FF05WFDA - FF05W01.FF05WTGT[FF05WCNT];

    FF05W01.FF05WVAR[FF05WCNT] = FF05W00.FF05WFDA; /* bin store*/

    FF05W00.FF05WTSW = "Y"; /* re-totaling required switch*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate TGT END INV & move to display storage.          |*/
                                                             /* |*/
   /* TGT END INV =  prdctn trgt + beg inv + on order - sls fcst|*/
                                                             /* |*/
   /* FF05W00.FF05WHPT    - production target                   |*/
   /* FF05W00.FF05WHBI    - beg inv (last mo's end inv)         |*/
   /* FF05W00.FF05WHOO    - on order                            |*/
   /* FF05W01.FF05WSLF    - sales fcst                          |*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = FF05W01.FF05WTGT[FF05WCNT];
  if (FF05W00.FF05WCNT == 1) /* If first month*/
    FF05W00.FF05WFDA = FF05W00.FF05WFDA + FF05W00.FF05WHBI;
  else
    FF05W00.FF05WSUB = FF05W00.FF05WCNT - 1; /* count minus 1*/
    FF05W00.FF05WFDA = FF05W00.FF05WFDA + FF05W01.FF05WTEI[FF05WSUB];
  end

  FF05W00.FF05WFDA = FF05W00.FF05WFDA + FF05W00.FF05WHOO[FF05WCNT];
  FF05W00.FF05WFDA = FF05W00.FF05WFDA - FF05W01.FF05WSLF[FF05WCNT];

  FF05W01.FF05WTEI[FF05WCNT] = FF05W00.FF05WFDA; /* disp storage*/

   /* ------------------------------------------------------------*/
   /* Re-Calculate:*/
             /* Sales Average = Sales Fcst for next 3 months * 12*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDA = 0; /* clear work field*/
  FF05W00.FF05WFDB = 0; /* clear work field*/
  FF05W00.FF05WFDC = 0; /* clear work field*/

  FF05W00.FF05WFDA = FF05W00.FF05WSAV * 12; /* Avg sales*/

   /* ------------------------------------------------------------*/
   /* Re-Calculate:*/
        /* Average Inventory  =  Ending inventory  *  3*/
   /* ------------------------------------------------------------*/

  FF05W00.FF05WFDB = FF05W01.FF05WTEI[FF05WCNT] * 3; /* Avg Inv*/

   /* ------------------------------------------------------------*/
   /* Re-Calculate:*/
              /* INV TURNS  =  Avg sales  /  Avg inv*/
   /* ------------------------------------------------------------*/

  if (FF05W00.FF05WFDB > 0) /* if number is greater than zero*/
    FF05W00.FF05WFDC = mathLib.round(FF05W00.FF05WFDA / FF05W00.FF05WFDB, -mathLib.decimals(FF05W00.FF05WFDC));
  end

  FF05W01.FF05MTVT[FF05WCNT] = FF05W00.FF05WFDC; /* storage*/
  FF05W01.FF05WTVT[FF05WCNT] = FF05W00.FF05WFDC; /* storage*/
  FF05M001.FF05MTVT[FF05WCNT] = FF05W00.FF05WFDC; /* map*/


end // end FF05660

// Check if re-totaling required
Function FF05670()
   /* ------------------------------------------------------------*/
   /* Check if re-totaling is required.*/
   /* ------------------------------------------------------------*/

  if (FF05W00.FF05WTSW == "Y") /* re-totaling required*/

    FF05W00.FF05WCNT = 1;
    FF05W03.FF05WTTA = 0;
    FF05W03.FF05WTTB = 0;
    FF05W03.FF05WTTC = 0;
    FF05W03.FF05WTTE = 0;
    FF05W03.FF05WTTH = 0;

    /* ---------------------------------------------------*/
     /* Add up target and variance.*/
    /* ---------------------------------------------------*/
    while (FF05W00.FF05WCNT <= FF05W02.FF05WNBR) /* until ^le nbr month*/

      FF05W03.FF05WTTA = FF05W03.FF05WTTA + FF05W01.FF05WTGT[FF05WCNT];
      FF05W03.FF05WTTB = FF05W03.FF05WTTB + FF05W01.FF05WTGT[FF05WCNT];
      FF05W03.FF05WTTC = FF05W03.FF05WTTC + FF05W01.FF05WVAR[FF05WCNT];
      FF05W03.FF05WTTE = FF05W03.FF05WTTE + FF05W01.FF05WTEI[FF05WCNT];
      FF05W03.FF05WTTH = FF05W03.FF05WTTH + FF05W01.FF05WTVT[FF05WCNT];

      FF05W00.FF05WCNT = FF05W00.FF05WCNT + 1;

    end

    /* --------------------------------------------------*/
     /* Target*/
    /* --------------------------------------------------*/

    FF05W01.FF05WTGT[FF05WCNT] = FF05W03.FF05WTTB; /* bin store*/

    /* --------------------------------------------------*/
     /* Variance.*/
    /* --------------------------------------------------*/

    FF05W01.FF05WVAR[FF05WCNT] = FF05W03.FF05WTTC; /* bin store*/

    /* --------------------------------------------------*/
     /* Target ending inventory.*/
    /* --------------------------------------------------*/

    FF05W01.FF05WTEI[FF05WCNT] = FF05W03.FF05WTTE; /* bin store*/

    /* ------------------------------------------------------------*/
     /* Re-Calculate:*/
                 /* Total turns divided by nbr of months*/
    /* ------------------------------------------------------------*/

    FF05W00.FF05WFDA = FF05W03.FF05WTTH; /* Load total*/
    FF05W00.FF05WFDB = FF05W00.FF05WSUB - 1; /* Get count*/

    if (FF05W00.FF05WFDB > 0)
      FF05W00.FF05WFDC = FF05W00.FF05WFDA / FF05W00.FF05WFDB; /* Get avg*/
    end

    FF05W01.FF05WTVT[FF05WSUB] = FF05W00.FF05WFDC; /* disp storage*/
    FF05W01.FF05MTVT[FF05WSUB] = FF05W00.FF05WFDC; /* disp storage*/
    FF05M001.FF05MTVT[FF05WSUB] = FF05W00.FF05WFDC; /* map*/

  end


end // end FF05670

// Select MCAT summed
Function FF05S01()
   /* ------------------------------------------------------------*/
   /* Select MCAT.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* same as 100 for sum calls*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF05S01

//*** RECORD=FF05W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF05W00 type basicRecord
  10 FF05WSWR FF05WSWR ; 
  10 FF05WSWF FF05WSWF ; 
  10 FF05WRTN FF05WRTN ; 
  10 FF05WDSW FF05WDSW ; 
  10 FF05WTSW FF05WTSW ; 
  10 FF05WABV FF05WABV ; 
  10 FF05WST0 FF05WST0 ; 
  10 FF05WCAL FF05WCAL ; 
  10 FF05WSWC FF05WSWC ; 
  10 FF05WOK FF05WOK ; 
  10 * char(1) ; 
  10 FF2CRVFL FF2CRVFL ; 
  10 FF05WHTG FF05WHTG [12] ; 
  10 * char(1) ; 
  10 FF05WCNT FF05WCNT ; 
  10 FF05WSUB FF05WSUB ; 
  10 FF05WNNN FF05WNNN ; 
  10 * char(1) ; 
  10 FF05WMDT FF05WMDT ; 
    15 FF05WMCC FF05WMCC ; 
    15 FF05WMMO FF05WMMO ; 
  10 * char(1) ; 
  10 FF05WCBG FF05WCBG ; 
    15 * char(2) ; 
    15 FF05WCBC FF05WCBC ; 
    15 FF05WCBD FF05WCBD ; 
  10 * char(1) ; 
  10 FF05WCEG FF05WCEG ; 
    15 * char(2) ; 
    15 FF05WCEC FF05WCEC ; 
    15 FF05WCED FF05WCED ; 
  10 * char(1) ; 
  10 FF05WFDA FF05WFDA ; 
  10 FF05WFDB FF05WFDB ; 
  10 FF05WFDC FF05WFDC ; 
  10 * char(1) ; 
  10 FF05WHSB FF05WHSB ; 
  10 FF05WHPT FF05WHPT ; 
  10 FF05WHSF FF05WHSF ; 
  10 FF05WHBI FF05WHBI [12] ; 
  10 FF05WHOO FF05WHOO [12] ; 
  10 * char(1) ; 
  10 ZZZCHGCT ZZZCHGCT [2] ; 
  10 * char(1) ; 
  10 FF05WSLS FF05WSLS [15] ; 
  10 FF05WSAV FF05WSAV ; 
  10 FF05WAMT FF05WAMT ; 
  10 * char(1) ; 
  10 FF05WNUM FF05WNUM ; 
end // end FF05W00

//*** RECORD=FF05W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF05W01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 * char(1) ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFAENDMO FFAENDMO ; 
  10 FF2CRVFL FF2CRVFL ; 
  10 * char(1) ; 
  10 FF05WRMO FF05WRMO [13] ; 
  10 * char(1) ; 
  10 FF05MSBY FF05MSBY [13] ; 
  10 FF05MTGT FF05MTGT [13] ; 
  10 FF05MVAR FF05MVAR [13] ; 
  10 FF05MSEI FF05MSEI [13] ; 
  10 FF05MSIT FF05MSIT [13] ; 
  10 FF05MTEI FF05MTEI [13] ; 
  10 FF05MTVT FF05MTVT [13] ; 
  10 FF05MSLF FF05MSLF [13] ; 
  10 * char(1) ; 
  10 FF05WSBY FF05WSBY [13] ; 
  10 FF05WTGT FF05WTGT [13] ; 
  10 FF05WVAR FF05WVAR [13] ; 
  10 FF05WSEI FF05WSEI [13] ; 
  10 FF05WSIT FF05WSIT [13] ; 
  10 FF05WTEI FF05WTEI [13] ; 
  10 FF05WTVT FF05WTVT [13] ; 
  10 FF05WSLF FF05WSLF [13] ; 
  10 * char(1) ; 
end // end FF05W01

//*** RECORD=FF05W02 ****
// ----------------------------
// Date fields.
// ----------------------------
// ***********************
Record FF05W02 type basicRecord
  10 FF05WNBR FF05WNBR ; 
  10 FF05WAVG FF05WAVG ; 
  10 * char(1) ; 
  10 FF05WNCC FF05WNCC [15] ; 
  10 FF05WNMO FF05WNMO [15] ; 
  10 * char(1) ; 
  10 FF05WHCC FF05WHCC ; 
  10 FF05WHDT FF05WHDT ; 
    15 FF05WHYY FF05WHYY ; 
    15 FF05WHMM FF05WHMM ; 
  10 * char(1) ; 
  10 FF05WBDT FF05WBDT ; 
    15 FF05WBYY FF05WBYY ; 
    15 FF05WBMM FF05WBMM ; 
  10 * char(1) ; 
  10 FF05WEDT FF05WEDT ; 
    15 FF05WEYY FF05WEYY ; 
    15 FF05WEMM FF05WEMM ; 
  10 * char(1) ; 
end // end FF05W02

//*** RECORD=FF05W03 ****
// ----------------------------
// Total fields.
// ----------------------------
// ***********************
Record FF05W03 type basicRecord
  10 FF05WTTA FF05WTTA ; 
  10 FF05WTTB FF05WTTB ; 
  10 FF05WTTC FF05WTTC ; 
  10 FF05WTTD FF05WTTD ; 
  10 FF05WTTE FF05WTTE ; 
  10 FF05WTTF FF05WTTF ; 
  10 FF05WTTG FF05WTTG ; 
  10 FF05WTTH FF05WTTH ; 
end // end FF05W03

// Suggested buy
DataItem FF05MSBY char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Sug end inv
DataItem FF05MSEI char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Sug inv trn
DataItem FF05MSIT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sales forecast
DataItem FF05MSLF char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tgt end inv
DataItem FF05MTEI char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inline target
DataItem FF05MTGT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tgt inv trn
DataItem FF05MTVT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variance
DataItem FF05MVAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// abrv needed switch
DataItem FF05WABV char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// accum line trgts for updt
DataItem FF05WAMT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sub for 3 mos past range
DataItem FF05WAVG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// begin date
DataItem FF05WBDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// begin month
DataItem FF05WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// begin year
DataItem FF05WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Request calculation
DataItem FF05WCAL char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// converted beg cc
DataItem FF05WCBC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// converted beg date yymm
DataItem FF05WCBD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// converted beg group
DataItem FF05WCBG num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// converted end cc
DataItem FF05WCEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// converted end date yymm
DataItem FF05WCED num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// converted end group
DataItem FF05WCEG num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Counter for loops
DataItem FF05WCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Data found switch
DataItem FF05WDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ending date
DataItem FF05WEDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// ending month
DataItem FF05WEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// ending year
DataItem FF05WEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// work field
DataItem FF05WFDA bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem FF05WFDB bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem FF05WFDC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning inv
DataItem FF05WHBI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold century
DataItem FF05WHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold date
DataItem FF05WHDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold month
DataItem FF05WHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// on order
DataItem FF05WHOO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// production trgt
DataItem FF05WHPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// suggested buy
DataItem FF05WHSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales fcst
DataItem FF05WHSF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold for updt compare
DataItem FF05WHTG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold year
DataItem FF05WHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// mask cc
DataItem FF05WMCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// mask for calls
DataItem FF05WMDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// mask yymm
DataItem FF05WMMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// True nbr of mos in range
DataItem FF05WNBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CC for dates
DataItem FF05WNCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// YYMMs for dates
DataItem FF05WNMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// generic subcript
DataItem FF05WNNN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// number mask
DataItem FF05WNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Normal return code
DataItem FF05WOK char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// YYMMs for dates
DataItem FF05WRMO char(4)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Return code switch
DataItem FF05WRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calc sales avg
DataItem FF05WSAV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Suggested buy
DataItem FF05WSBY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sug end inv
DataItem FF05WSEI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sug inv trn
DataItem FF05WSIT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sales forecast
DataItem FF05WSLF int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sales fcst
DataItem FF05WSLS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request set-to-zero
DataItem FF05WST0 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Pointer for tot position
DataItem FF05WSUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// End of cursor switch
DataItem FF05WSWC char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Format the map switch
DataItem FF05WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF05WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tgt end inv
DataItem FF05WTEI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Inline target
DataItem FF05WTGT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Re-totaling switch
DataItem FF05WTSW char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Tot s/buy line
DataItem FF05WTTA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot target
DataItem FF05WTTB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot variance
DataItem FF05WTTC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot sug end inv
DataItem FF05WTTD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot tgt end inv
DataItem FF05WTTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot sales fcst
DataItem FF05WTTF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot sug inv turns
DataItem FF05WTTG bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tot trg inv turns
DataItem FF05WTTH bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tgt inv trn
DataItem FF05WTVT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variance
DataItem FF05WVAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

