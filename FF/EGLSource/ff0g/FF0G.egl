package ff0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import ff.common.*;
import fg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=FF0G ****
// This application provides the user with the ability to send
// the buy to the factory scheduling and to the availability
// specialists.
// 
// the user can send a buy for one product, one category of
// products, one product line or all product lines by
// submitting a batch job. Only one buy for one month at a time
// can be submitted. If only a single product is specified,
// must ensure that the tentative buy quantity is not zero
// before submitting the batch job.
// 
// If it is from the worksheet application (FF0E), the style,
// color and dimension will default, otherwise default color
// and dimension.
// 
// The user may exit to any allowed application, via fast path
// or PF keys.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/18/89  JJUCH   New application.
// FF#120   07/24/90  CROSS   Add warning if exit w/o a buy
// FF#134   08/14/90  SFORD   Set job completed MSG = 'y'
//  FIX     08/20/90  SFORD   Enhance to not allow buy submit
//                            for same style & buy month.
// FF#FIX   08/27/90  SFORD   Fixed bug in default buy month
// FF#112   10/15/90  SFORD   Removed PF16 function - Update
//                            future cut off date.
// FF#157   10/17/90  LDELUH  If actual buy month less than
//                            contp month need to use contp
//                            month as actual month for call
//                            in FF0G551 & fcst month fof call
//                            in FF0G553.
// FF#195   12/12/90  LDELUH  Allow buys for style developments
// FF#190   12/18/90  LDELUH  Verify tentv buy for individual
//                            style buy from "master" wrksht.
// FF#197   12/18/90  LDELUH  Add style sched comment field.
// FF#257   11/01/91  LDELUH  Add SYCLR lookup to validation
//                            of style to allow buys of closed
//                            out products.
// FF#288   01/22/93  MDANGE  Add an order adjustment type
//                            field to the screen.  The user
//                            may enter 'PR' or 'EO' for an
//                            individual style buy only.  A
//                            preadvice or early order can only
//                            be submitted before the buy month
//                            cutoff.  If field is left blank
//                            the buy type will be determined
//                            by the batch submit job.
// FF#407   06/22/93  MDANGE  Allow PR and EO to be submitted
//                            to main buy month in between
//                            futures cutoff and when sched.
//                            changes their cutoff, usually the
//                            1st of month.  Add edits to tell
//                            user that they can't submit an
//                            OA for a style Dev.
// FF#418   08/03/93  MDANGE  Allow buys,for main buy month,up
//                            to time of scheduling cutoff.
// FF       09/01/93  MDANGE  Add logic to submit either prod
//                            or test JCL.
// PCF-231  09/13/94  MWALKE  Added logic to check for
//                            components program products.
// fix      12/05/94  MWALKE  Deleted comp between map's oa typ
//                            cd and new save value in ff0g500.
//          12/04/96  cwhit1  add 0 fill for yr 2000
// FF649    03/11/97  LDAVI4  Modify screen to allow creation
//                            of only a buy worksheet.  add
//                            cutoff time and PO exist flag.
// ffmaint  03/24/97  ldavi4  fix screen colors on new fields.
// FF649    04/14/97  LDAVI4  changed FF0G585 to allow sty/dvl
//                            codes to correct buy in previous
//                            months when create buy only = 'y'
// ffmaint  04/24/97  ldavi4  remove call to statement group
//                            ff0g556.
// FF1404   05/01/98  LDAVI4  Modify screen to give a warning
//                            message when in 'dead zone'.
//                            Change criteria when calling
//                            FF0G556 and reactive stmt grp.
// FF4638   03/14/00  RKUDPI  disable ability to submit O/As
//                            of type 'PR' ( Pre-Advise )
//                            and 'EO' ( Early Order) .
//                           Per request from Nike Supply Chain
// *********************
Program FF0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FBKREC FBKREC; // record
  FF0GW00 FF0GW00; // record
  FF0GW01 FF0GW01; // record
  FF0GW02 FF0GW02; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  PC3REC PC3REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VCMPPG01 VCMPPG01; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use FF0GT {deleteAfterUse = yes}; // table
  use FF0GT5O {deleteAfterUse = yes}; // table
  use FF0GM.FF0GM001,  // forms
      FF0GM.TA0PM001, 
      FF0GM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0GM001 initial; /* M001 input/output*/
    set FF0GW00 empty; /* Working storage*/
    set FF0GW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0GW00.FF0GWSWF = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    if (FFWREC.YPGCD == "  ") /* No type group*/
      FFWREC.YPGCD = "01"; /* Default value*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end /* Abbreviation*/
    end

    if (FFWREC.SY2CLRID == "   ") /* No color id*/
      FFWREC.SY2CLRID = "00 "; /* Default value*/
    end

    if (FFWREC.XDMCD == "  ") /* No dimension code*/
      FFWREC.XDMCD = "00"; /* Default value*/
    end

    if (FFWREC.FFQMBYMO == -1)
      FFWREC.FFQMBYMO = 0;
    end

    if (FFWREC.FFQMBYMO > 0)
      FF0GW00.FF0GWBYM = FFWREC.FFQMBYMO;
    end

    FF0GW01.FF0GMSBF = "N"; /* Submit buy flag*/
    FF0GM001.FF0GMSBF = "N"; /* Submit buy flag*/
    FF0GW00.FF0GWSWR = "Y"; /* Request for data switch*/
    FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* first time enter pressed fl*/
    FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* second time enter pressed fl*/
    FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
    FF0GW01.FF0GWCBW = "N"; /* Create buy wrkst flag*/
    FF0GM001.FF0GMCBW = "N"; /* Create buy wrkst flag*/

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0G.*/
     /* ------------------------------------------------------------*/

    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0G001; /* Converse the main process*/


    FF0G001: FF0G001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0G001; /* Converse the main process*/


  end // end main
end // end FF0G

// deter if comp prog product
Function FF0G-5100()

  set VCMPPG01 empty; /* Clear row storage area*/

  VCMPPG01.XGPCD = "02"; /* gpc code*/
  VCMPPG01.SY1STNBR = FF0GM001.SY1STNBR; /* Style number*/
  VCMPPG01.SY2CLRID = FF0GM001.SY2CLRID; /* Color id*/
  VCMPPG01.XDMCD = FF0GM001.XDMCD; /* Dimension code*/
  VCMPPG01.FY1FCTYC = "****"; /* factory code*/

   /* reformat actual buy month into pc-po-id-mo-rng = lo-buymo*/
  FF0GW00.FF0GW-PC-PO-ID-CCYYMM = FF0GW00.FF0GWBYM;
  FF0GW00.FF0GW-PC-PO-ID-DM = FF0GW00.FF0GW-PC-PO-ID-PM;
  if (FF0GW00.FF0GW-PC-PO-ID-DM == 01)
    FF0GW00.FF0GW-PC-PO-ID-PM = 11;
    FF0GW00.FF0GW-PC-PO-ID-CCYY = FF0GW00.FF0GW-PC-PO-ID-CCYY - 1;
  else
    if (FF0GW00.FF0GW-PC-PO-ID-DM == 02)
      FF0GW00.FF0GW-PC-PO-ID-PM = 12;
      FF0GW00.FF0GW-PC-PO-ID-CCYY = FF0GW00.FF0GW-PC-PO-ID-CCYY - 1;
    else
      FF0GW00.FF0GW-PC-PO-ID-PM = FF0GW00.FF0GW-PC-PO-ID-DM - 2;
    end
  end
  VCMPPG01.PC-PO-ID-MO-RNG = FF0GW00.FF0GW-PC-PO-ID-MO-RNG;
  VCMPPG01.ZZZSDT = FF0GW00.FF0GW-PC-PO-ID-MO-RNG;

  TA1PGMNM = "FF0G-51";

  XSFFS-VCMPPG01-S2(); /* declare cursor for dfbuy.vcmppg01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    XSFFS-VCMPPG01-N2(); /* fetch first record*/

    if (SQLCA.VAGen_SQLCODE == 0) /* found atleast one record*/
      FF0GW00.FF0GW-COMP-PROG-STY-FL = "Y";

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not a comp program product*/
        FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
      end
    end
  end

  XSFFS-VCMPPG01-C2(); /* close dfbuy.vcmppg01 cursor*/


end // end FF0G-5100

// Inquire/maintain a table row
Function FF0G001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0G100(); /* Obtain the data to display*/

  FF0G200(); /* Format and display the map*/

  FF0G300(); /* Check attention identifier*/

  FF0G400(); /* Reset fields to normal intensity*/

  FF0G500(); /* Verify the entered data*/

  FF0G600(); /* Process valid input request*/


end // end FF0G001

// Obtain the data to display
Function FF0G100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0GW00.FF0GWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Get futures cutoff*/
   /* ------------------------------------------------------------*/

  FF0G110(); /* Get futures cutoff*/

   /* ------------------------------------------------------------*/
   /* Determine current month.*/
   /* ------------------------------------------------------------*/

  FF0G115(); /* Determine contp month*/

   /* ------------------------------------------------------------*/
   /* Default actual buy month if not yet entered.*/
   /* ------------------------------------------------------------*/

  if (FF0GW00.FF0GWBYM <= 0) /* Actl buy month not entered*/
    FF0G120(); /* Default actl buy month*/
  end

   /* ------------------------------------------------------------*/
   /* Get model cutoff date from DFBUY control table.*/
   /* ------------------------------------------------------------*/

  FF0G130(); /* Get scheduling model cutoff dt*/
  FF0GW00.FF0GWBDT = FB9REC.FB8BUYDT; /* SAVE BUY DATE*/

   /* ------------------------------------------------------------*/
   /* Determine if PO exist for buy month.*/
   /* ------------------------------------------------------------*/

  if (FF0GW00.FF0GWBYM != 0) /* Actl buy month*/
    FF0G140(); /* Determine PO exist flag*/
  end

   /* ------------------------------------------------------------*/
   /* Determine if in 'Dead Zone'*/
   /* ------------------------------------------------------------*/
  FF0G150(); /* Determine 'Dead Zone'*/

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    FF0GW00.FF0GWSWR = "N"; /* Request for data switch*/
  end


end // end FF0G100

// Retrv futr cutoff dt VFFCTL01
Function FF0G110()

  set FF1REC empty; /* Clear up the storage row*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0G110

// Convert sched. cutoff date
Function FF0G111()

   /* --------------------------------------------------------*/
   /* Convert format of sched. cutoff date from ccyymmdd to*/
   /* mm-dd-yy*/
   /* --------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "G"; /* type*/
  TA2REC.TA2GRGGN = FB9REC.FB9COFDT; /* date to be converted*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      FF0GW01.FF0GMFDT = TA2REC.TA2GRGB; /* Save converted date*/
    end
  else
    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FF0G111 CONVERT THE SCHED. CUTOFF DATE";
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    FFWREC.XXXMODID = "111"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    exit stack; /* exit to display map*/
  end


end // end FF0G111

// Determine contp month
Function FF0G115()

  XX0XS01(); /* Get current date*/

  if (FF1REC.FF1IVCDT > 0)
    FF0GW00.FF0GWCDT = FF1REC.FF1IVCDT;
    if (XX0XW01.XX0XWDAT < FF1REC.FF1IVCDT)
      FF0GW00.FF0GWCMM = FF0GW00.FF0GWCMM - 1;
      if (FF0GW00.FF0GWCMM == 0)
        FF0GW00.FF0GWCMM = 12;
        FF0GW00.FF0GWCMO = FF0GW00.FF0GWCMO - 100;
      end
    end
  end


end // end FF0G115

// Default actual buy month
Function FF0G120()
   /* --------------------------------------------------------*/
   /* Default actual buy month*/
   /* --------------------------------------------------------*/

  if (FF1REC.FF1FUTDT != 0)
    FF0GW00.FF0GWWBD = FF1REC.FF1FUTDT;
    FF0GW00.FF0GWWMO = FF0GW00.FF0GWWBM;
    FF0GW00.FF0GWWMM = FF0GW00.FF0GWWMM + 5;
    if (FF0GW00.FF0GWWMM > 12)
      FF0GW00.FF0GWWMM = FF0GW00.FF0GWWMM - 12;
      if (FF0GW00.FF0GWWYY == 99)
        FF0GW00.FF0GWWYY = 00;
        FF0GW00.FF0GWWCC = FF0GW00.FF0GWWCC + 1;
      else
        FF0GW00.FF0GWWYY = FF0GW00.FF0GWWYY + 1;
      end
    end
  end

  FF0GW01.FF0GWBMO = FF0GW00.FF0GWWMO;
  FF0GW00.FF0GWBYM = FF0GW00.FF0GWWMO;
  FF0GW00.FF0GWMBY = FF0GW00.FF0GWWMO;
                                            /* save main buy for comparison*/


end // end FF0G120

// Get scheduling cutoff date
Function FF0G130()
   /* Get scheduling model cutoff date for buys from DFBUY.VFMCTL01*/

  set FB9REC empty;

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FF0G111(); /* convert scheduling cutoff dt*/
      FF0GW01.FF0GWFTM = FB9REC.FB9COFTM; /* cutoff time*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FF0G130"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end FF0G130

// Select count DPRODC.VPOHDR01
Function FF0G140()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PC3REC empty;

  PC3REC.PC3BUYMO = FF0GW00.FF0GWBYM; /* Buy month*/
  PC3REC.XGPCD = "02"; /* XGP-GPC-CD*/
  PC3REC.PC3ENTBY = "PC1102"; /* entered by id*/

  set FF0GW02 empty;
  FF0GW02.FF0GW-FUNC = "SD"; /* Function code*/


  try
    call "IO3270" (FF0GW02, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* GOOD RETURN*/

    if (FF0GW02.FF0GW-AUTOLOAD-CNT > 0) /* If autoload rand*/
      FF0GW01.FF0GW-PO-EXIST = "Y"; /* Set switch*/
    else

      FF0GW01.FF0GW-PO-EXIST = "N"; /* Set switch*/
    end

    return;
  else /* Call not successful*/
    FF0GW01.FF0GW-PO-EXIST = "N"; /* Set switch*/
    return;
  end

end // end FF0G140

// Verify the entered data
Function FF0G150()
   /* ------------------------------------------------------------*/
   /* Determine if working in the 'Dead Zone' between Scheduling*/
   /* and Merger/autoload.*/
   /* ------------------------------------------------------------*/

  FF0GW01.FF0GW-DEAD-ZONE-MSG = " ";
  if (FF0GW00.FF0GWBYM == FF0GW00.FF0GWBCY) /* actual buy = sched buy*/
    if (XX0XW01.XX0XWDAT >= FB9REC.FB9COFDT) /* current date GE cutoff*/
      if (XX0XW01.XX0XWDAT == FB9REC.FB9COFDT) /* current dt eq cutoff*/
        if (XX0XW01.XX0XWTIM > FB9REC.FB9COFTM) /* curr tm gt cutoff*/
          if (FF0GW01.FF0GW-PO-EXIST == "N")
            FF0GW01.FF0GW-DEAD-ZONE-MSG = "WARNING: BETWEEN SCHEDULING CUTOFF AND AUTOLOAD";
          end
        end
      else
        if (FF0GW01.FF0GW-PO-EXIST == "N")
          FF0GW01.FF0GW-DEAD-ZONE-MSG = "WARNING: BETWEEN SCHEDULING CUTOFF AND AUTOLOAD";
        end
      end
    end
  end
end // end FF0G150

// Format and converse the map
Function FF0G200()

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0GW00.FF0GWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0GW00.FF0GWSWF == "Y") /* Map must be formatted*/
      FF0G210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0GM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0GM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0GM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0GM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0GM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0GM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0GM001.CAITEM; /* Application data*/


end // end FF0G200

// Format the display data
Function FF0G210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0GM001 initial; /* M001 input/output area*/

  FF0GW00.FF0GWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0GM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0GM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF0GM001.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF0GM001.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0GM001.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0GM001.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  FF0GM001.XPLABRV = FFWREC.XPLABRV; /* Product line abbreviation*/
  FF0GM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
  FF0GM001.XPCABRV = FFWREC.XPCABRV; /* Category short description*/
  FF0GM001.SY1SSTNM = FFWREC.SY1SSTNM; /* Style name*/
  FF0GM001.SY2CLRAB = FFWREC.SY2CLRAB; /* Color abbreviation*/
  FF0GW01.FF0GWBMO = FF0GW00.FF0GWBYM;
  FF0GM001.FF0GMBMO = FF0GW01.FF0GMBMO; /* Actual buy month*/
  FF0GM001.FF0GMSBF = FF0GW01.FF0GMSBF; /* Submit buy flag*/
  FF0GM001.FF0GMCBW = FF0GW01.FF0GWCBW; /* Create buy wrksht flag*/
  FF0GM001.FF0GMOTY = FF0GW01.FF0GMOTY; /* O/A type*/
  FF0GM001.FF0GMSCD = FF0GW01.FF0GMSCD; /* Sched comment*/
  FF0GM001.FF0GMFDT = FF0GW01.FF0GMFDT; /* Scheduling cutoff dt*/
  FF0GM001.FF0GMSMO = FF0GW00.FF0GWSMO; /* Scheduling buy month*/
  FF0GW01.FF0GMFTM = FF0GW01.FF0GWFTM; /**/
  FF0GM001.FF0GMFTM = FF0GW01.FF0GMFTM; /* cutoff time*/
  FF0GM001.FF0GM-PO-EXST = FF0GW01.FF0GW-PO-EXIST; /* po exist flag*/
  FF0GM001.FF0GM-DEAD-ZONE = FF0GW01.FF0GW-DEAD-ZONE-MSG; /**/

  if (FF0GW00.FF0GW-COMP-PROG-STY-FL == "Y")
    set FF0GM001.FF0GM-COMP-PROG-MSG normal;
  end


end // end FF0G210

// Check attention identifier
Function FF0G300()
   /* ------------------------------------------------------------*/
   /* Send warning to  user when buy = y, and about to exit appl*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.FF0GMSBF == "Y")
    if (converseVar.eventKey is enter)
      if (FF0GM001.CATOAP != " ") /* fastpath entered*/
        FF0GS05();
        if (FF0GW00.FF0GWEXT != 0)
          FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter once flag*/
          FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* reset enter twice flag*/
          FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
          FFWREC.XXXMODID = "S05";
          exit stack; /* exit to display warning*/
        end
      end
    else
      FF0GS05();
      if (FF0GW00.FF0GWEXT != 0)
        FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter once flag*/
        FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* reset enter twice flag*/
        FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
        FFWREC.XXXMODID = "S05";
        exit stack; /* exit to display warning*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF0GW00.FF0GWSWR == "Y") /* Request for data*/
      set FF0GW01 empty; /* M001 display storage*/
    end

    FF0GW00.FF0GWSWF = "Y"; /* Format the map switch*/
    FF0GW00.FF0GWSWR = "N"; /* Request for data switch*/
    FF0GW00.FF0GWSWR = "N"; /* Request for data switch*/
    FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter once flag*/
    FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* reset enter twice flag*/
    FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (FF0GW00.FF0GW-ENTER-FLG-1X == "Y" /* ENTER pressed once flag*/
       || FF0GW00.FF0GW-ENTER-FLG-2X == "Y") /* ENTER pressed twice flag*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(362); /* warning no buy was made*/
        FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter once flag*/
        FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* reset enter twice flag*/
        FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";

      else
        XSFFS01(); /* Exit to another application*/
        set FF0GM001.CATOAP cursor, bold; /* Highlight*/
      end

    else
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (FF0GW00.FF0GW-ENTER-FLG-1X == "Y" /* ENTER pressed once flag*/
     || FF0GW00.FF0GW-ENTER-FLG-2X == "Y") /* ENTER pressed twice flag*/
      FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter once flag*/
      FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* reset enter twice flag*/
      FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(362); /* warning no buy was made*/
      exit stack; /* Exit to display map*/
    end

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0GM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FF07"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FF08"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If enter was pressed*/
   /* Determine if this is the once or twice time enter was*/
   /* pressed, set flags according.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    if (FF0GW00.FF0GW-ENTER-FLG-1X == "N") /* ENTER pressed once flag*/
      FF0GW00.FF0GW-ENTER-FLG-1X = "Y"; /* reset enter once flag*/
      FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* reset enter twice flag*/
      FFWREC.XXXMODID = "300"; /* Module identification*/
      FFWREC.XXXMSGNO = 428; /* edits compl, no errors found*/
    else
      FF0GW00.FF0GW-ENTER-FLG-2X = "Y"; /* reset enter twice flg*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0G300

// Reset highlighted fields
Function FF0G400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0GM001.XPLCD initialAttributes; /* Product line code*/
  set FF0GM001.YPGCD initialAttributes; /* Type group code*/
  set FF0GM001.XPCCD initialAttributes; /* Category code*/
  set FF0GM001.SY1STNBR initialAttributes; /* Style number*/
  set FF0GM001.SY2CLRID initialAttributes; /* Color identification*/
  set FF0GM001.XDMCD initialAttributes; /* Dimension code*/
  set FF0GM001.FF0GMBMO initialAttributes; /* Actual buy month*/
  set FF0GM001.FF0GMSBF initialAttributes; /* Submit buy flag*/
  set FF0GM001.FF0GMOTY initialAttributes; /* O/A type*/
  set FF0GM001.FF0GMSCD initialAttributes; /* SCHED COMMENT*/
  set FF0GM001.FF0GMCBW initialAttributes; /* Create buy worksheet only flag*/
  set FF0GM001.FF0GM-COMP-PROG-MSG initialAttributes; /* components program message*/
  set FF0GM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF0GM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.XPLCD == "?" /* Product line list requested*/
   || FF0GM001.YPGCD == "?" /* or type group liest requested*/
   || FF0GM001.XPCCD == "?" /* or category list requested*/
   || FF0GM001.XDMCD == "?") /* or dimension list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.XPLCD == "?") /* Product line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = XPLREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0GM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FF0GM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FF0GM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF0GM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0GM001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.YPGCD == "?") /* Type group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0GM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0GM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FF0GM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0GM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0GM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = XPCREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0GM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0GM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF0GM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0GM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0GM001.XPCCD cursor; /* Establish cursor position*/

  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.XDMCD == "?") /* Dimension list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  DIMENSION"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0GM001.XDMCD = FFWREC.XDMCD; /* Restore prior code*/
    else
      FF0GM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set FF0GM001.XDMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF0G400

// Verify the entered data
Function FF0G500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0GM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Verify that sched comment only entered for style buy.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.FF0GMSCD != "  ") /* Sched comment entered*/
    if (FF0GM001.SY1STNBR == "  ") /* Not a style level buy*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(81); /* Indicate style must be entered*/
      set FF0GM001.FF0GMSCD cursor, bold; /* Highlighted*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the submit buy flag.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.FF0GMSBF != FF0GW00.FF0GW-SAVE-SUBMIT-BUY-FL)
    FF0G520(); /* Verify submit buy flag*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the create buy worksheet flag.*/
   /* ------------------------------------------------------------*/

   /* IF FF0GM001.FF0GMCBW NE FF0GW00.FF0GW-SAVE-CRT-BUY-WRK-FL;*/
  FF0G525(); /* Verify create buy wrk flag.*/
   /* END;*/

   /* ------------------------------------------------------------*/
   /* Verify actual buy month.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.FF0GMBMO != FF0GW00.FF0GW-SAVE-ACTL-BUY-MO)
    if (FF0GM001.FF0GMBMO == 0) /* No actual buy month entered*/
      if (converseVar.eventKey is enter)
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(8); /* Indicate required field*/
        set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/
      end
    else
      FF0G530(); /* Verify buy month*/
      FF0G140(); /* Redetermine po exist flag*/
      FF0GM001.FF0GM-PO-EXST = FF0GW01.FF0GW-PO-EXIST;
      FF0G150(); /* Redetermine DEAD ZONE*/
      FF0GM001.FF0GM-DEAD-ZONE = FF0GW01.FF0GW-DEAD-ZONE-MSG;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify that either style, cat/type grp, or line/type grp*/
   /* were entered.  Key fields are not allowed to be spaces.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (FF0GM001.SY1STNBR == " " /* Style not entered*/
     || FF0GM001.SY2CLRID == " " /* or color not entered*/
     || FF0GM001.XDMCD == " ")   /* or dim not entered*/
      if (FF0GM001.YPGCD == " ") /* Type group not entered*/
        if (FF0GM001.XPCCD == " ") /* Category not entered*/
          if (FF0GM001.XPLCD == " ") /* Line not entered*/
            FFWREC.XXXMODID = "500"; /* Module identification*/
            converseLib.validationFailed(8); /* Indicate missing field*/
            set FF0GM001.SY1STNBR cursor, bold; /* Highlight*/
            set FF0GM001.SY2CLRID bold; /* Highlight*/
            set FF0GM001.XDMCD bold; /* Highlight*/
          else
            FFWREC.XXXMODID = "500"; /* Module identification*/
            converseLib.validationFailed(8); /* Indicate missing field*/
            set FF0GM001.YPGCD cursor, bold; /* Highlight*/
          end
        else
          FFWREC.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(8); /* Indicate missing field*/
          set FF0GM001.YPGCD cursor, bold; /* Highlight*/
        end
      else
        if (FF0GM001.XPCCD == " ") /* Category not entered*/
          if (FF0GM001.XPLCD == " ") /* Line not entered*/
            FFWREC.XXXMODID = "500"; /* Module identification*/
            converseLib.validationFailed(8); /* Indicate missing field*/
            set FF0GM001.XPCCD cursor, bold; /* Highlight*/
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If style/color/dim was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.SY1STNBR != FF0GW00.FF0GW-SAVE-STY-NBR
   || FF0GM001.SY2CLRID != FF0GW00.FF0GW-SAVE-CLR-CD
   || FF0GM001.XDMCD != FF0GW00.FF0GW-SAVE-DIM-CD)
    if (FF0GM001.SY1STNBR > "      ") /* Style entered*/
      FF0G540(); /* Verify sty/col/dim codes*/
      if (converseVar.validationMsgNum == 0 /* No errors found*/
       && FF0GM001.FF0GMBMO > 0             /* & actual buy month entered*/
       && FF0GM001.FF0GMSBF == "Y")         /* & buy requested*/
        FF0G550(); /* Verify that tentv buy exists*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If category was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  if (FF0GM001.XPLCD != FF0GW00.FF0GW-SAVE-LINE-CD
   || FF0GM001.XPCCD != FF0GW00.FF0GW-SAVE-CATG-CD)

    if (FF0GM001.XPCCD > "  ") /* Category entered*/
      FF0G560(); /* Verify category code*/
    else
      FF0GM001.XPCABRV = "      "; /* Clear category abbrev.*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  if (FF0GM001.YPGCD != FF0GW00.FF0GW-SAVE-TYP-GRP)
    if (FF0GM001.YPGCD > "  ") /* Type group entered*/
      FF0G570(); /* Verify type group cdoe*/
    else
      FF0GM001.YPGABRV = "      "; /* Clear type grp abbrev.*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If product line was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  if (FF0GM001.XPLCD != FF0GW00.FF0GW-SAVE-LINE-CD)
    if (FF0GM001.XPLCD > "  ") /* Product line entered*/
      FF0G580(); /* Verify product line code*/
    else
      FF0GM001.XPLABRV = "      "; /* Clear product line abbrev.*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* errors were found*/
    FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter pressed once*/
    FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* and twice flags*/
    FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
    exit stack; /* exit to display map*/
  end

  if (FF0GM001.YPGCD == "*" /* Type group = '*'*/
   && FF0GM001.XPLCD == "*") /* Line = '*'  big buy*/
    if (FF0GW00.FF0GWBYM == FF0GW00.FF0GWBCY) /* actual buy = sched buy*/
      if (XX0XW01.XX0XWDAT >= FB9REC.FB9COFDT) /* current date GE cutoff*/
        if (XX0XW01.XX0XWDAT == FB9REC.FB9COFDT) /* current dt eq cutoff*/
          if (XX0XW01.XX0XWTIM > FB9REC.FB9COFTM) /* curr tm gt cutoff*/
            FFWREC.XXXMODID = "500"; /* Module identification*/
            converseLib.validationFailed(492); /* Indicate required field*/
            set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/
          end
        else
          FFWREC.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(492); /* Indicate required field*/
          set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/
        end
      end
    else
      FFWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(492); /* Indicate sched buy not allowed*/
      set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* errors were found*/
    FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter pressed once*/
    FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* and twice flags*/
    FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
    exit stack; /* exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If O/A type is entered verify.*/
   /* Don't allow anything but PR and EO when scheduling buy date*/
   /* is less than the actual buy month*/
   /* Verify to prevent style developments from going to OA system*/
   /* ------------------------------------------------------------*/
  if (FF0GM001.FF0GMOTY == "  ") /* O/A type left blank*/
    if (FF0GW00.FF0GWBYM > FF0GW00.FF0GWBCY) /* actual buy > sched buy*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(489); /* Indicate sched buy not allowed*/
      set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/
    end
    if (FF0GM001.SY1STNBR == "  ") /* Not a style level buy*/
        /* next sentence*/
    else
      if (FF3REC.FF8DEVFL == "Y") /* style development*/
        FF0G585(); /* verify won't be a style dev OA*/
      end
    end
  else
    FF0G590(); /* verify O/A type*/
  end

   /* ------------------------------------------------------------*/
   /* If no errors were found*/
   /* If a sytle number was entered*/
   /* Determine if keys changed*/
   /* call dfbuy.vcmppg01 io mod*/
   /* if record found, display component program prod msg*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* errors were found*/
    if (FF0GM001.SY1STNBR > " ") /* style nbr entered*/
      if (FF0GM001.XPLCD != FF0GW00.FF0GW-SAVE-LINE-CD
       || FF0GM001.YPGCD != FF0GW00.FF0GW-SAVE-TYP-GRP
       || FF0GM001.XPCCD != FF0GW00.FF0GW-SAVE-CATG-CD
       || FF0GM001.SY1STNBR != FF0GW00.FF0GW-SAVE-STY-NBR
       || FF0GM001.SY2CLRID != FF0GW00.FF0GW-SAVE-CLR-CD
       || FF0GM001.XDMCD != FF0GW00.FF0GW-SAVE-DIM-CD
       || FF0GM001.FF0GMBMO != FF0GW00.FF0GW-SAVE-ACTL-BUY-MO
       || FF0GM001.FF0GMSBF != FF0GW00.FF0GW-SAVE-SUBMIT-BUY-FL
       || FF0GM001.FF0GMOTY != FF0GW00.FF0GW-SAVE-OA-TYPE
       || FF0GM001.FF0GMSCD != FF0GW00.FF0GW-SAVE-SCHD-CMNT
       || FF0GM001.FF0GMCBW != FF0GW00.FF0GW-SAVE-CRT-BUY-WRK-FL)
        FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
        FF0G-5100();
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* errors were found*/
    FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter pressed once*/
    FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* and twice flags*/
    FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
    exit stack; /* exit to display map*/
  else
    if (FF0GW00.FF0GW-ENTER-FLG-1X == "Y" /* save map data for double enter*/
     && FF0GW00.FF0GW-ENTER-FLG-2X == "N") /* processing*/

      FF0GW00.FF0GW-SAVE-LINE-CD = FF0GM001.XPLCD;
      FF0GW00.FF0GW-SAVE-TYP-GRP = FF0GM001.YPGCD;
      FF0GW00.FF0GW-SAVE-CATG-CD = FF0GM001.XPCCD;
      FF0GW00.FF0GW-SAVE-STY-NBR = FF0GM001.SY1STNBR;
      FF0GW00.FF0GW-SAVE-CLR-CD = FF0GM001.SY2CLRID;
      FF0GW00.FF0GW-SAVE-DIM-CD = FF0GM001.XDMCD;
      FF0GW00.FF0GW-SAVE-ACTL-BUY-MO = FF0GM001.FF0GMBMO;
      FF0GW00.FF0GW-SAVE-SUBMIT-BUY-FL = FF0GM001.FF0GMSBF;
      FF0GW00.FF0GW-SAVE-OA-TYPE = FF0GM001.FF0GMOTY;
      FF0GW00.FF0GW-SAVE-SCHD-CMNT = FF0GM001.FF0GMSCD;
      FF0GW00.FF0GW-SAVE-CRT-BUY-WRK-FL = FF0GM001.FF0GMCBW;
    else
      if (FF0GM001.XPLCD != FF0GW00.FF0GW-SAVE-LINE-CD
       || FF0GM001.YPGCD != FF0GW00.FF0GW-SAVE-TYP-GRP
       || FF0GM001.XPCCD != FF0GW00.FF0GW-SAVE-CATG-CD
       || FF0GM001.SY1STNBR != FF0GW00.FF0GW-SAVE-STY-NBR
       || FF0GM001.SY2CLRID != FF0GW00.FF0GW-SAVE-CLR-CD
       || FF0GM001.XDMCD != FF0GW00.FF0GW-SAVE-DIM-CD
       || FF0GM001.FF0GMBMO != FF0GW00.FF0GW-SAVE-ACTL-BUY-MO
       || FF0GM001.FF0GMSBF != FF0GW00.FF0GW-SAVE-SUBMIT-BUY-FL
       || FF0GM001.FF0GMOTY != FF0GW00.FF0GW-SAVE-OA-TYPE
       || FF0GM001.FF0GMSCD != FF0GW00.FF0GW-SAVE-SCHD-CMNT
       || FF0GM001.FF0GMCBW != FF0GW00.FF0GW-SAVE-CRT-BUY-WRK-FL)

        FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter pressed once*/
        FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* and twice flags*/
        FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(499); /* fields can not be changed*/
        if (FF0GM001.XPLCD != FF0GW00.FF0GW-SAVE-LINE-CD)
          set FF0GM001.XPLCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.YPGCD != FF0GW00.FF0GW-SAVE-TYP-GRP)
          set FF0GM001.YPGCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.XPCCD != FF0GW00.FF0GW-SAVE-CATG-CD)
          set FF0GM001.XPCCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.SY1STNBR != FF0GW00.FF0GW-SAVE-STY-NBR)
          set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.SY2CLRID != FF0GW00.FF0GW-SAVE-CLR-CD)
          set FF0GM001.SY2CLRID cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.XDMCD != FF0GW00.FF0GW-SAVE-DIM-CD)
          set FF0GM001.XDMCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMBMO != FF0GW00.FF0GW-SAVE-ACTL-BUY-MO)
          set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMSBF != FF0GW00.FF0GW-SAVE-SUBMIT-BUY-FL)
          set FF0GM001.FF0GMSBF cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMOTY != FF0GW00.FF0GW-SAVE-OA-TYPE)
          set FF0GM001.FF0GMOTY cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMSCD != FF0GW00.FF0GW-SAVE-SCHD-CMNT)
          set FF0GM001.FF0GMSCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMCBW != FF0GW00.FF0GW-SAVE-CRT-BUY-WRK-FL)
          set FF0GM001.FF0GMCBW cursor, bold; /* Highlighted*/
        end
      end
    end
  end


end // end FF0G500

// Verify submit buy flag
Function FF0G520()

  if (FF0GM001.FF0GMSBF == "Y"
   || FF0GM001.FF0GMSBF == "N")
    if (converseVar.eventKey is enter
     && FF0GM001.FF0GMSBF == "N")
      FFWREC.XXXMODID = "520"; /* Module identification*/
      FFWREC.XXXMSGNO = 302; /* Flag should be "y" to submit*/
    end
  else
    FFWREC.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(153); /* Indicate value must be 'y' or 'n'*/
    set FF0GM001.FF0GMSBF cursor, bold; /* Highlighted*/
  end


end // end FF0G520

// Verify create buy wrkst flag
Function FF0G525()

  if (FF0GM001.FF0GMCBW == "Y"
   || FF0GM001.FF0GMCBW == "N")
    if (converseVar.eventKey is enter
     && FF0GM001.FF0GMCBW == "Y"
     && FF0GM001.SY1STNBR == " ")
      FFWREC.XXXMODID = "525"; /* Module identification*/
      converseLib.validationFailed(517); /* action requires style/colr/dim*/
      set FF0GM001.FF0GMCBW cursor, bold; /* Highlighted*/
      set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
      set FF0GM001.SY2CLRID cursor, bold; /* Highlighted*/
      set FF0GM001.XDMCD cursor, bold; /* Highlighted*/
    end
    if (FF0GM001.FF0GMCBW == "Y"
     && FF0GW00.FF0GWBYM > FF0GW00.FF0GWMBY)
      FFWREC.XXXMODID = "525"; /* Module identification*/
      converseLib.validationFailed(518); /* action disallowed for buy month*/
      set FF0GM001.FF0GMCBW cursor, bold; /* Highlighted*/
    end
  else
    FFWREC.XXXMODID = "525"; /* Module identification*/
    converseLib.validationFailed(153); /* Indicate value must be 'y' or 'n'*/
    set FF0GM001.FF0GMCBW cursor, bold; /* Highlighted*/
  end


end // end FF0G525

// Verify buy month
Function FF0G530()

   /* ------------------------------------------------------------*/
   /* Edit the buy month, convert the format from YYMM to CCYYMM*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "E"; /* Type*/
  TA2REC.TA2GRGYM = FF0GM001.FF0GMBMO; /* YYMM to be validated*/
  TA2REC.TA2GRGDD = 01; /* DD to be validated*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/

    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

      FF0GW00.FF0GWBYM = TA2REC.TA2GRCYM; /* Save converted date*/

    else

      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(17); /* Indicate invalid date entered*/
      set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/

    end

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FF0G530 EDIT THE BUY MONTH";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/

    exit stack; /* exit to display map*/

  end


end // end FF0G530

// Verify style/color/dim
Function FF0G540()

  set FF3REC empty; /* Clear row storage area*/

  FF3REC.SY1STNBR = FF0GM001.SY1STNBR; /* Style number*/
  FF3REC.SY2CLRID = FF0GM001.SY2CLRID; /* Color id*/
  FF3REC.XDMCD = FF0GM001.XDMCD; /* Dimension code*/

  FF0G541(); /* Select row in VFFSTY01*/

  FF0GM001.SY1SSTNM = "************"; /* Save the style name*/
  FF0GM001.SY2CLRAB = "*************"; /* Save the color abbreviation*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    FF0GM001.SY1SSTNM = FF3REC.SY1SSTNM; /* Save the style name*/
    FF0GM001.SY2CLRAB = FF3REC.SY2CLRAB; /* Save the color abbrev*/
    FF0GM001.XPCCD = FF3REC.XPCCD; /* Save the associated cat*/
    XPCREC.XPCCD = FF3REC.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      FF0GM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
    end
    FF0GM001.YPGCD = FF3REC.YPGCD; /* save associated typgrp*/
    if (FF3REC.YPGCD in YPGTBL.YPGCD)
      FF0GM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end
    FF0GM001.XPLCD = FF3REC.XPLCD; /* Save associated prod line*/
    if (FF3REC.XPLCD == "  ") /* No product line*/
      FF0GM001.XPLABRV = "      "; /* Blank out the abbrev. field*/
    else
      XPLREC.XPLCD = FF3REC.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FF0GM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
    end

  else

    set PG2REC empty; /* Clear row storage area*/
    PG2REC.XGPCD = "02";
    PG2REC.SY1STNBR = FF0GM001.SY1STNBR; /* Style number*/
    PG2REC.SY2CLRID = FF0GM001.SY2CLRID; /* Color id*/
    PG2REC.XDMCD = FF0GM001.XDMCD; /* Dimension code*/
    FF0G543(); /* Select row in VSYCLR01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      FF0GM001.SY1SSTNM = PG2REC.SY1SSTNM; /* Save the style name*/
      FF0GM001.SY2CLRAB = PG2REC.SY2CLRAB; /* Save the color abbrev*/
      FF0GM001.XPCCD = PG2REC.XPCCD; /* Save the associated cat*/
      XPCREC.XPCCD = PG2REC.XPCCD;
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FF0GM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
      FF0GM001.XPLCD = PG2REC.XPLCD; /* Save associated prod line*/
      if (PG2REC.XPLCD == "  ") /* No product line*/
        FF0GM001.XPLABRV = "      "; /* Blank out the abbrev. field*/
      else
        XPLREC.XPLCD = PG2REC.XPLCD;
        if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
          FF0GM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        end
      end
      FF0GW00.XPRCD = PG2REC.XPRCD; /* Type code to translate*/
      if (PG2REC.XPRCD in XPRTBL.XPRCD
       && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (XPRTBL.YPGCD[sysVar.arrayIndex] in YPGTBL.YPGCD
         && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A"
         && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y")
          FF0GM001.YPGCD = YPGTBL.YPGCD[sysVar.arrayIndex];
          FF0GM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
        else
          FFWREC.XXXMODID = "540"; /* Module identification*/
          converseLib.validationFailed(22); /* Indicate invalid style/color entered*/
          set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
        end
      else
        FFWREC.XXXMODID = "540"; /* Module identification*/
        converseLib.validationFailed(22); /* Indicate invalid style/color entered*/
        set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
      end

    else

      FFWREC.XXXMODID = "540"; /* Module identification*/
      converseLib.validationFailed(22); /* Indicate invalid style/color entered*/
      set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/

    end
  end


end // end FF0G540

// Select row in FFSTY01
Function FF0G541()

  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "541"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FF3REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0G541

// Select SYCLR row
Function FF0G543()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* PG2REC not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "543"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0G543

// Retrv wrksht no from VSWHDR01
Function FF0G550()

  FF0G551();
                                   /* Select & open the cursor for VSWHRD01*/

  FF0G552(); /* Fetch first row in VSWHRD01*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    FF0G553(); /* Retrieve tentv buy qty*/
  end

  FF0G554(); /* Close the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    FF0G555(); /* verify same buy not submitted*/
  end

  if (converseVar.validationMsgNum == 0    /* No errors found*/
   && FFRREC.FFRTENBY < 0                  /* Tentative buy less than zero*/
   && FF0GW00.FF0GWBYM >= FF0GW00.FF0GWBCY /* buy month >= schd buy month*/
   && FF0GM001.FF0GMOTY == "  "            /* O/A type not entered*/
   && FF0GM001.FF0GMCBW == "N")            /* Not creating buy only worksheet*/
    FF0G556(); /* verify same buy not submitted*/
  end


end // end FF0G550

// Select & open cursor VSWHDR01
Function FF0G551()

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.SY1STNBR = FF0GM001.SY1STNBR; /* Style number*/
  FFQREC.SY2CLRID = FF0GM001.SY2CLRID; /* Color id*/
  FFQREC.XDMCD = FF0GM001.XDMCD; /* Dimension code*/

  if (FF0GW00.FF0GWBYM < FF0GW00.FF0GWCMO) /* If actl lt contp*/
    FFQREC.FFQABYMO = FF0GW00.FF0GWCMO; /* actual buy month*/
  else
    FFQREC.FFQABYMO = FF0GW00.FF0GWBYM; /* actual buy month*/
  end

  FFQREC.XWSCD = "02"; /* "MSTR" w/s type code*/
  FFQREC.SY2SSCIN = "*"; /* safety stock indicator*/
  FFQREC.ZZZCHGDT = -1;
  FFQREC.ZZZCHGTM = -1;

  try
    call "IO3810" ("S7", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "551"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0G551

// Fetch next row in VSWHDR01
Function FF0G552()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("N7", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      FFWREC.XXXMODID = "552"; /* Module identification*/
      converseLib.validationFailed(11); /* Inidicate the record is not on database*/
      set FF0GM001.SY1STNBR cursor, bold; /* Highlight*/
      set FF0GM001.SY2CLRID bold; /* Highlight*/
      set FF0GM001.XDMCD bold; /* Highlight*/
      set FF0GM001.FF0GMBMO bold; /* Highlight*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "552"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0G552

// Retrv tent. buy from VSWITM01
Function FF0G553()

  set FFRREC empty; /* Clear row storage area*/

  FFRREC.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet number*/
  if (FF0GW00.FF0GWBYM < FF0GW00.FF0GWCMO) /* If actl lt contp*/
    FFRREC.FF4FCTMO = FF0GW00.FF0GWCMO; /* Forecast month*/
  else
    FFRREC.FF4FCTMO = FF0GW00.FF0GWBYM; /* Forecast month*/
  end

  try
    call "IO3820" ("S ", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (FFRREC.FFRTENBY == 0) /* Tentative buy qty is zero*/
        FFWREC.XXXMODID = "553"; /* Module identification*/
        converseLib.validationFailed(109); /* Indicate tentv buy is 0*/
        set FF0GM001.SY1STNBR cursor, bold; /* Highlight*/
        set FF0GM001.SY2CLRID bold; /* Highlight*/
        set FF0GM001.XDMCD bold; /* Highlight*/
        set FF0GM001.FF0GMBMO bold; /* Highlight*/
      end
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FFWREC.XXXMODID = "553"; /* Module identification*/
      converseLib.validationFailed(11); /* Inidicate the record is not on DB*/
      set FF0GM001.SY1STNBR cursor, bold; /* Highlight*/
      set FF0GM001.SY2CLRID bold; /* Highlight*/
      set FF0GM001.XDMCD bold; /* Highlight*/
      set FF0GM001.FF0GMBMO bold; /* Highlight*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "553"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0G553

// Close cursor for VSWHDR01
Function FF0G554()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("C7", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "554"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0G554

// Verify same buy not submitted
Function FF0G555()

   /* ------------------------------------------------------------*/
   /* If successful qty available for buy, verify same buy not*/
    /* submitted. (prev. buy saved in FF0G630*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.SY1STNBR == FF0GW01.FF0GWSTY /* Prev Style number*/
   && FF0GM001.SY2CLRID == FF0GW01.FF0GWCLR /* Prev Color id*/
   && FF0GM001.XDMCD == FF0GW01.FF0GWDIM    /* Prev Dimension code*/
   && FF0GW00.FF0GWBYM == FF0GW01.FF0GWBUY) /* Prev buy month*/

    FFWREC.XXXMODID = "555"; /* Module identification*/
    converseLib.validationFailed(4); /* Cannot submit same buy*/
    set FF0GM001.SY1STNBR cursor, bold; /* Highlight*/
    set FF0GM001.SY2CLRID bold; /* Highlight*/
    set FF0GM001.XDMCD bold; /* Highlight*/
    set FF0GM001.FF0GMBMO bold; /* Highlight*/

  end


end // end FF0G555

// Verify negative buy
Function FF0G556()

  FF0G556-01(); /* GET BUY FROM VFQTBS01*/

  if (FBKREC.FB8FTQTB > 0)
    return; /* Return to previous process*/
  else
    FFWREC.XXXMODID = "556"; /* module identification*/
    converseLib.validationFailed(516); /* No positive buy found*/
    set FF0GM001.SY1STNBR cursor, bold; /* Highlight*/
    set FF0GM001.SY2CLRID bold; /* Highlight*/
    set FF0GM001.XDMCD bold; /* Highlight*/
    set FF0GM001.FF0GMBMO bold; /* Highlight*/
    return; /* Return to previous process*/
  end
end // end FF0G556

// Select buy total from vfqtbs01
Function FF0G556-01()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FBKREC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format Dfbuy.vfqtbs01.*/
   /* ------------------------------------------------------------*/

  FBKREC.FB8RCTYP = "B"; /* record type*/
  FBKREC.SY1STNBR = FF0GM001.SY1STNBR; /* style number*/
  FBKREC.SY2CLRID = FF0GM001.SY2CLRID; /* color id*/
  FBKREC.XDMCD = FF0GM001.XDMCD; /* dimension code*/
  FF0GW00.FF0GW-BUY-CCYYMM = FF0GW00.FF0GWBYM; /* actual buy month*/
  FF0GW00.FF0GW-BUY-DAY = 01;
  FBKREC.FB8BUYDT = FF0GW00.FF0GW-BUY-DATE; /* buy date*/

   /* ------------------------------------------------------------*/
   /* select set dfbuy.vfqtbs01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      FBKREC.FB8FTQTB = 0;
      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "556-01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S ON DFBUY.VFQTBS01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FF0G556-01

// Verify category code
Function FF0G560()

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FF0GM001.XPCCD;
  FF0GM001.XPCABRV = "************";

  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    FF0GM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Category desc.*/
    FF0G561(); /* Obtain related product line*/
  else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate invalid.*/
    /* ------------------------------------------------------------*/
    FFWREC.XXXMODID = "560"; /* Module identification*/
    set FF0GM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/
  end


end // end FF0G560

// Obtain related product line
Function FF0G561()

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YPGCD = FF0GM001.YPGCD; /* Type group code*/
  FF2REC.XPCCD = FF0GM001.XPCCD; /* Category code*/
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0GM001.XPLCD = FF2REC.XPLCD; /* Save the related line*/
      XPLREC.XPLCD = FF2REC.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FF0GM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Rrow not found*/
      FF0GM001.XPLCD = "  "; /* Clear line code field*/
      FF0GM001.XPLABRV = "      "; /* Clear line abrv field*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "561"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0G561

// Verify type group code
Function FF0G570()

  if (FF0GM001.YPGCD == "* ") /* Wild card*/
    FF0GM001.YPGABRV = "ALL";
    return; /* Return to the previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.YPGCD == "  ") /* No type group entered*/
    FF0GM001.YPGABRV = "      "; /* Clear abbrev. field*/
  else
    FF0GM001.YPGABRV = "******";
  end

  if (FF0GM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and active for FF system*/
    FF0GM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Type group abbrev.*/
  else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate invalid.*/
    /* ------------------------------------------------------------*/
    FFWREC.XXXMODID = "570"; /* Module identification*/
    set FF0GM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/
  end


end // end FF0G570

// Verify product line code
Function FF0G580()

  if (FF0GM001.XPLCD == "* ") /* Wild card*/
    FF0GM001.XPLABRV = "ALL";
    return; /* Return to the previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  XPLREC.XPLCD = FF0GM001.XPLCD;

  if (FF0GM001.XPLCD == "  ") /* No product line entered*/
    FF0GM001.XPLABRV = "      "; /* Clear the abbrev. field*/
  else
    FF0GM001.XPLABRV = "******";
  end

  if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    FF0GM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
                                   /* Product line abbrev.*/
  else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate invalid.*/
    /* ------------------------------------------------------------*/
    FFWREC.XXXMODID = "580"; /* Module identification*/
    set FF0GM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/
  end


end // end FF0G580

// Verify not Style Dev OA
Function FF0G585()

   /* ------------------------------------------------------------*/
   /* If style is style development make sure this will not be*/
   /* an OA type buy*/
   /* ------------------------------------------------------------*/
   /* Verify that buy month   =  main buy month for style develop*/
   /* or that buy month = sched buy month and were not past the*/
   /* scheduling cutoff date.*/
   /* ------------------------------------------------------------*/

  if (FF0GW00.FF0GWBYM == FF0GW00.FF0GWBCY) /* buy mo =  sch buy month*/
      /* NEXT SENTENCE*/
  else
    if (FF0GM001.FF0GMCBW == "N") /* CREATE BUY WRKST FLAG = NO*/
      FFWREC.XXXMODID = "585"; /* Module identification*/
      converseLib.validationFailed(188); /* Indicate cant be style dev*/
      set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify that not past cutoff for main buy month/sched buy mon*/
   /* ------------------------------------------------------------*/
  if (XX0XW01.XX0XWDAT > FB9REC.FB9COFDT /* current date GT cutoff*/
   && FF0GM001.FF0GMCBW == "N")          /* CREATE BUY WRKST FLAG = NO*/
    FFWREC.XXXMODID = "585"; /* Module identification*/
    converseLib.validationFailed(188); /* Indicate required field*/
    set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
  else
    if (XX0XW01.XX0XWDAT == FB9REC.FB9COFDT) /* current dt EQ cutoff*/
      if (XX0XW01.XX0XWTIM > FB9REC.FB9COFTM /* current tm GT cutoff*/
       && FF0GM001.FF0GMCBW == "N")          /* CREATE BUY WRKST FLAG = NO*/
        FFWREC.XXXMODID = "585"; /* Module identification*/
        converseLib.validationFailed(188); /* Indicate required field*/
        set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
      end
    end
  end
end // end FF0G585

// Verify O/A type
Function FF0G590()
   /* ------------------------------------------------------------*/
   /* Verify that O/A type entered only with style buy*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.SY1STNBR == "  ") /* Not a style level buy*/
    FFWREC.XXXMODID = "590"; /* Module identification*/
    converseLib.validationFailed(81); /* Indicate style must be entered*/
    set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
  end

   /* ------------------------------------------------------------*/
   /* Verify that the style for O/A is not a style development*/
   /* ------------------------------------------------------------*/

  if (FF3REC.FF8DEVFL == "Y") /* Style development*/
    FFWREC.XXXMODID = "590"; /* Module identification*/
    converseLib.validationFailed(188); /* Indicate style must be entered*/
    set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the O/A type entered.*/
   /* ------------------------------------------------------------*/
   /* Changed validation per NSC request to disallow PRs and EOs*/
   /* 3/14/00 RKUDPI . Commented out the remainder of this process*/
   /* applicable only to PRs and EOs*/

  if (FF0GM001.FF0GMOTY == "OR") /* = overrun*/
   /* OR FF0GM001.FF0GMOTY = 'PR'    /* = preadvise*/
   /* OR FF0GM001.FF0GMOTY = 'EO';   /* = early order*/
      /* NEXT SENTENCE*/
  else
    FFWREC.XXXMODID = "590"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate invalid entry*/
    set FF0GM001.FF0GMOTY cursor, bold; /* Highlighted*/
  end

   /* ------------------------------------------------------------*/
   /* Verify that buy month   LT  sched buy month for overrun*/
   /* ------------------------------------------------------------*/

  if (FF0GM001.FF0GMOTY == "OR") /* Overrrun*/
    if (FF0GW00.FF0GWBYM >= FF0GW00.FF0GWBCY) /* buy mo > = sched buy mo*/
      FFWREC.XXXMODID = "590"; /* Module identification*/
      converseLib.validationFailed(478); /* Indicate required field*/
      set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/
    end
  end

  /* ------------------------------------------------------------*/
  /* VERIFY THAT BUY MONTH GE MAIN BUY MONTH FOR 'PR' AND 'EO'*/
  /* ------------------------------------------------------------*/
  /*  */
  /* IF FF0GM001.FF0GMOTY = 'PR'      /* Preadvice*/
  /* OR FF0GM001.FF0GMOTY = 'EO';   /* Early Order*/
  /* ;/* NEXT SENTENCE*/
  /* ELSE;*/
  /* EZERTN;*/
  /* END;*/
  /*  */
  /* ------------------------------------------------------------*/
  /* Verify that buy date for 'EO' or 'PR' is greater than or*/
  /* equal to scheduling buy date.*/
  /* Verify that not past scheduling cutoff for 'EO' or 'PR'*/
  /* if buy month = scheduling buy month*/
  /* ------------------------------------------------------------*/
  /* FF0GW00.FF0GWBYM GT FF0GW00.FF0GWBCY;*/
  /* /* our buy GT sched buy dt*/
  /* EZERTN;*/
  /* END;*/
  /* ;*/
  /* IF FF0GW00.FF0GWBYM = FF0GW00.FF0GWBCY;  /* buy = sched buy dat*/
  /* IF XX0XW01.XX0XWDAT GE FB9REC.FB9COFDT;/* current date GE cutoff*/
  /* IF XX0XW01.XX0XWDAT EQ FB9REC.FB9COFDT;/* current dt eq cutoff*/
  /* IF XX0XW01.XX0XWTIM GT FB9REC.FB9COFTM;/* curr tm gt cutoff*/
  /* MOVE '590' TO FFWREC.XXXMODID;/* Module identification*/
  /* MOVE 480 TO EZEMNO;/* Indicate required field*/
  /* SET FF0GM001.FF0GMOTY CURSOR,BRIGHT;/* Highlighted*/
  /* END;*/
  /* ELSE;*/
  /* MOVE '590' TO FFWREC.XXXMODID;/* Module identification*/
  /* MOVE 480 TO EZEMNO;  /* Indicate required field*/
  /* SET FF0GM001.FF0GMOTY CURSOR,BRIGHT;/* Highlighted*/
  /* END;*/
  /* END;*/
  /* END;*/
  /* ;*/
  /* IF FF0GW00.FF0GWBYM LT FF0GW00.FF0GWBCY; /* buy LT sched buy date*/
  /* MOVE '590' TO FFWREC.XXXMODID;/* Module identification*/
  /* MOVE 479 TO EZEMNO;          /* Indicate required field*/
  /* SET FF0GM001.FF0GMBMO CURSOR,BRIGHT;/* Highlighted*/
  /* END;*/
end // end FF0G590

// Process valid input request
Function FF0G600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0GW00.FF0GWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Save the search information in FF system COMMAREA.*/
   /* ------------------------------------------------------------*/

  FFWREC.XPLCD = FF0GM001.XPLCD;
  FFWREC.YPGCD = FF0GM001.YPGCD;
  FFWREC.XPCCD = FF0GM001.XPCCD;
  FFWREC.SY1STNBR = FF0GM001.SY1STNBR;
  FFWREC.SY1SSTNM = FF0GM001.SY1SSTNM;
  FFWREC.SY2CLRID = FF0GM001.SY2CLRID;
  FFWREC.SY2CLRAB = FF0GM001.SY2CLRAB;
  FFWREC.XDMCD = FF0GM001.XDMCD;
  FFWREC.XPLABRV = FF0GM001.XPLABRV;
  FFWREC.YPGABRV = FF0GM001.YPGABRV;
  FFWREC.XPCABRV = FF0GM001.XPCABRV;
  FF0GW01.FF0GMSBF = FF0GM001.FF0GMSBF;
  FF0GW01.FF0GMSCD = FF0GM001.FF0GMSCD;
  FF0GW01.FF0GMOTY = FF0GM001.FF0GMOTY;
  FF0GW01.FF0GWCBW = FF0GM001.FF0GMCBW;

   /* ------------------------------------------------------------*/
   /* Submit a buy for a line, a category of products or a*/
   /* single product if submit buy flag is 'y', and enter was*/
   /* pressed twice without any of the may fields changing.*/
   /* ------------------------------------------------------------*/

  if (FF0GW01.FF0GMSBF == "Y") /* Submit buy flag is 'Y'*/
    if (FF0GW00.FF0GW-ENTER-FLG-1X == "Y"
     && FF0GW00.FF0GW-ENTER-FLG-2X == "Y")

      if (FF0GM001.XPLCD == FF0GW00.FF0GW-SAVE-LINE-CD
       && FF0GM001.YPGCD == FF0GW00.FF0GW-SAVE-TYP-GRP
       && FF0GM001.XPCCD == FF0GW00.FF0GW-SAVE-CATG-CD
       && FF0GM001.SY1STNBR == FF0GW00.FF0GW-SAVE-STY-NBR
       && FF0GM001.SY2CLRID == FF0GW00.FF0GW-SAVE-CLR-CD
       && FF0GM001.XDMCD == FF0GW00.FF0GW-SAVE-DIM-CD
       && FF0GM001.FF0GMBMO == FF0GW00.FF0GW-SAVE-ACTL-BUY-MO
       && FF0GM001.FF0GMSBF == FF0GW00.FF0GW-SAVE-SUBMIT-BUY-FL
       && FF0GM001.FF0GMOTY == FF0GW00.FF0GW-SAVE-OA-TYPE
       && FF0GM001.FF0GMSCD == FF0GW00.FF0GW-SAVE-SCHD-CMNT
       && FF0GM001.FF0GMCBW == FF0GW00.FF0GW-SAVE-CRT-BUY-WRK-FL)

        FF0G630(); /* Submit a batch job*/

      else
        FF0GW00.FF0GW-ENTER-FLG-1X = "N"; /* reset enter pressed once*/
        FF0GW00.FF0GW-ENTER-FLG-2X = "N"; /* and twice flags*/
        FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
        FFWREC.XXXMODID = "600"; /* Module identification*/
        converseLib.validationFailed(499); /* fields can not be changed*/
        if (FF0GM001.XPLCD != FF0GW00.FF0GW-SAVE-LINE-CD)
          set FF0GM001.XPLCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.YPGCD != FF0GW00.FF0GW-SAVE-TYP-GRP)
          set FF0GM001.YPGCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.XPCCD != FF0GW00.FF0GW-SAVE-CATG-CD)
          set FF0GM001.XPCCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.SY1STNBR != FF0GW00.FF0GW-SAVE-STY-NBR)
          set FF0GM001.SY1STNBR cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.SY2CLRID != FF0GW00.FF0GW-SAVE-CLR-CD)
          set FF0GM001.SY2CLRID cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.XDMCD != FF0GW00.FF0GW-SAVE-DIM-CD)
          set FF0GM001.XDMCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMBMO != FF0GW00.FF0GW-SAVE-ACTL-BUY-MO)
          set FF0GM001.FF0GMBMO cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMSBF != FF0GW00.FF0GW-SAVE-SUBMIT-BUY-FL)
          set FF0GM001.FF0GMSBF cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMOTY != FF0GW00.FF0GW-SAVE-OA-TYPE)
          set FF0GM001.FF0GMOTY cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMSCD != FF0GW00.FF0GW-SAVE-SCHD-CMNT)
          set FF0GM001.FF0GMSCD cursor, bold; /* Highlighted*/
        end
        if (FF0GM001.FF0GMCBW != FF0GW00.FF0GW-SAVE-CRT-BUY-WRK-FL)
          set FF0GM001.FF0GMCBW cursor, bold; /* Highlighted*/
        end
      end
    end
  end


end // end FF0G600

// Submit a batch job to do a buy
Function FF0G630()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF0G631(); /* format production jcl*/
    else
      FF0G632(); /* format development jcl*/
    end
    FF0GW00.FF0GW-ENTER-FLG-1X = "N";
    FF0GW00.FF0GW-ENTER-FLG-2X = "N";
    FF0GW00.FF0GW-COMP-PROG-STY-FL = "N";
    FF0GW00.FF0GW-SAVE-LINE-CD = " ";
    FF0GW00.FF0GW-SAVE-TYP-GRP = " ";
    FF0GW00.FF0GW-SAVE-CATG-CD = " ";
    FF0GW00.FF0GW-SAVE-STY-NBR = " ";
    FF0GW00.FF0GW-SAVE-CLR-CD = " ";
    FF0GW00.FF0GW-SAVE-DIM-CD = " ";
    FF0GW00.FF0GW-SAVE-ACTL-BUY-MO = 0;
    FF0GW00.FF0GW-SAVE-SUBMIT-BUY-FL = " ";
    FF0GW00.FF0GW-SAVE-OA-TYPE = " ";
    FF0GW00.FF0GW-SAVE-SCHD-CMNT = " ";
    FF0GW00.FF0GW-SAVE-CRT-BUY-WRK-FL = " ";

  else

    FFWREC.XXXMODID = "630"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end


end // end FF0G630

// Submit prod FF1601 JCL
Function FF0G631()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0GT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF0GW00.XPLCD = FF0GM001.XPLCD; /* Product line*/
      FF0GW00.YPGCD = FF0GM001.YPGCD; /* Type group*/
      FF0GW00.XPCCD = FF0GM001.XPCCD; /* Category*/
      FF0GW00.SY1STNBR = FF0GM001.SY1STNBR; /* Style number*/
      FF0GW00.SY2CLRID = FF0GM001.SY2CLRID; /* Color id*/
      FF0GW00.XDMCD = FF0GM001.XDMCD; /* Dimension code*/
      FF0GW00.FF0GWBMO = FF0GW00.FF0GWBYM; /* Actual buy month*/
      FF0GW00.CAUSERID = COMMAREA.CAUSERID; /* User id*/
      FF0GW00.FF0GWOTY = FF0GM001.FF0GMOTY; /* O/A type*/
      FF0GW00.FF0GWCBW = FF0GM001.FF0GMCBW; /* Creat buy wrkst*/

      if (FF0GW00.FF0GWCBW == "Y")
        FF0GW00.FF0GWSCD = " "; /* Sched cmt*/
      else
        FF0GW00.FF0GWSCD = FF0GM001.FF0GMSCD; /* Sched cmt*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF0GW00.TARJCL; /* Parameters*/

      /* ------------------------------------------------------------*/
       /* Save the parm data to later verify that same buy not submit*/
      /* ------------------------------------------------------------*/

      FF0GW01.FF0GWSTY = FF0GM001.SY1STNBR; /* Style number*/
      FF0GW01.FF0GWCLR = FF0GM001.SY2CLRID; /* Color id*/
      FF0GW01.FF0GWDIM = FF0GM001.XDMCD; /* Dimension code*/
      FF0GW01.FF0GWBUY = FF0GW00.FF0GWBYM; /* Actual buy month*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0GT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0GT.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0GT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/
    FF0GW01.FF0GMSBF = "N"; /* Set submit buy back to "N"*/
    FF0GM001.FF0GMSBF = "N"; /* Set submit buy back to "N"*/
    FF0GW01.FF0GWCBW = "N"; /* Set create buy wrk only to 'N'*/
    FF0GM001.FF0GMCBW = "N"; /* Set create buy wrk only to 'N'*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    FFWREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/

  end


end // end FF0G631

// Submit test FF1601 JCL
Function FF0G632()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0GT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF0GW00.XPLCD = FF0GM001.XPLCD; /* Product line*/
      FF0GW00.YPGCD = FF0GM001.YPGCD; /* Type group*/
      FF0GW00.XPCCD = FF0GM001.XPCCD; /* Category*/
      FF0GW00.SY1STNBR = FF0GM001.SY1STNBR; /* Style number*/
      FF0GW00.SY2CLRID = FF0GM001.SY2CLRID; /* Color id*/
      FF0GW00.XDMCD = FF0GM001.XDMCD; /* Dimension code*/
      FF0GW00.FF0GWBMO = FF0GW00.FF0GWBYM; /* Actual buy month*/
      FF0GW00.CAUSERID = COMMAREA.CAUSERID; /* User id*/
      FF0GW00.FF0GWOTY = FF0GM001.FF0GMOTY; /* O/A type*/
      FF0GW00.FF0GWCBW = FF0GM001.FF0GMCBW; /* Creat buy wrkst*/

      if (FF0GW00.FF0GWCBW == "Y")
        FF0GW00.FF0GWSCD = " "; /* Sched cmt*/
      else
        FF0GW00.FF0GWSCD = FF0GM001.FF0GMSCD; /* Sched cmt*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF0GW00.TARJCL; /* Parameters*/

      /* ------------------------------------------------------------*/
       /* Save the parm data to later verify that same buy not submit*/
      /* ------------------------------------------------------------*/

      FF0GW01.FF0GWSTY = FF0GM001.SY1STNBR; /* Style number*/
      FF0GW01.FF0GWCLR = FF0GM001.SY2CLRID; /* Color id*/
      FF0GW01.FF0GWDIM = FF0GM001.XDMCD; /* Dimension code*/
      FF0GW01.FF0GWBUY = FF0GW00.FF0GWBYM; /* Actual buy month*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0GT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0GT5O.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0GT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "632"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/
    FF0GW01.FF0GMSBF = "N"; /* Set submit buy back to "N"*/
    FF0GM001.FF0GMSBF = "N"; /* Set submit buy back to "N"*/
    FF0GW01.FF0GWCBW = "N"; /* Set create buy wrk flag to 'N'*/
    FF0GM001.FF0GMCBW = "N"; /* Set create buy wrk flag to 'N'*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    FFWREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/

  end


end // end FF0G632

// Check for exit w/o buy
Function FF0GS05()
   /* **************************************/
   /* Check for exiting without buy*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* Same function key?*/
    if (FF0GW00.FF0GWEXT == 3)
      FF0GW00.FF0GWEXT = 0;
      return;
    else
      FF0GW00.FF0GWEXT = 3; /* Exit changed...*/
      converseLib.validationFailed(362); /* Warn user about lost updates*/
    end
  end

  if (converseVar.eventKey is pf5) /* Same function key?*/
    if (FF0GW00.FF0GWEXT == 5)
      FF0GW00.FF0GWEXT = 0;
      return;
    else
      FF0GW00.FF0GWEXT = 5; /* Exit changed...*/
      converseLib.validationFailed(362); /* Warn user about lost updates*/
    end
  end

  if (converseVar.eventKey is pf13) /* Same function key?*/
    if (FF0GW00.FF0GWEXT == 13)
      FF0GW00.FF0GWEXT = 0;
      return;
    else
      FF0GW00.FF0GWEXT = 13; /* Exit changed...*/
      converseLib.validationFailed(362); /* Warn user about lost updates*/
    end
  end

  if (converseVar.eventKey is pf14) /* Same function key?*/
    if (FF0GW00.FF0GWEXT == 14)
      FF0GW00.FF0GWEXT = 0;
      return;
    else
      FF0GW00.FF0GWEXT = 14; /* Exit changed...*/
      converseLib.validationFailed(362); /* Warn user about lost updates*/
    end
  end

  if (converseVar.eventKey is pf15) /* Same function key?*/
    if (FF0GW00.FF0GWEXT == 15)
      FF0GW00.FF0GWEXT = 0;
      return;
    else
      FF0GW00.FF0GWEXT = 15; /* Exit changed...*/
      converseLib.validationFailed(362); /* Warn user about lost updates*/
    end
  end

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    if (FF0GW00.FF0GWEXT == 99)
      FF0GW00.FF0GWEXT = 0;
      return;
    else
      if (FF0GM001.CATOAP != " ")
        FF0GW00.FF0GWEXT = 99; /* Exit changed...*/
        converseLib.validationFailed(362); /* Warn user about lost updates*/
      end
    end
  end

end // end FF0GS05

//*** RECORD=FF0GW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0GW00 type basicRecord
  10 FF0GWEXT FF0GWEXT ; 
  10 FF0GWSWF FF0GWSWF ; 
  10 FF0GWSWR FF0GWSWR ; 
  10 FF0GWIXM FF0GWIXM ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFQMBYMO FFQMBYMO ; 
  10 FF1FUTDT FF1FUTDT ; 
  10 FF0GWBYM FF0GWBYM ; 
  10 FF0GWMBY FF0GWMBY ; 
  10 TARJCL TARJCL ; 
    15 YPGCD YPGCD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 FF0GWBMO FF0GWBMO ; 
    15 CAUSERID CAUSERID ; 
    15 FF0GWSCD FF0GWSCD ; 
    15 FF0GWOTY FF0GWOTY ; 
    15 FF0GWCBW FF0GWCBW ; 
    15 * char(16) ; 
  10 FF0GWWBD FF0GWWBD ; 
    15 FF0GWWBM FF0GWWBM ; 
    15 * num(2) ; 
  10 FF0GWBDT FF0GWBDT ; 
    15 FF0GWBCY FF0GWBCY ; 
      20 FF0GWSCC FF0GWSCC ; 
      20 FF0GWSMO FF0GWSMO ; 
    15 FF0GWBDD FF0GWBDD ; 
  10 * char(1) ; 
  10 FF0GWWMO FF0GWWMO ; 
    15 FF0GWWCC FF0GWWCC ; 
    15 FF0GWWYM FF0GWWYM ; 
      20 FF0GWWYY FF0GWWYY ; 
      20 FF0GWWMM FF0GWWMM ; 
  10 FF0GWCDT FF0GWCDT ; 
    15 FF0GWCMO FF0GWCMO ; 
      20 FF0GWCCC FF0GWCCC ; 
      20 FF0GWCYY FF0GWCYY ; 
      20 FF0GWCMM FF0GWCMM ; 
    15 FF0GWCDD FF0GWCDD ; 
  10 XPRCD XPRCD ; 
  10 FF0GW-ENTER-FLG-1X FF0GW-ENTER-FLG-1X ; 
  10 FF0GW-ENTER-FLG-2X FF0GW-ENTER-FLG-2X ; 
  10 FF0GW-SAVE-LINE-CD FF0GW-SAVE-LINE-CD ; 
  10 FF0GW-SAVE-TYP-GRP FF0GW-SAVE-TYP-GRP ; 
  10 FF0GW-SAVE-CATG-CD FF0GW-SAVE-CATG-CD ; 
  10 FF0GW-SAVE-STY-NBR FF0GW-SAVE-STY-NBR ; 
  10 FF0GW-SAVE-CLR-CD FF0GW-SAVE-CLR-CD ; 
  10 FF0GW-SAVE-DIM-CD FF0GW-SAVE-DIM-CD ; 
  10 FF0GW-SAVE-ACTL-BUY-MO FF0GW-SAVE-ACTL-BUY-MO ; 
  10 FF0GW-SAVE-SUBMIT-BUY-FL FF0GW-SAVE-SUBMIT-BUY-FL ; 
  10 FF0GW-SAVE-OA-TYPE FF0GW-SAVE-OA-TYPE ; 
  10 FF0GW-SAVE-SCHD-CMNT FF0GW-SAVE-SCHD-CMNT ; 
  10 FF0GW-COMP-PROG-STY-FL FF0GW-COMP-PROG-STY-FL ; 
  10 FF0GW-PC-PO-ID-MO-RNG FF0GW-PC-PO-ID-MO-RNG ; 
    15 FF0GW-PC-PO-ID-FILLER FF0GW-PC-PO-ID-FILLER ; 
    15 FF0GW-PC-PO-ID-CCYYMM FF0GW-PC-PO-ID-CCYYMM ; 
      20 FF0GW-PC-PO-ID-CCYY FF0GW-PC-PO-ID-CCYY ; 
        25 FF0GW-PC-PO-ID-CC FF0GW-PC-PO-ID-CC ; 
        25 FF0GW-PC-PO-ID-YY FF0GW-PC-PO-ID-YY ; 
      20 FF0GW-PC-PO-ID-PM FF0GW-PC-PO-ID-PM ; 
    15 FF0GW-PC-PO-ID-DM FF0GW-PC-PO-ID-DM ; 
  10 FF0GW-SAVE-CRT-BUY-WRK-FL FF0GW-SAVE-CRT-BUY-WRK-FL ; 
  10 FF0GW-BUY-DATE FF0GW-BUY-DATE ; 
    15 FF0GW-BUY-CCYYMM FF0GW-BUY-CCYYMM ; 
    15 FF0GW-BUY-DAY FF0GW-BUY-DAY ; 
end // end FF0GW00

//*** RECORD=FF0GW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0GW01 type basicRecord
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 FF0GWBMO FF0GWBMO ; 
    15 FF0GWBCC FF0GWBCC ; 
    15 FF0GMBMO FF0GMBMO ; 
  10 FF0GMSBF FF0GMSBF ; 
  10 FF0GMOTY FF0GMOTY ; 
  10 FF0GMSCD FF0GMSCD ; 
  10 FF0GMFDT FF0GMFDT ; 
  10 * char(1) ; 
  10 FF0GWSTY FF0GWSTY ; 
  10 FF0GWCLR FF0GWCLR ; 
  10 FF0GWDIM FF0GWDIM ; 
  10 FF0GWBUY FF0GWBUY ; 
  10 FF0GWCBW FF0GWCBW ; 
  10 FF0GMFTM FF0GMFTM ; 
  10 FF0GWFTM FF0GWFTM ; 
  10 FF0GW-PO-EXIST FF0GW-PO-EXIST ; 
  10 FF0GW-DEAD-ZONE-MSG FF0GW-DEAD-ZONE-MSG ; 
end // end FF0GW01

Record FF0GW02 type basicRecord
  10 FF0GW-FUNC FF0GW-FUNC ; 
  10 FF0GW-AUTOLOAD-CNT FF0GW-AUTOLOAD-CNT ; 
end // end FF0GW02

// Buy month
DataItem FF0GMBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Future cutoff date
DataItem FF0GMFDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SCHEDULE CUTOFF TIME
DataItem FF0GMFTM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// O/A type
DataItem FF0GMOTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Submit buy flag
DataItem FF0GMSBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style scheduling comment
DataItem FF0GMSCD char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summary count
DataItem FF0GW-AUTOLOAD-CNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0GW-BUY-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0GW-BUY-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0GW-BUY-DAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// component program style flag
DataItem FF0GW-COMP-PROG-STY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0GW-DEAD-ZONE-MSG char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// enter pressed once flag
DataItem FF0GW-ENTER-FLG-1X char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// enter pressed twice flag
DataItem FF0GW-ENTER-FLG-2X char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i/o select funct
DataItem FF0GW-FUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat actual buy cc
DataItem FF0GW-PC-PO-ID-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformat actual buy ccyymm
DataItem FF0GW-PC-PO-ID-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformat actual buy ccyymm
DataItem FF0GW-PC-PO-ID-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformat actual buy dm
DataItem FF0GW-PC-PO-ID-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0GW-PC-PO-ID-FILLER num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformat actual buy mo
DataItem FF0GW-PC-PO-ID-MO-RNG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformat actual buy pm
DataItem FF0GW-PC-PO-ID-PM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformat actual buy yy
DataItem FF0GW-PC-PO-ID-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0GW-PO-EXIST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Actual buy month--from map
DataItem FF0GW-SAVE-ACTL-BUY-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XPC_PROD_CAT_CD
DataItem FF0GW-SAVE-CATG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem FF0GW-SAVE-CLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0GW-SAVE-CRT-BUY-WRK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem FF0GW-SAVE-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPL_PROD_LN_CD
DataItem FF0GW-SAVE-LINE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OA type
DataItem FF0GW-SAVE-OA-TYPE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduling comments
DataItem FF0GW-SAVE-SCHD-CMNT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem FF0GW-SAVE-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// submitted buy flag
DataItem FF0GW-SAVE-SUBMIT-BUY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YPG_PDTYP_GRP_CD
DataItem FF0GW-SAVE-TYP-GRP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century
DataItem FF0GWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Scheduling buy ccyymm
DataItem FF0GWBCY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Scheduling buy dd
DataItem FF0GWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Scheduling buy ccyymmdd
DataItem FF0GWBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Actual buy month
DataItem FF0GWBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "prev" - buy month
DataItem FF0GWBUY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Actual buy month
DataItem FF0GWBYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0GWCBW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// contp century
DataItem FF0GWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// contp day
DataItem FF0GWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// contp ccyymmdd
DataItem FF0GWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "prev" - identifying color
DataItem FF0GWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// contp month
DataItem FF0GWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// contp ccyymm
DataItem FF0GWCMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// contp year
DataItem FF0GWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "prev" - dimension code
DataItem FF0GWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf key warning flag
DataItem FF0GWEXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0GWFTM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season index
DataItem FF0GWIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Main buy month save CCYYMM
DataItem FF0GWMBY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// O/A type
DataItem FF0GWOTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Scheduling buy cc
DataItem FF0GWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style sched comment
DataItem FF0GWSCD char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Scheduling buy yymm
DataItem FF0GWSMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "prev" - style number
DataItem FF0GWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0GWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0GWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work buy date ccyymmdd
DataItem FF0GWWBD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work buy ccyymm
DataItem FF0GWWBM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FF0GWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FF0GWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyymm
DataItem FF0GWWMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yymm
DataItem FF0GWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FF0GWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

